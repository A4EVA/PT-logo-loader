
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x00022024 vaddr 0x00022024 paddr 0x00022024 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0002203c memsz 0x0002203c flags rwx
    LOAD off    0x000300d8 vaddr 0x200000d8 paddr 0x0002203c align 2**16
         filesz 0x0000006c memsz 0x0000006c flags rw-
    LOAD off    0x00030148 vaddr 0x20000148 paddr 0x000220a8 align 2**16
         filesz 0x00000000 memsz 0x0000de40 flags rw-
    LOAD off    0x00040000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              0001a004  00008020  00008020  00008020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  00022024  00022024  00030144  2**0  CONTENTS
  3 .ARM.exidx         00000018  00022024  00022024  00022024  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000000  200000d8  200000d8  00030144  2**0  CONTENTS
  6 .data              0000006c  200000d8  0002203c  000300d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20000144  20000144  00030144  2**0  CONTENTS
  8 .bss               0000de40  20000148  000220a8  00030148  2**3  ALLOC
  9 .stack_dummy       000001b0  2000df88  2000df88  00030148  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000003b  00000000  00000000  000302f8  2**0  CONTENTS, READONLY
 11 .comment           0000007f  00000000  00000000  00030333  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  000303b2  2**0  CONTENTS, READONLY
 13 .debug_line        0004addc  00000000  00000000  000303b6  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        0008a7cf  00000000  00000000  0007b192  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      0000ee71  00000000  00000000  00105961  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     00005ef0  00000000  00000000  001147d8  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         00061885  00000000  00000000  0011a6c8  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00013513  00000000  00000000  0017bf4d  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      0001a398  00000000  00000000  0018f460  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       0000f5b4  00000000  00000000  001a97f8  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_macinfo     00000063  00000000  00000000  001b8dac  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_pubnames    00019c37  00000000  00000000  001b8e0f  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_pubtypes    0003bb52  00000000  00000000  001d2a46  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
00022024 l    d  .ARM.extab	00000000 .ARM.extab
00022024 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
20000144 l    d  .bssnz	00000000 .bssnz
20000148 l    d  .bss	00000000 .bss
2000df88 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
0000820c l     F .text	0000003c errata_16
00008248 l     F .text	0000004c errata_31
00008294 l     F .text	0000003c errata_32
000082d0 l     F .text	0000004c errata_36
0000831c l     F .text	0000003c errata_37
00008358 l     F .text	0000003c errata_57
00008394 l     F .text	0000003c errata_66
000083d0 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 3592ao74dt466zwu
00000d09 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
0005a79c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a6 l       .debug_str	00000000 
0001f49a l       .debug_str	00000000 
00034424 l       .debug_str	00000000 
0005a0b0 l       .debug_str	00000000 
0005a817 l       .debug_str	00000000 
00059ae4 l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
00034451 l       .debug_str	00000000 
00034443 l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
00000e0f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0004ea0f l       .debug_str	00000000 
000399b4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0005cd09 l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
0005bb92 l       .debug_str	00000000 
00000bbf l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
00003ee3 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00034410 l       .debug_str	00000000 
0005f7ca l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394ca l       .debug_str	00000000 
0005cbb3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ed l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a825 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cz1tg82iqprprj5
00001118 l       .debug_str	00000000 
0000126a l       .debug_str	00000000 
000012aa l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00016963 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425e8 l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4a5 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00059eea l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
000602e0 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
0005d82f l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
0003e5fe l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 40zocxwjz4ckzrhd
000012fa l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000132a l       .debug_str	00000000 
0000133d l       .debug_str	00000000 
0000136d l       .debug_str	00000000 
00001398 l       .debug_str	00000000 
000013a1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5k460cii92qewjl
000012f5 l       .debug_str	00000000 
00001433 l       .debug_str	00000000 
0000146f l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
00001478 l       .debug_str	00000000 
0001a538 l       .debug_str	00000000 
000014a3 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00034410 l       .debug_str	00000000 
00001501 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00010a77 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00001412 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001f40e l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001425 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16zjnp1vbo7kc1gp
00000c82 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394ca l       .debug_str	00000000 
0005cbb3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ed l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a825 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
0005a79c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a6 l       .debug_str	00000000 
0001f49a l       .debug_str	00000000 
0000165b l       .debug_str	00000000 
00012625 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cfe0 l       .debug_str	00000000 
000612d3 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00003d16 l       .debug_str	00000000 
000611de l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0004ea0f l       .debug_str	00000000 
000399b4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005fec9 l       .debug_str	00000000 
00001521 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00060e9d l       .debug_str	00000000 
0000152e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
0002219b l       .debug_str	00000000 
00015a9e l       .debug_str	00000000 
00001536 l       .debug_str	00000000 
000017dc l       .debug_str	00000000 
0000153e l       .debug_str	00000000 
000015c3 l       .debug_str	00000000 
000015d9 l       .debug_str	00000000 
0005cd12 l       .debug_str	00000000 
00001600 l       .debug_str	00000000 
0003f8ee l       .debug_str	00000000 
00001628 l       .debug_str	00000000 
00001656 l       .debug_str	00000000 
00001660 l       .debug_str	00000000 
0000168b l       .debug_str	00000000 
00001692 l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
000016ba l       .debug_str	00000000 
0006125e l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
000016e7 l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
0000171b l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
00001783 l       .debug_str	00000000 
0000178c l       .debug_str	00000000 
000017c2 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000017d3 l       .debug_str	00000000 
0000165a l       .debug_str	00000000 
00059c31 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
000017fa l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1oq54qwymghnfn7s
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a79c l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea0f l       .debug_str	00000000 
000399b4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000182a l       .debug_str	00000000 
0005c057 l       .debug_str	00000000 
000018af l       .debug_str	00000000 
0000191c l       .debug_str	00000000 
0000198e l       .debug_str	00000000 
0005ae33 l       .debug_str	00000000 
0005e9b7 l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000019ec l       .debug_str	00000000 
0004ea0e l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ed l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2d0u1dup22f6p5uq
00000d12 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a6 l       .debug_str	00000000 
00001a09 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0004ea0f l       .debug_str	00000000 
000399b4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000394ca l       .debug_str	00000000 
0005cbb3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ed l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a825 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
0005a79c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2q7rzzztqsy7quqz
00003138 l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
00003651 l       .debug_str	00000000 
00003691 l       .debug_str	00000000 
000036df l       .debug_str	00000000 
0000371f l       .debug_str	00000000 
00003746 l       .debug_str	00000000 
00003786 l       .debug_str	00000000 
00003794 l       .debug_str	00000000 
00003803 l       .debug_str	00000000 
0000382e l       .debug_str	00000000 
0000389e l       .debug_str	00000000 
000038b1 l       .debug_str	00000000 
00003921 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000394d l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00016963 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003e5fe l       .debug_str	00000000 
0000395c l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0005abd7 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
00001a42 l       .debug_str	00000000 
00001d90 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425e8 l       .debug_str	00000000 
00001a4b l       .debug_str	00000000 
00001a57 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00001a5f l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00001ab9 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b6d l       .debug_str	00000000 
00001bbc l       .debug_str	00000000 
00001bc6 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c48 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c61 l       .debug_str	00000000 
00001c69 l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001d1b l       .debug_str	00000000 
00001d27 l       .debug_str	00000000 
00001d30 l       .debug_str	00000000 
00001d3c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001d61 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d96 l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4a5 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00059eea l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
000602e0 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001daf l       .debug_str	00000000 
0004f58d l       .debug_str	00000000 
00001dc6 l       .debug_str	00000000 
00001dce l       .debug_str	00000000 
00001dd7 l       .debug_str	00000000 
000031db l       .debug_str	00000000 
00001de0 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0005ff93 l       .debug_str	00000000 
00001de8 l       .debug_str	00000000 
00001df4 l       .debug_str	00000000 
00001dff l       .debug_str	00000000 
00001e07 l       .debug_str	00000000 
0000b1d7 l       .debug_str	00000000 
0000b702 l       .debug_str	00000000 
00001e0f l       .debug_str	00000000 
00001f0b l       .debug_str	00000000 
0000200f l       .debug_str	00000000 
0000201d l       .debug_str	00000000 
00002028 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002055 l       .debug_str	00000000 
00002032 l       .debug_str	00000000 
00002060 l       .debug_str	00000000 
000020db l       .debug_str	00000000 
0000215e l       .debug_str	00000000 
0000216c l       .debug_str	00000000 
000021cb l       .debug_str	00000000 
00002232 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
00002258 l       .debug_str	00000000 
0005e7c9 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00002267 l       .debug_str	00000000 
00024c0c l       .debug_str	00000000 
0000226d l       .debug_str	00000000 
00002273 l       .debug_str	00000000 
00002279 l       .debug_str	00000000 
00002285 l       .debug_str	00000000 
000611ed l       .debug_str	00000000 
0000228d l       .debug_str	00000000 
00002295 l       .debug_str	00000000 
0000229b l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
000022be l       .debug_str	00000000 
000022f1 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
0005e356 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
0000237f l       .debug_str	00000000 
00002385 l       .debug_str	00000000 
000023ae l       .debug_str	00000000 
0000238b l       .debug_str	00000000 
000023c0 l       .debug_str	00000000 
00002402 l       .debug_str	00000000 
0005e23f l       .debug_str	00000000 
0000244c l       .debug_str	00000000 
00002452 l       .debug_str	00000000 
00002458 l       .debug_str	00000000 
00002481 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002493 l       .debug_str	00000000 
000024d5 l       .debug_str	00000000 
0005d703 l       .debug_str	00000000 
0000251f l       .debug_str	00000000 
00002525 l       .debug_str	00000000 
0000252b l       .debug_str	00000000 
00002531 l       .debug_str	00000000 
0000255a l       .debug_str	00000000 
00002537 l       .debug_str	00000000 
0000256b l       .debug_str	00000000 
000025ac l       .debug_str	00000000 
000025f5 l       .debug_str	00000000 
000025fa l       .debug_str	00000000 
0005e58d l       .debug_str	00000000 
000025ff l       .debug_str	00000000 
00002605 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002634 l       .debug_str	00000000 
00002611 l       .debug_str	00000000 
00002645 l       .debug_str	00000000 
00002686 l       .debug_str	00000000 
0005d7bb l       .debug_str	00000000 
000026cf l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
000026d8 l       .debug_str	00000000 
0000270c l       .debug_str	00000000 
0000274d l       .debug_str	00000000 
00002796 l       .debug_str	00000000 
0005e761 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027a4 l       .debug_str	00000000 
000027ab l       .debug_str	00000000 
000027d6 l       .debug_str	00000000 
000027b3 l       .debug_str	00000000 
000027e8 l       .debug_str	00000000 
0000282a l       .debug_str	00000000 
0005e429 l       .debug_str	00000000 
00002874 l       .debug_str	00000000 
0000287a l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
00002886 l       .debug_str	00000000 
0000288c l       .debug_str	00000000 
00002894 l       .debug_str	00000000 
000028a2 l       .debug_str	00000000 
000028b1 l       .debug_str	00000000 
000028c2 l       .debug_str	00000000 
000028cd l       .debug_str	00000000 
000028d8 l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028ea l       .debug_str	00000000 
00002930 l       .debug_str	00000000 
0000290d l       .debug_str	00000000 
00002942 l       .debug_str	00000000 
00002984 l       .debug_str	00000000 
0005d8be l       .debug_str	00000000 
000029ce l       .debug_str	00000000 
000029fb l       .debug_str	00000000 
000029d8 l       .debug_str	00000000 
00002a0d l       .debug_str	00000000 
00002a4f l       .debug_str	00000000 
00002a99 l       .debug_str	00000000 
00002a9e l       .debug_str	00000000 
00002acb l       .debug_str	00000000 
00002aa8 l       .debug_str	00000000 
00002add l       .debug_str	00000000 
00002b1f l       .debug_str	00000000 
00002b69 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00002be8 l       .debug_str	00000000 
00002b7d l       .debug_str	00000000 
00002b8d l       .debug_str	00000000 
00002b96 l       .debug_str	00000000 
00002ba1 l       .debug_str	00000000 
00002bb0 l       .debug_str	00000000 
00002bc5 l       .debug_str	00000000 
00002bf6 l       .debug_str	00000000 
00002c93 l       .debug_str	00000000 
00002d38 l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d4c l       .debug_str	00000000 
00002d90 l       .debug_str	00000000 
00002d6d l       .debug_str	00000000 
00002da3 l       .debug_str	00000000 
00002e26 l       .debug_str	00000000 
00002eb1 l       .debug_str	00000000 
00002ecd l       .debug_str	00000000 
00002f19 l       .debug_str	00000000 
00002f6d l       .debug_str	00000000 
00002f8a l       .debug_str	00000000 
00002f9e l       .debug_str	00000000 
00002fea l       .debug_str	00000000 
0000303e l       .debug_str	00000000 
00003054 l       .debug_str	00000000 
00003068 l       .debug_str	00000000 
000030af l       .debug_str	00000000 
000030fe l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003107 l       .debug_str	00000000 
0000313e l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314d l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
00003155 l       .debug_str	00000000 
0000315d l       .debug_str	00000000 
00033f0f l       .debug_str	00000000 
0000316c l       .debug_str	00000000 
00003df8 l       .debug_str	00000000 
00003177 l       .debug_str	00000000 
00003182 l       .debug_str	00000000 
00003193 l       .debug_str	00000000 
00003199 l       .debug_str	00000000 
000031a1 l       .debug_str	00000000 
000031a8 l       .debug_str	00000000 
000031b2 l       .debug_str	00000000 
000031ba l       .debug_str	00000000 
000031c2 l       .debug_str	00000000 
000031e4 l       .debug_str	00000000 
000031ef l       .debug_str	00000000 
000031fb l       .debug_str	00000000 
00003203 l       .debug_str	00000000 
0000320c l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
00003217 l       .debug_str	00000000 
00003222 l       .debug_str	00000000 
0000322d l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005d82f l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
0000323d l       .debug_str	00000000 
0000324d l       .debug_str	00000000 
0000325c l       .debug_str	00000000 
00003264 l       .debug_str	00000000 
0000326b l       .debug_str	00000000 
00003273 l       .debug_str	00000000 
000032b4 l       .debug_str	00000000 
00003291 l       .debug_str	00000000 
000032c4 l       .debug_str	00000000 
000032d9 l       .debug_str	00000000 
000032e2 l       .debug_str	00000000 
0000333f l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
000033ae l       .debug_str	00000000 
000033be l       .debug_str	00000000 
000033d3 l       .debug_str	00000000 
000033db l       .debug_str	00000000 
0000343f l       .debug_str	00000000 
000034ab l       .debug_str	00000000 
000034b2 l       .debug_str	00000000 
000034ba l       .debug_str	00000000 
000034fb l       .debug_str	00000000 
000034d8 l       .debug_str	00000000 
0000350b l       .debug_str	00000000 
00003520 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
0000354f l       .debug_str	00000000 
00003564 l       .debug_str	00000000 
0000358e l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00003605 l       .debug_str	00000000 
00003644 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2vuqh37eag1b6y30
00003b45 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005cfe0 l       .debug_str	00000000 
000612d3 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00003d16 l       .debug_str	00000000 
000229c8 l       .debug_str	00000000 
00003aba l       .debug_str	00000000 
00003b1d l       .debug_str	00000000 
00003bc3 l       .debug_str	00000000 
00003c53 l       .debug_str	00000000 
00003c69 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00003cf0 l       .debug_str	00000000 
00003cff l       .debug_str	00000000 
0005a698 l       .debug_str	00000000 
00003d21 l       .debug_str	00000000 
00016201 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00012625 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00003979 l       .debug_str	00000000 
00003a03 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0005ab3d l       .debug_str	00000000 
00003a1b l       .debug_str	00000000 
00003ab0 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f4c4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3l5pa7f4r4pjxp5p
000049f0 l       .debug_str	00000000 
00004a1d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00004a3c l       .debug_str	00000000 
00004a70 l       .debug_str	00000000 
00004a57 l       .debug_str	00000000 
00004a78 l       .debug_str	00000000 
00004a8e l       .debug_str	00000000 
00004af6 l       .debug_str	00000000 
00004b6e l       .debug_str	00000000 
00004b9b l       .debug_str	00000000 
00004bb3 l       .debug_str	00000000 
00004c1d l       .debug_str	00000000 
00004c25 l       .debug_str	00000000 
00004c2b l       .debug_str	00000000 
00004c35 l       .debug_str	00000000 
00004caf l       .debug_str	00000000 
00004d1b l       .debug_str	00000000 
00004d94 l       .debug_str	00000000 
00004e0d l       .debug_str	00000000 
00004e78 l       .debug_str	00000000 
00004ee7 l       .debug_str	00000000 
00004eee l       .debug_str	00000000 
00004ef9 l       .debug_str	00000000 
00004f21 l       .debug_str	00000000 
00004f96 l       .debug_str	00000000 
00005013 l       .debug_str	00000000 
00004f12 l       .debug_str	00000000 
0000501f l       .debug_str	00000000 
00001daf l       .debug_str	00000000 
00005096 l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
0004f58d l       .debug_str	00000000 
00001dc6 l       .debug_str	00000000 
00001dce l       .debug_str	00000000 
00001dd7 l       .debug_str	00000000 
000031db l       .debug_str	00000000 
000050ff l       .debug_str	00000000 
0000517d l       .debug_str	00000000 
000051ed l       .debug_str	00000000 
00005267 l       .debug_str	00000000 
00005281 l       .debug_str	00000000 
000052ed l       .debug_str	00000000 
000052f6 l       .debug_str	00000000 
00005302 l       .debug_str	00000000 
00005378 l       .debug_str	00000000 
000053ee l       .debug_str	00000000 
00005464 l       .debug_str	00000000 
000054cc l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
0000553b l       .debug_str	00000000 
00000a4f l       .debug_str	00000000 
000055a8 l       .debug_str	00000000 
0000561d l       .debug_str	00000000 
00005632 l       .debug_str	00000000 
00005699 l       .debug_str	00000000 
000056a2 l       .debug_str	00000000 
000056ad l       .debug_str	00000000 
000056b4 l       .debug_str	00000000 
0005bb9a l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
0003e5fe l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
000056e9 l       .debug_str	00000000 
0005b5d3 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
00005723 l       .debug_str	00000000 
0005b47a l       .debug_str	00000000 
00060911 l       .debug_str	00000000 
00005756 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
00005763 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00060e9d l       .debug_str	00000000 
0000152e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
0002219b l       .debug_str	00000000 
00015a9e l       .debug_str	00000000 
00001536 l       .debug_str	00000000 
000017dc l       .debug_str	00000000 
000017d3 l       .debug_str	00000000 
00005784 l       .debug_str	00000000 
00005789 l       .debug_str	00000000 
0000578e l       .debug_str	00000000 
00005793 l       .debug_str	00000000 
00005798 l       .debug_str	00000000 
0000579d l       .debug_str	00000000 
000057a8 l       .debug_str	00000000 
000057b3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425e8 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00003d2b l       .debug_str	00000000 
00013624 l       .debug_str	00000000 
00003d9f l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0000314d l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
00003dab l       .debug_str	00000000 
00003dd1 l       .debug_str	00000000 
0000315d l       .debug_str	00000000 
00033f0f l       .debug_str	00000000 
0000316c l       .debug_str	00000000 
00003df8 l       .debug_str	00000000 
00003ddd l       .debug_str	00000000 
00003e04 l       .debug_str	00000000 
00003e0f l       .debug_str	00000000 
00003e1a l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
00003ed4 l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00003eb2 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00003eb9 l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00003ee8 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00003f45 l       .debug_str	00000000 
00003faa l       .debug_str	00000000 
00003fb2 l       .debug_str	00000000 
00003fd4 l       .debug_str	00000000 
00003fbb l       .debug_str	00000000 
00003fec l       .debug_str	00000000 
00004012 l       .debug_str	00000000 
0000408a l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005d82f l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
00004101 l       .debug_str	00000000 
0000416a l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
000041e2 l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4a5 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00059eea l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
000602e0 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
0000424c l       .debug_str	00000000 
000042c5 l       .debug_str	00000000 
0006090f l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
000042ca l       .debug_str	00000000 
00000aa4 l       .debug_str	00000000 
000042f0 l       .debug_str	00000000 
000042d7 l       .debug_str	00000000 
000042d2 l       .debug_str	00000000 
000042fb l       .debug_str	00000000 
00004314 l       .debug_str	00000000 
0000437f l       .debug_str	00000000 
00000896 l       .debug_str	00000000 
00000ad4 l       .debug_str	00000000 
000043ef l       .debug_str	00000000 
000043ff l       .debug_str	00000000 
00004477 l       .debug_str	00000000 
0005b12a l       .debug_str	00000000 
0005ae84 l       .debug_str	00000000 
00004481 l       .debug_str	00000000 
00004488 l       .debug_str	00000000 
000044ab l       .debug_str	00000000 
00004492 l       .debug_str	00000000 
0000448d l       .debug_str	00000000 
000044b5 l       .debug_str	00000000 
000044cd l       .debug_str	00000000 
00004537 l       .debug_str	00000000 
00001a4b l       .debug_str	00000000 
00001a57 l       .debug_str	00000000 
00001a5f l       .debug_str	00000000 
00001ab9 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b6d l       .debug_str	00000000 
00001bbc l       .debug_str	00000000 
00001bc6 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c48 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c61 l       .debug_str	00000000 
00001c69 l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001d1b l       .debug_str	00000000 
00001d27 l       .debug_str	00000000 
00001d30 l       .debug_str	00000000 
00001d3c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d61 l       .debug_str	00000000 
000045ac l       .debug_str	00000000 
00004613 l       .debug_str	00000000 
0000468e l       .debug_str	00000000 
0000469e l       .debug_str	00000000 
000046a7 l       .debug_str	00000000 
000046b5 l       .debug_str	00000000 
000046c3 l       .debug_str	00000000 
000046cf l       .debug_str	00000000 
000048dd l       .debug_str	00000000 
000046db l       .debug_str	00000000 
000046ea l       .debug_str	00000000 
000046f2 l       .debug_str	00000000 
0000470b l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
0000471c l       .debug_str	00000000 
00004724 l       .debug_str	00000000 
00004757 l       .debug_str	00000000 
0000473e l       .debug_str	00000000 
00004763 l       .debug_str	00000000 
00001d54 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00004795 l       .debug_str	00000000 
0000477c l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047c2 l       .debug_str	00000000 
000047a9 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047ea l       .debug_str	00000000 
00004857 l       .debug_str	00000000 
000048d4 l       .debug_str	00000000 
000048dc l       .debug_str	00000000 
00004b8c l       .debug_str	00000000 
00004b73 l       .debug_str	00000000 
000048e6 l       .debug_str	00000000 
00004903 l       .debug_str	00000000 
00004972 l       .debug_str	00000000 
000049e8 l       .debug_str	00000000 
000049f9 l       .debug_str	00000000 
00004a07 l       .debug_str	00000000 
00004a0e l       .debug_str	00000000 
00004a15 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 413mqmtb04w1hzsl
000077a3 l       .debug_str	00000000 
00009b75 l       .debug_str	00000000 
00009dbe l       .debug_str	00000000 
0000a024 l       .debug_str	00000000 
00030db1 l       .debug_str	00000000 
00021909 l       .debug_str	00000000 
0000a289 l       .debug_str	00000000 
0000a2b9 l       .debug_str	00000000 
0000a517 l       .debug_str	00000000 
0000136d l       .debug_str	00000000 
0000a547 l       .debug_str	00000000 
0000a551 l       .debug_str	00000000 
0000a5aa l       .debug_str	00000000 
000013a1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000a54c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000057b8 l       .debug_str	00000000 
000057e8 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006012b l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c249 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035923 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac2c l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000590a l       .debug_str	00000000 
00005958 l       .debug_str	00000000 
000059c3 l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
0005ab3d l       .debug_str	00000000 
00030d3d l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00021b5d l       .debug_str	00000000 
00005a2d l       .debug_str	00000000 
00005a5d l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00005b05 l       .debug_str	00000000 
00005b73 l       .debug_str	00000000 
00005c0a l       .debug_str	00000000 
00005cca l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005ec5 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
00006164 l       .debug_str	00000000 
000062f1 l       .debug_str	00000000 
000064a7 l       .debug_str	00000000 
00006686 l       .debug_str	00000000 
0000688e l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000094f8 l       .debug_str	00000000 
0000971c l       .debug_str	00000000 
0000994d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n7qec2sa6vjglqv
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a825 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
0005a79c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a6 l       .debug_str	00000000 
0001f49a l       .debug_str	00000000 
0005a669 l       .debug_str	00000000 
0005ae33 l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
000611de l       .debug_str	00000000 
0000ac10 l       .debug_str	00000000 
0000ac19 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0004ea0f l       .debug_str	00000000 
000399b4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000a7fe l       .debug_str	00000000 
0000b122 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
0000a835 l       .debug_str	00000000 
0000a888 l       .debug_str	00000000 
000229c8 l       .debug_str	00000000 
0000a89c l       .debug_str	00000000 
0000a8e2 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
0000a8f0 l       .debug_str	00000000 
0000a937 l       .debug_str	00000000 
0000a940 l       .debug_str	00000000 
0000a989 l       .debug_str	00000000 
0000579d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
00003d21 l       .debug_str	00000000 
0000a995 l       .debug_str	00000000 
0000aa11 l       .debug_str	00000000 
000612d3 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00003cf0 l       .debug_str	00000000 
0000aa3b l       .debug_str	00000000 
0000aab7 l       .debug_str	00000000 
0000aae6 l       .debug_str	00000000 
0000ab6c l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00035769 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013614 l       .debug_str	00000000 
0000ab94 l       .debug_str	00000000 
0000abf6 l       .debug_str	00000000 
0005c249 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0002219b l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000160dc l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0000abfe l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394ca l       .debug_str	00000000 
0005cbb3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ed l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4oqy1cznfkuv6rc
0005cff5 l       .debug_str	00000000 
0000ae2c l       .debug_str	00000000 
00059bab l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0005a79c l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
00061623 l       .debug_str	00000000 
00061622 l       .debug_str	00000000 
00060e9d l       .debug_str	00000000 
0000152e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002219b l       .debug_str	00000000 
00015a9e l       .debug_str	00000000 
00001536 l       .debug_str	00000000 
000017dc l       .debug_str	00000000 
000017d3 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00024c0c l       .debug_str	00000000 
00024c11 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000ac20 l       .debug_str	00000000 
00059ace l       .debug_str	00000000 
0000ac24 l       .debug_str	00000000 
0000ac55 l       .debug_str	00000000 
0000ac5b l       .debug_str	00000000 
0000ac9c l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0000acb1 l       .debug_str	00000000 
0000ace8 l       .debug_str	00000000 
0000acf3 l       .debug_str	00000000 
0006012b l       .debug_str	00000000 
0000ad25 l       .debug_str	00000000 
00059c12 l       .debug_str	00000000 
0000ad59 l       .debug_str	00000000 
00059c01 l       .debug_str	00000000 
0000ad8d l       .debug_str	00000000 
00059bb9 l       .debug_str	00000000 
0000adc4 l       .debug_str	00000000 
00059c4b l       .debug_str	00000000 
0000adfc l       .debug_str	00000000 
00059a7c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4qlpitlm4hs8kdcv
00003df8 l       .debug_str	00000000 
0000b173 l       .debug_str	00000000 
0000b19a l       .debug_str	00000000 
0000b1a5 l       .debug_str	00000000 
0000b1cc l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000b1d7 l       .debug_str	00000000 
0000b1d6 l       .debug_str	00000000 
0001f359 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0005abba l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
0005c249 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0000579d l       .debug_str	00000000 
0005db0a l       .debug_str	00000000 
0005ae14 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000ae5d l       .debug_str	00000000 
0000ae86 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
0000ae93 l       .debug_str	00000000 
0000aea5 l       .debug_str	00000000 
0000aeb6 l       .debug_str	00000000 
0000af02 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
0000af0e l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005abd7 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
00001a42 l       .debug_str	00000000 
00001d90 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425e8 l       .debug_str	00000000 
00001a4b l       .debug_str	00000000 
00001a57 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00001a5f l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001ab9 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b6d l       .debug_str	00000000 
00001bbc l       .debug_str	00000000 
00001bc6 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c48 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c61 l       .debug_str	00000000 
00001c69 l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001d1b l       .debug_str	00000000 
00001d27 l       .debug_str	00000000 
00001d30 l       .debug_str	00000000 
00001d3c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001d61 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d96 l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4a5 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00059eea l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
000602e0 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001daf l       .debug_str	00000000 
0004f58d l       .debug_str	00000000 
00001dc6 l       .debug_str	00000000 
00001dce l       .debug_str	00000000 
00001dd7 l       .debug_str	00000000 
000031db l       .debug_str	00000000 
00001de0 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0005ff93 l       .debug_str	00000000 
00001de8 l       .debug_str	00000000 
00001df4 l       .debug_str	00000000 
00001dff l       .debug_str	00000000 
00001e07 l       .debug_str	00000000 
0000af12 l       .debug_str	00000000 
0000b702 l       .debug_str	00000000 
00001e0f l       .debug_str	00000000 
00001f0b l       .debug_str	00000000 
0000200f l       .debug_str	00000000 
0000201d l       .debug_str	00000000 
00002028 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002055 l       .debug_str	00000000 
00002032 l       .debug_str	00000000 
00002060 l       .debug_str	00000000 
000020db l       .debug_str	00000000 
0000215e l       .debug_str	00000000 
0000216c l       .debug_str	00000000 
000021cb l       .debug_str	00000000 
00002232 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
00002258 l       .debug_str	00000000 
0005e7c9 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00002267 l       .debug_str	00000000 
00024c0c l       .debug_str	00000000 
0000226d l       .debug_str	00000000 
00002273 l       .debug_str	00000000 
00002279 l       .debug_str	00000000 
00002285 l       .debug_str	00000000 
000611ed l       .debug_str	00000000 
0000228d l       .debug_str	00000000 
00002295 l       .debug_str	00000000 
0000229b l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
000022be l       .debug_str	00000000 
000022f1 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
0005e356 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
0000237f l       .debug_str	00000000 
00002385 l       .debug_str	00000000 
000023ae l       .debug_str	00000000 
0000238b l       .debug_str	00000000 
000023c0 l       .debug_str	00000000 
00002402 l       .debug_str	00000000 
0005e23f l       .debug_str	00000000 
0000244c l       .debug_str	00000000 
00002452 l       .debug_str	00000000 
00002458 l       .debug_str	00000000 
00002481 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002493 l       .debug_str	00000000 
000024d5 l       .debug_str	00000000 
0005d703 l       .debug_str	00000000 
0000251f l       .debug_str	00000000 
00002525 l       .debug_str	00000000 
0000252b l       .debug_str	00000000 
00002531 l       .debug_str	00000000 
0000255a l       .debug_str	00000000 
00002537 l       .debug_str	00000000 
0000256b l       .debug_str	00000000 
000025ac l       .debug_str	00000000 
000025f5 l       .debug_str	00000000 
000025fa l       .debug_str	00000000 
0005e58d l       .debug_str	00000000 
000025ff l       .debug_str	00000000 
00002605 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002634 l       .debug_str	00000000 
00002611 l       .debug_str	00000000 
00002645 l       .debug_str	00000000 
00002686 l       .debug_str	00000000 
0005d7bb l       .debug_str	00000000 
000026cf l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
000026d8 l       .debug_str	00000000 
0000270c l       .debug_str	00000000 
0000274d l       .debug_str	00000000 
00002796 l       .debug_str	00000000 
0005e761 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027a4 l       .debug_str	00000000 
000027ab l       .debug_str	00000000 
000027d6 l       .debug_str	00000000 
000027b3 l       .debug_str	00000000 
000027e8 l       .debug_str	00000000 
0000282a l       .debug_str	00000000 
0005e429 l       .debug_str	00000000 
00002874 l       .debug_str	00000000 
0000287a l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
00002886 l       .debug_str	00000000 
0000288c l       .debug_str	00000000 
00002894 l       .debug_str	00000000 
000028a2 l       .debug_str	00000000 
000028b1 l       .debug_str	00000000 
000028c2 l       .debug_str	00000000 
000028cd l       .debug_str	00000000 
000028d8 l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028ea l       .debug_str	00000000 
00002930 l       .debug_str	00000000 
0000290d l       .debug_str	00000000 
00002942 l       .debug_str	00000000 
00002984 l       .debug_str	00000000 
0005d8be l       .debug_str	00000000 
000029ce l       .debug_str	00000000 
000029fb l       .debug_str	00000000 
000029d8 l       .debug_str	00000000 
00002a0d l       .debug_str	00000000 
00002a4f l       .debug_str	00000000 
00002a99 l       .debug_str	00000000 
00002a9e l       .debug_str	00000000 
00002acb l       .debug_str	00000000 
00002aa8 l       .debug_str	00000000 
00002add l       .debug_str	00000000 
00002b1f l       .debug_str	00000000 
00002b69 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00002be8 l       .debug_str	00000000 
00002b7d l       .debug_str	00000000 
00002b8d l       .debug_str	00000000 
00002b96 l       .debug_str	00000000 
00002ba1 l       .debug_str	00000000 
00002bb0 l       .debug_str	00000000 
00002bc5 l       .debug_str	00000000 
00002bf6 l       .debug_str	00000000 
00002c93 l       .debug_str	00000000 
00002d38 l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d4c l       .debug_str	00000000 
00002d90 l       .debug_str	00000000 
00002d6d l       .debug_str	00000000 
00002da3 l       .debug_str	00000000 
00002e26 l       .debug_str	00000000 
00002eb1 l       .debug_str	00000000 
00002ecd l       .debug_str	00000000 
00002f19 l       .debug_str	00000000 
00002f6d l       .debug_str	00000000 
00002f8a l       .debug_str	00000000 
00002f9e l       .debug_str	00000000 
00002fea l       .debug_str	00000000 
0000303e l       .debug_str	00000000 
00003054 l       .debug_str	00000000 
00003068 l       .debug_str	00000000 
000030af l       .debug_str	00000000 
000030fe l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003107 l       .debug_str	00000000 
00003138 l       .debug_str	00000000 
0000313e l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314d l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
00003155 l       .debug_str	00000000 
0000315d l       .debug_str	00000000 
00033f0f l       .debug_str	00000000 
0000316c l       .debug_str	00000000 
00003177 l       .debug_str	00000000 
00003182 l       .debug_str	00000000 
00003193 l       .debug_str	00000000 
00003199 l       .debug_str	00000000 
000031a1 l       .debug_str	00000000 
000031a8 l       .debug_str	00000000 
000031b2 l       .debug_str	00000000 
000031ba l       .debug_str	00000000 
000031c2 l       .debug_str	00000000 
000031e4 l       .debug_str	00000000 
000031ef l       .debug_str	00000000 
000031fb l       .debug_str	00000000 
00003203 l       .debug_str	00000000 
0000320c l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
00003217 l       .debug_str	00000000 
00003222 l       .debug_str	00000000 
0000322d l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005d82f l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
0000323d l       .debug_str	00000000 
0000324d l       .debug_str	00000000 
0000325c l       .debug_str	00000000 
00003264 l       .debug_str	00000000 
0000326b l       .debug_str	00000000 
00003273 l       .debug_str	00000000 
000032b4 l       .debug_str	00000000 
00003291 l       .debug_str	00000000 
000032c4 l       .debug_str	00000000 
000032d9 l       .debug_str	00000000 
000032e2 l       .debug_str	00000000 
0000333f l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
000033ae l       .debug_str	00000000 
000033be l       .debug_str	00000000 
000033d3 l       .debug_str	00000000 
000033db l       .debug_str	00000000 
0000343f l       .debug_str	00000000 
000034ab l       .debug_str	00000000 
000034b2 l       .debug_str	00000000 
000034ba l       .debug_str	00000000 
000034fb l       .debug_str	00000000 
000034d8 l       .debug_str	00000000 
0000350b l       .debug_str	00000000 
00003520 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
0000354f l       .debug_str	00000000 
00003564 l       .debug_str	00000000 
0005ab3d l       .debug_str	00000000 
0005ac2c l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0005a937 l       .debug_str	00000000 
0000af1f l       .debug_str	00000000 
0000afd7 l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
0000b03b l       .debug_str	00000000 
0000b071 l       .debug_str	00000000 
0000b08a l       .debug_str	00000000 
0000b0c4 l       .debug_str	00000000 
0000b0e1 l       .debug_str	00000000 
0000b11c l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
0000b139 l       .debug_str	00000000 
0000b143 l       .debug_str	00000000 
0000b169 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z8krxbvbr97ayck
0005f663 l       .debug_str	00000000 
0000b29d l       .debug_str	00000000 
0000b2d9 l       .debug_str	00000000 
0000168b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000b253 l       .debug_str	00000000 
0000b294 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
0002219b l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 54b6z89c74d8bdz1
00003155 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a79c l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0005ae33 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
0001167e l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0000b6ea l       .debug_str	00000000 
0000b6f3 l       .debug_str	00000000 
0001f359 l       .debug_str	00000000 
0000b786 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0000b796 l       .debug_str	00000000 
0000b1d6 l       .debug_str	00000000 
0000b7a1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000a54c l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea0f l       .debug_str	00000000 
000399b4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
0000b318 l       .debug_str	00000000 
0000b360 l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
0003e5fe l       .debug_str	00000000 
0000b37f l       .debug_str	00000000 
0000b3ba l       .debug_str	00000000 
0000b3df l       .debug_str	00000000 
0000b406 l       .debug_str	00000000 
0000b466 l       .debug_str	00000000 
0000b46f l       .debug_str	00000000 
0000b4da l       .debug_str	00000000 
0000b4ea l       .debug_str	00000000 
0000b556 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005abd7 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
00001a42 l       .debug_str	00000000 
00001d90 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425e8 l       .debug_str	00000000 
00001a4b l       .debug_str	00000000 
00001a57 l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00001a5f l       .debug_str	00000000 
00001ab9 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b6d l       .debug_str	00000000 
00001bbc l       .debug_str	00000000 
00001bc6 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c48 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c61 l       .debug_str	00000000 
00001c69 l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001d1b l       .debug_str	00000000 
00001d27 l       .debug_str	00000000 
00001d30 l       .debug_str	00000000 
00001d3c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001d61 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d96 l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4a5 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00059eea l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
000602e0 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001daf l       .debug_str	00000000 
0004f58d l       .debug_str	00000000 
00001dc6 l       .debug_str	00000000 
00001dce l       .debug_str	00000000 
00001dd7 l       .debug_str	00000000 
000031db l       .debug_str	00000000 
00001de0 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0005ff93 l       .debug_str	00000000 
00001de8 l       .debug_str	00000000 
00001df4 l       .debug_str	00000000 
00001dff l       .debug_str	00000000 
00001e07 l       .debug_str	00000000 
0000b702 l       .debug_str	00000000 
00001e0f l       .debug_str	00000000 
00001f0b l       .debug_str	00000000 
0000200f l       .debug_str	00000000 
0000201d l       .debug_str	00000000 
00002028 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002055 l       .debug_str	00000000 
00002032 l       .debug_str	00000000 
00002060 l       .debug_str	00000000 
000020db l       .debug_str	00000000 
0000215e l       .debug_str	00000000 
0000216c l       .debug_str	00000000 
000021cb l       .debug_str	00000000 
00002232 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
00002258 l       .debug_str	00000000 
0005e7c9 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00002267 l       .debug_str	00000000 
00024c0c l       .debug_str	00000000 
0000226d l       .debug_str	00000000 
00002273 l       .debug_str	00000000 
00002279 l       .debug_str	00000000 
00002285 l       .debug_str	00000000 
000611ed l       .debug_str	00000000 
0000228d l       .debug_str	00000000 
00002295 l       .debug_str	00000000 
0000229b l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
000022be l       .debug_str	00000000 
000022f1 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
0005e356 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
0000237f l       .debug_str	00000000 
00002385 l       .debug_str	00000000 
000023ae l       .debug_str	00000000 
0000238b l       .debug_str	00000000 
000023c0 l       .debug_str	00000000 
00002402 l       .debug_str	00000000 
0005e23f l       .debug_str	00000000 
0000244c l       .debug_str	00000000 
00002452 l       .debug_str	00000000 
00002458 l       .debug_str	00000000 
00002481 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002493 l       .debug_str	00000000 
000024d5 l       .debug_str	00000000 
0005d703 l       .debug_str	00000000 
0000251f l       .debug_str	00000000 
00002525 l       .debug_str	00000000 
0000252b l       .debug_str	00000000 
00002531 l       .debug_str	00000000 
0000255a l       .debug_str	00000000 
00002537 l       .debug_str	00000000 
0000256b l       .debug_str	00000000 
000025ac l       .debug_str	00000000 
000025f5 l       .debug_str	00000000 
000025fa l       .debug_str	00000000 
0005e58d l       .debug_str	00000000 
000025ff l       .debug_str	00000000 
00002605 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002634 l       .debug_str	00000000 
00002611 l       .debug_str	00000000 
00002645 l       .debug_str	00000000 
00002686 l       .debug_str	00000000 
0005d7bb l       .debug_str	00000000 
000026cf l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
000026d8 l       .debug_str	00000000 
0000270c l       .debug_str	00000000 
0000274d l       .debug_str	00000000 
00002796 l       .debug_str	00000000 
0005e761 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027a4 l       .debug_str	00000000 
000027ab l       .debug_str	00000000 
000027d6 l       .debug_str	00000000 
000027b3 l       .debug_str	00000000 
000027e8 l       .debug_str	00000000 
0000282a l       .debug_str	00000000 
0005e429 l       .debug_str	00000000 
00002874 l       .debug_str	00000000 
0000287a l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
00002886 l       .debug_str	00000000 
0000288c l       .debug_str	00000000 
00002894 l       .debug_str	00000000 
000028a2 l       .debug_str	00000000 
000028b1 l       .debug_str	00000000 
000028c2 l       .debug_str	00000000 
000028cd l       .debug_str	00000000 
000028d8 l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028ea l       .debug_str	00000000 
00002930 l       .debug_str	00000000 
0000290d l       .debug_str	00000000 
00002942 l       .debug_str	00000000 
00002984 l       .debug_str	00000000 
0005d8be l       .debug_str	00000000 
000029ce l       .debug_str	00000000 
000029fb l       .debug_str	00000000 
000029d8 l       .debug_str	00000000 
00002a0d l       .debug_str	00000000 
00002a4f l       .debug_str	00000000 
00002a99 l       .debug_str	00000000 
00002a9e l       .debug_str	00000000 
00002acb l       .debug_str	00000000 
00002aa8 l       .debug_str	00000000 
00002add l       .debug_str	00000000 
00002b1f l       .debug_str	00000000 
00002b69 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00002be8 l       .debug_str	00000000 
00002b7d l       .debug_str	00000000 
00002b8d l       .debug_str	00000000 
00002b96 l       .debug_str	00000000 
00002ba1 l       .debug_str	00000000 
00002bb0 l       .debug_str	00000000 
00002bc5 l       .debug_str	00000000 
00002bf6 l       .debug_str	00000000 
00002c93 l       .debug_str	00000000 
00002d38 l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d4c l       .debug_str	00000000 
00002d90 l       .debug_str	00000000 
00002d6d l       .debug_str	00000000 
00002da3 l       .debug_str	00000000 
00002e26 l       .debug_str	00000000 
00002eb1 l       .debug_str	00000000 
00002ecd l       .debug_str	00000000 
00002f19 l       .debug_str	00000000 
00002f6d l       .debug_str	00000000 
00002f8a l       .debug_str	00000000 
00002f9e l       .debug_str	00000000 
00002fea l       .debug_str	00000000 
0000303e l       .debug_str	00000000 
00003054 l       .debug_str	00000000 
00003068 l       .debug_str	00000000 
000030af l       .debug_str	00000000 
000030fe l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003107 l       .debug_str	00000000 
00003138 l       .debug_str	00000000 
0000313e l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314d l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
0000315d l       .debug_str	00000000 
00033f0f l       .debug_str	00000000 
0000316c l       .debug_str	00000000 
00003df8 l       .debug_str	00000000 
00003177 l       .debug_str	00000000 
00003182 l       .debug_str	00000000 
00003193 l       .debug_str	00000000 
00003199 l       .debug_str	00000000 
000031a1 l       .debug_str	00000000 
000031a8 l       .debug_str	00000000 
000031b2 l       .debug_str	00000000 
000031ba l       .debug_str	00000000 
000031c2 l       .debug_str	00000000 
000031e4 l       .debug_str	00000000 
000031ef l       .debug_str	00000000 
000031fb l       .debug_str	00000000 
00003203 l       .debug_str	00000000 
0000320c l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
00003217 l       .debug_str	00000000 
00003222 l       .debug_str	00000000 
0000322d l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005d82f l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
0000323d l       .debug_str	00000000 
0000324d l       .debug_str	00000000 
0000325c l       .debug_str	00000000 
00003264 l       .debug_str	00000000 
0000326b l       .debug_str	00000000 
00003273 l       .debug_str	00000000 
000032b4 l       .debug_str	00000000 
00003291 l       .debug_str	00000000 
000032c4 l       .debug_str	00000000 
000032d9 l       .debug_str	00000000 
000032e2 l       .debug_str	00000000 
0000333f l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
000033ae l       .debug_str	00000000 
000033be l       .debug_str	00000000 
000033d3 l       .debug_str	00000000 
000033db l       .debug_str	00000000 
0000343f l       .debug_str	00000000 
000034ab l       .debug_str	00000000 
000034b2 l       .debug_str	00000000 
000034ba l       .debug_str	00000000 
000034fb l       .debug_str	00000000 
000034d8 l       .debug_str	00000000 
0000350b l       .debug_str	00000000 
00003520 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
0000354f l       .debug_str	00000000 
00003564 l       .debug_str	00000000 
0000b1d7 l       .debug_str	00000000 
0000b569 l       .debug_str	00000000 
0000b5cc l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
0000b64c l       .debug_str	00000000 
0000b6af l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000017fa l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 57lqf44sdwu8qayr
00000c71 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a6 l       .debug_str	00000000 
0000ba46 l       .debug_str	00000000 
0000ba77 l       .debug_str	00000000 
0000bd0a l       .debug_str	00000000 
0000ba91 l       .debug_str	00000000 
0000bac2 l       .debug_str	00000000 
0000bb40 l       .debug_str	00000000 
0000baf2 l       .debug_str	00000000 
0000bb23 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0000a54c l       .debug_str	00000000 
0000bb33 l       .debug_str	00000000 
0000bb39 l       .debug_str	00000000 
0000bb3f l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0000bb45 l       .debug_str	00000000 
0000bb97 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
0000bbea l       .debug_str	00000000 
0000bc53 l       .debug_str	00000000 
0001f49a l       .debug_str	00000000 
0000bca6 l       .debug_str	00000000 
0000bd09 l       .debug_str	00000000 
0000bd35 l       .debug_str	00000000 
0000bdae l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea0f l       .debug_str	00000000 
000399b4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005fec9 l       .debug_str	00000000 
00001521 l       .debug_str	00000000 
00000e2c l       .debug_str	00000000 
0000b7ab l       .debug_str	00000000 
0000bd2b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ed l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a79c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
0000b7ba l       .debug_str	00000000 
0000b802 l       .debug_str	00000000 
0000b80b l       .debug_str	00000000 
0000b853 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000b85b l       .debug_str	00000000 
0000b466 l       .debug_str	00000000 
0000b8a3 l       .debug_str	00000000 
0000b8eb l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0000b8f4 l       .debug_str	00000000 
0000b93c l       .debug_str	00000000 
0000b945 l       .debug_str	00000000 
0000b976 l       .debug_str	00000000 
00018baf l       .debug_str	00000000 
0000b97f l       .debug_str	00000000 
0000b9b0 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
000017fa l       .debug_str	00000000 
0000b9ba l       .debug_str	00000000 
0000b9eb l       .debug_str	00000000 
00018bc3 l       .debug_str	00000000 
0000ba0b l       .debug_str	00000000 
0000ba3c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394ca l       .debug_str	00000000 
0005cbb3 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a825 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dmg7ylzo67ab86f
0000bf55 l       .debug_str	00000000 
0000be52 l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
0000beab l       .debug_str	00000000 
0000beb7 l       .debug_str	00000000 
0000befe l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
0000bf0a l       .debug_str	00000000 
0000bf65 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005cba1 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005e9b7 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000be01 l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f4c4 l       .debug_str	00000000 
00009440 l     F .text	00000044 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E
00000000 l    df *ABS*	00000000 2zydbnxo7qpu1b5q
0000c225 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c73 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025433 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00034a6f l       .debug_str	00000000 
0002f220 l       .debug_str	00000000 
0000c27e l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c284 l       .debug_str	00000000 
00018d57 l       .debug_str	00000000 
0000c28e l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
00018d92 l       .debug_str	00000000 
0000c2ce l       .debug_str	00000000 
0000c33d l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
00018bb9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
000163d0 l       .debug_str	00000000 
0000bfc3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005abd7 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000bfd4 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000bfde l       .debug_str	00000000 
0000bfe9 l       .debug_str	00000000 
0000bff3 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000229e0 l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
0000c042 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0005d5c4 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
000229c6 l       .debug_str	00000000 
0000c05d l       .debug_str	00000000 
0005a9f7 l       .debug_str	00000000 
00022a09 l       .debug_str	00000000 
0006049f l       .debug_str	00000000 
0000c061 l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
0000c065 l       .debug_str	00000000 
00001820 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
0005f8db l       .debug_str	00000000 
0000c06e l       .debug_str	00000000 
0005ef33 l       .debug_str	00000000 
0000e5f2 l       .debug_str	00000000 
0000c071 l       .debug_str	00000000 
0000c0b1 l       .debug_str	00000000 
0000c0c0 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
0000c108 l       .debug_str	00000000 
0000c14f l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003e5fe l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
0000c15d l       .debug_str	00000000 
0000c1a1 l       .debug_str	00000000 
0000c1ac l       .debug_str	00000000 
0000c1b5 l       .debug_str	00000000 
0000c1bd l       .debug_str	00000000 
0005c7dc l       .debug_str	00000000 
0000e660 l       .debug_str	00000000 
0005ae33 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000c1c6 l       .debug_str	00000000 
0000c1cc l       .debug_str	00000000 
0000c1d5 l       .debug_str	00000000 
0000c1e2 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
00043b6b l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c1e5 l       .debug_str	00000000 
0000c1fc l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
0005ab3d l       .debug_str	00000000 
00010428 l       .debug_str	00000000 
0000c212 l       .debug_str	00000000 
0000c218 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000c21f l       .debug_str	00000000 
000162f8 l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00018c28 l       .debug_str	00000000 
0005fd5c l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
200000e8 l     O .data	00000008 _ZN22piet_embedded_graphics7display12SPI_SETTINGS17h78a64d1040fbeee1E
20000160 l     O .bss	00000004 _ZN22piet_embedded_graphics7display14BACKLIGHT_HIGH17hd6bdc29c96588211E
00000000 l    df *ABS*	00000000 3eyht9wxrw4fbo0o
0000e260 l       .debug_str	00000000 
0000e1c4 l       .debug_str	00000000 
0000e20a l       .debug_str	00000000 
0000e2a9 l       .debug_str	00000000 
0000e2ef l       .debug_str	00000000 
0000e660 l       .debug_str	00000000 
00010add l       .debug_str	00000000 
0000e329 l       .debug_str	00000000 
0000e370 l       .debug_str	00000000 
0000e3be l       .debug_str	00000000 
0000e40a l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000c21f l       .debug_str	00000000 
0000c225 l       .debug_str	00000000 
000162f8 l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00018c28 l       .debug_str	00000000 
0005fd5c l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c73 l       .debug_str	00000000 
00025433 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
0002f220 l       .debug_str	00000000 
0000c27e l       .debug_str	00000000 
0000c284 l       .debug_str	00000000 
00018d57 l       .debug_str	00000000 
0000c28e l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
00018d92 l       .debug_str	00000000 
0000c2ce l       .debug_str	00000000 
0000e44a l       .debug_str	00000000 
0000e4f6 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e5c8 l       .debug_str	00000000 
0000e5e1 l       .debug_str	00000000 
0005ae33 l       .debug_str	00000000 
0001f3e2 l       .debug_str	00000000 
00011788 l       .debug_str	00000000 
0001ced1 l       .debug_str	00000000 
0000e631 l       .debug_str	00000000 
00040d25 l       .debug_str	00000000 
00019e42 l       .debug_str	00000000 
0003d8d5 l       .debug_str	00000000 
0000e634 l       .debug_str	00000000 
0002219b l       .debug_str	00000000 
000168c2 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00012625 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
00027979 l       .debug_str	00000000 
000611de l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
000224e2 l       .debug_str	00000000 
0000e63b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00025478 l       .debug_str	00000000 
0000e642 l       .debug_str	00000000 
0005d5c5 l       .debug_str	00000000 
0000c05e l       .debug_str	00000000 
000163d0 l       .debug_str	00000000 
0005c7dc l       .debug_str	00000000 
0000e64e l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000e666 l       .debug_str	00000000 
0000e672 l       .debug_str	00000000 
0000e67e l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000e68b l       .debug_str	00000000 
0006174b l       .debug_str	00000000 
0000e698 l       .debug_str	00000000 
0000e70f l       .debug_str	00000000 
0000e718 l       .debug_str	00000000 
0000e726 l       .debug_str	00000000 
00018cd9 l       .debug_str	00000000 
0000e73e l       .debug_str	00000000 
0000e773 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c344 l       .debug_str	00000000 
0000c34d l       .debug_str	00000000 
0000c357 l       .debug_str	00000000 
0000c367 l       .debug_str	00000000 
0000e5d5 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
0000c384 l       .debug_str	00000000 
0000c388 l       .debug_str	00000000 
0000c390 l       .debug_str	00000000 
0000c396 l       .debug_str	00000000 
0000c39c l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a9 l       .debug_str	00000000 
0000c3af l       .debug_str	00000000 
0000c3b5 l       .debug_str	00000000 
0000c3bc l       .debug_str	00000000 
0000c3c2 l       .debug_str	00000000 
0000c3ca l       .debug_str	00000000 
0000c3d1 l       .debug_str	00000000 
0000c3d7 l       .debug_str	00000000 
0000c3dd l       .debug_str	00000000 
0000c3e3 l       .debug_str	00000000 
0000c3e9 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c3f6 l       .debug_str	00000000 
0000c3fd l       .debug_str	00000000 
0000c405 l       .debug_str	00000000 
0000c40d l       .debug_str	00000000 
0000c415 l       .debug_str	00000000 
0000c41c l       .debug_str	00000000 
0000c424 l       .debug_str	00000000 
0000c42b l       .debug_str	00000000 
0000c432 l       .debug_str	00000000 
0000c439 l       .debug_str	00000000 
0000c440 l       .debug_str	00000000 
0000c447 l       .debug_str	00000000 
0000c44e l       .debug_str	00000000 
0000c454 l       .debug_str	00000000 
0000c45a l       .debug_str	00000000 
0000c460 l       .debug_str	00000000 
0000c466 l       .debug_str	00000000 
0000c46d l       .debug_str	00000000 
0000c475 l       .debug_str	00000000 
0000e801 l       .debug_str	00000000 
0000c47d l       .debug_str	00000000 
0005ee38 l       .debug_str	00000000 
0000c488 l       .debug_str	00000000 
0005d5c4 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
000229c6 l       .debug_str	00000000 
0000c05d l       .debug_str	00000000 
0005a9f7 l       .debug_str	00000000 
00022a09 l       .debug_str	00000000 
0006049f l       .debug_str	00000000 
0000c061 l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
0000c065 l       .debug_str	00000000 
00001820 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
0005f8db l       .debug_str	00000000 
0000c06e l       .debug_str	00000000 
0005ef33 l       .debug_str	00000000 
0000e5f2 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000c494 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0000c4a4 l       .debug_str	00000000 
0000c4e0 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
0000c4ff l       .debug_str	00000000 
0000c54d l       .debug_str	00000000 
0000c58e l       .debug_str	00000000 
0000c5fa l       .debug_str	00000000 
0000c63c l       .debug_str	00000000 
0000c6a8 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006012b l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c249 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c714 l       .debug_str	00000000 
0000c731 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c777 l       .debug_str	00000000 
0000c788 l       .debug_str	00000000 
0000c7f8 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c955 l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035923 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac2c l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0000d4f0 l       .debug_str	00000000 
0000d603 l       .debug_str	00000000 
0000d723 l       .debug_str	00000000 
0000d83a l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000dac9 l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
0005ab3d l       .debug_str	00000000 
0002b9aa l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027835 l       .debug_str	00000000 
00034a6f l       .debug_str	00000000 
0000dc1e l       .debug_str	00000000 
0000dc6c l       .debug_str	00000000 
0000ddec l       .debug_str	00000000 
0000de3a l       .debug_str	00000000 
0000de7b l       .debug_str	00000000 
0000dec9 l       .debug_str	00000000 
0000df0a l       .debug_str	00000000 
0000df5a l       .debug_str	00000000 
0000e0dc l       .debug_str	00000000 
0000e12d l       .debug_str	00000000 
0000e171 l       .debug_str	00000000 
0001e500 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3sr9zgbizuzi7j5h
0000c488 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e7e7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c384 l       .debug_str	00000000 
0000c388 l       .debug_str	00000000 
0000c390 l       .debug_str	00000000 
0000c396 l       .debug_str	00000000 
0000c39c l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a9 l       .debug_str	00000000 
0000c3af l       .debug_str	00000000 
0000c3b5 l       .debug_str	00000000 
0000c3bc l       .debug_str	00000000 
0000c3c2 l       .debug_str	00000000 
0000c3ca l       .debug_str	00000000 
0000c3d1 l       .debug_str	00000000 
0000c3d7 l       .debug_str	00000000 
0000c3dd l       .debug_str	00000000 
0000c3e3 l       .debug_str	00000000 
0000c3e9 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c3f6 l       .debug_str	00000000 
0000c3fd l       .debug_str	00000000 
0000c405 l       .debug_str	00000000 
0000c40d l       .debug_str	00000000 
0000c415 l       .debug_str	00000000 
0000c41c l       .debug_str	00000000 
0000c424 l       .debug_str	00000000 
0000c42b l       .debug_str	00000000 
0000c432 l       .debug_str	00000000 
0000c439 l       .debug_str	00000000 
0000c440 l       .debug_str	00000000 
0000c447 l       .debug_str	00000000 
0000c44e l       .debug_str	00000000 
0000c454 l       .debug_str	00000000 
0000c45a l       .debug_str	00000000 
0000c460 l       .debug_str	00000000 
0000c466 l       .debug_str	00000000 
0000c46d l       .debug_str	00000000 
0000c475 l       .debug_str	00000000 
0000e801 l       .debug_str	00000000 
0000c47d l       .debug_str	00000000 
0005ee38 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0000e77f l       .debug_str	00000000 
0000e7bb l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 44cnu8660c26myi6
0000e85c l       .debug_str	00000000 
0000e851 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
0000e89a l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005e9b7 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000e80d l       .debug_str	00000000 
0000a6ae l     F .text	0000001e _ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E
00000000 l    df *ABS*	00000000 469um0xjm96v8cgk
0000f305 l       .debug_str	00000000 
0000f929 l       .debug_str	00000000 
0000fa7c l       .debug_str	00000000 
0000faac l       .debug_str	00000000 
0000c1cc l       .debug_str	00000000 
0000c1d5 l       .debug_str	00000000 
0000c1e2 l       .debug_str	00000000 
00043b6b l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c1e5 l       .debug_str	00000000 
0000c1fc l       .debug_str	00000000 
00010428 l       .debug_str	00000000 
0001040b l       .debug_str	00000000 
0000fbd3 l       .debug_str	00000000 
0000fc03 l       .debug_str	00000000 
000104af l       .debug_str	00000000 
00010451 l       .debug_str	00000000 
0000fc45 l       .debug_str	00000000 
0000fc75 l       .debug_str	00000000 
0000fcc4 l       .debug_str	00000000 
0000fcf4 l       .debug_str	00000000 
0000fd06 l       .debug_str	00000000 
0000fd36 l       .debug_str	00000000 
0000fd6f l       .debug_str	00000000 
0000fd78 l       .debug_str	00000000 
0000fda5 l       .debug_str	00000000 
0000fde8 l       .debug_str	00000000 
0000fdfe l       .debug_str	00000000 
0000ff42 l       .debug_str	00000000 
0000ffde l       .debug_str	00000000 
000100a8 l       .debug_str	00000000 
000100c1 l       .debug_str	00000000 
000101a0 l       .debug_str	00000000 
000102e9 l       .debug_str	00000000 
00010406 l       .debug_str	00000000 
0001043e l       .debug_str	00000000 
00010483 l       .debug_str	00000000 
0001048b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0000e8a0 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
0000e8a7 l       .debug_str	00000000 
0000e8ac l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0000e8d1 l       .debug_str	00000000 
0000e8d8 l       .debug_str	00000000 
0000e8dd l       .debug_str	00000000 
0000e918 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
0000e94f l       .debug_str	00000000 
0000e97f l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
0000e992 l       .debug_str	00000000 
0000e998 l       .debug_str	00000000 
0000e99f l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000e634 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006012b l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c249 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c714 l       .debug_str	00000000 
0000c731 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c777 l       .debug_str	00000000 
0000c788 l       .debug_str	00000000 
0000c7f8 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c955 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035923 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac2c l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0000e9a7 l       .debug_str	00000000 
0000eab9 l       .debug_str	00000000 
0000ebe8 l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
0005ab3d l       .debug_str	00000000 
0002b872 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027718 l       .debug_str	00000000 
0000fd9c l       .debug_str	00000000 
0000ed16 l       .debug_str	00000000 
0000ed46 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0000fdb8 l       .debug_str	00000000 
0000ed7d l       .debug_str	00000000 
0000edad l       .debug_str	00000000 
0004ea0f l       .debug_str	00000000 
00015d04 l       .debug_str	00000000 
0000edfa l       .debug_str	00000000 
0000ee2a l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
0000d4f0 l       .debug_str	00000000 
0000d603 l       .debug_str	00000000 
0000d723 l       .debug_str	00000000 
0000d83a l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000dac9 l       .debug_str	00000000 
0002b9aa l       .debug_str	00000000 
00027835 l       .debug_str	00000000 
0000ee4a l       .debug_str	00000000 
0000ee7a l       .debug_str	00000000 
0000e778 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0000efd3 l       .debug_str	00000000 
0000efdd l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00018c28 l       .debug_str	00000000 
0000efe6 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c73 l       .debug_str	00000000 
00025433 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00034a6f l       .debug_str	00000000 
0002f220 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0002f1b4 l       .debug_str	00000000 
0000eff3 l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
0002dc96 l       .debug_str	00000000 
0000efff l       .debug_str	00000000 
0000f02f l       .debug_str	00000000 
0000f0d5 l       .debug_str	00000000 
0000f0da l       .debug_str	00000000 
0000f0e0 l       .debug_str	00000000 
0000f0e9 l       .debug_str	00000000 
0005d23d l       .debug_str	00000000 
0002dd3d l       .debug_str	00000000 
0000f0f3 l       .debug_str	00000000 
0000f123 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea7b l       .debug_str	00000000 
00024c11 l       .debug_str	00000000 
0002564a l       .debug_str	00000000 
0000f1fd l       .debug_str	00000000 
0000f22d l       .debug_str	00000000 
0000f250 l       .debug_str	00000000 
0000f27d l       .debug_str	00000000 
0000f29e l       .debug_str	00000000 
0000f3a5 l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
0000f47f l       .debug_str	00000000 
0000f4f6 l       .debug_str	00000000 
0000f57a l       .debug_str	00000000 
0000f5f5 l       .debug_str	00000000 
0000f693 l       .debug_str	00000000 
0000f73e l       .debug_str	00000000 
00028d84 l       .debug_str	00000000 
000284bb l       .debug_str	00000000 
000287f2 l       .debug_str	00000000 
0002b778 l       .debug_str	00000000 
000273e0 l       .debug_str	00000000 
0000f7e0 l       .debug_str	00000000 
0000f810 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
00027979 l       .debug_str	00000000 
0000f8f9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 49htiubyezwzqodr
0005a79c l       .debug_str	00000000 
000104ba l       .debug_str	00000000 
000104eb l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00018bb9 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
000104f4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea0f l       .debug_str	00000000 
000399b4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ed l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1vm1jsf9206jqt1a
00013344 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010658 l       .debug_str	00000000 
00010664 l       .debug_str	00000000 
00010725 l       .debug_str	00000000 
00025418 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e7e7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010546 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c384 l       .debug_str	00000000 
0000c388 l       .debug_str	00000000 
0000c390 l       .debug_str	00000000 
0000c396 l       .debug_str	00000000 
0000c39c l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a9 l       .debug_str	00000000 
0000c3af l       .debug_str	00000000 
0000c3b5 l       .debug_str	00000000 
0000c3bc l       .debug_str	00000000 
0000c3c2 l       .debug_str	00000000 
0000c3ca l       .debug_str	00000000 
0000c3d1 l       .debug_str	00000000 
0000c3d7 l       .debug_str	00000000 
0000c3dd l       .debug_str	00000000 
0000c3e3 l       .debug_str	00000000 
0000c3e9 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c3f6 l       .debug_str	00000000 
0000c3fd l       .debug_str	00000000 
0000c405 l       .debug_str	00000000 
0000c40d l       .debug_str	00000000 
0000c415 l       .debug_str	00000000 
0000c41c l       .debug_str	00000000 
0000c424 l       .debug_str	00000000 
0000c42b l       .debug_str	00000000 
0000c432 l       .debug_str	00000000 
0000c439 l       .debug_str	00000000 
0000c440 l       .debug_str	00000000 
0000c447 l       .debug_str	00000000 
0000c44e l       .debug_str	00000000 
0000c454 l       .debug_str	00000000 
0000c45a l       .debug_str	00000000 
0000c460 l       .debug_str	00000000 
0000c466 l       .debug_str	00000000 
0000c46d l       .debug_str	00000000 
0000c475 l       .debug_str	00000000 
0000e801 l       .debug_str	00000000 
0001056a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00010590 l       .debug_str	00000000 
00010651 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3on1efjgx1q5grpf
00025418 l       .debug_str	00000000 
00010725 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e5c8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010546 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c344 l       .debug_str	00000000 
0000c34d l       .debug_str	00000000 
0000c357 l       .debug_str	00000000 
0000c367 l       .debug_str	00000000 
0000e5d5 l       .debug_str	00000000 
0001072c l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00010752 l       .debug_str	00000000 
00010651 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010658 l       .debug_str	00000000 
000107f9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dxw5xp80tje79rx
000012f5 l       .debug_str	00000000 
000108f0 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010546 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010658 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
0001056a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00010725 l       .debug_str	00000000 
00011788 l       .debug_str	00000000 
0005f726 l       .debug_str	00000000 
000108a0 l       .debug_str	00000000 
000108d9 l       .debug_str	00000000 
00025418 l       .debug_str	00000000 
0001072c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 t2y6wwi1wx5h1fq
0000237d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010546 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
0001056a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
00010725 l       .debug_str	00000000 
00010929 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00011788 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1ai0eloc31rxz52x
00010a89 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00010a14 l       .debug_str	00000000 
00033c9d l       .debug_str	00000000 
0000e8a7 l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00010a77 l       .debug_str	00000000 
00010a6b l       .debug_str	00000000 
0001f359 l       .debug_str	00000000 
00010a7e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1v17h907p30pylh6
00000d77 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
0005a79c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a6 l       .debug_str	00000000 
0001f49a l       .debug_str	00000000 
00060001 l       .debug_str	00000000 
0005d4bc l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4a5 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00059eea l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
000602e0 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
0005e60c l       .debug_str	00000000 
00012625 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cfe0 l       .debug_str	00000000 
000612d3 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016201 l       .debug_str	00000000 
000611de l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0005c249 l       .debug_str	00000000 
00010e2d l       .debug_str	00000000 
00010e54 l       .debug_str	00000000 
00010e5c l       .debug_str	00000000 
00010e63 l       .debug_str	00000000 
00010e69 l       .debug_str	00000000 
00010e70 l       .debug_str	00000000 
0005cff6 l       .debug_str	00000000 
00010e76 l       .debug_str	00000000 
00010e85 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00010e93 l       .debug_str	00000000 
00010e98 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005cd09 l       .debug_str	00000000 
00010cd4 l       .debug_str	00000000 
00010a94 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0005a9f7 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00022a09 l       .debug_str	00000000 
00010aa0 l       .debug_str	00000000 
00010ad7 l       .debug_str	00000000 
0000e660 l       .debug_str	00000000 
00010ae3 l       .debug_str	00000000 
00010b1a l       .debug_str	00000000 
00010b25 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00010b2d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00010b34 l       .debug_str	00000000 
00010b3b l       .debug_str	00000000 
0006037e l       .debug_str	00000000 
00010b44 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005abba l       .debug_str	00000000 
00010b4e l       .debug_str	00000000 
00010e45 l       .debug_str	00000000 
00010b58 l       .debug_str	00000000 
0001a01b l       .debug_str	00000000 
00010b8e l       .debug_str	00000000 
00010bbc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425e8 l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005d82f l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
00010bc8 l       .debug_str	00000000 
00010bff l       .debug_str	00000000 
0005abd7 l       .debug_str	00000000 
0005feb2 l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
0006012b l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00010c08 l       .debug_str	00000000 
00010c1c l       .debug_str	00000000 
00010c4f l       .debug_str	00000000 
00010c5a l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
0004ea0f l       .debug_str	00000000 
000399b4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00010c90 l       .debug_str	00000000 
00010cce l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
0003e5fe l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
00010ce1 l       .debug_str	00000000 
00010d24 l       .debug_str	00000000 
00010d3c l       .debug_str	00000000 
00010d7c l       .debug_str	00000000 
00010d91 l       .debug_str	00000000 
00010dcb l       .debug_str	00000000 
00010dda l       .debug_str	00000000 
00010e19 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
0005ae33 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00018baf l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394ca l       .debug_str	00000000 
0005cbb3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ed l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a825 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
20000214 l     O .bss	00000001 _ZN3app12touch_sensor10I2C_BUFFER17h8c3d62e53c42ce39E
20000168 l     O .bss	00000052 _ZN3app12touch_sensor10TOUCH_DATA17h1dd6b74134f2575dE
20000168 l     O .bss	00000000 _ZN3app12touch_sensor11TOUCH_DELAY17h6bb1c96a489889baE
200001fc l     O .bss	00000010 _ZN3app12touch_sensor11TOUCH_EVENT17hb169e5084280c5b1E
20000164 l     O .bss	00000004 _ZN3app12touch_sensor11TOUCH_RESET17h950734ac5f86de57E
0000b1f4 l     F .text	00000752 _ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E
0000b946 l     F .text	0000019a _ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E
0000b0ba l     F .text	0000013a _ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E
0000b06e l     F .text	0000004c _ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE
200001ba l     O .bss	0000003f _ZN3app12touch_sensor3BUF17h9edf4dcfe692b5b1E
2000020c l     O .bss	00000008 _ZN3app12touch_sensor8I2C_DATA17hb66b2debc1d16188E
0001e720 l     O .text	00000021 str.0
0001e760 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 25jm3tkgfnhczjfh
000114f3 l       .debug_str	00000000 
00022488 l       .debug_str	00000000 
0001102b l       .debug_str	00000000 
0003f8ee l       .debug_str	00000000 
00011060 l       .debug_str	00000000 
0001109d l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000110a8 l       .debug_str	00000000 
000110ac l       .debug_str	00000000 
000110b0 l       .debug_str	00000000 
000110c1 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
00011134 l       .debug_str	00000000 
00011140 l       .debug_str	00000000 
0001116f l       .debug_str	00000000 
0005a8b6 l       .debug_str	00000000 
000111c9 l       .debug_str	00000000 
0003d8d4 l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
00011222 l       .debug_str	00000000 
00011280 l       .debug_str	00000000 
00011289 l       .debug_str	00000000 
000112e7 l       .debug_str	00000000 
000112f0 l       .debug_str	00000000 
00011353 l       .debug_str	00000000 
00011360 l       .debug_str	00000000 
000113bf l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
000113c9 l       .debug_str	00000000 
000113d8 l       .debug_str	00000000 
00011433 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00011439 l       .debug_str	00000000 
00011493 l       .debug_str	00000000 
00011498 l       .debug_str	00000000 
0005bb79 l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
00011532 l       .debug_str	00000000 
00011562 l       .debug_str	00000000 
0001156f l       .debug_str	00000000 
0001159f l       .debug_str	00000000 
000115ac l       .debug_str	00000000 
00011608 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0000efd3 l       .debug_str	00000000 
0000efdd l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00018c28 l       .debug_str	00000000 
0000efe6 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c73 l       .debug_str	00000000 
00025433 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00034a6f l       .debug_str	00000000 
0002f220 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0002f149 l       .debug_str	00000000 
0005ae33 l       .debug_str	00000000 
00060000 l       .debug_str	00000000 
00011613 l       .debug_str	00000000 
0001161c l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00011625 l       .debug_str	00000000 
00012c19 l       .debug_str	00000000 
00011628 l       .debug_str	00000000 
0004cc60 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0005b672 l       .debug_str	00000000 
0005ff8b l       .debug_str	00000000 
00025418 l       .debug_str	00000000 
0001162b l       .debug_str	00000000 
0005abd7 l       .debug_str	00000000 
000125ea l       .debug_str	00000000 
0005c058 l       .debug_str	00000000 
00011633 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001163e l       .debug_str	00000000 
0005bed0 l       .debug_str	00000000 
00010fac l       .debug_str	00000000 
00010fb7 l       .debug_str	00000000 
00010fc4 l       .debug_str	00000000 
00011f2f l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
00011659 l       .debug_str	00000000 
0003d8d3 l       .debug_str	00000000 
00010a7c l       .debug_str	00000000 
0004680e l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00011673 l       .debug_str	00000000 
00011569 l       .debug_str	00000000 
0000237c l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ed l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a79c l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
0001167a l       .debug_str	00000000 
00011685 l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
00011691 l       .debug_str	00000000 
0001169c l       .debug_str	00000000 
000116a7 l       .debug_str	00000000 
000116b2 l       .debug_str	00000000 
000116bd l       .debug_str	00000000 
000116c8 l       .debug_str	00000000 
000116d3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005cd09 l       .debug_str	00000000 
0001161f l       .debug_str	00000000 
00010e9c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425e8 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4a5 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00059eea l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
000602e0 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
00010ea7 l       .debug_str	00000000 
00010ed5 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00010ee6 l       .debug_str	00000000 
00010f1a l       .debug_str	00000000 
00010f28 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea0f l       .debug_str	00000000 
000399b4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00010f59 l       .debug_str	00000000 
00010f62 l       .debug_str	00000000 
00010f6b l       .debug_str	00000000 
00010f76 l       .debug_str	00000000 
00010f82 l       .debug_str	00000000 
00010f8c l       .debug_str	00000000 
00011f40 l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00010f99 l       .debug_str	00000000 
00010fa5 l       .debug_str	00000000 
00010fb0 l       .debug_str	00000000 
00010fbd l       .debug_str	00000000 
0001166a l       .debug_str	00000000 
00010fcb l       .debug_str	00000000 
00010ff6 l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
0003e5fe l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
00010fff l       .debug_str	00000000 
20000218 l     O .bss	00000050 _ZN3app5chip810CHIP8_TASK17hdc3e015a60662be5E
0000ca80 l     F .text	000000a8 _ZN3app5chip812render_block17hf14dcded684223a2E
0000bcfe l     F .text	00000364 _ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E
0000bcc8 l     F .text	00000036 _ZN3app5chip813PixelIterator3new17h8011ce45451de010E
20004268 l     O .bss	00000800 _ZN3app5chip813SCREEN_BUFFER17hf6360141ad32453fE
0000c77e l     F .text	00000302 _ZN3app5chip813render_region17h63a2f42595e40485E
20000268 l     O .bss	00004000 _ZN3app5chip816CHIP8_TASK_STACK17hb31f2a0cca07481dE
0000c296 l     F .text	0000001a _ZN3app5chip88Hardware3new17h6939808171a9a2a1E
0000bc16 l     F .text	000000b2 _ZN3app5chip89task_func17h385831a0096277b5E
0001eb60 l     O .text	00000021 str.0
0001ebb0 l     O .text	00000021 str.1
0001ebf0 l     O .text	0000001c str.2
00000000 l    df *ABS*	00000000 2c6bdy6rt6z3zh1y
000118de l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
0003e5fe l       .debug_str	00000000 
000118a3 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00011947 l       .debug_str	00000000 
000119b2 l       .debug_str	00000000 
000119ee l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
00011a77 l       .debug_str	00000000 
00011a85 l       .debug_str	00000000 
00011af0 l       .debug_str	00000000 
00011b0b l       .debug_str	00000000 
00011b77 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0005ae33 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00011bce l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
00012625 l       .debug_str	00000000 
000116de l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cfe0 l       .debug_str	00000000 
000612d3 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016201 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0001161c l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
00011788 l       .debug_str	00000000 
000229c8 l       .debug_str	00000000 
0005f726 l       .debug_str	00000000 
00011702 l       .debug_str	00000000 
000116e7 l       .debug_str	00000000 
00011731 l       .debug_str	00000000 
00011be1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001f40e l       .debug_str	00000000 
00001425 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000113c9 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00011783 l       .debug_str	00000000 
00011792 l       .debug_str	00000000 
000117cb l       .debug_str	00000000 
000117f4 l       .debug_str	00000000 
000160dc l       .debug_str	00000000 
0001180b l       .debug_str	00000000 
00011844 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xbkmlpi4vyn2qbv
0003d8d5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
000163d0 l       .debug_str	00000000 
0000e634 l       .debug_str	00000000 
0005cd09 l       .debug_str	00000000 
0001161f l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00010f59 l       .debug_str	00000000 
00010f62 l       .debug_str	00000000 
00010f6b l       .debug_str	00000000 
00010f76 l       .debug_str	00000000 
00010f82 l       .debug_str	00000000 
00010f8c l       .debug_str	00000000 
00011f40 l       .debug_str	00000000 
00011f2f l       .debug_str	00000000 
00034a6f l       .debug_str	00000000 
00011c2e l       .debug_str	00000000 
00011c7a l       .debug_str	00000000 
0000e631 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
00040d25 l       .debug_str	00000000 
00019e42 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 36ol61x1a5do2305
00011dab l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e5e1 l       .debug_str	00000000 
0000e631 l       .debug_str	00000000 
00040d25 l       .debug_str	00000000 
00019e42 l       .debug_str	00000000 
0003d8d5 l       .debug_str	00000000 
0000e634 l       .debug_str	00000000 
0005ae33 l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
00012625 l       .debug_str	00000000 
000611de l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0005d5c4 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
000229c6 l       .debug_str	00000000 
0000c05d l       .debug_str	00000000 
0005a9f7 l       .debug_str	00000000 
00022a09 l       .debug_str	00000000 
0006049f l       .debug_str	00000000 
0000c061 l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
0000c065 l       .debug_str	00000000 
00001820 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
0005f8db l       .debug_str	00000000 
0000c06e l       .debug_str	00000000 
0005ef33 l       .debug_str	00000000 
0000e5f2 l       .debug_str	00000000 
0005cd09 l       .debug_str	00000000 
0001161f l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00010f59 l       .debug_str	00000000 
00010f62 l       .debug_str	00000000 
00010f6b l       .debug_str	00000000 
00010f76 l       .debug_str	00000000 
00010f82 l       .debug_str	00000000 
00010f8c l       .debug_str	00000000 
00011f40 l       .debug_str	00000000 
00011f2f l       .debug_str	00000000 
00034a6f l       .debug_str	00000000 
00011cad l       .debug_str	00000000 
00011cfb l       .debug_str	00000000 
00011d5b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4ae8jurj2cyz895o
000002a2 l       .debug_str	00000000 
00011f0a l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00011134 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00011f2a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00012625 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00011e0d l       .debug_str	00000000 
0005cd09 l       .debug_str	00000000 
0001161f l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00010f59 l       .debug_str	00000000 
00010f62 l       .debug_str	00000000 
00010f6b l       .debug_str	00000000 
00010f76 l       .debug_str	00000000 
00010f82 l       .debug_str	00000000 
00010f8c l       .debug_str	00000000 
00011f40 l       .debug_str	00000000 
00011f2f l       .debug_str	00000000 
000229c8 l       .debug_str	00000000 
00011e16 l       .debug_str	00000000 
00011e79 l       .debug_str	00000000 
00011ea3 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4vqyywb7xxbk2fnk
00012392 l       .debug_str	00000000 
00043b6b l       .debug_str	00000000 
0001260f l       .debug_str	00000000 
00002450 l       .debug_str	00000000 
0001260b l       .debug_str	00000000 
00012606 l       .debug_str	00000000 
0002219b l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c058 l       .debug_str	00000000 
000125db l       .debug_str	00000000 
00012625 l       .debug_str	00000000 
000116de l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cfe0 l       .debug_str	00000000 
000612d3 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016201 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
000229c8 l       .debug_str	00000000 
00011702 l       .debug_str	00000000 
0001203e l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000113c9 l       .debug_str	00000000 
000120ca l       .debug_str	00000000 
000120ff l       .debug_str	00000000 
00012119 l       .debug_str	00000000 
0001214e l       .debug_str	00000000 
00012168 l       .debug_str	00000000 
0001219d l       .debug_str	00000000 
000121b7 l       .debug_str	00000000 
000121ed l       .debug_str	00000000 
00012208 l       .debug_str	00000000 
0005a825 l       .debug_str	00000000 
00011783 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000125bc l       .debug_str	00000000 
0001225c l       .debug_str	00000000 
00012582 l       .debug_str	00000000 
00012564 l       .debug_str	00000000 
0001227e l       .debug_str	00000000 
0001252b l       .debug_str	00000000 
000122f0 l       .debug_str	00000000 
00012326 l       .debug_str	00000000 
0001250f l       .debug_str	00000000 
000124d8 l       .debug_str	00000000 
00012341 l       .debug_str	00000000 
000124bc l       .debug_str	00000000 
00012485 l       .debug_str	00000000 
0001246a l       .debug_str	00000000 
00012434 l       .debug_str	00000000 
00012419 l       .debug_str	00000000 
000123e3 l       .debug_str	00000000 
000123c8 l       .debug_str	00000000 
00012377 l       .debug_str	00000000 
00013290 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0001264d l       .debug_str	00000000 
00012649 l       .debug_str	00000000 
0005ae14 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00059b10 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00011f4e l       .debug_str	00000000 
00015d04 l       .debug_str	00000000 
00011f52 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
000343dc l       .debug_str	00000000 
00011f57 l       .debug_str	00000000 
0001f5f0 l       .debug_str	00000000 
0001f445 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00033331 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0001161c l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
00011625 l       .debug_str	00000000 
00012c19 l       .debug_str	00000000 
00011628 l       .debug_str	00000000 
0004cc60 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0005b672 l       .debug_str	00000000 
0005ff8b l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00012643 l       .debug_str	00000000 
0001263d l       .debug_str	00000000 
00012637 l       .debug_str	00000000 
00012631 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0005cff6 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
000611de l       .debug_str	00000000 
00002535 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
00018bb9 l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0001262e l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00025418 l       .debug_str	00000000 
0001162b l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
0005abd7 l       .debug_str	00000000 
0005cd09 l       .debug_str	00000000 
0001161f l       .debug_str	00000000 
00010f99 l       .debug_str	00000000 
00010fa5 l       .debug_str	00000000 
0005a698 l       .debug_str	00000000 
00010fb0 l       .debug_str	00000000 
00010fbd l       .debug_str	00000000 
0001166a l       .debug_str	00000000 
000125ea l       .debug_str	00000000 
00011f5d l       .debug_str	00000000 
00011f83 l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00011f8d l       .debug_str	00000000 
0005ab3d l       .debug_str	00000000 
000160dc l       .debug_str	00000000 
00011788 l       .debug_str	00000000 
0005f726 l       .debug_str	00000000 
00011f95 l       .debug_str	00000000 
00012021 l       .debug_str	00000000 
0001262a l       .debug_str	00000000 
0005b7aa l       .debug_str	00000000 
00012a74 l       .debug_str	00000000 
00012ae6 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00012621 l       .debug_str	00000000 
00011be1 l       .debug_str	00000000 
00012617 l       .debug_str	00000000 
0001efc0 l     O .text	0000001c str.0
0001f240 l     O .text	00000021 str.1
0001f520 l     O .text	00000039 str.2
0001f580 l     O .text	00000021 str.3
0001f5c0 l     O .text	00000023 str.4
00000000 l    df *ABS*	00000000 5amxpeuxwufgc2g7
00012800 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000113c9 l       .debug_str	00000000 
000117f4 l       .debug_str	00000000 
0001276c l       .debug_str	00000000 
00012849 l       .debug_str	00000000 
00012893 l       .debug_str	00000000 
000128e6 l       .debug_str	00000000 
00012975 l       .debug_str	00000000 
000129d8 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00012a50 l       .debug_str	00000000 
00012ac2 l       .debug_str	00000000 
00012b80 l       .debug_str	00000000 
0005ae33 l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
000116e7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00012625 l       .debug_str	00000000 
000116de l       .debug_str	00000000 
0001260f l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00043b6b l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cfe0 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
000612d3 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016201 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0001161c l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000160dc l       .debug_str	00000000 
00011788 l       .debug_str	00000000 
000229c8 l       .debug_str	00000000 
0005f726 l       .debug_str	00000000 
00011702 l       .debug_str	00000000 
00012617 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00011be1 l       .debug_str	00000000 
00012621 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00012ae6 l       .debug_str	00000000 
00012a74 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00012652 l       .debug_str	00000000 
000126dc l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5eukf9ymd90dvsi0
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00012b84 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00012bdd l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00012b8c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5fcitodfeuns782f
00012c5c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00012bea l       .debug_str	00000000 
00012bef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00012bf6 l       .debug_str	00000000 
00012bfe l       .debug_str	00000000 
0000bfe3 l       .debug_str	00000000 
00012c06 l       .debug_str	00000000 
00012c0e l       .debug_str	00000000 
00012c15 l       .debug_str	00000000 
000165c5 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00012c1c l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001f4dd l       .debug_str	00000000 
00012c71 l       .debug_str	00000000 
00012c21 l       .debug_str	00000000 
00033d83 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 tdisvxegs4w5usn
00012d7d l       .debug_str	00000000 
00012621 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00012ae6 l       .debug_str	00000000 
00012a74 l       .debug_str	00000000 
00012d0e l       .debug_str	00000000 
00012d4f l       .debug_str	00000000 
00012dbe l       .debug_str	00000000 
00012e21 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000113c9 l       .debug_str	00000000 
0005ac2c l       .debug_str	00000000 
00012e71 l       .debug_str	00000000 
00012ef1 l       .debug_str	00000000 
000117f4 l       .debug_str	00000000 
00012f2f l       .debug_str	00000000 
00012faf l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000116e7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00012625 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00011e0d l       .debug_str	00000000 
000365e3 l       .debug_str	00000000 
000116de l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cfe0 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
000612d3 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016201 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0001161c l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00011788 l       .debug_str	00000000 
000229c8 l       .debug_str	00000000 
0005f726 l       .debug_str	00000000 
00011702 l       .debug_str	00000000 
000160dc l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
00012c7d l       .debug_str	00000000 
00012cc0 l       .debug_str	00000000 
0001260f l       .debug_str	00000000 
00043b6b l       .debug_str	00000000 
00012617 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00011be1 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 u3mfxzl87iwp64s
00001d46 l       .debug_str	00000000 
00013100 l       .debug_str	00000000 
000116de l       .debug_str	00000000 
000229c8 l       .debug_str	00000000 
00011702 l       .debug_str	00000000 
000160dc l       .debug_str	00000000 
0001313d l       .debug_str	00000000 
0001317c l       .debug_str	00000000 
00013290 l       .debug_str	00000000 
000131ef l       .debug_str	00000000 
00013252 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00013279 l       .debug_str	00000000 
0005a698 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00012625 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00011e0d l       .debug_str	00000000 
000365e3 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0005ab3d l       .debug_str	00000000 
00013023 l       .debug_str	00000000 
000130b8 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005cfe0 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
000612d3 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016201 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000113c9 l       .debug_str	00000000 
0005ac2c l       .debug_str	00000000 
0001161c l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
00011788 l       .debug_str	00000000 
0005f726 l       .debug_str	00000000 
000130c1 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.8j8txwjh-cgu.0
000148f0 l       .debug_str	00000000 
000138e1 l       .debug_str	00000000 
0001390b l       .debug_str	00000000 
00013959 l       .debug_str	00000000 
00013961 l       .debug_str	00000000 
0000bf06 l       .debug_str	00000000 
000139ae l       .debug_str	00000000 
00013a08 l       .debug_str	00000000 
00013a16 l       .debug_str	00000000 
00013a69 l       .debug_str	00000000 
00013a71 l       .debug_str	00000000 
00013ac6 l       .debug_str	00000000 
00013ad0 l       .debug_str	00000000 
00013b0e l       .debug_str	00000000 
00013b29 l       .debug_str	00000000 
00013b88 l       .debug_str	00000000 
00012b81 l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
00013bed l       .debug_str	00000000 
00013c1e l       .debug_str	00000000 
00013c29 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
00013c5b l       .debug_str	00000000 
00013c89 l       .debug_str	00000000 
00013c9b l       .debug_str	00000000 
00013cc1 l       .debug_str	00000000 
00013ccd l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
00013d14 l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
0000bf65 l       .debug_str	00000000 
00013d5f l       .debug_str	00000000 
0005ab3d l       .debug_str	00000000 
00013d65 l       .debug_str	00000000 
00013df1 l       .debug_str	00000000 
00013e0c l       .debug_str	00000000 
00013e3c l       .debug_str	00000000 
00013e71 l       .debug_str	00000000 
00013ea1 l       .debug_str	00000000 
00013eb7 l       .debug_str	00000000 
00013eed l       .debug_str	00000000 
00013f08 l       .debug_str	00000000 
00013f42 l       .debug_str	00000000 
00013f61 l       .debug_str	00000000 
00013f9d l       .debug_str	00000000 
00013fc3 l       .debug_str	00000000 
00013fcf l       .debug_str	00000000 
00013ff6 l       .debug_str	00000000 
00014003 l       .debug_str	00000000 
00014210 l       .debug_str	00000000 
00014051 l       .debug_str	00000000 
00014280 l       .debug_str	00000000 
000140a2 l       .debug_str	00000000 
000140f4 l       .debug_str	00000000 
00014100 l       .debug_str	00000000 
0001414b l       .debug_str	00000000 
0001415d l       .debug_str	00000000 
000141a0 l       .debug_str	00000000 
000141ab l       .debug_str	00000000 
00014207 l       .debug_str	00000000 
00014218 l       .debug_str	00000000 
00014277 l       .debug_str	00000000 
0001428b l       .debug_str	00000000 
000142e1 l       .debug_str	00000000 
00014376 l       .debug_str	00000000 
00014382 l       .debug_str	00000000 
0001441c l       .debug_str	00000000 
0001442d l       .debug_str	00000000 
00014452 l       .debug_str	00000000 
000144fb l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0005ac2c l       .debug_str	00000000 
0001450c l       .debug_str	00000000 
00014594 l       .debug_str	00000000 
0001454b l       .debug_str	00000000 
0001458f l       .debug_str	00000000 
000145d9 l       .debug_str	00000000 
0001461a l       .debug_str	00000000 
0001463f l       .debug_str	00000000 
00014690 l       .debug_str	00000000 
000146d5 l       .debug_str	00000000 
00014728 l       .debug_str	00000000 
00014789 l       .debug_str	00000000 
000147f0 l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
00014837 l       .debug_str	00000000 
00014882 l       .debug_str	00000000 
0001488f l       .debug_str	00000000 
00014969 l       .debug_str	00000000 
00014961 l       .debug_str	00000000 
00014971 l       .debug_str	00000000 
00003cf0 l       .debug_str	00000000 
0001498d l       .debug_str	00000000 
00014a02 l       .debug_str	00000000 
00014a2d l       .debug_str	00000000 
00014aa6 l       .debug_str	00000000 
00014ab0 l       .debug_str	00000000 
00014ad6 l       .debug_str	00000000 
00014b0f l       .debug_str	00000000 
00011783 l       .debug_str	00000000 
00014b27 l       .debug_str	00000000 
00014b60 l       .debug_str	00000000 
00014b98 l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
00014bd1 l       .debug_str	00000000 
00014c0c l       .debug_str	00000000 
00014c50 l       .debug_str	00000000 
00014c96 l       .debug_str	00000000 
00014cd2 l       .debug_str	00000000 
00014cfa l       .debug_str	00000000 
00014d36 l       .debug_str	00000000 
00014d5a l       .debug_str	00000000 
00014db7 l       .debug_str	00000000 
00014dcb l       .debug_str	00000000 
00014e1c l       .debug_str	00000000 
00015d04 l       .debug_str	00000000 
00014e28 l       .debug_str	00000000 
00014e79 l       .debug_str	00000000 
00014e90 l       .debug_str	00000000 
00014ee1 l       .debug_str	00000000 
00014eff l       .debug_str	00000000 
00014f50 l       .debug_str	00000000 
00014f62 l       .debug_str	00000000 
00014fba l       .debug_str	00000000 
00014fd0 l       .debug_str	00000000 
00015033 l       .debug_str	00000000 
0001505e l       .debug_str	00000000 
000150c1 l       .debug_str	00000000 
00015136 l       .debug_str	00000000 
0001519a l       .debug_str	00000000 
000151a4 l       .debug_str	00000000 
0001520f l       .debug_str	00000000 
0001521e l       .debug_str	00000000 
0001528a l       .debug_str	00000000 
000152bc l       .debug_str	00000000 
000152e2 l       .debug_str	00000000 
00015351 l       .debug_str	00000000 
00015371 l       .debug_str	00000000 
000153e1 l       .debug_str	00000000 
00015402 l       .debug_str	00000000 
000130b8 l       .debug_str	00000000 
00015476 l       .debug_str	00000000 
000154f6 l       .debug_str	00000000 
0001553c l       .debug_str	00000000 
00015565 l       .debug_str	00000000 
0001556c l       .debug_str	00000000 
000155a4 l       .debug_str	00000000 
000155e3 l       .debug_str	00000000 
000155ea l       .debug_str	00000000 
00015663 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
000156fa l       .debug_str	00000000 
00015778 l       .debug_str	00000000 
00015782 l       .debug_str	00000000 
00015810 l       .debug_str	00000000 
000158bc l       .debug_str	00000000 
00015903 l       .debug_str	00000000 
00015910 l       .debug_str	00000000 
0001595d l       .debug_str	00000000 
00015970 l       .debug_str	00000000 
000159c2 l       .debug_str	00000000 
00015a32 l       .debug_str	00000000 
00013624 l       .debug_str	00000000 
00015a92 l       .debug_str	00000000 
00015aa3 l       .debug_str	00000000 
00015b08 l       .debug_str	00000000 
00015b38 l       .debug_str	00000000 
00015b41 l       .debug_str	00000000 
00015b7d l       .debug_str	00000000 
00015b91 l       .debug_str	00000000 
00015bcc l       .debug_str	00000000 
00015c12 l       .debug_str	00000000 
00015c30 l       .debug_str	00000000 
00015c60 l       .debug_str	00000000 
00015c69 l       .debug_str	00000000 
00015ca3 l       .debug_str	00000000 
00015cb5 l       .debug_str	00000000 
00015ce3 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00015cea l       .debug_str	00000000 
00015cf6 l       .debug_str	00000000 
00015d00 l       .debug_str	00000000 
00015d0a l       .debug_str	00000000 
00015d2d l       .debug_str	00000000 
00033c9d l       .debug_str	00000000 
00015d82 l       .debug_str	00000000 
00015de2 l       .debug_str	00000000 
00015dee l       .debug_str	00000000 
00015e3e l       .debug_str	00000000 
00015ea1 l       .debug_str	00000000 
00015f08 l       .debug_str	00000000 
00015f77 l       .debug_str	00000000 
0005ae33 l       .debug_str	00000000 
00012b80 l       .debug_str	00000000 
00016007 l       .debug_str	00000000 
0005bed0 l       .debug_str	00000000 
00010fb7 l       .debug_str	00000000 
0000bfe3 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
0001f359 l       .debug_str	00000000 
0005a698 l       .debug_str	00000000 
0001602e l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00016035 l       .debug_str	00000000 
0005ae14 l       .debug_str	00000000 
00016042 l       .debug_str	00000000 
0005abba l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0001604d l       .debug_str	00000000 
000611de l       .debug_str	00000000 
000160a1 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005cba1 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
000160ac l       .debug_str	00000000 
000160d7 l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
000160e3 l       .debug_str	00000000 
0001611d l       .debug_str	00000000 
00016156 l       .debug_str	00000000 
00016165 l       .debug_str	00000000 
000161a8 l       .debug_str	00000000 
0005c0e5 l       .debug_str	00000000 
00038a70 l       .debug_str	00000000 
0005db0a l       .debug_str	00000000 
000161ea l       .debug_str	00000000 
0001620e l       .debug_str	00000000 
0001577d l       .debug_str	00000000 
0005a669 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
0001622e l       .debug_str	00000000 
0004680e l       .debug_str	00000000 
00016269 l       .debug_str	00000000 
00016270 l       .debug_str	00000000 
0003740a l       .debug_str	00000000 
000007da l       .debug_str	00000000 
000162b1 l       .debug_str	00000000 
000162f8 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0001f81c l       .debug_str	00000000 
000162d2 l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
000168c2 l       .debug_str	00000000 
000162f4 l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
0001167a l       .debug_str	00000000 
00011685 l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
0001167e l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0000b6ea l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001329a l       .debug_str	00000000 
000132f2 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0001333f l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00013349 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00013355 l       .debug_str	00000000 
000160bd l       .debug_str	00000000 
000160b1 l       .debug_str	00000000 
000160dc l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea0f l       .debug_str	00000000 
000399b4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005e79b l       .debug_str	00000000 
0003578f l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0001336b l       .debug_str	00000000 
00013371 l       .debug_str	00000000 
000165c5 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00012625 l       .debug_str	00000000 
000116de l       .debug_str	00000000 
0001260f l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00013379 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0001337f l       .debug_str	00000000 
00033331 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ed l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a79c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394ca l       .debug_str	00000000 
0005cbb3 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a825 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a6 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0005e9b7 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0001338a l       .debug_str	00000000 
000133b3 l       .debug_str	00000000 
000133c2 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000110a8 l       .debug_str	00000000 
000110ac l       .debug_str	00000000 
0001615f l       .debug_str	00000000 
000133dc l       .debug_str	00000000 
00013405 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
0001343a l       .debug_str	00000000 
0001344e l       .debug_str	00000000 
00013461 l       .debug_str	00000000 
000134ad l       .debug_str	00000000 
000134bb l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00035769 l       .debug_str	00000000 
000134c3 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00011e0d l       .debug_str	00000000 
000365e3 l       .debug_str	00000000 
000612d3 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013614 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00011788 l       .debug_str	00000000 
000229c8 l       .debug_str	00000000 
0005f726 l       .debug_str	00000000 
0001628b l       .debug_str	00000000 
00043b6b l       .debug_str	00000000 
00012617 l       .debug_str	00000000 
000134cd l       .debug_str	00000000 
0005cfe0 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016201 l       .debug_str	00000000 
0005c249 l       .debug_str	00000000 
00014ac8 l       .debug_str	00000000 
00016241 l       .debug_str	00000000 
00012621 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00015f9b l       .debug_str	00000000 
00015f2c l       .debug_str	00000000 
000134d3 l       .debug_str	00000000 
000134d9 l       .debug_str	00000000 
00013502 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00014ab1 l       .debug_str	00000000 
0001350e l       .debug_str	00000000 
00012b84 l       .debug_str	00000000 
0001353b l       .debug_str	00000000 
0003e5fe l       .debug_str	00000000 
00013546 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
0001356f l       .debug_str	00000000 
00013576 l       .debug_str	00000000 
000135a0 l       .debug_str	00000000 
0002053c l       .debug_str	00000000 
000135a4 l       .debug_str	00000000 
0002219b l       .debug_str	00000000 
000135ad l       .debug_str	00000000 
000135ef l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00013602 l       .debug_str	00000000 
0005f630 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0004aebd l       .debug_str	00000000 
0001361d l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
0001362c l       .debug_str	00000000 
00013636 l       .debug_str	00000000 
000162de l       .debug_str	00000000 
00015a9e l       .debug_str	00000000 
0001363b l       .debug_str	00000000 
000136c1 l       .debug_str	00000000 
000136cb l       .debug_str	00000000 
0001375d l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
000137a3 l       .debug_str	00000000 
00013837 l       .debug_str	00000000 
00013899 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 embedded_graphics.94s3esdv-cgu.0
00016cba l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0005e9b7 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394ca l       .debug_str	00000000 
0005cbb3 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a825 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a6 l       .debug_str	00000000 
0000e8a0 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00018c28 l       .debug_str	00000000 
0000c21f l       .debug_str	00000000 
0000c284 l       .debug_str	00000000 
000163b1 l       .debug_str	00000000 
000163ba l       .debug_str	00000000 
000163c2 l       .debug_str	00000000 
000163cb l       .debug_str	00000000 
00034a6f l       .debug_str	00000000 
000163d8 l       .debug_str	00000000 
000163e8 l       .debug_str	00000000 
000163f9 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c73 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0001640a l       .debug_str	00000000 
0000e718 l       .debug_str	00000000 
0000e726 l       .debug_str	00000000 
00018cd9 l       .debug_str	00000000 
00016413 l       .debug_str	00000000 
00016419 l       .debug_str	00000000 
00016424 l       .debug_str	00000000 
0001642e l       .debug_str	00000000 
00016438 l       .debug_str	00000000 
0000b802 l       .debug_str	00000000 
00016480 l       .debug_str	00000000 
0000b8eb l       .debug_str	00000000 
000164c8 l       .debug_str	00000000 
00016510 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
00016519 l       .debug_str	00000000 
00016542 l       .debug_str	00000000 
0001654b l       .debug_str	00000000 
000165a8 l       .debug_str	00000000 
0005f726 l       .debug_str	00000000 
000165ce l       .debug_str	00000000 
000165f6 l       .debug_str	00000000 
00016628 l       .debug_str	00000000 
00013c1e l       .debug_str	00000000 
00016659 l       .debug_str	00000000 
000166b6 l       .debug_str	00000000 
00016713 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
000167a2 l       .debug_str	00000000 
000167e7 l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
000167f3 l       .debug_str	00000000 
00059c30 l       .debug_str	00000000 
0001682f l       .debug_str	00000000 
0000e851 l       .debug_str	00000000 
00016873 l       .debug_str	00000000 
000168ba l       .debug_str	00000000 
000168c8 l       .debug_str	00000000 
0001690f l       .debug_str	00000000 
0001691d l       .debug_str	00000000 
0001695d l       .debug_str	00000000 
00016965 l       .debug_str	00000000 
0000e8d8 l       .debug_str	00000000 
00016972 l       .debug_str	00000000 
000169ad l       .debug_str	00000000 
000169eb l       .debug_str	00000000 
00016a1b l       .debug_str	00000000 
00016a2f l       .debug_str	00000000 
00016a5f l       .debug_str	00000000 
00016a73 l       .debug_str	00000000 
00016aa3 l       .debug_str	00000000 
00016ab7 l       .debug_str	00000000 
0003f8ee l       .debug_str	00000000 
00016b02 l       .debug_str	00000000 
00016b59 l       .debug_str	00000000 
00016b68 l       .debug_str	00000000 
00016bb3 l       .debug_str	00000000 
0000be4e l       .debug_str	00000000 
00016c2a l       .debug_str	00000000 
00016caf l       .debug_str	00000000 
0000bf06 l       .debug_str	00000000 
00016d31 l       .debug_str	00000000 
00016db6 l       .debug_str	00000000 
00016dc1 l       .debug_str	00000000 
0005a669 l       .debug_str	00000000 
00016e4a l       .debug_str	00000000 
0001fc8a l       .debug_str	00000000 
00016ec1 l       .debug_str	00000000 
0005c057 l       .debug_str	00000000 
00016f56 l       .debug_str	00000000 
00016fed l       .debug_str	00000000 
00017088 l       .debug_str	00000000 
0001711d l       .debug_str	00000000 
000171b4 l       .debug_str	00000000 
0001724f l       .debug_str	00000000 
00017317 l       .debug_str	00000000 
00017322 l       .debug_str	00000000 
000173ee l       .debug_str	00000000 
0001747e l       .debug_str	00000000 
0001748a l       .debug_str	00000000 
00017530 l       .debug_str	00000000 
0001753c l       .debug_str	00000000 
000175e0 l       .debug_str	00000000 
00017682 l       .debug_str	00000000 
00017726 l       .debug_str	00000000 
0001777a l       .debug_str	00000000 
000177cf l       .debug_str	00000000 
00017824 l       .debug_str	00000000 
00013624 l       .debug_str	00000000 
000178a7 l       .debug_str	00000000 
0001792b l       .debug_str	00000000 
000179af l       .debug_str	00000000 
00002878 l       .debug_str	00000000 
000179f6 l       .debug_str	00000000 
0000287e l       .debug_str	00000000 
00017a3d l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00017a84 l       .debug_str	00000000 
00017b02 l       .debug_str	00000000 
00017b81 l       .debug_str	00000000 
00017c1c l       .debug_str	00000000 
00017cb0 l       .debug_str	00000000 
00017cfd l       .debug_str	00000000 
00017d09 l       .debug_str	00000000 
00017d6c l       .debug_str	00000000 
00017db4 l       .debug_str	00000000 
000110a8 l       .debug_str	00000000 
00017dbc l       .debug_str	00000000 
00017e50 l       .debug_str	00000000 
00017eb6 l       .debug_str	00000000 
00017f47 l       .debug_str	00000000 
00017fe6 l       .debug_str	00000000 
00018077 l       .debug_str	00000000 
00018116 l       .debug_str	00000000 
000181b8 l       .debug_str	00000000 
00018249 l       .debug_str	00000000 
000182f7 l       .debug_str	00000000 
000183a7 l       .debug_str	00000000 
0001845b l       .debug_str	00000000 
0001854e l       .debug_str	00000000 
00018559 l       .debug_str	00000000 
00018650 l       .debug_str	00000000 
000186fc l       .debug_str	00000000 
00018706 l       .debug_str	00000000 
00018778 l       .debug_str	00000000 
000187ed l       .debug_str	00000000 
00018860 l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00018944 l       .debug_str	00000000 
000189bb l       .debug_str	00000000 
00018a30 l       .debug_str	00000000 
00018aa5 l       .debug_str	00000000 
00018b15 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0000bb39 l       .debug_str	00000000 
00018ba1 l       .debug_str	00000000 
0001f359 l       .debug_str	00000000 
00018ba7 l       .debug_str	00000000 
00013959 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
000160dc l       .debug_str	00000000 
0001604d l       .debug_str	00000000 
000168c2 l       .debug_str	00000000 
00018baa l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
00018bbe l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00018bc8 l       .debug_str	00000000 
00018bf9 l       .debug_str	00000000 
0006174b l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
00018c2e l       .debug_str	00000000 
00018c38 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00018c42 l       .debug_str	00000000 
00018c4b l       .debug_str	00000000 
00018c7a l       .debug_str	00000000 
00018c87 l       .debug_str	00000000 
00018c8a l       .debug_str	00000000 
00018c8d l       .debug_str	00000000 
00018c90 l       .debug_str	00000000 
00018c93 l       .debug_str	00000000 
00018c96 l       .debug_str	00000000 
00018c99 l       .debug_str	00000000 
00018ce7 l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
0001167e l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
00011691 l       .debug_str	00000000 
00018d57 l       .debug_str	00000000 
00018d31 l       .debug_str	00000000 
00018d8a l       .debug_str	00000000 
00018d65 l       .debug_str	00000000 
00018dbb l       .debug_str	00000000 
00018d97 l       .debug_str	00000000 
00018dec l       .debug_str	00000000 
00018dc7 l       .debug_str	00000000 
00018e20 l       .debug_str	00000000 
00018df9 l       .debug_str	00000000 
00018e55 l       .debug_str	00000000 
00018e2f l       .debug_str	00000000 
00018e89 l       .debug_str	00000000 
00018e63 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000162fc l       .debug_str	00000000 
0001635c l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00018baf l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
00018bb9 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00018bc3 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea0f l       .debug_str	00000000 
000399b4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005e79b l       .debug_str	00000000 
0003578f l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0001336b l       .debug_str	00000000 
00013371 l       .debug_str	00000000 
000165c5 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00038680 l       .debug_str	00000000 
00033331 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ed l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a79c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00011724 l     F .text	00000044 _ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE
00011818 l     F .text	0000006e _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E
00011886 l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE
000118be l     F .text	0000001a _ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E
00000000 l    df *ABS*	00000000 hash32.79y5bd3b-cgu.0
00014f50 l       .debug_str	00000000 
00019371 l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
0000bf65 l       .debug_str	00000000 
000193bc l       .debug_str	00000000 
00013eed l       .debug_str	00000000 
000193f2 l       .debug_str	00000000 
00013f42 l       .debug_str	00000000 
0001942c l       .debug_str	00000000 
00019468 l       .debug_str	00000000 
00013fc3 l       .debug_str	00000000 
0001948e l       .debug_str	00000000 
00013ff6 l       .debug_str	00000000 
000194b5 l       .debug_str	00000000 
00014210 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00019503 l       .debug_str	00000000 
00014280 l       .debug_str	00000000 
00019554 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000195a6 l       .debug_str	00000000 
0005ab3d l       .debug_str	00000000 
000195fb l       .debug_str	00000000 
00014376 l       .debug_str	00000000 
00019690 l       .debug_str	00000000 
000196de l       .debug_str	00000000 
000229c8 l       .debug_str	00000000 
000196ed l       .debug_str	00000000 
0001973e l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00019756 l       .debug_str	00000000 
000197ab l       .debug_str	00000000 
000197c7 l       .debug_str	00000000 
000197cf l       .debug_str	00000000 
00019815 l       .debug_str	00000000 
0001981d l       .debug_str	00000000 
000141a0 l       .debug_str	00000000 
00019866 l       .debug_str	00000000 
0005c057 l       .debug_str	00000000 
000198d5 l       .debug_str	00000000 
00014e1c l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00019926 l       .debug_str	00000000 
00019977 l       .debug_str	00000000 
00014fba l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
0001353b l       .debug_str	00000000 
0003e5fe l       .debug_str	00000000 
00013546 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005cfe0 l       .debug_str	00000000 
000612d3 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016201 l       .debug_str	00000000 
000199cf l       .debug_str	00000000 
00019a32 l       .debug_str	00000000 
00019a5c l       .debug_str	00000000 
00019abf l       .debug_str	00000000 
00019ac8 l       .debug_str	00000000 
00019b35 l       .debug_str	00000000 
00019b47 l       .debug_str	00000000 
00003c53 l       .debug_str	00000000 
00019bb8 l       .debug_str	00000000 
00013624 l       .debug_str	00000000 
00019c18 l       .debug_str	00000000 
00019c4b l       .debug_str	00000000 
00019cb5 l       .debug_str	00000000 
00019ce8 l       .debug_str	00000000 
00019ced l       .debug_str	00000000 
00019d51 l       .debug_str	00000000 
0005e910 l       .debug_str	00000000 
00019dac l       .debug_str	00000000 
00019de8 l       .debug_str	00000000 
00019df6 l       .debug_str	00000000 
00019e25 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000160dc l       .debug_str	00000000 
0005a698 l       .debug_str	00000000 
0001602e l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005ae14 l       .debug_str	00000000 
0005abba l       .debug_str	00000000 
00016035 l       .debug_str	00000000 
00016042 l       .debug_str	00000000 
0001f359 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
000160a1 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005cba1 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
000160e3 l       .debug_str	00000000 
0001611d l       .debug_str	00000000 
00016156 l       .debug_str	00000000 
00016165 l       .debug_str	00000000 
000161a8 l       .debug_str	00000000 
0005c0e5 l       .debug_str	00000000 
00038a70 l       .debug_str	00000000 
0005db0a l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
000161ea l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
0002219b l       .debug_str	00000000 
00035d02 l       .debug_str	00000000 
0005c249 l       .debug_str	00000000 
00019e2d l       .debug_str	00000000 
00019e45 l       .debug_str	00000000 
000611de l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
00019e62 l       .debug_str	00000000 
00011569 l       .debug_str	00000000 
00019e7b l       .debug_str	00000000 
00019e97 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00018e97 l       .debug_str	00000000 
00018eec l       .debug_str	00000000 
00018f36 l       .debug_str	00000000 
00018f3d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00010a91 l       .debug_str	00000000 
00011699 l       .debug_str	00000000 
000116a4 l       .debug_str	00000000 
000116af l       .debug_str	00000000 
00019e3f l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00012625 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0001337f l       .debug_str	00000000 
0005e79b l       .debug_str	00000000 
00033331 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0005e9b7 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00018f45 l       .debug_str	00000000 
000133b3 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000133c2 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000110a8 l       .debug_str	00000000 
000110ac l       .debug_str	00000000 
0001615f l       .debug_str	00000000 
00018f6e l       .debug_str	00000000 
00013405 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
0001343a l       .debug_str	00000000 
0001344e l       .debug_str	00000000 
00018f97 l       .debug_str	00000000 
000134ad l       .debug_str	00000000 
000134bb l       .debug_str	00000000 
000134c3 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00012b84 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00018fe3 l       .debug_str	00000000 
0000ae86 l       .debug_str	00000000 
0001900c l       .debug_str	00000000 
00019016 l       .debug_str	00000000 
0005a79c l       .debug_str	00000000 
000168c2 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000574 l       .debug_str	00000000 
0005a669 l       .debug_str	00000000 
0001901a l       .debug_str	00000000 
0005ab8e l       .debug_str	00000000 
00019e91 l       .debug_str	00000000 
00019e5b l       .debug_str	00000000 
00019024 l       .debug_str	00000000 
00013ac6 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
00019079 l       .debug_str	00000000 
000190b7 l       .debug_str	00000000 
000190cf l       .debug_str	00000000 
00013b0e l       .debug_str	00000000 
0001910d l       .debug_str	00000000 
00012b81 l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
00019172 l       .debug_str	00000000 
000191a2 l       .debug_str	00000000 
000191c9 l       .debug_str	00000000 
00013cc1 l       .debug_str	00000000 
000191ef l       .debug_str	00000000 
00019234 l       .debug_str	00000000 
00019240 l       .debug_str	00000000 
00019286 l       .debug_str	00000000 
00019293 l       .debug_str	00000000 
000192d9 l       .debug_str	00000000 
000192e6 l       .debug_str	00000000 
00019324 l       .debug_str	00000000 
0001932a l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
00011a6e l     F .text	00000034 _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE
00011ad8 l     F .text	00000018 _ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E
00011b02 l     F .text	0000003e _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE
00011b40 l     F .text	00000040 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE
00011c10 l     F .text	0000011c _ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE
00000000 l    df *ABS*	00000000 4iim1qfb3qo0ur8y
00019f1b l       .debug_str	00000000 
00019f19 l       .debug_str	00000000 
00019f6c l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00019ea0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00012b84 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00019ebf l       .debug_str	00000000 
00019f10 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 log.9af4yuww-cgu.0
0001c0ea l       .debug_str	00000000 
00012c06 l       .debug_str	00000000 
00012c0e l       .debug_str	00000000 
00012c15 l       .debug_str	00000000 
00011f4e l       .debug_str	00000000 
0001f5f0 l       .debug_str	00000000 
000116de l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0001a294 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
0001a298 l       .debug_str	00000000 
00019815 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00035769 l       .debug_str	00000000 
000612d3 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013614 l       .debug_str	00000000 
0001a316 l       .debug_str	00000000 
0005cfe0 l       .debug_str	00000000 
0004680e l       .debug_str	00000000 
000600b4 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0001a32d l       .debug_str	00000000 
00013502 l       .debug_str	00000000 
0001a356 l       .debug_str	00000000 
0001a388 l       .debug_str	00000000 
0001337f l       .debug_str	00000000 
00038680 l       .debug_str	00000000 
00033331 l       .debug_str	00000000 
0005e9b7 l       .debug_str	00000000 
0000e8a0 l       .debug_str	00000000 
0001a39a l       .debug_str	00000000 
0001a3c3 l       .debug_str	00000000 
000133c2 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000110a8 l       .debug_str	00000000 
000110ac l       .debug_str	00000000 
0001615f l       .debug_str	00000000 
0001a3e8 l       .debug_str	00000000 
00013405 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
0001a411 l       .debug_str	00000000 
0001a43b l       .debug_str	00000000 
0001a464 l       .debug_str	00000000 
0001a4b0 l       .debug_str	00000000 
000134bb l       .debug_str	00000000 
0001a4d4 l       .debug_str	00000000 
000134c3 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b253 l       .debug_str	00000000 
0000b294 l       .debug_str	00000000 
0002219b l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0005ac2c l       .debug_str	00000000 
0001a4e2 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00011e0d l       .debug_str	00000000 
000365e3 l       .debug_str	00000000 
0005b97f l       .debug_str	00000000 
0004e9d2 l       .debug_str	00000000 
0005c6e4 l       .debug_str	00000000 
0005dffd l       .debug_str	00000000 
000229c8 l       .debug_str	00000000 
0001f24a l       .debug_str	00000000 
00043b6b l       .debug_str	00000000 
0003928a l       .debug_str	00000000 
0005ab3d l       .debug_str	00000000 
0001f55a l       .debug_str	00000000 
0001f502 l       .debug_str	00000000 
0001a4f7 l       .debug_str	00000000 
0001a501 l       .debug_str	00000000 
0001f3e2 l       .debug_str	00000000 
00034a6f l       .debug_str	00000000 
0001f1ba l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0001ced1 l       .debug_str	00000000 
0005f726 l       .debug_str	00000000 
0001f593 l       .debug_str	00000000 
0005cba1 l       .debug_str	00000000 
0001f572 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
0005a669 l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
0001f20b l       .debug_str	00000000 
000134d3 l       .debug_str	00000000 
0001a50a l       .debug_str	00000000 
0001a533 l       .debug_str	00000000 
0001a541 l       .debug_str	00000000 
0001a54e l       .debug_str	00000000 
0001a561 l       .debug_str	00000000 
0003e5fe l       .debug_str	00000000 
0001a57a l       .debug_str	00000000 
00012b84 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
0001a58f l       .debug_str	00000000 
0001a60b l       .debug_str	00000000 
0001a5a2 l       .debug_str	00000000 
0001a5e4 l       .debug_str	00000000 
0001a5f9 l       .debug_str	00000000 
0005f630 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0004aebd l       .debug_str	00000000 
0001a616 l       .debug_str	00000000 
0001a620 l       .debug_str	00000000 
0001a652 l       .debug_str	00000000 
0001a666 l       .debug_str	00000000 
0001a67b l       .debug_str	00000000 
0001e7b5 l       .debug_str	00000000 
0001e9be l       .debug_str	00000000 
0001a682 l       .debug_str	00000000 
0001a68d l       .debug_str	00000000 
0001a711 l       .debug_str	00000000 
0001a73f l       .debug_str	00000000 
0001a7c5 l       .debug_str	00000000 
00042a6c l       .debug_str	00000000 
0001a7ed l       .debug_str	00000000 
0001a7fe l       .debug_str	00000000 
0001a888 l       .debug_str	00000000 
0001a8a6 l       .debug_str	00000000 
0001a934 l       .debug_str	00000000 
0001a95b l       .debug_str	00000000 
0001a9ea l       .debug_str	00000000 
0001aa32 l       .debug_str	00000000 
0001aa61 l       .debug_str	00000000 
0001aaa9 l       .debug_str	00000000 
0001aac8 l       .debug_str	00000000 
0001ab10 l       .debug_str	00000000 
0001ab20 l       .debug_str	00000000 
0001ab68 l       .debug_str	00000000 
0001ab79 l       .debug_str	00000000 
0001abc1 l       .debug_str	00000000 
0001abc9 l       .debug_str	00000000 
0001ac11 l       .debug_str	00000000 
0001ac1b l       .debug_str	00000000 
0001ac63 l       .debug_str	00000000 
0001ac7d l       .debug_str	00000000 
0001acc5 l       .debug_str	00000000 
0001acde l       .debug_str	00000000 
0001ad26 l       .debug_str	00000000 
0001ad39 l       .debug_str	00000000 
0001ad81 l       .debug_str	00000000 
0001ad8a l       .debug_str	00000000 
0000b8eb l       .debug_str	00000000 
0001add2 l       .debug_str	00000000 
0001ae1c l       .debug_str	00000000 
0001ae67 l       .debug_str	00000000 
0001aea5 l       .debug_str	00000000 
0001aed6 l       .debug_str	00000000 
000190b7 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0001af14 l       .debug_str	00000000 
0001af3d l       .debug_str	00000000 
0001af48 l       .debug_str	00000000 
0001af6d l       .debug_str	00000000 
0001afcc l       .debug_str	00000000 
00033c9d l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
000160dc l       .debug_str	00000000 
0001b033 l       .debug_str	00000000 
0001b05d l       .debug_str	00000000 
0001b085 l       .debug_str	00000000 
0001b0bd l       .debug_str	00000000 
0001b0ee l       .debug_str	00000000 
0001b0f8 l       .debug_str	00000000 
0001b155 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
0001b187 l       .debug_str	00000000 
0001b1ad l       .debug_str	00000000 
0001b1cf l       .debug_str	00000000 
0001b1f5 l       .debug_str	00000000 
0001b217 l       .debug_str	00000000 
0001b240 l       .debug_str	00000000 
0001b265 l       .debug_str	00000000 
0001b2ad l       .debug_str	00000000 
0001b2ba l       .debug_str	00000000 
0001b2c3 l       .debug_str	00000000 
0001b34d l       .debug_str	00000000 
00011f8d l       .debug_str	00000000 
0001b36a l       .debug_str	00000000 
0001b3f6 l       .debug_str	00000000 
0001b413 l       .debug_str	00000000 
0001b433 l       .debug_str	00000000 
0000e8d8 l       .debug_str	00000000 
0001b43a l       .debug_str	00000000 
0001b475 l       .debug_str	00000000 
0001b4a7 l       .debug_str	00000000 
0001b4b8 l       .debug_str	00000000 
0001b4f3 l       .debug_str	00000000 
0001b539 l       .debug_str	00000000 
00016aa3 l       .debug_str	00000000 
0001b569 l       .debug_str	00000000 
0001b599 l       .debug_str	00000000 
0001b5b7 l       .debug_str	00000000 
0001b5e7 l       .debug_str	00000000 
0001b5fa l       .debug_str	00000000 
0001b62a l       .debug_str	00000000 
0001b63f l       .debug_str	00000000 
0001b66f l       .debug_str	00000000 
0001b68b l       .debug_str	00000000 
0001b6bb l       .debug_str	00000000 
0001b6d9 l       .debug_str	00000000 
0001b709 l       .debug_str	00000000 
0001b724 l       .debug_str	00000000 
0001b754 l       .debug_str	00000000 
0001b778 l       .debug_str	00000000 
0001b7a8 l       .debug_str	00000000 
0001b7e2 l       .debug_str	00000000 
0001b812 l       .debug_str	00000000 
0001b837 l       .debug_str	00000000 
0001b867 l       .debug_str	00000000 
0001b891 l       .debug_str	00000000 
0001b8c7 l       .debug_str	00000000 
0001b8f8 l       .debug_str	00000000 
0001b932 l       .debug_str	00000000 
0001b967 l       .debug_str	00000000 
0001b9a3 l       .debug_str	00000000 
0001b9c9 l       .debug_str	00000000 
0001b9eb l       .debug_str	00000000 
0001ba12 l       .debug_str	00000000 
0001ba35 l       .debug_str	00000000 
00014210 l       .debug_str	00000000 
0001ba83 l       .debug_str	00000000 
00014280 l       .debug_str	00000000 
0001bad4 l       .debug_str	00000000 
0001bb25 l       .debug_str	00000000 
0001bb32 l       .debug_str	00000000 
0001bb84 l       .debug_str	00000000 
0001bb92 l       .debug_str	00000000 
0001414b l       .debug_str	00000000 
0001bbdd l       .debug_str	00000000 
0001bc28 l       .debug_str	00000000 
0001bc3c l       .debug_str	00000000 
0001bc7f l       .debug_str	00000000 
0001bc8c l       .debug_str	00000000 
000141a0 l       .debug_str	00000000 
0001bccf l       .debug_str	00000000 
00014207 l       .debug_str	00000000 
0001bd2b l       .debug_str	00000000 
00014277 l       .debug_str	00000000 
0001bd8a l       .debug_str	00000000 
0001bddc l       .debug_str	00000000 
0001be2e l       .debug_str	00000000 
0001be38 l       .debug_str	00000000 
0001be8d l       .debug_str	00000000 
0001bee2 l       .debug_str	00000000 
0001bf38 l       .debug_str	00000000 
000140f4 l       .debug_str	00000000 
0001bf8e l       .debug_str	00000000 
0001bfca l       .debug_str	00000000 
000168c2 l       .debug_str	00000000 
0001c008 l       .debug_str	00000000 
0001c043 l       .debug_str	00000000 
00016042 l       .debug_str	00000000 
0001c04e l       .debug_str	00000000 
0001c095 l       .debug_str	00000000 
00011788 l       .debug_str	00000000 
0001c0ab l       .debug_str	00000000 
0001c13c l       .debug_str	00000000 
0001c152 l       .debug_str	00000000 
0001c197 l       .debug_str	00000000 
0001c1b1 l       .debug_str	00000000 
0001c214 l       .debug_str	00000000 
0001c234 l       .debug_str	00000000 
0001c273 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0001c2d4 l       .debug_str	00000000 
0001c313 l       .debug_str	00000000 
0001f3dd l       .debug_str	00000000 
0001c33a l       .debug_str	00000000 
0001c37a l       .debug_str	00000000 
0001c3ad l       .debug_str	00000000 
0001c3c4 l       .debug_str	00000000 
0001c40a l       .debug_str	00000000 
0001c426 l       .debug_str	00000000 
0001c48a l       .debug_str	00000000 
0001c4ac l       .debug_str	00000000 
0001c4ee l       .debug_str	00000000 
0001c50f l       .debug_str	00000000 
0001c551 l       .debug_str	00000000 
0005d23d l       .debug_str	00000000 
0001c581 l       .debug_str	00000000 
0001c5c5 l       .debug_str	00000000 
0001c61a l       .debug_str	00000000 
0001c65e l       .debug_str	00000000 
0001c6b4 l       .debug_str	00000000 
0001c6f8 l       .debug_str	00000000 
0001c770 l       .debug_str	00000000 
0001c7b4 l       .debug_str	00000000 
0001c7f4 l       .debug_str	00000000 
0001c80f l       .debug_str	00000000 
0001c850 l       .debug_str	00000000 
0001c8a6 l       .debug_str	00000000 
0001c8ea l       .debug_str	00000000 
0001c917 l       .debug_str	00000000 
0001c95c l       .debug_str	00000000 
0001c9a4 l       .debug_str	00000000 
0001c9b5 l       .debug_str	00000000 
0001c9fd l       .debug_str	00000000 
0001ca0e l       .debug_str	00000000 
00033d83 l       .debug_str	00000000 
0001ca49 l       .debug_str	00000000 
0001ca85 l       .debug_str	00000000 
0001ca8b l       .debug_str	00000000 
0001cac1 l       .debug_str	00000000 
0001cad4 l       .debug_str	00000000 
0001cb0b l       .debug_str	00000000 
0001cb1f l       .debug_str	00000000 
0001cb61 l       .debug_str	00000000 
0001cb80 l       .debug_str	00000000 
0001cbc5 l       .debug_str	00000000 
0001cbe0 l       .debug_str	00000000 
0001cc45 l       .debug_str	00000000 
0001ccac l       .debug_str	00000000 
0001ccb7 l       .debug_str	00000000 
0001ccfd l       .debug_str	00000000 
0001cd43 l       .debug_str	00000000 
0001cd4d l       .debug_str	00000000 
0001cd94 l       .debug_str	00000000 
0001cd9f l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
0001cde6 l       .debug_str	00000000 
0001ce2f l       .debug_str	00000000 
0001ce78 l       .debug_str	00000000 
0001ceb1 l       .debug_str	00000000 
0001cecc l       .debug_str	00000000 
0001cedb l       .debug_str	00000000 
0001cf14 l       .debug_str	00000000 
0001cf39 l       .debug_str	00000000 
0001cf72 l       .debug_str	00000000 
0001cfab l       .debug_str	00000000 
0001cfd1 l       .debug_str	00000000 
0001d00a l       .debug_str	00000000 
0001d048 l       .debug_str	00000000 
0001d082 l       .debug_str	00000000 
0001d08e l       .debug_str	00000000 
0001d0ca l       .debug_str	00000000 
0001d0dd l       .debug_str	00000000 
0001d119 l       .debug_str	00000000 
0001d132 l       .debug_str	00000000 
0001d16f l       .debug_str	00000000 
0001d180 l       .debug_str	00000000 
00014e1c l       .debug_str	00000000 
0001d1d1 l       .debug_str	00000000 
00019f10 l       .debug_str	00000000 
0001d222 l       .debug_str	00000000 
0001d27d l       .debug_str	00000000 
0001d2e0 l       .debug_str	00000000 
0001d2fc l       .debug_str	00000000 
0001d35c l       .debug_str	00000000 
0001d3bc l       .debug_str	00000000 
0001d420 l       .debug_str	00000000 
0001d43b l       .debug_str	00000000 
0001d49f l       .debug_str	00000000 
0001d4aa l       .debug_str	00000000 
0001d514 l       .debug_str	00000000 
0001d523 l       .debug_str	00000000 
0001d592 l       .debug_str	00000000 
0001d5aa l       .debug_str	00000000 
0001d61a l       .debug_str	00000000 
0001d633 l       .debug_str	00000000 
0001d69e l       .debug_str	00000000 
0001d6b3 l       .debug_str	00000000 
0001d723 l       .debug_str	00000000 
0001d738 l       .debug_str	00000000 
0001d7a8 l       .debug_str	00000000 
0001d7ba l       .debug_str	00000000 
0000389e l       .debug_str	00000000 
0001d82b l       .debug_str	00000000 
0001d89c l       .debug_str	00000000 
0001d8b2 l       .debug_str	00000000 
0001d8c4 l       .debug_str	00000000 
0001d930 l       .debug_str	00000000 
0001d942 l       .debug_str	00000000 
0001d9ae l       .debug_str	00000000 
0001d9bd l       .debug_str	00000000 
0001da25 l       .debug_str	00000000 
0001da2f l       .debug_str	00000000 
0001daa3 l       .debug_str	00000000 
00001425 l       .debug_str	00000000 
0001daae l       .debug_str	00000000 
0001db26 l       .debug_str	00000000 
0001db3f l       .debug_str	00000000 
0001dbb7 l       .debug_str	00000000 
0001dc4d l       .debug_str	00000000 
0001dc69 l       .debug_str	00000000 
0001dcff l       .debug_str	00000000 
0001dd95 l       .debug_str	00000000 
0001de2b l       .debug_str	00000000 
00014376 l       .debug_str	00000000 
0001dea0 l       .debug_str	00000000 
0001df14 l       .debug_str	00000000 
0001df8d l       .debug_str	00000000 
0001e00c l       .debug_str	00000000 
0001e01d l       .debug_str	00000000 
0001e09d l       .debug_str	00000000 
0001e0ff l       .debug_str	00000000 
0001f65d l       .debug_str	00000000 
0001e150 l       .debug_str	00000000 
0001e172 l       .debug_str	00000000 
0001e19f l       .debug_str	00000000 
0001e1ce l       .debug_str	00000000 
0001e1f0 l       .debug_str	00000000 
0001e217 l       .debug_str	00000000 
0001e240 l       .debug_str	00000000 
0001e272 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0001e2c2 l       .debug_str	00000000 
0001e308 l       .debug_str	00000000 
0001e31b l       .debug_str	00000000 
0001e36f l       .debug_str	00000000 
0001e3e1 l       .debug_str	00000000 
0001e453 l       .debug_str	00000000 
0001e4c5 l       .debug_str	00000000 
0001e514 l       .debug_str	00000000 
0001e542 l       .debug_str	00000000 
0001e54d l       .debug_str	00000000 
0001e5a7 l       .debug_str	00000000 
0001e61f l       .debug_str	00000000 
0001e697 l       .debug_str	00000000 
0001e6ec l       .debug_str	00000000 
0001e721 l       .debug_str	00000000 
0000b6c3 l       .debug_str	00000000 
0001e74c l       .debug_str	00000000 
0003f8ee l       .debug_str	00000000 
0001e77b l       .debug_str	00000000 
0001e7ab l       .debug_str	00000000 
0001e7c3 l       .debug_str	00000000 
0001e7f4 l       .debug_str	00000000 
0001e826 l       .debug_str	00000000 
0001e865 l       .debug_str	00000000 
0001e878 l       .debug_str	00000000 
0001e8b0 l       .debug_str	00000000 
0001e8bc l       .debug_str	00000000 
0001e8ec l       .debug_str	00000000 
0001e91d l       .debug_str	00000000 
0001e923 l       .debug_str	00000000 
0001e950 l       .debug_str	00000000 
0001e981 l       .debug_str	00000000 
0001e9b4 l       .debug_str	00000000 
0001e9ce l       .debug_str	00000000 
0001ea02 l       .debug_str	00000000 
0001ea35 l       .debug_str	00000000 
00059bc8 l       .debug_str	00000000 
0001ea82 l       .debug_str	00000000 
0001eacb l       .debug_str	00000000 
00059bab l       .debug_str	00000000 
0001eb16 l       .debug_str	00000000 
0001eb3e l       .debug_str	00000000 
0001eb84 l       .debug_str	00000000 
0001eb8a l       .debug_str	00000000 
0001ebb8 l       .debug_str	00000000 
0001ebd4 l       .debug_str	00000000 
0001ec01 l       .debug_str	00000000 
0001ec11 l       .debug_str	00000000 
0001ec69 l       .debug_str	00000000 
0001ecc2 l       .debug_str	00000000 
0001ece5 l       .debug_str	00000000 
0001ed14 l       .debug_str	00000000 
0001ed26 l       .debug_str	00000000 
0001ed59 l       .debug_str	00000000 
0001ed6f l       .debug_str	00000000 
0001edbc l       .debug_str	00000000 
0001ee0f l       .debug_str	00000000 
0001ee42 l       .debug_str	00000000 
0001ee52 l       .debug_str	00000000 
0001eea8 l       .debug_str	00000000 
0001ef02 l       .debug_str	00000000 
0001ef50 l       .debug_str	00000000 
0001efa2 l       .debug_str	00000000 
0001eff7 l       .debug_str	00000000 
0001f047 l       .debug_str	00000000 
0001f09b l       .debug_str	00000000 
0001f0f2 l       .debug_str	00000000 
0001f148 l       .debug_str	00000000 
0001f19f l       .debug_str	00000000 
0001f1eb l       .debug_str	00000000 
0001f233 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0001f268 l       .debug_str	00000000 
0001f294 l       .debug_str	00000000 
0001f2b0 l       .debug_str	00000000 
0001f2bd l       .debug_str	00000000 
0001f2cb l       .debug_str	00000000 
0001f2d0 l       .debug_str	00000000 
0001f2d7 l       .debug_str	00000000 
0001f2ee l       .debug_str	00000000 
0001f304 l       .debug_str	00000000 
0000bb39 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0001f314 l       .debug_str	00000000 
0005ae14 l       .debug_str	00000000 
0001f337 l       .debug_str	00000000 
0005abba l       .debug_str	00000000 
0001f359 l       .debug_str	00000000 
00018ba7 l       .debug_str	00000000 
0001f358 l       .debug_str	00000000 
00013959 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0001f35f l       .debug_str	00000000 
0001f3b2 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0001f3d3 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0001f3d8 l       .debug_str	00000000 
00018bbe l       .debug_str	00000000 
0001f3ec l       .debug_str	00000000 
0001f400 l       .debug_str	00000000 
0001f409 l       .debug_str	00000000 
0001f414 l       .debug_str	00000000 
0001f426 l       .debug_str	00000000 
0001f43a l       .debug_str	00000000 
0001f44b l       .debug_str	00000000 
0001f465 l       .debug_str	00000000 
0001f495 l       .debug_str	00000000 
0001f4b0 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
000160e3 l       .debug_str	00000000 
0001611d l       .debug_str	00000000 
00016156 l       .debug_str	00000000 
00016165 l       .debug_str	00000000 
000161a8 l       .debug_str	00000000 
0005c0e5 l       .debug_str	00000000 
00038a70 l       .debug_str	00000000 
0005db0a l       .debug_str	00000000 
0001f4d0 l       .debug_str	00000000 
0001f4ef l       .debug_str	00000000 
0006003a l       .debug_str	00000000 
0001f512 l       .debug_str	00000000 
0005ae33 l       .debug_str	00000000 
00012c5c l       .debug_str	00000000 
0001f518 l       .debug_str	00000000 
0000bfe3 l       .debug_str	00000000 
0001f520 l       .debug_str	00000000 
0005b9ec l       .debug_str	00000000 
000611de l       .debug_str	00000000 
00016035 l       .debug_str	00000000 
0005c45b l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
0001167e l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0000b6ea l       .debug_str	00000000 
0001f528 l       .debug_str	00000000 
0000b786 l       .debug_str	00000000 
0000b796 l       .debug_str	00000000 
0000b7a1 l       .debug_str	00000000 
0005a698 l       .debug_str	00000000 
0001f547 l       .debug_str	00000000 
0001f566 l       .debug_str	00000000 
0001f578 l       .debug_str	00000000 
00016963 l       .debug_str	00000000 
00011783 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00001d54 l       .debug_str	00000000 
0006174b l       .debug_str	00000000 
0005c306 l       .debug_str	00000000 
0003740a l       .debug_str	00000000 
0001f5ea l       .debug_str	00000000 
0001a285 l       .debug_str	00000000 
0001f5fc l       .debug_str	00000000 
00060001 l       .debug_str	00000000 
0001f610 l       .debug_str	00000000 
0001f626 l       .debug_str	00000000 
0001f636 l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0001f648 l       .debug_str	00000000 
0001f642 l       .debug_str	00000000 
0001f657 l       .debug_str	00000000 
0001f66e l       .debug_str	00000000 
0001f66d l       .debug_str	00000000 
0001167a l       .debug_str	00000000 
00011685 l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
00011691 l       .debug_str	00000000 
0001169c l       .debug_str	00000000 
000116a7 l       .debug_str	00000000 
000116b2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001a048 l       .debug_str	00000000 
0001a09a l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00059b10 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0001a0e1 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001a0e8 l       .debug_str	00000000 
0001b424 l       .debug_str	00000000 
0001f450 l       .debug_str	00000000 
00018bc3 l       .debug_str	00000000 
0001a0f1 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0001eb85 l       .debug_str	00000000 
0001a0f8 l       .debug_str	00000000 
0001a11b l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00012bea l       .debug_str	00000000 
00012bef l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00012c1c l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001f4dd l       .debug_str	00000000 
00012c71 l       .debug_str	00000000 
0001a121 l       .debug_str	00000000 
0001a143 l       .debug_str	00000000 
0001a158 l       .debug_str	00000000 
0001a18a l       .debug_str	00000000 
0001a19a l       .debug_str	00000000 
0001a1c7 l       .debug_str	00000000 
0001a1d8 l       .debug_str	00000000 
0001a206 l       .debug_str	00000000 
0001a218 l       .debug_str	00000000 
0001f3f6 l       .debug_str	00000000 
0001f63b l       .debug_str	00000000 
0000c384 l       .debug_str	00000000 
0001a247 l       .debug_str	00000000 
0001f40e l       .debug_str	00000000 
00001dd1 l       .debug_str	00000000 
00015d04 l       .debug_str	00000000 
00011f52 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
000343dc l       .debug_str	00000000 
00011f57 l       .debug_str	00000000 
0001f445 l       .debug_str	00000000 
0001a26e l       .debug_str	00000000 
0001f431 l       .debug_str	00000000 
0001f42b l       .debug_str	00000000 
0004ea0f l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000399b4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
000394ca l       .debug_str	00000000 
0005cbb3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ed l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a825 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
0005a79c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a6 l       .debug_str	00000000 
0001f49a l       .debug_str	00000000 
0001f479 l       .debug_str	00000000 
0001f46a l       .debug_str	00000000 
0001f4c4 l       .debug_str	00000000 
0001f4b5 l       .debug_str	00000000 
0001a275 l       .debug_str	00000000 
0001a27e l       .debug_str	00000000 
0005a817 l       .debug_str	00000000 
00059ae4 l       .debug_str	00000000 
0001f41f l       .debug_str	00000000 
0001f419 l       .debug_str	00000000 
0001f43f l       .debug_str	00000000 
0001f405 l       .debug_str	00000000 
0005e79b l       .debug_str	00000000 
0003578f l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0001336b l       .debug_str	00000000 
00013371 l       .debug_str	00000000 
000165c5 l       .debug_str	00000000 
00012625 l       .debug_str	00000000 
00033a8f l       .debug_str	00000000 
0005ece3 l       .debug_str	00000000 
0001a28a l       .debug_str	00000000 
00012bf6 l       .debug_str	00000000 
00012bfe l       .debug_str	00000000 
000122c0 l     F .text	0000002a _ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E
00012296 l     F .text	0000002a _ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE
000121bc l     F .text	0000009c _ZN3log13RecordBuilder3new17haca8312579858419E
00012258 l     F .text	00000022 _ZN3log13RecordBuilder4args17h0d0d49873389eda9E
000122ea l     F .text	00000010 _ZN3log13RecordBuilder4line17h44de9f431bb34307E
000122fa l     F .text	00000010 _ZN3log13RecordBuilder5build17h83529556a009112eE
0001227a l     F .text	0000000c _ZN3log13RecordBuilder5level17h0f95d7860f854eb5E
00012286 l     F .text	00000010 _ZN3log13RecordBuilder6target17hd1b0e0684e399993E
000124ae l     F .text	00000012 _ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E
00012314 l     F .text	00000028 _ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E
0001233c l     F .text	00000010 _ZN3log15MetadataBuilder5build17h2478972692162fc0E
20004a68 l     O .bss	00000004 _ZN3log5STATE17hc9404a0f5c97cef6E
200000f0 l     O .data	00000008 _ZN3log6LOGGER17hc33d4d9c061fc628E
000121b2 l     F .text	0000000a _ZN3log6Record7builder17hde62ab0132265febE
00020064 l     O .text	00000000 _ZN3log6logger3NOP17h5a3de47970f20990E
0001230a l     F .text	0000000a _ZN3log8Metadata7builder17ha56bd59835d60a3cE
000121a8 l     F .text	0000000a _ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E
00011f3c l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E
00011f74 l     F .text	00000016 _ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE
00011f8a l     F .text	00000008 _ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE
00011f9a l     F .text	00000028 _ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E
00012040 l     F .text	0000000a _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E
000124d4 l     F .text	000000aa _ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E
0001257e l     F .text	0000003a _ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E
000124c0 l     F .text	00000014 _ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE
0001210c l     F .text	00000012 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E
00000000 l    df *ABS*	00000000 memchr.2yzmedhn-cgu.0
0001fcd9 l       .debug_str	00000000 
0001356f l       .debug_str	00000000 
00018c42 l       .debug_str	00000000 
0001f725 l       .debug_str	00000000 
0001f75a l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00011788 l       .debug_str	00000000 
0005f726 l       .debug_str	00000000 
0001f766 l       .debug_str	00000000 
0001f79e l       .debug_str	00000000 
0001f7b8 l       .debug_str	00000000 
0001f7c2 l       .debug_str	00000000 
0001f7ca l       .debug_str	00000000 
0001f7d2 l       .debug_str	00000000 
0001f80e l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0001f821 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0001f829 l       .debug_str	00000000 
0001f861 l       .debug_str	00000000 
000110a8 l       .debug_str	00000000 
0001f869 l       .debug_str	00000000 
0001f8a1 l       .debug_str	00000000 
0001f8a9 l       .debug_str	00000000 
0001f8e1 l       .debug_str	00000000 
0001f8fb l       .debug_str	00000000 
0001f904 l       .debug_str	00000000 
0001f93c l       .debug_str	00000000 
0001f945 l       .debug_str	00000000 
0001f97d l       .debug_str	00000000 
000136c1 l       .debug_str	00000000 
0002219b l       .debug_str	00000000 
0001fa05 l       .debug_str	00000000 
0001fa4d l       .debug_str	00000000 
0001fa58 l       .debug_str	00000000 
000190b7 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0001fa96 l       .debug_str	00000000 
0001af3d l       .debug_str	00000000 
0001fabf l       .debug_str	00000000 
0001fae4 l       .debug_str	00000000 
000160dc l       .debug_str	00000000 
0001b033 l       .debug_str	00000000 
0001fb43 l       .debug_str	00000000 
0001b085 l       .debug_str	00000000 
0001fb6b l       .debug_str	00000000 
0001fb9c l       .debug_str	00000000 
0001fba8 l       .debug_str	00000000 
0001fc07 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
0001fc39 l       .debug_str	00000000 
0001fc81 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0001fc8e l       .debug_str	00000000 
0001fce9 l       .debug_str	00000000 
0001fcf7 l       .debug_str	00000000 
0001b2ad l       .debug_str	00000000 
0001b4a7 l       .debug_str	00000000 
0000e8d8 l       .debug_str	00000000 
0001fd3f l       .debug_str	00000000 
0001b4f3 l       .debug_str	00000000 
0001fd7a l       .debug_str	00000000 
0001fdb1 l       .debug_str	00000000 
0001fdca l       .debug_str	00000000 
0001fdd6 l       .debug_str	00000000 
00014210 l       .debug_str	00000000 
0001fe28 l       .debug_str	00000000 
00014280 l       .debug_str	00000000 
0001fe7d l       .debug_str	00000000 
0001fdb7 l       .debug_str	00000000 
0001feb0 l       .debug_str	00000000 
00019815 l       .debug_str	00000000 
0001fef6 l       .debug_str	00000000 
000141a0 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cfe0 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
0001ff3f l       .debug_str	00000000 
000229c8 l       .debug_str	00000000 
0001ff50 l       .debug_str	00000000 
0001ffc5 l       .debug_str	00000000 
0001fff2 l       .debug_str	00000000 
00019b35 l       .debug_str	00000000 
0002007e l       .debug_str	00000000 
00020101 l       .debug_str	00000000 
00020130 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0002017d l       .debug_str	00000000 
000201ad l       .debug_str	00000000 
000201fb l       .debug_str	00000000 
0002022b l       .debug_str	00000000 
00020279 l       .debug_str	00000000 
000202a9 l       .debug_str	00000000 
000202f7 l       .debug_str	00000000 
00020328 l       .debug_str	00000000 
00020377 l       .debug_str	00000000 
000203a8 l       .debug_str	00000000 
000203f7 l       .debug_str	00000000 
00020427 l       .debug_str	00000000 
0002042f l       .debug_str	00000000 
0002045f l       .debug_str	00000000 
00020467 l       .debug_str	00000000 
000204a5 l       .debug_str	00000000 
000204ba l       .debug_str	00000000 
0000bf06 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000abfe l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005ae14 l       .debug_str	00000000 
0005abba l       .debug_str	00000000 
0001f359 l       .debug_str	00000000 
00018ba7 l       .debug_str	00000000 
00013959 l       .debug_str	00000000 
000204e6 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005c249 l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
0005a669 l       .debug_str	00000000 
000612d3 l       .debug_str	00000000 
00016201 l       .debug_str	00000000 
0002053c l       .debug_str	00000000 
000135a4 l       .debug_str	00000000 
0002053b l       .debug_str	00000000 
0002053f l       .debug_str	00000000 
00020549 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
0005cba1 l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0002054f l       .debug_str	00000000 
00020553 l       .debug_str	00000000 
0001f81c l       .debug_str	00000000 
00020558 l       .debug_str	00000000 
00020557 l       .debug_str	00000000 
0002055b l       .debug_str	00000000 
0002055f l       .debug_str	00000000 
00020564 l       .debug_str	00000000 
00020563 l       .debug_str	00000000 
00020567 l       .debug_str	00000000 
0002056b l       .debug_str	00000000 
0005a698 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001f686 l       .debug_str	00000000 
0001f6db l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea0f l       .debug_str	00000000 
000399b4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005e79b l       .debug_str	00000000 
0003578f l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0001336b l       .debug_str	00000000 
00013371 l       .debug_str	00000000 
000165c5 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0001337f l       .debug_str	00000000 
00038680 l       .debug_str	00000000 
00033331 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ed l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a79c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0005e9b7 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394ca l       .debug_str	00000000 
0005cbb3 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a825 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a6 l       .debug_str	00000000 
0000e8a0 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000134c3 l       .debug_str	00000000 
000125fe l     F .text	0000006e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE
00000000 l    df *ABS*	00000000 1sklumn9v47r13ke
0001f359 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00018bc3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005e79b l       .debug_str	00000000 
00033331 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002056f l       .debug_str	00000000 
00033c9d l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
000205d0 l       .debug_str	00000000 
00012b81 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2la8qm50nrg05wyh
00030d3d l       .debug_str	00000000 
0002219b l       .debug_str	00000000 
00020c34 l       .debug_str	00000000 
00020c9f l       .debug_str	00000000 
00020ce5 l       .debug_str	00000000 
00020d57 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00020f9c l       .debug_str	00000000 
0002100e l       .debug_str	00000000 
00021058 l       .debug_str	00000000 
000210a2 l       .debug_str	00000000 
000212ef l       .debug_str	00000000 
0002132b l       .debug_str	00000000 
0003e5fe l       .debug_str	00000000 
0000395c l       .debug_str	00000000 
00021370 l       .debug_str	00000000 
000213ad l       .debug_str	00000000 
000213f3 l       .debug_str	00000000 
00021430 l       .debug_str	00000000 
00021671 l       .debug_str	00000000 
000216b1 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000218f5 l       .debug_str	00000000 
00021b49 l       .debug_str	00000000 
00021ba2 l       .debug_str	00000000 
00021df2 l       .debug_str	00000000 
0001f359 l       .debug_str	00000000 
0001264d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006012b l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c249 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00005b05 l       .debug_str	00000000 
00005b73 l       .debug_str	00000000 
00005c0a l       .debug_str	00000000 
00005cca l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005ec5 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
00006164 l       .debug_str	00000000 
000062f1 l       .debug_str	00000000 
000064a7 l       .debug_str	00000000 
00006686 l       .debug_str	00000000 
0000688e l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035923 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac2c l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000077a3 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000094f8 l       .debug_str	00000000 
0000971c l       .debug_str	00000000 
0000994d l       .debug_str	00000000 
00009b75 l       .debug_str	00000000 
00009dbe l       .debug_str	00000000 
0000a024 l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
0005ab3d l       .debug_str	00000000 
00030db1 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00021909 l       .debug_str	00000000 
0000590a l       .debug_str	00000000 
00005958 l       .debug_str	00000000 
000059c3 l       .debug_str	00000000 
00021b5d l       .debug_str	00000000 
00020633 l       .debug_str	00000000 
0002069b l       .debug_str	00000000 
000208db l       .debug_str	00000000 
00020943 l       .debug_str	00000000 
00020988 l       .debug_str	00000000 
000209f3 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xneats2au1n52xr
00021e98 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00012b84 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00021e47 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3hq83qlgyhwbaj1j
00000beb l       .debug_str	00000000 
0005a79c l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00018baf l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0000bb40 l       .debug_str	00000000 
00018bc3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea0f l       .debug_str	00000000 
000399b4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005e9b7 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00021eba l       .debug_str	00000000 
00021f16 l       .debug_str	00000000 
00021f73 l       .debug_str	00000000 
00021fd0 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ed l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4dguvrsipkvuzwcx
0001f40e l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001f359 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000a54c l       .debug_str	00000000 
0002219b l       .debug_str	00000000 
0002219a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005e79b l       .debug_str	00000000 
00033331 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0003578f l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005ab3d l       .debug_str	00000000 
0005ac2c l       .debug_str	00000000 
0002202d l       .debug_str	00000000 
0002209e l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000220aa l       .debug_str	00000000 
00014aa6 l       .debug_str	00000000 
0002211b l       .debug_str	00000000 
0002218c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 501bil2zkh495ov3
00022525 l       .debug_str	00000000 
00022590 l       .debug_str	00000000 
00022658 l       .debug_str	00000000 
000225c6 l       .debug_str	00000000 
000225fd l       .debug_str	00000000 
00022610 l       .debug_str	00000000 
0002264f l       .debug_str	00000000 
0002266a l       .debug_str	00000000 
000226a2 l       .debug_str	00000000 
000226b6 l       .debug_str	00000000 
000226e2 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00018baf l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
00060001 l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394ca l       .debug_str	00000000 
0005cbb3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ed l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a825 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
0005a79c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a6 l       .debug_str	00000000 
0001f49a l       .debug_str	00000000 
00018bc3 l       .debug_str	00000000 
0000bb39 l       .debug_str	00000000 
0005ae33 l       .debug_str	00000000 
00060000 l       .debug_str	00000000 
000226eb l       .debug_str	00000000 
0002219b l       .debug_str	00000000 
00016963 l       .debug_str	00000000 
000226ef l       .debug_str	00000000 
0005f52e l       .debug_str	00000000 
000049e8 l       .debug_str	00000000 
000049f0 l       .debug_str	00000000 
000049f9 l       .debug_str	00000000 
00004a07 l       .debug_str	00000000 
00004a0e l       .debug_str	00000000 
0000468e l       .debug_str	00000000 
0000469e l       .debug_str	00000000 
000046a7 l       .debug_str	00000000 
000046b5 l       .debug_str	00000000 
000046c3 l       .debug_str	00000000 
000046cf l       .debug_str	00000000 
000048dd l       .debug_str	00000000 
000046db l       .debug_str	00000000 
000046ea l       .debug_str	00000000 
000046f2 l       .debug_str	00000000 
0000470b l       .debug_str	00000000 
0000471c l       .debug_str	00000000 
00004724 l       .debug_str	00000000 
00004757 l       .debug_str	00000000 
0000473e l       .debug_str	00000000 
00004763 l       .debug_str	00000000 
00001d54 l       .debug_str	00000000 
00004795 l       .debug_str	00000000 
0000477c l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047c2 l       .debug_str	00000000 
000047a9 l       .debug_str	00000000 
00004a15 l       .debug_str	00000000 
00004a78 l       .debug_str	00000000 
00004a1d l       .debug_str	00000000 
00004a3c l       .debug_str	00000000 
00004a70 l       .debug_str	00000000 
00004a57 l       .debug_str	00000000 
0005e60c l       .debug_str	00000000 
0004cc59 l       .debug_str	00000000 
00023296 l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
0005be1e l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
000226f7 l       .debug_str	00000000 
0005f662 l       .debug_str	00000000 
0005d9a2 l       .debug_str	00000000 
0005b894 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005d5c5 l       .debug_str	00000000 
0000bfc3 l       .debug_str	00000000 
0005abd7 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000bfd4 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000bfde l       .debug_str	00000000 
0000bfe9 l       .debug_str	00000000 
0000bff3 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000229e0 l       .debug_str	00000000 
000221a1 l       .debug_str	00000000 
000221d2 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006012b l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c249 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035923 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac2c l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000590a l       .debug_str	00000000 
00005958 l       .debug_str	00000000 
000059c3 l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
0005ab3d l       .debug_str	00000000 
00030d3d l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00021b5d l       .debug_str	00000000 
000221de l       .debug_str	00000000 
0002220e l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00005b05 l       .debug_str	00000000 
00005b73 l       .debug_str	00000000 
00005c0a l       .debug_str	00000000 
00005cca l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005ec5 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
00006164 l       .debug_str	00000000 
000062f1 l       .debug_str	00000000 
000064a7 l       .debug_str	00000000 
00006686 l       .debug_str	00000000 
0000688e l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000077a3 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000094f8 l       .debug_str	00000000 
0000971c l       .debug_str	00000000 
0000994d l       .debug_str	00000000 
00009b75 l       .debug_str	00000000 
00009dbe l       .debug_str	00000000 
0000a024 l       .debug_str	00000000 
00030db1 l       .debug_str	00000000 
00021909 l       .debug_str	00000000 
0002221b l       .debug_str	00000000 
0002224c l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425e8 l       .debug_str	00000000 
00005699 l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4a5 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00059eea l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
000602e0 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
0000561d l       .debug_str	00000000 
0004f58d l       .debug_str	00000000 
000056a2 l       .debug_str	00000000 
000056ad l       .debug_str	00000000 
00022254 l       .debug_str	00000000 
0002227f l       .debug_str	00000000 
00022290 l       .debug_str	00000000 
000222c5 l       .debug_str	00000000 
00004c1d l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
000048d4 l       .debug_str	00000000 
000048dc l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000048e6 l       .debug_str	00000000 
00004b8c l       .debug_str	00000000 
00004b73 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004b6e l       .debug_str	00000000 
00004b9b l       .debug_str	00000000 
00004c25 l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005d82f l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
00004c2b l       .debug_str	00000000 
000222d4 l       .debug_str	00000000 
00022307 l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
00022317 l       .debug_str	00000000 
0002234b l       .debug_str	00000000 
00022354 l       .debug_str	00000000 
00022380 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0002238f l       .debug_str	00000000 
000223c2 l       .debug_str	00000000 
000223cf l       .debug_str	00000000 
000223db l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
0004ea0f l       .debug_str	00000000 
000399b4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0002240c l       .debug_str	00000000 
00022441 l       .debug_str	00000000 
0003e5fe l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
00022452 l       .debug_str	00000000 
00022484 l       .debug_str	00000000 
00022492 l       .debug_str	00000000 
000224d0 l       .debug_str	00000000 
000224ea l       .debug_str	00000000 
0002253c l       .debug_str	00000000 
00022578 l       .debug_str	00000000 
20004a70 l     O .bss	00000008 _ZN6mynewt3spi11PENDING_CMD17hd08bb758c99a7708E
20004a78 l     O .bss	00002004 _ZN6mynewt3spi12PENDING_DATA17hf749c482f1fd6e90E
20006f04 l     O .bss	00000000 _ZN6mynewt3spi12SPI_CALLBACK17h9820a4217e4879a6E
200000f8 l     O .data	00000008 _ZN6mynewt3spi12SPI_SETTINGS17h4a4473e27299c06dE
0001338a l     F .text	0000003a _ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E
20006a8c l     O .bss	00000018 _ZN6mynewt3spi14SPI_DATA_QUEUE17h4880c24292cc1218E
20006b04 l     O .bss	00000400 _ZN6mynewt3spi14SPI_TASK_STACK17h041a1fc76b4d16c1E
20006aa4 l     O .bss	00000010 _ZN6mynewt3spi15SPI_EVENT_QUEUE17h4e2cf68a255fc2fdE
20006a84 l     O .bss	00000008 _ZN6mynewt3spi16SPI_THROTTLE_SEM17h1f0932d6e65cb8daE
000136a2 l     F .text	000001ea _ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E
0001388c l     F .text	000002e8 _ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E
00013eaa l     F .text	00000128 _ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E
00013b74 l     F .text	00000336 _ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E
20006a7c l     O .bss	00000008 _ZN6mynewt3spi7SPI_SEM17hd7399e388b8e657cE
20006ab4 l     O .bss	00000050 _ZN6mynewt3spi8SPI_TASK17h4c45c24ee73ad430E
00013fd2 l     F .text	00000054 _ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E
00020260 l     O .text	0000001c str.0
000202c0 l     O .text	00000021 str.1
00020320 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 53x3bckk5lzipnpa
00000c52 l       .debug_str	00000000 
000394ca l       .debug_str	00000000 
0005cbb3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ed l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a825 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
0005a79c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a6 l       .debug_str	00000000 
0001f49a l       .debug_str	00000000 
000229f1 l       .debug_str	00000000 
0002219b l       .debug_str	00000000 
000229f7 l       .debug_str	00000000 
0000e64e l       .debug_str	00000000 
0005d9a2 l       .debug_str	00000000 
0005b894 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
0004ea0f l       .debug_str	00000000 
000399b4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
000229c6 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0005a9f7 l       .debug_str	00000000 
00022a09 l       .debug_str	00000000 
0000e660 l       .debug_str	00000000 
00022702 l       .debug_str	00000000 
0003f8ee l       .debug_str	00000000 
0002272d l       .debug_str	00000000 
0006003a l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003e5fe l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
00022759 l       .debug_str	00000000 
00061336 l       .debug_str	00000000 
000227ca l       .debug_str	00000000 
000227f6 l       .debug_str	00000000 
00022823 l       .debug_str	00000000 
0002288f l       .debug_str	00000000 
00022897 l       .debug_str	00000000 
00022904 l       .debug_str	00000000 
0002290d l       .debug_str	00000000 
0002293a l       .debug_str	00000000 
000226e2 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000229b4 l       .debug_str	00000000 
000229e4 l       .debug_str	00000000 
0005abd7 l       .debug_str	00000000 
0000bfd4 l       .debug_str	00000000 
0000bfde l       .debug_str	00000000 
0000bfe9 l       .debug_str	00000000 
0000bff3 l       .debug_str	00000000 
000229e0 l       .debug_str	00000000 
000229ca l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00018baf l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00020520 l     O .text	00000021 str.0
00000000 l    df *ABS*	00000000 n1xzuhnvw82wqrn
00004a1d l       .debug_str	00000000 
00004a3c l       .debug_str	00000000 
00004a70 l       .debug_str	00000000 
00022a0e l       .debug_str	00000000 
00022a60 l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000134bb l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425e8 l       .debug_str	00000000 
000049e8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
000049f0 l       .debug_str	00000000 
000049f9 l       .debug_str	00000000 
00004a07 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
00004a0e l       .debug_str	00000000 
0000468e l       .debug_str	00000000 
0000469e l       .debug_str	00000000 
000046a7 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000046b5 l       .debug_str	00000000 
000046c3 l       .debug_str	00000000 
000046cf l       .debug_str	00000000 
000048dd l       .debug_str	00000000 
000046db l       .debug_str	00000000 
000046ea l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000046f2 l       .debug_str	00000000 
0000470b l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
0000471c l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00004724 l       .debug_str	00000000 
00004757 l       .debug_str	00000000 
0000473e l       .debug_str	00000000 
00004763 l       .debug_str	00000000 
00001d54 l       .debug_str	00000000 
00004795 l       .debug_str	00000000 
0000477c l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047c2 l       .debug_str	00000000 
000047a9 l       .debug_str	00000000 
00004a15 l       .debug_str	00000000 
00004a57 l       .debug_str	00000000 
00004a78 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 num_traits.eydd4btj-cgu.0
00023db0 l       .debug_str	00000000 
00022fd1 l       .debug_str	00000000 
000141a0 l       .debug_str	00000000 
00023014 l       .debug_str	00000000 
00014207 l       .debug_str	00000000 
00023070 l       .debug_str	00000000 
00014277 l       .debug_str	00000000 
000230cf l       .debug_str	00000000 
00014210 l       .debug_str	00000000 
00023121 l       .debug_str	00000000 
00023176 l       .debug_str	00000000 
000231cc l       .debug_str	00000000 
000231fa l       .debug_str	00000000 
00023206 l       .debug_str	00000000 
00023238 l       .debug_str	00000000 
0002325f l       .debug_str	00000000 
00023291 l       .debug_str	00000000 
000232a1 l       .debug_str	00000000 
000232d6 l       .debug_str	00000000 
000232e9 l       .debug_str	00000000 
0002331f l       .debug_str	00000000 
00023333 l       .debug_str	00000000 
0002337d l       .debug_str	00000000 
0002338e l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
000233ca l       .debug_str	00000000 
00059f16 l       .debug_str	00000000 
0005f726 l       .debug_str	00000000 
00023408 l       .debug_str	00000000 
00023446 l       .debug_str	00000000 
00013636 l       .debug_str	00000000 
00023453 l       .debug_str	00000000 
0003e5fe l       .debug_str	00000000 
00023461 l       .debug_str	00000000 
00023489 l       .debug_str	00000000 
0000168b l       .debug_str	00000000 
000234c8 l       .debug_str	00000000 
000234f6 l       .debug_str	00000000 
000234fd l       .debug_str	00000000 
000235a0 l       .debug_str	00000000 
000235ae l       .debug_str	00000000 
00040df7 l       .debug_str	00000000 
00023646 l       .debug_str	00000000 
000236e0 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
00023798 l       .debug_str	00000000 
00033c9d l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
0001ff3f l       .debug_str	00000000 
000237fb l       .debug_str	00000000 
0002386d l       .debug_str	00000000 
00023897 l       .debug_str	00000000 
000238d5 l       .debug_str	00000000 
000238e8 l       .debug_str	00000000 
00023933 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0002393c l       .debug_str	00000000 
0002397e l       .debug_str	00000000 
00024c3f l       .debug_str	00000000 
000239b8 l       .debug_str	00000000 
000239fd l       .debug_str	00000000 
00023a19 l       .debug_str	00000000 
00023a5c l       .debug_str	00000000 
00023a72 l       .debug_str	00000000 
00023ad7 l       .debug_str	00000000 
00023b3c l       .debug_str	00000000 
00023b77 l       .debug_str	00000000 
00023b84 l       .debug_str	00000000 
0001fdb7 l       .debug_str	00000000 
00023bb7 l       .debug_str	00000000 
0000a8e2 l       .debug_str	00000000 
00023bfd l       .debug_str	00000000 
00019815 l       .debug_str	00000000 
00023c43 l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
00023c8a l       .debug_str	00000000 
00023cd3 l       .debug_str	00000000 
00014aa6 l       .debug_str	00000000 
0001f40e l       .debug_str	00000000 
000160dc l       .debug_str	00000000 
000110a8 l       .debug_str	00000000 
00011788 l       .debug_str	00000000 
00023d4c l       .debug_str	00000000 
00023d91 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00023de9 l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
00023e01 l       .debug_str	00000000 
00023e3c l       .debug_str	00000000 
00023e60 l       .debug_str	00000000 
00023e86 l       .debug_str	00000000 
00023ec1 l       .debug_str	00000000 
00023ee4 l       .debug_str	00000000 
00023f09 l       .debug_str	00000000 
00023f46 l       .debug_str	00000000 
00023f5d l       .debug_str	00000000 
00023f9a l       .debug_str	00000000 
00023fb1 l       .debug_str	00000000 
00014ee1 l       .debug_str	00000000 
00024002 l       .debug_str	00000000 
00016caf l       .debug_str	00000000 
0002405d l       .debug_str	00000000 
000240c0 l       .debug_str	00000000 
00024102 l       .debug_str	00000000 
0001519a l       .debug_str	00000000 
00024166 l       .debug_str	00000000 
00019b35 l       .debug_str	00000000 
000241d3 l       .debug_str	00000000 
0000abf6 l       .debug_str	00000000 
00024235 l       .debug_str	00000000 
00024243 l       .debug_str	00000000 
000242ae l       .debug_str	00000000 
000242c8 l       .debug_str	00000000 
000242de l       .debug_str	00000000 
00024349 l       .debug_str	00000000 
00024359 l       .debug_str	00000000 
000243c5 l       .debug_str	00000000 
000243d7 l       .debug_str	00000000 
00024443 l       .debug_str	00000000 
00024454 l       .debug_str	00000000 
000244bb l       .debug_str	00000000 
000244f3 l       .debug_str	00000000 
0002455d l       .debug_str	00000000 
000245e5 l       .debug_str	00000000 
000130b8 l       .debug_str	00000000 
00024659 l       .debug_str	00000000 
000246db l       .debug_str	00000000 
000246f2 l       .debug_str	00000000 
00024730 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00033f0f l       .debug_str	00000000 
0003578f l       .debug_str	00000000 
00024743 l       .debug_str	00000000 
00024752 l       .debug_str	00000000 
00024790 l       .debug_str	00000000 
000247a3 l       .debug_str	00000000 
000247cf l       .debug_str	00000000 
000247d8 l       .debug_str	00000000 
00024804 l       .debug_str	00000000 
0002480d l       .debug_str	00000000 
0002486d l       .debug_str	00000000 
00033950 l       .debug_str	00000000 
000248be l       .debug_str	00000000 
0002490f l       .debug_str	00000000 
0002496c l       .debug_str	00000000 
000249ca l       .debug_str	00000000 
00024caf l       .debug_str	00000000 
00024a1b l       .debug_str	00000000 
00024a44 l       .debug_str	00000000 
00024aa7 l       .debug_str	00000000 
00024ab8 l       .debug_str	00000000 
00024ac5 l       .debug_str	00000000 
00024ada l       .debug_str	00000000 
00024b2b l       .debug_str	00000000 
00024b54 l       .debug_str	00000000 
00024bb7 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
000611ed l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a79c l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0001f359 l       .debug_str	00000000 
0002219a l       .debug_str	00000000 
000611de l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
00024bd4 l       .debug_str	00000000 
0005c249 l       .debug_str	00000000 
0003928a l       .debug_str	00000000 
0001f81c l       .debug_str	00000000 
000168c2 l       .debug_str	00000000 
0005ae33 l       .debug_str	00000000 
00059bea l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0006003a l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
00024bf5 l       .debug_str	00000000 
00002535 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00024bf9 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00022c66 l       .debug_str	00000000 
00024c0b l       .debug_str	00000000 
00024c10 l       .debug_str	00000000 
00024c15 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
000160a1 l       .debug_str	00000000 
00024c3a l       .debug_str	00000000 
00024c76 l       .debug_str	00000000 
0005cba1 l       .debug_str	00000000 
0003dcb6 l       .debug_str	00000000 
00024c8c l       .debug_str	00000000 
00024c95 l       .debug_str	00000000 
000372bb l       .debug_str	00000000 
0005ac86 l       .debug_str	00000000 
0004cecd l       .debug_str	00000000 
00024c9e l       .debug_str	00000000 
00024ca2 l       .debug_str	00000000 
00037581 l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
0001167e l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0001167a l       .debug_str	00000000 
00011685 l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00024cc4 l       .debug_str	00000000 
00024cbf l       .debug_str	00000000 
0005aa07 l       .debug_str	00000000 
00024cc8 l       .debug_str	00000000 
00039058 l       .debug_str	00000000 
00024cd1 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0003bb12 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00022a85 l       .debug_str	00000000 
00022adf l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000c47d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00033bba l       .debug_str	00000000 
00022b2e l       .debug_str	00000000 
00024be6 l       .debug_str	00000000 
00024bd9 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea0f l       .debug_str	00000000 
000399b4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005e9b7 l       .debug_str	00000000 
00022b36 l       .debug_str	00000000 
00022b43 l       .debug_str	00000000 
00022b4c l       .debug_str	00000000 
00059b04 l       .debug_str	00000000 
00033f86 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00013379 l       .debug_str	00000000 
0005e79b l       .debug_str	00000000 
00033331 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000134bb l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00035769 l       .debug_str	00000000 
000134c3 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b253 l       .debug_str	00000000 
0000b294 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
0002219b l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00012625 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000612d3 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013614 l       .debug_str	00000000 
00024c86 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
0005a669 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00012b84 l       .debug_str	00000000 
0005cc2f l       .debug_str	00000000 
00011e0d l       .debug_str	00000000 
000365e3 l       .debug_str	00000000 
000116de l       .debug_str	00000000 
0005abba l       .debug_str	00000000 
000229c8 l       .debug_str	00000000 
00024c5a l       .debug_str	00000000 
000134d3 l       .debug_str	00000000 
00022b56 l       .debug_str	00000000 
00022b94 l       .debug_str	00000000 
0001a316 l       .debug_str	00000000 
0005cfe0 l       .debug_str	00000000 
0004680e l       .debug_str	00000000 
000600b4 l       .debug_str	00000000 
00022ba3 l       .debug_str	00000000 
00013502 l       .debug_str	00000000 
00022bcc l       .debug_str	00000000 
0001a388 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001a541 l       .debug_str	00000000 
0001f4c4 l       .debug_str	00000000 
0000e68b l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00022bfe l       .debug_str	00000000 
00024c24 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
00022c0c l       .debug_str	00000000 
000135ef l       .debug_str	00000000 
00013602 l       .debug_str	00000000 
0005f630 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0004aebd l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00059c9f l       .debug_str	00000000 
00022c4e l       .debug_str	00000000 
00022c52 l       .debug_str	00000000 
00022c5d l       .debug_str	00000000 
00022c6c l       .debug_str	00000000 
00022cb4 l       .debug_str	00000000 
00022cd4 l       .debug_str	00000000 
00039da4 l       .debug_str	00000000 
00024c0c l       .debug_str	00000000 
00022d1f l       .debug_str	00000000 
00024c11 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005ab3d l       .debug_str	00000000 
0005ac2c l       .debug_str	00000000 
00022d6a l       .debug_str	00000000 
0002218c l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
00022ddb l       .debug_str	00000000 
00013c89 l       .debug_str	00000000 
00022e09 l       .debug_str	00000000 
0001b2ad l       .debug_str	00000000 
00022e51 l       .debug_str	00000000 
00022e81 l       .debug_str	00000000 
00022eac l       .debug_str	00000000 
0001fdb1 l       .debug_str	00000000 
0001fdca l       .debug_str	00000000 
00022ee3 l       .debug_str	00000000 
00014280 l       .debug_str	00000000 
00022f34 l       .debug_str	00000000 
000140f4 l       .debug_str	00000000 
00022f86 l       .debug_str	00000000 
0001414b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19c5s2vweequjzfw
0000e8a7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00024cdd l       .debug_str	00000000 
00024d06 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00024d97 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00024d13 l       .debug_str	00000000 
00013502 l       .debug_str	00000000 
0000c47d l       .debug_str	00000000 
0005ee38 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00024d3c l       .debug_str	00000000 
00024d91 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1bm86yaetip2rc3f
0002510c l       .debug_str	00000000 
00024f74 l       .debug_str	00000000 
00024fb0 l       .debug_str	00000000 
00024fcc l       .debug_str	00000000 
00025008 l       .debug_str	00000000 
0002503e l       .debug_str	00000000 
0002507a l       .debug_str	00000000 
00025085 l       .debug_str	00000000 
000250c1 l       .debug_str	00000000 
000250cf l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
00025143 l       .debug_str	00000000 
00025180 l       .debug_str	00000000 
0002518f l       .debug_str	00000000 
000251cc l       .debug_str	00000000 
0002520f l       .debug_str	00000000 
0002524c l       .debug_str	00000000 
0000e8ac l       .debug_str	00000000 
00025283 l       .debug_str	00000000 
000252c1 l       .debug_str	00000000 
000252f8 l       .debug_str	00000000 
00025337 l       .debug_str	00000000 
00025370 l       .debug_str	00000000 
000253d4 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00025409 l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00025424 l       .debug_str	00000000 
00025469 l       .debug_str	00000000 
00025486 l       .debug_str	00000000 
00013624 l       .debug_str	00000000 
00018c4b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000110a8 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
00018c73 l       .debug_str	00000000 
00024d9b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025495 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00025418 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea7b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c11 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002564a l       .debug_str	00000000 
00024dd5 l       .debug_str	00000000 
00025433 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
0002219b l       .debug_str	00000000 
00025478 l       .debug_str	00000000 
0000e8a7 l       .debug_str	00000000 
00024df1 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000e70f l       .debug_str	00000000 
0000e718 l       .debug_str	00000000 
0000e726 l       .debug_str	00000000 
00018cd9 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0000e73e l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0000efd3 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
00011788 l       .debug_str	00000000 
0005f726 l       .debug_str	00000000 
00024dfe l       .debug_str	00000000 
00024e37 l       .debug_str	00000000 
00024ed2 l       .debug_str	00000000 
00024f2c l       .debug_str	00000000 
00024f68 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1i10ukgv8hgyc1v7
0005e944 l       .debug_str	00000000 
00025f64 l       .debug_str	00000000 
00025f6f l       .debug_str	00000000 
00025f76 l       .debug_str	00000000 
00025fe1 l       .debug_str	00000000 
00026112 l       .debug_str	00000000 
0002617f l       .debug_str	00000000 
000261f1 l       .debug_str	00000000 
000262ff l       .debug_str	00000000 
0002630a l       .debug_str	00000000 
0002637c l       .debug_str	00000000 
000264b1 l       .debug_str	00000000 
00026523 l       .debug_str	00000000 
000265f3 l       .debug_str	00000000 
0002660e l       .debug_str	00000000 
00026658 l       .debug_str	00000000 
00026795 l       .debug_str	00000000 
000267d0 l       .debug_str	00000000 
000268d8 l       .debug_str	00000000 
00026913 l       .debug_str	00000000 
00026a42 l       .debug_str	00000000 
00026a7d l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00024dd5 l       .debug_str	00000000 
00026b47 l       .debug_str	00000000 
00026b83 l       .debug_str	00000000 
0003e5fe l       .debug_str	00000000 
00026c4e l       .debug_str	00000000 
00026c6e l       .debug_str	00000000 
00026caa l       .debug_str	00000000 
0002cb32 l       .debug_str	00000000 
00026db3 l       .debug_str	00000000 
00026df0 l       .debug_str	00000000 
00026efa l       .debug_str	00000000 
00026f37 l       .debug_str	00000000 
00027068 l       .debug_str	00000000 
000270e9 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
00027979 l       .debug_str	00000000 
0002721e l       .debug_str	00000000 
0002729c l       .debug_str	00000000 
00011134 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000273cc l       .debug_str	00000000 
000274ab l       .debug_str	00000000 
000275c4 l       .debug_str	00000000 
00027704 l       .debug_str	00000000 
00027821 l       .debug_str	00000000 
00027965 l       .debug_str	00000000 
0001f359 l       .debug_str	00000000 
0001264d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006012b l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c249 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c714 l       .debug_str	00000000 
0000c731 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c777 l       .debug_str	00000000 
0000c788 l       .debug_str	00000000 
0000c7f8 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c955 l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035923 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac2c l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0000d4f0 l       .debug_str	00000000 
0000d603 l       .debug_str	00000000 
0000d723 l       .debug_str	00000000 
0000d83a l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000dac9 l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
0005ab3d l       .debug_str	00000000 
0002b9aa l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027835 l       .debug_str	00000000 
0000e9a7 l       .debug_str	00000000 
0000eab9 l       .debug_str	00000000 
0000ebe8 l       .debug_str	00000000 
0002b872 l       .debug_str	00000000 
00027718 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea7b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c11 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002564a l       .debug_str	00000000 
0000f250 l       .debug_str	00000000 
0000f27d l       .debug_str	00000000 
0000f29e l       .debug_str	00000000 
0000f305 l       .debug_str	00000000 
0000f3a5 l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
0000f47f l       .debug_str	00000000 
0000f4f6 l       .debug_str	00000000 
0000f57a l       .debug_str	00000000 
0000f5f5 l       .debug_str	00000000 
0000f693 l       .debug_str	00000000 
0000f73e l       .debug_str	00000000 
00028d84 l       .debug_str	00000000 
000284bb l       .debug_str	00000000 
000287f2 l       .debug_str	00000000 
0002b778 l       .debug_str	00000000 
000273e0 l       .debug_str	00000000 
000254d7 l       .debug_str	00000000 
00025565 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00025635 l       .debug_str	00000000 
00025650 l       .debug_str	00000000 
000612d3 l       .debug_str	00000000 
000100a8 l       .debug_str	00000000 
0002566d l       .debug_str	00000000 
00025686 l       .debug_str	00000000 
0002e367 l       .debug_str	00000000 
000256ac l       .debug_str	00000000 
00025712 l       .debug_str	00000000 
0002581c l       .debug_str	00000000 
00025882 l       .debug_str	00000000 
000259b3 l       .debug_str	00000000 
00025a1b l       .debug_str	00000000 
00025ae6 l       .debug_str	00000000 
00025b4e l       .debug_str	00000000 
00025c57 l       .debug_str	00000000 
00025cbf l       .debug_str	00000000 
00025def l       .debug_str	00000000 
00025e5a l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000205e0 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 1w4juabyv8bmed5v
00000d37 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a6 l       .debug_str	00000000 
00027aae l       .debug_str	00000000 
00027af9 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001f405 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea0f l       .debug_str	00000000 
000399b4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000394ca l       .debug_str	00000000 
0005cbb3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ed l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a825 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
0005a79c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 24fd677mu7rr1lzm
00026658 l       .debug_str	00000000 
00029db5 l       .debug_str	00000000 
00029e3e l       .debug_str	00000000 
00029f78 l       .debug_str	00000000 
0002a001 l       .debug_str	00000000 
0002a114 l       .debug_str	00000000 
0002a1a0 l       .debug_str	00000000 
0002a22c l       .debug_str	00000000 
0002a342 l       .debug_str	00000000 
0002a3ce l       .debug_str	00000000 
0002a4bc l       .debug_str	00000000 
00026b83 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
0003e5fe l       .debug_str	00000000 
00026c4e l       .debug_str	00000000 
0002a53a l       .debug_str	00000000 
00026caa l       .debug_str	00000000 
0002cb32 l       .debug_str	00000000 
0002a5b8 l       .debug_str	00000000 
00026df0 l       .debug_str	00000000 
0002a637 l       .debug_str	00000000 
00026f37 l       .debug_str	00000000 
0002a6b6 l       .debug_str	00000000 
00025712 l       .debug_str	00000000 
0002a735 l       .debug_str	00000000 
00025882 l       .debug_str	00000000 
0002a7b4 l       .debug_str	00000000 
0002a836 l       .debug_str	00000000 
00025f6f l       .debug_str	00000000 
0002a943 l       .debug_str	00000000 
0002a9c5 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0002219b l       .debug_str	00000000 
0002aaaa l       .debug_str	00000000 
0002ab2c l       .debug_str	00000000 
0002abfb l       .debug_str	00000000 
0002ac12 l       .debug_str	00000000 
0002ac94 l       .debug_str	00000000 
0002adc8 l       .debug_str	00000000 
0002ae4a l       .debug_str	00000000 
0002af2f l       .debug_str	00000000 
0002afb1 l       .debug_str	00000000 
0002b0be l       .debug_str	00000000 
0002b140 l       .debug_str	00000000 
0002b274 l       .debug_str	00000000 
0002b2f6 l       .debug_str	00000000 
0002b3c5 l       .debug_str	00000000 
0002b447 l       .debug_str	00000000 
0002b57b l       .debug_str	00000000 
0002b5fd l       .debug_str	00000000 
0002b70a l       .debug_str	00000000 
0002b766 l       .debug_str	00000000 
0002b860 l       .debug_str	00000000 
0002b998 l       .debug_str	00000000 
0001264d l       .debug_str	00000000 
0002baf7 l       .debug_str	00000000 
0001f359 l       .debug_str	00000000 
00012625 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0002bc07 l       .debug_str	00000000 
000612d3 l       .debug_str	00000000 
00018bb9 l       .debug_str	00000000 
0002bc14 l       .debug_str	00000000 
0002e29c l       .debug_str	00000000 
000611de l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0002bc26 l       .debug_str	00000000 
00035769 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013614 l       .debug_str	00000000 
0002bc2b l       .debug_str	00000000 
0003f8ee l       .debug_str	00000000 
0002bd5f l       .debug_str	00000000 
0002beba l       .debug_str	00000000 
0002bfc6 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006012b l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c249 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00027b2b l       .debug_str	00000000 
00027b98 l       .debug_str	00000000 
00027c2e l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035923 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac2c l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
0000f47f l       .debug_str	00000000 
0000f4f6 l       .debug_str	00000000 
0000f57a l       .debug_str	00000000 
0000f5f5 l       .debug_str	00000000 
0000f693 l       .debug_str	00000000 
0000f73e l       .debug_str	00000000 
00027ced l       .debug_str	00000000 
00027db2 l       .debug_str	00000000 
00027e84 l       .debug_str	00000000 
00027f4d l       .debug_str	00000000 
00028037 l       .debug_str	00000000 
0002813e l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
0005ab3d l       .debug_str	00000000 
0002bb09 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
0000c714 l       .debug_str	00000000 
0000c731 l       .debug_str	00000000 
0000c777 l       .debug_str	00000000 
0000c788 l       .debug_str	00000000 
0000c7f8 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c955 l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0000d4f0 l       .debug_str	00000000 
0000d603 l       .debug_str	00000000 
0000d723 l       .debug_str	00000000 
0000d83a l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000dac9 l       .debug_str	00000000 
0002b9aa l       .debug_str	00000000 
0000e9a7 l       .debug_str	00000000 
0000eab9 l       .debug_str	00000000 
0000ebe8 l       .debug_str	00000000 
0002b872 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea7b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c11 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002564a l       .debug_str	00000000 
0000f250 l       .debug_str	00000000 
0000f27d l       .debug_str	00000000 
0000f29e l       .debug_str	00000000 
0000f305 l       .debug_str	00000000 
0000f3a5 l       .debug_str	00000000 
00028d84 l       .debug_str	00000000 
00028244 l       .debug_str	00000000 
000282c6 l       .debug_str	00000000 
000283b4 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000284bb l       .debug_str	00000000 
0002849c l       .debug_str	00000000 
000287f2 l       .debug_str	00000000 
000285ac l       .debug_str	00000000 
000285fd l       .debug_str	00000000 
000286ec l       .debug_str	00000000 
000287d4 l       .debug_str	00000000 
0002b778 l       .debug_str	00000000 
000288e2 l       .debug_str	00000000 
0002895d l       .debug_str	00000000 
00028a47 l       .debug_str	00000000 
00028b2b l       .debug_str	00000000 
00028c37 l       .debug_str	00000000 
00028c83 l       .debug_str	00000000 
00028d6e l       .debug_str	00000000 
00028e58 l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00028f62 l       .debug_str	00000000 
00029063 l       .debug_str	00000000 
000290b9 l       .debug_str	00000000 
000291b7 l       .debug_str	00000000 
0002920d l       .debug_str	00000000 
0002935a l       .debug_str	00000000 
000293b0 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000294d6 l       .debug_str	00000000 
0002955d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00025635 l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
000265f3 l       .debug_str	00000000 
00029630 l       .debug_str	00000000 
000296b7 l       .debug_str	00000000 
00025f64 l       .debug_str	00000000 
000262ff l       .debug_str	00000000 
000297c8 l       .debug_str	00000000 
0002984f l       .debug_str	00000000 
00029987 l       .debug_str	00000000 
00029a0f l       .debug_str	00000000 
00029ae3 l       .debug_str	00000000 
00029b6c l       .debug_str	00000000 
00029c41 l       .debug_str	00000000 
00029cca l       .debug_str	00000000 
00020660 l     O .text	00000021 str.0
000206a0 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 2jbqb9ep0zzhh36j
0001c3bf l       .debug_str	00000000 
0002c3c1 l       .debug_str	00000000 
0002c3ce l       .debug_str	00000000 
0002c40e l       .debug_str	00000000 
0002c50b l       .debug_str	00000000 
0002c54b l       .debug_str	00000000 
0002c55a l       .debug_str	00000000 
0002c59a l       .debug_str	00000000 
0002c5b9 l       .debug_str	00000000 
0002c5f9 l       .debug_str	00000000 
0002c615 l       .debug_str	00000000 
0002c655 l       .debug_str	00000000 
0002c663 l       .debug_str	00000000 
0002c6a3 l       .debug_str	00000000 
0005f726 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c494 l       .debug_str	00000000 
0001ced1 l       .debug_str	00000000 
00000788 l       .debug_str	00000000 
0002c6b1 l       .debug_str	00000000 
0002c6f2 l       .debug_str	00000000 
0000c1d5 l       .debug_str	00000000 
0002c727 l       .debug_str	00000000 
00011788 l       .debug_str	00000000 
0002c731 l       .debug_str	00000000 
0002c772 l       .debug_str	00000000 
0001f3e2 l       .debug_str	00000000 
0002c7bf l       .debug_str	00000000 
0002c800 l       .debug_str	00000000 
0002c835 l       .debug_str	00000000 
0002c840 l       .debug_str	00000000 
0002c881 l       .debug_str	00000000 
0002c8ce l       .debug_str	00000000 
0002c90f l       .debug_str	00000000 
0002c944 l       .debug_str	00000000 
0002c9b3 l       .debug_str	00000000 
0002cab4 l       .debug_str	00000000 
0001d7a8 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0002cb23 l       .debug_str	00000000 
0002cb42 l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016963 l       .debug_str	00000000 
0005aa72 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea7b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c11 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002564a l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0004ea0f l       .debug_str	00000000 
00015d04 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003e5fe l       .debug_str	00000000 
0002cb32 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
00060add l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
0006012b l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c249 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00027b2b l       .debug_str	00000000 
00027b98 l       .debug_str	00000000 
00027c2e l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035923 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac2c l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
0000f47f l       .debug_str	00000000 
0000f4f6 l       .debug_str	00000000 
0000f57a l       .debug_str	00000000 
0000f5f5 l       .debug_str	00000000 
0000f693 l       .debug_str	00000000 
0000f73e l       .debug_str	00000000 
00027ced l       .debug_str	00000000 
00027db2 l       .debug_str	00000000 
00027e84 l       .debug_str	00000000 
00027f4d l       .debug_str	00000000 
00028037 l       .debug_str	00000000 
0002813e l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
0005ab3d l       .debug_str	00000000 
0002bb09 l       .debug_str	00000000 
00028f62 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002c0bc l       .debug_str	00000000 
0002c19c l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00026c4e l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
0000c1cc l       .debug_str	00000000 
0002c29a l       .debug_str	00000000 
0002c2a1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0002c2a9 l       .debug_str	00000000 
0002c2bd l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0002c2ef l       .debug_str	00000000 
0002c303 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002c335 l       .debug_str	00000000 
0002c374 l       .debug_str	00000000 
0002c382 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2nk42jtdlqpdrpvo
0000f47f l       .debug_str	00000000 
0002ccce l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0002cdc1 l       .debug_str	00000000 
0002ce39 l       .debug_str	00000000 
0002cf53 l       .debug_str	00000000 
0002cfcb l       .debug_str	00000000 
0000f4f6 l       .debug_str	00000000 
0000f57a l       .debug_str	00000000 
0000f5f5 l       .debug_str	00000000 
0000f693 l       .debug_str	00000000 
0000f73e l       .debug_str	00000000 
0002d097 l       .debug_str	00000000 
0002d10f l       .debug_str	00000000 
0002d1db l       .debug_str	00000000 
0002d253 l       .debug_str	00000000 
0002d2f8 l       .debug_str	00000000 
0002d370 l       .debug_str	00000000 
0002d3ee l       .debug_str	00000000 
0002d466 l       .debug_str	00000000 
0002d4bd l       .debug_str	00000000 
0002d535 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035923 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0005ac2c l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
0002cb60 l       .debug_str	00000000 
0002cbd8 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0002cc56 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2tupw4qr6cy3al7x
00000c36 l       .debug_str	00000000 
00025433 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00034a6f l       .debug_str	00000000 
0002f220 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0002f149 l       .debug_str	00000000 
0002d5da l       .debug_str	00000000 
0002d623 l       .debug_str	00000000 
0001264d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
000163d0 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0000efd3 l       .debug_str	00000000 
0000efdd l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00018c28 l       .debug_str	00000000 
0000efe6 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c73 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 32m5mr5zne5f73k7
0000c06e l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0005d5c4 l       .debug_str	00000000 
0000c05d l       .debug_str	00000000 
0006049f l       .debug_str	00000000 
0000c061 l       .debug_str	00000000 
0000c065 l       .debug_str	00000000 
00001820 l       .debug_str	00000000 
0005f8db l       .debug_str	00000000 
0000e5f2 l       .debug_str	00000000 
0000e5e1 l       .debug_str	00000000 
0005bf82 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
000611de l       .debug_str	00000000 
0005ae33 l       .debug_str	00000000 
0000e773 l       .debug_str	00000000 
0002dc72 l       .debug_str	00000000 
0002dd0e l       .debug_str	00000000 
0000e70f l       .debug_str	00000000 
0000e718 l       .debug_str	00000000 
0000e726 l       .debug_str	00000000 
00018cd9 l       .debug_str	00000000 
0000e73e l       .debug_str	00000000 
00024ed2 l       .debug_str	00000000 
0000f0ef l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
0002dd19 l       .debug_str	00000000 
0002dde3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00012625 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
0000e992 l       .debug_str	00000000 
0000f0d5 l       .debug_str	00000000 
0000e778 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0000efd3 l       .debug_str	00000000 
0000efdd l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00018c28 l       .debug_str	00000000 
0000efe6 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c73 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025433 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00034a6f l       .debug_str	00000000 
0002f220 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0002f1b4 l       .debug_str	00000000 
0000e998 l       .debug_str	00000000 
0000e99f l       .debug_str	00000000 
0000e634 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006012b l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c249 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c714 l       .debug_str	00000000 
0000c731 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c777 l       .debug_str	00000000 
0000c788 l       .debug_str	00000000 
0000c7f8 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c955 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00035923 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac2c l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0000e9a7 l       .debug_str	00000000 
0000eab9 l       .debug_str	00000000 
0000ebe8 l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
0005ab3d l       .debug_str	00000000 
0002b872 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027718 l       .debug_str	00000000 
0000eff3 l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
0002dc96 l       .debug_str	00000000 
0000f0da l       .debug_str	00000000 
0000f0e0 l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
0000d4f0 l       .debug_str	00000000 
0000d603 l       .debug_str	00000000 
0000d723 l       .debug_str	00000000 
0000d83a l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000dac9 l       .debug_str	00000000 
0002b9aa l       .debug_str	00000000 
00027835 l       .debug_str	00000000 
0000f0e9 l       .debug_str	00000000 
0005d23d l       .debug_str	00000000 
0002dd3d l       .debug_str	00000000 
000229c8 l       .debug_str	00000000 
0002d697 l       .debug_str	00000000 
0002d6fa l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
000229c6 l       .debug_str	00000000 
0005a9f7 l       .debug_str	00000000 
00022a09 l       .debug_str	00000000 
0005ef33 l       .debug_str	00000000 
0002f149 l       .debug_str	00000000 
0002d7ca l       .debug_str	00000000 
0002d80d l       .debug_str	00000000 
0002d8b2 l       .debug_str	00000000 
0002d8f0 l       .debug_str	00000000 
0002d964 l       .debug_str	00000000 
0002d9a4 l       .debug_str	00000000 
0002da46 l       .debug_str	00000000 
0002dad4 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0000fd9c l       .debug_str	00000000 
0000fdb8 l       .debug_str	00000000 
0002db45 l       .debug_str	00000000 
0002dbd5 l       .debug_str	00000000 
000104af l       .debug_str	00000000 
00010451 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000163d0 l       .debug_str	00000000 
000207f0 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3ulq1z5tkxz9njop
000012f5 l       .debug_str	00000000 
0002deb5 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00018bc3 l       .debug_str	00000000 
00018bb9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
000134d3 l       .debug_str	00000000 
00033331 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002ddec l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002de50 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4f0czol4b3uljl4v
00000d05 l       .debug_str	00000000 
0002e033 l       .debug_str	00000000 
00025635 l       .debug_str	00000000 
000265f3 l       .debug_str	00000000 
0002e052 l       .debug_str	00000000 
0002e0d0 l       .debug_str	00000000 
0002e160 l       .debug_str	00000000 
0002e177 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cfe0 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
0001ff3f l       .debug_str	00000000 
00003d21 l       .debug_str	00000000 
000612d3 l       .debug_str	00000000 
00016201 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002df1a l       .debug_str	00000000 
0002dfa6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00025f64 l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
000262ff l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea7b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c11 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002564a l       .debug_str	00000000 
0002dfb5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n9jsiq8blzioqfk
0002e5c7 l       .debug_str	00000000 
0002e50b l       .debug_str	00000000 
0002e528 l       .debug_str	00000000 
0002e531 l       .debug_str	00000000 
0002e577 l       .debug_str	00000000 
0002e580 l       .debug_str	00000000 
0002e7fc l       .debug_str	00000000 
0002e610 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
00003d21 l       .debug_str	00000000 
0002e61c l       .debug_str	00000000 
0002e698 l       .debug_str	00000000 
0005cfe0 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
0001ff3f l       .debug_str	00000000 
0002e6c3 l       .debug_str	00000000 
0002e73f l       .debug_str	00000000 
0002e771 l       .debug_str	00000000 
0002e7f7 l       .debug_str	00000000 
0002e806 l       .debug_str	00000000 
0002e160 l       .debug_str	00000000 
0002e877 l       .debug_str	00000000 
0002e8eb l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002e8f5 l       .debug_str	00000000 
0002e902 l       .debug_str	00000000 
0002e979 l       .debug_str	00000000 
0002e993 l       .debug_str	00000000 
0005c249 l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
0005a669 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002e1fe l       .debug_str	00000000 
0002e227 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00025f64 l       .debug_str	00000000 
0002bc07 l       .debug_str	00000000 
000612d3 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00018bb9 l       .debug_str	00000000 
0002bc14 l       .debug_str	00000000 
0002e29c l       .debug_str	00000000 
0002e234 l       .debug_str	00000000 
0002e276 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0002e28a l       .debug_str	00000000 
0005f630 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0004aebd l       .debug_str	00000000 
0000fd6f l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea7b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c11 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002564a l       .debug_str	00000000 
0002e2a6 l       .debug_str	00000000 
0002e2cf l       .debug_str	00000000 
00025635 l       .debug_str	00000000 
00025650 l       .debug_str	00000000 
000100a8 l       .debug_str	00000000 
0002566d l       .debug_str	00000000 
00025686 l       .debug_str	00000000 
0002e367 l       .debug_str	00000000 
0002e2ec l       .debug_str	00000000 
0002e331 l       .debug_str	00000000 
0002e355 l       .debug_str	00000000 
0002e384 l       .debug_str	00000000 
00032ef5 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
00025f6f l       .debug_str	00000000 
0002e3b7 l       .debug_str	00000000 
00032f53 l       .debug_str	00000000 
0002abfb l       .debug_str	00000000 
0002e3ea l       .debug_str	00000000 
00032fd5 l       .debug_str	00000000 
000265f3 l       .debug_str	00000000 
0002e421 l       .debug_str	00000000 
00033059 l       .debug_str	00000000 
000262ff l       .debug_str	00000000 
0002e458 l       .debug_str	00000000 
0002e4a6 l       .debug_str	00000000 
000229c8 l       .debug_str	00000000 
0002e4b6 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z4uczzv8d994j8w
000012f5 l       .debug_str	00000000 
0002eac3 l       .debug_str	00000000 
0002eb15 l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
0005abba l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
000611de l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000134bb l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002e9b4 l       .debug_str	00000000 
0002ea02 l       .debug_str	00000000 
0000fd6f l       .debug_str	00000000 
0002ea0b l       .debug_str	00000000 
0002ea5b l       .debug_str	00000000 
0002ea66 l       .debug_str	00000000 
0002eab7 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53kqumdi8360wwys
0002f09b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0000e70f l       .debug_str	00000000 
0000e718 l       .debug_str	00000000 
0000e726 l       .debug_str	00000000 
00018cd9 l       .debug_str	00000000 
0000e73e l       .debug_str	00000000 
00024ed2 l       .debug_str	00000000 
0002ef17 l       .debug_str	00000000 
0002efd4 l       .debug_str	00000000 
0002f00f l       .debug_str	00000000 
0002f068 l       .debug_str	00000000 
000253d4 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0002f11e l       .debug_str	00000000 
0002f182 l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
0002f185 l       .debug_str	00000000 
0000eff9 l       .debug_str	00000000 
000110a8 l       .debug_str	00000000 
00024d9b l       .debug_str	00000000 
00025495 l       .debug_str	00000000 
00059e15 l       .debug_str	00000000 
00061735 l       .debug_str	00000000 
0002f1f5 l       .debug_str	00000000 
0002f1f8 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
00011788 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
00018bc8 l       .debug_str	00000000 
00011691 l       .debug_str	00000000 
0001169c l       .debug_str	00000000 
0002f205 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0000efd3 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
0000efdd l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00018c28 l       .debug_str	00000000 
0000efe6 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c73 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025433 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00034a6f l       .debug_str	00000000 
0002f220 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0002f149 l       .debug_str	00000000 
0002eb22 l       .debug_str	00000000 
0002ebbf l       .debug_str	00000000 
0002ebf8 l       .debug_str	00000000 
0002ec97 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002f1b4 l       .debug_str	00000000 
0002ecd0 l       .debug_str	00000000 
0002ed6d l       .debug_str	00000000 
0002eda1 l       .debug_str	00000000 
0002ee44 l       .debug_str	00000000 
0002eee3 l       .debug_str	00000000 
000208d0 l     O .text	0000001c str.0
00020900 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 tool5db1zbl71ep
0002f205 l       .debug_str	00000000 
0002f220 l       .debug_str	00000000 
0002f2c4 l       .debug_str	00000000 
0002f339 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
00025424 l       .debug_str	00000000 
00011691 l       .debug_str	00000000 
0001169c l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
00018c73 l       .debug_str	00000000 
00034a6f l       .debug_str	00000000 
0002f255 l       .debug_str	00000000 
000253d4 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025433 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 vnkfcw75uydipan
0002f47f l       .debug_str	00000000 
0002564a l       .debug_str	00000000 
00025635 l       .debug_str	00000000 
00025650 l       .debug_str	00000000 
0002f370 l       .debug_str	00000000 
0002f3bb l       .debug_str	00000000 
0002f3ce l       .debug_str	00000000 
0002f419 l       .debug_str	00000000 
0002f43c l       .debug_str	00000000 
000100a8 l       .debug_str	00000000 
0002f49b l       .debug_str	00000000 
0002e610 l       .debug_str	00000000 
0000fd6f l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
00025f64 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002bc07 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea7b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c11 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ik332mkg6tevaet
0000bb41 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010546 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0001072c l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00010725 l       .debug_str	00000000 
0002f4de l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00011788 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1d7thnxtm1658vov
00000d1e l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a6 l       .debug_str	00000000 
0002f5a3 l       .debug_str	00000000 
0002f5e0 l       .debug_str	00000000 
0002f5f1 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0004ea0f l       .debug_str	00000000 
000399b4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000394ca l       .debug_str	00000000 
0005cbb3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ed l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a825 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
0005a79c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1mpt8t9sy9fl5s1y
0002f7e8 l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
0002f667 l       .debug_str	00000000 
00019286 l       .debug_str	00000000 
0002f6ac l       .debug_str	00000000 
0002f6f1 l       .debug_str	00000000 
0002f6fe l       .debug_str	00000000 
0002f743 l       .debug_str	00000000 
0002f750 l       .debug_str	00000000 
0001b2ad l       .debug_str	00000000 
0002f795 l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
0002f7dd l       .debug_str	00000000 
0000bf55 l       .debug_str	00000000 
0002f830 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
0002f876 l       .debug_str	00000000 
0002f8bc l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005cba1 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005e9b7 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002f623 l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1yr11byuhnx447wf
0001f359 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00059b10 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00015d04 l       .debug_str	00000000 
00011f52 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
0001f5ea l       .debug_str	00000000 
000343dc l       .debug_str	00000000 
00011f57 l       .debug_str	00000000 
0001f445 l       .debug_str	00000000 
00011f4e l       .debug_str	00000000 
0001f5f0 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002f902 l       .debug_str	00000000 
00019327 l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001f43f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2c4l9zx47vkj1m82
00035d02 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00012b84 l       .debug_str	00000000 
0005e9b7 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002f96b l       .debug_str	00000000 
0005c057 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2zdnjadro4igct6r
000197c7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002f9da l       .debug_str	00000000 
0002fa00 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3w7pruxfhz9uhnv5
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005a669 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cfe0 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
000612d3 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016201 l       .debug_str	00000000 
000229c8 l       .debug_str	00000000 
0002fa09 l       .debug_str	00000000 
0002fa85 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4wduwt141qumn59z
0000139d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005e79b l       .debug_str	00000000 
00033331 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0001f359 l       .debug_str	00000000 
0002fab2 l       .debug_str	00000000 
00012b81 l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 pcinnba97cylogg
0001603c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00012625 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002fb14 l       .debug_str	00000000 
0001602e l       .debug_str	00000000 
00013ac6 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0005a698 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 13ma8mzaba1sllzw
0003006a l       .debug_str	00000000 
0003e5fe l       .debug_str	00000000 
0000395c l       .debug_str	00000000 
000303be l       .debug_str	00000000 
000213ad l       .debug_str	00000000 
0003043d l       .debug_str	00000000 
00021430 l       .debug_str	00000000 
000304bc l       .debug_str	00000000 
0003053e l       .debug_str	00000000 
0002219b l       .debug_str	00000000 
00030782 l       .debug_str	00000000 
00030804 l       .debug_str	00000000 
0003084d l       .debug_str	00000000 
000308cf l       .debug_str	00000000 
00030918 l       .debug_str	00000000 
000216b1 l       .debug_str	00000000 
0003099a l       .debug_str	00000000 
00030a1c l       .debug_str	00000000 
00030c60 l       .debug_str	00000000 
00030ce2 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00030d2b l       .debug_str	00000000 
00030d9f l       .debug_str	00000000 
0001264d l       .debug_str	00000000 
0001f359 l       .debug_str	00000000 
00012625 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00035769 l       .debug_str	00000000 
000612d3 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013614 l       .debug_str	00000000 
000611de l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0002bc26 l       .debug_str	00000000 
0003100e l       .debug_str	00000000 
00031279 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006012b l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c249 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035923 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac2c l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000590a l       .debug_str	00000000 
00005958 l       .debug_str	00000000 
000059c3 l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
0005ab3d l       .debug_str	00000000 
00030d3d l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00005b05 l       .debug_str	00000000 
00005b73 l       .debug_str	00000000 
00005c0a l       .debug_str	00000000 
00005cca l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005ec5 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
00006164 l       .debug_str	00000000 
000062f1 l       .debug_str	00000000 
000064a7 l       .debug_str	00000000 
00006686 l       .debug_str	00000000 
0000688e l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000077a3 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000094f8 l       .debug_str	00000000 
0000971c l       .debug_str	00000000 
0000994d l       .debug_str	00000000 
00009b75 l       .debug_str	00000000 
00009dbe l       .debug_str	00000000 
0000a024 l       .debug_str	00000000 
00030db1 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002fb66 l       .debug_str	00000000 
0002fbed l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
0002fc3a l       .debug_str	00000000 
0002fcc1 l       .debug_str	00000000 
0002ff09 l       .debug_str	00000000 
0002ff92 l       .debug_str	00000000 
0002ffe1 l       .debug_str	00000000 
000302b4 l       .debug_str	00000000 
000210a2 l       .debug_str	00000000 
00030340 l       .debug_str	00000000 
0002132b l       .debug_str	00000000 
000209f0 l     O .text	0000001c str.0
00020a30 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 4miap3quw76e3k6m
00000beb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000134bb l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000611de l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000312e9 l       .debug_str	00000000 
0000b1cc l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4yl298udq4i2eqhh
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
000134d3 l       .debug_str	00000000 
00033331 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00031339 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 f8ebwo3yn0ryfmw
000315fe l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
00031676 l       .debug_str	00000000 
000318a1 l       .debug_str	00000000 
00031919 l       .debug_str	00000000 
00031aa8 l       .debug_str	00000000 
00031b20 l       .debug_str	00000000 
00031c88 l       .debug_str	00000000 
00031d00 l       .debug_str	00000000 
00031d7e l       .debug_str	00000000 
00031df6 l       .debug_str	00000000 
00031ee9 l       .debug_str	00000000 
00031f61 l       .debug_str	00000000 
0003213e l       .debug_str	00000000 
000321b6 l       .debug_str	00000000 
00032282 l       .debug_str	00000000 
000322fa l       .debug_str	00000000 
0003232a l       .debug_str	00000000 
000323a2 l       .debug_str	00000000 
00032447 l       .debug_str	00000000 
000324bf l       .debug_str	00000000 
00032600 l       .debug_str	00000000 
00032678 l       .debug_str	00000000 
0003282e l       .debug_str	00000000 
000328a6 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035923 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0005ac2c l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
0003139d l       .debug_str	00000000 
00031415 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
0003146c l       .debug_str	00000000 
000314e4 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000077a3 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16gyyaet005v3lvf
00024d91 l       .debug_str	00000000 
00032aaa l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00032b0a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00035923 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1gec8qpvo4ti2nbg
0001c3bf l       .debug_str	00000000 
0002eab7 l       .debug_str	00000000 
00032c6e l       .debug_str	00000000 
0002eb15 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
0005abba l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000134c3 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00032b6a l       .debug_str	00000000 
0002ea02 l       .debug_str	00000000 
00025f64 l       .debug_str	00000000 
00032bbc l       .debug_str	00000000 
00032c0f l       .debug_str	00000000 
00032c19 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 28buxl9xaffr9rke
0005a79c l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea0f l       .debug_str	00000000 
000399b4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005e9b7 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00032cc4 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
00018bb9 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ed l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2leljxexqh8ze7wz
00035d02 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00012b84 l       .debug_str	00000000 
0005e9b7 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00032d21 l       .debug_str	00000000 
0005c057 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cgt5uexdtuxl7pe
00033071 l       .debug_str	00000000 
00032f77 l       .debug_str	00000000 
00032f94 l       .debug_str	00000000 
00032fcf l       .debug_str	00000000 
00032ffd l       .debug_str	00000000 
00033018 l       .debug_str	00000000 
00033053 l       .debug_str	00000000 
0003307c l       .debug_str	00000000 
00032c0f l       .debug_str	00000000 
000330a2 l       .debug_str	00000000 
000330c8 l       .debug_str	00000000 
000330e2 l       .debug_str	00000000 
0002ea5b l       .debug_str	00000000 
00033109 l       .debug_str	00000000 
00033130 l       .debug_str	00000000 
0005c249 l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
000100a8 l       .debug_str	00000000 
0000fd6f l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005db0a l       .debug_str	00000000 
0005ae14 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00032d92 l       .debug_str	00000000 
00032da4 l       .debug_str	00000000 
00032db5 l       .debug_str	00000000 
00032e01 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea7b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c11 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002564a l       .debug_str	00000000 
00032e0d l       .debug_str	00000000 
00032e2f l       .debug_str	00000000 
00032e50 l       .debug_str	00000000 
00032e9c l       .debug_str	00000000 
00032eb8 l       .debug_str	00000000 
00032eef l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00025f64 l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00032f09 l       .debug_str	00000000 
00032f16 l       .debug_str	00000000 
00032f4d l       .debug_str	00000000 
00025635 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 26y0fjfhtczgcip1
0005abba l       .debug_str	00000000 
00033274 l       .debug_str	00000000 
00033290 l       .debug_str	00000000 
000332b6 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005db0a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003314b l       .debug_str	00000000 
00013502 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00033174 l       .debug_str	00000000 
00033185 l       .debug_str	00000000 
00033195 l       .debug_str	00000000 
000331e1 l       .debug_str	00000000 
000331ec l       .debug_str	00000000 
00033222 l       .debug_str	00000000 
0003323a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3529eu2hb2fyibnd
000160e3 l       .debug_str	00000000 
0001611d l       .debug_str	00000000 
00016156 l       .debug_str	00000000 
00016165 l       .debug_str	00000000 
000161a8 l       .debug_str	00000000 
0005c0e5 l       .debug_str	00000000 
00038a70 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000133c2 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000110a8 l       .debug_str	00000000 
000110ac l       .debug_str	00000000 
0001615f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000332bf l       .debug_str	00000000 
00013405 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
000332e8 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cyvbl47c30y60eb
0005c306 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00012b84 l       .debug_str	00000000 
0005e9b7 l       .debug_str	00000000 
00033324 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00033337 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
000333c3 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
000333cc l       .debug_str	00000000 
0003e5fe l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000333dc l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19nunfeq6523tst5
00024d91 l       .debug_str	00000000 
00033403 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00033463 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00035923 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1xpo0qpsduc6enem
0003352f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000334c3 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4xxoizn3g1nl6m5i
00035d02 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00012b84 l       .debug_str	00000000 
0005e9b7 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00033538 l       .debug_str	00000000 
0005c057 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 25lz0dio8kzdubcg
0001603c l       .debug_str	00000000 
0005abba l       .debug_str	00000000 
00025635 l       .debug_str	00000000 
000100a8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0001337f l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000335a9 l       .debug_str	00000000 
000335e7 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea7b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c11 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002564a l       .debug_str	00000000 
00033600 l       .debug_str	00000000 
0003363e l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00025f64 l       .debug_str	00000000 
0005ae14 l       .debug_str	00000000 
0000fd6f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 core.b09zx0wt-cgu.0
00000afc l       .debug_str	00000000 
00033667 l       .debug_str	00000000 
0003367a l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
0005e9b7 l       .debug_str	00000000 
000336ab l       .debug_str	00000000 
000336b3 l       .debug_str	00000000 
000336bc l       .debug_str	00000000 
00033705 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000336c3 l       .debug_str	00000000 
00033702 l       .debug_str	00000000 
0003370b l       .debug_str	00000000 
0003374d l       .debug_str	00000000 
00033757 l       .debug_str	00000000 
0003379a l       .debug_str	00000000 
000337a4 l       .debug_str	00000000 
000337e7 l       .debug_str	00000000 
000337f1 l       .debug_str	00000000 
00033834 l       .debug_str	00000000 
0003383f l       .debug_str	00000000 
00033884 l       .debug_str	00000000 
0003388f l       .debug_str	00000000 
000338d4 l       .debug_str	00000000 
000338da l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00033f0f l       .debug_str	00000000 
000110a8 l       .debug_str	00000000 
000338e7 l       .debug_str	00000000 
000338f7 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00012625 l       .debug_str	00000000 
000116de l       .debug_str	00000000 
0001260f l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00035769 l       .debug_str	00000000 
000612d3 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013614 l       .debug_str	00000000 
00024c86 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0003393d l       .debug_str	00000000 
000229c8 l       .debug_str	00000000 
0005f726 l       .debug_str	00000000 
00034313 l       .debug_str	00000000 
00012617 l       .debug_str	00000000 
0005f338 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0005ab8e l       .debug_str	00000000 
0003394f l       .debug_str	00000000 
00033954 l       .debug_str	00000000 
00060cae l       .debug_str	00000000 
0003395f l       .debug_str	00000000 
00000326 l       .debug_str	00000000 
00033969 l       .debug_str	00000000 
00033fdd l       .debug_str	00000000 
00033973 l       .debug_str	00000000 
0001603c l       .debug_str	00000000 
0003401d l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00034356 l       .debug_str	00000000 
00012621 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00033981 l       .debug_str	00000000 
000339f5 l       .debug_str	00000000 
00034237 l       .debug_str	00000000 
00033a07 l       .debug_str	00000000 
00034023 l       .debug_str	00000000 
00033ffd l       .debug_str	00000000 
00014ac8 l       .debug_str	00000000 
0003427a l       .debug_str	00000000 
00033a0c l       .debug_str	00000000 
00033a80 l       .debug_str	00000000 
0003438f l       .debug_str	00000000 
000343d6 l       .debug_str	00000000 
000342dc l       .debug_str	00000000 
00033a98 l       .debug_str	00000000 
00043b6b l       .debug_str	00000000 
0003928a l       .debug_str	00000000 
0005ab3d l       .debug_str	00000000 
000343f1 l       .debug_str	00000000 
000342ab l       .debug_str	00000000 
00033b10 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e944 l       .debug_str	00000000 
0002219b l       .debug_str	00000000 
00033b68 l       .debug_str	00000000 
00033b6d l       .debug_str	00000000 
00033b7f l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
00034a6f l       .debug_str	00000000 
00033b88 l       .debug_str	00000000 
0001a4f7 l       .debug_str	00000000 
00033bb0 l       .debug_str	00000000 
00033bc0 l       .debug_str	00000000 
0005cfe0 l       .debug_str	00000000 
00033c19 l       .debug_str	00000000 
00033c21 l       .debug_str	00000000 
000135a4 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00010b34 l       .debug_str	00000000 
00033c29 l       .debug_str	00000000 
00016269 l       .debug_str	00000000 
00033c35 l       .debug_str	00000000 
00033c3f l       .debug_str	00000000 
00033c4c l       .debug_str	00000000 
00033c59 l       .debug_str	00000000 
00033c6e l       .debug_str	00000000 
00033c82 l       .debug_str	00000000 
00033c98 l       .debug_str	00000000 
00033ca0 l       .debug_str	00000000 
00033cad l       .debug_str	00000000 
00033cba l       .debug_str	00000000 
000345c3 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
00033cc7 l       .debug_str	00000000 
00033cf4 l       .debug_str	00000000 
00033d23 l       .debug_str	00000000 
00033d4a l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00033d69 l       .debug_str	00000000 
00033d7e l       .debug_str	00000000 
00019f19 l       .debug_str	00000000 
0004ea0f l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
0005a79c l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00033d88 l       .debug_str	00000000 
00033dad l       .debug_str	00000000 
00033d93 l       .debug_str	00000000 
00033e2c l       .debug_str	00000000 
00033dbd l       .debug_str	00000000 
00033dc3 l       .debug_str	00000000 
00033dd2 l       .debug_str	00000000 
00033ddd l       .debug_str	00000000 
00033e12 l       .debug_str	00000000 
00033e37 l       .debug_str	00000000 
00033e47 l       .debug_str	00000000 
0005b3a6 l       .debug_str	00000000 
00033e79 l       .debug_str	00000000 
00033e7e l       .debug_str	00000000 
0005c249 l       .debug_str	00000000 
000356e3 l       .debug_str	00000000 
000356dc l       .debug_str	00000000 
000134d3 l       .debug_str	00000000 
0003570a l       .debug_str	00000000 
0003573e l       .debug_str	00000000 
00033e84 l       .debug_str	00000000 
0000581f l       .debug_str	00000000 
00033ec2 l       .debug_str	00000000 
000356e7 l       .debug_str	00000000 
00035734 l       .debug_str	00000000 
00033ea3 l       .debug_str	00000000 
00033e90 l       .debug_str	00000000 
00033ea9 l       .debug_str	00000000 
0002219a l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0000bb40 l       .debug_str	00000000 
00033ed1 l       .debug_str	00000000 
00033ed9 l       .debug_str	00000000 
0003f3a2 l       .debug_str	00000000 
00033edf l       .debug_str	00000000 
0004cecd l       .debug_str	00000000 
00033f06 l       .debug_str	00000000 
00033eea l       .debug_str	00000000 
0000e8a7 l       .debug_str	00000000 
00033f0e l       .debug_str	00000000 
00033bba l       .debug_str	00000000 
00022b2e l       .debug_str	00000000 
00024be6 l       .debug_str	00000000 
00033f13 l       .debug_str	00000000 
00033f37 l       .debug_str	00000000 
00033f3d l       .debug_str	00000000 
00033f45 l       .debug_str	00000000 
0004f538 l       .debug_str	00000000 
0003ef9e l       .debug_str	00000000 
00033f4a l       .debug_str	00000000 
00033f72 l       .debug_str	00000000 
00033f54 l       .debug_str	00000000 
00025f6b l       .debug_str	00000000 
00018bb9 l       .debug_str	00000000 
000160dc l       .debug_str	00000000 
0001f405 l       .debug_str	00000000 
00022b36 l       .debug_str	00000000 
00022b43 l       .debug_str	00000000 
00022b4c l       .debug_str	00000000 
00059b04 l       .debug_str	00000000 
00033f86 l       .debug_str	00000000 
00033f7a l       .debug_str	00000000 
00012b84 l       .debug_str	00000000 
00033f93 l       .debug_str	00000000 
00033f9f l       .debug_str	00000000 
00033fc2 l       .debug_str	00000000 
00033fac l       .debug_str	00000000 
00033fd0 l       .debug_str	00000000 
00033ff0 l       .debug_str	00000000 
00034010 l       .debug_str	00000000 
0003402b l       .debug_str	00000000 
00034046 l       .debug_str	00000000 
0003404c l       .debug_str	00000000 
00034050 l       .debug_str	00000000 
00034061 l       .debug_str	00000000 
00034054 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00034076 l       .debug_str	00000000 
00034071 l       .debug_str	00000000 
00034089 l       .debug_str	00000000 
000340d5 l       .debug_str	00000000 
000340ae l       .debug_str	00000000 
000340c5 l       .debug_str	00000000 
000340ef l       .debug_str	00000000 
000340e0 l       .debug_str	00000000 
00034137 l       .debug_str	00000000 
00034117 l       .debug_str	00000000 
00034190 l       .debug_str	00000000 
00034170 l       .debug_str	00000000 
00059af6 l       .debug_str	00000000 
000341e7 l       .debug_str	00000000 
000341ec l       .debug_str	00000000 
000341f2 l       .debug_str	00000000 
00034215 l       .debug_str	00000000 
000341f7 l       .debug_str	00000000 
00034220 l       .debug_str	00000000 
0003426b l       .debug_str	00000000 
0003429c l       .debug_str	00000000 
000342cd l       .debug_str	00000000 
000342fc l       .debug_str	00000000 
00034347 l       .debug_str	00000000 
00034378 l       .debug_str	00000000 
0001a316 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000399b4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
000394ca l       .debug_str	00000000 
0005cbb3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
000611ed l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a825 l       .debug_str	00000000 
0005a726 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0005ad6e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a6 l       .debug_str	00000000 
0001f49a l       .debug_str	00000000 
0001f2d7 l       .debug_str	00000000 
000343c9 l       .debug_str	00000000 
000343e2 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00034410 l       .debug_str	00000000 
0003440f l       .debug_str	00000000 
00034424 l       .debug_str	00000000 
00034415 l       .debug_str	00000000 
0005a817 l       .debug_str	00000000 
00059ae4 l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
00034451 l       .debug_str	00000000 
00034443 l       .debug_str	00000000 
00034442 l       .debug_str	00000000 
0001f40e l       .debug_str	00000000 
00018bc3 l       .debug_str	00000000 
00061623 l       .debug_str	00000000 
0003445a l       .debug_str	00000000 
0003445e l       .debug_str	00000000 
00034461 l       .debug_str	00000000 
00060113 l       .debug_str	00000000 
00018ba7 l       .debug_str	00000000 
00034464 l       .debug_str	00000000 
00019e91 l       .debug_str	00000000 
00034468 l       .debug_str	00000000 
00034467 l       .debug_str	00000000 
0003446d l       .debug_str	00000000 
0003453f l       .debug_str	00000000 
00000238 l       .debug_str	00000000 
0003448b l       .debug_str	00000000 
00034479 l       .debug_str	00000000 
000344b0 l       .debug_str	00000000 
00034578 l       .debug_str	00000000 
000344ce l       .debug_str	00000000 
000344bc l       .debug_str	00000000 
000344f3 l       .debug_str	00000000 
0003450c l       .debug_str	00000000 
000344fa l       .debug_str	00000000 
00034518 l       .debug_str	00000000 
00034530 l       .debug_str	00000000 
00034569 l       .debug_str	00000000 
00019e97 l       .debug_str	00000000 
000345a2 l       .debug_str	00000000 
000345af l       .debug_str	00000000 
000345ae l       .debug_str	00000000 
000345b7 l       .debug_str	00000000 
000345e4 l       .debug_str	00000000 
000345cf l       .debug_str	00000000 
00034601 l       .debug_str	00000000 
0003460d l       .debug_str	00000000 
000346b7 l       .debug_str	00000000 
00034619 l       .debug_str	00000000 
00034620 l       .debug_str	00000000 
00034629 l       .debug_str	00000000 
00034637 l       .debug_str	00000000 
0003463e l       .debug_str	00000000 
00034646 l       .debug_str	00000000 
0003464d l       .debug_str	00000000 
00034693 l       .debug_str	00000000 
0003466e l       .debug_str	00000000 
00034659 l       .debug_str	00000000 
0003467e l       .debug_str	00000000 
000346a2 l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
000346c3 l       .debug_str	00000000 
00024bf9 l       .debug_str	00000000 
0005dffd l       .debug_str	00000000 
0001f24a l       .debug_str	00000000 
0001f233 l       .debug_str	00000000 
000346dd l       .debug_str	00000000 
00034700 l       .debug_str	00000000 
000346e9 l       .debug_str	00000000 
0003474a l       .debug_str	00000000 
0003473e l       .debug_str	00000000 
00033bb5 l       .debug_str	00000000 
00034767 l       .debug_str	00000000 
00034750 l       .debug_str	00000000 
000347b0 l       .debug_str	00000000 
000347d8 l       .debug_str	00000000 
000347c1 l       .debug_str	00000000 
0005cba1 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
0005ac2c l       .debug_str	00000000 
00034887 l       .debug_str	00000000 
00034869 l       .debug_str	00000000 
0003497d l       .debug_str	00000000 
0003495d l       .debug_str	00000000 
000349f0 l       .debug_str	00000000 
000349d0 l       .debug_str	00000000 
0004aff6 l       .debug_str	00000000 
00034a43 l       .debug_str	00000000 
00034a50 l       .debug_str	00000000 
00034a5b l       .debug_str	00000000 
00034a71 l       .debug_str	00000000 
00034a7b l       .debug_str	00000000 
00034ad1 l       .debug_str	00000000 
00034ae3 l       .debug_str	00000000 
00034b35 l       .debug_str	00000000 
00034b49 l       .debug_str	00000000 
00034b9d l       .debug_str	00000000 
00034ba4 l       .debug_str	00000000 
00034bea l       .debug_str	00000000 
00034bf9 l       .debug_str	00000000 
00034c53 l       .debug_str	00000000 
00034ca9 l       .debug_str	00000000 
00034d01 l       .debug_str	00000000 
00034d4b l       .debug_str	00000000 
00034d51 l       .debug_str	00000000 
00034da1 l       .debug_str	00000000 
00034ded l       .debug_str	00000000 
00034e3b l       .debug_str	00000000 
00024c9f l       .debug_str	00000000 
00034e7b l       .debug_str	00000000 
00034ec8 l       .debug_str	00000000 
00034f11 l       .debug_str	00000000 
00034f5c l       .debug_str	00000000 
00034f99 l       .debug_str	00000000 
00034fa9 l       .debug_str	00000000 
00035004 l       .debug_str	00000000 
0003505b l       .debug_str	00000000 
000350b4 l       .debug_str	00000000 
0004238a l       .debug_str	00000000 
000350ff l       .debug_str	00000000 
00035153 l       .debug_str	00000000 
000351a3 l       .debug_str	00000000 
000351f5 l       .debug_str	00000000 
0005a698 l       .debug_str	00000000 
00035239 l       .debug_str	00000000 
00035285 l       .debug_str	00000000 
000352cd l       .debug_str	00000000 
00035317 l       .debug_str	00000000 
000421c0 l       .debug_str	00000000 
00035353 l       .debug_str	00000000 
000353a7 l       .debug_str	00000000 
000353f7 l       .debug_str	00000000 
00035449 l       .debug_str	00000000 
0003548d l       .debug_str	00000000 
00035499 l       .debug_str	00000000 
000354f0 l       .debug_str	00000000 
00035543 l       .debug_str	00000000 
00035598 l       .debug_str	00000000 
000355df l       .debug_str	00000000 
000355eb l       .debug_str	00000000 
00035602 l       .debug_str	00000000 
000355fb l       .debug_str	00000000 
00035614 l       .debug_str	00000000 
00035629 l       .debug_str	00000000 
0003567a l       .debug_str	00000000 
0003568a l       .debug_str	00000000 
000356db l       .debug_str	00000000 
000356e6 l       .debug_str	00000000 
00035709 l       .debug_str	00000000 
0003573d l       .debug_str	00000000 
00035753 l       .debug_str	00000000 
00035781 l       .debug_str	00000000 
00035775 l       .debug_str	00000000 
0003578f l       .debug_str	00000000 
0003578e l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00018baf l       .debug_str	00000000 
00024c0c l       .debug_str	00000000 
00024c0b l       .debug_str	00000000 
00024c11 l       .debug_str	00000000 
00024c10 l       .debug_str	00000000 
00035792 l       .debug_str	00000000 
000357d2 l       .debug_str	00000000 
000357da l       .debug_str	00000000 
0003581a l       .debug_str	00000000 
00035824 l       .debug_str	00000000 
00059c30 l       .debug_str	00000000 
0005e79b l       .debug_str	00000000 
00035860 l       .debug_str	00000000 
0001b085 l       .debug_str	00000000 
00038680 l       .debug_str	00000000 
00035888 l       .debug_str	00000000 
0001af3d l       .debug_str	00000000 
000358b1 l       .debug_str	00000000 
000358d6 l       .debug_str	00000000 
0004680e l       .debug_str	00000000 
0005ac86 l       .debug_str	00000000 
000358dd l       .debug_str	00000000 
000358e6 l       .debug_str	00000000 
0003591f l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
00035927 l       .debug_str	00000000 
00014376 l       .debug_str	00000000 
000359bc l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
00035a07 l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
00035a4e l       .debug_str	00000000 
00013ac6 l       .debug_str	00000000 
00035aa3 l       .debug_str	00000000 
00035ae0 l       .debug_str	00000000 
000134c3 l       .debug_str	00000000 
00035aeb l       .debug_str	00000000 
00014280 l       .debug_str	00000000 
00035b40 l       .debug_str	00000000 
00014210 l       .debug_str	00000000 
00035b92 l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
00035bd9 l       .debug_str	00000000 
0000ab6c l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00011e0d l       .debug_str	00000000 
000365e3 l       .debug_str	00000000 
00035c5f l       .debug_str	00000000 
00035ca0 l       .debug_str	00000000 
00035cc3 l       .debug_str	00000000 
00035cfe l       .debug_str	00000000 
00035d08 l       .debug_str	00000000 
00035d92 l       .debug_str	00000000 
00035dc4 l       .debug_str	00000000 
000130b8 l       .debug_str	00000000 
000134bb l       .debug_str	00000000 
00035e38 l       .debug_str	00000000 
00035e89 l       .debug_str	00000000 
000135ef l       .debug_str	00000000 
00035ecb l       .debug_str	00000000 
00035f52 l       .debug_str	00000000 
00035f61 l       .debug_str	00000000 
00035feb l       .debug_str	00000000 
00036067 l       .debug_str	00000000 
00036097 l       .debug_str	00000000 
000360d2 l       .debug_str	00000000 
000360dc l       .debug_str	00000000 
00003ab0 l       .debug_str	00000000 
00036153 l       .debug_str	00000000 
000361a8 l       .debug_str	00000000 
000361b1 l       .debug_str	00000000 
00036202 l       .debug_str	00000000 
0000579d l       .debug_str	00000000 
0003620e l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0003621b l       .debug_str	00000000 
00036224 l       .debug_str	00000000 
0003623a l       .debug_str	00000000 
00036247 l       .debug_str	00000000 
0003628c l       .debug_str	00000000 
000362a0 l       .debug_str	00000000 
000362f5 l       .debug_str	00000000 
000362fe l       .debug_str	00000000 
0004d4ad l       .debug_str	00000000 
00036336 l       .debug_str	00000000 
00036373 l       .debug_str	00000000 
0003637e l       .debug_str	00000000 
00036401 l       .debug_str	00000000 
0003640c l       .debug_str	00000000 
00036492 l       .debug_str	00000000 
00036507 l       .debug_str	00000000 
00036533 l       .debug_str	00000000 
000365bc l       .debug_str	00000000 
000365cb l       .debug_str	00000000 
000365d8 l       .debug_str	00000000 
000365ec l       .debug_str	00000000 
00036642 l       .debug_str	00000000 
000366b1 l       .debug_str	00000000 
00036731 l       .debug_str	00000000 
0003679f l       .debug_str	00000000 
0003682a l       .debug_str	00000000 
0003689f l       .debug_str	00000000 
000368df l       .debug_str	00000000 
00036962 l       .debug_str	00000000 
000369a3 l       .debug_str	00000000 
0004aeb8 l       .debug_str	00000000 
0004e9d2 l       .debug_str	00000000 
00036a08 l       .debug_str	00000000 
00036ab7 l       .debug_str	00000000 
00036b02 l       .debug_str	00000000 
000144fb l       .debug_str	00000000 
00036bab l       .debug_str	00000000 
00036c27 l       .debug_str	00000000 
00013379 l       .debug_str	00000000 
00036c4c l       .debug_str	00000000 
0000bf06 l       .debug_str	00000000 
00036c99 l       .debug_str	00000000 
00013a69 l       .debug_str	00000000 
00036cec l       .debug_str	00000000 
00036d27 l       .debug_str	00000000 
00036d32 l       .debug_str	00000000 
00019b35 l       .debug_str	00000000 
00036dbe l       .debug_str	00000000 
000136c1 l       .debug_str	00000000 
00036e41 l       .debug_str	00000000 
00036ec9 l       .debug_str	00000000 
0001ffc5 l       .debug_str	00000000 
00036f3e l       .debug_str	00000000 
00036fc4 l       .debug_str	00000000 
00014a02 l       .debug_str	00000000 
00037039 l       .debug_str	00000000 
0000b6af l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
0000abf6 l       .debug_str	00000000 
000370fe l       .debug_str	00000000 
0000a8e2 l       .debug_str	00000000 
00037144 l       .debug_str	00000000 
0003718c l       .debug_str	00000000 
00037196 l       .debug_str	00000000 
000371d7 l       .debug_str	00000000 
000371f1 l       .debug_str	00000000 
00024cc4 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
000371f7 l       .debug_str	00000000 
00037200 l       .debug_str	00000000 
00037265 l       .debug_str	00000000 
00037274 l       .debug_str	00000000 
000372b6 l       .debug_str	00000000 
000372c0 l       .debug_str	00000000 
00037325 l       .debug_str	00000000 
00037367 l       .debug_str	00000000 
000373b1 l       .debug_str	00000000 
000373c0 l       .debug_str	00000000 
000373f6 l       .debug_str	00000000 
000373ff l       .debug_str	00000000 
00016963 l       .debug_str	00000000 
00037409 l       .debug_str	00000000 
0003740c l       .debug_str	00000000 
00037444 l       .debug_str	00000000 
0003744e l       .debug_str	00000000 
00037492 l       .debug_str	00000000 
000374a8 l       .debug_str	00000000 
000374f1 l       .debug_str	00000000 
00013636 l       .debug_str	00000000 
00024caf l       .debug_str	00000000 
00037536 l       .debug_str	00000000 
0003757f l       .debug_str	00000000 
0003758d l       .debug_str	00000000 
000375d5 l       .debug_str	00000000 
0002337d l       .debug_str	00000000 
0003761f l       .debug_str	00000000 
00040df7 l       .debug_str	00000000 
000376b7 l       .debug_str	00000000 
0005a669 l       .debug_str	00000000 
00037751 l       .debug_str	00000000 
0002386d l       .debug_str	00000000 
000377c3 l       .debug_str	00000000 
000235a0 l       .debug_str	00000000 
00037866 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
00037898 l       .debug_str	00000000 
000378df l       .debug_str	00000000 
000378ed l       .debug_str	00000000 
000378f7 l       .debug_str	00000000 
00037945 l       .debug_str	00000000 
00037955 l       .debug_str	00000000 
000379a0 l       .debug_str	00000000 
000379ae l       .debug_str	00000000 
00037a3c l       .debug_str	00000000 
00037a4b l       .debug_str	00000000 
0000bf55 l       .debug_str	00000000 
00037a94 l       .debug_str	00000000 
0000befe l       .debug_str	00000000 
00037ad9 l       .debug_str	00000000 
00037b13 l       .debug_str	00000000 
00037b1c l       .debug_str	00000000 
00037b68 l       .debug_str	00000000 
00037b80 l       .debug_str	00000000 
00037be2 l       .debug_str	00000000 
0000be4e l       .debug_str	00000000 
00037c17 l       .debug_str	00000000 
00037c3f l       .debug_str	00000000 
00037c77 l       .debug_str	00000000 
00037ca0 l       .debug_str	00000000 
00037cab l       .debug_str	00000000 
0001a294 l       .debug_str	00000000 
00037cd0 l       .debug_str	00000000 
00037d5f l       .debug_str	00000000 
00037d96 l       .debug_str	00000000 
00037e1c l       .debug_str	00000000 
00037e6a l       .debug_str	00000000 
00037e73 l       .debug_str	00000000 
00037ef9 l       .debug_str	00000000 
00037f0c l       .debug_str	00000000 
00037f95 l       .debug_str	00000000 
00037ff1 l       .debug_str	00000000 
00038033 l       .debug_str	00000000 
000380e5 l       .debug_str	00000000 
00038124 l       .debug_str	00000000 
000381c9 l       .debug_str	00000000 
0003825d l       .debug_str	00000000 
00038283 l       .debug_str	00000000 
000382ff l       .debug_str	00000000 
0003833a l       .debug_str	00000000 
00038347 l       .debug_str	00000000 
00038380 l       .debug_str	00000000 
00038398 l       .debug_str	00000000 
000383d8 l       .debug_str	00000000 
00033331 l       .debug_str	00000000 
000383e4 l       .debug_str	00000000 
00038441 l       .debug_str	00000000 
0003849e l       .debug_str	00000000 
0003854b l       .debug_str	00000000 
000385a8 l       .debug_str	00000000 
00015de2 l       .debug_str	00000000 
00038615 l       .debug_str	00000000 
00038679 l       .debug_str	00000000 
00038684 l       .debug_str	00000000 
000386b4 l       .debug_str	00000000 
000386e0 l       .debug_str	00000000 
0003874c l       .debug_str	00000000 
0003877c l       .debug_str	00000000 
000387b8 l       .debug_str	00000000 
00038802 l       .debug_str	00000000 
00038812 l       .debug_str	00000000 
00038847 l       .debug_str	00000000 
0003888c l       .debug_str	00000000 
00038897 l       .debug_str	00000000 
000388d7 l       .debug_str	00000000 
000388e5 l       .debug_str	00000000 
00038971 l       .debug_str	00000000 
000389ed l       .debug_str	00000000 
00038a0d l       .debug_str	00000000 
00038a67 l       .debug_str	00000000 
00038a74 l       .debug_str	00000000 
00038aad l       .debug_str	00000000 
00038ab5 l       .debug_str	00000000 
00038b0a l       .debug_str	00000000 
00038b5c l       .debug_str	00000000 
00037a41 l       .debug_str	00000000 
00038ba3 l       .debug_str	00000000 
00038c17 l       .debug_str	00000000 
00038c5b l       .debug_str	00000000 
00038ca7 l       .debug_str	00000000 
00038ce6 l       .debug_str	00000000 
00038d0c l       .debug_str	00000000 
00038d1e l       .debug_str	00000000 
00038d28 l       .debug_str	00000000 
00038d6a l       .debug_str	00000000 
00003a03 l       .debug_str	00000000 
00038df1 l       .debug_str	00000000 
0002fa85 l       .debug_str	00000000 
00038e6d l       .debug_str	00000000 
00038ee4 l       .debug_str	00000000 
00038f32 l       .debug_str	00000000 
00003c53 l       .debug_str	00000000 
00038fc2 l       .debug_str	00000000 
00038ffe l       .debug_str	00000000 
0003900b l       .debug_str	00000000 
00039051 l       .debug_str	00000000 
0003905e l       .debug_str	00000000 
00039da4 l       .debug_str	00000000 
00039090 l       .debug_str	00000000 
000390e0 l       .debug_str	00000000 
000390f7 l       .debug_str	00000000 
00039181 l       .debug_str	00000000 
0000aab7 l       .debug_str	00000000 
000391fd l       .debug_str	00000000 
00039211 l       .debug_str	00000000 
0003926e l       .debug_str	00000000 
0003927d l       .debug_str	00000000 
0003928e l       .debug_str	00000000 
000392e8 l       .debug_str	00000000 
000392f7 l       .debug_str	00000000 
00039380 l       .debug_str	00000000 
0003938e l       .debug_str	00000000 
000393e4 l       .debug_str	00000000 
00039438 l       .debug_str	00000000 
000394b1 l       .debug_str	00000000 
000394c9 l       .debug_str	00000000 
000394d3 l       .debug_str	00000000 
0003956a l       .debug_str	00000000 
00039584 l       .debug_str	00000000 
0001ceb1 l       .debug_str	00000000 
000395bd l       .debug_str	00000000 
00012b81 l       .debug_str	00000000 
00039622 l       .debug_str	00000000 
000396b9 l       .debug_str	00000000 
000396bd l       .debug_str	00000000 
000399b2 l       .debug_str	00000000 
000396c2 l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
0001337f l       .debug_str	00000000 
000396f4 l       .debug_str	00000000 
000190b7 l       .debug_str	00000000 
00039732 l       .debug_str	00000000 
0000a888 l       .debug_str	00000000 
00039785 l       .debug_str	00000000 
00039811 l       .debug_str	00000000 
0003988d l       .debug_str	00000000 
000398ac l       .debug_str	00000000 
000398f7 l       .debug_str	00000000 
00039904 l       .debug_str	00000000 
00039978 l       .debug_str	00000000 
0003dcb6 l       .debug_str	00000000 
0004f3f1 l       .debug_str	00000000 
00039997 l       .debug_str	00000000 
000399b7 l       .debug_str	00000000 
000399d3 l       .debug_str	00000000 
000399dd l       .debug_str	00000000 
00039a69 l       .debug_str	00000000 
00039ae5 l       .debug_str	00000000 
00039b16 l       .debug_str	00000000 
00039b99 l       .debug_str	00000000 
00039bb9 l       .debug_str	00000000 
00039c3f l       .debug_str	00000000 
00039cb4 l       .debug_str	00000000 
000333cc l       .debug_str	00000000 
0005cc2f l       .debug_str	00000000 
00039cf5 l       .debug_str	00000000 
00023933 l       .debug_str	00000000 
00039d40 l       .debug_str	00000000 
00039d9c l       .debug_str	00000000 
00039da8 l       .debug_str	00000000 
00039df1 l       .debug_str	00000000 
00039e01 l       .debug_str	00000000 
00039e46 l       .debug_str	00000000 
00039e8f l       .debug_str	00000000 
00039ed4 l       .debug_str	00000000 
00039f30 l       .debug_str	00000000 
00039f7b l       .debug_str	00000000 
00039fc2 l       .debug_str	00000000 
0003a020 l       .debug_str	00000000 
0003a06b l       .debug_str	00000000 
0003a0b2 l       .debug_str	00000000 
0003a110 l       .debug_str	00000000 
0003a15b l       .debug_str	00000000 
0003a1a2 l       .debug_str	00000000 
0003a200 l       .debug_str	00000000 
0003a249 l       .debug_str	00000000 
0003a28e l       .debug_str	00000000 
0003a2ea l       .debug_str	00000000 
0003a333 l       .debug_str	00000000 
0003a378 l       .debug_str	00000000 
0003a3d4 l       .debug_str	00000000 
0003a41e l       .debug_str	00000000 
0003a464 l       .debug_str	00000000 
0003a4c1 l       .debug_str	00000000 
0003a50b l       .debug_str	00000000 
0003a551 l       .debug_str	00000000 
0003a5ae l       .debug_str	00000000 
0003a609 l       .debug_str	00000000 
0003a651 l       .debug_str	00000000 
0003a695 l       .debug_str	00000000 
0003a6dd l       .debug_str	00000000 
0003a721 l       .debug_str	00000000 
0003a77c l       .debug_str	00000000 
0003a7c5 l       .debug_str	00000000 
0003a80a l       .debug_str	00000000 
0003a866 l       .debug_str	00000000 
0003a8af l       .debug_str	00000000 
0003a8f4 l       .debug_str	00000000 
0003a950 l       .debug_str	00000000 
0003a999 l       .debug_str	00000000 
0003a9de l       .debug_str	00000000 
0003aa3a l       .debug_str	00000000 
0003aa84 l       .debug_str	00000000 
0003aaca l       .debug_str	00000000 
0003ab27 l       .debug_str	00000000 
0003ab71 l       .debug_str	00000000 
0003abb7 l       .debug_str	00000000 
0003ac14 l       .debug_str	00000000 
0003ac5e l       .debug_str	00000000 
0003aca4 l       .debug_str	00000000 
0003ad01 l       .debug_str	00000000 
0003ad5c l       .debug_str	00000000 
0003ada4 l       .debug_str	00000000 
0003ade8 l       .debug_str	00000000 
0003ae30 l       .debug_str	00000000 
0003ae74 l       .debug_str	00000000 
0003aecf l       .debug_str	00000000 
0003af2a l       .debug_str	00000000 
0003af72 l       .debug_str	00000000 
0003afb6 l       .debug_str	00000000 
0003afff l       .debug_str	00000000 
0003b044 l       .debug_str	00000000 
0003b0a0 l       .debug_str	00000000 
0003b0fc l       .debug_str	00000000 
0003b145 l       .debug_str	00000000 
0003b18a l       .debug_str	00000000 
0003b1e6 l       .debug_str	00000000 
0003b22f l       .debug_str	00000000 
0003b274 l       .debug_str	00000000 
0003b2d0 l       .debug_str	00000000 
0003b319 l       .debug_str	00000000 
0003b35e l       .debug_str	00000000 
00023453 l       .debug_str	00000000 
0003b3ba l       .debug_str	00000000 
0003b3f9 l       .debug_str	00000000 
0003b42e l       .debug_str	00000000 
0000582c l       .debug_str	00000000 
000134cd l       .debug_str	00000000 
0001361d l       .debug_str	00000000 
0003b438 l       .debug_str	00000000 
000155e3 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
0003b472 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0003b504 l       .debug_str	00000000 
00014b0f l       .debug_str	00000000 
0003b53d l       .debug_str	00000000 
00013ff6 l       .debug_str	00000000 
0003b564 l       .debug_str	00000000 
00013f42 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0003b59e l       .debug_str	00000000 
00013cc1 l       .debug_str	00000000 
0003b5c4 l       .debug_str	00000000 
00013a08 l       .debug_str	00000000 
0003b61e l       .debug_str	00000000 
0001441c l       .debug_str	00000000 
0003b6b8 l       .debug_str	00000000 
0001362c l       .debug_str	00000000 
0003b741 l       .debug_str	00000000 
0003b7e8 l       .debug_str	00000000 
0003b821 l       .debug_str	00000000 
0003b896 l       .debug_str	00000000 
0003b8bf l       .debug_str	00000000 
0002c727 l       .debug_str	00000000 
0003b8f4 l       .debug_str	00000000 
0003b930 l       .debug_str	00000000 
0003b941 l       .debug_str	00000000 
0003b97a l       .debug_str	00000000 
00012c1c l       .debug_str	00000000 
0003b987 l       .debug_str	00000000 
0003b996 l       .debug_str	00000000 
0003726d l       .debug_str	00000000 
0003b9df l       .debug_str	00000000 
0003ba12 l       .debug_str	00000000 
0003ba1f l       .debug_str	00000000 
00060922 l       .debug_str	00000000 
0003ba6a l       .debug_str	00000000 
0003bac2 l       .debug_str	00000000 
0003bad7 l       .debug_str	00000000 
0003bb0d l       .debug_str	00000000 
0003bb18 l       .debug_str	00000000 
0002c835 l       .debug_str	00000000 
0003bb77 l       .debug_str	00000000 
0003bbea l       .debug_str	00000000 
0003bc51 l       .debug_str	00000000 
0003bc71 l       .debug_str	00000000 
0003bcb0 l       .debug_str	00000000 
0003bccf l       .debug_str	00000000 
00000ad8 l       .debug_str	00000000 
0003bd42 l       .debug_str	00000000 
0003bdbf l       .debug_str	00000000 
0003be24 l       .debug_str	00000000 
0003be84 l       .debug_str	00000000 
0003bef7 l       .debug_str	00000000 
0003bf74 l       .debug_str	00000000 
00015778 l       .debug_str	00000000 
0003bfec l       .debug_str	00000000 
0003c061 l       .debug_str	00000000 
0003c0db l       .debug_str	00000000 
0001167a l       .debug_str	00000000 
00011685 l       .debug_str	00000000 
0003c13b l       .debug_str	00000000 
0005e910 l       .debug_str	00000000 
0003c179 l       .debug_str	00000000 
0003c1bb l       .debug_str	00000000 
0003c1e6 l       .debug_str	00000000 
0003c227 l       .debug_str	00000000 
0003c231 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
0005f7ca l       .debug_str	00000000 
0005a0b0 l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
0003c28d l       .debug_str	00000000 
0000146f l       .debug_str	00000000 
0003c2c9 l       .debug_str	00000000 
00001412 l       .debug_str	00000000 
0003c310 l       .debug_str	00000000 
0003c36e l       .debug_str	00000000 
00033c9d l       .debug_str	00000000 
0003c3c5 l       .debug_str	00000000 
0003c41f l       .debug_str	00000000 
0003c429 l       .debug_str	00000000 
00012bea l       .debug_str	00000000 
00012bef l       .debug_str	00000000 
0003c46c l       .debug_str	00000000 
0003c4a2 l       .debug_str	00000000 
0003c4b2 l       .debug_str	00000000 
0003c4c1 l       .debug_str	00000000 
0003c4cc l       .debug_str	00000000 
00033d83 l       .debug_str	00000000 
0003c506 l       .debug_str	00000000 
0003c54f l       .debug_str	00000000 
00025478 l       .debug_str	00000000 
0003c596 l       .debug_str	00000000 
0003c5d1 l       .debug_str	00000000 
0003c5f6 l       .debug_str	00000000 
0003c662 l       .debug_str	00000000 
0003c675 l       .debug_str	00000000 
0003c6ec l       .debug_str	00000000 
0003c6f7 l       .debug_str	00000000 
0003c734 l       .debug_str	00000000 
0003c73f l       .debug_str	00000000 
0003c7c0 l       .debug_str	00000000 
0003c806 l       .debug_str	00000000 
0003c82d l       .debug_str	00000000 
0003c85c l       .debug_str	00000000 
0003c86d l       .debug_str	00000000 
0001356f l       .debug_str	00000000 
0003c8c9 l       .debug_str	00000000 
0003c8fa l       .debug_str	00000000 
0001b2ad l       .debug_str	00000000 
0003c942 l       .debug_str	00000000 
0001f80e l       .debug_str	00000000 
0003c980 l       .debug_str	00000000 
0003c9c4 l       .debug_str	00000000 
0003ca17 l       .debug_str	00000000 
000394b2 l       .debug_str	00000000 
0003ca8f l       .debug_str	00000000 
0003cade l       .debug_str	00000000 
0003cb74 l       .debug_str	00000000 
0003cbb8 l       .debug_str	00000000 
000408f6 l       .debug_str	00000000 
0003cc30 l       .debug_str	00000000 
0003cc7f l       .debug_str	00000000 
0003cd15 l       .debug_str	00000000 
0003cd2f l       .debug_str	00000000 
0003cd7e l       .debug_str	00000000 
0003cdb7 l       .debug_str	00000000 
0003cdd2 l       .debug_str	00000000 
0001519a l       .debug_str	00000000 
0003ce36 l       .debug_str	00000000 
00014aa6 l       .debug_str	00000000 
0003ceaf l       .debug_str	00000000 
0002218c l       .debug_str	00000000 
0003cf20 l       .debug_str	00000000 
0003cfb6 l       .debug_str	00000000 
0003d04e l       .debug_str	00000000 
0003d0c0 l       .debug_str	00000000 
0003d0e8 l       .debug_str	00000000 
0001a541 l       .debug_str	00000000 
0003d1a0 l       .debug_str	00000000 
00023d91 l       .debug_str	00000000 
0003d1e5 l       .debug_str	00000000 
0003d29b l       .debug_str	00000000 
0003d2e0 l       .debug_str	00000000 
00002b77 l       .debug_str	00000000 
0003d322 l       .debug_str	00000000 
0003d37d l       .debug_str	00000000 
0003d382 l       .debug_str	00000000 
0003d3db l       .debug_str	00000000 
0003d40f l       .debug_str	00000000 
0003d423 l       .debug_str	00000000 
0003d45e l       .debug_str	00000000 
0003d4a0 l       .debug_str	00000000 
0003d4b6 l       .debug_str	00000000 
0003d522 l       .debug_str	00000000 
0001167e l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0003d564 l       .debug_str	00000000 
0003d5a4 l       .debug_str	00000000 
0003d5fe l       .debug_str	00000000 
0003d640 l       .debug_str	00000000 
0003d69b l       .debug_str	00000000 
0003d6dd l       .debug_str	00000000 
0003d6e8 l       .debug_str	00000000 
0003d728 l       .debug_str	00000000 
0003d72e l       .debug_str	00000000 
0003d788 l       .debug_str	00000000 
0003d791 l       .debug_str	00000000 
0003d7d3 l       .debug_str	00000000 
0003d82b l       .debug_str	00000000 
0003d86d l       .debug_str	00000000 
0003d8c6 l       .debug_str	00000000 
0003d8d0 l       .debug_str	00000000 
0003d8d8 l       .debug_str	00000000 
0003d8e1 l       .debug_str	00000000 
0003d8d4 l       .debug_str	00000000 
0003d923 l       .debug_str	00000000 
0003d978 l       .debug_str	00000000 
0003d9b5 l       .debug_str	00000000 
0003d9f7 l       .debug_str	00000000 
0003da4e l       .debug_str	00000000 
0003da90 l       .debug_str	00000000 
0003dae8 l       .debug_str	00000000 
0003db20 l       .debug_str	00000000 
0003db2c l       .debug_str	00000000 
0003db69 l       .debug_str	00000000 
0003dbcb l       .debug_str	00000000 
0003dc0c l       .debug_str	00000000 
0003dc15 l       .debug_str	00000000 
0003dc73 l       .debug_str	00000000 
0003dcac l       .debug_str	00000000 
0003dcbb l       .debug_str	00000000 
0003dcfa l       .debug_str	00000000 
0003dd0f l       .debug_str	00000000 
0003dd55 l       .debug_str	00000000 
0003dd62 l       .debug_str	00000000 
0003dd68 l       .debug_str	00000000 
0003dda1 l       .debug_str	00000000 
0003de2d l       .debug_str	00000000 
0003de69 l       .debug_str	00000000 
00059c9f l       .debug_str	00000000 
0003de7b l       .debug_str	00000000 
0003deb3 l       .debug_str	00000000 
0003debf l       .debug_str	00000000 
0003defc l       .debug_str	00000000 
0003df5e l       .debug_str	00000000 
0003df9f l       .debug_str	00000000 
0003dffd l       .debug_str	00000000 
0003e037 l       .debug_str	00000000 
0003e091 l       .debug_str	00000000 
0003e0da l       .debug_str	00000000 
0003e0ea l       .debug_str	00000000 
0003e123 l       .debug_str	00000000 
0003e1a5 l       .debug_str	00000000 
0003e1df l       .debug_str	00000000 
0003e239 l       .debug_str	00000000 
0003e274 l       .debug_str	00000000 
0003e2d4 l       .debug_str	00000000 
0003e30f l       .debug_str	00000000 
0003e36f l       .debug_str	00000000 
0003e3ad l       .debug_str	00000000 
0003e40b l       .debug_str	00000000 
0003e449 l       .debug_str	00000000 
0003e4a7 l       .debug_str	00000000 
0003e4f2 l       .debug_str	00000000 
0003e4fb l       .debug_str	00000000 
0003e54a l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
0003e556 l       .debug_str	00000000 
0003e587 l       .debug_str	00000000 
0003e5b2 l       .debug_str	00000000 
0003e600 l       .debug_str	00000000 
000135a0 l       .debug_str	00000000 
0003e607 l       .debug_str	00000000 
0003e66c l       .debug_str	00000000 
0003e69d l       .debug_str	00000000 
0003e6a5 l       .debug_str	00000000 
00013c1e l       .debug_str	00000000 
0003e6d6 l       .debug_str	00000000 
0003e72f l       .debug_str	00000000 
0003e7bd l       .debug_str	00000000 
0003e809 l       .debug_str	00000000 
0003e82e l       .debug_str	00000000 
0003e84b l       .debug_str	00000000 
0003e875 l       .debug_str	00000000 
0001a4d4 l       .debug_str	00000000 
0001a58f l       .debug_str	00000000 
0001a60b l       .debug_str	00000000 
0003e897 l       .debug_str	00000000 
0003e8e4 l       .debug_str	00000000 
0003e929 l       .debug_str	00000000 
0003e968 l       .debug_str	00000000 
0003e9b4 l       .debug_str	00000000 
0003ea43 l       .debug_str	00000000 
0003ea90 l       .debug_str	00000000 
0003eb16 l       .debug_str	00000000 
0005bba1 l       .debug_str	00000000 
0003eb3b l       .debug_str	00000000 
0003eb65 l       .debug_str	00000000 
0003eb6e l       .debug_str	00000000 
0003eba4 l       .debug_str	00000000 
0003ebad l       .debug_str	00000000 
0003ec3b l       .debug_str	00000000 
0003ec81 l       .debug_str	00000000 
0003eca0 l       .debug_str	00000000 
0003ecb7 l       .debug_str	00000000 
0003ecdb l       .debug_str	00000000 
0003ecf7 l       .debug_str	00000000 
0003ed3e l       .debug_str	00000000 
0003ed83 l       .debug_str	00000000 
0003edc2 l       .debug_str	00000000 
0003ee08 l       .debug_str	00000000 
0003ee97 l       .debug_str	00000000 
0003eede l       .debug_str	00000000 
0003ef64 l       .debug_str	00000000 
0003ef99 l       .debug_str	00000000 
0003efa3 l       .debug_str	00000000 
0005abba l       .debug_str	00000000 
0003f00e l       .debug_str	00000000 
0003f043 l       .debug_str	00000000 
0003f04d l       .debug_str	00000000 
0003f080 l       .debug_str	00000000 
0003f088 l       .debug_str	00000000 
0003f0bc l       .debug_str	00000000 
0003f0ce l       .debug_str	00000000 
0003f108 l       .debug_str	00000000 
0003f126 l       .debug_str	00000000 
0003f14c l       .debug_str	00000000 
0003f157 l       .debug_str	00000000 
0003f180 l       .debug_str	00000000 
0003f18e l       .debug_str	00000000 
0003f1c8 l       .debug_str	00000000 
0003f1fe l       .debug_str	00000000 
0003f224 l       .debug_str	00000000 
0003f247 l       .debug_str	00000000 
0003f270 l       .debug_str	00000000 
0003f296 l       .debug_str	00000000 
0003f2d4 l       .debug_str	00000000 
0003f2ee l       .debug_str	00000000 
0003f32c l       .debug_str	00000000 
0003f35e l       .debug_str	00000000 
0003f36a l       .debug_str	00000000 
00061336 l       .debug_str	00000000 
0003f39e l       .debug_str	00000000 
0003f3ab l       .debug_str	00000000 
00023238 l       .debug_str	00000000 
0003f3dd l       .debug_str	00000000 
0003f447 l       .debug_str	00000000 
0003f4b7 l       .debug_str	00000000 
0003f51e l       .debug_str	00000000 
0003f53b l       .debug_str	00000000 
0003f57a l       .debug_str	00000000 
0003f596 l       .debug_str	00000000 
000231fa l       .debug_str	00000000 
0003f5c4 l       .debug_str	00000000 
000232d6 l       .debug_str	00000000 
0003f5f9 l       .debug_str	00000000 
0003f635 l       .debug_str	00000000 
0003f65b l       .debug_str	00000000 
0003f69a l       .debug_str	00000000 
0003f6aa l       .debug_str	00000000 
0003f70e l       .debug_str	00000000 
0003f745 l       .debug_str	00000000 
0003f75b l       .debug_str	00000000 
0003f7aa l       .debug_str	00000000 
0003f7b6 l       .debug_str	00000000 
0003f888 l       .debug_str	00000000 
0003f7fd l       .debug_str	00000000 
0003f883 l       .debug_str	00000000 
0003f8a7 l       .debug_str	00000000 
0003f8e2 l       .debug_str	00000000 
0003f8f2 l       .debug_str	00000000 
0006125e l       .debug_str	00000000 
0003f933 l       .debug_str	00000000 
0003f96d l       .debug_str	00000000 
0003f97c l       .debug_str	00000000 
0003f9b5 l       .debug_str	00000000 
0003f9c3 l       .debug_str	00000000 
0003f9fc l       .debug_str	00000000 
0003fa0a l       .debug_str	00000000 
0003fa5a l       .debug_str	00000000 
0003fa67 l       .debug_str	00000000 
0003fadd l       .debug_str	00000000 
0003fae8 l       .debug_str	00000000 
0003fafa l       .debug_str	00000000 
0003fb46 l       .debug_str	00000000 
0003fb63 l       .debug_str	00000000 
0003fbf7 l       .debug_str	00000000 
0003fc8d l       .debug_str	00000000 
0003fcff l       .debug_str	00000000 
0003fd25 l       .debug_str	00000000 
0003fdc4 l       .debug_str	00000000 
0003fe35 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
0003fe7a l       .debug_str	00000000 
0003fedd l       .debug_str	00000000 
0003ff00 l       .debug_str	00000000 
0003ff54 l       .debug_str	00000000 
0003ff6b l       .debug_str	00000000 
00024d91 l       .debug_str	00000000 
0003ffb8 l       .debug_str	00000000 
0003ffc5 l       .debug_str	00000000 
00040000 l       .debug_str	00000000 
00040028 l       .debug_str	00000000 
0004008a l       .debug_str	00000000 
0003bb12 l       .debug_str	00000000 
000400f3 l       .debug_str	00000000 
00042921 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00033174 l       .debug_str	00000000 
00033185 l       .debug_str	00000000 
00040140 l       .debug_str	00000000 
0000b1cc l       .debug_str	00000000 
0004018b l       .debug_str	00000000 
0004020e l       .debug_str	00000000 
0004023e l       .debug_str	00000000 
000402c6 l       .debug_str	00000000 
0004033b l       .debug_str	00000000 
0004038e l       .debug_str	00000000 
0004041a l       .debug_str	00000000 
00040452 l       .debug_str	00000000 
000404a7 l       .debug_str	00000000 
000404d8 l       .debug_str	00000000 
0004052a l       .debug_str	00000000 
00040558 l       .debug_str	00000000 
000405ac l       .debug_str	00000000 
000405d2 l       .debug_str	00000000 
0001f75a l       .debug_str	00000000 
00040609 l       .debug_str	00000000 
00040654 l       .debug_str	00000000 
00040670 l       .debug_str	00000000 
000406c6 l       .debug_str	00000000 
0001f8a1 l       .debug_str	00000000 
0004073f l       .debug_str	00000000 
0004078f l       .debug_str	00000000 
00040826 l       .debug_str	00000000 
0004087c l       .debug_str	00000000 
000408f5 l       .debug_str	00000000 
0004090d l       .debug_str	00000000 
000409a4 l       .debug_str	00000000 
000409dd l       .debug_str	00000000 
00040c0d l       .debug_str	00000000 
00040a26 l       .debug_str	00000000 
0003f8ee l       .debug_str	00000000 
00040a63 l       .debug_str	00000000 
00040aa7 l       .debug_str	00000000 
00040af2 l       .debug_str	00000000 
00040b32 l       .debug_str	00000000 
00040b5c l       .debug_str	00000000 
00040ba5 l       .debug_str	00000000 
00040bb4 l       .debug_str	00000000 
00040c05 l       .debug_str	00000000 
00040c1c l       .debug_str	00000000 
0004aebc l       .debug_str	00000000 
0005c45b l       .debug_str	00000000 
00040c83 l       .debug_str	00000000 
00040ce4 l       .debug_str	00000000 
00040d03 l       .debug_str	00000000 
00040d0c l       .debug_str	00000000 
00040d18 l       .debug_str	00000000 
000168c2 l       .debug_str	00000000 
00040d1e l       .debug_str	00000000 
00040d28 l       .debug_str	00000000 
00040d5a l       .debug_str	00000000 
00040d6a l       .debug_str	00000000 
00040df2 l       .debug_str	00000000 
00040dfb l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00040e68 l       .debug_str	00000000 
00040ea7 l       .debug_str	00000000 
00015cea l       .debug_str	00000000 
00015cf6 l       .debug_str	00000000 
00015d00 l       .debug_str	00000000 
00040eb6 l       .debug_str	00000000 
00040f26 l       .debug_str	00000000 
00040f4b l       .debug_str	00000000 
00040fba l       .debug_str	00000000 
00040fe0 l       .debug_str	00000000 
0004104f l       .debug_str	00000000 
00041079 l       .debug_str	00000000 
000410b0 l       .debug_str	00000000 
000410bb l       .debug_str	00000000 
000410f7 l       .debug_str	00000000 
00041116 l       .debug_str	00000000 
00041150 l       .debug_str	00000000 
0004118b l       .debug_str	00000000 
000411c7 l       .debug_str	00000000 
0000e68b l       .debug_str	00000000 
000411e1 l       .debug_str	00000000 
0004121d l       .debug_str	00000000 
0004122a l       .debug_str	00000000 
00059f16 l       .debug_str	00000000 
00041268 l       .debug_str	00000000 
000412ae l       .debug_str	00000000 
00041336 l       .debug_str	00000000 
0004134f l       .debug_str	00000000 
000413a9 l       .debug_str	00000000 
000413ef l       .debug_str	00000000 
00041407 l       .debug_str	00000000 
00041487 l       .debug_str	00000000 
0004195b l       .debug_str	00000000 
00041497 l       .debug_str	00000000 
000414d6 l       .debug_str	00000000 
00041516 l       .debug_str	00000000 
000415a0 l       .debug_str	00000000 
000415b7 l       .debug_str	00000000 
00041608 l       .debug_str	00000000 
00041616 l       .debug_str	00000000 
0004161b l       .debug_str	00000000 
00041676 l       .debug_str	00000000 
00042030 l       .debug_str	00000000 
000416cd l       .debug_str	00000000 
00041700 l       .debug_str	00000000 
00041747 l       .debug_str	00000000 
00041781 l       .debug_str	00000000 
000417b0 l       .debug_str	00000000 
0004182e l       .debug_str	00000000 
000418b2 l       .debug_str	00000000 
0004193f l       .debug_str	00000000 
00041954 l       .debug_str	00000000 
00041964 l       .debug_str	00000000 
000419b0 l       .debug_str	00000000 
000419f5 l       .debug_str	00000000 
00041a8c l       .debug_str	00000000 
00041aa8 l       .debug_str	00000000 
00041aef l       .debug_str	00000000 
00041b1d l       .debug_str	00000000 
00041b56 l       .debug_str	00000000 
00041b78 l       .debug_str	00000000 
00019815 l       .debug_str	00000000 
00041bf6 l       .debug_str	00000000 
00041c76 l       .debug_str	00000000 
00041cb5 l       .debug_str	00000000 
00041d3f l       .debug_str	00000000 
00041d8b l       .debug_str	00000000 
00041da9 l       .debug_str	00000000 
00041db4 l       .debug_str	00000000 
00041e16 l       .debug_str	00000000 
00041e6d l       .debug_str	00000000 
00041efa l       .debug_str	00000000 
00041f46 l       .debug_str	00000000 
00041fdd l       .debug_str	00000000 
00042027 l       .debug_str	00000000 
00042043 l       .debug_str	00000000 
0004209d l       .debug_str	00000000 
000420a6 l       .debug_str	00000000 
00042105 l       .debug_str	00000000 
0004215c l       .debug_str	00000000 
000421b5 l       .debug_str	00000000 
000421ca l       .debug_str	00000000 
00042217 l       .debug_str	00000000 
00042262 l       .debug_str	00000000 
00042275 l       .debug_str	00000000 
0001e308 l       .debug_str	00000000 
000197c7 l       .debug_str	00000000 
000422c0 l       .debug_str	00000000 
000422d5 l       .debug_str	00000000 
000422e1 l       .debug_str	00000000 
00042326 l       .debug_str	00000000 
0004237f l       .debug_str	00000000 
00042394 l       .debug_str	00000000 
000423e1 l       .debug_str	00000000 
0004242c l       .debug_str	00000000 
0004243f l       .debug_str	00000000 
0004248a l       .debug_str	00000000 
0004249d l       .debug_str	00000000 
00042501 l       .debug_str	00000000 
0004253a l       .debug_str	00000000 
00042566 l       .debug_str	00000000 
0005ff8b l       .debug_str	00000000 
0005b350 l       .debug_str	00000000 
000425e5 l       .debug_str	00000000 
000425eb l       .debug_str	00000000 
000425f4 l       .debug_str	00000000 
0004262c l       .debug_str	00000000 
00042649 l       .debug_str	00000000 
00042685 l       .debug_str	00000000 
000426a2 l       .debug_str	00000000 
000426fe l       .debug_str	00000000 
00042736 l       .debug_str	00000000 
00042792 l       .debug_str	00000000 
00025418 l       .debug_str	00000000 
000427ca l       .debug_str	00000000 
00042808 l       .debug_str	00000000 
00042824 l       .debug_str	00000000 
0004287a l       .debug_str	00000000 
000428e1 l       .debug_str	00000000 
00042919 l       .debug_str	00000000 
00042925 l       .debug_str	00000000 
0004298c l       .debug_str	00000000 
000429cb l       .debug_str	00000000 
000429dc l       .debug_str	00000000 
00042a15 l       .debug_str	00000000 
000509bd l       .debug_str	00000000 
00042a30 l       .debug_str	00000000 
00042a6c l       .debug_str	00000000 
00042a65 l       .debug_str	00000000 
00042a75 l       .debug_str	00000000 
00042a87 l       .debug_str	00000000 
00042ad2 l       .debug_str	00000000 
00042aea l       .debug_str	00000000 
00042af4 l       .debug_str	00000000 
00042b0b l       .debug_str	00000000 
00042b1a l       .debug_str	00000000 
00042b5c l       .debug_str	00000000 
00042b75 l       .debug_str	00000000 
00042be9 l       .debug_str	00000000 
00042bf8 l       .debug_str	00000000 
00042c31 l       .debug_str	00000000 
00042c47 l       .debug_str	00000000 
00042c87 l       .debug_str	00000000 
00042c92 l       .debug_str	00000000 
00042d11 l       .debug_str	00000000 
0005aac9 l       .debug_str	00000000 
00042d30 l       .debug_str	00000000 
00042d45 l       .debug_str	00000000 
00042d4f l       .debug_str	00000000 
00019e42 l       .debug_str	00000000 
00042d54 l       .debug_str	00000000 
00042d85 l       .debug_str	00000000 
00042d98 l       .debug_str	00000000 
00042da2 l       .debug_str	00000000 
00042dbf l       .debug_str	00000000 
00042dfa l       .debug_str	00000000 
00042e2f l       .debug_str	00000000 
00042e60 l       .debug_str	00000000 
00042e74 l       .debug_str	00000000 
00042e7f l       .debug_str	00000000 
00042e9d l       .debug_str	00000000 
00042ed8 l       .debug_str	00000000 
00042f0e l       .debug_str	00000000 
00042f3f l       .debug_str	00000000 
00042f53 l       .debug_str	00000000 
00042f5e l       .debug_str	00000000 
00042f7c l       .debug_str	00000000 
00042fb7 l       .debug_str	00000000 
00042fed l       .debug_str	00000000 
0004301e l       .debug_str	00000000 
00043032 l       .debug_str	00000000 
0004303d l       .debug_str	00000000 
0004305b l       .debug_str	00000000 
00043096 l       .debug_str	00000000 
000430cc l       .debug_str	00000000 
000430fd l       .debug_str	00000000 
0004794a l       .debug_str	00000000 
00043112 l       .debug_str	00000000 
0004311e l       .debug_str	00000000 
0004313d l       .debug_str	00000000 
00043178 l       .debug_str	00000000 
000431af l       .debug_str	00000000 
000431e0 l       .debug_str	00000000 
000431f3 l       .debug_str	00000000 
000431fd l       .debug_str	00000000 
0004321a l       .debug_str	00000000 
00043255 l       .debug_str	00000000 
0004328a l       .debug_str	00000000 
000432bb l       .debug_str	00000000 
000432cf l       .debug_str	00000000 
000432da l       .debug_str	00000000 
000432f8 l       .debug_str	00000000 
00043333 l       .debug_str	00000000 
00043369 l       .debug_str	00000000 
0004339a l       .debug_str	00000000 
000433ae l       .debug_str	00000000 
0004341d l       .debug_str	00000000 
00043458 l       .debug_str	00000000 
000434a1 l       .debug_str	00000000 
000434e6 l       .debug_str	00000000 
00043542 l       .debug_str	00000000 
0004358b l       .debug_str	00000000 
000435d0 l       .debug_str	00000000 
0004362c l       .debug_str	00000000 
00043675 l       .debug_str	00000000 
000436ba l       .debug_str	00000000 
00043716 l       .debug_str	00000000 
00043721 l       .debug_str	00000000 
0004373f l       .debug_str	00000000 
0004377a l       .debug_str	00000000 
000437b0 l       .debug_str	00000000 
000437e1 l       .debug_str	00000000 
000437f5 l       .debug_str	00000000 
00043800 l       .debug_str	00000000 
0004381e l       .debug_str	00000000 
00043859 l       .debug_str	00000000 
0004388f l       .debug_str	00000000 
000438fe l       .debug_str	00000000 
00043939 l       .debug_str	00000000 
0004396a l       .debug_str	00000000 
0004397f l       .debug_str	00000000 
00043984 l       .debug_str	00000000 
00043990 l       .debug_str	00000000 
000439af l       .debug_str	00000000 
000439ea l       .debug_str	00000000 
00043a21 l       .debug_str	00000000 
00043a90 l       .debug_str	00000000 
00043acc l       .debug_str	00000000 
0000a989 l       .debug_str	00000000 
00043b15 l       .debug_str	00000000 
00043b20 l       .debug_str	00000000 
00043b67 l       .debug_str	00000000 
00043b71 l       .debug_str	00000000 
00043bf3 l       .debug_str	00000000 
00043c10 l       .debug_str	00000000 
00016caf l       .debug_str	00000000 
00043c6b l       .debug_str	00000000 
00043cc5 l       .debug_str	00000000 
00043cd2 l       .debug_str	00000000 
00043d44 l       .debug_str	00000000 
00043da8 l       .debug_str	00000000 
00043db3 l       .debug_str	00000000 
00043e2c l       .debug_str	00000000 
00043e38 l       .debug_str	00000000 
00043eb4 l       .debug_str	00000000 
00043eba l       .debug_str	00000000 
00043ec1 l       .debug_str	00000000 
00043efd l       .debug_str	00000000 
000141a0 l       .debug_str	00000000 
00043f46 l       .debug_str	00000000 
00043f8a l       .debug_str	00000000 
00043fd5 l       .debug_str	00000000 
00044014 l       .debug_str	00000000 
00044039 l       .debug_str	00000000 
0004408f l       .debug_str	00000000 
000440fd l       .debug_str	00000000 
0004417d l       .debug_str	00000000 
000441ea l       .debug_str	00000000 
00044275 l       .debug_str	00000000 
000442e9 l       .debug_str	00000000 
00044329 l       .debug_str	00000000 
000443aa l       .debug_str	00000000 
000443eb l       .debug_str	00000000 
0004444f l       .debug_str	00000000 
000444fe l       .debug_str	00000000 
00044548 l       .debug_str	00000000 
00044595 l       .debug_str	00000000 
000445db l       .debug_str	00000000 
000445e5 l       .debug_str	00000000 
0004461e l       .debug_str	00000000 
0004464d l       .debug_str	00000000 
000446ae l       .debug_str	00000000 
000446dd l       .debug_str	00000000 
0004471a l       .debug_str	00000000 
000447a9 l       .debug_str	00000000 
000447de l       .debug_str	00000000 
00044864 l       .debug_str	00000000 
000448ea l       .debug_str	00000000 
0004493e l       .debug_str	00000000 
000449c7 l       .debug_str	00000000 
000196de l       .debug_str	00000000 
00044a15 l       .debug_str	00000000 
00044aa3 l       .debug_str	00000000 
00044af7 l       .debug_str	00000000 
00044b36 l       .debug_str	00000000 
00044b81 l       .debug_str	00000000 
00044c03 l       .debug_str	00000000 
00044c1f l       .debug_str	00000000 
00044c78 l       .debug_str	00000000 
00044cd1 l       .debug_str	00000000 
00044d0e l       .debug_str	00000000 
00044d4f l       .debug_str	00000000 
00044db0 l       .debug_str	00000000 
00044e21 l       .debug_str	00000000 
00044e51 l       .debug_str	00000000 
00044e97 l       .debug_str	00000000 
00044f09 l       .debug_str	00000000 
00044f9d l       .debug_str	00000000 
00044fc1 l       .debug_str	00000000 
0004503d l       .debug_str	00000000 
00045077 l       .debug_str	00000000 
000450b9 l       .debug_str	00000000 
00045169 l       .debug_str	00000000 
000451a8 l       .debug_str	00000000 
0004524b l       .debug_str	00000000 
000452a7 l       .debug_str	00000000 
00045304 l       .debug_str	00000000 
000453af l       .debug_str	00000000 
000453e8 l       .debug_str	00000000 
00045464 l       .debug_str	00000000 
0004549c l       .debug_str	00000000 
000454a8 l       .debug_str	00000000 
000454e5 l       .debug_str	00000000 
0004553d l       .debug_str	00000000 
0004555d l       .debug_str	00000000 
000455b6 l       .debug_str	00000000 
0004560f l       .debug_str	00000000 
00045668 l       .debug_str	00000000 
000456c2 l       .debug_str	00000000 
000456f8 l       .debug_str	00000000 
00045708 l       .debug_str	00000000 
00045717 l       .debug_str	00000000 
00045720 l       .debug_str	00000000 
00045757 l       .debug_str	00000000 
00045793 l       .debug_str	00000000 
000457a3 l       .debug_str	00000000 
000457ff l       .debug_str	00000000 
00045861 l       .debug_str	00000000 
00038a70 l       .debug_str	00000000 
000458ab l       .debug_str	00000000 
000458e6 l       .debug_str	00000000 
0004590b l       .debug_str	00000000 
0004596a l       .debug_str	00000000 
000459b4 l       .debug_str	00000000 
000459ef l       .debug_str	00000000 
00045a14 l       .debug_str	00000000 
00045a73 l       .debug_str	00000000 
00045adc l       .debug_str	00000000 
00045ae5 l       .debug_str	00000000 
00045b1c l       .debug_str	00000000 
00045b78 l       .debug_str	00000000 
00045bda l       .debug_str	00000000 
00045c39 l       .debug_str	00000000 
00045c98 l       .debug_str	00000000 
00045cce l       .debug_str	00000000 
00045cdf l       .debug_str	00000000 
00045cef l       .debug_str	00000000 
00045cf9 l       .debug_str	00000000 
00045d31 l       .debug_str	00000000 
00045d8e l       .debug_str	00000000 
00045df1 l       .debug_str	00000000 
00045e3c l       .debug_str	00000000 
00045e77 l       .debug_str	00000000 
00045e9d l       .debug_str	00000000 
00045efd l       .debug_str	00000000 
00045f48 l       .debug_str	00000000 
00045f83 l       .debug_str	00000000 
00045fa9 l       .debug_str	00000000 
00046009 l       .debug_str	00000000 
0004603f l       .debug_str	00000000 
00046050 l       .debug_str	00000000 
00046060 l       .debug_str	00000000 
0004606a l       .debug_str	00000000 
000460a2 l       .debug_str	00000000 
000460ff l       .debug_str	00000000 
00046162 l       .debug_str	00000000 
000461c2 l       .debug_str	00000000 
00046222 l       .debug_str	00000000 
00046258 l       .debug_str	00000000 
00046269 l       .debug_str	00000000 
00046279 l       .debug_str	00000000 
00046283 l       .debug_str	00000000 
000462bb l       .debug_str	00000000 
00046318 l       .debug_str	00000000 
0004637b l       .debug_str	00000000 
000463c6 l       .debug_str	00000000 
00046401 l       .debug_str	00000000 
00046427 l       .debug_str	00000000 
00046487 l       .debug_str	00000000 
000464d2 l       .debug_str	00000000 
0004650d l       .debug_str	00000000 
00046533 l       .debug_str	00000000 
00046593 l       .debug_str	00000000 
000465c9 l       .debug_str	00000000 
000465da l       .debug_str	00000000 
000465ea l       .debug_str	00000000 
000465f4 l       .debug_str	00000000 
0004662c l       .debug_str	00000000 
00046689 l       .debug_str	00000000 
000466ec l       .debug_str	00000000 
0004674c l       .debug_str	00000000 
000467ac l       .debug_str	00000000 
000467e2 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
000467f5 l       .debug_str	00000000 
00046807 l       .debug_str	00000000 
00046813 l       .debug_str	00000000 
0004684e l       .debug_str	00000000 
000468ad l       .debug_str	00000000 
00046912 l       .debug_str	00000000 
00046974 l       .debug_str	00000000 
000469af l       .debug_str	00000000 
000469d7 l       .debug_str	00000000 
00046a39 l       .debug_str	00000000 
0001cac1 l       .debug_str	00000000 
0001f4dd l       .debug_str	00000000 
00012c71 l       .debug_str	00000000 
00046a6f l       .debug_str	00000000 
00046aaa l       .debug_str	00000000 
00046aea l       .debug_str	00000000 
00046b07 l       .debug_str	00000000 
00046b4b l       .debug_str	00000000 
00046b6c l       .debug_str	00000000 
00046bac l       .debug_str	00000000 
00046bc9 l       .debug_str	00000000 
00046c0d l       .debug_str	00000000 
00046c2e l       .debug_str	00000000 
00046c90 l       .debug_str	00000000 
00046cf7 l       .debug_str	00000000 
00046d32 l       .debug_str	00000000 
00046d55 l       .debug_str	00000000 
00046dbb l       .debug_str	00000000 
00046df6 l       .debug_str	00000000 
00046e18 l       .debug_str	00000000 
00046e53 l       .debug_str	00000000 
00046e77 l       .debug_str	00000000 
00046eb2 l       .debug_str	00000000 
00046ed5 l       .debug_str	00000000 
00046f10 l       .debug_str	00000000 
00046f34 l       .debug_str	00000000 
00046f6f l       .debug_str	00000000 
00046f92 l       .debug_str	00000000 
00046fcd l       .debug_str	00000000 
00046ff1 l       .debug_str	00000000 
0004703c l       .debug_str	00000000 
0004709e l       .debug_str	00000000 
000470d9 l       .debug_str	00000000 
000470fc l       .debug_str	00000000 
00047147 l       .debug_str	00000000 
00047182 l       .debug_str	00000000 
000471a8 l       .debug_str	00000000 
000471e3 l       .debug_str	00000000 
00047209 l       .debug_str	00000000 
0004725a l       .debug_str	00000000 
000472a8 l       .debug_str	00000000 
000472f3 l       .debug_str	00000000 
00047326 l       .debug_str	00000000 
00047361 l       .debug_str	00000000 
00047386 l       .debug_str	00000000 
00047412 l       .debug_str	00000000 
00047446 l       .debug_str	00000000 
000474c2 l       .debug_str	00000000 
00047507 l       .debug_str	00000000 
00047553 l       .debug_str	00000000 
000475b6 l       .debug_str	00000000 
000475f1 l       .debug_str	00000000 
00047615 l       .debug_str	00000000 
00047650 l       .debug_str	00000000 
00047677 l       .debug_str	00000000 
000476c3 l       .debug_str	00000000 
000476fe l       .debug_str	00000000 
00047725 l       .debug_str	00000000 
00047770 l       .debug_str	00000000 
000477bc l       .debug_str	00000000 
00047808 l       .debug_str	00000000 
00047839 l       .debug_str	00000000 
00047841 l       .debug_str	00000000 
00010725 l       .debug_str	00000000 
0004788d l       .debug_str	00000000 
000478c2 l       .debug_str	00000000 
000478f0 l       .debug_str	00000000 
000478f9 l       .debug_str	00000000 
00047947 l       .debug_str	00000000 
0004794f l       .debug_str	00000000 
000479b4 l       .debug_str	00000000 
00047a07 l       .debug_str	00000000 
00047a67 l       .debug_str	00000000 
00047a86 l       .debug_str	00000000 
00047ae9 l       .debug_str	00000000 
00047b0b l       .debug_str	00000000 
00047b56 l       .debug_str	00000000 
00047bbb l       .debug_str	00000000 
00047bdd l       .debug_str	00000000 
00047c46 l       .debug_str	00000000 
00047c83 l       .debug_str	00000000 
00047cec l       .debug_str	00000000 
00047d7c l       .debug_str	00000000 
0000b853 l       .debug_str	00000000 
00047ddc l       .debug_str	00000000 
00047e3f l       .debug_str	00000000 
00047ea8 l       .debug_str	00000000 
00047edb l       .debug_str	00000000 
00047f23 l       .debug_str	00000000 
00047f9d l       .debug_str	00000000 
00047fee l       .debug_str	00000000 
00048045 l       .debug_str	00000000 
0001ac63 l       .debug_str	00000000 
0004808d l       .debug_str	00000000 
000480eb l       .debug_str	00000000 
00048108 l       .debug_str	00000000 
00048174 l       .debug_str	00000000 
000481b9 l       .debug_str	00000000 
00048207 l       .debug_str	00000000 
0004824f l       .debug_str	00000000 
00048259 l       .debug_str	00000000 
000482c7 l       .debug_str	00000000 
00048303 l       .debug_str	00000000 
00048326 l       .debug_str	00000000 
00048396 l       .debug_str	00000000 
000483de l       .debug_str	00000000 
000483e7 l       .debug_str	00000000 
00048444 l       .debug_str	00000000 
000484a7 l       .debug_str	00000000 
00048507 l       .debug_str	00000000 
00048567 l       .debug_str	00000000 
000485c3 l       .debug_str	00000000 
00048622 l       .debug_str	00000000 
00048682 l       .debug_str	00000000 
0004869d l       .debug_str	00000000 
0001abc1 l       .debug_str	00000000 
000486f1 l       .debug_str	00000000 
0004876f l       .debug_str	00000000 
00048799 l       .debug_str	00000000 
000487fb l       .debug_str	00000000 
0004885c l       .debug_str	00000000 
000488b6 l       .debug_str	00000000 
0004891b l       .debug_str	00000000 
0004896d l       .debug_str	00000000 
000489b5 l       .debug_str	00000000 
000489d0 l       .debug_str	00000000 
00048a4a l       .debug_str	00000000 
00048a97 l       .debug_str	00000000 
00048b11 l       .debug_str	00000000 
00048b5e l       .debug_str	00000000 
00048bb2 l       .debug_str	00000000 
00048c04 l       .debug_str	00000000 
00048c6c l       .debug_str	00000000 
00048ccc l       .debug_str	00000000 
00048d26 l       .debug_str	00000000 
00048d85 l       .debug_str	00000000 
00048ddf l       .debug_str	00000000 
00048e3c l       .debug_str	00000000 
00022b94 l       .debug_str	00000000 
00048e7a l       .debug_str	00000000 
00023b77 l       .debug_str	00000000 
00048eb5 l       .debug_str	00000000 
00048f27 l       .debug_str	00000000 
00048ffa l       .debug_str	00000000 
0001ad81 l       .debug_str	00000000 
00049042 l       .debug_str	00000000 
00049090 l       .debug_str	00000000 
0004909a l       .debug_str	00000000 
000490e2 l       .debug_str	00000000 
000490ee l       .debug_str	00000000 
00049162 l       .debug_str	00000000 
0004916d l       .debug_str	00000000 
000491a9 l       .debug_str	00000000 
000491d0 l       .debug_str	00000000 
00049221 l       .debug_str	00000000 
0004922e l       .debug_str	00000000 
0004923c l       .debug_str	00000000 
0004924f l       .debug_str	00000000 
0004925a l       .debug_str	00000000 
0004929c l       .debug_str	00000000 
000492b1 l       .debug_str	00000000 
0004931b l       .debug_str	00000000 
00049378 l       .debug_str	00000000 
000493d8 l       .debug_str	00000000 
00049438 l       .debug_str	00000000 
000494aa l       .debug_str	00000000 
000494f7 l       .debug_str	00000000 
00049556 l       .debug_str	00000000 
000495b0 l       .debug_str	00000000 
00049623 l       .debug_str	00000000 
00049630 l       .debug_str	00000000 
00049690 l       .debug_str	00000000 
000496af l       .debug_str	00000000 
00049717 l       .debug_str	00000000 
00049732 l       .debug_str	00000000 
0004978a l       .debug_str	00000000 
000497d4 l       .debug_str	00000000 
00049838 l       .debug_str	00000000 
00049857 l       .debug_str	00000000 
000498b9 l       .debug_str	00000000 
0004991f l       .debug_str	00000000 
0004999f l       .debug_str	00000000 
000499ee l       .debug_str	00000000 
00049a64 l       .debug_str	00000000 
00049ada l       .debug_str	00000000 
00049baf l       .debug_str	00000000 
00049c0c l       .debug_str	00000000 
00049c6a l       .debug_str	00000000 
00049cea l       .debug_str	00000000 
00049d59 l       .debug_str	00000000 
00049dd7 l       .debug_str	00000000 
00049e2a l       .debug_str	00000000 
00049e8f l       .debug_str	00000000 
00049eef l       .debug_str	00000000 
00049f5d l       .debug_str	00000000 
00049ff5 l       .debug_str	00000000 
0004a084 l       .debug_str	00000000 
0004a112 l       .debug_str	00000000 
0004a1a0 l       .debug_str	00000000 
0004a2b0 l       .debug_str	00000000 
0004a324 l       .debug_str	00000000 
0004a366 l       .debug_str	00000000 
0004a3af l       .debug_str	00000000 
0004a409 l       .debug_str	00000000 
0004a482 l       .debug_str	00000000 
0004a48f l       .debug_str	00000000 
0004a494 l       .debug_str	00000000 
0004a500 l       .debug_str	00000000 
0004a547 l       .debug_str	00000000 
0004a5d1 l       .debug_str	00000000 
0004a5f0 l       .debug_str	00000000 
0004a67a l       .debug_str	00000000 
0004a69e l       .debug_str	00000000 
0004a6e2 l       .debug_str	00000000 
0004a746 l       .debug_str	00000000 
0004a78a l       .debug_str	00000000 
0004a7fc l       .debug_str	00000000 
0004a8ba l       .debug_str	00000000 
0004a91c l       .debug_str	00000000 
0004a9b4 l       .debug_str	00000000 
0004aa63 l       .debug_str	00000000 
0004aaf9 l       .debug_str	00000000 
0004ab8c l       .debug_str	00000000 
0004abd0 l       .debug_str	00000000 
0004ac23 l       .debug_str	00000000 
0004aca7 l       .debug_str	00000000 
0004ad35 l       .debug_str	00000000 
0004ad89 l       .debug_str	00000000 
0004ad9a l       .debug_str	00000000 
0004ae1f l       .debug_str	00000000 
0004aeab l       .debug_str	00000000 
0004aeb4 l       .debug_str	00000000 
0004aec1 l       .debug_str	00000000 
0004af18 l       .debug_str	00000000 
0004af9d l       .debug_str	00000000 
0004afef l       .debug_str	00000000 
0004affe l       .debug_str	00000000 
0004b045 l       .debug_str	00000000 
0004b0a9 l       .debug_str	00000000 
0004b0ca l       .debug_str	00000000 
0004b14a l       .debug_str	00000000 
0004b1b5 l       .debug_str	00000000 
0004b233 l       .debug_str	00000000 
0004b282 l       .debug_str	00000000 
0004b2e1 l       .debug_str	00000000 
0004b379 l       .debug_str	00000000 
0004b41f l       .debug_str	00000000 
0004b4b5 l       .debug_str	00000000 
0004b53f l       .debug_str	00000000 
0004b5b5 l       .debug_str	00000000 
0004b5fe l       .debug_str	00000000 
0004b65a l       .debug_str	00000000 
0004b6d5 l       .debug_str	00000000 
0004b741 l       .debug_str	00000000 
0004b7cb l       .debug_str	00000000 
0004b80f l       .debug_str	00000000 
0004b870 l       .debug_str	00000000 
0004b8b4 l       .debug_str	00000000 
0004b938 l       .debug_str	00000000 
0004b9c2 l       .debug_str	00000000 
0004ba14 l       .debug_str	00000000 
0004ba92 l       .debug_str	00000000 
0004bb17 l       .debug_str	00000000 
0004bb6e l       .debug_str	00000000 
0004bbef l       .debug_str	00000000 
0004bcad l       .debug_str	00000000 
0004bd0c l       .debug_str	00000000 
0004bd6f l       .debug_str	00000000 
0004bd94 l       .debug_str	00000000 
0004bdf8 l       .debug_str	00000000 
0004be19 l       .debug_str	00000000 
0004be99 l       .debug_str	00000000 
0004bf04 l       .debug_str	00000000 
0004bf82 l       .debug_str	00000000 
0004bfd1 l       .debug_str	00000000 
0004c030 l       .debug_str	00000000 
0004c0c8 l       .debug_str	00000000 
0004c16e l       .debug_str	00000000 
0004c204 l       .debug_str	00000000 
0004c28e l       .debug_str	00000000 
0004c304 l       .debug_str	00000000 
0004c34d l       .debug_str	00000000 
0004c3a9 l       .debug_str	00000000 
0004c424 l       .debug_str	00000000 
0004c490 l       .debug_str	00000000 
0004c51a l       .debug_str	00000000 
0004c55e l       .debug_str	00000000 
0004c5bf l       .debug_str	00000000 
0004c603 l       .debug_str	00000000 
0004c687 l       .debug_str	00000000 
0004c711 l       .debug_str	00000000 
0004c78f l       .debug_str	00000000 
0004c814 l       .debug_str	00000000 
0004c86b l       .debug_str	00000000 
0004c8ec l       .debug_str	00000000 
0004c9aa l       .debug_str	00000000 
0004ca09 l       .debug_str	00000000 
0004ca3c l       .debug_str	00000000 
0004ca6f l       .debug_str	00000000 
0004caa2 l       .debug_str	00000000 
0004cad5 l       .debug_str	00000000 
0004cb08 l       .debug_str	00000000 
0004cb3b l       .debug_str	00000000 
0004cb6e l       .debug_str	00000000 
0004cbc2 l       .debug_str	00000000 
0004cbf0 l       .debug_str	00000000 
0004cc44 l       .debug_str	00000000 
0005f621 l       .debug_str	00000000 
00010e89 l       .debug_str	00000000 
0004cc57 l       .debug_str	00000000 
0004cc5b l       .debug_str	00000000 
0004cc5f l       .debug_str	00000000 
0004cc63 l       .debug_str	00000000 
0004cc6a l       .debug_str	00000000 
0004cc6f l       .debug_str	00000000 
0004cc9f l       .debug_str	00000000 
0004ccf1 l       .debug_str	00000000 
0004cd32 l       .debug_str	00000000 
0004cd3f l       .debug_str	00000000 
0004cd7e l       .debug_str	00000000 
0004cd89 l       .debug_str	00000000 
0004cdc5 l       .debug_str	00000000 
0004cdd3 l       .debug_str	00000000 
0004ce07 l       .debug_str	00000000 
0004ce42 l       .debug_str	00000000 
0004ce80 l       .debug_str	00000000 
0004ce8e l       .debug_str	00000000 
0004cec7 l       .debug_str	00000000 
0004ced1 l       .debug_str	00000000 
0004cf0d l       .debug_str	00000000 
0004cf69 l       .debug_str	00000000 
0004cf70 l       .debug_str	00000000 
0004cfce l       .debug_str	00000000 
0004cfd7 l       .debug_str	00000000 
0004d03e l       .debug_str	00000000 
0004d04f l       .debug_str	00000000 
0004d0ac l       .debug_str	00000000 
0004d10b l       .debug_str	00000000 
0004d167 l       .debug_str	00000000 
0004d1c5 l       .debug_str	00000000 
0004d22c l       .debug_str	00000000 
0004d289 l       .debug_str	00000000 
0004d2e8 l       .debug_str	00000000 
0004d321 l       .debug_str	00000000 
0004d32b l       .debug_str	00000000 
0004d393 l       .debug_str	00000000 
0004d3c6 l       .debug_str	00000000 
0004d3d0 l       .debug_str	00000000 
0004d406 l       .debug_str	00000000 
0004d412 l       .debug_str	00000000 
0004d449 l       .debug_str	00000000 
0004d456 l       .debug_str	00000000 
0004d49a l       .debug_str	00000000 
0004d4b4 l       .debug_str	00000000 
0004d525 l       .debug_str	00000000 
0004d538 l       .debug_str	00000000 
0004d5a9 l       .debug_str	00000000 
0004d5ec l       .debug_str	00000000 
0004d5f6 l       .debug_str	00000000 
0004d640 l       .debug_str	00000000 
0004d687 l       .debug_str	00000000 
0004d6d4 l       .debug_str	00000000 
0004d71e l       .debug_str	00000000 
0004d750 l       .debug_str	00000000 
0004d759 l       .debug_str	00000000 
0004d78d l       .debug_str	00000000 
0004d7c6 l       .debug_str	00000000 
0004d802 l       .debug_str	00000000 
0004d814 l       .debug_str	00000000 
0004d855 l       .debug_str	00000000 
0004d8b4 l       .debug_str	00000000 
0004d8e5 l       .debug_str	00000000 
0004d8fb l       .debug_str	00000000 
0004d930 l       .debug_str	00000000 
0004d98d l       .debug_str	00000000 
0004d9f1 l       .debug_str	00000000 
0004da50 l       .debug_str	00000000 
0004dab0 l       .debug_str	00000000 
0004db0e l       .debug_str	00000000 
0001fa4d l       .debug_str	00000000 
0004db73 l       .debug_str	00000000 
0004dbb9 l       .debug_str	00000000 
0004dbf9 l       .debug_str	00000000 
0004dc81 l       .debug_str	00000000 
0005c057 l       .debug_str	00000000 
0004dd08 l       .debug_str	00000000 
0004dd3b l       .debug_str	00000000 
0004ddaf l       .debug_str	00000000 
0004de28 l       .debug_str	00000000 
0004de9c l       .debug_str	00000000 
0004defb l       .debug_str	00000000 
0004df58 l       .debug_str	00000000 
0004dfb2 l       .debug_str	00000000 
0004e00e l       .debug_str	00000000 
0004e06b l       .debug_str	00000000 
0004e0ca l       .debug_str	00000000 
0004e132 l       .debug_str	00000000 
0004e19c l       .debug_str	00000000 
0004e205 l       .debug_str	00000000 
0004e263 l       .debug_str	00000000 
0004e2d5 l       .debug_str	00000000 
0004e2d9 l       .debug_str	00000000 
0004e34c l       .debug_str	00000000 
0004e3aa l       .debug_str	00000000 
0004e406 l       .debug_str	00000000 
0004e477 l       .debug_str	00000000 
0004e4ed l       .debug_str	00000000 
0004e524 l       .debug_str	00000000 
0004e580 l       .debug_str	00000000 
0004e5d4 l       .debug_str	00000000 
0004e632 l       .debug_str	00000000 
0004e69e l       .debug_str	00000000 
0004e6f3 l       .debug_str	00000000 
0004e726 l       .debug_str	00000000 
0004e734 l       .debug_str	00000000 
0004e76c l       .debug_str	00000000 
0004e77f l       .debug_str	00000000 
0004e7b4 l       .debug_str	00000000 
0004e7ea l       .debug_str	00000000 
0004e845 l       .debug_str	00000000 
0004e878 l       .debug_str	00000000 
0004e87f l       .debug_str	00000000 
0004e8c1 l       .debug_str	00000000 
0004e8f2 l       .debug_str	00000000 
0004e923 l       .debug_str	00000000 
0004e956 l       .debug_str	00000000 
0004e95d l       .debug_str	00000000 
0004e98a l       .debug_str	00000000 
0004e9c5 l       .debug_str	00000000 
0004e9d8 l       .debug_str	00000000 
0004ea09 l       .debug_str	00000000 
0004ea13 l       .debug_str	00000000 
0004ea74 l       .debug_str	00000000 
0004eadc l       .debug_str	00000000 
0004eb19 l       .debug_str	00000000 
0004eb67 l       .debug_str	00000000 
0004eba3 l       .debug_str	00000000 
0004ebdf l       .debug_str	00000000 
0004ec18 l       .debug_str	00000000 
0004ec52 l       .debug_str	00000000 
0004ec8b l       .debug_str	00000000 
0004ecc2 l       .debug_str	00000000 
0004ecfb l       .debug_str	00000000 
0004ed35 l       .debug_str	00000000 
0004ed7b l       .debug_str	00000000 
0004ed9e l       .debug_str	00000000 
0004ede4 l       .debug_str	00000000 
0004ee07 l       .debug_str	00000000 
0004ee50 l       .debug_str	00000000 
0004ee76 l       .debug_str	00000000 
0004eebf l       .debug_str	00000000 
0004eee5 l       .debug_str	00000000 
0004ef2f l       .debug_str	00000000 
0004ef56 l       .debug_str	00000000 
0004efa0 l       .debug_str	00000000 
0004efc7 l       .debug_str	00000000 
0004f014 l       .debug_str	00000000 
0004f03e l       .debug_str	00000000 
0004f08b l       .debug_str	00000000 
0004f0b5 l       .debug_str	00000000 
0004f0e8 l       .debug_str	00000000 
0004f114 l       .debug_str	00000000 
0004f16a l       .debug_str	00000000 
0004f195 l       .debug_str	00000000 
0004f1ed l       .debug_str	00000000 
0004f243 l       .debug_str	00000000 
0004f27c l       .debug_str	00000000 
0004f287 l       .debug_str	00000000 
0001e542 l       .debug_str	00000000 
0004f2c0 l       .debug_str	00000000 
0004f2e7 l       .debug_str	00000000 
0004f320 l       .debug_str	00000000 
0004f367 l       .debug_str	00000000 
0004f374 l       .debug_str	00000000 
0004f58e l       .debug_str	00000000 
0004f3a3 l       .debug_str	00000000 
0004f3e3 l       .debug_str	00000000 
0004f3f7 l       .debug_str	00000000 
0004f439 l       .debug_str	00000000 
0004f46a l       .debug_str	00000000 
0004f49a l       .debug_str	00000000 
0004f4cb l       .debug_str	00000000 
0004f4fc l       .debug_str	00000000 
0004f533 l       .debug_str	00000000 
0004f53e l       .debug_str	00000000 
0004f57e l       .debug_str	00000000 
0004f592 l       .debug_str	00000000 
0004f5ce l       .debug_str	00000000 
0004f5de l       .debug_str	00000000 
0004f613 l       .debug_str	00000000 
0004f61d l       .debug_str	00000000 
0004f652 l       .debug_str	00000000 
0004f65c l       .debug_str	00000000 
0004f6b1 l       .debug_str	00000000 
0004f6f9 l       .debug_str	00000000 
0004f73f l       .debug_str	00000000 
0004f786 l       .debug_str	00000000 
0004f7cf l       .debug_str	00000000 
0004f821 l       .debug_str	00000000 
0004f873 l       .debug_str	00000000 
0004f911 l       .debug_str	00000000 
0004f943 l       .debug_str	00000000 
0004f97c l       .debug_str	00000000 
0004f991 l       .debug_str	00000000 
0004f9cc l       .debug_str	00000000 
0004f9e3 l       .debug_str	00000000 
0004fa21 l       .debug_str	00000000 
0004fa3b l       .debug_str	00000000 
0004fa9d l       .debug_str	00000000 
0004fac2 l       .debug_str	00000000 
0004fb1d l       .debug_str	00000000 
0004fb2c l       .debug_str	00000000 
0004fba1 l       .debug_str	00000000 
0004fbbe l       .debug_str	00000000 
0004fbf8 l       .debug_str	00000000 
0004fc35 l       .debug_str	00000000 
0004fc40 l       .debug_str	00000000 
0004fc78 l       .debug_str	00000000 
0004fc7f l       .debug_str	00000000 
0004fcfe l       .debug_str	00000000 
0004fd5e l       .debug_str	00000000 
0004fdbc l       .debug_str	00000000 
0004fe1a l       .debug_str	00000000 
0004fe52 l       .debug_str	00000000 
0004fe87 l       .debug_str	00000000 
0004feb2 l       .debug_str	00000000 
0004febc l       .debug_str	00000000 
0004feec l       .debug_str	00000000 
0004fefa l       .debug_str	00000000 
0004ff53 l       .debug_str	00000000 
0004ffa6 l       .debug_str	00000000 
00050022 l       .debug_str	00000000 
00050086 l       .debug_str	00000000 
000500ea l       .debug_str	00000000 
00050120 l       .debug_str	00000000 
00050134 l       .debug_str	00000000 
00050175 l       .debug_str	00000000 
0005018d l       .debug_str	00000000 
00050241 l       .debug_str	00000000 
00050274 l       .debug_str	00000000 
00050285 l       .debug_str	00000000 
000502cb l       .debug_str	00000000 
000502d8 l       .debug_str	00000000 
00050315 l       .debug_str	00000000 
00050359 l       .debug_str	00000000 
0005039a l       .debug_str	00000000 
000503dc l       .debug_str	00000000 
000503e6 l       .debug_str	00000000 
0005042a l       .debug_str	00000000 
00050435 l       .debug_str	00000000 
00050483 l       .debug_str	00000000 
000504d1 l       .debug_str	00000000 
00050517 l       .debug_str	00000000 
0005055f l       .debug_str	00000000 
000505a7 l       .debug_str	00000000 
00013624 l       .debug_str	00000000 
0005060e l       .debug_str	00000000 
00050667 l       .debug_str	00000000 
000506d1 l       .debug_str	00000000 
00016db6 l       .debug_str	00000000 
0005073b l       .debug_str	00000000 
000507b6 l       .debug_str	00000000 
0005082b l       .debug_str	00000000 
00050836 l       .debug_str	00000000 
000508ab l       .debug_str	00000000 
000508b6 l       .debug_str	00000000 
0005090d l       .debug_str	00000000 
00050971 l       .debug_str	00000000 
0005097d l       .debug_str	00000000 
000509ba l       .debug_str	00000000 
000509c7 l       .debug_str	00000000 
000509fb l       .debug_str	00000000 
00050a36 l       .debug_str	00000000 
00050a92 l       .debug_str	00000000 
00050aed l       .debug_str	00000000 
00050b47 l       .debug_str	00000000 
00037581 l       .debug_str	00000000 
00050b8d l       .debug_str	00000000 
00050bf3 l       .debug_str	00000000 
00050c2a l       .debug_str	00000000 
00050c32 l       .debug_str	00000000 
00050c6a l       .debug_str	00000000 
00050c73 l       .debug_str	00000000 
00050cab l       .debug_str	00000000 
00050cb4 l       .debug_str	00000000 
00050ceb l       .debug_str	00000000 
00050cf3 l       .debug_str	00000000 
00050d2b l       .debug_str	00000000 
00050d34 l       .debug_str	00000000 
00050d6c l       .debug_str	00000000 
00050d75 l       .debug_str	00000000 
00050dac l       .debug_str	00000000 
00050db4 l       .debug_str	00000000 
00050e2e l       .debug_str	00000000 
00050ea8 l       .debug_str	00000000 
00050f22 l       .debug_str	00000000 
00050f9e l       .debug_str	00000000 
0001a501 l       .debug_str	00000000 
00050ffc l       .debug_str	00000000 
0005105b l       .debug_str	00000000 
000510ba l       .debug_str	00000000 
00051119 l       .debug_str	00000000 
00051179 l       .debug_str	00000000 
000511d7 l       .debug_str	00000000 
00051236 l       .debug_str	00000000 
00051295 l       .debug_str	00000000 
000512f4 l       .debug_str	00000000 
00051354 l       .debug_str	00000000 
000513a9 l       .debug_str	00000000 
000513fe l       .debug_str	00000000 
00051458 l       .debug_str	00000000 
000514b2 l       .debug_str	00000000 
000514ec l       .debug_str	00000000 
000514f5 l       .debug_str	00000000 
0005152f l       .debug_str	00000000 
00051538 l       .debug_str	00000000 
00051575 l       .debug_str	00000000 
00038a6c l       .debug_str	00000000 
000515ae l       .debug_str	00000000 
0005160f l       .debug_str	00000000 
0005166d l       .debug_str	00000000 
000516ae l       .debug_str	00000000 
000516ec l       .debug_str	00000000 
00051725 l       .debug_str	00000000 
00051764 l       .debug_str	00000000 
000517a2 l       .debug_str	00000000 
000517e0 l       .debug_str	00000000 
00051821 l       .debug_str	00000000 
00051865 l       .debug_str	00000000 
000518a2 l       .debug_str	00000000 
00051908 l       .debug_str	00000000 
0005196f l       .debug_str	00000000 
000519d2 l       .debug_str	00000000 
00051a34 l       .debug_str	00000000 
00051a99 l       .debug_str	00000000 
00051b02 l       .debug_str	00000000 
00051b68 l       .debug_str	00000000 
00051bce l       .debug_str	00000000 
00051c29 l       .debug_str	00000000 
00051c90 l       .debug_str	00000000 
00051cfb l       .debug_str	00000000 
00051d56 l       .debug_str	00000000 
00051db1 l       .debug_str	00000000 
00022c5d l       .debug_str	00000000 
00051df8 l       .debug_str	00000000 
00051e40 l       .debug_str	00000000 
00051e88 l       .debug_str	00000000 
00051ed0 l       .debug_str	00000000 
00051f19 l       .debug_str	00000000 
00051f63 l       .debug_str	00000000 
00051faa l       .debug_str	00000000 
00051ffd l       .debug_str	00000000 
00052018 l       .debug_str	00000000 
00052060 l       .debug_str	00000000 
000520b4 l       .debug_str	00000000 
000520fc l       .debug_str	00000000 
00052150 l       .debug_str	00000000 
00052198 l       .debug_str	00000000 
000521ec l       .debug_str	00000000 
00052235 l       .debug_str	00000000 
0005228a l       .debug_str	00000000 
000522d4 l       .debug_str	00000000 
0005232c l       .debug_str	00000000 
0005238e l       .debug_str	00000000 
000523ed l       .debug_str	00000000 
0005244d l       .debug_str	00000000 
000524ad l       .debug_str	00000000 
0005250d l       .debug_str	00000000 
0005256e l       .debug_str	00000000 
000525cd l       .debug_str	00000000 
0005262d l       .debug_str	00000000 
0005268d l       .debug_str	00000000 
000526ed l       .debug_str	00000000 
0005274e l       .debug_str	00000000 
000527ab l       .debug_str	00000000 
00052806 l       .debug_str	00000000 
0005285c l       .debug_str	00000000 
000528ba l       .debug_str	00000000 
0005290e l       .debug_str	00000000 
0005296f l       .debug_str	00000000 
000529d5 l       .debug_str	00000000 
00052a3d l       .debug_str	00000000 
00052aa4 l       .debug_str	00000000 
00052b00 l       .debug_str	00000000 
00052b61 l       .debug_str	00000000 
00052bbb l       .debug_str	00000000 
00052c15 l       .debug_str	00000000 
00052c73 l       .debug_str	00000000 
00052cc7 l       .debug_str	00000000 
00052d43 l       .debug_str	00000000 
00052dac l       .debug_str	00000000 
00052e28 l       .debug_str	00000000 
00052ea4 l       .debug_str	00000000 
00052f0d l       .debug_str	00000000 
00052f89 l       .debug_str	00000000 
00052ff6 l       .debug_str	00000000 
00053050 l       .debug_str	00000000 
000530a9 l       .debug_str	00000000 
00053101 l       .debug_str	00000000 
00053160 l       .debug_str	00000000 
000531bf l       .debug_str	00000000 
0005321e l       .debug_str	00000000 
0005327e l       .debug_str	00000000 
000532de l       .debug_str	00000000 
0005333e l       .debug_str	00000000 
0005339e l       .debug_str	00000000 
00053400 l       .debug_str	00000000 
00053462 l       .debug_str	00000000 
000534c3 l       .debug_str	00000000 
00053525 l       .debug_str	00000000 
00053587 l       .debug_str	00000000 
000535e8 l       .debug_str	00000000 
0005364a l       .debug_str	00000000 
000536ac l       .debug_str	00000000 
00038ab0 l       .debug_str	00000000 
000536f5 l       .debug_str	00000000 
00053741 l       .debug_str	00000000 
00053749 l       .debug_str	00000000 
00053793 l       .debug_str	00000000 
000537de l       .debug_str	00000000 
000537e5 l       .debug_str	00000000 
00053830 l       .debug_str	00000000 
0005387b l       .debug_str	00000000 
000538c7 l       .debug_str	00000000 
00053911 l       .debug_str	00000000 
0005395e l       .debug_str	00000000 
000539a9 l       .debug_str	00000000 
000539f5 l       .debug_str	00000000 
00053a41 l       .debug_str	00000000 
00053a8d l       .debug_str	00000000 
00053ada l       .debug_str	00000000 
00053b24 l       .debug_str	00000000 
00053b71 l       .debug_str	00000000 
00053bbc l       .debug_str	00000000 
00053c08 l       .debug_str	00000000 
00053c54 l       .debug_str	00000000 
00053ca0 l       .debug_str	00000000 
00053ced l       .debug_str	00000000 
00053d37 l       .debug_str	00000000 
00053d84 l       .debug_str	00000000 
00053dcf l       .debug_str	00000000 
00053e1b l       .debug_str	00000000 
00053e67 l       .debug_str	00000000 
00053eb3 l       .debug_str	00000000 
00053f00 l       .debug_str	00000000 
00053f4b l       .debug_str	00000000 
00053f99 l       .debug_str	00000000 
00053fe5 l       .debug_str	00000000 
00054032 l       .debug_str	00000000 
0005407f l       .debug_str	00000000 
000540cc l       .debug_str	00000000 
0005411a l       .debug_str	00000000 
00054165 l       .debug_str	00000000 
000541b0 l       .debug_str	00000000 
000541fc l       .debug_str	00000000 
00054248 l       .debug_str	00000000 
00054295 l       .debug_str	00000000 
000542e1 l       .debug_str	00000000 
0005432e l       .debug_str	00000000 
0005437b l       .debug_str	00000000 
000543da l       .debug_str	00000000 
00054437 l       .debug_str	00000000 
00054493 l       .debug_str	00000000 
000544f1 l       .debug_str	00000000 
0005454e l       .debug_str	00000000 
000545ac l       .debug_str	00000000 
00054609 l       .debug_str	00000000 
00054667 l       .debug_str	00000000 
000546c4 l       .debug_str	00000000 
00054723 l       .debug_str	00000000 
00054781 l       .debug_str	00000000 
000547e2 l       .debug_str	00000000 
00054843 l       .debug_str	00000000 
000548a6 l       .debug_str	00000000 
000548d7 l       .debug_str	00000000 
000548df l       .debug_str	00000000 
00054942 l       .debug_str	00000000 
000549a5 l       .debug_str	00000000 
00054a09 l       .debug_str	00000000 
00054a6d l       .debug_str	00000000 
00054ad1 l       .debug_str	00000000 
00054b35 l       .debug_str	00000000 
00054b98 l       .debug_str	00000000 
00054bfb l       .debug_str	00000000 
00054c5f l       .debug_str	00000000 
00054cc3 l       .debug_str	00000000 
00054d27 l       .debug_str	00000000 
00054d8b l       .debug_str	00000000 
00054dbc l       .debug_str	00000000 
00054dc4 l       .debug_str	00000000 
00054e28 l       .debug_str	00000000 
00054e8c l       .debug_str	00000000 
00054ef0 l       .debug_str	00000000 
00054f54 l       .debug_str	00000000 
00054fb4 l       .debug_str	00000000 
00055014 l       .debug_str	00000000 
00055042 l       .debug_str	00000000 
0005504b l       .debug_str	00000000 
000550ac l       .debug_str	00000000 
0005510d l       .debug_str	00000000 
0005516e l       .debug_str	00000000 
000551cf l       .debug_str	00000000 
00055226 l       .debug_str	00000000 
00055279 l       .debug_str	00000000 
000552c1 l       .debug_str	00000000 
000552e9 l       .debug_str	00000000 
00055331 l       .debug_str	00000000 
00055347 l       .debug_str	00000000 
0005538f l       .debug_str	00000000 
000553c4 l       .debug_str	00000000 
0005540c l       .debug_str	00000000 
00055447 l       .debug_str	00000000 
0005548f l       .debug_str	00000000 
000554d7 l       .debug_str	00000000 
000554f8 l       .debug_str	00000000 
00055540 l       .debug_str	00000000 
0005554b l       .debug_str	00000000 
00055593 l       .debug_str	00000000 
000555d0 l       .debug_str	00000000 
00055618 l       .debug_str	00000000 
00055671 l       .debug_str	00000000 
000556b9 l       .debug_str	00000000 
000556d5 l       .debug_str	00000000 
0005571d l       .debug_str	00000000 
000557c9 l       .debug_str	00000000 
00055811 l       .debug_str	00000000 
0005582f l       .debug_str	00000000 
00055877 l       .debug_str	00000000 
00055881 l       .debug_str	00000000 
000558c9 l       .debug_str	00000000 
00055904 l       .debug_str	00000000 
0005594c l       .debug_str	00000000 
0005599b l       .debug_str	00000000 
000559e3 l       .debug_str	00000000 
00055a0a l       .debug_str	00000000 
00055a52 l       .debug_str	00000000 
00055a7c l       .debug_str	00000000 
00055ac4 l       .debug_str	00000000 
00055b3f l       .debug_str	00000000 
00055b87 l       .debug_str	00000000 
00055bcf l       .debug_str	00000000 
00055be5 l       .debug_str	00000000 
00016510 l       .debug_str	00000000 
00055c2d l       .debug_str	00000000 
00055c75 l       .debug_str	00000000 
00055cbd l       .debug_str	00000000 
00055cee l       .debug_str	00000000 
00055d36 l       .debug_str	00000000 
00055d9a l       .debug_str	00000000 
00055de2 l       .debug_str	00000000 
0000b802 l       .debug_str	00000000 
00055e2a l       .debug_str	00000000 
00055e72 l       .debug_str	00000000 
00055e7f l       .debug_str	00000000 
00055ec7 l       .debug_str	00000000 
00055ed1 l       .debug_str	00000000 
00055f19 l       .debug_str	00000000 
00055f22 l       .debug_str	00000000 
00055f6a l       .debug_str	00000000 
00055f92 l       .debug_str	00000000 
00055fda l       .debug_str	00000000 
00056022 l       .debug_str	00000000 
00056044 l       .debug_str	00000000 
0005608c l       .debug_str	00000000 
000560bd l       .debug_str	00000000 
00056105 l       .debug_str	00000000 
0005614d l       .debug_str	00000000 
00056185 l       .debug_str	00000000 
000561cd l       .debug_str	00000000 
00056202 l       .debug_str	00000000 
0005624a l       .debug_str	00000000 
00056273 l       .debug_str	00000000 
000562bb l       .debug_str	00000000 
000562df l       .debug_str	00000000 
00056327 l       .debug_str	00000000 
0005634c l       .debug_str	00000000 
00056394 l       .debug_str	00000000 
000563b1 l       .debug_str	00000000 
000563f9 l       .debug_str	00000000 
00056404 l       .debug_str	00000000 
0005644c l       .debug_str	00000000 
00056474 l       .debug_str	00000000 
000564bc l       .debug_str	00000000 
000564cb l       .debug_str	00000000 
00056513 l       .debug_str	00000000 
0005655b l       .debug_str	00000000 
00056577 l       .debug_str	00000000 
000565bf l       .debug_str	00000000 
00056636 l       .debug_str	00000000 
0005667e l       .debug_str	00000000 
000566f5 l       .debug_str	00000000 
0005673d l       .debug_str	00000000 
00056746 l       .debug_str	00000000 
0005678e l       .debug_str	00000000 
000567b4 l       .debug_str	00000000 
000567fc l       .debug_str	00000000 
0005682f l       .debug_str	00000000 
00056877 l       .debug_str	00000000 
00056894 l       .debug_str	00000000 
000568dc l       .debug_str	00000000 
000568e5 l       .debug_str	00000000 
0005692d l       .debug_str	00000000 
00056975 l       .debug_str	00000000 
00056999 l       .debug_str	00000000 
0000b8eb l       .debug_str	00000000 
000569e1 l       .debug_str	00000000 
00056a29 l       .debug_str	00000000 
00056a71 l       .debug_str	00000000 
00056b69 l       .debug_str	00000000 
0001ac11 l       .debug_str	00000000 
00056bb1 l       .debug_str	00000000 
00056bf9 l       .debug_str	00000000 
00056c41 l       .debug_str	00000000 
00056c6e l       .debug_str	00000000 
0000b93c l       .debug_str	00000000 
00056cb6 l       .debug_str	00000000 
00056cfe l       .debug_str	00000000 
00056d5b l       .debug_str	00000000 
00056da3 l       .debug_str	00000000 
00056dac l       .debug_str	00000000 
00056df4 l       .debug_str	00000000 
00056e11 l       .debug_str	00000000 
00056e59 l       .debug_str	00000000 
00056e8f l       .debug_str	00000000 
00056ed7 l       .debug_str	00000000 
00056f0c l       .debug_str	00000000 
00056f54 l       .debug_str	00000000 
00056f8d l       .debug_str	00000000 
00056fd5 l       .debug_str	00000000 
00056ff1 l       .debug_str	00000000 
00057039 l       .debug_str	00000000 
00057041 l       .debug_str	00000000 
00057089 l       .debug_str	00000000 
000570a4 l       .debug_str	00000000 
000570ec l       .debug_str	00000000 
00057114 l       .debug_str	00000000 
0005715e l       .debug_str	00000000 
000571a8 l       .debug_str	00000000 
00057207 l       .debug_str	00000000 
00057264 l       .debug_str	00000000 
000572bd l       .debug_str	00000000 
0005731c l       .debug_str	00000000 
0005737b l       .debug_str	00000000 
000573dc l       .debug_str	00000000 
0005743f l       .debug_str	00000000 
000574a7 l       .debug_str	00000000 
00057509 l       .debug_str	00000000 
0005756f l       .debug_str	00000000 
000575d1 l       .debug_str	00000000 
00057636 l       .debug_str	00000000 
00057699 l       .debug_str	00000000 
000576f5 l       .debug_str	00000000 
0005774c l       .debug_str	00000000 
000577a5 l       .debug_str	00000000 
000577f8 l       .debug_str	00000000 
00057854 l       .debug_str	00000000 
000578ba l       .debug_str	00000000 
00057910 l       .debug_str	00000000 
0005796d l       .debug_str	00000000 
000579cf l       .debug_str	00000000 
00057a28 l       .debug_str	00000000 
00057a83 l       .debug_str	00000000 
00057ade l       .debug_str	00000000 
00057b39 l       .debug_str	00000000 
00057b96 l       .debug_str	00000000 
00057bf3 l       .debug_str	00000000 
00057c39 l       .debug_str	00000000 
00057c83 l       .debug_str	00000000 
00057cc3 l       .debug_str	00000000 
00057d00 l       .debug_str	00000000 
00057d44 l       .debug_str	00000000 
00057d80 l       .debug_str	00000000 
00057dc4 l       .debug_str	00000000 
00057e0d l       .debug_str	00000000 
00057e16 l       .debug_str	00000000 
00057e5f l       .debug_str	00000000 
00057e68 l       .debug_str	00000000 
00057ed1 l       .debug_str	00000000 
00057f2e l       .debug_str	00000000 
00057f91 l       .debug_str	00000000 
00057fe7 l       .debug_str	00000000 
0005803d l       .debug_str	00000000 
00058096 l       .debug_str	00000000 
000580ee l       .debug_str	00000000 
00058152 l       .debug_str	00000000 
000581d8 l       .debug_str	00000000 
000581de l       .debug_str	00000000 
00058264 l       .debug_str	00000000 
0005826a l       .debug_str	00000000 
000582ec l       .debug_str	00000000 
0005836e l       .debug_str	00000000 
000583f1 l       .debug_str	00000000 
000583f8 l       .debug_str	00000000 
0005847b l       .debug_str	00000000 
00058482 l       .debug_str	00000000 
00058508 l       .debug_str	00000000 
0005858e l       .debug_str	00000000 
00058611 l       .debug_str	00000000 
00058694 l       .debug_str	00000000 
00058716 l       .debug_str	00000000 
0005879c l       .debug_str	00000000 
00058822 l       .debug_str	00000000 
000588ac l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
000589bc l       .debug_str	00000000 
00058a24 l       .debug_str	00000000 
00058a8d l       .debug_str	00000000 
00058af7 l       .debug_str	00000000 
00058b62 l       .debug_str	00000000 
00058bc0 l       .debug_str	00000000 
00058c1e l       .debug_str	00000000 
00058c7c l       .debug_str	00000000 
00058cdb l       .debug_str	00000000 
00058d39 l       .debug_str	00000000 
00058d98 l       .debug_str	00000000 
00058df6 l       .debug_str	00000000 
00058e55 l       .debug_str	00000000 
00058eb4 l       .debug_str	00000000 
00058f13 l       .debug_str	00000000 
00058f71 l       .debug_str	00000000 
00058fd0 l       .debug_str	00000000 
0005902f l       .debug_str	00000000 
0005908e l       .debug_str	00000000 
000590ed l       .debug_str	00000000 
0005914c l       .debug_str	00000000 
000591ab l       .debug_str	00000000 
0005920a l       .debug_str	00000000 
00059269 l       .debug_str	00000000 
000592c8 l       .debug_str	00000000 
00059327 l       .debug_str	00000000 
00059386 l       .debug_str	00000000 
000593e5 l       .debug_str	00000000 
00059444 l       .debug_str	00000000 
000594a3 l       .debug_str	00000000 
00059502 l       .debug_str	00000000 
00059561 l       .debug_str	00000000 
000595c0 l       .debug_str	00000000 
0005961f l       .debug_str	00000000 
0005967e l       .debug_str	00000000 
000596de l       .debug_str	00000000 
0005973d l       .debug_str	00000000 
0005979c l       .debug_str	00000000 
000597fb l       .debug_str	00000000 
0005985b l       .debug_str	00000000 
000598ba l       .debug_str	00000000 
00059919 l       .debug_str	00000000 
00059978 l       .debug_str	00000000 
000599d8 l       .debug_str	00000000 
0001774e l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE
0001976c l     F .text	0000000a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E
00019776 l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E
00017df2 l     F .text	000000e4 _ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE
00018e1a l     F .text	0000024c _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE
00017cec l     F .text	000000b0 _ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E
00017d9c l     F .text	00000024 _ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE
00018314 l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E
000176fe l     F .text	00000002 _ZN4core3ptr13drop_in_place17h000c7c147ade2111E
00017760 l     F .text	00000114 _ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E
0002158c l     O .text	0000007b _ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E
00021607 l     O .text	000001f0 _ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E
000217f8 l     O .text	00000458 _ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E
00020b60 l     O .text	00000010 _ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE
00017dc6 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE
00017dcc l     F .text	00000026 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE
00017dc0 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E
00017700 l     F .text	0000004e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE
00000000 l    df *ABS*	00000000 semihosting_console.c
00019784 l     F .text	00000024 __semihost
000197a8 l     F .text	00000010 debugger_connected
000197b8 l     F .text	0000002e semihost_write
0001988c l     F .text	0000001c semihosting_console_write_ch
20006f04 l     O .bss	00000004 semihost_mbuf
20000100 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
20006f08 l     O .bss	00000010 avail_queue
20006f18 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
20006f24 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
00019a5c l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_gpio.c
00019ab0 l     F .text	00000050 hal_gpio_irq_handler
00019b00 l     F .text	0000002c hal_gpio_irq_setup
00019b2c l     F .text	0000001c hal_gpio_find_empty_slot
00019b48 l     F .text	00000038 hal_gpio_find_pin
20006f28 l     O .bss	00000040 hal_gpio_irqs
20006f68 l     O .bss	00000001 irq_setup.8906
00000000 l    df *ABS*	00000000 hal_i2c.c
00019cdc l     F .text	0000007a hal_i2c_delay_us
00019d58 l     F .text	00000024 hal_i2c_resolve
00019d7c l     F .text	0000001c hal_i2c_convert_status
00019d98 l     F .text	00000012 read_gpio_inbuffer
00019daa l     F .text	000000a2 hal_i2c_clear_bus
00021c60 l     O .text	00000008 nrf52_hal_i2cs
00000000 l    df *ABS*	00000000 hal_spi.c
0001a148 l     F .text	0000006e nrf52_irqm_handler
0001a1d0 l     F .text	00000014 hal_spi_stop_transfer
0001a1e4 l     F .text	0000004c hal_spi_config_slave
0001a230 l     F .text	000000b8 hal_spi_init_master
0001a2e8 l     F .text	000000e0 hal_spi_config_master
00021c68 l     O .text	0000000c nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_watchdog.c
0001a6cc l     F .text	0000000e nrf52_hal_wdt_default_handler
0001a6dc l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
0001a8f4 l     F .text	00000016 os_main
20007070 l     O .bss	00002000 g_os_main_stack
20006f70 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
0001ac04 l     F .text	0000005c os_dev_add
0001ac60 l     F .text	00000026 os_dev_initialize
0001ac86 l     F .text	00000020 os_dev_init
20009070 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20009078 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
0001b1b0 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0001b2c4 l     F .text	00000010 os_msys_find_biggest_pool
0001b2d4 l     F .text	0000002c os_msys_find_pool
0001b34c l     F .text	00000044 os_msys_init_once
20009088 l     O .bss	00004900 os_msys_1_data
2000d988 l     O .bss	0000000c os_msys_1_mbuf_pool
2000d994 l     O .bss	0000001c os_msys_1_mempool
2000010c l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
0001b5a8 l     F .text	00000020 os_sanity_check_list_lock
0001b5c8 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
0001ba3c l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0001bb2c l     F .text	0000004c os_deltatime
0001bb78 l     F .text	0000005c os_time_tick
2000d9b8 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
0001be94 l       .text	00000000 SVC_User
0001beb2 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
0001bf54 l       .text	00000000 test1
0001bf48 l       .text	00000000 loop1
0001bf5a l       .text	00000000 res1
0001bf76 l       .text	00000000 test2
0001bf7e l       .text	00000000 done
0001bf6a l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0001bf8a l       .text	00000000 test1
0001bf86 l       .text	00000000 loop1
0001bf98 l       .text	00000000 test2
0001bf94 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0001c002 l     F .text	000000c0 ui2a
0001c0c2 l     F .text	00000020 i2a
0001c0e2 l     F .text	00000030 a2d
0001c112 l     F .text	00000036 a2i
0001c148 l     F .text	0000002a putf
0001c174 l     F .text	0000011c putchw
0001c290 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
0001c614 l     F .text	00000004 stdin_read
0001c618 l     F .text	00000010 stdout_write
20000124 l     O .data	00000004 _stdin
20000128 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001c6c8 l     F .text	00000028 nrf52k_flash_wait_ready
0001c6f0 l     F .text	00000054 nrf52k_flash_erase_sector
0001c744 l     F .text	00000004 nrf52k_flash_init
0001c748 l     F .text	00000020 nrf52k_flash_sector_info
0001c768 l     F .text	000000d0 nrf52k_flash_write
0001c838 l     F .text	0000000e nrf52k_flash_read
00021e20 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0001c848 l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_timer.c
0001ca54 l     F .text	0000000a nrf_read_timer_cntr
0001ca60 l     F .text	000000b4 nrf_timer_set_ocmp
0001cb14 l     F .text	0000000a nrf_timer_disable_ocmp
0001cb1e l     F .text	0000000a nrf_rtc_disable_ocmp
0001cb28 l     F .text	00000054 hal_timer_read_bsptimer
0001cb7c l     F .text	00000076 hal_timer_chk_queue
0001cbf2 l     F .text	0000002c hal_timer_irq_handler
00021e3c l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 nrf52_periph.c
0001cdb8 l     F .text	00000034 nrf52_periph_create_timers
0001cdec l     F .text	00000020 nrf52_periph_create_i2c
0001ce0c l     F .text	00000020 nrf52_periph_create_spi
00021e54 l     O .text	0000000c hal_i2c1_cfg
00021e60 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 sensor.c
0001ce40 l     F .text	00000028 sensor_mgr_remove
0001ce68 l     F .text	00000060 sensor_mgr_insert
0001cec8 l     F .text	0000000a sensor_type_traits_empty
0001ced4 l     F .text	0000000c sensor_mgr_evq_set
0001cf0e l     F .text	0000005c sensor_read_data_func
0001cf6c l     F .text	00000048 sensor_base_ts_update_event
0001cfb4 l     F .text	00000050 sensor_up_timestamp
0001d03c l     F .text	000000a0 sensor_mgr_init
0001d2a8 l     F .text	0000007c sensor_mgr_wakeup_event
0001d106 l     F .text	00000032 sensor_update_nextrun
0001d138 l     F .text	0000001e sensor_calc_nextrun_delta
0001d158 l     F .text	00000024 sensor_find_min_nextrun_sensor
0001d230 l     F .text	0000004a sensor_mgr_poll_bytype
0001d27a l     F .text	0000002e sensor_poll_per_type_trait
2000d9ec l     O .bss	00000078 sensor_notify_evt_area
2000da64 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 sensor_coap.c
2000da80 l     O .bss	00000008 oc_sem
2000da88 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
2000da8c l     O .bss	0000000c hw_id
2000da98 l     O .bss	00000004 hw_id_len
2000daa0 l     O .bss	00000008 sensor_node_address
2000daa8 l     O .bss	00000037 sensor_node_names_buf
20000130 l     O .data	00000014 sensor_node_names
00021e78 l     O .text	0000000c COLLECTOR_NODE_HW_ID
00021e84 l     O .text	0000003c SENSOR_NODE_HW_IDS
00021f20 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 creator.c
0001d4cc l     F .text	00000050 config_device
2000dae0 l     O .bss	00000014 adc_1_itf_temp_stub
2000daf8 l     O .bss	000000c0 temp_stub_dev
00000000 l    df *ABS*	00000000 temp_stub.c
0001d578 l     F .text	00000004 temp_stub_close
0001d57c l     F .text	0000001c temp_stub_sensor_get_config
0001d598 l     F .text	00000026 temp_stub_open
0001d674 l     F .text	0000007c temp_stub_sensor_read
00021f64 l     O .text	00000028 g_temp_stub_sensor_driver
00000000 l    df *ABS*	00000000 oc_buffer.c
0001d718 l     F .text	00000030 oc_buffer_tx
0001d748 l     F .text	0000002c oc_buffer_rx
2000dbb8 l     O .bss	00000018 oc_inq
2000dbd0 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_ri.c
2000dbe8 l     O .bss	000000c8 oc_client_cb_area
2000dcb0 l     O .bss	0000001c oc_client_cb_pool
00000000 l    df *ABS*	00000000 adaptor.c
2000dccc l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 oc_rep.c
2000dcd0 l     O .bss	0000001c oc_rep_objects
2000dcec l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 flash_map.c
0001d89c l     F .text	00000078 flash_map_read_mfg
2000dd1c l     O .bss	00000078 mfg_areas.9056
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0001d9f0 l     F .text	00000094 mfg_seek_next_aux
0001da84 l     F .text	00000070 mfg_read_mmr
0001daf4 l     F .text	00000054 mfg_read_next_mmr
0001db48 l     F .text	0000003c mfg_open_flash_area
0001db84 l     F .text	00000044 mfg_read_tlv_body
0001dc50 l     F .text	0000004e mfg_read_mmr_refs
2000dd94 l     O .bss	00000001 mfg_initialized
2000dd98 l     O .bss	00000018 mfg_mmrs
2000ddb0 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001dcb6 l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 nrf52_hw_id.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_memclr.c
00000000 l    df *ABS*	00000000 aeabi_memcpy.c
00000000 l    df *ABS*	00000000 lib_a-aeabi_memset-soft.o
00000000 l    df *ABS*	00000000 libchip8.bde0u64m-cgu.0
00000afc l       .debug_str	00000000 
00019f74 l       .debug_str	00000000 
00019fcb l       .debug_str	00000000 
0001161c l       .debug_str	00000000 
0001a017 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0001a01f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00017904 g     F .text	00000004 _ZN4core5panic8Location4line17h650a566d9637c91dE
00015528 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE
00008616 g     F .text	000000ba main
00014c54 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE
00009f6e g     F .text	0000070a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E
0001aed4 g     F .text	00000040 os_eventq_remove
0000a704 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE
0001bd20 g     F .text	00000018 os_arch_init
0001bf3c g     F .text	00000048 memcmp
0001204a g     F .text	00000012 _ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE
000173a8 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE
00016214 g     F .text	00000024 _ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE
00011524 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E
00014838 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E
000123c0 g     F .text	000000ee _ZN3log17__private_api_log17h076f8f4ccc99f19bE
00017088 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE
00016f10 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E
00014570 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE
00014504 g     F .text	00000002 _ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E
00017934 g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E
0000a6e6 g     F .text	0000001e .hidden _ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE
000090a0 g     F .text	00000010 _ZN4core3ptr5write17h7ef3fa6b6f80daebE
00014704 g     F .text	0000005a _ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE
00019594 g     F .text	000000f4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17hc96955e2b836ab47E
0000d1c4 g     F .text	00000052 _ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E
2000ded0 g     O .bss	0000001c nrf52_hal_timer0
00014aa0 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E
00009086 g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE
00014916 g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE
0001d0fc g     F .text	0000000a sensor_unlock
0000ab9a g     F .text	00000036 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E
00014a44 g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E
000097f6 g     F .text	00000118 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E
00011578 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E
00014a28 g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE
00016978 g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E
00008ef2 g     F .text	0000006c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E
0001b5f4 g     F .text	00000024 os_sanity_check_register
0001d5cc g     F .text	0000007c temp_stub_init
0001b694 g     F .text	00000054 os_sched_insert
2000ddb4 g     O .bss	00000001 g_silence_console
00014f6e g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E
00015842 g     F .text	0000028a _ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E
00015026 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E
000126dc g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE
00016d06 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
0001dd54 g     F .text	00000034 hal_bsp_hw_id
00008164  w    F .text	00000002 NFCT_IRQHandler
000176d0 g     F .text	00000004 .hidden _ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE
000147fc g     F .text	00000018 _ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E
000169c8 g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E
00009980 g     F .text	00000162 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE
00015fbe g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE
00011040 g     F .text	0000007e _ZN8libchip814Chip8$LT$T$GT$5setup17h6dafcb9be3b52c51E
00008c5e g     F .text	00000012 _ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE
000153ae g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE
000191e0 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE
000176e2 g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E
00014cb8 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE
00015112 g     F .text	00000024 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE
00011768 g     F .text	00000086 _ZN4core3cmp6max_by17h3c9686db40e0f078E
00008a9c g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E
20000114 g     O .data	00000008 g_os_run_list
00015588 g     F .text	0000004a _ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E
0001d7d8 g     F .text	00000020 oc_send_buffer
0001bdc8 g     F .text	00000030 os_arch_start
00015498 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE
0000a778 g     F .text	0000001a _ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E
0001d3f0 g     F .text	0000001a is_standalone_node
000087d2 g     F .text	00000054 _ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE
0001adc0 g     F .text	00000010 os_eventq_init
000187f2 g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E
0001276c g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E
00017ed6 g     F .text	00000022 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E
00011562 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E
00008d54 g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE
0001728a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE
0001d324 g     F .text	00000028 init_sensor_coap
00016f9c g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE
0001d7f8 g     F .text	0000004c oc_send_multicast_message
00015fce g     F .text	0000008c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE
00011d6a g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E
0000d068 g     F .text	0000001c _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hd98ff8af8e86e565E
000187ae g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE
2000def0 g     O .bss	00000034 sensor_mgr
0000cdf0 g     F .text	00000106 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E
00019928 g     F .text	0000002c console_dump
0001b7c0 g     F .text	00000078 os_sched_wakeup
0001757a g     F .text	0000011c .hidden _ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE
0001266c g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E
00019374 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17h6ff113c3a96d4445E
00008ad4 g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E
0001dcb4 g     F .text	00000002 _fini
0001abf8 g     F .text	0000000a os_cputime_get32
00011628 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E
000143a6 g     F .text	00000132 _ZN6mynewt3hal4GPIO4init17h54c34caf27320956E
2000ddb5 g     O .bss	00000001 g_console_input_ignore
0001bcb0 g     F .text	00000014 os_arch_ctx_sw
00010f3a g     F .text	00000106 _ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE
00011362 g     F .text	00000028 .hidden _ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E
000126b2 g     F .text	0000001a _ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E
00014de2 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE
0001befe g     F .text	0000000c SysTick_Handler
0001d364 g     F .text	00000070 get_hardware_id
00008168 g     F .text	00000010 _sbrkInit
0001216c g     F .text	0000003c _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E
0001158e g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE
000093d8 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE
00008a74 g     F .text	00000012 _ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E
0001bfd6 g     F .text	0000001c strcmp
0000bae0 g     F .text	00000136 .hidden _ZN3app5chip88on_start17h473d234c4f7ef3a3E
00015f9a g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE
2000dde8 g     O .bss	00000050 g_idle_task
0001adb0 g     F .text	00000010 os_dev_reset
0001749a g     F .text	00000010 _ZN4core3ptr5write17h147d4643d861e927E
00009484 g     F .text	00000262 _ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E
0001b910 g     F .text	00000010 os_sem_init
00016ae2 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E
000198a8 g     F .text	00000070 console_printhex
0000adfe g     F .text	00000270 .hidden _ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E
0000885c g     F .text	0000003a _ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE
0001459c g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE
00022024 g       .text	00000000 __exidx_start
0001d3d4 g     F .text	0000001c is_collector_node
000174aa g     F .text	00000036 _ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE
000157f2 g     F .text	00000050 _ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E
0001bf9e g     F .text	00000038 memset
00008164  w    F .text	00000002 WDT_IRQHandler
000190c4 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h096b8fea83a9dea7E
00019838 g     F .text	00000054 console_buffer
0001add0 g     F .text	0000000a os_eventq_inited
00019a70 g     F .text	0000000c sysinit_end
00016ebe g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE
0001731a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE
00008020 g       .text	00000000 __isr_vector_start
00008164  w    F .text	00000002 TIMER3_IRQHandler
00008164  w    F .text	00000002 MWU_IRQHandler
000178ac g     F .text	0000004a _ZN4core6result13unwrap_failed17h10957bfda7d5e5f2E
2000df88 g       .bss	00000000 __HeapBase
00014fbe g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE
00014f0c g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E
00009384 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E
0000882e g     F .text	0000002e _ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E
0000a74a g     F .text	00000012 _ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E
00010d90 g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$4jump17h930b3c38e90d0056E
000144d8 g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E
00014880 g     F .text	00000096 _ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E
0001d954 g     F .text	00000026 flash_area_read
0001269c g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E
0001d86a g     F .text	00000002 oc_register_ip4
00008faa g     F .text	00000046 _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E
0001d86c g     F .text	00000002 oc_register_ip6
0000842c g     F .text	000001d4 SystemInit
00016d94 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE
0001dcd4 g     F .text	00000028 hal_flash_init
0001ad78 g     F .text	00000036 os_dev_close
00021fbc g     O .text	00000048 sysflash_map_dflt
0001c6bc g     F .text	0000000c hal_bsp_init
00008b80 g     F .text	00000032 _ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E
0000c5e8 g     F .text	000000c4 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h656498c5392083edE
000162c0 g     F .text	000005e0 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE
00011e66 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
00009b98 g     F .text	0000012c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE
00011d2c g     F .text	00000032 _ZN4core3ptr4read17h2038b0ecb0975c4fE
0001e0b0 g     F .text	00000004 __aeabi_memcpy4
000160ea g     F .text	000000c6 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE
0001a514 g     F .text	0000002c hal_spi_set_txrx_cb
0001e0a8 g     F .text	00000006 __aeabi_memclr8
000086d0 g     F .text	00000102 rust_begin_unwind
2000ddb8 g     O .bss	00000004 console_is_midline
0001e0a8 g     F .text	00000006 __aeabi_memclr4
0000a73a g     F .text	00000010 _ZN4core3ptr13drop_in_place17h22ac77b3595708cdE
000080f8 g       .text	00000000 __isr_vector_end
0001a00c g     F .text	0000013c hal_i2c_master_read
000150a6 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E
0001c2f4 g     F .text	0000025c tfp_format
0001725a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE
0001d1c8 g     F .text	00000068 sensor_read
00016b38 g     F .text	00000058 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E
0000906c g     F .text	00000010 _ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E
00014ab0 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E
00015ef2 g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE
0000c2ba g     F .text	00000010 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h36d051b466cea4e4E
0001e0b0 g     F .text	00000004 __aeabi_memcpy
0001e0b0 g     F .text	00000004 __aeabi_memcpy8
00011334 g     F .text	00000014 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h3b61728407886f85E
2000df24 g     O .bss	00000020 st_up_osco
0001bdf8 g     F .text	0000005c os_arch_os_start
0001d1aa g     F .text	0000001e sensor_init
00017696 g     F .text	00000032 .hidden _ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE
0001119e g     F .text	00000112 _ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E
20000000 g       .bss	00000000 _ram_start
0001bc20 g     F .text	00000026 os_time_delay
00014ac0 g     F .text	0000002c _ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE
0000cd7c g     F .text	00000014 _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5e3b0b54b76961bcE
0001d868 g     F .text	00000002 oc_register_gatt
20004a6c g     O .bss	00000004 _ZN3log20MAX_LOG_LEVEL_FILTER17h20753a6176f34564E
0001dd50 g     F .text	00000004 hal_bsp_hw_id_len
0001abb8 g     F .text	00000034 os_callout_wakeup_ticks
0001af2e g     F .text	00000026 os_mqueue_get
00019e4c g     F .text	00000098 hal_i2c_init
00018680 g     F .text	0000012e _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E
000190c4 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E
00008164  w    F .text	00000002 TIMER4_IRQHandler
0001ff2c g     O .text	00000050 _ZN8libchip87CHARBUF17h227c6d0d7e24574cE
000118ea g     F .text	00000092 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E
000168a0 g     F .text	00000048 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E
0001722a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E
0001b8c0 g     F .text	00000022 os_sched
00008c70 g     F .text	00000020 _ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00011348 g     F .text	0000001a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E
000117ee g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h5567184bcc425327E
00011eac g     F .text	00000014 _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE
0000a7c8 g     F .text	00000010 _ZN4core3ptr13drop_in_place17hf625580841d3425eE
2000fe50 g       *ABS*	000001b0 __StackLimit
0001cee0 g     F .text	0000002e sensor_mgr_match_bytype
00011d80 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE
000149c6 g     F .text	00000032 _ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E
0000ad1c g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE
0001b3fc g     F .text	00000014 os_mutex_init
00008f5e g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E
00009f2a g     F .text	00000044 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE
2000ddc0 g     O .bss	00000028 nrf52_hal_spi0
00008614 g     F .text	00000002 _init
00000020 g       *ABS*	00000000 _imghdr_size
00015136 g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E
00008164  w    F .text	00000002 RTC1_IRQHandler
00011f92 g     F .text	00000008 _ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E
00008164  w    F .text	00000002 PDM_IRQHandler
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00010e92 g     F .text	000000a8 _ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
0001719a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE
0000cc8c g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E
20000124 g       .data	00000000 __aeabi_unwind_cpp_pr0
00009214 g     F .text	0000001a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E
0000935a g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE
00008b78 g     F .text	00000008 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E
00012884 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E
0001b3a0 g     F .text	00000028 os_msys_get_pkthdr
0001d648 g     F .text	0000002c temp_stub_get_raw_temperature
0001b838 g     F .text	0000003c os_sched_os_timer_exp
0001aca8 g     F .text	00000040 os_dev_create
0000a75c g     F .text	0000001c _ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E
00017424 g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
0001b5e4 g     F .text	00000010 os_sanity_check_init
00017996 g     F .text	0000022c _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE
00008164  w    F .text	00000002 SAADC_IRQHandler
0001abec g     F .text	0000000c os_cputime_init
000114ea g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h89e3c6c0231011ceE
0001aebc g     F .text	00000018 os_eventq_run
0001234c g     F .text	0000000c _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE
0001b3c8 g     F .text	00000034 os_msys_init
00016980 g     F .text	0000000e .hidden _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E
00016d30 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E
0001bca6 g     F .text	0000000a timer_handler
000116f2 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE
000176d4 g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E
000092ea g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E
00008bb2 g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E
000149f8 g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E
000176cc g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E
00017974 g     F .text	00000022 _ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E
000080f8 g     F .text	0000005c Reset_Handler
0000cb28 g     F .text	0000002e .hidden _ZN3app5chip812handle_touch17habca32c74e5cefadE
00016940 g     F .text	0000002c _ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE
00008020 g       .text	000000d8 __isr_vector
00019374 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17heaf2297ac445d947E
00014b9a g     F .text	0000002a .hidden _ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE
0001c550 g     F .text	00000008 vfprintf
0001455c g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E
00011ed8 g     F .text	0000000a _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E
00011f36 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E
0001afce g     F .text	00000036 os_mbuf_get_pkthdr
00008164  w    F .text	00000002 PWM0_IRQHandler
000171fa g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E
00000000 g       .svc_table	00000000 SVC_Count
00018b82 g     F .text	00000298 _ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE
00016238 g     F .text	00000088 _ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE
00017908 g     F .text	0000002c _ZN4core9panicking5panic17h24d1dd0a9d540834E
0001bcd6 g     F .text	0000000a os_arch_in_critical
00015012 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E
0001b684 g     F .text	00000010 os_sanity_init
00011430 g     F .text	000000ba _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E
0001696c g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE
00014bc4 g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE
00019374 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E
00016c66 g     F .text	00000018 .hidden _ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE
00014a62 g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE
0001a798 g     F .text	0000004c __assert_func
00016f88 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E
00015304 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
00014be2 g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE
0001b26e g     F .text	0000001e os_memblock_put_from_cb
0001be58 g     F .text	00000014 os_set_env
2000deac g     O .bss	00000004 g_os_last_ctx_sw_time
00008a86 g     F .text	0000000a _ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE
00019a08 g     F .text	00000048 console_printf
000126e6 g     F .text	00000016 .hidden _ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E
0000ac6c g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE
00011dac g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE
000125b8 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E
0001713a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E
0001be6c g     F .text	00000006 os_arch_init_task_stack
0001dc40 g     F .text	00000010 mfg_open
00019374 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17hb33f6f1f0114a92bE
00016c7e g     F .text	0000005e .hidden _ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE
0001d79c g     F .text	00000030 oc_ri_mem_init
000096e6 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE
0001c6ac g     F .text	00000010 hal_bsp_flash_dev
0001d97c g     F .text	00000070 flash_map_init
2000dec0 g     O .bss	00000004 g_os_time
000149ae g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E
0000cd72 g     F .text	0000000a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E
00011404 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha72d6fa0f65ae98fE
00015acc g     F .text	00000392 _ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E
0001bf0a g     F .text	0000001e os_default_irq_asm
0001a7e4 g     F .text	00000098 os_default_irq
200000e4 g     O .data	00000004 SystemCoreClock
0001a44c g     F .text	00000068 hal_spi_disable
0000c4aa g     F .text	000000d0 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17he272c4593d926434E
000160c0 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E
0001272c g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E
00010e3c g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$4push17h7098654a82bc65c4E
0000903e g     F .text	0000002e _ZN6mynewt3sys7console6buffer17h6e460748855d110aE
0001d86e g     F .text	00000002 oc_register_lora
000191e0 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u16$GT$3fmt17hc265973c39f711faE
0001b050 g     F .text	000000a8 os_mbuf_append
0001d51c g     F .text	0000005c temp_stub_create
0001dcfc g     F .text	00000054 hal_flash_read
000197e8 g     F .text	00000048 console_flush
0001737c g     F .text	00000018 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE
00014a10 g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E
0001aa38 g     F .text	0000001a os_start
0001cc30 g     F .text	00000060 hal_timer_init
000115a2 g     F .text	00000086 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E
0001c628 g     F .text	00000010 rust_sysinit
00008164  w    F .text	00000002 I2S_IRQHandler
00019918 g     F .text	00000010 console_printint
000113a6 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h1794408f6a80b915E
0001b8e4 g     F .text	0000002c os_sched_resort
00021dfc g     O .text	00000008 MemFile_methods
0001c5fc g     F .text	00000018 fmemopen_w
0001357c g     F .text	00000126 _ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E
0001a3c8 g     F .text	00000038 hal_spi_config
0001e0a4  w    F .text	00000002 .hidden __aeabi_ldiv0
0001b2b4 g     F .text	00000010 os_mempool_module_init
0001b8b4 g     F .text	0000000c os_sched_next_task
00016064 g     F .text	0000001a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E
0000a792 g     F .text	00000010 _ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E
00019c06 g     F .text	00000034 hal_gpio_read
0001aa8c g     F .text	0000001a os_callout_init
0001b390 g     F .text	00000010 os_msys_reset
0001c558 g     F .text	00000024 printf
00008156  w    F .text	00000002 HardFault_Handler
0001dda8 g     F .text	00000000 .hidden __aeabi_uldivmod
0001bc48 g     F .text	00000038 os_gettimeofday
00019994 g     F .text	0000001e console_write
000172ea g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E
0001864a g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE
000097e2 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE
0001a918 g     F .text	00000070 os_init_idle_task
0001bd38 g     F .text	0000008c os_arch_os_init
000155de g     F .text	000001b6 _ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE
00009322 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E
0001a988 g     F .text	000000b0 os_init
2000de98 g     O .bss	00000008 g_os_mempool_list
000097d8 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE
00008184 g     F .text	00000010 hal_debugger_connected
0000a7a2 g     F .text	0000001e _ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE
00011dc2 g     F .text	0000009a _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E
00019990 g     F .text	00000004 semihosting_console_init
0001dbda g     F .text	0000001a mfg_seek_next_with_type
0001b4c8 g     F .text	000000e0 os_mutex_pend
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
00016a9a g     F .text	00000026 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E
00019be4 g     F .text	00000022 hal_gpio_write
00008600 g     F .text	00000014 _start
00011ea4 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE
00011f0c g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE
0001dca0 g     F .text	00000014 __wrap_coap_receive
0001716a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E
2000ddbc g     O .bss	00000001 sysinit_active
00016c2a g     F .text	00000012 _ZN4core3mem4swap17h206518364108b51fE
000127a8 g     F .text	0000006e .hidden _ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E
000146da g     F .text	0000002a _ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE
0001c5cc g     F .text	0000002e memfile_write
0001e0a4  w    F .text	00000002 .hidden __aeabi_idiv0
00016bd4 g     F .text	00000030 .hidden _ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE
000161de g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE
0001a90c g     F .text	0000000c os_started
00015e5e g     F .text	0000000a .hidden _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE
0001d774 g     F .text	00000028 oc_buffer_init
00014506 g     F .text	00000056 _ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE
00009306 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E
2000dea0 g     O .bss	0000000c g_os_sanity_check_mu
000090b0 g     F .text	0000002c .hidden _ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E
00016bb2 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E
0000d084 g     F .text	000000ea _ZN8libchip814Chip8$LT$T$GT$3new17h746d7acd3c3a5f1eE
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
00010d58 g     F .text	00000024 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h8dd34ea84f1c7a05E
0001e0a8 g     F .text	00000006 __aeabi_memclr
0001e0b4 g     F .text	0000009a __aeabi_memset4
00012910 g     F .text	00000a7a _ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E
00018652 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE
00017394 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E
000126fc g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E
0001bbe0 g     F .text	00000040 os_time_advance
0001a400 g     F .text	0000004c hal_spi_enable
0001dc08 g     F .text	00000038 mfg_init
00014026 g     F .text	00000010 _ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E
2000de38 g     O .bss	00000050 g_os_main_task
0001e0b4 g     F .text	0000009a __aeabi_memset8
00019122 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hcd88e3dc15351fceE
00008b6c g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE
0002203c g       .ARM.exidx	00000000 __exidx_end
00008164  w    F .text	00000002 PWM1_IRQHandler
20000148 g     O .bss	00000018 _ZN22piet_embedded_graphics7display7DISPLAY17ha0ff10e671b220f2E
00017c94 g     F .text	00000058 _ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE
00008afa g     F .text	0000004e _ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE
00019688 g     F .text	000000e4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17hea84eef47d2fd641E
00019a7c g     F .text	00000034 NVIC_Relocate
0001138a g     F .text	0000001c _ZN4core4iter6traits8iterator8Iterator7flatten17hdd08c3a3cf16397aE
00019a64 g     F .text	0000000c sysinit_start
000161c6 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E
000161f6 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE
00021e08 g     O .text	00000018 nrf52k_flash_dev
0000c57a g     F .text	0000005a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h96b89968e4265d2cE
0001cc90 g     F .text	000000f8 hal_timer_config
00014996 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E
000147b0 g     F .text	0000004c _ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E
0001c5b8 g     F .text	00000014 vprintf
00008f90 g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E
00019830 g     F .text	00000008 disable_buffer
00016fb0 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E
2000de88 g     O .bss	00000004 g_os_started
000178fc g     F .text	00000008 _ZN4core5panic9PanicInfo7payload17h9302c8d957737573E
00014956 g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E
20000144 g       .bssnz	00000000 __bssnz_end__
0001ad14 g     F .text	00000020 os_dev_lookup
000154f8 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E
00009208 g     F .text	0000000c _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E
0001a774 g     F .text	00000010 hal_watchdog_enable
2000dec4 g     O .bss	0000000c g_hal_os_tick
00016f22 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E
0001bcd0 g     F .text	00000006 os_arch_restore_sr
0001aae4 g     F .text	00000078 os_callout_reset
000097ec g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE
0001dbf4 g     F .text	0000000a mfg_read_tlv_flash_area
00012748 g     F .text	00000024 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E
0000815a  w    F .text	00000002 BusFault_Handler
000161b0 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E
0001af1c g     F .text	00000012 os_mqueue_init
0001197c g     F .text	00000052 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE
000171ca g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E
000151be g     F .text	00000052 _ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E
0001d5be g     F .text	0000000e temp_stub_default_cfg
0001277c g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E
00008020 g       .imghdr	00000000 __text
0001aaa8 g     F .text	0000003c os_callout_stop
0001515c g     F .text	00000062 _ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E
000081c0 g     F .text	0000004c hal_system_clock_start
0001b018 g     F .text	00000024 os_mbuf_free_chain
000090dc g     F .text	0000000a .hidden _ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E
0001c638 g     F .text	00000030 mem_init_mbuf_pool
000127a0 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E
00008a90 g     F .text	0000000c _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E
00016f34 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E
00019ee4 g     F .text	00000128 hal_i2c_master_write
00015558 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E
00008164  w    F .text	00000002 QDEC_IRQHandler
00010da0 g     F .text	00000076 _ZN8libchip814Chip8$LT$T$GT$4load17h2a4cfd313d02c69aE
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
00016a78 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E
0000d16e g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$3pop17h503862bdc0785684E
0001117e g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$8shutdown17h09e18e9d3e93ad4fE
000128f2 g     F .text	0000001e _ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E
00011b80 g     F .text	0000003a _ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E
000114fe g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17hbdce026690b075d6E
00015f5c g     F .text	0000001a _ZN4core5slice14from_raw_parts17h1425df913744b73aE
0001af14 g     F .text	00000008 os_eventq_dflt_get
0001d0e4 g     F .text	00000018 sensor_lock
0001153a g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE
000088c6 g     F .text	00000016 _ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE
000199bc g     F .text	0000004c console_pkg_init
0000c2ca g     F .text	000001e0 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE
20000104 g     O .data	00000004 sysinit_panic_cb
0001b03c g     F .text	00000014 os_mbuf_len
0001b004 g     F .text	00000014 os_mbuf_free
00015794 g     F .text	0000005e _ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E
00014aec g     F .text	000000ae _ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E
00011d96 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE
00012358 g     F .text	0000000a _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE
00008194 g     F .text	0000002c hal_system_reset
000199b2 g     F .text	00000008 console_blocking_mode
000155d2 g     F .text	0000000c _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E
0000a7d8 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE
00009cc4 g     F .text	00000266 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE
0001154e g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E
0001ce2c g     F .text	00000010 nrf52_periph_create
00015eb0 g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E
0001b618 g     F .text	0000006c os_sanity_run
0001698e g     F .text	0000003a .hidden _ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE
00016c1c g     F .text	0000000e .hidden _ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E
0000841c g     F .text	00000010 SystemCoreClockUpdate
000145a2 g     F .text	0000007e .hidden _ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE
00014814 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E
0001743e g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE
00008896 g     F .text	00000030 _ZN4core3any6TypeId2of17haae5124a9f275cb8E
0001b228 g     F .text	00000014 os_mempool_init
00021e04 g     O .text	00000004 stdout
0000adcc g     F .text	0000000e .hidden _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE
0000cd30 g     F .text	00000042 _ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E
0001ace8 g     F .text	0000002c os_dev_initialize_all
00008c90 g     F .text	000000b4 _ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E
0000c6b4 g     F .text	000000ca _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E
0000d218 g     F .text	00003b40 _ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E
00014936 g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E
00016f5e g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE
0001a87c g     F .text	00000078 os_idle_task
00008d44 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h1982c2483e0a2028E
000170a0 g     F .text	0000000a .hidden _ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE
0000a71c g     F .text	0000001e _ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE
00017368 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E
00009ae2 g     F .text	000000b6 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE
00018348 g     F .text	00000302 _ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE
0001d914 g     F .text	00000040 flash_area_open
0001607e g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E
00015ea6 g     F .text	0000000a _ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E
0001485c g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE
00008164 g     F .text	00000002 Default_Handler
000178fa g     F .text	00000002 _ZN4core5panic8Location6caller17h4b6b61f9498709a3E
0000922e g     F .text	000000bc _ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E
0001b300 g     F .text	0000004c os_msys_register
000160a6 g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE
000090e6 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E
2000d9b0 g     O .bss	00000004 g_os_sanity_check_list
0000abd0 g     F .text	00000066 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E
00011ee2 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE
00011abc g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E
0001a4b4 g     F .text	00000060 hal_spi_init
00008164  w    F .text	00000002 RNG_IRQHandler
0001d020 g     F .text	00000010 sensor_mgr_unlock
2000df80 g     O .bss	00000004 flash_map_entries
00019066 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17hb1f1dec5462292d8E
000170aa g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E
00014f1e g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE
0001d870 g     F .text	00000002 oc_register_serial
00008178 g     F .text	0000000c hal_system_init
00015458 g     F .text	00000010 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E
0000a804 g     F .text	00000396 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E
00014586 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE
00014c00 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E
00008164  w    F .text	00000002 GPIOTE_IRQHandler
0001205c g     F .text	000000aa _ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0001dbc8 g     F .text	00000012 mfg_seek_next
00015210 g     F .text	0000004a _ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E
000154c8 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E
00012362 g     F .text	00000008 _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE
00014c2a g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE
2000011c g     O .data	00000008 g_os_sleep_list
000180b8 g     F .text	0000025c _ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E
0000cef6 g     F .text	0000013c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E
000174e0 g     F .text	00000058 _ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE
0001af92 g     F .text	0000000a os_mbuf_pool_init
2000de90 g     O .bss	00000008 g_callout_list
0001b724 g     F .text	0000000c os_sched_set_current_task
00010d7c g     F .text	00000014 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hd6b4984bbe637b42E
0001ab5c g     F .text	0000005c os_callout_tick
00017538 g     F .text	00000042 _ZN4core3ptr4read17h38cf3848f1a0f2ccE
00009102 g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE
00011fc4 g     F .text	0000007c _ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E
00017352 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E
0000cd08 g     F .text	00000028 _ZN4core6option15Option$LT$T$GT$6as_mut17h8929fdf00293b903E
0000cb56 g     F .text	0000009a _ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E
0001a6fc g     F .text	00000078 hal_watchdog_init
2000deb4 g     O .bss	00000001 g_task_id
0001944a g     F .text	0000007a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E
0000a7c0 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17hef1277471241eea2E
0000adda g     F .text	00000024 .hidden _ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E
0001ad34 g     F .text	00000044 os_dev_open
2000deb0 g     O .bss	00000004 g_current_task
000176c8 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE
20000148 g       .bss	00000000 __bss_start__
000112e8 g     F .text	0000004c _ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h3e3a45a546031266E
0001701c g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E
00008b60 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE
0001a1b8 g     F .text	00000018 nrf52_spi0_irq_handler
0001d0dc g     F .text	00000008 sensor_pkg_init
00016c3c g     F .text	0000002a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE
0001d6f0 g     F .text	00000028 temp_stub_config
0001af54 g     F .text	0000003e os_mqueue_put
00019688 g     F .text	000000e4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE
0001a540 g     F .text	000000ac hal_spi_txrx
00008164  w    F .text	00000002 RTC2_IRQHandler
0001b718 g     F .text	0000000c os_sched_get_current_task
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
000125d4 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E
0001d9ec g     F .text	00000002 modlog_init
00014ea8 g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E
00015e68 g     F .text	0000003e _ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE
0001a5ec g     F .text	000000e0 hal_spi_txrx_noblock
00017874 g     F .text	00000038 _ZN4core6option13expect_failed17had6579abaad447b4E
0001865a g     F .text	00000026 _ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE
0000907c g     F .text	0000000a _ZN6mynewt3sys7console5flush17h78b2f38352f0d691E
00008164  w    F .text	00000002 TEMP_IRQHandler
00008ece g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE
0001b6e8 g     F .text	00000030 os_sched_ctx_sw_hook
0001d17c g     F .text	0000002e sensor_mgr_register
000178ac g     F .text	0000004a _ZN4core6option18expect_none_failed17h54d938081af97677E
00017ef8 g     F .text	000001c0 _ZN4core3fmt5write17hd95ac78ed22a2252E
0000d032 g     F .text	00000008 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcdf096192109e52aE
00008154  w    F .text	00000002 NMI_Handler
000144ee g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE
0000917e g     F .text	0000008a _ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE
00017416 g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E
00008d4c g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E
00011d5e g     F .text	0000000c _ZN4core3ptr5write17h4a80332de2cee3d3E
00016ac0 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E
0001af9c g     F .text	00000032 os_mbuf_get
2000deb8 g     O .bss	00000008 g_os_task_list
00008928 g     F .text	0000014c _ZN6mynewt4Strn8validate17h1102378208cc75cdE
00017bc2 g     F .text	000000d2 _ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E
0001c57c g     F .text	0000003a vsnprintf
000133c4 g     F .text	00000090 _ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E
0000cd90 g     F .text	00000060 _ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E
0001b410 g     F .text	000000b8 os_mutex_release
0001236a g     F .text	00000056 _ZN3log6logger17hf609e7cc1c031552E
0001211e g     F .text	0000004e _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E
0001d030 g     F .text	0000000c sensor_mgr_evq_get
000168e8 g     F .text	00000058 _ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E
00011ec0 g     F .text	00000018 _ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E
0001503a g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE
2000de8c g     O .bss	00000004 g_os_idle_ctr
00019b80 g     F .text	0000002c hal_gpio_init_in
0000c5d4 g     F .text	00000014 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17h93c2f95ba0774bb2E
0000c062 g     F .text	00000234 _ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E
00011e5c g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE
0000990e g     F .text	00000036 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E
00008164  w    F .text	00000002 TIMER1_IRQHandler
0001ce3c g     F .text	00000002 sensor_dev_create
000119ce g     F .text	0000008e _ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE
00008164  w    F .text	00000002 TIMER0_IRQHandler
000088dc g     F .text	00000010 _ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE
00019bac g     F .text	00000038 hal_gpio_init_out
00008d6e g     F .text	00000160 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE
00011af0 g     F .text	00000012 _ZN4core3mem4swap17hc4afbec7b5ffb125E
0001734a g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E
0001605a g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E
000113ca g     F .text	0000000e _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha7bddc00a7b74e11E
00016a00 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E
00009402 g     F .text	0000003e .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE
200000d8 g       .data	00000000 __data_start__
0001bbd4 g     F .text	0000000c os_time_get
000178fc g     F .text	00000008 _ZN4core5panic8Location4file17h61e77cb122865fdbE
0000cbf0 g     F .text	0000009c _ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE
0000a678 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E
0001b28c g     F .text	00000026 os_memblock_put
00013454 g     F .text	00000128 _ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE
0001b730 g     F .text	00000090 os_sched_sleep
000112b0 g     F .text	00000038 _ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h2c4566debb9a5deaE
00011e9a g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE
0000d054 g     F .text	00000014 _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h958b1d5c274bc415E
0001d004 g     F .text	0000001c sensor_mgr_lock
0001ddd8 g     F .text	000002cc .hidden __udivmoddi4
0001155a g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E
0001c9b4 g     F .text	000000a0 os_tick_init
0001475e g     F .text	00000052 _ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E
000178f6 g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E
00008164  w    F .text	00000002 RTC0_IRQHandler
00008ff0 g     F .text	00000044 _ZN6mynewt3sys7console5print17hc13a6743274d87fcE
0001b874 g     F .text	00000040 os_sched_wakeup_ticks
0000933e g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE
0001cd88 g     F .text	00000030 hal_timer_read
20000144 g       .data	00000000 __data_end__
00019cb4 g     F .text	00000028 hal_gpio_irq_enable
0001d7cc g     F .text	0000000c oc_evq_set
0001d34c g     F .text	00000018 is_sensor_node
00019066 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE
0001d844 g     F .text	00000024 oc_init
0001929e g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h54b904d9d5d295daE
0001929e g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h85ec06f2c95e1ecaE
0000971c g     F .text	000000bc _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE
00018836 g     F .text	0000034c _ZN4core3str16slice_error_fail17h232f9181d55b3da9E
0001710a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E
2000df48 g     O .bss	00000018 sensor_base_ts
00019594 g     F .text	000000f4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E
00016df8 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E
0002203c g       .ARM.exidx	00000000 __etext
00011512 g     F .text	00000012 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE
00019122 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E
00019a50 g     F .text	0000000c console_get_ticks
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
00009034 g     F .text	0000000a _ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E
20000108 g     O .data	00000004 hal_twi_i2c1
00014d1c g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E
0001ba54 g     F .text	000000d8 os_task_init
0001620a g     F .text	0000000a _ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E
00008f68 g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E
00011aa2 g     F .text	0000001a _ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE
000113b8 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h6a385a1eb638dc34E
00011e8a g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E
00017458 g     F .text	00000042 _ZN4core3ptr4read17h27a035d1812d8297E
000172ba g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E
0001b920 g     F .text	00000064 os_sem_release
0001e0b4 g     F .text	0000009a __aeabi_memset
0001b0f8 g     F .text	000000b8 os_mbuf_dup
0001beb8 g     F .text	00000046 PendSV_Handler
0001278c g     F .text	00000014 _ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E
0001be72 g     F .text	00000046 SVC_Handler
00008826 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17he6c5bffce3c304d4E
0001bcc4 g     F .text	0000000c os_arch_save_sr
00014976 g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E
00008164  w    F .text	00000002 PWM2_IRQHandler
0000815c  w    F .text	00000002 UsageFault_Handler
0001cc20 g     F .text	00000010 nrf52_timer0_irq_handler
0001bce0 g     F .text	00000040 os_arch_task_stack_init
2000df88 g       .bss	00000000 __bss_end__
00016b90 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E
0001118e g     F .text	00000010 _ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h8b365b2b37e7ae5bE
0001b23c g     F .text	00000032 os_memblock_get
000113d8 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h84f26bbc979819d7E
00010e16 g     F .text	00000026 _ZN8libchip814Chip8$LT$T$GT$4next17h59db21f4d7eca91dE
2000df84 g     O .bss	00000004 flash_map
00008164  w    F .text	00000002 RADIO_IRQHandler
00011bba g     F .text	00000056 _ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE
00008164  w    F .text	00000002 TIMER2_IRQHandler
0001162e g     F .text	000000c4 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E
0001a784 g     F .text	00000014 hal_watchdog_tickle
000110be g     F .text	000000c0 _ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E
0000a70c g     F .text	00000010 _ZN4core3ptr13drop_in_place17h0697ea54608a328fE
00015468 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE
0001ae42 g     F .text	0000007a os_eventq_get
0001dd88 g     F .text	00000020 sprintf
0000d03a g     F .text	0000001a _ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE
0001bc80 g     F .text	00000026 os_time_ms_to_ticks
000088ec g     F .text	0000003c _ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E
0000c6ac g     F .text	00000008 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17hef68fad30077c365E
0001734e g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E
0000ac36 g     F .text	00000036 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE
2000d9e8 g     O .bss	00000004 os_flags
0001d874 g     F .text	00000028 oc_rep_init
0001bf84 g     F .text	0000001a memcpy
0001c668 g     F .text	00000044 sysinit_app
00015f90 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE
00012106 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E
0000c2b0 g     F .text	0000000a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h510c8ec9a996caccE
000170da g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E
000194c4 g     F .text	000000d0 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E
00014036 g     F .text	0000036c _ZN6mynewt3hal3SPI4init17h97467ea724680fb5E
00012686 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE
00019954 g     F .text	0000003c console_out_nolock
2000df60 g     O .bss	00000020 oc_transports
00019c3c g     F .text	00000078 hal_gpio_irq_init
00014a80 g     F .text	00000020 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE
0001bff2 g     F .text	00000010 strlen
0001b984 g     F .text	000000b8 os_sem_pend
0001170e g     F .text	00000016 _ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE
0001c91c g     F .text	00000098 os_tick_idle
000126cc g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E
00016a56 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
00000000 g       .svc_table	00000000 SVC_Table
00012816 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE
00015f76 g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E
2000fe50 g       *ABS*	00000000 __HeapLimit
0001aa54 g     F .text	00000038 os_pkg_init
20000144 g       .bssnz	00000000 __bssnz_start__
000093ae g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17had883e363867a05eE
00011a5c g     F .text	00000012 _ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E
0000a6cc g     F .text	0000001a .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E
0001525a g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE
00008164  w    F .text	00000002 ECB_IRQHandler
000143a2 g     F .text	00000004 _ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E
00016c04 g     F .text	00000018 .hidden _ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E
00008158  w    F .text	00000002 MemoryManagement_Handler
0001929e g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17hc11e05ad6528dc14E
00014620 g     F .text	000000ba _ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE
0001adda g     F .text	00000068 os_eventq_put
20010000 g       .bss	00000000 __StackTop
00014fe8 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E
00009944 g     F .text	0000003c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E
000118d8 g     F .text	00000012 _ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE
00014efa g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE
0001dbfe g     F .text	0000000a mfg_read_tlv_mmr_ref
00008b48 g     F .text	00000018 _ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E
0001d40c g     F .text	000000c0 sensor_network_init
0001929e g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE
00016cdc g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE
00008bf4 g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE
00012714 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	0001be73 	.word	0x0001be73
	...
    8058:	0001beb9 	.word	0x0001beb9
    805c:	0001beff 	.word	0x0001beff
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f826 	bl	8178 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20000148 	.word	0x20000148
    ldr     r3, =__bss_end__
    8134:	2000df88 	.word	0x2000df88
    ldr    r1, =__etext
    8138:	0002203c 	.word	0x0002203c
    ldr    r2, =__data_start__
    813c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
    8140:	20000144 	.word	0x20000144
    LDR     R0, =__HeapBase
    8144:	2000df88 	.word	0x2000df88
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	0000842d 	.word	0x0000842d
    LDR     R0, =_start
    8150:	00008601 	.word	0x00008601

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	200000d8 	.word	0x200000d8

00008178 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    8178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    817c:	2201      	movs	r2, #1
    817e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    8182:	4770      	bx	lr

00008184 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    8184:	4b02      	ldr	r3, [pc, #8]	; (8190 <hal_debugger_connected+0xc>)
    8186:	6818      	ldr	r0, [r3, #0]
}
    8188:	f000 0001 	and.w	r0, r0, #1
    818c:	4770      	bx	lr
    818e:	bf00      	nop
    8190:	e000edf0 	.word	0xe000edf0

00008194 <hal_system_reset>:
{
    8194:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    8196:	f7ff fff5 	bl	8184 <hal_debugger_connected>
    819a:	b100      	cbz	r0, 819e <hal_system_reset+0xa>
            asm("bkpt");
    819c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    819e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81a2:	4905      	ldr	r1, [pc, #20]	; (81b8 <hal_system_reset+0x24>)
    81a4:	68ca      	ldr	r2, [r1, #12]
    81a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81aa:	4b04      	ldr	r3, [pc, #16]	; (81bc <hal_system_reset+0x28>)
    81ac:	4313      	orrs	r3, r2
    81ae:	60cb      	str	r3, [r1, #12]
    81b0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81b4:	bf00      	nop
    81b6:	e7fd      	b.n	81b4 <hal_system_reset+0x20>
    81b8:	e000ed00 	.word	0xe000ed00
    81bc:	05fa0004 	.word	0x05fa0004

000081c0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81c4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81c8:	4b0f      	ldr	r3, [pc, #60]	; (8208 <hal_system_clock_start+0x48>)
    81ca:	4013      	ands	r3, r2
    81cc:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    81d0:	d018      	beq.n	8204 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    81d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81d6:	2201      	movs	r2, #1
    81d8:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    81da:	2100      	movs	r1, #0
    81dc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    81e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    81e4:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    81e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    81ee:	2b00      	cmp	r3, #0
    81f0:	d0f9      	beq.n	81e6 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    81f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81fa:	4b03      	ldr	r3, [pc, #12]	; (8208 <hal_system_clock_start+0x48>)
    81fc:	4013      	ands	r3, r2
    81fe:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    8202:	d1f0      	bne.n	81e6 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8204:	4770      	bx	lr
    8206:	bf00      	nop
    8208:	00010003 	.word	0x00010003

0000820c <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    820c:	4b0b      	ldr	r3, [pc, #44]	; (823c <errata_16+0x30>)
    820e:	781b      	ldrb	r3, [r3, #0]
    8210:	2b06      	cmp	r3, #6
    8212:	d001      	beq.n	8218 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8214:	2000      	movs	r0, #0
    8216:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8218:	4b09      	ldr	r3, [pc, #36]	; (8240 <errata_16+0x34>)
    821a:	681b      	ldr	r3, [r3, #0]
    821c:	f013 0f0f 	tst.w	r3, #15
    8220:	d107      	bne.n	8232 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8222:	4b08      	ldr	r3, [pc, #32]	; (8244 <errata_16+0x38>)
    8224:	681b      	ldr	r3, [r3, #0]
    8226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    822a:	2b30      	cmp	r3, #48	; 0x30
    822c:	d003      	beq.n	8236 <errata_16+0x2a>
    return false;
    822e:	2000      	movs	r0, #0
    8230:	4770      	bx	lr
    8232:	2000      	movs	r0, #0
    8234:	4770      	bx	lr
            return true;
    8236:	2001      	movs	r0, #1
}
    8238:	4770      	bx	lr
    823a:	bf00      	nop
    823c:	f0000fe0 	.word	0xf0000fe0
    8240:	f0000fe4 	.word	0xf0000fe4
    8244:	f0000fe8 	.word	0xf0000fe8

00008248 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	4b0f      	ldr	r3, [pc, #60]	; (8288 <errata_31+0x40>)
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	2b06      	cmp	r3, #6
    824e:	d001      	beq.n	8254 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8250:	2000      	movs	r0, #0
    8252:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8254:	4b0d      	ldr	r3, [pc, #52]	; (828c <errata_31+0x44>)
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	f013 0f0f 	tst.w	r3, #15
    825c:	d10b      	bne.n	8276 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    825e:	4b0c      	ldr	r3, [pc, #48]	; (8290 <errata_31+0x48>)
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8266:	2b30      	cmp	r3, #48	; 0x30
    8268:	d007      	beq.n	827a <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    826a:	2b40      	cmp	r3, #64	; 0x40
    826c:	d007      	beq.n	827e <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    826e:	2b50      	cmp	r3, #80	; 0x50
    8270:	d007      	beq.n	8282 <errata_31+0x3a>
    return false;
    8272:	2000      	movs	r0, #0
    8274:	4770      	bx	lr
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
            return true;
    827a:	2001      	movs	r0, #1
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
    8280:	4770      	bx	lr
            return true;
    8282:	2001      	movs	r0, #1
}
    8284:	4770      	bx	lr
    8286:	bf00      	nop
    8288:	f0000fe0 	.word	0xf0000fe0
    828c:	f0000fe4 	.word	0xf0000fe4
    8290:	f0000fe8 	.word	0xf0000fe8

00008294 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8294:	4b0b      	ldr	r3, [pc, #44]	; (82c4 <errata_32+0x30>)
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	2b06      	cmp	r3, #6
    829a:	d001      	beq.n	82a0 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    829c:	2000      	movs	r0, #0
    829e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82a0:	4b09      	ldr	r3, [pc, #36]	; (82c8 <errata_32+0x34>)
    82a2:	681b      	ldr	r3, [r3, #0]
    82a4:	f013 0f0f 	tst.w	r3, #15
    82a8:	d107      	bne.n	82ba <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82aa:	4b08      	ldr	r3, [pc, #32]	; (82cc <errata_32+0x38>)
    82ac:	681b      	ldr	r3, [r3, #0]
    82ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82b2:	2b30      	cmp	r3, #48	; 0x30
    82b4:	d003      	beq.n	82be <errata_32+0x2a>
    return false;
    82b6:	2000      	movs	r0, #0
    82b8:	4770      	bx	lr
    82ba:	2000      	movs	r0, #0
    82bc:	4770      	bx	lr
            return true;
    82be:	2001      	movs	r0, #1
}
    82c0:	4770      	bx	lr
    82c2:	bf00      	nop
    82c4:	f0000fe0 	.word	0xf0000fe0
    82c8:	f0000fe4 	.word	0xf0000fe4
    82cc:	f0000fe8 	.word	0xf0000fe8

000082d0 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82d0:	4b0f      	ldr	r3, [pc, #60]	; (8310 <errata_36+0x40>)
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	4b0d      	ldr	r3, [pc, #52]	; (8314 <errata_36+0x44>)
    82de:	681b      	ldr	r3, [r3, #0]
    82e0:	f013 0f0f 	tst.w	r3, #15
    82e4:	d10b      	bne.n	82fe <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82e6:	4b0c      	ldr	r3, [pc, #48]	; (8318 <errata_36+0x48>)
    82e8:	681b      	ldr	r3, [r3, #0]
    82ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ee:	2b30      	cmp	r3, #48	; 0x30
    82f0:	d007      	beq.n	8302 <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82f2:	2b40      	cmp	r3, #64	; 0x40
    82f4:	d007      	beq.n	8306 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82f6:	2b50      	cmp	r3, #80	; 0x50
    82f8:	d007      	beq.n	830a <errata_36+0x3a>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
    8304:	4770      	bx	lr
            return true;
    8306:	2001      	movs	r0, #1
    8308:	4770      	bx	lr
            return true;
    830a:	2001      	movs	r0, #1
}
    830c:	4770      	bx	lr
    830e:	bf00      	nop
    8310:	f0000fe0 	.word	0xf0000fe0
    8314:	f0000fe4 	.word	0xf0000fe4
    8318:	f0000fe8 	.word	0xf0000fe8

0000831c <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    831c:	4b0b      	ldr	r3, [pc, #44]	; (834c <errata_37+0x30>)
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	2b06      	cmp	r3, #6
    8322:	d001      	beq.n	8328 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8324:	2000      	movs	r0, #0
    8326:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8328:	4b09      	ldr	r3, [pc, #36]	; (8350 <errata_37+0x34>)
    832a:	681b      	ldr	r3, [r3, #0]
    832c:	f013 0f0f 	tst.w	r3, #15
    8330:	d107      	bne.n	8342 <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8332:	4b08      	ldr	r3, [pc, #32]	; (8354 <errata_37+0x38>)
    8334:	681b      	ldr	r3, [r3, #0]
    8336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    833a:	2b30      	cmp	r3, #48	; 0x30
    833c:	d003      	beq.n	8346 <errata_37+0x2a>
    return false;
    833e:	2000      	movs	r0, #0
    8340:	4770      	bx	lr
    8342:	2000      	movs	r0, #0
    8344:	4770      	bx	lr
            return true;
    8346:	2001      	movs	r0, #1
}
    8348:	4770      	bx	lr
    834a:	bf00      	nop
    834c:	f0000fe0 	.word	0xf0000fe0
    8350:	f0000fe4 	.word	0xf0000fe4
    8354:	f0000fe8 	.word	0xf0000fe8

00008358 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8358:	4b0b      	ldr	r3, [pc, #44]	; (8388 <errata_57+0x30>)
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	2b06      	cmp	r3, #6
    835e:	d001      	beq.n	8364 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8360:	2000      	movs	r0, #0
    8362:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8364:	4b09      	ldr	r3, [pc, #36]	; (838c <errata_57+0x34>)
    8366:	681b      	ldr	r3, [r3, #0]
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d107      	bne.n	837e <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	4b08      	ldr	r3, [pc, #32]	; (8390 <errata_57+0x38>)
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8376:	2b30      	cmp	r3, #48	; 0x30
    8378:	d003      	beq.n	8382 <errata_57+0x2a>
    return false;
    837a:	2000      	movs	r0, #0
    837c:	4770      	bx	lr
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
            return true;
    8382:	2001      	movs	r0, #1
}
    8384:	4770      	bx	lr
    8386:	bf00      	nop
    8388:	f0000fe0 	.word	0xf0000fe0
    838c:	f0000fe4 	.word	0xf0000fe4
    8390:	f0000fe8 	.word	0xf0000fe8

00008394 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8394:	4b0b      	ldr	r3, [pc, #44]	; (83c4 <errata_66+0x30>)
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	2b06      	cmp	r3, #6
    839a:	d001      	beq.n	83a0 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    839c:	2000      	movs	r0, #0
    839e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <errata_66+0x34>)
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	f013 0f0f 	tst.w	r3, #15
    83a8:	d107      	bne.n	83ba <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83aa:	4b08      	ldr	r3, [pc, #32]	; (83cc <errata_66+0x38>)
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b2:	2b50      	cmp	r3, #80	; 0x50
    83b4:	d003      	beq.n	83be <errata_66+0x2a>
    return false;
    83b6:	2000      	movs	r0, #0
    83b8:	4770      	bx	lr
    83ba:	2000      	movs	r0, #0
    83bc:	4770      	bx	lr
            return true;
    83be:	2001      	movs	r0, #1
}
    83c0:	4770      	bx	lr
    83c2:	bf00      	nop
    83c4:	f0000fe0 	.word	0xf0000fe0
    83c8:	f0000fe4 	.word	0xf0000fe4
    83cc:	f0000fe8 	.word	0xf0000fe8

000083d0 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d0:	4b0f      	ldr	r3, [pc, #60]	; (8410 <errata_108+0x40>)
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	2b06      	cmp	r3, #6
    83d6:	d001      	beq.n	83dc <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d8:	2000      	movs	r0, #0
    83da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83dc:	4b0d      	ldr	r3, [pc, #52]	; (8414 <errata_108+0x44>)
    83de:	681b      	ldr	r3, [r3, #0]
    83e0:	f013 0f0f 	tst.w	r3, #15
    83e4:	d10b      	bne.n	83fe <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83e6:	4b0c      	ldr	r3, [pc, #48]	; (8418 <errata_108+0x48>)
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b30      	cmp	r3, #48	; 0x30
    83f0:	d007      	beq.n	8402 <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    83f2:	2b40      	cmp	r3, #64	; 0x40
    83f4:	d007      	beq.n	8406 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83f6:	2b50      	cmp	r3, #80	; 0x50
    83f8:	d007      	beq.n	840a <errata_108+0x3a>
    return false;
    83fa:	2000      	movs	r0, #0
    83fc:	4770      	bx	lr
    83fe:	2000      	movs	r0, #0
    8400:	4770      	bx	lr
            return true;
    8402:	2001      	movs	r0, #1
    8404:	4770      	bx	lr
            return true;
    8406:	2001      	movs	r0, #1
    8408:	4770      	bx	lr
            return true;
    840a:	2001      	movs	r0, #1
}
    840c:	4770      	bx	lr
    840e:	bf00      	nop
    8410:	f0000fe0 	.word	0xf0000fe0
    8414:	f0000fe4 	.word	0xf0000fe4
    8418:	f0000fe8 	.word	0xf0000fe8

0000841c <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    841c:	4b01      	ldr	r3, [pc, #4]	; (8424 <SystemCoreClockUpdate+0x8>)
    841e:	4a02      	ldr	r2, [pc, #8]	; (8428 <SystemCoreClockUpdate+0xc>)
    8420:	601a      	str	r2, [r3, #0]
}
    8422:	4770      	bx	lr
    8424:	200000e4 	.word	0x200000e4
    8428:	03d09000 	.word	0x03d09000

0000842c <SystemInit>:
{
    842c:	b508      	push	{r3, lr}
    if (errata_16()){
    842e:	f7ff feed 	bl	820c <errata_16>
    8432:	b110      	cbz	r0, 843a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8434:	4b65      	ldr	r3, [pc, #404]	; (85cc <SystemInit+0x1a0>)
    8436:	4a66      	ldr	r2, [pc, #408]	; (85d0 <SystemInit+0x1a4>)
    8438:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    843a:	f7ff ff05 	bl	8248 <errata_31>
    843e:	b128      	cbz	r0, 844c <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    8440:	4b64      	ldr	r3, [pc, #400]	; (85d4 <SystemInit+0x1a8>)
    8442:	681b      	ldr	r3, [r3, #0]
    8444:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8448:	4a63      	ldr	r2, [pc, #396]	; (85d8 <SystemInit+0x1ac>)
    844a:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    844c:	f7ff ff22 	bl	8294 <errata_32>
    8450:	b120      	cbz	r0, 845c <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8452:	4a62      	ldr	r2, [pc, #392]	; (85dc <SystemInit+0x1b0>)
    8454:	68d3      	ldr	r3, [r2, #12]
    8456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    845a:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    845c:	f7ff ff38 	bl	82d0 <errata_36>
    8460:	b140      	cbz	r0, 8474 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
    8462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8466:	2200      	movs	r2, #0
    8468:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    846c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    8470:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    8474:	f7ff ff52 	bl	831c <errata_37>
    8478:	b110      	cbz	r0, 8480 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    847a:	4b59      	ldr	r3, [pc, #356]	; (85e0 <SystemInit+0x1b4>)
    847c:	2203      	movs	r2, #3
    847e:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    8480:	f7ff ff6a 	bl	8358 <errata_57>
    8484:	b158      	cbz	r0, 849e <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    8486:	4b57      	ldr	r3, [pc, #348]	; (85e4 <SystemInit+0x1b8>)
    8488:	2205      	movs	r2, #5
    848a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    848c:	3378      	adds	r3, #120	; 0x78
    848e:	2201      	movs	r2, #1
    8490:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    8492:	3b70      	subs	r3, #112	; 0x70
    8494:	2200      	movs	r2, #0
    8496:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    8498:	3b04      	subs	r3, #4
    849a:	223f      	movs	r2, #63	; 0x3f
    849c:	601a      	str	r2, [r3, #0]
    if (errata_66()){
    849e:	f7ff ff79 	bl	8394 <errata_66>
    84a2:	2800      	cmp	r0, #0
    84a4:	d046      	beq.n	8534 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84aa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ae:	4b4e      	ldr	r3, [pc, #312]	; (85e8 <SystemInit+0x1bc>)
    84b0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84b4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84b8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84bc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84c0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    84c4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    84c8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    84cc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    84d0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    84d4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    84d8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    84dc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    84e0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    84e4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    84e8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    84ec:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    84f0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    84f4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    84f8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    84fc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8500:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8504:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8508:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    850c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8510:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8514:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8518:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    851c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8520:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8524:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8528:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    852c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8530:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8534:	f7ff ff4c 	bl	83d0 <errata_108>
    8538:	b128      	cbz	r0, 8546 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    853a:	4b2c      	ldr	r3, [pc, #176]	; (85ec <SystemInit+0x1c0>)
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8542:	4a2b      	ldr	r2, [pc, #172]	; (85f0 <SystemInit+0x1c4>)
    8544:	6013      	str	r3, [r2, #0]
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    8546:	4a2b      	ldr	r2, [pc, #172]	; (85f4 <SystemInit+0x1c8>)
    8548:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    854c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    8554:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8558:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    855c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8560:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    8564:	f013 0f01 	tst.w	r3, #1
    8568:	d104      	bne.n	8574 <SystemInit+0x148>
    SystemCoreClockUpdate();
    856a:	f7ff ff57 	bl	841c <SystemCoreClockUpdate>
    NVIC_Relocate();
    856e:	f011 fa85 	bl	19a7c <NVIC_Relocate>
}
    8572:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    8574:	4b20      	ldr	r3, [pc, #128]	; (85f8 <SystemInit+0x1cc>)
    8576:	2201      	movs	r2, #1
    8578:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    857c:	4b1e      	ldr	r3, [pc, #120]	; (85f8 <SystemInit+0x1cc>)
    857e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8582:	2b00      	cmp	r3, #0
    8584:	d0fa      	beq.n	857c <SystemInit+0x150>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    8586:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    858a:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    858e:	f023 0301 	bic.w	r3, r3, #1
    8592:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8596:	4b18      	ldr	r3, [pc, #96]	; (85f8 <SystemInit+0x1cc>)
    8598:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    859c:	2b00      	cmp	r3, #0
    859e:	d0fa      	beq.n	8596 <SystemInit+0x16a>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85a0:	4b15      	ldr	r3, [pc, #84]	; (85f8 <SystemInit+0x1cc>)
    85a2:	2200      	movs	r2, #0
    85a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85a8:	4b13      	ldr	r3, [pc, #76]	; (85f8 <SystemInit+0x1cc>)
    85aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85ae:	2b00      	cmp	r3, #0
    85b0:	d0fa      	beq.n	85a8 <SystemInit+0x17c>
  __ASM volatile ("dsb 0xF":::"memory");
    85b2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85b6:	490f      	ldr	r1, [pc, #60]	; (85f4 <SystemInit+0x1c8>)
    85b8:	68ca      	ldr	r2, [r1, #12]
    85ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    85be:	4b0f      	ldr	r3, [pc, #60]	; (85fc <SystemInit+0x1d0>)
    85c0:	4313      	orrs	r3, r2
    85c2:	60cb      	str	r3, [r1, #12]
    85c4:	f3bf 8f4f 	dsb	sy
    __NOP();
    85c8:	bf00      	nop
    85ca:	e7fd      	b.n	85c8 <SystemInit+0x19c>
    85cc:	4007c074 	.word	0x4007c074
    85d0:	baadf00d 	.word	0xbaadf00d
    85d4:	10000244 	.word	0x10000244
    85d8:	4000053c 	.word	0x4000053c
    85dc:	e000edf0 	.word	0xe000edf0
    85e0:	400005a0 	.word	0x400005a0
    85e4:	40005610 	.word	0x40005610
    85e8:	4000c000 	.word	0x4000c000
    85ec:	10000258 	.word	0x10000258
    85f0:	40000ee4 	.word	0x40000ee4
    85f4:	e000ed00 	.word	0xe000ed00
    85f8:	4001e000 	.word	0x4001e000
    85fc:	05fa0004 	.word	0x05fa0004

00008600 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8600:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8602:	4803      	ldr	r0, [pc, #12]	; (8610 <_start+0x10>)
    8604:	f012 f9c0 	bl	1a988 <os_init>
    os_start();
    8608:	f012 fa16 	bl	1aa38 <os_start>
#endif
}
    860c:	bd08      	pop	{r3, pc}
    860e:	bf00      	nop
    8610:	00008617 	.word	0x00008617

00008614 <_init>:

void
_init(void)
{
}
    8614:	4770      	bx	lr

00008616 <main>:
pub fn handle_touch(_x: u16, _y: u16) { console::print("touch not handled\n"); console::flush(); }  //  Define a touch handler that does nothing

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
    8616:	b088      	sub	sp, #32
    //  Initialise the Mynewt packages and internal temperature sensor driver. Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/nrf52_my_sensor/generated/src/nrf52_my_sensor-sysinit-app.c
    mynewt::sysinit();
    8618:	f000 f960 	bl	88dc <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>
    861c:	e7ff      	b.n	861e <main+0x8>
    //  extern { fn start_ble() -> i32; }
    //  let rc = unsafe { start_ble() };
    //  assert!(rc == 0, "BLE fail");

    //  Start the display
    druid::start_display()
    861e:	f000 ff31 	bl	9484 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>
    8622:	9005      	str	r0, [sp, #20]
    8624:	e7ff      	b.n	8626 <main+0x10>
    8626:	f24e 114e 	movw	r1, #57678	; 0xe14e
    862a:	f2c0 0101 	movt	r1, #1
    862e:	f24e 1384 	movw	r3, #57732	; 0xe184
    8632:	f2c0 0301 	movt	r3, #1
    8636:	2208      	movs	r2, #8
    8638:	9805      	ldr	r0, [sp, #20]
    863a:	f000 fa5e 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    863e:	e7ff      	b.n	8640 <main+0x2a>
    #[cfg(feature = "display_app")]  //  If graphics display app is enabled...
    display::test_display()
        .expect("DSP test fail");

    //  Start the touch sensor
    touch_sensor::start_touch_sensor()
    8640:	f002 fbdd 	bl	adfe <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E>
    8644:	9004      	str	r0, [sp, #16]
    8646:	e7ff      	b.n	8648 <main+0x32>
    8648:	f24e 1156 	movw	r1, #57686	; 0xe156
    864c:	f2c0 0101 	movt	r1, #1
    8650:	f24e 1394 	movw	r3, #57748	; 0xe194
    8654:	f2c0 0301 	movt	r3, #1
    8658:	2208      	movs	r2, #8
    865a:	9804      	ldr	r0, [sp, #16]
    865c:	f000 fa4d 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8660:	e7ff      	b.n	8662 <main+0x4c>
    visual::on_start()
        .expect("VIS fail");

    //  Launch the CHIP8 Emulator app
    #[cfg(feature = "chip8_app")]  //  If CHIP8 Emulator app is enabled...
    chip8::on_start()
    8662:	f003 fa3d 	bl	bae0 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E>
    8666:	9003      	str	r0, [sp, #12]
    8668:	e7ff      	b.n	866a <main+0x54>
    866a:	f24e 11a4 	movw	r1, #57764	; 0xe1a4
    866e:	f2c0 0101 	movt	r1, #1
    8672:	f24e 13b0 	movw	r3, #57776	; 0xe1b0
    8676:	f2c0 0301 	movt	r3, #1
    867a:	220a      	movs	r2, #10
    867c:	9803      	ldr	r0, [sp, #12]
    867e:	f000 fa3c 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8682:	e7ff      	b.n	8684 <main+0x6e>
        .expect("CHIP8 fail");

    //  Main event loop
    loop {                            //  Loop forever...
    8684:	e7ff      	b.n	8686 <main+0x70>
    8686:	a806      	add	r0, sp, #24
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
    8688:	f000 faf2 	bl	8c70 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    868c:	e7ff      	b.n	868e <main+0x78>
    868e:	f24e 115e 	movw	r1, #57694	; 0xe15e
    8692:	f2c0 0101 	movt	r1, #1
    8696:	f24e 13c0 	movw	r3, #57792	; 0xe1c0
    869a:	f2c0 0301 	movt	r3, #1
    869e:	a806      	add	r0, sp, #24
    86a0:	2208      	movs	r2, #8
    86a2:	f000 f896 	bl	87d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>
    86a6:	9002      	str	r0, [sp, #8]
    86a8:	e7ff      	b.n	86aa <main+0x94>
        os::eventq_run(               //  Processing events...
    86aa:	9802      	ldr	r0, [sp, #8]
    86ac:	f000 fad7 	bl	8c5e <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
    86b0:	9001      	str	r0, [sp, #4]
    86b2:	e7ff      	b.n	86b4 <main+0x9e>
    86b4:	f24e 1166 	movw	r1, #57702	; 0xe166
    86b8:	f2c0 0101 	movt	r1, #1
    86bc:	f24e 13d0 	movw	r3, #57808	; 0xe1d0
    86c0:	f2c0 0301 	movt	r3, #1
    86c4:	2208      	movs	r2, #8
    86c6:	9801      	ldr	r0, [sp, #4]
    86c8:	f000 fa17 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    86cc:	e7ff      	b.n	86ce <main+0xb8>
    loop {                            //  Loop forever...
    86ce:	e7da      	b.n	8686 <main+0x70>

000086d0 <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    86d0:	b08e      	sub	sp, #56	; 0x38
    86d2:	900b      	str	r0, [sp, #44]	; 0x2c
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
    86d4:	f24e 11e0 	movw	r1, #57824	; 0xe1e0
    86d8:	f2c0 0101 	movt	r1, #1
    86dc:	2206      	movs	r2, #6
    86de:	9007      	str	r0, [sp, #28]
    86e0:	4608      	mov	r0, r1
    86e2:	4611      	mov	r1, r2
    86e4:	f000 fc84 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    86e8:	e7ff      	b.n	86ea <rust_begin_unwind+0x1a>
    if let Some(location) = info.location() {
    86ea:	9807      	ldr	r0, [sp, #28]
    86ec:	f00f f903 	bl	178f6 <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>
    86f0:	9008      	str	r0, [sp, #32]
    86f2:	e7ff      	b.n	86f4 <rust_begin_unwind+0x24>
    86f4:	9808      	ldr	r0, [sp, #32]
    86f6:	2800      	cmp	r0, #0
    86f8:	d108      	bne.n	870c <rust_begin_unwind+0x3c>
    86fa:	e7ff      	b.n	86fc <rust_begin_unwind+0x2c>
        let line = location.line();
        console::print("at ");       console::buffer(&file);
        console::print(" line ");    console::printint(line as i32);
        console::print("\n");        console::flush();
    } else {
        console::print("no loc\n");  console::flush();
    86fc:	f24e 10e6 	movw	r0, #57830	; 0xe1e6
    8700:	f2c0 0001 	movt	r0, #1
    8704:	2107      	movs	r1, #7
    8706:	f000 fc73 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    870a:	e033      	b.n	8774 <rust_begin_unwind+0xa4>
    if let Some(location) = info.location() {
    870c:	9808      	ldr	r0, [sp, #32]
    870e:	900c      	str	r0, [sp, #48]	; 0x30
        let file = location.file();
    8710:	9006      	str	r0, [sp, #24]
    8712:	f00f f8f3 	bl	178fc <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8716:	910a      	str	r1, [sp, #40]	; 0x28
    8718:	9009      	str	r0, [sp, #36]	; 0x24
    871a:	e7ff      	b.n	871c <rust_begin_unwind+0x4c>
        let line = location.line();
    871c:	9806      	ldr	r0, [sp, #24]
    871e:	f00f f8f1 	bl	17904 <_ZN4core5panic8Location4line17h650a566d9637c91dE>
    8722:	4601      	mov	r1, r0
    8724:	900d      	str	r0, [sp, #52]	; 0x34
    8726:	9105      	str	r1, [sp, #20]
    8728:	e7ff      	b.n	872a <rust_begin_unwind+0x5a>
        console::print("at ");       console::buffer(&file);
    872a:	f24e 10ed 	movw	r0, #57837	; 0xe1ed
    872e:	f2c0 0001 	movt	r0, #1
    8732:	2103      	movs	r1, #3
    8734:	f000 fc5c 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8738:	e7ff      	b.n	873a <rust_begin_unwind+0x6a>
    873a:	9809      	ldr	r0, [sp, #36]	; 0x24
    873c:	990a      	ldr	r1, [sp, #40]	; 0x28
    873e:	f000 fc7e 	bl	903e <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>
    8742:	e7ff      	b.n	8744 <rust_begin_unwind+0x74>
        console::print(" line ");    console::printint(line as i32);
    8744:	f24e 10f0 	movw	r0, #57840	; 0xe1f0
    8748:	f2c0 0001 	movt	r0, #1
    874c:	2106      	movs	r1, #6
    874e:	f000 fc4f 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8752:	e7ff      	b.n	8754 <rust_begin_unwind+0x84>
    8754:	9805      	ldr	r0, [sp, #20]
    8756:	f000 fc89 	bl	906c <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    875a:	e7ff      	b.n	875c <rust_begin_unwind+0x8c>
        console::print("\n");        console::flush();
    875c:	f24e 10f6 	movw	r0, #57846	; 0xe1f6
    8760:	f2c0 0001 	movt	r0, #1
    8764:	2101      	movs	r1, #1
    8766:	f000 fc43 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    876a:	e7ff      	b.n	876c <rust_begin_unwind+0x9c>
    876c:	f000 fc86 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8770:	e7ff      	b.n	8772 <rust_begin_unwind+0xa2>
    if let Some(location) = info.location() {
    8772:	e003      	b.n	877c <rust_begin_unwind+0xac>
        console::print("no loc\n");  console::flush();
    8774:	f000 fc82 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8778:	e7ff      	b.n	877a <rust_begin_unwind+0xaa>
    if let Some(location) = info.location() {
    877a:	e7ff      	b.n	877c <rust_begin_unwind+0xac>
/// exception.
#[inline(always)]
pub fn bkpt() {
    match () {
        #[cfg(all(cortex_m, feature = "inline-asm"))]
        () => unsafe { asm!("bkpt" :::: "volatile") },
    877c:	be00      	bkpt	0x0000
    }
    //  Pause in the debugger.
    bkpt();
    877e:	e7ff      	b.n	8780 <rust_begin_unwind+0xb0>
    //  Display the payload.
    console::print(info.payload().downcast_ref::<&str>().unwrap());
    8780:	9807      	ldr	r0, [sp, #28]
    8782:	f00f f8bb 	bl	178fc <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8786:	9004      	str	r0, [sp, #16]
    8788:	9103      	str	r1, [sp, #12]
    878a:	e7ff      	b.n	878c <rust_begin_unwind+0xbc>
    878c:	9804      	ldr	r0, [sp, #16]
    878e:	9903      	ldr	r1, [sp, #12]
    8790:	f000 f899 	bl	88c6 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE>
    8794:	9002      	str	r0, [sp, #8]
    8796:	e7ff      	b.n	8798 <rust_begin_unwind+0xc8>
    8798:	f24e 11f8 	movw	r1, #57848	; 0xe1f8
    879c:	f2c0 0101 	movt	r1, #1
    87a0:	9802      	ldr	r0, [sp, #8]
    87a2:	f004 fac5 	bl	cd30 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E>
    87a6:	9001      	str	r0, [sp, #4]
    87a8:	e7ff      	b.n	87aa <rust_begin_unwind+0xda>
    87aa:	9801      	ldr	r0, [sp, #4]
    87ac:	6800      	ldr	r0, [r0, #0]
    87ae:	9901      	ldr	r1, [sp, #4]
    87b0:	6849      	ldr	r1, [r1, #4]
    87b2:	f000 fc1d 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87b6:	e7ff      	b.n	87b8 <rust_begin_unwind+0xe8>
    console::print("\n");  console::flush();
    87b8:	f24e 10f6 	movw	r0, #57846	; 0xe1f6
    87bc:	f2c0 0001 	movt	r0, #1
    87c0:	2101      	movs	r1, #1
    87c2:	f000 fc15 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87c6:	e7ff      	b.n	87c8 <rust_begin_unwind+0xf8>
    87c8:	f000 fc58 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    87cc:	e7ff      	b.n	87ce <rust_begin_unwind+0xfe>
    //  Loop forever so that device won't restart.
    loop {}
    87ce:	e7ff      	b.n	87d0 <rust_begin_unwind+0x100>
    87d0:	e7fe      	b.n	87d0 <rust_begin_unwind+0x100>

000087d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>:
    87d2:	b08a      	sub	sp, #40	; 0x28
    87d4:	9107      	str	r1, [sp, #28]
    87d6:	9208      	str	r2, [sp, #32]
    87d8:	f8d0 c000 	ldr.w	ip, [r0]
    87dc:	f1bc 0f00 	cmp.w	ip, #0
    87e0:	9305      	str	r3, [sp, #20]
    87e2:	9204      	str	r2, [sp, #16]
    87e4:	9103      	str	r1, [sp, #12]
    87e6:	9002      	str	r0, [sp, #8]
    87e8:	d011      	beq.n	880e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x3c>
    87ea:	e7ff      	b.n	87ec <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x1a>
    87ec:	9802      	ldr	r0, [sp, #8]
    87ee:	6841      	ldr	r1, [r0, #4]
    87f0:	9106      	str	r1, [sp, #24]
    87f2:	4669      	mov	r1, sp
    87f4:	9a05      	ldr	r2, [sp, #20]
    87f6:	600a      	str	r2, [r1, #0]
    87f8:	f24e 2308 	movw	r3, #57864	; 0xe208
    87fc:	f2c0 0301 	movt	r3, #1
    8800:	aa06      	add	r2, sp, #24
    8802:	9803      	ldr	r0, [sp, #12]
    8804:	9904      	ldr	r1, [sp, #16]
    8806:	f00f f851 	bl	178ac <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    880a:	defe      	udf	#254	; 0xfe
    880c:	defe      	udf	#254	; 0xfe
    880e:	9802      	ldr	r0, [sp, #8]
    8810:	6841      	ldr	r1, [r0, #4]
    8812:	9109      	str	r1, [sp, #36]	; 0x24
    8814:	6802      	ldr	r2, [r0, #0]
    8816:	2a00      	cmp	r2, #0
    8818:	9101      	str	r1, [sp, #4]
    881a:	d103      	bne.n	8824 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x52>
    881c:	e7ff      	b.n	881e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x4c>
    881e:	9801      	ldr	r0, [sp, #4]
    8820:	b00a      	add	sp, #40	; 0x28
    8822:	4770      	bx	lr
    8824:	e7fb      	b.n	881e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x4c>

00008826 <_ZN4core3ptr13drop_in_place17he6c5bffce3c304d4E>:
    8826:	b081      	sub	sp, #4
    8828:	9000      	str	r0, [sp, #0]
    882a:	b001      	add	sp, #4
    882c:	4770      	bx	lr

0000882e <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E>:
    882e:	b580      	push	{r7, lr}
    8830:	b086      	sub	sp, #24
    8832:	9004      	str	r0, [sp, #16]
    8834:	9105      	str	r1, [sp, #20]
    8836:	9002      	str	r0, [sp, #8]
    8838:	f000 f810 	bl	885c <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE>
    883c:	9001      	str	r0, [sp, #4]
    883e:	e7ff      	b.n	8840 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x12>
    8840:	9801      	ldr	r0, [sp, #4]
    8842:	07c1      	lsls	r1, r0, #31
    8844:	2900      	cmp	r1, #0
    8846:	d103      	bne.n	8850 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x22>
    8848:	e7ff      	b.n	884a <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x1c>
    884a:	2000      	movs	r0, #0
    884c:	9003      	str	r0, [sp, #12]
    884e:	e002      	b.n	8856 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x28>
    8850:	9802      	ldr	r0, [sp, #8]
    8852:	9003      	str	r0, [sp, #12]
    8854:	e7ff      	b.n	8856 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x28>
    8856:	9803      	ldr	r0, [sp, #12]
    8858:	b006      	add	sp, #24
    885a:	bd80      	pop	{r7, pc}

0000885c <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE>:
    885c:	b580      	push	{r7, lr}
    885e:	b08a      	sub	sp, #40	; 0x28
    8860:	9008      	str	r0, [sp, #32]
    8862:	9109      	str	r1, [sp, #36]	; 0x24
    8864:	9103      	str	r1, [sp, #12]
    8866:	9002      	str	r0, [sp, #8]
    8868:	f000 f815 	bl	8896 <_ZN4core3any6TypeId2of17haae5124a9f275cb8E>
    886c:	9105      	str	r1, [sp, #20]
    886e:	9004      	str	r0, [sp, #16]
    8870:	e7ff      	b.n	8872 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x16>
    8872:	9803      	ldr	r0, [sp, #12]
    8874:	68c1      	ldr	r1, [r0, #12]
    8876:	9802      	ldr	r0, [sp, #8]
    8878:	4788      	blx	r1
    887a:	9107      	str	r1, [sp, #28]
    887c:	9006      	str	r0, [sp, #24]
    887e:	e7ff      	b.n	8880 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x24>
    8880:	a804      	add	r0, sp, #16
    8882:	a906      	add	r1, sp, #24
    8884:	f002 faa9 	bl	adda <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E>
    8888:	9001      	str	r0, [sp, #4]
    888a:	e7ff      	b.n	888c <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x30>
    888c:	9801      	ldr	r0, [sp, #4]
    888e:	f000 0001 	and.w	r0, r0, #1
    8892:	b00a      	add	sp, #40	; 0x28
    8894:	bd80      	pop	{r7, pc}

00008896 <_ZN4core3any6TypeId2of17haae5124a9f275cb8E>:
    8896:	b086      	sub	sp, #24
    8898:	f249 40d9 	movw	r0, #38105	; 0x94d9
    889c:	f2c1 1010 	movt	r0, #4368	; 0x1110
    88a0:	9005      	str	r0, [sp, #20]
    88a2:	f249 7064 	movw	r0, #38756	; 0x9764
    88a6:	f2c7 00b0 	movt	r0, #28848	; 0x70b0
    88aa:	9004      	str	r0, [sp, #16]
    88ac:	9804      	ldr	r0, [sp, #16]
    88ae:	9905      	ldr	r1, [sp, #20]
    88b0:	9001      	str	r0, [sp, #4]
    88b2:	9100      	str	r1, [sp, #0]
    88b4:	e7ff      	b.n	88b6 <_ZN4core3any6TypeId2of17haae5124a9f275cb8E+0x20>
    88b6:	9801      	ldr	r0, [sp, #4]
    88b8:	9002      	str	r0, [sp, #8]
    88ba:	9900      	ldr	r1, [sp, #0]
    88bc:	9103      	str	r1, [sp, #12]
    88be:	9802      	ldr	r0, [sp, #8]
    88c0:	9903      	ldr	r1, [sp, #12]
    88c2:	b006      	add	sp, #24
    88c4:	4770      	bx	lr

000088c6 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE>:
    88c6:	b580      	push	{r7, lr}
    88c8:	b084      	sub	sp, #16
    88ca:	9002      	str	r0, [sp, #8]
    88cc:	9103      	str	r1, [sp, #12]
    88ce:	f7ff ffae 	bl	882e <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E>
    88d2:	9001      	str	r0, [sp, #4]
    88d4:	e7ff      	b.n	88d6 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE+0x10>
    88d6:	9801      	ldr	r0, [sp, #4]
    88d8:	b004      	add	sp, #16
    88da:	bd80      	pop	{r7, pc}

000088dc <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>:
pub use hal::{ Delay, GPIO, SPI };  //  Export `hal` types GPIO and SPI

pub mod spi;  //  Export Non-Blocking SPI API

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
pub fn sysinit() {
    88dc:	b580      	push	{r7, lr}
    unsafe { rust_sysinit(); }
    88de:	f013 fea3 	bl	1c628 <rust_sysinit>
    88e2:	e7ff      	b.n	88e4 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0x8>
    sys::console::flush();
    88e4:	f000 fbca 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    88e8:	e7ff      	b.n	88ea <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0xe>
}
    88ea:	bd80      	pop	{r7, pc}

000088ec <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>:
            rep: StrnRep::CStr(cstr)
        }
    }

    /// Return a pointer to the string
    pub fn as_ptr(&self) -> *const u8 {
    88ec:	b580      	push	{r7, lr}
    88ee:	b086      	sub	sp, #24
    88f0:	9002      	str	r0, [sp, #8]
        match self.rep {
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    88f2:	7801      	ldrb	r1, [r0, #0]
    88f4:	07ca      	lsls	r2, r1, #31
    88f6:	2a00      	cmp	r2, #0
    88f8:	9000      	str	r0, [sp, #0]
    88fa:	d006      	beq.n	890a <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x1e>
    88fc:	e7ff      	b.n	88fe <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x12>
            StrnRep::CStr(cstr)  => { cstr }
    88fe:	9800      	ldr	r0, [sp, #0]
    8900:	6841      	ldr	r1, [r0, #4]
    8902:	9103      	str	r1, [sp, #12]
    8904:	9101      	str	r1, [sp, #4]
        match self.rep {
    8906:	e00c      	b.n	8922 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
    8908:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    890a:	9800      	ldr	r0, [sp, #0]
    890c:	6841      	ldr	r1, [r0, #4]
    890e:	6882      	ldr	r2, [r0, #8]
    8910:	9104      	str	r1, [sp, #16]
    8912:	9205      	str	r2, [sp, #20]
    8914:	4608      	mov	r0, r1
    8916:	4611      	mov	r1, r2
    8918:	f009 fabf 	bl	11e9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    891c:	9001      	str	r0, [sp, #4]
    891e:	e7ff      	b.n	8920 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x34>
        match self.rep {
    8920:	e7ff      	b.n	8922 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
        }
    }
    8922:	9801      	ldr	r0, [sp, #4]
    8924:	b006      	add	sp, #24
    8926:	bd80      	pop	{r7, pc}

00008928 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>:
            }
        }
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
    8928:	b5b0      	push	{r4, r5, r7, lr}
    892a:	b0b2      	sub	sp, #200	; 0xc8
    892c:	9029      	str	r0, [sp, #164]	; 0xa4
        match self.rep {
            StrnRep::ByteStr(bs) => {         
    892e:	7801      	ldrb	r1, [r0, #0]
    8930:	07ca      	lsls	r2, r1, #31
    8932:	2a00      	cmp	r2, #0
    8934:	900e      	str	r0, [sp, #56]	; 0x38
    8936:	d005      	beq.n	8944 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x1c>
    8938:	e7ff      	b.n	893a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
            }
            StrnRep::CStr(_cstr)  => {}
    893a:	980e      	ldr	r0, [sp, #56]	; 0x38
    893c:	6841      	ldr	r1, [r0, #4]
    893e:	912a      	str	r1, [sp, #168]	; 0xa8
        match self.rep {
    8940:	e096      	b.n	8a70 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
    8942:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => {         
    8944:	980e      	ldr	r0, [sp, #56]	; 0x38
    8946:	6841      	ldr	r1, [r0, #4]
    8948:	6882      	ldr	r2, [r0, #8]
    894a:	912b      	str	r1, [sp, #172]	; 0xac
    894c:	922c      	str	r2, [sp, #176]	; 0xb0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    894e:	4608      	mov	r0, r1
    8950:	4611      	mov	r1, r2
    8952:	f000 face 	bl	8ef2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>
    8956:	9011      	str	r0, [sp, #68]	; 0x44
    8958:	e7ff      	b.n	895a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x32>
    895a:	f24e 2020 	movw	r0, #57888	; 0xe220
    895e:	f2c0 0001 	movt	r0, #1
    8962:	6800      	ldr	r0, [r0, #0]
    8964:	a911      	add	r1, sp, #68	; 0x44
    8966:	910f      	str	r1, [sp, #60]	; 0x3c
    8968:	9010      	str	r0, [sp, #64]	; 0x40
    896a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    896c:	902d      	str	r0, [sp, #180]	; 0xb4
    896e:	9910      	ldr	r1, [sp, #64]	; 0x40
    8970:	912e      	str	r1, [sp, #184]	; 0xb8
    8972:	900d      	str	r0, [sp, #52]	; 0x34
    8974:	910c      	str	r1, [sp, #48]	; 0x30
    8976:	f000 fc5a 	bl	922e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>
    897a:	900b      	str	r0, [sp, #44]	; 0x2c
    897c:	e7ff      	b.n	897e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x56>
    897e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8980:	07c1      	lsls	r1, r0, #31
    8982:	2900      	cmp	r1, #0
    8984:	d001      	beq.n	898a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x62>
    8986:	e7ff      	b.n	8988 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x60>
        }
    }
    8988:	e072      	b.n	8a70 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    898a:	f24e 2078 	movw	r0, #57976	; 0xe278
    898e:	f2c0 0001 	movt	r0, #1
    8992:	6801      	ldr	r1, [r0, #0]
    8994:	980d      	ldr	r0, [sp, #52]	; 0x34
    8996:	9021      	str	r0, [sp, #132]	; 0x84
    8998:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    899a:	9222      	str	r2, [sp, #136]	; 0x88
    899c:	f24e 238c 	movw	r3, #57996	; 0xe28c
    89a0:	f2c0 0301 	movt	r3, #1
    89a4:	681b      	ldr	r3, [r3, #0]
    89a6:	f24e 2c90 	movw	ip, #58000	; 0xe290
    89aa:	f2c0 0c01 	movt	ip, #1
    89ae:	f8dc c000 	ldr.w	ip, [ip]
    89b2:	46ee      	mov	lr, sp
    89b4:	2400      	movs	r4, #0
    89b6:	f8ce 4000 	str.w	r4, [lr]
    89ba:	a823      	add	r0, sp, #140	; 0x8c
    89bc:	2201      	movs	r2, #1
    89be:	910a      	str	r1, [sp, #40]	; 0x28
    89c0:	4619      	mov	r1, r3
    89c2:	4663      	mov	r3, ip
    89c4:	f000 f86a 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    89c8:	e7ff      	b.n	89ca <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xa2>
    89ca:	a821      	add	r0, sp, #132	; 0x84
    89cc:	901e      	str	r0, [sp, #120]	; 0x78
    89ce:	a822      	add	r0, sp, #136	; 0x88
    89d0:	901f      	str	r0, [sp, #124]	; 0x7c
    89d2:	a823      	add	r0, sp, #140	; 0x8c
    89d4:	9020      	str	r0, [sp, #128]	; 0x80
    89d6:	981e      	ldr	r0, [sp, #120]	; 0x78
    89d8:	902f      	str	r0, [sp, #188]	; 0xbc
    89da:	991f      	ldr	r1, [sp, #124]	; 0x7c
    89dc:	9130      	str	r1, [sp, #192]	; 0xc0
    89de:	9a20      	ldr	r2, [sp, #128]	; 0x80
    89e0:	9231      	str	r2, [sp, #196]	; 0xc4
    89e2:	f249 03e7 	movw	r3, #37095	; 0x90e7
    89e6:	f2c0 0300 	movt	r3, #0
    89ea:	9109      	str	r1, [sp, #36]	; 0x24
    89ec:	4619      	mov	r1, r3
    89ee:	9208      	str	r2, [sp, #32]
    89f0:	f000 fcc8 	bl	9384 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    89f4:	9007      	str	r0, [sp, #28]
    89f6:	9106      	str	r1, [sp, #24]
    89f8:	e7ff      	b.n	89fa <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xd2>
    89fa:	f249 01e7 	movw	r1, #37095	; 0x90e7
    89fe:	f2c0 0100 	movt	r1, #0
    8a02:	9809      	ldr	r0, [sp, #36]	; 0x24
    8a04:	f000 fcbe 	bl	9384 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    8a08:	9005      	str	r0, [sp, #20]
    8a0a:	9104      	str	r1, [sp, #16]
    8a0c:	e7ff      	b.n	8a0e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xe6>
    8a0e:	f647 61d7 	movw	r1, #32471	; 0x7ed7
    8a12:	f2c0 0101 	movt	r1, #1
    8a16:	9808      	ldr	r0, [sp, #32]
    8a18:	f000 fcde 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8a1c:	9003      	str	r0, [sp, #12]
    8a1e:	9102      	str	r1, [sp, #8]
    8a20:	e7ff      	b.n	8a22 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xfa>
    8a22:	9807      	ldr	r0, [sp, #28]
    8a24:	9018      	str	r0, [sp, #96]	; 0x60
    8a26:	9906      	ldr	r1, [sp, #24]
    8a28:	9119      	str	r1, [sp, #100]	; 0x64
    8a2a:	9a05      	ldr	r2, [sp, #20]
    8a2c:	921a      	str	r2, [sp, #104]	; 0x68
    8a2e:	9b04      	ldr	r3, [sp, #16]
    8a30:	931b      	str	r3, [sp, #108]	; 0x6c
    8a32:	f8dd c00c 	ldr.w	ip, [sp, #12]
    8a36:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    8a3a:	f8dd e008 	ldr.w	lr, [sp, #8]
    8a3e:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    8a42:	466c      	mov	r4, sp
    8a44:	2503      	movs	r5, #3
    8a46:	6025      	str	r5, [r4, #0]
    8a48:	a812      	add	r0, sp, #72	; 0x48
    8a4a:	ab18      	add	r3, sp, #96	; 0x60
    8a4c:	990a      	ldr	r1, [sp, #40]	; 0x28
    8a4e:	462a      	mov	r2, r5
    8a50:	f000 f824 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8a54:	e7ff      	b.n	8a56 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12e>
    8a56:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
    8a5a:	f2c0 0001 	movt	r0, #1
    8a5e:	f00e ff4c 	bl	178fa <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8a62:	9001      	str	r0, [sp, #4]
    8a64:	e7ff      	b.n	8a66 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x13e>
    8a66:	a812      	add	r0, sp, #72	; 0x48
    8a68:	9901      	ldr	r1, [sp, #4]
    8a6a:	f00e ff83 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8a6e:	defe      	udf	#254	; 0xfe
    }
    8a70:	b032      	add	sp, #200	; 0xc8
    8a72:	bdb0      	pop	{r4, r5, r7, pc}

00008a74 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>:
        fn from(num: i32) -> Self {
    8a74:	b083      	sub	sp, #12
    8a76:	9001      	str	r0, [sp, #4]
                ::core::mem::transmute::
    8a78:	9002      	str	r0, [sp, #8]
    8a7a:	9802      	ldr	r0, [sp, #8]
    8a7c:	9000      	str	r0, [sp, #0]
    8a7e:	e7ff      	b.n	8a80 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E+0xc>
        }
    8a80:	9800      	ldr	r0, [sp, #0]
    8a82:	b003      	add	sp, #12
    8a84:	4770      	bx	lr

00008a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>:
        fn from(_: ()) -> Self {
    8a86:	b081      	sub	sp, #4
    8a88:	f06f 000c 	mvn.w	r0, #12
        }
    8a8c:	b001      	add	sp, #4
    8a8e:	4770      	bx	lr

00008a90 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E>:
        fn fmt(&self, _fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    8a90:	b082      	sub	sp, #8
    8a92:	9000      	str	r0, [sp, #0]
    8a94:	9101      	str	r1, [sp, #4]
    8a96:	2000      	movs	r0, #0
        }
    8a98:	b002      	add	sp, #8
    8a9a:	4770      	bx	lr

00008a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>:
    8a9c:	b580      	push	{r7, lr}
    8a9e:	b086      	sub	sp, #24
    8aa0:	f8dd c020 	ldr.w	ip, [sp, #32]
    8aa4:	9102      	str	r1, [sp, #8]
    8aa6:	9203      	str	r2, [sp, #12]
    8aa8:	9304      	str	r3, [sp, #16]
    8aaa:	f8cd c014 	str.w	ip, [sp, #20]
    8aae:	f04f 0e00 	mov.w	lr, #0
    8ab2:	f8cd e004 	str.w	lr, [sp, #4]
    8ab6:	f8cd e000 	str.w	lr, [sp]
    8aba:	f8cd e000 	str.w	lr, [sp]
    8abe:	6001      	str	r1, [r0, #0]
    8ac0:	6042      	str	r2, [r0, #4]
    8ac2:	9900      	ldr	r1, [sp, #0]
    8ac4:	9a01      	ldr	r2, [sp, #4]
    8ac6:	6081      	str	r1, [r0, #8]
    8ac8:	60c2      	str	r2, [r0, #12]
    8aca:	6103      	str	r3, [r0, #16]
    8acc:	f8c0 c014 	str.w	ip, [r0, #20]
    8ad0:	b006      	add	sp, #24
    8ad2:	bd80      	pop	{r7, pc}

00008ad4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>:
    8ad4:	b082      	sub	sp, #8
    8ad6:	9001      	str	r0, [sp, #4]
    8ad8:	7800      	ldrb	r0, [r0, #0]
    8ada:	07c0      	lsls	r0, r0, #31
    8adc:	2800      	cmp	r0, #0
    8ade:	d004      	beq.n	8aea <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x16>
    8ae0:	e7ff      	b.n	8ae2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0xe>
    8ae2:	2000      	movs	r0, #0
    8ae4:	f88d 0003 	strb.w	r0, [sp, #3]
    8ae8:	e003      	b.n	8af2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8aea:	2001      	movs	r0, #1
    8aec:	f88d 0003 	strb.w	r0, [sp, #3]
    8af0:	e7ff      	b.n	8af2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8af2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    8af6:	b002      	add	sp, #8
    8af8:	4770      	bx	lr

00008afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>:
    8afa:	b08a      	sub	sp, #40	; 0x28
    8afc:	9005      	str	r0, [sp, #20]
    8afe:	9107      	str	r1, [sp, #28]
    8b00:	9208      	str	r2, [sp, #32]
    8b02:	9805      	ldr	r0, [sp, #20]
    8b04:	f1b0 0c01 	subs.w	ip, r0, #1
    8b08:	bf18      	it	ne
    8b0a:	f04f 0c01 	movne.w	ip, #1
    8b0e:	2801      	cmp	r0, #1
    8b10:	9304      	str	r3, [sp, #16]
    8b12:	9203      	str	r2, [sp, #12]
    8b14:	9102      	str	r1, [sp, #8]
    8b16:	d010      	beq.n	8b3a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x40>
    8b18:	e7ff      	b.n	8b1a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x20>
    8b1a:	9805      	ldr	r0, [sp, #20]
    8b1c:	9006      	str	r0, [sp, #24]
    8b1e:	4668      	mov	r0, sp
    8b20:	9904      	ldr	r1, [sp, #16]
    8b22:	6001      	str	r1, [r0, #0]
    8b24:	f24e 23bc 	movw	r3, #58044	; 0xe2bc
    8b28:	f2c0 0301 	movt	r3, #1
    8b2c:	aa06      	add	r2, sp, #24
    8b2e:	9802      	ldr	r0, [sp, #8]
    8b30:	9903      	ldr	r1, [sp, #12]
    8b32:	f00e febb 	bl	178ac <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    8b36:	defe      	udf	#254	; 0xfe
    8b38:	defe      	udf	#254	; 0xfe
    8b3a:	9805      	ldr	r0, [sp, #20]
    8b3c:	2801      	cmp	r0, #1
    8b3e:	d102      	bne.n	8b46 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x4c>
    8b40:	e7ff      	b.n	8b42 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>
    8b42:	b00a      	add	sp, #40	; 0x28
    8b44:	4770      	bx	lr
    8b46:	e7fc      	b.n	8b42 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>

00008b48 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>:
    8b48:	b580      	push	{r7, lr}
    8b4a:	b082      	sub	sp, #8
    8b4c:	9001      	str	r0, [sp, #4]
    8b4e:	f7ff ffc1 	bl	8ad4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>
    8b52:	9000      	str	r0, [sp, #0]
    8b54:	e7ff      	b.n	8b56 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E+0xe>
    8b56:	2001      	movs	r0, #1
    8b58:	9900      	ldr	r1, [sp, #0]
    8b5a:	4388      	bics	r0, r1
    8b5c:	b002      	add	sp, #8
    8b5e:	bd80      	pop	{r7, pc}

00008b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>:
    8b60:	b082      	sub	sp, #8
    8b62:	9001      	str	r0, [sp, #4]
    8b64:	9000      	str	r0, [sp, #0]
    8b66:	9800      	ldr	r0, [sp, #0]
    8b68:	b002      	add	sp, #8
    8b6a:	4770      	bx	lr

00008b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>:
    8b6c:	b081      	sub	sp, #4
    8b6e:	4601      	mov	r1, r0
    8b70:	f88d 0003 	strb.w	r0, [sp, #3]
    8b74:	b001      	add	sp, #4
    8b76:	4770      	bx	lr

00008b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>:
    8b78:	b081      	sub	sp, #4
    8b7a:	9000      	str	r0, [sp, #0]
    8b7c:	b001      	add	sp, #4
    8b7e:	4770      	bx	lr

00008b80 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>:
    8b80:	b580      	push	{r7, lr}
    8b82:	b08a      	sub	sp, #40	; 0x28
    8b84:	9007      	str	r0, [sp, #28]
    8b86:	9108      	str	r1, [sp, #32]
    8b88:	9209      	str	r2, [sp, #36]	; 0x24
    8b8a:	2300      	movs	r3, #0
    8b8c:	9305      	str	r3, [sp, #20]
    8b8e:	9006      	str	r0, [sp, #24]
    8b90:	9805      	ldr	r0, [sp, #20]
    8b92:	9b06      	ldr	r3, [sp, #24]
    8b94:	9104      	str	r1, [sp, #16]
    8b96:	4619      	mov	r1, r3
    8b98:	9b04      	ldr	r3, [sp, #16]
    8b9a:	9203      	str	r2, [sp, #12]
    8b9c:	461a      	mov	r2, r3
    8b9e:	9b03      	ldr	r3, [sp, #12]
    8ba0:	f000 f828 	bl	8bf4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    8ba4:	9002      	str	r0, [sp, #8]
    8ba6:	9101      	str	r1, [sp, #4]
    8ba8:	e7ff      	b.n	8baa <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E+0x2a>
    8baa:	9802      	ldr	r0, [sp, #8]
    8bac:	9901      	ldr	r1, [sp, #4]
    8bae:	b00a      	add	sp, #40	; 0x28
    8bb0:	bd80      	pop	{r7, pc}

00008bb2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>:
    8bb2:	b580      	push	{r7, lr}
    8bb4:	b08a      	sub	sp, #40	; 0x28
    8bb6:	9006      	str	r0, [sp, #24]
    8bb8:	9107      	str	r1, [sp, #28]
    8bba:	9208      	str	r2, [sp, #32]
    8bbc:	9309      	str	r3, [sp, #36]	; 0x24
    8bbe:	9005      	str	r0, [sp, #20]
    8bc0:	4610      	mov	r0, r2
    8bc2:	9104      	str	r1, [sp, #16]
    8bc4:	4619      	mov	r1, r3
    8bc6:	f009 f949 	bl	11e5c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    8bca:	9003      	str	r0, [sp, #12]
    8bcc:	e7ff      	b.n	8bce <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x1c>
    8bce:	9803      	ldr	r0, [sp, #12]
    8bd0:	9905      	ldr	r1, [sp, #20]
    8bd2:	f009 f8ca 	bl	11d6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    8bd6:	9002      	str	r0, [sp, #8]
    8bd8:	e7ff      	b.n	8bda <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x28>
    8bda:	9804      	ldr	r0, [sp, #16]
    8bdc:	9905      	ldr	r1, [sp, #20]
    8bde:	1a41      	subs	r1, r0, r1
    8be0:	9802      	ldr	r0, [sp, #8]
    8be2:	f000 f8b7 	bl	8d54 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
    8be6:	9001      	str	r0, [sp, #4]
    8be8:	9100      	str	r1, [sp, #0]
    8bea:	e7ff      	b.n	8bec <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x3a>
    8bec:	9801      	ldr	r0, [sp, #4]
    8bee:	9900      	ldr	r1, [sp, #0]
    8bf0:	b00a      	add	sp, #40	; 0x28
    8bf2:	bd80      	pop	{r7, pc}

00008bf4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>:
    8bf4:	b580      	push	{r7, lr}
    8bf6:	b08c      	sub	sp, #48	; 0x30
    8bf8:	9008      	str	r0, [sp, #32]
    8bfa:	9109      	str	r1, [sp, #36]	; 0x24
    8bfc:	920a      	str	r2, [sp, #40]	; 0x28
    8bfe:	930b      	str	r3, [sp, #44]	; 0x2c
    8c00:	4288      	cmp	r0, r1
    8c02:	9307      	str	r3, [sp, #28]
    8c04:	9206      	str	r2, [sp, #24]
    8c06:	9105      	str	r1, [sp, #20]
    8c08:	9004      	str	r0, [sp, #16]
    8c0a:	d806      	bhi.n	8c1a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x26>
    8c0c:	e7ff      	b.n	8c0e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x1a>
    8c0e:	9806      	ldr	r0, [sp, #24]
    8c10:	9907      	ldr	r1, [sp, #28]
    8c12:	f009 f93a 	bl	11e8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8c16:	9003      	str	r0, [sp, #12]
    8c18:	e004      	b.n	8c24 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x30>
    8c1a:	9804      	ldr	r0, [sp, #16]
    8c1c:	9905      	ldr	r1, [sp, #20]
    8c1e:	f00f fde8 	bl	187f2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
    8c22:	defe      	udf	#254	; 0xfe
    8c24:	9805      	ldr	r0, [sp, #20]
    8c26:	9903      	ldr	r1, [sp, #12]
    8c28:	4288      	cmp	r0, r1
    8c2a:	d809      	bhi.n	8c40 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x4c>
    8c2c:	e7ff      	b.n	8c2e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x3a>
    8c2e:	9804      	ldr	r0, [sp, #16]
    8c30:	9905      	ldr	r1, [sp, #20]
    8c32:	9a06      	ldr	r2, [sp, #24]
    8c34:	9b07      	ldr	r3, [sp, #28]
    8c36:	f7ff ffbc 	bl	8bb2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>
    8c3a:	9002      	str	r0, [sp, #8]
    8c3c:	9101      	str	r1, [sp, #4]
    8c3e:	e00a      	b.n	8c56 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x62>
    8c40:	9806      	ldr	r0, [sp, #24]
    8c42:	9907      	ldr	r1, [sp, #28]
    8c44:	f009 f921 	bl	11e8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8c48:	9000      	str	r0, [sp, #0]
    8c4a:	e7ff      	b.n	8c4c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x58>
    8c4c:	9805      	ldr	r0, [sp, #20]
    8c4e:	9900      	ldr	r1, [sp, #0]
    8c50:	f00f fdad 	bl	187ae <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
    8c54:	defe      	udf	#254	; 0xfe
    8c56:	9802      	ldr	r0, [sp, #8]
    8c58:	9901      	ldr	r1, [sp, #4]
    8c5a:	b00c      	add	sp, #48	; 0x30
    8c5c:	bd80      	pop	{r7, pc}

00008c5e <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8c5e:	b580      	push	{r7, lr}
    8c60:	b082      	sub	sp, #8
    8c62:	9001      	str	r0, [sp, #4]
    8c64:	f012 f92a 	bl	1aebc <os_eventq_run>
    8c68:	e7ff      	b.n	8c6a <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE+0xc>
    8c6a:	2001      	movs	r0, #1
    8c6c:	b002      	add	sp, #8
    8c6e:	bd80      	pop	{r7, pc}

00008c70 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8c70:	b580      	push	{r7, lr}
    8c72:	b084      	sub	sp, #16
    8c74:	9002      	str	r0, [sp, #8]
    8c76:	f012 f94d 	bl	1af14 <os_eventq_dflt_get>
    8c7a:	4601      	mov	r1, r0
    8c7c:	9003      	str	r0, [sp, #12]
    8c7e:	9101      	str	r1, [sp, #4]
    8c80:	e7ff      	b.n	8c82 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE+0x12>
    8c82:	9801      	ldr	r0, [sp, #4]
    8c84:	9902      	ldr	r1, [sp, #8]
    8c86:	6048      	str	r0, [r1, #4]
    8c88:	2200      	movs	r2, #0
    8c8a:	600a      	str	r2, [r1, #0]
    8c8c:	b004      	add	sp, #16
    8c8e:	bd80      	pop	{r7, pc}

00008c90 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>:
impl Default for os_task_stailq {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8c90:	b570      	push	{r4, r5, r6, lr}
    8c92:	b09c      	sub	sp, #112	; 0x70
    8c94:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
    8c98:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
    8c9c:	9c22      	ldr	r4, [sp, #136]	; 0x88
    8c9e:	9d21      	ldr	r5, [sp, #132]	; 0x84
    8ca0:	9e20      	ldr	r6, [sp, #128]	; 0x80
    8ca2:	9013      	str	r0, [sp, #76]	; 0x4c
    8ca4:	9114      	str	r1, [sp, #80]	; 0x50
    8ca6:	9215      	str	r2, [sp, #84]	; 0x54
    8ca8:	9316      	str	r3, [sp, #88]	; 0x58
    8caa:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
    8cae:	9418      	str	r4, [sp, #96]	; 0x60
    8cb0:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
    8cb4:	f8ad c06a 	strh.w	ip, [sp, #106]	; 0x6a
    8cb8:	9011      	str	r0, [sp, #68]	; 0x44
    8cba:	4608      	mov	r0, r1
    8cbc:	9310      	str	r3, [sp, #64]	; 0x40
    8cbe:	920f      	str	r2, [sp, #60]	; 0x3c
    8cc0:	910e      	str	r1, [sp, #56]	; 0x38
    8cc2:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    8cc6:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    8cca:	940b      	str	r4, [sp, #44]	; 0x2c
    8ccc:	950a      	str	r5, [sp, #40]	; 0x28
    8cce:	9609      	str	r6, [sp, #36]	; 0x24
    8cd0:	f7ff fe2a 	bl	8928 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>
    8cd4:	e7ff      	b.n	8cd6 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x46>
    8cd6:	980e      	ldr	r0, [sp, #56]	; 0x38
    8cd8:	f7ff fe08 	bl	88ec <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>
    8cdc:	9008      	str	r0, [sp, #32]
    8cde:	e7ff      	b.n	8ce0 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x50>
    8ce0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8ce2:	990c      	ldr	r1, [sp, #48]	; 0x30
    8ce4:	f000 f93b 	bl	8f5e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>
    8ce8:	9007      	str	r0, [sp, #28]
    8cea:	e7ff      	b.n	8cec <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x5c>
    8cec:	980d      	ldr	r0, [sp, #52]	; 0x34
    8cee:	b281      	uxth	r1, r0
    8cf0:	466a      	mov	r2, sp
    8cf2:	60d1      	str	r1, [r2, #12]
    8cf4:	9907      	ldr	r1, [sp, #28]
    8cf6:	6091      	str	r1, [r2, #8]
    8cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8cfa:	6053      	str	r3, [r2, #4]
    8cfc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    8d00:	fa5f fe8c 	uxtb.w	lr, ip
    8d04:	f8c2 e000 	str.w	lr, [r2]
    8d08:	9811      	ldr	r0, [sp, #68]	; 0x44
    8d0a:	9908      	ldr	r1, [sp, #32]
    8d0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8d0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8d10:	f012 fea0 	bl	1ba54 <os_task_init>
    8d14:	4601      	mov	r1, r0
    8d16:	901b      	str	r0, [sp, #108]	; 0x6c
    8d18:	9106      	str	r1, [sp, #24]
    8d1a:	e7ff      	b.n	8d1c <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x8c>
    8d1c:	9806      	ldr	r0, [sp, #24]
    8d1e:	2800      	cmp	r0, #0
    8d20:	d005      	beq.n	8d2e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x9e>
    8d22:	e7ff      	b.n	8d24 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x94>
    8d24:	9806      	ldr	r0, [sp, #24]
    8d26:	f7ff fea5 	bl	8a74 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>
    8d2a:	9005      	str	r0, [sp, #20]
    8d2c:	e004      	b.n	8d38 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xa8>
    8d2e:	2000      	movs	r0, #0
    8d30:	9012      	str	r0, [sp, #72]	; 0x48
    8d32:	2001      	movs	r0, #1
    8d34:	9012      	str	r0, [sp, #72]	; 0x48
    8d36:	e002      	b.n	8d3e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8d38:	9805      	ldr	r0, [sp, #20]
    8d3a:	9012      	str	r0, [sp, #72]	; 0x48
    8d3c:	e7ff      	b.n	8d3e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8d3e:	9812      	ldr	r0, [sp, #72]	; 0x48
    8d40:	b01c      	add	sp, #112	; 0x70
    8d42:	bd70      	pop	{r4, r5, r6, pc}

00008d44 <_ZN4core3ptr13drop_in_place17h1982c2483e0a2028E>:
    8d44:	b081      	sub	sp, #4
    8d46:	9000      	str	r0, [sp, #0]
    8d48:	b001      	add	sp, #4
    8d4a:	4770      	bx	lr

00008d4c <_ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E>:
    8d4c:	b081      	sub	sp, #4
    8d4e:	9000      	str	r0, [sp, #0]
    8d50:	b001      	add	sp, #4
    8d52:	4770      	bx	lr

00008d54 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>:
    8d54:	b580      	push	{r7, lr}
    8d56:	b084      	sub	sp, #16
    8d58:	9002      	str	r0, [sp, #8]
    8d5a:	9103      	str	r1, [sp, #12]
    8d5c:	f000 f993 	bl	9086 <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>
    8d60:	9001      	str	r0, [sp, #4]
    8d62:	9100      	str	r1, [sp, #0]
    8d64:	e7ff      	b.n	8d66 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE+0x12>
    8d66:	9801      	ldr	r0, [sp, #4]
    8d68:	9900      	ldr	r1, [sp, #0]
    8d6a:	b004      	add	sp, #16
    8d6c:	bd80      	pop	{r7, pc}

00008d6e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>:
    8d6e:	b5b0      	push	{r4, r5, r7, lr}
    8d70:	b0b8      	sub	sp, #224	; 0xe0
    8d72:	902f      	str	r0, [sp, #188]	; 0xbc
    8d74:	9130      	str	r1, [sp, #192]	; 0xc0
    8d76:	9231      	str	r2, [sp, #196]	; 0xc4
    8d78:	9332      	str	r3, [sp, #200]	; 0xc8
    8d7a:	9013      	str	r0, [sp, #76]	; 0x4c
    8d7c:	9112      	str	r1, [sp, #72]	; 0x48
    8d7e:	9311      	str	r3, [sp, #68]	; 0x44
    8d80:	9210      	str	r2, [sp, #64]	; 0x40
    8d82:	f009 f882 	bl	11e8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8d86:	9016      	str	r0, [sp, #88]	; 0x58
    8d88:	e7ff      	b.n	8d8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x1c>
    8d8a:	9810      	ldr	r0, [sp, #64]	; 0x40
    8d8c:	9911      	ldr	r1, [sp, #68]	; 0x44
    8d8e:	f009 f87c 	bl	11e8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8d92:	9017      	str	r0, [sp, #92]	; 0x5c
    8d94:	e7ff      	b.n	8d96 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x28>
    8d96:	a816      	add	r0, sp, #88	; 0x58
    8d98:	9014      	str	r0, [sp, #80]	; 0x50
    8d9a:	a817      	add	r0, sp, #92	; 0x5c
    8d9c:	9015      	str	r0, [sp, #84]	; 0x54
    8d9e:	9814      	ldr	r0, [sp, #80]	; 0x50
    8da0:	9033      	str	r0, [sp, #204]	; 0xcc
    8da2:	9915      	ldr	r1, [sp, #84]	; 0x54
    8da4:	9134      	str	r1, [sp, #208]	; 0xd0
    8da6:	6802      	ldr	r2, [r0, #0]
    8da8:	680b      	ldr	r3, [r1, #0]
    8daa:	429a      	cmp	r2, r3
    8dac:	900f      	str	r0, [sp, #60]	; 0x3c
    8dae:	910e      	str	r1, [sp, #56]	; 0x38
    8db0:	d106      	bne.n	8dc0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x52>
    8db2:	e7ff      	b.n	8db4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x46>
    8db4:	9810      	ldr	r0, [sp, #64]	; 0x40
    8db6:	9911      	ldr	r1, [sp, #68]	; 0x44
    8db8:	f009 f86f 	bl	11e9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    8dbc:	900d      	str	r0, [sp, #52]	; 0x34
    8dbe:	e072      	b.n	8ea6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x138>
    8dc0:	f24e 3020 	movw	r0, #58144	; 0xe320
    8dc4:	f2c0 0001 	movt	r0, #1
    8dc8:	6801      	ldr	r1, [r0, #0]
    8dca:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8dcc:	9027      	str	r0, [sp, #156]	; 0x9c
    8dce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8dd0:	9228      	str	r2, [sp, #160]	; 0xa0
    8dd2:	f24e 3360 	movw	r3, #58208	; 0xe360
    8dd6:	f2c0 0301 	movt	r3, #1
    8dda:	681b      	ldr	r3, [r3, #0]
    8ddc:	f24e 3c64 	movw	ip, #58212	; 0xe364
    8de0:	f2c0 0c01 	movt	ip, #1
    8de4:	f8dc c000 	ldr.w	ip, [ip]
    8de8:	46ee      	mov	lr, sp
    8dea:	2400      	movs	r4, #0
    8dec:	f8ce 4000 	str.w	r4, [lr]
    8df0:	a829      	add	r0, sp, #164	; 0xa4
    8df2:	2201      	movs	r2, #1
    8df4:	910c      	str	r1, [sp, #48]	; 0x30
    8df6:	4619      	mov	r1, r3
    8df8:	4663      	mov	r3, ip
    8dfa:	f7ff fe4f 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8dfe:	e7ff      	b.n	8e00 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x92>
    8e00:	a827      	add	r0, sp, #156	; 0x9c
    8e02:	9024      	str	r0, [sp, #144]	; 0x90
    8e04:	a828      	add	r0, sp, #160	; 0xa0
    8e06:	9025      	str	r0, [sp, #148]	; 0x94
    8e08:	a829      	add	r0, sp, #164	; 0xa4
    8e0a:	9026      	str	r0, [sp, #152]	; 0x98
    8e0c:	9824      	ldr	r0, [sp, #144]	; 0x90
    8e0e:	9035      	str	r0, [sp, #212]	; 0xd4
    8e10:	9925      	ldr	r1, [sp, #148]	; 0x94
    8e12:	9136      	str	r1, [sp, #216]	; 0xd8
    8e14:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8e16:	9237      	str	r2, [sp, #220]	; 0xdc
    8e18:	f242 53b9 	movw	r3, #9657	; 0x25b9
    8e1c:	f2c0 0301 	movt	r3, #1
    8e20:	910b      	str	r1, [sp, #44]	; 0x2c
    8e22:	4619      	mov	r1, r3
    8e24:	920a      	str	r2, [sp, #40]	; 0x28
    8e26:	f009 fbd5 	bl	125d4 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8e2a:	9009      	str	r0, [sp, #36]	; 0x24
    8e2c:	9108      	str	r1, [sp, #32]
    8e2e:	e7ff      	b.n	8e30 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xc2>
    8e30:	f242 51b9 	movw	r1, #9657	; 0x25b9
    8e34:	f2c0 0101 	movt	r1, #1
    8e38:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8e3a:	f009 fbcb 	bl	125d4 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8e3e:	9007      	str	r0, [sp, #28]
    8e40:	9106      	str	r1, [sp, #24]
    8e42:	e7ff      	b.n	8e44 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xd6>
    8e44:	f647 61d7 	movw	r1, #32471	; 0x7ed7
    8e48:	f2c0 0101 	movt	r1, #1
    8e4c:	980a      	ldr	r0, [sp, #40]	; 0x28
    8e4e:	f000 fac3 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8e52:	9005      	str	r0, [sp, #20]
    8e54:	9104      	str	r1, [sp, #16]
    8e56:	e7ff      	b.n	8e58 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xea>
    8e58:	9809      	ldr	r0, [sp, #36]	; 0x24
    8e5a:	901e      	str	r0, [sp, #120]	; 0x78
    8e5c:	9908      	ldr	r1, [sp, #32]
    8e5e:	911f      	str	r1, [sp, #124]	; 0x7c
    8e60:	9a07      	ldr	r2, [sp, #28]
    8e62:	9220      	str	r2, [sp, #128]	; 0x80
    8e64:	9b06      	ldr	r3, [sp, #24]
    8e66:	9321      	str	r3, [sp, #132]	; 0x84
    8e68:	f8dd c014 	ldr.w	ip, [sp, #20]
    8e6c:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    8e70:	f8dd e010 	ldr.w	lr, [sp, #16]
    8e74:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
    8e78:	466c      	mov	r4, sp
    8e7a:	2503      	movs	r5, #3
    8e7c:	6025      	str	r5, [r4, #0]
    8e7e:	a818      	add	r0, sp, #96	; 0x60
    8e80:	ab1e      	add	r3, sp, #120	; 0x78
    8e82:	990c      	ldr	r1, [sp, #48]	; 0x30
    8e84:	462a      	mov	r2, r5
    8e86:	f7ff fe09 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8e8a:	e7ff      	b.n	8e8c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x11e>
    8e8c:	f24e 30b4 	movw	r0, #58292	; 0xe3b4
    8e90:	f2c0 0001 	movt	r0, #1
    8e94:	f00e fd31 	bl	178fa <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8e98:	9003      	str	r0, [sp, #12]
    8e9a:	e7ff      	b.n	8e9c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x12e>
    8e9c:	a818      	add	r0, sp, #96	; 0x60
    8e9e:	9903      	ldr	r1, [sp, #12]
    8ea0:	f00e fd68 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8ea4:	defe      	udf	#254	; 0xfe
    8ea6:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8ea8:	9912      	ldr	r1, [sp, #72]	; 0x48
    8eaa:	f008 ffd7 	bl	11e5c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    8eae:	9002      	str	r0, [sp, #8]
    8eb0:	e7ff      	b.n	8eb2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x144>
    8eb2:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8eb4:	9912      	ldr	r1, [sp, #72]	; 0x48
    8eb6:	f008 ffe8 	bl	11e8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8eba:	9001      	str	r0, [sp, #4]
    8ebc:	e7ff      	b.n	8ebe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x150>
    8ebe:	980d      	ldr	r0, [sp, #52]	; 0x34
    8ec0:	9902      	ldr	r1, [sp, #8]
    8ec2:	9a01      	ldr	r2, [sp, #4]
    8ec4:	f008 fded 	bl	11aa2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    8ec8:	e7ff      	b.n	8eca <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x15c>
    8eca:	b038      	add	sp, #224	; 0xe0
    8ecc:	bdb0      	pop	{r4, r5, r7, pc}

00008ece <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>:
    8ece:	b580      	push	{r7, lr}
    8ed0:	b086      	sub	sp, #24
    8ed2:	9003      	str	r0, [sp, #12]
    8ed4:	9104      	str	r1, [sp, #16]
    8ed6:	9205      	str	r2, [sp, #20]
    8ed8:	9002      	str	r0, [sp, #8]
    8eda:	4610      	mov	r0, r2
    8edc:	9a02      	ldr	r2, [sp, #8]
    8ede:	9101      	str	r1, [sp, #4]
    8ee0:	4611      	mov	r1, r2
    8ee2:	9a01      	ldr	r2, [sp, #4]
    8ee4:	f000 f861 	bl	8faa <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>
    8ee8:	9000      	str	r0, [sp, #0]
    8eea:	e7ff      	b.n	8eec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE+0x1e>
    8eec:	9800      	ldr	r0, [sp, #0]
    8eee:	b006      	add	sp, #24
    8ef0:	bd80      	pop	{r7, pc}

00008ef2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>:
    8ef2:	b580      	push	{r7, lr}
    8ef4:	b08e      	sub	sp, #56	; 0x38
    8ef6:	9009      	str	r0, [sp, #36]	; 0x24
    8ef8:	910a      	str	r1, [sp, #40]	; 0x28
    8efa:	9005      	str	r0, [sp, #20]
    8efc:	9104      	str	r1, [sp, #16]
    8efe:	f008 ffc4 	bl	11e8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8f02:	9003      	str	r0, [sp, #12]
    8f04:	e7ff      	b.n	8f06 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x14>
    8f06:	2101      	movs	r1, #1
    8f08:	9803      	ldr	r0, [sp, #12]
    8f0a:	f000 fa7a 	bl	9402 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>
    8f0e:	9002      	str	r0, [sp, #8]
    8f10:	9101      	str	r1, [sp, #4]
    8f12:	e7ff      	b.n	8f14 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x22>
    8f14:	9802      	ldr	r0, [sp, #8]
    8f16:	9901      	ldr	r1, [sp, #4]
    8f18:	f000 f97c 	bl	9214 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>
    8f1c:	9108      	str	r1, [sp, #32]
    8f1e:	9007      	str	r0, [sp, #28]
    8f20:	e7ff      	b.n	8f22 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x30>
    8f22:	9807      	ldr	r0, [sp, #28]
    8f24:	2800      	cmp	r0, #0
    8f26:	d001      	beq.n	8f2c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x3a>
    8f28:	e7ff      	b.n	8f2a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x38>
    8f2a:	e00c      	b.n	8f46 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x54>
    8f2c:	9808      	ldr	r0, [sp, #32]
    8f2e:	900c      	str	r0, [sp, #48]	; 0x30
    8f30:	900d      	str	r0, [sp, #52]	; 0x34
    8f32:	9905      	ldr	r1, [sp, #20]
    8f34:	9000      	str	r0, [sp, #0]
    8f36:	4608      	mov	r0, r1
    8f38:	9904      	ldr	r1, [sp, #16]
    8f3a:	9a00      	ldr	r2, [sp, #0]
    8f3c:	f7ff ffc7 	bl	8ece <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>
    8f40:	9006      	str	r0, [sp, #24]
    8f42:	e00b      	b.n	8f5c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x6a>
    8f44:	defe      	udf	#254	; 0xfe
    8f46:	f008 fb6f 	bl	11628 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>
    8f4a:	e002      	b.n	8f52 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x60>
    8f4c:	9806      	ldr	r0, [sp, #24]
    8f4e:	b00e      	add	sp, #56	; 0x38
    8f50:	bd80      	pop	{r7, pc}
    8f52:	f000 f959 	bl	9208 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>
    8f56:	9006      	str	r0, [sp, #24]
    8f58:	e7ff      	b.n	8f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x68>
    8f5a:	e7f7      	b.n	8f4c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>
    8f5c:	e7f6      	b.n	8f4c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>

00008f5e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>:
    8f5e:	b082      	sub	sp, #8
    8f60:	9000      	str	r0, [sp, #0]
    8f62:	9101      	str	r1, [sp, #4]
    8f64:	b002      	add	sp, #8
    8f66:	4770      	bx	lr

00008f68 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>:
    8f68:	b580      	push	{r7, lr}
    8f6a:	b088      	sub	sp, #32
    8f6c:	9005      	str	r0, [sp, #20]
    8f6e:	9106      	str	r1, [sp, #24]
    8f70:	9207      	str	r2, [sp, #28]
    8f72:	9004      	str	r0, [sp, #16]
    8f74:	4610      	mov	r0, r2
    8f76:	9a04      	ldr	r2, [sp, #16]
    8f78:	9103      	str	r1, [sp, #12]
    8f7a:	4611      	mov	r1, r2
    8f7c:	9a03      	ldr	r2, [sp, #12]
    8f7e:	f7ff fdff 	bl	8b80 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>
    8f82:	9002      	str	r0, [sp, #8]
    8f84:	9101      	str	r1, [sp, #4]
    8f86:	e7ff      	b.n	8f88 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E+0x20>
    8f88:	9802      	ldr	r0, [sp, #8]
    8f8a:	9901      	ldr	r1, [sp, #4]
    8f8c:	b008      	add	sp, #32
    8f8e:	bd80      	pop	{r7, pc}

00008f90 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>:
    8f90:	b580      	push	{r7, lr}
    8f92:	b084      	sub	sp, #16
    8f94:	9002      	str	r0, [sp, #8]
    8f96:	9103      	str	r1, [sp, #12]
    8f98:	f008 fb03 	bl	115a2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>
    8f9c:	9001      	str	r0, [sp, #4]
    8f9e:	9100      	str	r1, [sp, #0]
    8fa0:	e7ff      	b.n	8fa2 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E+0x12>
    8fa2:	9801      	ldr	r0, [sp, #4]
    8fa4:	9900      	ldr	r1, [sp, #0]
    8fa6:	b004      	add	sp, #16
    8fa8:	bd80      	pop	{r7, pc}

00008faa <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>:
    8faa:	b580      	push	{r7, lr}
    8fac:	b08a      	sub	sp, #40	; 0x28
    8fae:	9007      	str	r0, [sp, #28]
    8fb0:	9108      	str	r1, [sp, #32]
    8fb2:	9209      	str	r2, [sp, #36]	; 0x24
    8fb4:	9005      	str	r0, [sp, #20]
    8fb6:	4608      	mov	r0, r1
    8fb8:	9104      	str	r1, [sp, #16]
    8fba:	4611      	mov	r1, r2
    8fbc:	9203      	str	r2, [sp, #12]
    8fbe:	f008 ff64 	bl	11e8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8fc2:	9002      	str	r0, [sp, #8]
    8fc4:	e7ff      	b.n	8fc6 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x1c>
    8fc6:	9805      	ldr	r0, [sp, #20]
    8fc8:	9902      	ldr	r1, [sp, #8]
    8fca:	4288      	cmp	r0, r1
    8fcc:	d303      	bcc.n	8fd6 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x2c>
    8fce:	e7ff      	b.n	8fd0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x26>
    8fd0:	2000      	movs	r0, #0
    8fd2:	9006      	str	r0, [sp, #24]
    8fd4:	e009      	b.n	8fea <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    8fd6:	9805      	ldr	r0, [sp, #20]
    8fd8:	9904      	ldr	r1, [sp, #16]
    8fda:	9a03      	ldr	r2, [sp, #12]
    8fdc:	f008 ff81 	bl	11ee2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>
    8fe0:	9001      	str	r0, [sp, #4]
    8fe2:	e7ff      	b.n	8fe4 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x3a>
    8fe4:	9801      	ldr	r0, [sp, #4]
    8fe6:	9006      	str	r0, [sp, #24]
    8fe8:	e7ff      	b.n	8fea <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    8fea:	9806      	ldr	r0, [sp, #24]
    8fec:	b00a      	add	sp, #40	; 0x28
    8fee:	bd80      	pop	{r7, pc}

00008ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn print(msg: &str) {
    8ff0:	b580      	push	{r7, lr}
    8ff2:	b08a      	sub	sp, #40	; 0x28
    8ff4:	9004      	str	r0, [sp, #16]
    8ff6:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    let buf = msg.as_ptr();
    8ff8:	9003      	str	r0, [sp, #12]
    8ffa:	9102      	str	r1, [sp, #8]
    8ffc:	f000 f86e 	bl	90dc <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    9000:	4601      	mov	r1, r0
    9002:	9006      	str	r0, [sp, #24]
    9004:	9101      	str	r1, [sp, #4]
    9006:	e7ff      	b.n	9008 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x18>
    let len = msg.len() as u32;
    9008:	9803      	ldr	r0, [sp, #12]
    900a:	9902      	ldr	r1, [sp, #8]
    900c:	f000 f850 	bl	90b0 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    9010:	9000      	str	r0, [sp, #0]
    9012:	e7ff      	b.n	9014 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x24>
    9014:	9800      	ldr	r0, [sp, #0]
    9016:	9007      	str	r0, [sp, #28]
    9018:	2100      	movs	r1, #0

    //  TODO: Dispatch the Mynewt C function `console_buffer`.
    //  TODO: Use a procedural macro to compute the hash of function name `console_buffer`.
    let hash = 0;  //  TODO
    901a:	9108      	str	r1, [sp, #32]
    //  TODO: Lookup the dispatch address of `console_buffer`.
    let _addr = get_dispatch_address(hash);
    901c:	4608      	mov	r0, r1
    901e:	f000 f809 	bl	9034 <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>
    9022:	9009      	str	r0, [sp, #36]	; 0x24
    9024:	e7ff      	b.n	9026 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x36>
    //  TODO: Call the `console_buffer` function using the dispatch address.
    unsafe { console_buffer(buf, len); }
    9026:	9801      	ldr	r0, [sp, #4]
    9028:	9900      	ldr	r1, [sp, #0]
    902a:	f010 fc05 	bl	19838 <console_buffer>
    902e:	e7ff      	b.n	9030 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x40>
}
    9030:	b00a      	add	sp, #40	; 0x28
    9032:	bd80      	pop	{r7, pc}

00009034 <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>:

/// Return the Dispatch Address for the OS function whose function name hashed is `hash`
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn get_dispatch_address(_hash: u32) -> u32 {
    9034:	b081      	sub	sp, #4
    9036:	9000      	str	r0, [sp, #0]
    9038:	2000      	movs	r0, #0
    //  TODO: Lookup the Dispatch Table for the hash of function name
    0
}
    903a:	b001      	add	sp, #4
    903c:	4770      	bx	lr

0000903e <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>:
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
}

///  Add the string to the output buffer.
pub fn buffer(msg: &str) {
    903e:	b580      	push	{r7, lr}
    9040:	b086      	sub	sp, #24
    9042:	9004      	str	r0, [sp, #16]
    9044:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
    9046:	9003      	str	r0, [sp, #12]
    9048:	9102      	str	r1, [sp, #8]
    904a:	f000 f847 	bl	90dc <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    904e:	9001      	str	r0, [sp, #4]
    9050:	e7ff      	b.n	9052 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x14>
    9052:	9803      	ldr	r0, [sp, #12]
    9054:	9902      	ldr	r1, [sp, #8]
    9056:	f000 f82b 	bl	90b0 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    905a:	9000      	str	r0, [sp, #0]
    905c:	e7ff      	b.n	905e <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x20>
    905e:	9801      	ldr	r0, [sp, #4]
    9060:	9900      	ldr	r1, [sp, #0]
    9062:	f010 fbe9 	bl	19838 <console_buffer>
    9066:	e7ff      	b.n	9068 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x2a>
}
    9068:	b006      	add	sp, #24
    906a:	bd80      	pop	{r7, pc}

0000906c <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>:
    unsafe { console_printhex(v); }
}

///  Write an int to the output buffer.
///  C API: `void console_printint(int i)`
pub fn printint(v: i32) {
    906c:	b580      	push	{r7, lr}
    906e:	b082      	sub	sp, #8
    9070:	9001      	str	r0, [sp, #4]
    unsafe { console_printint(v); }
    9072:	f010 fc51 	bl	19918 <console_printint>
    9076:	e7ff      	b.n	9078 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E+0xc>
}
    9078:	b002      	add	sp, #8
    907a:	bd80      	pop	{r7, pc}

0000907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>:
pub fn dump(buffer: *const u8, len: u32) {
    unsafe { console_dump(buffer, len); }
}

///  Flush the output buffer to the console.
pub fn flush() {
    907c:	b580      	push	{r7, lr}
    unsafe { console_flush(); }
    907e:	f010 fbb3 	bl	197e8 <console_flush>
    9082:	e7ff      	b.n	9084 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E+0x8>
}
    9084:	bd80      	pop	{r7, pc}

00009086 <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>:
    9086:	b086      	sub	sp, #24
    9088:	9004      	str	r0, [sp, #16]
    908a:	9105      	str	r1, [sp, #20]
    908c:	9002      	str	r0, [sp, #8]
    908e:	9103      	str	r1, [sp, #12]
    9090:	9802      	ldr	r0, [sp, #8]
    9092:	9903      	ldr	r1, [sp, #12]
    9094:	9000      	str	r0, [sp, #0]
    9096:	9101      	str	r1, [sp, #4]
    9098:	9800      	ldr	r0, [sp, #0]
    909a:	9901      	ldr	r1, [sp, #4]
    909c:	b006      	add	sp, #24
    909e:	4770      	bx	lr

000090a0 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>:
    90a0:	b082      	sub	sp, #8
    90a2:	460a      	mov	r2, r1
    90a4:	9000      	str	r0, [sp, #0]
    90a6:	f88d 1007 	strb.w	r1, [sp, #7]
    90aa:	7001      	strb	r1, [r0, #0]
    90ac:	b002      	add	sp, #8
    90ae:	4770      	bx	lr

000090b0 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>:
    90b0:	b580      	push	{r7, lr}
    90b2:	b08a      	sub	sp, #40	; 0x28
    90b4:	9004      	str	r0, [sp, #16]
    90b6:	9105      	str	r1, [sp, #20]
    90b8:	9008      	str	r0, [sp, #32]
    90ba:	9109      	str	r1, [sp, #36]	; 0x24
    90bc:	9006      	str	r0, [sp, #24]
    90be:	9107      	str	r1, [sp, #28]
    90c0:	9806      	ldr	r0, [sp, #24]
    90c2:	9907      	ldr	r1, [sp, #28]
    90c4:	9003      	str	r0, [sp, #12]
    90c6:	9102      	str	r1, [sp, #8]
    90c8:	e7ff      	b.n	90ca <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x1a>
    90ca:	9803      	ldr	r0, [sp, #12]
    90cc:	9902      	ldr	r1, [sp, #8]
    90ce:	f008 fedc 	bl	11e8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    90d2:	9001      	str	r0, [sp, #4]
    90d4:	e7ff      	b.n	90d6 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x26>
    90d6:	9801      	ldr	r0, [sp, #4]
    90d8:	b00a      	add	sp, #40	; 0x28
    90da:	bd80      	pop	{r7, pc}

000090dc <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>:
    90dc:	b082      	sub	sp, #8
    90de:	9000      	str	r0, [sp, #0]
    90e0:	9101      	str	r1, [sp, #4]
    90e2:	b002      	add	sp, #8
    90e4:	4770      	bx	lr

000090e6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E>:
    90e6:	b580      	push	{r7, lr}
    90e8:	b084      	sub	sp, #16
    90ea:	9002      	str	r0, [sp, #8]
    90ec:	9103      	str	r1, [sp, #12]
    90ee:	6800      	ldr	r0, [r0, #0]
    90f0:	f000 f845 	bl	917e <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>
    90f4:	9001      	str	r0, [sp, #4]
    90f6:	e7ff      	b.n	90f8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E+0x12>
    90f8:	9801      	ldr	r0, [sp, #4]
    90fa:	f000 0001 	and.w	r0, r0, #1
    90fe:	b004      	add	sp, #16
    9100:	bd80      	pop	{r7, pc}

00009102 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>:
    9102:	b087      	sub	sp, #28
    9104:	9000      	str	r0, [sp, #0]
    9106:	9101      	str	r1, [sp, #4]
    9108:	2000      	movs	r0, #0
    910a:	f88d 0013 	strb.w	r0, [sp, #19]
    910e:	f88d 0012 	strb.w	r0, [sp, #18]
    9112:	2001      	movs	r0, #1
    9114:	f88d 0013 	strb.w	r0, [sp, #19]
    9118:	f88d 0012 	strb.w	r0, [sp, #18]
    911c:	9800      	ldr	r0, [sp, #0]
    911e:	2800      	cmp	r0, #0
    9120:	d001      	beq.n	9126 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x24>
    9122:	e7ff      	b.n	9124 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x22>
    9124:	e006      	b.n	9134 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x32>
    9126:	2000      	movs	r0, #0
    9128:	f88d 0012 	strb.w	r0, [sp, #18]
    912c:	2001      	movs	r0, #1
    912e:	9002      	str	r0, [sp, #8]
    9130:	e008      	b.n	9144 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    9132:	defe      	udf	#254	; 0xfe
    9134:	2000      	movs	r0, #0
    9136:	f88d 0013 	strb.w	r0, [sp, #19]
    913a:	9901      	ldr	r1, [sp, #4]
    913c:	9106      	str	r1, [sp, #24]
    913e:	9103      	str	r1, [sp, #12]
    9140:	9002      	str	r0, [sp, #8]
    9142:	e7ff      	b.n	9144 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    9144:	f89d 0012 	ldrb.w	r0, [sp, #18]
    9148:	07c0      	lsls	r0, r0, #31
    914a:	2800      	cmp	r0, #0
    914c:	d104      	bne.n	9158 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x56>
    914e:	e7ff      	b.n	9150 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9150:	9800      	ldr	r0, [sp, #0]
    9152:	2801      	cmp	r0, #1
    9154:	d008      	beq.n	9168 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x66>
    9156:	e011      	b.n	917c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x7a>
    9158:	2000      	movs	r0, #0
    915a:	f88d 0012 	strb.w	r0, [sp, #18]
    915e:	e7f7      	b.n	9150 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9160:	9802      	ldr	r0, [sp, #8]
    9162:	9903      	ldr	r1, [sp, #12]
    9164:	b007      	add	sp, #28
    9166:	4770      	bx	lr
    9168:	f89d 0013 	ldrb.w	r0, [sp, #19]
    916c:	07c0      	lsls	r0, r0, #31
    916e:	2800      	cmp	r0, #0
    9170:	d0f6      	beq.n	9160 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    9172:	e7ff      	b.n	9174 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x72>
    9174:	2000      	movs	r0, #0
    9176:	f88d 0013 	strb.w	r0, [sp, #19]
    917a:	e7f1      	b.n	9160 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    917c:	e7f0      	b.n	9160 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>

0000917e <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>:
    917e:	b580      	push	{r7, lr}
    9180:	b08e      	sub	sp, #56	; 0x38
    9182:	900b      	str	r0, [sp, #44]	; 0x2c
    9184:	910c      	str	r1, [sp, #48]	; 0x30
    9186:	9003      	str	r0, [sp, #12]
    9188:	9803      	ldr	r0, [sp, #12]
    918a:	6800      	ldr	r0, [r0, #0]
    918c:	2800      	cmp	r0, #0
    918e:	4602      	mov	r2, r0
    9190:	bf18      	it	ne
    9192:	2201      	movne	r2, #1
    9194:	2800      	cmp	r0, #0
    9196:	9101      	str	r1, [sp, #4]
    9198:	d00f      	beq.n	91ba <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x3c>
    919a:	e7ff      	b.n	919c <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x1e>
    919c:	9803      	ldr	r0, [sp, #12]
    919e:	900d      	str	r0, [sp, #52]	; 0x34
    91a0:	f24e 32c4 	movw	r2, #58308	; 0xe3c4
    91a4:	f2c0 0201 	movt	r2, #1
    91a8:	a907      	add	r1, sp, #28
    91aa:	2304      	movs	r3, #4
    91ac:	9000      	str	r0, [sp, #0]
    91ae:	4608      	mov	r0, r1
    91b0:	9901      	ldr	r1, [sp, #4]
    91b2:	f00f fa52 	bl	1865a <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    91b6:	e011      	b.n	91dc <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5e>
    91b8:	defe      	udf	#254	; 0xfe
    91ba:	f24e 32c8 	movw	r2, #58312	; 0xe3c8
    91be:	f2c0 0201 	movt	r2, #1
    91c2:	a804      	add	r0, sp, #16
    91c4:	2304      	movs	r3, #4
    91c6:	9901      	ldr	r1, [sp, #4]
    91c8:	f00f fa47 	bl	1865a <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    91cc:	e7ff      	b.n	91ce <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x50>
    91ce:	a804      	add	r0, sp, #16
    91d0:	f00e fd60 	bl	17c94 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    91d4:	f88d 000b 	strb.w	r0, [sp, #11]
    91d8:	e7ff      	b.n	91da <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5c>
    91da:	e011      	b.n	9200 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    91dc:	9800      	ldr	r0, [sp, #0]
    91de:	900a      	str	r0, [sp, #40]	; 0x28
    91e0:	f24e 32cc 	movw	r2, #58316	; 0xe3cc
    91e4:	f2c0 0201 	movt	r2, #1
    91e8:	a807      	add	r0, sp, #28
    91ea:	a90a      	add	r1, sp, #40	; 0x28
    91ec:	f00e fce9 	bl	17bc2 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>
    91f0:	e7ff      	b.n	91f2 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x74>
    91f2:	a807      	add	r0, sp, #28
    91f4:	f00e fd4e 	bl	17c94 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    91f8:	f88d 000b 	strb.w	r0, [sp, #11]
    91fc:	e7ff      	b.n	91fe <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x80>
    91fe:	e7ff      	b.n	9200 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    9200:	f89d 000b 	ldrb.w	r0, [sp, #11]
    9204:	b00e      	add	sp, #56	; 0x38
    9206:	bd80      	pop	{r7, pc}

00009208 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>:
    9208:	b082      	sub	sp, #8
    920a:	2000      	movs	r0, #0
    920c:	9000      	str	r0, [sp, #0]
    920e:	9800      	ldr	r0, [sp, #0]
    9210:	b002      	add	sp, #8
    9212:	4770      	bx	lr

00009214 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>:
    9214:	b580      	push	{r7, lr}
    9216:	b084      	sub	sp, #16
    9218:	9002      	str	r0, [sp, #8]
    921a:	9103      	str	r1, [sp, #12]
    921c:	f7ff ff71 	bl	9102 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>
    9220:	9001      	str	r0, [sp, #4]
    9222:	9100      	str	r1, [sp, #0]
    9224:	e7ff      	b.n	9226 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E+0x12>
    9226:	9801      	ldr	r0, [sp, #4]
    9228:	9900      	ldr	r1, [sp, #0]
    922a:	b004      	add	sp, #16
    922c:	bd80      	pop	{r7, pc}

0000922e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>:
    922e:	b580      	push	{r7, lr}
    9230:	b094      	sub	sp, #80	; 0x50
    9232:	9008      	str	r0, [sp, #32]
    9234:	9109      	str	r1, [sp, #36]	; 0x24
    9236:	6802      	ldr	r2, [r0, #0]
    9238:	2a00      	cmp	r2, #0
    923a:	bf18      	it	ne
    923c:	2201      	movne	r2, #1
    923e:	f04f 0300 	mov.w	r3, #0
    9242:	930b      	str	r3, [sp, #44]	; 0x2c
    9244:	920a      	str	r2, [sp, #40]	; 0x28
    9246:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    924a:	9104      	str	r1, [sp, #16]
    924c:	9003      	str	r0, [sp, #12]
    924e:	9202      	str	r2, [sp, #8]
    9250:	e7ff      	b.n	9252 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x24>
    9252:	9802      	ldr	r0, [sp, #8]
    9254:	9902      	ldr	r1, [sp, #8]
    9256:	910d      	str	r1, [sp, #52]	; 0x34
    9258:	9a04      	ldr	r2, [sp, #16]
    925a:	6813      	ldr	r3, [r2, #0]
    925c:	2b00      	cmp	r3, #0
    925e:	bf18      	it	ne
    9260:	2301      	movne	r3, #1
    9262:	f04f 0c00 	mov.w	ip, #0
    9266:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    926a:	930e      	str	r3, [sp, #56]	; 0x38
    926c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    926e:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    9272:	9001      	str	r0, [sp, #4]
    9274:	9300      	str	r3, [sp, #0]
    9276:	e7ff      	b.n	9278 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x4a>
    9278:	9800      	ldr	r0, [sp, #0]
    927a:	9011      	str	r0, [sp, #68]	; 0x44
    927c:	9901      	ldr	r1, [sp, #4]
    927e:	4281      	cmp	r1, r0
    9280:	d104      	bne.n	928c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x5e>
    9282:	e7ff      	b.n	9284 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x56>
    9284:	2001      	movs	r0, #1
    9286:	f88d 0017 	strb.w	r0, [sp, #23]
    928a:	e003      	b.n	9294 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    928c:	2000      	movs	r0, #0
    928e:	f88d 0017 	strb.w	r0, [sp, #23]
    9292:	e7ff      	b.n	9294 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    9294:	f89d 0017 	ldrb.w	r0, [sp, #23]
    9298:	07c0      	lsls	r0, r0, #31
    929a:	2800      	cmp	r0, #0
    929c:	d104      	bne.n	92a8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x7a>
    929e:	e7ff      	b.n	92a0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x72>
    92a0:	2000      	movs	r0, #0
    92a2:	f88d 0016 	strb.w	r0, [sp, #22]
    92a6:	e01c      	b.n	92e2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    92a8:	9803      	ldr	r0, [sp, #12]
    92aa:	9006      	str	r0, [sp, #24]
    92ac:	9904      	ldr	r1, [sp, #16]
    92ae:	9107      	str	r1, [sp, #28]
    92b0:	9a06      	ldr	r2, [sp, #24]
    92b2:	6812      	ldr	r2, [r2, #0]
    92b4:	2a00      	cmp	r2, #0
    92b6:	d104      	bne.n	92c2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x94>
    92b8:	e7ff      	b.n	92ba <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    92ba:	2001      	movs	r0, #1
    92bc:	f88d 0016 	strb.w	r0, [sp, #22]
    92c0:	e00e      	b.n	92e0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    92c2:	9807      	ldr	r0, [sp, #28]
    92c4:	6800      	ldr	r0, [r0, #0]
    92c6:	2800      	cmp	r0, #0
    92c8:	d0f7      	beq.n	92ba <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    92ca:	e7ff      	b.n	92cc <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x9e>
    92cc:	9806      	ldr	r0, [sp, #24]
    92ce:	9012      	str	r0, [sp, #72]	; 0x48
    92d0:	9907      	ldr	r1, [sp, #28]
    92d2:	9113      	str	r1, [sp, #76]	; 0x4c
    92d4:	f009 fb0d 	bl	128f2 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>
    92d8:	f88d 0016 	strb.w	r0, [sp, #22]
    92dc:	e7ff      	b.n	92de <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb0>
    92de:	e7ff      	b.n	92e0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    92e0:	e7ff      	b.n	92e2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    92e2:	f89d 0016 	ldrb.w	r0, [sp, #22]
    92e6:	b014      	add	sp, #80	; 0x50
    92e8:	bd80      	pop	{r7, pc}

000092ea <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E>:
    92ea:	b580      	push	{r7, lr}
    92ec:	b084      	sub	sp, #16
    92ee:	9002      	str	r0, [sp, #8]
    92f0:	9103      	str	r1, [sp, #12]
    92f2:	6800      	ldr	r0, [r0, #0]
    92f4:	f009 fa8f 	bl	12816 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>
    92f8:	9001      	str	r0, [sp, #4]
    92fa:	e7ff      	b.n	92fc <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E+0x12>
    92fc:	9801      	ldr	r0, [sp, #4]
    92fe:	f000 0001 	and.w	r0, r0, #1
    9302:	b004      	add	sp, #16
    9304:	bd80      	pop	{r7, pc}

00009306 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>:
    9306:	b580      	push	{r7, lr}
    9308:	b084      	sub	sp, #16
    930a:	9002      	str	r0, [sp, #8]
    930c:	9103      	str	r1, [sp, #12]
    930e:	6800      	ldr	r0, [r0, #0]
    9310:	f009 fa4a 	bl	127a8 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>
    9314:	9001      	str	r0, [sp, #4]
    9316:	e7ff      	b.n	9318 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E+0x12>
    9318:	9801      	ldr	r0, [sp, #4]
    931a:	f000 0001 	and.w	r0, r0, #1
    931e:	b004      	add	sp, #16
    9320:	bd80      	pop	{r7, pc}

00009322 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E>:
    9322:	b580      	push	{r7, lr}
    9324:	b084      	sub	sp, #16
    9326:	9002      	str	r0, [sp, #8]
    9328:	9103      	str	r1, [sp, #12]
    932a:	6800      	ldr	r0, [r0, #0]
    932c:	f7ff ffeb 	bl	9306 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>
    9330:	9001      	str	r0, [sp, #4]
    9332:	e7ff      	b.n	9334 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E+0x12>
    9334:	9801      	ldr	r0, [sp, #4]
    9336:	f000 0001 	and.w	r0, r0, #1
    933a:	b004      	add	sp, #16
    933c:	bd80      	pop	{r7, pc}

0000933e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE>:
    933e:	b580      	push	{r7, lr}
    9340:	b084      	sub	sp, #16
    9342:	9002      	str	r0, [sp, #8]
    9344:	9103      	str	r1, [sp, #12]
    9346:	6800      	ldr	r0, [r0, #0]
    9348:	f009 fa9c 	bl	12884 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>
    934c:	9001      	str	r0, [sp, #4]
    934e:	e7ff      	b.n	9350 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE+0x12>
    9350:	9801      	ldr	r0, [sp, #4]
    9352:	f000 0001 	and.w	r0, r0, #1
    9356:	b004      	add	sp, #16
    9358:	bd80      	pop	{r7, pc}

0000935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>:
    935a:	b089      	sub	sp, #36	; 0x24
    935c:	9005      	str	r0, [sp, #20]
    935e:	9106      	str	r1, [sp, #24]
    9360:	9107      	str	r1, [sp, #28]
    9362:	9907      	ldr	r1, [sp, #28]
    9364:	9002      	str	r0, [sp, #8]
    9366:	9101      	str	r1, [sp, #4]
    9368:	e7ff      	b.n	936a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x10>
    936a:	9802      	ldr	r0, [sp, #8]
    936c:	9008      	str	r0, [sp, #32]
    936e:	9908      	ldr	r1, [sp, #32]
    9370:	9100      	str	r1, [sp, #0]
    9372:	e7ff      	b.n	9374 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x1a>
    9374:	9800      	ldr	r0, [sp, #0]
    9376:	9003      	str	r0, [sp, #12]
    9378:	9901      	ldr	r1, [sp, #4]
    937a:	9104      	str	r1, [sp, #16]
    937c:	9803      	ldr	r0, [sp, #12]
    937e:	9904      	ldr	r1, [sp, #16]
    9380:	b009      	add	sp, #36	; 0x24
    9382:	4770      	bx	lr

00009384 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>:
    9384:	b089      	sub	sp, #36	; 0x24
    9386:	9005      	str	r0, [sp, #20]
    9388:	9106      	str	r1, [sp, #24]
    938a:	9107      	str	r1, [sp, #28]
    938c:	9907      	ldr	r1, [sp, #28]
    938e:	9002      	str	r0, [sp, #8]
    9390:	9101      	str	r1, [sp, #4]
    9392:	e7ff      	b.n	9394 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x10>
    9394:	9802      	ldr	r0, [sp, #8]
    9396:	9008      	str	r0, [sp, #32]
    9398:	9908      	ldr	r1, [sp, #32]
    939a:	9100      	str	r1, [sp, #0]
    939c:	e7ff      	b.n	939e <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x1a>
    939e:	9800      	ldr	r0, [sp, #0]
    93a0:	9003      	str	r0, [sp, #12]
    93a2:	9901      	ldr	r1, [sp, #4]
    93a4:	9104      	str	r1, [sp, #16]
    93a6:	9803      	ldr	r0, [sp, #12]
    93a8:	9904      	ldr	r1, [sp, #16]
    93aa:	b009      	add	sp, #36	; 0x24
    93ac:	4770      	bx	lr

000093ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>:
    93ae:	b089      	sub	sp, #36	; 0x24
    93b0:	9005      	str	r0, [sp, #20]
    93b2:	9106      	str	r1, [sp, #24]
    93b4:	9107      	str	r1, [sp, #28]
    93b6:	9907      	ldr	r1, [sp, #28]
    93b8:	9002      	str	r0, [sp, #8]
    93ba:	9101      	str	r1, [sp, #4]
    93bc:	e7ff      	b.n	93be <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x10>
    93be:	9802      	ldr	r0, [sp, #8]
    93c0:	9008      	str	r0, [sp, #32]
    93c2:	9908      	ldr	r1, [sp, #32]
    93c4:	9100      	str	r1, [sp, #0]
    93c6:	e7ff      	b.n	93c8 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x1a>
    93c8:	9800      	ldr	r0, [sp, #0]
    93ca:	9003      	str	r0, [sp, #12]
    93cc:	9901      	ldr	r1, [sp, #4]
    93ce:	9104      	str	r1, [sp, #16]
    93d0:	9803      	ldr	r0, [sp, #12]
    93d2:	9904      	ldr	r1, [sp, #16]
    93d4:	b009      	add	sp, #36	; 0x24
    93d6:	4770      	bx	lr

000093d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>:
    93d8:	b089      	sub	sp, #36	; 0x24
    93da:	9005      	str	r0, [sp, #20]
    93dc:	9106      	str	r1, [sp, #24]
    93de:	9107      	str	r1, [sp, #28]
    93e0:	9907      	ldr	r1, [sp, #28]
    93e2:	9002      	str	r0, [sp, #8]
    93e4:	9101      	str	r1, [sp, #4]
    93e6:	e7ff      	b.n	93e8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x10>
    93e8:	9802      	ldr	r0, [sp, #8]
    93ea:	9008      	str	r0, [sp, #32]
    93ec:	9908      	ldr	r1, [sp, #32]
    93ee:	9100      	str	r1, [sp, #0]
    93f0:	e7ff      	b.n	93f2 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x1a>
    93f2:	9800      	ldr	r0, [sp, #0]
    93f4:	9003      	str	r0, [sp, #12]
    93f6:	9901      	ldr	r1, [sp, #4]
    93f8:	9104      	str	r1, [sp, #16]
    93fa:	9803      	ldr	r0, [sp, #12]
    93fc:	9904      	ldr	r1, [sp, #16]
    93fe:	b009      	add	sp, #36	; 0x24
    9400:	4770      	bx	lr

00009402 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>:
    9402:	b580      	push	{r7, lr}
    9404:	b088      	sub	sp, #32
    9406:	9004      	str	r0, [sp, #16]
    9408:	9105      	str	r1, [sp, #20]
    940a:	f000 f819 	bl	9440 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>
    940e:	9001      	str	r0, [sp, #4]
    9410:	9100      	str	r1, [sp, #0]
    9412:	e7ff      	b.n	9414 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x12>
    9414:	9801      	ldr	r0, [sp, #4]
    9416:	9006      	str	r0, [sp, #24]
    9418:	9900      	ldr	r1, [sp, #0]
    941a:	f001 0201 	and.w	r2, r1, #1
    941e:	f88d 201f 	strb.w	r2, [sp, #31]
    9422:	2a00      	cmp	r2, #0
    9424:	d105      	bne.n	9432 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x30>
    9426:	e7ff      	b.n	9428 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x26>
    9428:	9801      	ldr	r0, [sp, #4]
    942a:	9003      	str	r0, [sp, #12]
    942c:	2101      	movs	r1, #1
    942e:	9102      	str	r1, [sp, #8]
    9430:	e002      	b.n	9438 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    9432:	2000      	movs	r0, #0
    9434:	9002      	str	r0, [sp, #8]
    9436:	e7ff      	b.n	9438 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    9438:	9802      	ldr	r0, [sp, #8]
    943a:	9903      	ldr	r1, [sp, #12]
    943c:	b008      	add	sp, #32
    943e:	bd80      	pop	{r7, pc}

00009440 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>:
    9440:	b08a      	sub	sp, #40	; 0x28
    9442:	9004      	str	r0, [sp, #16]
    9444:	9105      	str	r1, [sp, #20]
    9446:	1a40      	subs	r0, r0, r1
    9448:	f04f 0100 	mov.w	r1, #0
    944c:	f141 0100 	adc.w	r1, r1, #0
    9450:	f1c1 0101 	rsb	r1, r1, #1
    9454:	9006      	str	r0, [sp, #24]
    9456:	f88d 101c 	strb.w	r1, [sp, #28]
    945a:	9806      	ldr	r0, [sp, #24]
    945c:	f89d 101c 	ldrb.w	r1, [sp, #28]
    9460:	9001      	str	r0, [sp, #4]
    9462:	9100      	str	r1, [sp, #0]
    9464:	e7ff      	b.n	9466 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E+0x26>
    9466:	9801      	ldr	r0, [sp, #4]
    9468:	9008      	str	r0, [sp, #32]
    946a:	9900      	ldr	r1, [sp, #0]
    946c:	f001 0201 	and.w	r2, r1, #1
    9470:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    9474:	9002      	str	r0, [sp, #8]
    9476:	f88d 200c 	strb.w	r2, [sp, #12]
    947a:	9802      	ldr	r0, [sp, #8]
    947c:	f89d 100c 	ldrb.w	r1, [sp, #12]
    9480:	b00a      	add	sp, #40	; 0x28
    9482:	4770      	bx	lr

00009484 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>:
    baudrate:   8000,  //  In kHZ. Use SPI at 8MHz (the fastest clock available on the nRF52832) because otherwise refreshing will be super slow.
    word_size:  hal::HAL_SPI_WORD_SIZE_8BIT as u8,
};

/// Initialise the display controller
pub fn start_display() -> MynewtResult<()> {
    9484:	b5b0      	push	{r4, r5, r7, lr}
    9486:	b0b2      	sub	sp, #200	; 0xc8
    //  Create SPI port and GPIO pins
    let mut spi_port = mynewt::SPI::new();
    9488:	f00a fdcd 	bl	14026 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>
    948c:	9115      	str	r1, [sp, #84]	; 0x54
    948e:	9014      	str	r0, [sp, #80]	; 0x50
    9490:	e7ff      	b.n	9492 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe>
    let mut dc_gpio =  mynewt::GPIO::new();
    9492:	f00a ff86 	bl	143a2 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    9496:	9016      	str	r0, [sp, #88]	; 0x58
    9498:	e7ff      	b.n	949a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16>
    let mut rst_gpio = mynewt::GPIO::new();
    949a:	f00a ff82 	bl	143a2 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    949e:	9017      	str	r0, [sp, #92]	; 0x5c
    94a0:	e7ff      	b.n	94a2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e>

    //  Init SPI port and GPIO pins
    spi_port.init(
    94a2:	f240 03e8 	movw	r3, #232	; 0xe8
    94a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94aa:	a814      	add	r0, sp, #80	; 0x50
    94ac:	2100      	movs	r1, #0
    94ae:	2219      	movs	r2, #25
    94b0:	f00a fdc1 	bl	14036 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>
    94b4:	9012      	str	r0, [sp, #72]	; 0x48
    94b6:	e7ff      	b.n	94b8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x34>
    94b8:	9812      	ldr	r0, [sp, #72]	; 0x48
    94ba:	f7ff fb5d 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    94be:	9018      	str	r0, [sp, #96]	; 0x60
    94c0:	e7ff      	b.n	94c2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x3e>
        DISPLAY_SPI, //  Mynewt SPI port 0
        DISPLAY_CS,  //  LCD_CS (P0.25): Chip select
        unsafe { &mut SPI_SETTINGS }
    ) ? ;
    94c2:	9818      	ldr	r0, [sp, #96]	; 0x60
    94c4:	1e41      	subs	r1, r0, #1
    94c6:	bf18      	it	ne
    94c8:	2101      	movne	r1, #1
    94ca:	2801      	cmp	r0, #1
    94cc:	d001      	beq.n	94d2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4e>
    94ce:	e7ff      	b.n	94d0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4c>
    94d0:	e006      	b.n	94e0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x5c>
    94d2:	a816      	add	r0, sp, #88	; 0x58
    94d4:	2112      	movs	r1, #18
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    94d6:	f00a ff66 	bl	143a6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    94da:	9011      	str	r0, [sp, #68]	; 0x44
    94dc:	e010      	b.n	9500 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7c>
    spi_port.init(
    94de:	defe      	udf	#254	; 0xfe
    ) ? ;
    94e0:	9818      	ldr	r0, [sp, #96]	; 0x60
    94e2:	902d      	str	r0, [sp, #180]	; 0xb4
    94e4:	f009 f95c 	bl	127a0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    94e8:	9010      	str	r0, [sp, #64]	; 0x40
    94ea:	e002      	b.n	94f2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x6e>
    unsafe {
        DISPLAY.init(&mut delay) ? ;
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    }
    Ok(())
}
    94ec:	9813      	ldr	r0, [sp, #76]	; 0x4c
    94ee:	b032      	add	sp, #200	; 0xc8
    94f0:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;
    94f2:	9810      	ldr	r0, [sp, #64]	; 0x40
    94f4:	f7ff fb34 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    94f8:	9013      	str	r0, [sp, #76]	; 0x4c
    94fa:	e7ff      	b.n	94fc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x78>
    94fc:	e7ff      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    94fe:	e7f5      	b.n	94ec <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    9500:	9811      	ldr	r0, [sp, #68]	; 0x44
    9502:	f7ff fb39 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9506:	9019      	str	r0, [sp, #100]	; 0x64
    9508:	e7ff      	b.n	950a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x86>
    950a:	9819      	ldr	r0, [sp, #100]	; 0x64
    950c:	1e41      	subs	r1, r0, #1
    950e:	bf18      	it	ne
    9510:	2101      	movne	r1, #1
    9512:	2801      	cmp	r0, #1
    9514:	d001      	beq.n	951a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x96>
    9516:	e7ff      	b.n	9518 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x94>
    9518:	e006      	b.n	9528 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xa4>
    951a:	a817      	add	r0, sp, #92	; 0x5c
    951c:	211a      	movs	r1, #26
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    951e:	f00a ff42 	bl	143a6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    9522:	900f      	str	r0, [sp, #60]	; 0x3c
    9524:	e00c      	b.n	9540 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xbc>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    9526:	defe      	udf	#254	; 0xfe
    9528:	9819      	ldr	r0, [sp, #100]	; 0x64
    952a:	902e      	str	r0, [sp, #184]	; 0xb8
    952c:	f009 f938 	bl	127a0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9530:	900e      	str	r0, [sp, #56]	; 0x38
    9532:	e7ff      	b.n	9534 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xb0>
    9534:	980e      	ldr	r0, [sp, #56]	; 0x38
    9536:	f7ff fb13 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    953a:	9013      	str	r0, [sp, #76]	; 0x4c
    953c:	e7ff      	b.n	953e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xba>
    953e:	e7de      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    9540:	980f      	ldr	r0, [sp, #60]	; 0x3c
    9542:	f7ff fb19 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9546:	901a      	str	r0, [sp, #104]	; 0x68
    9548:	e7ff      	b.n	954a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xc6>
    954a:	981a      	ldr	r0, [sp, #104]	; 0x68
    954c:	1e41      	subs	r1, r0, #1
    954e:	bf18      	it	ne
    9550:	2101      	movne	r1, #1
    9552:	2801      	cmp	r0, #1
    9554:	d001      	beq.n	955a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd6>
    9556:	e7ff      	b.n	9558 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd4>
    9558:	e004      	b.n	9564 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe0>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    955a:	f00a ff22 	bl	143a2 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    955e:	900d      	str	r0, [sp, #52]	; 0x34
    9560:	e00c      	b.n	957c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf8>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    9562:	defe      	udf	#254	; 0xfe
    9564:	981a      	ldr	r0, [sp, #104]	; 0x68
    9566:	902f      	str	r0, [sp, #188]	; 0xbc
    9568:	f009 f91a 	bl	127a0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    956c:	900c      	str	r0, [sp, #48]	; 0x30
    956e:	e7ff      	b.n	9570 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xec>
    9570:	980c      	ldr	r0, [sp, #48]	; 0x30
    9572:	f7ff faf5 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9576:	9013      	str	r0, [sp, #76]	; 0x4c
    9578:	e7ff      	b.n	957a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf6>
    957a:	e7c0      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    957c:	f240 1060 	movw	r0, #352	; 0x160
    9580:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9584:	990d      	ldr	r1, [sp, #52]	; 0x34
    9586:	6001      	str	r1, [r0, #0]
    9588:	2117      	movs	r1, #23
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    958a:	f00a ff0c 	bl	143a6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    958e:	900b      	str	r0, [sp, #44]	; 0x2c
    9590:	e7ff      	b.n	9592 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x10e>
    9592:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9594:	f7ff faf0 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9598:	901b      	str	r0, [sp, #108]	; 0x6c
    959a:	e7ff      	b.n	959c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x118>
    959c:	981b      	ldr	r0, [sp, #108]	; 0x6c
    959e:	1e41      	subs	r1, r0, #1
    95a0:	bf18      	it	ne
    95a2:	2101      	movne	r1, #1
    95a4:	2801      	cmp	r0, #1
    95a6:	d001      	beq.n	95ac <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x128>
    95a8:	e7ff      	b.n	95aa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x126>
    95aa:	e008      	b.n	95be <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x13a>
        BACKLIGHT_HIGH.set_low() ? ;    
    95ac:	f240 1060 	movw	r0, #352	; 0x160
    95b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    95b4:	f00a ff90 	bl	144d8 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    95b8:	900a      	str	r0, [sp, #40]	; 0x28
    95ba:	e00d      	b.n	95d8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x154>
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    95bc:	defe      	udf	#254	; 0xfe
    95be:	981b      	ldr	r0, [sp, #108]	; 0x6c
    95c0:	9030      	str	r0, [sp, #192]	; 0xc0
    95c2:	f009 f8ed 	bl	127a0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    95c6:	9009      	str	r0, [sp, #36]	; 0x24
    95c8:	e7ff      	b.n	95ca <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x146>
    95ca:	9809      	ldr	r0, [sp, #36]	; 0x24
    95cc:	f7ff fac8 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    95d0:	9013      	str	r0, [sp, #76]	; 0x4c
    95d2:	e7ff      	b.n	95d4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x150>
    95d4:	e7ff      	b.n	95d6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    95d6:	e792      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH.set_low() ? ;    
    95d8:	980a      	ldr	r0, [sp, #40]	; 0x28
    95da:	f7ff facd 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    95de:	901c      	str	r0, [sp, #112]	; 0x70
    95e0:	e7ff      	b.n	95e2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x15e>
    95e2:	981c      	ldr	r0, [sp, #112]	; 0x70
    95e4:	1e41      	subs	r1, r0, #1
    95e6:	bf18      	it	ne
    95e8:	2101      	movne	r1, #1
    95ea:	2801      	cmp	r0, #1
    95ec:	d001      	beq.n	95f2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16e>
    95ee:	e7ff      	b.n	95f0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16c>
    95f0:	e011      	b.n	9616 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x192>
        spi_port,    //  SPI Port
    95f2:	9914      	ldr	r1, [sp, #80]	; 0x50
    95f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
        dc_gpio,     //  GPIO Pin for DC
    95f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
        rst_gpio,    //  GPIO Pin for RST
    95f8:	9817      	ldr	r0, [sp, #92]	; 0x5c
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    95fa:	46ec      	mov	ip, sp
    95fc:	f04f 0e01 	mov.w	lr, #1
    9600:	f8cc e008 	str.w	lr, [ip, #8]
    9604:	f8cc e004 	str.w	lr, [ip, #4]
    9608:	f8cc 0000 	str.w	r0, [ip]
    960c:	a81d      	add	r0, sp, #116	; 0x74
    960e:	f000 fc8c 	bl	9f2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>
    9612:	e00c      	b.n	962e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1aa>
        BACKLIGHT_HIGH.set_low() ? ;    
    9614:	defe      	udf	#254	; 0xfe
    9616:	981c      	ldr	r0, [sp, #112]	; 0x70
    9618:	9031      	str	r0, [sp, #196]	; 0xc4
    961a:	f009 f8c1 	bl	127a0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    961e:	9008      	str	r0, [sp, #32]
    9620:	e7ff      	b.n	9622 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x19e>
    9622:	9808      	ldr	r0, [sp, #32]
    9624:	f7ff fa9c 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9628:	9013      	str	r0, [sp, #76]	; 0x4c
    962a:	e7ff      	b.n	962c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1a8>
    962c:	e7d3      	b.n	95d6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    962e:	f240 1048 	movw	r0, #328	; 0x148
    9632:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9636:	a91d      	add	r1, sp, #116	; 0x74
    9638:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    963c:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    let mut delay = mynewt::Delay::new();
    9640:	f00a ff60 	bl	14504 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>
    9644:	e7ff      	b.n	9646 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1c2>
        DISPLAY.init(&mut delay) ? ;
    9646:	f240 1048 	movw	r0, #328	; 0x148
    964a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    964e:	a923      	add	r1, sp, #140	; 0x8c
    9650:	f000 fc8d 	bl	9f6e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>
    9654:	9007      	str	r0, [sp, #28]
    9656:	e7ff      	b.n	9658 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1d4>
    9658:	9807      	ldr	r0, [sp, #28]
    965a:	f000 0001 	and.w	r0, r0, #1
    965e:	f7ff fa85 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9662:	f88d 008e 	strb.w	r0, [sp, #142]	; 0x8e
    9666:	e7ff      	b.n	9668 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e4>
    9668:	f89d 008e 	ldrb.w	r0, [sp, #142]	; 0x8e
    966c:	07c1      	lsls	r1, r0, #31
    966e:	2900      	cmp	r1, #0
    9670:	d001      	beq.n	9676 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f2>
    9672:	e7ff      	b.n	9674 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f0>
    9674:	e00d      	b.n	9692 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x20e>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    9676:	f24e 30e0 	movw	r0, #58336	; 0xe3e0
    967a:	f2c0 0001 	movt	r0, #1
    967e:	6801      	ldr	r1, [r0, #0]
    9680:	f240 1048 	movw	r0, #328	; 0x148
    9684:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9688:	f000 fa86 	bl	9b98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>
    968c:	9006      	str	r0, [sp, #24]
    968e:	e00b      	b.n	96a8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x224>
        DISPLAY.init(&mut delay) ? ;
    9690:	defe      	udf	#254	; 0xfe
    9692:	f7ff f9f8 	bl	8a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    9696:	9005      	str	r0, [sp, #20]
    9698:	e7ff      	b.n	969a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x216>
    969a:	9805      	ldr	r0, [sp, #20]
    969c:	f7ff fa60 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    96a0:	9013      	str	r0, [sp, #76]	; 0x4c
    96a2:	e7ff      	b.n	96a4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x220>
    96a4:	e7ff      	b.n	96a6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>
    96a6:	e72a      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    96a8:	9806      	ldr	r0, [sp, #24]
    96aa:	f000 0001 	and.w	r0, r0, #1
    96ae:	f7ff fa5d 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    96b2:	f88d 008f 	strb.w	r0, [sp, #143]	; 0x8f
    96b6:	e7ff      	b.n	96b8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x234>
    96b8:	f89d 008f 	ldrb.w	r0, [sp, #143]	; 0x8f
    96bc:	07c1      	lsls	r1, r0, #31
    96be:	2900      	cmp	r1, #0
    96c0:	d001      	beq.n	96c6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x242>
    96c2:	e7ff      	b.n	96c4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x240>
    96c4:	e005      	b.n	96d2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x24e>
    96c6:	2000      	movs	r0, #0
    Ok(())
    96c8:	9013      	str	r0, [sp, #76]	; 0x4c
    96ca:	2001      	movs	r0, #1
    96cc:	9013      	str	r0, [sp, #76]	; 0x4c
}
    96ce:	e70d      	b.n	94ec <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    96d0:	defe      	udf	#254	; 0xfe
    96d2:	f7ff f9d8 	bl	8a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    96d6:	9004      	str	r0, [sp, #16]
    96d8:	e7ff      	b.n	96da <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x256>
    96da:	9804      	ldr	r0, [sp, #16]
    96dc:	f7ff fa40 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    96e0:	9013      	str	r0, [sp, #76]	; 0x4c
    96e2:	e7ff      	b.n	96e4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x260>
    96e4:	e7df      	b.n	96a6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>

000096e6 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>:
    }

    /// Converts the value of `self` to a `u8`. If the value cannot be
    /// represented by a `u8`, then `None` is returned.
    #[inline]
    fn to_u8(&self) -> Option<u8> {
    96e6:	b580      	push	{r7, lr}
    96e8:	b08a      	sub	sp, #40	; 0x28
    96ea:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    96ec:	f001 faa3 	bl	ac36 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>
    96f0:	9307      	str	r3, [sp, #28]
    96f2:	9206      	str	r2, [sp, #24]
    96f4:	9105      	str	r1, [sp, #20]
    96f6:	9004      	str	r0, [sp, #16]
    96f8:	e7ff      	b.n	96fa <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x14>
    96fa:	a804      	add	r0, sp, #16
    96fc:	f00a ffed 	bl	146da <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    9700:	9003      	str	r0, [sp, #12]
    9702:	e7ff      	b.n	9704 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x1e>
    9704:	9803      	ldr	r0, [sp, #12]
    9706:	f00b f8bb 	bl	14880 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    970a:	9002      	str	r0, [sp, #8]
    970c:	9101      	str	r1, [sp, #4]
    970e:	e7ff      	b.n	9710 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x2a>
    }
    9710:	9802      	ldr	r0, [sp, #8]
    9712:	f000 0001 	and.w	r0, r0, #1
    9716:	9901      	ldr	r1, [sp, #4]
    9718:	b00a      	add	sp, #40	; 0x28
    971a:	bd80      	pop	{r7, pc}

0000971c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>:
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }

    pub fn hard_reset(&mut self) -> Result<(), ()>
    971c:	b580      	push	{r7, lr}
    971e:	b090      	sub	sp, #64	; 0x40
    9720:	900b      	str	r0, [sp, #44]	; 0x2c
    {
        self.rst.set_high().map_err(|_| ())?;
    9722:	f100 010c 	add.w	r1, r0, #12
    9726:	9006      	str	r0, [sp, #24]
    9728:	4608      	mov	r0, r1
    972a:	f00a fee0 	bl	144ee <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    972e:	9005      	str	r0, [sp, #20]
    9730:	e7ff      	b.n	9732 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x16>
    9732:	9805      	ldr	r0, [sp, #20]
    9734:	f00b fe3b 	bl	153ae <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>
    9738:	9004      	str	r0, [sp, #16]
    973a:	e7ff      	b.n	973c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x20>
    973c:	9804      	ldr	r0, [sp, #16]
    973e:	f000 0001 	and.w	r0, r0, #1
    9742:	f7ff fa13 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9746:	f88d 001f 	strb.w	r0, [sp, #31]
    974a:	e7ff      	b.n	974c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x30>
    974c:	f89d 001f 	ldrb.w	r0, [sp, #31]
    9750:	07c1      	lsls	r1, r0, #31
    9752:	2900      	cmp	r1, #0
    9754:	d001      	beq.n	975a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3e>
    9756:	e7ff      	b.n	9758 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3c>
    9758:	e006      	b.n	9768 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x4c>
        self.rst.set_low().map_err(|_| ())?;
    975a:	9806      	ldr	r0, [sp, #24]
    975c:	300c      	adds	r0, #12
    975e:	f00a febb 	bl	144d8 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    9762:	9003      	str	r0, [sp, #12]
    9764:	e00d      	b.n	9782 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x66>
        self.rst.set_high().map_err(|_| ())?;
    9766:	defe      	udf	#254	; 0xfe
    9768:	f008 fbe5 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    976c:	e003      	b.n	9776 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x5a>
        self.rst.set_high().map_err(|_| ())
    }
    976e:	f89d 001e 	ldrb.w	r0, [sp, #30]
    9772:	b010      	add	sp, #64	; 0x40
    9774:	bd80      	pop	{r7, pc}
        self.rst.set_high().map_err(|_| ())?;
    9776:	f00b fe6f 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    977a:	f88d 001e 	strb.w	r0, [sp, #30]
    977e:	e7ff      	b.n	9780 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x64>
    9780:	e7f5      	b.n	976e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_low().map_err(|_| ())?;
    9782:	9803      	ldr	r0, [sp, #12]
    9784:	f00b fdbe 	bl	15304 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>
    9788:	9002      	str	r0, [sp, #8]
    978a:	e7ff      	b.n	978c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x70>
    978c:	9802      	ldr	r0, [sp, #8]
    978e:	f000 0001 	and.w	r0, r0, #1
    9792:	f7ff f9eb 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9796:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    979a:	e7ff      	b.n	979c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x80>
    979c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    97a0:	07c1      	lsls	r1, r0, #31
    97a2:	2900      	cmp	r1, #0
    97a4:	d001      	beq.n	97aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8e>
    97a6:	e7ff      	b.n	97a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8c>
    97a8:	e006      	b.n	97b8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x9c>
        self.rst.set_high().map_err(|_| ())
    97aa:	9806      	ldr	r0, [sp, #24]
    97ac:	300c      	adds	r0, #12
    97ae:	f00a fe9e 	bl	144ee <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    97b2:	9001      	str	r0, [sp, #4]
    97b4:	e009      	b.n	97ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xae>
        self.rst.set_low().map_err(|_| ())?;
    97b6:	defe      	udf	#254	; 0xfe
    97b8:	f008 fbbd 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    97bc:	e7ff      	b.n	97be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xa2>
    97be:	f00b fe4b 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    97c2:	f88d 001e 	strb.w	r0, [sp, #30]
    97c6:	e7ff      	b.n	97c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xac>
    97c8:	e7d1      	b.n	976e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_high().map_err(|_| ())
    97ca:	9801      	ldr	r0, [sp, #4]
    97cc:	f00b fd45 	bl	1525a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>
    97d0:	f88d 001e 	strb.w	r0, [sp, #30]
    97d4:	e7ff      	b.n	97d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xba>
    }
    97d6:	e7ca      	b.n	976e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>

000097d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>:
        self.rst.set_low().map_err(|_| ())?;
    97d8:	b082      	sub	sp, #8
    97da:	9001      	str	r0, [sp, #4]
    97dc:	e7ff      	b.n	97de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE+0x6>
    97de:	b002      	add	sp, #8
    97e0:	4770      	bx	lr

000097e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>:
        self.rst.set_high().map_err(|_| ())?;
    97e2:	b082      	sub	sp, #8
    97e4:	9001      	str	r0, [sp, #4]
    97e6:	e7ff      	b.n	97e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE+0x6>
    97e8:	b002      	add	sp, #8
    97ea:	4770      	bx	lr

000097ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>:
        self.rst.set_high().map_err(|_| ())
    97ec:	b082      	sub	sp, #8
    97ee:	9001      	str	r0, [sp, #4]
    97f0:	e7ff      	b.n	97f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE+0x6>
    97f2:	b002      	add	sp, #8
    97f4:	4770      	bx	lr

000097f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>:
            .expect("spi flush fail");
        Ok(())
    }

    /// Sets pixel colors at the given drawing window
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    97f6:	b5f0      	push	{r4, r5, r6, r7, lr}
    97f8:	b0c7      	sub	sp, #284	; 0x11c
    97fa:	f8dd c134 	ldr.w	ip, [sp, #308]	; 0x134
    97fe:	f8dd e130 	ldr.w	lr, [sp, #304]	; 0x130
    9802:	461c      	mov	r4, r3
    9804:	4615      	mov	r5, r2
    9806:	460e      	mov	r6, r1
    9808:	9040      	str	r0, [sp, #256]	; 0x100
    980a:	f8ad 1104 	strh.w	r1, [sp, #260]	; 0x104
    980e:	f8ad 2106 	strh.w	r2, [sp, #262]	; 0x106
    9812:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
    9816:	f8ad e10a 	strh.w	lr, [sp, #266]	; 0x10a
    981a:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
    981c:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
    9820:	2701      	movs	r7, #1
    9822:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
    9826:	466f      	mov	r7, sp
    9828:	f8c7 e000 	str.w	lr, [r7]
    982c:	900a      	str	r0, [sp, #40]	; 0x28
    982e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    9832:	9408      	str	r4, [sp, #32]
    9834:	9507      	str	r5, [sp, #28]
    9836:	9606      	str	r6, [sp, #24]
    9838:	f000 fa44 	bl	9cc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
    983c:	9005      	str	r0, [sp, #20]
    983e:	e7ff      	b.n	9840 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x4a>
    9840:	9805      	ldr	r0, [sp, #20]
    9842:	f000 0001 	and.w	r0, r0, #1
    9846:	f7ff f991 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    984a:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    984e:	e7ff      	b.n	9850 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x5a>
    9850:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    9854:	07c1      	lsls	r1, r0, #31
    9856:	2900      	cmp	r1, #0
    9858:	d001      	beq.n	985e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x68>
    985a:	e7ff      	b.n	985c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x66>
    985c:	e00f      	b.n	987e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x88>
    985e:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
    9860:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    9864:	a80c      	add	r0, sp, #48	; 0x30
    9866:	22cc      	movs	r2, #204	; 0xcc
    9868:	9004      	str	r0, [sp, #16]
    986a:	9909      	ldr	r1, [sp, #36]	; 0x24
    986c:	f014 fc20 	bl	1e0b0 <__aeabi_memcpy>
    9870:	980a      	ldr	r0, [sp, #40]	; 0x28
    9872:	9904      	ldr	r1, [sp, #16]
    9874:	f000 f884 	bl	9980 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>
    9878:	9003      	str	r0, [sp, #12]
    987a:	e00d      	b.n	9898 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa2>
        self.set_address_window(sx, sy, ex, ey)?;
    987c:	defe      	udf	#254	; 0xfe
    987e:	f008 fb5a 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9882:	e003      	b.n	988c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x96>

        #[cfg(feature = "noblock_spi")]         //  If non-blocking SPI is enabled...
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }
    9884:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    9888:	b047      	add	sp, #284	; 0x11c
    988a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
    988c:	f00b fde4 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9890:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9894:	e7ff      	b.n	9896 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa0>
    9896:	e034      	b.n	9902 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        self.write_pixels(colors) ? ;
    9898:	9803      	ldr	r0, [sp, #12]
    989a:	f000 0001 	and.w	r0, r0, #1
    989e:	f7ff f965 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    98a2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    98a6:	e7ff      	b.n	98a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xb2>
    98a8:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    98ac:	07c1      	lsls	r1, r0, #31
    98ae:	2900      	cmp	r1, #0
    98b0:	d001      	beq.n	98b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xc0>
    98b2:	e7ff      	b.n	98b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xbe>
    98b4:	e004      	b.n	98c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xca>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    98b6:	f009 fe61 	bl	1357c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    98ba:	9002      	str	r0, [sp, #8]
    98bc:	e009      	b.n	98d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xdc>
        self.write_pixels(colors) ? ;
    98be:	defe      	udf	#254	; 0xfe
    98c0:	f008 fb39 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    98c4:	e7ff      	b.n	98c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xd0>
    98c6:	f00b fdc7 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    98ca:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    98ce:	e7ff      	b.n	98d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xda>
    98d0:	e017      	b.n	9902 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    98d2:	f24e 31e4 	movw	r1, #58340	; 0xe3e4
    98d6:	f2c0 0101 	movt	r1, #1
    98da:	f24e 4340 	movw	r3, #58432	; 0xe440
    98de:	f2c0 0301 	movt	r3, #1
    98e2:	220e      	movs	r2, #14
    98e4:	9802      	ldr	r0, [sp, #8]
    98e6:	f7ff f908 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    98ea:	e7ff      	b.n	98ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xf6>
    98ec:	2000      	movs	r0, #0
        Ok(())
    98ee:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
    98f2:	e7c7      	b.n	9884 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
    98f4:	2000      	movs	r0, #0
    98f6:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    98fa:	9809      	ldr	r0, [sp, #36]	; 0x24
    98fc:	f000 ff1d 	bl	a73a <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    9900:	e7c0      	b.n	9884 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
    9902:	f89d 00ff 	ldrb.w	r0, [sp, #255]	; 0xff
    9906:	07c0      	lsls	r0, r0, #31
    9908:	2800      	cmp	r0, #0
    990a:	d1f3      	bne.n	98f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xfe>
    990c:	e7ba      	b.n	9884 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>

0000990e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>:
    fn write_data(&mut self, data: &[u8]) -> Result<(), ()> {
    990e:	b580      	push	{r7, lr}
    9910:	b084      	sub	sp, #16
    9912:	9001      	str	r0, [sp, #4]
    9914:	9102      	str	r1, [sp, #8]
    9916:	9203      	str	r2, [sp, #12]
        mynewt::spi::spi_noblock_write_data(
    9918:	4608      	mov	r0, r1
    991a:	4611      	mov	r1, r2
    991c:	f009 fd9a 	bl	13454 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    9920:	9000      	str	r0, [sp, #0]
    9922:	e7ff      	b.n	9924 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x16>
    9924:	f24e 4150 	movw	r1, #58448	; 0xe450
    9928:	f2c0 0101 	movt	r1, #1
    992c:	f24e 4360 	movw	r3, #58464	; 0xe460
    9930:	f2c0 0301 	movt	r3, #1
    9934:	220d      	movs	r2, #13
    9936:	9800      	ldr	r0, [sp, #0]
    9938:	f7ff f8df 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    993c:	e7ff      	b.n	993e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x30>
    993e:	2000      	movs	r0, #0
    }
    9940:	b004      	add	sp, #16
    9942:	bd80      	pop	{r7, pc}

00009944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>:
    fn write_word(&mut self, value: u16) -> Result<(), ()> {
    9944:	b580      	push	{r7, lr}
    9946:	b088      	sub	sp, #32
    9948:	460a      	mov	r2, r1
    994a:	9006      	str	r0, [sp, #24]
    994c:	f8ad 101e 	strh.w	r1, [sp, #30]
        let bytes: [u8; 2] = unsafe { transmute(value.to_be()) };
    9950:	9004      	str	r0, [sp, #16]
    9952:	4608      	mov	r0, r1
    9954:	9203      	str	r2, [sp, #12]
    9956:	f000 feb9 	bl	a6cc <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>
    995a:	9002      	str	r0, [sp, #8]
    995c:	e7ff      	b.n	995e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x1a>
    995e:	9802      	ldr	r0, [sp, #8]
    9960:	f8ad 0016 	strh.w	r0, [sp, #22]
    9964:	e7ff      	b.n	9966 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x22>
    9966:	f10d 0116 	add.w	r1, sp, #22
    996a:	2202      	movs	r2, #2
        self.write_data(&bytes)
    996c:	9804      	ldr	r0, [sp, #16]
    996e:	f7ff ffce 	bl	990e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>
    9972:	9001      	str	r0, [sp, #4]
    9974:	e7ff      	b.n	9976 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x32>
    }
    9976:	9801      	ldr	r0, [sp, #4]
    9978:	f000 0001 	and.w	r0, r0, #1
    997c:	b008      	add	sp, #32
    997e:	bd80      	pop	{r7, pc}

00009980 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
    9980:	b580      	push	{r7, lr}
    9982:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
    9986:	90a8      	str	r0, [sp, #672]	; 0x2a0
    9988:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
    998a:	f88d 229f 	strb.w	r2, [sp, #671]	; 0x29f
    998e:	2301      	movs	r3, #1
    9990:	f88d 329f 	strb.w	r3, [sp, #671]	; 0x29f
    9994:	232c      	movs	r3, #44	; 0x2c
    9996:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    999a:	920a      	str	r2, [sp, #40]	; 0x28
    999c:	9209      	str	r2, [sp, #36]	; 0x24
    999e:	9209      	str	r2, [sp, #36]	; 0x24
    99a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    99a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    99a4:	f89d c023 	ldrb.w	ip, [sp, #35]	; 0x23
    99a8:	9007      	str	r0, [sp, #28]
    99aa:	9106      	str	r1, [sp, #24]
    99ac:	4661      	mov	r1, ip
    99ae:	f000 f898 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    99b2:	9005      	str	r0, [sp, #20]
    99b4:	e7ff      	b.n	99b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x36>
    99b6:	9805      	ldr	r0, [sp, #20]
    99b8:	f000 0001 	and.w	r0, r0, #1
    99bc:	f7ff f8d6 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    99c0:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    99c4:	e7ff      	b.n	99c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x46>
    99c6:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
    99ca:	07c1      	lsls	r1, r0, #31
    99cc:	2900      	cmp	r1, #0
    99ce:	d001      	beq.n	99d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x54>
    99d0:	e7ff      	b.n	99d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x52>
    99d2:	e00e      	b.n	99f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x72>
    99d4:	2000      	movs	r0, #0
        for color in colors {
    99d6:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
    99da:	a83f      	add	r0, sp, #252	; 0xfc
    99dc:	22cc      	movs	r2, #204	; 0xcc
    99de:	9004      	str	r0, [sp, #16]
    99e0:	9906      	ldr	r1, [sp, #24]
    99e2:	f014 fb65 	bl	1e0b0 <__aeabi_memcpy>
    99e6:	a80b      	add	r0, sp, #44	; 0x2c
    99e8:	9904      	ldr	r1, [sp, #16]
    99ea:	f00b f869 	bl	14ac0 <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>
    99ee:	e00e      	b.n	9a0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8e>
        self.write_command(Instruction::RAMWR, None)?;
    99f0:	defe      	udf	#254	; 0xfe
    99f2:	f008 faa0 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    99f6:	e004      	b.n	9a02 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x82>
    }
    99f8:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
    99fc:	f50d 7d2e 	add.w	sp, sp, #696	; 0x2b8
    9a00:	bd80      	pop	{r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
    9a02:	f00b fd29 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9a06:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    9a0a:	e7ff      	b.n	9a0c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8c>
    9a0c:	e063      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
    9a0e:	a872      	add	r0, sp, #456	; 0x1c8
    9a10:	a90b      	add	r1, sp, #44	; 0x2c
    9a12:	22d0      	movs	r2, #208	; 0xd0
        for color in colors {
    9a14:	f014 fb4c 	bl	1e0b0 <__aeabi_memcpy>
    9a18:	e7ff      	b.n	9a1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
    9a1a:	a872      	add	r0, sp, #456	; 0x1c8
    9a1c:	f00b f866 	bl	14aec <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>
    9a20:	f8ad 129a 	strh.w	r1, [sp, #666]	; 0x29a
    9a24:	f8ad 0298 	strh.w	r0, [sp, #664]	; 0x298
    9a28:	e7ff      	b.n	9a2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xaa>
    9a2a:	f8bd 0298 	ldrh.w	r0, [sp, #664]	; 0x298
    9a2e:	4601      	mov	r1, r0
    9a30:	2800      	cmp	r0, #0
    9a32:	d001      	beq.n	9a38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb8>
    9a34:	e7ff      	b.n	9a36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb6>
    9a36:	e004      	b.n	9a42 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xc2>
    9a38:	a872      	add	r0, sp, #456	; 0x1c8
        }
    9a3a:	f000 fe9d 	bl	a778 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
    9a3e:	e02e      	b.n	9a9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11e>
        for color in colors {
    9a40:	defe      	udf	#254	; 0xfe
    9a42:	f8bd 029a 	ldrh.w	r0, [sp, #666]	; 0x29a
    9a46:	f8ad 02b2 	strh.w	r0, [sp, #690]	; 0x2b2
    9a4a:	f8ad 02b4 	strh.w	r0, [sp, #692]	; 0x2b4
    9a4e:	f8ad 02b6 	strh.w	r0, [sp, #694]	; 0x2b6
            self.write_word(color)?;
    9a52:	9907      	ldr	r1, [sp, #28]
    9a54:	9003      	str	r0, [sp, #12]
    9a56:	4608      	mov	r0, r1
    9a58:	9903      	ldr	r1, [sp, #12]
    9a5a:	f7ff ff73 	bl	9944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9a5e:	9002      	str	r0, [sp, #8]
    9a60:	e7ff      	b.n	9a62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xe2>
    9a62:	9802      	ldr	r0, [sp, #8]
    9a64:	f000 0001 	and.w	r0, r0, #1
    9a68:	f7ff f880 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9a6c:	f88d 029e 	strb.w	r0, [sp, #670]	; 0x29e
    9a70:	e7ff      	b.n	9a72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xf2>
    9a72:	f89d 029e 	ldrb.w	r0, [sp, #670]	; 0x29e
    9a76:	07c1      	lsls	r1, r0, #31
    9a78:	2900      	cmp	r1, #0
    9a7a:	d001      	beq.n	9a80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x100>
    9a7c:	e7ff      	b.n	9a7e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xfe>
    9a7e:	e001      	b.n	9a84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x104>
        for color in colors {
    9a80:	e7cb      	b.n	9a1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
            self.write_word(color)?;
    9a82:	defe      	udf	#254	; 0xfe
    9a84:	f008 fa57 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9a88:	e7ff      	b.n	9a8a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x10a>
    9a8a:	f00b fce5 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9a8e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    9a92:	e7ff      	b.n	9a94 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x114>
    9a94:	a872      	add	r0, sp, #456	; 0x1c8
        }
    9a96:	f000 fe6f 	bl	a778 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
    9a9a:	e7ff      	b.n	9a9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11c>
    }
    9a9c:	e01b      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    9a9e:	f009 fd6d 	bl	1357c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    9aa2:	9001      	str	r0, [sp, #4]
    9aa4:	e7ff      	b.n	9aa6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x126>
    9aa6:	f24e 31e4 	movw	r1, #58340	; 0xe3e4
    9aaa:	f2c0 0101 	movt	r1, #1
    9aae:	f24e 4370 	movw	r3, #58480	; 0xe470
    9ab2:	f2c0 0301 	movt	r3, #1
    9ab6:	220e      	movs	r2, #14
    9ab8:	9801      	ldr	r0, [sp, #4]
    9aba:	f7ff f81e 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9abe:	e7ff      	b.n	9ac0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x140>
    9ac0:	2000      	movs	r0, #0
        Ok(())
    9ac2:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    }
    9ac6:	e797      	b.n	99f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
    9ac8:	2000      	movs	r0, #0
    9aca:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
    9ace:	9806      	ldr	r0, [sp, #24]
    9ad0:	f000 fe33 	bl	a73a <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    9ad4:	e790      	b.n	99f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
    9ad6:	f89d 029f 	ldrb.w	r0, [sp, #671]	; 0x29f
    9ada:	07c0      	lsls	r0, r0, #31
    9adc:	2800      	cmp	r0, #0
    9ade:	d1f3      	bne.n	9ac8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x148>
    9ae0:	e78a      	b.n	99f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>

00009ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>:
    fn write_command(&mut self, command: Instruction, params: Option<&[u8]>) -> Result<(), ()> {
    9ae2:	b580      	push	{r7, lr}
    9ae4:	b08e      	sub	sp, #56	; 0x38
    9ae6:	468c      	mov	ip, r1
    9ae8:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
    9aec:	920b      	str	r2, [sp, #44]	; 0x2c
    9aee:	930c      	str	r3, [sp, #48]	; 0x30
    9af0:	900d      	str	r0, [sp, #52]	; 0x34
    9af2:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
            command.to_u8().unwrap()
    9af6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    9afa:	f000 fdbd 	bl	a678 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>
    9afe:	9008      	str	r0, [sp, #32]
    9b00:	9107      	str	r1, [sp, #28]
    9b02:	e7ff      	b.n	9b04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x22>
    9b04:	9808      	ldr	r0, [sp, #32]
    9b06:	f000 0001 	and.w	r0, r0, #1
    9b0a:	f24e 4280 	movw	r2, #58496	; 0xe480
    9b0e:	f2c0 0201 	movt	r2, #1
    9b12:	9907      	ldr	r1, [sp, #28]
    9b14:	f00a fe23 	bl	1475e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9b18:	9006      	str	r0, [sp, #24]
    9b1a:	e7ff      	b.n	9b1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x3a>
        mynewt::spi::spi_noblock_write_command(
    9b1c:	9806      	ldr	r0, [sp, #24]
    9b1e:	f009 fc51 	bl	133c4 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>
    9b22:	9005      	str	r0, [sp, #20]
    9b24:	e7ff      	b.n	9b26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x44>
    9b26:	f24e 4190 	movw	r1, #58512	; 0xe490
    9b2a:	f2c0 0101 	movt	r1, #1
    9b2e:	f24e 439c 	movw	r3, #58524	; 0xe49c
    9b32:	f2c0 0301 	movt	r3, #1
    9b36:	220c      	movs	r2, #12
    9b38:	9805      	ldr	r0, [sp, #20]
    9b3a:	f7fe ffde 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9b3e:	e7ff      	b.n	9b40 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x5e>
    9b40:	a80b      	add	r0, sp, #44	; 0x2c
        if params.is_some() {
    9b42:	f00a fe67 	bl	14814 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>
    9b46:	9004      	str	r0, [sp, #16]
    9b48:	e7ff      	b.n	9b4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x68>
    9b4a:	9804      	ldr	r0, [sp, #16]
    9b4c:	07c1      	lsls	r1, r0, #31
    9b4e:	2900      	cmp	r1, #0
    9b50:	d01f      	beq.n	9b92 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    9b52:	e7ff      	b.n	9b54 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x72>
                params.unwrap()
    9b54:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9b56:	990c      	ldr	r1, [sp, #48]	; 0x30
    9b58:	f24e 42ac 	movw	r2, #58540	; 0xe4ac
    9b5c:	f2c0 0201 	movt	r2, #1
    9b60:	f00a fe26 	bl	147b0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>
    9b64:	9003      	str	r0, [sp, #12]
    9b66:	9102      	str	r1, [sp, #8]
    9b68:	e7ff      	b.n	9b6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x88>
            mynewt::spi::spi_noblock_write_data(
    9b6a:	9803      	ldr	r0, [sp, #12]
    9b6c:	9902      	ldr	r1, [sp, #8]
    9b6e:	f009 fc71 	bl	13454 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    9b72:	9001      	str	r0, [sp, #4]
    9b74:	e7ff      	b.n	9b76 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x94>
    9b76:	f24e 4150 	movw	r1, #58448	; 0xe450
    9b7a:	f2c0 0101 	movt	r1, #1
    9b7e:	f24e 43bc 	movw	r3, #58556	; 0xe4bc
    9b82:	f2c0 0301 	movt	r3, #1
    9b86:	220d      	movs	r2, #13
    9b88:	9801      	ldr	r0, [sp, #4]
    9b8a:	f7fe ffb6 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9b8e:	e7ff      	b.n	9b90 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xae>
        if params.is_some() {
    9b90:	e7ff      	b.n	9b92 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    9b92:	2000      	movs	r0, #0
    }
    9b94:	b00e      	add	sp, #56	; 0x38
    9b96:	bd80      	pop	{r7, pc}

00009b98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>:
    pub fn set_orientation(&mut self, orientation: &Orientation) -> Result<(), ()> {
    9b98:	b580      	push	{r7, lr}
    9b9a:	b098      	sub	sp, #96	; 0x60
    9b9c:	9012      	str	r0, [sp, #72]	; 0x48
    9b9e:	9113      	str	r1, [sp, #76]	; 0x4c
        if self.rgb {
    9ba0:	7d02      	ldrb	r2, [r0, #20]
    9ba2:	07d2      	lsls	r2, r2, #31
    9ba4:	2a00      	cmp	r2, #0
    9ba6:	910a      	str	r1, [sp, #40]	; 0x28
    9ba8:	9009      	str	r0, [sp, #36]	; 0x24
    9baa:	d109      	bne.n	9bc0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x28>
    9bac:	e7ff      	b.n	9bae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x16>
    9bae:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9bb0:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    9bb4:	980a      	ldr	r0, [sp, #40]	; 0x28
    9bb6:	f7ff fd96 	bl	96e6 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9bba:	9008      	str	r0, [sp, #32]
    9bbc:	9107      	str	r1, [sp, #28]
    9bbe:	e044      	b.n	9c4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb2>
    9bc0:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
    9bc2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    9bc6:	980a      	ldr	r0, [sp, #40]	; 0x28
    9bc8:	f7ff fd8d 	bl	96e6 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9bcc:	9006      	str	r0, [sp, #24]
    9bce:	9105      	str	r1, [sp, #20]
    9bd0:	e7ff      	b.n	9bd2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x3a>
    9bd2:	9806      	ldr	r0, [sp, #24]
    9bd4:	f000 0001 	and.w	r0, r0, #1
    9bd8:	f24e 42cc 	movw	r2, #58572	; 0xe4cc
    9bdc:	f2c0 0201 	movt	r2, #1
    9be0:	9905      	ldr	r1, [sp, #20]
    9be2:	f00a fdbc 	bl	1475e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9be6:	9004      	str	r0, [sp, #16]
    9be8:	e7ff      	b.n	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x52>
    9bea:	9804      	ldr	r0, [sp, #16]
    9bec:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9bf0:	f10d 0139 	add.w	r1, sp, #57	; 0x39
    9bf4:	910c      	str	r1, [sp, #48]	; 0x30
    9bf6:	2101      	movs	r1, #1
    9bf8:	910d      	str	r1, [sp, #52]	; 0x34
            self.write_command(
    9bfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9bfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9bfe:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    9c02:	9809      	ldr	r0, [sp, #36]	; 0x24
    9c04:	f7ff ff6d 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9c08:	9003      	str	r0, [sp, #12]
    9c0a:	e7ff      	b.n	9c0c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x74>
    9c0c:	9803      	ldr	r0, [sp, #12]
    9c0e:	f000 0001 	and.w	r0, r0, #1
    9c12:	f7fe ffab 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9c16:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    9c1a:	e7ff      	b.n	9c1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x84>
            ))?;
    9c1c:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    9c20:	07c1      	lsls	r1, r0, #31
    9c22:	2900      	cmp	r1, #0
    9c24:	d001      	beq.n	9c2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x92>
    9c26:	e7ff      	b.n	9c28 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x90>
    9c28:	e001      	b.n	9c2e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x96>
        if self.rgb {
    9c2a:	e047      	b.n	9cbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    9c2c:	defe      	udf	#254	; 0xfe
            ))?;
    9c2e:	f008 f982 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9c32:	e003      	b.n	9c3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xa4>
    }
    9c34:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    9c38:	b018      	add	sp, #96	; 0x60
    9c3a:	bd80      	pop	{r7, pc}
            ))?;
    9c3c:	f00b fc0c 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9c40:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9c44:	e7ff      	b.n	9c46 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xae>
    9c46:	e7ff      	b.n	9c48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9c48:	e7f4      	b.n	9c34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9c4a:	9808      	ldr	r0, [sp, #32]
    9c4c:	f000 0001 	and.w	r0, r0, #1
    9c50:	f24e 42dc 	movw	r2, #58588	; 0xe4dc
    9c54:	f2c0 0201 	movt	r2, #1
    9c58:	9907      	ldr	r1, [sp, #28]
    9c5a:	f00a fd80 	bl	1475e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9c5e:	9002      	str	r0, [sp, #8]
    9c60:	e7ff      	b.n	9c62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xca>
    9c62:	9802      	ldr	r0, [sp, #8]
    9c64:	f040 0108 	orr.w	r1, r0, #8
    9c68:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
    9c6c:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    9c70:	910f      	str	r1, [sp, #60]	; 0x3c
    9c72:	2101      	movs	r1, #1
    9c74:	9110      	str	r1, [sp, #64]	; 0x40
            self.write_command(
    9c76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9c78:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9c7a:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9c7e:	9809      	ldr	r0, [sp, #36]	; 0x24
    9c80:	f7ff ff2f 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9c84:	9001      	str	r0, [sp, #4]
    9c86:	e7ff      	b.n	9c88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xf0>
    9c88:	9801      	ldr	r0, [sp, #4]
    9c8a:	f000 0001 	and.w	r0, r0, #1
    9c8e:	f7fe ff6d 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9c92:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9c96:	e7ff      	b.n	9c98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x100>
            ))?;
    9c98:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9c9c:	07c1      	lsls	r1, r0, #31
    9c9e:	2900      	cmp	r1, #0
    9ca0:	d001      	beq.n	9ca6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10e>
    9ca2:	e7ff      	b.n	9ca4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10c>
    9ca4:	e001      	b.n	9caa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x112>
        if self.rgb {
    9ca6:	e009      	b.n	9cbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    9ca8:	defe      	udf	#254	; 0xfe
            ))?;
    9caa:	f008 f944 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9cae:	e7ff      	b.n	9cb0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x118>
    9cb0:	f00b fbd2 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9cb4:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9cb8:	e7ff      	b.n	9cba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x122>
    9cba:	e7c5      	b.n	9c48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9cbc:	2000      	movs	r0, #0
        Ok(())
    9cbe:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
    9cc2:	e7b7      	b.n	9c34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>

00009cc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>:
    fn set_address_window(&mut self, sx: u16, sy: u16, ex: u16, ey: u16) -> Result<(), ()> {
    9cc4:	b5b0      	push	{r4, r5, r7, lr}
    9cc6:	b0a2      	sub	sp, #136	; 0x88
    9cc8:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
    9ccc:	469e      	mov	lr, r3
    9cce:	4614      	mov	r4, r2
    9cd0:	460d      	mov	r5, r1
    9cd2:	9015      	str	r0, [sp, #84]	; 0x54
    9cd4:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
    9cd8:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    9cdc:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    9ce0:	f8ad c05e 	strh.w	ip, [sp, #94]	; 0x5e
    9ce4:	212a      	movs	r1, #42	; 0x2a
        self.write_command(Instruction::CASET, None)?;
    9ce6:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
    9cea:	2100      	movs	r1, #0
    9cec:	9110      	str	r1, [sp, #64]	; 0x40
    9cee:	910f      	str	r1, [sp, #60]	; 0x3c
    9cf0:	910f      	str	r1, [sp, #60]	; 0x3c
    9cf2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9cf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9cf6:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9cfa:	900d      	str	r0, [sp, #52]	; 0x34
    9cfc:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    9d00:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    9d04:	940a      	str	r4, [sp, #40]	; 0x28
    9d06:	9509      	str	r5, [sp, #36]	; 0x24
    9d08:	f7ff feeb 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9d0c:	9008      	str	r0, [sp, #32]
    9d0e:	e7ff      	b.n	9d10 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x4c>
    9d10:	9808      	ldr	r0, [sp, #32]
    9d12:	f000 0001 	and.w	r0, r0, #1
    9d16:	f7fe ff29 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9d1a:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9d1e:	e7ff      	b.n	9d20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x5c>
    9d20:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9d24:	07c1      	lsls	r1, r0, #31
    9d26:	2900      	cmp	r1, #0
    9d28:	d001      	beq.n	9d2e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x6a>
    9d2a:	e7ff      	b.n	9d2c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x68>
    9d2c:	e00d      	b.n	9d4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x86>
        self.write_word(sx + self.dx)?;
    9d2e:	980d      	ldr	r0, [sp, #52]	; 0x34
    9d30:	8a01      	ldrh	r1, [r0, #16]
    9d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9d34:	fa11 f182 	uxtah	r1, r1, r2
    9d38:	b28b      	uxth	r3, r1
    9d3a:	468c      	mov	ip, r1
    9d3c:	428b      	cmp	r3, r1
    9d3e:	f8cd c01c 	str.w	ip, [sp, #28]
    9d42:	f040 80c2 	bne.w	9eca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x206>
    9d46:	e00d      	b.n	9d64 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xa0>
        self.write_command(Instruction::CASET, None)?;
    9d48:	defe      	udf	#254	; 0xfe
    9d4a:	f008 f8f4 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9d4e:	e003      	b.n	9d58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x94>
    }
    9d50:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    9d54:	b022      	add	sp, #136	; 0x88
    9d56:	bdb0      	pop	{r4, r5, r7, pc}
        self.write_command(Instruction::CASET, None)?;
    9d58:	f00b fb7e 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9d5c:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9d60:	e7ff      	b.n	9d62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x9e>
    9d62:	e7f5      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9d64:	980d      	ldr	r0, [sp, #52]	; 0x34
    9d66:	9907      	ldr	r1, [sp, #28]
    9d68:	f7ff fdec 	bl	9944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9d6c:	9006      	str	r0, [sp, #24]
    9d6e:	e7ff      	b.n	9d70 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xac>
    9d70:	9806      	ldr	r0, [sp, #24]
    9d72:	f000 0001 	and.w	r0, r0, #1
    9d76:	f7fe fef9 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9d7a:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    9d7e:	e7ff      	b.n	9d80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xbc>
    9d80:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9d84:	07c1      	lsls	r1, r0, #31
    9d86:	2900      	cmp	r1, #0
    9d88:	d001      	beq.n	9d8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xca>
    9d8a:	e7ff      	b.n	9d8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xc8>
    9d8c:	e00d      	b.n	9daa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xe6>
        self.write_word(ex + self.dx)?;
    9d8e:	980d      	ldr	r0, [sp, #52]	; 0x34
    9d90:	8a01      	ldrh	r1, [r0, #16]
    9d92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9d94:	fa11 f182 	uxtah	r1, r1, r2
    9d98:	b28b      	uxth	r3, r1
    9d9a:	468c      	mov	ip, r1
    9d9c:	428b      	cmp	r3, r1
    9d9e:	f8cd c014 	str.w	ip, [sp, #20]
    9da2:	f040 809e 	bne.w	9ee2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x21e>
    9da6:	e009      	b.n	9dbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf8>
        self.write_word(sx + self.dx)?;
    9da8:	defe      	udf	#254	; 0xfe
    9daa:	f008 f8c4 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9dae:	e7ff      	b.n	9db0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xec>
    9db0:	f00b fb52 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9db4:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9db8:	e7ff      	b.n	9dba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf6>
    9dba:	e7c9      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ex + self.dx)?;
    9dbc:	980d      	ldr	r0, [sp, #52]	; 0x34
    9dbe:	9905      	ldr	r1, [sp, #20]
    9dc0:	f7ff fdc0 	bl	9944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9dc4:	9004      	str	r0, [sp, #16]
    9dc6:	e7ff      	b.n	9dc8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x104>
    9dc8:	9804      	ldr	r0, [sp, #16]
    9dca:	f000 0001 	and.w	r0, r0, #1
    9dce:	f7fe fecd 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9dd2:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    9dd6:	e7ff      	b.n	9dd8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x114>
    9dd8:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    9ddc:	07c1      	lsls	r1, r0, #31
    9dde:	2900      	cmp	r1, #0
    9de0:	d001      	beq.n	9de6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x122>
    9de2:	e7ff      	b.n	9de4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x120>
    9de4:	e010      	b.n	9e08 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x144>
    9de6:	202b      	movs	r0, #43	; 0x2b
        self.write_command(Instruction::RASET, None)?;
    9de8:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
    9dec:	2000      	movs	r0, #0
    9dee:	9013      	str	r0, [sp, #76]	; 0x4c
    9df0:	9012      	str	r0, [sp, #72]	; 0x48
    9df2:	9012      	str	r0, [sp, #72]	; 0x48
    9df4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9df6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9df8:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
    9dfc:	980d      	ldr	r0, [sp, #52]	; 0x34
    9dfe:	f7ff fe70 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9e02:	9003      	str	r0, [sp, #12]
    9e04:	e009      	b.n	9e1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x156>
        self.write_word(ex + self.dx)?;
    9e06:	defe      	udf	#254	; 0xfe
    9e08:	f008 f895 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9e0c:	e7ff      	b.n	9e0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x14a>
    9e0e:	f00b fb23 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9e12:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9e16:	e7ff      	b.n	9e18 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x154>
    9e18:	e79a      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_command(Instruction::RASET, None)?;
    9e1a:	9803      	ldr	r0, [sp, #12]
    9e1c:	f000 0001 	and.w	r0, r0, #1
    9e20:	f7fe fea4 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9e24:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    9e28:	e7ff      	b.n	9e2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x166>
    9e2a:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
    9e2e:	07c1      	lsls	r1, r0, #31
    9e30:	2900      	cmp	r1, #0
    9e32:	d001      	beq.n	9e38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x174>
    9e34:	e7ff      	b.n	9e36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x172>
    9e36:	e00c      	b.n	9e52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x18e>
        self.write_word(sy + self.dy)?;
    9e38:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e3a:	8a41      	ldrh	r1, [r0, #18]
    9e3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9e3e:	fa11 f182 	uxtah	r1, r1, r2
    9e42:	b28b      	uxth	r3, r1
    9e44:	468c      	mov	ip, r1
    9e46:	428b      	cmp	r3, r1
    9e48:	f8cd c008 	str.w	ip, [sp, #8]
    9e4c:	d155      	bne.n	9efa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x236>
    9e4e:	e009      	b.n	9e64 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1a0>
        self.write_command(Instruction::RASET, None)?;
    9e50:	defe      	udf	#254	; 0xfe
    9e52:	f008 f870 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9e56:	e7ff      	b.n	9e58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x194>
    9e58:	f00b fafe 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9e5c:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9e60:	e7ff      	b.n	9e62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x19e>
    9e62:	e775      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sy + self.dy)?;
    9e64:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e66:	9902      	ldr	r1, [sp, #8]
    9e68:	f7ff fd6c 	bl	9944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9e6c:	9001      	str	r0, [sp, #4]
    9e6e:	e7ff      	b.n	9e70 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ac>
    9e70:	9801      	ldr	r0, [sp, #4]
    9e72:	f000 0001 	and.w	r0, r0, #1
    9e76:	f7fe fe79 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9e7a:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
    9e7e:	e7ff      	b.n	9e80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1bc>
    9e80:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    9e84:	07c1      	lsls	r1, r0, #31
    9e86:	2900      	cmp	r1, #0
    9e88:	d001      	beq.n	9e8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ca>
    9e8a:	e7ff      	b.n	9e8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1c8>
    9e8c:	e00c      	b.n	9ea8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1e4>
        self.write_word(ey + self.dy)
    9e8e:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e90:	8a41      	ldrh	r1, [r0, #18]
    9e92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9e94:	fa11 f182 	uxtah	r1, r1, r2
    9e98:	b28b      	uxth	r3, r1
    9e9a:	468c      	mov	ip, r1
    9e9c:	428b      	cmp	r3, r1
    9e9e:	f8cd c000 	str.w	ip, [sp]
    9ea2:	d136      	bne.n	9f12 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x24e>
    9ea4:	e009      	b.n	9eba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f6>
        self.write_word(sy + self.dy)?;
    9ea6:	defe      	udf	#254	; 0xfe
    9ea8:	f008 f845 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9eac:	e7ff      	b.n	9eae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ea>
    9eae:	f00b fad3 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9eb2:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9eb6:	e7ff      	b.n	9eb8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f4>
    9eb8:	e74a      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ey + self.dy)
    9eba:	980d      	ldr	r0, [sp, #52]	; 0x34
    9ebc:	9900      	ldr	r1, [sp, #0]
    9ebe:	f7ff fd41 	bl	9944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9ec2:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9ec6:	e7ff      	b.n	9ec8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x204>
    }
    9ec8:	e742      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9eca:	f24e 5000 	movw	r0, #58624	; 0xe500
    9ece:	f2c0 0001 	movt	r0, #1
    9ed2:	f24e 42ec 	movw	r2, #58604	; 0xe4ec
    9ed6:	f2c0 0201 	movt	r2, #1
    9eda:	211c      	movs	r1, #28
    9edc:	f00d fd14 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9ee0:	defe      	udf	#254	; 0xfe
        self.write_word(ex + self.dx)?;
    9ee2:	f24e 5000 	movw	r0, #58624	; 0xe500
    9ee6:	f2c0 0001 	movt	r0, #1
    9eea:	f24e 521c 	movw	r2, #58652	; 0xe51c
    9eee:	f2c0 0201 	movt	r2, #1
    9ef2:	211c      	movs	r1, #28
    9ef4:	f00d fd08 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9ef8:	defe      	udf	#254	; 0xfe
        self.write_word(sy + self.dy)?;
    9efa:	f24e 5000 	movw	r0, #58624	; 0xe500
    9efe:	f2c0 0001 	movt	r0, #1
    9f02:	f24e 522c 	movw	r2, #58668	; 0xe52c
    9f06:	f2c0 0201 	movt	r2, #1
    9f0a:	211c      	movs	r1, #28
    9f0c:	f00d fcfc 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9f10:	defe      	udf	#254	; 0xfe
        self.write_word(ey + self.dy)
    9f12:	f24e 5000 	movw	r0, #58624	; 0xe500
    9f16:	f2c0 0001 	movt	r0, #1
    9f1a:	f24e 523c 	movw	r2, #58684	; 0xe53c
    9f1e:	f2c0 0201 	movt	r2, #1
    9f22:	211c      	movs	r1, #28
    9f24:	f00d fcf0 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9f28:	defe      	udf	#254	; 0xfe

00009f2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>:
    pub fn new(
    9f2a:	b5b0      	push	{r4, r5, r7, lr}
    9f2c:	b08a      	sub	sp, #40	; 0x28
    9f2e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    9f32:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    9f36:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    9f38:	9106      	str	r1, [sp, #24]
    9f3a:	9207      	str	r2, [sp, #28]
    9f3c:	9308      	str	r3, [sp, #32]
    9f3e:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    9f42:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
        let display = ST7735 {
    9f46:	9100      	str	r1, [sp, #0]
    9f48:	9201      	str	r2, [sp, #4]
    9f4a:	9302      	str	r3, [sp, #8]
    9f4c:	9403      	str	r4, [sp, #12]
    9f4e:	f88d e014 	strb.w	lr, [sp, #20]
    9f52:	f88d c015 	strb.w	ip, [sp, #21]
    9f56:	2100      	movs	r1, #0
    9f58:	f8ad 1010 	strh.w	r1, [sp, #16]
    9f5c:	f8ad 1012 	strh.w	r1, [sp, #18]
    9f60:	4669      	mov	r1, sp
        display
    9f62:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    9f66:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    }
    9f6a:	b00a      	add	sp, #40	; 0x28
    9f6c:	bdb0      	pop	{r4, r5, r7, pc}

00009f6e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>:
    pub fn init<DELAY>(&mut self, delay: &mut DELAY) -> Result<(), ()>
    9f6e:	b580      	push	{r7, lr}
    9f70:	b0f6      	sub	sp, #472	; 0x1d8
    9f72:	904e      	str	r0, [sp, #312]	; 0x138
    9f74:	914f      	str	r1, [sp, #316]	; 0x13c
        mynewt::spi::spi_noblock_init()  //  Init the SPI queue
    9f76:	9117      	str	r1, [sp, #92]	; 0x5c
    9f78:	9016      	str	r0, [sp, #88]	; 0x58
    9f7a:	f008 fcc9 	bl	12910 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>
    9f7e:	9015      	str	r0, [sp, #84]	; 0x54
    9f80:	e7ff      	b.n	9f82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x14>
    9f82:	f24e 514c 	movw	r1, #58700	; 0xe54c
    9f86:	f2c0 0101 	movt	r1, #1
    9f8a:	f24e 535c 	movw	r3, #58716	; 0xe55c
    9f8e:	f2c0 0301 	movt	r3, #1
    9f92:	220d      	movs	r2, #13
    9f94:	9815      	ldr	r0, [sp, #84]	; 0x54
    9f96:	f7fe fdb0 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9f9a:	e7ff      	b.n	9f9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2e>
        self.hard_reset()?;
    9f9c:	9816      	ldr	r0, [sp, #88]	; 0x58
    9f9e:	f7ff fbbd 	bl	971c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>
    9fa2:	9014      	str	r0, [sp, #80]	; 0x50
    9fa4:	e7ff      	b.n	9fa6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38>
    9fa6:	9814      	ldr	r0, [sp, #80]	; 0x50
    9fa8:	f000 0001 	and.w	r0, r0, #1
    9fac:	f7fe fdde 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9fb0:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
    9fb4:	e7ff      	b.n	9fb6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48>
    9fb6:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
    9fba:	07c1      	lsls	r1, r0, #31
    9fbc:	2900      	cmp	r1, #0
    9fbe:	d001      	beq.n	9fc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x56>
    9fc0:	e7ff      	b.n	9fc2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54>
    9fc2:	e010      	b.n	9fe6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x78>
    9fc4:	2001      	movs	r0, #1
        self.write_command(Instruction::SWRESET, None)?;
    9fc6:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
    9fca:	2000      	movs	r0, #0
    9fcc:	901a      	str	r0, [sp, #104]	; 0x68
    9fce:	9019      	str	r0, [sp, #100]	; 0x64
    9fd0:	9019      	str	r0, [sp, #100]	; 0x64
    9fd2:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9fd4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9fd6:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
    9fda:	9816      	ldr	r0, [sp, #88]	; 0x58
    9fdc:	f7ff fd81 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9fe0:	9013      	str	r0, [sp, #76]	; 0x4c
    9fe2:	e00d      	b.n	a000 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x92>
        self.hard_reset()?;
    9fe4:	defe      	udf	#254	; 0xfe
    9fe6:	f007 ffa6 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9fea:	e003      	b.n	9ff4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x86>
    }
    9fec:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    9ff0:	b076      	add	sp, #472	; 0x1d8
    9ff2:	bd80      	pop	{r7, pc}
        self.hard_reset()?;
    9ff4:	f00b fa30 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ff8:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9ffc:	e7ff      	b.n	9ffe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x90>
    9ffe:	e7f5      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::SWRESET, None)?;
    a000:	9813      	ldr	r0, [sp, #76]	; 0x4c
    a002:	f000 0001 	and.w	r0, r0, #1
    a006:	f7fe fdb1 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a00a:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
    a00e:	e7ff      	b.n	a010 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xa2>
    a010:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    a014:	07c1      	lsls	r1, r0, #31
    a016:	2900      	cmp	r1, #0
    a018:	d001      	beq.n	a01e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xb0>
    a01a:	e7ff      	b.n	a01c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xae>
    a01c:	e005      	b.n	a02a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xbc>
    a01e:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a020:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a022:	f00a fa70 	bl	14506 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a026:	e009      	b.n	a03c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xce>
        self.write_command(Instruction::SWRESET, None)?;
    a028:	defe      	udf	#254	; 0xfe
    a02a:	f007 ff84 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a02e:	e7ff      	b.n	a030 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xc2>
    a030:	f00b fa12 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a034:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a038:	e7ff      	b.n	a03a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xcc>
    a03a:	e7d7      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a03c:	2011      	movs	r0, #17
        self.write_command(Instruction::SLPOUT, None)?;
    a03e:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
    a042:	2000      	movs	r0, #0
    a044:	901d      	str	r0, [sp, #116]	; 0x74
    a046:	901c      	str	r0, [sp, #112]	; 0x70
    a048:	901c      	str	r0, [sp, #112]	; 0x70
    a04a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    a04c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a04e:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
    a052:	9816      	ldr	r0, [sp, #88]	; 0x58
    a054:	f7ff fd45 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a058:	9012      	str	r0, [sp, #72]	; 0x48
    a05a:	e7ff      	b.n	a05c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xee>
    a05c:	9812      	ldr	r0, [sp, #72]	; 0x48
    a05e:	f000 0001 	and.w	r0, r0, #1
    a062:	f7fe fd83 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a066:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
    a06a:	e7ff      	b.n	a06c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xfe>
    a06c:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
    a070:	07c1      	lsls	r1, r0, #31
    a072:	2900      	cmp	r1, #0
    a074:	d001      	beq.n	a07a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10c>
    a076:	e7ff      	b.n	a078 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10a>
    a078:	e005      	b.n	a086 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x118>
    a07a:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a07c:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a07e:	f00a fa42 	bl	14506 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a082:	e009      	b.n	a098 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x12a>
        self.write_command(Instruction::SLPOUT, None)?;
    a084:	defe      	udf	#254	; 0xfe
    a086:	f007 ff56 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a08a:	e7ff      	b.n	a08c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x11e>
    a08c:	f00b f9e4 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a090:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a094:	e7ff      	b.n	a096 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x128>
    a096:	e7a9      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a098:	20b1      	movs	r0, #177	; 0xb1
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    a09a:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
    a09e:	f24e 5070 	movw	r0, #58736	; 0xe570
    a0a2:	f2c0 0001 	movt	r0, #1
    a0a6:	6800      	ldr	r0, [r0, #0]
    a0a8:	901f      	str	r0, [sp, #124]	; 0x7c
    a0aa:	2003      	movs	r0, #3
    a0ac:	9020      	str	r0, [sp, #128]	; 0x80
    a0ae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    a0b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a0b2:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
    a0b6:	9816      	ldr	r0, [sp, #88]	; 0x58
    a0b8:	f7ff fd13 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a0bc:	9011      	str	r0, [sp, #68]	; 0x44
    a0be:	e7ff      	b.n	a0c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x152>
    a0c0:	9811      	ldr	r0, [sp, #68]	; 0x44
    a0c2:	f000 0001 	and.w	r0, r0, #1
    a0c6:	f7fe fd51 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a0ca:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
    a0ce:	e7ff      	b.n	a0d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x162>
    a0d0:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
    a0d4:	07c1      	lsls	r1, r0, #31
    a0d6:	2900      	cmp	r1, #0
    a0d8:	d001      	beq.n	a0de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x170>
    a0da:	e7ff      	b.n	a0dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x16e>
    a0dc:	e014      	b.n	a108 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x19a>
    a0de:	20b2      	movs	r0, #178	; 0xb2
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    a0e0:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
    a0e4:	f24e 5070 	movw	r0, #58736	; 0xe570
    a0e8:	f2c0 0001 	movt	r0, #1
    a0ec:	6800      	ldr	r0, [r0, #0]
    a0ee:	9022      	str	r0, [sp, #136]	; 0x88
    a0f0:	2003      	movs	r0, #3
    a0f2:	9023      	str	r0, [sp, #140]	; 0x8c
    a0f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
    a0f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a0f8:	f89d 1087 	ldrb.w	r1, [sp, #135]	; 0x87
    a0fc:	9816      	ldr	r0, [sp, #88]	; 0x58
    a0fe:	f7ff fcf0 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a102:	9010      	str	r0, [sp, #64]	; 0x40
    a104:	e009      	b.n	a11a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ac>
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    a106:	defe      	udf	#254	; 0xfe
    a108:	f007 ff15 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a10c:	e7ff      	b.n	a10e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1a0>
    a10e:	f00b f9a3 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a112:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a116:	e7ff      	b.n	a118 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1aa>
    a118:	e768      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    a11a:	9810      	ldr	r0, [sp, #64]	; 0x40
    a11c:	f000 0001 	and.w	r0, r0, #1
    a120:	f7fe fd24 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a124:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
    a128:	e7ff      	b.n	a12a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1bc>
    a12a:	f89d 0086 	ldrb.w	r0, [sp, #134]	; 0x86
    a12e:	07c1      	lsls	r1, r0, #31
    a130:	2900      	cmp	r1, #0
    a132:	d001      	beq.n	a138 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ca>
    a134:	e7ff      	b.n	a136 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1c8>
    a136:	e014      	b.n	a162 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1f4>
    a138:	20b3      	movs	r0, #179	; 0xb3
        self.write_command(Instruction::FRMCTR3,
    a13a:	f88d 0093 	strb.w	r0, [sp, #147]	; 0x93
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a13e:	f24e 507c 	movw	r0, #58748	; 0xe57c
    a142:	f2c0 0001 	movt	r0, #1
    a146:	6800      	ldr	r0, [r0, #0]
    a148:	9025      	str	r0, [sp, #148]	; 0x94
    a14a:	2006      	movs	r0, #6
    a14c:	9026      	str	r0, [sp, #152]	; 0x98
        self.write_command(Instruction::FRMCTR3,
    a14e:	9a25      	ldr	r2, [sp, #148]	; 0x94
    a150:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a152:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
    a156:	9816      	ldr	r0, [sp, #88]	; 0x58
    a158:	f7ff fcc3 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a15c:	900f      	str	r0, [sp, #60]	; 0x3c
    a15e:	e009      	b.n	a174 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x206>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    a160:	defe      	udf	#254	; 0xfe
    a162:	f007 fee8 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a166:	e7ff      	b.n	a168 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1fa>
    a168:	f00b f976 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a16c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a170:	e7ff      	b.n	a172 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x204>
    a172:	e73b      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR3,
    a174:	980f      	ldr	r0, [sp, #60]	; 0x3c
    a176:	f000 0001 	and.w	r0, r0, #1
    a17a:	f7fe fcf7 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a17e:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
    a182:	e7ff      	b.n	a184 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x216>
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a184:	f89d 0092 	ldrb.w	r0, [sp, #146]	; 0x92
    a188:	07c1      	lsls	r1, r0, #31
    a18a:	2900      	cmp	r1, #0
    a18c:	d001      	beq.n	a192 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x224>
    a18e:	e7ff      	b.n	a190 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x222>
    a190:	e014      	b.n	a1bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x24e>
    a192:	20b4      	movs	r0, #180	; 0xb4
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a194:	f88d 009f 	strb.w	r0, [sp, #159]	; 0x9f
    a198:	f24e 5084 	movw	r0, #58756	; 0xe584
    a19c:	f2c0 0001 	movt	r0, #1
    a1a0:	6800      	ldr	r0, [r0, #0]
    a1a2:	9028      	str	r0, [sp, #160]	; 0xa0
    a1a4:	2001      	movs	r0, #1
    a1a6:	9029      	str	r0, [sp, #164]	; 0xa4
    a1a8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    a1aa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    a1ac:	f89d 109f 	ldrb.w	r1, [sp, #159]	; 0x9f
    a1b0:	9816      	ldr	r0, [sp, #88]	; 0x58
    a1b2:	f7ff fc96 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a1b6:	900e      	str	r0, [sp, #56]	; 0x38
    a1b8:	e009      	b.n	a1ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x260>
        self.write_command(Instruction::FRMCTR3,
    a1ba:	defe      	udf	#254	; 0xfe
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a1bc:	f007 febb 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a1c0:	e7ff      	b.n	a1c2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x254>
    a1c2:	f00b f949 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a1c6:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a1ca:	e7ff      	b.n	a1cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x25e>
    a1cc:	e70e      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a1ce:	980e      	ldr	r0, [sp, #56]	; 0x38
    a1d0:	f000 0001 	and.w	r0, r0, #1
    a1d4:	f7fe fcca 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a1d8:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
    a1dc:	e7ff      	b.n	a1de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x270>
    a1de:	f89d 009e 	ldrb.w	r0, [sp, #158]	; 0x9e
    a1e2:	07c1      	lsls	r1, r0, #31
    a1e4:	2900      	cmp	r1, #0
    a1e6:	d001      	beq.n	a1ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27e>
    a1e8:	e7ff      	b.n	a1ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27c>
    a1ea:	e014      	b.n	a216 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2a8>
    a1ec:	20c0      	movs	r0, #192	; 0xc0
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a1ee:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
    a1f2:	f24e 508c 	movw	r0, #58764	; 0xe58c
    a1f6:	f2c0 0001 	movt	r0, #1
    a1fa:	6800      	ldr	r0, [r0, #0]
    a1fc:	902b      	str	r0, [sp, #172]	; 0xac
    a1fe:	2003      	movs	r0, #3
    a200:	902c      	str	r0, [sp, #176]	; 0xb0
    a202:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    a204:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    a206:	f89d 10ab 	ldrb.w	r1, [sp, #171]	; 0xab
    a20a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a20c:	f7ff fc69 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a210:	900d      	str	r0, [sp, #52]	; 0x34
    a212:	e009      	b.n	a228 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ba>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a214:	defe      	udf	#254	; 0xfe
    a216:	f007 fe8e 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a21a:	e7ff      	b.n	a21c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ae>
    a21c:	f00b f91c 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a220:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a224:	e7ff      	b.n	a226 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2b8>
    a226:	e6e1      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a228:	980d      	ldr	r0, [sp, #52]	; 0x34
    a22a:	f000 0001 	and.w	r0, r0, #1
    a22e:	f7fe fc9d 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a232:	f88d 00aa 	strb.w	r0, [sp, #170]	; 0xaa
    a236:	e7ff      	b.n	a238 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ca>
    a238:	f89d 00aa 	ldrb.w	r0, [sp, #170]	; 0xaa
    a23c:	07c1      	lsls	r1, r0, #31
    a23e:	2900      	cmp	r1, #0
    a240:	d001      	beq.n	a246 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d8>
    a242:	e7ff      	b.n	a244 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d6>
    a244:	e014      	b.n	a270 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x302>
    a246:	20c1      	movs	r0, #193	; 0xc1
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a248:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
    a24c:	f24e 5094 	movw	r0, #58772	; 0xe594
    a250:	f2c0 0001 	movt	r0, #1
    a254:	6800      	ldr	r0, [r0, #0]
    a256:	902e      	str	r0, [sp, #184]	; 0xb8
    a258:	2001      	movs	r0, #1
    a25a:	902f      	str	r0, [sp, #188]	; 0xbc
    a25c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    a25e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    a260:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
    a264:	9816      	ldr	r0, [sp, #88]	; 0x58
    a266:	f7ff fc3c 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a26a:	900c      	str	r0, [sp, #48]	; 0x30
    a26c:	e009      	b.n	a282 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x314>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a26e:	defe      	udf	#254	; 0xfe
    a270:	f007 fe61 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a274:	e7ff      	b.n	a276 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x308>
    a276:	f00b f8ef 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a27a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a27e:	e7ff      	b.n	a280 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x312>
    a280:	e6b4      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a282:	980c      	ldr	r0, [sp, #48]	; 0x30
    a284:	f000 0001 	and.w	r0, r0, #1
    a288:	f7fe fc70 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a28c:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
    a290:	e7ff      	b.n	a292 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x324>
    a292:	f89d 00b6 	ldrb.w	r0, [sp, #182]	; 0xb6
    a296:	07c1      	lsls	r1, r0, #31
    a298:	2900      	cmp	r1, #0
    a29a:	d001      	beq.n	a2a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x332>
    a29c:	e7ff      	b.n	a29e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x330>
    a29e:	e014      	b.n	a2ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x35c>
    a2a0:	20c2      	movs	r0, #194	; 0xc2
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a2a2:	f88d 00c3 	strb.w	r0, [sp, #195]	; 0xc3
    a2a6:	f24e 509c 	movw	r0, #58780	; 0xe59c
    a2aa:	f2c0 0001 	movt	r0, #1
    a2ae:	6800      	ldr	r0, [r0, #0]
    a2b0:	9031      	str	r0, [sp, #196]	; 0xc4
    a2b2:	2002      	movs	r0, #2
    a2b4:	9032      	str	r0, [sp, #200]	; 0xc8
    a2b6:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    a2b8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    a2ba:	f89d 10c3 	ldrb.w	r1, [sp, #195]	; 0xc3
    a2be:	9816      	ldr	r0, [sp, #88]	; 0x58
    a2c0:	f7ff fc0f 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a2c4:	900b      	str	r0, [sp, #44]	; 0x2c
    a2c6:	e009      	b.n	a2dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a2c8:	defe      	udf	#254	; 0xfe
    a2ca:	f007 fe34 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a2ce:	e7ff      	b.n	a2d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x362>
    a2d0:	f00b f8c2 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a2d4:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a2d8:	e7ff      	b.n	a2da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36c>
    a2da:	e687      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a2dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a2de:	f000 0001 	and.w	r0, r0, #1
    a2e2:	f7fe fc43 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a2e6:	f88d 00c2 	strb.w	r0, [sp, #194]	; 0xc2
    a2ea:	e7ff      	b.n	a2ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x37e>
    a2ec:	f89d 00c2 	ldrb.w	r0, [sp, #194]	; 0xc2
    a2f0:	07c1      	lsls	r1, r0, #31
    a2f2:	2900      	cmp	r1, #0
    a2f4:	d001      	beq.n	a2fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38c>
    a2f6:	e7ff      	b.n	a2f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38a>
    a2f8:	e014      	b.n	a324 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3b6>
    a2fa:	20c3      	movs	r0, #195	; 0xc3
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a2fc:	f88d 00cf 	strb.w	r0, [sp, #207]	; 0xcf
    a300:	f24e 50a4 	movw	r0, #58788	; 0xe5a4
    a304:	f2c0 0001 	movt	r0, #1
    a308:	6800      	ldr	r0, [r0, #0]
    a30a:	9034      	str	r0, [sp, #208]	; 0xd0
    a30c:	2002      	movs	r0, #2
    a30e:	9035      	str	r0, [sp, #212]	; 0xd4
    a310:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    a312:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    a314:	f89d 10cf 	ldrb.w	r1, [sp, #207]	; 0xcf
    a318:	9816      	ldr	r0, [sp, #88]	; 0x58
    a31a:	f7ff fbe2 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a31e:	900a      	str	r0, [sp, #40]	; 0x28
    a320:	e009      	b.n	a336 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c8>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a322:	defe      	udf	#254	; 0xfe
    a324:	f007 fe07 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a328:	e7ff      	b.n	a32a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3bc>
    a32a:	f00b f895 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a32e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a332:	e7ff      	b.n	a334 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c6>
    a334:	e65a      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a336:	980a      	ldr	r0, [sp, #40]	; 0x28
    a338:	f000 0001 	and.w	r0, r0, #1
    a33c:	f7fe fc16 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a340:	f88d 00ce 	strb.w	r0, [sp, #206]	; 0xce
    a344:	e7ff      	b.n	a346 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3d8>
    a346:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
    a34a:	07c1      	lsls	r1, r0, #31
    a34c:	2900      	cmp	r1, #0
    a34e:	d001      	beq.n	a354 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e6>
    a350:	e7ff      	b.n	a352 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e4>
    a352:	e014      	b.n	a37e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x410>
    a354:	20c4      	movs	r0, #196	; 0xc4
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a356:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
    a35a:	f24e 50ac 	movw	r0, #58796	; 0xe5ac
    a35e:	f2c0 0001 	movt	r0, #1
    a362:	6800      	ldr	r0, [r0, #0]
    a364:	9037      	str	r0, [sp, #220]	; 0xdc
    a366:	2002      	movs	r0, #2
    a368:	9038      	str	r0, [sp, #224]	; 0xe0
    a36a:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    a36c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    a36e:	f89d 10db 	ldrb.w	r1, [sp, #219]	; 0xdb
    a372:	9816      	ldr	r0, [sp, #88]	; 0x58
    a374:	f7ff fbb5 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a378:	9009      	str	r0, [sp, #36]	; 0x24
    a37a:	e009      	b.n	a390 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x422>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a37c:	defe      	udf	#254	; 0xfe
    a37e:	f007 fdda 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a382:	e7ff      	b.n	a384 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x416>
    a384:	f00b f868 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a388:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a38c:	e7ff      	b.n	a38e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x420>
    a38e:	e62d      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a390:	9809      	ldr	r0, [sp, #36]	; 0x24
    a392:	f000 0001 	and.w	r0, r0, #1
    a396:	f7fe fbe9 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a39a:	f88d 00da 	strb.w	r0, [sp, #218]	; 0xda
    a39e:	e7ff      	b.n	a3a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x432>
    a3a0:	f89d 00da 	ldrb.w	r0, [sp, #218]	; 0xda
    a3a4:	07c1      	lsls	r1, r0, #31
    a3a6:	2900      	cmp	r1, #0
    a3a8:	d001      	beq.n	a3ae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x440>
    a3aa:	e7ff      	b.n	a3ac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x43e>
    a3ac:	e014      	b.n	a3d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x46a>
    a3ae:	20c5      	movs	r0, #197	; 0xc5
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a3b0:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
    a3b4:	f24e 50b4 	movw	r0, #58804	; 0xe5b4
    a3b8:	f2c0 0001 	movt	r0, #1
    a3bc:	6800      	ldr	r0, [r0, #0]
    a3be:	903a      	str	r0, [sp, #232]	; 0xe8
    a3c0:	2001      	movs	r0, #1
    a3c2:	903b      	str	r0, [sp, #236]	; 0xec
    a3c4:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    a3c6:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    a3c8:	f89d 10e7 	ldrb.w	r1, [sp, #231]	; 0xe7
    a3cc:	9816      	ldr	r0, [sp, #88]	; 0x58
    a3ce:	f7ff fb88 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a3d2:	9008      	str	r0, [sp, #32]
    a3d4:	e009      	b.n	a3ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47c>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a3d6:	defe      	udf	#254	; 0xfe
    a3d8:	f007 fdad 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a3dc:	e7ff      	b.n	a3de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x470>
    a3de:	f00b f83b 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a3e2:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a3e6:	e7ff      	b.n	a3e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47a>
    a3e8:	e600      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a3ea:	9808      	ldr	r0, [sp, #32]
    a3ec:	f000 0001 	and.w	r0, r0, #1
    a3f0:	f7fe fbbc 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a3f4:	f88d 00e6 	strb.w	r0, [sp, #230]	; 0xe6
    a3f8:	e7ff      	b.n	a3fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48c>
    a3fa:	f89d 00e6 	ldrb.w	r0, [sp, #230]	; 0xe6
    a3fe:	07c1      	lsls	r1, r0, #31
    a400:	2900      	cmp	r1, #0
    a402:	d001      	beq.n	a408 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x49a>
    a404:	e7ff      	b.n	a406 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x498>
    a406:	e006      	b.n	a416 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4a8>
        if self.inverted {
    a408:	9816      	ldr	r0, [sp, #88]	; 0x58
    a40a:	7d41      	ldrb	r1, [r0, #21]
    a40c:	07c9      	lsls	r1, r1, #31
    a40e:	2900      	cmp	r1, #0
    a410:	d11a      	bne.n	a448 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4da>
    a412:	e009      	b.n	a428 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ba>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a414:	defe      	udf	#254	; 0xfe
    a416:	f007 fd8e 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a41a:	e7ff      	b.n	a41c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ae>
    a41c:	f00b f81c 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a420:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a424:	e7ff      	b.n	a426 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4b8>
    a426:	e5e1      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a428:	2020      	movs	r0, #32
            self.write_command(Instruction::INVOFF, None)?;
    a42a:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    a42e:	2000      	movs	r0, #0
    a430:	9041      	str	r0, [sp, #260]	; 0x104
    a432:	9040      	str	r0, [sp, #256]	; 0x100
    a434:	9040      	str	r0, [sp, #256]	; 0x100
    a436:	9a40      	ldr	r2, [sp, #256]	; 0x100
    a438:	9b41      	ldr	r3, [sp, #260]	; 0x104
    a43a:	f89d 10ff 	ldrb.w	r1, [sp, #255]	; 0xff
    a43e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a440:	f7ff fb4f 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a444:	9007      	str	r0, [sp, #28]
    a446:	e02a      	b.n	a49e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x530>
    a448:	2021      	movs	r0, #33	; 0x21
            self.write_command(Instruction::INVON, None)?;
    a44a:	f88d 00f3 	strb.w	r0, [sp, #243]	; 0xf3
    a44e:	2000      	movs	r0, #0
    a450:	903e      	str	r0, [sp, #248]	; 0xf8
    a452:	903d      	str	r0, [sp, #244]	; 0xf4
    a454:	903d      	str	r0, [sp, #244]	; 0xf4
    a456:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    a458:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    a45a:	f89d 10f3 	ldrb.w	r1, [sp, #243]	; 0xf3
    a45e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a460:	f7ff fb3f 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a464:	9006      	str	r0, [sp, #24]
    a466:	e7ff      	b.n	a468 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4fa>
    a468:	9806      	ldr	r0, [sp, #24]
    a46a:	f000 0001 	and.w	r0, r0, #1
    a46e:	f7fe fb7d 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a472:	f88d 00f2 	strb.w	r0, [sp, #242]	; 0xf2
    a476:	e7ff      	b.n	a478 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x50a>
    a478:	f89d 00f2 	ldrb.w	r0, [sp, #242]	; 0xf2
    a47c:	07c1      	lsls	r1, r0, #31
    a47e:	2900      	cmp	r1, #0
    a480:	d001      	beq.n	a486 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x518>
    a482:	e7ff      	b.n	a484 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x516>
    a484:	e001      	b.n	a48a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x51c>
        if self.inverted {
    a486:	e024      	b.n	a4d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVON, None)?;
    a488:	defe      	udf	#254	; 0xfe
    a48a:	f007 fd54 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a48e:	e7ff      	b.n	a490 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x522>
    a490:	f00a ffe2 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a494:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a498:	e7ff      	b.n	a49a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52c>
    a49a:	e7ff      	b.n	a49c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
    a49c:	e5a6      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::INVOFF, None)?;
    a49e:	9807      	ldr	r0, [sp, #28]
    a4a0:	f000 0001 	and.w	r0, r0, #1
    a4a4:	f7fe fb62 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a4a8:	f88d 00fe 	strb.w	r0, [sp, #254]	; 0xfe
    a4ac:	e7ff      	b.n	a4ae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x540>
    a4ae:	f89d 00fe 	ldrb.w	r0, [sp, #254]	; 0xfe
    a4b2:	07c1      	lsls	r1, r0, #31
    a4b4:	2900      	cmp	r1, #0
    a4b6:	d001      	beq.n	a4bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54e>
    a4b8:	e7ff      	b.n	a4ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54c>
    a4ba:	e001      	b.n	a4c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x552>
        if self.inverted {
    a4bc:	e009      	b.n	a4d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVOFF, None)?;
    a4be:	defe      	udf	#254	; 0xfe
    a4c0:	f007 fd39 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a4c4:	e7ff      	b.n	a4c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x558>
    a4c6:	f00a ffc7 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a4ca:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a4ce:	e7ff      	b.n	a4d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x562>
    a4d0:	e7e4      	b.n	a49c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
        if self.rgb {
    a4d2:	9816      	ldr	r0, [sp, #88]	; 0x58
    a4d4:	7d01      	ldrb	r1, [r0, #20]
    a4d6:	07c9      	lsls	r1, r1, #31
    a4d8:	2900      	cmp	r1, #0
    a4da:	d114      	bne.n	a506 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x598>
    a4dc:	e7ff      	b.n	a4de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x570>
    a4de:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a4e0:	f88d 0117 	strb.w	r0, [sp, #279]	; 0x117
    a4e4:	f24e 50c4 	movw	r0, #58820	; 0xe5c4
    a4e8:	f2c0 0001 	movt	r0, #1
    a4ec:	6800      	ldr	r0, [r0, #0]
    a4ee:	9046      	str	r0, [sp, #280]	; 0x118
    a4f0:	2001      	movs	r0, #1
    a4f2:	9047      	str	r0, [sp, #284]	; 0x11c
    a4f4:	9a46      	ldr	r2, [sp, #280]	; 0x118
    a4f6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    a4f8:	f89d 1117 	ldrb.w	r1, [sp, #279]	; 0x117
    a4fc:	9816      	ldr	r0, [sp, #88]	; 0x58
    a4fe:	f7ff faf0 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a502:	9005      	str	r0, [sp, #20]
    a504:	e02e      	b.n	a564 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f6>
    a506:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a508:	f88d 010b 	strb.w	r0, [sp, #267]	; 0x10b
    a50c:	f24e 50bc 	movw	r0, #58812	; 0xe5bc
    a510:	f2c0 0001 	movt	r0, #1
    a514:	6800      	ldr	r0, [r0, #0]
    a516:	9043      	str	r0, [sp, #268]	; 0x10c
    a518:	2001      	movs	r0, #1
    a51a:	9044      	str	r0, [sp, #272]	; 0x110
    a51c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    a51e:	9b44      	ldr	r3, [sp, #272]	; 0x110
    a520:	f89d 110b 	ldrb.w	r1, [sp, #267]	; 0x10b
    a524:	9816      	ldr	r0, [sp, #88]	; 0x58
    a526:	f7ff fadc 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a52a:	9004      	str	r0, [sp, #16]
    a52c:	e7ff      	b.n	a52e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5c0>
    a52e:	9804      	ldr	r0, [sp, #16]
    a530:	f000 0001 	and.w	r0, r0, #1
    a534:	f7fe fb1a 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a538:	f88d 010a 	strb.w	r0, [sp, #266]	; 0x10a
    a53c:	e7ff      	b.n	a53e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5d0>
    a53e:	f89d 010a 	ldrb.w	r0, [sp, #266]	; 0x10a
    a542:	07c1      	lsls	r1, r0, #31
    a544:	2900      	cmp	r1, #0
    a546:	d001      	beq.n	a54c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5de>
    a548:	e7ff      	b.n	a54a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5dc>
    a54a:	e001      	b.n	a550 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e2>
        if self.rgb {
    a54c:	e024      	b.n	a598 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a54e:	defe      	udf	#254	; 0xfe
    a550:	f007 fcf1 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a554:	e7ff      	b.n	a556 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e8>
    a556:	f00a ff7f 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a55a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a55e:	e7ff      	b.n	a560 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f2>
    a560:	e7ff      	b.n	a562 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a562:	e543      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a564:	9805      	ldr	r0, [sp, #20]
    a566:	f000 0001 	and.w	r0, r0, #1
    a56a:	f7fe faff 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a56e:	f88d 0116 	strb.w	r0, [sp, #278]	; 0x116
    a572:	e7ff      	b.n	a574 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x606>
    a574:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    a578:	07c1      	lsls	r1, r0, #31
    a57a:	2900      	cmp	r1, #0
    a57c:	d001      	beq.n	a582 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x614>
    a57e:	e7ff      	b.n	a580 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x612>
    a580:	e001      	b.n	a586 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x618>
        if self.rgb {
    a582:	e009      	b.n	a598 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a584:	defe      	udf	#254	; 0xfe
    a586:	f007 fcd6 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a58a:	e7ff      	b.n	a58c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x61e>
    a58c:	f00a ff64 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a590:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a594:	e7ff      	b.n	a596 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x628>
    a596:	e7e4      	b.n	a562 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a598:	203a      	movs	r0, #58	; 0x3a
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a59a:	f88d 0123 	strb.w	r0, [sp, #291]	; 0x123
    a59e:	f24e 50cc 	movw	r0, #58828	; 0xe5cc
    a5a2:	f2c0 0001 	movt	r0, #1
    a5a6:	6800      	ldr	r0, [r0, #0]
    a5a8:	9049      	str	r0, [sp, #292]	; 0x124
    a5aa:	2001      	movs	r0, #1
    a5ac:	904a      	str	r0, [sp, #296]	; 0x128
    a5ae:	9a49      	ldr	r2, [sp, #292]	; 0x124
    a5b0:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    a5b2:	f89d 1123 	ldrb.w	r1, [sp, #291]	; 0x123
    a5b6:	9816      	ldr	r0, [sp, #88]	; 0x58
    a5b8:	f7ff fa93 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a5bc:	9003      	str	r0, [sp, #12]
    a5be:	e7ff      	b.n	a5c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x652>
    a5c0:	9803      	ldr	r0, [sp, #12]
    a5c2:	f000 0001 	and.w	r0, r0, #1
    a5c6:	f7fe fad1 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a5ca:	f88d 0122 	strb.w	r0, [sp, #290]	; 0x122
    a5ce:	e7ff      	b.n	a5d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x662>
    a5d0:	f89d 0122 	ldrb.w	r0, [sp, #290]	; 0x122
    a5d4:	07c1      	lsls	r1, r0, #31
    a5d6:	2900      	cmp	r1, #0
    a5d8:	d001      	beq.n	a5de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x670>
    a5da:	e7ff      	b.n	a5dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x66e>
    a5dc:	e010      	b.n	a600 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x692>
    a5de:	2029      	movs	r0, #41	; 0x29
        self.write_command(Instruction::DISPON, None)?;
    a5e0:	f88d 012f 	strb.w	r0, [sp, #303]	; 0x12f
    a5e4:	2000      	movs	r0, #0
    a5e6:	904d      	str	r0, [sp, #308]	; 0x134
    a5e8:	904c      	str	r0, [sp, #304]	; 0x130
    a5ea:	904c      	str	r0, [sp, #304]	; 0x130
    a5ec:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    a5ee:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    a5f0:	f89d 112f 	ldrb.w	r1, [sp, #303]	; 0x12f
    a5f4:	9816      	ldr	r0, [sp, #88]	; 0x58
    a5f6:	f7ff fa74 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a5fa:	9002      	str	r0, [sp, #8]
    a5fc:	e009      	b.n	a612 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a4>
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a5fe:	defe      	udf	#254	; 0xfe
    a600:	f007 fc99 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a604:	e7ff      	b.n	a606 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x698>
    a606:	f00a ff27 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a60a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a60e:	e7ff      	b.n	a610 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a2>
    a610:	e4ec      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::DISPON, None)?;
    a612:	9802      	ldr	r0, [sp, #8]
    a614:	f000 0001 	and.w	r0, r0, #1
    a618:	f7fe faa8 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a61c:	f88d 012e 	strb.w	r0, [sp, #302]	; 0x12e
    a620:	e7ff      	b.n	a622 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6b4>
    a622:	f89d 012e 	ldrb.w	r0, [sp, #302]	; 0x12e
    a626:	07c1      	lsls	r1, r0, #31
    a628:	2900      	cmp	r1, #0
    a62a:	d001      	beq.n	a630 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c2>
    a62c:	e7ff      	b.n	a62e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c0>
    a62e:	e005      	b.n	a63c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6ce>
    a630:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a632:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a634:	f009 ff67 	bl	14506 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a638:	e009      	b.n	a64e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e0>
        self.write_command(Instruction::DISPON, None)?;
    a63a:	defe      	udf	#254	; 0xfe
    a63c:	f007 fc7b 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a640:	e7ff      	b.n	a642 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6d4>
    a642:	f00a ff09 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a646:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a64a:	e7ff      	b.n	a64c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6de>
    a64c:	e4ce      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    a64e:	f008 ff95 	bl	1357c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    a652:	9001      	str	r0, [sp, #4]
    a654:	e7ff      	b.n	a656 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e8>
    a656:	f24e 31e4 	movw	r1, #58340	; 0xe3e4
    a65a:	f2c0 0101 	movt	r1, #1
    a65e:	f24e 53d0 	movw	r3, #58832	; 0xe5d0
    a662:	f2c0 0301 	movt	r3, #1
    a666:	220e      	movs	r2, #14
    a668:	9801      	ldr	r0, [sp, #4]
    a66a:	f7fe fa46 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    a66e:	e7ff      	b.n	a670 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x702>
    a670:	2000      	movs	r0, #0
        Ok(())
    a672:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    }
    a676:	e4b9      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>

0000a678 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>:
    fn to_u8(&self) -> Option<u8> {
    a678:	b580      	push	{r7, lr}
    a67a:	b08a      	sub	sp, #40	; 0x28
    a67c:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    a67e:	f000 fa8c 	bl	ab9a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>
    a682:	9307      	str	r3, [sp, #28]
    a684:	9206      	str	r2, [sp, #24]
    a686:	9105      	str	r1, [sp, #20]
    a688:	9004      	str	r0, [sp, #16]
    a68a:	e7ff      	b.n	a68c <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x14>
    a68c:	a804      	add	r0, sp, #16
    a68e:	f00a f824 	bl	146da <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    a692:	9003      	str	r0, [sp, #12]
    a694:	e7ff      	b.n	a696 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x1e>
    a696:	9803      	ldr	r0, [sp, #12]
    a698:	f00a f8f2 	bl	14880 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    a69c:	9002      	str	r0, [sp, #8]
    a69e:	9101      	str	r1, [sp, #4]
    a6a0:	e7ff      	b.n	a6a2 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x2a>
    }
    a6a2:	9802      	ldr	r0, [sp, #8]
    a6a4:	f000 0001 	and.w	r0, r0, #1
    a6a8:	9901      	ldr	r1, [sp, #4]
    a6aa:	b00a      	add	sp, #40	; 0x28
    a6ac:	bd80      	pop	{r7, pc}

0000a6ae <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>:
    a6ae:	b082      	sub	sp, #8
    a6b0:	4601      	mov	r1, r0
    a6b2:	f8ad 0004 	strh.w	r0, [sp, #4]
    a6b6:	ba00      	rev	r0, r0
    a6b8:	0c00      	lsrs	r0, r0, #16
    a6ba:	f8ad 0006 	strh.w	r0, [sp, #6]
    a6be:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a6c2:	9000      	str	r0, [sp, #0]
    a6c4:	e7ff      	b.n	a6c6 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E+0x18>
    a6c6:	9800      	ldr	r0, [sp, #0]
    a6c8:	b002      	add	sp, #8
    a6ca:	4770      	bx	lr

0000a6cc <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>:
    a6cc:	b580      	push	{r7, lr}
    a6ce:	b084      	sub	sp, #16
    a6d0:	4601      	mov	r1, r0
    a6d2:	f8ad 000e 	strh.w	r0, [sp, #14]
    a6d6:	9102      	str	r1, [sp, #8]
    a6d8:	f7ff ffe9 	bl	a6ae <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>
    a6dc:	9001      	str	r0, [sp, #4]
    a6de:	e7ff      	b.n	a6e0 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E+0x14>
    a6e0:	9801      	ldr	r0, [sp, #4]
    a6e2:	b004      	add	sp, #16
    a6e4:	bd80      	pop	{r7, pc}

0000a6e6 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>:
    a6e6:	b580      	push	{r7, lr}
    a6e8:	b084      	sub	sp, #16
    a6ea:	9002      	str	r0, [sp, #8]
    a6ec:	9802      	ldr	r0, [sp, #8]
    a6ee:	f009 ff58 	bl	145a2 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>
    a6f2:	9001      	str	r0, [sp, #4]
    a6f4:	9100      	str	r1, [sp, #0]
    a6f6:	e7ff      	b.n	a6f8 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE+0x12>
    a6f8:	9801      	ldr	r0, [sp, #4]
    a6fa:	f000 0001 	and.w	r0, r0, #1
    a6fe:	9900      	ldr	r1, [sp, #0]
    a700:	b004      	add	sp, #16
    a702:	bd80      	pop	{r7, pc}

0000a704 <_ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE>:
    a704:	b081      	sub	sp, #4
    a706:	9000      	str	r0, [sp, #0]
    a708:	b001      	add	sp, #4
    a70a:	4770      	bx	lr

0000a70c <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>:
    a70c:	b580      	push	{r7, lr}
    a70e:	b082      	sub	sp, #8
    a710:	9001      	str	r0, [sp, #4]
    a712:	f000 f83e 	bl	a792 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
    a716:	e7ff      	b.n	a718 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE+0xc>
    a718:	b002      	add	sp, #8
    a71a:	bd80      	pop	{r7, pc}

0000a71c <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>:
    a71c:	b580      	push	{r7, lr}
    a71e:	b082      	sub	sp, #8
    a720:	9001      	str	r0, [sp, #4]
    a722:	6801      	ldr	r1, [r0, #0]
    a724:	2900      	cmp	r1, #0
    a726:	9000      	str	r0, [sp, #0]
    a728:	d102      	bne.n	a730 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x14>
    a72a:	e7ff      	b.n	a72c <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>
    a72c:	b002      	add	sp, #8
    a72e:	bd80      	pop	{r7, pc}
    a730:	9800      	ldr	r0, [sp, #0]
    a732:	3004      	adds	r0, #4
    a734:	f7ff ffea 	bl	a70c <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>
    a738:	e7f8      	b.n	a72c <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>

0000a73a <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>:
    a73a:	b580      	push	{r7, lr}
    a73c:	b082      	sub	sp, #8
    a73e:	9001      	str	r0, [sp, #4]
    a740:	f00a f919 	bl	14976 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>
    a744:	e7ff      	b.n	a746 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE+0xc>
    a746:	b002      	add	sp, #8
    a748:	bd80      	pop	{r7, pc}

0000a74a <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>:
    a74a:	b580      	push	{r7, lr}
    a74c:	b082      	sub	sp, #8
    a74e:	9001      	str	r0, [sp, #4]
    a750:	3024      	adds	r0, #36	; 0x24
    a752:	f000 f81e 	bl	a792 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
    a756:	e7ff      	b.n	a758 <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E+0xe>
    a758:	b002      	add	sp, #8
    a75a:	bd80      	pop	{r7, pc}

0000a75c <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>:
    a75c:	b580      	push	{r7, lr}
    a75e:	b082      	sub	sp, #8
    a760:	9001      	str	r0, [sp, #4]
    a762:	9000      	str	r0, [sp, #0]
    a764:	f7ff fff1 	bl	a74a <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>
    a768:	e001      	b.n	a76e <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0x12>
    a76a:	b002      	add	sp, #8
    a76c:	bd80      	pop	{r7, pc}
    a76e:	9800      	ldr	r0, [sp, #0]
    a770:	3094      	adds	r0, #148	; 0x94
    a772:	f7ff ffe2 	bl	a73a <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    a776:	e7f8      	b.n	a76a <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0xe>

0000a778 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>:
    a778:	b580      	push	{r7, lr}
    a77a:	b082      	sub	sp, #8
    a77c:	9001      	str	r0, [sp, #4]
    a77e:	9000      	str	r0, [sp, #0]
    a780:	f00a f921 	bl	149c6 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>
    a784:	e001      	b.n	a78a <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0x12>
    a786:	b002      	add	sp, #8
    a788:	bd80      	pop	{r7, pc}
    a78a:	9800      	ldr	r0, [sp, #0]
    a78c:	f7ff ffd5 	bl	a73a <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    a790:	e7f9      	b.n	a786 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0xe>

0000a792 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>:
    a792:	b580      	push	{r7, lr}
    a794:	b082      	sub	sp, #8
    a796:	9001      	str	r0, [sp, #4]
    a798:	f00a f8dd 	bl	14956 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>
    a79c:	e7ff      	b.n	a79e <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E+0xc>
    a79e:	b002      	add	sp, #8
    a7a0:	bd80      	pop	{r7, pc}

0000a7a2 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>:
    a7a2:	b580      	push	{r7, lr}
    a7a4:	b082      	sub	sp, #8
    a7a6:	9001      	str	r0, [sp, #4]
    a7a8:	6801      	ldr	r1, [r0, #0]
    a7aa:	2900      	cmp	r1, #0
    a7ac:	9000      	str	r0, [sp, #0]
    a7ae:	d102      	bne.n	a7b6 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x14>
    a7b0:	e7ff      	b.n	a7b2 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>
    a7b2:	b002      	add	sp, #8
    a7b4:	bd80      	pop	{r7, pc}
    a7b6:	9800      	ldr	r0, [sp, #0]
    a7b8:	3004      	adds	r0, #4
    a7ba:	f000 f805 	bl	a7c8 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>
    a7be:	e7f8      	b.n	a7b2 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>

0000a7c0 <_ZN4core3ptr13drop_in_place17hef1277471241eea2E>:
    a7c0:	b081      	sub	sp, #4
    a7c2:	9000      	str	r0, [sp, #0]
    a7c4:	b001      	add	sp, #4
    a7c6:	4770      	bx	lr

0000a7c8 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>:
    a7c8:	b580      	push	{r7, lr}
    a7ca:	b082      	sub	sp, #8
    a7cc:	9001      	str	r0, [sp, #4]
    a7ce:	f7ff ffb4 	bl	a73a <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    a7d2:	e7ff      	b.n	a7d4 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE+0xc>
    a7d4:	b002      	add	sp, #8
    a7d6:	bd80      	pop	{r7, pc}

0000a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>:
    a7d8:	b089      	sub	sp, #36	; 0x24
    a7da:	9005      	str	r0, [sp, #20]
    a7dc:	9106      	str	r1, [sp, #24]
    a7de:	9107      	str	r1, [sp, #28]
    a7e0:	9907      	ldr	r1, [sp, #28]
    a7e2:	9002      	str	r0, [sp, #8]
    a7e4:	9101      	str	r1, [sp, #4]
    a7e6:	e7ff      	b.n	a7e8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x10>
    a7e8:	9802      	ldr	r0, [sp, #8]
    a7ea:	9008      	str	r0, [sp, #32]
    a7ec:	9908      	ldr	r1, [sp, #32]
    a7ee:	9100      	str	r1, [sp, #0]
    a7f0:	e7ff      	b.n	a7f2 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x1a>
    a7f2:	9800      	ldr	r0, [sp, #0]
    a7f4:	9003      	str	r0, [sp, #12]
    a7f6:	9901      	ldr	r1, [sp, #4]
    a7f8:	9104      	str	r1, [sp, #16]
    a7fa:	9803      	ldr	r0, [sp, #12]
    a7fc:	9904      	ldr	r1, [sp, #16]
    a7fe:	b009      	add	sp, #36	; 0x24
    a800:	4770      	bx	lr
	...

0000a804 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>:
use num_derive::ToPrimitive;

/// ST7735 instructions.
#[derive(ToPrimitive)]
    a804:	b08a      	sub	sp, #40	; 0x28
    a806:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Instruction {
    a808:	7800      	ldrb	r0, [r0, #0]
    a80a:	9001      	str	r0, [sp, #4]
    a80c:	9901      	ldr	r1, [sp, #4]
    a80e:	e8df f011 	tbh	[pc, r1, lsl #1]
    a812:	0103      	.short	0x0103
    a814:	01020107 	.word	0x01020107
    a818:	010c0102 	.word	0x010c0102
    a81c:	01020102 	.word	0x01020102
    a820:	01020102 	.word	0x01020102
    a824:	01020111 	.word	0x01020111
    a828:	01020102 	.word	0x01020102
    a82c:	01020102 	.word	0x01020102
    a830:	01160102 	.word	0x01160102
    a834:	0120011b 	.word	0x0120011b
    a838:	01020125 	.word	0x01020125
    a83c:	01020102 	.word	0x01020102
    a840:	01020102 	.word	0x01020102
    a844:	01020102 	.word	0x01020102
    a848:	01020102 	.word	0x01020102
    a84c:	01020102 	.word	0x01020102
    a850:	012a0102 	.word	0x012a0102
    a854:	0102012f 	.word	0x0102012f
    a858:	01020102 	.word	0x01020102
    a85c:	01020102 	.word	0x01020102
    a860:	01340102 	.word	0x01340102
    a864:	013e0139 	.word	0x013e0139
    a868:	01480143 	.word	0x01480143
    a86c:	014d0102 	.word	0x014d0102
    a870:	01520102 	.word	0x01520102
    a874:	01020102 	.word	0x01020102
    a878:	01020102 	.word	0x01020102
    a87c:	015c0102 	.word	0x015c0102
    a880:	01020102 	.word	0x01020102
    a884:	01570102 	.word	0x01570102
    a888:	01020102 	.word	0x01020102
    a88c:	01020102 	.word	0x01020102
    a890:	01020102 	.word	0x01020102
    a894:	01020102 	.word	0x01020102
    a898:	01020102 	.word	0x01020102
    a89c:	01020102 	.word	0x01020102
    a8a0:	01020102 	.word	0x01020102
    a8a4:	01020102 	.word	0x01020102
    a8a8:	01020102 	.word	0x01020102
    a8ac:	01020102 	.word	0x01020102
    a8b0:	01020102 	.word	0x01020102
    a8b4:	01020102 	.word	0x01020102
    a8b8:	01020102 	.word	0x01020102
    a8bc:	01020102 	.word	0x01020102
    a8c0:	01020102 	.word	0x01020102
    a8c4:	01020102 	.word	0x01020102
    a8c8:	01020102 	.word	0x01020102
    a8cc:	01020102 	.word	0x01020102
    a8d0:	01020102 	.word	0x01020102
    a8d4:	01020102 	.word	0x01020102
    a8d8:	01020102 	.word	0x01020102
    a8dc:	01020102 	.word	0x01020102
    a8e0:	01020102 	.word	0x01020102
    a8e4:	01020102 	.word	0x01020102
    a8e8:	01020102 	.word	0x01020102
    a8ec:	01020102 	.word	0x01020102
    a8f0:	01020102 	.word	0x01020102
    a8f4:	01020102 	.word	0x01020102
    a8f8:	01020102 	.word	0x01020102
    a8fc:	01020102 	.word	0x01020102
    a900:	01020102 	.word	0x01020102
    a904:	01020102 	.word	0x01020102
    a908:	01020102 	.word	0x01020102
    a90c:	01020102 	.word	0x01020102
    a910:	01020102 	.word	0x01020102
    a914:	01020102 	.word	0x01020102
    a918:	01020102 	.word	0x01020102
    a91c:	01020102 	.word	0x01020102
    a920:	01020102 	.word	0x01020102
    a924:	01020102 	.word	0x01020102
    a928:	01020102 	.word	0x01020102
    a92c:	01020102 	.word	0x01020102
    a930:	01020102 	.word	0x01020102
    a934:	01020102 	.word	0x01020102
    a938:	01020102 	.word	0x01020102
    a93c:	01020102 	.word	0x01020102
    a940:	01020102 	.word	0x01020102
    a944:	01020102 	.word	0x01020102
    a948:	01020102 	.word	0x01020102
    a94c:	01020102 	.word	0x01020102
    a950:	01020102 	.word	0x01020102
    a954:	01020102 	.word	0x01020102
    a958:	01020102 	.word	0x01020102
    a95c:	01020102 	.word	0x01020102
    a960:	01020102 	.word	0x01020102
    a964:	01020102 	.word	0x01020102
    a968:	01020102 	.word	0x01020102
    a96c:	01020102 	.word	0x01020102
    a970:	01020102 	.word	0x01020102
    a974:	01660161 	.word	0x01660161
    a978:	0170016b 	.word	0x0170016b
    a97c:	01750102 	.word	0x01750102
    a980:	01020102 	.word	0x01020102
    a984:	01020102 	.word	0x01020102
    a988:	01020102 	.word	0x01020102
    a98c:	01020102 	.word	0x01020102
    a990:	017a0102 	.word	0x017a0102
    a994:	0184017f 	.word	0x0184017f
    a998:	018e0189 	.word	0x018e0189
    a99c:	01020193 	.word	0x01020193
    a9a0:	01020102 	.word	0x01020102
    a9a4:	01020102 	.word	0x01020102
    a9a8:	01020102 	.word	0x01020102
    a9ac:	01020102 	.word	0x01020102
    a9b0:	01020102 	.word	0x01020102
    a9b4:	01020102 	.word	0x01020102
    a9b8:	01020102 	.word	0x01020102
    a9bc:	01020102 	.word	0x01020102
    a9c0:	01020102 	.word	0x01020102
    a9c4:	01980102 	.word	0x01980102
    a9c8:	01a2019d 	.word	0x01a2019d
    a9cc:	010201a7 	.word	0x010201a7
    a9d0:	01b10102 	.word	0x01b10102
    a9d4:	010200fd 	.word	0x010200fd
    a9d8:	01020102 	.word	0x01020102
    a9dc:	01020102 	.word	0x01020102
    a9e0:	01020102 	.word	0x01020102
    a9e4:	01020102 	.word	0x01020102
    a9e8:	01020102 	.word	0x01020102
    a9ec:	01020102 	.word	0x01020102
    a9f0:	01020102 	.word	0x01020102
    a9f4:	01020102 	.word	0x01020102
    a9f8:	01020102 	.word	0x01020102
    a9fc:	01020102 	.word	0x01020102
    aa00:	01020102 	.word	0x01020102
    aa04:	01020102 	.word	0x01020102
    aa08:	01ac0102 	.word	0x01ac0102
    aa0c:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    aa0e:	9007      	str	r0, [sp, #28]
    aa10:	20e1      	movs	r0, #225	; 0xe1
    aa12:	9006      	str	r0, [sp, #24]
    aa14:	e0b3      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa16:	defe      	udf	#254	; 0xfe
    aa18:	2000      	movs	r0, #0
    aa1a:	9007      	str	r0, [sp, #28]
    aa1c:	9006      	str	r0, [sp, #24]
    aa1e:	e0ae      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa20:	2000      	movs	r0, #0
    aa22:	9007      	str	r0, [sp, #28]
    aa24:	2001      	movs	r0, #1
    aa26:	9006      	str	r0, [sp, #24]
    aa28:	e0a9      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa2a:	2000      	movs	r0, #0
    aa2c:	9007      	str	r0, [sp, #28]
    aa2e:	2004      	movs	r0, #4
    aa30:	9006      	str	r0, [sp, #24]
    aa32:	e0a4      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa34:	2000      	movs	r0, #0
    aa36:	9007      	str	r0, [sp, #28]
    aa38:	2009      	movs	r0, #9
    aa3a:	9006      	str	r0, [sp, #24]
    aa3c:	e09f      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa3e:	2000      	movs	r0, #0
    aa40:	9007      	str	r0, [sp, #28]
    aa42:	2010      	movs	r0, #16
    aa44:	9006      	str	r0, [sp, #24]
    aa46:	e09a      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa48:	2000      	movs	r0, #0
    aa4a:	9007      	str	r0, [sp, #28]
    aa4c:	2011      	movs	r0, #17
    aa4e:	9006      	str	r0, [sp, #24]
    aa50:	e095      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa52:	2000      	movs	r0, #0
    aa54:	9007      	str	r0, [sp, #28]
    aa56:	2012      	movs	r0, #18
    aa58:	9006      	str	r0, [sp, #24]
    aa5a:	e090      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa5c:	2000      	movs	r0, #0
    aa5e:	9007      	str	r0, [sp, #28]
    aa60:	2013      	movs	r0, #19
    aa62:	9006      	str	r0, [sp, #24]
    aa64:	e08b      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa66:	2000      	movs	r0, #0
    aa68:	9007      	str	r0, [sp, #28]
    aa6a:	2020      	movs	r0, #32
    aa6c:	9006      	str	r0, [sp, #24]
    aa6e:	e086      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa70:	2000      	movs	r0, #0
    aa72:	9007      	str	r0, [sp, #28]
    aa74:	2021      	movs	r0, #33	; 0x21
    aa76:	9006      	str	r0, [sp, #24]
    aa78:	e081      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa7a:	2000      	movs	r0, #0
    aa7c:	9007      	str	r0, [sp, #28]
    aa7e:	2028      	movs	r0, #40	; 0x28
    aa80:	9006      	str	r0, [sp, #24]
    aa82:	e07c      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa84:	2000      	movs	r0, #0
    aa86:	9007      	str	r0, [sp, #28]
    aa88:	2029      	movs	r0, #41	; 0x29
    aa8a:	9006      	str	r0, [sp, #24]
    aa8c:	e077      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa8e:	2000      	movs	r0, #0
    aa90:	9007      	str	r0, [sp, #28]
    aa92:	202a      	movs	r0, #42	; 0x2a
    aa94:	9006      	str	r0, [sp, #24]
    aa96:	e072      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa98:	2000      	movs	r0, #0
    aa9a:	9007      	str	r0, [sp, #28]
    aa9c:	202b      	movs	r0, #43	; 0x2b
    aa9e:	9006      	str	r0, [sp, #24]
    aaa0:	e06d      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aaa2:	2000      	movs	r0, #0
    aaa4:	9007      	str	r0, [sp, #28]
    aaa6:	202c      	movs	r0, #44	; 0x2c
    aaa8:	9006      	str	r0, [sp, #24]
    aaaa:	e068      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aaac:	2000      	movs	r0, #0
    aaae:	9007      	str	r0, [sp, #28]
    aab0:	202e      	movs	r0, #46	; 0x2e
    aab2:	9006      	str	r0, [sp, #24]
    aab4:	e063      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aab6:	2000      	movs	r0, #0
    aab8:	9007      	str	r0, [sp, #28]
    aaba:	2030      	movs	r0, #48	; 0x30
    aabc:	9006      	str	r0, [sp, #24]
    aabe:	e05e      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aac0:	2000      	movs	r0, #0
    aac2:	9007      	str	r0, [sp, #28]
    aac4:	203a      	movs	r0, #58	; 0x3a
    aac6:	9006      	str	r0, [sp, #24]
    aac8:	e059      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aaca:	2000      	movs	r0, #0
    aacc:	9007      	str	r0, [sp, #28]
    aace:	2036      	movs	r0, #54	; 0x36
    aad0:	9006      	str	r0, [sp, #24]
    aad2:	e054      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aad4:	2000      	movs	r0, #0
    aad6:	9007      	str	r0, [sp, #28]
    aad8:	20b1      	movs	r0, #177	; 0xb1
    aada:	9006      	str	r0, [sp, #24]
    aadc:	e04f      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aade:	2000      	movs	r0, #0
    aae0:	9007      	str	r0, [sp, #28]
    aae2:	20b2      	movs	r0, #178	; 0xb2
    aae4:	9006      	str	r0, [sp, #24]
    aae6:	e04a      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aae8:	2000      	movs	r0, #0
    aaea:	9007      	str	r0, [sp, #28]
    aaec:	20b3      	movs	r0, #179	; 0xb3
    aaee:	9006      	str	r0, [sp, #24]
    aaf0:	e045      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aaf2:	2000      	movs	r0, #0
    aaf4:	9007      	str	r0, [sp, #28]
    aaf6:	20b4      	movs	r0, #180	; 0xb4
    aaf8:	9006      	str	r0, [sp, #24]
    aafa:	e040      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aafc:	2000      	movs	r0, #0
    aafe:	9007      	str	r0, [sp, #28]
    ab00:	20b6      	movs	r0, #182	; 0xb6
    ab02:	9006      	str	r0, [sp, #24]
    ab04:	e03b      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab06:	2000      	movs	r0, #0
    ab08:	9007      	str	r0, [sp, #28]
    ab0a:	20c0      	movs	r0, #192	; 0xc0
    ab0c:	9006      	str	r0, [sp, #24]
    ab0e:	e036      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab10:	2000      	movs	r0, #0
    ab12:	9007      	str	r0, [sp, #28]
    ab14:	20c1      	movs	r0, #193	; 0xc1
    ab16:	9006      	str	r0, [sp, #24]
    ab18:	e031      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab1a:	2000      	movs	r0, #0
    ab1c:	9007      	str	r0, [sp, #28]
    ab1e:	20c2      	movs	r0, #194	; 0xc2
    ab20:	9006      	str	r0, [sp, #24]
    ab22:	e02c      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab24:	2000      	movs	r0, #0
    ab26:	9007      	str	r0, [sp, #28]
    ab28:	20c3      	movs	r0, #195	; 0xc3
    ab2a:	9006      	str	r0, [sp, #24]
    ab2c:	e027      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab2e:	2000      	movs	r0, #0
    ab30:	9007      	str	r0, [sp, #28]
    ab32:	20c4      	movs	r0, #196	; 0xc4
    ab34:	9006      	str	r0, [sp, #24]
    ab36:	e022      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab38:	2000      	movs	r0, #0
    ab3a:	9007      	str	r0, [sp, #28]
    ab3c:	20c5      	movs	r0, #197	; 0xc5
    ab3e:	9006      	str	r0, [sp, #24]
    ab40:	e01d      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab42:	2000      	movs	r0, #0
    ab44:	9007      	str	r0, [sp, #28]
    ab46:	20da      	movs	r0, #218	; 0xda
    ab48:	9006      	str	r0, [sp, #24]
    ab4a:	e018      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab4c:	2000      	movs	r0, #0
    ab4e:	9007      	str	r0, [sp, #28]
    ab50:	20db      	movs	r0, #219	; 0xdb
    ab52:	9006      	str	r0, [sp, #24]
    ab54:	e013      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab56:	2000      	movs	r0, #0
    ab58:	9007      	str	r0, [sp, #28]
    ab5a:	20dc      	movs	r0, #220	; 0xdc
    ab5c:	9006      	str	r0, [sp, #24]
    ab5e:	e00e      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab60:	2000      	movs	r0, #0
    ab62:	9007      	str	r0, [sp, #28]
    ab64:	20dd      	movs	r0, #221	; 0xdd
    ab66:	9006      	str	r0, [sp, #24]
    ab68:	e009      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab6a:	2000      	movs	r0, #0
    ab6c:	9007      	str	r0, [sp, #28]
    ab6e:	20fc      	movs	r0, #252	; 0xfc
    ab70:	9006      	str	r0, [sp, #24]
    ab72:	e004      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab74:	2000      	movs	r0, #0
    ab76:	9007      	str	r0, [sp, #28]
    ab78:	20e0      	movs	r0, #224	; 0xe0
    ab7a:	9006      	str	r0, [sp, #24]
    ab7c:	e7ff      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab7e:	9806      	ldr	r0, [sp, #24]
    ab80:	9907      	ldr	r1, [sp, #28]
    ab82:	9105      	str	r1, [sp, #20]
    ab84:	9004      	str	r0, [sp, #16]
    ab86:	2000      	movs	r0, #0
    ab88:	9003      	str	r0, [sp, #12]
    ab8a:	2001      	movs	r0, #1
    ab8c:	9002      	str	r0, [sp, #8]
    ab8e:	9802      	ldr	r0, [sp, #8]
    ab90:	9903      	ldr	r1, [sp, #12]
    ab92:	9a04      	ldr	r2, [sp, #16]
    ab94:	9b05      	ldr	r3, [sp, #20]
    ab96:	b00a      	add	sp, #40	; 0x28
    ab98:	4770      	bx	lr

0000ab9a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>:
    ab9a:	b580      	push	{r7, lr}
    ab9c:	b08a      	sub	sp, #40	; 0x28
    ab9e:	9009      	str	r0, [sp, #36]	; 0x24
    aba0:	f7ff fe30 	bl	a804 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>
    aba4:	9108      	str	r1, [sp, #32]
    aba6:	9007      	str	r0, [sp, #28]
    aba8:	9306      	str	r3, [sp, #24]
    abaa:	9205      	str	r2, [sp, #20]
    abac:	e7ff      	b.n	abae <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x14>
    abae:	9807      	ldr	r0, [sp, #28]
    abb0:	9908      	ldr	r1, [sp, #32]
    abb2:	9a05      	ldr	r2, [sp, #20]
    abb4:	9b06      	ldr	r3, [sp, #24]
    abb6:	f000 f859 	bl	ac6c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>
    abba:	9104      	str	r1, [sp, #16]
    abbc:	9003      	str	r0, [sp, #12]
    abbe:	9302      	str	r3, [sp, #8]
    abc0:	9201      	str	r2, [sp, #4]
    abc2:	e7ff      	b.n	abc4 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x2a>
    abc4:	9803      	ldr	r0, [sp, #12]
    abc6:	9904      	ldr	r1, [sp, #16]
    abc8:	9a01      	ldr	r2, [sp, #4]
    abca:	9b02      	ldr	r3, [sp, #8]
    abcc:	b00a      	add	sp, #40	; 0x28
    abce:	bd80      	pop	{r7, pc}

0000abd0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>:
#[derive(ToPrimitive)]
    abd0:	b08a      	sub	sp, #40	; 0x28
    abd2:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Orientation {
    abd4:	7800      	ldrb	r0, [r0, #0]
    abd6:	4601      	mov	r1, r0
    abd8:	2800      	cmp	r0, #0
    abda:	9101      	str	r1, [sp, #4]
    abdc:	d00f      	beq.n	abfe <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x2e>
    abde:	e7ff      	b.n	abe0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x10>
    abe0:	9801      	ldr	r0, [sp, #4]
    abe2:	2860      	cmp	r0, #96	; 0x60
    abe4:	d00f      	beq.n	ac06 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x36>
    abe6:	e7ff      	b.n	abe8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x18>
    abe8:	9801      	ldr	r0, [sp, #4]
    abea:	28a0      	cmp	r0, #160	; 0xa0
    abec:	d001      	beq.n	abf2 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x22>
    abee:	e7ff      	b.n	abf0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x20>
    abf0:	e00e      	b.n	ac10 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x40>
    abf2:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    abf4:	9007      	str	r0, [sp, #28]
    abf6:	20a0      	movs	r0, #160	; 0xa0
    abf8:	9006      	str	r0, [sp, #24]
    abfa:	e00e      	b.n	ac1a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    abfc:	defe      	udf	#254	; 0xfe
    abfe:	2000      	movs	r0, #0
    ac00:	9007      	str	r0, [sp, #28]
    ac02:	9006      	str	r0, [sp, #24]
    ac04:	e009      	b.n	ac1a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    ac06:	2000      	movs	r0, #0
    ac08:	9007      	str	r0, [sp, #28]
    ac0a:	2060      	movs	r0, #96	; 0x60
    ac0c:	9006      	str	r0, [sp, #24]
    ac0e:	e004      	b.n	ac1a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    ac10:	2000      	movs	r0, #0
    ac12:	9007      	str	r0, [sp, #28]
    ac14:	20c0      	movs	r0, #192	; 0xc0
    ac16:	9006      	str	r0, [sp, #24]
    ac18:	e7ff      	b.n	ac1a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    ac1a:	9806      	ldr	r0, [sp, #24]
    ac1c:	9907      	ldr	r1, [sp, #28]
    ac1e:	9105      	str	r1, [sp, #20]
    ac20:	9004      	str	r0, [sp, #16]
    ac22:	2000      	movs	r0, #0
    ac24:	9003      	str	r0, [sp, #12]
    ac26:	2001      	movs	r0, #1
    ac28:	9002      	str	r0, [sp, #8]
    ac2a:	9802      	ldr	r0, [sp, #8]
    ac2c:	9903      	ldr	r1, [sp, #12]
    ac2e:	9a04      	ldr	r2, [sp, #16]
    ac30:	9b05      	ldr	r3, [sp, #20]
    ac32:	b00a      	add	sp, #40	; 0x28
    ac34:	4770      	bx	lr

0000ac36 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>:
    ac36:	b580      	push	{r7, lr}
    ac38:	b08a      	sub	sp, #40	; 0x28
    ac3a:	9009      	str	r0, [sp, #36]	; 0x24
    ac3c:	f7ff ffc8 	bl	abd0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>
    ac40:	9108      	str	r1, [sp, #32]
    ac42:	9007      	str	r0, [sp, #28]
    ac44:	9306      	str	r3, [sp, #24]
    ac46:	9205      	str	r2, [sp, #20]
    ac48:	e7ff      	b.n	ac4a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x14>
    ac4a:	9807      	ldr	r0, [sp, #28]
    ac4c:	9908      	ldr	r1, [sp, #32]
    ac4e:	9a05      	ldr	r2, [sp, #20]
    ac50:	9b06      	ldr	r3, [sp, #24]
    ac52:	f000 f863 	bl	ad1c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>
    ac56:	9104      	str	r1, [sp, #16]
    ac58:	9003      	str	r0, [sp, #12]
    ac5a:	9302      	str	r3, [sp, #8]
    ac5c:	9201      	str	r2, [sp, #4]
    ac5e:	e7ff      	b.n	ac60 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x2a>
    ac60:	9803      	ldr	r0, [sp, #12]
    ac62:	9904      	ldr	r1, [sp, #16]
    ac64:	9a01      	ldr	r2, [sp, #4]
    ac66:	9b02      	ldr	r3, [sp, #8]
    ac68:	b00a      	add	sp, #40	; 0x28
    ac6a:	bd80      	pop	{r7, pc}

0000ac6c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>:
    ac6c:	b5b0      	push	{r4, r5, r7, lr}
    ac6e:	b090      	sub	sp, #64	; 0x40
    ac70:	469c      	mov	ip, r3
    ac72:	4696      	mov	lr, r2
    ac74:	460c      	mov	r4, r1
    ac76:	4605      	mov	r5, r0
    ac78:	9103      	str	r1, [sp, #12]
    ac7a:	9002      	str	r0, [sp, #8]
    ac7c:	9305      	str	r3, [sp, #20]
    ac7e:	9204      	str	r2, [sp, #16]
    ac80:	2000      	movs	r0, #0
    ac82:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ac86:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ac8a:	2001      	movs	r0, #1
    ac8c:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ac90:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ac94:	9802      	ldr	r0, [sp, #8]
    ac96:	2800      	cmp	r0, #0
    ac98:	d001      	beq.n	ac9e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x32>
    ac9a:	e7ff      	b.n	ac9c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x30>
    ac9c:	e004      	b.n	aca8 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x3c>
    ac9e:	2000      	movs	r0, #0
    aca0:	9007      	str	r0, [sp, #28]
    aca2:	9006      	str	r0, [sp, #24]
    aca4:	e023      	b.n	acee <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    aca6:	defe      	udf	#254	; 0xfe
    aca8:	2000      	movs	r0, #0
    acaa:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    acae:	9904      	ldr	r1, [sp, #16]
    acb0:	9a05      	ldr	r2, [sp, #20]
    acb2:	920f      	str	r2, [sp, #60]	; 0x3c
    acb4:	910e      	str	r1, [sp, #56]	; 0x38
    acb6:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    acba:	920b      	str	r2, [sp, #44]	; 0x2c
    acbc:	910a      	str	r1, [sp, #40]	; 0x28
    acbe:	980a      	ldr	r0, [sp, #40]	; 0x28
    acc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    acc2:	f000 f883 	bl	adcc <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>
    acc6:	9101      	str	r1, [sp, #4]
    acc8:	9000      	str	r0, [sp, #0]
    acca:	e7ff      	b.n	accc <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x60>
    accc:	9800      	ldr	r0, [sp, #0]
    acce:	9008      	str	r0, [sp, #32]
    acd0:	9901      	ldr	r1, [sp, #4]
    acd2:	9109      	str	r1, [sp, #36]	; 0x24
    acd4:	2200      	movs	r2, #0
    acd6:	9207      	str	r2, [sp, #28]
    acd8:	2201      	movs	r2, #1
    acda:	9206      	str	r2, [sp, #24]
    acdc:	e007      	b.n	acee <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    acde:	9802      	ldr	r0, [sp, #8]
    ace0:	2801      	cmp	r0, #1
    ace2:	d010      	beq.n	ad06 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x9a>
    ace4:	e019      	b.n	ad1a <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xae>
    ace6:	2000      	movs	r0, #0
    ace8:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    acec:	e7f7      	b.n	acde <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    acee:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    acf2:	07c0      	lsls	r0, r0, #31
    acf4:	2800      	cmp	r0, #0
    acf6:	d1f6      	bne.n	ace6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x7a>
    acf8:	e7f1      	b.n	acde <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    acfa:	9806      	ldr	r0, [sp, #24]
    acfc:	9907      	ldr	r1, [sp, #28]
    acfe:	9a08      	ldr	r2, [sp, #32]
    ad00:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ad02:	b010      	add	sp, #64	; 0x40
    ad04:	bdb0      	pop	{r4, r5, r7, pc}
    ad06:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    ad0a:	07c0      	lsls	r0, r0, #31
    ad0c:	2800      	cmp	r0, #0
    ad0e:	d0f4      	beq.n	acfa <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    ad10:	e7ff      	b.n	ad12 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xa6>
    ad12:	2000      	movs	r0, #0
    ad14:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ad18:	e7ef      	b.n	acfa <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    ad1a:	e7ee      	b.n	acfa <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>

0000ad1c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>:
    ad1c:	b5b0      	push	{r4, r5, r7, lr}
    ad1e:	b090      	sub	sp, #64	; 0x40
    ad20:	469c      	mov	ip, r3
    ad22:	4696      	mov	lr, r2
    ad24:	460c      	mov	r4, r1
    ad26:	4605      	mov	r5, r0
    ad28:	9103      	str	r1, [sp, #12]
    ad2a:	9002      	str	r0, [sp, #8]
    ad2c:	9305      	str	r3, [sp, #20]
    ad2e:	9204      	str	r2, [sp, #16]
    ad30:	2000      	movs	r0, #0
    ad32:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ad36:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ad3a:	2001      	movs	r0, #1
    ad3c:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ad40:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ad44:	9802      	ldr	r0, [sp, #8]
    ad46:	2800      	cmp	r0, #0
    ad48:	d001      	beq.n	ad4e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x32>
    ad4a:	e7ff      	b.n	ad4c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x30>
    ad4c:	e004      	b.n	ad58 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x3c>
    ad4e:	2000      	movs	r0, #0
    ad50:	9007      	str	r0, [sp, #28]
    ad52:	9006      	str	r0, [sp, #24]
    ad54:	e023      	b.n	ad9e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    ad56:	defe      	udf	#254	; 0xfe
    ad58:	2000      	movs	r0, #0
    ad5a:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ad5e:	9904      	ldr	r1, [sp, #16]
    ad60:	9a05      	ldr	r2, [sp, #20]
    ad62:	920f      	str	r2, [sp, #60]	; 0x3c
    ad64:	910e      	str	r1, [sp, #56]	; 0x38
    ad66:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ad6a:	920b      	str	r2, [sp, #44]	; 0x2c
    ad6c:	910a      	str	r1, [sp, #40]	; 0x28
    ad6e:	980a      	ldr	r0, [sp, #40]	; 0x28
    ad70:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ad72:	f00b fe05 	bl	16980 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>
    ad76:	9101      	str	r1, [sp, #4]
    ad78:	9000      	str	r0, [sp, #0]
    ad7a:	e7ff      	b.n	ad7c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x60>
    ad7c:	9800      	ldr	r0, [sp, #0]
    ad7e:	9008      	str	r0, [sp, #32]
    ad80:	9901      	ldr	r1, [sp, #4]
    ad82:	9109      	str	r1, [sp, #36]	; 0x24
    ad84:	2200      	movs	r2, #0
    ad86:	9207      	str	r2, [sp, #28]
    ad88:	2201      	movs	r2, #1
    ad8a:	9206      	str	r2, [sp, #24]
    ad8c:	e007      	b.n	ad9e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    ad8e:	9802      	ldr	r0, [sp, #8]
    ad90:	2801      	cmp	r0, #1
    ad92:	d010      	beq.n	adb6 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x9a>
    ad94:	e019      	b.n	adca <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xae>
    ad96:	2000      	movs	r0, #0
    ad98:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ad9c:	e7f7      	b.n	ad8e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    ad9e:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    ada2:	07c0      	lsls	r0, r0, #31
    ada4:	2800      	cmp	r0, #0
    ada6:	d1f6      	bne.n	ad96 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x7a>
    ada8:	e7f1      	b.n	ad8e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    adaa:	9806      	ldr	r0, [sp, #24]
    adac:	9907      	ldr	r1, [sp, #28]
    adae:	9a08      	ldr	r2, [sp, #32]
    adb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    adb2:	b010      	add	sp, #64	; 0x40
    adb4:	bdb0      	pop	{r4, r5, r7, pc}
    adb6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    adba:	07c0      	lsls	r0, r0, #31
    adbc:	2800      	cmp	r0, #0
    adbe:	d0f4      	beq.n	adaa <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    adc0:	e7ff      	b.n	adc2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xa6>
    adc2:	2000      	movs	r0, #0
    adc4:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    adc8:	e7ef      	b.n	adaa <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    adca:	e7ee      	b.n	adaa <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>

0000adcc <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>:
    adcc:	b084      	sub	sp, #16
    adce:	460a      	mov	r2, r1
    add0:	4603      	mov	r3, r0
    add2:	9103      	str	r1, [sp, #12]
    add4:	9002      	str	r0, [sp, #8]
    add6:	b004      	add	sp, #16
    add8:	4770      	bx	lr

0000adda <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E>:
    adda:	b084      	sub	sp, #16
    addc:	9000      	str	r0, [sp, #0]
    adde:	9101      	str	r1, [sp, #4]
    ade0:	9102      	str	r1, [sp, #8]
    ade2:	9003      	str	r0, [sp, #12]
    ade4:	6802      	ldr	r2, [r0, #0]
    ade6:	6840      	ldr	r0, [r0, #4]
    ade8:	680b      	ldr	r3, [r1, #0]
    adea:	6849      	ldr	r1, [r1, #4]
    adec:	4048      	eors	r0, r1
    adee:	ea82 0103 	eor.w	r1, r2, r3
    adf2:	4308      	orrs	r0, r1
    adf4:	fab0 f080 	clz	r0, r0
    adf8:	0940      	lsrs	r0, r0, #5
    adfa:	b004      	add	sp, #16
    adfc:	4770      	bx	lr

0000adfe <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E>:
/// ```rust
/// let peripherals = nrf52::Peripherals::take().unwrap();
/// let nfcpins = peripherals.UICR.nfcpins.read().bits();
/// console::print("nfcpins = "); console::printhex(nfcpins as u8); console::print("\n");
/// ```
pub fn start_touch_sensor() -> MynewtResult<()> {
    adfe:	b5b0      	push	{r4, r5, r7, lr}
    ae00:	b0be      	sub	sp, #248	; 0xf8
    console::print("Rust touch sensor\n");
    ae02:	f24e 50e0 	movw	r0, #58848	; 0xe5e0
    ae06:	f2c0 0001 	movt	r0, #1
    ae0a:	2112      	movs	r1, #18
    ae0c:	f7fe f8f0 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    ae10:	e7ff      	b.n	ae12 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x14>

    //  Init GPIO for the Reset Pin
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    ae12:	f240 1064 	movw	r0, #356	; 0x164
    ae16:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ae1a:	210a      	movs	r1, #10
    ae1c:	f009 fac3 	bl	143a6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    ae20:	9012      	str	r0, [sp, #72]	; 0x48
    ae22:	e7ff      	b.n	ae24 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x26>
    ae24:	9812      	ldr	r0, [sp, #72]	; 0x48
    ae26:	f7fd fea7 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    ae2a:	9014      	str	r0, [sp, #80]	; 0x50
    ae2c:	e7ff      	b.n	ae2e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x30>
    ae2e:	9814      	ldr	r0, [sp, #80]	; 0x50
    ae30:	1e41      	subs	r1, r0, #1
    ae32:	bf18      	it	ne
    ae34:	2101      	movne	r1, #1
    ae36:	2801      	cmp	r0, #1
    ae38:	d001      	beq.n	ae3e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x40>
    ae3a:	e7ff      	b.n	ae3c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x3e>
    ae3c:	e008      	b.n	ae50 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x52>

    //  Reset the touch controller by switching the Reset Pin low then high with pauses. Based on https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L1017-L1167
    unsafe {
        TOUCH_RESET.set_low() ? ;
    ae3e:	f240 1064 	movw	r0, #356	; 0x164
    ae42:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ae46:	f009 fb47 	bl	144d8 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    ae4a:	9011      	str	r0, [sp, #68]	; 0x44
    ae4c:	e00f      	b.n	ae6e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x70>
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    ae4e:	defe      	udf	#254	; 0xfe
    ae50:	9814      	ldr	r0, [sp, #80]	; 0x50
    ae52:	9036      	str	r0, [sp, #216]	; 0xd8
    ae54:	f007 fca4 	bl	127a0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    ae58:	9010      	str	r0, [sp, #64]	; 0x40
    ae5a:	e002      	b.n	ae62 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x64>
    assert_eq!(rc, 0, "IRQ init fail");

    //  Start monitoring for touch controller interrupts
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    Ok(())
}
    ae5c:	9813      	ldr	r0, [sp, #76]	; 0x4c
    ae5e:	b03e      	add	sp, #248	; 0xf8
    ae60:	bdb0      	pop	{r4, r5, r7, pc}
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    ae62:	9810      	ldr	r0, [sp, #64]	; 0x40
    ae64:	f7fd fe7c 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    ae68:	9013      	str	r0, [sp, #76]	; 0x4c
    ae6a:	e7ff      	b.n	ae6c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x6e>
    ae6c:	e7f6      	b.n	ae5c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>
        TOUCH_RESET.set_low() ? ;
    ae6e:	9811      	ldr	r0, [sp, #68]	; 0x44
    ae70:	f7fd fe82 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    ae74:	9015      	str	r0, [sp, #84]	; 0x54
    ae76:	e7ff      	b.n	ae78 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x7a>
    ae78:	9815      	ldr	r0, [sp, #84]	; 0x54
    ae7a:	1e41      	subs	r1, r0, #1
    ae7c:	bf18      	it	ne
    ae7e:	2101      	movne	r1, #1
    ae80:	2801      	cmp	r0, #1
    ae82:	d001      	beq.n	ae88 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x8a>
    ae84:	e7ff      	b.n	ae86 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x88>
    ae86:	e008      	b.n	ae9a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x9c>
        TOUCH_DELAY.delay_ms(20);
    ae88:	f240 1068 	movw	r0, #360	; 0x168
    ae8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ae90:	2114      	movs	r1, #20
    ae92:	f009 fb38 	bl	14506 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    ae96:	e00d      	b.n	aeb4 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb6>
        TOUCH_RESET.set_low() ? ;
    ae98:	defe      	udf	#254	; 0xfe
    ae9a:	9815      	ldr	r0, [sp, #84]	; 0x54
    ae9c:	9037      	str	r0, [sp, #220]	; 0xdc
    ae9e:	f007 fc7f 	bl	127a0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    aea2:	900f      	str	r0, [sp, #60]	; 0x3c
    aea4:	e7ff      	b.n	aea6 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xa8>
    aea6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    aea8:	f7fd fe5a 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    aeac:	9013      	str	r0, [sp, #76]	; 0x4c
    aeae:	e7ff      	b.n	aeb0 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb2>
    aeb0:	e7ff      	b.n	aeb2 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb4>
    aeb2:	e7d3      	b.n	ae5c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>
        TOUCH_RESET.set_high() ? ;
    aeb4:	f240 1064 	movw	r0, #356	; 0x164
    aeb8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    aebc:	f009 fb17 	bl	144ee <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    aec0:	900e      	str	r0, [sp, #56]	; 0x38
    aec2:	e7ff      	b.n	aec4 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xc6>
    aec4:	980e      	ldr	r0, [sp, #56]	; 0x38
    aec6:	f7fd fe57 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    aeca:	9016      	str	r0, [sp, #88]	; 0x58
    aecc:	e7ff      	b.n	aece <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xd0>
    aece:	9816      	ldr	r0, [sp, #88]	; 0x58
    aed0:	1e41      	subs	r1, r0, #1
    aed2:	bf18      	it	ne
    aed4:	2101      	movne	r1, #1
    aed6:	2801      	cmp	r0, #1
    aed8:	d001      	beq.n	aede <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xe0>
    aeda:	e7ff      	b.n	aedc <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xde>
    aedc:	e008      	b.n	aef0 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xf2>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    aede:	f240 1068 	movw	r0, #360	; 0x168
    aee2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    aee6:	21c8      	movs	r1, #200	; 0xc8
    aee8:	f009 fb0d 	bl	14506 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    aeec:	e00c      	b.n	af08 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x10a>
        TOUCH_RESET.set_high() ? ;
    aeee:	defe      	udf	#254	; 0xfe
    aef0:	9816      	ldr	r0, [sp, #88]	; 0x58
    aef2:	9038      	str	r0, [sp, #224]	; 0xe0
    aef4:	f007 fc54 	bl	127a0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    aef8:	900d      	str	r0, [sp, #52]	; 0x34
    aefa:	e7ff      	b.n	aefc <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xfe>
    aefc:	980d      	ldr	r0, [sp, #52]	; 0x34
    aefe:	f7fd fe2f 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    af02:	9013      	str	r0, [sp, #76]	; 0x4c
    af04:	e7ff      	b.n	af06 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x108>
    af06:	e7d4      	b.n	aeb2 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb4>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    af08:	f240 1068 	movw	r0, #360	; 0x168
    af0c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    af10:	21c8      	movs	r1, #200	; 0xc8
    af12:	f009 faf8 	bl	14506 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    af16:	e7ff      	b.n	af18 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x11a>
    unsafe { TOUCH_EVENT.ev_cb = Some( touch_event_callback ) };
    af18:	f24b 00bb 	movw	r0, #45243	; 0xb0bb
    af1c:	f2c0 0000 	movt	r0, #0
    af20:	9017      	str	r0, [sp, #92]	; 0x5c
    af22:	9817      	ldr	r0, [sp, #92]	; 0x5c
    af24:	f240 11fc 	movw	r1, #508	; 0x1fc
    af28:	f2c2 0100 	movt	r1, #8192	; 0x2000
    af2c:	6048      	str	r0, [r1, #4]
        Some( touch_interrupt_handler ),  //  Call `touch_interrupt_handler()` upon detecting interrupt
    af2e:	f24b 006f 	movw	r0, #45167	; 0xb06f
    af32:	f2c0 0000 	movt	r0, #0
    af36:	9019      	str	r0, [sp, #100]	; 0x64
        core::ptr::null_mut(),            //  No arguments for `touch_interrupt_handler()`
    af38:	e7ff      	b.n	af3a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x13c>
    let rc = unsafe { hal::hal_gpio_irq_init(
    af3a:	9919      	ldr	r1, [sp, #100]	; 0x64
    af3c:	4668      	mov	r0, sp
    af3e:	2201      	movs	r2, #1
    af40:	6002      	str	r2, [r0, #0]
    af42:	201c      	movs	r0, #28
    af44:	2200      	movs	r2, #0
    af46:	2302      	movs	r3, #2
    af48:	f00e fe78 	bl	19c3c <hal_gpio_irq_init>
    af4c:	9018      	str	r0, [sp, #96]	; 0x60
    af4e:	e7ff      	b.n	af50 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x152>
    assert_eq!(rc, 0, "IRQ init fail");
    af50:	f24e 50f8 	movw	r0, #58872	; 0xe5f8
    af54:	f2c0 0001 	movt	r0, #1
    af58:	6800      	ldr	r0, [r0, #0]
    af5a:	a918      	add	r1, sp, #96	; 0x60
    af5c:	911a      	str	r1, [sp, #104]	; 0x68
    af5e:	901b      	str	r0, [sp, #108]	; 0x6c
    af60:	981a      	ldr	r0, [sp, #104]	; 0x68
    af62:	9039      	str	r0, [sp, #228]	; 0xe4
    af64:	991b      	ldr	r1, [sp, #108]	; 0x6c
    af66:	913a      	str	r1, [sp, #232]	; 0xe8
    af68:	6802      	ldr	r2, [r0, #0]
    af6a:	680b      	ldr	r3, [r1, #0]
    af6c:	429a      	cmp	r2, r3
    af6e:	900c      	str	r0, [sp, #48]	; 0x30
    af70:	910b      	str	r1, [sp, #44]	; 0x2c
    af72:	d104      	bne.n	af7e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x180>
    af74:	e7ff      	b.n	af76 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x178>
    af76:	201c      	movs	r0, #28
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    af78:	f00e fe9c 	bl	19cb4 <hal_gpio_irq_enable>
    af7c:	e072      	b.n	b064 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x266>
    assert_eq!(rc, 0, "IRQ init fail");
    af7e:	f24e 6050 	movw	r0, #58960	; 0xe650
    af82:	f2c0 0001 	movt	r0, #1
    af86:	6801      	ldr	r1, [r0, #0]
    af88:	980c      	ldr	r0, [sp, #48]	; 0x30
    af8a:	902b      	str	r0, [sp, #172]	; 0xac
    af8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    af8e:	922c      	str	r2, [sp, #176]	; 0xb0
    af90:	f24e 636c 	movw	r3, #58988	; 0xe66c
    af94:	f2c0 0301 	movt	r3, #1
    af98:	681b      	ldr	r3, [r3, #0]
    af9a:	f24e 6c70 	movw	ip, #58992	; 0xe670
    af9e:	f2c0 0c01 	movt	ip, #1
    afa2:	f8dc c000 	ldr.w	ip, [ip]
    afa6:	46ee      	mov	lr, sp
    afa8:	2400      	movs	r4, #0
    afaa:	f8ce 4000 	str.w	r4, [lr]
    afae:	a82d      	add	r0, sp, #180	; 0xb4
    afb0:	2201      	movs	r2, #1
    afb2:	910a      	str	r1, [sp, #40]	; 0x28
    afb4:	4619      	mov	r1, r3
    afb6:	4663      	mov	r3, ip
    afb8:	f00b fd06 	bl	169c8 <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>
    afbc:	e7ff      	b.n	afbe <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x1c0>
    afbe:	a82b      	add	r0, sp, #172	; 0xac
    afc0:	9028      	str	r0, [sp, #160]	; 0xa0
    afc2:	a82c      	add	r0, sp, #176	; 0xb0
    afc4:	9029      	str	r0, [sp, #164]	; 0xa4
    afc6:	a82d      	add	r0, sp, #180	; 0xb4
    afc8:	902a      	str	r0, [sp, #168]	; 0xa8
    afca:	9828      	ldr	r0, [sp, #160]	; 0xa0
    afcc:	903b      	str	r0, [sp, #236]	; 0xec
    afce:	9929      	ldr	r1, [sp, #164]	; 0xa4
    afd0:	913c      	str	r1, [sp, #240]	; 0xf0
    afd2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    afd4:	923d      	str	r2, [sp, #244]	; 0xf4
    afd6:	f241 63f3 	movw	r3, #5875	; 0x16f3
    afda:	f2c0 0301 	movt	r3, #1
    afde:	9109      	str	r1, [sp, #36]	; 0x24
    afe0:	4619      	mov	r1, r3
    afe2:	9208      	str	r2, [sp, #32]
    afe4:	f7fe f9b9 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    afe8:	9007      	str	r0, [sp, #28]
    afea:	9106      	str	r1, [sp, #24]
    afec:	e7ff      	b.n	afee <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x1f0>
    afee:	f241 61f3 	movw	r1, #5875	; 0x16f3
    aff2:	f2c0 0101 	movt	r1, #1
    aff6:	9809      	ldr	r0, [sp, #36]	; 0x24
    aff8:	f7fe f9af 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    affc:	9005      	str	r0, [sp, #20]
    affe:	9104      	str	r1, [sp, #16]
    b000:	e7ff      	b.n	b002 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x204>
    b002:	f647 61d7 	movw	r1, #32471	; 0x7ed7
    b006:	f2c0 0101 	movt	r1, #1
    b00a:	9808      	ldr	r0, [sp, #32]
    b00c:	f7fe f9e4 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    b010:	9003      	str	r0, [sp, #12]
    b012:	9102      	str	r1, [sp, #8]
    b014:	e7ff      	b.n	b016 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x218>
    b016:	9807      	ldr	r0, [sp, #28]
    b018:	9022      	str	r0, [sp, #136]	; 0x88
    b01a:	9906      	ldr	r1, [sp, #24]
    b01c:	9123      	str	r1, [sp, #140]	; 0x8c
    b01e:	9a05      	ldr	r2, [sp, #20]
    b020:	9224      	str	r2, [sp, #144]	; 0x90
    b022:	9b04      	ldr	r3, [sp, #16]
    b024:	9325      	str	r3, [sp, #148]	; 0x94
    b026:	f8dd c00c 	ldr.w	ip, [sp, #12]
    b02a:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
    b02e:	f8dd e008 	ldr.w	lr, [sp, #8]
    b032:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
    b036:	466c      	mov	r4, sp
    b038:	2503      	movs	r5, #3
    b03a:	6025      	str	r5, [r4, #0]
    b03c:	a81c      	add	r0, sp, #112	; 0x70
    b03e:	ab22      	add	r3, sp, #136	; 0x88
    b040:	990a      	ldr	r1, [sp, #40]	; 0x28
    b042:	462a      	mov	r2, r5
    b044:	f00b fcc0 	bl	169c8 <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>
    b048:	e7ff      	b.n	b04a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x24c>
    b04a:	f24e 6090 	movw	r0, #59024	; 0xe690
    b04e:	f2c0 0001 	movt	r0, #1
    b052:	f00c fc52 	bl	178fa <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    b056:	9001      	str	r0, [sp, #4]
    b058:	e7ff      	b.n	b05a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x25c>
    b05a:	a81c      	add	r0, sp, #112	; 0x70
    b05c:	9901      	ldr	r1, [sp, #4]
    b05e:	f00c fc89 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    b062:	defe      	udf	#254	; 0xfe
    b064:	2000      	movs	r0, #0
    Ok(())
    b066:	9013      	str	r0, [sp, #76]	; 0x4c
    b068:	2001      	movs	r0, #1
    b06a:	9013      	str	r0, [sp, #76]	; 0x4c
}
    b06c:	e6f6      	b.n	ae5c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>

0000b06e <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE>:

/// Interrupt handler for the touch controller, triggered when a touch is detected
extern "C" fn touch_interrupt_handler(arg: *mut core::ffi::c_void) {
    b06e:	b580      	push	{r7, lr}
    b070:	b086      	sub	sp, #24
    b072:	9004      	str	r0, [sp, #16]
    //  We forward a touch event to the Default Event Queue for deferred processing.  Don't do any processing here.
    unsafe { TOUCH_EVENT.ev_arg = arg };
    b074:	f240 11fc 	movw	r1, #508	; 0x1fc
    b078:	f2c2 0100 	movt	r1, #8192	; 0x2000
    b07c:	6088      	str	r0, [r1, #8]
    b07e:	a802      	add	r0, sp, #8
    //  Fetch the Default Event Queue. TODO: Use dedicated Event Queue for higher priority processing.
    let queue = os::eventq_dflt_get()
    b080:	f7fd fdf6 	bl	8c70 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    b084:	e7ff      	b.n	b086 <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x18>
    b086:	f24e 115e 	movw	r1, #57694	; 0xe15e
    b08a:	f2c0 0101 	movt	r1, #1
    b08e:	f24e 63a8 	movw	r3, #59048	; 0xe6a8
    b092:	f2c0 0301 	movt	r3, #1
    b096:	a802      	add	r0, sp, #8
    b098:	2208      	movs	r2, #8
    b09a:	f7fd fb9a 	bl	87d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>
    b09e:	4601      	mov	r1, r0
    b0a0:	9005      	str	r0, [sp, #20]
    b0a2:	9101      	str	r1, [sp, #4]
    b0a4:	e7ff      	b.n	b0a6 <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x38>
        .expect("GET fail");
    unsafe { os::os_eventq_put(queue, &mut TOUCH_EVENT) };  //  Trigger the callback function `touch_event_callback()`
    b0a6:	f240 11fc 	movw	r1, #508	; 0x1fc
    b0aa:	f2c2 0100 	movt	r1, #8192	; 0x2000
    b0ae:	9801      	ldr	r0, [sp, #4]
    b0b0:	f00f fe93 	bl	1adda <os_eventq_put>
    b0b4:	e7ff      	b.n	b0b6 <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x48>
    //console::print("touch\n"); ////
}
    b0b6:	b006      	add	sp, #24
    b0b8:	bd80      	pop	{r7, pc}

0000b0ba <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E>:

/// Callback for the touch event that is triggered when a touch is detected
extern "C" fn touch_event_callback(_event: *mut os_event) {
    b0ba:	b580      	push	{r7, lr}
    b0bc:	b094      	sub	sp, #80	; 0x50
    b0be:	900e      	str	r0, [sp, #56]	; 0x38
    //  console::printhex(unsafe { os::os_time_get() } as u8); console::print(" touch\n");
    unsafe { 
        //  Fetch the touch data from the touch controller
        read_touchdata(&mut TOUCH_DATA)
    b0c0:	f240 1068 	movw	r0, #360	; 0x168
    b0c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b0c8:	f000 f894 	bl	b1f4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E>
    b0cc:	9006      	str	r0, [sp, #24]
    b0ce:	e7ff      	b.n	b0d0 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x16>
    b0d0:	f24e 61b8 	movw	r1, #59064	; 0xe6b8
    b0d4:	f2c0 0101 	movt	r1, #1
    b0d8:	f24e 63c8 	movw	r3, #59080	; 0xe6c8
    b0dc:	f2c0 0301 	movt	r3, #1
    b0e0:	220e      	movs	r2, #14
    b0e2:	9806      	ldr	r0, [sp, #24]
    b0e4:	f7fd fd09 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    b0e8:	e7ff      	b.n	b0ea <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x30>
            .expect("touchdata fail");
        //  Handle each touch data info
        for i in 0..TOUCH_DATA.count as usize {
    b0ea:	f240 1068 	movw	r0, #360	; 0x168
    b0ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b0f2:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
    b0f6:	2100      	movs	r1, #0
    b0f8:	9107      	str	r1, [sp, #28]
    b0fa:	9008      	str	r0, [sp, #32]
    b0fc:	9807      	ldr	r0, [sp, #28]
    b0fe:	9908      	ldr	r1, [sp, #32]
    b100:	f006 feea 	bl	11ed8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    b104:	9005      	str	r0, [sp, #20]
    b106:	9104      	str	r1, [sp, #16]
    b108:	e7ff      	b.n	b10a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x50>
    b10a:	9805      	ldr	r0, [sp, #20]
    b10c:	9009      	str	r0, [sp, #36]	; 0x24
    b10e:	9904      	ldr	r1, [sp, #16]
    b110:	910a      	str	r1, [sp, #40]	; 0x28
    b112:	e7ff      	b.n	b114 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
    b114:	a809      	add	r0, sp, #36	; 0x24
    b116:	f006 fe54 	bl	11dc2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    b11a:	910c      	str	r1, [sp, #48]	; 0x30
    b11c:	900b      	str	r0, [sp, #44]	; 0x2c
    b11e:	e7ff      	b.n	b120 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x66>
    b120:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b122:	2800      	cmp	r0, #0
    b124:	d001      	beq.n	b12a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x70>
    b126:	e7ff      	b.n	b128 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x6e>
    b128:	e002      	b.n	b130 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x76>
            console::print(", x: "); console::printint(x as i32); 
            console::print(", y: "); console::printint(y as i32); console::print("\n");
        }
        console::flush();   
    } */
}
    b12a:	b014      	add	sp, #80	; 0x50
    b12c:	bd80      	pop	{r7, pc}
        for i in 0..TOUCH_DATA.count as usize {
    b12e:	defe      	udf	#254	; 0xfe
    b130:	980c      	ldr	r0, [sp, #48]	; 0x30
    b132:	900f      	str	r0, [sp, #60]	; 0x3c
    b134:	9010      	str	r0, [sp, #64]	; 0x40
    b136:	9011      	str	r0, [sp, #68]	; 0x44
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    b138:	2809      	cmp	r0, #9
    b13a:	9003      	str	r0, [sp, #12]
    b13c:	d851      	bhi.n	b1e2 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x128>
    b13e:	e7ff      	b.n	b140 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x86>
    b140:	f240 1068 	movw	r0, #360	; 0x168
    b144:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b148:	9903      	ldr	r1, [sp, #12]
    b14a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b14e:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
    b152:	4603      	mov	r3, r0
    b154:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
    b158:	f8b2 c002 	ldrh.w	ip, [r2, #2]
    b15c:	46e6      	mov	lr, ip
    b15e:	f8ad c04c 	strh.w	ip, [sp, #76]	; 0x4c
    b162:	7912      	ldrb	r2, [r2, #4]
    b164:	4694      	mov	ip, r2
    b166:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
            if x == 0 && y == 0 { continue; }
    b16a:	2800      	cmp	r0, #0
    b16c:	9302      	str	r3, [sp, #8]
    b16e:	f8cd e004 	str.w	lr, [sp, #4]
    b172:	f8cd c000 	str.w	ip, [sp]
    b176:	d008      	beq.n	b18a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xd0>
    b178:	e003      	b.n	b182 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc8>
    b17a:	2001      	movs	r0, #1
    b17c:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    b180:	e008      	b.n	b194 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xda>
    b182:	2000      	movs	r0, #0
    b184:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    b188:	e004      	b.n	b194 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xda>
    b18a:	9801      	ldr	r0, [sp, #4]
    b18c:	0401      	lsls	r1, r0, #16
    b18e:	2900      	cmp	r1, #0
    b190:	d0f3      	beq.n	b17a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc0>
    b192:	e7f6      	b.n	b182 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc8>
    b194:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    b198:	07c0      	lsls	r0, r0, #31
    b19a:	2800      	cmp	r0, #0
    b19c:	d105      	bne.n	b1aa <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf0>
    b19e:	e7ff      	b.n	b1a0 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xe6>
            if action != 0 && action != 2 { continue; }
    b1a0:	9800      	ldr	r0, [sp, #0]
    b1a2:	0601      	lsls	r1, r0, #24
    b1a4:	2900      	cmp	r1, #0
    b1a6:	d10a      	bne.n	b1be <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x104>
    b1a8:	e005      	b.n	b1b6 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xfc>
            if x == 0 && y == 0 { continue; }
    b1aa:	e7ff      	b.n	b1ac <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf2>
    b1ac:	e7b2      	b.n	b114 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
    b1ae:	2001      	movs	r0, #1
            if action != 0 && action != 2 { continue; }
    b1b0:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    b1b4:	e008      	b.n	b1c8 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x10e>
    b1b6:	2000      	movs	r0, #0
    b1b8:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    b1bc:	e004      	b.n	b1c8 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x10e>
    b1be:	9800      	ldr	r0, [sp, #0]
    b1c0:	b2c1      	uxtb	r1, r0
    b1c2:	2902      	cmp	r1, #2
    b1c4:	d1f3      	bne.n	b1ae <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf4>
    b1c6:	e7f6      	b.n	b1b6 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xfc>
    b1c8:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
    b1cc:	07c0      	lsls	r0, r0, #31
    b1ce:	2800      	cmp	r0, #0
    b1d0:	d105      	bne.n	b1de <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x124>
    b1d2:	e7ff      	b.n	b1d4 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x11a>
            super::handle_touch(x, y);
    b1d4:	9802      	ldr	r0, [sp, #8]
    b1d6:	9901      	ldr	r1, [sp, #4]
    b1d8:	f001 fca6 	bl	cb28 <_ZN3app5chip812handle_touch17habca32c74e5cefadE>
    b1dc:	e000      	b.n	b1e0 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x126>
            if action != 0 && action != 2 { continue; }
    b1de:	e7e5      	b.n	b1ac <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf2>
        for i in 0..TOUCH_DATA.count as usize {
    b1e0:	e798      	b.n	b114 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    b1e2:	f24e 60d8 	movw	r0, #59096	; 0xe6d8
    b1e6:	f2c0 0001 	movt	r0, #1
    b1ea:	220a      	movs	r2, #10
    b1ec:	9903      	ldr	r1, [sp, #12]
    b1ee:	f00c fba1 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b1f2:	defe      	udf	#254	; 0xfe

0000b1f4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E>:
/// Touch data will be populated here
static mut TOUCH_DATA: TouchEventInfo = fill_zero!(TouchEventInfo);

/// Read touch controller data. This only works when the screen has been tapped and the touch controller wakes up.
/// Ported from https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L407-L466
fn read_touchdata(data: &mut TouchEventInfo) -> MynewtResult<()> {
    b1f4:	b580      	push	{r7, lr}
    b1f6:	b0de      	sub	sp, #376	; 0x178
    b1f8:	9057      	str	r0, [sp, #348]	; 0x15c
    read_register_range(           //  Read the range of I2C registers...
    b1fa:	4669      	mov	r1, sp
    b1fc:	223f      	movs	r2, #63	; 0x3f
    b1fe:	600a      	str	r2, [r1, #0]
    b200:	f240 13ba 	movw	r3, #442	; 0x1ba
    b204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b208:	2115      	movs	r1, #21
    b20a:	f04f 0c00 	mov.w	ip, #0
    b20e:	9026      	str	r0, [sp, #152]	; 0x98
    b210:	4608      	mov	r0, r1
    b212:	4661      	mov	r1, ip
    b214:	f000 fb97 	bl	b946 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E>
    b218:	9025      	str	r0, [sp, #148]	; 0x94
    b21a:	e7ff      	b.n	b21c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x28>
    b21c:	f24e 61e8 	movw	r1, #59112	; 0xe6e8
    b220:	f2c0 0101 	movt	r1, #1
    b224:	f24e 63fc 	movw	r3, #59132	; 0xe6fc
    b228:	f2c0 0301 	movt	r3, #1
    b22c:	2213      	movs	r2, #19
    b22e:	9825      	ldr	r0, [sp, #148]	; 0x94
    b230:	f7fd fc63 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    b234:	e7ff      	b.n	b236 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x42>
    b236:	f10d 00ee 	add.w	r0, sp, #238	; 0xee
    b23a:	2152      	movs	r1, #82	; 0x52
        TOUCH_CONTROLLER_ADDRESS,  //  From the touch controller
        0,                         //  Starting from register 0
        POINT_READ_BUF as u8,      //  Number of registers to read
        unsafe { &mut BUF }        //  Save the read data into `buf`
    ).expect("read touchdata fail");
    *data = fill_zero!(TouchEventInfo);
    b23c:	9024      	str	r0, [sp, #144]	; 0x90
    b23e:	9123      	str	r1, [sp, #140]	; 0x8c
    b240:	f012 ff32 	bl	1e0a8 <__aeabi_memclr>
    b244:	a827      	add	r0, sp, #156	; 0x9c
    b246:	9924      	ldr	r1, [sp, #144]	; 0x90
    b248:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    b24a:	f012 ff31 	bl	1e0b0 <__aeabi_memcpy>
    b24e:	e7ff      	b.n	b250 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5c>
    b250:	a927      	add	r1, sp, #156	; 0x9c
    b252:	2252      	movs	r2, #82	; 0x52
    b254:	9826      	ldr	r0, [sp, #152]	; 0x98
    b256:	f012 ff2b 	bl	1e0b0 <__aeabi_memcpy>
    data.point_num = unsafe { BUF[FT_TOUCH_POINT_NUM] & 0x0F };
    b25a:	f240 11ba 	movw	r1, #442	; 0x1ba
    b25e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    b262:	7889      	ldrb	r1, [r1, #2]
    b264:	f001 010f 	and.w	r1, r1, #15
    b268:	9a26      	ldr	r2, [sp, #152]	; 0x98
    b26a:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
    b26e:	2100      	movs	r1, #0
    data.count     = 0;
    b270:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50

    //  Populate the first 5 touch points
    for i in 0..CFG_MAX_TOUCH_POINTS {
    b274:	9150      	str	r1, [sp, #320]	; 0x140
    b276:	2105      	movs	r1, #5
    b278:	9151      	str	r1, [sp, #324]	; 0x144
    b27a:	9950      	ldr	r1, [sp, #320]	; 0x140
    b27c:	9b51      	ldr	r3, [sp, #324]	; 0x144
    b27e:	9022      	str	r0, [sp, #136]	; 0x88
    b280:	4608      	mov	r0, r1
    b282:	4619      	mov	r1, r3
    b284:	f006 fe28 	bl	11ed8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    b288:	9021      	str	r0, [sp, #132]	; 0x84
    b28a:	9120      	str	r1, [sp, #128]	; 0x80
    b28c:	e7ff      	b.n	b28e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x9a>
    b28e:	9821      	ldr	r0, [sp, #132]	; 0x84
    b290:	9052      	str	r0, [sp, #328]	; 0x148
    b292:	9920      	ldr	r1, [sp, #128]	; 0x80
    b294:	9153      	str	r1, [sp, #332]	; 0x14c
    b296:	e7ff      	b.n	b298 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xa4>
    b298:	a852      	add	r0, sp, #328	; 0x148
    b29a:	f006 fd92 	bl	11dc2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    b29e:	9155      	str	r1, [sp, #340]	; 0x154
    b2a0:	9054      	str	r0, [sp, #336]	; 0x150
    b2a2:	e7ff      	b.n	b2a4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xb0>
    b2a4:	9854      	ldr	r0, [sp, #336]	; 0x150
    b2a6:	2800      	cmp	r0, #0
    b2a8:	d001      	beq.n	b2ae <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xba>
    b2aa:	e7ff      	b.n	b2ac <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xb8>
    b2ac:	e001      	b.n	b2b2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xbe>
    b2ae:	e00d      	b.n	b2cc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xd8>
    b2b0:	defe      	udf	#254	; 0xfe
    b2b2:	9855      	ldr	r0, [sp, #340]	; 0x154
    b2b4:	9058      	str	r0, [sp, #352]	; 0x160
    b2b6:	9059      	str	r0, [sp, #356]	; 0x164
    b2b8:	905a      	str	r0, [sp, #360]	; 0x168
    b2ba:	2106      	movs	r1, #6
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    b2bc:	fba1 1200 	umull	r1, r2, r1, r0
    b2c0:	2a00      	cmp	r2, #0
    b2c2:	901f      	str	r0, [sp, #124]	; 0x7c
    b2c4:	911e      	str	r1, [sp, #120]	; 0x78
    b2c6:	f040 81c1 	bne.w	b64c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x458>
    b2ca:	e002      	b.n	b2d2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xde>
    b2cc:	2001      	movs	r0, #1
            && (data.point_num == 0) {
            break;
        }
    }
    Ok(())
}
    b2ce:	b05e      	add	sp, #376	; 0x178
    b2d0:	bd80      	pop	{r7, pc}
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    b2d2:	981e      	ldr	r0, [sp, #120]	; 0x78
    b2d4:	1d41      	adds	r1, r0, #5
    b2d6:	460a      	mov	r2, r1
    b2d8:	4281      	cmp	r1, r0
    b2da:	921d      	str	r2, [sp, #116]	; 0x74
    b2dc:	f0c0 81c2 	bcc.w	b664 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x470>
    b2e0:	e7ff      	b.n	b2e2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xee>
    b2e2:	981d      	ldr	r0, [sp, #116]	; 0x74
    b2e4:	283e      	cmp	r0, #62	; 0x3e
    b2e6:	f200 81c9 	bhi.w	b67c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x488>
    b2ea:	e7ff      	b.n	b2ec <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xf8>
    b2ec:	f240 10ba 	movw	r0, #442	; 0x1ba
    b2f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b2f4:	991d      	ldr	r1, [sp, #116]	; 0x74
    b2f6:	5c40      	ldrb	r0, [r0, r1]
    b2f8:	0900      	lsrs	r0, r0, #4
    b2fa:	901c      	str	r0, [sp, #112]	; 0x70
    b2fc:	e7ff      	b.n	b2fe <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x10a>
    b2fe:	981c      	ldr	r0, [sp, #112]	; 0x70
    b300:	f88d 016f 	strb.w	r0, [sp, #367]	; 0x16f
    b304:	b2c1      	uxtb	r1, r0
        if pointid >= HYN_MAX_ID { break; }
    b306:	290e      	cmp	r1, #14
    b308:	d80b      	bhi.n	b322 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x12e>
    b30a:	e7ff      	b.n	b30c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x118>
        data.count += 1;
    b30c:	9826      	ldr	r0, [sp, #152]	; 0x98
    b30e:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
    b312:	3101      	adds	r1, #1
    b314:	b2ca      	uxtb	r2, r1
    b316:	460b      	mov	r3, r1
    b318:	428a      	cmp	r2, r1
    b31a:	931b      	str	r3, [sp, #108]	; 0x6c
    b31c:	f040 81b7 	bne.w	b68e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x49a>
    b320:	e001      	b.n	b326 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x132>
        if pointid >= HYN_MAX_ID { break; }
    b322:	e7ff      	b.n	b324 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x130>
    b324:	e7d2      	b.n	b2cc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xd8>
        data.count += 1;
    b326:	981b      	ldr	r0, [sp, #108]	; 0x6c
    b328:	9926      	ldr	r1, [sp, #152]	; 0x98
    b32a:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    b32e:	2206      	movs	r2, #6
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b330:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b332:	fba2 2c03 	umull	r2, ip, r2, r3
    b336:	f1bc 0f00 	cmp.w	ip, #0
    b33a:	921a      	str	r2, [sp, #104]	; 0x68
    b33c:	f040 81b3 	bne.w	b6a6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4b2>
    b340:	e7ff      	b.n	b342 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x14e>
    b342:	981a      	ldr	r0, [sp, #104]	; 0x68
    b344:	1cc1      	adds	r1, r0, #3
    b346:	460a      	mov	r2, r1
    b348:	4281      	cmp	r1, r0
    b34a:	9219      	str	r2, [sp, #100]	; 0x64
    b34c:	f0c0 81b7 	bcc.w	b6be <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4ca>
    b350:	e7ff      	b.n	b352 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x15e>
    b352:	9819      	ldr	r0, [sp, #100]	; 0x64
    b354:	283e      	cmp	r0, #62	; 0x3e
    b356:	f200 81be 	bhi.w	b6d6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4e2>
    b35a:	e7ff      	b.n	b35c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x168>
    b35c:	f240 10ba 	movw	r0, #442	; 0x1ba
    b360:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b364:	9919      	ldr	r1, [sp, #100]	; 0x64
    b366:	5c40      	ldrb	r0, [r0, r1]
    b368:	f000 000f 	and.w	r0, r0, #15
    b36c:	4602      	mov	r2, r0
    b36e:	f8ad 0170 	strh.w	r0, [sp, #368]	; 0x170
    b372:	2006      	movs	r0, #6
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b374:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b376:	fba0 0c03 	umull	r0, ip, r0, r3
    b37a:	f1bc 0f00 	cmp.w	ip, #0
    b37e:	9218      	str	r2, [sp, #96]	; 0x60
    b380:	9017      	str	r0, [sp, #92]	; 0x5c
    b382:	f040 81b1 	bne.w	b6e8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4f4>
    b386:	e7ff      	b.n	b388 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x194>
    b388:	9817      	ldr	r0, [sp, #92]	; 0x5c
    b38a:	1d01      	adds	r1, r0, #4
    b38c:	460a      	mov	r2, r1
    b38e:	4281      	cmp	r1, r0
    b390:	9216      	str	r2, [sp, #88]	; 0x58
    b392:	f0c0 81b5 	bcc.w	b700 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x50c>
    b396:	e7ff      	b.n	b398 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1a4>
    b398:	9816      	ldr	r0, [sp, #88]	; 0x58
    b39a:	283e      	cmp	r0, #62	; 0x3e
    b39c:	f200 81bc 	bhi.w	b718 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x524>
    b3a0:	e7ff      	b.n	b3a2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1ae>
    b3a2:	f240 10ba 	movw	r0, #442	; 0x1ba
    b3a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b3aa:	9916      	ldr	r1, [sp, #88]	; 0x58
    b3ac:	5c40      	ldrb	r0, [r0, r1]
    b3ae:	4602      	mov	r2, r0
    b3b0:	f8ad 0172 	strh.w	r0, [sp, #370]	; 0x172
        data.touches[i].x  = (x_high << 8) | x_low;
    b3b4:	9818      	ldr	r0, [sp, #96]	; 0x60
    b3b6:	0203      	lsls	r3, r0, #8
    b3b8:	9215      	str	r2, [sp, #84]	; 0x54
    b3ba:	9314      	str	r3, [sp, #80]	; 0x50
    b3bc:	e7ff      	b.n	b3be <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1ca>
    b3be:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b3c0:	2809      	cmp	r0, #9
    b3c2:	f200 81b2 	bhi.w	b72a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x536>
    b3c6:	e7ff      	b.n	b3c8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1d4>
    b3c8:	9814      	ldr	r0, [sp, #80]	; 0x50
    b3ca:	9915      	ldr	r1, [sp, #84]	; 0x54
    b3cc:	ea40 0201 	orr.w	r2, r0, r1
    b3d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
    b3d2:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
    b3d6:	f823 203c 	strh.w	r2, [r3, ip, lsl #3]
    b3da:	2206      	movs	r2, #6
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b3dc:	fba2 2e0c 	umull	r2, lr, r2, ip
    b3e0:	f1be 0f00 	cmp.w	lr, #0
    b3e4:	9213      	str	r2, [sp, #76]	; 0x4c
    b3e6:	f040 81a9 	bne.w	b73c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x548>
    b3ea:	e7ff      	b.n	b3ec <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1f8>
    b3ec:	9813      	ldr	r0, [sp, #76]	; 0x4c
    b3ee:	1d41      	adds	r1, r0, #5
    b3f0:	460a      	mov	r2, r1
    b3f2:	4281      	cmp	r1, r0
    b3f4:	9212      	str	r2, [sp, #72]	; 0x48
    b3f6:	f0c0 81ad 	bcc.w	b754 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x560>
    b3fa:	e7ff      	b.n	b3fc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x208>
    b3fc:	9812      	ldr	r0, [sp, #72]	; 0x48
    b3fe:	283e      	cmp	r0, #62	; 0x3e
    b400:	f200 81b4 	bhi.w	b76c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x578>
    b404:	e7ff      	b.n	b406 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x212>
    b406:	f240 10ba 	movw	r0, #442	; 0x1ba
    b40a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b40e:	9912      	ldr	r1, [sp, #72]	; 0x48
    b410:	5c40      	ldrb	r0, [r0, r1]
    b412:	f000 000f 	and.w	r0, r0, #15
    b416:	4602      	mov	r2, r0
    b418:	f8ad 0174 	strh.w	r0, [sp, #372]	; 0x174
    b41c:	2006      	movs	r0, #6
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b41e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b420:	fba0 0c03 	umull	r0, ip, r0, r3
    b424:	f1bc 0f00 	cmp.w	ip, #0
    b428:	9211      	str	r2, [sp, #68]	; 0x44
    b42a:	9010      	str	r0, [sp, #64]	; 0x40
    b42c:	f040 81a7 	bne.w	b77e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x58a>
    b430:	e7ff      	b.n	b432 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x23e>
    b432:	9810      	ldr	r0, [sp, #64]	; 0x40
    b434:	1d81      	adds	r1, r0, #6
    b436:	460a      	mov	r2, r1
    b438:	4281      	cmp	r1, r0
    b43a:	920f      	str	r2, [sp, #60]	; 0x3c
    b43c:	f0c0 81ab 	bcc.w	b796 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5a2>
    b440:	e7ff      	b.n	b442 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x24e>
    b442:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b444:	283e      	cmp	r0, #62	; 0x3e
    b446:	f200 81b2 	bhi.w	b7ae <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5ba>
    b44a:	e7ff      	b.n	b44c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x258>
    b44c:	f240 10ba 	movw	r0, #442	; 0x1ba
    b450:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b454:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b456:	5c40      	ldrb	r0, [r0, r1]
    b458:	4602      	mov	r2, r0
    b45a:	f8ad 0176 	strh.w	r0, [sp, #374]	; 0x176
        data.touches[i].y  = (y_high << 8) | y_low;
    b45e:	9811      	ldr	r0, [sp, #68]	; 0x44
    b460:	0203      	lsls	r3, r0, #8
    b462:	920e      	str	r2, [sp, #56]	; 0x38
    b464:	930d      	str	r3, [sp, #52]	; 0x34
    b466:	e7ff      	b.n	b468 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x274>
    b468:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b46a:	2809      	cmp	r0, #9
    b46c:	f200 81a8 	bhi.w	b7c0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5cc>
    b470:	e7ff      	b.n	b472 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x27e>
    b472:	9826      	ldr	r0, [sp, #152]	; 0x98
    b474:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b476:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b47a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b47c:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    b480:	ea43 0e0c 	orr.w	lr, r3, ip
    b484:	f8a2 e002 	strh.w	lr, [r2, #2]
    b488:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    b48a:	fba2 2e01 	umull	r2, lr, r2, r1
    b48e:	f1be 0f00 	cmp.w	lr, #0
    b492:	920c      	str	r2, [sp, #48]	; 0x30
    b494:	f040 819d 	bne.w	b7d2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5de>
    b498:	e7ff      	b.n	b49a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2a6>
    b49a:	980c      	ldr	r0, [sp, #48]	; 0x30
    b49c:	1cc1      	adds	r1, r0, #3
    b49e:	460a      	mov	r2, r1
    b4a0:	4281      	cmp	r1, r0
    b4a2:	920b      	str	r2, [sp, #44]	; 0x2c
    b4a4:	f0c0 81a1 	bcc.w	b7ea <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5f6>
    b4a8:	e7ff      	b.n	b4aa <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2b6>
    b4aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b4ac:	283e      	cmp	r0, #62	; 0x3e
    b4ae:	f200 81a8 	bhi.w	b802 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x60e>
    b4b2:	e7ff      	b.n	b4b4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2c0>
    b4b4:	f240 10ba 	movw	r0, #442	; 0x1ba
    b4b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b4bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b4be:	5c40      	ldrb	r0, [r0, r1]
    b4c0:	0980      	lsrs	r0, r0, #6
    b4c2:	900a      	str	r0, [sp, #40]	; 0x28
    b4c4:	e7ff      	b.n	b4c6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2d2>
        data.touches[i].action =
    b4c6:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b4c8:	2809      	cmp	r0, #9
    b4ca:	f200 81a3 	bhi.w	b814 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x620>
    b4ce:	e7ff      	b.n	b4d0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2dc>
    b4d0:	9826      	ldr	r0, [sp, #152]	; 0x98
    b4d2:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b4d4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b4d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b4da:	7113      	strb	r3, [r2, #4]
    b4dc:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    b4de:	fba2 2c01 	umull	r2, ip, r2, r1
    b4e2:	f1bc 0f00 	cmp.w	ip, #0
    b4e6:	9209      	str	r2, [sp, #36]	; 0x24
    b4e8:	f040 819d 	bne.w	b826 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x632>
    b4ec:	e7ff      	b.n	b4ee <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2fa>
    b4ee:	9809      	ldr	r0, [sp, #36]	; 0x24
    b4f0:	1d41      	adds	r1, r0, #5
    b4f2:	460a      	mov	r2, r1
    b4f4:	4281      	cmp	r1, r0
    b4f6:	9208      	str	r2, [sp, #32]
    b4f8:	f0c0 81a1 	bcc.w	b83e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x64a>
    b4fc:	e7ff      	b.n	b4fe <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x30a>
    b4fe:	9808      	ldr	r0, [sp, #32]
    b500:	283e      	cmp	r0, #62	; 0x3e
    b502:	f200 81a8 	bhi.w	b856 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x662>
    b506:	e7ff      	b.n	b508 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x314>
    b508:	f240 10ba 	movw	r0, #442	; 0x1ba
    b50c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b510:	9908      	ldr	r1, [sp, #32]
    b512:	5c40      	ldrb	r0, [r0, r1]
    b514:	0900      	lsrs	r0, r0, #4
    b516:	9007      	str	r0, [sp, #28]
    b518:	e7ff      	b.n	b51a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x326>
        data.touches[i].finger =
    b51a:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b51c:	2809      	cmp	r0, #9
    b51e:	f200 81a3 	bhi.w	b868 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x674>
    b522:	e7ff      	b.n	b524 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x330>
    b524:	9826      	ldr	r0, [sp, #152]	; 0x98
    b526:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b528:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b52c:	9b07      	ldr	r3, [sp, #28]
    b52e:	7153      	strb	r3, [r2, #5]
    b530:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    b532:	fba2 2c01 	umull	r2, ip, r2, r1
    b536:	f1bc 0f00 	cmp.w	ip, #0
    b53a:	9206      	str	r2, [sp, #24]
    b53c:	f040 819d 	bne.w	b87a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x686>
    b540:	e7ff      	b.n	b542 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x34e>
    b542:	9806      	ldr	r0, [sp, #24]
    b544:	1dc1      	adds	r1, r0, #7
    b546:	460a      	mov	r2, r1
    b548:	4281      	cmp	r1, r0
    b54a:	9205      	str	r2, [sp, #20]
    b54c:	f0c0 81a1 	bcc.w	b892 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x69e>
    b550:	e7ff      	b.n	b552 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x35e>
    b552:	9805      	ldr	r0, [sp, #20]
    b554:	283e      	cmp	r0, #62	; 0x3e
    b556:	f200 81a8 	bhi.w	b8aa <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6b6>
    b55a:	e7ff      	b.n	b55c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x368>
    b55c:	f240 10ba 	movw	r0, #442	; 0x1ba
    b560:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b564:	9905      	ldr	r1, [sp, #20]
    b566:	5c40      	ldrb	r0, [r0, r1]
        data.touches[i].pressure =
    b568:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    b56a:	2a09      	cmp	r2, #9
    b56c:	9004      	str	r0, [sp, #16]
    b56e:	f200 81a5 	bhi.w	b8bc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6c8>
    b572:	e7ff      	b.n	b574 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x380>
    b574:	9826      	ldr	r0, [sp, #152]	; 0x98
    b576:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b578:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b57c:	9b04      	ldr	r3, [sp, #16]
    b57e:	7193      	strb	r3, [r2, #6]
    b580:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    b582:	fba2 2c01 	umull	r2, ip, r2, r1
    b586:	f1bc 0f00 	cmp.w	ip, #0
    b58a:	9203      	str	r2, [sp, #12]
    b58c:	f040 819f 	bne.w	b8ce <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6da>
    b590:	e7ff      	b.n	b592 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x39e>
    b592:	9803      	ldr	r0, [sp, #12]
    b594:	f100 0108 	add.w	r1, r0, #8
    b598:	460a      	mov	r2, r1
    b59a:	4281      	cmp	r1, r0
    b59c:	9202      	str	r2, [sp, #8]
    b59e:	f0c0 81a2 	bcc.w	b8e6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6f2>
    b5a2:	e7ff      	b.n	b5a4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3b0>
    b5a4:	9802      	ldr	r0, [sp, #8]
    b5a6:	283e      	cmp	r0, #62	; 0x3e
    b5a8:	f200 81a9 	bhi.w	b8fe <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x70a>
    b5ac:	e7ff      	b.n	b5ae <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3ba>
    b5ae:	f240 10ba 	movw	r0, #442	; 0x1ba
    b5b2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b5b6:	9902      	ldr	r1, [sp, #8]
    b5b8:	5c40      	ldrb	r0, [r0, r1]
    b5ba:	0900      	lsrs	r0, r0, #4
    b5bc:	9001      	str	r0, [sp, #4]
    b5be:	e7ff      	b.n	b5c0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3cc>
        data.touches[i].area =
    b5c0:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b5c2:	2809      	cmp	r0, #9
    b5c4:	f200 81a4 	bhi.w	b910 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x71c>
    b5c8:	e7ff      	b.n	b5ca <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3d6>
    b5ca:	9826      	ldr	r0, [sp, #152]	; 0x98
    b5cc:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b5ce:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b5d2:	9b01      	ldr	r3, [sp, #4]
    b5d4:	71d3      	strb	r3, [r2, #7]
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b5d6:	290a      	cmp	r1, #10
    b5d8:	d326      	bcc.n	b628 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x434>
    b5da:	e1a2      	b.n	b922 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x72e>
    b5dc:	2001      	movs	r0, #1
    b5de:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    b5e2:	e009      	b.n	b5f8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x404>
    b5e4:	2000      	movs	r0, #0
    b5e6:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    b5ea:	e005      	b.n	b5f8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x404>
            && (data.point_num == 0) {
    b5ec:	9826      	ldr	r0, [sp, #152]	; 0x98
    b5ee:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b5f2:	2900      	cmp	r1, #0
    b5f4:	d0f2      	beq.n	b5dc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3e8>
    b5f6:	e7f5      	b.n	b5e4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f0>
    b5f8:	f89d 015a 	ldrb.w	r0, [sp, #346]	; 0x15a
    b5fc:	07c0      	lsls	r0, r0, #31
    b5fe:	2800      	cmp	r0, #0
    b600:	d123      	bne.n	b64a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x456>
    b602:	e021      	b.n	b648 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x454>
    b604:	2001      	movs	r0, #1
    b606:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    b60a:	e007      	b.n	b61c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x428>
    b60c:	2000      	movs	r0, #0
    b60e:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    b612:	e003      	b.n	b61c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x428>
    b614:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b616:	280a      	cmp	r0, #10
    b618:	d30e      	bcc.n	b638 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x444>
    b61a:	e18b      	b.n	b934 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x740>
    b61c:	f89d 015b 	ldrb.w	r0, [sp, #347]	; 0x15b
    b620:	07c0      	lsls	r0, r0, #31
    b622:	2800      	cmp	r0, #0
    b624:	d1e2      	bne.n	b5ec <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f8>
    b626:	e7dd      	b.n	b5e4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f0>
    b628:	9826      	ldr	r0, [sp, #152]	; 0x98
    b62a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b62c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b630:	7912      	ldrb	r2, [r2, #4]
    b632:	2a00      	cmp	r2, #0
    b634:	d0e6      	beq.n	b604 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x410>
    b636:	e7ed      	b.n	b614 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x420>
    b638:	9826      	ldr	r0, [sp, #152]	; 0x98
    b63a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b63c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b640:	7912      	ldrb	r2, [r2, #4]
    b642:	2a02      	cmp	r2, #2
    b644:	d0de      	beq.n	b604 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x410>
    b646:	e7e1      	b.n	b60c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x418>
    for i in 0..CFG_MAX_TOUCH_POINTS {
    b648:	e626      	b.n	b298 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xa4>
            break;
    b64a:	e66b      	b.n	b324 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x130>
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    b64c:	f24e 7020 	movw	r0, #59168	; 0xe720
    b650:	f2c0 0001 	movt	r0, #1
    b654:	f24e 720c 	movw	r2, #59148	; 0xe70c
    b658:	f2c0 0201 	movt	r2, #1
    b65c:	2121      	movs	r1, #33	; 0x21
    b65e:	f00c f953 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b662:	defe      	udf	#254	; 0xfe
    b664:	f24e 7060 	movw	r0, #59232	; 0xe760
    b668:	f2c0 0001 	movt	r0, #1
    b66c:	f24e 7244 	movw	r2, #59204	; 0xe744
    b670:	f2c0 0201 	movt	r2, #1
    b674:	211c      	movs	r1, #28
    b676:	f00c f947 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b67a:	defe      	udf	#254	; 0xfe
    b67c:	f24e 707c 	movw	r0, #59260	; 0xe77c
    b680:	f2c0 0001 	movt	r0, #1
    b684:	223f      	movs	r2, #63	; 0x3f
    b686:	991d      	ldr	r1, [sp, #116]	; 0x74
    b688:	f00c f954 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b68c:	defe      	udf	#254	; 0xfe
        data.count += 1;
    b68e:	f24e 7060 	movw	r0, #59232	; 0xe760
    b692:	f2c0 0001 	movt	r0, #1
    b696:	f24e 728c 	movw	r2, #59276	; 0xe78c
    b69a:	f2c0 0201 	movt	r2, #1
    b69e:	211c      	movs	r1, #28
    b6a0:	f00c f932 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b6a4:	defe      	udf	#254	; 0xfe
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b6a6:	f24e 7020 	movw	r0, #59168	; 0xe720
    b6aa:	f2c0 0001 	movt	r0, #1
    b6ae:	f24e 729c 	movw	r2, #59292	; 0xe79c
    b6b2:	f2c0 0201 	movt	r2, #1
    b6b6:	2121      	movs	r1, #33	; 0x21
    b6b8:	f00c f926 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b6bc:	defe      	udf	#254	; 0xfe
    b6be:	f24e 7060 	movw	r0, #59232	; 0xe760
    b6c2:	f2c0 0001 	movt	r0, #1
    b6c6:	f24e 72ac 	movw	r2, #59308	; 0xe7ac
    b6ca:	f2c0 0201 	movt	r2, #1
    b6ce:	211c      	movs	r1, #28
    b6d0:	f00c f91a 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b6d4:	defe      	udf	#254	; 0xfe
    b6d6:	f24e 70bc 	movw	r0, #59324	; 0xe7bc
    b6da:	f2c0 0001 	movt	r0, #1
    b6de:	223f      	movs	r2, #63	; 0x3f
    b6e0:	9919      	ldr	r1, [sp, #100]	; 0x64
    b6e2:	f00c f927 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b6e6:	defe      	udf	#254	; 0xfe
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b6e8:	f24e 7020 	movw	r0, #59168	; 0xe720
    b6ec:	f2c0 0001 	movt	r0, #1
    b6f0:	f24e 72cc 	movw	r2, #59340	; 0xe7cc
    b6f4:	f2c0 0201 	movt	r2, #1
    b6f8:	2121      	movs	r1, #33	; 0x21
    b6fa:	f00c f905 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b6fe:	defe      	udf	#254	; 0xfe
    b700:	f24e 7060 	movw	r0, #59232	; 0xe760
    b704:	f2c0 0001 	movt	r0, #1
    b708:	f24e 72dc 	movw	r2, #59356	; 0xe7dc
    b70c:	f2c0 0201 	movt	r2, #1
    b710:	211c      	movs	r1, #28
    b712:	f00c f8f9 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b716:	defe      	udf	#254	; 0xfe
    b718:	f24e 70ec 	movw	r0, #59372	; 0xe7ec
    b71c:	f2c0 0001 	movt	r0, #1
    b720:	223f      	movs	r2, #63	; 0x3f
    b722:	9916      	ldr	r1, [sp, #88]	; 0x58
    b724:	f00c f906 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b728:	defe      	udf	#254	; 0xfe
        data.touches[i].x  = (x_high << 8) | x_low;
    b72a:	f24e 70fc 	movw	r0, #59388	; 0xe7fc
    b72e:	f2c0 0001 	movt	r0, #1
    b732:	220a      	movs	r2, #10
    b734:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b736:	f00c f8fd 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b73a:	defe      	udf	#254	; 0xfe
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b73c:	f24e 7020 	movw	r0, #59168	; 0xe720
    b740:	f2c0 0001 	movt	r0, #1
    b744:	f64e 020c 	movw	r2, #59404	; 0xe80c
    b748:	f2c0 0201 	movt	r2, #1
    b74c:	2121      	movs	r1, #33	; 0x21
    b74e:	f00c f8db 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b752:	defe      	udf	#254	; 0xfe
    b754:	f24e 7060 	movw	r0, #59232	; 0xe760
    b758:	f2c0 0001 	movt	r0, #1
    b75c:	f64e 021c 	movw	r2, #59420	; 0xe81c
    b760:	f2c0 0201 	movt	r2, #1
    b764:	211c      	movs	r1, #28
    b766:	f00c f8cf 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b76a:	defe      	udf	#254	; 0xfe
    b76c:	f64e 002c 	movw	r0, #59436	; 0xe82c
    b770:	f2c0 0001 	movt	r0, #1
    b774:	223f      	movs	r2, #63	; 0x3f
    b776:	9912      	ldr	r1, [sp, #72]	; 0x48
    b778:	f00c f8dc 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b77c:	defe      	udf	#254	; 0xfe
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b77e:	f24e 7020 	movw	r0, #59168	; 0xe720
    b782:	f2c0 0001 	movt	r0, #1
    b786:	f64e 023c 	movw	r2, #59452	; 0xe83c
    b78a:	f2c0 0201 	movt	r2, #1
    b78e:	2121      	movs	r1, #33	; 0x21
    b790:	f00c f8ba 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b794:	defe      	udf	#254	; 0xfe
    b796:	f24e 7060 	movw	r0, #59232	; 0xe760
    b79a:	f2c0 0001 	movt	r0, #1
    b79e:	f64e 024c 	movw	r2, #59468	; 0xe84c
    b7a2:	f2c0 0201 	movt	r2, #1
    b7a6:	211c      	movs	r1, #28
    b7a8:	f00c f8ae 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b7ac:	defe      	udf	#254	; 0xfe
    b7ae:	f64e 005c 	movw	r0, #59484	; 0xe85c
    b7b2:	f2c0 0001 	movt	r0, #1
    b7b6:	223f      	movs	r2, #63	; 0x3f
    b7b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b7ba:	f00c f8bb 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b7be:	defe      	udf	#254	; 0xfe
        data.touches[i].y  = (y_high << 8) | y_low;
    b7c0:	f64e 006c 	movw	r0, #59500	; 0xe86c
    b7c4:	f2c0 0001 	movt	r0, #1
    b7c8:	220a      	movs	r2, #10
    b7ca:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b7cc:	f00c f8b2 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b7d0:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    b7d2:	f24e 7020 	movw	r0, #59168	; 0xe720
    b7d6:	f2c0 0001 	movt	r0, #1
    b7da:	f64e 027c 	movw	r2, #59516	; 0xe87c
    b7de:	f2c0 0201 	movt	r2, #1
    b7e2:	2121      	movs	r1, #33	; 0x21
    b7e4:	f00c f890 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b7e8:	defe      	udf	#254	; 0xfe
    b7ea:	f24e 7060 	movw	r0, #59232	; 0xe760
    b7ee:	f2c0 0001 	movt	r0, #1
    b7f2:	f64e 028c 	movw	r2, #59532	; 0xe88c
    b7f6:	f2c0 0201 	movt	r2, #1
    b7fa:	211c      	movs	r1, #28
    b7fc:	f00c f884 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b800:	defe      	udf	#254	; 0xfe
    b802:	f64e 009c 	movw	r0, #59548	; 0xe89c
    b806:	f2c0 0001 	movt	r0, #1
    b80a:	223f      	movs	r2, #63	; 0x3f
    b80c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b80e:	f00c f891 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b812:	defe      	udf	#254	; 0xfe
        data.touches[i].action =
    b814:	f64e 00ac 	movw	r0, #59564	; 0xe8ac
    b818:	f2c0 0001 	movt	r0, #1
    b81c:	220a      	movs	r2, #10
    b81e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b820:	f00c f888 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b824:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    b826:	f24e 7020 	movw	r0, #59168	; 0xe720
    b82a:	f2c0 0001 	movt	r0, #1
    b82e:	f64e 02bc 	movw	r2, #59580	; 0xe8bc
    b832:	f2c0 0201 	movt	r2, #1
    b836:	2121      	movs	r1, #33	; 0x21
    b838:	f00c f866 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b83c:	defe      	udf	#254	; 0xfe
    b83e:	f24e 7060 	movw	r0, #59232	; 0xe760
    b842:	f2c0 0001 	movt	r0, #1
    b846:	f64e 02cc 	movw	r2, #59596	; 0xe8cc
    b84a:	f2c0 0201 	movt	r2, #1
    b84e:	211c      	movs	r1, #28
    b850:	f00c f85a 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b854:	defe      	udf	#254	; 0xfe
    b856:	f64e 00dc 	movw	r0, #59612	; 0xe8dc
    b85a:	f2c0 0001 	movt	r0, #1
    b85e:	223f      	movs	r2, #63	; 0x3f
    b860:	9908      	ldr	r1, [sp, #32]
    b862:	f00c f867 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b866:	defe      	udf	#254	; 0xfe
        data.touches[i].finger =
    b868:	f64e 00ec 	movw	r0, #59628	; 0xe8ec
    b86c:	f2c0 0001 	movt	r0, #1
    b870:	220a      	movs	r2, #10
    b872:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b874:	f00c f85e 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b878:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    b87a:	f24e 7020 	movw	r0, #59168	; 0xe720
    b87e:	f2c0 0001 	movt	r0, #1
    b882:	f64e 02fc 	movw	r2, #59644	; 0xe8fc
    b886:	f2c0 0201 	movt	r2, #1
    b88a:	2121      	movs	r1, #33	; 0x21
    b88c:	f00c f83c 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b890:	defe      	udf	#254	; 0xfe
    b892:	f24e 7060 	movw	r0, #59232	; 0xe760
    b896:	f2c0 0001 	movt	r0, #1
    b89a:	f64e 120c 	movw	r2, #59660	; 0xe90c
    b89e:	f2c0 0201 	movt	r2, #1
    b8a2:	211c      	movs	r1, #28
    b8a4:	f00c f830 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b8a8:	defe      	udf	#254	; 0xfe
    b8aa:	f64e 101c 	movw	r0, #59676	; 0xe91c
    b8ae:	f2c0 0001 	movt	r0, #1
    b8b2:	223f      	movs	r2, #63	; 0x3f
    b8b4:	9905      	ldr	r1, [sp, #20]
    b8b6:	f00c f83d 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b8ba:	defe      	udf	#254	; 0xfe
        data.touches[i].pressure =
    b8bc:	f64e 102c 	movw	r0, #59692	; 0xe92c
    b8c0:	f2c0 0001 	movt	r0, #1
    b8c4:	220a      	movs	r2, #10
    b8c6:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b8c8:	f00c f834 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b8cc:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    b8ce:	f24e 7020 	movw	r0, #59168	; 0xe720
    b8d2:	f2c0 0001 	movt	r0, #1
    b8d6:	f64e 123c 	movw	r2, #59708	; 0xe93c
    b8da:	f2c0 0201 	movt	r2, #1
    b8de:	2121      	movs	r1, #33	; 0x21
    b8e0:	f00c f812 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b8e4:	defe      	udf	#254	; 0xfe
    b8e6:	f24e 7060 	movw	r0, #59232	; 0xe760
    b8ea:	f2c0 0001 	movt	r0, #1
    b8ee:	f64e 124c 	movw	r2, #59724	; 0xe94c
    b8f2:	f2c0 0201 	movt	r2, #1
    b8f6:	211c      	movs	r1, #28
    b8f8:	f00c f806 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b8fc:	defe      	udf	#254	; 0xfe
    b8fe:	f64e 105c 	movw	r0, #59740	; 0xe95c
    b902:	f2c0 0001 	movt	r0, #1
    b906:	223f      	movs	r2, #63	; 0x3f
    b908:	9902      	ldr	r1, [sp, #8]
    b90a:	f00c f813 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b90e:	defe      	udf	#254	; 0xfe
        data.touches[i].area =
    b910:	f64e 106c 	movw	r0, #59756	; 0xe96c
    b914:	f2c0 0001 	movt	r0, #1
    b918:	220a      	movs	r2, #10
    b91a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b91c:	f00c f80a 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b920:	defe      	udf	#254	; 0xfe
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b922:	f64e 107c 	movw	r0, #59772	; 0xe97c
    b926:	f2c0 0001 	movt	r0, #1
    b92a:	220a      	movs	r2, #10
    b92c:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b92e:	f00c f801 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b932:	defe      	udf	#254	; 0xfe
    b934:	f64e 108c 	movw	r0, #59788	; 0xe98c
    b938:	f2c0 0001 	movt	r0, #1
    b93c:	220a      	movs	r2, #10
    b93e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b940:	f00b fff8 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b944:	defe      	udf	#254	; 0xfe

0000b946 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E>:

/// Event that will be forwarded to the Event Queue when a touch interrupt is triggered
static mut TOUCH_EVENT: os_event = fill_zero!(os_event);  //  Init all fields to 0 or NULL

/// Read a range of I2C registers from the I2C address `addr` (7-bit address), starting at `start_register` for count `num_registers`. Save into `buffer`.
fn read_register_range(addr: u8, start_register: u8, num_registers: u8, buffer: &mut[u8]) -> MynewtResult<()> {
    b946:	b5b0      	push	{r4, r5, r7, lr}
    b948:	b094      	sub	sp, #80	; 0x50
    b94a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
    b94e:	4696      	mov	lr, r2
    b950:	460c      	mov	r4, r1
    b952:	4605      	mov	r5, r0
    b954:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    b958:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
    b95c:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
    b960:	9310      	str	r3, [sp, #64]	; 0x40
    b962:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    b966:	4618      	mov	r0, r3
    b968:	4661      	mov	r1, ip
    b96a:	930d      	str	r3, [sp, #52]	; 0x34
    b96c:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    b970:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    b974:	940a      	str	r4, [sp, #40]	; 0x28
    b976:	9509      	str	r5, [sp, #36]	; 0x24
    b978:	f006 fa87 	bl	11e8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    b97c:	9008      	str	r0, [sp, #32]
    b97e:	e7ff      	b.n	b980 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x3a>
    b980:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b982:	b2c1      	uxtb	r1, r0
    b984:	9a08      	ldr	r2, [sp, #32]
    b986:	428a      	cmp	r2, r1
    b988:	d30d      	bcc.n	b9a6 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x60>
    b98a:	e7ff      	b.n	b98c <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x46>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b98c:	980a      	ldr	r0, [sp, #40]	; 0x28
    b98e:	b2c1      	uxtb	r1, r0
    b990:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b992:	fa51 f182 	uxtab	r1, r1, r2
    b996:	b2cb      	uxtb	r3, r1
    b998:	468c      	mov	ip, r1
    b99a:	428b      	cmp	r3, r1
    b99c:	f8cd c01c 	str.w	ip, [sp, #28]
    b9a0:	f040 8092 	bne.w	bac8 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x182>
    b9a4:	e00b      	b.n	b9be <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x78>
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    b9a6:	f64e 109c 	movw	r0, #59804	; 0xe99c
    b9aa:	f2c0 0001 	movt	r0, #1
    b9ae:	f64e 12a4 	movw	r2, #59812	; 0xe9a4
    b9b2:	f2c0 0201 	movt	r2, #1
    b9b6:	2107      	movs	r1, #7
    b9b8:	f00b ffa6 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b9bc:	defe      	udf	#254	; 0xfe
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b9be:	9807      	ldr	r0, [sp, #28]
    b9c0:	b241      	sxtb	r1, r0
    b9c2:	2900      	cmp	r1, #0
    b9c4:	d411      	bmi.n	b9ea <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xa4>
    b9c6:	e7ff      	b.n	b9c8 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x82>
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Write Mode (1 bit, value 0)...
    //    Followed by starting Register Number (8 bits)
    unsafe { 
        I2C_BUFFER[0] = start_register;  //  I2C Packet buffer contains starting Register Number (1 byte)
    b9c8:	f240 2014 	movw	r0, #532	; 0x214
    b9cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b9d0:	990a      	ldr	r1, [sp, #40]	; 0x28
    b9d2:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;         //  I2C Packet address (7 bits)
    b9d4:	f240 220c 	movw	r2, #524	; 0x20c
    b9d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b9dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b9de:	7013      	strb	r3, [r2, #0]
    b9e0:	2101      	movs	r1, #1
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    b9e2:	f006 fa52 	bl	11e8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    b9e6:	9006      	str	r0, [sp, #24]
    b9e8:	e00b      	b.n	ba02 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xbc>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b9ea:	f24e 60a0 	movw	r0, #59040	; 0xe6a0
    b9ee:	f2c0 0001 	movt	r0, #1
    b9f2:	f64e 12c4 	movw	r2, #59844	; 0xe9c4
    b9f6:	f2c0 0201 	movt	r2, #1
    b9fa:	2108      	movs	r1, #8
    b9fc:	f00b ff84 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ba00:	defe      	udf	#254	; 0xfe
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    ba02:	f240 200c 	movw	r0, #524	; 0x20c
    ba06:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba0a:	9906      	ldr	r1, [sp, #24]
    ba0c:	8041      	strh	r1, [r0, #2]
        I2C_DATA.buffer = I2C_BUFFER.as_mut_ptr();  //  I2C Packet data points to packet buffer
    ba0e:	f240 2014 	movw	r0, #532	; 0x214
    ba12:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba16:	2101      	movs	r1, #1
    ba18:	f006 fa20 	bl	11e5c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    ba1c:	9005      	str	r0, [sp, #20]
    ba1e:	e7ff      	b.n	ba20 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xda>
    ba20:	f240 200c 	movw	r0, #524	; 0x20c
    ba24:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba28:	9905      	ldr	r1, [sp, #20]
    ba2a:	6041      	str	r1, [r0, #4]
    ba2c:	2201      	movs	r2, #1
    ba2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    ba32:	f04f 0c00 	mov.w	ip, #0
    };
    let _rc1 = unsafe { hal::hal_i2c_master_write(1, &mut I2C_DATA, 1000, 0) };  //  No stop yet, must continue even if we hit an error
    ba36:	9004      	str	r0, [sp, #16]
    ba38:	4610      	mov	r0, r2
    ba3a:	9904      	ldr	r1, [sp, #16]
    ba3c:	461a      	mov	r2, r3
    ba3e:	4663      	mov	r3, ip
    ba40:	f00e fa50 	bl	19ee4 <hal_i2c_master_write>
    ba44:	9012      	str	r0, [sp, #72]	; 0x48
    ba46:	e7ff      	b.n	ba48 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x102>
    //  Step 3: Prepare to receive the stream of I2C Device Register values...
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Read Mode (1 bit, value 1)
    unsafe { 
        I2C_BUFFER[0] = 0x00;     //  I2C Packet buffer should be empty (provided by caller)
    ba48:	f240 2014 	movw	r0, #532	; 0x214
    ba4c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba50:	2100      	movs	r1, #0
    ba52:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;  //  I2C Packet address (7 bits)
    ba54:	f240 200c 	movw	r0, #524	; 0x20c
    ba58:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba5c:	9909      	ldr	r1, [sp, #36]	; 0x24
    ba5e:	7001      	strb	r1, [r0, #0]
        I2C_DATA.len = num_registers as u16;    //  I2C Packet data size is number of Registers to read
    ba60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ba62:	b2d3      	uxtb	r3, r2
    ba64:	8043      	strh	r3, [r0, #2]
        I2C_DATA.buffer = buffer.as_mut_ptr();  //  I2C Packet data points to packet buffer
    ba66:	980d      	ldr	r0, [sp, #52]	; 0x34
    ba68:	990c      	ldr	r1, [sp, #48]	; 0x30
    ba6a:	f006 f9f7 	bl	11e5c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    ba6e:	9003      	str	r0, [sp, #12]
    ba70:	e7ff      	b.n	ba72 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x12c>
    ba72:	f240 200c 	movw	r0, #524	; 0x20c
    ba76:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba7a:	9903      	ldr	r1, [sp, #12]
    ba7c:	6041      	str	r1, [r0, #4]
    ba7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ba82:	2301      	movs	r3, #1
    };
    //  Step 4: Receive the requested number of Register values from I2C Device (1 byte per register)
    //  Step 5: Send the Stop Condition (Low to High SDA Transition)
    let rc2 = unsafe { hal::hal_i2c_master_read(1, &mut I2C_DATA, 1000, 1) };
    ba84:	9002      	str	r0, [sp, #8]
    ba86:	4618      	mov	r0, r3
    ba88:	9902      	ldr	r1, [sp, #8]
    ba8a:	f00e fabf 	bl	1a00c <hal_i2c_master_read>
    ba8e:	4601      	mov	r1, r0
    ba90:	9013      	str	r0, [sp, #76]	; 0x4c
    ba92:	9101      	str	r1, [sp, #4]
    ba94:	e7ff      	b.n	ba96 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x150>
    if rc2 == hal::HAL_I2C_ERR_ADDR_NACK as i32 {
    ba96:	9801      	ldr	r0, [sp, #4]
    ba98:	2804      	cmp	r0, #4
    ba9a:	d005      	beq.n	baa8 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x162>
    ba9c:	e7ff      	b.n	ba9e <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x158>
    ba9e:	2000      	movs	r0, #0
        ////assert!(false, "i2c fail");  //  I2C read failed
        console::print("i2c fail\n"); ////
        return Ok(());               //  TODO: Return an error
    }
    Ok(())
    baa0:	900e      	str	r0, [sp, #56]	; 0x38
    baa2:	2001      	movs	r0, #1
    baa4:	900e      	str	r0, [sp, #56]	; 0x38
}
    baa6:	e00c      	b.n	bac2 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x17c>
        console::print("i2c fail\n"); ////
    baa8:	f64e 10d4 	movw	r0, #59860	; 0xe9d4
    baac:	f2c0 0001 	movt	r0, #1
    bab0:	2109      	movs	r1, #9
    bab2:	f7fd fa9d 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    bab6:	e7ff      	b.n	bab8 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x172>
    bab8:	2000      	movs	r0, #0
        return Ok(());               //  TODO: Return an error
    baba:	900e      	str	r0, [sp, #56]	; 0x38
    babc:	2001      	movs	r0, #1
    babe:	900e      	str	r0, [sp, #56]	; 0x38
    bac0:	e7ff      	b.n	bac2 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x17c>
}
    bac2:	980e      	ldr	r0, [sp, #56]	; 0x38
    bac4:	b014      	add	sp, #80	; 0x50
    bac6:	bdb0      	pop	{r4, r5, r7, pc}
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    bac8:	f24e 7060 	movw	r0, #59232	; 0xe760
    bacc:	f2c0 0001 	movt	r0, #1
    bad0:	f64e 12b4 	movw	r2, #59828	; 0xe9b4
    bad4:	f2c0 0201 	movt	r2, #1
    bad8:	211c      	movs	r1, #28
    bada:	f00b ff15 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bade:	defe      	udf	#254	; 0xfe

0000bae0 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E>:

/// Size of the stack (in 4-byte units). Previously `OS_STACK_ALIGN(256)`  
const CHIP8_TASK_STACK_SIZE: usize = 4096;  //  Must be 4096 and above because CHIP8 Emulator requires substantial stack space

/// Render some graphics and text to the PineTime display. `start_display()` must have been called earlier.
pub fn on_start() -> MynewtResult<()> {
    bae0:	b510      	push	{r4, lr}
    bae2:	b0aa      	sub	sp, #168	; 0xa8
    console::print("Rust CHIP8\n"); console::flush();
    bae4:	f64e 10dd 	movw	r0, #59869	; 0xe9dd
    bae8:	f2c0 0001 	movt	r0, #1
    baec:	210b      	movs	r1, #11
    baee:	f7fd fa7f 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    baf2:	e7ff      	b.n	baf4 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x14>
    baf4:	f7fd fac2 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    baf8:	e7ff      	b.n	bafa <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x1a>
    bafa:	2000      	movs	r0, #0
    
    //  Create black background
    let background = Rectangle::<Rgb565>
        ::new( Coord::new( 0, 0 ), Coord::new( 239, 239 ) )   //  Rectangle coordinates
    bafc:	900d      	str	r0, [sp, #52]	; 0x34
    bafe:	990d      	ldr	r1, [sp, #52]	; 0x34
    bb00:	f005 feea 	bl	118d8 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    bb04:	900c      	str	r0, [sp, #48]	; 0x30
    bb06:	910b      	str	r1, [sp, #44]	; 0x2c
    bb08:	e7ff      	b.n	bb0a <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x2a>
    bb0a:	20ef      	movs	r0, #239	; 0xef
    bb0c:	900a      	str	r0, [sp, #40]	; 0x28
    bb0e:	990a      	ldr	r1, [sp, #40]	; 0x28
    bb10:	f005 fee2 	bl	118d8 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    bb14:	9009      	str	r0, [sp, #36]	; 0x24
    bb16:	9108      	str	r1, [sp, #32]
    bb18:	e7ff      	b.n	bb1a <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x3a>
    let background = Rectangle::<Rgb565>
    bb1a:	4668      	mov	r0, sp
    bb1c:	9908      	ldr	r1, [sp, #32]
    bb1e:	6001      	str	r1, [r0, #0]
    bb20:	a816      	add	r0, sp, #88	; 0x58
    bb22:	990c      	ldr	r1, [sp, #48]	; 0x30
    bb24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    bb26:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bb28:	f00a fede 	bl	168e8 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    bb2c:	e7ff      	b.n	bb2e <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x4e>
    bb2e:	2000      	movs	r0, #0
        .fill( Some( Rgb565::from(( 0x00, 0x00, 0x00 )) ) );  //  Black
    bb30:	f88d 0078 	strb.w	r0, [sp, #120]	; 0x78
    bb34:	f88d 0079 	strb.w	r0, [sp, #121]	; 0x79
    bb38:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
    bb3c:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
    bb40:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
    bb44:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    bb48:	f005 ff41 	bl	119ce <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    bb4c:	9007      	str	r0, [sp, #28]
    bb4e:	e7ff      	b.n	bb50 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x70>
    bb50:	9807      	ldr	r0, [sp, #28]
    bb52:	f8ad 0076 	strh.w	r0, [sp, #118]	; 0x76
    bb56:	2101      	movs	r1, #1
    bb58:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
    let background = Rectangle::<Rgb565>
    bb5c:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    bb60:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
    bb64:	a80f      	add	r0, sp, #60	; 0x3c
    bb66:	a916      	add	r1, sp, #88	; 0x58
    bb68:	f00a fb54 	bl	16214 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    bb6c:	e7ff      	b.n	bb6e <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x8e>
    bb6e:	a80f      	add	r0, sp, #60	; 0x3c
    bb70:	a91f      	add	r1, sp, #124	; 0x7c

    //  Render background to display
    druid::draw_to_display(background);
    bb72:	460a      	mov	r2, r1
    bb74:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
    bb78:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
    bb7c:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
    bb80:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    bb84:	4608      	mov	r0, r1
    bb86:	f009 fcff 	bl	15588 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>
    bb8a:	e7ff      	b.n	bb8c <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xac>

    //  Start the emulator in a background task
    os::task_init(                  //  Create a new task and start it...
        unsafe { &mut CHIP8_TASK }, //  Task object will be saved here
        &init_strn!( "chip8" ),     //  Name of task
    bb8c:	f64e 10fc 	movw	r0, #59900	; 0xe9fc
    bb90:	f2c0 0001 	movt	r0, #1
    bb94:	6801      	ldr	r1, [r0, #0]
        Some( task_func ),    //  Function to execute when task starts
    bb96:	f64b 4017 	movw	r0, #48151	; 0xbc17
    bb9a:	f2c0 0000 	movt	r0, #0
    bb9e:	9027      	str	r0, [sp, #156]	; 0x9c
    os::task_init(                  //  Create a new task and start it...
    bba0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    bba2:	4668      	mov	r0, sp
    bba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    bba8:	6103      	str	r3, [r0, #16]
    bbaa:	60c3      	str	r3, [r0, #12]
    bbac:	f240 2368 	movw	r3, #616	; 0x268
    bbb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbb4:	6083      	str	r3, [r0, #8]
    bbb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bbba:	6043      	str	r3, [r0, #4]
    bbbc:	2314      	movs	r3, #20
    bbbe:	6003      	str	r3, [r0, #0]
    bbc0:	f240 2018 	movw	r0, #536	; 0x218
    bbc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bbc8:	2300      	movs	r3, #0
    bbca:	f7fd f861 	bl	8c90 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
    bbce:	9006      	str	r0, [sp, #24]
    bbd0:	e7ff      	b.n	bbd2 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xf2>
    bbd2:	9806      	ldr	r0, [sp, #24]
    bbd4:	f7fc ffd0 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    bbd8:	9026      	str	r0, [sp, #152]	; 0x98
    bbda:	e7ff      	b.n	bbdc <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xfc>
        NULL,  //  Argument to be passed to above function
        20,    //  Task priority: highest is 0, lowest is 255 (main task is 127), SPI is 10
        os::OS_WAIT_FOREVER as u32,       //  Don't do sanity / watchdog checking
        unsafe { &mut CHIP8_TASK_STACK }, //  Stack space for the task
        CHIP8_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                                 //  `?` means check for error
    bbdc:	9826      	ldr	r0, [sp, #152]	; 0x98
    bbde:	1e41      	subs	r1, r0, #1
    bbe0:	bf18      	it	ne
    bbe2:	2101      	movne	r1, #1
    bbe4:	2801      	cmp	r0, #1
    bbe6:	d001      	beq.n	bbec <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x10c>
    bbe8:	e7ff      	b.n	bbea <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x10a>
    bbea:	e005      	b.n	bbf8 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x118>
    bbec:	2000      	movs	r0, #0

    //  Return success to the caller
    Ok(())
    bbee:	900e      	str	r0, [sp, #56]	; 0x38
    bbf0:	2001      	movs	r0, #1
    bbf2:	900e      	str	r0, [sp, #56]	; 0x38
}
    bbf4:	e006      	b.n	bc04 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x124>
    os::task_init(                  //  Create a new task and start it...
    bbf6:	defe      	udf	#254	; 0xfe
    ) ? ;                                 //  `?` means check for error
    bbf8:	9826      	ldr	r0, [sp, #152]	; 0x98
    bbfa:	9029      	str	r0, [sp, #164]	; 0xa4
    bbfc:	f006 fdd0 	bl	127a0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    bc00:	9005      	str	r0, [sp, #20]
    bc02:	e002      	b.n	bc0a <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x12a>
}
    bc04:	980e      	ldr	r0, [sp, #56]	; 0x38
    bc06:	b02a      	add	sp, #168	; 0xa8
    bc08:	bd10      	pop	{r4, pc}
    ) ? ;                                 //  `?` means check for error
    bc0a:	9805      	ldr	r0, [sp, #20]
    bc0c:	f7fc ffa8 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    bc10:	900e      	str	r0, [sp, #56]	; 0x38
    bc12:	e7ff      	b.n	bc14 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x134>
    bc14:	e7f6      	b.n	bc04 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x124>

0000bc16 <_ZN3app5chip89task_func17h385831a0096277b5E>:

///  Run the emulator
extern "C" fn task_func(_arg: Ptr) {    
    bc16:	b580      	push	{r7, lr}
    bc18:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
    bc1c:	b084      	sub	sp, #16
    bc1e:	f10d 0e04 	add.w	lr, sp, #4
    bc22:	f50e 5103 	add.w	r1, lr, #8384	; 0x20c0
    bc26:	f10d 0e0c 	add.w	lr, sp, #12
    bc2a:	f50e 5283 	add.w	r2, lr, #4192	; 0x1060
    bc2e:	6008      	str	r0, [r1, #0]
    //  Create the hardware API for rendering the emulator
    let hardware = Hardware::new();
    bc30:	9104      	str	r1, [sp, #16]
    bc32:	9203      	str	r2, [sp, #12]
    bc34:	f000 fb2f 	bl	c296 <_ZN3app5chip88Hardware3new17h6939808171a9a2a1E>
    bc38:	9904      	ldr	r1, [sp, #16]
    bc3a:	6048      	str	r0, [r1, #4]
    bc3c:	6848      	ldr	r0, [r1, #4]
    bc3e:	9005      	str	r0, [sp, #20]
    bc40:	e7ff      	b.n	bc42 <_ZN3app5chip89task_func17h385831a0096277b5E+0x2c>

    //  Create the emulator
    let chip8 = libchip8::Chip8::new(hardware);
    bc42:	9805      	ldr	r0, [sp, #20]
    bc44:	9903      	ldr	r1, [sp, #12]
    bc46:	6008      	str	r0, [r1, #0]
    bc48:	6809      	ldr	r1, [r1, #0]
    bc4a:	a806      	add	r0, sp, #24
    bc4c:	f001 fa1a 	bl	d084 <_ZN8libchip814Chip8$LT$T$GT$3new17h746d7acd3c3a5f1eE>
    bc50:	e7ff      	b.n	bc52 <_ZN3app5chip89task_func17h385831a0096277b5E+0x3c>
    console::print("CHIP8 started\n"); console::flush();
    bc52:	f64e 2000 	movw	r0, #59904	; 0xea00
    bc56:	f2c0 0001 	movt	r0, #1
    bc5a:	210e      	movs	r1, #14
    bc5c:	f7fd f9c8 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    bc60:	e7ff      	b.n	bc62 <_ZN3app5chip89task_func17h385831a0096277b5E+0x4c>
    bc62:	f7fd fa0b 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    bc66:	e7ff      	b.n	bc68 <_ZN3app5chip89task_func17h385831a0096277b5E+0x52>

    //  Load the emulator ROM
    //  let rom = include_bytes!("../roms/invaders.ch8");
    let rom = include_bytes!("../roms/pong.ch8");
    bc68:	f64e 200e 	movw	r0, #59918	; 0xea0e
    bc6c:	f2c0 0001 	movt	r0, #1
    bc70:	9904      	ldr	r1, [sp, #16]
    bc72:	6088      	str	r0, [r1, #8]
    bc74:	f10d 0e10 	add.w	lr, sp, #16
    bc78:	f50e 5283 	add.w	r2, lr, #4192	; 0x1060
    bc7c:	a906      	add	r1, sp, #24
    bc7e:	f241 0350 	movw	r3, #4176	; 0x1050

    //  Run the emulator ROM. This will block until emulator terminates
    chip8.run(rom);
    bc82:	9002      	str	r0, [sp, #8]
    bc84:	4610      	mov	r0, r2
    bc86:	9201      	str	r2, [sp, #4]
    bc88:	461a      	mov	r2, r3
    bc8a:	f012 fa11 	bl	1e0b0 <__aeabi_memcpy>
    bc8e:	22f6      	movs	r2, #246	; 0xf6
    bc90:	9801      	ldr	r0, [sp, #4]
    bc92:	9902      	ldr	r1, [sp, #8]
    bc94:	f001 fa96 	bl	d1c4 <_ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E>
    bc98:	e7ff      	b.n	bc9a <_ZN3app5chip89task_func17h385831a0096277b5E+0x84>

    //  Should not come here
    console::print("CHIP8 done\n"); console::flush();
    bc9a:	f64e 3004 	movw	r0, #60164	; 0xeb04
    bc9e:	f2c0 0001 	movt	r0, #1
    bca2:	210b      	movs	r1, #11
    bca4:	f7fd f9a4 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    bca8:	e7ff      	b.n	bcaa <_ZN3app5chip89task_func17h385831a0096277b5E+0x94>
    bcaa:	f7fd f9e7 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    bcae:	e7ff      	b.n	bcb0 <_ZN3app5chip89task_func17h385831a0096277b5E+0x9a>
    assert!(false, "CHIP8 should not end");
    bcb0:	f64e 300f 	movw	r0, #60175	; 0xeb0f
    bcb4:	f2c0 0001 	movt	r0, #1
    bcb8:	f64e 3238 	movw	r2, #60216	; 0xeb38
    bcbc:	f2c0 0201 	movt	r2, #1
    bcc0:	2114      	movs	r1, #20
    bcc2:	f00b fe21 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bcc6:	defe      	udf	#254	; 0xfe

0000bcc8 <_ZN3app5chip813PixelIterator3new17h8011ce45451de010E>:
    block_bottom:    u8,
}

impl PixelIterator {
    /// Return a new PixelInterator for the block dimensions
    pub fn new(
    bcc8:	b570      	push	{r4, r5, r6, lr}
    bcca:	b081      	sub	sp, #4
    bccc:	f8dd c014 	ldr.w	ip, [sp, #20]
    bcd0:	469e      	mov	lr, r3
    bcd2:	4614      	mov	r4, r2
    bcd4:	460d      	mov	r5, r1
    bcd6:	f88d 1000 	strb.w	r1, [sp]
    bcda:	f88d 2001 	strb.w	r2, [sp, #1]
    bcde:	f88d 3002 	strb.w	r3, [sp, #2]
    bce2:	f88d c003 	strb.w	ip, [sp, #3]
        //  End column number for block
        block_right:     u8,
        //  End row number for block
        block_bottom:    u8,        
    ) -> PixelIterator {
        PixelIterator {
    bce6:	7001      	strb	r1, [r0, #0]
    bce8:	7042      	strb	r2, [r0, #1]
    bcea:	2600      	movs	r6, #0
    bcec:	7086      	strb	r6, [r0, #2]
    bcee:	70c6      	strb	r6, [r0, #3]
    bcf0:	7101      	strb	r1, [r0, #4]
    bcf2:	7143      	strb	r3, [r0, #5]
    bcf4:	7182      	strb	r2, [r0, #6]
    bcf6:	f880 c007 	strb.w	ip, [r0, #7]
            x_offset: 0, 
            y_offset: 0,
            block_left, block_right,
            block_top, block_bottom,
        }
    }
    bcfa:	b001      	add	sp, #4
    bcfc:	bd70      	pop	{r4, r5, r6, pc}

0000bcfe <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E>:
    pub fn contains(&self, x: u8, y: u8) -> bool {
        x >= self.block_left && x <= self.block_right &&
            y >= self.block_top && y <= self.block_bottom
    }
    /// Return window of Physical Pixels: (left, top, right, bottom)
    pub fn get_window(&self) -> (u8, u8, u8, u8) {
    bcfe:	b580      	push	{r7, lr}
    bd00:	b092      	sub	sp, #72	; 0x48
    bd02:	9010      	str	r0, [sp, #64]	; 0x40
        let left: u8 = self.block_left as u8 * PIXEL_WIDTH as u8;
    bd04:	7901      	ldrb	r1, [r0, #4]
    bd06:	2203      	movs	r2, #3
    bd08:	fba1 1202 	umull	r1, r2, r1, r2
    bd0c:	0a0b      	lsrs	r3, r1, #8
    bd0e:	f04f 0c00 	mov.w	ip, #0
    bd12:	ebbc 2f11 	cmp.w	ip, r1, lsr #8
    bd16:	bf18      	it	ne
    bd18:	2301      	movne	r3, #1
    bd1a:	2a00      	cmp	r2, #0
    bd1c:	bf18      	it	ne
    bd1e:	2201      	movne	r2, #1
    bd20:	ea42 0203 	orr.w	r2, r2, r3
    bd24:	2a00      	cmp	r2, #0
    bd26:	900d      	str	r0, [sp, #52]	; 0x34
    bd28:	910c      	str	r1, [sp, #48]	; 0x30
    bd2a:	f040 810a 	bne.w	bf42 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x244>
    bd2e:	e7ff      	b.n	bd30 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x32>
    bd30:	980c      	ldr	r0, [sp, #48]	; 0x30
    bd32:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
        let top: u8 = self.block_top as u8 * PIXEL_HEIGHT as u8; 
    bd36:	990d      	ldr	r1, [sp, #52]	; 0x34
    bd38:	798a      	ldrb	r2, [r1, #6]
    bd3a:	2305      	movs	r3, #5
    bd3c:	fba2 2303 	umull	r2, r3, r2, r3
    bd40:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    bd44:	f04f 0e00 	mov.w	lr, #0
    bd48:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
    bd4c:	bf18      	it	ne
    bd4e:	f04f 0c01 	movne.w	ip, #1
    bd52:	2b00      	cmp	r3, #0
    bd54:	bf18      	it	ne
    bd56:	2301      	movne	r3, #1
    bd58:	ea43 030c 	orr.w	r3, r3, ip
    bd5c:	2b00      	cmp	r3, #0
    bd5e:	920b      	str	r2, [sp, #44]	; 0x2c
    bd60:	f040 80fb 	bne.w	bf5a <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x25c>
    bd64:	e7ff      	b.n	bd66 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x68>
    bd66:	980b      	ldr	r0, [sp, #44]	; 0x2c
    bd68:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
        let right: u8 = left + (self.block_right - self.block_left + 1) * PIXEL_WIDTH as u8 - 1;
    bd6c:	990d      	ldr	r1, [sp, #52]	; 0x34
    bd6e:	790a      	ldrb	r2, [r1, #4]
    bd70:	794b      	ldrb	r3, [r1, #5]
    bd72:	1a9a      	subs	r2, r3, r2
    bd74:	b2d3      	uxtb	r3, r2
    bd76:	4694      	mov	ip, r2
    bd78:	4293      	cmp	r3, r2
    bd7a:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    bd7e:	f040 80f8 	bne.w	bf72 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x274>
    bd82:	e7ff      	b.n	bd84 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x86>
    bd84:	2001      	movs	r0, #1
    bd86:	990a      	ldr	r1, [sp, #40]	; 0x28
    bd88:	fa50 f081 	uxtab	r0, r0, r1
    bd8c:	b2c2      	uxtb	r2, r0
    bd8e:	4603      	mov	r3, r0
    bd90:	4282      	cmp	r2, r0
    bd92:	9309      	str	r3, [sp, #36]	; 0x24
    bd94:	f040 80f9 	bne.w	bf8a <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x28c>
    bd98:	e7ff      	b.n	bd9a <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x9c>
    bd9a:	9809      	ldr	r0, [sp, #36]	; 0x24
    bd9c:	b2c1      	uxtb	r1, r0
    bd9e:	2203      	movs	r2, #3
    bda0:	fba1 1202 	umull	r1, r2, r1, r2
    bda4:	0a0b      	lsrs	r3, r1, #8
    bda6:	f04f 0c00 	mov.w	ip, #0
    bdaa:	ebbc 2f11 	cmp.w	ip, r1, lsr #8
    bdae:	bf18      	it	ne
    bdb0:	2301      	movne	r3, #1
    bdb2:	2a00      	cmp	r2, #0
    bdb4:	bf18      	it	ne
    bdb6:	2201      	movne	r2, #1
    bdb8:	ea42 0203 	orr.w	r2, r2, r3
    bdbc:	2a00      	cmp	r2, #0
    bdbe:	9108      	str	r1, [sp, #32]
    bdc0:	f040 80ef 	bne.w	bfa2 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x2a4>
    bdc4:	e7ff      	b.n	bdc6 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0xc8>
    bdc6:	980c      	ldr	r0, [sp, #48]	; 0x30
    bdc8:	b2c1      	uxtb	r1, r0
    bdca:	9a08      	ldr	r2, [sp, #32]
    bdcc:	fa51 f182 	uxtab	r1, r1, r2
    bdd0:	b2cb      	uxtb	r3, r1
    bdd2:	468c      	mov	ip, r1
    bdd4:	428b      	cmp	r3, r1
    bdd6:	f8cd c01c 	str.w	ip, [sp, #28]
    bdda:	f040 80ee 	bne.w	bfba <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x2bc>
    bdde:	e7ff      	b.n	bde0 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0xe2>
    bde0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bde4:	9907      	ldr	r1, [sp, #28]
    bde6:	fa50 f081 	uxtab	r0, r0, r1
    bdea:	b2c2      	uxtb	r2, r0
    bdec:	4603      	mov	r3, r0
    bdee:	4282      	cmp	r2, r0
    bdf0:	9306      	str	r3, [sp, #24]
    bdf2:	f040 80ee 	bne.w	bfd2 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x2d4>
    bdf6:	e7ff      	b.n	bdf8 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0xfa>
    bdf8:	9806      	ldr	r0, [sp, #24]
    bdfa:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
        let bottom: u8 = top + (self.block_bottom - self.block_top + 1) * PIXEL_HEIGHT as u8 - 1;
    bdfe:	990d      	ldr	r1, [sp, #52]	; 0x34
    be00:	798a      	ldrb	r2, [r1, #6]
    be02:	79cb      	ldrb	r3, [r1, #7]
    be04:	1a9a      	subs	r2, r3, r2
    be06:	b2d3      	uxtb	r3, r2
    be08:	4694      	mov	ip, r2
    be0a:	4293      	cmp	r3, r2
    be0c:	f8cd c014 	str.w	ip, [sp, #20]
    be10:	f040 80eb 	bne.w	bfea <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x2ec>
    be14:	e7ff      	b.n	be16 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x118>
    be16:	2001      	movs	r0, #1
    be18:	9905      	ldr	r1, [sp, #20]
    be1a:	fa50 f081 	uxtab	r0, r0, r1
    be1e:	b2c2      	uxtb	r2, r0
    be20:	4603      	mov	r3, r0
    be22:	4282      	cmp	r2, r0
    be24:	9304      	str	r3, [sp, #16]
    be26:	f040 80ec 	bne.w	c002 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x304>
    be2a:	e7ff      	b.n	be2c <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x12e>
    be2c:	9804      	ldr	r0, [sp, #16]
    be2e:	b2c1      	uxtb	r1, r0
    be30:	2205      	movs	r2, #5
    be32:	fba1 1202 	umull	r1, r2, r1, r2
    be36:	0a0b      	lsrs	r3, r1, #8
    be38:	f04f 0c00 	mov.w	ip, #0
    be3c:	ebbc 2f11 	cmp.w	ip, r1, lsr #8
    be40:	bf18      	it	ne
    be42:	2301      	movne	r3, #1
    be44:	2a00      	cmp	r2, #0
    be46:	bf18      	it	ne
    be48:	2201      	movne	r2, #1
    be4a:	ea42 0203 	orr.w	r2, r2, r3
    be4e:	2a00      	cmp	r2, #0
    be50:	9103      	str	r1, [sp, #12]
    be52:	f040 80e2 	bne.w	c01a <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x31c>
    be56:	e7ff      	b.n	be58 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x15a>
    be58:	980b      	ldr	r0, [sp, #44]	; 0x2c
    be5a:	b2c1      	uxtb	r1, r0
    be5c:	9a03      	ldr	r2, [sp, #12]
    be5e:	fa51 f182 	uxtab	r1, r1, r2
    be62:	b2cb      	uxtb	r3, r1
    be64:	468c      	mov	ip, r1
    be66:	428b      	cmp	r3, r1
    be68:	f8cd c008 	str.w	ip, [sp, #8]
    be6c:	f040 80e1 	bne.w	c032 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x334>
    be70:	e7ff      	b.n	be72 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x174>
    be72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    be76:	9902      	ldr	r1, [sp, #8]
    be78:	fa50 f081 	uxtab	r0, r0, r1
    be7c:	b2c2      	uxtb	r2, r0
    be7e:	4603      	mov	r3, r0
    be80:	4282      	cmp	r2, r0
    be82:	9301      	str	r3, [sp, #4]
    be84:	f040 80e1 	bne.w	c04a <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x34c>
    be88:	e7ff      	b.n	be8a <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x18c>
    be8a:	9801      	ldr	r0, [sp, #4]
    be8c:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
        assert!(left < 240 && top < 240 && right < 240 && bottom < 240, "overflow");
    be90:	990c      	ldr	r1, [sp, #48]	; 0x30
    be92:	b2ca      	uxtb	r2, r1
    be94:	2af0      	cmp	r2, #240	; 0xf0
    be96:	d32e      	bcc.n	bef6 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1f8>
    be98:	e029      	b.n	beee <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1f0>
    be9a:	2001      	movs	r0, #1
    be9c:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    bea0:	e008      	b.n	beb4 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1b6>
    bea2:	2000      	movs	r0, #0
    bea4:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    bea8:	e004      	b.n	beb4 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1b6>
    beaa:	9801      	ldr	r0, [sp, #4]
    beac:	b2c1      	uxtb	r1, r0
    beae:	29f0      	cmp	r1, #240	; 0xf0
    beb0:	d3f3      	bcc.n	be9a <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x19c>
    beb2:	e7f6      	b.n	bea2 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1a4>
    beb4:	f89d 003d 	ldrb.w	r0, [sp, #61]	; 0x3d
    beb8:	07c0      	lsls	r0, r0, #31
    beba:	2800      	cmp	r0, #0
    bebc:	d035      	beq.n	bf2a <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x22c>
    bebe:	e025      	b.n	bf0c <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x20e>
    bec0:	2001      	movs	r0, #1
    bec2:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
    bec6:	e008      	b.n	beda <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1dc>
    bec8:	2000      	movs	r0, #0
    beca:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
    bece:	e004      	b.n	beda <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1dc>
    bed0:	9806      	ldr	r0, [sp, #24]
    bed2:	b2c1      	uxtb	r1, r0
    bed4:	29f0      	cmp	r1, #240	; 0xf0
    bed6:	d3f3      	bcc.n	bec0 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1c2>
    bed8:	e7f6      	b.n	bec8 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1ca>
    beda:	f89d 003e 	ldrb.w	r0, [sp, #62]	; 0x3e
    bede:	07c0      	lsls	r0, r0, #31
    bee0:	2800      	cmp	r0, #0
    bee2:	d1e2      	bne.n	beaa <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1ac>
    bee4:	e7dd      	b.n	bea2 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1a4>
    bee6:	2001      	movs	r0, #1
    bee8:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
    beec:	e008      	b.n	bf00 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x202>
    beee:	2000      	movs	r0, #0
    bef0:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
    bef4:	e004      	b.n	bf00 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x202>
    bef6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    bef8:	b2c1      	uxtb	r1, r0
    befa:	29f0      	cmp	r1, #240	; 0xf0
    befc:	d3f3      	bcc.n	bee6 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1e8>
    befe:	e7f6      	b.n	beee <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1f0>
    bf00:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
    bf04:	07c0      	lsls	r0, r0, #31
    bf06:	2800      	cmp	r0, #0
    bf08:	d1e2      	bne.n	bed0 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1d2>
    bf0a:	e7dd      	b.n	bec8 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1ca>
        ( left, top, right, bottom )
    bf0c:	980c      	ldr	r0, [sp, #48]	; 0x30
    bf0e:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    bf12:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bf14:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
    bf18:	9a06      	ldr	r2, [sp, #24]
    bf1a:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
    bf1e:	9b01      	ldr	r3, [sp, #4]
    bf20:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
    }
    bf24:	980e      	ldr	r0, [sp, #56]	; 0x38
    bf26:	b012      	add	sp, #72	; 0x48
    bf28:	bd80      	pop	{r7, pc}
        assert!(left < 240 && top < 240 && right < 240 && bottom < 240, "overflow");
    bf2a:	f64e 404c 	movw	r0, #60492	; 0xec4c
    bf2e:	f2c0 0001 	movt	r0, #1
    bf32:	f64e 426c 	movw	r2, #60524	; 0xec6c
    bf36:	f2c0 0201 	movt	r2, #1
    bf3a:	2108      	movs	r1, #8
    bf3c:	f00b fce4 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bf40:	defe      	udf	#254	; 0xfe
        let left: u8 = self.block_left as u8 * PIXEL_WIDTH as u8;
    bf42:	f64e 3060 	movw	r0, #60256	; 0xeb60
    bf46:	f2c0 0001 	movt	r0, #1
    bf4a:	f64e 3248 	movw	r2, #60232	; 0xeb48
    bf4e:	f2c0 0201 	movt	r2, #1
    bf52:	2121      	movs	r1, #33	; 0x21
    bf54:	f00b fcd8 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bf58:	defe      	udf	#254	; 0xfe
        let top: u8 = self.block_top as u8 * PIXEL_HEIGHT as u8; 
    bf5a:	f64e 3060 	movw	r0, #60256	; 0xeb60
    bf5e:	f2c0 0001 	movt	r0, #1
    bf62:	f64e 3284 	movw	r2, #60292	; 0xeb84
    bf66:	f2c0 0201 	movt	r2, #1
    bf6a:	2121      	movs	r1, #33	; 0x21
    bf6c:	f00b fccc 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bf70:	defe      	udf	#254	; 0xfe
        let right: u8 = left + (self.block_right - self.block_left + 1) * PIXEL_WIDTH as u8 - 1;
    bf72:	f64e 30b0 	movw	r0, #60336	; 0xebb0
    bf76:	f2c0 0001 	movt	r0, #1
    bf7a:	f64e 3294 	movw	r2, #60308	; 0xeb94
    bf7e:	f2c0 0201 	movt	r2, #1
    bf82:	2121      	movs	r1, #33	; 0x21
    bf84:	f00b fcc0 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bf88:	defe      	udf	#254	; 0xfe
    bf8a:	f64e 30f0 	movw	r0, #60400	; 0xebf0
    bf8e:	f2c0 0001 	movt	r0, #1
    bf92:	f64e 32d4 	movw	r2, #60372	; 0xebd4
    bf96:	f2c0 0201 	movt	r2, #1
    bf9a:	211c      	movs	r1, #28
    bf9c:	f00b fcb4 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bfa0:	defe      	udf	#254	; 0xfe
    bfa2:	f64e 3060 	movw	r0, #60256	; 0xeb60
    bfa6:	f2c0 0001 	movt	r0, #1
    bfaa:	f64e 32d4 	movw	r2, #60372	; 0xebd4
    bfae:	f2c0 0201 	movt	r2, #1
    bfb2:	2121      	movs	r1, #33	; 0x21
    bfb4:	f00b fca8 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bfb8:	defe      	udf	#254	; 0xfe
    bfba:	f64e 30f0 	movw	r0, #60400	; 0xebf0
    bfbe:	f2c0 0001 	movt	r0, #1
    bfc2:	f64e 420c 	movw	r2, #60428	; 0xec0c
    bfc6:	f2c0 0201 	movt	r2, #1
    bfca:	211c      	movs	r1, #28
    bfcc:	f00b fc9c 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bfd0:	defe      	udf	#254	; 0xfe
    bfd2:	f64e 30b0 	movw	r0, #60336	; 0xebb0
    bfd6:	f2c0 0001 	movt	r0, #1
    bfda:	f64e 420c 	movw	r2, #60428	; 0xec0c
    bfde:	f2c0 0201 	movt	r2, #1
    bfe2:	2121      	movs	r1, #33	; 0x21
    bfe4:	f00b fc90 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bfe8:	defe      	udf	#254	; 0xfe
        let bottom: u8 = top + (self.block_bottom - self.block_top + 1) * PIXEL_HEIGHT as u8 - 1;
    bfea:	f64e 30b0 	movw	r0, #60336	; 0xebb0
    bfee:	f2c0 0001 	movt	r0, #1
    bff2:	f64e 421c 	movw	r2, #60444	; 0xec1c
    bff6:	f2c0 0201 	movt	r2, #1
    bffa:	2121      	movs	r1, #33	; 0x21
    bffc:	f00b fc84 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c000:	defe      	udf	#254	; 0xfe
    c002:	f64e 30f0 	movw	r0, #60400	; 0xebf0
    c006:	f2c0 0001 	movt	r0, #1
    c00a:	f64e 422c 	movw	r2, #60460	; 0xec2c
    c00e:	f2c0 0201 	movt	r2, #1
    c012:	211c      	movs	r1, #28
    c014:	f00b fc78 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c018:	defe      	udf	#254	; 0xfe
    c01a:	f64e 3060 	movw	r0, #60256	; 0xeb60
    c01e:	f2c0 0001 	movt	r0, #1
    c022:	f64e 422c 	movw	r2, #60460	; 0xec2c
    c026:	f2c0 0201 	movt	r2, #1
    c02a:	2121      	movs	r1, #33	; 0x21
    c02c:	f00b fc6c 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c030:	defe      	udf	#254	; 0xfe
    c032:	f64e 30f0 	movw	r0, #60400	; 0xebf0
    c036:	f2c0 0001 	movt	r0, #1
    c03a:	f64e 423c 	movw	r2, #60476	; 0xec3c
    c03e:	f2c0 0201 	movt	r2, #1
    c042:	211c      	movs	r1, #28
    c044:	f00b fc60 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c048:	defe      	udf	#254	; 0xfe
    c04a:	f64e 30b0 	movw	r0, #60336	; 0xebb0
    c04e:	f2c0 0001 	movt	r0, #1
    c052:	f64e 423c 	movw	r2, #60476	; 0xec3c
    c056:	f2c0 0201 	movt	r2, #1
    c05a:	2121      	movs	r1, #33	; 0x21
    c05c:	f00b fc54 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c060:	defe      	udf	#254	; 0xfe

0000c062 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E>:
impl Iterator for PixelIterator {
    /// This Iterator returns Physical Pixel colour words (16-bit)
    type Item = u16;

    /// Return the next Physical Pixel colour
    fn next(&mut self) -> Option<Self::Item> {
    c062:	b08c      	sub	sp, #48	; 0x30
    c064:	900a      	str	r0, [sp, #40]	; 0x28
        if self.y > self.block_bottom { return None; }  //  No more Physical Pixels
    c066:	7841      	ldrb	r1, [r0, #1]
    c068:	79c2      	ldrb	r2, [r0, #7]
    c06a:	4291      	cmp	r1, r2
    c06c:	9007      	str	r0, [sp, #28]
    c06e:	d805      	bhi.n	c07c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x1a>
    c070:	e7ff      	b.n	c072 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x10>

        if self.x >= SCREEN_WIDTH as u8 ||
    c072:	9807      	ldr	r0, [sp, #28]
    c074:	7801      	ldrb	r1, [r0, #0]
    c076:	293f      	cmp	r1, #63	; 0x3f
    c078:	d80a      	bhi.n	c090 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x2e>
    c07a:	e011      	b.n	c0a0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x3e>
    c07c:	2000      	movs	r0, #0
        if self.y > self.block_bottom { return None; }  //  No more Physical Pixels
    c07e:	f8ad 0020 	strh.w	r0, [sp, #32]
    c082:	e7ff      	b.n	c084 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x22>
                }
            }
        }
        //  Return the Physical Pixel color
        return Some(color);
    }
    c084:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    c088:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
    c08c:	b00c      	add	sp, #48	; 0x30
    c08e:	4770      	bx	lr
    c090:	2001      	movs	r0, #1
        if self.x >= SCREEN_WIDTH as u8 ||
    c092:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    c096:	e008      	b.n	c0aa <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x48>
    c098:	2000      	movs	r0, #0
    c09a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    c09e:	e004      	b.n	c0aa <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x48>
            self.y >= SCREEN_HEIGHT as u8 { cortex_m::asm::bkpt(); }
    c0a0:	9807      	ldr	r0, [sp, #28]
    c0a2:	7841      	ldrb	r1, [r0, #1]
        if self.x >= SCREEN_WIDTH as u8 ||
    c0a4:	291f      	cmp	r1, #31
    c0a6:	d8f3      	bhi.n	c090 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x2e>
    c0a8:	e7f6      	b.n	c098 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x36>
    c0aa:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
    c0ae:	07c0      	lsls	r0, r0, #31
    c0b0:	2800      	cmp	r0, #0
    c0b2:	d003      	beq.n	c0bc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x5a>
    c0b4:	e7ff      	b.n	c0b6 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x54>
    c0b6:	be00      	bkpt	0x0000
            self.y >= SCREEN_HEIGHT as u8 { cortex_m::asm::bkpt(); }
    c0b8:	e7ff      	b.n	c0ba <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x58>
        if self.x >= SCREEN_WIDTH as u8 ||
    c0ba:	e7ff      	b.n	c0bc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x5a>
        assert!(self.x < SCREEN_WIDTH as u8, "x overflow");
    c0bc:	9807      	ldr	r0, [sp, #28]
    c0be:	7801      	ldrb	r1, [r0, #0]
    c0c0:	293f      	cmp	r1, #63	; 0x3f
    c0c2:	d805      	bhi.n	c0d0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x6e>
    c0c4:	e7ff      	b.n	c0c6 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x64>
        assert!(self.y < SCREEN_HEIGHT as u8, "y overflow");
    c0c6:	9807      	ldr	r0, [sp, #28]
    c0c8:	7841      	ldrb	r1, [r0, #1]
    c0ca:	291f      	cmp	r1, #31
    c0cc:	d816      	bhi.n	c0fc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x9a>
    c0ce:	e00b      	b.n	c0e8 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x86>
        assert!(self.x < SCREEN_WIDTH as u8, "x overflow");
    c0d0:	f64e 407c 	movw	r0, #60540	; 0xec7c
    c0d4:	f2c0 0001 	movt	r0, #1
    c0d8:	f64e 4288 	movw	r2, #60552	; 0xec88
    c0dc:	f2c0 0201 	movt	r2, #1
    c0e0:	210a      	movs	r1, #10
    c0e2:	f00b fc11 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c0e6:	defe      	udf	#254	; 0xfe
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
    c0e8:	9807      	ldr	r0, [sp, #28]
    c0ea:	7801      	ldrb	r1, [r0, #0]
    c0ec:	7842      	ldrb	r2, [r0, #1]
    c0ee:	0192      	lsls	r2, r2, #6
    c0f0:	2300      	movs	r3, #0
    c0f2:	2b00      	cmp	r3, #0
    c0f4:	9106      	str	r1, [sp, #24]
    c0f6:	9205      	str	r2, [sp, #20]
    c0f8:	d17b      	bne.n	c1f2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x190>
    c0fa:	e00b      	b.n	c114 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0xb2>
        assert!(self.y < SCREEN_HEIGHT as u8, "y overflow");
    c0fc:	f64e 4098 	movw	r0, #60568	; 0xec98
    c100:	f2c0 0001 	movt	r0, #1
    c104:	f64e 42a4 	movw	r2, #60580	; 0xeca4
    c108:	f2c0 0201 	movt	r2, #1
    c10c:	210a      	movs	r1, #10
    c10e:	f00b fbfb 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c112:	defe      	udf	#254	; 0xfe
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
    c114:	9806      	ldr	r0, [sp, #24]
    c116:	9905      	ldr	r1, [sp, #20]
    c118:	1842      	adds	r2, r0, r1
    c11a:	4613      	mov	r3, r2
    c11c:	4282      	cmp	r2, r0
    c11e:	9304      	str	r3, [sp, #16]
    c120:	d373      	bcc.n	c20a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x1a8>
    c122:	e7ff      	b.n	c124 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0xc2>
    c124:	9804      	ldr	r0, [sp, #16]
    c126:	900b      	str	r0, [sp, #44]	; 0x2c
    c128:	2100      	movs	r1, #0
            if SCREEN_BUFFER[i] != 0 { 0xffff } else { 0x0 }
    c12a:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    c12e:	d178      	bne.n	c222 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x1c0>
    c130:	e7ff      	b.n	c132 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0xd0>
    c132:	f244 2068 	movw	r0, #17000	; 0x4268
    c136:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c13a:	9904      	ldr	r1, [sp, #16]
    c13c:	5c40      	ldrb	r0, [r0, r1]
    c13e:	2800      	cmp	r0, #0
    c140:	d104      	bne.n	c14c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0xea>
    c142:	e7ff      	b.n	c144 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0xe2>
    c144:	2000      	movs	r0, #0
    c146:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
    c14a:	e004      	b.n	c156 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0xf4>
    c14c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    c150:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
    c154:	e7ff      	b.n	c156 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0xf4>
        self.x_offset += 1;
    c156:	9807      	ldr	r0, [sp, #28]
    c158:	7881      	ldrb	r1, [r0, #2]
    c15a:	3101      	adds	r1, #1
    c15c:	b2ca      	uxtb	r2, r1
    c15e:	460b      	mov	r3, r1
    c160:	428a      	cmp	r2, r1
    c162:	9303      	str	r3, [sp, #12]
    c164:	d167      	bne.n	c236 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x1d4>
    c166:	e7ff      	b.n	c168 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x106>
    c168:	9803      	ldr	r0, [sp, #12]
    c16a:	9907      	ldr	r1, [sp, #28]
    c16c:	7088      	strb	r0, [r1, #2]
        if self.x_offset >= PIXEL_WIDTH as u8 {
    c16e:	788a      	ldrb	r2, [r1, #2]
    c170:	2a03      	cmp	r2, #3
    c172:	d336      	bcc.n	c1e2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x180>
    c174:	e7ff      	b.n	c176 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x114>
    c176:	2000      	movs	r0, #0
            self.x_offset = 0;
    c178:	9907      	ldr	r1, [sp, #28]
    c17a:	7088      	strb	r0, [r1, #2]
            self.x += 1;
    c17c:	7808      	ldrb	r0, [r1, #0]
    c17e:	3001      	adds	r0, #1
    c180:	b2c2      	uxtb	r2, r0
    c182:	4603      	mov	r3, r0
    c184:	4282      	cmp	r2, r0
    c186:	9302      	str	r3, [sp, #8]
    c188:	d161      	bne.n	c24e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x1ec>
    c18a:	e7ff      	b.n	c18c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x12a>
    c18c:	9802      	ldr	r0, [sp, #8]
    c18e:	9907      	ldr	r1, [sp, #28]
    c190:	7008      	strb	r0, [r1, #0]
            if self.x > self.block_right {
    c192:	780a      	ldrb	r2, [r1, #0]
    c194:	794b      	ldrb	r3, [r1, #5]
    c196:	429a      	cmp	r2, r3
    c198:	d922      	bls.n	c1e0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x17e>
    c19a:	e7ff      	b.n	c19c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x13a>
                self.x = self.block_left;
    c19c:	9807      	ldr	r0, [sp, #28]
    c19e:	7901      	ldrb	r1, [r0, #4]
    c1a0:	7001      	strb	r1, [r0, #0]
                self.y_offset += 1;
    c1a2:	78c1      	ldrb	r1, [r0, #3]
    c1a4:	3101      	adds	r1, #1
    c1a6:	b2ca      	uxtb	r2, r1
    c1a8:	460b      	mov	r3, r1
    c1aa:	428a      	cmp	r2, r1
    c1ac:	9301      	str	r3, [sp, #4]
    c1ae:	d15a      	bne.n	c266 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x204>
    c1b0:	e7ff      	b.n	c1b2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x150>
    c1b2:	9801      	ldr	r0, [sp, #4]
    c1b4:	9907      	ldr	r1, [sp, #28]
    c1b6:	70c8      	strb	r0, [r1, #3]
                if self.y_offset >= PIXEL_HEIGHT as u8 {
    c1b8:	78ca      	ldrb	r2, [r1, #3]
    c1ba:	2a05      	cmp	r2, #5
    c1bc:	d30f      	bcc.n	c1de <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x17c>
    c1be:	e7ff      	b.n	c1c0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x15e>
    c1c0:	2000      	movs	r0, #0
                    self.y_offset = 0;
    c1c2:	9907      	ldr	r1, [sp, #28]
    c1c4:	70c8      	strb	r0, [r1, #3]
                    self.y += 1;
    c1c6:	7848      	ldrb	r0, [r1, #1]
    c1c8:	3001      	adds	r0, #1
    c1ca:	b2c2      	uxtb	r2, r0
    c1cc:	4603      	mov	r3, r0
    c1ce:	4282      	cmp	r2, r0
    c1d0:	9300      	str	r3, [sp, #0]
    c1d2:	d154      	bne.n	c27e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x21c>
    c1d4:	e7ff      	b.n	c1d6 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x174>
    c1d6:	9800      	ldr	r0, [sp, #0]
    c1d8:	9907      	ldr	r1, [sp, #28]
    c1da:	7048      	strb	r0, [r1, #1]
                if self.y_offset >= PIXEL_HEIGHT as u8 {
    c1dc:	e7ff      	b.n	c1de <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x17c>
            if self.x > self.block_right {
    c1de:	e7ff      	b.n	c1e0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x17e>
        if self.x_offset >= PIXEL_WIDTH as u8 {
    c1e0:	e7ff      	b.n	c1e2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x180>
        return Some(color);
    c1e2:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
    c1e6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
    c1ea:	2001      	movs	r0, #1
    c1ec:	f8ad 0020 	strh.w	r0, [sp, #32]
    c1f0:	e748      	b.n	c084 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x22>
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
    c1f2:	f64e 3060 	movw	r0, #60256	; 0xeb60
    c1f6:	f2c0 0001 	movt	r0, #1
    c1fa:	f64e 42b4 	movw	r2, #60596	; 0xecb4
    c1fe:	f2c0 0201 	movt	r2, #1
    c202:	2121      	movs	r1, #33	; 0x21
    c204:	f00b fb80 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c208:	defe      	udf	#254	; 0xfe
    c20a:	f64e 30f0 	movw	r0, #60400	; 0xebf0
    c20e:	f2c0 0001 	movt	r0, #1
    c212:	f64e 42c4 	movw	r2, #60612	; 0xecc4
    c216:	f2c0 0201 	movt	r2, #1
    c21a:	211c      	movs	r1, #28
    c21c:	f00b fb74 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c220:	defe      	udf	#254	; 0xfe
            if SCREEN_BUFFER[i] != 0 { 0xffff } else { 0x0 }
    c222:	f64e 40d4 	movw	r0, #60628	; 0xecd4
    c226:	f2c0 0001 	movt	r0, #1
    c22a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    c22e:	9904      	ldr	r1, [sp, #16]
    c230:	f00b fb80 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    c234:	defe      	udf	#254	; 0xfe
        self.x_offset += 1;
    c236:	f64e 30f0 	movw	r0, #60400	; 0xebf0
    c23a:	f2c0 0001 	movt	r0, #1
    c23e:	f64e 42e4 	movw	r2, #60644	; 0xece4
    c242:	f2c0 0201 	movt	r2, #1
    c246:	211c      	movs	r1, #28
    c248:	f00b fb5e 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c24c:	defe      	udf	#254	; 0xfe
            self.x += 1;
    c24e:	f64e 30f0 	movw	r0, #60400	; 0xebf0
    c252:	f2c0 0001 	movt	r0, #1
    c256:	f64e 42f4 	movw	r2, #60660	; 0xecf4
    c25a:	f2c0 0201 	movt	r2, #1
    c25e:	211c      	movs	r1, #28
    c260:	f00b fb52 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c264:	defe      	udf	#254	; 0xfe
                self.y_offset += 1;
    c266:	f64e 30f0 	movw	r0, #60400	; 0xebf0
    c26a:	f2c0 0001 	movt	r0, #1
    c26e:	f64e 5204 	movw	r2, #60676	; 0xed04
    c272:	f2c0 0201 	movt	r2, #1
    c276:	211c      	movs	r1, #28
    c278:	f00b fb46 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c27c:	defe      	udf	#254	; 0xfe
                    self.y += 1;
    c27e:	f64e 30f0 	movw	r0, #60400	; 0xebf0
    c282:	f2c0 0001 	movt	r0, #1
    c286:	f64e 5214 	movw	r2, #60692	; 0xed14
    c28a:	f2c0 0201 	movt	r2, #1
    c28e:	211c      	movs	r1, #28
    c290:	f00b fb3a 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c294:	defe      	udf	#254	; 0xfe

0000c296 <_ZN3app5chip88Hardware3new17h6939808171a9a2a1E>:
    update_bottom: u8,
}

impl Hardware {
    /// Return a new Hardware API for rendering CHIP8 Emulator
    pub fn new() -> Hardware {
    c296:	b081      	sub	sp, #4
    c298:	2000      	movs	r0, #0
        Hardware {
    c29a:	f88d 0000 	strb.w	r0, [sp]
    c29e:	f88d 0001 	strb.w	r0, [sp, #1]
    c2a2:	f88d 0002 	strb.w	r0, [sp, #2]
    c2a6:	f88d 0003 	strb.w	r0, [sp, #3]
            update_left: 0,
            update_top: 0,
            update_right: 0,
            update_bottom: 0,
        }
    }
    c2aa:	9800      	ldr	r0, [sp, #0]
    c2ac:	b001      	add	sp, #4
    c2ae:	4770      	bx	lr

0000c2b0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h510c8ec9a996caccE>:
}

impl libchip8::Hardware for Hardware {
    fn rand(&mut self) -> u8 {
    c2b0:	b081      	sub	sp, #4
    c2b2:	9000      	str	r0, [sp, #0]
    c2b4:	207b      	movs	r0, #123	; 0x7b
        //  Return a random value.
        123  //  TODO
        //  self.rng.gen()
    }
    c2b6:	b001      	add	sp, #4
    c2b8:	4770      	bx	lr

0000c2ba <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h36d051b466cea4e4E>:

    fn key(&mut self, _key: u8) -> bool {
    c2ba:	b082      	sub	sp, #8
    c2bc:	460a      	mov	r2, r1
    c2be:	9000      	str	r0, [sp, #0]
    c2c0:	f88d 1007 	strb.w	r1, [sp, #7]
    c2c4:	2000      	movs	r0, #0
        match &self.win {
            Some(win) => win.is_key_down(k),
            None => false,
        }
        */
    }
    c2c6:	b002      	add	sp, #8
    c2c8:	4770      	bx	lr

0000c2ca <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE>:

    fn vram_set(&mut self, x: usize, y: usize, d: bool) {
    c2ca:	b08c      	sub	sp, #48	; 0x30
    c2cc:	469c      	mov	ip, r3
    c2ce:	9007      	str	r0, [sp, #28]
    c2d0:	9108      	str	r1, [sp, #32]
    c2d2:	9209      	str	r2, [sp, #36]	; 0x24
    c2d4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        //  Set the state of a pixel in the screen.
        //  true for white, and false for black.
        //  console::print("set "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    c2d8:	293f      	cmp	r1, #63	; 0x3f
    c2da:	9205      	str	r2, [sp, #20]
    c2dc:	9104      	str	r1, [sp, #16]
    c2de:	9003      	str	r0, [sp, #12]
    c2e0:	f8cd c008 	str.w	ip, [sp, #8]
    c2e4:	d804      	bhi.n	c2f0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x26>
    c2e6:	e7ff      	b.n	c2e8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x1e>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    c2e8:	9805      	ldr	r0, [sp, #20]
    c2ea:	281f      	cmp	r0, #31
    c2ec:	d814      	bhi.n	c318 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x4e>
    c2ee:	e00b      	b.n	c308 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x3e>
        assert!(x < SCREEN_WIDTH, "x overflow");
    c2f0:	f64e 407c 	movw	r0, #60540	; 0xec7c
    c2f4:	f2c0 0001 	movt	r0, #1
    c2f8:	f64e 5224 	movw	r2, #60708	; 0xed24
    c2fc:	f2c0 0201 	movt	r2, #1
    c300:	210a      	movs	r1, #10
    c302:	f00b fb01 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c306:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    c308:	9805      	ldr	r0, [sp, #20]
    c30a:	0181      	lsls	r1, r0, #6
    c30c:	0e82      	lsrs	r2, r0, #26
    c30e:	2a00      	cmp	r2, #0
    c310:	9101      	str	r1, [sp, #4]
    c312:	f040 80a8 	bne.w	c466 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x19c>
    c316:	e00b      	b.n	c330 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x66>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    c318:	f64e 4098 	movw	r0, #60568	; 0xec98
    c31c:	f2c0 0001 	movt	r0, #1
    c320:	f64e 5234 	movw	r2, #60724	; 0xed34
    c324:	f2c0 0201 	movt	r2, #1
    c328:	210a      	movs	r1, #10
    c32a:	f00b faed 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c32e:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    c330:	9804      	ldr	r0, [sp, #16]
    c332:	9901      	ldr	r1, [sp, #4]
    c334:	1842      	adds	r2, r0, r1
    c336:	4613      	mov	r3, r2
    c338:	4282      	cmp	r2, r0
    c33a:	9300      	str	r3, [sp, #0]
    c33c:	f0c0 809f 	bcc.w	c47e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x1b4>
    c340:	e7ff      	b.n	c342 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x78>
    c342:	9800      	ldr	r0, [sp, #0]
    c344:	900b      	str	r0, [sp, #44]	; 0x2c
        unsafe { SCREEN_BUFFER[i] = if d { 1 } else { 0 } };
    c346:	9902      	ldr	r1, [sp, #8]
    c348:	07ca      	lsls	r2, r1, #31
    c34a:	2a00      	cmp	r2, #0
    c34c:	d104      	bne.n	c358 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x8e>
    c34e:	e7ff      	b.n	c350 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x86>
    c350:	2000      	movs	r0, #0
    c352:	f88d 0018 	strb.w	r0, [sp, #24]
    c356:	e003      	b.n	c360 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x96>
    c358:	2001      	movs	r0, #1
    c35a:	f88d 0018 	strb.w	r0, [sp, #24]
    c35e:	e7ff      	b.n	c360 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x96>
    c360:	2000      	movs	r0, #0
    c362:	9900      	ldr	r1, [sp, #0]
    c364:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
    c368:	f040 8095 	bne.w	c496 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x1cc>
    c36c:	e7ff      	b.n	c36e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0xa4>
    c36e:	f244 2068 	movw	r0, #17000	; 0x4268
    c372:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c376:	f89d 1018 	ldrb.w	r1, [sp, #24]
    c37a:	9a00      	ldr	r2, [sp, #0]
    c37c:	5481      	strb	r1, [r0, r2]

        //  Remember the boundaries of the screen region to be updated
        if self.update_left == 0 && self.update_right == 0 &&
    c37e:	9803      	ldr	r0, [sp, #12]
    c380:	7801      	ldrb	r1, [r0, #0]
    c382:	2900      	cmp	r1, #0
    c384:	d02e      	beq.n	c3e4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x11a>
    c386:	e029      	b.n	c3dc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x112>
    c388:	2001      	movs	r0, #1
    c38a:	f88d 0019 	strb.w	r0, [sp, #25]
    c38e:	e008      	b.n	c3a2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0xd8>
    c390:	2000      	movs	r0, #0
    c392:	f88d 0019 	strb.w	r0, [sp, #25]
    c396:	e004      	b.n	c3a2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0xd8>
            self.update_top == 0 && self.update_bottom == 0 {
    c398:	9803      	ldr	r0, [sp, #12]
    c39a:	78c1      	ldrb	r1, [r0, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    c39c:	2900      	cmp	r1, #0
    c39e:	d0f3      	beq.n	c388 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0xbe>
    c3a0:	e7f6      	b.n	c390 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0xc6>
    c3a2:	f89d 0019 	ldrb.w	r0, [sp, #25]
    c3a6:	07c0      	lsls	r0, r0, #31
    c3a8:	2800      	cmp	r0, #0
    c3aa:	d126      	bne.n	c3fa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x130>
    c3ac:	e02d      	b.n	c40a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x140>
    c3ae:	2001      	movs	r0, #1
    c3b0:	f88d 001a 	strb.w	r0, [sp, #26]
    c3b4:	e008      	b.n	c3c8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0xfe>
    c3b6:	2000      	movs	r0, #0
    c3b8:	f88d 001a 	strb.w	r0, [sp, #26]
    c3bc:	e004      	b.n	c3c8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0xfe>
            self.update_top == 0 && self.update_bottom == 0 {
    c3be:	9803      	ldr	r0, [sp, #12]
    c3c0:	7841      	ldrb	r1, [r0, #1]
        if self.update_left == 0 && self.update_right == 0 &&
    c3c2:	2900      	cmp	r1, #0
    c3c4:	d0f3      	beq.n	c3ae <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0xe4>
    c3c6:	e7f6      	b.n	c3b6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0xec>
    c3c8:	f89d 001a 	ldrb.w	r0, [sp, #26]
    c3cc:	07c0      	lsls	r0, r0, #31
    c3ce:	2800      	cmp	r0, #0
    c3d0:	d1e2      	bne.n	c398 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0xce>
    c3d2:	e7dd      	b.n	c390 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0xc6>
    c3d4:	2001      	movs	r0, #1
    c3d6:	f88d 001b 	strb.w	r0, [sp, #27]
    c3da:	e008      	b.n	c3ee <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x124>
    c3dc:	2000      	movs	r0, #0
    c3de:	f88d 001b 	strb.w	r0, [sp, #27]
    c3e2:	e004      	b.n	c3ee <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x124>
    c3e4:	9803      	ldr	r0, [sp, #12]
    c3e6:	7881      	ldrb	r1, [r0, #2]
    c3e8:	2900      	cmp	r1, #0
    c3ea:	d0f3      	beq.n	c3d4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x10a>
    c3ec:	e7f6      	b.n	c3dc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x112>
    c3ee:	f89d 001b 	ldrb.w	r0, [sp, #27]
    c3f2:	07c0      	lsls	r0, r0, #31
    c3f4:	2800      	cmp	r0, #0
    c3f6:	d1e2      	bne.n	c3be <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0xf4>
    c3f8:	e7dd      	b.n	c3b6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0xec>
            self.update_left = x as u8;
    c3fa:	9804      	ldr	r0, [sp, #16]
    c3fc:	9903      	ldr	r1, [sp, #12]
    c3fe:	7008      	strb	r0, [r1, #0]
            self.update_right = x as u8;
    c400:	7088      	strb	r0, [r1, #2]
            self.update_top = y as u8;
    c402:	9a05      	ldr	r2, [sp, #20]
    c404:	704a      	strb	r2, [r1, #1]
            self.update_bottom = y as u8;
    c406:	70ca      	strb	r2, [r1, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    c408:	e7ff      	b.n	c40a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x140>
        }
        if (x as u8) < self.update_left { self.update_left = x as u8; }
    c40a:	9804      	ldr	r0, [sp, #16]
    c40c:	b2c1      	uxtb	r1, r0
    c40e:	9a03      	ldr	r2, [sp, #12]
    c410:	7813      	ldrb	r3, [r2, #0]
    c412:	4299      	cmp	r1, r3
    c414:	d204      	bcs.n	c420 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x156>
    c416:	e7ff      	b.n	c418 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x14e>
    c418:	9804      	ldr	r0, [sp, #16]
    c41a:	9903      	ldr	r1, [sp, #12]
    c41c:	7008      	strb	r0, [r1, #0]
    c41e:	e7ff      	b.n	c420 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x156>
        if (x as u8) > self.update_right { self.update_right = x as u8; }
    c420:	9804      	ldr	r0, [sp, #16]
    c422:	b2c1      	uxtb	r1, r0
    c424:	9a03      	ldr	r2, [sp, #12]
    c426:	7893      	ldrb	r3, [r2, #2]
    c428:	4299      	cmp	r1, r3
    c42a:	d904      	bls.n	c436 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x16c>
    c42c:	e7ff      	b.n	c42e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x164>
    c42e:	9804      	ldr	r0, [sp, #16]
    c430:	9903      	ldr	r1, [sp, #12]
    c432:	7088      	strb	r0, [r1, #2]
    c434:	e7ff      	b.n	c436 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x16c>
        if (y as u8) < self.update_top { self.update_top = y as u8; }
    c436:	9805      	ldr	r0, [sp, #20]
    c438:	b2c1      	uxtb	r1, r0
    c43a:	9a03      	ldr	r2, [sp, #12]
    c43c:	7853      	ldrb	r3, [r2, #1]
    c43e:	4299      	cmp	r1, r3
    c440:	d204      	bcs.n	c44c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x182>
    c442:	e7ff      	b.n	c444 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x17a>
    c444:	9805      	ldr	r0, [sp, #20]
    c446:	9903      	ldr	r1, [sp, #12]
    c448:	7048      	strb	r0, [r1, #1]
    c44a:	e7ff      	b.n	c44c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x182>
        if (y as u8) > self.update_bottom { self.update_bottom = y as u8; }
    c44c:	9805      	ldr	r0, [sp, #20]
    c44e:	b2c1      	uxtb	r1, r0
    c450:	9a03      	ldr	r2, [sp, #12]
    c452:	78d3      	ldrb	r3, [r2, #3]
    c454:	4299      	cmp	r1, r3
    c456:	d904      	bls.n	c462 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x198>
    c458:	e7ff      	b.n	c45a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x190>
    c45a:	9805      	ldr	r0, [sp, #20]
    c45c:	9903      	ldr	r1, [sp, #12]
    c45e:	70c8      	strb	r0, [r1, #3]
    c460:	e7ff      	b.n	c462 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE+0x198>
    }
    c462:	b00c      	add	sp, #48	; 0x30
    c464:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    c466:	f64e 3060 	movw	r0, #60256	; 0xeb60
    c46a:	f2c0 0001 	movt	r0, #1
    c46e:	f64e 5244 	movw	r2, #60740	; 0xed44
    c472:	f2c0 0201 	movt	r2, #1
    c476:	2121      	movs	r1, #33	; 0x21
    c478:	f00b fa46 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c47c:	defe      	udf	#254	; 0xfe
    c47e:	f64e 30f0 	movw	r0, #60400	; 0xebf0
    c482:	f2c0 0001 	movt	r0, #1
    c486:	f64e 5254 	movw	r2, #60756	; 0xed54
    c48a:	f2c0 0201 	movt	r2, #1
    c48e:	211c      	movs	r1, #28
    c490:	f00b fa3a 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c494:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] = if d { 1 } else { 0 } };
    c496:	f64e 5064 	movw	r0, #60772	; 0xed64
    c49a:	f2c0 0001 	movt	r0, #1
    c49e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    c4a2:	9900      	ldr	r1, [sp, #0]
    c4a4:	f00b fa46 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    c4a8:	defe      	udf	#254	; 0xfe

0000c4aa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17he272c4593d926434E>:

    fn vram_get(&mut self, x: usize, y: usize) -> bool {
    c4aa:	b088      	sub	sp, #32
    c4ac:	9004      	str	r0, [sp, #16]
    c4ae:	9105      	str	r1, [sp, #20]
    c4b0:	9206      	str	r2, [sp, #24]
        //  Get the current state of a pixel in the screen.
        //  console::print("get "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    c4b2:	293f      	cmp	r1, #63	; 0x3f
    c4b4:	9203      	str	r2, [sp, #12]
    c4b6:	9102      	str	r1, [sp, #8]
    c4b8:	d804      	bhi.n	c4c4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17he272c4593d926434E+0x1a>
    c4ba:	e7ff      	b.n	c4bc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17he272c4593d926434E+0x12>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    c4bc:	9803      	ldr	r0, [sp, #12]
    c4be:	281f      	cmp	r0, #31
    c4c0:	d813      	bhi.n	c4ea <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17he272c4593d926434E+0x40>
    c4c2:	e00b      	b.n	c4dc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17he272c4593d926434E+0x32>
        assert!(x < SCREEN_WIDTH, "x overflow");
    c4c4:	f64e 407c 	movw	r0, #60540	; 0xec7c
    c4c8:	f2c0 0001 	movt	r0, #1
    c4cc:	f64e 5274 	movw	r2, #60788	; 0xed74
    c4d0:	f2c0 0201 	movt	r2, #1
    c4d4:	210a      	movs	r1, #10
    c4d6:	f00b fa17 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c4da:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    c4dc:	9803      	ldr	r0, [sp, #12]
    c4de:	0181      	lsls	r1, r0, #6
    c4e0:	0e82      	lsrs	r2, r0, #26
    c4e2:	2a00      	cmp	r2, #0
    c4e4:	9101      	str	r1, [sp, #4]
    c4e6:	d126      	bne.n	c536 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17he272c4593d926434E+0x8c>
    c4e8:	e00b      	b.n	c502 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17he272c4593d926434E+0x58>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    c4ea:	f64e 4098 	movw	r0, #60568	; 0xec98
    c4ee:	f2c0 0001 	movt	r0, #1
    c4f2:	f64e 5284 	movw	r2, #60804	; 0xed84
    c4f6:	f2c0 0201 	movt	r2, #1
    c4fa:	210a      	movs	r1, #10
    c4fc:	f00b fa04 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c500:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    c502:	9802      	ldr	r0, [sp, #8]
    c504:	9901      	ldr	r1, [sp, #4]
    c506:	1842      	adds	r2, r0, r1
    c508:	4613      	mov	r3, r2
    c50a:	4282      	cmp	r2, r0
    c50c:	9300      	str	r3, [sp, #0]
    c50e:	d31e      	bcc.n	c54e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17he272c4593d926434E+0xa4>
    c510:	e7ff      	b.n	c512 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17he272c4593d926434E+0x68>
    c512:	9800      	ldr	r0, [sp, #0]
    c514:	9007      	str	r0, [sp, #28]
    c516:	2100      	movs	r1, #0
        unsafe { SCREEN_BUFFER[i] != 0 }
    c518:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    c51c:	d123      	bne.n	c566 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17he272c4593d926434E+0xbc>
    c51e:	e7ff      	b.n	c520 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17he272c4593d926434E+0x76>
    c520:	f244 2068 	movw	r0, #17000	; 0x4268
    c524:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c528:	9900      	ldr	r1, [sp, #0]
    c52a:	5c40      	ldrb	r0, [r0, r1]
    c52c:	2800      	cmp	r0, #0
    c52e:	bf18      	it	ne
    c530:	2001      	movne	r0, #1
    }
    c532:	b008      	add	sp, #32
    c534:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    c536:	f64e 3060 	movw	r0, #60256	; 0xeb60
    c53a:	f2c0 0001 	movt	r0, #1
    c53e:	f64e 5294 	movw	r2, #60820	; 0xed94
    c542:	f2c0 0201 	movt	r2, #1
    c546:	2121      	movs	r1, #33	; 0x21
    c548:	f00b f9de 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c54c:	defe      	udf	#254	; 0xfe
    c54e:	f64e 30f0 	movw	r0, #60400	; 0xebf0
    c552:	f2c0 0001 	movt	r0, #1
    c556:	f64e 52a4 	movw	r2, #60836	; 0xeda4
    c55a:	f2c0 0201 	movt	r2, #1
    c55e:	211c      	movs	r1, #28
    c560:	f00b f9d2 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c564:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] != 0 }
    c566:	f64e 50b4 	movw	r0, #60852	; 0xedb4
    c56a:	f2c0 0001 	movt	r0, #1
    c56e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    c572:	9900      	ldr	r1, [sp, #0]
    c574:	f00b f9de 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    c578:	defe      	udf	#254	; 0xfe

0000c57a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h96b89968e4265d2cE>:

    fn vram_setsize(&mut self, size: (usize, usize)) {
    c57a:	b580      	push	{r7, lr}
    c57c:	b086      	sub	sp, #24
    c57e:	9003      	str	r0, [sp, #12]
    c580:	9104      	str	r1, [sp, #16]
    c582:	9205      	str	r2, [sp, #20]
        //  Set the size of the screen.
        console::print("setsize "); console::printint(size.0 as i32); console::print(", "); console::printint(size.1 as i32); console::print("\n"); console::flush(); ////
    c584:	f64e 4054 	movw	r0, #60500	; 0xec54
    c588:	f2c0 0001 	movt	r0, #1
    c58c:	2308      	movs	r3, #8
    c58e:	9102      	str	r1, [sp, #8]
    c590:	4619      	mov	r1, r3
    c592:	9201      	str	r2, [sp, #4]
    c594:	f7fc fd2c 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c598:	e7ff      	b.n	c59a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h96b89968e4265d2cE+0x20>
    c59a:	9802      	ldr	r0, [sp, #8]
    c59c:	f7fc fd66 	bl	906c <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    c5a0:	e7ff      	b.n	c5a2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h96b89968e4265d2cE+0x28>
    c5a2:	f64e 50c4 	movw	r0, #60868	; 0xedc4
    c5a6:	f2c0 0001 	movt	r0, #1
    c5aa:	2102      	movs	r1, #2
    c5ac:	f7fc fd20 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c5b0:	e7ff      	b.n	c5b2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h96b89968e4265d2cE+0x38>
    c5b2:	9801      	ldr	r0, [sp, #4]
    c5b4:	f7fc fd5a 	bl	906c <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    c5b8:	e7ff      	b.n	c5ba <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h96b89968e4265d2cE+0x40>
    c5ba:	f64e 50c6 	movw	r0, #60870	; 0xedc6
    c5be:	f2c0 0001 	movt	r0, #1
    c5c2:	2101      	movs	r1, #1
    c5c4:	f7fc fd14 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c5c8:	e7ff      	b.n	c5ca <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h96b89968e4265d2cE+0x50>
    c5ca:	f7fc fd57 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    c5ce:	e7ff      	b.n	c5d0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h96b89968e4265d2cE+0x56>
    }
    c5d0:	b006      	add	sp, #24
    c5d2:	bd80      	pop	{r7, pc}

0000c5d4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17h93c2f95ba0774bb2E>:

    fn vram_size(&mut self) -> (usize, usize) {
    c5d4:	b083      	sub	sp, #12
    c5d6:	9002      	str	r0, [sp, #8]
    c5d8:	2040      	movs	r0, #64	; 0x40
        //  Get the size of the screen.
        (SCREEN_WIDTH, SCREEN_HEIGHT)
    c5da:	9000      	str	r0, [sp, #0]
    c5dc:	2020      	movs	r0, #32
    c5de:	9001      	str	r0, [sp, #4]
    }
    c5e0:	9800      	ldr	r0, [sp, #0]
    c5e2:	9901      	ldr	r1, [sp, #4]
    c5e4:	b003      	add	sp, #12
    c5e6:	4770      	bx	lr

0000c5e8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h656498c5392083edE>:

    fn clock(&mut self) -> u64 {
    c5e8:	b5b0      	push	{r4, r5, r7, lr}
    c5ea:	b086      	sub	sp, #24
    c5ec:	9005      	str	r0, [sp, #20]
        //  Return the current clock value in nanoseconds.
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    c5ee:	f00f faf1 	bl	1bbd4 <os_time_get>
    c5f2:	9004      	str	r0, [sp, #16]
    c5f4:	e7ff      	b.n	c5f6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h656498c5392083edE+0xe>
    c5f6:	2000      	movs	r0, #0
    c5f8:	9904      	ldr	r1, [sp, #16]
    c5fa:	fba0 2301 	umull	r2, r3, r0, r1
    c5fe:	2b00      	cmp	r3, #0
    c600:	bf18      	it	ne
    c602:	2301      	movne	r3, #1
    c604:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    c608:	fba0 e40c 	umull	lr, r4, r0, ip
    c60c:	2c00      	cmp	r4, #0
    c60e:	bf18      	it	ne
    c610:	2401      	movne	r4, #1
    c612:	ea43 0304 	orr.w	r3, r3, r4
    c616:	4472      	add	r2, lr
    c618:	fba1 ce0c 	umull	ip, lr, r1, ip
    c61c:	eb12 020e 	adds.w	r2, r2, lr
    c620:	f140 0000 	adc.w	r0, r0, #0
    c624:	ea40 0003 	orr.w	r0, r0, r3
    c628:	2800      	cmp	r0, #0
    c62a:	f8cd c00c 	str.w	ip, [sp, #12]
    c62e:	9202      	str	r2, [sp, #8]
    c630:	d124      	bne.n	c67c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h656498c5392083edE+0x94>
    c632:	e7ff      	b.n	c634 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h656498c5392083edE+0x4c>
    c634:	2000      	movs	r0, #0
    c636:	9903      	ldr	r1, [sp, #12]
    c638:	fba0 2301 	umull	r2, r3, r0, r1
    c63c:	2b00      	cmp	r3, #0
    c63e:	bf18      	it	ne
    c640:	2301      	movne	r3, #1
    c642:	f44f 6cfa 	mov.w	ip, #2000	; 0x7d0
    c646:	f8dd e008 	ldr.w	lr, [sp, #8]
    c64a:	fbae 450c 	umull	r4, r5, lr, ip
    c64e:	2d00      	cmp	r5, #0
    c650:	bf18      	it	ne
    c652:	2501      	movne	r5, #1
    c654:	ea43 0305 	orr.w	r3, r3, r5
    c658:	4422      	add	r2, r4
    c65a:	fba1 c40c 	umull	ip, r4, r1, ip
    c65e:	1912      	adds	r2, r2, r4
    c660:	f140 0000 	adc.w	r0, r0, #0
    c664:	ea40 0003 	orr.w	r0, r0, r3
    c668:	2800      	cmp	r0, #0
    c66a:	f8cd c004 	str.w	ip, [sp, #4]
    c66e:	9200      	str	r2, [sp, #0]
    c670:	d110      	bne.n	c694 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h656498c5392083edE+0xac>
    c672:	e7ff      	b.n	c674 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h656498c5392083edE+0x8c>
    }
    c674:	9801      	ldr	r0, [sp, #4]
    c676:	9900      	ldr	r1, [sp, #0]
    c678:	b006      	add	sp, #24
    c67a:	bdb0      	pop	{r4, r5, r7, pc}
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    c67c:	f64e 3060 	movw	r0, #60256	; 0xeb60
    c680:	f2c0 0001 	movt	r0, #1
    c684:	f64e 52c8 	movw	r2, #60872	; 0xedc8
    c688:	f2c0 0201 	movt	r2, #1
    c68c:	2121      	movs	r1, #33	; 0x21
    c68e:	f00b f93b 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c692:	defe      	udf	#254	; 0xfe
    c694:	f64e 3060 	movw	r0, #60256	; 0xeb60
    c698:	f2c0 0001 	movt	r0, #1
    c69c:	f64e 52c8 	movw	r2, #60872	; 0xedc8
    c6a0:	f2c0 0201 	movt	r2, #1
    c6a4:	2121      	movs	r1, #33	; 0x21
    c6a6:	f00b f92f 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c6aa:	defe      	udf	#254	; 0xfe

0000c6ac <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17hef68fad30077c365E>:

    fn beep(&mut self) {
    c6ac:	b081      	sub	sp, #4
    c6ae:	9000      	str	r0, [sp, #0]
        //  TODO: Play beep sound.
    }
    c6b0:	b001      	add	sp, #4
    c6b2:	4770      	bx	lr

0000c6b4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E>:

    fn sched(&mut self) -> bool {
    c6b4:	b580      	push	{r7, lr}
    c6b6:	b084      	sub	sp, #16
    c6b8:	9003      	str	r0, [sp, #12]
        //  Called in every step; return true for shutdown.
        //  console::print("sched\n"); console::flush(); ////

        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
    c6ba:	9001      	str	r0, [sp, #4]
    c6bc:	f00e f862 	bl	1a784 <hal_watchdog_tickle>
    c6c0:	e7ff      	b.n	c6c2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E+0xe>
    c6c2:	2001      	movs	r0, #1

        //  Sleep a while to allow other tasks to run, e.g. SPI background task
        unsafe { os::os_time_delay(1) };
    c6c4:	f00f faac 	bl	1bc20 <os_time_delay>
    c6c8:	e7ff      	b.n	c6ca <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E+0x16>

        //  If no screen update, return
        if self.update_left == 0 && self.update_right == 0 &&
    c6ca:	9801      	ldr	r0, [sp, #4]
    c6cc:	7801      	ldrb	r1, [r0, #0]
    c6ce:	2900      	cmp	r1, #0
    c6d0:	d02e      	beq.n	c730 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E+0x7c>
    c6d2:	e029      	b.n	c728 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E+0x74>
    c6d4:	2001      	movs	r0, #1
    c6d6:	f88d 0009 	strb.w	r0, [sp, #9]
    c6da:	e008      	b.n	c6ee <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E+0x3a>
    c6dc:	2000      	movs	r0, #0
    c6de:	f88d 0009 	strb.w	r0, [sp, #9]
    c6e2:	e004      	b.n	c6ee <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E+0x3a>
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    c6e4:	9801      	ldr	r0, [sp, #4]
    c6e6:	78c1      	ldrb	r1, [r0, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    c6e8:	2900      	cmp	r1, #0
    c6ea:	d0f3      	beq.n	c6d4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E+0x20>
    c6ec:	e7f6      	b.n	c6dc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E+0x28>
    c6ee:	f89d 0009 	ldrb.w	r0, [sp, #9]
    c6f2:	07c0      	lsls	r0, r0, #31
    c6f4:	2800      	cmp	r0, #0
    c6f6:	d131      	bne.n	c75c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E+0xa8>
    c6f8:	e025      	b.n	c746 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E+0x92>
    c6fa:	2001      	movs	r0, #1
    c6fc:	f88d 000a 	strb.w	r0, [sp, #10]
    c700:	e008      	b.n	c714 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E+0x60>
    c702:	2000      	movs	r0, #0
    c704:	f88d 000a 	strb.w	r0, [sp, #10]
    c708:	e004      	b.n	c714 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E+0x60>
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    c70a:	9801      	ldr	r0, [sp, #4]
    c70c:	7841      	ldrb	r1, [r0, #1]
        if self.update_left == 0 && self.update_right == 0 &&
    c70e:	2900      	cmp	r1, #0
    c710:	d0f3      	beq.n	c6fa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E+0x46>
    c712:	e7f6      	b.n	c702 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E+0x4e>
    c714:	f89d 000a 	ldrb.w	r0, [sp, #10]
    c718:	07c0      	lsls	r0, r0, #31
    c71a:	2800      	cmp	r0, #0
    c71c:	d1e2      	bne.n	c6e4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E+0x30>
    c71e:	e7dd      	b.n	c6dc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E+0x28>
    c720:	2001      	movs	r0, #1
    c722:	f88d 000b 	strb.w	r0, [sp, #11]
    c726:	e008      	b.n	c73a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E+0x86>
    c728:	2000      	movs	r0, #0
    c72a:	f88d 000b 	strb.w	r0, [sp, #11]
    c72e:	e004      	b.n	c73a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E+0x86>
    c730:	9801      	ldr	r0, [sp, #4]
    c732:	7881      	ldrb	r1, [r0, #2]
    c734:	2900      	cmp	r1, #0
    c736:	d0f3      	beq.n	c720 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E+0x6c>
    c738:	e7f6      	b.n	c728 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E+0x74>
    c73a:	f89d 000b 	ldrb.w	r0, [sp, #11]
    c73e:	07c0      	lsls	r0, r0, #31
    c740:	2800      	cmp	r0, #0
    c742:	d1e2      	bne.n	c70a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E+0x56>
    c744:	e7dd      	b.n	c702 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E+0x4e>

        //  Render the updated region
        render_region(
    c746:	9801      	ldr	r0, [sp, #4]
    c748:	7800      	ldrb	r0, [r0, #0]
    c74a:	9901      	ldr	r1, [sp, #4]
    c74c:	7849      	ldrb	r1, [r1, #1]
    c74e:	9a01      	ldr	r2, [sp, #4]
    c750:	7892      	ldrb	r2, [r2, #2]
    c752:	9b01      	ldr	r3, [sp, #4]
    c754:	78db      	ldrb	r3, [r3, #3]
    c756:	f000 f812 	bl	c77e <_ZN3app5chip813render_region17h63a2f42595e40485E>
    c75a:	e007      	b.n	c76c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E+0xb8>
    c75c:	2000      	movs	r0, #0
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    c75e:	f88d 0008 	strb.w	r0, [sp, #8]
    c762:	e7ff      	b.n	c764 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E+0xb0>
        self.update_right = 0;
        self.update_bottom = 0;

        //  Return false to indicate no shutdown
        false
    }
    c764:	f89d 0008 	ldrb.w	r0, [sp, #8]
    c768:	b004      	add	sp, #16
    c76a:	bd80      	pop	{r7, pc}
    c76c:	2000      	movs	r0, #0
        self.update_left = 0;
    c76e:	9901      	ldr	r1, [sp, #4]
    c770:	7008      	strb	r0, [r1, #0]
        self.update_top = 0;
    c772:	7048      	strb	r0, [r1, #1]
        self.update_right = 0;
    c774:	7088      	strb	r0, [r1, #2]
        self.update_bottom = 0;
    c776:	70c8      	strb	r0, [r1, #3]
        false
    c778:	f88d 0008 	strb.w	r0, [sp, #8]
    }
    c77c:	e7f2      	b.n	c764 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E+0xb0>

0000c77e <_ZN3app5chip813render_region17h63a2f42595e40485E>:
}

/// Render the Virtual Screen region
fn render_region(left: u8, top: u8, right: u8, bottom: u8) {
    c77e:	b5f0      	push	{r4, r5, r6, r7, lr}
    c780:	b095      	sub	sp, #84	; 0x54
    c782:	fa5f fc80 	uxtb.w	ip, r0
    c786:	fa5f fe82 	uxtb.w	lr, r2
    c78a:	461c      	mov	r4, r3
    c78c:	4615      	mov	r5, r2
    c78e:	460e      	mov	r6, r1
    c790:	4607      	mov	r7, r0
    c792:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    c796:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    c79a:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
    c79e:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    let width = right - left + 1;
    c7a2:	ebae 000c 	sub.w	r0, lr, ip
    c7a6:	b2c1      	uxtb	r1, r0
    c7a8:	4602      	mov	r2, r0
    c7aa:	4281      	cmp	r1, r0
    c7ac:	9411      	str	r4, [sp, #68]	; 0x44
    c7ae:	9510      	str	r5, [sp, #64]	; 0x40
    c7b0:	960f      	str	r6, [sp, #60]	; 0x3c
    c7b2:	970e      	str	r7, [sp, #56]	; 0x38
    c7b4:	920d      	str	r2, [sp, #52]	; 0x34
    c7b6:	f040 80df 	bne.w	c978 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1fa>
    c7ba:	e7ff      	b.n	c7bc <_ZN3app5chip813render_region17h63a2f42595e40485E+0x3e>
    c7bc:	2001      	movs	r0, #1
    c7be:	990d      	ldr	r1, [sp, #52]	; 0x34
    c7c0:	fa50 f081 	uxtab	r0, r0, r1
    c7c4:	b2c2      	uxtb	r2, r0
    c7c6:	4603      	mov	r3, r0
    c7c8:	4282      	cmp	r2, r0
    c7ca:	930c      	str	r3, [sp, #48]	; 0x30
    c7cc:	f040 80e0 	bne.w	c990 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x212>
    c7d0:	e7ff      	b.n	c7d2 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x54>
    c7d2:	980c      	ldr	r0, [sp, #48]	; 0x30
    c7d4:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    let height = bottom - top + 1;
    c7d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c7da:	b2ca      	uxtb	r2, r1
    c7dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c7de:	fa5f fc83 	uxtb.w	ip, r3
    c7e2:	ebac 0202 	sub.w	r2, ip, r2
    c7e6:	fa5f fc82 	uxtb.w	ip, r2
    c7ea:	4696      	mov	lr, r2
    c7ec:	4594      	cmp	ip, r2
    c7ee:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    c7f2:	f040 80d9 	bne.w	c9a8 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x22a>
    c7f6:	e7ff      	b.n	c7f8 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x7a>
    c7f8:	2001      	movs	r0, #1
    c7fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c7fc:	fa50 f081 	uxtab	r0, r0, r1
    c800:	b2c2      	uxtb	r2, r0
    c802:	4603      	mov	r3, r0
    c804:	4282      	cmp	r2, r0
    c806:	930a      	str	r3, [sp, #40]	; 0x28
    c808:	f040 80da 	bne.w	c9c0 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x242>
    c80c:	e7ff      	b.n	c80e <_ZN3app5chip813render_region17h63a2f42595e40485E+0x90>
    c80e:	980a      	ldr	r0, [sp, #40]	; 0x28
    c810:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
    //  If the update region is small, render with a single block
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    c814:	990c      	ldr	r1, [sp, #48]	; 0x30
    c816:	b2ca      	uxtb	r2, r1
    c818:	fa52 f280 	uxtab	r2, r2, r0
    c81c:	b2d3      	uxtb	r3, r2
    c81e:	4694      	mov	ip, r2
    c820:	4293      	cmp	r3, r2
    c822:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    c826:	f040 80d7 	bne.w	c9d8 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x25a>
    c82a:	e7ff      	b.n	c82c <_ZN3app5chip813render_region17h63a2f42595e40485E+0xae>
    c82c:	9809      	ldr	r0, [sp, #36]	; 0x24
    c82e:	b2c1      	uxtb	r1, r0
    c830:	2926      	cmp	r1, #38	; 0x26
    c832:	d307      	bcc.n	c844 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xc6>
    c834:	e7ff      	b.n	c836 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xb8>
        render_block(left, top, right, bottom);
    } else {
        //  If the update region is too big for a single block, break the region into blocks and render
        let mut x = left;
    c836:	980e      	ldr	r0, [sp, #56]	; 0x38
    c838:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
        let mut y = top;
    c83c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c83e:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
        loop {
    c842:	e007      	b.n	c854 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xd6>
        render_block(left, top, right, bottom);
    c844:	980e      	ldr	r0, [sp, #56]	; 0x38
    c846:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c848:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c84a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c84c:	f000 f918 	bl	ca80 <_ZN3app5chip812render_block17hf14dcded684223a2E>
    c850:	e7ff      	b.n	c852 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xd4>
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    c852:	e08f      	b.n	c974 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f6>
            let block_right = x + BLOCK_WIDTH as u8 - 1;
    c854:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    c858:	3020      	adds	r0, #32
    c85a:	b2c1      	uxtb	r1, r0
    c85c:	4602      	mov	r2, r0
    c85e:	4281      	cmp	r1, r0
    c860:	9208      	str	r2, [sp, #32]
    c862:	f040 80c5 	bne.w	c9f0 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x272>
    c866:	e7ff      	b.n	c868 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xea>
    c868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c86c:	9908      	ldr	r1, [sp, #32]
    c86e:	fa50 f081 	uxtab	r0, r0, r1
    c872:	b2c2      	uxtb	r2, r0
    c874:	4603      	mov	r3, r0
    c876:	4282      	cmp	r2, r0
    c878:	9307      	str	r3, [sp, #28]
    c87a:	f040 80c5 	bne.w	ca08 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x28a>
    c87e:	e7ff      	b.n	c880 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x102>
    c880:	9807      	ldr	r0, [sp, #28]
    c882:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
            let block_bottom = y + BLOCK_HEIGHT as u8 - 1;
    c886:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    c88a:	3105      	adds	r1, #5
    c88c:	b2ca      	uxtb	r2, r1
    c88e:	460b      	mov	r3, r1
    c890:	428a      	cmp	r2, r1
    c892:	9306      	str	r3, [sp, #24]
    c894:	f040 80c4 	bne.w	ca20 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x2a2>
    c898:	e7ff      	b.n	c89a <_ZN3app5chip813render_region17h63a2f42595e40485E+0x11c>
    c89a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c89e:	9906      	ldr	r1, [sp, #24]
    c8a0:	fa50 f081 	uxtab	r0, r0, r1
    c8a4:	b2c2      	uxtb	r2, r0
    c8a6:	4603      	mov	r3, r0
    c8a8:	4282      	cmp	r2, r0
    c8aa:	9305      	str	r3, [sp, #20]
    c8ac:	f040 80c4 	bne.w	ca38 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x2ba>
    c8b0:	e7ff      	b.n	c8b2 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x134>
    c8b2:	9805      	ldr	r0, [sp, #20]
    c8b4:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
            render_block(x, y,
    c8b8:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
    c8bc:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
                if block_right  <= right  { block_right }  else { right },
    c8c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c8c2:	fa5f fc83 	uxtb.w	ip, r3
    c8c6:	f8dd e01c 	ldr.w	lr, [sp, #28]
    c8ca:	fa5f f48e 	uxtb.w	r4, lr
    c8ce:	4564      	cmp	r4, ip
    c8d0:	9104      	str	r1, [sp, #16]
    c8d2:	9203      	str	r2, [sp, #12]
    c8d4:	d904      	bls.n	c8e0 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x162>
    c8d6:	e7ff      	b.n	c8d8 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x15a>
    c8d8:	9810      	ldr	r0, [sp, #64]	; 0x40
    c8da:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
    c8de:	e003      	b.n	c8e8 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x16a>
    c8e0:	9807      	ldr	r0, [sp, #28]
    c8e2:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
    c8e6:	e7ff      	b.n	c8e8 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x16a>
                if block_bottom <= bottom { block_bottom } else { bottom }
    c8e8:	9811      	ldr	r0, [sp, #68]	; 0x44
    c8ea:	b2c1      	uxtb	r1, r0
    c8ec:	9a05      	ldr	r2, [sp, #20]
    c8ee:	b2d3      	uxtb	r3, r2
    c8f0:	428b      	cmp	r3, r1
    c8f2:	d904      	bls.n	c8fe <_ZN3app5chip813render_region17h63a2f42595e40485E+0x180>
    c8f4:	e7ff      	b.n	c8f6 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x178>
    c8f6:	9811      	ldr	r0, [sp, #68]	; 0x44
    c8f8:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
    c8fc:	e003      	b.n	c906 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x188>
    c8fe:	9805      	ldr	r0, [sp, #20]
    c900:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
    c904:	e7ff      	b.n	c906 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x188>
            render_block(x, y,
    c906:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
    c90a:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    c90e:	9804      	ldr	r0, [sp, #16]
    c910:	9903      	ldr	r1, [sp, #12]
    c912:	f000 f8b5 	bl	ca80 <_ZN3app5chip812render_block17hf14dcded684223a2E>
    c916:	e7ff      	b.n	c918 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x19a>
            );  //  Will not overflow SPI buffer
            x += BLOCK_WIDTH as u8;
    c918:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    c91c:	3020      	adds	r0, #32
    c91e:	b2c1      	uxtb	r1, r0
    c920:	4602      	mov	r2, r0
    c922:	4281      	cmp	r1, r0
    c924:	9202      	str	r2, [sp, #8]
    c926:	f040 8093 	bne.w	ca50 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x2d2>
    c92a:	e7ff      	b.n	c92c <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1ae>
    c92c:	9802      	ldr	r0, [sp, #8]
    c92e:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
            if x > right {
    c932:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
    c936:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c938:	b2d3      	uxtb	r3, r2
    c93a:	4299      	cmp	r1, r3
    c93c:	d919      	bls.n	c972 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f4>
    c93e:	e7ff      	b.n	c940 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1c2>
                x = left;
    c940:	980e      	ldr	r0, [sp, #56]	; 0x38
    c942:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
                y += BLOCK_HEIGHT as u8;
    c946:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    c94a:	3105      	adds	r1, #5
    c94c:	b2ca      	uxtb	r2, r1
    c94e:	460b      	mov	r3, r1
    c950:	428a      	cmp	r2, r1
    c952:	9301      	str	r3, [sp, #4]
    c954:	f040 8088 	bne.w	ca68 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x2ea>
    c958:	e7ff      	b.n	c95a <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1dc>
    c95a:	9801      	ldr	r0, [sp, #4]
    c95c:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
                if y > bottom { break; }
    c960:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    c964:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c966:	b2d3      	uxtb	r3, r2
    c968:	4299      	cmp	r1, r3
    c96a:	d801      	bhi.n	c970 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f2>
    c96c:	e7ff      	b.n	c96e <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f0>
            if x > right {
    c96e:	e000      	b.n	c972 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f4>
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    c970:	e000      	b.n	c974 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f6>
        loop {
    c972:	e76f      	b.n	c854 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xd6>
            }
        }
    }
}
    c974:	b015      	add	sp, #84	; 0x54
    c976:	bdf0      	pop	{r4, r5, r6, r7, pc}
    let width = right - left + 1;
    c978:	f64e 30b0 	movw	r0, #60336	; 0xebb0
    c97c:	f2c0 0001 	movt	r0, #1
    c980:	f64e 52d8 	movw	r2, #60888	; 0xedd8
    c984:	f2c0 0201 	movt	r2, #1
    c988:	2121      	movs	r1, #33	; 0x21
    c98a:	f00a ffbd 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c98e:	defe      	udf	#254	; 0xfe
    c990:	f64e 30f0 	movw	r0, #60400	; 0xebf0
    c994:	f2c0 0001 	movt	r0, #1
    c998:	f64e 52d8 	movw	r2, #60888	; 0xedd8
    c99c:	f2c0 0201 	movt	r2, #1
    c9a0:	211c      	movs	r1, #28
    c9a2:	f00a ffb1 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c9a6:	defe      	udf	#254	; 0xfe
    let height = bottom - top + 1;
    c9a8:	f64e 30b0 	movw	r0, #60336	; 0xebb0
    c9ac:	f2c0 0001 	movt	r0, #1
    c9b0:	f64e 52e8 	movw	r2, #60904	; 0xede8
    c9b4:	f2c0 0201 	movt	r2, #1
    c9b8:	2121      	movs	r1, #33	; 0x21
    c9ba:	f00a ffa5 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c9be:	defe      	udf	#254	; 0xfe
    c9c0:	f64e 30f0 	movw	r0, #60400	; 0xebf0
    c9c4:	f2c0 0001 	movt	r0, #1
    c9c8:	f64e 52e8 	movw	r2, #60904	; 0xede8
    c9cc:	f2c0 0201 	movt	r2, #1
    c9d0:	211c      	movs	r1, #28
    c9d2:	f00a ff99 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c9d6:	defe      	udf	#254	; 0xfe
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    c9d8:	f64e 30f0 	movw	r0, #60400	; 0xebf0
    c9dc:	f2c0 0001 	movt	r0, #1
    c9e0:	f64e 52f8 	movw	r2, #60920	; 0xedf8
    c9e4:	f2c0 0201 	movt	r2, #1
    c9e8:	211c      	movs	r1, #28
    c9ea:	f00a ff8d 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c9ee:	defe      	udf	#254	; 0xfe
            let block_right = x + BLOCK_WIDTH as u8 - 1;
    c9f0:	f64e 30f0 	movw	r0, #60400	; 0xebf0
    c9f4:	f2c0 0001 	movt	r0, #1
    c9f8:	f64e 6208 	movw	r2, #60936	; 0xee08
    c9fc:	f2c0 0201 	movt	r2, #1
    ca00:	211c      	movs	r1, #28
    ca02:	f00a ff81 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ca06:	defe      	udf	#254	; 0xfe
    ca08:	f64e 30b0 	movw	r0, #60336	; 0xebb0
    ca0c:	f2c0 0001 	movt	r0, #1
    ca10:	f64e 6208 	movw	r2, #60936	; 0xee08
    ca14:	f2c0 0201 	movt	r2, #1
    ca18:	2121      	movs	r1, #33	; 0x21
    ca1a:	f00a ff75 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ca1e:	defe      	udf	#254	; 0xfe
            let block_bottom = y + BLOCK_HEIGHT as u8 - 1;
    ca20:	f64e 30f0 	movw	r0, #60400	; 0xebf0
    ca24:	f2c0 0001 	movt	r0, #1
    ca28:	f64e 6218 	movw	r2, #60952	; 0xee18
    ca2c:	f2c0 0201 	movt	r2, #1
    ca30:	211c      	movs	r1, #28
    ca32:	f00a ff69 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ca36:	defe      	udf	#254	; 0xfe
    ca38:	f64e 30b0 	movw	r0, #60336	; 0xebb0
    ca3c:	f2c0 0001 	movt	r0, #1
    ca40:	f64e 6218 	movw	r2, #60952	; 0xee18
    ca44:	f2c0 0201 	movt	r2, #1
    ca48:	2121      	movs	r1, #33	; 0x21
    ca4a:	f00a ff5d 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ca4e:	defe      	udf	#254	; 0xfe
            x += BLOCK_WIDTH as u8;
    ca50:	f64e 30f0 	movw	r0, #60400	; 0xebf0
    ca54:	f2c0 0001 	movt	r0, #1
    ca58:	f64e 6228 	movw	r2, #60968	; 0xee28
    ca5c:	f2c0 0201 	movt	r2, #1
    ca60:	211c      	movs	r1, #28
    ca62:	f00a ff51 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ca66:	defe      	udf	#254	; 0xfe
                y += BLOCK_HEIGHT as u8;
    ca68:	f64e 30f0 	movw	r0, #60400	; 0xebf0
    ca6c:	f2c0 0001 	movt	r0, #1
    ca70:	f64e 6238 	movw	r2, #60984	; 0xee38
    ca74:	f2c0 0201 	movt	r2, #1
    ca78:	211c      	movs	r1, #28
    ca7a:	f00a ff45 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ca7e:	defe      	udf	#254	; 0xfe

0000ca80 <_ZN3app5chip812render_block17hf14dcded684223a2E>:

/// Render the Virtual Block
fn render_block(left: u8, top: u8, right: u8, bottom: u8) {
    ca80:	b570      	push	{r4, r5, r6, lr}
    ca82:	b090      	sub	sp, #64	; 0x40
    ca84:	469c      	mov	ip, r3
    ca86:	4696      	mov	lr, r2
    ca88:	460c      	mov	r4, r1
    ca8a:	4605      	mov	r5, r0
    ca8c:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    ca90:	f88d 1035 	strb.w	r1, [sp, #53]	; 0x35
    ca94:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
    ca98:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    //  console::print("render "); console::printint(left as i32); console::print(", "); console::printint(top as i32); console::print(", "); console::printint(right as i32 - left as i32); console::print(", "); console::printint(bottom as i32 - top as i32); console::print("\n"); console::flush(); ////
    //  Create a new block for the region to be updated
    let mut block = PixelIterator::new(
    ca9c:	466e      	mov	r6, sp
    ca9e:	6033      	str	r3, [r6, #0]
    caa0:	ab0a      	add	r3, sp, #40	; 0x28
    caa2:	9009      	str	r0, [sp, #36]	; 0x24
    caa4:	4618      	mov	r0, r3
    caa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    caa8:	9108      	str	r1, [sp, #32]
    caaa:	4619      	mov	r1, r3
    caac:	9e08      	ldr	r6, [sp, #32]
    caae:	9207      	str	r2, [sp, #28]
    cab0:	4632      	mov	r2, r6
    cab2:	9b07      	ldr	r3, [sp, #28]
    cab4:	f8cd c018 	str.w	ip, [sp, #24]
    cab8:	f8cd e014 	str.w	lr, [sp, #20]
    cabc:	9404      	str	r4, [sp, #16]
    cabe:	9503      	str	r5, [sp, #12]
    cac0:	f7ff f902 	bl	bcc8 <_ZN3app5chip813PixelIterator3new17h8011ce45451de010E>
    cac4:	e7ff      	b.n	cac6 <_ZN3app5chip812render_block17hf14dcded684223a2E+0x46>
    cac6:	a80a      	add	r0, sp, #40	; 0x28
        left, top, 
        right, bottom,
    );
    //  Render the block
    let (left, top, right, bottom) = block.get_window();
    cac8:	f7ff f919 	bl	bcfe <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E>
    cacc:	900e      	str	r0, [sp, #56]	; 0x38
    cace:	980e      	ldr	r0, [sp, #56]	; 0x38
    cad0:	900c      	str	r0, [sp, #48]	; 0x30
    cad2:	e7ff      	b.n	cad4 <_ZN3app5chip812render_block17hf14dcded684223a2E+0x54>
    cad4:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    cad8:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
    cadc:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
    cae0:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
    cae4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    cae8:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
    caec:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    caf0:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    druid::set_display_pixels(left as u16, top as u16, right as u16, bottom as u16,
    caf4:	46ec      	mov	ip, sp
    caf6:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
    cafa:	f8cc e000 	str.w	lr, [ip]
    cafe:	f000 f947 	bl	cd90 <_ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E>
    cb02:	9002      	str	r0, [sp, #8]
    cb04:	e7ff      	b.n	cb06 <_ZN3app5chip812render_block17hf14dcded684223a2E+0x86>
    cb06:	9802      	ldr	r0, [sp, #8]
    cb08:	f000 0001 	and.w	r0, r0, #1
    cb0c:	f64e 6148 	movw	r1, #61000	; 0xee48
    cb10:	f2c0 0101 	movt	r1, #1
    cb14:	f64e 635c 	movw	r3, #61020	; 0xee5c
    cb18:	f2c0 0301 	movt	r3, #1
    cb1c:	2211      	movs	r2, #17
    cb1e:	f008 fb4e 	bl	151be <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
    cb22:	e7ff      	b.n	cb24 <_ZN3app5chip812render_block17hf14dcded684223a2E+0xa4>
        &mut block
    ).expect("set pixels failed");    
}
    cb24:	b010      	add	sp, #64	; 0x40
    cb26:	bd70      	pop	{r4, r5, r6, pc}

0000cb28 <_ZN3app5chip812handle_touch17habca32c74e5cefadE>:

pub fn handle_touch(_x: u16, _y: u16) { 
    cb28:	b580      	push	{r7, lr}
    cb2a:	b084      	sub	sp, #16
    cb2c:	460a      	mov	r2, r1
    cb2e:	4603      	mov	r3, r0
    cb30:	f8ad 000c 	strh.w	r0, [sp, #12]
    cb34:	f8ad 100e 	strh.w	r1, [sp, #14]
    console::print("CHIP8 touch not handled\n"); console::flush(); 
    cb38:	f64e 606c 	movw	r0, #61036	; 0xee6c
    cb3c:	f2c0 0001 	movt	r0, #1
    cb40:	2118      	movs	r1, #24
    cb42:	9202      	str	r2, [sp, #8]
    cb44:	9301      	str	r3, [sp, #4]
    cb46:	f7fc fa53 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    cb4a:	e7ff      	b.n	cb4c <_ZN3app5chip812handle_touch17habca32c74e5cefadE+0x24>
    cb4c:	f7fc fa96 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    cb50:	e7ff      	b.n	cb52 <_ZN3app5chip812handle_touch17habca32c74e5cefadE+0x2a>
}
    cb52:	b004      	add	sp, #16
    cb54:	bd80      	pop	{r7, pc}

0000cb56 <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E>:
    cb56:	b580      	push	{r7, lr}
    cb58:	b08a      	sub	sp, #40	; 0x28
    cb5a:	9104      	str	r1, [sp, #16]
    cb5c:	9205      	str	r2, [sp, #20]
    cb5e:	9308      	str	r3, [sp, #32]
    cb60:	2100      	movs	r1, #0
    cb62:	f88d 101e 	strb.w	r1, [sp, #30]
    cb66:	f88d 101f 	strb.w	r1, [sp, #31]
    cb6a:	2101      	movs	r1, #1
    cb6c:	f88d 101f 	strb.w	r1, [sp, #31]
    cb70:	f88d 101e 	strb.w	r1, [sp, #30]
    cb74:	9904      	ldr	r1, [sp, #16]
    cb76:	2900      	cmp	r1, #0
    cb78:	9303      	str	r3, [sp, #12]
    cb7a:	9002      	str	r0, [sp, #8]
    cb7c:	d001      	beq.n	cb82 <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x2c>
    cb7e:	e7ff      	b.n	cb80 <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x2a>
    cb80:	e004      	b.n	cb8c <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x36>
    cb82:	2000      	movs	r0, #0
    cb84:	9902      	ldr	r1, [sp, #8]
    cb86:	6008      	str	r0, [r1, #0]
    cb88:	e01f      	b.n	cbca <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x74>
    cb8a:	defe      	udf	#254	; 0xfe
    cb8c:	2000      	movs	r0, #0
    cb8e:	f88d 001f 	strb.w	r0, [sp, #31]
    cb92:	9905      	ldr	r1, [sp, #20]
    cb94:	9109      	str	r1, [sp, #36]	; 0x24
    cb96:	f88d 001e 	strb.w	r0, [sp, #30]
    cb9a:	9106      	str	r1, [sp, #24]
    cb9c:	9906      	ldr	r1, [sp, #24]
    cb9e:	9803      	ldr	r0, [sp, #12]
    cba0:	f000 fa62 	bl	d068 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hd98ff8af8e86e565E>
    cba4:	9001      	str	r0, [sp, #4]
    cba6:	9100      	str	r1, [sp, #0]
    cba8:	e7ff      	b.n	cbaa <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x54>
    cbaa:	9801      	ldr	r0, [sp, #4]
    cbac:	9902      	ldr	r1, [sp, #8]
    cbae:	6048      	str	r0, [r1, #4]
    cbb0:	9a00      	ldr	r2, [sp, #0]
    cbb2:	608a      	str	r2, [r1, #8]
    cbb4:	2301      	movs	r3, #1
    cbb6:	600b      	str	r3, [r1, #0]
    cbb8:	e007      	b.n	cbca <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x74>
    cbba:	9804      	ldr	r0, [sp, #16]
    cbbc:	2801      	cmp	r0, #1
    cbbe:	d00c      	beq.n	cbda <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x84>
    cbc0:	e015      	b.n	cbee <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x98>
    cbc2:	2000      	movs	r0, #0
    cbc4:	f88d 001e 	strb.w	r0, [sp, #30]
    cbc8:	e7f7      	b.n	cbba <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x64>
    cbca:	f89d 001e 	ldrb.w	r0, [sp, #30]
    cbce:	07c0      	lsls	r0, r0, #31
    cbd0:	2800      	cmp	r0, #0
    cbd2:	d1f6      	bne.n	cbc2 <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x6c>
    cbd4:	e7f1      	b.n	cbba <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x64>
    cbd6:	b00a      	add	sp, #40	; 0x28
    cbd8:	bd80      	pop	{r7, pc}
    cbda:	f89d 001f 	ldrb.w	r0, [sp, #31]
    cbde:	07c0      	lsls	r0, r0, #31
    cbe0:	2800      	cmp	r0, #0
    cbe2:	d0f8      	beq.n	cbd6 <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x80>
    cbe4:	e7ff      	b.n	cbe6 <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x90>
    cbe6:	2000      	movs	r0, #0
    cbe8:	f88d 001f 	strb.w	r0, [sp, #31]
    cbec:	e7f3      	b.n	cbd6 <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x80>
    cbee:	e7f2      	b.n	cbd6 <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x80>

0000cbf0 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE>:
    cbf0:	b580      	push	{r7, lr}
    cbf2:	b08c      	sub	sp, #48	; 0x30
    cbf4:	9103      	str	r1, [sp, #12]
    cbf6:	9204      	str	r2, [sp, #16]
    cbf8:	930a      	str	r3, [sp, #40]	; 0x28
    cbfa:	2100      	movs	r1, #0
    cbfc:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    cc00:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    cc04:	2101      	movs	r1, #1
    cc06:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    cc0a:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    cc0e:	9903      	ldr	r1, [sp, #12]
    cc10:	2900      	cmp	r1, #0
    cc12:	9302      	str	r3, [sp, #8]
    cc14:	9001      	str	r0, [sp, #4]
    cc16:	d001      	beq.n	cc1c <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x2c>
    cc18:	e7ff      	b.n	cc1a <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x2a>
    cc1a:	e004      	b.n	cc26 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x36>
    cc1c:	2000      	movs	r0, #0
    cc1e:	9901      	ldr	r1, [sp, #4]
    cc20:	6008      	str	r0, [r1, #0]
    cc22:	e020      	b.n	cc66 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x76>
    cc24:	defe      	udf	#254	; 0xfe
    cc26:	2000      	movs	r0, #0
    cc28:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    cc2c:	9904      	ldr	r1, [sp, #16]
    cc2e:	910b      	str	r1, [sp, #44]	; 0x2c
    cc30:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    cc34:	9108      	str	r1, [sp, #32]
    cc36:	9a08      	ldr	r2, [sp, #32]
    cc38:	a805      	add	r0, sp, #20
    cc3a:	9902      	ldr	r1, [sp, #8]
    cc3c:	f000 fa0a 	bl	d054 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h958b1d5c274bc415E>
    cc40:	e7ff      	b.n	cc42 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x52>
    cc42:	9805      	ldr	r0, [sp, #20]
    cc44:	9906      	ldr	r1, [sp, #24]
    cc46:	9a07      	ldr	r2, [sp, #28]
    cc48:	9b01      	ldr	r3, [sp, #4]
    cc4a:	60da      	str	r2, [r3, #12]
    cc4c:	6099      	str	r1, [r3, #8]
    cc4e:	6058      	str	r0, [r3, #4]
    cc50:	2001      	movs	r0, #1
    cc52:	6018      	str	r0, [r3, #0]
    cc54:	e007      	b.n	cc66 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x76>
    cc56:	9803      	ldr	r0, [sp, #12]
    cc58:	2801      	cmp	r0, #1
    cc5a:	d00c      	beq.n	cc76 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x86>
    cc5c:	e015      	b.n	cc8a <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x9a>
    cc5e:	2000      	movs	r0, #0
    cc60:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    cc64:	e7f7      	b.n	cc56 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x66>
    cc66:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    cc6a:	07c0      	lsls	r0, r0, #31
    cc6c:	2800      	cmp	r0, #0
    cc6e:	d1f6      	bne.n	cc5e <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x6e>
    cc70:	e7f1      	b.n	cc56 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x66>
    cc72:	b00c      	add	sp, #48	; 0x30
    cc74:	bd80      	pop	{r7, pc}
    cc76:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    cc7a:	07c0      	lsls	r0, r0, #31
    cc7c:	2800      	cmp	r0, #0
    cc7e:	d0f8      	beq.n	cc72 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x82>
    cc80:	e7ff      	b.n	cc82 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x92>
    cc82:	2000      	movs	r0, #0
    cc84:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    cc88:	e7f3      	b.n	cc72 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x82>
    cc8a:	e7f2      	b.n	cc72 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x82>

0000cc8c <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E>:
    cc8c:	b085      	sub	sp, #20
    cc8e:	9000      	str	r0, [sp, #0]
    cc90:	2000      	movs	r0, #0
    cc92:	f88d 000b 	strb.w	r0, [sp, #11]
    cc96:	f88d 000a 	strb.w	r0, [sp, #10]
    cc9a:	2001      	movs	r0, #1
    cc9c:	f88d 000b 	strb.w	r0, [sp, #11]
    cca0:	f88d 000a 	strb.w	r0, [sp, #10]
    cca4:	9800      	ldr	r0, [sp, #0]
    cca6:	2800      	cmp	r0, #0
    cca8:	4601      	mov	r1, r0
    ccaa:	bf18      	it	ne
    ccac:	2101      	movne	r1, #1
    ccae:	2800      	cmp	r0, #0
    ccb0:	d001      	beq.n	ccb6 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x2a>
    ccb2:	e7ff      	b.n	ccb4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x28>
    ccb4:	e005      	b.n	ccc2 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x36>
    ccb6:	2000      	movs	r0, #0
    ccb8:	f88d 000a 	strb.w	r0, [sp, #10]
    ccbc:	9001      	str	r0, [sp, #4]
    ccbe:	e007      	b.n	ccd0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x44>
    ccc0:	defe      	udf	#254	; 0xfe
    ccc2:	2000      	movs	r0, #0
    ccc4:	f88d 000b 	strb.w	r0, [sp, #11]
    ccc8:	9800      	ldr	r0, [sp, #0]
    ccca:	9004      	str	r0, [sp, #16]
    cccc:	9001      	str	r0, [sp, #4]
    ccce:	e7ff      	b.n	ccd0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x44>
    ccd0:	f89d 000a 	ldrb.w	r0, [sp, #10]
    ccd4:	07c0      	lsls	r0, r0, #31
    ccd6:	2800      	cmp	r0, #0
    ccd8:	d104      	bne.n	cce4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x58>
    ccda:	e7ff      	b.n	ccdc <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x50>
    ccdc:	9800      	ldr	r0, [sp, #0]
    ccde:	2800      	cmp	r0, #0
    cce0:	d107      	bne.n	ccf2 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x66>
    cce2:	e010      	b.n	cd06 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x7a>
    cce4:	2000      	movs	r0, #0
    cce6:	f88d 000a 	strb.w	r0, [sp, #10]
    ccea:	e7f7      	b.n	ccdc <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x50>
    ccec:	9801      	ldr	r0, [sp, #4]
    ccee:	b005      	add	sp, #20
    ccf0:	4770      	bx	lr
    ccf2:	f89d 000b 	ldrb.w	r0, [sp, #11]
    ccf6:	07c0      	lsls	r0, r0, #31
    ccf8:	2800      	cmp	r0, #0
    ccfa:	d0f7      	beq.n	ccec <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x60>
    ccfc:	e7ff      	b.n	ccfe <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x72>
    ccfe:	2000      	movs	r0, #0
    cd00:	f88d 000b 	strb.w	r0, [sp, #11]
    cd04:	e7f2      	b.n	ccec <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x60>
    cd06:	e7f1      	b.n	ccec <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x60>

0000cd08 <_ZN4core6option15Option$LT$T$GT$6as_mut17h8929fdf00293b903E>:
    cd08:	b084      	sub	sp, #16
    cd0a:	9002      	str	r0, [sp, #8]
    cd0c:	6801      	ldr	r1, [r0, #0]
    cd0e:	2900      	cmp	r1, #0
    cd10:	9000      	str	r0, [sp, #0]
    cd12:	d001      	beq.n	cd18 <_ZN4core6option15Option$LT$T$GT$6as_mut17h8929fdf00293b903E+0x10>
    cd14:	e7ff      	b.n	cd16 <_ZN4core6option15Option$LT$T$GT$6as_mut17h8929fdf00293b903E+0xe>
    cd16:	e003      	b.n	cd20 <_ZN4core6option15Option$LT$T$GT$6as_mut17h8929fdf00293b903E+0x18>
    cd18:	2000      	movs	r0, #0
    cd1a:	9001      	str	r0, [sp, #4]
    cd1c:	e005      	b.n	cd2a <_ZN4core6option15Option$LT$T$GT$6as_mut17h8929fdf00293b903E+0x22>
    cd1e:	defe      	udf	#254	; 0xfe
    cd20:	9800      	ldr	r0, [sp, #0]
    cd22:	1d01      	adds	r1, r0, #4
    cd24:	9103      	str	r1, [sp, #12]
    cd26:	9101      	str	r1, [sp, #4]
    cd28:	e7ff      	b.n	cd2a <_ZN4core6option15Option$LT$T$GT$6as_mut17h8929fdf00293b903E+0x22>
    cd2a:	9801      	ldr	r0, [sp, #4]
    cd2c:	b004      	add	sp, #16
    cd2e:	4770      	bx	lr

0000cd30 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E>:
    cd30:	b084      	sub	sp, #16
    cd32:	9002      	str	r0, [sp, #8]
    cd34:	9802      	ldr	r0, [sp, #8]
    cd36:	2800      	cmp	r0, #0
    cd38:	4602      	mov	r2, r0
    cd3a:	bf18      	it	ne
    cd3c:	2201      	movne	r2, #1
    cd3e:	2800      	cmp	r0, #0
    cd40:	9101      	str	r1, [sp, #4]
    cd42:	d001      	beq.n	cd48 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x18>
    cd44:	e7ff      	b.n	cd46 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x16>
    cd46:	e009      	b.n	cd5c <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x2c>
    cd48:	f64e 6084 	movw	r0, #61060	; 0xee84
    cd4c:	f2c0 0001 	movt	r0, #1
    cd50:	212b      	movs	r1, #43	; 0x2b
    cd52:	9a01      	ldr	r2, [sp, #4]
    cd54:	f00a fdd8 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    cd58:	defe      	udf	#254	; 0xfe
    cd5a:	defe      	udf	#254	; 0xfe
    cd5c:	9802      	ldr	r0, [sp, #8]
    cd5e:	9003      	str	r0, [sp, #12]
    cd60:	9902      	ldr	r1, [sp, #8]
    cd62:	2900      	cmp	r1, #0
    cd64:	9000      	str	r0, [sp, #0]
    cd66:	d003      	beq.n	cd70 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x40>
    cd68:	e7ff      	b.n	cd6a <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x3a>
    cd6a:	9800      	ldr	r0, [sp, #0]
    cd6c:	b004      	add	sp, #16
    cd6e:	4770      	bx	lr
    cd70:	e7fb      	b.n	cd6a <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x3a>

0000cd72 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E>:
    cd72:	b081      	sub	sp, #4
    cd74:	2100      	movs	r1, #0
    cd76:	6001      	str	r1, [r0, #0]
    cd78:	b001      	add	sp, #4
    cd7a:	4770      	bx	lr

0000cd7c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5e3b0b54b76961bcE>:
    cd7c:	b580      	push	{r7, lr}
    cd7e:	b082      	sub	sp, #8
    cd80:	9001      	str	r0, [sp, #4]
    cd82:	f7ff ff83 	bl	cc8c <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E>
    cd86:	9000      	str	r0, [sp, #0]
    cd88:	e7ff      	b.n	cd8a <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5e3b0b54b76961bcE+0xe>
    cd8a:	9800      	ldr	r0, [sp, #0]
    cd8c:	b002      	add	sp, #8
    cd8e:	bd80      	pop	{r7, pc}

0000cd90 <_ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E>:
        item
    ).expect("draw blocks fail");
}

/// Draw the pixel colours to the display at the window from (sx,sy) to (ex,ey)
pub fn set_display_pixels<P: IntoIterator<Item = u16>>(sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    cd90:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd92:	b08d      	sub	sp, #52	; 0x34
    cd94:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    cd98:	469e      	mov	lr, r3
    cd9a:	4614      	mov	r4, r2
    cd9c:	460d      	mov	r5, r1
    cd9e:	4606      	mov	r6, r0
    cda0:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    cda4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
    cda8:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    cdac:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    unsafe { DISPLAY.set_pixels(sx, sy, ex, ey, colors) }
    cdb0:	466f      	mov	r7, sp
    cdb2:	f8c7 c004 	str.w	ip, [r7, #4]
    cdb6:	603b      	str	r3, [r7, #0]
    cdb8:	f240 1348 	movw	r3, #328	; 0x148
    cdbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdc0:	900a      	str	r0, [sp, #40]	; 0x28
    cdc2:	4618      	mov	r0, r3
    cdc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cdc6:	9109      	str	r1, [sp, #36]	; 0x24
    cdc8:	4619      	mov	r1, r3
    cdca:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    cdce:	9208      	str	r2, [sp, #32]
    cdd0:	4662      	mov	r2, ip
    cdd2:	9b08      	ldr	r3, [sp, #32]
    cdd4:	f8cd e01c 	str.w	lr, [sp, #28]
    cdd8:	9406      	str	r4, [sp, #24]
    cdda:	9505      	str	r5, [sp, #20]
    cddc:	9604      	str	r6, [sp, #16]
    cdde:	f000 f807 	bl	cdf0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E>
    cde2:	9003      	str	r0, [sp, #12]
    cde4:	e7ff      	b.n	cde6 <_ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E+0x56>
}
    cde6:	9803      	ldr	r0, [sp, #12]
    cde8:	f000 0001 	and.w	r0, r0, #1
    cdec:	b00d      	add	sp, #52	; 0x34
    cdee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cdf0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E>:
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    cdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cdf2:	b091      	sub	sp, #68	; 0x44
    cdf4:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
    cdf8:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
    cdfc:	461c      	mov	r4, r3
    cdfe:	4615      	mov	r5, r2
    ce00:	460e      	mov	r6, r1
    ce02:	900a      	str	r0, [sp, #40]	; 0x28
    ce04:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
    ce08:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
    ce0c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    ce10:	f8ad e032 	strh.w	lr, [sp, #50]	; 0x32
    ce14:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
    ce16:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
    ce1a:	2701      	movs	r7, #1
    ce1c:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
    ce20:	466f      	mov	r7, sp
    ce22:	f8c7 e000 	str.w	lr, [r7]
    ce26:	9008      	str	r0, [sp, #32]
    ce28:	f8cd c01c 	str.w	ip, [sp, #28]
    ce2c:	9406      	str	r4, [sp, #24]
    ce2e:	9505      	str	r5, [sp, #20]
    ce30:	9604      	str	r6, [sp, #16]
    ce32:	f7fc ff47 	bl	9cc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
    ce36:	9003      	str	r0, [sp, #12]
    ce38:	e7ff      	b.n	ce3a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x4a>
    ce3a:	9803      	ldr	r0, [sp, #12]
    ce3c:	f000 0001 	and.w	r0, r0, #1
    ce40:	f7fb fe94 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    ce44:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    ce48:	e7ff      	b.n	ce4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x5a>
    ce4a:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
    ce4e:	07c1      	lsls	r1, r0, #31
    ce50:	2900      	cmp	r1, #0
    ce52:	d001      	beq.n	ce58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x68>
    ce54:	e7ff      	b.n	ce56 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x66>
    ce56:	e009      	b.n	ce6c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x7c>
    ce58:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
    ce5a:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    ce5e:	9808      	ldr	r0, [sp, #32]
    ce60:	9907      	ldr	r1, [sp, #28]
    ce62:	f000 f848 	bl	cef6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E>
    ce66:	9002      	str	r0, [sp, #8]
    ce68:	e00d      	b.n	ce86 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x96>
        self.set_address_window(sx, sy, ex, ey)?;
    ce6a:	defe      	udf	#254	; 0xfe
    ce6c:	f005 f94b 	bl	12106 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    ce70:	e003      	b.n	ce7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x8a>
    }
    ce72:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    ce76:	b011      	add	sp, #68	; 0x44
    ce78:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
    ce7a:	f008 faed 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    ce7e:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    ce82:	e7ff      	b.n	ce84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x94>
    ce84:	e031      	b.n	ceea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xfa>
        self.write_pixels(colors) ? ;
    ce86:	9802      	ldr	r0, [sp, #8]
    ce88:	f000 0001 	and.w	r0, r0, #1
    ce8c:	f7fb fe6e 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    ce90:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    ce94:	e7ff      	b.n	ce96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xa6>
    ce96:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    ce9a:	07c1      	lsls	r1, r0, #31
    ce9c:	2900      	cmp	r1, #0
    ce9e:	d001      	beq.n	cea4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xb4>
    cea0:	e7ff      	b.n	cea2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xb2>
    cea2:	e004      	b.n	ceae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xbe>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    cea4:	f006 fb6a 	bl	1357c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    cea8:	9001      	str	r0, [sp, #4]
    ceaa:	e009      	b.n	cec0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xd0>
        self.write_pixels(colors) ? ;
    ceac:	defe      	udf	#254	; 0xfe
    ceae:	f005 f92a 	bl	12106 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    ceb2:	e7ff      	b.n	ceb4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xc4>
    ceb4:	f008 fad0 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    ceb8:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    cebc:	e7ff      	b.n	cebe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xce>
    cebe:	e014      	b.n	ceea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xfa>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    cec0:	f64e 61af 	movw	r1, #61103	; 0xeeaf
    cec4:	f2c0 0101 	movt	r1, #1
    cec8:	f64e 730c 	movw	r3, #61196	; 0xef0c
    cecc:	f2c0 0301 	movt	r3, #1
    ced0:	220e      	movs	r2, #14
    ced2:	9801      	ldr	r0, [sp, #4]
    ced4:	f7fb fe11 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    ced8:	e7ff      	b.n	ceda <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xea>
    ceda:	2000      	movs	r0, #0
        Ok(())
    cedc:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    }
    cee0:	e7c7      	b.n	ce72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x82>
    cee2:	2000      	movs	r0, #0
    cee4:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    cee8:	e7c3      	b.n	ce72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x82>
    ceea:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    ceee:	07c0      	lsls	r0, r0, #31
    cef0:	2800      	cmp	r0, #0
    cef2:	d1f6      	bne.n	cee2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xf2>
    cef4:	e7bd      	b.n	ce72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x82>

0000cef6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
    cef6:	b580      	push	{r7, lr}
    cef8:	b094      	sub	sp, #80	; 0x50
    cefa:	900d      	str	r0, [sp, #52]	; 0x34
    cefc:	910e      	str	r1, [sp, #56]	; 0x38
    cefe:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
    cf00:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
    cf04:	2301      	movs	r3, #1
    cf06:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    cf0a:	232c      	movs	r3, #44	; 0x2c
    cf0c:	f88d 301f 	strb.w	r3, [sp, #31]
    cf10:	9209      	str	r2, [sp, #36]	; 0x24
    cf12:	9208      	str	r2, [sp, #32]
    cf14:	9208      	str	r2, [sp, #32]
    cf16:	9a08      	ldr	r2, [sp, #32]
    cf18:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cf1a:	f89d c01f 	ldrb.w	ip, [sp, #31]
    cf1e:	9006      	str	r0, [sp, #24]
    cf20:	9105      	str	r1, [sp, #20]
    cf22:	4661      	mov	r1, ip
    cf24:	f7fc fddd 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    cf28:	9004      	str	r0, [sp, #16]
    cf2a:	e7ff      	b.n	cf2c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x36>
    cf2c:	9804      	ldr	r0, [sp, #16]
    cf2e:	f000 0001 	and.w	r0, r0, #1
    cf32:	f7fb fe1b 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    cf36:	f88d 001e 	strb.w	r0, [sp, #30]
    cf3a:	e7ff      	b.n	cf3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x46>
    cf3c:	f89d 001e 	ldrb.w	r0, [sp, #30]
    cf40:	07c1      	lsls	r1, r0, #31
    cf42:	2900      	cmp	r1, #0
    cf44:	d001      	beq.n	cf4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x54>
    cf46:	e7ff      	b.n	cf48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x52>
    cf48:	e008      	b.n	cf5c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x66>
    cf4a:	2000      	movs	r0, #0
        for color in colors {
    cf4c:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    cf50:	9805      	ldr	r0, [sp, #20]
    cf52:	f000 f86e 	bl	d032 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcdf096192109e52aE>
    cf56:	9003      	str	r0, [sp, #12]
    cf58:	e00d      	b.n	cf76 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x80>
        self.write_command(Instruction::RAMWR, None)?;
    cf5a:	defe      	udf	#254	; 0xfe
    cf5c:	f005 f8d3 	bl	12106 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    cf60:	e003      	b.n	cf6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x74>
    }
    cf62:	f89d 001d 	ldrb.w	r0, [sp, #29]
    cf66:	b014      	add	sp, #80	; 0x50
    cf68:	bd80      	pop	{r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
    cf6a:	f008 fa75 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    cf6e:	f88d 001d 	strb.w	r0, [sp, #29]
    cf72:	e7ff      	b.n	cf74 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x7e>
    cf74:	e057      	b.n	d026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x130>
        for color in colors {
    cf76:	9803      	ldr	r0, [sp, #12]
    cf78:	900a      	str	r0, [sp, #40]	; 0x28
    cf7a:	e7ff      	b.n	cf7c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x86>
    cf7c:	a80a      	add	r0, sp, #40	; 0x28
    cf7e:	f000 f85c 	bl	d03a <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE>
    cf82:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
    cf86:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    cf8a:	e7ff      	b.n	cf8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x96>
    cf8c:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    cf90:	4601      	mov	r1, r0
    cf92:	2800      	cmp	r0, #0
    cf94:	d001      	beq.n	cf9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xa4>
    cf96:	e7ff      	b.n	cf98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xa2>
    cf98:	e001      	b.n	cf9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xa8>
        }
    cf9a:	e02b      	b.n	cff4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xfe>
        for color in colors {
    cf9c:	defe      	udf	#254	; 0xfe
    cf9e:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
    cfa2:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
    cfa6:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    cfaa:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
            self.write_word(color)?;
    cfae:	9906      	ldr	r1, [sp, #24]
    cfb0:	9002      	str	r0, [sp, #8]
    cfb2:	4608      	mov	r0, r1
    cfb4:	9902      	ldr	r1, [sp, #8]
    cfb6:	f7fc fcc5 	bl	9944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    cfba:	9001      	str	r0, [sp, #4]
    cfbc:	e7ff      	b.n	cfbe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xc8>
    cfbe:	9801      	ldr	r0, [sp, #4]
    cfc0:	f000 0001 	and.w	r0, r0, #1
    cfc4:	f7fb fdd2 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    cfc8:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    cfcc:	e7ff      	b.n	cfce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xd8>
    cfce:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    cfd2:	07c1      	lsls	r1, r0, #31
    cfd4:	2900      	cmp	r1, #0
    cfd6:	d001      	beq.n	cfdc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xe6>
    cfd8:	e7ff      	b.n	cfda <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xe4>
    cfda:	e001      	b.n	cfe0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xea>
        for color in colors {
    cfdc:	e7ce      	b.n	cf7c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x86>
            self.write_word(color)?;
    cfde:	defe      	udf	#254	; 0xfe
    cfe0:	f005 f891 	bl	12106 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    cfe4:	e7ff      	b.n	cfe6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xf0>
    cfe6:	f008 fa37 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    cfea:	f88d 001d 	strb.w	r0, [sp, #29]
    cfee:	e7ff      	b.n	cff0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xfa>
        }
    cff0:	e7ff      	b.n	cff2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xfc>
    }
    cff2:	e018      	b.n	d026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x130>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    cff4:	f006 fac2 	bl	1357c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    cff8:	9000      	str	r0, [sp, #0]
    cffa:	e7ff      	b.n	cffc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x106>
    cffc:	f64e 61af 	movw	r1, #61103	; 0xeeaf
    d000:	f2c0 0101 	movt	r1, #1
    d004:	f64e 731c 	movw	r3, #61212	; 0xef1c
    d008:	f2c0 0301 	movt	r3, #1
    d00c:	220e      	movs	r2, #14
    d00e:	9800      	ldr	r0, [sp, #0]
    d010:	f7fb fd73 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    d014:	e7ff      	b.n	d016 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x120>
    d016:	2000      	movs	r0, #0
        Ok(())
    d018:	f88d 001d 	strb.w	r0, [sp, #29]
    }
    d01c:	e7a1      	b.n	cf62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x6c>
    d01e:	2000      	movs	r0, #0
    d020:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    d024:	e79d      	b.n	cf62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x6c>
    d026:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    d02a:	07c0      	lsls	r0, r0, #31
    d02c:	2800      	cmp	r0, #0
    d02e:	d1f6      	bne.n	d01e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x128>
    d030:	e797      	b.n	cf62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x6c>

0000d032 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcdf096192109e52aE>:
    d032:	b081      	sub	sp, #4
    d034:	9000      	str	r0, [sp, #0]
    d036:	b001      	add	sp, #4
    d038:	4770      	bx	lr

0000d03a <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE>:
    d03a:	b580      	push	{r7, lr}
    d03c:	b084      	sub	sp, #16
    d03e:	9003      	str	r0, [sp, #12]
    d040:	6800      	ldr	r0, [r0, #0]
    d042:	f7ff f80e 	bl	c062 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E>
    d046:	9002      	str	r0, [sp, #8]
    d048:	9101      	str	r1, [sp, #4]
    d04a:	e7ff      	b.n	d04c <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE+0x12>
    d04c:	9802      	ldr	r0, [sp, #8]
    d04e:	9901      	ldr	r1, [sp, #4]
    d050:	b004      	add	sp, #16
    d052:	bd80      	pop	{r7, pc}

0000d054 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h958b1d5c274bc415E>:
    d054:	b580      	push	{r7, lr}
    d056:	b082      	sub	sp, #8
    d058:	9200      	str	r2, [sp, #0]
    d05a:	9101      	str	r1, [sp, #4]
    d05c:	9a00      	ldr	r2, [sp, #0]
    d05e:	f003 fe7b 	bl	10d58 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h8dd34ea84f1c7a05E>
    d062:	e7ff      	b.n	d064 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h958b1d5c274bc415E+0x10>
    d064:	b002      	add	sp, #8
    d066:	bd80      	pop	{r7, pc}

0000d068 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hd98ff8af8e86e565E>:
    d068:	b580      	push	{r7, lr}
    d06a:	b084      	sub	sp, #16
    d06c:	9102      	str	r1, [sp, #8]
    d06e:	9003      	str	r0, [sp, #12]
    d070:	9902      	ldr	r1, [sp, #8]
    d072:	f003 fe83 	bl	10d7c <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hd6b4984bbe637b42E>
    d076:	9001      	str	r0, [sp, #4]
    d078:	9100      	str	r1, [sp, #0]
    d07a:	e7ff      	b.n	d07c <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hd98ff8af8e86e565E+0x14>
    d07c:	9801      	ldr	r0, [sp, #4]
    d07e:	9900      	ldr	r1, [sp, #0]
    d080:	b004      	add	sp, #16
    d082:	bd80      	pop	{r7, pc}

0000d084 <_ZN8libchip814Chip8$LT$T$GT$3new17h746d7acd3c3a5f1eE>:
    0xf0, 0x80, 0xf0, 0x80, 0x80, // f
];

impl<T: Hardware> Chip8<T> {
    /// Create an interpreter instance.
    pub fn new(hw: T) -> Self {
    d084:	b570      	push	{r4, r5, r6, lr}
    d086:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
    d08a:	b082      	sub	sp, #8
    d08c:	f10d 0e0c 	add.w	lr, sp, #12
    d090:	f50e 5282 	add.w	r2, lr, #4160	; 0x1040
    d094:	9107      	str	r1, [sp, #28]
    d096:	9907      	ldr	r1, [sp, #28]
    d098:	9106      	str	r1, [sp, #24]
    d09a:	2100      	movs	r1, #0
        Self {
            v: [0; REGS],
    d09c:	910b      	str	r1, [sp, #44]	; 0x2c
    d09e:	910a      	str	r1, [sp, #40]	; 0x28
    d0a0:	9109      	str	r1, [sp, #36]	; 0x24
    d0a2:	9108      	str	r1, [sp, #32]
    d0a4:	ab0c      	add	r3, sp, #48	; 0x30
    d0a6:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
            i: 0,
            dt: 0,
            st: 0,
            pc: 0,
            sp: 0,
            mem: [0; MEMS],
    d0aa:	9005      	str	r0, [sp, #20]
    d0ac:	4618      	mov	r0, r3
    d0ae:	9104      	str	r1, [sp, #16]
    d0b0:	4661      	mov	r1, ip
    d0b2:	9203      	str	r2, [sp, #12]
    d0b4:	9302      	str	r3, [sp, #8]
    d0b6:	f8cd c004 	str.w	ip, [sp, #4]
    d0ba:	f010 fff5 	bl	1e0a8 <__aeabi_memclr>
            stack: [0; STACKS],
    d0be:	9804      	ldr	r0, [sp, #16]
    d0c0:	9903      	ldr	r1, [sp, #12]
    d0c2:	6008      	str	r0, [r1, #0]
    d0c4:	f841 0c04 	str.w	r0, [r1, #-4]
    d0c8:	f841 0c08 	str.w	r0, [r1, #-8]
    d0cc:	f841 0c0c 	str.w	r0, [r1, #-12]
    d0d0:	f841 0c10 	str.w	r0, [r1, #-16]
    d0d4:	f841 0c14 	str.w	r0, [r1, #-20]
    d0d8:	f841 0c18 	str.w	r0, [r1, #-24]
    d0dc:	f841 0c1c 	str.w	r0, [r1, #-28]
            time: None,
    d0e0:	6088      	str	r0, [r1, #8]
    d0e2:	6048      	str	r0, [r1, #4]
            running: false,
            hw,
    d0e4:	9a06      	ldr	r2, [sp, #24]
    d0e6:	618a      	str	r2, [r1, #24]
        Self {
    d0e8:	9a08      	ldr	r2, [sp, #32]
    d0ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d0ec:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    d0f0:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
    d0f4:	9c05      	ldr	r4, [sp, #20]
    d0f6:	f8c4 e040 	str.w	lr, [r4, #64]	; 0x40
    d0fa:	f8c4 c03c 	str.w	ip, [r4, #60]	; 0x3c
    d0fe:	63a3      	str	r3, [r4, #56]	; 0x38
    d100:	6362      	str	r2, [r4, #52]	; 0x34
    d102:	8220      	strh	r0, [r4, #16]
    d104:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
    d108:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
    d10c:	8260      	strh	r0, [r4, #18]
    d10e:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
    d112:	f104 0047 	add.w	r0, r4, #71	; 0x47
    d116:	9902      	ldr	r1, [sp, #8]
    d118:	9a01      	ldr	r2, [sp, #4]
    d11a:	f010 ffc9 	bl	1e0b0 <__aeabi_memcpy>
    d11e:	9905      	ldr	r1, [sp, #20]
    d120:	f101 0214 	add.w	r2, r1, #20
    d124:	f10d 0e10 	add.w	lr, sp, #16
    d128:	f50e 5181 	add.w	r1, lr, #4128	; 0x1020
    d12c:	2320      	movs	r3, #32
    d12e:	9000      	str	r0, [sp, #0]
    d130:	4610      	mov	r0, r2
    d132:	461a      	mov	r2, r3
    d134:	f010 ffbc 	bl	1e0b0 <__aeabi_memcpy>
    d138:	9903      	ldr	r1, [sp, #12]
    d13a:	684a      	ldr	r2, [r1, #4]
    d13c:	688b      	ldr	r3, [r1, #8]
    d13e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    d142:	f8d1 e010 	ldr.w	lr, [r1, #16]
    d146:	9c05      	ldr	r4, [sp, #20]
    d148:	6063      	str	r3, [r4, #4]
    d14a:	6022      	str	r2, [r4, #0]
    d14c:	f8c4 e00c 	str.w	lr, [r4, #12]
    d150:	f8c4 c008 	str.w	ip, [r4, #8]
    d154:	f241 0247 	movw	r2, #4167	; 0x1047
    d158:	9b04      	ldr	r3, [sp, #16]
    d15a:	54a3      	strb	r3, [r4, r2]
    d15c:	698a      	ldr	r2, [r1, #24]
    d15e:	f241 0c48 	movw	ip, #4168	; 0x1048
    d162:	f844 200c 	str.w	r2, [r4, ip]
        }
    }
    d166:	f50d 5d83 	add.w	sp, sp, #4192	; 0x1060
    d16a:	b002      	add	sp, #8
    d16c:	bd70      	pop	{r4, r5, r6, pc}

0000d16e <_ZN8libchip814Chip8$LT$T$GT$3pop17h503862bdc0785684E>:
    fn push(&mut self, item: u16) {
        self.stack[self.sp as usize] = item;
        self.sp = self.sp.wrapping_add(1);
    }

    fn pop(&mut self) -> u16 {
    d16e:	b580      	push	{r7, lr}
    d170:	b086      	sub	sp, #24
    d172:	9004      	str	r0, [sp, #16]
        self.sp = self.sp.wrapping_sub(1);
    d174:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    d178:	2201      	movs	r2, #1
    d17a:	9003      	str	r0, [sp, #12]
    d17c:	4608      	mov	r0, r1
    d17e:	4611      	mov	r1, r2
    d180:	f009 fc9e 	bl	16ac0 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E>
    d184:	9002      	str	r0, [sp, #8]
    d186:	e7ff      	b.n	d188 <_ZN8libchip814Chip8$LT$T$GT$3pop17h503862bdc0785684E+0x1a>
    d188:	9802      	ldr	r0, [sp, #8]
    d18a:	9903      	ldr	r1, [sp, #12]
    d18c:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
        let item = self.stack[self.sp as usize];
    d190:	f891 2046 	ldrb.w	r2, [r1, #70]	; 0x46
    d194:	4613      	mov	r3, r2
    d196:	2a0f      	cmp	r2, #15
    d198:	9301      	str	r3, [sp, #4]
    d19a:	d80a      	bhi.n	d1b2 <_ZN8libchip814Chip8$LT$T$GT$3pop17h503862bdc0785684E+0x44>
    d19c:	e7ff      	b.n	d19e <_ZN8libchip814Chip8$LT$T$GT$3pop17h503862bdc0785684E+0x30>
    d19e:	9803      	ldr	r0, [sp, #12]
    d1a0:	9901      	ldr	r1, [sp, #4]
    d1a2:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    d1a6:	8a92      	ldrh	r2, [r2, #20]
    d1a8:	f8ad 2016 	strh.w	r2, [sp, #22]
        item
    }
    d1ac:	4610      	mov	r0, r2
    d1ae:	b006      	add	sp, #24
    d1b0:	bd80      	pop	{r7, pc}
        let item = self.stack[self.sp as usize];
    d1b2:	f64e 7084 	movw	r0, #61316	; 0xef84
    d1b6:	f2c0 0001 	movt	r0, #1
    d1ba:	2210      	movs	r2, #16
    d1bc:	9901      	ldr	r1, [sp, #4]
    d1be:	f00a fbb9 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d1c2:	defe      	udf	#254	; 0xfe

0000d1c4 <_ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E>:
    pub fn run(mut self, rom: &[u8]) {
    d1c4:	b580      	push	{r7, lr}
    d1c6:	b086      	sub	sp, #24
    d1c8:	9104      	str	r1, [sp, #16]
    d1ca:	9205      	str	r2, [sp, #20]
        self.setup();
    d1cc:	9003      	str	r0, [sp, #12]
    d1ce:	9202      	str	r2, [sp, #8]
    d1d0:	9101      	str	r1, [sp, #4]
    d1d2:	f003 ff35 	bl	11040 <_ZN8libchip814Chip8$LT$T$GT$5setup17h6dafcb9be3b52c51E>
    d1d6:	e7ff      	b.n	d1d8 <_ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E+0x14>
        self.load(rom);
    d1d8:	9803      	ldr	r0, [sp, #12]
    d1da:	9901      	ldr	r1, [sp, #4]
    d1dc:	9a02      	ldr	r2, [sp, #8]
    d1de:	f003 fddf 	bl	10da0 <_ZN8libchip814Chip8$LT$T$GT$4load17h2a4cfd313d02c69aE>
    d1e2:	e7ff      	b.n	d1e4 <_ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E+0x20>
        while self.running {
    d1e4:	e7ff      	b.n	d1e6 <_ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E+0x22>
    d1e6:	f241 0047 	movw	r0, #4167	; 0x1047
    d1ea:	9903      	ldr	r1, [sp, #12]
    d1ec:	5c08      	ldrb	r0, [r1, r0]
    d1ee:	07c0      	lsls	r0, r0, #31
    d1f0:	2800      	cmp	r0, #0
    d1f2:	d101      	bne.n	d1f8 <_ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E+0x34>
    d1f4:	e7ff      	b.n	d1f6 <_ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E+0x32>
    }
    d1f6:	e00c      	b.n	d212 <_ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E+0x4e>
            self.sched();
    d1f8:	9803      	ldr	r0, [sp, #12]
    d1fa:	f003 fe9e 	bl	10f3a <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE>
    d1fe:	e7ff      	b.n	d200 <_ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E+0x3c>
            self.eval();
    d200:	9803      	ldr	r0, [sp, #12]
    d202:	f000 f809 	bl	d218 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E>
    d206:	e7ff      	b.n	d208 <_ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E+0x44>
            self.next();
    d208:	9803      	ldr	r0, [sp, #12]
    d20a:	f003 fe04 	bl	10e16 <_ZN8libchip814Chip8$LT$T$GT$4next17h59db21f4d7eca91dE>
    d20e:	e7ff      	b.n	d210 <_ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E+0x4c>
        while self.running {
    d210:	e7e9      	b.n	d1e6 <_ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E+0x22>
    }
    d212:	b006      	add	sp, #24
    d214:	bd80      	pop	{r7, pc}
	...

0000d218 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E>:
        }

        return b' ';
    }

    fn eval(&mut self) {
    d218:	b570      	push	{r4, r5, r6, lr}
    d21a:	f5ad 6d6c 	sub.w	sp, sp, #3776	; 0xec0
    d21e:	f8cd 0c70 	str.w	r0, [sp, #3184]	; 0xc70
        let h = self.mem[self.pc as usize] as u16;
    d222:	8a41      	ldrh	r1, [r0, #18]
    d224:	460a      	mov	r2, r1
    d226:	2300      	movs	r3, #0
    d228:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    d22c:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
    d230:	f8cd 248c 	str.w	r2, [sp, #1164]	; 0x48c
    d234:	f043 82c0 	bne.w	107b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x35a0>
    d238:	e7ff      	b.n	d23a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22>
    d23a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d23e:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    d242:	1842      	adds	r2, r0, r1
    d244:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    d248:	4613      	mov	r3, r2
    d24a:	f8ad 2c76 	strh.w	r2, [sp, #3190]	; 0xc76
        let l = self.mem[(self.pc + 1) as usize] as u16;
    d24e:	8a42      	ldrh	r2, [r0, #18]
    d250:	3201      	adds	r2, #1
    d252:	fa1f fc82 	uxth.w	ip, r2
    d256:	4696      	mov	lr, r2
    d258:	4594      	cmp	ip, r2
    d25a:	f8cd 3488 	str.w	r3, [sp, #1160]	; 0x488
    d25e:	f8cd e484 	str.w	lr, [sp, #1156]	; 0x484
    d262:	f043 82b4 	bne.w	107ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x35b6>
    d266:	e7ff      	b.n	d268 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x50>
    d268:	f8dd 0484 	ldr.w	r0, [sp, #1156]	; 0x484
    d26c:	b281      	uxth	r1, r0
    d26e:	460a      	mov	r2, r1
    d270:	2300      	movs	r3, #0
    d272:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    d276:	f8cd 2480 	str.w	r2, [sp, #1152]	; 0x480
    d27a:	f043 82b4 	bne.w	107e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x35ce>
    d27e:	e7ff      	b.n	d280 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x68>
    d280:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d284:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    d288:	1842      	adds	r2, r0, r1
    d28a:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    d28e:	4613      	mov	r3, r2
    d290:	f8ad 2c78 	strh.w	r2, [sp, #3192]	; 0xc78
        let inst = h << 8 | l;
    d294:	f8dd 2488 	ldr.w	r2, [sp, #1160]	; 0x488
    d298:	ea4f 2c02 	mov.w	ip, r2, lsl #8
    d29c:	f8cd 347c 	str.w	r3, [sp, #1148]	; 0x47c
    d2a0:	f8cd c478 	str.w	ip, [sp, #1144]	; 0x478
    d2a4:	e7ff      	b.n	d2a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x8e>
    d2a6:	f8dd 0478 	ldr.w	r0, [sp, #1144]	; 0x478
    d2aa:	f8dd 147c 	ldr.w	r1, [sp, #1148]	; 0x47c
    d2ae:	ea40 0201 	orr.w	r2, r0, r1
    d2b2:	f8ad 2496 	strh.w	r2, [sp, #1174]	; 0x496

        let nnn = inst & 0xfff;
    d2b6:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    d2ba:	f36f 321f 	bfc	r2, #12, #20
    d2be:	4613      	mov	r3, r2
    d2c0:	f8ad 2c7a 	strh.w	r2, [sp, #3194]	; 0xc7a
        let n = (inst & 0xf) as usize;
    d2c4:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    d2c8:	f002 020f 	and.w	r2, r2, #15
    d2cc:	4694      	mov	ip, r2
    d2ce:	f8cd 2c7c 	str.w	r2, [sp, #3196]	; 0xc7c
        let x = ((inst >> 8) & 0xf) as usize;
    d2d2:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    d2d6:	f8cd 3474 	str.w	r3, [sp, #1140]	; 0x474
    d2da:	f8cd c470 	str.w	ip, [sp, #1136]	; 0x470
    d2de:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
    d2e2:	e7ff      	b.n	d2e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xcc>
    d2e4:	f8dd 046c 	ldr.w	r0, [sp, #1132]	; 0x46c
    d2e8:	f000 010f 	and.w	r1, r0, #15
    d2ec:	460a      	mov	r2, r1
    d2ee:	f8cd 1c80 	str.w	r1, [sp, #3200]	; 0xc80
        let y = ((inst >> 4) & 0xf) as usize;
    d2f2:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    d2f6:	0909      	lsrs	r1, r1, #4
    d2f8:	f8cd 2468 	str.w	r2, [sp, #1128]	; 0x468
    d2fc:	f8cd 1464 	str.w	r1, [sp, #1124]	; 0x464
    d300:	e7ff      	b.n	d302 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xea>
    d302:	f8dd 0464 	ldr.w	r0, [sp, #1124]	; 0x464
    d306:	f000 010f 	and.w	r1, r0, #15
    d30a:	460a      	mov	r2, r1
    d30c:	f8cd 1c84 	str.w	r1, [sp, #3204]	; 0xc84
        let kk = (inst & 0xff) as u8;
    d310:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    d314:	b2cb      	uxtb	r3, r1
    d316:	f88d 1c8b 	strb.w	r1, [sp, #3211]	; 0xc8b

        match (
            (inst >> 12) & 0xf,
    d31a:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    d31e:	0b09      	lsrs	r1, r1, #12
    d320:	f8cd 2460 	str.w	r2, [sp, #1120]	; 0x460
    d324:	f8cd 345c 	str.w	r3, [sp, #1116]	; 0x45c
    d328:	f8cd 1458 	str.w	r1, [sp, #1112]	; 0x458
    d32c:	e7ff      	b.n	d32e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x116>
    d32e:	f8dd 0458 	ldr.w	r0, [sp, #1112]	; 0x458
    d332:	f000 010f 	and.w	r1, r0, #15
            (inst >> 8) & 0xf,
    d336:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    d33a:	f8cd 1454 	str.w	r1, [sp, #1108]	; 0x454
    d33e:	f8cd 2450 	str.w	r2, [sp, #1104]	; 0x450
    d342:	e7ff      	b.n	d344 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x12c>
    d344:	f8dd 0450 	ldr.w	r0, [sp, #1104]	; 0x450
    d348:	f000 010f 	and.w	r1, r0, #15
            (inst >> 4) & 0xf,
    d34c:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    d350:	0912      	lsrs	r2, r2, #4
    d352:	f8cd 144c 	str.w	r1, [sp, #1100]	; 0x44c
    d356:	f8cd 2448 	str.w	r2, [sp, #1096]	; 0x448
    d35a:	e7ff      	b.n	d35c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x144>
    d35c:	f8dd 0448 	ldr.w	r0, [sp, #1096]	; 0x448
    d360:	f000 010f 	and.w	r1, r0, #15
            (inst >> 0) & 0xf,
    d364:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    d368:	f8cd 1444 	str.w	r1, [sp, #1092]	; 0x444
    d36c:	f8cd 2440 	str.w	r2, [sp, #1088]	; 0x440
    d370:	e7ff      	b.n	d372 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x15a>
    d372:	f8dd 0440 	ldr.w	r0, [sp, #1088]	; 0x440
    d376:	f000 010f 	and.w	r1, r0, #15
        match (
    d37a:	f8dd 2454 	ldr.w	r2, [sp, #1108]	; 0x454
    d37e:	f8ad 2498 	strh.w	r2, [sp, #1176]	; 0x498
    d382:	f8dd 344c 	ldr.w	r3, [sp, #1100]	; 0x44c
    d386:	f8ad 349a 	strh.w	r3, [sp, #1178]	; 0x49a
    d38a:	f8dd c444 	ldr.w	ip, [sp, #1092]	; 0x444
    d38e:	f8ad c49c 	strh.w	ip, [sp, #1180]	; 0x49c
    d392:	f8ad 149e 	strh.w	r1, [sp, #1182]	; 0x49e
        ) {
            (0, 0, 0xe, 0) => {
    d396:	f8bd 1498 	ldrh.w	r1, [sp, #1176]	; 0x498
    d39a:	468e      	mov	lr, r1
    d39c:	290f      	cmp	r1, #15
    d39e:	f8cd e43c 	str.w	lr, [sp, #1084]	; 0x43c
    d3a2:	d84f      	bhi.n	d444 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
    d3a4:	f8dd 143c 	ldr.w	r1, [sp, #1084]	; 0x43c
    d3a8:	e8df f011 	tbh	[pc, r1, lsl #1]
    d3ac:	03060010 	.word	0x03060010
    d3b0:	04320399 	.word	0x04320399
    d3b4:	002c04d2 	.word	0x002c04d2
    d3b8:	06b4061f 	.word	0x06b4061f
    d3bc:	00750032 	.word	0x00750032
    d3c0:	0ee40e59 	.word	0x0ee40e59
    d3c4:	10260f85 	.word	0x10260f85
    d3c8:	0095007b 	.word	0x0095007b
    d3cc:	f8bd 049a 	ldrh.w	r0, [sp, #1178]	; 0x49a
    d3d0:	2800      	cmp	r0, #0
    d3d2:	f040 8261 	bne.w	d898 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x680>
    d3d6:	e7ff      	b.n	d3d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1c0>
    d3d8:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    d3dc:	280e      	cmp	r0, #14
    d3de:	f040 825b 	bne.w	d898 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x680>
    d3e2:	e7ff      	b.n	d3e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1cc>
    d3e4:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d3e8:	4601      	mov	r1, r0
    d3ea:	2800      	cmp	r0, #0
    d3ec:	f8cd 1438 	str.w	r1, [sp, #1080]	; 0x438
    d3f0:	f000 80c0 	beq.w	d574 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x35c>
    d3f4:	e7ff      	b.n	d3f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1de>
    d3f6:	f8dd 0438 	ldr.w	r0, [sp, #1080]	; 0x438
    d3fa:	b281      	uxth	r1, r0
    d3fc:	290e      	cmp	r1, #14
    d3fe:	f000 81b6 	beq.w	d76e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x556>
    d402:	e249      	b.n	d898 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x680>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
                if self.v[x] != kk {
                    self.next();
                }
            }
            (5, _, _, 0) => {
    d404:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d408:	2800      	cmp	r0, #0
    d40a:	f000 8541 	beq.w	de90 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc78>
    d40e:	e019      	b.n	d444 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
            }
            (7, _, _, _) => {
                trace!("[{:04x}] ADD Vx, kk", self.pc);
                self.v[x] = self.v[x].wrapping_add(kk);
            }
            (8, _, _, 0) => {
    d410:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d414:	4601      	mov	r1, r0
    d416:	280e      	cmp	r0, #14
    d418:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
    d41c:	d812      	bhi.n	d444 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
    d41e:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
    d422:	e8df f011 	tbh	[pc, r1, lsl #1]
    d426:	071e      	.short	0x071e
    d428:	086707c0 	.word	0x086707c0
    d42c:	09b5090e 	.word	0x09b5090e
    d430:	0b3b0a77 	.word	0x0b3b0a77
    d434:	000f0bf0 	.word	0x000f0bf0
    d438:	000f000f 	.word	0x000f000f
    d43c:	000f000f 	.word	0x000f000f
    d440:	0cb4000f 	.word	0x0cb4000f
                let x = x as usize;
                for i in 0..(x + 1) {
                    self.v[i] = self.mem[self.i as usize + i];
                }
            }
            _ => panic!("[{:04x}] Invalid op: {:04x}", self.pc, inst), // Bad ops
    d444:	f64f 3098 	movw	r0, #64408	; 0xfb98
    d448:	f2c0 0001 	movt	r0, #1
    d44c:	6801      	ldr	r1, [r0, #0]
    d44e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d452:	f100 0212 	add.w	r2, r0, #18
    d456:	f8cd 2c68 	str.w	r2, [sp, #3176]	; 0xc68
    d45a:	f20d 4296 	addw	r2, sp, #1174	; 0x496
    d45e:	f8cd 2c6c 	str.w	r2, [sp, #3180]	; 0xc6c
    d462:	f8dd 2c68 	ldr.w	r2, [sp, #3176]	; 0xc68
    d466:	f8cd 2d60 	str.w	r2, [sp, #3424]	; 0xd60
    d46a:	f8dd 3c6c 	ldr.w	r3, [sp, #3180]	; 0xc6c
    d46e:	f8cd 3d64 	str.w	r3, [sp, #3428]	; 0xd64
    d472:	f249 1c23 	movw	ip, #37155	; 0x9123
    d476:	f2c0 0c01 	movt	ip, #1
    d47a:	4610      	mov	r0, r2
    d47c:	f8cd 1434 	str.w	r1, [sp, #1076]	; 0x434
    d480:	4661      	mov	r1, ip
    d482:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430
    d486:	f7fd f9a7 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d48a:	f8cd 042c 	str.w	r0, [sp, #1068]	; 0x42c
    d48e:	f8cd 1428 	str.w	r1, [sp, #1064]	; 0x428
    d492:	f003 b94f 	b.w	10734 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x351c>
            (9, _, _, 0) => {
    d496:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d49a:	2800      	cmp	r0, #0
    d49c:	f001 8532 	beq.w	ef04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1cec>
    d4a0:	e7d0      	b.n	d444 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
            (0xe, _, 9, 0xe) => {
    d4a2:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    d4a6:	4601      	mov	r1, r0
    d4a8:	2809      	cmp	r0, #9
    d4aa:	f8cd 1420 	str.w	r1, [sp, #1056]	; 0x420
    d4ae:	d006      	beq.n	d4be <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2a6>
    d4b0:	e7ff      	b.n	d4b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x29a>
    d4b2:	f8dd 0420 	ldr.w	r0, [sp, #1056]	; 0x420
    d4b6:	b281      	uxth	r1, r0
    d4b8:	290a      	cmp	r1, #10
    d4ba:	d006      	beq.n	d4ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2b2>
    d4bc:	e7c2      	b.n	d444 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
    d4be:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d4c2:	280e      	cmp	r0, #14
    d4c4:	f002 815b 	beq.w	f77e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2566>
    d4c8:	e7bc      	b.n	d444 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
            (0xe, _, 0xa, 0x1) => {
    d4ca:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d4ce:	2801      	cmp	r0, #1
    d4d0:	f002 81fe 	beq.w	f8d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x26b8>
    d4d4:	e7b6      	b.n	d444 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
            (0xf, _, 0, 7) => {
    d4d6:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    d4da:	4601      	mov	r1, r0
    d4dc:	2806      	cmp	r0, #6
    d4de:	f8cd 141c 	str.w	r1, [sp, #1052]	; 0x41c
    d4e2:	d8af      	bhi.n	d444 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
    d4e4:	f8dd 141c 	ldr.w	r1, [sp, #1052]	; 0x41c
    d4e8:	e8df f001 	tbb	[pc, r1]
    d4ec:	322c1505 	.word	0x322c1505
    d4f0:	003e3804 	.word	0x003e3804
    d4f4:	e7a6      	b.n	d444 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
    d4f6:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d4fa:	4601      	mov	r1, r0
    d4fc:	2807      	cmp	r0, #7
    d4fe:	f8cd 1418 	str.w	r1, [sp, #1048]	; 0x418
    d502:	f002 828e 	beq.w	fa22 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x280a>
    d506:	e7ff      	b.n	d508 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2f0>
    d508:	f8dd 0418 	ldr.w	r0, [sp, #1048]	; 0x418
    d50c:	b281      	uxth	r1, r0
    d50e:	290a      	cmp	r1, #10
    d510:	f002 8320 	beq.w	fb54 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x293c>
    d514:	e796      	b.n	d444 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
            (0xf, _, 1, 5) => {
    d516:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d51a:	4601      	mov	r1, r0
    d51c:	2805      	cmp	r0, #5
    d51e:	f8cd 1414 	str.w	r1, [sp, #1044]	; 0x414
    d522:	f002 83b1 	beq.w	fc88 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2a70>
    d526:	e7ff      	b.n	d528 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x310>
    d528:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    d52c:	b281      	uxth	r1, r0
    d52e:	2908      	cmp	r1, #8
    d530:	f002 843f 	beq.w	fdb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2b9a>
    d534:	e7ff      	b.n	d536 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x31e>
    d536:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    d53a:	b281      	uxth	r1, r0
    d53c:	290e      	cmp	r1, #14
    d53e:	f002 84cd 	beq.w	fedc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2cc4>
    d542:	e77f      	b.n	d444 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
            (0xf, _, 2, 9) => {
    d544:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d548:	2809      	cmp	r0, #9
    d54a:	f002 856b 	beq.w	10024 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2e0c>
    d54e:	e779      	b.n	d444 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
            (0xf, _, 3, 3) => {
    d550:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d554:	2803      	cmp	r0, #3
    d556:	f002 8616 	beq.w	10186 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2f6e>
    d55a:	e773      	b.n	d444 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
            (0xf, _, 5, 5) => {
    d55c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d560:	2805      	cmp	r0, #5
    d562:	f002 871f 	beq.w	103a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x318c>
    d566:	e76d      	b.n	d444 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
            (0xf, _, 6, 5) => {
    d568:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d56c:	2805      	cmp	r0, #5
    d56e:	f002 87fc 	beq.w	1056a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3352>
    d572:	e767      	b.n	d444 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
    d574:	2005      	movs	r0, #5
    d576:	f8cd 04a0 	str.w	r0, [sp, #1184]	; 0x4a0
    d57a:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    d57e:	f2c0 0001 	movt	r0, #1
    d582:	6801      	ldr	r1, [r0, #0]
    d584:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    d588:	f009 fb3c 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d58c:	f8cd 0410 	str.w	r0, [sp, #1040]	; 0x410
    d590:	e01f      	b.n	d5d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3ba>
    d592:	2001      	movs	r0, #1
    d594:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    d598:	e015      	b.n	d5c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3ae>
    d59a:	2000      	movs	r0, #0
    d59c:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    d5a0:	e011      	b.n	d5c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3ae>
    d5a2:	2000      	movs	r0, #0
/// [`debug!`]: macro.debug.html
/// [`trace!`]: macro.trace.html
/// [`set_max_level`]: fn.set_max_level.html
#[inline(always)]
pub fn max_level() -> LevelFilter {
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
    d5a4:	f88d 0dab 	strb.w	r0, [sp, #3499]	; 0xdab
    d5a8:	f89d 1dab 	ldrb.w	r1, [sp, #3499]	; 0xdab
    d5ac:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d5b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d5b4:	f003 fed5 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d5b8:	f8cd 0dac 	str.w	r0, [sp, #3500]	; 0xdac
    d5bc:	f8dd 0dac 	ldr.w	r0, [sp, #3500]	; 0xdac
    d5c0:	f8cd 04a8 	str.w	r0, [sp, #1192]	; 0x4a8
    d5c4:	e00b      	b.n	d5de <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3c6>
    d5c6:	f89d 04a7 	ldrb.w	r0, [sp, #1191]	; 0x4a7
    d5ca:	07c0      	lsls	r0, r0, #31
    d5cc:	2800      	cmp	r0, #0
    d5ce:	d115      	bne.n	d5fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3e4>
    d5d0:	e05e      	b.n	d690 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x478>
    d5d2:	f8dd 0410 	ldr.w	r0, [sp, #1040]	; 0x410
    d5d6:	07c1      	lsls	r1, r0, #31
    d5d8:	2900      	cmp	r1, #0
    d5da:	d1e2      	bne.n	d5a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x38a>
    d5dc:	e7dd      	b.n	d59a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x382>
    d5de:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    d5e2:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
    d5e6:	f009 fb0d 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d5ea:	f8cd 040c 	str.w	r0, [sp, #1036]	; 0x40c
    d5ee:	e7ff      	b.n	d5f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3d8>
    d5f0:	f8dd 040c 	ldr.w	r0, [sp, #1036]	; 0x40c
    d5f4:	07c1      	lsls	r1, r0, #31
    d5f6:	2900      	cmp	r1, #0
    d5f8:	d1cb      	bne.n	d592 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x37a>
    d5fa:	e7ce      	b.n	d59a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x382>
                trace!("[{:04x}] CLS", self.pc);
    d5fc:	f64f 6038 	movw	r0, #65080	; 0xfe38
    d600:	f2c0 0001 	movt	r0, #1
    d604:	6801      	ldr	r1, [r0, #0]
    d606:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d60a:	f100 0212 	add.w	r2, r0, #18
    d60e:	f8cd 24cc 	str.w	r2, [sp, #1228]	; 0x4cc
    d612:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
    d616:	f8cd 2d88 	str.w	r2, [sp, #3464]	; 0xd88
    d61a:	f249 1323 	movw	r3, #37155	; 0x9123
    d61e:	f2c0 0301 	movt	r3, #1
    d622:	4610      	mov	r0, r2
    d624:	f8cd 1408 	str.w	r1, [sp, #1032]	; 0x408
    d628:	4619      	mov	r1, r3
    d62a:	f7fd f8d5 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d62e:	f8cd 0404 	str.w	r0, [sp, #1028]	; 0x404
    d632:	f8cd 1400 	str.w	r1, [sp, #1024]	; 0x400
    d636:	e7ff      	b.n	d638 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x420>
    d638:	f8dd 0404 	ldr.w	r0, [sp, #1028]	; 0x404
    d63c:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
    d640:	f8dd 1400 	ldr.w	r1, [sp, #1024]	; 0x400
    d644:	f8cd 14c8 	str.w	r1, [sp, #1224]	; 0x4c8
    d648:	f24f 0238 	movw	r2, #61496	; 0xf038
    d64c:	f2c0 0201 	movt	r2, #1
    d650:	6812      	ldr	r2, [r2, #0]
    d652:	466b      	mov	r3, sp
    d654:	f04f 0c01 	mov.w	ip, #1
    d658:	f8c3 c008 	str.w	ip, [r3, #8]
    d65c:	605a      	str	r2, [r3, #4]
    d65e:	f8c3 c000 	str.w	ip, [r3]
    d662:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    d666:	2202      	movs	r2, #2
    d668:	f20d 43c4 	addw	r3, sp, #1220	; 0x4c4
    d66c:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    d670:	f009 f98d 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d674:	e7ff      	b.n	d676 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x45e>
    d676:	f8dd 14a0 	ldr.w	r1, [sp, #1184]	; 0x4a0
    d67a:	f64f 6058 	movw	r0, #65112	; 0xfe58
    d67e:	f2c0 0001 	movt	r0, #1
    d682:	6802      	ldr	r2, [r0, #0]
    d684:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    d688:	f004 fe9a 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d68c:	e7ff      	b.n	d68e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x476>
    d68e:	e7ff      	b.n	d690 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x478>
    d690:	f241 0048 	movw	r0, #4168	; 0x1048
                let (w, h) = self.hw.vram_size();
    d694:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d698:	4408      	add	r0, r1
    d69a:	f7fe ff9b 	bl	c5d4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17h93c2f95ba0774bb2E>
    d69e:	90ff      	str	r0, [sp, #1020]	; 0x3fc
    d6a0:	91fe      	str	r1, [sp, #1016]	; 0x3f8
    d6a2:	e7ff      	b.n	d6a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x48c>
    d6a4:	98ff      	ldr	r0, [sp, #1020]	; 0x3fc
    d6a6:	f8cd 0d8c 	str.w	r0, [sp, #3468]	; 0xd8c
    d6aa:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
    d6ac:	f8cd 14d0 	str.w	r1, [sp, #1232]	; 0x4d0
    d6b0:	2200      	movs	r2, #0
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d6b2:	f8cd 2538 	str.w	r2, [sp, #1336]	; 0x538
    d6b6:	f8cd 053c 	str.w	r0, [sp, #1340]	; 0x53c
    d6ba:	f50d 629a 	add.w	r2, sp, #1232	; 0x4d0
    d6be:	f8cd 2540 	str.w	r2, [sp, #1344]	; 0x540
    d6c2:	f8dd 1538 	ldr.w	r1, [sp, #1336]	; 0x538
    d6c6:	f8dd 253c 	ldr.w	r2, [sp, #1340]	; 0x53c
    d6ca:	f8dd 3540 	ldr.w	r3, [sp, #1344]	; 0x540
    d6ce:	f20d 502c 	addw	r0, sp, #1324	; 0x52c
    d6d2:	f003 ff14 	bl	114fe <_ZN4core4iter6traits8iterator8Iterator3map17hbdce026690b075d6E>
    d6d6:	e7ff      	b.n	d6d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x4c0>
    d6d8:	f50d 60a0 	add.w	r0, sp, #1280	; 0x500
    d6dc:	f20d 512c 	addw	r1, sp, #1324	; 0x52c
    d6e0:	f003 fe53 	bl	1138a <_ZN4core4iter6traits8iterator8Iterator7flatten17hdd08c3a3cf16397aE>
    d6e4:	e7ff      	b.n	d6e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x4ce>
    d6e6:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    d6ea:	f50d 61a0 	add.w	r1, sp, #1280	; 0x500
    d6ee:	f003 fe21 	bl	11334 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h3b61728407886f85E>
    d6f2:	e7ff      	b.n	d6f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x4dc>
    d6f4:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    d6f8:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    d6fc:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
    d700:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
    d704:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
    d708:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
    d70c:	e7ff      	b.n	d70e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x4f6>
    d70e:	f50d 60ae 	add.w	r0, sp, #1392	; 0x570
    d712:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    d716:	f003 fd3a 	bl	1118e <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h8b365b2b37e7ae5bE>
    d71a:	e7ff      	b.n	d71c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x504>
    d71c:	f8dd 0570 	ldr.w	r0, [sp, #1392]	; 0x570
    d720:	2800      	cmp	r0, #0
    d722:	d001      	beq.n	d728 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x510>
    d724:	e7ff      	b.n	d726 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x50e>
    d726:	e002      	b.n	d72e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x516>
        match (
    d728:	f003 b843 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d72c:	defe      	udf	#254	; 0xfe
    d72e:	f8dd 0574 	ldr.w	r0, [sp, #1396]	; 0x574
    d732:	f8dd 1578 	ldr.w	r1, [sp, #1400]	; 0x578
    d736:	f8cd 0d90 	str.w	r0, [sp, #3472]	; 0xd90
    d73a:	f8cd 1d94 	str.w	r1, [sp, #3476]	; 0xd94
    d73e:	f8cd 0d98 	str.w	r0, [sp, #3480]	; 0xd98
    d742:	f8cd 1d9c 	str.w	r1, [sp, #3484]	; 0xd9c
    d746:	f8cd 0da0 	str.w	r0, [sp, #3488]	; 0xda0
    d74a:	f8cd 1da4 	str.w	r1, [sp, #3492]	; 0xda4
    d74e:	f241 0248 	movw	r2, #4168	; 0x1048
                    self.hw.vram_set(x, y, false);
    d752:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    d756:	441a      	add	r2, r3
    d758:	2300      	movs	r3, #0
    d75a:	90fd      	str	r0, [sp, #1012]	; 0x3f4
    d75c:	4610      	mov	r0, r2
    d75e:	9afd      	ldr	r2, [sp, #1012]	; 0x3f4
    d760:	91fc      	str	r1, [sp, #1008]	; 0x3f0
    d762:	4611      	mov	r1, r2
    d764:	9afc      	ldr	r2, [sp, #1008]	; 0x3f0
    d766:	f7fe fdb0 	bl	c2ca <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE>
    d76a:	e7ff      	b.n	d76c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x554>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d76c:	e7cf      	b.n	d70e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x4f6>
    d76e:	2005      	movs	r0, #5
    d770:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
    d774:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    d778:	f2c0 0001 	movt	r0, #1
    d77c:	6801      	ldr	r1, [r0, #0]
    d77e:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    d782:	f009 fa3f 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d786:	90fb      	str	r0, [sp, #1004]	; 0x3ec
    d788:	e01f      	b.n	d7ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x5b2>
    d78a:	2001      	movs	r0, #1
    d78c:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    d790:	e015      	b.n	d7be <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x5a6>
    d792:	2000      	movs	r0, #0
    d794:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    d798:	e011      	b.n	d7be <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x5a6>
    d79a:	2000      	movs	r0, #0
    d79c:	f88d 0db3 	strb.w	r0, [sp, #3507]	; 0xdb3
    d7a0:	f89d 1db3 	ldrb.w	r1, [sp, #3507]	; 0xdb3
    d7a4:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d7a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d7ac:	f003 fdd9 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d7b0:	f8cd 0db4 	str.w	r0, [sp, #3508]	; 0xdb4
    d7b4:	f8dd 0db4 	ldr.w	r0, [sp, #3508]	; 0xdb4
    d7b8:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
    d7bc:	e00a      	b.n	d7d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x5bc>
    d7be:	f89d 0583 	ldrb.w	r0, [sp, #1411]	; 0x583
    d7c2:	07c0      	lsls	r0, r0, #31
    d7c4:	2800      	cmp	r0, #0
    d7c6:	d112      	bne.n	d7ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x5d6>
    d7c8:	e055      	b.n	d876 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x65e>
    d7ca:	98fb      	ldr	r0, [sp, #1004]	; 0x3ec
    d7cc:	07c1      	lsls	r1, r0, #31
    d7ce:	2900      	cmp	r1, #0
    d7d0:	d1e3      	bne.n	d79a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x582>
    d7d2:	e7de      	b.n	d792 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x57a>
    d7d4:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    d7d8:	f20d 5184 	addw	r1, sp, #1412	; 0x584
    d7dc:	f009 fa12 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d7e0:	90fa      	str	r0, [sp, #1000]	; 0x3e8
    d7e2:	e7ff      	b.n	d7e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x5cc>
    d7e4:	98fa      	ldr	r0, [sp, #1000]	; 0x3e8
    d7e6:	07c1      	lsls	r1, r0, #31
    d7e8:	2900      	cmp	r1, #0
    d7ea:	d1ce      	bne.n	d78a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x572>
    d7ec:	e7d1      	b.n	d792 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x57a>
                trace!("[{:04x}] RET", self.pc);
    d7ee:	f64f 50fc 	movw	r0, #65020	; 0xfdfc
    d7f2:	f2c0 0001 	movt	r0, #1
    d7f6:	6801      	ldr	r1, [r0, #0]
    d7f8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d7fc:	f100 0212 	add.w	r2, r0, #18
    d800:	f8cd 25a8 	str.w	r2, [sp, #1448]	; 0x5a8
    d804:	f8dd 25a8 	ldr.w	r2, [sp, #1448]	; 0x5a8
    d808:	f8cd 2d80 	str.w	r2, [sp, #3456]	; 0xd80
    d80c:	f249 1323 	movw	r3, #37155	; 0x9123
    d810:	f2c0 0301 	movt	r3, #1
    d814:	4610      	mov	r0, r2
    d816:	91f9      	str	r1, [sp, #996]	; 0x3e4
    d818:	4619      	mov	r1, r3
    d81a:	f7fc ffdd 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d81e:	90f8      	str	r0, [sp, #992]	; 0x3e0
    d820:	91f7      	str	r1, [sp, #988]	; 0x3dc
    d822:	e7ff      	b.n	d824 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x60c>
    d824:	98f8      	ldr	r0, [sp, #992]	; 0x3e0
    d826:	f8cd 05a0 	str.w	r0, [sp, #1440]	; 0x5a0
    d82a:	99f7      	ldr	r1, [sp, #988]	; 0x3dc
    d82c:	f8cd 15a4 	str.w	r1, [sp, #1444]	; 0x5a4
    d830:	f24f 0238 	movw	r2, #61496	; 0xf038
    d834:	f2c0 0201 	movt	r2, #1
    d838:	6812      	ldr	r2, [r2, #0]
    d83a:	466b      	mov	r3, sp
    d83c:	f04f 0c01 	mov.w	ip, #1
    d840:	f8c3 c008 	str.w	ip, [r3, #8]
    d844:	605a      	str	r2, [r3, #4]
    d846:	f8c3 c000 	str.w	ip, [r3]
    d84a:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    d84e:	2202      	movs	r2, #2
    d850:	f50d 63b4 	add.w	r3, sp, #1440	; 0x5a0
    d854:	99f9      	ldr	r1, [sp, #996]	; 0x3e4
    d856:	f009 f89a 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d85a:	e7ff      	b.n	d85c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x644>
    d85c:	f8dd 157c 	ldr.w	r1, [sp, #1404]	; 0x57c
    d860:	f64f 601c 	movw	r0, #65052	; 0xfe1c
    d864:	f2c0 0001 	movt	r0, #1
    d868:	6802      	ldr	r2, [r0, #0]
    d86a:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    d86e:	f004 fda7 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d872:	e7ff      	b.n	d874 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x65c>
    d874:	e7ff      	b.n	d876 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x65e>
                let addr = self.pop();
    d876:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d87a:	f7ff fc78 	bl	d16e <_ZN8libchip814Chip8$LT$T$GT$3pop17h503862bdc0785684E>
    d87e:	4601      	mov	r1, r0
    d880:	f8ad 0d86 	strh.w	r0, [sp, #3462]	; 0xd86
    d884:	91f6      	str	r1, [sp, #984]	; 0x3d8
    d886:	e7ff      	b.n	d888 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x670>
                self.jump(addr);
    d888:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d88c:	99f6      	ldr	r1, [sp, #984]	; 0x3d8
    d88e:	f003 fa7f 	bl	10d90 <_ZN8libchip814Chip8$LT$T$GT$4jump17h930b3c38e90d0056E>
    d892:	e7ff      	b.n	d894 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x67c>
        match (
    d894:	f002 bf8d 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    d898:	2005      	movs	r0, #5
    d89a:	f8cd 05ac 	str.w	r0, [sp, #1452]	; 0x5ac
    d89e:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    d8a2:	f2c0 0001 	movt	r0, #1
    d8a6:	6801      	ldr	r1, [r0, #0]
    d8a8:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    d8ac:	f009 f9aa 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d8b0:	90f5      	str	r0, [sp, #980]	; 0x3d4
    d8b2:	e01f      	b.n	d8f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x6dc>
    d8b4:	2001      	movs	r0, #1
    d8b6:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    d8ba:	e015      	b.n	d8e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x6d0>
    d8bc:	2000      	movs	r0, #0
    d8be:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    d8c2:	e011      	b.n	d8e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x6d0>
    d8c4:	2000      	movs	r0, #0
    d8c6:	f88d 0dbb 	strb.w	r0, [sp, #3515]	; 0xdbb
    d8ca:	f89d 1dbb 	ldrb.w	r1, [sp, #3515]	; 0xdbb
    d8ce:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d8d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d8d6:	f003 fd44 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d8da:	f8cd 0dbc 	str.w	r0, [sp, #3516]	; 0xdbc
    d8de:	f8dd 0dbc 	ldr.w	r0, [sp, #3516]	; 0xdbc
    d8e2:	f8cd 05b4 	str.w	r0, [sp, #1460]	; 0x5b4
    d8e6:	e00a      	b.n	d8fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x6e6>
    d8e8:	f89d 05b3 	ldrb.w	r0, [sp, #1459]	; 0x5b3
    d8ec:	07c0      	lsls	r0, r0, #31
    d8ee:	2800      	cmp	r0, #0
    d8f0:	d112      	bne.n	d918 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x700>
    d8f2:	e055      	b.n	d9a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x788>
    d8f4:	98f5      	ldr	r0, [sp, #980]	; 0x3d4
    d8f6:	07c1      	lsls	r1, r0, #31
    d8f8:	2900      	cmp	r1, #0
    d8fa:	d1e3      	bne.n	d8c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x6ac>
    d8fc:	e7de      	b.n	d8bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x6a4>
    d8fe:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    d902:	f20d 51b4 	addw	r1, sp, #1460	; 0x5b4
    d906:	f009 f97d 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d90a:	90f4      	str	r0, [sp, #976]	; 0x3d0
    d90c:	e7ff      	b.n	d90e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x6f6>
    d90e:	98f4      	ldr	r0, [sp, #976]	; 0x3d0
    d910:	07c1      	lsls	r1, r0, #31
    d912:	2900      	cmp	r1, #0
    d914:	d1ce      	bne.n	d8b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x69c>
    d916:	e7d1      	b.n	d8bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x6a4>
                trace!("[{:04x}] SYS nnn", self.pc);
    d918:	f64f 50a0 	movw	r0, #64928	; 0xfda0
    d91c:	f2c0 0001 	movt	r0, #1
    d920:	6801      	ldr	r1, [r0, #0]
    d922:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d926:	f100 0212 	add.w	r2, r0, #18
    d92a:	f8cd 25d8 	str.w	r2, [sp, #1496]	; 0x5d8
    d92e:	f8dd 25d8 	ldr.w	r2, [sp, #1496]	; 0x5d8
    d932:	f8cd 2d7c 	str.w	r2, [sp, #3452]	; 0xd7c
    d936:	f249 1323 	movw	r3, #37155	; 0x9123
    d93a:	f2c0 0301 	movt	r3, #1
    d93e:	4610      	mov	r0, r2
    d940:	91f3      	str	r1, [sp, #972]	; 0x3cc
    d942:	4619      	mov	r1, r3
    d944:	f7fc ff48 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d948:	90f2      	str	r0, [sp, #968]	; 0x3c8
    d94a:	91f1      	str	r1, [sp, #964]	; 0x3c4
    d94c:	e7ff      	b.n	d94e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x736>
    d94e:	98f2      	ldr	r0, [sp, #968]	; 0x3c8
    d950:	f8cd 05d0 	str.w	r0, [sp, #1488]	; 0x5d0
    d954:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
    d956:	f8cd 15d4 	str.w	r1, [sp, #1492]	; 0x5d4
    d95a:	f24f 0238 	movw	r2, #61496	; 0xf038
    d95e:	f2c0 0201 	movt	r2, #1
    d962:	6812      	ldr	r2, [r2, #0]
    d964:	466b      	mov	r3, sp
    d966:	f04f 0c01 	mov.w	ip, #1
    d96a:	f8c3 c008 	str.w	ip, [r3, #8]
    d96e:	605a      	str	r2, [r3, #4]
    d970:	f8c3 c000 	str.w	ip, [r3]
    d974:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    d978:	2202      	movs	r2, #2
    d97a:	f50d 63ba 	add.w	r3, sp, #1488	; 0x5d0
    d97e:	99f3      	ldr	r1, [sp, #972]	; 0x3cc
    d980:	f009 f805 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d984:	e7ff      	b.n	d986 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x76e>
    d986:	f8dd 15ac 	ldr.w	r1, [sp, #1452]	; 0x5ac
    d98a:	f64f 50c0 	movw	r0, #64960	; 0xfdc0
    d98e:	f2c0 0001 	movt	r0, #1
    d992:	6802      	ldr	r2, [r0, #0]
    d994:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    d998:	f004 fd12 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d99c:	e7ff      	b.n	d99e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x786>
    d99e:	e7ff      	b.n	d9a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x788>
    d9a0:	f64f 50c4 	movw	r0, #64964	; 0xfdc4
    d9a4:	f2c0 0001 	movt	r0, #1
    d9a8:	f64f 52d4 	movw	r2, #64980	; 0xfdd4
    d9ac:	f2c0 0201 	movt	r2, #1
    d9b0:	210f      	movs	r1, #15
    d9b2:	f009 ffa9 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d9b6:	defe      	udf	#254	; 0xfe
    d9b8:	2005      	movs	r0, #5
    d9ba:	f8cd 05dc 	str.w	r0, [sp, #1500]	; 0x5dc
    d9be:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    d9c2:	f2c0 0001 	movt	r0, #1
    d9c6:	6801      	ldr	r1, [r0, #0]
    d9c8:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    d9cc:	f009 f91a 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d9d0:	90f0      	str	r0, [sp, #960]	; 0x3c0
    d9d2:	e01f      	b.n	da14 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x7fc>
    d9d4:	2001      	movs	r0, #1
    d9d6:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    d9da:	e015      	b.n	da08 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x7f0>
    d9dc:	2000      	movs	r0, #0
    d9de:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    d9e2:	e011      	b.n	da08 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x7f0>
    d9e4:	2000      	movs	r0, #0
    d9e6:	f88d 0dc3 	strb.w	r0, [sp, #3523]	; 0xdc3
    d9ea:	f89d 1dc3 	ldrb.w	r1, [sp, #3523]	; 0xdc3
    d9ee:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d9f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d9f6:	f003 fcb4 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d9fa:	f8cd 0dc4 	str.w	r0, [sp, #3524]	; 0xdc4
    d9fe:	f8dd 0dc4 	ldr.w	r0, [sp, #3524]	; 0xdc4
    da02:	f8cd 05e4 	str.w	r0, [sp, #1508]	; 0x5e4
    da06:	e00a      	b.n	da1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x806>
    da08:	f89d 05e3 	ldrb.w	r0, [sp, #1507]	; 0x5e3
    da0c:	07c0      	lsls	r0, r0, #31
    da0e:	2800      	cmp	r0, #0
    da10:	d112      	bne.n	da38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x820>
    da12:	e055      	b.n	dac0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x8a8>
    da14:	98f0      	ldr	r0, [sp, #960]	; 0x3c0
    da16:	07c1      	lsls	r1, r0, #31
    da18:	2900      	cmp	r1, #0
    da1a:	d1e3      	bne.n	d9e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x7cc>
    da1c:	e7de      	b.n	d9dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x7c4>
    da1e:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    da22:	f20d 51e4 	addw	r1, sp, #1508	; 0x5e4
    da26:	f009 f8ed 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    da2a:	90ef      	str	r0, [sp, #956]	; 0x3bc
    da2c:	e7ff      	b.n	da2e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x816>
    da2e:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
    da30:	07c1      	lsls	r1, r0, #31
    da32:	2900      	cmp	r1, #0
    da34:	d1ce      	bne.n	d9d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x7bc>
    da36:	e7d1      	b.n	d9dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x7c4>
                trace!("[{:04x}] JP nnn", self.pc);
    da38:	f64f 5060 	movw	r0, #64864	; 0xfd60
    da3c:	f2c0 0001 	movt	r0, #1
    da40:	6801      	ldr	r1, [r0, #0]
    da42:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    da46:	f100 0212 	add.w	r2, r0, #18
    da4a:	f8cd 2608 	str.w	r2, [sp, #1544]	; 0x608
    da4e:	f8dd 2608 	ldr.w	r2, [sp, #1544]	; 0x608
    da52:	f8cd 2d78 	str.w	r2, [sp, #3448]	; 0xd78
    da56:	f249 1323 	movw	r3, #37155	; 0x9123
    da5a:	f2c0 0301 	movt	r3, #1
    da5e:	4610      	mov	r0, r2
    da60:	91ee      	str	r1, [sp, #952]	; 0x3b8
    da62:	4619      	mov	r1, r3
    da64:	f7fc feb8 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    da68:	90ed      	str	r0, [sp, #948]	; 0x3b4
    da6a:	91ec      	str	r1, [sp, #944]	; 0x3b0
    da6c:	e7ff      	b.n	da6e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x856>
    da6e:	98ed      	ldr	r0, [sp, #948]	; 0x3b4
    da70:	f8cd 0600 	str.w	r0, [sp, #1536]	; 0x600
    da74:	99ec      	ldr	r1, [sp, #944]	; 0x3b0
    da76:	f8cd 1604 	str.w	r1, [sp, #1540]	; 0x604
    da7a:	f24f 0238 	movw	r2, #61496	; 0xf038
    da7e:	f2c0 0201 	movt	r2, #1
    da82:	6812      	ldr	r2, [r2, #0]
    da84:	466b      	mov	r3, sp
    da86:	f04f 0c01 	mov.w	ip, #1
    da8a:	f8c3 c008 	str.w	ip, [r3, #8]
    da8e:	605a      	str	r2, [r3, #4]
    da90:	f8c3 c000 	str.w	ip, [r3]
    da94:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    da98:	2202      	movs	r2, #2
    da9a:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
    da9e:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
    daa0:	f008 ff75 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    daa4:	e7ff      	b.n	daa6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x88e>
    daa6:	f8dd 15dc 	ldr.w	r1, [sp, #1500]	; 0x5dc
    daaa:	f64f 5080 	movw	r0, #64896	; 0xfd80
    daae:	f2c0 0001 	movt	r0, #1
    dab2:	6802      	ldr	r2, [r0, #0]
    dab4:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    dab8:	f004 fc82 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dabc:	e7ff      	b.n	dabe <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x8a6>
    dabe:	e7ff      	b.n	dac0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x8a8>
    dac0:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    dac2:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    dac6:	f009 f874 	bl	16bb2 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    daca:	90eb      	str	r0, [sp, #940]	; 0x3ac
    dacc:	e7ff      	b.n	dace <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x8b6>
    dace:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dad2:	99eb      	ldr	r1, [sp, #940]	; 0x3ac
    dad4:	f003 f95c 	bl	10d90 <_ZN8libchip814Chip8$LT$T$GT$4jump17h930b3c38e90d0056E>
    dad8:	e7ff      	b.n	dada <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x8c2>
        match (
    dada:	f002 be6a 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    dade:	2005      	movs	r0, #5
    dae0:	f8cd 060c 	str.w	r0, [sp, #1548]	; 0x60c
    dae4:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    dae8:	f2c0 0001 	movt	r0, #1
    daec:	6801      	ldr	r1, [r0, #0]
    daee:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    daf2:	f009 f887 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    daf6:	90ea      	str	r0, [sp, #936]	; 0x3a8
    daf8:	e01f      	b.n	db3a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x922>
    dafa:	2001      	movs	r0, #1
    dafc:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    db00:	e015      	b.n	db2e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x916>
    db02:	2000      	movs	r0, #0
    db04:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    db08:	e011      	b.n	db2e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x916>
    db0a:	2000      	movs	r0, #0
    db0c:	f88d 0dcb 	strb.w	r0, [sp, #3531]	; 0xdcb
    db10:	f89d 1dcb 	ldrb.w	r1, [sp, #3531]	; 0xdcb
    db14:	f644 206c 	movw	r0, #19052	; 0x4a6c
    db18:	f2c2 0000 	movt	r0, #8192	; 0x2000
    db1c:	f003 fc21 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    db20:	f8cd 0dcc 	str.w	r0, [sp, #3532]	; 0xdcc
    db24:	f8dd 0dcc 	ldr.w	r0, [sp, #3532]	; 0xdcc
    db28:	f8cd 0614 	str.w	r0, [sp, #1556]	; 0x614
    db2c:	e00a      	b.n	db44 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x92c>
    db2e:	f89d 0613 	ldrb.w	r0, [sp, #1555]	; 0x613
    db32:	07c0      	lsls	r0, r0, #31
    db34:	2800      	cmp	r0, #0
    db36:	d112      	bne.n	db5e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x946>
    db38:	e055      	b.n	dbe6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x9ce>
    db3a:	98ea      	ldr	r0, [sp, #936]	; 0x3a8
    db3c:	07c1      	lsls	r1, r0, #31
    db3e:	2900      	cmp	r1, #0
    db40:	d1e3      	bne.n	db0a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x8f2>
    db42:	e7de      	b.n	db02 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x8ea>
    db44:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    db48:	f20d 6114 	addw	r1, sp, #1556	; 0x614
    db4c:	f009 f85a 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    db50:	90e9      	str	r0, [sp, #932]	; 0x3a4
    db52:	e7ff      	b.n	db54 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x93c>
    db54:	98e9      	ldr	r0, [sp, #932]	; 0x3a4
    db56:	07c1      	lsls	r1, r0, #31
    db58:	2900      	cmp	r1, #0
    db5a:	d1ce      	bne.n	dafa <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x8e2>
    db5c:	e7d1      	b.n	db02 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x8ea>
                trace!("[{:04x}] CALL nnn", self.pc);
    db5e:	f64f 502c 	movw	r0, #64812	; 0xfd2c
    db62:	f2c0 0001 	movt	r0, #1
    db66:	6801      	ldr	r1, [r0, #0]
    db68:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    db6c:	f100 0212 	add.w	r2, r0, #18
    db70:	f8cd 2638 	str.w	r2, [sp, #1592]	; 0x638
    db74:	f8dd 2638 	ldr.w	r2, [sp, #1592]	; 0x638
    db78:	f8cd 2d74 	str.w	r2, [sp, #3444]	; 0xd74
    db7c:	f249 1323 	movw	r3, #37155	; 0x9123
    db80:	f2c0 0301 	movt	r3, #1
    db84:	4610      	mov	r0, r2
    db86:	91e8      	str	r1, [sp, #928]	; 0x3a0
    db88:	4619      	mov	r1, r3
    db8a:	f7fc fe25 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    db8e:	90e7      	str	r0, [sp, #924]	; 0x39c
    db90:	91e6      	str	r1, [sp, #920]	; 0x398
    db92:	e7ff      	b.n	db94 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x97c>
    db94:	98e7      	ldr	r0, [sp, #924]	; 0x39c
    db96:	f8cd 0630 	str.w	r0, [sp, #1584]	; 0x630
    db9a:	99e6      	ldr	r1, [sp, #920]	; 0x398
    db9c:	f8cd 1634 	str.w	r1, [sp, #1588]	; 0x634
    dba0:	f24f 0238 	movw	r2, #61496	; 0xf038
    dba4:	f2c0 0201 	movt	r2, #1
    dba8:	6812      	ldr	r2, [r2, #0]
    dbaa:	466b      	mov	r3, sp
    dbac:	f04f 0c01 	mov.w	ip, #1
    dbb0:	f8c3 c008 	str.w	ip, [r3, #8]
    dbb4:	605a      	str	r2, [r3, #4]
    dbb6:	f8c3 c000 	str.w	ip, [r3]
    dbba:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    dbbe:	2202      	movs	r2, #2
    dbc0:	f50d 63c6 	add.w	r3, sp, #1584	; 0x630
    dbc4:	99e8      	ldr	r1, [sp, #928]	; 0x3a0
    dbc6:	f008 fee2 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    dbca:	e7ff      	b.n	dbcc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x9b4>
    dbcc:	f8dd 160c 	ldr.w	r1, [sp, #1548]	; 0x60c
    dbd0:	f64f 504c 	movw	r0, #64844	; 0xfd4c
    dbd4:	f2c0 0001 	movt	r0, #1
    dbd8:	6802      	ldr	r2, [r0, #0]
    dbda:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    dbde:	f004 fbef 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dbe2:	e7ff      	b.n	dbe4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x9cc>
    dbe4:	e7ff      	b.n	dbe6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x9ce>
                self.push(self.pc);
    dbe6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dbea:	8a41      	ldrh	r1, [r0, #18]
    dbec:	f003 f926 	bl	10e3c <_ZN8libchip814Chip8$LT$T$GT$4push17h7098654a82bc65c4E>
    dbf0:	e7ff      	b.n	dbf2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x9da>
    dbf2:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    dbf4:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    dbf8:	f008 ffdb 	bl	16bb2 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    dbfc:	90e5      	str	r0, [sp, #916]	; 0x394
    dbfe:	e7ff      	b.n	dc00 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x9e8>
    dc00:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dc04:	99e5      	ldr	r1, [sp, #916]	; 0x394
    dc06:	f003 f8c3 	bl	10d90 <_ZN8libchip814Chip8$LT$T$GT$4jump17h930b3c38e90d0056E>
    dc0a:	e7ff      	b.n	dc0c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x9f4>
        match (
    dc0c:	f002 bdd1 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    dc10:	2005      	movs	r0, #5
    dc12:	f8cd 063c 	str.w	r0, [sp, #1596]	; 0x63c
    dc16:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    dc1a:	f2c0 0001 	movt	r0, #1
    dc1e:	6801      	ldr	r1, [r0, #0]
    dc20:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    dc24:	f008 ffee 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dc28:	90e4      	str	r0, [sp, #912]	; 0x390
    dc2a:	e01f      	b.n	dc6c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xa54>
    dc2c:	2001      	movs	r0, #1
    dc2e:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    dc32:	e015      	b.n	dc60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xa48>
    dc34:	2000      	movs	r0, #0
    dc36:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    dc3a:	e011      	b.n	dc60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xa48>
    dc3c:	2000      	movs	r0, #0
    dc3e:	f88d 0dd3 	strb.w	r0, [sp, #3539]	; 0xdd3
    dc42:	f89d 1dd3 	ldrb.w	r1, [sp, #3539]	; 0xdd3
    dc46:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dc4a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dc4e:	f003 fb88 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    dc52:	f8cd 0dd4 	str.w	r0, [sp, #3540]	; 0xdd4
    dc56:	f8dd 0dd4 	ldr.w	r0, [sp, #3540]	; 0xdd4
    dc5a:	f8cd 0644 	str.w	r0, [sp, #1604]	; 0x644
    dc5e:	e00a      	b.n	dc76 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xa5e>
    dc60:	f89d 0643 	ldrb.w	r0, [sp, #1603]	; 0x643
    dc64:	07c0      	lsls	r0, r0, #31
    dc66:	2800      	cmp	r0, #0
    dc68:	d112      	bne.n	dc90 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xa78>
    dc6a:	e055      	b.n	dd18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb00>
    dc6c:	98e4      	ldr	r0, [sp, #912]	; 0x390
    dc6e:	07c1      	lsls	r1, r0, #31
    dc70:	2900      	cmp	r1, #0
    dc72:	d1e3      	bne.n	dc3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xa24>
    dc74:	e7de      	b.n	dc34 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xa1c>
    dc76:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    dc7a:	f20d 6144 	addw	r1, sp, #1604	; 0x644
    dc7e:	f008 ffc1 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dc82:	90e3      	str	r0, [sp, #908]	; 0x38c
    dc84:	e7ff      	b.n	dc86 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xa6e>
    dc86:	98e3      	ldr	r0, [sp, #908]	; 0x38c
    dc88:	07c1      	lsls	r1, r0, #31
    dc8a:	2900      	cmp	r1, #0
    dc8c:	d1ce      	bne.n	dc2c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xa14>
    dc8e:	e7d1      	b.n	dc34 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xa1c>
                trace!("[{:04x}] SE Vx kk", self.pc);
    dc90:	f64f 40dc 	movw	r0, #64732	; 0xfcdc
    dc94:	f2c0 0001 	movt	r0, #1
    dc98:	6801      	ldr	r1, [r0, #0]
    dc9a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dc9e:	f100 0212 	add.w	r2, r0, #18
    dca2:	f8cd 2668 	str.w	r2, [sp, #1640]	; 0x668
    dca6:	f8dd 2668 	ldr.w	r2, [sp, #1640]	; 0x668
    dcaa:	f8cd 2d70 	str.w	r2, [sp, #3440]	; 0xd70
    dcae:	f249 1323 	movw	r3, #37155	; 0x9123
    dcb2:	f2c0 0301 	movt	r3, #1
    dcb6:	4610      	mov	r0, r2
    dcb8:	91e2      	str	r1, [sp, #904]	; 0x388
    dcba:	4619      	mov	r1, r3
    dcbc:	f7fc fd8c 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dcc0:	90e1      	str	r0, [sp, #900]	; 0x384
    dcc2:	91e0      	str	r1, [sp, #896]	; 0x380
    dcc4:	e7ff      	b.n	dcc6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xaae>
    dcc6:	98e1      	ldr	r0, [sp, #900]	; 0x384
    dcc8:	f8cd 0660 	str.w	r0, [sp, #1632]	; 0x660
    dccc:	99e0      	ldr	r1, [sp, #896]	; 0x380
    dcce:	f8cd 1664 	str.w	r1, [sp, #1636]	; 0x664
    dcd2:	f24f 0238 	movw	r2, #61496	; 0xf038
    dcd6:	f2c0 0201 	movt	r2, #1
    dcda:	6812      	ldr	r2, [r2, #0]
    dcdc:	466b      	mov	r3, sp
    dcde:	f04f 0c01 	mov.w	ip, #1
    dce2:	f8c3 c008 	str.w	ip, [r3, #8]
    dce6:	605a      	str	r2, [r3, #4]
    dce8:	f8c3 c000 	str.w	ip, [r3]
    dcec:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    dcf0:	2202      	movs	r2, #2
    dcf2:	f50d 63cc 	add.w	r3, sp, #1632	; 0x660
    dcf6:	99e2      	ldr	r1, [sp, #904]	; 0x388
    dcf8:	f008 fe49 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    dcfc:	e7ff      	b.n	dcfe <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xae6>
    dcfe:	f8dd 163c 	ldr.w	r1, [sp, #1596]	; 0x63c
    dd02:	f64f 40fc 	movw	r0, #64764	; 0xfcfc
    dd06:	f2c0 0001 	movt	r0, #1
    dd0a:	6802      	ldr	r2, [r0, #0]
    dd0c:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    dd10:	f004 fb56 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dd14:	e7ff      	b.n	dd16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xafe>
    dd16:	e7ff      	b.n	dd18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb00>
                if self.v[x] == kk {
    dd18:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    dd1c:	280f      	cmp	r0, #15
    dd1e:	f203 8011 	bhi.w	10d44 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3b2c>
    dd22:	e7ff      	b.n	dd24 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb0c>
    dd24:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dd28:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    dd2c:	1842      	adds	r2, r0, r1
    dd2e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    dd32:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    dd36:	fa5f fc83 	uxtb.w	ip, r3
    dd3a:	4562      	cmp	r2, ip
    dd3c:	d106      	bne.n	dd4c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb34>
    dd3e:	e7ff      	b.n	dd40 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb28>
                    self.next();
    dd40:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dd44:	f003 f867 	bl	10e16 <_ZN8libchip814Chip8$LT$T$GT$4next17h59db21f4d7eca91dE>
    dd48:	e7ff      	b.n	dd4a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb32>
                if self.v[x] == kk {
    dd4a:	e7ff      	b.n	dd4c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb34>
        match (
    dd4c:	f002 bd31 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    dd50:	2005      	movs	r0, #5
    dd52:	f8cd 066c 	str.w	r0, [sp, #1644]	; 0x66c
    dd56:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    dd5a:	f2c0 0001 	movt	r0, #1
    dd5e:	6801      	ldr	r1, [r0, #0]
    dd60:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    dd64:	f008 ff4e 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dd68:	90df      	str	r0, [sp, #892]	; 0x37c
    dd6a:	e01f      	b.n	ddac <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb94>
    dd6c:	2001      	movs	r0, #1
    dd6e:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    dd72:	e015      	b.n	dda0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb88>
    dd74:	2000      	movs	r0, #0
    dd76:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    dd7a:	e011      	b.n	dda0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb88>
    dd7c:	2000      	movs	r0, #0
    dd7e:	f88d 0ddb 	strb.w	r0, [sp, #3547]	; 0xddb
    dd82:	f89d 1ddb 	ldrb.w	r1, [sp, #3547]	; 0xddb
    dd86:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dd8a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dd8e:	f003 fae8 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    dd92:	f8cd 0ddc 	str.w	r0, [sp, #3548]	; 0xddc
    dd96:	f8dd 0ddc 	ldr.w	r0, [sp, #3548]	; 0xddc
    dd9a:	f8cd 0674 	str.w	r0, [sp, #1652]	; 0x674
    dd9e:	e00a      	b.n	ddb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb9e>
    dda0:	f89d 0673 	ldrb.w	r0, [sp, #1651]	; 0x673
    dda4:	07c0      	lsls	r0, r0, #31
    dda6:	2800      	cmp	r0, #0
    dda8:	d112      	bne.n	ddd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xbb8>
    ddaa:	e055      	b.n	de58 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc40>
    ddac:	98df      	ldr	r0, [sp, #892]	; 0x37c
    ddae:	07c1      	lsls	r1, r0, #31
    ddb0:	2900      	cmp	r1, #0
    ddb2:	d1e3      	bne.n	dd7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb64>
    ddb4:	e7de      	b.n	dd74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb5c>
    ddb6:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    ddba:	f20d 6174 	addw	r1, sp, #1652	; 0x674
    ddbe:	f008 ff21 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ddc2:	90de      	str	r0, [sp, #888]	; 0x378
    ddc4:	e7ff      	b.n	ddc6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xbae>
    ddc6:	98de      	ldr	r0, [sp, #888]	; 0x378
    ddc8:	07c1      	lsls	r1, r0, #31
    ddca:	2900      	cmp	r1, #0
    ddcc:	d1ce      	bne.n	dd6c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb54>
    ddce:	e7d1      	b.n	dd74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb5c>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
    ddd0:	f64f 408c 	movw	r0, #64652	; 0xfc8c
    ddd4:	f2c0 0001 	movt	r0, #1
    ddd8:	6801      	ldr	r1, [r0, #0]
    ddda:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ddde:	f100 0212 	add.w	r2, r0, #18
    dde2:	f8cd 2698 	str.w	r2, [sp, #1688]	; 0x698
    dde6:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
    ddea:	f8cd 2d6c 	str.w	r2, [sp, #3436]	; 0xd6c
    ddee:	f249 1323 	movw	r3, #37155	; 0x9123
    ddf2:	f2c0 0301 	movt	r3, #1
    ddf6:	4610      	mov	r0, r2
    ddf8:	91dd      	str	r1, [sp, #884]	; 0x374
    ddfa:	4619      	mov	r1, r3
    ddfc:	f7fc fcec 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    de00:	90dc      	str	r0, [sp, #880]	; 0x370
    de02:	91db      	str	r1, [sp, #876]	; 0x36c
    de04:	e7ff      	b.n	de06 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xbee>
    de06:	98dc      	ldr	r0, [sp, #880]	; 0x370
    de08:	f8cd 0690 	str.w	r0, [sp, #1680]	; 0x690
    de0c:	99db      	ldr	r1, [sp, #876]	; 0x36c
    de0e:	f8cd 1694 	str.w	r1, [sp, #1684]	; 0x694
    de12:	f24f 0238 	movw	r2, #61496	; 0xf038
    de16:	f2c0 0201 	movt	r2, #1
    de1a:	6812      	ldr	r2, [r2, #0]
    de1c:	466b      	mov	r3, sp
    de1e:	f04f 0c01 	mov.w	ip, #1
    de22:	f8c3 c008 	str.w	ip, [r3, #8]
    de26:	605a      	str	r2, [r3, #4]
    de28:	f8c3 c000 	str.w	ip, [r3]
    de2c:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    de30:	2202      	movs	r2, #2
    de32:	f50d 63d2 	add.w	r3, sp, #1680	; 0x690
    de36:	99dd      	ldr	r1, [sp, #884]	; 0x374
    de38:	f008 fda9 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    de3c:	e7ff      	b.n	de3e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc26>
    de3e:	f8dd 166c 	ldr.w	r1, [sp, #1644]	; 0x66c
    de42:	f64f 40ac 	movw	r0, #64684	; 0xfcac
    de46:	f2c0 0001 	movt	r0, #1
    de4a:	6802      	ldr	r2, [r0, #0]
    de4c:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    de50:	f004 fab6 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    de54:	e7ff      	b.n	de56 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc3e>
    de56:	e7ff      	b.n	de58 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc40>
                if self.v[x] != kk {
    de58:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    de5c:	280f      	cmp	r0, #15
    de5e:	f202 8767 	bhi.w	10d30 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3b18>
    de62:	e7ff      	b.n	de64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc4c>
    de64:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    de68:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    de6c:	1842      	adds	r2, r0, r1
    de6e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    de72:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    de76:	fa5f fc83 	uxtb.w	ip, r3
    de7a:	4562      	cmp	r2, ip
    de7c:	d006      	beq.n	de8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc74>
    de7e:	e7ff      	b.n	de80 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc68>
                    self.next();
    de80:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    de84:	f002 ffc7 	bl	10e16 <_ZN8libchip814Chip8$LT$T$GT$4next17h59db21f4d7eca91dE>
    de88:	e7ff      	b.n	de8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc72>
                if self.v[x] != kk {
    de8a:	e7ff      	b.n	de8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc74>
        match (
    de8c:	f002 bc91 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    de90:	2005      	movs	r0, #5
    de92:	f8cd 069c 	str.w	r0, [sp, #1692]	; 0x69c
    de96:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    de9a:	f2c0 0001 	movt	r0, #1
    de9e:	6801      	ldr	r1, [r0, #0]
    dea0:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    dea4:	f008 feae 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dea8:	90da      	str	r0, [sp, #872]	; 0x368
    deaa:	e01f      	b.n	deec <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xcd4>
    deac:	2001      	movs	r0, #1
    deae:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    deb2:	e015      	b.n	dee0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xcc8>
    deb4:	2000      	movs	r0, #0
    deb6:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    deba:	e011      	b.n	dee0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xcc8>
    debc:	2000      	movs	r0, #0
    debe:	f88d 0de3 	strb.w	r0, [sp, #3555]	; 0xde3
    dec2:	f89d 1de3 	ldrb.w	r1, [sp, #3555]	; 0xde3
    dec6:	f644 206c 	movw	r0, #19052	; 0x4a6c
    deca:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dece:	f003 fa48 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ded2:	f8cd 0de4 	str.w	r0, [sp, #3556]	; 0xde4
    ded6:	f8dd 0de4 	ldr.w	r0, [sp, #3556]	; 0xde4
    deda:	f8cd 06a4 	str.w	r0, [sp, #1700]	; 0x6a4
    dede:	e00a      	b.n	def6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xcde>
    dee0:	f89d 06a3 	ldrb.w	r0, [sp, #1699]	; 0x6a3
    dee4:	07c0      	lsls	r0, r0, #31
    dee6:	2800      	cmp	r0, #0
    dee8:	d112      	bne.n	df10 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xcf8>
    deea:	e055      	b.n	df98 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xd80>
    deec:	98da      	ldr	r0, [sp, #872]	; 0x368
    deee:	07c1      	lsls	r1, r0, #31
    def0:	2900      	cmp	r1, #0
    def2:	d1e3      	bne.n	debc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xca4>
    def4:	e7de      	b.n	deb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc9c>
    def6:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    defa:	f20d 61a4 	addw	r1, sp, #1700	; 0x6a4
    defe:	f008 fe81 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    df02:	90d9      	str	r0, [sp, #868]	; 0x364
    df04:	e7ff      	b.n	df06 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xcee>
    df06:	98d9      	ldr	r0, [sp, #868]	; 0x364
    df08:	07c1      	lsls	r1, r0, #31
    df0a:	2900      	cmp	r1, #0
    df0c:	d1ce      	bne.n	deac <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc94>
    df0e:	e7d1      	b.n	deb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc9c>
                trace!("[{:04x}] SE Vx, Vy", self.pc);
    df10:	f64f 402c 	movw	r0, #64556	; 0xfc2c
    df14:	f2c0 0001 	movt	r0, #1
    df18:	6801      	ldr	r1, [r0, #0]
    df1a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    df1e:	f100 0212 	add.w	r2, r0, #18
    df22:	f8cd 26c8 	str.w	r2, [sp, #1736]	; 0x6c8
    df26:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
    df2a:	f8cd 2d68 	str.w	r2, [sp, #3432]	; 0xd68
    df2e:	f249 1323 	movw	r3, #37155	; 0x9123
    df32:	f2c0 0301 	movt	r3, #1
    df36:	4610      	mov	r0, r2
    df38:	91d8      	str	r1, [sp, #864]	; 0x360
    df3a:	4619      	mov	r1, r3
    df3c:	f7fc fc4c 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    df40:	90d7      	str	r0, [sp, #860]	; 0x35c
    df42:	91d6      	str	r1, [sp, #856]	; 0x358
    df44:	e7ff      	b.n	df46 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xd2e>
    df46:	98d7      	ldr	r0, [sp, #860]	; 0x35c
    df48:	f8cd 06c0 	str.w	r0, [sp, #1728]	; 0x6c0
    df4c:	99d6      	ldr	r1, [sp, #856]	; 0x358
    df4e:	f8cd 16c4 	str.w	r1, [sp, #1732]	; 0x6c4
    df52:	f24f 0238 	movw	r2, #61496	; 0xf038
    df56:	f2c0 0201 	movt	r2, #1
    df5a:	6812      	ldr	r2, [r2, #0]
    df5c:	466b      	mov	r3, sp
    df5e:	f04f 0c01 	mov.w	ip, #1
    df62:	f8c3 c008 	str.w	ip, [r3, #8]
    df66:	605a      	str	r2, [r3, #4]
    df68:	f8c3 c000 	str.w	ip, [r3]
    df6c:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    df70:	2202      	movs	r2, #2
    df72:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
    df76:	99d8      	ldr	r1, [sp, #864]	; 0x360
    df78:	f008 fd09 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    df7c:	e7ff      	b.n	df7e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xd66>
    df7e:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
    df82:	f64f 404c 	movw	r0, #64588	; 0xfc4c
    df86:	f2c0 0001 	movt	r0, #1
    df8a:	6802      	ldr	r2, [r0, #0]
    df8c:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    df90:	f004 fa16 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    df94:	e7ff      	b.n	df96 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xd7e>
    df96:	e7ff      	b.n	df98 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xd80>
                if self.v[x] == self.v[y] {
    df98:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    df9c:	280f      	cmp	r0, #15
    df9e:	f202 86b3 	bhi.w	10d08 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3af0>
    dfa2:	e7ff      	b.n	dfa4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xd8c>
    dfa4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dfa8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    dfac:	1842      	adds	r2, r0, r1
    dfae:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    dfb2:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    dfb6:	2b0f      	cmp	r3, #15
    dfb8:	92d5      	str	r2, [sp, #852]	; 0x354
    dfba:	f202 86af 	bhi.w	10d1c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3b04>
    dfbe:	e7ff      	b.n	dfc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xda8>
    dfc0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dfc4:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    dfc8:	1842      	adds	r2, r0, r1
    dfca:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    dfce:	9bd5      	ldr	r3, [sp, #852]	; 0x354
    dfd0:	fa5f fc83 	uxtb.w	ip, r3
    dfd4:	4594      	cmp	ip, r2
    dfd6:	d106      	bne.n	dfe6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xdce>
    dfd8:	e7ff      	b.n	dfda <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xdc2>
                    self.next();
    dfda:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dfde:	f002 ff1a 	bl	10e16 <_ZN8libchip814Chip8$LT$T$GT$4next17h59db21f4d7eca91dE>
    dfe2:	e7ff      	b.n	dfe4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xdcc>
                if self.v[x] == self.v[y] {
    dfe4:	e7ff      	b.n	dfe6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xdce>
        match (
    dfe6:	f002 bbe4 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    dfea:	2005      	movs	r0, #5
    dfec:	f8cd 06cc 	str.w	r0, [sp, #1740]	; 0x6cc
    dff0:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    dff4:	f2c0 0001 	movt	r0, #1
    dff8:	6801      	ldr	r1, [r0, #0]
    dffa:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    dffe:	f008 fe01 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e002:	90d4      	str	r0, [sp, #848]	; 0x350
    e004:	e01f      	b.n	e046 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xe2e>
    e006:	2001      	movs	r0, #1
    e008:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    e00c:	e015      	b.n	e03a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xe22>
    e00e:	2000      	movs	r0, #0
    e010:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    e014:	e011      	b.n	e03a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xe22>
    e016:	2000      	movs	r0, #0
    e018:	f88d 0deb 	strb.w	r0, [sp, #3563]	; 0xdeb
    e01c:	f89d 1deb 	ldrb.w	r1, [sp, #3563]	; 0xdeb
    e020:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e024:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e028:	f003 f99b 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e02c:	f8cd 0dec 	str.w	r0, [sp, #3564]	; 0xdec
    e030:	f8dd 0dec 	ldr.w	r0, [sp, #3564]	; 0xdec
    e034:	f8cd 06d4 	str.w	r0, [sp, #1748]	; 0x6d4
    e038:	e00a      	b.n	e050 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xe38>
    e03a:	f89d 06d3 	ldrb.w	r0, [sp, #1747]	; 0x6d3
    e03e:	07c0      	lsls	r0, r0, #31
    e040:	2800      	cmp	r0, #0
    e042:	d112      	bne.n	e06a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xe52>
    e044:	e055      	b.n	e0f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xeda>
    e046:	98d4      	ldr	r0, [sp, #848]	; 0x350
    e048:	07c1      	lsls	r1, r0, #31
    e04a:	2900      	cmp	r1, #0
    e04c:	d1e3      	bne.n	e016 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xdfe>
    e04e:	e7de      	b.n	e00e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xdf6>
    e050:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    e054:	f20d 61d4 	addw	r1, sp, #1748	; 0x6d4
    e058:	f008 fdd4 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e05c:	90d3      	str	r0, [sp, #844]	; 0x34c
    e05e:	e7ff      	b.n	e060 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xe48>
    e060:	98d3      	ldr	r0, [sp, #844]	; 0x34c
    e062:	07c1      	lsls	r1, r0, #31
    e064:	2900      	cmp	r1, #0
    e066:	d1ce      	bne.n	e006 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xdee>
    e068:	e7d1      	b.n	e00e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xdf6>
                trace!("[{:04x}] LD Vx, kk", self.pc);
    e06a:	f64f 3044 	movw	r0, #64324	; 0xfb44
    e06e:	f2c0 0001 	movt	r0, #1
    e072:	6801      	ldr	r1, [r0, #0]
    e074:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e078:	f100 0212 	add.w	r2, r0, #18
    e07c:	f8cd 26f8 	str.w	r2, [sp, #1784]	; 0x6f8
    e080:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
    e084:	f8cd 2d5c 	str.w	r2, [sp, #3420]	; 0xd5c
    e088:	f249 1323 	movw	r3, #37155	; 0x9123
    e08c:	f2c0 0301 	movt	r3, #1
    e090:	4610      	mov	r0, r2
    e092:	91d2      	str	r1, [sp, #840]	; 0x348
    e094:	4619      	mov	r1, r3
    e096:	f7fc fb9f 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e09a:	90d1      	str	r0, [sp, #836]	; 0x344
    e09c:	91d0      	str	r1, [sp, #832]	; 0x340
    e09e:	e7ff      	b.n	e0a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xe88>
    e0a0:	98d1      	ldr	r0, [sp, #836]	; 0x344
    e0a2:	f8cd 06f0 	str.w	r0, [sp, #1776]	; 0x6f0
    e0a6:	99d0      	ldr	r1, [sp, #832]	; 0x340
    e0a8:	f8cd 16f4 	str.w	r1, [sp, #1780]	; 0x6f4
    e0ac:	f24f 0238 	movw	r2, #61496	; 0xf038
    e0b0:	f2c0 0201 	movt	r2, #1
    e0b4:	6812      	ldr	r2, [r2, #0]
    e0b6:	466b      	mov	r3, sp
    e0b8:	f04f 0c01 	mov.w	ip, #1
    e0bc:	f8c3 c008 	str.w	ip, [r3, #8]
    e0c0:	605a      	str	r2, [r3, #4]
    e0c2:	f8c3 c000 	str.w	ip, [r3]
    e0c6:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    e0ca:	2202      	movs	r2, #2
    e0cc:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
    e0d0:	99d2      	ldr	r1, [sp, #840]	; 0x348
    e0d2:	f008 fc5c 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e0d6:	e7ff      	b.n	e0d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xec0>
    e0d8:	f8dd 16cc 	ldr.w	r1, [sp, #1740]	; 0x6cc
    e0dc:	f64f 3064 	movw	r0, #64356	; 0xfb64
    e0e0:	f2c0 0001 	movt	r0, #1
    e0e4:	6802      	ldr	r2, [r0, #0]
    e0e6:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    e0ea:	f004 f969 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e0ee:	e7ff      	b.n	e0f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xed8>
    e0f0:	e7ff      	b.n	e0f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xeda>
                self.v[x] = kk;
    e0f2:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e0f6:	280f      	cmp	r0, #15
    e0f8:	f202 85fc 	bhi.w	10cf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3adc>
    e0fc:	e7ff      	b.n	e0fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xee6>
    e0fe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e102:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e106:	1842      	adds	r2, r0, r1
    e108:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    e10c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e110:	f002 bb4f 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    e114:	2005      	movs	r0, #5
    e116:	f8cd 06fc 	str.w	r0, [sp, #1788]	; 0x6fc
    e11a:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    e11e:	f2c0 0001 	movt	r0, #1
    e122:	6801      	ldr	r1, [r0, #0]
    e124:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    e128:	f008 fd6c 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e12c:	90cf      	str	r0, [sp, #828]	; 0x33c
    e12e:	e01f      	b.n	e170 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xf58>
    e130:	2001      	movs	r0, #1
    e132:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    e136:	e015      	b.n	e164 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xf4c>
    e138:	2000      	movs	r0, #0
    e13a:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    e13e:	e011      	b.n	e164 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xf4c>
    e140:	2000      	movs	r0, #0
    e142:	f88d 0df3 	strb.w	r0, [sp, #3571]	; 0xdf3
    e146:	f89d 1df3 	ldrb.w	r1, [sp, #3571]	; 0xdf3
    e14a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e14e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e152:	f003 f906 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e156:	f8cd 0df4 	str.w	r0, [sp, #3572]	; 0xdf4
    e15a:	f8dd 0df4 	ldr.w	r0, [sp, #3572]	; 0xdf4
    e15e:	f8cd 0704 	str.w	r0, [sp, #1796]	; 0x704
    e162:	e00a      	b.n	e17a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xf62>
    e164:	f89d 0703 	ldrb.w	r0, [sp, #1795]	; 0x703
    e168:	07c0      	lsls	r0, r0, #31
    e16a:	2800      	cmp	r0, #0
    e16c:	d112      	bne.n	e194 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xf7c>
    e16e:	e055      	b.n	e21c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1004>
    e170:	98cf      	ldr	r0, [sp, #828]	; 0x33c
    e172:	07c1      	lsls	r1, r0, #31
    e174:	2900      	cmp	r1, #0
    e176:	d1e3      	bne.n	e140 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xf28>
    e178:	e7de      	b.n	e138 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xf20>
    e17a:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    e17e:	f20d 7104 	addw	r1, sp, #1796	; 0x704
    e182:	f008 fd3f 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e186:	90ce      	str	r0, [sp, #824]	; 0x338
    e188:	e7ff      	b.n	e18a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xf72>
    e18a:	98ce      	ldr	r0, [sp, #824]	; 0x338
    e18c:	07c1      	lsls	r1, r0, #31
    e18e:	2900      	cmp	r1, #0
    e190:	d1ce      	bne.n	e130 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xf18>
    e192:	e7d1      	b.n	e138 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xf20>
                trace!("[{:04x}] ADD Vx, kk", self.pc);
    e194:	f64f 20e4 	movw	r0, #64228	; 0xfae4
    e198:	f2c0 0001 	movt	r0, #1
    e19c:	6801      	ldr	r1, [r0, #0]
    e19e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e1a2:	f100 0212 	add.w	r2, r0, #18
    e1a6:	f8cd 2728 	str.w	r2, [sp, #1832]	; 0x728
    e1aa:	f8dd 2728 	ldr.w	r2, [sp, #1832]	; 0x728
    e1ae:	f8cd 2d58 	str.w	r2, [sp, #3416]	; 0xd58
    e1b2:	f249 1323 	movw	r3, #37155	; 0x9123
    e1b6:	f2c0 0301 	movt	r3, #1
    e1ba:	4610      	mov	r0, r2
    e1bc:	91cd      	str	r1, [sp, #820]	; 0x334
    e1be:	4619      	mov	r1, r3
    e1c0:	f7fc fb0a 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e1c4:	90cc      	str	r0, [sp, #816]	; 0x330
    e1c6:	91cb      	str	r1, [sp, #812]	; 0x32c
    e1c8:	e7ff      	b.n	e1ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xfb2>
    e1ca:	98cc      	ldr	r0, [sp, #816]	; 0x330
    e1cc:	f8cd 0720 	str.w	r0, [sp, #1824]	; 0x720
    e1d0:	99cb      	ldr	r1, [sp, #812]	; 0x32c
    e1d2:	f8cd 1724 	str.w	r1, [sp, #1828]	; 0x724
    e1d6:	f24f 0238 	movw	r2, #61496	; 0xf038
    e1da:	f2c0 0201 	movt	r2, #1
    e1de:	6812      	ldr	r2, [r2, #0]
    e1e0:	466b      	mov	r3, sp
    e1e2:	f04f 0c01 	mov.w	ip, #1
    e1e6:	f8c3 c008 	str.w	ip, [r3, #8]
    e1ea:	605a      	str	r2, [r3, #4]
    e1ec:	f8c3 c000 	str.w	ip, [r3]
    e1f0:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    e1f4:	2202      	movs	r2, #2
    e1f6:	f50d 63e4 	add.w	r3, sp, #1824	; 0x720
    e1fa:	99cd      	ldr	r1, [sp, #820]	; 0x334
    e1fc:	f008 fbc7 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e200:	e7ff      	b.n	e202 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xfea>
    e202:	f8dd 16fc 	ldr.w	r1, [sp, #1788]	; 0x6fc
    e206:	f64f 3004 	movw	r0, #64260	; 0xfb04
    e20a:	f2c0 0001 	movt	r0, #1
    e20e:	6802      	ldr	r2, [r0, #0]
    e210:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    e214:	f004 f8d4 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e218:	e7ff      	b.n	e21a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1002>
    e21a:	e7ff      	b.n	e21c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1004>
                self.v[x] = self.v[x].wrapping_add(kk);
    e21c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e220:	280f      	cmp	r0, #15
    e222:	f202 8553 	bhi.w	10ccc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3ab4>
    e226:	e7ff      	b.n	e228 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1010>
    e228:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e22c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e230:	1842      	adds	r2, r0, r1
    e232:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    e236:	f8dd 145c 	ldr.w	r1, [sp, #1116]	; 0x45c
    e23a:	f008 fc0c 	bl	16a56 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>
    e23e:	90ca      	str	r0, [sp, #808]	; 0x328
    e240:	e7ff      	b.n	e242 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x102a>
    e242:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e246:	280f      	cmp	r0, #15
    e248:	f202 854a 	bhi.w	10ce0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3ac8>
    e24c:	e7ff      	b.n	e24e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1036>
    e24e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e252:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e256:	1842      	adds	r2, r0, r1
    e258:	9bca      	ldr	r3, [sp, #808]	; 0x328
    e25a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e25e:	f002 baa8 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    e262:	2005      	movs	r0, #5
    e264:	f8cd 072c 	str.w	r0, [sp, #1836]	; 0x72c
    e268:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    e26c:	f2c0 0001 	movt	r0, #1
    e270:	6801      	ldr	r1, [r0, #0]
    e272:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    e276:	f008 fcc5 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e27a:	90c9      	str	r0, [sp, #804]	; 0x324
    e27c:	e01f      	b.n	e2be <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x10a6>
    e27e:	2001      	movs	r0, #1
    e280:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    e284:	e015      	b.n	e2b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x109a>
    e286:	2000      	movs	r0, #0
    e288:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    e28c:	e011      	b.n	e2b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x109a>
    e28e:	2000      	movs	r0, #0
    e290:	f88d 0dfb 	strb.w	r0, [sp, #3579]	; 0xdfb
    e294:	f89d 1dfb 	ldrb.w	r1, [sp, #3579]	; 0xdfb
    e298:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e29c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e2a0:	f003 f85f 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e2a4:	f8cd 0dfc 	str.w	r0, [sp, #3580]	; 0xdfc
    e2a8:	f8dd 0dfc 	ldr.w	r0, [sp, #3580]	; 0xdfc
    e2ac:	f8cd 0734 	str.w	r0, [sp, #1844]	; 0x734
    e2b0:	e00a      	b.n	e2c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x10b0>
    e2b2:	f89d 0733 	ldrb.w	r0, [sp, #1843]	; 0x733
    e2b6:	07c0      	lsls	r0, r0, #31
    e2b8:	2800      	cmp	r0, #0
    e2ba:	d112      	bne.n	e2e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x10ca>
    e2bc:	e055      	b.n	e36a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1152>
    e2be:	98c9      	ldr	r0, [sp, #804]	; 0x324
    e2c0:	07c1      	lsls	r1, r0, #31
    e2c2:	2900      	cmp	r1, #0
    e2c4:	d1e3      	bne.n	e28e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1076>
    e2c6:	e7de      	b.n	e286 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x106e>
    e2c8:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    e2cc:	f20d 7134 	addw	r1, sp, #1844	; 0x734
    e2d0:	f008 fc98 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e2d4:	90c8      	str	r0, [sp, #800]	; 0x320
    e2d6:	e7ff      	b.n	e2d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x10c0>
    e2d8:	98c8      	ldr	r0, [sp, #800]	; 0x320
    e2da:	07c1      	lsls	r1, r0, #31
    e2dc:	2900      	cmp	r1, #0
    e2de:	d1ce      	bne.n	e27e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1066>
    e2e0:	e7d1      	b.n	e286 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x106e>
                trace!("[{:04x}] LD Vx, Vy", self.pc);
    e2e2:	f64f 2084 	movw	r0, #64132	; 0xfa84
    e2e6:	f2c0 0001 	movt	r0, #1
    e2ea:	6801      	ldr	r1, [r0, #0]
    e2ec:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e2f0:	f100 0212 	add.w	r2, r0, #18
    e2f4:	f8cd 2758 	str.w	r2, [sp, #1880]	; 0x758
    e2f8:	f8dd 2758 	ldr.w	r2, [sp, #1880]	; 0x758
    e2fc:	f8cd 2d54 	str.w	r2, [sp, #3412]	; 0xd54
    e300:	f249 1323 	movw	r3, #37155	; 0x9123
    e304:	f2c0 0301 	movt	r3, #1
    e308:	4610      	mov	r0, r2
    e30a:	91c7      	str	r1, [sp, #796]	; 0x31c
    e30c:	4619      	mov	r1, r3
    e30e:	f7fc fa63 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e312:	90c6      	str	r0, [sp, #792]	; 0x318
    e314:	91c5      	str	r1, [sp, #788]	; 0x314
    e316:	e7ff      	b.n	e318 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1100>
    e318:	98c6      	ldr	r0, [sp, #792]	; 0x318
    e31a:	f8cd 0750 	str.w	r0, [sp, #1872]	; 0x750
    e31e:	99c5      	ldr	r1, [sp, #788]	; 0x314
    e320:	f8cd 1754 	str.w	r1, [sp, #1876]	; 0x754
    e324:	f24f 0238 	movw	r2, #61496	; 0xf038
    e328:	f2c0 0201 	movt	r2, #1
    e32c:	6812      	ldr	r2, [r2, #0]
    e32e:	466b      	mov	r3, sp
    e330:	f04f 0c01 	mov.w	ip, #1
    e334:	f8c3 c008 	str.w	ip, [r3, #8]
    e338:	605a      	str	r2, [r3, #4]
    e33a:	f8c3 c000 	str.w	ip, [r3]
    e33e:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    e342:	2202      	movs	r2, #2
    e344:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750
    e348:	99c7      	ldr	r1, [sp, #796]	; 0x31c
    e34a:	f008 fb20 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e34e:	e7ff      	b.n	e350 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1138>
    e350:	f8dd 172c 	ldr.w	r1, [sp, #1836]	; 0x72c
    e354:	f64f 20a4 	movw	r0, #64164	; 0xfaa4
    e358:	f2c0 0001 	movt	r0, #1
    e35c:	6802      	ldr	r2, [r0, #0]
    e35e:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    e362:	f004 f82d 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e366:	e7ff      	b.n	e368 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1150>
    e368:	e7ff      	b.n	e36a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1152>
                self.v[x] = self.v[y];
    e36a:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e36e:	280f      	cmp	r0, #15
    e370:	f202 8498 	bhi.w	10ca4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3a8c>
    e374:	e7ff      	b.n	e376 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x115e>
    e376:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e37a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e37e:	1842      	adds	r2, r0, r1
    e380:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e384:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e388:	2b0f      	cmp	r3, #15
    e38a:	92c4      	str	r2, [sp, #784]	; 0x310
    e38c:	f202 8494 	bhi.w	10cb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3aa0>
    e390:	e7ff      	b.n	e392 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x117a>
    e392:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e396:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e39a:	1842      	adds	r2, r0, r1
    e39c:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    e39e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e3a2:	f002 ba06 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    e3a6:	2005      	movs	r0, #5
    e3a8:	f8cd 075c 	str.w	r0, [sp, #1884]	; 0x75c
    e3ac:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    e3b0:	f2c0 0001 	movt	r0, #1
    e3b4:	6801      	ldr	r1, [r0, #0]
    e3b6:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    e3ba:	f008 fc23 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e3be:	90c3      	str	r0, [sp, #780]	; 0x30c
    e3c0:	e01f      	b.n	e402 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x11ea>
    e3c2:	2001      	movs	r0, #1
    e3c4:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    e3c8:	e015      	b.n	e3f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x11de>
    e3ca:	2000      	movs	r0, #0
    e3cc:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    e3d0:	e011      	b.n	e3f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x11de>
    e3d2:	2000      	movs	r0, #0
    e3d4:	f88d 0e03 	strb.w	r0, [sp, #3587]	; 0xe03
    e3d8:	f89d 1e03 	ldrb.w	r1, [sp, #3587]	; 0xe03
    e3dc:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e3e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e3e4:	f002 ffbd 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e3e8:	f8cd 0e04 	str.w	r0, [sp, #3588]	; 0xe04
    e3ec:	f8dd 0e04 	ldr.w	r0, [sp, #3588]	; 0xe04
    e3f0:	f8cd 0764 	str.w	r0, [sp, #1892]	; 0x764
    e3f4:	e00a      	b.n	e40c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x11f4>
    e3f6:	f89d 0763 	ldrb.w	r0, [sp, #1891]	; 0x763
    e3fa:	07c0      	lsls	r0, r0, #31
    e3fc:	2800      	cmp	r0, #0
    e3fe:	d112      	bne.n	e426 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x120e>
    e400:	e055      	b.n	e4ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1296>
    e402:	98c3      	ldr	r0, [sp, #780]	; 0x30c
    e404:	07c1      	lsls	r1, r0, #31
    e406:	2900      	cmp	r1, #0
    e408:	d1e3      	bne.n	e3d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x11ba>
    e40a:	e7de      	b.n	e3ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x11b2>
    e40c:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    e410:	f20d 7164 	addw	r1, sp, #1892	; 0x764
    e414:	f008 fbf6 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e418:	90c2      	str	r0, [sp, #776]	; 0x308
    e41a:	e7ff      	b.n	e41c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1204>
    e41c:	98c2      	ldr	r0, [sp, #776]	; 0x308
    e41e:	07c1      	lsls	r1, r0, #31
    e420:	2900      	cmp	r1, #0
    e422:	d1ce      	bne.n	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x11aa>
    e424:	e7d1      	b.n	e3ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x11b2>
                trace!("[{:04x}] OR Vx, Vy", self.pc);
    e426:	f64f 2024 	movw	r0, #64036	; 0xfa24
    e42a:	f2c0 0001 	movt	r0, #1
    e42e:	6801      	ldr	r1, [r0, #0]
    e430:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e434:	f100 0212 	add.w	r2, r0, #18
    e438:	f8cd 2788 	str.w	r2, [sp, #1928]	; 0x788
    e43c:	f8dd 2788 	ldr.w	r2, [sp, #1928]	; 0x788
    e440:	f8cd 2d50 	str.w	r2, [sp, #3408]	; 0xd50
    e444:	f249 1323 	movw	r3, #37155	; 0x9123
    e448:	f2c0 0301 	movt	r3, #1
    e44c:	4610      	mov	r0, r2
    e44e:	91c1      	str	r1, [sp, #772]	; 0x304
    e450:	4619      	mov	r1, r3
    e452:	f7fc f9c1 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e456:	90c0      	str	r0, [sp, #768]	; 0x300
    e458:	91bf      	str	r1, [sp, #764]	; 0x2fc
    e45a:	e7ff      	b.n	e45c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1244>
    e45c:	98c0      	ldr	r0, [sp, #768]	; 0x300
    e45e:	f8cd 0780 	str.w	r0, [sp, #1920]	; 0x780
    e462:	99bf      	ldr	r1, [sp, #764]	; 0x2fc
    e464:	f8cd 1784 	str.w	r1, [sp, #1924]	; 0x784
    e468:	f24f 0238 	movw	r2, #61496	; 0xf038
    e46c:	f2c0 0201 	movt	r2, #1
    e470:	6812      	ldr	r2, [r2, #0]
    e472:	466b      	mov	r3, sp
    e474:	f04f 0c01 	mov.w	ip, #1
    e478:	f8c3 c008 	str.w	ip, [r3, #8]
    e47c:	605a      	str	r2, [r3, #4]
    e47e:	f8c3 c000 	str.w	ip, [r3]
    e482:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    e486:	2202      	movs	r2, #2
    e488:	f50d 63f0 	add.w	r3, sp, #1920	; 0x780
    e48c:	99c1      	ldr	r1, [sp, #772]	; 0x304
    e48e:	f008 fa7e 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e492:	e7ff      	b.n	e494 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x127c>
    e494:	f8dd 175c 	ldr.w	r1, [sp, #1884]	; 0x75c
    e498:	f64f 2044 	movw	r0, #64068	; 0xfa44
    e49c:	f2c0 0001 	movt	r0, #1
    e4a0:	6802      	ldr	r2, [r0, #0]
    e4a2:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    e4a6:	f003 ff8b 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e4aa:	e7ff      	b.n	e4ac <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1294>
    e4ac:	e7ff      	b.n	e4ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1296>
                self.v[x] |= self.v[y];
    e4ae:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e4b2:	280f      	cmp	r0, #15
    e4b4:	f202 83e2 	bhi.w	10c7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3a64>
    e4b8:	e7ff      	b.n	e4ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x12a2>
    e4ba:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e4be:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e4c2:	1842      	adds	r2, r0, r1
    e4c4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e4c8:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e4cc:	2b0f      	cmp	r3, #15
    e4ce:	92be      	str	r2, [sp, #760]	; 0x2f8
    e4d0:	f202 83de 	bhi.w	10c90 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3a78>
    e4d4:	e7ff      	b.n	e4d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x12be>
    e4d6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e4da:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e4de:	1842      	adds	r2, r0, r1
    e4e0:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    e4e4:	f8dd c2f8 	ldr.w	ip, [sp, #760]	; 0x2f8
    e4e8:	ea43 030c 	orr.w	r3, r3, ip
    e4ec:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e4f0:	f002 b95f 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    e4f4:	2005      	movs	r0, #5
    e4f6:	f8cd 078c 	str.w	r0, [sp, #1932]	; 0x78c
    e4fa:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    e4fe:	f2c0 0001 	movt	r0, #1
    e502:	6801      	ldr	r1, [r0, #0]
    e504:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    e508:	f008 fb7c 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e50c:	90bd      	str	r0, [sp, #756]	; 0x2f4
    e50e:	e01f      	b.n	e550 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1338>
    e510:	2001      	movs	r0, #1
    e512:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    e516:	e015      	b.n	e544 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x132c>
    e518:	2000      	movs	r0, #0
    e51a:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    e51e:	e011      	b.n	e544 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x132c>
    e520:	2000      	movs	r0, #0
    e522:	f88d 0e0b 	strb.w	r0, [sp, #3595]	; 0xe0b
    e526:	f89d 1e0b 	ldrb.w	r1, [sp, #3595]	; 0xe0b
    e52a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e52e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e532:	f002 ff16 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e536:	f8cd 0e0c 	str.w	r0, [sp, #3596]	; 0xe0c
    e53a:	f8dd 0e0c 	ldr.w	r0, [sp, #3596]	; 0xe0c
    e53e:	f8cd 0794 	str.w	r0, [sp, #1940]	; 0x794
    e542:	e00a      	b.n	e55a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1342>
    e544:	f89d 0793 	ldrb.w	r0, [sp, #1939]	; 0x793
    e548:	07c0      	lsls	r0, r0, #31
    e54a:	2800      	cmp	r0, #0
    e54c:	d112      	bne.n	e574 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x135c>
    e54e:	e055      	b.n	e5fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x13e4>
    e550:	98bd      	ldr	r0, [sp, #756]	; 0x2f4
    e552:	07c1      	lsls	r1, r0, #31
    e554:	2900      	cmp	r1, #0
    e556:	d1e3      	bne.n	e520 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1308>
    e558:	e7de      	b.n	e518 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1300>
    e55a:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    e55e:	f20d 7194 	addw	r1, sp, #1940	; 0x794
    e562:	f008 fb4f 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e566:	90bc      	str	r0, [sp, #752]	; 0x2f0
    e568:	e7ff      	b.n	e56a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1352>
    e56a:	98bc      	ldr	r0, [sp, #752]	; 0x2f0
    e56c:	07c1      	lsls	r1, r0, #31
    e56e:	2900      	cmp	r1, #0
    e570:	d1ce      	bne.n	e510 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x12f8>
    e572:	e7d1      	b.n	e518 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1300>
                trace!("[{:04x}] AND Vx, Vy", self.pc);
    e574:	f64f 10c4 	movw	r0, #63940	; 0xf9c4
    e578:	f2c0 0001 	movt	r0, #1
    e57c:	6801      	ldr	r1, [r0, #0]
    e57e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e582:	f100 0212 	add.w	r2, r0, #18
    e586:	f8cd 27b8 	str.w	r2, [sp, #1976]	; 0x7b8
    e58a:	f8dd 27b8 	ldr.w	r2, [sp, #1976]	; 0x7b8
    e58e:	f8cd 2d4c 	str.w	r2, [sp, #3404]	; 0xd4c
    e592:	f249 1323 	movw	r3, #37155	; 0x9123
    e596:	f2c0 0301 	movt	r3, #1
    e59a:	4610      	mov	r0, r2
    e59c:	91bb      	str	r1, [sp, #748]	; 0x2ec
    e59e:	4619      	mov	r1, r3
    e5a0:	f7fc f91a 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e5a4:	90ba      	str	r0, [sp, #744]	; 0x2e8
    e5a6:	91b9      	str	r1, [sp, #740]	; 0x2e4
    e5a8:	e7ff      	b.n	e5aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1392>
    e5aa:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
    e5ac:	f8cd 07b0 	str.w	r0, [sp, #1968]	; 0x7b0
    e5b0:	99b9      	ldr	r1, [sp, #740]	; 0x2e4
    e5b2:	f8cd 17b4 	str.w	r1, [sp, #1972]	; 0x7b4
    e5b6:	f24f 0238 	movw	r2, #61496	; 0xf038
    e5ba:	f2c0 0201 	movt	r2, #1
    e5be:	6812      	ldr	r2, [r2, #0]
    e5c0:	466b      	mov	r3, sp
    e5c2:	f04f 0c01 	mov.w	ip, #1
    e5c6:	f8c3 c008 	str.w	ip, [r3, #8]
    e5ca:	605a      	str	r2, [r3, #4]
    e5cc:	f8c3 c000 	str.w	ip, [r3]
    e5d0:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    e5d4:	2202      	movs	r2, #2
    e5d6:	f50d 63f6 	add.w	r3, sp, #1968	; 0x7b0
    e5da:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
    e5dc:	f008 f9d7 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e5e0:	e7ff      	b.n	e5e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x13ca>
    e5e2:	f8dd 178c 	ldr.w	r1, [sp, #1932]	; 0x78c
    e5e6:	f64f 10e4 	movw	r0, #63972	; 0xf9e4
    e5ea:	f2c0 0001 	movt	r0, #1
    e5ee:	6802      	ldr	r2, [r0, #0]
    e5f0:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    e5f4:	f003 fee4 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e5f8:	e7ff      	b.n	e5fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x13e2>
    e5fa:	e7ff      	b.n	e5fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x13e4>
                self.v[x] &= self.v[y];
    e5fc:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e600:	280f      	cmp	r0, #15
    e602:	f202 8327 	bhi.w	10c54 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3a3c>
    e606:	e7ff      	b.n	e608 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x13f0>
    e608:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e60c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e610:	1842      	adds	r2, r0, r1
    e612:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e616:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e61a:	2b0f      	cmp	r3, #15
    e61c:	92b8      	str	r2, [sp, #736]	; 0x2e0
    e61e:	f202 8323 	bhi.w	10c68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3a50>
    e622:	e7ff      	b.n	e624 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x140c>
    e624:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e628:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e62c:	1842      	adds	r2, r0, r1
    e62e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    e632:	f8dd c2e0 	ldr.w	ip, [sp, #736]	; 0x2e0
    e636:	ea03 030c 	and.w	r3, r3, ip
    e63a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e63e:	f002 b8b8 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    e642:	2005      	movs	r0, #5
    e644:	f8cd 07bc 	str.w	r0, [sp, #1980]	; 0x7bc
    e648:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    e64c:	f2c0 0001 	movt	r0, #1
    e650:	6801      	ldr	r1, [r0, #0]
    e652:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    e656:	f008 fad5 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e65a:	90b7      	str	r0, [sp, #732]	; 0x2dc
    e65c:	e01f      	b.n	e69e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1486>
    e65e:	2001      	movs	r0, #1
    e660:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    e664:	e015      	b.n	e692 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x147a>
    e666:	2000      	movs	r0, #0
    e668:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    e66c:	e011      	b.n	e692 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x147a>
    e66e:	2000      	movs	r0, #0
    e670:	f88d 0e13 	strb.w	r0, [sp, #3603]	; 0xe13
    e674:	f89d 1e13 	ldrb.w	r1, [sp, #3603]	; 0xe13
    e678:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e67c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e680:	f002 fe6f 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e684:	f8cd 0e14 	str.w	r0, [sp, #3604]	; 0xe14
    e688:	f8dd 0e14 	ldr.w	r0, [sp, #3604]	; 0xe14
    e68c:	f8cd 07c4 	str.w	r0, [sp, #1988]	; 0x7c4
    e690:	e00a      	b.n	e6a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1490>
    e692:	f89d 07c3 	ldrb.w	r0, [sp, #1987]	; 0x7c3
    e696:	07c0      	lsls	r0, r0, #31
    e698:	2800      	cmp	r0, #0
    e69a:	d112      	bne.n	e6c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x14aa>
    e69c:	e055      	b.n	e74a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1532>
    e69e:	98b7      	ldr	r0, [sp, #732]	; 0x2dc
    e6a0:	07c1      	lsls	r1, r0, #31
    e6a2:	2900      	cmp	r1, #0
    e6a4:	d1e3      	bne.n	e66e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1456>
    e6a6:	e7de      	b.n	e666 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x144e>
    e6a8:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    e6ac:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
    e6b0:	f008 faa8 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e6b4:	90b6      	str	r0, [sp, #728]	; 0x2d8
    e6b6:	e7ff      	b.n	e6b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x14a0>
    e6b8:	98b6      	ldr	r0, [sp, #728]	; 0x2d8
    e6ba:	07c1      	lsls	r1, r0, #31
    e6bc:	2900      	cmp	r1, #0
    e6be:	d1ce      	bne.n	e65e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1446>
    e6c0:	e7d1      	b.n	e666 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x144e>
                trace!("[{:04x}] XOR Vx, Vy", self.pc);
    e6c2:	f64f 1064 	movw	r0, #63844	; 0xf964
    e6c6:	f2c0 0001 	movt	r0, #1
    e6ca:	6801      	ldr	r1, [r0, #0]
    e6cc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e6d0:	f100 0212 	add.w	r2, r0, #18
    e6d4:	f8cd 27e8 	str.w	r2, [sp, #2024]	; 0x7e8
    e6d8:	f8dd 27e8 	ldr.w	r2, [sp, #2024]	; 0x7e8
    e6dc:	f8cd 2d48 	str.w	r2, [sp, #3400]	; 0xd48
    e6e0:	f249 1323 	movw	r3, #37155	; 0x9123
    e6e4:	f2c0 0301 	movt	r3, #1
    e6e8:	4610      	mov	r0, r2
    e6ea:	91b5      	str	r1, [sp, #724]	; 0x2d4
    e6ec:	4619      	mov	r1, r3
    e6ee:	f7fc f873 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e6f2:	90b4      	str	r0, [sp, #720]	; 0x2d0
    e6f4:	91b3      	str	r1, [sp, #716]	; 0x2cc
    e6f6:	e7ff      	b.n	e6f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x14e0>
    e6f8:	98b4      	ldr	r0, [sp, #720]	; 0x2d0
    e6fa:	f8cd 07e0 	str.w	r0, [sp, #2016]	; 0x7e0
    e6fe:	99b3      	ldr	r1, [sp, #716]	; 0x2cc
    e700:	f8cd 17e4 	str.w	r1, [sp, #2020]	; 0x7e4
    e704:	f24f 0238 	movw	r2, #61496	; 0xf038
    e708:	f2c0 0201 	movt	r2, #1
    e70c:	6812      	ldr	r2, [r2, #0]
    e70e:	466b      	mov	r3, sp
    e710:	f04f 0c01 	mov.w	ip, #1
    e714:	f8c3 c008 	str.w	ip, [r3, #8]
    e718:	605a      	str	r2, [r3, #4]
    e71a:	f8c3 c000 	str.w	ip, [r3]
    e71e:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    e722:	2202      	movs	r2, #2
    e724:	f50d 63fc 	add.w	r3, sp, #2016	; 0x7e0
    e728:	99b5      	ldr	r1, [sp, #724]	; 0x2d4
    e72a:	f008 f930 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e72e:	e7ff      	b.n	e730 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1518>
    e730:	f8dd 17bc 	ldr.w	r1, [sp, #1980]	; 0x7bc
    e734:	f64f 1084 	movw	r0, #63876	; 0xf984
    e738:	f2c0 0001 	movt	r0, #1
    e73c:	6802      	ldr	r2, [r0, #0]
    e73e:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    e742:	f003 fe3d 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e746:	e7ff      	b.n	e748 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1530>
    e748:	e7ff      	b.n	e74a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1532>
                self.v[x] ^= self.v[y];
    e74a:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e74e:	280f      	cmp	r0, #15
    e750:	f202 826c 	bhi.w	10c2c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3a14>
    e754:	e7ff      	b.n	e756 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x153e>
    e756:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e75a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e75e:	1842      	adds	r2, r0, r1
    e760:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e764:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e768:	2b0f      	cmp	r3, #15
    e76a:	92b2      	str	r2, [sp, #712]	; 0x2c8
    e76c:	f202 8268 	bhi.w	10c40 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3a28>
    e770:	e7ff      	b.n	e772 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x155a>
    e772:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e776:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e77a:	1842      	adds	r2, r0, r1
    e77c:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    e780:	f8dd c2c8 	ldr.w	ip, [sp, #712]	; 0x2c8
    e784:	ea83 030c 	eor.w	r3, r3, ip
    e788:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e78c:	f002 b811 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    e790:	2005      	movs	r0, #5
    e792:	f8cd 07ec 	str.w	r0, [sp, #2028]	; 0x7ec
    e796:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    e79a:	f2c0 0001 	movt	r0, #1
    e79e:	6801      	ldr	r1, [r0, #0]
    e7a0:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    e7a4:	f008 fa2e 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e7a8:	90b1      	str	r0, [sp, #708]	; 0x2c4
    e7aa:	e01f      	b.n	e7ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x15d4>
    e7ac:	2001      	movs	r0, #1
    e7ae:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    e7b2:	e015      	b.n	e7e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x15c8>
    e7b4:	2000      	movs	r0, #0
    e7b6:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    e7ba:	e011      	b.n	e7e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x15c8>
    e7bc:	2000      	movs	r0, #0
    e7be:	f88d 0e1b 	strb.w	r0, [sp, #3611]	; 0xe1b
    e7c2:	f89d 1e1b 	ldrb.w	r1, [sp, #3611]	; 0xe1b
    e7c6:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e7ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e7ce:	f002 fdc8 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e7d2:	f8cd 0e1c 	str.w	r0, [sp, #3612]	; 0xe1c
    e7d6:	f8dd 0e1c 	ldr.w	r0, [sp, #3612]	; 0xe1c
    e7da:	f8cd 07f4 	str.w	r0, [sp, #2036]	; 0x7f4
    e7de:	e00a      	b.n	e7f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x15de>
    e7e0:	f89d 07f3 	ldrb.w	r0, [sp, #2035]	; 0x7f3
    e7e4:	07c0      	lsls	r0, r0, #31
    e7e6:	2800      	cmp	r0, #0
    e7e8:	d112      	bne.n	e810 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x15f8>
    e7ea:	e055      	b.n	e898 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1680>
    e7ec:	98b1      	ldr	r0, [sp, #708]	; 0x2c4
    e7ee:	07c1      	lsls	r1, r0, #31
    e7f0:	2900      	cmp	r1, #0
    e7f2:	d1e3      	bne.n	e7bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x15a4>
    e7f4:	e7de      	b.n	e7b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x159c>
    e7f6:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    e7fa:	f20d 71f4 	addw	r1, sp, #2036	; 0x7f4
    e7fe:	f008 fa01 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e802:	90b0      	str	r0, [sp, #704]	; 0x2c0
    e804:	e7ff      	b.n	e806 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x15ee>
    e806:	98b0      	ldr	r0, [sp, #704]	; 0x2c0
    e808:	07c1      	lsls	r1, r0, #31
    e80a:	2900      	cmp	r1, #0
    e80c:	d1ce      	bne.n	e7ac <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1594>
    e80e:	e7d1      	b.n	e7b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x159c>
                trace!("[{:04x}] ADD Vx, Vy", self.pc);
    e810:	f64f 00f4 	movw	r0, #63732	; 0xf8f4
    e814:	f2c0 0001 	movt	r0, #1
    e818:	6801      	ldr	r1, [r0, #0]
    e81a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e81e:	f100 0212 	add.w	r2, r0, #18
    e822:	f8cd 2818 	str.w	r2, [sp, #2072]	; 0x818
    e826:	f8dd 2818 	ldr.w	r2, [sp, #2072]	; 0x818
    e82a:	f8cd 2d40 	str.w	r2, [sp, #3392]	; 0xd40
    e82e:	f249 1323 	movw	r3, #37155	; 0x9123
    e832:	f2c0 0301 	movt	r3, #1
    e836:	4610      	mov	r0, r2
    e838:	91af      	str	r1, [sp, #700]	; 0x2bc
    e83a:	4619      	mov	r1, r3
    e83c:	f7fb ffcc 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e840:	90ae      	str	r0, [sp, #696]	; 0x2b8
    e842:	91ad      	str	r1, [sp, #692]	; 0x2b4
    e844:	e7ff      	b.n	e846 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x162e>
    e846:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
    e848:	f8cd 0810 	str.w	r0, [sp, #2064]	; 0x810
    e84c:	99ad      	ldr	r1, [sp, #692]	; 0x2b4
    e84e:	f8cd 1814 	str.w	r1, [sp, #2068]	; 0x814
    e852:	f24f 0238 	movw	r2, #61496	; 0xf038
    e856:	f2c0 0201 	movt	r2, #1
    e85a:	6812      	ldr	r2, [r2, #0]
    e85c:	466b      	mov	r3, sp
    e85e:	f04f 0c01 	mov.w	ip, #1
    e862:	f8c3 c008 	str.w	ip, [r3, #8]
    e866:	605a      	str	r2, [r3, #4]
    e868:	f8c3 c000 	str.w	ip, [r3]
    e86c:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    e870:	2202      	movs	r2, #2
    e872:	f50d 6301 	add.w	r3, sp, #2064	; 0x810
    e876:	99af      	ldr	r1, [sp, #700]	; 0x2bc
    e878:	f008 f889 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e87c:	e7ff      	b.n	e87e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1666>
    e87e:	f8dd 17ec 	ldr.w	r1, [sp, #2028]	; 0x7ec
    e882:	f64f 1014 	movw	r0, #63764	; 0xf914
    e886:	f2c0 0001 	movt	r0, #1
    e88a:	6802      	ldr	r2, [r0, #0]
    e88c:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    e890:	f003 fd96 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e894:	e7ff      	b.n	e896 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x167e>
    e896:	e7ff      	b.n	e898 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1680>
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    e898:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e89c:	280f      	cmp	r0, #15
    e89e:	f202 81a7 	bhi.w	10bf0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x39d8>
    e8a2:	e7ff      	b.n	e8a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x168c>
    e8a4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e8a8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e8ac:	1842      	adds	r2, r0, r1
    e8ae:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e8b2:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    e8b6:	2b0f      	cmp	r3, #15
    e8b8:	92ac      	str	r2, [sp, #688]	; 0x2b0
    e8ba:	f202 81a3 	bhi.w	10c04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x39ec>
    e8be:	e7ff      	b.n	e8c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x16a8>
    e8c0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e8c4:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e8c8:	1842      	adds	r2, r0, r1
    e8ca:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    e8ce:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
    e8d0:	f008 f907 	bl	16ae2 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>
    e8d4:	90ab      	str	r0, [sp, #684]	; 0x2ac
    e8d6:	91aa      	str	r1, [sp, #680]	; 0x2a8
    e8d8:	e7ff      	b.n	e8da <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x16c2>
    e8da:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
    e8dc:	f88d 0d46 	strb.w	r0, [sp, #3398]	; 0xd46
    e8e0:	99aa      	ldr	r1, [sp, #680]	; 0x2a8
    e8e2:	f001 0201 	and.w	r2, r1, #1
    e8e6:	f88d 2d47 	strb.w	r2, [sp, #3399]	; 0xd47
                self.v[x] = v;
    e8ea:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    e8ee:	2a0f      	cmp	r2, #15
    e8f0:	f202 8192 	bhi.w	10c18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3a00>
    e8f4:	e7ff      	b.n	e8f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x16de>
    e8f6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e8fa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e8fe:	1842      	adds	r2, r0, r1
    e900:	9bab      	ldr	r3, [sp, #684]	; 0x2ac
    e902:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                self.v[0xf] = c as u8;
    e906:	9aaa      	ldr	r2, [sp, #680]	; 0x2a8
    e908:	f002 0c01 	and.w	ip, r2, #1
    e90c:	f880 c043 	strb.w	ip, [r0, #67]	; 0x43
        match (
    e910:	f001 bf4f 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    e914:	2005      	movs	r0, #5
    e916:	f8cd 081c 	str.w	r0, [sp, #2076]	; 0x81c
    e91a:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    e91e:	f2c0 0001 	movt	r0, #1
    e922:	6801      	ldr	r1, [r0, #0]
    e924:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    e928:	f008 f96c 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e92c:	90a9      	str	r0, [sp, #676]	; 0x2a4
    e92e:	e01f      	b.n	e970 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1758>
    e930:	2001      	movs	r0, #1
    e932:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    e936:	e015      	b.n	e964 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x174c>
    e938:	2000      	movs	r0, #0
    e93a:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    e93e:	e011      	b.n	e964 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x174c>
    e940:	2000      	movs	r0, #0
    e942:	f88d 0e23 	strb.w	r0, [sp, #3619]	; 0xe23
    e946:	f89d 1e23 	ldrb.w	r1, [sp, #3619]	; 0xe23
    e94a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e94e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e952:	f002 fd06 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e956:	f8cd 0e24 	str.w	r0, [sp, #3620]	; 0xe24
    e95a:	f8dd 0e24 	ldr.w	r0, [sp, #3620]	; 0xe24
    e95e:	f8cd 0824 	str.w	r0, [sp, #2084]	; 0x824
    e962:	e00a      	b.n	e97a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1762>
    e964:	f89d 0823 	ldrb.w	r0, [sp, #2083]	; 0x823
    e968:	07c0      	lsls	r0, r0, #31
    e96a:	2800      	cmp	r0, #0
    e96c:	d112      	bne.n	e994 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x177c>
    e96e:	e055      	b.n	ea1c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1804>
    e970:	98a9      	ldr	r0, [sp, #676]	; 0x2a4
    e972:	07c1      	lsls	r1, r0, #31
    e974:	2900      	cmp	r1, #0
    e976:	d1e3      	bne.n	e940 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1728>
    e978:	e7de      	b.n	e938 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1720>
    e97a:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    e97e:	f60d 0124 	addw	r1, sp, #2084	; 0x824
    e982:	f008 f93f 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e986:	90a8      	str	r0, [sp, #672]	; 0x2a0
    e988:	e7ff      	b.n	e98a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1772>
    e98a:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
    e98c:	07c1      	lsls	r1, r0, #31
    e98e:	2900      	cmp	r1, #0
    e990:	d1ce      	bne.n	e930 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1718>
    e992:	e7d1      	b.n	e938 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1720>
                trace!("[{:04x}] SUB Vx, Vy", self.pc);
    e994:	f64f 0084 	movw	r0, #63620	; 0xf884
    e998:	f2c0 0001 	movt	r0, #1
    e99c:	6801      	ldr	r1, [r0, #0]
    e99e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e9a2:	f100 0212 	add.w	r2, r0, #18
    e9a6:	f8cd 2848 	str.w	r2, [sp, #2120]	; 0x848
    e9aa:	f8dd 2848 	ldr.w	r2, [sp, #2120]	; 0x848
    e9ae:	f8cd 2d38 	str.w	r2, [sp, #3384]	; 0xd38
    e9b2:	f249 1323 	movw	r3, #37155	; 0x9123
    e9b6:	f2c0 0301 	movt	r3, #1
    e9ba:	4610      	mov	r0, r2
    e9bc:	91a7      	str	r1, [sp, #668]	; 0x29c
    e9be:	4619      	mov	r1, r3
    e9c0:	f7fb ff0a 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e9c4:	90a6      	str	r0, [sp, #664]	; 0x298
    e9c6:	91a5      	str	r1, [sp, #660]	; 0x294
    e9c8:	e7ff      	b.n	e9ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x17b2>
    e9ca:	98a6      	ldr	r0, [sp, #664]	; 0x298
    e9cc:	f8cd 0840 	str.w	r0, [sp, #2112]	; 0x840
    e9d0:	99a5      	ldr	r1, [sp, #660]	; 0x294
    e9d2:	f8cd 1844 	str.w	r1, [sp, #2116]	; 0x844
    e9d6:	f24f 0238 	movw	r2, #61496	; 0xf038
    e9da:	f2c0 0201 	movt	r2, #1
    e9de:	6812      	ldr	r2, [r2, #0]
    e9e0:	466b      	mov	r3, sp
    e9e2:	f04f 0c01 	mov.w	ip, #1
    e9e6:	f8c3 c008 	str.w	ip, [r3, #8]
    e9ea:	605a      	str	r2, [r3, #4]
    e9ec:	f8c3 c000 	str.w	ip, [r3]
    e9f0:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    e9f4:	2202      	movs	r2, #2
    e9f6:	f50d 6304 	add.w	r3, sp, #2112	; 0x840
    e9fa:	99a7      	ldr	r1, [sp, #668]	; 0x29c
    e9fc:	f007 ffc7 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ea00:	e7ff      	b.n	ea02 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x17ea>
    ea02:	f8dd 181c 	ldr.w	r1, [sp, #2076]	; 0x81c
    ea06:	f64f 00a4 	movw	r0, #63652	; 0xf8a4
    ea0a:	f2c0 0001 	movt	r0, #1
    ea0e:	6802      	ldr	r2, [r0, #0]
    ea10:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    ea14:	f003 fcd4 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ea18:	e7ff      	b.n	ea1a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1802>
    ea1a:	e7ff      	b.n	ea1c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1804>
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    ea1c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ea20:	280f      	cmp	r0, #15
    ea22:	f202 80c7 	bhi.w	10bb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x399c>
    ea26:	e7ff      	b.n	ea28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1810>
    ea28:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ea2c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ea30:	1842      	adds	r2, r0, r1
    ea32:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ea36:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    ea3a:	2b0f      	cmp	r3, #15
    ea3c:	92a4      	str	r2, [sp, #656]	; 0x290
    ea3e:	f202 80c3 	bhi.w	10bc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x39b0>
    ea42:	e7ff      	b.n	ea44 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x182c>
    ea44:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ea48:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ea4c:	1842      	adds	r2, r0, r1
    ea4e:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    ea52:	98a4      	ldr	r0, [sp, #656]	; 0x290
    ea54:	f008 f870 	bl	16b38 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>
    ea58:	90a3      	str	r0, [sp, #652]	; 0x28c
    ea5a:	91a2      	str	r1, [sp, #648]	; 0x288
    ea5c:	e7ff      	b.n	ea5e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1846>
    ea5e:	98a3      	ldr	r0, [sp, #652]	; 0x28c
    ea60:	f88d 0d3e 	strb.w	r0, [sp, #3390]	; 0xd3e
    ea64:	99a2      	ldr	r1, [sp, #648]	; 0x288
    ea66:	f001 0201 	and.w	r2, r1, #1
    ea6a:	f88d 2d3f 	strb.w	r2, [sp, #3391]	; 0xd3f
                self.v[x] = v;
    ea6e:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    ea72:	2a0f      	cmp	r2, #15
    ea74:	f202 80b2 	bhi.w	10bdc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x39c4>
    ea78:	e7ff      	b.n	ea7a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1862>
    ea7a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ea7e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ea82:	1842      	adds	r2, r0, r1
    ea84:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    ea86:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    ea8a:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    ea8c:	f8dd c288 	ldr.w	ip, [sp, #648]	; 0x288
    ea90:	ea22 020c 	bic.w	r2, r2, ip
    ea94:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    ea98:	f001 be8b 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    ea9c:	2005      	movs	r0, #5
    ea9e:	f8cd 084c 	str.w	r0, [sp, #2124]	; 0x84c
    eaa2:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    eaa6:	f2c0 0001 	movt	r0, #1
    eaaa:	6801      	ldr	r1, [r0, #0]
    eaac:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    eab0:	f008 f8a8 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    eab4:	90a1      	str	r0, [sp, #644]	; 0x284
    eab6:	e01f      	b.n	eaf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x18e0>
    eab8:	2001      	movs	r0, #1
    eaba:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    eabe:	e015      	b.n	eaec <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x18d4>
    eac0:	2000      	movs	r0, #0
    eac2:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    eac6:	e011      	b.n	eaec <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x18d4>
    eac8:	2000      	movs	r0, #0
    eaca:	f88d 0e2b 	strb.w	r0, [sp, #3627]	; 0xe2b
    eace:	f89d 1e2b 	ldrb.w	r1, [sp, #3627]	; 0xe2b
    ead2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ead6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    eada:	f002 fc42 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    eade:	f8cd 0e2c 	str.w	r0, [sp, #3628]	; 0xe2c
    eae2:	f8dd 0e2c 	ldr.w	r0, [sp, #3628]	; 0xe2c
    eae6:	f8cd 0854 	str.w	r0, [sp, #2132]	; 0x854
    eaea:	e00a      	b.n	eb02 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x18ea>
    eaec:	f89d 0853 	ldrb.w	r0, [sp, #2131]	; 0x853
    eaf0:	07c0      	lsls	r0, r0, #31
    eaf2:	2800      	cmp	r0, #0
    eaf4:	d112      	bne.n	eb1c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1904>
    eaf6:	e055      	b.n	eba4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x198c>
    eaf8:	98a1      	ldr	r0, [sp, #644]	; 0x284
    eafa:	07c1      	lsls	r1, r0, #31
    eafc:	2900      	cmp	r1, #0
    eafe:	d1e3      	bne.n	eac8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x18b0>
    eb00:	e7de      	b.n	eac0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x18a8>
    eb02:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    eb06:	f60d 0154 	addw	r1, sp, #2132	; 0x854
    eb0a:	f008 f87b 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    eb0e:	90a0      	str	r0, [sp, #640]	; 0x280
    eb10:	e7ff      	b.n	eb12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x18fa>
    eb12:	98a0      	ldr	r0, [sp, #640]	; 0x280
    eb14:	07c1      	lsls	r1, r0, #31
    eb16:	2900      	cmp	r1, #0
    eb18:	d1ce      	bne.n	eab8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x18a0>
    eb1a:	e7d1      	b.n	eac0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x18a8>
                trace!("[{:04x}] SHR Vx, Vy", self.pc);
    eb1c:	f64f 0014 	movw	r0, #63508	; 0xf814
    eb20:	f2c0 0001 	movt	r0, #1
    eb24:	6801      	ldr	r1, [r0, #0]
    eb26:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eb2a:	f100 0212 	add.w	r2, r0, #18
    eb2e:	f8cd 2878 	str.w	r2, [sp, #2168]	; 0x878
    eb32:	f8dd 2878 	ldr.w	r2, [sp, #2168]	; 0x878
    eb36:	f8cd 2d34 	str.w	r2, [sp, #3380]	; 0xd34
    eb3a:	f249 1323 	movw	r3, #37155	; 0x9123
    eb3e:	f2c0 0301 	movt	r3, #1
    eb42:	4610      	mov	r0, r2
    eb44:	919f      	str	r1, [sp, #636]	; 0x27c
    eb46:	4619      	mov	r1, r3
    eb48:	f7fb fe46 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    eb4c:	909e      	str	r0, [sp, #632]	; 0x278
    eb4e:	919d      	str	r1, [sp, #628]	; 0x274
    eb50:	e7ff      	b.n	eb52 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x193a>
    eb52:	989e      	ldr	r0, [sp, #632]	; 0x278
    eb54:	f8cd 0870 	str.w	r0, [sp, #2160]	; 0x870
    eb58:	999d      	ldr	r1, [sp, #628]	; 0x274
    eb5a:	f8cd 1874 	str.w	r1, [sp, #2164]	; 0x874
    eb5e:	f24f 0238 	movw	r2, #61496	; 0xf038
    eb62:	f2c0 0201 	movt	r2, #1
    eb66:	6812      	ldr	r2, [r2, #0]
    eb68:	466b      	mov	r3, sp
    eb6a:	f04f 0c01 	mov.w	ip, #1
    eb6e:	f8c3 c008 	str.w	ip, [r3, #8]
    eb72:	605a      	str	r2, [r3, #4]
    eb74:	f8c3 c000 	str.w	ip, [r3]
    eb78:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    eb7c:	2202      	movs	r2, #2
    eb7e:	f50d 6307 	add.w	r3, sp, #2160	; 0x870
    eb82:	999f      	ldr	r1, [sp, #636]	; 0x27c
    eb84:	f007 ff03 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    eb88:	e7ff      	b.n	eb8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1972>
    eb8a:	f8dd 184c 	ldr.w	r1, [sp, #2124]	; 0x84c
    eb8e:	f64f 0034 	movw	r0, #63540	; 0xf834
    eb92:	f2c0 0001 	movt	r0, #1
    eb96:	6802      	ldr	r2, [r0, #0]
    eb98:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    eb9c:	f003 fc10 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    eba0:	e7ff      	b.n	eba2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x198a>
    eba2:	e7ff      	b.n	eba4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x198c>
                self.v[0xf] = self.v[x] & 1;
    eba4:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    eba8:	280f      	cmp	r0, #15
    ebaa:	f201 87e5 	bhi.w	10b78 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3960>
    ebae:	e7ff      	b.n	ebb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1998>
    ebb0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ebb4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ebb8:	1842      	adds	r2, r0, r1
    ebba:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ebbe:	f002 0201 	and.w	r2, r2, #1
    ebc2:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shr(1);
    ebc6:	290f      	cmp	r1, #15
    ebc8:	f201 87e0 	bhi.w	10b8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3974>
    ebcc:	e7ff      	b.n	ebce <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x19b6>
    ebce:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ebd2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ebd6:	1842      	adds	r2, r0, r1
    ebd8:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    ebdc:	2101      	movs	r1, #1
    ebde:	f007 ff5c 	bl	16a9a <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E>
    ebe2:	909c      	str	r0, [sp, #624]	; 0x270
    ebe4:	e7ff      	b.n	ebe6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x19ce>
    ebe6:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ebea:	280f      	cmp	r0, #15
    ebec:	f201 87d8 	bhi.w	10ba0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3988>
    ebf0:	e7ff      	b.n	ebf2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x19da>
    ebf2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ebf6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ebfa:	1842      	adds	r2, r0, r1
    ebfc:	9b9c      	ldr	r3, [sp, #624]	; 0x270
    ebfe:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    ec02:	f001 bdd6 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    ec06:	2005      	movs	r0, #5
    ec08:	f8cd 087c 	str.w	r0, [sp, #2172]	; 0x87c
    ec0c:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    ec10:	f2c0 0001 	movt	r0, #1
    ec14:	6801      	ldr	r1, [r0, #0]
    ec16:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    ec1a:	f007 fff3 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ec1e:	909b      	str	r0, [sp, #620]	; 0x26c
    ec20:	e01f      	b.n	ec62 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1a4a>
    ec22:	2001      	movs	r0, #1
    ec24:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    ec28:	e015      	b.n	ec56 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1a3e>
    ec2a:	2000      	movs	r0, #0
    ec2c:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    ec30:	e011      	b.n	ec56 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1a3e>
    ec32:	2000      	movs	r0, #0
    ec34:	f88d 0e33 	strb.w	r0, [sp, #3635]	; 0xe33
    ec38:	f89d 1e33 	ldrb.w	r1, [sp, #3635]	; 0xe33
    ec3c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ec40:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ec44:	f002 fb8d 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ec48:	f8cd 0e34 	str.w	r0, [sp, #3636]	; 0xe34
    ec4c:	f8dd 0e34 	ldr.w	r0, [sp, #3636]	; 0xe34
    ec50:	f8cd 0884 	str.w	r0, [sp, #2180]	; 0x884
    ec54:	e00a      	b.n	ec6c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1a54>
    ec56:	f89d 0883 	ldrb.w	r0, [sp, #2179]	; 0x883
    ec5a:	07c0      	lsls	r0, r0, #31
    ec5c:	2800      	cmp	r0, #0
    ec5e:	d112      	bne.n	ec86 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1a6e>
    ec60:	e055      	b.n	ed0e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1af6>
    ec62:	989b      	ldr	r0, [sp, #620]	; 0x26c
    ec64:	07c1      	lsls	r1, r0, #31
    ec66:	2900      	cmp	r1, #0
    ec68:	d1e3      	bne.n	ec32 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1a1a>
    ec6a:	e7de      	b.n	ec2a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1a12>
    ec6c:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    ec70:	f60d 0184 	addw	r1, sp, #2180	; 0x884
    ec74:	f007 ffc6 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ec78:	909a      	str	r0, [sp, #616]	; 0x268
    ec7a:	e7ff      	b.n	ec7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1a64>
    ec7c:	989a      	ldr	r0, [sp, #616]	; 0x268
    ec7e:	07c1      	lsls	r1, r0, #31
    ec80:	2900      	cmp	r1, #0
    ec82:	d1ce      	bne.n	ec22 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1a0a>
    ec84:	e7d1      	b.n	ec2a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1a12>
                trace!("[{:04x}] SUBN Vx, Vy", self.pc);
    ec86:	f24f 70a4 	movw	r0, #63396	; 0xf7a4
    ec8a:	f2c0 0001 	movt	r0, #1
    ec8e:	6801      	ldr	r1, [r0, #0]
    ec90:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ec94:	f100 0212 	add.w	r2, r0, #18
    ec98:	f8cd 28a8 	str.w	r2, [sp, #2216]	; 0x8a8
    ec9c:	f8dd 28a8 	ldr.w	r2, [sp, #2216]	; 0x8a8
    eca0:	f8cd 2d2c 	str.w	r2, [sp, #3372]	; 0xd2c
    eca4:	f249 1323 	movw	r3, #37155	; 0x9123
    eca8:	f2c0 0301 	movt	r3, #1
    ecac:	4610      	mov	r0, r2
    ecae:	9199      	str	r1, [sp, #612]	; 0x264
    ecb0:	4619      	mov	r1, r3
    ecb2:	f7fb fd91 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ecb6:	9098      	str	r0, [sp, #608]	; 0x260
    ecb8:	9197      	str	r1, [sp, #604]	; 0x25c
    ecba:	e7ff      	b.n	ecbc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1aa4>
    ecbc:	9898      	ldr	r0, [sp, #608]	; 0x260
    ecbe:	f8cd 08a0 	str.w	r0, [sp, #2208]	; 0x8a0
    ecc2:	9997      	ldr	r1, [sp, #604]	; 0x25c
    ecc4:	f8cd 18a4 	str.w	r1, [sp, #2212]	; 0x8a4
    ecc8:	f24f 0238 	movw	r2, #61496	; 0xf038
    eccc:	f2c0 0201 	movt	r2, #1
    ecd0:	6812      	ldr	r2, [r2, #0]
    ecd2:	466b      	mov	r3, sp
    ecd4:	f04f 0c01 	mov.w	ip, #1
    ecd8:	f8c3 c008 	str.w	ip, [r3, #8]
    ecdc:	605a      	str	r2, [r3, #4]
    ecde:	f8c3 c000 	str.w	ip, [r3]
    ece2:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    ece6:	2202      	movs	r2, #2
    ece8:	f50d 630a 	add.w	r3, sp, #2208	; 0x8a0
    ecec:	9999      	ldr	r1, [sp, #612]	; 0x264
    ecee:	f007 fe4e 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ecf2:	e7ff      	b.n	ecf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1adc>
    ecf4:	f8dd 187c 	ldr.w	r1, [sp, #2172]	; 0x87c
    ecf8:	f24f 70c4 	movw	r0, #63428	; 0xf7c4
    ecfc:	f2c0 0001 	movt	r0, #1
    ed00:	6802      	ldr	r2, [r0, #0]
    ed02:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    ed06:	f003 fb5b 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ed0a:	e7ff      	b.n	ed0c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1af4>
    ed0c:	e7ff      	b.n	ed0e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1af6>
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    ed0e:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    ed12:	280f      	cmp	r0, #15
    ed14:	f201 8712 	bhi.w	10b3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3924>
    ed18:	e7ff      	b.n	ed1a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1b02>
    ed1a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ed1e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ed22:	1842      	adds	r2, r0, r1
    ed24:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ed28:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    ed2c:	2b0f      	cmp	r3, #15
    ed2e:	9296      	str	r2, [sp, #600]	; 0x258
    ed30:	f201 870e 	bhi.w	10b50 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3938>
    ed34:	e7ff      	b.n	ed36 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1b1e>
    ed36:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ed3a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ed3e:	1842      	adds	r2, r0, r1
    ed40:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    ed44:	9896      	ldr	r0, [sp, #600]	; 0x258
    ed46:	f007 fef7 	bl	16b38 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>
    ed4a:	9095      	str	r0, [sp, #596]	; 0x254
    ed4c:	9194      	str	r1, [sp, #592]	; 0x250
    ed4e:	e7ff      	b.n	ed50 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1b38>
    ed50:	9895      	ldr	r0, [sp, #596]	; 0x254
    ed52:	f88d 0d32 	strb.w	r0, [sp, #3378]	; 0xd32
    ed56:	9994      	ldr	r1, [sp, #592]	; 0x250
    ed58:	f001 0201 	and.w	r2, r1, #1
    ed5c:	f88d 2d33 	strb.w	r2, [sp, #3379]	; 0xd33
                self.v[x] = v;
    ed60:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    ed64:	2a0f      	cmp	r2, #15
    ed66:	f201 86fd 	bhi.w	10b64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x394c>
    ed6a:	e7ff      	b.n	ed6c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1b54>
    ed6c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ed70:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ed74:	1842      	adds	r2, r0, r1
    ed76:	9b95      	ldr	r3, [sp, #596]	; 0x254
    ed78:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    ed7c:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    ed7e:	f8dd c250 	ldr.w	ip, [sp, #592]	; 0x250
    ed82:	ea22 020c 	bic.w	r2, r2, ip
    ed86:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    ed8a:	f001 bd12 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    ed8e:	2005      	movs	r0, #5
    ed90:	f8cd 08ac 	str.w	r0, [sp, #2220]	; 0x8ac
    ed94:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    ed98:	f2c0 0001 	movt	r0, #1
    ed9c:	6801      	ldr	r1, [r0, #0]
    ed9e:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    eda2:	f007 ff2f 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    eda6:	9093      	str	r0, [sp, #588]	; 0x24c
    eda8:	e01f      	b.n	edea <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1bd2>
    edaa:	2001      	movs	r0, #1
    edac:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    edb0:	e015      	b.n	edde <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1bc6>
    edb2:	2000      	movs	r0, #0
    edb4:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    edb8:	e011      	b.n	edde <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1bc6>
    edba:	2000      	movs	r0, #0
    edbc:	f88d 0e3b 	strb.w	r0, [sp, #3643]	; 0xe3b
    edc0:	f89d 1e3b 	ldrb.w	r1, [sp, #3643]	; 0xe3b
    edc4:	f644 206c 	movw	r0, #19052	; 0x4a6c
    edc8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    edcc:	f002 fac9 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    edd0:	f8cd 0e3c 	str.w	r0, [sp, #3644]	; 0xe3c
    edd4:	f8dd 0e3c 	ldr.w	r0, [sp, #3644]	; 0xe3c
    edd8:	f8cd 08b4 	str.w	r0, [sp, #2228]	; 0x8b4
    eddc:	e00a      	b.n	edf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1bdc>
    edde:	f89d 08b3 	ldrb.w	r0, [sp, #2227]	; 0x8b3
    ede2:	07c0      	lsls	r0, r0, #31
    ede4:	2800      	cmp	r0, #0
    ede6:	d112      	bne.n	ee0e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1bf6>
    ede8:	e055      	b.n	ee96 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1c7e>
    edea:	9893      	ldr	r0, [sp, #588]	; 0x24c
    edec:	07c1      	lsls	r1, r0, #31
    edee:	2900      	cmp	r1, #0
    edf0:	d1e3      	bne.n	edba <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1ba2>
    edf2:	e7de      	b.n	edb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1b9a>
    edf4:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    edf8:	f60d 01b4 	addw	r1, sp, #2228	; 0x8b4
    edfc:	f007 ff02 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ee00:	9092      	str	r0, [sp, #584]	; 0x248
    ee02:	e7ff      	b.n	ee04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1bec>
    ee04:	9892      	ldr	r0, [sp, #584]	; 0x248
    ee06:	07c1      	lsls	r1, r0, #31
    ee08:	2900      	cmp	r1, #0
    ee0a:	d1ce      	bne.n	edaa <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1b92>
    ee0c:	e7d1      	b.n	edb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1b9a>
                trace!("[{:04x}] SHL Vx, Vy", self.pc);
    ee0e:	f24f 7030 	movw	r0, #63280	; 0xf730
    ee12:	f2c0 0001 	movt	r0, #1
    ee16:	6801      	ldr	r1, [r0, #0]
    ee18:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ee1c:	f100 0212 	add.w	r2, r0, #18
    ee20:	f8cd 28d8 	str.w	r2, [sp, #2264]	; 0x8d8
    ee24:	f8dd 28d8 	ldr.w	r2, [sp, #2264]	; 0x8d8
    ee28:	f8cd 2d28 	str.w	r2, [sp, #3368]	; 0xd28
    ee2c:	f249 1323 	movw	r3, #37155	; 0x9123
    ee30:	f2c0 0301 	movt	r3, #1
    ee34:	4610      	mov	r0, r2
    ee36:	9191      	str	r1, [sp, #580]	; 0x244
    ee38:	4619      	mov	r1, r3
    ee3a:	f7fb fccd 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ee3e:	9090      	str	r0, [sp, #576]	; 0x240
    ee40:	918f      	str	r1, [sp, #572]	; 0x23c
    ee42:	e7ff      	b.n	ee44 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1c2c>
    ee44:	9890      	ldr	r0, [sp, #576]	; 0x240
    ee46:	f8cd 08d0 	str.w	r0, [sp, #2256]	; 0x8d0
    ee4a:	998f      	ldr	r1, [sp, #572]	; 0x23c
    ee4c:	f8cd 18d4 	str.w	r1, [sp, #2260]	; 0x8d4
    ee50:	f24f 0238 	movw	r2, #61496	; 0xf038
    ee54:	f2c0 0201 	movt	r2, #1
    ee58:	6812      	ldr	r2, [r2, #0]
    ee5a:	466b      	mov	r3, sp
    ee5c:	f04f 0c01 	mov.w	ip, #1
    ee60:	f8c3 c008 	str.w	ip, [r3, #8]
    ee64:	605a      	str	r2, [r3, #4]
    ee66:	f8c3 c000 	str.w	ip, [r3]
    ee6a:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    ee6e:	2202      	movs	r2, #2
    ee70:	f50d 630d 	add.w	r3, sp, #2256	; 0x8d0
    ee74:	9991      	ldr	r1, [sp, #580]	; 0x244
    ee76:	f007 fd8a 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ee7a:	e7ff      	b.n	ee7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1c64>
    ee7c:	f8dd 18ac 	ldr.w	r1, [sp, #2220]	; 0x8ac
    ee80:	f24f 7050 	movw	r0, #63312	; 0xf750
    ee84:	f2c0 0001 	movt	r0, #1
    ee88:	6802      	ldr	r2, [r0, #0]
    ee8a:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    ee8e:	f003 fa97 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ee92:	e7ff      	b.n	ee94 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1c7c>
    ee94:	e7ff      	b.n	ee96 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1c7e>
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    ee96:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ee9a:	280f      	cmp	r0, #15
    ee9c:	f201 8630 	bhi.w	10b00 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x38e8>
    eea0:	e7ff      	b.n	eea2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1c8a>
    eea2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eea6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eeaa:	1842      	adds	r2, r0, r1
    eeac:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    eeb0:	09d2      	lsrs	r2, r2, #7
    eeb2:	928e      	str	r2, [sp, #568]	; 0x238
    eeb4:	e7ff      	b.n	eeb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1c9e>
    eeb6:	988e      	ldr	r0, [sp, #568]	; 0x238
    eeb8:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    eebc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shl(1);
    eec0:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    eec4:	2a0f      	cmp	r2, #15
    eec6:	f201 8625 	bhi.w	10b14 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x38fc>
    eeca:	e7ff      	b.n	eecc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1cb4>
    eecc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eed0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eed4:	1842      	adds	r2, r0, r1
    eed6:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    eeda:	2101      	movs	r1, #1
    eedc:	f007 fdcc 	bl	16a78 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E>
    eee0:	908d      	str	r0, [sp, #564]	; 0x234
    eee2:	e7ff      	b.n	eee4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1ccc>
    eee4:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    eee8:	280f      	cmp	r0, #15
    eeea:	f201 861d 	bhi.w	10b28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3910>
    eeee:	e7ff      	b.n	eef0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1cd8>
    eef0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eef4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eef8:	1842      	adds	r2, r0, r1
    eefa:	9b8d      	ldr	r3, [sp, #564]	; 0x234
    eefc:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    ef00:	f001 bc57 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    ef04:	2005      	movs	r0, #5
    ef06:	f8cd 08dc 	str.w	r0, [sp, #2268]	; 0x8dc
    ef0a:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    ef0e:	f2c0 0001 	movt	r0, #1
    ef12:	6801      	ldr	r1, [r0, #0]
    ef14:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    ef18:	f007 fe74 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ef1c:	908c      	str	r0, [sp, #560]	; 0x230
    ef1e:	e01f      	b.n	ef60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1d48>
    ef20:	2001      	movs	r0, #1
    ef22:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    ef26:	e015      	b.n	ef54 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1d3c>
    ef28:	2000      	movs	r0, #0
    ef2a:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    ef2e:	e011      	b.n	ef54 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1d3c>
    ef30:	2000      	movs	r0, #0
    ef32:	f88d 0e43 	strb.w	r0, [sp, #3651]	; 0xe43
    ef36:	f89d 1e43 	ldrb.w	r1, [sp, #3651]	; 0xe43
    ef3a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ef3e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ef42:	f002 fa0e 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ef46:	f8cd 0e44 	str.w	r0, [sp, #3652]	; 0xe44
    ef4a:	f8dd 0e44 	ldr.w	r0, [sp, #3652]	; 0xe44
    ef4e:	f8cd 08e4 	str.w	r0, [sp, #2276]	; 0x8e4
    ef52:	e00a      	b.n	ef6a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1d52>
    ef54:	f89d 08e3 	ldrb.w	r0, [sp, #2275]	; 0x8e3
    ef58:	07c0      	lsls	r0, r0, #31
    ef5a:	2800      	cmp	r0, #0
    ef5c:	d112      	bne.n	ef84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1d6c>
    ef5e:	e055      	b.n	f00c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1df4>
    ef60:	988c      	ldr	r0, [sp, #560]	; 0x230
    ef62:	07c1      	lsls	r1, r0, #31
    ef64:	2900      	cmp	r1, #0
    ef66:	d1e3      	bne.n	ef30 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1d18>
    ef68:	e7de      	b.n	ef28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1d10>
    ef6a:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    ef6e:	f60d 01e4 	addw	r1, sp, #2276	; 0x8e4
    ef72:	f007 fe47 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ef76:	908b      	str	r0, [sp, #556]	; 0x22c
    ef78:	e7ff      	b.n	ef7a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1d62>
    ef7a:	988b      	ldr	r0, [sp, #556]	; 0x22c
    ef7c:	07c1      	lsls	r1, r0, #31
    ef7e:	2900      	cmp	r1, #0
    ef80:	d1ce      	bne.n	ef20 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1d08>
    ef82:	e7d1      	b.n	ef28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1d10>
                trace!("[{:04x}] SNE Vx, Vy", self.pc);
    ef84:	f24f 60d0 	movw	r0, #63184	; 0xf6d0
    ef88:	f2c0 0001 	movt	r0, #1
    ef8c:	6801      	ldr	r1, [r0, #0]
    ef8e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ef92:	f100 0212 	add.w	r2, r0, #18
    ef96:	f8cd 2908 	str.w	r2, [sp, #2312]	; 0x908
    ef9a:	f8dd 2908 	ldr.w	r2, [sp, #2312]	; 0x908
    ef9e:	f8cd 2d24 	str.w	r2, [sp, #3364]	; 0xd24
    efa2:	f249 1323 	movw	r3, #37155	; 0x9123
    efa6:	f2c0 0301 	movt	r3, #1
    efaa:	4610      	mov	r0, r2
    efac:	918a      	str	r1, [sp, #552]	; 0x228
    efae:	4619      	mov	r1, r3
    efb0:	f7fb fc12 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    efb4:	9089      	str	r0, [sp, #548]	; 0x224
    efb6:	9188      	str	r1, [sp, #544]	; 0x220
    efb8:	e7ff      	b.n	efba <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1da2>
    efba:	9889      	ldr	r0, [sp, #548]	; 0x224
    efbc:	f8cd 0900 	str.w	r0, [sp, #2304]	; 0x900
    efc0:	9988      	ldr	r1, [sp, #544]	; 0x220
    efc2:	f8cd 1904 	str.w	r1, [sp, #2308]	; 0x904
    efc6:	f24f 0238 	movw	r2, #61496	; 0xf038
    efca:	f2c0 0201 	movt	r2, #1
    efce:	6812      	ldr	r2, [r2, #0]
    efd0:	466b      	mov	r3, sp
    efd2:	f04f 0c01 	mov.w	ip, #1
    efd6:	f8c3 c008 	str.w	ip, [r3, #8]
    efda:	605a      	str	r2, [r3, #4]
    efdc:	f8c3 c000 	str.w	ip, [r3]
    efe0:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    efe4:	2202      	movs	r2, #2
    efe6:	f50d 6310 	add.w	r3, sp, #2304	; 0x900
    efea:	998a      	ldr	r1, [sp, #552]	; 0x228
    efec:	f007 fccf 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    eff0:	e7ff      	b.n	eff2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1dda>
    eff2:	f8dd 18dc 	ldr.w	r1, [sp, #2268]	; 0x8dc
    eff6:	f24f 60f0 	movw	r0, #63216	; 0xf6f0
    effa:	f2c0 0001 	movt	r0, #1
    effe:	6802      	ldr	r2, [r0, #0]
    f000:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    f004:	f003 f9dc 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f008:	e7ff      	b.n	f00a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1df2>
    f00a:	e7ff      	b.n	f00c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1df4>
                if self.v[x] != self.v[y] {
    f00c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    f010:	280f      	cmp	r0, #15
    f012:	f201 8561 	bhi.w	10ad8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x38c0>
    f016:	e7ff      	b.n	f018 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1e00>
    f018:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f01c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f020:	1842      	adds	r2, r0, r1
    f022:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f026:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    f02a:	2b0f      	cmp	r3, #15
    f02c:	9287      	str	r2, [sp, #540]	; 0x21c
    f02e:	f201 855d 	bhi.w	10aec <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x38d4>
    f032:	e7ff      	b.n	f034 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1e1c>
    f034:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f038:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    f03c:	1842      	adds	r2, r0, r1
    f03e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f042:	9b87      	ldr	r3, [sp, #540]	; 0x21c
    f044:	fa5f fc83 	uxtb.w	ip, r3
    f048:	4594      	cmp	ip, r2
    f04a:	d006      	beq.n	f05a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1e42>
    f04c:	e7ff      	b.n	f04e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1e36>
                    self.next();
    f04e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f052:	f001 fee0 	bl	10e16 <_ZN8libchip814Chip8$LT$T$GT$4next17h59db21f4d7eca91dE>
    f056:	e7ff      	b.n	f058 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1e40>
                if self.v[x] != self.v[y] {
    f058:	e7ff      	b.n	f05a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1e42>
        match (
    f05a:	f001 bbaa 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    f05e:	2005      	movs	r0, #5
    f060:	f8cd 090c 	str.w	r0, [sp, #2316]	; 0x90c
    f064:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    f068:	f2c0 0001 	movt	r0, #1
    f06c:	6801      	ldr	r1, [r0, #0]
    f06e:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    f072:	f007 fdc7 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f076:	9086      	str	r0, [sp, #536]	; 0x218
    f078:	e01f      	b.n	f0ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1ea2>
    f07a:	2001      	movs	r0, #1
    f07c:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    f080:	e015      	b.n	f0ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1e96>
    f082:	2000      	movs	r0, #0
    f084:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    f088:	e011      	b.n	f0ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1e96>
    f08a:	2000      	movs	r0, #0
    f08c:	f88d 0e4b 	strb.w	r0, [sp, #3659]	; 0xe4b
    f090:	f89d 1e4b 	ldrb.w	r1, [sp, #3659]	; 0xe4b
    f094:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f098:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f09c:	f002 f961 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f0a0:	f8cd 0e4c 	str.w	r0, [sp, #3660]	; 0xe4c
    f0a4:	f8dd 0e4c 	ldr.w	r0, [sp, #3660]	; 0xe4c
    f0a8:	f8cd 0914 	str.w	r0, [sp, #2324]	; 0x914
    f0ac:	e00a      	b.n	f0c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1eac>
    f0ae:	f89d 0913 	ldrb.w	r0, [sp, #2323]	; 0x913
    f0b2:	07c0      	lsls	r0, r0, #31
    f0b4:	2800      	cmp	r0, #0
    f0b6:	d112      	bne.n	f0de <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1ec6>
    f0b8:	e055      	b.n	f166 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1f4e>
    f0ba:	9886      	ldr	r0, [sp, #536]	; 0x218
    f0bc:	07c1      	lsls	r1, r0, #31
    f0be:	2900      	cmp	r1, #0
    f0c0:	d1e3      	bne.n	f08a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1e72>
    f0c2:	e7de      	b.n	f082 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1e6a>
    f0c4:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    f0c8:	f60d 1114 	addw	r1, sp, #2324	; 0x914
    f0cc:	f007 fd9a 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f0d0:	9085      	str	r0, [sp, #532]	; 0x214
    f0d2:	e7ff      	b.n	f0d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1ebc>
    f0d4:	9885      	ldr	r0, [sp, #532]	; 0x214
    f0d6:	07c1      	lsls	r1, r0, #31
    f0d8:	2900      	cmp	r1, #0
    f0da:	d1ce      	bne.n	f07a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1e62>
    f0dc:	e7d1      	b.n	f082 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1e6a>
                trace!("[{:04x}] LD I, nnn", self.pc);
    f0de:	f24f 6090 	movw	r0, #63120	; 0xf690
    f0e2:	f2c0 0001 	movt	r0, #1
    f0e6:	6801      	ldr	r1, [r0, #0]
    f0e8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f0ec:	f100 0212 	add.w	r2, r0, #18
    f0f0:	f8cd 2938 	str.w	r2, [sp, #2360]	; 0x938
    f0f4:	f8dd 2938 	ldr.w	r2, [sp, #2360]	; 0x938
    f0f8:	f8cd 2d20 	str.w	r2, [sp, #3360]	; 0xd20
    f0fc:	f249 1323 	movw	r3, #37155	; 0x9123
    f100:	f2c0 0301 	movt	r3, #1
    f104:	4610      	mov	r0, r2
    f106:	9184      	str	r1, [sp, #528]	; 0x210
    f108:	4619      	mov	r1, r3
    f10a:	f7fb fb65 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f10e:	9083      	str	r0, [sp, #524]	; 0x20c
    f110:	9182      	str	r1, [sp, #520]	; 0x208
    f112:	e7ff      	b.n	f114 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1efc>
    f114:	9883      	ldr	r0, [sp, #524]	; 0x20c
    f116:	f8cd 0930 	str.w	r0, [sp, #2352]	; 0x930
    f11a:	9982      	ldr	r1, [sp, #520]	; 0x208
    f11c:	f8cd 1934 	str.w	r1, [sp, #2356]	; 0x934
    f120:	f24f 0238 	movw	r2, #61496	; 0xf038
    f124:	f2c0 0201 	movt	r2, #1
    f128:	6812      	ldr	r2, [r2, #0]
    f12a:	466b      	mov	r3, sp
    f12c:	f04f 0c01 	mov.w	ip, #1
    f130:	f8c3 c008 	str.w	ip, [r3, #8]
    f134:	605a      	str	r2, [r3, #4]
    f136:	f8c3 c000 	str.w	ip, [r3]
    f13a:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    f13e:	2202      	movs	r2, #2
    f140:	f50d 6313 	add.w	r3, sp, #2352	; 0x930
    f144:	9984      	ldr	r1, [sp, #528]	; 0x210
    f146:	f007 fc22 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f14a:	e7ff      	b.n	f14c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1f34>
    f14c:	f8dd 190c 	ldr.w	r1, [sp, #2316]	; 0x90c
    f150:	f24f 60b0 	movw	r0, #63152	; 0xf6b0
    f154:	f2c0 0001 	movt	r0, #1
    f158:	6802      	ldr	r2, [r0, #0]
    f15a:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    f15e:	f003 f92f 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f162:	e7ff      	b.n	f164 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1f4c>
    f164:	e7ff      	b.n	f166 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1f4e>
                self.i = nnn;
    f166:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    f16a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f16e:	8208      	strh	r0, [r1, #16]
        match (
    f170:	f001 bb1f 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    f174:	2005      	movs	r0, #5
    f176:	f8cd 093c 	str.w	r0, [sp, #2364]	; 0x93c
    f17a:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    f17e:	f2c0 0001 	movt	r0, #1
    f182:	6801      	ldr	r1, [r0, #0]
    f184:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    f188:	f007 fd3c 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f18c:	9081      	str	r0, [sp, #516]	; 0x204
    f18e:	e01f      	b.n	f1d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1fb8>
    f190:	2001      	movs	r0, #1
    f192:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    f196:	e015      	b.n	f1c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1fac>
    f198:	2000      	movs	r0, #0
    f19a:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    f19e:	e011      	b.n	f1c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1fac>
    f1a0:	2000      	movs	r0, #0
    f1a2:	f88d 0e53 	strb.w	r0, [sp, #3667]	; 0xe53
    f1a6:	f89d 1e53 	ldrb.w	r1, [sp, #3667]	; 0xe53
    f1aa:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f1ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f1b2:	f002 f8d6 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f1b6:	f8cd 0e54 	str.w	r0, [sp, #3668]	; 0xe54
    f1ba:	f8dd 0e54 	ldr.w	r0, [sp, #3668]	; 0xe54
    f1be:	f8cd 0944 	str.w	r0, [sp, #2372]	; 0x944
    f1c2:	e00a      	b.n	f1da <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1fc2>
    f1c4:	f89d 0943 	ldrb.w	r0, [sp, #2371]	; 0x943
    f1c8:	07c0      	lsls	r0, r0, #31
    f1ca:	2800      	cmp	r0, #0
    f1cc:	d112      	bne.n	f1f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1fdc>
    f1ce:	e055      	b.n	f27c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2064>
    f1d0:	9881      	ldr	r0, [sp, #516]	; 0x204
    f1d2:	07c1      	lsls	r1, r0, #31
    f1d4:	2900      	cmp	r1, #0
    f1d6:	d1e3      	bne.n	f1a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1f88>
    f1d8:	e7de      	b.n	f198 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1f80>
    f1da:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    f1de:	f60d 1144 	addw	r1, sp, #2372	; 0x944
    f1e2:	f007 fd0f 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f1e6:	9080      	str	r0, [sp, #512]	; 0x200
    f1e8:	e7ff      	b.n	f1ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1fd2>
    f1ea:	9880      	ldr	r0, [sp, #512]	; 0x200
    f1ec:	07c1      	lsls	r1, r0, #31
    f1ee:	2900      	cmp	r1, #0
    f1f0:	d1ce      	bne.n	f190 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1f78>
    f1f2:	e7d1      	b.n	f198 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1f80>
                trace!("[{:04x}] JP V0, nnn", self.pc);
    f1f4:	f24f 6050 	movw	r0, #63056	; 0xf650
    f1f8:	f2c0 0001 	movt	r0, #1
    f1fc:	6801      	ldr	r1, [r0, #0]
    f1fe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f202:	f100 0212 	add.w	r2, r0, #18
    f206:	f8cd 2968 	str.w	r2, [sp, #2408]	; 0x968
    f20a:	f8dd 2968 	ldr.w	r2, [sp, #2408]	; 0x968
    f20e:	f8cd 2d1c 	str.w	r2, [sp, #3356]	; 0xd1c
    f212:	f249 1323 	movw	r3, #37155	; 0x9123
    f216:	f2c0 0301 	movt	r3, #1
    f21a:	4610      	mov	r0, r2
    f21c:	917f      	str	r1, [sp, #508]	; 0x1fc
    f21e:	4619      	mov	r1, r3
    f220:	f7fb fada 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f224:	907e      	str	r0, [sp, #504]	; 0x1f8
    f226:	917d      	str	r1, [sp, #500]	; 0x1f4
    f228:	e7ff      	b.n	f22a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2012>
    f22a:	987e      	ldr	r0, [sp, #504]	; 0x1f8
    f22c:	f8cd 0960 	str.w	r0, [sp, #2400]	; 0x960
    f230:	997d      	ldr	r1, [sp, #500]	; 0x1f4
    f232:	f8cd 1964 	str.w	r1, [sp, #2404]	; 0x964
    f236:	f24f 0238 	movw	r2, #61496	; 0xf038
    f23a:	f2c0 0201 	movt	r2, #1
    f23e:	6812      	ldr	r2, [r2, #0]
    f240:	466b      	mov	r3, sp
    f242:	f04f 0c01 	mov.w	ip, #1
    f246:	f8c3 c008 	str.w	ip, [r3, #8]
    f24a:	605a      	str	r2, [r3, #4]
    f24c:	f8c3 c000 	str.w	ip, [r3]
    f250:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    f254:	2202      	movs	r2, #2
    f256:	f50d 6316 	add.w	r3, sp, #2400	; 0x960
    f25a:	997f      	ldr	r1, [sp, #508]	; 0x1fc
    f25c:	f007 fb97 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f260:	e7ff      	b.n	f262 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x204a>
    f262:	f8dd 193c 	ldr.w	r1, [sp, #2364]	; 0x93c
    f266:	f24f 6070 	movw	r0, #63088	; 0xf670
    f26a:	f2c0 0001 	movt	r0, #1
    f26e:	6802      	ldr	r2, [r0, #0]
    f270:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    f274:	f003 f8a4 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f278:	e7ff      	b.n	f27a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2062>
    f27a:	e7ff      	b.n	f27c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2064>
                self.jump(nnn.wrapping_add(self.v[0].into()).wrapping_sub(2));
    f27c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f280:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    f284:	f002 f860 	bl	11348 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
    f288:	907c      	str	r0, [sp, #496]	; 0x1f0
    f28a:	e7ff      	b.n	f28c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2074>
    f28c:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    f290:	997c      	ldr	r1, [sp, #496]	; 0x1f0
    f292:	f007 fc7d 	bl	16b90 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
    f296:	907b      	str	r0, [sp, #492]	; 0x1ec
    f298:	e7ff      	b.n	f29a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2082>
    f29a:	2102      	movs	r1, #2
    f29c:	987b      	ldr	r0, [sp, #492]	; 0x1ec
    f29e:	f007 fc88 	bl	16bb2 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    f2a2:	907a      	str	r0, [sp, #488]	; 0x1e8
    f2a4:	e7ff      	b.n	f2a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x208e>
    f2a6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f2aa:	997a      	ldr	r1, [sp, #488]	; 0x1e8
    f2ac:	f001 fd70 	bl	10d90 <_ZN8libchip814Chip8$LT$T$GT$4jump17h930b3c38e90d0056E>
    f2b0:	e7ff      	b.n	f2b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x209a>
        match (
    f2b2:	f001 ba7e 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    f2b6:	2005      	movs	r0, #5
    f2b8:	f8cd 096c 	str.w	r0, [sp, #2412]	; 0x96c
    f2bc:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    f2c0:	f2c0 0001 	movt	r0, #1
    f2c4:	6801      	ldr	r1, [r0, #0]
    f2c6:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    f2ca:	f007 fc9b 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f2ce:	9079      	str	r0, [sp, #484]	; 0x1e4
    f2d0:	e01f      	b.n	f312 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x20fa>
    f2d2:	2001      	movs	r0, #1
    f2d4:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    f2d8:	e015      	b.n	f306 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x20ee>
    f2da:	2000      	movs	r0, #0
    f2dc:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    f2e0:	e011      	b.n	f306 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x20ee>
    f2e2:	2000      	movs	r0, #0
    f2e4:	f88d 0e5b 	strb.w	r0, [sp, #3675]	; 0xe5b
    f2e8:	f89d 1e5b 	ldrb.w	r1, [sp, #3675]	; 0xe5b
    f2ec:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f2f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f2f4:	f002 f835 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f2f8:	f8cd 0e5c 	str.w	r0, [sp, #3676]	; 0xe5c
    f2fc:	f8dd 0e5c 	ldr.w	r0, [sp, #3676]	; 0xe5c
    f300:	f8cd 0974 	str.w	r0, [sp, #2420]	; 0x974
    f304:	e00a      	b.n	f31c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2104>
    f306:	f89d 0973 	ldrb.w	r0, [sp, #2419]	; 0x973
    f30a:	07c0      	lsls	r0, r0, #31
    f30c:	2800      	cmp	r0, #0
    f30e:	d112      	bne.n	f336 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x211e>
    f310:	e055      	b.n	f3be <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x21a6>
    f312:	9879      	ldr	r0, [sp, #484]	; 0x1e4
    f314:	07c1      	lsls	r1, r0, #31
    f316:	2900      	cmp	r1, #0
    f318:	d1e3      	bne.n	f2e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x20ca>
    f31a:	e7de      	b.n	f2da <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x20c2>
    f31c:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    f320:	f60d 1174 	addw	r1, sp, #2420	; 0x974
    f324:	f007 fc6e 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f328:	9078      	str	r0, [sp, #480]	; 0x1e0
    f32a:	e7ff      	b.n	f32c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2114>
    f32c:	9878      	ldr	r0, [sp, #480]	; 0x1e0
    f32e:	07c1      	lsls	r1, r0, #31
    f330:	2900      	cmp	r1, #0
    f332:	d1ce      	bne.n	f2d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x20ba>
    f334:	e7d1      	b.n	f2da <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x20c2>
                trace!("[{:04x}] RND Vx, kk", self.pc);
    f336:	f24f 6000 	movw	r0, #62976	; 0xf600
    f33a:	f2c0 0001 	movt	r0, #1
    f33e:	6801      	ldr	r1, [r0, #0]
    f340:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f344:	f100 0212 	add.w	r2, r0, #18
    f348:	f8cd 2998 	str.w	r2, [sp, #2456]	; 0x998
    f34c:	f8dd 2998 	ldr.w	r2, [sp, #2456]	; 0x998
    f350:	f8cd 2d18 	str.w	r2, [sp, #3352]	; 0xd18
    f354:	f249 1323 	movw	r3, #37155	; 0x9123
    f358:	f2c0 0301 	movt	r3, #1
    f35c:	4610      	mov	r0, r2
    f35e:	9177      	str	r1, [sp, #476]	; 0x1dc
    f360:	4619      	mov	r1, r3
    f362:	f7fb fa39 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f366:	9076      	str	r0, [sp, #472]	; 0x1d8
    f368:	9175      	str	r1, [sp, #468]	; 0x1d4
    f36a:	e7ff      	b.n	f36c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2154>
    f36c:	9876      	ldr	r0, [sp, #472]	; 0x1d8
    f36e:	f8cd 0990 	str.w	r0, [sp, #2448]	; 0x990
    f372:	9975      	ldr	r1, [sp, #468]	; 0x1d4
    f374:	f8cd 1994 	str.w	r1, [sp, #2452]	; 0x994
    f378:	f24f 0238 	movw	r2, #61496	; 0xf038
    f37c:	f2c0 0201 	movt	r2, #1
    f380:	6812      	ldr	r2, [r2, #0]
    f382:	466b      	mov	r3, sp
    f384:	f04f 0c01 	mov.w	ip, #1
    f388:	f8c3 c008 	str.w	ip, [r3, #8]
    f38c:	605a      	str	r2, [r3, #4]
    f38e:	f8c3 c000 	str.w	ip, [r3]
    f392:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    f396:	2202      	movs	r2, #2
    f398:	f50d 6319 	add.w	r3, sp, #2448	; 0x990
    f39c:	9977      	ldr	r1, [sp, #476]	; 0x1dc
    f39e:	f007 faf6 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f3a2:	e7ff      	b.n	f3a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x218c>
    f3a4:	f8dd 196c 	ldr.w	r1, [sp, #2412]	; 0x96c
    f3a8:	f24f 6020 	movw	r0, #63008	; 0xf620
    f3ac:	f2c0 0001 	movt	r0, #1
    f3b0:	6802      	ldr	r2, [r0, #0]
    f3b2:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    f3b6:	f003 f803 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f3ba:	e7ff      	b.n	f3bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x21a4>
    f3bc:	e7ff      	b.n	f3be <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x21a6>
    f3be:	f241 0048 	movw	r0, #4168	; 0x1048
                self.v[x] = self.hw.rand() & kk;
    f3c2:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f3c6:	4408      	add	r0, r1
    f3c8:	f7fc ff72 	bl	c2b0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h510c8ec9a996caccE>
    f3cc:	9074      	str	r0, [sp, #464]	; 0x1d0
    f3ce:	e7ff      	b.n	f3d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x21b8>
    f3d0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    f3d4:	280f      	cmp	r0, #15
    f3d6:	f201 8375 	bhi.w	10ac4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x38ac>
    f3da:	e7ff      	b.n	f3dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x21c4>
    f3dc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f3e0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f3e4:	1842      	adds	r2, r0, r1
    f3e6:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
    f3e8:	f8dd c45c 	ldr.w	ip, [sp, #1116]	; 0x45c
    f3ec:	ea03 0e0c 	and.w	lr, r3, ip
    f3f0:	f882 e034 	strb.w	lr, [r2, #52]	; 0x34
        match (
    f3f4:	f001 b9dd 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    f3f8:	2005      	movs	r0, #5
    f3fa:	f8cd 099c 	str.w	r0, [sp, #2460]	; 0x99c
    f3fe:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    f402:	f2c0 0001 	movt	r0, #1
    f406:	6801      	ldr	r1, [r0, #0]
    f408:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    f40c:	f007 fbfa 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f410:	9073      	str	r0, [sp, #460]	; 0x1cc
    f412:	e01f      	b.n	f454 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x223c>
    f414:	2001      	movs	r0, #1
    f416:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    f41a:	e015      	b.n	f448 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2230>
    f41c:	2000      	movs	r0, #0
    f41e:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    f422:	e011      	b.n	f448 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2230>
    f424:	2000      	movs	r0, #0
    f426:	f88d 0e63 	strb.w	r0, [sp, #3683]	; 0xe63
    f42a:	f89d 1e63 	ldrb.w	r1, [sp, #3683]	; 0xe63
    f42e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f432:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f436:	f001 ff94 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f43a:	f8cd 0e64 	str.w	r0, [sp, #3684]	; 0xe64
    f43e:	f8dd 0e64 	ldr.w	r0, [sp, #3684]	; 0xe64
    f442:	f8cd 09a4 	str.w	r0, [sp, #2468]	; 0x9a4
    f446:	e00a      	b.n	f45e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2246>
    f448:	f89d 09a3 	ldrb.w	r0, [sp, #2467]	; 0x9a3
    f44c:	07c0      	lsls	r0, r0, #31
    f44e:	2800      	cmp	r0, #0
    f450:	d112      	bne.n	f478 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2260>
    f452:	e055      	b.n	f500 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22e8>
    f454:	9873      	ldr	r0, [sp, #460]	; 0x1cc
    f456:	07c1      	lsls	r1, r0, #31
    f458:	2900      	cmp	r1, #0
    f45a:	d1e3      	bne.n	f424 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x220c>
    f45c:	e7de      	b.n	f41c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2204>
    f45e:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    f462:	f60d 11a4 	addw	r1, sp, #2468	; 0x9a4
    f466:	f007 fbcd 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f46a:	9072      	str	r0, [sp, #456]	; 0x1c8
    f46c:	e7ff      	b.n	f46e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2256>
    f46e:	9872      	ldr	r0, [sp, #456]	; 0x1c8
    f470:	07c1      	lsls	r1, r0, #31
    f472:	2900      	cmp	r1, #0
    f474:	d1ce      	bne.n	f414 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x21fc>
    f476:	e7d1      	b.n	f41c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2204>
                trace!("[{:04x}] DRW Vx, Vy, n", self.pc);
    f478:	f24f 40a4 	movw	r0, #62628	; 0xf4a4
    f47c:	f2c0 0001 	movt	r0, #1
    f480:	6801      	ldr	r1, [r0, #0]
    f482:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f486:	f100 0212 	add.w	r2, r0, #18
    f48a:	f8cd 29c8 	str.w	r2, [sp, #2504]	; 0x9c8
    f48e:	f8dd 29c8 	ldr.w	r2, [sp, #2504]	; 0x9c8
    f492:	f8cd 2cdc 	str.w	r2, [sp, #3292]	; 0xcdc
    f496:	f249 1323 	movw	r3, #37155	; 0x9123
    f49a:	f2c0 0301 	movt	r3, #1
    f49e:	4610      	mov	r0, r2
    f4a0:	9171      	str	r1, [sp, #452]	; 0x1c4
    f4a2:	4619      	mov	r1, r3
    f4a4:	f7fb f998 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f4a8:	9070      	str	r0, [sp, #448]	; 0x1c0
    f4aa:	916f      	str	r1, [sp, #444]	; 0x1bc
    f4ac:	e7ff      	b.n	f4ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2296>
    f4ae:	9870      	ldr	r0, [sp, #448]	; 0x1c0
    f4b0:	f8cd 09c0 	str.w	r0, [sp, #2496]	; 0x9c0
    f4b4:	996f      	ldr	r1, [sp, #444]	; 0x1bc
    f4b6:	f8cd 19c4 	str.w	r1, [sp, #2500]	; 0x9c4
    f4ba:	f24f 0238 	movw	r2, #61496	; 0xf038
    f4be:	f2c0 0201 	movt	r2, #1
    f4c2:	6812      	ldr	r2, [r2, #0]
    f4c4:	466b      	mov	r3, sp
    f4c6:	f04f 0c01 	mov.w	ip, #1
    f4ca:	f8c3 c008 	str.w	ip, [r3, #8]
    f4ce:	605a      	str	r2, [r3, #4]
    f4d0:	f8c3 c000 	str.w	ip, [r3]
    f4d4:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    f4d8:	2202      	movs	r2, #2
    f4da:	f50d 631c 	add.w	r3, sp, #2496	; 0x9c0
    f4de:	9971      	ldr	r1, [sp, #452]	; 0x1c4
    f4e0:	f007 fa55 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f4e4:	e7ff      	b.n	f4e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22ce>
    f4e6:	f8dd 199c 	ldr.w	r1, [sp, #2460]	; 0x99c
    f4ea:	f24f 40c4 	movw	r0, #62660	; 0xf4c4
    f4ee:	f2c0 0001 	movt	r0, #1
    f4f2:	6802      	ldr	r2, [r0, #0]
    f4f4:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    f4f8:	f002 ff62 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f4fc:	e7ff      	b.n	f4fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22e6>
    f4fe:	e7ff      	b.n	f500 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22e8>
                let basex = self.v[x] as usize;
    f500:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    f504:	280f      	cmp	r0, #15
    f506:	f201 826b 	bhi.w	109e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x37c8>
    f50a:	e7ff      	b.n	f50c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22f4>
    f50c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f510:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f514:	1842      	adds	r2, r0, r1
    f516:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f51a:	4613      	mov	r3, r2
    f51c:	f8cd 2ce0 	str.w	r2, [sp, #3296]	; 0xce0
                let basey = self.v[y] as usize;
    f520:	f8dd 2460 	ldr.w	r2, [sp, #1120]	; 0x460
    f524:	2a0f      	cmp	r2, #15
    f526:	936e      	str	r3, [sp, #440]	; 0x1b8
    f528:	f201 8264 	bhi.w	109f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x37dc>
    f52c:	e7ff      	b.n	f52e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2316>
    f52e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f532:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    f536:	1842      	adds	r2, r0, r1
    f538:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f53c:	4613      	mov	r3, r2
    f53e:	f8cd 2ce4 	str.w	r2, [sp, #3300]	; 0xce4
    f542:	f241 0248 	movw	r2, #4168	; 0x1048
                let (w, h) = self.hw.vram_size();
    f546:	4410      	add	r0, r2
    f548:	936d      	str	r3, [sp, #436]	; 0x1b4
    f54a:	f7fd f843 	bl	c5d4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17h93c2f95ba0774bb2E>
    f54e:	906c      	str	r0, [sp, #432]	; 0x1b0
    f550:	916b      	str	r1, [sp, #428]	; 0x1ac
    f552:	e7ff      	b.n	f554 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x233c>
    f554:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    f556:	f8cd 0ce8 	str.w	r0, [sp, #3304]	; 0xce8
    f55a:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    f55c:	f8cd 1cec 	str.w	r1, [sp, #3308]	; 0xcec
    f560:	2200      	movs	r2, #0
                self.v[0xf] = 0;
    f562:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    f566:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                for y in 0..n {
    f56a:	f8cd 29cc 	str.w	r2, [sp, #2508]	; 0x9cc
    f56e:	f8dd 2470 	ldr.w	r2, [sp, #1136]	; 0x470
    f572:	f8cd 29d0 	str.w	r2, [sp, #2512]	; 0x9d0
    f576:	f8dd 09cc 	ldr.w	r0, [sp, #2508]	; 0x9cc
    f57a:	f8dd 19d0 	ldr.w	r1, [sp, #2512]	; 0x9d0
    f57e:	f002 fcab 	bl	11ed8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    f582:	906a      	str	r0, [sp, #424]	; 0x1a8
    f584:	9169      	str	r1, [sp, #420]	; 0x1a4
    f586:	e7ff      	b.n	f588 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2370>
    f588:	986a      	ldr	r0, [sp, #424]	; 0x1a8
    f58a:	f8cd 09d4 	str.w	r0, [sp, #2516]	; 0x9d4
    f58e:	9969      	ldr	r1, [sp, #420]	; 0x1a4
    f590:	f8cd 19d8 	str.w	r1, [sp, #2520]	; 0x9d8
    f594:	e7ff      	b.n	f596 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x237e>
    f596:	f60d 10d4 	addw	r0, sp, #2516	; 0x9d4
    f59a:	f002 fc12 	bl	11dc2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f59e:	f8cd 19e0 	str.w	r1, [sp, #2528]	; 0x9e0
    f5a2:	f8cd 09dc 	str.w	r0, [sp, #2524]	; 0x9dc
    f5a6:	e7ff      	b.n	f5a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2390>
    f5a8:	f8dd 09dc 	ldr.w	r0, [sp, #2524]	; 0x9dc
    f5ac:	2800      	cmp	r0, #0
    f5ae:	d001      	beq.n	f5b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x239c>
    f5b0:	e7ff      	b.n	f5b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x239a>
    f5b2:	e002      	b.n	f5ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x23a2>
        match (
    f5b4:	f001 b8fd 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
                for y in 0..n {
    f5b8:	defe      	udf	#254	; 0xfe
    f5ba:	f8dd 09e0 	ldr.w	r0, [sp, #2528]	; 0x9e0
    f5be:	f8cd 0cf0 	str.w	r0, [sp, #3312]	; 0xcf0
    f5c2:	f8cd 0cf4 	str.w	r0, [sp, #3316]	; 0xcf4
    f5c6:	f8cd 0cf8 	str.w	r0, [sp, #3320]	; 0xcf8
                    let b = self.mem[self.i as usize + y];
    f5ca:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f5ce:	8a0a      	ldrh	r2, [r1, #16]
    f5d0:	1813      	adds	r3, r2, r0
    f5d2:	469c      	mov	ip, r3
    f5d4:	4293      	cmp	r3, r2
    f5d6:	9068      	str	r0, [sp, #416]	; 0x1a0
    f5d8:	f8cd c19c 	str.w	ip, [sp, #412]	; 0x19c
    f5dc:	f0c1 8214 	bcc.w	10a08 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x37f0>
    f5e0:	e7ff      	b.n	f5e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x23ca>
    f5e2:	2000      	movs	r0, #0
    f5e4:	9967      	ldr	r1, [sp, #412]	; 0x19c
    f5e6:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    f5ea:	f041 8219 	bne.w	10a20 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3808>
    f5ee:	e7ff      	b.n	f5f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x23d8>
    f5f0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f5f4:	9967      	ldr	r1, [sp, #412]	; 0x19c
    f5f6:	1842      	adds	r2, r0, r1
    f5f8:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    f5fc:	4613      	mov	r3, r2
    f5fe:	f88d 2cff 	strb.w	r2, [sp, #3327]	; 0xcff
                    let vramy = (y + basey) % h;
    f602:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
    f604:	f8dd c1b4 	ldr.w	ip, [sp, #436]	; 0x1b4
    f608:	eb02 0e0c 	add.w	lr, r2, ip
    f60c:	4674      	mov	r4, lr
    f60e:	4596      	cmp	lr, r2
    f610:	9366      	str	r3, [sp, #408]	; 0x198
    f612:	9465      	str	r4, [sp, #404]	; 0x194
    f614:	f0c1 820e 	bcc.w	10a34 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x381c>
    f618:	e7ff      	b.n	f61a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2402>
    f61a:	986b      	ldr	r0, [sp, #428]	; 0x1ac
    f61c:	2800      	cmp	r0, #0
    f61e:	f001 8215 	beq.w	10a4c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3834>
    f622:	e7ff      	b.n	f624 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x240c>
    f624:	9865      	ldr	r0, [sp, #404]	; 0x194
    f626:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    f628:	fbb0 f2f1 	udiv	r2, r0, r1
    f62c:	fb02 0211 	mls	r2, r2, r1, r0
    f630:	4613      	mov	r3, r2
    f632:	f8cd 2d00 	str.w	r2, [sp, #3328]	; 0xd00
    f636:	2200      	movs	r2, #0
                    for x in 0..8 {
    f638:	f8cd 29e4 	str.w	r2, [sp, #2532]	; 0x9e4
    f63c:	2208      	movs	r2, #8
    f63e:	f8cd 29e8 	str.w	r2, [sp, #2536]	; 0x9e8
    f642:	f8dd 09e4 	ldr.w	r0, [sp, #2532]	; 0x9e4
    f646:	f8dd 19e8 	ldr.w	r1, [sp, #2536]	; 0x9e8
    f64a:	9364      	str	r3, [sp, #400]	; 0x190
    f64c:	f002 fc44 	bl	11ed8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    f650:	9063      	str	r0, [sp, #396]	; 0x18c
    f652:	9162      	str	r1, [sp, #392]	; 0x188
    f654:	e7ff      	b.n	f656 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x243e>
    f656:	9863      	ldr	r0, [sp, #396]	; 0x18c
    f658:	f8cd 09ec 	str.w	r0, [sp, #2540]	; 0x9ec
    f65c:	9962      	ldr	r1, [sp, #392]	; 0x188
    f65e:	f8cd 19f0 	str.w	r1, [sp, #2544]	; 0x9f0
    f662:	e7ff      	b.n	f664 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x244c>
    f664:	f60d 10ec 	addw	r0, sp, #2540	; 0x9ec
    f668:	f002 fbab 	bl	11dc2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f66c:	f8cd 19f8 	str.w	r1, [sp, #2552]	; 0x9f8
    f670:	f8cd 09f4 	str.w	r0, [sp, #2548]	; 0x9f4
    f674:	e7ff      	b.n	f676 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x245e>
    f676:	f8dd 09f4 	ldr.w	r0, [sp, #2548]	; 0x9f4
    f67a:	2800      	cmp	r0, #0
    f67c:	d001      	beq.n	f682 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x246a>
    f67e:	e7ff      	b.n	f680 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2468>
    f680:	e001      	b.n	f686 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x246e>
                for y in 0..n {
    f682:	e788      	b.n	f596 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x237e>
                    for x in 0..8 {
    f684:	defe      	udf	#254	; 0xfe
    f686:	f8dd 09f8 	ldr.w	r0, [sp, #2552]	; 0x9f8
    f68a:	f8cd 0d04 	str.w	r0, [sp, #3332]	; 0xd04
    f68e:	f8cd 0d08 	str.w	r0, [sp, #3336]	; 0xd08
    f692:	f8cd 0d0c 	str.w	r0, [sp, #3340]	; 0xd0c
                        let vramx = (x + basex) % w;
    f696:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    f698:	1842      	adds	r2, r0, r1
    f69a:	4613      	mov	r3, r2
    f69c:	4282      	cmp	r2, r0
    f69e:	9061      	str	r0, [sp, #388]	; 0x184
    f6a0:	9360      	str	r3, [sp, #384]	; 0x180
    f6a2:	f0c1 81df 	bcc.w	10a64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x384c>
    f6a6:	e7ff      	b.n	f6a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2490>
    f6a8:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    f6aa:	2800      	cmp	r0, #0
    f6ac:	f001 81e6 	beq.w	10a7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3864>
    f6b0:	e7ff      	b.n	f6b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x249a>
    f6b2:	9860      	ldr	r0, [sp, #384]	; 0x180
    f6b4:	996c      	ldr	r1, [sp, #432]	; 0x1b0
    f6b6:	fbb0 f2f1 	udiv	r2, r0, r1
    f6ba:	fb02 0211 	mls	r2, r2, r1, r0
    f6be:	4613      	mov	r3, r2
    f6c0:	f8cd 2d10 	str.w	r2, [sp, #3344]	; 0xd10
                        let src = (b & 1 << (7 - x)) > 0;
    f6c4:	9a61      	ldr	r2, [sp, #388]	; 0x184
    f6c6:	f1c2 0c07 	rsb	ip, r2, #7
    f6ca:	f04f 0e07 	mov.w	lr, #7
    f6ce:	4596      	cmp	lr, r2
    f6d0:	935f      	str	r3, [sp, #380]	; 0x17c
    f6d2:	f8cd c178 	str.w	ip, [sp, #376]	; 0x178
    f6d6:	f0c1 81dd 	bcc.w	10a94 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x387c>
    f6da:	e7ff      	b.n	f6dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x24c4>
    f6dc:	985e      	ldr	r0, [sp, #376]	; 0x178
    f6de:	f000 0107 	and.w	r1, r0, #7
    f6e2:	2201      	movs	r2, #1
    f6e4:	fa02 f101 	lsl.w	r1, r2, r1
    f6e8:	08c2      	lsrs	r2, r0, #3
    f6ea:	2a00      	cmp	r2, #0
    f6ec:	915d      	str	r1, [sp, #372]	; 0x174
    f6ee:	f041 81dd 	bne.w	10aac <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3894>
    f6f2:	e7ff      	b.n	f6f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x24dc>
    f6f4:	9866      	ldr	r0, [sp, #408]	; 0x198
    f6f6:	995d      	ldr	r1, [sp, #372]	; 0x174
    f6f8:	ea00 0201 	and.w	r2, r0, r1
    f6fc:	b2d2      	uxtb	r2, r2
    f6fe:	2a00      	cmp	r2, #0
    f700:	bf18      	it	ne
    f702:	2201      	movne	r2, #1
    f704:	4613      	mov	r3, r2
    f706:	f88d 2d16 	strb.w	r2, [sp, #3350]	; 0xd16
    f70a:	f241 0248 	movw	r2, #4168	; 0x1048
                        let dst = self.hw.vram_get(vramx, vramy);
    f70e:	f8dd c490 	ldr.w	ip, [sp, #1168]	; 0x490
    f712:	eb0c 0002 	add.w	r0, ip, r2
    f716:	995f      	ldr	r1, [sp, #380]	; 0x17c
    f718:	9a64      	ldr	r2, [sp, #400]	; 0x190
    f71a:	935c      	str	r3, [sp, #368]	; 0x170
    f71c:	f7fc fec5 	bl	c4aa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17he272c4593d926434E>
    f720:	4601      	mov	r1, r0
    f722:	f88d 0d17 	strb.w	r0, [sp, #3351]	; 0xd17
    f726:	915b      	str	r1, [sp, #364]	; 0x16c
    f728:	e7ff      	b.n	f72a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2512>
                        self.v[0xf] |= (src && dst) as u8;
    f72a:	985c      	ldr	r0, [sp, #368]	; 0x170
    f72c:	07c1      	lsls	r1, r0, #31
    f72e:	2900      	cmp	r1, #0
    f730:	d108      	bne.n	f744 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x252c>
    f732:	e003      	b.n	f73c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2524>
    f734:	2001      	movs	r0, #1
    f736:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    f73a:	e008      	b.n	f74e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2536>
    f73c:	2000      	movs	r0, #0
    f73e:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    f742:	e004      	b.n	f74e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2536>
    f744:	985b      	ldr	r0, [sp, #364]	; 0x16c
    f746:	07c1      	lsls	r1, r0, #31
    f748:	2900      	cmp	r1, #0
    f74a:	d1f3      	bne.n	f734 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x251c>
    f74c:	e7f6      	b.n	f73c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2524>
    f74e:	f89d 09ff 	ldrb.w	r0, [sp, #2559]	; 0x9ff
    f752:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f756:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    f75a:	4310      	orrs	r0, r2
    f75c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    f760:	f241 0048 	movw	r0, #4168	; 0x1048
                        self.hw.vram_set(vramx, vramy, src ^ dst);
    f764:	4408      	add	r0, r1
    f766:	9a5c      	ldr	r2, [sp, #368]	; 0x170
    f768:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    f76a:	ea82 0c03 	eor.w	ip, r2, r3
    f76e:	f00c 0301 	and.w	r3, ip, #1
    f772:	995f      	ldr	r1, [sp, #380]	; 0x17c
    f774:	9a64      	ldr	r2, [sp, #400]	; 0x190
    f776:	f7fc fda8 	bl	c2ca <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h55fb69e400b284fcE>
    f77a:	e7ff      	b.n	f77c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2564>
                    for x in 0..8 {
    f77c:	e772      	b.n	f664 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x244c>
    f77e:	2005      	movs	r0, #5
    f780:	f8cd 0a00 	str.w	r0, [sp, #2560]	; 0xa00
    f784:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    f788:	f2c0 0001 	movt	r0, #1
    f78c:	6801      	ldr	r1, [r0, #0]
    f78e:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    f792:	f007 fa37 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f796:	905a      	str	r0, [sp, #360]	; 0x168
    f798:	e01f      	b.n	f7da <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x25c2>
    f79a:	2001      	movs	r0, #1
    f79c:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    f7a0:	e015      	b.n	f7ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x25b6>
    f7a2:	2000      	movs	r0, #0
    f7a4:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    f7a8:	e011      	b.n	f7ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x25b6>
    f7aa:	2000      	movs	r0, #0
    f7ac:	f88d 0e6b 	strb.w	r0, [sp, #3691]	; 0xe6b
    f7b0:	f89d 1e6b 	ldrb.w	r1, [sp, #3691]	; 0xe6b
    f7b4:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f7b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f7bc:	f001 fdd1 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f7c0:	f8cd 0e6c 	str.w	r0, [sp, #3692]	; 0xe6c
    f7c4:	f8dd 0e6c 	ldr.w	r0, [sp, #3692]	; 0xe6c
    f7c8:	f8cd 0a08 	str.w	r0, [sp, #2568]	; 0xa08
    f7cc:	e00a      	b.n	f7e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x25cc>
    f7ce:	f89d 0a07 	ldrb.w	r0, [sp, #2567]	; 0xa07
    f7d2:	07c0      	lsls	r0, r0, #31
    f7d4:	2800      	cmp	r0, #0
    f7d6:	d112      	bne.n	f7fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x25e6>
    f7d8:	e055      	b.n	f886 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x266e>
    f7da:	985a      	ldr	r0, [sp, #360]	; 0x168
    f7dc:	07c1      	lsls	r1, r0, #31
    f7de:	2900      	cmp	r1, #0
    f7e0:	d1e3      	bne.n	f7aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2592>
    f7e2:	e7de      	b.n	f7a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x258a>
    f7e4:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    f7e8:	f60d 2108 	addw	r1, sp, #2568	; 0xa08
    f7ec:	f007 fa0a 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f7f0:	9059      	str	r0, [sp, #356]	; 0x164
    f7f2:	e7ff      	b.n	f7f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x25dc>
    f7f4:	9859      	ldr	r0, [sp, #356]	; 0x164
    f7f6:	07c1      	lsls	r1, r0, #31
    f7f8:	2900      	cmp	r1, #0
    f7fa:	d1ce      	bne.n	f79a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2582>
    f7fc:	e7d1      	b.n	f7a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x258a>
                trace!("[{:04x}] SKP Vx", self.pc);
    f7fe:	f24f 4050 	movw	r0, #62544	; 0xf450
    f802:	f2c0 0001 	movt	r0, #1
    f806:	6801      	ldr	r1, [r0, #0]
    f808:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f80c:	f100 0212 	add.w	r2, r0, #18
    f810:	f8cd 2a2c 	str.w	r2, [sp, #2604]	; 0xa2c
    f814:	f8dd 2a2c 	ldr.w	r2, [sp, #2604]	; 0xa2c
    f818:	f8cd 2cd8 	str.w	r2, [sp, #3288]	; 0xcd8
    f81c:	f249 1323 	movw	r3, #37155	; 0x9123
    f820:	f2c0 0301 	movt	r3, #1
    f824:	4610      	mov	r0, r2
    f826:	9158      	str	r1, [sp, #352]	; 0x160
    f828:	4619      	mov	r1, r3
    f82a:	f7fa ffd5 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f82e:	9057      	str	r0, [sp, #348]	; 0x15c
    f830:	9156      	str	r1, [sp, #344]	; 0x158
    f832:	e7ff      	b.n	f834 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x261c>
    f834:	9857      	ldr	r0, [sp, #348]	; 0x15c
    f836:	f8cd 0a24 	str.w	r0, [sp, #2596]	; 0xa24
    f83a:	9956      	ldr	r1, [sp, #344]	; 0x158
    f83c:	f8cd 1a28 	str.w	r1, [sp, #2600]	; 0xa28
    f840:	f24f 0238 	movw	r2, #61496	; 0xf038
    f844:	f2c0 0201 	movt	r2, #1
    f848:	6812      	ldr	r2, [r2, #0]
    f84a:	466b      	mov	r3, sp
    f84c:	f04f 0c01 	mov.w	ip, #1
    f850:	f8c3 c008 	str.w	ip, [r3, #8]
    f854:	605a      	str	r2, [r3, #4]
    f856:	f8c3 c000 	str.w	ip, [r3]
    f85a:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    f85e:	2202      	movs	r2, #2
    f860:	f60d 2324 	addw	r3, sp, #2596	; 0xa24
    f864:	9958      	ldr	r1, [sp, #352]	; 0x160
    f866:	f007 f892 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f86a:	e7ff      	b.n	f86c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2654>
    f86c:	f8dd 1a00 	ldr.w	r1, [sp, #2560]	; 0xa00
    f870:	f24f 4070 	movw	r0, #62576	; 0xf470
    f874:	f2c0 0001 	movt	r0, #1
    f878:	6802      	ldr	r2, [r0, #0]
    f87a:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    f87e:	f002 fd9f 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f882:	e7ff      	b.n	f884 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x266c>
    f884:	e7ff      	b.n	f886 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x266e>
    f886:	f241 0048 	movw	r0, #4168	; 0x1048
                if self.hw.key(self.v[x]) {
    f88a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f88e:	4408      	add	r0, r1
    f890:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    f894:	2a0f      	cmp	r2, #15
    f896:	9055      	str	r0, [sp, #340]	; 0x154
    f898:	f201 8098 	bhi.w	109cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x37b4>
    f89c:	e7ff      	b.n	f89e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2686>
    f89e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f8a2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f8a6:	1842      	adds	r2, r0, r1
    f8a8:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    f8ac:	9855      	ldr	r0, [sp, #340]	; 0x154
    f8ae:	f7fc fd04 	bl	c2ba <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h36d051b466cea4e4E>
    f8b2:	9054      	str	r0, [sp, #336]	; 0x150
    f8b4:	e7ff      	b.n	f8b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x269e>
    f8b6:	9854      	ldr	r0, [sp, #336]	; 0x150
    f8b8:	07c1      	lsls	r1, r0, #31
    f8ba:	2900      	cmp	r1, #0
    f8bc:	d006      	beq.n	f8cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x26b4>
    f8be:	e7ff      	b.n	f8c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x26a8>
                    self.next();
    f8c0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f8c4:	f001 faa7 	bl	10e16 <_ZN8libchip814Chip8$LT$T$GT$4next17h59db21f4d7eca91dE>
    f8c8:	e7ff      	b.n	f8ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x26b2>
                if self.hw.key(self.v[x]) {
    f8ca:	e7ff      	b.n	f8cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x26b4>
        match (
    f8cc:	f000 bf71 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    f8d0:	2005      	movs	r0, #5
    f8d2:	f8cd 0a30 	str.w	r0, [sp, #2608]	; 0xa30
    f8d6:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    f8da:	f2c0 0001 	movt	r0, #1
    f8de:	6801      	ldr	r1, [r0, #0]
    f8e0:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    f8e4:	f007 f98e 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f8e8:	9053      	str	r0, [sp, #332]	; 0x14c
    f8ea:	e01f      	b.n	f92c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2714>
    f8ec:	2001      	movs	r0, #1
    f8ee:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    f8f2:	e015      	b.n	f920 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2708>
    f8f4:	2000      	movs	r0, #0
    f8f6:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    f8fa:	e011      	b.n	f920 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2708>
    f8fc:	2000      	movs	r0, #0
    f8fe:	f88d 0e73 	strb.w	r0, [sp, #3699]	; 0xe73
    f902:	f89d 1e73 	ldrb.w	r1, [sp, #3699]	; 0xe73
    f906:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f90a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f90e:	f001 fd28 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f912:	f8cd 0e74 	str.w	r0, [sp, #3700]	; 0xe74
    f916:	f8dd 0e74 	ldr.w	r0, [sp, #3700]	; 0xe74
    f91a:	f8cd 0a38 	str.w	r0, [sp, #2616]	; 0xa38
    f91e:	e00a      	b.n	f936 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x271e>
    f920:	f89d 0a37 	ldrb.w	r0, [sp, #2615]	; 0xa37
    f924:	07c0      	lsls	r0, r0, #31
    f926:	2800      	cmp	r0, #0
    f928:	d112      	bne.n	f950 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2738>
    f92a:	e055      	b.n	f9d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x27c0>
    f92c:	9853      	ldr	r0, [sp, #332]	; 0x14c
    f92e:	07c1      	lsls	r1, r0, #31
    f930:	2900      	cmp	r1, #0
    f932:	d1e3      	bne.n	f8fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x26e4>
    f934:	e7de      	b.n	f8f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x26dc>
    f936:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    f93a:	f60d 2138 	addw	r1, sp, #2616	; 0xa38
    f93e:	f007 f961 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f942:	9052      	str	r0, [sp, #328]	; 0x148
    f944:	e7ff      	b.n	f946 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x272e>
    f946:	9852      	ldr	r0, [sp, #328]	; 0x148
    f948:	07c1      	lsls	r1, r0, #31
    f94a:	2900      	cmp	r1, #0
    f94c:	d1ce      	bne.n	f8ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x26d4>
    f94e:	e7d1      	b.n	f8f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x26dc>
                trace!("[{:04x}] SKNP Vx", self.pc);
    f950:	f24f 400c 	movw	r0, #62476	; 0xf40c
    f954:	f2c0 0001 	movt	r0, #1
    f958:	6801      	ldr	r1, [r0, #0]
    f95a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f95e:	f100 0212 	add.w	r2, r0, #18
    f962:	f8cd 2a5c 	str.w	r2, [sp, #2652]	; 0xa5c
    f966:	f8dd 2a5c 	ldr.w	r2, [sp, #2652]	; 0xa5c
    f96a:	f8cd 2cd4 	str.w	r2, [sp, #3284]	; 0xcd4
    f96e:	f249 1323 	movw	r3, #37155	; 0x9123
    f972:	f2c0 0301 	movt	r3, #1
    f976:	4610      	mov	r0, r2
    f978:	9151      	str	r1, [sp, #324]	; 0x144
    f97a:	4619      	mov	r1, r3
    f97c:	f7fa ff2c 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f980:	9050      	str	r0, [sp, #320]	; 0x140
    f982:	914f      	str	r1, [sp, #316]	; 0x13c
    f984:	e7ff      	b.n	f986 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x276e>
    f986:	9850      	ldr	r0, [sp, #320]	; 0x140
    f988:	f8cd 0a54 	str.w	r0, [sp, #2644]	; 0xa54
    f98c:	994f      	ldr	r1, [sp, #316]	; 0x13c
    f98e:	f8cd 1a58 	str.w	r1, [sp, #2648]	; 0xa58
    f992:	f24f 0238 	movw	r2, #61496	; 0xf038
    f996:	f2c0 0201 	movt	r2, #1
    f99a:	6812      	ldr	r2, [r2, #0]
    f99c:	466b      	mov	r3, sp
    f99e:	f04f 0c01 	mov.w	ip, #1
    f9a2:	f8c3 c008 	str.w	ip, [r3, #8]
    f9a6:	605a      	str	r2, [r3, #4]
    f9a8:	f8c3 c000 	str.w	ip, [r3]
    f9ac:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    f9b0:	2202      	movs	r2, #2
    f9b2:	f60d 2354 	addw	r3, sp, #2644	; 0xa54
    f9b6:	9951      	ldr	r1, [sp, #324]	; 0x144
    f9b8:	f006 ffe9 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f9bc:	e7ff      	b.n	f9be <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x27a6>
    f9be:	f8dd 1a30 	ldr.w	r1, [sp, #2608]	; 0xa30
    f9c2:	f24f 402c 	movw	r0, #62508	; 0xf42c
    f9c6:	f2c0 0001 	movt	r0, #1
    f9ca:	6802      	ldr	r2, [r0, #0]
    f9cc:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    f9d0:	f002 fcf6 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f9d4:	e7ff      	b.n	f9d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x27be>
    f9d6:	e7ff      	b.n	f9d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x27c0>
    f9d8:	f241 0048 	movw	r0, #4168	; 0x1048
                if !self.hw.key(self.v[x]) {
    f9dc:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f9e0:	4408      	add	r0, r1
    f9e2:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    f9e6:	2a0f      	cmp	r2, #15
    f9e8:	904e      	str	r0, [sp, #312]	; 0x138
    f9ea:	f200 87e5 	bhi.w	109b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x37a0>
    f9ee:	e7ff      	b.n	f9f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x27d8>
    f9f0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f9f4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f9f8:	1842      	adds	r2, r0, r1
    f9fa:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    f9fe:	984e      	ldr	r0, [sp, #312]	; 0x138
    fa00:	f7fc fc5b 	bl	c2ba <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h36d051b466cea4e4E>
    fa04:	904d      	str	r0, [sp, #308]	; 0x134
    fa06:	e7ff      	b.n	fa08 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x27f0>
    fa08:	984d      	ldr	r0, [sp, #308]	; 0x134
    fa0a:	07c1      	lsls	r1, r0, #31
    fa0c:	2900      	cmp	r1, #0
    fa0e:	d106      	bne.n	fa1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2806>
    fa10:	e7ff      	b.n	fa12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x27fa>
                    self.next();
    fa12:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fa16:	f001 f9fe 	bl	10e16 <_ZN8libchip814Chip8$LT$T$GT$4next17h59db21f4d7eca91dE>
    fa1a:	e7ff      	b.n	fa1c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2804>
                if !self.hw.key(self.v[x]) {
    fa1c:	e7ff      	b.n	fa1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2806>
        match (
    fa1e:	f000 bec8 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    fa22:	2005      	movs	r0, #5
    fa24:	f8cd 0a60 	str.w	r0, [sp, #2656]	; 0xa60
    fa28:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    fa2c:	f2c0 0001 	movt	r0, #1
    fa30:	6801      	ldr	r1, [r0, #0]
    fa32:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    fa36:	f007 f8e5 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fa3a:	904c      	str	r0, [sp, #304]	; 0x130
    fa3c:	e01f      	b.n	fa7e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2866>
    fa3e:	2001      	movs	r0, #1
    fa40:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    fa44:	e015      	b.n	fa72 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x285a>
    fa46:	2000      	movs	r0, #0
    fa48:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    fa4c:	e011      	b.n	fa72 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x285a>
    fa4e:	2000      	movs	r0, #0
    fa50:	f88d 0e7b 	strb.w	r0, [sp, #3707]	; 0xe7b
    fa54:	f89d 1e7b 	ldrb.w	r1, [sp, #3707]	; 0xe7b
    fa58:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fa5c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fa60:	f001 fc7f 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fa64:	f8cd 0e7c 	str.w	r0, [sp, #3708]	; 0xe7c
    fa68:	f8dd 0e7c 	ldr.w	r0, [sp, #3708]	; 0xe7c
    fa6c:	f8cd 0a68 	str.w	r0, [sp, #2664]	; 0xa68
    fa70:	e00a      	b.n	fa88 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2870>
    fa72:	f89d 0a67 	ldrb.w	r0, [sp, #2663]	; 0xa67
    fa76:	07c0      	lsls	r0, r0, #31
    fa78:	2800      	cmp	r0, #0
    fa7a:	d112      	bne.n	faa2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x288a>
    fa7c:	e055      	b.n	fb2a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2912>
    fa7e:	984c      	ldr	r0, [sp, #304]	; 0x130
    fa80:	07c1      	lsls	r1, r0, #31
    fa82:	2900      	cmp	r1, #0
    fa84:	d1e3      	bne.n	fa4e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2836>
    fa86:	e7de      	b.n	fa46 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x282e>
    fa88:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    fa8c:	f60d 2168 	addw	r1, sp, #2664	; 0xa68
    fa90:	f007 f8b8 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fa94:	904b      	str	r0, [sp, #300]	; 0x12c
    fa96:	e7ff      	b.n	fa98 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2880>
    fa98:	984b      	ldr	r0, [sp, #300]	; 0x12c
    fa9a:	07c1      	lsls	r1, r0, #31
    fa9c:	2900      	cmp	r1, #0
    fa9e:	d1ce      	bne.n	fa3e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2826>
    faa0:	e7d1      	b.n	fa46 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x282e>
                trace!("[{:04x}] LD Vx, DT", self.pc);
    faa2:	f24f 30bc 	movw	r0, #62396	; 0xf3bc
    faa6:	f2c0 0001 	movt	r0, #1
    faaa:	6801      	ldr	r1, [r0, #0]
    faac:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fab0:	f100 0212 	add.w	r2, r0, #18
    fab4:	f8cd 2a8c 	str.w	r2, [sp, #2700]	; 0xa8c
    fab8:	f8dd 2a8c 	ldr.w	r2, [sp, #2700]	; 0xa8c
    fabc:	f8cd 2cd0 	str.w	r2, [sp, #3280]	; 0xcd0
    fac0:	f249 1323 	movw	r3, #37155	; 0x9123
    fac4:	f2c0 0301 	movt	r3, #1
    fac8:	4610      	mov	r0, r2
    faca:	914a      	str	r1, [sp, #296]	; 0x128
    facc:	4619      	mov	r1, r3
    face:	f7fa fe83 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fad2:	9049      	str	r0, [sp, #292]	; 0x124
    fad4:	9148      	str	r1, [sp, #288]	; 0x120
    fad6:	e7ff      	b.n	fad8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x28c0>
    fad8:	9849      	ldr	r0, [sp, #292]	; 0x124
    fada:	f8cd 0a84 	str.w	r0, [sp, #2692]	; 0xa84
    fade:	9948      	ldr	r1, [sp, #288]	; 0x120
    fae0:	f8cd 1a88 	str.w	r1, [sp, #2696]	; 0xa88
    fae4:	f24f 0238 	movw	r2, #61496	; 0xf038
    fae8:	f2c0 0201 	movt	r2, #1
    faec:	6812      	ldr	r2, [r2, #0]
    faee:	466b      	mov	r3, sp
    faf0:	f04f 0c01 	mov.w	ip, #1
    faf4:	f8c3 c008 	str.w	ip, [r3, #8]
    faf8:	605a      	str	r2, [r3, #4]
    fafa:	f8c3 c000 	str.w	ip, [r3]
    fafe:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    fb02:	2202      	movs	r2, #2
    fb04:	f60d 2384 	addw	r3, sp, #2692	; 0xa84
    fb08:	994a      	ldr	r1, [sp, #296]	; 0x128
    fb0a:	f006 ff40 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fb0e:	e7ff      	b.n	fb10 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x28f8>
    fb10:	f8dd 1a60 	ldr.w	r1, [sp, #2656]	; 0xa60
    fb14:	f24f 30dc 	movw	r0, #62428	; 0xf3dc
    fb18:	f2c0 0001 	movt	r0, #1
    fb1c:	6802      	ldr	r2, [r0, #0]
    fb1e:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    fb22:	f002 fc4d 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fb26:	e7ff      	b.n	fb28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2910>
    fb28:	e7ff      	b.n	fb2a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2912>
                self.v[x] = self.dt;
    fb2a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fb2e:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    fb32:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    fb36:	2a0f      	cmp	r2, #15
    fb38:	9147      	str	r1, [sp, #284]	; 0x11c
    fb3a:	f200 8733 	bhi.w	109a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x378c>
    fb3e:	e7ff      	b.n	fb40 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2928>
    fb40:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fb44:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fb48:	1842      	adds	r2, r0, r1
    fb4a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    fb4c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    fb50:	f000 be2f 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    fb54:	2005      	movs	r0, #5
    fb56:	f8cd 0a90 	str.w	r0, [sp, #2704]	; 0xa90
    fb5a:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    fb5e:	f2c0 0001 	movt	r0, #1
    fb62:	6801      	ldr	r1, [r0, #0]
    fb64:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    fb68:	f007 f84c 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fb6c:	9046      	str	r0, [sp, #280]	; 0x118
    fb6e:	e01f      	b.n	fbb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2998>
    fb70:	2001      	movs	r0, #1
    fb72:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    fb76:	e015      	b.n	fba4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x298c>
    fb78:	2000      	movs	r0, #0
    fb7a:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    fb7e:	e011      	b.n	fba4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x298c>
    fb80:	2000      	movs	r0, #0
    fb82:	f88d 0e83 	strb.w	r0, [sp, #3715]	; 0xe83
    fb86:	f89d 1e83 	ldrb.w	r1, [sp, #3715]	; 0xe83
    fb8a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fb8e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fb92:	f001 fbe6 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fb96:	f8cd 0e84 	str.w	r0, [sp, #3716]	; 0xe84
    fb9a:	f8dd 0e84 	ldr.w	r0, [sp, #3716]	; 0xe84
    fb9e:	f8cd 0a98 	str.w	r0, [sp, #2712]	; 0xa98
    fba2:	e00a      	b.n	fbba <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x29a2>
    fba4:	f89d 0a97 	ldrb.w	r0, [sp, #2711]	; 0xa97
    fba8:	07c0      	lsls	r0, r0, #31
    fbaa:	2800      	cmp	r0, #0
    fbac:	d112      	bne.n	fbd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x29bc>
    fbae:	e055      	b.n	fc5c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2a44>
    fbb0:	9846      	ldr	r0, [sp, #280]	; 0x118
    fbb2:	07c1      	lsls	r1, r0, #31
    fbb4:	2900      	cmp	r1, #0
    fbb6:	d1e3      	bne.n	fb80 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2968>
    fbb8:	e7de      	b.n	fb78 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2960>
    fbba:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    fbbe:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
    fbc2:	f007 f81f 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fbc6:	9045      	str	r0, [sp, #276]	; 0x114
    fbc8:	e7ff      	b.n	fbca <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x29b2>
    fbca:	9845      	ldr	r0, [sp, #276]	; 0x114
    fbcc:	07c1      	lsls	r1, r0, #31
    fbce:	2900      	cmp	r1, #0
    fbd0:	d1ce      	bne.n	fb70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2958>
    fbd2:	e7d1      	b.n	fb78 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2960>
                trace!("[{:04x}] LD Vx, K", self.pc);
    fbd4:	f24f 306c 	movw	r0, #62316	; 0xf36c
    fbd8:	f2c0 0001 	movt	r0, #1
    fbdc:	6801      	ldr	r1, [r0, #0]
    fbde:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fbe2:	f100 0212 	add.w	r2, r0, #18
    fbe6:	f8cd 2abc 	str.w	r2, [sp, #2748]	; 0xabc
    fbea:	f8dd 2abc 	ldr.w	r2, [sp, #2748]	; 0xabc
    fbee:	f8cd 2ccc 	str.w	r2, [sp, #3276]	; 0xccc
    fbf2:	f249 1323 	movw	r3, #37155	; 0x9123
    fbf6:	f2c0 0301 	movt	r3, #1
    fbfa:	4610      	mov	r0, r2
    fbfc:	9144      	str	r1, [sp, #272]	; 0x110
    fbfe:	4619      	mov	r1, r3
    fc00:	f7fa fdea 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fc04:	9043      	str	r0, [sp, #268]	; 0x10c
    fc06:	9142      	str	r1, [sp, #264]	; 0x108
    fc08:	e7ff      	b.n	fc0a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x29f2>
    fc0a:	9843      	ldr	r0, [sp, #268]	; 0x10c
    fc0c:	f8cd 0ab4 	str.w	r0, [sp, #2740]	; 0xab4
    fc10:	9942      	ldr	r1, [sp, #264]	; 0x108
    fc12:	f8cd 1ab8 	str.w	r1, [sp, #2744]	; 0xab8
    fc16:	f24f 0238 	movw	r2, #61496	; 0xf038
    fc1a:	f2c0 0201 	movt	r2, #1
    fc1e:	6812      	ldr	r2, [r2, #0]
    fc20:	466b      	mov	r3, sp
    fc22:	f04f 0c01 	mov.w	ip, #1
    fc26:	f8c3 c008 	str.w	ip, [r3, #8]
    fc2a:	605a      	str	r2, [r3, #4]
    fc2c:	f8c3 c000 	str.w	ip, [r3]
    fc30:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    fc34:	2202      	movs	r2, #2
    fc36:	f60d 23b4 	addw	r3, sp, #2740	; 0xab4
    fc3a:	9944      	ldr	r1, [sp, #272]	; 0x110
    fc3c:	f006 fea7 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fc40:	e7ff      	b.n	fc42 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2a2a>
    fc42:	f8dd 1a90 	ldr.w	r1, [sp, #2704]	; 0xa90
    fc46:	f24f 308c 	movw	r0, #62348	; 0xf38c
    fc4a:	f2c0 0001 	movt	r0, #1
    fc4e:	6802      	ldr	r2, [r0, #0]
    fc50:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    fc54:	f002 fbb4 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fc58:	e7ff      	b.n	fc5a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2a42>
    fc5a:	e7ff      	b.n	fc5c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2a44>
                self.v[x] = self.waitkey();
    fc5c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fc60:	f001 fa2d 	bl	110be <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E>
    fc64:	9041      	str	r0, [sp, #260]	; 0x104
    fc66:	e7ff      	b.n	fc68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2a50>
    fc68:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    fc6c:	280f      	cmp	r0, #15
    fc6e:	f200 868f 	bhi.w	10990 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3778>
    fc72:	e7ff      	b.n	fc74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2a5c>
    fc74:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fc78:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fc7c:	1842      	adds	r2, r0, r1
    fc7e:	9b41      	ldr	r3, [sp, #260]	; 0x104
    fc80:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    fc84:	f000 bd95 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    fc88:	2005      	movs	r0, #5
    fc8a:	f8cd 0ac0 	str.w	r0, [sp, #2752]	; 0xac0
    fc8e:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    fc92:	f2c0 0001 	movt	r0, #1
    fc96:	6801      	ldr	r1, [r0, #0]
    fc98:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    fc9c:	f006 ffb2 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fca0:	9040      	str	r0, [sp, #256]	; 0x100
    fca2:	e01f      	b.n	fce4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2acc>
    fca4:	2001      	movs	r0, #1
    fca6:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    fcaa:	e015      	b.n	fcd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2ac0>
    fcac:	2000      	movs	r0, #0
    fcae:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    fcb2:	e011      	b.n	fcd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2ac0>
    fcb4:	2000      	movs	r0, #0
    fcb6:	f88d 0e8b 	strb.w	r0, [sp, #3723]	; 0xe8b
    fcba:	f89d 1e8b 	ldrb.w	r1, [sp, #3723]	; 0xe8b
    fcbe:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fcc2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fcc6:	f001 fb4c 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fcca:	f8cd 0e8c 	str.w	r0, [sp, #3724]	; 0xe8c
    fcce:	f8dd 0e8c 	ldr.w	r0, [sp, #3724]	; 0xe8c
    fcd2:	f8cd 0ac8 	str.w	r0, [sp, #2760]	; 0xac8
    fcd6:	e00a      	b.n	fcee <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2ad6>
    fcd8:	f89d 0ac7 	ldrb.w	r0, [sp, #2759]	; 0xac7
    fcdc:	07c0      	lsls	r0, r0, #31
    fcde:	2800      	cmp	r0, #0
    fce0:	d112      	bne.n	fd08 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2af0>
    fce2:	e055      	b.n	fd90 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2b78>
    fce4:	9840      	ldr	r0, [sp, #256]	; 0x100
    fce6:	07c1      	lsls	r1, r0, #31
    fce8:	2900      	cmp	r1, #0
    fcea:	d1e3      	bne.n	fcb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2a9c>
    fcec:	e7de      	b.n	fcac <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2a94>
    fcee:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    fcf2:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
    fcf6:	f006 ff85 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fcfa:	903f      	str	r0, [sp, #252]	; 0xfc
    fcfc:	e7ff      	b.n	fcfe <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2ae6>
    fcfe:	983f      	ldr	r0, [sp, #252]	; 0xfc
    fd00:	07c1      	lsls	r1, r0, #31
    fd02:	2900      	cmp	r1, #0
    fd04:	d1ce      	bne.n	fca4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2a8c>
    fd06:	e7d1      	b.n	fcac <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2a94>
                trace!("[{:04x}] LD DT, Vx", self.pc);
    fd08:	f24f 301c 	movw	r0, #62236	; 0xf31c
    fd0c:	f2c0 0001 	movt	r0, #1
    fd10:	6801      	ldr	r1, [r0, #0]
    fd12:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fd16:	f100 0212 	add.w	r2, r0, #18
    fd1a:	f8cd 2aec 	str.w	r2, [sp, #2796]	; 0xaec
    fd1e:	f8dd 2aec 	ldr.w	r2, [sp, #2796]	; 0xaec
    fd22:	f8cd 2cc8 	str.w	r2, [sp, #3272]	; 0xcc8
    fd26:	f249 1323 	movw	r3, #37155	; 0x9123
    fd2a:	f2c0 0301 	movt	r3, #1
    fd2e:	4610      	mov	r0, r2
    fd30:	913e      	str	r1, [sp, #248]	; 0xf8
    fd32:	4619      	mov	r1, r3
    fd34:	f7fa fd50 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fd38:	903d      	str	r0, [sp, #244]	; 0xf4
    fd3a:	913c      	str	r1, [sp, #240]	; 0xf0
    fd3c:	e7ff      	b.n	fd3e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2b26>
    fd3e:	983d      	ldr	r0, [sp, #244]	; 0xf4
    fd40:	f8cd 0ae4 	str.w	r0, [sp, #2788]	; 0xae4
    fd44:	993c      	ldr	r1, [sp, #240]	; 0xf0
    fd46:	f8cd 1ae8 	str.w	r1, [sp, #2792]	; 0xae8
    fd4a:	f24f 0238 	movw	r2, #61496	; 0xf038
    fd4e:	f2c0 0201 	movt	r2, #1
    fd52:	6812      	ldr	r2, [r2, #0]
    fd54:	466b      	mov	r3, sp
    fd56:	f04f 0c01 	mov.w	ip, #1
    fd5a:	f8c3 c008 	str.w	ip, [r3, #8]
    fd5e:	605a      	str	r2, [r3, #4]
    fd60:	f8c3 c000 	str.w	ip, [r3]
    fd64:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    fd68:	2202      	movs	r2, #2
    fd6a:	f60d 23e4 	addw	r3, sp, #2788	; 0xae4
    fd6e:	993e      	ldr	r1, [sp, #248]	; 0xf8
    fd70:	f006 fe0d 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fd74:	e7ff      	b.n	fd76 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2b5e>
    fd76:	f8dd 1ac0 	ldr.w	r1, [sp, #2752]	; 0xac0
    fd7a:	f24f 303c 	movw	r0, #62268	; 0xf33c
    fd7e:	f2c0 0001 	movt	r0, #1
    fd82:	6802      	ldr	r2, [r0, #0]
    fd84:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    fd88:	f002 fb1a 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fd8c:	e7ff      	b.n	fd8e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2b76>
    fd8e:	e7ff      	b.n	fd90 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2b78>
                self.dt = self.v[x];
    fd90:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    fd94:	280f      	cmp	r0, #15
    fd96:	f200 85f1 	bhi.w	1097c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3764>
    fd9a:	e7ff      	b.n	fd9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2b84>
    fd9c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fda0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fda4:	1842      	adds	r2, r0, r1
    fda6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    fdaa:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
        match (
    fdae:	f000 bd00 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    fdb2:	2005      	movs	r0, #5
    fdb4:	f8cd 0af0 	str.w	r0, [sp, #2800]	; 0xaf0
    fdb8:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    fdbc:	f2c0 0001 	movt	r0, #1
    fdc0:	6801      	ldr	r1, [r0, #0]
    fdc2:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    fdc6:	f006 ff1d 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fdca:	903b      	str	r0, [sp, #236]	; 0xec
    fdcc:	e01f      	b.n	fe0e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2bf6>
    fdce:	2001      	movs	r0, #1
    fdd0:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    fdd4:	e015      	b.n	fe02 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2bea>
    fdd6:	2000      	movs	r0, #0
    fdd8:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    fddc:	e011      	b.n	fe02 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2bea>
    fdde:	2000      	movs	r0, #0
    fde0:	f88d 0e93 	strb.w	r0, [sp, #3731]	; 0xe93
    fde4:	f89d 1e93 	ldrb.w	r1, [sp, #3731]	; 0xe93
    fde8:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fdec:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fdf0:	f001 fab7 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fdf4:	f8cd 0e94 	str.w	r0, [sp, #3732]	; 0xe94
    fdf8:	f8dd 0e94 	ldr.w	r0, [sp, #3732]	; 0xe94
    fdfc:	f8cd 0af8 	str.w	r0, [sp, #2808]	; 0xaf8
    fe00:	e00a      	b.n	fe18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2c00>
    fe02:	f89d 0af7 	ldrb.w	r0, [sp, #2807]	; 0xaf7
    fe06:	07c0      	lsls	r0, r0, #31
    fe08:	2800      	cmp	r0, #0
    fe0a:	d112      	bne.n	fe32 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2c1a>
    fe0c:	e055      	b.n	feba <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2ca2>
    fe0e:	983b      	ldr	r0, [sp, #236]	; 0xec
    fe10:	07c1      	lsls	r1, r0, #31
    fe12:	2900      	cmp	r1, #0
    fe14:	d1e3      	bne.n	fdde <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2bc6>
    fe16:	e7de      	b.n	fdd6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2bbe>
    fe18:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    fe1c:	f60d 21f8 	addw	r1, sp, #2808	; 0xaf8
    fe20:	f006 fef0 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fe24:	903a      	str	r0, [sp, #232]	; 0xe8
    fe26:	e7ff      	b.n	fe28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2c10>
    fe28:	983a      	ldr	r0, [sp, #232]	; 0xe8
    fe2a:	07c1      	lsls	r1, r0, #31
    fe2c:	2900      	cmp	r1, #0
    fe2e:	d1ce      	bne.n	fdce <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2bb6>
    fe30:	e7d1      	b.n	fdd6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2bbe>
                trace!("[{:04x}] LD ST, Vx", self.pc);
    fe32:	f24f 20cc 	movw	r0, #62156	; 0xf2cc
    fe36:	f2c0 0001 	movt	r0, #1
    fe3a:	6801      	ldr	r1, [r0, #0]
    fe3c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fe40:	f100 0212 	add.w	r2, r0, #18
    fe44:	f8cd 2b1c 	str.w	r2, [sp, #2844]	; 0xb1c
    fe48:	f8dd 2b1c 	ldr.w	r2, [sp, #2844]	; 0xb1c
    fe4c:	f8cd 2cc4 	str.w	r2, [sp, #3268]	; 0xcc4
    fe50:	f249 1323 	movw	r3, #37155	; 0x9123
    fe54:	f2c0 0301 	movt	r3, #1
    fe58:	4610      	mov	r0, r2
    fe5a:	9139      	str	r1, [sp, #228]	; 0xe4
    fe5c:	4619      	mov	r1, r3
    fe5e:	f7fa fcbb 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fe62:	9038      	str	r0, [sp, #224]	; 0xe0
    fe64:	9137      	str	r1, [sp, #220]	; 0xdc
    fe66:	e7ff      	b.n	fe68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2c50>
    fe68:	9838      	ldr	r0, [sp, #224]	; 0xe0
    fe6a:	f8cd 0b14 	str.w	r0, [sp, #2836]	; 0xb14
    fe6e:	9937      	ldr	r1, [sp, #220]	; 0xdc
    fe70:	f8cd 1b18 	str.w	r1, [sp, #2840]	; 0xb18
    fe74:	f24f 0238 	movw	r2, #61496	; 0xf038
    fe78:	f2c0 0201 	movt	r2, #1
    fe7c:	6812      	ldr	r2, [r2, #0]
    fe7e:	466b      	mov	r3, sp
    fe80:	f04f 0c01 	mov.w	ip, #1
    fe84:	f8c3 c008 	str.w	ip, [r3, #8]
    fe88:	605a      	str	r2, [r3, #4]
    fe8a:	f8c3 c000 	str.w	ip, [r3]
    fe8e:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    fe92:	2202      	movs	r2, #2
    fe94:	f60d 3314 	addw	r3, sp, #2836	; 0xb14
    fe98:	9939      	ldr	r1, [sp, #228]	; 0xe4
    fe9a:	f006 fd78 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fe9e:	e7ff      	b.n	fea0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2c88>
    fea0:	f8dd 1af0 	ldr.w	r1, [sp, #2800]	; 0xaf0
    fea4:	f24f 20ec 	movw	r0, #62188	; 0xf2ec
    fea8:	f2c0 0001 	movt	r0, #1
    feac:	6802      	ldr	r2, [r0, #0]
    feae:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    feb2:	f002 fa85 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    feb6:	e7ff      	b.n	feb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2ca0>
    feb8:	e7ff      	b.n	feba <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2ca2>
                self.st = self.v[x];
    feba:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    febe:	280f      	cmp	r0, #15
    fec0:	f200 8552 	bhi.w	10968 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3750>
    fec4:	e7ff      	b.n	fec6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2cae>
    fec6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    feca:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fece:	1842      	adds	r2, r0, r1
    fed0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    fed4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
        match (
    fed8:	f000 bc6b 	b.w	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    fedc:	2005      	movs	r0, #5
    fede:	f8cd 0b20 	str.w	r0, [sp, #2848]	; 0xb20
    fee2:	f64e 70f0 	movw	r0, #61424	; 0xeff0
    fee6:	f2c0 0001 	movt	r0, #1
    feea:	6801      	ldr	r1, [r0, #0]
    feec:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    fef0:	f006 fe88 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fef4:	9036      	str	r0, [sp, #216]	; 0xd8
    fef6:	e01f      	b.n	ff38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2d20>
    fef8:	2001      	movs	r0, #1
    fefa:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    fefe:	e015      	b.n	ff2c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2d14>
    ff00:	2000      	movs	r0, #0
    ff02:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    ff06:	e011      	b.n	ff2c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2d14>
    ff08:	2000      	movs	r0, #0
    ff0a:	f88d 0e9b 	strb.w	r0, [sp, #3739]	; 0xe9b
    ff0e:	f89d 1e9b 	ldrb.w	r1, [sp, #3739]	; 0xe9b
    ff12:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ff16:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ff1a:	f001 fa22 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ff1e:	f8cd 0e9c 	str.w	r0, [sp, #3740]	; 0xe9c
    ff22:	f8dd 0e9c 	ldr.w	r0, [sp, #3740]	; 0xe9c
    ff26:	f8cd 0b28 	str.w	r0, [sp, #2856]	; 0xb28
    ff2a:	e00a      	b.n	ff42 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2d2a>
    ff2c:	f89d 0b27 	ldrb.w	r0, [sp, #2855]	; 0xb27
    ff30:	07c0      	lsls	r0, r0, #31
    ff32:	2800      	cmp	r0, #0
    ff34:	d112      	bne.n	ff5c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2d44>
    ff36:	e055      	b.n	ffe4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2dcc>
    ff38:	9836      	ldr	r0, [sp, #216]	; 0xd8
    ff3a:	07c1      	lsls	r1, r0, #31
    ff3c:	2900      	cmp	r1, #0
    ff3e:	d1e3      	bne.n	ff08 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2cf0>
    ff40:	e7de      	b.n	ff00 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2ce8>
    ff42:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    ff46:	f60d 3128 	addw	r1, sp, #2856	; 0xb28
    ff4a:	f006 fe5b 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ff4e:	9035      	str	r0, [sp, #212]	; 0xd4
    ff50:	e7ff      	b.n	ff52 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2d3a>
    ff52:	9835      	ldr	r0, [sp, #212]	; 0xd4
    ff54:	07c1      	lsls	r1, r0, #31
    ff56:	2900      	cmp	r1, #0
    ff58:	d1ce      	bne.n	fef8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2ce0>
    ff5a:	e7d1      	b.n	ff00 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2ce8>
                trace!("[{:04x}] ADD I, Vx", self.pc);
    ff5c:	f24f 207c 	movw	r0, #62076	; 0xf27c
    ff60:	f2c0 0001 	movt	r0, #1
    ff64:	6801      	ldr	r1, [r0, #0]
    ff66:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ff6a:	f100 0212 	add.w	r2, r0, #18
    ff6e:	f8cd 2b4c 	str.w	r2, [sp, #2892]	; 0xb4c
    ff72:	f8dd 2b4c 	ldr.w	r2, [sp, #2892]	; 0xb4c
    ff76:	f8cd 2cc0 	str.w	r2, [sp, #3264]	; 0xcc0
    ff7a:	f249 1323 	movw	r3, #37155	; 0x9123
    ff7e:	f2c0 0301 	movt	r3, #1
    ff82:	4610      	mov	r0, r2
    ff84:	9134      	str	r1, [sp, #208]	; 0xd0
    ff86:	4619      	mov	r1, r3
    ff88:	f7fa fc26 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ff8c:	9033      	str	r0, [sp, #204]	; 0xcc
    ff8e:	9132      	str	r1, [sp, #200]	; 0xc8
    ff90:	e7ff      	b.n	ff92 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2d7a>
    ff92:	9833      	ldr	r0, [sp, #204]	; 0xcc
    ff94:	f8cd 0b44 	str.w	r0, [sp, #2884]	; 0xb44
    ff98:	9932      	ldr	r1, [sp, #200]	; 0xc8
    ff9a:	f8cd 1b48 	str.w	r1, [sp, #2888]	; 0xb48
    ff9e:	f24f 0238 	movw	r2, #61496	; 0xf038
    ffa2:	f2c0 0201 	movt	r2, #1
    ffa6:	6812      	ldr	r2, [r2, #0]
    ffa8:	466b      	mov	r3, sp
    ffaa:	f04f 0c01 	mov.w	ip, #1
    ffae:	f8c3 c008 	str.w	ip, [r3, #8]
    ffb2:	605a      	str	r2, [r3, #4]
    ffb4:	f8c3 c000 	str.w	ip, [r3]
    ffb8:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    ffbc:	2202      	movs	r2, #2
    ffbe:	f60d 3344 	addw	r3, sp, #2884	; 0xb44
    ffc2:	9934      	ldr	r1, [sp, #208]	; 0xd0
    ffc4:	f006 fce3 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ffc8:	e7ff      	b.n	ffca <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2db2>
    ffca:	f8dd 1b20 	ldr.w	r1, [sp, #2848]	; 0xb20
    ffce:	f24f 209c 	movw	r0, #62108	; 0xf29c
    ffd2:	f2c0 0001 	movt	r0, #1
    ffd6:	6802      	ldr	r2, [r0, #0]
    ffd8:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    ffdc:	f002 f9f0 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ffe0:	e7ff      	b.n	ffe2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2dca>
    ffe2:	e7ff      	b.n	ffe4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2dcc>
                self.i = self.i.wrapping_add(self.v[x].into());
    ffe4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ffe8:	8a01      	ldrh	r1, [r0, #16]
    ffea:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    ffee:	2a0f      	cmp	r2, #15
    fff0:	9131      	str	r1, [sp, #196]	; 0xc4
    fff2:	f200 84af 	bhi.w	10954 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x373c>
    fff6:	e7ff      	b.n	fff8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2de0>
    fff8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fffc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10000:	1842      	adds	r2, r0, r1
   10002:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
   10006:	f001 f99f 	bl	11348 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
   1000a:	9030      	str	r0, [sp, #192]	; 0xc0
   1000c:	e7ff      	b.n	1000e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2df6>
   1000e:	9831      	ldr	r0, [sp, #196]	; 0xc4
   10010:	9930      	ldr	r1, [sp, #192]	; 0xc0
   10012:	f006 fdbd 	bl	16b90 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
   10016:	902f      	str	r0, [sp, #188]	; 0xbc
   10018:	e7ff      	b.n	1001a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2e02>
   1001a:	982f      	ldr	r0, [sp, #188]	; 0xbc
   1001c:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   10020:	8208      	strh	r0, [r1, #16]
        match (
   10022:	e3c6      	b.n	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
   10024:	2005      	movs	r0, #5
   10026:	f8cd 0b50 	str.w	r0, [sp, #2896]	; 0xb50
   1002a:	f64e 70f0 	movw	r0, #61424	; 0xeff0
   1002e:	f2c0 0001 	movt	r0, #1
   10032:	6801      	ldr	r1, [r0, #0]
   10034:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
   10038:	f006 fde4 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   1003c:	902e      	str	r0, [sp, #184]	; 0xb8
   1003e:	e01f      	b.n	10080 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2e68>
   10040:	2001      	movs	r0, #1
   10042:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
   10046:	e015      	b.n	10074 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2e5c>
   10048:	2000      	movs	r0, #0
   1004a:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
   1004e:	e011      	b.n	10074 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2e5c>
   10050:	2000      	movs	r0, #0
   10052:	f88d 0ea3 	strb.w	r0, [sp, #3747]	; 0xea3
   10056:	f89d 1ea3 	ldrb.w	r1, [sp, #3747]	; 0xea3
   1005a:	f644 206c 	movw	r0, #19052	; 0x4a6c
   1005e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10062:	f001 f97e 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
   10066:	f8cd 0ea4 	str.w	r0, [sp, #3748]	; 0xea4
   1006a:	f8dd 0ea4 	ldr.w	r0, [sp, #3748]	; 0xea4
   1006e:	f8cd 0b58 	str.w	r0, [sp, #2904]	; 0xb58
   10072:	e00a      	b.n	1008a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2e72>
   10074:	f89d 0b57 	ldrb.w	r0, [sp, #2903]	; 0xb57
   10078:	07c0      	lsls	r0, r0, #31
   1007a:	2800      	cmp	r0, #0
   1007c:	d112      	bne.n	100a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2e8c>
   1007e:	e055      	b.n	1012c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2f14>
   10080:	982e      	ldr	r0, [sp, #184]	; 0xb8
   10082:	07c1      	lsls	r1, r0, #31
   10084:	2900      	cmp	r1, #0
   10086:	d1e3      	bne.n	10050 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2e38>
   10088:	e7de      	b.n	10048 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2e30>
   1008a:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
   1008e:	f60d 3158 	addw	r1, sp, #2904	; 0xb58
   10092:	f006 fdb7 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   10096:	902d      	str	r0, [sp, #180]	; 0xb4
   10098:	e7ff      	b.n	1009a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2e82>
   1009a:	982d      	ldr	r0, [sp, #180]	; 0xb4
   1009c:	07c1      	lsls	r1, r0, #31
   1009e:	2900      	cmp	r1, #0
   100a0:	d1ce      	bne.n	10040 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2e28>
   100a2:	e7d1      	b.n	10048 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2e30>
                trace!("[{:04x}] LD F, Vx", self.pc);
   100a4:	f24f 10f8 	movw	r0, #61944	; 0xf1f8
   100a8:	f2c0 0001 	movt	r0, #1
   100ac:	6801      	ldr	r1, [r0, #0]
   100ae:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   100b2:	f100 0212 	add.w	r2, r0, #18
   100b6:	f8cd 2b7c 	str.w	r2, [sp, #2940]	; 0xb7c
   100ba:	f8dd 2b7c 	ldr.w	r2, [sp, #2940]	; 0xb7c
   100be:	f8cd 2cbc 	str.w	r2, [sp, #3260]	; 0xcbc
   100c2:	f249 1323 	movw	r3, #37155	; 0x9123
   100c6:	f2c0 0301 	movt	r3, #1
   100ca:	4610      	mov	r0, r2
   100cc:	912c      	str	r1, [sp, #176]	; 0xb0
   100ce:	4619      	mov	r1, r3
   100d0:	f7fa fb82 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   100d4:	902b      	str	r0, [sp, #172]	; 0xac
   100d6:	912a      	str	r1, [sp, #168]	; 0xa8
   100d8:	e7ff      	b.n	100da <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2ec2>
   100da:	982b      	ldr	r0, [sp, #172]	; 0xac
   100dc:	f8cd 0b74 	str.w	r0, [sp, #2932]	; 0xb74
   100e0:	992a      	ldr	r1, [sp, #168]	; 0xa8
   100e2:	f8cd 1b78 	str.w	r1, [sp, #2936]	; 0xb78
   100e6:	f24f 0238 	movw	r2, #61496	; 0xf038
   100ea:	f2c0 0201 	movt	r2, #1
   100ee:	6812      	ldr	r2, [r2, #0]
   100f0:	466b      	mov	r3, sp
   100f2:	f04f 0c01 	mov.w	ip, #1
   100f6:	f8c3 c008 	str.w	ip, [r3, #8]
   100fa:	605a      	str	r2, [r3, #4]
   100fc:	f8c3 c000 	str.w	ip, [r3]
   10100:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
   10104:	2202      	movs	r2, #2
   10106:	f60d 3374 	addw	r3, sp, #2932	; 0xb74
   1010a:	992c      	ldr	r1, [sp, #176]	; 0xb0
   1010c:	f006 fc3f 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   10110:	e7ff      	b.n	10112 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2efa>
   10112:	f8dd 1b50 	ldr.w	r1, [sp, #2896]	; 0xb50
   10116:	f24f 2018 	movw	r0, #61976	; 0xf218
   1011a:	f2c0 0001 	movt	r0, #1
   1011e:	6802      	ldr	r2, [r0, #0]
   10120:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
   10124:	f002 f94c 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   10128:	e7ff      	b.n	1012a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2f12>
   1012a:	e7ff      	b.n	1012c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2f14>
                self.i = (self.v[x] * 5).into();
   1012c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
   10130:	280f      	cmp	r0, #15
   10132:	f200 83f9 	bhi.w	10928 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3710>
   10136:	e7ff      	b.n	10138 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2f20>
   10138:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   1013c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10140:	1842      	adds	r2, r0, r1
   10142:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
   10146:	2305      	movs	r3, #5
   10148:	fba2 2303 	umull	r2, r3, r2, r3
   1014c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
   10150:	f04f 0e00 	mov.w	lr, #0
   10154:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
   10158:	bf18      	it	ne
   1015a:	f04f 0c01 	movne.w	ip, #1
   1015e:	2b00      	cmp	r3, #0
   10160:	bf18      	it	ne
   10162:	2301      	movne	r3, #1
   10164:	ea43 030c 	orr.w	r3, r3, ip
   10168:	2b00      	cmp	r3, #0
   1016a:	9229      	str	r2, [sp, #164]	; 0xa4
   1016c:	f040 83e6 	bne.w	1093c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3724>
   10170:	e7ff      	b.n	10172 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2f5a>
   10172:	9829      	ldr	r0, [sp, #164]	; 0xa4
   10174:	f001 f8e8 	bl	11348 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
   10178:	9028      	str	r0, [sp, #160]	; 0xa0
   1017a:	e7ff      	b.n	1017c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2f64>
   1017c:	9828      	ldr	r0, [sp, #160]	; 0xa0
   1017e:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   10182:	8208      	strh	r0, [r1, #16]
        match (
   10184:	e315      	b.n	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
   10186:	2005      	movs	r0, #5
   10188:	f8cd 0b80 	str.w	r0, [sp, #2944]	; 0xb80
   1018c:	f64e 70f0 	movw	r0, #61424	; 0xeff0
   10190:	f2c0 0001 	movt	r0, #1
   10194:	6801      	ldr	r1, [r0, #0]
   10196:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
   1019a:	f006 fd33 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   1019e:	9027      	str	r0, [sp, #156]	; 0x9c
   101a0:	e01f      	b.n	101e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2fca>
   101a2:	2001      	movs	r0, #1
   101a4:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
   101a8:	e015      	b.n	101d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2fbe>
   101aa:	2000      	movs	r0, #0
   101ac:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
   101b0:	e011      	b.n	101d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2fbe>
   101b2:	2000      	movs	r0, #0
   101b4:	f88d 0eab 	strb.w	r0, [sp, #3755]	; 0xeab
   101b8:	f89d 1eab 	ldrb.w	r1, [sp, #3755]	; 0xeab
   101bc:	f644 206c 	movw	r0, #19052	; 0x4a6c
   101c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   101c4:	f001 f8cd 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
   101c8:	f8cd 0eac 	str.w	r0, [sp, #3756]	; 0xeac
   101cc:	f8dd 0eac 	ldr.w	r0, [sp, #3756]	; 0xeac
   101d0:	f8cd 0b88 	str.w	r0, [sp, #2952]	; 0xb88
   101d4:	e00a      	b.n	101ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2fd4>
   101d6:	f89d 0b87 	ldrb.w	r0, [sp, #2951]	; 0xb87
   101da:	07c0      	lsls	r0, r0, #31
   101dc:	2800      	cmp	r0, #0
   101de:	d112      	bne.n	10206 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2fee>
   101e0:	e055      	b.n	1028e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3076>
   101e2:	9827      	ldr	r0, [sp, #156]	; 0x9c
   101e4:	07c1      	lsls	r1, r0, #31
   101e6:	2900      	cmp	r1, #0
   101e8:	d1e3      	bne.n	101b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2f9a>
   101ea:	e7de      	b.n	101aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2f92>
   101ec:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
   101f0:	f60d 3188 	addw	r1, sp, #2952	; 0xb88
   101f4:	f006 fd06 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   101f8:	9026      	str	r0, [sp, #152]	; 0x98
   101fa:	e7ff      	b.n	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2fe4>
   101fc:	9826      	ldr	r0, [sp, #152]	; 0x98
   101fe:	07c1      	lsls	r1, r0, #31
   10200:	2900      	cmp	r1, #0
   10202:	d1ce      	bne.n	101a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2f8a>
   10204:	e7d1      	b.n	101aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2f92>
                trace!("[{:04x}] LD B, Vx", self.pc);
   10206:	f24f 1058 	movw	r0, #61784	; 0xf158
   1020a:	f2c0 0001 	movt	r0, #1
   1020e:	6801      	ldr	r1, [r0, #0]
   10210:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10214:	f100 0212 	add.w	r2, r0, #18
   10218:	f8cd 2bac 	str.w	r2, [sp, #2988]	; 0xbac
   1021c:	f8dd 2bac 	ldr.w	r2, [sp, #2988]	; 0xbac
   10220:	f8cd 2cb4 	str.w	r2, [sp, #3252]	; 0xcb4
   10224:	f249 1323 	movw	r3, #37155	; 0x9123
   10228:	f2c0 0301 	movt	r3, #1
   1022c:	4610      	mov	r0, r2
   1022e:	9125      	str	r1, [sp, #148]	; 0x94
   10230:	4619      	mov	r1, r3
   10232:	f7fa fad1 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   10236:	9024      	str	r0, [sp, #144]	; 0x90
   10238:	9123      	str	r1, [sp, #140]	; 0x8c
   1023a:	e7ff      	b.n	1023c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3024>
   1023c:	9824      	ldr	r0, [sp, #144]	; 0x90
   1023e:	f8cd 0ba4 	str.w	r0, [sp, #2980]	; 0xba4
   10242:	9923      	ldr	r1, [sp, #140]	; 0x8c
   10244:	f8cd 1ba8 	str.w	r1, [sp, #2984]	; 0xba8
   10248:	f24f 0238 	movw	r2, #61496	; 0xf038
   1024c:	f2c0 0201 	movt	r2, #1
   10250:	6812      	ldr	r2, [r2, #0]
   10252:	466b      	mov	r3, sp
   10254:	f04f 0c01 	mov.w	ip, #1
   10258:	f8c3 c008 	str.w	ip, [r3, #8]
   1025c:	605a      	str	r2, [r3, #4]
   1025e:	f8c3 c000 	str.w	ip, [r3]
   10262:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
   10266:	2202      	movs	r2, #2
   10268:	f60d 33a4 	addw	r3, sp, #2980	; 0xba4
   1026c:	9925      	ldr	r1, [sp, #148]	; 0x94
   1026e:	f006 fb8e 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   10272:	e7ff      	b.n	10274 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x305c>
   10274:	f8dd 1b80 	ldr.w	r1, [sp, #2944]	; 0xb80
   10278:	f24f 1078 	movw	r0, #61816	; 0xf178
   1027c:	f2c0 0001 	movt	r0, #1
   10280:	6802      	ldr	r2, [r0, #0]
   10282:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
   10286:	f002 f89b 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   1028a:	e7ff      	b.n	1028c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3074>
   1028c:	e7ff      	b.n	1028e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3076>
                let bcd = self.v[x];
   1028e:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
   10292:	280f      	cmp	r0, #15
   10294:	f200 8308 	bhi.w	108a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3690>
   10298:	e7ff      	b.n	1029a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3082>
   1029a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   1029e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   102a2:	1842      	adds	r2, r0, r1
   102a4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
   102a8:	4613      	mov	r3, r2
   102aa:	f88d 2cbb 	strb.w	r2, [sp, #3259]	; 0xcbb
   102ae:	f248 5c1f 	movw	ip, #34079	; 0x851f
   102b2:	f2c5 1ceb 	movt	ip, #20971	; 0x51eb
                self.mem[self.i as usize] = (bcd / 100) % 10;
   102b6:	fba2 2c0c 	umull	r2, ip, r2, ip
   102ba:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
   102be:	f8b0 e010 	ldrh.w	lr, [r0, #16]
   102c2:	4674      	mov	r4, lr
   102c4:	2500      	movs	r5, #0
   102c6:	ebb5 3f1e 	cmp.w	r5, lr, lsr #12
   102ca:	9322      	str	r3, [sp, #136]	; 0x88
   102cc:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
   102d0:	9420      	str	r4, [sp, #128]	; 0x80
   102d2:	f040 82f3 	bne.w	108bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x36a4>
   102d6:	e7ff      	b.n	102d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x30c0>
   102d8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   102dc:	9920      	ldr	r1, [sp, #128]	; 0x80
   102de:	1842      	adds	r2, r0, r1
   102e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   102e2:	fa5f fc83 	uxtb.w	ip, r3
   102e6:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
   102ea:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
   102ee:	fbac 450e 	umull	r4, r5, ip, lr
   102f2:	08ed      	lsrs	r5, r5, #3
   102f4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   102f8:	ebac 0c45 	sub.w	ip, ip, r5, lsl #1
   102fc:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
   10300:	9a22      	ldr	r2, [sp, #136]	; 0x88
   10302:	fa5f fc82 	uxtb.w	ip, r2
   10306:	fbac ce0e 	umull	ip, lr, ip, lr
   1030a:	ea4f 0ede 	mov.w	lr, lr, lsr #3
   1030e:	8a05      	ldrh	r5, [r0, #16]
   10310:	3501      	adds	r5, #1
   10312:	2600      	movs	r6, #0
   10314:	2e00      	cmp	r6, #0
   10316:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
   1031a:	951e      	str	r5, [sp, #120]	; 0x78
   1031c:	f040 82d8 	bne.w	108d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x36b8>
   10320:	e7ff      	b.n	10322 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x310a>
   10322:	2000      	movs	r0, #0
   10324:	991e      	ldr	r1, [sp, #120]	; 0x78
   10326:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   1032a:	f040 82dd 	bne.w	108e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x36d0>
   1032e:	e7ff      	b.n	10330 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3118>
   10330:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10334:	991e      	ldr	r1, [sp, #120]	; 0x78
   10336:	1842      	adds	r2, r0, r1
   10338:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1033a:	fa5f fc83 	uxtb.w	ip, r3
   1033e:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
   10342:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
   10346:	fbac e40e 	umull	lr, r4, ip, lr
   1034a:	08e4      	lsrs	r4, r4, #3
   1034c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   10350:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
   10354:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 2] = bcd % 10;
   10358:	8a02      	ldrh	r2, [r0, #16]
   1035a:	3202      	adds	r2, #2
   1035c:	f04f 0c00 	mov.w	ip, #0
   10360:	f1bc 0f00 	cmp.w	ip, #0
   10364:	921d      	str	r2, [sp, #116]	; 0x74
   10366:	f040 82c9 	bne.w	108fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x36e4>
   1036a:	e7ff      	b.n	1036c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3154>
   1036c:	2000      	movs	r0, #0
   1036e:	991d      	ldr	r1, [sp, #116]	; 0x74
   10370:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   10374:	f040 82ce 	bne.w	10914 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x36fc>
   10378:	e7ff      	b.n	1037a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3162>
   1037a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   1037e:	991d      	ldr	r1, [sp, #116]	; 0x74
   10380:	1842      	adds	r2, r0, r1
   10382:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10384:	fa5f fc83 	uxtb.w	ip, r3
   10388:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
   1038c:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
   10390:	fbac e40e 	umull	lr, r4, ip, lr
   10394:	08e4      	lsrs	r4, r4, #3
   10396:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1039a:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
   1039e:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
        match (
   103a2:	e206      	b.n	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
   103a4:	2005      	movs	r0, #5
   103a6:	f8cd 0bb0 	str.w	r0, [sp, #2992]	; 0xbb0
   103aa:	f64e 70f0 	movw	r0, #61424	; 0xeff0
   103ae:	f2c0 0001 	movt	r0, #1
   103b2:	6801      	ldr	r1, [r0, #0]
   103b4:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
   103b8:	f006 fc24 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   103bc:	901c      	str	r0, [sp, #112]	; 0x70
   103be:	e01f      	b.n	10400 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x31e8>
   103c0:	2001      	movs	r0, #1
   103c2:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
   103c6:	e015      	b.n	103f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x31dc>
   103c8:	2000      	movs	r0, #0
   103ca:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
   103ce:	e011      	b.n	103f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x31dc>
   103d0:	2000      	movs	r0, #0
   103d2:	f88d 0eb3 	strb.w	r0, [sp, #3763]	; 0xeb3
   103d6:	f89d 1eb3 	ldrb.w	r1, [sp, #3763]	; 0xeb3
   103da:	f644 206c 	movw	r0, #19052	; 0x4a6c
   103de:	f2c2 0000 	movt	r0, #8192	; 0x2000
   103e2:	f000 ffbe 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
   103e6:	f8cd 0eb4 	str.w	r0, [sp, #3764]	; 0xeb4
   103ea:	f8dd 0eb4 	ldr.w	r0, [sp, #3764]	; 0xeb4
   103ee:	f8cd 0bb8 	str.w	r0, [sp, #3000]	; 0xbb8
   103f2:	e00a      	b.n	1040a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x31f2>
   103f4:	f89d 0bb7 	ldrb.w	r0, [sp, #2999]	; 0xbb7
   103f8:	07c0      	lsls	r0, r0, #31
   103fa:	2800      	cmp	r0, #0
   103fc:	d112      	bne.n	10424 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x320c>
   103fe:	e055      	b.n	104ac <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3294>
   10400:	981c      	ldr	r0, [sp, #112]	; 0x70
   10402:	07c1      	lsls	r1, r0, #31
   10404:	2900      	cmp	r1, #0
   10406:	d1e3      	bne.n	103d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x31b8>
   10408:	e7de      	b.n	103c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x31b0>
   1040a:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
   1040e:	f60d 31b8 	addw	r1, sp, #3000	; 0xbb8
   10412:	f006 fbf7 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   10416:	901b      	str	r0, [sp, #108]	; 0x6c
   10418:	e7ff      	b.n	1041a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3202>
   1041a:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1041c:	07c1      	lsls	r1, r0, #31
   1041e:	2900      	cmp	r1, #0
   10420:	d1ce      	bne.n	103c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x31a8>
   10422:	e7d1      	b.n	103c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x31b0>
                trace!("[{:04x}] LD [I], Vx", self.pc);
   10424:	f24f 00d8 	movw	r0, #61656	; 0xf0d8
   10428:	f2c0 0001 	movt	r0, #1
   1042c:	6801      	ldr	r1, [r0, #0]
   1042e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10432:	f100 0212 	add.w	r2, r0, #18
   10436:	f8cd 2bdc 	str.w	r2, [sp, #3036]	; 0xbdc
   1043a:	f8dd 2bdc 	ldr.w	r2, [sp, #3036]	; 0xbdc
   1043e:	f8cd 2ca0 	str.w	r2, [sp, #3232]	; 0xca0
   10442:	f249 1323 	movw	r3, #37155	; 0x9123
   10446:	f2c0 0301 	movt	r3, #1
   1044a:	4610      	mov	r0, r2
   1044c:	911a      	str	r1, [sp, #104]	; 0x68
   1044e:	4619      	mov	r1, r3
   10450:	f7fa f9c2 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   10454:	9019      	str	r0, [sp, #100]	; 0x64
   10456:	9118      	str	r1, [sp, #96]	; 0x60
   10458:	e7ff      	b.n	1045a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3242>
   1045a:	9819      	ldr	r0, [sp, #100]	; 0x64
   1045c:	f8cd 0bd4 	str.w	r0, [sp, #3028]	; 0xbd4
   10460:	9918      	ldr	r1, [sp, #96]	; 0x60
   10462:	f8cd 1bd8 	str.w	r1, [sp, #3032]	; 0xbd8
   10466:	f24f 0238 	movw	r2, #61496	; 0xf038
   1046a:	f2c0 0201 	movt	r2, #1
   1046e:	6812      	ldr	r2, [r2, #0]
   10470:	466b      	mov	r3, sp
   10472:	f04f 0c01 	mov.w	ip, #1
   10476:	f8c3 c008 	str.w	ip, [r3, #8]
   1047a:	605a      	str	r2, [r3, #4]
   1047c:	f8c3 c000 	str.w	ip, [r3]
   10480:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
   10484:	2202      	movs	r2, #2
   10486:	f60d 33d4 	addw	r3, sp, #3028	; 0xbd4
   1048a:	991a      	ldr	r1, [sp, #104]	; 0x68
   1048c:	f006 fa7f 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   10490:	e7ff      	b.n	10492 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x327a>
   10492:	f8dd 1bb0 	ldr.w	r1, [sp, #2992]	; 0xbb0
   10496:	f24f 00f8 	movw	r0, #61688	; 0xf0f8
   1049a:	f2c0 0001 	movt	r0, #1
   1049e:	6802      	ldr	r2, [r0, #0]
   104a0:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
   104a4:	f001 ff8c 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   104a8:	e7ff      	b.n	104aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3292>
   104aa:	e7ff      	b.n	104ac <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3294>
                let x = x as usize;
   104ac:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
   104b0:	f8cd 0ca4 	str.w	r0, [sp, #3236]	; 0xca4
                for i in 0..(x + 1) {
   104b4:	1c41      	adds	r1, r0, #1
   104b6:	460a      	mov	r2, r1
   104b8:	4281      	cmp	r1, r0
   104ba:	9217      	str	r2, [sp, #92]	; 0x5c
   104bc:	f0c0 81c9 	bcc.w	10852 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x363a>
   104c0:	e7ff      	b.n	104c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x32aa>
   104c2:	2000      	movs	r0, #0
   104c4:	f8cd 0be0 	str.w	r0, [sp, #3040]	; 0xbe0
   104c8:	9817      	ldr	r0, [sp, #92]	; 0x5c
   104ca:	f8cd 0be4 	str.w	r0, [sp, #3044]	; 0xbe4
   104ce:	f8dd 0be0 	ldr.w	r0, [sp, #3040]	; 0xbe0
   104d2:	f8dd 1be4 	ldr.w	r1, [sp, #3044]	; 0xbe4
   104d6:	f001 fcff 	bl	11ed8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
   104da:	9016      	str	r0, [sp, #88]	; 0x58
   104dc:	9115      	str	r1, [sp, #84]	; 0x54
   104de:	e7ff      	b.n	104e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x32c8>
   104e0:	9816      	ldr	r0, [sp, #88]	; 0x58
   104e2:	f8cd 0be8 	str.w	r0, [sp, #3048]	; 0xbe8
   104e6:	9915      	ldr	r1, [sp, #84]	; 0x54
   104e8:	f8cd 1bec 	str.w	r1, [sp, #3052]	; 0xbec
   104ec:	e7ff      	b.n	104ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x32d6>
   104ee:	f60d 30e8 	addw	r0, sp, #3048	; 0xbe8
   104f2:	f001 fc66 	bl	11dc2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   104f6:	f8cd 1bf4 	str.w	r1, [sp, #3060]	; 0xbf4
   104fa:	f8cd 0bf0 	str.w	r0, [sp, #3056]	; 0xbf0
   104fe:	e7ff      	b.n	10500 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x32e8>
   10500:	f8dd 0bf0 	ldr.w	r0, [sp, #3056]	; 0xbf0
   10504:	2800      	cmp	r0, #0
   10506:	d001      	beq.n	1050c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x32f4>
   10508:	e7ff      	b.n	1050a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x32f2>
   1050a:	e001      	b.n	10510 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x32f8>
        match (
   1050c:	e151      	b.n	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
                for i in 0..(x + 1) {
   1050e:	defe      	udf	#254	; 0xfe
   10510:	f8dd 0bf4 	ldr.w	r0, [sp, #3060]	; 0xbf4
   10514:	f8cd 0ca8 	str.w	r0, [sp, #3240]	; 0xca8
   10518:	f8cd 0cac 	str.w	r0, [sp, #3244]	; 0xcac
   1051c:	f8cd 0cb0 	str.w	r0, [sp, #3248]	; 0xcb0
                    self.mem[self.i as usize + i] = self.v[i];
   10520:	280f      	cmp	r0, #15
   10522:	9014      	str	r0, [sp, #80]	; 0x50
   10524:	f200 81a1 	bhi.w	1086a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3652>
   10528:	e7ff      	b.n	1052a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3312>
   1052a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   1052e:	9914      	ldr	r1, [sp, #80]	; 0x50
   10530:	1842      	adds	r2, r0, r1
   10532:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
   10536:	8a03      	ldrh	r3, [r0, #16]
   10538:	eb03 0c01 	add.w	ip, r3, r1
   1053c:	46e6      	mov	lr, ip
   1053e:	459c      	cmp	ip, r3
   10540:	9213      	str	r2, [sp, #76]	; 0x4c
   10542:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
   10546:	f0c0 8199 	bcc.w	1087c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3664>
   1054a:	e7ff      	b.n	1054c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3334>
   1054c:	2000      	movs	r0, #0
   1054e:	9912      	ldr	r1, [sp, #72]	; 0x48
   10550:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   10554:	f040 819e 	bne.w	10894 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x367c>
   10558:	e7ff      	b.n	1055a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3342>
   1055a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   1055e:	9912      	ldr	r1, [sp, #72]	; 0x48
   10560:	1842      	adds	r2, r0, r1
   10562:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10564:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
                for i in 0..(x + 1) {
   10568:	e7c1      	b.n	104ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x32d6>
   1056a:	2005      	movs	r0, #5
   1056c:	f8cd 0bf8 	str.w	r0, [sp, #3064]	; 0xbf8
   10570:	f64e 70f0 	movw	r0, #61424	; 0xeff0
   10574:	f2c0 0001 	movt	r0, #1
   10578:	6801      	ldr	r1, [r0, #0]
   1057a:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
   1057e:	f006 fb41 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   10582:	9011      	str	r0, [sp, #68]	; 0x44
   10584:	e01f      	b.n	105c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x33ae>
   10586:	2001      	movs	r0, #1
   10588:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
   1058c:	e015      	b.n	105ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x33a2>
   1058e:	2000      	movs	r0, #0
   10590:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
   10594:	e011      	b.n	105ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x33a2>
   10596:	2000      	movs	r0, #0
   10598:	f88d 0ebb 	strb.w	r0, [sp, #3771]	; 0xebb
   1059c:	f89d 1ebb 	ldrb.w	r1, [sp, #3771]	; 0xebb
   105a0:	f644 206c 	movw	r0, #19052	; 0x4a6c
   105a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   105a8:	f000 fedb 	bl	11362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
   105ac:	f8cd 0ebc 	str.w	r0, [sp, #3772]	; 0xebc
   105b0:	f8dd 0ebc 	ldr.w	r0, [sp, #3772]	; 0xebc
   105b4:	f8cd 0c00 	str.w	r0, [sp, #3072]	; 0xc00
   105b8:	e00a      	b.n	105d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x33b8>
   105ba:	f89d 0bff 	ldrb.w	r0, [sp, #3071]	; 0xbff
   105be:	07c0      	lsls	r0, r0, #31
   105c0:	2800      	cmp	r0, #0
   105c2:	d112      	bne.n	105ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x33d2>
   105c4:	e055      	b.n	10672 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x345a>
   105c6:	9811      	ldr	r0, [sp, #68]	; 0x44
   105c8:	07c1      	lsls	r1, r0, #31
   105ca:	2900      	cmp	r1, #0
   105cc:	d1e3      	bne.n	10596 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x337e>
   105ce:	e7de      	b.n	1058e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3376>
   105d0:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
   105d4:	f50d 6140 	add.w	r1, sp, #3072	; 0xc00
   105d8:	f006 fb14 	bl	16c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   105dc:	9010      	str	r0, [sp, #64]	; 0x40
   105de:	e7ff      	b.n	105e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x33c8>
   105e0:	9810      	ldr	r0, [sp, #64]	; 0x40
   105e2:	07c1      	lsls	r1, r0, #31
   105e4:	2900      	cmp	r1, #0
   105e6:	d1ce      	bne.n	10586 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x336e>
   105e8:	e7d1      	b.n	1058e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3376>
                trace!("[{:04x}] LD Vx, [I]", self.pc);
   105ea:	f24f 0014 	movw	r0, #61460	; 0xf014
   105ee:	f2c0 0001 	movt	r0, #1
   105f2:	6801      	ldr	r1, [r0, #0]
   105f4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   105f8:	f100 0212 	add.w	r2, r0, #18
   105fc:	f8cd 2c24 	str.w	r2, [sp, #3108]	; 0xc24
   10600:	f8dd 2c24 	ldr.w	r2, [sp, #3108]	; 0xc24
   10604:	f8cd 2c8c 	str.w	r2, [sp, #3212]	; 0xc8c
   10608:	f249 1323 	movw	r3, #37155	; 0x9123
   1060c:	f2c0 0301 	movt	r3, #1
   10610:	4610      	mov	r0, r2
   10612:	910f      	str	r1, [sp, #60]	; 0x3c
   10614:	4619      	mov	r1, r3
   10616:	f7fa f8df 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   1061a:	900e      	str	r0, [sp, #56]	; 0x38
   1061c:	910d      	str	r1, [sp, #52]	; 0x34
   1061e:	e7ff      	b.n	10620 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3408>
   10620:	980e      	ldr	r0, [sp, #56]	; 0x38
   10622:	f8cd 0c1c 	str.w	r0, [sp, #3100]	; 0xc1c
   10626:	990d      	ldr	r1, [sp, #52]	; 0x34
   10628:	f8cd 1c20 	str.w	r1, [sp, #3104]	; 0xc20
   1062c:	f24f 0238 	movw	r2, #61496	; 0xf038
   10630:	f2c0 0201 	movt	r2, #1
   10634:	6812      	ldr	r2, [r2, #0]
   10636:	466b      	mov	r3, sp
   10638:	f04f 0c01 	mov.w	ip, #1
   1063c:	f8c3 c008 	str.w	ip, [r3, #8]
   10640:	605a      	str	r2, [r3, #4]
   10642:	f8c3 c000 	str.w	ip, [r3]
   10646:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
   1064a:	2202      	movs	r2, #2
   1064c:	f60d 431c 	addw	r3, sp, #3100	; 0xc1c
   10650:	990f      	ldr	r1, [sp, #60]	; 0x3c
   10652:	f006 f99c 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   10656:	e7ff      	b.n	10658 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3440>
   10658:	f8dd 1bf8 	ldr.w	r1, [sp, #3064]	; 0xbf8
   1065c:	f24f 0078 	movw	r0, #61560	; 0xf078
   10660:	f2c0 0001 	movt	r0, #1
   10664:	6802      	ldr	r2, [r0, #0]
   10666:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
   1066a:	f001 fea9 	bl	123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   1066e:	e7ff      	b.n	10670 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3458>
   10670:	e7ff      	b.n	10672 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x345a>
                let x = x as usize;
   10672:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
   10676:	f8cd 0c90 	str.w	r0, [sp, #3216]	; 0xc90
                for i in 0..(x + 1) {
   1067a:	1c41      	adds	r1, r0, #1
   1067c:	460a      	mov	r2, r1
   1067e:	4281      	cmp	r1, r0
   10680:	920c      	str	r2, [sp, #48]	; 0x30
   10682:	f0c0 80bb 	bcc.w	107fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x35e4>
   10686:	e7ff      	b.n	10688 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3470>
   10688:	2000      	movs	r0, #0
   1068a:	f8cd 0c28 	str.w	r0, [sp, #3112]	; 0xc28
   1068e:	980c      	ldr	r0, [sp, #48]	; 0x30
   10690:	f8cd 0c2c 	str.w	r0, [sp, #3116]	; 0xc2c
   10694:	f8dd 0c28 	ldr.w	r0, [sp, #3112]	; 0xc28
   10698:	f8dd 1c2c 	ldr.w	r1, [sp, #3116]	; 0xc2c
   1069c:	f001 fc1c 	bl	11ed8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
   106a0:	900b      	str	r0, [sp, #44]	; 0x2c
   106a2:	910a      	str	r1, [sp, #40]	; 0x28
   106a4:	e7ff      	b.n	106a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x348e>
   106a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   106a8:	f8cd 0c30 	str.w	r0, [sp, #3120]	; 0xc30
   106ac:	990a      	ldr	r1, [sp, #40]	; 0x28
   106ae:	f8cd 1c34 	str.w	r1, [sp, #3124]	; 0xc34
   106b2:	e7ff      	b.n	106b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x349c>
   106b4:	f50d 6043 	add.w	r0, sp, #3120	; 0xc30
   106b8:	f001 fb83 	bl	11dc2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   106bc:	f8cd 1c3c 	str.w	r1, [sp, #3132]	; 0xc3c
   106c0:	f8cd 0c38 	str.w	r0, [sp, #3128]	; 0xc38
   106c4:	e7ff      	b.n	106c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x34ae>
   106c6:	f8dd 0c38 	ldr.w	r0, [sp, #3128]	; 0xc38
   106ca:	2800      	cmp	r0, #0
   106cc:	d001      	beq.n	106d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x34ba>
   106ce:	e7ff      	b.n	106d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x34b8>
   106d0:	e001      	b.n	106d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x34be>
        match (
   106d2:	e06e      	b.n	107b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
                for i in 0..(x + 1) {
   106d4:	defe      	udf	#254	; 0xfe
   106d6:	f8dd 0c3c 	ldr.w	r0, [sp, #3132]	; 0xc3c
   106da:	f8cd 0c94 	str.w	r0, [sp, #3220]	; 0xc94
   106de:	f8cd 0c98 	str.w	r0, [sp, #3224]	; 0xc98
   106e2:	f8cd 0c9c 	str.w	r0, [sp, #3228]	; 0xc9c
                    self.v[i] = self.mem[self.i as usize + i];
   106e6:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   106ea:	8a0a      	ldrh	r2, [r1, #16]
   106ec:	1813      	adds	r3, r2, r0
   106ee:	469c      	mov	ip, r3
   106f0:	4293      	cmp	r3, r2
   106f2:	9009      	str	r0, [sp, #36]	; 0x24
   106f4:	f8cd c020 	str.w	ip, [sp, #32]
   106f8:	f0c0 808c 	bcc.w	10814 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x35fc>
   106fc:	e7ff      	b.n	106fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x34e6>
   106fe:	2000      	movs	r0, #0
   10700:	9908      	ldr	r1, [sp, #32]
   10702:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   10706:	f040 8091 	bne.w	1082c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3614>
   1070a:	e7ff      	b.n	1070c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x34f4>
   1070c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10710:	9908      	ldr	r1, [sp, #32]
   10712:	1842      	adds	r2, r0, r1
   10714:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
   10718:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1071a:	2b0f      	cmp	r3, #15
   1071c:	9207      	str	r2, [sp, #28]
   1071e:	f200 808f 	bhi.w	10840 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3628>
   10722:	e7ff      	b.n	10724 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x350c>
   10724:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10728:	9909      	ldr	r1, [sp, #36]	; 0x24
   1072a:	1842      	adds	r2, r0, r1
   1072c:	9b07      	ldr	r3, [sp, #28]
   1072e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                for i in 0..(x + 1) {
   10732:	e7bf      	b.n	106b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x349c>
   10734:	f249 1123 	movw	r1, #37155	; 0x9123
   10738:	f2c0 0101 	movt	r1, #1
   1073c:	f8dd 0430 	ldr.w	r0, [sp, #1072]	; 0x430
   10740:	f7fa f84a 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   10744:	9006      	str	r0, [sp, #24]
   10746:	9105      	str	r1, [sp, #20]
   10748:	e7ff      	b.n	1074a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3532>
   1074a:	f8dd 042c 	ldr.w	r0, [sp, #1068]	; 0x42c
   1074e:	f8cd 0c58 	str.w	r0, [sp, #3160]	; 0xc58
   10752:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   10756:	f8cd 1c5c 	str.w	r1, [sp, #3164]	; 0xc5c
   1075a:	9a06      	ldr	r2, [sp, #24]
   1075c:	f8cd 2c60 	str.w	r2, [sp, #3168]	; 0xc60
   10760:	9b05      	ldr	r3, [sp, #20]
   10762:	f8cd 3c64 	str.w	r3, [sp, #3172]	; 0xc64
   10766:	f64f 3cdc 	movw	ip, #64476	; 0xfbdc
   1076a:	f2c0 0c01 	movt	ip, #1
   1076e:	f8dc c000 	ldr.w	ip, [ip]
   10772:	46ee      	mov	lr, sp
   10774:	2402      	movs	r4, #2
   10776:	f8ce 4008 	str.w	r4, [lr, #8]
   1077a:	f8ce c004 	str.w	ip, [lr, #4]
   1077e:	f8ce 4000 	str.w	r4, [lr]
   10782:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
   10786:	f60d 4358 	addw	r3, sp, #3160	; 0xc58
   1078a:	f8dd 1434 	ldr.w	r1, [sp, #1076]	; 0x434
   1078e:	4622      	mov	r2, r4
   10790:	f006 f8fd 	bl	1698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   10794:	e7ff      	b.n	10796 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x357e>
   10796:	f64f 4000 	movw	r0, #64512	; 0xfc00
   1079a:	f2c0 0001 	movt	r0, #1
   1079e:	f007 f8ac 	bl	178fa <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   107a2:	9004      	str	r0, [sp, #16]
   107a4:	e7ff      	b.n	107a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x358e>
   107a6:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
   107aa:	9904      	ldr	r1, [sp, #16]
   107ac:	f007 f8e2 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   107b0:	defe      	udf	#254	; 0xfe
        }
    }
   107b2:	f50d 6d6c 	add.w	sp, sp, #3776	; 0xec0
   107b6:	bd70      	pop	{r4, r5, r6, pc}
        let h = self.mem[self.pc as usize] as u16;
   107b8:	f64e 7094 	movw	r0, #61332	; 0xef94
   107bc:	f2c0 0001 	movt	r0, #1
   107c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   107c4:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
   107c8:	f007 f8b4 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   107cc:	defe      	udf	#254	; 0xfe
        let l = self.mem[(self.pc + 1) as usize] as u16;
   107ce:	f64e 70c0 	movw	r0, #61376	; 0xefc0
   107d2:	f2c0 0001 	movt	r0, #1
   107d6:	f64e 72a4 	movw	r2, #61348	; 0xefa4
   107da:	f2c0 0201 	movt	r2, #1
   107de:	211c      	movs	r1, #28
   107e0:	f007 f892 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   107e4:	defe      	udf	#254	; 0xfe
   107e6:	f64e 70dc 	movw	r0, #61404	; 0xefdc
   107ea:	f2c0 0001 	movt	r0, #1
   107ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   107f2:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
   107f6:	f007 f89d 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   107fa:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
   107fc:	f64e 70c0 	movw	r0, #61376	; 0xefc0
   10800:	f2c0 0001 	movt	r0, #1
   10804:	f24f 027c 	movw	r2, #61564	; 0xf07c
   10808:	f2c0 0201 	movt	r2, #1
   1080c:	211c      	movs	r1, #28
   1080e:	f007 f87b 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10812:	defe      	udf	#254	; 0xfe
                    self.v[i] = self.mem[self.i as usize + i];
   10814:	f64e 70c0 	movw	r0, #61376	; 0xefc0
   10818:	f2c0 0001 	movt	r0, #1
   1081c:	f24f 028c 	movw	r2, #61580	; 0xf08c
   10820:	f2c0 0201 	movt	r2, #1
   10824:	211c      	movs	r1, #28
   10826:	f007 f86f 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1082a:	defe      	udf	#254	; 0xfe
   1082c:	f24f 009c 	movw	r0, #61596	; 0xf09c
   10830:	f2c0 0001 	movt	r0, #1
   10834:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10838:	9908      	ldr	r1, [sp, #32]
   1083a:	f007 f87b 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1083e:	defe      	udf	#254	; 0xfe
   10840:	f24f 00ac 	movw	r0, #61612	; 0xf0ac
   10844:	f2c0 0001 	movt	r0, #1
   10848:	2210      	movs	r2, #16
   1084a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1084c:	f007 f872 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10850:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
   10852:	f64e 70c0 	movw	r0, #61376	; 0xefc0
   10856:	f2c0 0001 	movt	r0, #1
   1085a:	f24f 02fc 	movw	r2, #61692	; 0xf0fc
   1085e:	f2c0 0201 	movt	r2, #1
   10862:	211c      	movs	r1, #28
   10864:	f007 f850 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10868:	defe      	udf	#254	; 0xfe
                    self.mem[self.i as usize + i] = self.v[i];
   1086a:	f24f 100c 	movw	r0, #61708	; 0xf10c
   1086e:	f2c0 0001 	movt	r0, #1
   10872:	2210      	movs	r2, #16
   10874:	9914      	ldr	r1, [sp, #80]	; 0x50
   10876:	f007 f85d 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1087a:	defe      	udf	#254	; 0xfe
   1087c:	f64e 70c0 	movw	r0, #61376	; 0xefc0
   10880:	f2c0 0001 	movt	r0, #1
   10884:	f24f 121c 	movw	r2, #61724	; 0xf11c
   10888:	f2c0 0201 	movt	r2, #1
   1088c:	211c      	movs	r1, #28
   1088e:	f007 f83b 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10892:	defe      	udf	#254	; 0xfe
   10894:	f24f 102c 	movw	r0, #61740	; 0xf12c
   10898:	f2c0 0001 	movt	r0, #1
   1089c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   108a0:	9912      	ldr	r1, [sp, #72]	; 0x48
   108a2:	f007 f847 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   108a6:	defe      	udf	#254	; 0xfe
                let bcd = self.v[x];
   108a8:	f24f 107c 	movw	r0, #61820	; 0xf17c
   108ac:	f2c0 0001 	movt	r0, #1
   108b0:	2210      	movs	r2, #16
   108b2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   108b6:	f007 f83d 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   108ba:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize] = (bcd / 100) % 10;
   108bc:	f24f 108c 	movw	r0, #61836	; 0xf18c
   108c0:	f2c0 0001 	movt	r0, #1
   108c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   108c8:	9920      	ldr	r1, [sp, #128]	; 0x80
   108ca:	f007 f833 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   108ce:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
   108d0:	f64e 70c0 	movw	r0, #61376	; 0xefc0
   108d4:	f2c0 0001 	movt	r0, #1
   108d8:	f24f 129c 	movw	r2, #61852	; 0xf19c
   108dc:	f2c0 0201 	movt	r2, #1
   108e0:	211c      	movs	r1, #28
   108e2:	f007 f811 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   108e6:	defe      	udf	#254	; 0xfe
   108e8:	f24f 10ac 	movw	r0, #61868	; 0xf1ac
   108ec:	f2c0 0001 	movt	r0, #1
   108f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   108f4:	991e      	ldr	r1, [sp, #120]	; 0x78
   108f6:	f007 f81d 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   108fa:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 2] = bcd % 10;
   108fc:	f64e 70c0 	movw	r0, #61376	; 0xefc0
   10900:	f2c0 0001 	movt	r0, #1
   10904:	f24f 12bc 	movw	r2, #61884	; 0xf1bc
   10908:	f2c0 0201 	movt	r2, #1
   1090c:	211c      	movs	r1, #28
   1090e:	f006 fffb 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10912:	defe      	udf	#254	; 0xfe
   10914:	f24f 10cc 	movw	r0, #61900	; 0xf1cc
   10918:	f2c0 0001 	movt	r0, #1
   1091c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10920:	991d      	ldr	r1, [sp, #116]	; 0x74
   10922:	f007 f807 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10926:	defe      	udf	#254	; 0xfe
                self.i = (self.v[x] * 5).into();
   10928:	f24f 201c 	movw	r0, #61980	; 0xf21c
   1092c:	f2c0 0001 	movt	r0, #1
   10930:	2210      	movs	r2, #16
   10932:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10936:	f006 fffd 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1093a:	defe      	udf	#254	; 0xfe
   1093c:	f24f 2040 	movw	r0, #62016	; 0xf240
   10940:	f2c0 0001 	movt	r0, #1
   10944:	f24f 222c 	movw	r2, #61996	; 0xf22c
   10948:	f2c0 0201 	movt	r2, #1
   1094c:	2121      	movs	r1, #33	; 0x21
   1094e:	f006 ffdb 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10952:	defe      	udf	#254	; 0xfe
                self.i = self.i.wrapping_add(self.v[x].into());
   10954:	f24f 20a0 	movw	r0, #62112	; 0xf2a0
   10958:	f2c0 0001 	movt	r0, #1
   1095c:	2210      	movs	r2, #16
   1095e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10962:	f006 ffe7 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10966:	defe      	udf	#254	; 0xfe
                self.st = self.v[x];
   10968:	f24f 20f0 	movw	r0, #62192	; 0xf2f0
   1096c:	f2c0 0001 	movt	r0, #1
   10970:	2210      	movs	r2, #16
   10972:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10976:	f006 ffdd 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1097a:	defe      	udf	#254	; 0xfe
                self.dt = self.v[x];
   1097c:	f24f 3040 	movw	r0, #62272	; 0xf340
   10980:	f2c0 0001 	movt	r0, #1
   10984:	2210      	movs	r2, #16
   10986:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1098a:	f006 ffd3 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1098e:	defe      	udf	#254	; 0xfe
                self.v[x] = self.waitkey();
   10990:	f24f 3090 	movw	r0, #62352	; 0xf390
   10994:	f2c0 0001 	movt	r0, #1
   10998:	2210      	movs	r2, #16
   1099a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1099e:	f006 ffc9 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   109a2:	defe      	udf	#254	; 0xfe
                self.v[x] = self.dt;
   109a4:	f24f 30e0 	movw	r0, #62432	; 0xf3e0
   109a8:	f2c0 0001 	movt	r0, #1
   109ac:	2210      	movs	r2, #16
   109ae:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   109b2:	f006 ffbf 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   109b6:	defe      	udf	#254	; 0xfe
                if !self.hw.key(self.v[x]) {
   109b8:	f24f 4030 	movw	r0, #62512	; 0xf430
   109bc:	f2c0 0001 	movt	r0, #1
   109c0:	2210      	movs	r2, #16
   109c2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   109c6:	f006 ffb5 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   109ca:	defe      	udf	#254	; 0xfe
                if self.hw.key(self.v[x]) {
   109cc:	f24f 4074 	movw	r0, #62580	; 0xf474
   109d0:	f2c0 0001 	movt	r0, #1
   109d4:	2210      	movs	r2, #16
   109d6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   109da:	f006 ffab 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   109de:	defe      	udf	#254	; 0xfe
                let basex = self.v[x] as usize;
   109e0:	f24f 40c8 	movw	r0, #62664	; 0xf4c8
   109e4:	f2c0 0001 	movt	r0, #1
   109e8:	2210      	movs	r2, #16
   109ea:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   109ee:	f006 ffa1 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   109f2:	defe      	udf	#254	; 0xfe
                let basey = self.v[y] as usize;
   109f4:	f24f 40d8 	movw	r0, #62680	; 0xf4d8
   109f8:	f2c0 0001 	movt	r0, #1
   109fc:	2210      	movs	r2, #16
   109fe:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10a02:	f006 ff97 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a06:	defe      	udf	#254	; 0xfe
                    let b = self.mem[self.i as usize + y];
   10a08:	f64e 70c0 	movw	r0, #61376	; 0xefc0
   10a0c:	f2c0 0001 	movt	r0, #1
   10a10:	f24f 42e8 	movw	r2, #62696	; 0xf4e8
   10a14:	f2c0 0201 	movt	r2, #1
   10a18:	211c      	movs	r1, #28
   10a1a:	f006 ff75 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10a1e:	defe      	udf	#254	; 0xfe
   10a20:	f24f 40f8 	movw	r0, #62712	; 0xf4f8
   10a24:	f2c0 0001 	movt	r0, #1
   10a28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10a2c:	9967      	ldr	r1, [sp, #412]	; 0x19c
   10a2e:	f006 ff81 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a32:	defe      	udf	#254	; 0xfe
                    let vramy = (y + basey) % h;
   10a34:	f64e 70c0 	movw	r0, #61376	; 0xefc0
   10a38:	f2c0 0001 	movt	r0, #1
   10a3c:	f24f 5208 	movw	r2, #62728	; 0xf508
   10a40:	f2c0 0201 	movt	r2, #1
   10a44:	211c      	movs	r1, #28
   10a46:	f006 ff5f 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10a4a:	defe      	udf	#254	; 0xfe
   10a4c:	f24f 5020 	movw	r0, #62752	; 0xf520
   10a50:	f2c0 0001 	movt	r0, #1
   10a54:	f24f 5208 	movw	r2, #62728	; 0xf508
   10a58:	f2c0 0201 	movt	r2, #1
   10a5c:	2139      	movs	r1, #57	; 0x39
   10a5e:	f006 ff53 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10a62:	defe      	udf	#254	; 0xfe
                        let vramx = (x + basex) % w;
   10a64:	f64e 70c0 	movw	r0, #61376	; 0xefc0
   10a68:	f2c0 0001 	movt	r0, #1
   10a6c:	f24f 525c 	movw	r2, #62812	; 0xf55c
   10a70:	f2c0 0201 	movt	r2, #1
   10a74:	211c      	movs	r1, #28
   10a76:	f006 ff47 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10a7a:	defe      	udf	#254	; 0xfe
   10a7c:	f24f 5020 	movw	r0, #62752	; 0xf520
   10a80:	f2c0 0001 	movt	r0, #1
   10a84:	f24f 525c 	movw	r2, #62812	; 0xf55c
   10a88:	f2c0 0201 	movt	r2, #1
   10a8c:	2139      	movs	r1, #57	; 0x39
   10a8e:	f006 ff3b 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10a92:	defe      	udf	#254	; 0xfe
                        let src = (b & 1 << (7 - x)) > 0;
   10a94:	f24f 5080 	movw	r0, #62848	; 0xf580
   10a98:	f2c0 0001 	movt	r0, #1
   10a9c:	f24f 526c 	movw	r2, #62828	; 0xf56c
   10aa0:	f2c0 0201 	movt	r2, #1
   10aa4:	2121      	movs	r1, #33	; 0x21
   10aa6:	f006 ff2f 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10aaa:	defe      	udf	#254	; 0xfe
   10aac:	f24f 50c0 	movw	r0, #62912	; 0xf5c0
   10ab0:	f2c0 0001 	movt	r0, #1
   10ab4:	f24f 52a4 	movw	r2, #62884	; 0xf5a4
   10ab8:	f2c0 0201 	movt	r2, #1
   10abc:	2123      	movs	r1, #35	; 0x23
   10abe:	f006 ff23 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10ac2:	defe      	udf	#254	; 0xfe
                self.v[x] = self.hw.rand() & kk;
   10ac4:	f24f 6024 	movw	r0, #63012	; 0xf624
   10ac8:	f2c0 0001 	movt	r0, #1
   10acc:	2210      	movs	r2, #16
   10ace:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10ad2:	f006 ff2f 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10ad6:	defe      	udf	#254	; 0xfe
                if self.v[x] != self.v[y] {
   10ad8:	f24f 60f4 	movw	r0, #63220	; 0xf6f4
   10adc:	f2c0 0001 	movt	r0, #1
   10ae0:	2210      	movs	r2, #16
   10ae2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10ae6:	f006 ff25 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10aea:	defe      	udf	#254	; 0xfe
   10aec:	f24f 7004 	movw	r0, #63236	; 0xf704
   10af0:	f2c0 0001 	movt	r0, #1
   10af4:	2210      	movs	r2, #16
   10af6:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10afa:	f006 ff1b 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10afe:	defe      	udf	#254	; 0xfe
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
   10b00:	f24f 7054 	movw	r0, #63316	; 0xf754
   10b04:	f2c0 0001 	movt	r0, #1
   10b08:	2210      	movs	r2, #16
   10b0a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10b0e:	f006 ff11 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b12:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shl(1);
   10b14:	f24f 7064 	movw	r0, #63332	; 0xf764
   10b18:	f2c0 0001 	movt	r0, #1
   10b1c:	2210      	movs	r2, #16
   10b1e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10b22:	f006 ff07 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b26:	defe      	udf	#254	; 0xfe
   10b28:	f24f 7074 	movw	r0, #63348	; 0xf774
   10b2c:	f2c0 0001 	movt	r0, #1
   10b30:	2210      	movs	r2, #16
   10b32:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10b36:	f006 fefd 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b3a:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
   10b3c:	f24f 70c8 	movw	r0, #63432	; 0xf7c8
   10b40:	f2c0 0001 	movt	r0, #1
   10b44:	2210      	movs	r2, #16
   10b46:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10b4a:	f006 fef3 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b4e:	defe      	udf	#254	; 0xfe
   10b50:	f24f 70d8 	movw	r0, #63448	; 0xf7d8
   10b54:	f2c0 0001 	movt	r0, #1
   10b58:	2210      	movs	r2, #16
   10b5a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10b5e:	f006 fee9 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b62:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   10b64:	f24f 70e8 	movw	r0, #63464	; 0xf7e8
   10b68:	f2c0 0001 	movt	r0, #1
   10b6c:	2210      	movs	r2, #16
   10b6e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10b72:	f006 fedf 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b76:	defe      	udf	#254	; 0xfe
                self.v[0xf] = self.v[x] & 1;
   10b78:	f64f 0038 	movw	r0, #63544	; 0xf838
   10b7c:	f2c0 0001 	movt	r0, #1
   10b80:	2210      	movs	r2, #16
   10b82:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10b86:	f006 fed5 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b8a:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shr(1);
   10b8c:	f64f 0048 	movw	r0, #63560	; 0xf848
   10b90:	f2c0 0001 	movt	r0, #1
   10b94:	2210      	movs	r2, #16
   10b96:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10b9a:	f006 fecb 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b9e:	defe      	udf	#254	; 0xfe
   10ba0:	f64f 0058 	movw	r0, #63576	; 0xf858
   10ba4:	f2c0 0001 	movt	r0, #1
   10ba8:	2210      	movs	r2, #16
   10baa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10bae:	f006 fec1 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10bb2:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
   10bb4:	f64f 00a8 	movw	r0, #63656	; 0xf8a8
   10bb8:	f2c0 0001 	movt	r0, #1
   10bbc:	2210      	movs	r2, #16
   10bbe:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10bc2:	f006 feb7 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10bc6:	defe      	udf	#254	; 0xfe
   10bc8:	f64f 00b8 	movw	r0, #63672	; 0xf8b8
   10bcc:	f2c0 0001 	movt	r0, #1
   10bd0:	2210      	movs	r2, #16
   10bd2:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10bd6:	f006 fead 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10bda:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   10bdc:	f64f 00c8 	movw	r0, #63688	; 0xf8c8
   10be0:	f2c0 0001 	movt	r0, #1
   10be4:	2210      	movs	r2, #16
   10be6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10bea:	f006 fea3 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10bee:	defe      	udf	#254	; 0xfe
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
   10bf0:	f64f 1018 	movw	r0, #63768	; 0xf918
   10bf4:	f2c0 0001 	movt	r0, #1
   10bf8:	2210      	movs	r2, #16
   10bfa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10bfe:	f006 fe99 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c02:	defe      	udf	#254	; 0xfe
   10c04:	f64f 1028 	movw	r0, #63784	; 0xf928
   10c08:	f2c0 0001 	movt	r0, #1
   10c0c:	2210      	movs	r2, #16
   10c0e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10c12:	f006 fe8f 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c16:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   10c18:	f64f 1038 	movw	r0, #63800	; 0xf938
   10c1c:	f2c0 0001 	movt	r0, #1
   10c20:	2210      	movs	r2, #16
   10c22:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c26:	f006 fe85 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c2a:	defe      	udf	#254	; 0xfe
                self.v[x] ^= self.v[y];
   10c2c:	f64f 1088 	movw	r0, #63880	; 0xf988
   10c30:	f2c0 0001 	movt	r0, #1
   10c34:	2210      	movs	r2, #16
   10c36:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10c3a:	f006 fe7b 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c3e:	defe      	udf	#254	; 0xfe
   10c40:	f64f 1098 	movw	r0, #63896	; 0xf998
   10c44:	f2c0 0001 	movt	r0, #1
   10c48:	2210      	movs	r2, #16
   10c4a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c4e:	f006 fe71 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c52:	defe      	udf	#254	; 0xfe
                self.v[x] &= self.v[y];
   10c54:	f64f 10e8 	movw	r0, #63976	; 0xf9e8
   10c58:	f2c0 0001 	movt	r0, #1
   10c5c:	2210      	movs	r2, #16
   10c5e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10c62:	f006 fe67 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c66:	defe      	udf	#254	; 0xfe
   10c68:	f64f 10f8 	movw	r0, #63992	; 0xf9f8
   10c6c:	f2c0 0001 	movt	r0, #1
   10c70:	2210      	movs	r2, #16
   10c72:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c76:	f006 fe5d 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c7a:	defe      	udf	#254	; 0xfe
                self.v[x] |= self.v[y];
   10c7c:	f64f 2048 	movw	r0, #64072	; 0xfa48
   10c80:	f2c0 0001 	movt	r0, #1
   10c84:	2210      	movs	r2, #16
   10c86:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10c8a:	f006 fe53 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c8e:	defe      	udf	#254	; 0xfe
   10c90:	f64f 2058 	movw	r0, #64088	; 0xfa58
   10c94:	f2c0 0001 	movt	r0, #1
   10c98:	2210      	movs	r2, #16
   10c9a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c9e:	f006 fe49 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10ca2:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[y];
   10ca4:	f64f 20a8 	movw	r0, #64168	; 0xfaa8
   10ca8:	f2c0 0001 	movt	r0, #1
   10cac:	2210      	movs	r2, #16
   10cae:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10cb2:	f006 fe3f 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10cb6:	defe      	udf	#254	; 0xfe
   10cb8:	f64f 20b8 	movw	r0, #64184	; 0xfab8
   10cbc:	f2c0 0001 	movt	r0, #1
   10cc0:	2210      	movs	r2, #16
   10cc2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10cc6:	f006 fe35 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10cca:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_add(kk);
   10ccc:	f64f 3008 	movw	r0, #64264	; 0xfb08
   10cd0:	f2c0 0001 	movt	r0, #1
   10cd4:	2210      	movs	r2, #16
   10cd6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10cda:	f006 fe2b 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10cde:	defe      	udf	#254	; 0xfe
   10ce0:	f64f 3018 	movw	r0, #64280	; 0xfb18
   10ce4:	f2c0 0001 	movt	r0, #1
   10ce8:	2210      	movs	r2, #16
   10cea:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10cee:	f006 fe21 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10cf2:	defe      	udf	#254	; 0xfe
                self.v[x] = kk;
   10cf4:	f64f 3068 	movw	r0, #64360	; 0xfb68
   10cf8:	f2c0 0001 	movt	r0, #1
   10cfc:	2210      	movs	r2, #16
   10cfe:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10d02:	f006 fe17 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d06:	defe      	udf	#254	; 0xfe
                if self.v[x] == self.v[y] {
   10d08:	f64f 4050 	movw	r0, #64592	; 0xfc50
   10d0c:	f2c0 0001 	movt	r0, #1
   10d10:	2210      	movs	r2, #16
   10d12:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10d16:	f006 fe0d 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d1a:	defe      	udf	#254	; 0xfe
   10d1c:	f64f 4060 	movw	r0, #64608	; 0xfc60
   10d20:	f2c0 0001 	movt	r0, #1
   10d24:	2210      	movs	r2, #16
   10d26:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10d2a:	f006 fe03 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d2e:	defe      	udf	#254	; 0xfe
                if self.v[x] != kk {
   10d30:	f64f 40b0 	movw	r0, #64688	; 0xfcb0
   10d34:	f2c0 0001 	movt	r0, #1
   10d38:	2210      	movs	r2, #16
   10d3a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10d3e:	f006 fdf9 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d42:	defe      	udf	#254	; 0xfe
                if self.v[x] == kk {
   10d44:	f64f 5000 	movw	r0, #64768	; 0xfd00
   10d48:	f2c0 0001 	movt	r0, #1
   10d4c:	2210      	movs	r2, #16
   10d4e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10d52:	f006 fdef 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d56:	defe      	udf	#254	; 0xfe

00010d58 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h8dd34ea84f1c7a05E>:
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
   10d58:	b580      	push	{r7, lr}
   10d5a:	b086      	sub	sp, #24
   10d5c:	9104      	str	r1, [sp, #16]
   10d5e:	9205      	str	r2, [sp, #20]
   10d60:	6809      	ldr	r1, [r1, #0]
   10d62:	6809      	ldr	r1, [r1, #0]
   10d64:	2300      	movs	r3, #0
   10d66:	9301      	str	r3, [sp, #4]
   10d68:	9102      	str	r1, [sp, #8]
   10d6a:	9203      	str	r2, [sp, #12]
   10d6c:	9901      	ldr	r1, [sp, #4]
   10d6e:	9a02      	ldr	r2, [sp, #8]
   10d70:	9b03      	ldr	r3, [sp, #12]
   10d72:	f000 fbba 	bl	114ea <_ZN4core4iter6traits8iterator8Iterator3map17h89e3c6c0231011ceE>
   10d76:	e7ff      	b.n	10d78 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h8dd34ea84f1c7a05E+0x20>
   10d78:	b006      	add	sp, #24
   10d7a:	bd80      	pop	{r7, pc}

00010d7c <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hd6b4984bbe637b42E>:
   10d7c:	b084      	sub	sp, #16
   10d7e:	9002      	str	r0, [sp, #8]
   10d80:	9103      	str	r1, [sp, #12]
   10d82:	6800      	ldr	r0, [r0, #0]
   10d84:	9000      	str	r0, [sp, #0]
   10d86:	9101      	str	r1, [sp, #4]
   10d88:	9800      	ldr	r0, [sp, #0]
   10d8a:	9901      	ldr	r1, [sp, #4]
   10d8c:	b004      	add	sp, #16
   10d8e:	4770      	bx	lr

00010d90 <_ZN8libchip814Chip8$LT$T$GT$4jump17h930b3c38e90d0056E>:
    fn jump(&mut self, pc: u16) {
   10d90:	b082      	sub	sp, #8
   10d92:	460a      	mov	r2, r1
   10d94:	9000      	str	r0, [sp, #0]
   10d96:	f8ad 1006 	strh.w	r1, [sp, #6]
        self.pc = pc;
   10d9a:	8241      	strh	r1, [r0, #18]
    }
   10d9c:	b002      	add	sp, #8
   10d9e:	4770      	bx	lr

00010da0 <_ZN8libchip814Chip8$LT$T$GT$4load17h2a4cfd313d02c69aE>:
    fn load(&mut self, rom: &[u8]) {
   10da0:	b580      	push	{r7, lr}
   10da2:	b08a      	sub	sp, #40	; 0x28
   10da4:	9105      	str	r1, [sp, #20]
   10da6:	9206      	str	r2, [sp, #24]
   10da8:	9009      	str	r0, [sp, #36]	; 0x24
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
   10daa:	3047      	adds	r0, #71	; 0x47
   10dac:	9905      	ldr	r1, [sp, #20]
   10dae:	9a06      	ldr	r2, [sp, #24]
   10db0:	9004      	str	r0, [sp, #16]
   10db2:	4608      	mov	r0, r1
   10db4:	4611      	mov	r1, r2
   10db6:	f001 f868 	bl	11e8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   10dba:	9003      	str	r0, [sp, #12]
   10dbc:	e7ff      	b.n	10dbe <_ZN8libchip814Chip8$LT$T$GT$4load17h2a4cfd313d02c69aE+0x1e>
   10dbe:	9803      	ldr	r0, [sp, #12]
   10dc0:	f500 7100 	add.w	r1, r0, #512	; 0x200
   10dc4:	460a      	mov	r2, r1
   10dc6:	4281      	cmp	r1, r0
   10dc8:	9202      	str	r2, [sp, #8]
   10dca:	d318      	bcc.n	10dfe <_ZN8libchip814Chip8$LT$T$GT$4load17h2a4cfd313d02c69aE+0x5e>
   10dcc:	e7ff      	b.n	10dce <_ZN8libchip814Chip8$LT$T$GT$4load17h2a4cfd313d02c69aE+0x2e>
   10dce:	f44f 7000 	mov.w	r0, #512	; 0x200
   10dd2:	9007      	str	r0, [sp, #28]
   10dd4:	9802      	ldr	r0, [sp, #8]
   10dd6:	9008      	str	r0, [sp, #32]
   10dd8:	9a07      	ldr	r2, [sp, #28]
   10dda:	9b08      	ldr	r3, [sp, #32]
   10ddc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   10de0:	9804      	ldr	r0, [sp, #16]
   10de2:	f005 ff2b 	bl	16c3c <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE>
   10de6:	9001      	str	r0, [sp, #4]
   10de8:	9100      	str	r1, [sp, #0]
   10dea:	e7ff      	b.n	10dec <_ZN8libchip814Chip8$LT$T$GT$4load17h2a4cfd313d02c69aE+0x4c>
   10dec:	9a05      	ldr	r2, [sp, #20]
   10dee:	9b06      	ldr	r3, [sp, #24]
   10df0:	9801      	ldr	r0, [sp, #4]
   10df2:	9900      	ldr	r1, [sp, #0]
   10df4:	f7f7 ffbb 	bl	8d6e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
   10df8:	e7ff      	b.n	10dfa <_ZN8libchip814Chip8$LT$T$GT$4load17h2a4cfd313d02c69aE+0x5a>
    }
   10dfa:	b00a      	add	sp, #40	; 0x28
   10dfc:	bd80      	pop	{r7, pc}
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
   10dfe:	f64e 70c0 	movw	r0, #61376	; 0xefc0
   10e02:	f2c0 0001 	movt	r0, #1
   10e06:	f64f 625c 	movw	r2, #65116	; 0xfe5c
   10e0a:	f2c0 0201 	movt	r2, #1
   10e0e:	211c      	movs	r1, #28
   10e10:	f006 fd7a 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10e14:	defe      	udf	#254	; 0xfe

00010e16 <_ZN8libchip814Chip8$LT$T$GT$4next17h59db21f4d7eca91dE>:
    fn next(&mut self) {
   10e16:	b580      	push	{r7, lr}
   10e18:	b084      	sub	sp, #16
   10e1a:	9003      	str	r0, [sp, #12]
        self.jump(self.pc.wrapping_add(2));
   10e1c:	8a41      	ldrh	r1, [r0, #18]
   10e1e:	2202      	movs	r2, #2
   10e20:	9002      	str	r0, [sp, #8]
   10e22:	4608      	mov	r0, r1
   10e24:	4611      	mov	r1, r2
   10e26:	f005 feb3 	bl	16b90 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
   10e2a:	9001      	str	r0, [sp, #4]
   10e2c:	e7ff      	b.n	10e2e <_ZN8libchip814Chip8$LT$T$GT$4next17h59db21f4d7eca91dE+0x18>
   10e2e:	9802      	ldr	r0, [sp, #8]
   10e30:	9901      	ldr	r1, [sp, #4]
   10e32:	f7ff ffad 	bl	10d90 <_ZN8libchip814Chip8$LT$T$GT$4jump17h930b3c38e90d0056E>
   10e36:	e7ff      	b.n	10e38 <_ZN8libchip814Chip8$LT$T$GT$4next17h59db21f4d7eca91dE+0x22>
    }
   10e38:	b004      	add	sp, #16
   10e3a:	bd80      	pop	{r7, pc}

00010e3c <_ZN8libchip814Chip8$LT$T$GT$4push17h7098654a82bc65c4E>:
    fn push(&mut self, item: u16) {
   10e3c:	b580      	push	{r7, lr}
   10e3e:	b086      	sub	sp, #24
   10e40:	460a      	mov	r2, r1
   10e42:	9004      	str	r0, [sp, #16]
   10e44:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.stack[self.sp as usize] = item;
   10e48:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
   10e4c:	460b      	mov	r3, r1
   10e4e:	290f      	cmp	r1, #15
   10e50:	9003      	str	r0, [sp, #12]
   10e52:	9202      	str	r2, [sp, #8]
   10e54:	9301      	str	r3, [sp, #4]
   10e56:	d813      	bhi.n	10e80 <_ZN8libchip814Chip8$LT$T$GT$4push17h7098654a82bc65c4E+0x44>
   10e58:	e7ff      	b.n	10e5a <_ZN8libchip814Chip8$LT$T$GT$4push17h7098654a82bc65c4E+0x1e>
   10e5a:	9803      	ldr	r0, [sp, #12]
   10e5c:	9901      	ldr	r1, [sp, #4]
   10e5e:	eb00 0241 	add.w	r2, r0, r1, lsl #1
   10e62:	9b02      	ldr	r3, [sp, #8]
   10e64:	8293      	strh	r3, [r2, #20]
        self.sp = self.sp.wrapping_add(1);
   10e66:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
   10e6a:	2101      	movs	r1, #1
   10e6c:	f005 fdf3 	bl	16a56 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>
   10e70:	9000      	str	r0, [sp, #0]
   10e72:	e7ff      	b.n	10e74 <_ZN8libchip814Chip8$LT$T$GT$4push17h7098654a82bc65c4E+0x38>
   10e74:	9800      	ldr	r0, [sp, #0]
   10e76:	9903      	ldr	r1, [sp, #12]
   10e78:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
    }
   10e7c:	b006      	add	sp, #24
   10e7e:	bd80      	pop	{r7, pc}
        self.stack[self.sp as usize] = item;
   10e80:	f64f 606c 	movw	r0, #65132	; 0xfe6c
   10e84:	f2c0 0001 	movt	r0, #1
   10e88:	2210      	movs	r2, #16
   10e8a:	9901      	ldr	r1, [sp, #4]
   10e8c:	f006 fd52 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10e90:	defe      	udf	#254	; 0xfe

00010e92 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE>:
    fn tick(&mut self) {
   10e92:	b580      	push	{r7, lr}
   10e94:	b084      	sub	sp, #16
   10e96:	9003      	str	r0, [sp, #12]
        if self.dt > 0 {
   10e98:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
   10e9c:	2900      	cmp	r1, #0
   10e9e:	9002      	str	r0, [sp, #8]
   10ea0:	d00f      	beq.n	10ec2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x30>
   10ea2:	e7ff      	b.n	10ea4 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x12>
            self.dt -= 1;
   10ea4:	9802      	ldr	r0, [sp, #8]
   10ea6:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
   10eaa:	3901      	subs	r1, #1
   10eac:	b2ca      	uxtb	r2, r1
   10eae:	460b      	mov	r3, r1
   10eb0:	428a      	cmp	r2, r1
   10eb2:	9301      	str	r3, [sp, #4]
   10eb4:	d129      	bne.n	10f0a <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x78>
   10eb6:	e7ff      	b.n	10eb8 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x26>
   10eb8:	9801      	ldr	r0, [sp, #4]
   10eba:	9902      	ldr	r1, [sp, #8]
   10ebc:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
        if self.dt > 0 {
   10ec0:	e7ff      	b.n	10ec2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x30>
        if self.st > 0 {
   10ec2:	9802      	ldr	r0, [sp, #8]
   10ec4:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
   10ec8:	2900      	cmp	r1, #0
   10eca:	d01c      	beq.n	10f06 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x74>
   10ecc:	e7ff      	b.n	10ece <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x3c>
            self.st -= 1;
   10ece:	9802      	ldr	r0, [sp, #8]
   10ed0:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
   10ed4:	3901      	subs	r1, #1
   10ed6:	b2ca      	uxtb	r2, r1
   10ed8:	460b      	mov	r3, r1
   10eda:	428a      	cmp	r2, r1
   10edc:	9300      	str	r3, [sp, #0]
   10ede:	d120      	bne.n	10f22 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x90>
   10ee0:	e7ff      	b.n	10ee2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x50>
   10ee2:	9800      	ldr	r0, [sp, #0]
   10ee4:	9902      	ldr	r1, [sp, #8]
   10ee6:	f881 0045 	strb.w	r0, [r1, #69]	; 0x45
            if self.st == 0 {
   10eea:	f891 2045 	ldrb.w	r2, [r1, #69]	; 0x45
   10eee:	2a00      	cmp	r2, #0
   10ef0:	d108      	bne.n	10f04 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x72>
   10ef2:	e7ff      	b.n	10ef4 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x62>
   10ef4:	f241 0048 	movw	r0, #4168	; 0x1048
                self.hw.beep();
   10ef8:	9902      	ldr	r1, [sp, #8]
   10efa:	4408      	add	r0, r1
   10efc:	f7fb fbd6 	bl	c6ac <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17hef68fad30077c365E>
   10f00:	e7ff      	b.n	10f02 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x70>
            if self.st == 0 {
   10f02:	e7ff      	b.n	10f04 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x72>
        if self.st > 0 {
   10f04:	e7ff      	b.n	10f06 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x74>
    }
   10f06:	b004      	add	sp, #16
   10f08:	bd80      	pop	{r7, pc}
            self.dt -= 1;
   10f0a:	f24f 5080 	movw	r0, #62848	; 0xf580
   10f0e:	f2c0 0001 	movt	r0, #1
   10f12:	f64f 627c 	movw	r2, #65148	; 0xfe7c
   10f16:	f2c0 0201 	movt	r2, #1
   10f1a:	2121      	movs	r1, #33	; 0x21
   10f1c:	f006 fcf4 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10f20:	defe      	udf	#254	; 0xfe
            self.st -= 1;
   10f22:	f24f 5080 	movw	r0, #62848	; 0xf580
   10f26:	f2c0 0001 	movt	r0, #1
   10f2a:	f64f 628c 	movw	r2, #65164	; 0xfe8c
   10f2e:	f2c0 0201 	movt	r2, #1
   10f32:	2121      	movs	r1, #33	; 0x21
   10f34:	f006 fce8 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10f38:	defe      	udf	#254	; 0xfe

00010f3a <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE>:
    fn sched(&mut self) {
   10f3a:	b510      	push	{r4, lr}
   10f3c:	b098      	sub	sp, #96	; 0x60
   10f3e:	9015      	str	r0, [sp, #84]	; 0x54
   10f40:	f241 0148 	movw	r1, #4168	; 0x1048
        if self.hw.sched() {
   10f44:	4401      	add	r1, r0
   10f46:	900b      	str	r0, [sp, #44]	; 0x2c
   10f48:	4608      	mov	r0, r1
   10f4a:	f7fb fbb3 	bl	c6b4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hff8b223513989598E>
   10f4e:	900a      	str	r0, [sp, #40]	; 0x28
   10f50:	e7ff      	b.n	10f52 <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x18>
   10f52:	980a      	ldr	r0, [sp, #40]	; 0x28
   10f54:	07c1      	lsls	r1, r0, #31
   10f56:	2900      	cmp	r1, #0
   10f58:	d005      	beq.n	10f66 <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x2c>
   10f5a:	e7ff      	b.n	10f5c <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x22>
            self.shutdown();
   10f5c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10f5e:	f000 f90e 	bl	1117e <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h09e18e9d3e93ad4fE>
   10f62:	e7ff      	b.n	10f64 <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x2a>
        if self.hw.sched() {
   10f64:	e7ff      	b.n	10f66 <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x2c>
        if let Some(t) = self.time {
   10f66:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10f68:	6801      	ldr	r1, [r0, #0]
   10f6a:	2901      	cmp	r1, #1
   10f6c:	d009      	beq.n	10f82 <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x48>
   10f6e:	e7ff      	b.n	10f70 <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x36>
   10f70:	f241 0048 	movw	r0, #4168	; 0x1048
            self.time = Some(self.hw.clock());
   10f74:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10f76:	4408      	add	r0, r1
   10f78:	f7fb fb36 	bl	c5e8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h656498c5392083edE>
   10f7c:	9109      	str	r1, [sp, #36]	; 0x24
   10f7e:	9008      	str	r0, [sp, #32]
   10f80:	e046      	b.n	11010 <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0xd6>
        if let Some(t) = self.time {
   10f82:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10f84:	6881      	ldr	r1, [r0, #8]
   10f86:	68c2      	ldr	r2, [r0, #12]
   10f88:	9217      	str	r2, [sp, #92]	; 0x5c
   10f8a:	9116      	str	r1, [sp, #88]	; 0x58
   10f8c:	f241 0348 	movw	r3, #4168	; 0x1048
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
   10f90:	4418      	add	r0, r3
   10f92:	9107      	str	r1, [sp, #28]
   10f94:	9206      	str	r2, [sp, #24]
   10f96:	f7fb fb27 	bl	c5e8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h656498c5392083edE>
   10f9a:	9105      	str	r1, [sp, #20]
   10f9c:	9004      	str	r0, [sp, #16]
   10f9e:	e7ff      	b.n	10fa0 <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x66>
   10fa0:	9804      	ldr	r0, [sp, #16]
   10fa2:	9905      	ldr	r1, [sp, #20]
   10fa4:	9a07      	ldr	r2, [sp, #28]
   10fa6:	9b06      	ldr	r3, [sp, #24]
   10fa8:	f005 fe14 	bl	16bd4 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE>
   10fac:	9103      	str	r1, [sp, #12]
   10fae:	9002      	str	r0, [sp, #8]
   10fb0:	e7ff      	b.n	10fb2 <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x78>
   10fb2:	f245 002b 	movw	r0, #20523	; 0x502b
   10fb6:	f2c0 00fe 	movt	r0, #254	; 0xfe
   10fba:	9902      	ldr	r1, [sp, #8]
   10fbc:	1a08      	subs	r0, r1, r0
   10fbe:	9a03      	ldr	r2, [sp, #12]
   10fc0:	f172 0300 	sbcs.w	r3, r2, #0
   10fc4:	d323      	bcc.n	1100e <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0xd4>
   10fc6:	e7ff      	b.n	10fc8 <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x8e>
                self.tick();
   10fc8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10fca:	f7ff ff62 	bl	10e92 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE>
   10fce:	e7ff      	b.n	10fd0 <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x96>
   10fd0:	f241 0048 	movw	r0, #4168	; 0x1048
                self.time = Some(self.hw.clock());
   10fd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10fd6:	4408      	add	r0, r1
   10fd8:	f7fb fb06 	bl	c5e8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h656498c5392083edE>
   10fdc:	9101      	str	r1, [sp, #4]
   10fde:	9000      	str	r0, [sp, #0]
   10fe0:	e7ff      	b.n	10fe2 <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0xa8>
   10fe2:	9800      	ldr	r0, [sp, #0]
   10fe4:	900e      	str	r0, [sp, #56]	; 0x38
   10fe6:	9901      	ldr	r1, [sp, #4]
   10fe8:	910f      	str	r1, [sp, #60]	; 0x3c
   10fea:	2200      	movs	r2, #0
   10fec:	920d      	str	r2, [sp, #52]	; 0x34
   10fee:	2201      	movs	r2, #1
   10ff0:	920c      	str	r2, [sp, #48]	; 0x30
   10ff2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10ff4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10ff6:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   10ffa:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   10ffe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   11000:	6063      	str	r3, [r4, #4]
   11002:	6022      	str	r2, [r4, #0]
   11004:	f8c4 e00c 	str.w	lr, [r4, #12]
   11008:	f8c4 c008 	str.w	ip, [r4, #8]
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
   1100c:	e7ff      	b.n	1100e <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0xd4>
        if let Some(t) = self.time {
   1100e:	e015      	b.n	1103c <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x102>
            self.time = Some(self.hw.clock());
   11010:	9808      	ldr	r0, [sp, #32]
   11012:	9012      	str	r0, [sp, #72]	; 0x48
   11014:	9909      	ldr	r1, [sp, #36]	; 0x24
   11016:	9113      	str	r1, [sp, #76]	; 0x4c
   11018:	2200      	movs	r2, #0
   1101a:	9211      	str	r2, [sp, #68]	; 0x44
   1101c:	2201      	movs	r2, #1
   1101e:	9210      	str	r2, [sp, #64]	; 0x40
   11020:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11022:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11024:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   11028:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
   1102c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1102e:	6063      	str	r3, [r4, #4]
   11030:	6022      	str	r2, [r4, #0]
   11032:	f8c4 e00c 	str.w	lr, [r4, #12]
   11036:	f8c4 c008 	str.w	ip, [r4, #8]
        if let Some(t) = self.time {
   1103a:	e7ff      	b.n	1103c <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x102>
    }
   1103c:	b018      	add	sp, #96	; 0x60
   1103e:	bd10      	pop	{r4, pc}

00011040 <_ZN8libchip814Chip8$LT$T$GT$5setup17h6dafcb9be3b52c51E>:
    fn setup(&mut self) {
   11040:	b580      	push	{r7, lr}
   11042:	b088      	sub	sp, #32
   11044:	9007      	str	r0, [sp, #28]
   11046:	f44f 7100 	mov.w	r1, #512	; 0x200
        self.pc = ENTRY;
   1104a:	8241      	strh	r1, [r0, #18]
   1104c:	f241 0148 	movw	r1, #4168	; 0x1048
        self.hw.vram_setsize(DISPS);
   11050:	4401      	add	r1, r0
   11052:	f24f 0254 	movw	r2, #61524	; 0xf054
   11056:	f2c0 0201 	movt	r2, #1
   1105a:	6813      	ldr	r3, [r2, #0]
   1105c:	6852      	ldr	r2, [r2, #4]
   1105e:	9005      	str	r0, [sp, #20]
   11060:	4608      	mov	r0, r1
   11062:	4619      	mov	r1, r3
   11064:	f7fb fa89 	bl	c57a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h96b89968e4265d2cE>
   11068:	e7ff      	b.n	1106a <_ZN8libchip814Chip8$LT$T$GT$5setup17h6dafcb9be3b52c51E+0x2a>
        self.mem[..CHARBUF.len()].copy_from_slice(&CHARBUF);
   1106a:	9805      	ldr	r0, [sp, #20]
   1106c:	f100 0147 	add.w	r1, r0, #71	; 0x47
   11070:	f64f 702c 	movw	r0, #65324	; 0xff2c
   11074:	f2c0 0001 	movt	r0, #1
   11078:	2250      	movs	r2, #80	; 0x50
   1107a:	9104      	str	r1, [sp, #16]
   1107c:	4611      	mov	r1, r2
   1107e:	f000 ff04 	bl	11e8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   11082:	9003      	str	r0, [sp, #12]
   11084:	e7ff      	b.n	11086 <_ZN8libchip814Chip8$LT$T$GT$5setup17h6dafcb9be3b52c51E+0x46>
   11086:	9803      	ldr	r0, [sp, #12]
   11088:	9006      	str	r0, [sp, #24]
   1108a:	9a06      	ldr	r2, [sp, #24]
   1108c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   11090:	9804      	ldr	r0, [sp, #16]
   11092:	f7f7 ff69 	bl	8f68 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>
   11096:	9002      	str	r0, [sp, #8]
   11098:	9101      	str	r1, [sp, #4]
   1109a:	e7ff      	b.n	1109c <_ZN8libchip814Chip8$LT$T$GT$5setup17h6dafcb9be3b52c51E+0x5c>
   1109c:	f64f 722c 	movw	r2, #65324	; 0xff2c
   110a0:	f2c0 0201 	movt	r2, #1
   110a4:	2350      	movs	r3, #80	; 0x50
   110a6:	9802      	ldr	r0, [sp, #8]
   110a8:	9901      	ldr	r1, [sp, #4]
   110aa:	f7f7 fe60 	bl	8d6e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
   110ae:	e7ff      	b.n	110b0 <_ZN8libchip814Chip8$LT$T$GT$5setup17h6dafcb9be3b52c51E+0x70>
   110b0:	f241 0047 	movw	r0, #4167	; 0x1047
   110b4:	2101      	movs	r1, #1
        self.running = true;
   110b6:	9a05      	ldr	r2, [sp, #20]
   110b8:	5411      	strb	r1, [r2, r0]
    }
   110ba:	b008      	add	sp, #32
   110bc:	bd80      	pop	{r7, pc}

000110be <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E>:
    fn waitkey(&mut self) -> u8 {
   110be:	b580      	push	{r7, lr}
   110c0:	b08c      	sub	sp, #48	; 0x30
   110c2:	900a      	str	r0, [sp, #40]	; 0x28
        while self.running {
   110c4:	9005      	str	r0, [sp, #20]
   110c6:	e7ff      	b.n	110c8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0xa>
   110c8:	f241 0047 	movw	r0, #4167	; 0x1047
   110cc:	9905      	ldr	r1, [sp, #20]
   110ce:	5c08      	ldrb	r0, [r1, r0]
   110d0:	07c0      	lsls	r0, r0, #31
   110d2:	2800      	cmp	r0, #0
   110d4:	d104      	bne.n	110e0 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0x22>
   110d6:	e7ff      	b.n	110d8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0x1a>
   110d8:	2020      	movs	r0, #32
        return b' ';
   110da:	f88d 001b 	strb.w	r0, [sp, #27]
   110de:	e04a      	b.n	11176 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0xb8>
            self.sched();
   110e0:	9805      	ldr	r0, [sp, #20]
   110e2:	f7ff ff2a 	bl	10f3a <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE>
   110e6:	e7ff      	b.n	110e8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0x2a>
   110e8:	2000      	movs	r0, #0
            for i in 0..0xf {
   110ea:	f88d 001c 	strb.w	r0, [sp, #28]
   110ee:	200f      	movs	r0, #15
   110f0:	f88d 001d 	strb.w	r0, [sp, #29]
   110f4:	f89d 001c 	ldrb.w	r0, [sp, #28]
   110f8:	f89d 101d 	ldrb.w	r1, [sp, #29]
   110fc:	f000 fa09 	bl	11512 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE>
   11100:	9004      	str	r0, [sp, #16]
   11102:	9103      	str	r1, [sp, #12]
   11104:	e7ff      	b.n	11106 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0x48>
   11106:	9804      	ldr	r0, [sp, #16]
   11108:	f88d 0020 	strb.w	r0, [sp, #32]
   1110c:	9903      	ldr	r1, [sp, #12]
   1110e:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
   11112:	e7ff      	b.n	11114 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0x56>
   11114:	a808      	add	r0, sp, #32
   11116:	f000 f98b 	bl	11430 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E>
   1111a:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
   1111e:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   11122:	e7ff      	b.n	11124 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0x66>
   11124:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   11128:	07c1      	lsls	r1, r0, #31
   1112a:	2900      	cmp	r1, #0
   1112c:	d001      	beq.n	11132 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0x74>
   1112e:	e7ff      	b.n	11130 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0x72>
   11130:	e001      	b.n	11136 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0x78>
        while self.running {
   11132:	e7c9      	b.n	110c8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0xa>
            for i in 0..0xf {
   11134:	defe      	udf	#254	; 0xfe
   11136:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
   1113a:	4601      	mov	r1, r0
   1113c:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   11140:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
   11144:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   11148:	f241 0248 	movw	r2, #4168	; 0x1048
                if self.hw.key(i) {
   1114c:	9b05      	ldr	r3, [sp, #20]
   1114e:	441a      	add	r2, r3
   11150:	9002      	str	r0, [sp, #8]
   11152:	4610      	mov	r0, r2
   11154:	9a02      	ldr	r2, [sp, #8]
   11156:	9101      	str	r1, [sp, #4]
   11158:	4611      	mov	r1, r2
   1115a:	f7fb f8ae 	bl	c2ba <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h36d051b466cea4e4E>
   1115e:	9000      	str	r0, [sp, #0]
   11160:	e7ff      	b.n	11162 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0xa4>
   11162:	9800      	ldr	r0, [sp, #0]
   11164:	07c1      	lsls	r1, r0, #31
   11166:	2900      	cmp	r1, #0
   11168:	d101      	bne.n	1116e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0xb0>
   1116a:	e7ff      	b.n	1116c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0xae>
            for i in 0..0xf {
   1116c:	e7d2      	b.n	11114 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0x56>
                    return i;
   1116e:	9801      	ldr	r0, [sp, #4]
   11170:	f88d 001b 	strb.w	r0, [sp, #27]
   11174:	e7ff      	b.n	11176 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0xb8>
    }
   11176:	f89d 001b 	ldrb.w	r0, [sp, #27]
   1117a:	b00c      	add	sp, #48	; 0x30
   1117c:	bd80      	pop	{r7, pc}

0001117e <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h09e18e9d3e93ad4fE>:
    fn shutdown(&mut self) {
   1117e:	b081      	sub	sp, #4
   11180:	9000      	str	r0, [sp, #0]
   11182:	f241 0147 	movw	r1, #4167	; 0x1047
   11186:	2200      	movs	r2, #0
        self.running = false;
   11188:	5442      	strb	r2, [r0, r1]
    }
   1118a:	b001      	add	sp, #4
   1118c:	4770      	bx	lr

0001118e <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h8b365b2b37e7ae5bE>:
   1118e:	b580      	push	{r7, lr}
   11190:	b082      	sub	sp, #8
   11192:	9101      	str	r1, [sp, #4]
   11194:	f000 f803 	bl	1119e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E>
   11198:	e7ff      	b.n	1119a <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h8b365b2b37e7ae5bE+0xc>
   1119a:	b002      	add	sp, #8
   1119c:	bd80      	pop	{r7, pc}

0001119e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E>:
   1119e:	b580      	push	{r7, lr}
   111a0:	b0a0      	sub	sp, #128	; 0x80
   111a2:	911c      	str	r1, [sp, #112]	; 0x70
   111a4:	9103      	str	r1, [sp, #12]
   111a6:	9002      	str	r0, [sp, #8]
   111a8:	e7ff      	b.n	111aa <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xc>
   111aa:	9803      	ldr	r0, [sp, #12]
   111ac:	68c1      	ldr	r1, [r0, #12]
   111ae:	2901      	cmp	r1, #1
   111b0:	d11e      	bne.n	111f0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x52>
   111b2:	e7ff      	b.n	111b4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x16>
   111b4:	9803      	ldr	r0, [sp, #12]
   111b6:	f100 0110 	add.w	r1, r0, #16
   111ba:	911e      	str	r1, [sp, #120]	; 0x78
   111bc:	a804      	add	r0, sp, #16
   111be:	f000 f90b 	bl	113d8 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h84f26bbc979819d7E>
   111c2:	e7ff      	b.n	111c4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x26>
   111c4:	9804      	ldr	r0, [sp, #16]
   111c6:	2801      	cmp	r0, #1
   111c8:	d001      	beq.n	111ce <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x30>
   111ca:	e7ff      	b.n	111cc <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x2e>
   111cc:	e00f      	b.n	111ee <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x50>
   111ce:	9804      	ldr	r0, [sp, #16]
   111d0:	9905      	ldr	r1, [sp, #20]
   111d2:	9a06      	ldr	r2, [sp, #24]
   111d4:	9209      	str	r2, [sp, #36]	; 0x24
   111d6:	9108      	str	r1, [sp, #32]
   111d8:	9007      	str	r0, [sp, #28]
   111da:	9807      	ldr	r0, [sp, #28]
   111dc:	9908      	ldr	r1, [sp, #32]
   111de:	9a09      	ldr	r2, [sp, #36]	; 0x24
   111e0:	9b02      	ldr	r3, [sp, #8]
   111e2:	609a      	str	r2, [r3, #8]
   111e4:	6059      	str	r1, [r3, #4]
   111e6:	6018      	str	r0, [r3, #0]
   111e8:	e7ff      	b.n	111ea <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x4c>
   111ea:	b020      	add	sp, #128	; 0x80
   111ec:	bd80      	pop	{r7, pc}
   111ee:	e7ff      	b.n	111f0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x52>
   111f0:	a80a      	add	r0, sp, #40	; 0x28
   111f2:	9903      	ldr	r1, [sp, #12]
   111f4:	f000 f906 	bl	11404 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha72d6fa0f65ae98fE>
   111f8:	e7ff      	b.n	111fa <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x5c>
   111fa:	980a      	ldr	r0, [sp, #40]	; 0x28
   111fc:	2800      	cmp	r0, #0
   111fe:	d012      	beq.n	11226 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x88>
   11200:	e7ff      	b.n	11202 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x64>
   11202:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11204:	990c      	ldr	r1, [sp, #48]	; 0x30
   11206:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11208:	9211      	str	r2, [sp, #68]	; 0x44
   1120a:	9110      	str	r1, [sp, #64]	; 0x40
   1120c:	900f      	str	r0, [sp, #60]	; 0x3c
   1120e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11210:	9910      	ldr	r1, [sp, #64]	; 0x40
   11212:	9a11      	ldr	r2, [sp, #68]	; 0x44
   11214:	921b      	str	r2, [sp, #108]	; 0x6c
   11216:	911a      	str	r1, [sp, #104]	; 0x68
   11218:	9019      	str	r0, [sp, #100]	; 0x64
   1121a:	a816      	add	r0, sp, #88	; 0x58
   1121c:	a919      	add	r1, sp, #100	; 0x64
   1121e:	f000 f8d4 	bl	113ca <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha7bddc00a7b74e11E>
   11222:	e028      	b.n	11276 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xd8>
   11224:	defe      	udf	#254	; 0xfe
   11226:	9803      	ldr	r0, [sp, #12]
   11228:	301c      	adds	r0, #28
   1122a:	f7fb fd6d 	bl	cd08 <_ZN4core6option15Option$LT$T$GT$6as_mut17h8929fdf00293b903E>
   1122e:	9001      	str	r0, [sp, #4]
   11230:	e7ff      	b.n	11232 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x94>
   11232:	9801      	ldr	r0, [sp, #4]
   11234:	f7fb fda2 	bl	cd7c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5e3b0b54b76961bcE>
   11238:	900e      	str	r0, [sp, #56]	; 0x38
   1123a:	e7ff      	b.n	1123c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x9e>
   1123c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1123e:	fab0 f180 	clz	r1, r0
   11242:	0949      	lsrs	r1, r1, #5
   11244:	2800      	cmp	r0, #0
   11246:	d101      	bne.n	1124c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xae>
   11248:	e7ff      	b.n	1124a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xac>
   1124a:	e009      	b.n	11260 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xc2>
   1124c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1124e:	901f      	str	r0, [sp, #124]	; 0x7c
   11250:	9902      	ldr	r1, [sp, #8]
   11252:	9000      	str	r0, [sp, #0]
   11254:	4608      	mov	r0, r1
   11256:	9900      	ldr	r1, [sp, #0]
   11258:	f000 f8be 	bl	113d8 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h84f26bbc979819d7E>
   1125c:	e00a      	b.n	11274 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xd6>
   1125e:	defe      	udf	#254	; 0xfe
   11260:	f003 f99c 	bl	1459c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>
   11264:	e7ff      	b.n	11266 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xc8>
   11266:	9802      	ldr	r0, [sp, #8]
   11268:	f7fb fd83 	bl	cd72 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E>
   1126c:	e7ff      	b.n	1126e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xd0>
   1126e:	e7ff      	b.n	11270 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xd2>
   11270:	e7ff      	b.n	11272 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xd4>
   11272:	e7ba      	b.n	111ea <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x4c>
   11274:	e7fc      	b.n	11270 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xd2>
   11276:	9816      	ldr	r0, [sp, #88]	; 0x58
   11278:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1127a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1127c:	9215      	str	r2, [sp, #84]	; 0x54
   1127e:	9114      	str	r1, [sp, #80]	; 0x50
   11280:	9013      	str	r0, [sp, #76]	; 0x4c
   11282:	2001      	movs	r0, #1
   11284:	9012      	str	r0, [sp, #72]	; 0x48
   11286:	e7ff      	b.n	11288 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xea>
   11288:	9812      	ldr	r0, [sp, #72]	; 0x48
   1128a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1128c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1128e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11290:	f8dd c00c 	ldr.w	ip, [sp, #12]
   11294:	f8cc 3018 	str.w	r3, [ip, #24]
   11298:	f8cc 2014 	str.w	r2, [ip, #20]
   1129c:	f8cc 1010 	str.w	r1, [ip, #16]
   112a0:	f8cc 000c 	str.w	r0, [ip, #12]
   112a4:	980a      	ldr	r0, [sp, #40]	; 0x28
   112a6:	2801      	cmp	r0, #1
   112a8:	d101      	bne.n	112ae <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x110>
   112aa:	e7ff      	b.n	112ac <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x10e>
   112ac:	e77d      	b.n	111aa <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xc>
   112ae:	e7fd      	b.n	112ac <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x10e>

000112b0 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h2c4566debb9a5deaE>:
   112b0:	b5b0      	push	{r4, r5, r7, lr}
   112b2:	b090      	sub	sp, #64	; 0x40
   112b4:	680a      	ldr	r2, [r1, #0]
   112b6:	684b      	ldr	r3, [r1, #4]
   112b8:	6889      	ldr	r1, [r1, #8]
   112ba:	910f      	str	r1, [sp, #60]	; 0x3c
   112bc:	930e      	str	r3, [sp, #56]	; 0x38
   112be:	920d      	str	r2, [sp, #52]	; 0x34
   112c0:	a902      	add	r1, sp, #8
   112c2:	aa0d      	add	r2, sp, #52	; 0x34
   112c4:	9001      	str	r0, [sp, #4]
   112c6:	4608      	mov	r0, r1
   112c8:	4611      	mov	r1, r2
   112ca:	f000 f80d 	bl	112e8 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h3e3a45a546031266E>
   112ce:	e7ff      	b.n	112d0 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h2c4566debb9a5deaE+0x20>
   112d0:	a802      	add	r0, sp, #8
   112d2:	9901      	ldr	r1, [sp, #4]
   112d4:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
   112d8:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
   112dc:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
   112e0:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
   112e4:	b010      	add	sp, #64	; 0x40
   112e6:	bdb0      	pop	{r4, r5, r7, pc}

000112e8 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h3e3a45a546031266E>:
   112e8:	b08b      	sub	sp, #44	; 0x2c
   112ea:	680a      	ldr	r2, [r1, #0]
   112ec:	684b      	ldr	r3, [r1, #4]
   112ee:	6889      	ldr	r1, [r1, #8]
   112f0:	9102      	str	r1, [sp, #8]
   112f2:	9301      	str	r3, [sp, #4]
   112f4:	9200      	str	r2, [sp, #0]
   112f6:	2100      	movs	r1, #0
   112f8:	9103      	str	r1, [sp, #12]
   112fa:	9107      	str	r1, [sp, #28]
   112fc:	9900      	ldr	r1, [sp, #0]
   112fe:	9a01      	ldr	r2, [sp, #4]
   11300:	9b02      	ldr	r3, [sp, #8]
   11302:	6083      	str	r3, [r0, #8]
   11304:	6042      	str	r2, [r0, #4]
   11306:	6001      	str	r1, [r0, #0]
   11308:	9903      	ldr	r1, [sp, #12]
   1130a:	9a04      	ldr	r2, [sp, #16]
   1130c:	9b05      	ldr	r3, [sp, #20]
   1130e:	f8dd c018 	ldr.w	ip, [sp, #24]
   11312:	f8c0 c018 	str.w	ip, [r0, #24]
   11316:	6143      	str	r3, [r0, #20]
   11318:	6102      	str	r2, [r0, #16]
   1131a:	60c1      	str	r1, [r0, #12]
   1131c:	9907      	ldr	r1, [sp, #28]
   1131e:	9a08      	ldr	r2, [sp, #32]
   11320:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11322:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   11326:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
   1132a:	6243      	str	r3, [r0, #36]	; 0x24
   1132c:	6202      	str	r2, [r0, #32]
   1132e:	61c1      	str	r1, [r0, #28]
   11330:	b00b      	add	sp, #44	; 0x2c
   11332:	4770      	bx	lr

00011334 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h3b61728407886f85E>:
   11334:	b5b0      	push	{r4, r5, r7, lr}
   11336:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
   1133a:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
   1133e:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   11342:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   11346:	bdb0      	pop	{r4, r5, r7, pc}

00011348 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>:
   11348:	b580      	push	{r7, lr}
   1134a:	b084      	sub	sp, #16
   1134c:	4601      	mov	r1, r0
   1134e:	f88d 000f 	strb.w	r0, [sp, #15]
   11352:	9102      	str	r1, [sp, #8]
   11354:	f005 fc62 	bl	16c1c <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E>
   11358:	9001      	str	r0, [sp, #4]
   1135a:	e7ff      	b.n	1135c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E+0x14>
   1135c:	9801      	ldr	r0, [sp, #4]
   1135e:	b004      	add	sp, #16
   11360:	bd80      	pop	{r7, pc}

00011362 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>:
   11362:	b580      	push	{r7, lr}
   11364:	b086      	sub	sp, #24
   11366:	460a      	mov	r2, r1
   11368:	9004      	str	r0, [sp, #16]
   1136a:	f88d 1017 	strb.w	r1, [sp, #23]
   1136e:	9203      	str	r2, [sp, #12]
   11370:	f000 fe0f 	bl	11f92 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   11374:	9002      	str	r0, [sp, #8]
   11376:	e7ff      	b.n	11378 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E+0x16>
   11378:	9802      	ldr	r0, [sp, #8]
   1137a:	9903      	ldr	r1, [sp, #12]
   1137c:	f000 fe22 	bl	11fc4 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   11380:	9001      	str	r0, [sp, #4]
   11382:	e7ff      	b.n	11384 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E+0x22>
   11384:	9801      	ldr	r0, [sp, #4]
   11386:	b006      	add	sp, #24
   11388:	bd80      	pop	{r7, pc}

0001138a <_ZN4core4iter6traits8iterator8Iterator7flatten17hdd08c3a3cf16397aE>:
   1138a:	b580      	push	{r7, lr}
   1138c:	b084      	sub	sp, #16
   1138e:	680a      	ldr	r2, [r1, #0]
   11390:	684b      	ldr	r3, [r1, #4]
   11392:	6889      	ldr	r1, [r1, #8]
   11394:	9103      	str	r1, [sp, #12]
   11396:	9302      	str	r3, [sp, #8]
   11398:	9201      	str	r2, [sp, #4]
   1139a:	a901      	add	r1, sp, #4
   1139c:	f7ff ff88 	bl	112b0 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h2c4566debb9a5deaE>
   113a0:	e7ff      	b.n	113a2 <_ZN4core4iter6traits8iterator8Iterator7flatten17hdd08c3a3cf16397aE+0x18>
   113a2:	b004      	add	sp, #16
   113a4:	bd80      	pop	{r7, pc}

000113a6 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h1794408f6a80b915E>:
   113a6:	b083      	sub	sp, #12
   113a8:	9100      	str	r1, [sp, #0]
   113aa:	9201      	str	r2, [sp, #4]
   113ac:	9302      	str	r3, [sp, #8]
   113ae:	6001      	str	r1, [r0, #0]
   113b0:	6042      	str	r2, [r0, #4]
   113b2:	6083      	str	r3, [r0, #8]
   113b4:	b003      	add	sp, #12
   113b6:	4770      	bx	lr

000113b8 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h6a385a1eb638dc34E>:
   113b8:	b083      	sub	sp, #12
   113ba:	9100      	str	r1, [sp, #0]
   113bc:	9201      	str	r2, [sp, #4]
   113be:	9302      	str	r3, [sp, #8]
   113c0:	6001      	str	r1, [r0, #0]
   113c2:	6042      	str	r2, [r0, #4]
   113c4:	6083      	str	r3, [r0, #8]
   113c6:	b003      	add	sp, #12
   113c8:	4770      	bx	lr

000113ca <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha7bddc00a7b74e11E>:
   113ca:	680a      	ldr	r2, [r1, #0]
   113cc:	684b      	ldr	r3, [r1, #4]
   113ce:	6889      	ldr	r1, [r1, #8]
   113d0:	6081      	str	r1, [r0, #8]
   113d2:	6043      	str	r3, [r0, #4]
   113d4:	6002      	str	r2, [r0, #0]
   113d6:	4770      	bx	lr

000113d8 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h84f26bbc979819d7E>:
   113d8:	b580      	push	{r7, lr}
   113da:	b086      	sub	sp, #24
   113dc:	9105      	str	r1, [sp, #20]
   113de:	9004      	str	r0, [sp, #16]
   113e0:	4608      	mov	r0, r1
   113e2:	9103      	str	r1, [sp, #12]
   113e4:	f000 fced 	bl	11dc2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   113e8:	9002      	str	r0, [sp, #8]
   113ea:	9101      	str	r1, [sp, #4]
   113ec:	e7ff      	b.n	113ee <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h84f26bbc979819d7E+0x16>
   113ee:	9803      	ldr	r0, [sp, #12]
   113f0:	f100 0308 	add.w	r3, r0, #8
   113f4:	9804      	ldr	r0, [sp, #16]
   113f6:	9902      	ldr	r1, [sp, #8]
   113f8:	9a01      	ldr	r2, [sp, #4]
   113fa:	f7fb fbac 	bl	cb56 <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E>
   113fe:	e7ff      	b.n	11400 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h84f26bbc979819d7E+0x28>
   11400:	b006      	add	sp, #24
   11402:	bd80      	pop	{r7, pc}

00011404 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha72d6fa0f65ae98fE>:
   11404:	b580      	push	{r7, lr}
   11406:	b086      	sub	sp, #24
   11408:	9105      	str	r1, [sp, #20]
   1140a:	9004      	str	r0, [sp, #16]
   1140c:	4608      	mov	r0, r1
   1140e:	9103      	str	r1, [sp, #12]
   11410:	f000 fcd7 	bl	11dc2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   11414:	9002      	str	r0, [sp, #8]
   11416:	9101      	str	r1, [sp, #4]
   11418:	e7ff      	b.n	1141a <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha72d6fa0f65ae98fE+0x16>
   1141a:	9803      	ldr	r0, [sp, #12]
   1141c:	f100 0308 	add.w	r3, r0, #8
   11420:	9804      	ldr	r0, [sp, #16]
   11422:	9902      	ldr	r1, [sp, #8]
   11424:	9a01      	ldr	r2, [sp, #4]
   11426:	f7fb fbe3 	bl	cbf0 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE>
   1142a:	e7ff      	b.n	1142c <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha72d6fa0f65ae98fE+0x28>
   1142c:	b006      	add	sp, #24
   1142e:	bd80      	pop	{r7, pc}

00011430 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E>:
   11430:	b580      	push	{r7, lr}
   11432:	b086      	sub	sp, #24
   11434:	9005      	str	r0, [sp, #20]
   11436:	2100      	movs	r1, #0
   11438:	f88d 1013 	strb.w	r1, [sp, #19]
   1143c:	1c41      	adds	r1, r0, #1
   1143e:	9002      	str	r0, [sp, #8]
   11440:	f005 fc11 	bl	16c66 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE>
   11444:	9001      	str	r0, [sp, #4]
   11446:	e7ff      	b.n	11448 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x18>
   11448:	9801      	ldr	r0, [sp, #4]
   1144a:	07c1      	lsls	r1, r0, #31
   1144c:	2900      	cmp	r1, #0
   1144e:	d104      	bne.n	1145a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x2a>
   11450:	e7ff      	b.n	11452 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x22>
   11452:	2000      	movs	r0, #0
   11454:	f88d 000c 	strb.w	r0, [sp, #12]
   11458:	e02c      	b.n	114b4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x84>
   1145a:	2001      	movs	r0, #1
   1145c:	f88d 0013 	strb.w	r0, [sp, #19]
   11460:	9902      	ldr	r1, [sp, #8]
   11462:	9000      	str	r0, [sp, #0]
   11464:	4608      	mov	r0, r1
   11466:	9900      	ldr	r1, [sp, #0]
   11468:	f005 fc09 	bl	16c7e <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE>
   1146c:	f88d 1011 	strb.w	r1, [sp, #17]
   11470:	f88d 0010 	strb.w	r0, [sp, #16]
   11474:	e7ff      	b.n	11476 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x46>
   11476:	f89d 0010 	ldrb.w	r0, [sp, #16]
   1147a:	07c0      	lsls	r0, r0, #31
   1147c:	2800      	cmp	r0, #0
   1147e:	d104      	bne.n	1148a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x5a>
   11480:	e7ff      	b.n	11482 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x52>
   11482:	2000      	movs	r0, #0
   11484:	f88d 000c 	strb.w	r0, [sp, #12]
   11488:	e029      	b.n	114de <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xae>
   1148a:	2000      	movs	r0, #0
   1148c:	f88d 0013 	strb.w	r0, [sp, #19]
   11490:	f89d 0011 	ldrb.w	r0, [sp, #17]
   11494:	f88d 0012 	strb.w	r0, [sp, #18]
   11498:	f10d 0012 	add.w	r0, sp, #18
   1149c:	9902      	ldr	r1, [sp, #8]
   1149e:	f005 fbc4 	bl	16c2a <_ZN4core3mem4swap17h206518364108b51fE>
   114a2:	e7ff      	b.n	114a4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x74>
   114a4:	f89d 0012 	ldrb.w	r0, [sp, #18]
   114a8:	f88d 000d 	strb.w	r0, [sp, #13]
   114ac:	2001      	movs	r0, #1
   114ae:	f88d 000c 	strb.w	r0, [sp, #12]
   114b2:	e014      	b.n	114de <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xae>
   114b4:	f89d 000c 	ldrb.w	r0, [sp, #12]
   114b8:	f89d 100d 	ldrb.w	r1, [sp, #13]
   114bc:	b006      	add	sp, #24
   114be:	bd80      	pop	{r7, pc}
   114c0:	2000      	movs	r0, #0
   114c2:	f88d 0013 	strb.w	r0, [sp, #19]
   114c6:	e7f5      	b.n	114b4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x84>
   114c8:	f89d 0013 	ldrb.w	r0, [sp, #19]
   114cc:	07c0      	lsls	r0, r0, #31
   114ce:	2800      	cmp	r0, #0
   114d0:	d0f6      	beq.n	114c0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   114d2:	e7ff      	b.n	114d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xa4>
   114d4:	2000      	movs	r0, #0
   114d6:	f88d 0013 	strb.w	r0, [sp, #19]
   114da:	e7f1      	b.n	114c0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   114dc:	e7f0      	b.n	114c0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   114de:	f89d 0010 	ldrb.w	r0, [sp, #16]
   114e2:	07c0      	lsls	r0, r0, #31
   114e4:	2800      	cmp	r0, #0
   114e6:	d1ef      	bne.n	114c8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x98>
   114e8:	e7f8      	b.n	114dc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xac>

000114ea <_ZN4core4iter6traits8iterator8Iterator3map17h89e3c6c0231011ceE>:
   114ea:	b580      	push	{r7, lr}
   114ec:	b084      	sub	sp, #16
   114ee:	9101      	str	r1, [sp, #4]
   114f0:	9202      	str	r2, [sp, #8]
   114f2:	9303      	str	r3, [sp, #12]
   114f4:	f7ff ff57 	bl	113a6 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h1794408f6a80b915E>
   114f8:	e7ff      	b.n	114fa <_ZN4core4iter6traits8iterator8Iterator3map17h89e3c6c0231011ceE+0x10>
   114fa:	b004      	add	sp, #16
   114fc:	bd80      	pop	{r7, pc}

000114fe <_ZN4core4iter6traits8iterator8Iterator3map17hbdce026690b075d6E>:
   114fe:	b580      	push	{r7, lr}
   11500:	b084      	sub	sp, #16
   11502:	9101      	str	r1, [sp, #4]
   11504:	9202      	str	r2, [sp, #8]
   11506:	9303      	str	r3, [sp, #12]
   11508:	f7ff ff56 	bl	113b8 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h6a385a1eb638dc34E>
   1150c:	e7ff      	b.n	1150e <_ZN4core4iter6traits8iterator8Iterator3map17hbdce026690b075d6E+0x10>
   1150e:	b004      	add	sp, #16
   11510:	bd80      	pop	{r7, pc}

00011512 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE>:
   11512:	b081      	sub	sp, #4
   11514:	460a      	mov	r2, r1
   11516:	4603      	mov	r3, r0
   11518:	f88d 0000 	strb.w	r0, [sp]
   1151c:	f88d 1001 	strb.w	r1, [sp, #1]
   11520:	b001      	add	sp, #4
   11522:	4770      	bx	lr

00011524 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>:
   11524:	b084      	sub	sp, #16
   11526:	9001      	str	r0, [sp, #4]
   11528:	9102      	str	r1, [sp, #8]
   1152a:	4408      	add	r0, r1
   1152c:	9003      	str	r0, [sp, #12]
   1152e:	9803      	ldr	r0, [sp, #12]
   11530:	9000      	str	r0, [sp, #0]
   11532:	e7ff      	b.n	11534 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E+0x10>
   11534:	9800      	ldr	r0, [sp, #0]
   11536:	b004      	add	sp, #16
   11538:	4770      	bx	lr

0001153a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>:
   1153a:	b082      	sub	sp, #8
   1153c:	9001      	str	r0, [sp, #4]
   1153e:	9000      	str	r0, [sp, #0]
   11540:	e7ff      	b.n	11542 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE+0x8>
   11542:	9800      	ldr	r0, [sp, #0]
   11544:	fab0 f180 	clz	r1, r0
   11548:	0948      	lsrs	r0, r1, #5
   1154a:	b002      	add	sp, #8
   1154c:	4770      	bx	lr

0001154e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>:
   1154e:	b082      	sub	sp, #8
   11550:	9001      	str	r0, [sp, #4]
   11552:	9000      	str	r0, [sp, #0]
   11554:	9800      	ldr	r0, [sp, #0]
   11556:	b002      	add	sp, #8
   11558:	4770      	bx	lr

0001155a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>:
   1155a:	b081      	sub	sp, #4
   1155c:	9000      	str	r0, [sp, #0]
   1155e:	b001      	add	sp, #4
   11560:	4770      	bx	lr

00011562 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>:
   11562:	b580      	push	{r7, lr}
   11564:	b084      	sub	sp, #16
   11566:	9002      	str	r0, [sp, #8]
   11568:	9103      	str	r1, [sp, #12]
   1156a:	f000 f805 	bl	11578 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   1156e:	9001      	str	r0, [sp, #4]
   11570:	e7ff      	b.n	11572 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E+0x10>
   11572:	9801      	ldr	r0, [sp, #4]
   11574:	b004      	add	sp, #16
   11576:	bd80      	pop	{r7, pc}

00011578 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>:
   11578:	b084      	sub	sp, #16
   1157a:	9001      	str	r0, [sp, #4]
   1157c:	9102      	str	r1, [sp, #8]
   1157e:	4408      	add	r0, r1
   11580:	9003      	str	r0, [sp, #12]
   11582:	9803      	ldr	r0, [sp, #12]
   11584:	9000      	str	r0, [sp, #0]
   11586:	e7ff      	b.n	11588 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E+0x10>
   11588:	9800      	ldr	r0, [sp, #0]
   1158a:	b004      	add	sp, #16
   1158c:	4770      	bx	lr

0001158e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>:
   1158e:	b082      	sub	sp, #8
   11590:	9001      	str	r0, [sp, #4]
   11592:	9000      	str	r0, [sp, #0]
   11594:	e7ff      	b.n	11596 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE+0x8>
   11596:	9800      	ldr	r0, [sp, #0]
   11598:	fab0 f180 	clz	r1, r0
   1159c:	0948      	lsrs	r0, r1, #5
   1159e:	b002      	add	sp, #8
   115a0:	4770      	bx	lr

000115a2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>:
   115a2:	b580      	push	{r7, lr}
   115a4:	b090      	sub	sp, #64	; 0x40
   115a6:	900c      	str	r0, [sp, #48]	; 0x30
   115a8:	910d      	str	r1, [sp, #52]	; 0x34
   115aa:	9007      	str	r0, [sp, #28]
   115ac:	9106      	str	r1, [sp, #24]
   115ae:	f001 f895 	bl	126dc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>
   115b2:	4601      	mov	r1, r0
   115b4:	900e      	str	r0, [sp, #56]	; 0x38
   115b6:	9105      	str	r1, [sp, #20]
   115b8:	e7ff      	b.n	115ba <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x18>
   115ba:	9805      	ldr	r0, [sp, #20]
   115bc:	f7ff ffe7 	bl	1158e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   115c0:	e7ff      	b.n	115c2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x20>
   115c2:	e7ff      	b.n	115c4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x22>
   115c4:	2001      	movs	r0, #1
   115c6:	900f      	str	r0, [sp, #60]	; 0x3c
   115c8:	980f      	ldr	r0, [sp, #60]	; 0x3c
   115ca:	9004      	str	r0, [sp, #16]
   115cc:	e7ff      	b.n	115ce <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x2c>
   115ce:	9804      	ldr	r0, [sp, #16]
   115d0:	2800      	cmp	r0, #0
   115d2:	d006      	beq.n	115e2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x40>
   115d4:	e7ff      	b.n	115d6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x34>
   115d6:	9807      	ldr	r0, [sp, #28]
   115d8:	9906      	ldr	r1, [sp, #24]
   115da:	f001 f877 	bl	126cc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   115de:	9003      	str	r0, [sp, #12]
   115e0:	e00e      	b.n	11600 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x5e>
   115e2:	9807      	ldr	r0, [sp, #28]
   115e4:	9906      	ldr	r1, [sp, #24]
   115e6:	f001 f871 	bl	126cc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   115ea:	9002      	str	r0, [sp, #8]
   115ec:	e7ff      	b.n	115ee <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x4c>
   115ee:	9805      	ldr	r0, [sp, #20]
   115f0:	9902      	ldr	r1, [sp, #8]
   115f2:	f7ff ffb6 	bl	11562 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>
   115f6:	9001      	str	r0, [sp, #4]
   115f8:	e7ff      	b.n	115fa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x58>
   115fa:	9801      	ldr	r0, [sp, #4]
   115fc:	900a      	str	r0, [sp, #40]	; 0x28
   115fe:	e006      	b.n	1160e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   11600:	9805      	ldr	r0, [sp, #20]
   11602:	9903      	ldr	r1, [sp, #12]
   11604:	f001 f83f 	bl	12686 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>
   11608:	900a      	str	r0, [sp, #40]	; 0x28
   1160a:	e7ff      	b.n	1160c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6a>
   1160c:	e7ff      	b.n	1160e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   1160e:	9805      	ldr	r0, [sp, #20]
   11610:	f7ff ff9d 	bl	1154e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   11614:	9000      	str	r0, [sp, #0]
   11616:	e7ff      	b.n	11618 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x76>
   11618:	980a      	ldr	r0, [sp, #40]	; 0x28
   1161a:	9900      	ldr	r1, [sp, #0]
   1161c:	9108      	str	r1, [sp, #32]
   1161e:	9009      	str	r0, [sp, #36]	; 0x24
   11620:	9808      	ldr	r0, [sp, #32]
   11622:	9909      	ldr	r1, [sp, #36]	; 0x24
   11624:	b010      	add	sp, #64	; 0x40
   11626:	bd80      	pop	{r7, pc}

00011628 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>:
   11628:	b081      	sub	sp, #4
   1162a:	b001      	add	sp, #4
   1162c:	4770      	bx	lr

0001162e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>:
   1162e:	b580      	push	{r7, lr}
   11630:	b08e      	sub	sp, #56	; 0x38
   11632:	9007      	str	r0, [sp, #28]
   11634:	6801      	ldr	r1, [r0, #0]
   11636:	9005      	str	r0, [sp, #20]
   11638:	4608      	mov	r0, r1
   1163a:	f7ff ff8e 	bl	1155a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   1163e:	9004      	str	r0, [sp, #16]
   11640:	e7ff      	b.n	11642 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x14>
   11642:	9804      	ldr	r0, [sp, #16]
   11644:	f7ff ff79 	bl	1153a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>
   11648:	e7ff      	b.n	1164a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1c>
   1164a:	e7ff      	b.n	1164c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1e>
   1164c:	2001      	movs	r0, #1
   1164e:	9008      	str	r0, [sp, #32]
   11650:	9808      	ldr	r0, [sp, #32]
   11652:	9003      	str	r0, [sp, #12]
   11654:	e7ff      	b.n	11656 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x28>
   11656:	9803      	ldr	r0, [sp, #12]
   11658:	2800      	cmp	r0, #0
   1165a:	d007      	beq.n	1166c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   1165c:	e7ff      	b.n	1165e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x30>
   1165e:	9805      	ldr	r0, [sp, #20]
   11660:	6840      	ldr	r0, [r0, #4]
   11662:	f7ff ff94 	bl	1158e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   11666:	e7ff      	b.n	11668 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3a>
   11668:	e7ff      	b.n	1166a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3c>
   1166a:	e7ff      	b.n	1166c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   1166c:	9805      	ldr	r0, [sp, #20]
   1166e:	6800      	ldr	r0, [r0, #0]
   11670:	f7ff ff73 	bl	1155a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11674:	9002      	str	r0, [sp, #8]
   11676:	e7ff      	b.n	11678 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x4a>
   11678:	9805      	ldr	r0, [sp, #20]
   1167a:	6841      	ldr	r1, [r0, #4]
   1167c:	9a02      	ldr	r2, [sp, #8]
   1167e:	428a      	cmp	r2, r1
   11680:	d02e      	beq.n	116e0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb2>
   11682:	e7ff      	b.n	11684 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x56>
   11684:	9805      	ldr	r0, [sp, #20]
   11686:	900a      	str	r0, [sp, #40]	; 0x28
   11688:	2101      	movs	r1, #1
   1168a:	910b      	str	r1, [sp, #44]	; 0x2c
   1168c:	910d      	str	r1, [sp, #52]	; 0x34
   1168e:	990d      	ldr	r1, [sp, #52]	; 0x34
   11690:	2900      	cmp	r1, #0
   11692:	d015      	beq.n	116c0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x92>
   11694:	e7ff      	b.n	11696 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x68>
   11696:	9805      	ldr	r0, [sp, #20]
   11698:	6800      	ldr	r0, [r0, #0]
   1169a:	f7ff ff5e 	bl	1155a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   1169e:	900c      	str	r0, [sp, #48]	; 0x30
   116a0:	9905      	ldr	r1, [sp, #20]
   116a2:	680a      	ldr	r2, [r1, #0]
   116a4:	9001      	str	r0, [sp, #4]
   116a6:	4610      	mov	r0, r2
   116a8:	f7ff ff57 	bl	1155a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   116ac:	2101      	movs	r1, #1
   116ae:	f7ff ff39 	bl	11524 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>
   116b2:	f7ff ff4c 	bl	1154e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   116b6:	9905      	ldr	r1, [sp, #20]
   116b8:	6008      	str	r0, [r1, #0]
   116ba:	9801      	ldr	r0, [sp, #4]
   116bc:	9009      	str	r0, [sp, #36]	; 0x24
   116be:	e00c      	b.n	116da <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   116c0:	9805      	ldr	r0, [sp, #20]
   116c2:	6840      	ldr	r0, [r0, #4]
   116c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   116c8:	f7ff ff56 	bl	11578 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   116cc:	9905      	ldr	r1, [sp, #20]
   116ce:	6048      	str	r0, [r1, #4]
   116d0:	6808      	ldr	r0, [r1, #0]
   116d2:	f7ff ff42 	bl	1155a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   116d6:	9009      	str	r0, [sp, #36]	; 0x24
   116d8:	e7ff      	b.n	116da <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   116da:	9809      	ldr	r0, [sp, #36]	; 0x24
   116dc:	9000      	str	r0, [sp, #0]
   116de:	e002      	b.n	116e6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb8>
   116e0:	2000      	movs	r0, #0
   116e2:	9006      	str	r0, [sp, #24]
   116e4:	e002      	b.n	116ec <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   116e6:	9800      	ldr	r0, [sp, #0]
   116e8:	9006      	str	r0, [sp, #24]
   116ea:	e7ff      	b.n	116ec <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   116ec:	9806      	ldr	r0, [sp, #24]
   116ee:	b00e      	add	sp, #56	; 0x38
   116f0:	bd80      	pop	{r7, pc}

000116f2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE>:
   116f2:	b580      	push	{r7, lr}
   116f4:	b084      	sub	sp, #16
   116f6:	9002      	str	r0, [sp, #8]
   116f8:	9103      	str	r1, [sp, #12]
   116fa:	6800      	ldr	r0, [r0, #0]
   116fc:	f000 f88c 	bl	11818 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>
   11700:	9001      	str	r0, [sp, #4]
   11702:	e7ff      	b.n	11704 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE+0x12>
   11704:	9801      	ldr	r0, [sp, #4]
   11706:	f000 0001 	and.w	r0, r0, #1
   1170a:	b004      	add	sp, #16
   1170c:	bd80      	pop	{r7, pc}

0001170e <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>:
   1170e:	b580      	push	{r7, lr}
   11710:	b084      	sub	sp, #16
   11712:	9002      	str	r0, [sp, #8]
   11714:	9103      	str	r1, [sp, #12]
   11716:	f000 f827 	bl	11768 <_ZN4core3cmp6max_by17h3c9686db40e0f078E>
   1171a:	9001      	str	r0, [sp, #4]
   1171c:	e7ff      	b.n	1171e <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE+0x10>
   1171e:	9801      	ldr	r0, [sp, #4]
   11720:	b004      	add	sp, #16
   11722:	bd80      	pop	{r7, pc}

00011724 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>:
   11724:	b085      	sub	sp, #20
   11726:	9003      	str	r0, [sp, #12]
   11728:	9104      	str	r1, [sp, #16]
   1172a:	6802      	ldr	r2, [r0, #0]
   1172c:	680b      	ldr	r3, [r1, #0]
   1172e:	429a      	cmp	r2, r3
   11730:	9101      	str	r1, [sp, #4]
   11732:	9000      	str	r0, [sp, #0]
   11734:	db07      	blt.n	11746 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x22>
   11736:	e7ff      	b.n	11738 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x14>
   11738:	9800      	ldr	r0, [sp, #0]
   1173a:	6801      	ldr	r1, [r0, #0]
   1173c:	9a01      	ldr	r2, [sp, #4]
   1173e:	6813      	ldr	r3, [r2, #0]
   11740:	4299      	cmp	r1, r3
   11742:	d008      	beq.n	11756 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x32>
   11744:	e003      	b.n	1174e <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x2a>
   11746:	20ff      	movs	r0, #255	; 0xff
   11748:	f88d 000b 	strb.w	r0, [sp, #11]
   1174c:	e008      	b.n	11760 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
   1174e:	2001      	movs	r0, #1
   11750:	f88d 000b 	strb.w	r0, [sp, #11]
   11754:	e003      	b.n	1175e <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
   11756:	2000      	movs	r0, #0
   11758:	f88d 000b 	strb.w	r0, [sp, #11]
   1175c:	e7ff      	b.n	1175e <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
   1175e:	e7ff      	b.n	11760 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
   11760:	f89d 000b 	ldrb.w	r0, [sp, #11]
   11764:	b005      	add	sp, #20
   11766:	4770      	bx	lr

00011768 <_ZN4core3cmp6max_by17h3c9686db40e0f078E>:
   11768:	b580      	push	{r7, lr}
   1176a:	b088      	sub	sp, #32
   1176c:	9000      	str	r0, [sp, #0]
   1176e:	9101      	str	r1, [sp, #4]
   11770:	2000      	movs	r0, #0
   11772:	f88d 001b 	strb.w	r0, [sp, #27]
   11776:	f88d 001a 	strb.w	r0, [sp, #26]
   1177a:	2001      	movs	r0, #1
   1177c:	f88d 001b 	strb.w	r0, [sp, #27]
   11780:	f88d 001a 	strb.w	r0, [sp, #26]
   11784:	4668      	mov	r0, sp
   11786:	9004      	str	r0, [sp, #16]
   11788:	a801      	add	r0, sp, #4
   1178a:	9005      	str	r0, [sp, #20]
   1178c:	9804      	ldr	r0, [sp, #16]
   1178e:	9905      	ldr	r1, [sp, #20]
   11790:	f000 f895 	bl	118be <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>
   11794:	f88d 000f 	strb.w	r0, [sp, #15]
   11798:	e7ff      	b.n	1179a <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x32>
   1179a:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   1179e:	1c41      	adds	r1, r0, #1
   117a0:	2902      	cmp	r1, #2
   117a2:	d307      	bcc.n	117b4 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x4c>
   117a4:	e7ff      	b.n	117a6 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x3e>
   117a6:	2000      	movs	r0, #0
   117a8:	f88d 001b 	strb.w	r0, [sp, #27]
   117ac:	9800      	ldr	r0, [sp, #0]
   117ae:	9002      	str	r0, [sp, #8]
   117b0:	e006      	b.n	117c0 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
   117b2:	defe      	udf	#254	; 0xfe
   117b4:	2000      	movs	r0, #0
   117b6:	f88d 001a 	strb.w	r0, [sp, #26]
   117ba:	9801      	ldr	r0, [sp, #4]
   117bc:	9002      	str	r0, [sp, #8]
   117be:	e7ff      	b.n	117c0 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
   117c0:	f89d 001a 	ldrb.w	r0, [sp, #26]
   117c4:	07c0      	lsls	r0, r0, #31
   117c6:	2800      	cmp	r0, #0
   117c8:	d109      	bne.n	117de <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x76>
   117ca:	e7ff      	b.n	117cc <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
   117cc:	f89d 001b 	ldrb.w	r0, [sp, #27]
   117d0:	07c0      	lsls	r0, r0, #31
   117d2:	2800      	cmp	r0, #0
   117d4:	d107      	bne.n	117e6 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x7e>
   117d6:	e7ff      	b.n	117d8 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>
   117d8:	9802      	ldr	r0, [sp, #8]
   117da:	b008      	add	sp, #32
   117dc:	bd80      	pop	{r7, pc}
   117de:	2000      	movs	r0, #0
   117e0:	f88d 001a 	strb.w	r0, [sp, #26]
   117e4:	e7f2      	b.n	117cc <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
   117e6:	2000      	movs	r0, #0
   117e8:	f88d 001b 	strb.w	r0, [sp, #27]
   117ec:	e7f4      	b.n	117d8 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>

000117ee <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>:
   117ee:	b089      	sub	sp, #36	; 0x24
   117f0:	9005      	str	r0, [sp, #20]
   117f2:	9106      	str	r1, [sp, #24]
   117f4:	9107      	str	r1, [sp, #28]
   117f6:	9907      	ldr	r1, [sp, #28]
   117f8:	9002      	str	r0, [sp, #8]
   117fa:	9101      	str	r1, [sp, #4]
   117fc:	e7ff      	b.n	117fe <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x10>
   117fe:	9802      	ldr	r0, [sp, #8]
   11800:	9008      	str	r0, [sp, #32]
   11802:	9908      	ldr	r1, [sp, #32]
   11804:	9100      	str	r1, [sp, #0]
   11806:	e7ff      	b.n	11808 <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x1a>
   11808:	9800      	ldr	r0, [sp, #0]
   1180a:	9003      	str	r0, [sp, #12]
   1180c:	9901      	ldr	r1, [sp, #4]
   1180e:	9104      	str	r1, [sp, #16]
   11810:	9803      	ldr	r0, [sp, #12]
   11812:	9904      	ldr	r1, [sp, #16]
   11814:	b009      	add	sp, #36	; 0x24
   11816:	4770      	bx	lr

00011818 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>:
   11818:	b580      	push	{r7, lr}
   1181a:	b088      	sub	sp, #32
   1181c:	9006      	str	r0, [sp, #24]
   1181e:	9107      	str	r1, [sp, #28]
   11820:	9004      	str	r0, [sp, #16]
   11822:	4608      	mov	r0, r1
   11824:	9103      	str	r1, [sp, #12]
   11826:	f006 ff10 	bl	1864a <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   1182a:	9002      	str	r0, [sp, #8]
   1182c:	e7ff      	b.n	1182e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x16>
   1182e:	9802      	ldr	r0, [sp, #8]
   11830:	07c1      	lsls	r1, r0, #31
   11832:	2900      	cmp	r1, #0
   11834:	d105      	bne.n	11842 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x2a>
   11836:	e7ff      	b.n	11838 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x20>
   11838:	9803      	ldr	r0, [sp, #12]
   1183a:	f006 ff0a 	bl	18652 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1183e:	9001      	str	r0, [sp, #4]
   11840:	e007      	b.n	11852 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x3a>
   11842:	9804      	ldr	r0, [sp, #16]
   11844:	9903      	ldr	r1, [sp, #12]
   11846:	f007 fd2a 	bl	1929e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   1184a:	f88d 0017 	strb.w	r0, [sp, #23]
   1184e:	e7ff      	b.n	11850 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x38>
   11850:	e015      	b.n	1187e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   11852:	9801      	ldr	r0, [sp, #4]
   11854:	07c1      	lsls	r1, r0, #31
   11856:	2900      	cmp	r1, #0
   11858:	d107      	bne.n	1186a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x52>
   1185a:	e7ff      	b.n	1185c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x44>
   1185c:	9804      	ldr	r0, [sp, #16]
   1185e:	9903      	ldr	r1, [sp, #12]
   11860:	f007 fe98 	bl	19594 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   11864:	f88d 0017 	strb.w	r0, [sp, #23]
   11868:	e007      	b.n	1187a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x62>
   1186a:	9804      	ldr	r0, [sp, #16]
   1186c:	9903      	ldr	r1, [sp, #12]
   1186e:	f007 fd81 	bl	19374 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   11872:	f88d 0017 	strb.w	r0, [sp, #23]
   11876:	e7ff      	b.n	11878 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x60>
   11878:	e000      	b.n	1187c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   1187a:	e7ff      	b.n	1187c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   1187c:	e7ff      	b.n	1187e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   1187e:	f89d 0017 	ldrb.w	r0, [sp, #23]
   11882:	b008      	add	sp, #32
   11884:	bd80      	pop	{r7, pc}

00011886 <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>:
   11886:	b580      	push	{r7, lr}
   11888:	b086      	sub	sp, #24
   1188a:	f8dd c020 	ldr.w	ip, [sp, #32]
   1188e:	9102      	str	r1, [sp, #8]
   11890:	9203      	str	r2, [sp, #12]
   11892:	9304      	str	r3, [sp, #16]
   11894:	f8cd c014 	str.w	ip, [sp, #20]
   11898:	f04f 0e00 	mov.w	lr, #0
   1189c:	f8cd e004 	str.w	lr, [sp, #4]
   118a0:	f8cd e000 	str.w	lr, [sp]
   118a4:	f8cd e000 	str.w	lr, [sp]
   118a8:	6001      	str	r1, [r0, #0]
   118aa:	6042      	str	r2, [r0, #4]
   118ac:	9900      	ldr	r1, [sp, #0]
   118ae:	9a01      	ldr	r2, [sp, #4]
   118b0:	6081      	str	r1, [r0, #8]
   118b2:	60c2      	str	r2, [r0, #12]
   118b4:	6103      	str	r3, [r0, #16]
   118b6:	f8c0 c014 	str.w	ip, [r0, #20]
   118ba:	b006      	add	sp, #24
   118bc:	bd80      	pop	{r7, pc}

000118be <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>:
   118be:	b580      	push	{r7, lr}
   118c0:	b084      	sub	sp, #16
   118c2:	9001      	str	r0, [sp, #4]
   118c4:	9102      	str	r1, [sp, #8]
   118c6:	9801      	ldr	r0, [sp, #4]
   118c8:	9902      	ldr	r1, [sp, #8]
   118ca:	f7ff ff2b 	bl	11724 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>
   118ce:	9000      	str	r0, [sp, #0]
   118d0:	e7ff      	b.n	118d2 <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E+0x14>
   118d2:	9800      	ldr	r0, [sp, #0]
   118d4:	b004      	add	sp, #16
   118d6:	bd80      	pop	{r7, pc}

000118d8 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct Coord(pub CoordPart, pub CoordPart);

    impl Coord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: CoordPart, y: CoordPart) -> Self {
   118d8:	b084      	sub	sp, #16
   118da:	9002      	str	r0, [sp, #8]
   118dc:	9103      	str	r1, [sp, #12]
            Coord(x, y)
   118de:	9000      	str	r0, [sp, #0]
   118e0:	9101      	str	r1, [sp, #4]
        }
   118e2:	9800      	ldr	r0, [sp, #0]
   118e4:	9901      	ldr	r1, [sp, #4]
   118e6:	b004      	add	sp, #16
   118e8:	4770      	bx	lr

000118ea <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>:
    }

    impl Index<usize> for Coord {
        type Output = CoordPart;

        fn index(&self, idx: usize) -> &CoordPart {
   118ea:	b580      	push	{r7, lr}
   118ec:	b096      	sub	sp, #88	; 0x58
   118ee:	9109      	str	r1, [sp, #36]	; 0x24
   118f0:	9014      	str	r0, [sp, #80]	; 0x50
            match idx {
                0 => &self.0,
   118f2:	9909      	ldr	r1, [sp, #36]	; 0x24
   118f4:	2900      	cmp	r1, #0
   118f6:	9008      	str	r0, [sp, #32]
   118f8:	9107      	str	r1, [sp, #28]
   118fa:	d018      	beq.n	1192e <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x44>
   118fc:	e7ff      	b.n	118fe <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x14>
   118fe:	9807      	ldr	r0, [sp, #28]
   11900:	2801      	cmp	r0, #1
   11902:	d017      	beq.n	11934 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x4a>
   11904:	e7ff      	b.n	11906 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x1c>
                1 => &self.1,
                _ => panic!("Unreachable index {}", idx),
   11906:	f64f 7018 	movw	r0, #65304	; 0xff18
   1190a:	f2c0 0001 	movt	r0, #1
   1190e:	6801      	ldr	r1, [r0, #0]
   11910:	a809      	add	r0, sp, #36	; 0x24
   11912:	9013      	str	r0, [sp, #76]	; 0x4c
   11914:	9813      	ldr	r0, [sp, #76]	; 0x4c
   11916:	9015      	str	r0, [sp, #84]	; 0x54
   11918:	f249 6289 	movw	r2, #38537	; 0x9689
   1191c:	f2c0 0201 	movt	r2, #1
   11920:	9106      	str	r1, [sp, #24]
   11922:	4611      	mov	r1, r2
   11924:	f7ff ff63 	bl	117ee <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>
   11928:	9005      	str	r0, [sp, #20]
   1192a:	9104      	str	r1, [sp, #16]
   1192c:	e006      	b.n	1193c <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x52>
                0 => &self.0,
   1192e:	9808      	ldr	r0, [sp, #32]
   11930:	900a      	str	r0, [sp, #40]	; 0x28
            match idx {
   11932:	e020      	b.n	11976 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                1 => &self.1,
   11934:	9808      	ldr	r0, [sp, #32]
   11936:	1d01      	adds	r1, r0, #4
   11938:	910a      	str	r1, [sp, #40]	; 0x28
            match idx {
   1193a:	e01c      	b.n	11976 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                _ => panic!("Unreachable index {}", idx),
   1193c:	9805      	ldr	r0, [sp, #20]
   1193e:	9011      	str	r0, [sp, #68]	; 0x44
   11940:	9904      	ldr	r1, [sp, #16]
   11942:	9112      	str	r1, [sp, #72]	; 0x48
   11944:	466a      	mov	r2, sp
   11946:	2301      	movs	r3, #1
   11948:	6013      	str	r3, [r2, #0]
   1194a:	a80b      	add	r0, sp, #44	; 0x2c
   1194c:	aa11      	add	r2, sp, #68	; 0x44
   1194e:	9906      	ldr	r1, [sp, #24]
   11950:	9203      	str	r2, [sp, #12]
   11952:	461a      	mov	r2, r3
   11954:	9b03      	ldr	r3, [sp, #12]
   11956:	f7ff ff96 	bl	11886 <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>
   1195a:	e7ff      	b.n	1195c <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x72>
   1195c:	f64f 701c 	movw	r0, #65308	; 0xff1c
   11960:	f2c0 0001 	movt	r0, #1
   11964:	f005 ffc9 	bl	178fa <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   11968:	9002      	str	r0, [sp, #8]
   1196a:	e7ff      	b.n	1196c <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x82>
   1196c:	a80b      	add	r0, sp, #44	; 0x2c
   1196e:	9902      	ldr	r1, [sp, #8]
   11970:	f006 f800 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   11974:	defe      	udf	#254	; 0xfe
            match idx {
   11976:	980a      	ldr	r0, [sp, #40]	; 0x28
            }
        }
   11978:	b016      	add	sp, #88	; 0x58
   1197a:	bd80      	pop	{r7, pc}

0001197c <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>:
    /// #
    /// let coord = Coord::new(-5, 10);
    ///
    /// assert_eq!(coord.to_unsigned(), UnsignedCoord::new(0, 10));
    /// ```
    fn to_unsigned(self) -> UnsignedCoord {
   1197c:	b580      	push	{r7, lr}
   1197e:	b088      	sub	sp, #32
   11980:	9006      	str	r0, [sp, #24]
   11982:	9107      	str	r1, [sp, #28]
   11984:	a806      	add	r0, sp, #24
   11986:	2100      	movs	r1, #0
        UnsignedCoord::new(self[0].max(0) as u32, self[1].max(0) as u32)
   11988:	f7ff ffaf 	bl	118ea <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1198c:	9005      	str	r0, [sp, #20]
   1198e:	e7ff      	b.n	11990 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x14>
   11990:	9805      	ldr	r0, [sp, #20]
   11992:	6800      	ldr	r0, [r0, #0]
   11994:	2100      	movs	r1, #0
   11996:	f7ff feba 	bl	1170e <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
   1199a:	9004      	str	r0, [sp, #16]
   1199c:	e7ff      	b.n	1199e <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x22>
   1199e:	a806      	add	r0, sp, #24
   119a0:	2101      	movs	r1, #1
   119a2:	f7ff ffa2 	bl	118ea <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   119a6:	9003      	str	r0, [sp, #12]
   119a8:	e7ff      	b.n	119aa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x2e>
   119aa:	9803      	ldr	r0, [sp, #12]
   119ac:	6800      	ldr	r0, [r0, #0]
   119ae:	2100      	movs	r1, #0
   119b0:	f7ff fead 	bl	1170e <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
   119b4:	9002      	str	r0, [sp, #8]
   119b6:	e7ff      	b.n	119b8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x3c>
   119b8:	9804      	ldr	r0, [sp, #16]
   119ba:	9902      	ldr	r1, [sp, #8]
   119bc:	f000 f84e 	bl	11a5c <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>
   119c0:	9001      	str	r0, [sp, #4]
   119c2:	9100      	str	r1, [sp, #0]
   119c4:	e7ff      	b.n	119c6 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x4a>
    }
   119c6:	9801      	ldr	r0, [sp, #4]
   119c8:	9900      	ldr	r1, [sp, #0]
   119ca:	b008      	add	sp, #32
   119cc:	bd80      	pop	{r7, pc}

000119ce <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>:
/// Take a tuple of 8 bit `(red, green, blue)` color values and convert them to a single 16 bit
/// color
///
/// The 2 or 3 (for the green channel) least significant bits are discarded
impl From<(u8, u8, u8)> for Rgb565 {
    fn from((r, g, b): (u8, u8, u8)) -> Self {
   119ce:	b08b      	sub	sp, #44	; 0x2c
   119d0:	4601      	mov	r1, r0
   119d2:	f8ad 0020 	strh.w	r0, [sp, #32]
   119d6:	0c00      	lsrs	r0, r0, #16
   119d8:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   119dc:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   119e0:	f88d 001e 	strb.w	r0, [sp, #30]
   119e4:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   119e8:	f8ad 001c 	strh.w	r0, [sp, #28]
   119ec:	f89d 001c 	ldrb.w	r0, [sp, #28]
   119f0:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   119f4:	f89d 201d 	ldrb.w	r2, [sp, #29]
   119f8:	4613      	mov	r3, r2
   119fa:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   119fe:	f89d 201e 	ldrb.w	r2, [sp, #30]
   11a02:	4694      	mov	ip, r2
   11a04:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
        let value =
        // Red
        (((r as u16) << 8) & RED_MASK)
   11a08:	0200      	lsls	r0, r0, #8
   11a0a:	9306      	str	r3, [sp, #24]
   11a0c:	f8cd c014 	str.w	ip, [sp, #20]
   11a10:	9004      	str	r0, [sp, #16]
   11a12:	e7ff      	b.n	11a14 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x46>
   11a14:	9804      	ldr	r0, [sp, #16]
   11a16:	f400 4178 	and.w	r1, r0, #63488	; 0xf800
        // Green
        | (((g as u16) << 3) & GREEN_MASK)
   11a1a:	9a06      	ldr	r2, [sp, #24]
   11a1c:	b2d3      	uxtb	r3, r2
   11a1e:	00db      	lsls	r3, r3, #3
   11a20:	9103      	str	r1, [sp, #12]
   11a22:	9302      	str	r3, [sp, #8]
   11a24:	e7ff      	b.n	11a26 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x58>
   11a26:	9802      	ldr	r0, [sp, #8]
   11a28:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
        (((r as u16) << 8) & RED_MASK)
   11a2c:	9a03      	ldr	r2, [sp, #12]
   11a2e:	4311      	orrs	r1, r2
        // Blue
        | ((b as u16) >> 3 & BLUE_MASK);
   11a30:	9b05      	ldr	r3, [sp, #20]
   11a32:	fa5f fc83 	uxtb.w	ip, r3
   11a36:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
   11a3a:	9101      	str	r1, [sp, #4]
   11a3c:	f8cd c000 	str.w	ip, [sp]
   11a40:	e7ff      	b.n	11a42 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x74>
   11a42:	9800      	ldr	r0, [sp, #0]
   11a44:	f000 011f 	and.w	r1, r0, #31
        (((r as u16) << 8) & RED_MASK)
   11a48:	9a01      	ldr	r2, [sp, #4]
   11a4a:	4311      	orrs	r1, r2
   11a4c:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a

        Self(value)
   11a50:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    }
   11a54:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   11a58:	b00b      	add	sp, #44	; 0x2c
   11a5a:	4770      	bx	lr

00011a5c <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct UnsignedCoord(pub UnsignedCoordPart, pub UnsignedCoordPart);

    impl UnsignedCoord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: UnsignedCoordPart, y: UnsignedCoordPart) -> Self {
   11a5c:	b084      	sub	sp, #16
   11a5e:	9002      	str	r0, [sp, #8]
   11a60:	9103      	str	r1, [sp, #12]
            UnsignedCoord(x, y)
   11a62:	9000      	str	r0, [sp, #0]
   11a64:	9101      	str	r1, [sp, #4]
        }
   11a66:	9800      	ldr	r0, [sp, #0]
   11a68:	9901      	ldr	r1, [sp, #4]
   11a6a:	b004      	add	sp, #16
   11a6c:	4770      	bx	lr

00011a6e <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>:
   11a6e:	b580      	push	{r7, lr}
   11a70:	b088      	sub	sp, #32
   11a72:	9005      	str	r0, [sp, #20]
   11a74:	9106      	str	r1, [sp, #24]
   11a76:	9003      	str	r0, [sp, #12]
   11a78:	4608      	mov	r0, r1
   11a7a:	f000 fa21 	bl	11ec0 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>
   11a7e:	9004      	str	r0, [sp, #16]
   11a80:	e7ff      	b.n	11a82 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x14>
   11a82:	9804      	ldr	r0, [sp, #16]
   11a84:	9007      	str	r0, [sp, #28]
   11a86:	9903      	ldr	r1, [sp, #12]
   11a88:	680a      	ldr	r2, [r1, #0]
   11a8a:	9002      	str	r0, [sp, #8]
   11a8c:	4610      	mov	r0, r2
   11a8e:	9902      	ldr	r1, [sp, #8]
   11a90:	f000 f837 	bl	11b02 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>
   11a94:	9001      	str	r0, [sp, #4]
   11a96:	9100      	str	r1, [sp, #0]
   11a98:	e7ff      	b.n	11a9a <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x2c>
   11a9a:	9801      	ldr	r0, [sp, #4]
   11a9c:	9900      	ldr	r1, [sp, #0]
   11a9e:	b008      	add	sp, #32
   11aa0:	bd80      	pop	{r7, pc}

00011aa2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>:
   11aa2:	b580      	push	{r7, lr}
   11aa4:	b084      	sub	sp, #16
   11aa6:	9001      	str	r0, [sp, #4]
   11aa8:	9102      	str	r1, [sp, #8]
   11aaa:	9203      	str	r2, [sp, #12]
   11aac:	9000      	str	r0, [sp, #0]
   11aae:	4608      	mov	r0, r1
   11ab0:	9900      	ldr	r1, [sp, #0]
   11ab2:	f00c fafd 	bl	1e0b0 <__aeabi_memcpy>
   11ab6:	e7ff      	b.n	11ab8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE+0x16>
   11ab8:	b004      	add	sp, #16
   11aba:	bd80      	pop	{r7, pc}

00011abc <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>:
   11abc:	b580      	push	{r7, lr}
   11abe:	b084      	sub	sp, #16
   11ac0:	9001      	str	r0, [sp, #4]
   11ac2:	9102      	str	r1, [sp, #8]
   11ac4:	9203      	str	r2, [sp, #12]
   11ac6:	0092      	lsls	r2, r2, #2
   11ac8:	9000      	str	r0, [sp, #0]
   11aca:	4608      	mov	r0, r1
   11acc:	9900      	ldr	r1, [sp, #0]
   11ace:	f00c faef 	bl	1e0b0 <__aeabi_memcpy>
   11ad2:	e7ff      	b.n	11ad4 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E+0x18>
   11ad4:	b004      	add	sp, #16
   11ad6:	bd80      	pop	{r7, pc}

00011ad8 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>:
   11ad8:	b082      	sub	sp, #8
   11ada:	9000      	str	r0, [sp, #0]
   11adc:	9101      	str	r1, [sp, #4]
   11ade:	6800      	ldr	r0, [r0, #0]
   11ae0:	6809      	ldr	r1, [r1, #0]
   11ae2:	2200      	movs	r2, #0
   11ae4:	4288      	cmp	r0, r1
   11ae6:	bf38      	it	cc
   11ae8:	2201      	movcc	r2, #1
   11aea:	4610      	mov	r0, r2
   11aec:	b002      	add	sp, #8
   11aee:	4770      	bx	lr

00011af0 <_ZN4core3mem4swap17hc4afbec7b5ffb125E>:
   11af0:	b580      	push	{r7, lr}
   11af2:	b082      	sub	sp, #8
   11af4:	9000      	str	r0, [sp, #0]
   11af6:	9101      	str	r1, [sp, #4]
   11af8:	f000 f85f 	bl	11bba <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>
   11afc:	e7ff      	b.n	11afe <_ZN4core3mem4swap17hc4afbec7b5ffb125E+0xe>
   11afe:	b002      	add	sp, #8
   11b00:	bd80      	pop	{r7, pc}

00011b02 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>:
   11b02:	b580      	push	{r7, lr}
   11b04:	b088      	sub	sp, #32
   11b06:	9004      	str	r0, [sp, #16]
   11b08:	9105      	str	r1, [sp, #20]
   11b0a:	f000 f819 	bl	11b40 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>
   11b0e:	9001      	str	r0, [sp, #4]
   11b10:	9100      	str	r1, [sp, #0]
   11b12:	e7ff      	b.n	11b14 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x12>
   11b14:	9801      	ldr	r0, [sp, #4]
   11b16:	9006      	str	r0, [sp, #24]
   11b18:	9900      	ldr	r1, [sp, #0]
   11b1a:	f001 0201 	and.w	r2, r1, #1
   11b1e:	f88d 201f 	strb.w	r2, [sp, #31]
   11b22:	2a00      	cmp	r2, #0
   11b24:	d105      	bne.n	11b32 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x30>
   11b26:	e7ff      	b.n	11b28 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x26>
   11b28:	9801      	ldr	r0, [sp, #4]
   11b2a:	9003      	str	r0, [sp, #12]
   11b2c:	2101      	movs	r1, #1
   11b2e:	9102      	str	r1, [sp, #8]
   11b30:	e002      	b.n	11b38 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   11b32:	2000      	movs	r0, #0
   11b34:	9002      	str	r0, [sp, #8]
   11b36:	e7ff      	b.n	11b38 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   11b38:	9802      	ldr	r0, [sp, #8]
   11b3a:	9903      	ldr	r1, [sp, #12]
   11b3c:	b008      	add	sp, #32
   11b3e:	bd80      	pop	{r7, pc}

00011b40 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>:
   11b40:	b08a      	sub	sp, #40	; 0x28
   11b42:	9004      	str	r0, [sp, #16]
   11b44:	9105      	str	r1, [sp, #20]
   11b46:	1840      	adds	r0, r0, r1
   11b48:	f04f 0100 	mov.w	r1, #0
   11b4c:	f141 0100 	adc.w	r1, r1, #0
   11b50:	9006      	str	r0, [sp, #24]
   11b52:	f88d 101c 	strb.w	r1, [sp, #28]
   11b56:	9806      	ldr	r0, [sp, #24]
   11b58:	f89d 101c 	ldrb.w	r1, [sp, #28]
   11b5c:	9001      	str	r0, [sp, #4]
   11b5e:	9100      	str	r1, [sp, #0]
   11b60:	e7ff      	b.n	11b62 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE+0x22>
   11b62:	9801      	ldr	r0, [sp, #4]
   11b64:	9008      	str	r0, [sp, #32]
   11b66:	9900      	ldr	r1, [sp, #0]
   11b68:	f001 0201 	and.w	r2, r1, #1
   11b6c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   11b70:	9002      	str	r0, [sp, #8]
   11b72:	f88d 200c 	strb.w	r2, [sp, #12]
   11b76:	9802      	ldr	r0, [sp, #8]
   11b78:	f89d 100c 	ldrb.w	r1, [sp, #12]
   11b7c:	b00a      	add	sp, #40	; 0x28
   11b7e:	4770      	bx	lr

00011b80 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>:
   11b80:	b580      	push	{r7, lr}
   11b82:	b08c      	sub	sp, #48	; 0x30
   11b84:	9005      	str	r0, [sp, #20]
   11b86:	9106      	str	r1, [sp, #24]
   11b88:	9207      	str	r2, [sp, #28]
   11b8a:	4603      	mov	r3, r0
   11b8c:	9008      	str	r0, [sp, #32]
   11b8e:	4608      	mov	r0, r1
   11b90:	9109      	str	r1, [sp, #36]	; 0x24
   11b92:	2104      	movs	r1, #4
   11b94:	910b      	str	r1, [sp, #44]	; 0x2c
   11b96:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11b98:	9204      	str	r2, [sp, #16]
   11b9a:	9303      	str	r3, [sp, #12]
   11b9c:	9002      	str	r0, [sp, #8]
   11b9e:	9101      	str	r1, [sp, #4]
   11ba0:	e7ff      	b.n	11ba2 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x22>
   11ba2:	9801      	ldr	r0, [sp, #4]
   11ba4:	9904      	ldr	r1, [sp, #16]
   11ba6:	fb00 f201 	mul.w	r2, r0, r1
   11baa:	920a      	str	r2, [sp, #40]	; 0x28
   11bac:	9803      	ldr	r0, [sp, #12]
   11bae:	9902      	ldr	r1, [sp, #8]
   11bb0:	f000 f82e 	bl	11c10 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>
   11bb4:	e7ff      	b.n	11bb6 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x36>
   11bb6:	b00c      	add	sp, #48	; 0x30
   11bb8:	bd80      	pop	{r7, pc}

00011bba <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>:
   11bba:	b580      	push	{r7, lr}
   11bbc:	b088      	sub	sp, #32
   11bbe:	9004      	str	r0, [sp, #16]
   11bc0:	9105      	str	r1, [sp, #20]
   11bc2:	2204      	movs	r2, #4
   11bc4:	9207      	str	r2, [sp, #28]
   11bc6:	9a07      	ldr	r2, [sp, #28]
   11bc8:	9103      	str	r1, [sp, #12]
   11bca:	9002      	str	r0, [sp, #8]
   11bcc:	9201      	str	r2, [sp, #4]
   11bce:	e7ff      	b.n	11bd0 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x16>
   11bd0:	9801      	ldr	r0, [sp, #4]
   11bd2:	2820      	cmp	r0, #32
   11bd4:	d306      	bcc.n	11be4 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x2a>
   11bd6:	e7ff      	b.n	11bd8 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x1e>
   11bd8:	2201      	movs	r2, #1
   11bda:	9802      	ldr	r0, [sp, #8]
   11bdc:	9903      	ldr	r1, [sp, #12]
   11bde:	f7ff ffcf 	bl	11b80 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>
   11be2:	e012      	b.n	11c0a <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x50>
   11be4:	9802      	ldr	r0, [sp, #8]
   11be6:	f000 f8a1 	bl	11d2c <_ZN4core3ptr4read17h2038b0ecb0975c4fE>
   11bea:	4601      	mov	r1, r0
   11bec:	9006      	str	r0, [sp, #24]
   11bee:	9100      	str	r1, [sp, #0]
   11bf0:	e7ff      	b.n	11bf2 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x38>
   11bf2:	2201      	movs	r2, #1
   11bf4:	9803      	ldr	r0, [sp, #12]
   11bf6:	9902      	ldr	r1, [sp, #8]
   11bf8:	f7ff ff60 	bl	11abc <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   11bfc:	e7ff      	b.n	11bfe <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x44>
   11bfe:	9803      	ldr	r0, [sp, #12]
   11c00:	9900      	ldr	r1, [sp, #0]
   11c02:	f000 f8ac 	bl	11d5e <_ZN4core3ptr5write17h4a80332de2cee3d3E>
   11c06:	e7ff      	b.n	11c08 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x4e>
   11c08:	e000      	b.n	11c0c <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   11c0a:	e7ff      	b.n	11c0c <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   11c0c:	b008      	add	sp, #32
   11c0e:	bd80      	pop	{r7, pc}

00011c10 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>:
   11c10:	b5d0      	push	{r4, r6, r7, lr}
   11c12:	af02      	add	r7, sp, #8
   11c14:	b0b4      	sub	sp, #208	; 0xd0
   11c16:	466c      	mov	r4, sp
   11c18:	f36f 0404 	bfc	r4, #0, #5
   11c1c:	46a5      	mov	sp, r4
   11c1e:	9024      	str	r0, [sp, #144]	; 0x90
   11c20:	9125      	str	r1, [sp, #148]	; 0x94
   11c22:	9226      	str	r2, [sp, #152]	; 0x98
   11c24:	2320      	movs	r3, #32
   11c26:	932f      	str	r3, [sp, #188]	; 0xbc
   11c28:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   11c2a:	9327      	str	r3, [sp, #156]	; 0x9c
   11c2c:	920e      	str	r2, [sp, #56]	; 0x38
   11c2e:	910d      	str	r1, [sp, #52]	; 0x34
   11c30:	900c      	str	r0, [sp, #48]	; 0x30
   11c32:	930b      	str	r3, [sp, #44]	; 0x2c
   11c34:	e7ff      	b.n	11c36 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x26>
   11c36:	2000      	movs	r0, #0
   11c38:	900f      	str	r0, [sp, #60]	; 0x3c
   11c3a:	e7ff      	b.n	11c3c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   11c3c:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11c3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11c40:	4408      	add	r0, r1
   11c42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11c44:	4290      	cmp	r0, r2
   11c46:	d905      	bls.n	11c54 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x44>
   11c48:	e7ff      	b.n	11c4a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x3a>
   11c4a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11c4c:	990e      	ldr	r1, [sp, #56]	; 0x38
   11c4e:	4288      	cmp	r0, r1
   11c50:	d334      	bcc.n	11cbc <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xac>
   11c52:	e067      	b.n	11d24 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   11c54:	e7ff      	b.n	11c56 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x46>
   11c56:	a810      	add	r0, sp, #64	; 0x40
   11c58:	9030      	str	r0, [sp, #192]	; 0xc0
   11c5a:	9031      	str	r0, [sp, #196]	; 0xc4
   11c5c:	e7ff      	b.n	11c5e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x4e>
   11c5e:	a810      	add	r0, sp, #64	; 0x40
   11c60:	4601      	mov	r1, r0
   11c62:	9028      	str	r0, [sp, #160]	; 0xa0
   11c64:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11c66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11c68:	900a      	str	r0, [sp, #40]	; 0x28
   11c6a:	4610      	mov	r0, r2
   11c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11c6e:	9109      	str	r1, [sp, #36]	; 0x24
   11c70:	4619      	mov	r1, r3
   11c72:	f000 f87a 	bl	11d6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11c76:	4601      	mov	r1, r0
   11c78:	9029      	str	r0, [sp, #164]	; 0xa4
   11c7a:	9108      	str	r1, [sp, #32]
   11c7c:	e7ff      	b.n	11c7e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x6e>
   11c7e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11c80:	980d      	ldr	r0, [sp, #52]	; 0x34
   11c82:	f000 f872 	bl	11d6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11c86:	4601      	mov	r1, r0
   11c88:	902a      	str	r0, [sp, #168]	; 0xa8
   11c8a:	9107      	str	r1, [sp, #28]
   11c8c:	e7ff      	b.n	11c8e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x7e>
   11c8e:	9808      	ldr	r0, [sp, #32]
   11c90:	9909      	ldr	r1, [sp, #36]	; 0x24
   11c92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11c94:	f7ff ff05 	bl	11aa2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11c98:	e7ff      	b.n	11c9a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x8a>
   11c9a:	9807      	ldr	r0, [sp, #28]
   11c9c:	9908      	ldr	r1, [sp, #32]
   11c9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11ca0:	f7ff feff 	bl	11aa2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11ca4:	e7ff      	b.n	11ca6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x96>
   11ca6:	9809      	ldr	r0, [sp, #36]	; 0x24
   11ca8:	9907      	ldr	r1, [sp, #28]
   11caa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11cac:	f7ff fef9 	bl	11aa2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11cb0:	e7ff      	b.n	11cb2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xa2>
   11cb2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11cb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11cb6:	4408      	add	r0, r1
   11cb8:	900f      	str	r0, [sp, #60]	; 0x3c
   11cba:	e7bf      	b.n	11c3c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   11cbc:	e7ff      	b.n	11cbe <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xae>
   11cbe:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11cc0:	990e      	ldr	r1, [sp, #56]	; 0x38
   11cc2:	1a08      	subs	r0, r1, r0
   11cc4:	4602      	mov	r2, r0
   11cc6:	902b      	str	r0, [sp, #172]	; 0xac
   11cc8:	a81c      	add	r0, sp, #112	; 0x70
   11cca:	9032      	str	r0, [sp, #200]	; 0xc8
   11ccc:	9033      	str	r0, [sp, #204]	; 0xcc
   11cce:	9206      	str	r2, [sp, #24]
   11cd0:	9005      	str	r0, [sp, #20]
   11cd2:	e7ff      	b.n	11cd4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xc4>
   11cd4:	9805      	ldr	r0, [sp, #20]
   11cd6:	9905      	ldr	r1, [sp, #20]
   11cd8:	912c      	str	r1, [sp, #176]	; 0xb0
   11cda:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11cdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11cde:	9004      	str	r0, [sp, #16]
   11ce0:	4610      	mov	r0, r2
   11ce2:	f000 f842 	bl	11d6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11ce6:	4601      	mov	r1, r0
   11ce8:	902d      	str	r0, [sp, #180]	; 0xb4
   11cea:	9103      	str	r1, [sp, #12]
   11cec:	e7ff      	b.n	11cee <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xde>
   11cee:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11cf0:	980d      	ldr	r0, [sp, #52]	; 0x34
   11cf2:	f000 f83a 	bl	11d6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11cf6:	4601      	mov	r1, r0
   11cf8:	902e      	str	r0, [sp, #184]	; 0xb8
   11cfa:	9102      	str	r1, [sp, #8]
   11cfc:	e7ff      	b.n	11cfe <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xee>
   11cfe:	9803      	ldr	r0, [sp, #12]
   11d00:	9904      	ldr	r1, [sp, #16]
   11d02:	9a06      	ldr	r2, [sp, #24]
   11d04:	f7ff fecd 	bl	11aa2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11d08:	e7ff      	b.n	11d0a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xfa>
   11d0a:	9802      	ldr	r0, [sp, #8]
   11d0c:	9903      	ldr	r1, [sp, #12]
   11d0e:	9a06      	ldr	r2, [sp, #24]
   11d10:	f7ff fec7 	bl	11aa2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11d14:	e7ff      	b.n	11d16 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x106>
   11d16:	9804      	ldr	r0, [sp, #16]
   11d18:	9902      	ldr	r1, [sp, #8]
   11d1a:	9a06      	ldr	r2, [sp, #24]
   11d1c:	f7ff fec1 	bl	11aa2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11d20:	e7ff      	b.n	11d22 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x112>
   11d22:	e7ff      	b.n	11d24 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   11d24:	f1a7 0408 	sub.w	r4, r7, #8
   11d28:	46a5      	mov	sp, r4
   11d2a:	bdd0      	pop	{r4, r6, r7, pc}

00011d2c <_ZN4core3ptr4read17h2038b0ecb0975c4fE>:
   11d2c:	b580      	push	{r7, lr}
   11d2e:	b08a      	sub	sp, #40	; 0x28
   11d30:	9004      	str	r0, [sp, #16]
   11d32:	9905      	ldr	r1, [sp, #20]
   11d34:	9103      	str	r1, [sp, #12]
   11d36:	9002      	str	r0, [sp, #8]
   11d38:	e7ff      	b.n	11d3a <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0xe>
   11d3a:	a803      	add	r0, sp, #12
   11d3c:	9008      	str	r0, [sp, #32]
   11d3e:	9009      	str	r0, [sp, #36]	; 0x24
   11d40:	e7ff      	b.n	11d42 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x16>
   11d42:	a903      	add	r1, sp, #12
   11d44:	2201      	movs	r2, #1
   11d46:	9802      	ldr	r0, [sp, #8]
   11d48:	f7ff feb8 	bl	11abc <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   11d4c:	e7ff      	b.n	11d4e <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x22>
   11d4e:	9803      	ldr	r0, [sp, #12]
   11d50:	9006      	str	r0, [sp, #24]
   11d52:	9007      	str	r0, [sp, #28]
   11d54:	9001      	str	r0, [sp, #4]
   11d56:	e7ff      	b.n	11d58 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x2c>
   11d58:	9801      	ldr	r0, [sp, #4]
   11d5a:	b00a      	add	sp, #40	; 0x28
   11d5c:	bd80      	pop	{r7, pc}

00011d5e <_ZN4core3ptr5write17h4a80332de2cee3d3E>:
   11d5e:	b082      	sub	sp, #8
   11d60:	9000      	str	r0, [sp, #0]
   11d62:	9101      	str	r1, [sp, #4]
   11d64:	6001      	str	r1, [r0, #0]
   11d66:	b002      	add	sp, #8
   11d68:	4770      	bx	lr

00011d6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>:
   11d6a:	b580      	push	{r7, lr}
   11d6c:	b084      	sub	sp, #16
   11d6e:	9002      	str	r0, [sp, #8]
   11d70:	9103      	str	r1, [sp, #12]
   11d72:	f000 f805 	bl	11d80 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>
   11d76:	9001      	str	r0, [sp, #4]
   11d78:	e7ff      	b.n	11d7a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E+0x10>
   11d7a:	9801      	ldr	r0, [sp, #4]
   11d7c:	b004      	add	sp, #16
   11d7e:	bd80      	pop	{r7, pc}

00011d80 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>:
   11d80:	b084      	sub	sp, #16
   11d82:	9001      	str	r0, [sp, #4]
   11d84:	9102      	str	r1, [sp, #8]
   11d86:	4408      	add	r0, r1
   11d88:	9003      	str	r0, [sp, #12]
   11d8a:	9803      	ldr	r0, [sp, #12]
   11d8c:	9000      	str	r0, [sp, #0]
   11d8e:	e7ff      	b.n	11d90 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE+0x10>
   11d90:	9800      	ldr	r0, [sp, #0]
   11d92:	b004      	add	sp, #16
   11d94:	4770      	bx	lr

00011d96 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>:
   11d96:	b580      	push	{r7, lr}
   11d98:	b084      	sub	sp, #16
   11d9a:	9002      	str	r0, [sp, #8]
   11d9c:	9103      	str	r1, [sp, #12]
   11d9e:	f000 f805 	bl	11dac <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>
   11da2:	9001      	str	r0, [sp, #4]
   11da4:	e7ff      	b.n	11da6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE+0x10>
   11da6:	9801      	ldr	r0, [sp, #4]
   11da8:	b004      	add	sp, #16
   11daa:	bd80      	pop	{r7, pc}

00011dac <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>:
   11dac:	b084      	sub	sp, #16
   11dae:	9001      	str	r0, [sp, #4]
   11db0:	9102      	str	r1, [sp, #8]
   11db2:	4408      	add	r0, r1
   11db4:	9003      	str	r0, [sp, #12]
   11db6:	9803      	ldr	r0, [sp, #12]
   11db8:	9000      	str	r0, [sp, #0]
   11dba:	e7ff      	b.n	11dbc <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE+0x10>
   11dbc:	9800      	ldr	r0, [sp, #0]
   11dbe:	b004      	add	sp, #16
   11dc0:	4770      	bx	lr

00011dc2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>:
   11dc2:	b580      	push	{r7, lr}
   11dc4:	b08a      	sub	sp, #40	; 0x28
   11dc6:	9009      	str	r0, [sp, #36]	; 0x24
   11dc8:	2100      	movs	r1, #0
   11dca:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   11dce:	1d01      	adds	r1, r0, #4
   11dd0:	9002      	str	r0, [sp, #8]
   11dd2:	f7ff fe81 	bl	11ad8 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>
   11dd6:	9001      	str	r0, [sp, #4]
   11dd8:	e7ff      	b.n	11dda <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x18>
   11dda:	9801      	ldr	r0, [sp, #4]
   11ddc:	07c1      	lsls	r1, r0, #31
   11dde:	2900      	cmp	r1, #0
   11de0:	d103      	bne.n	11dea <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x28>
   11de2:	e7ff      	b.n	11de4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x22>
   11de4:	2000      	movs	r0, #0
   11de6:	9003      	str	r0, [sp, #12]
   11de8:	e021      	b.n	11e2e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   11dea:	2001      	movs	r0, #1
   11dec:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11df0:	9902      	ldr	r1, [sp, #8]
   11df2:	9000      	str	r0, [sp, #0]
   11df4:	4608      	mov	r0, r1
   11df6:	9900      	ldr	r1, [sp, #0]
   11df8:	f7ff fe39 	bl	11a6e <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>
   11dfc:	9106      	str	r1, [sp, #24]
   11dfe:	9005      	str	r0, [sp, #20]
   11e00:	e7ff      	b.n	11e02 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x40>
   11e02:	9805      	ldr	r0, [sp, #20]
   11e04:	2801      	cmp	r0, #1
   11e06:	d003      	beq.n	11e10 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x4e>
   11e08:	e7ff      	b.n	11e0a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x48>
   11e0a:	2000      	movs	r0, #0
   11e0c:	9003      	str	r0, [sp, #12]
   11e0e:	e021      	b.n	11e54 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   11e10:	2000      	movs	r0, #0
   11e12:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11e16:	9806      	ldr	r0, [sp, #24]
   11e18:	9007      	str	r0, [sp, #28]
   11e1a:	a807      	add	r0, sp, #28
   11e1c:	9902      	ldr	r1, [sp, #8]
   11e1e:	f7ff fe67 	bl	11af0 <_ZN4core3mem4swap17hc4afbec7b5ffb125E>
   11e22:	e7ff      	b.n	11e24 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x62>
   11e24:	9807      	ldr	r0, [sp, #28]
   11e26:	9004      	str	r0, [sp, #16]
   11e28:	2001      	movs	r0, #1
   11e2a:	9003      	str	r0, [sp, #12]
   11e2c:	e012      	b.n	11e54 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   11e2e:	9803      	ldr	r0, [sp, #12]
   11e30:	9904      	ldr	r1, [sp, #16]
   11e32:	b00a      	add	sp, #40	; 0x28
   11e34:	bd80      	pop	{r7, pc}
   11e36:	2000      	movs	r0, #0
   11e38:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11e3c:	e7f7      	b.n	11e2e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   11e3e:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   11e42:	07c0      	lsls	r0, r0, #31
   11e44:	2800      	cmp	r0, #0
   11e46:	d0f6      	beq.n	11e36 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   11e48:	e7ff      	b.n	11e4a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x88>
   11e4a:	2000      	movs	r0, #0
   11e4c:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11e50:	e7f1      	b.n	11e36 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   11e52:	e7f0      	b.n	11e36 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   11e54:	9805      	ldr	r0, [sp, #20]
   11e56:	2801      	cmp	r0, #1
   11e58:	d0f1      	beq.n	11e3e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x7c>
   11e5a:	e7fa      	b.n	11e52 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x90>

00011e5c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>:
   11e5c:	b082      	sub	sp, #8
   11e5e:	9000      	str	r0, [sp, #0]
   11e60:	9101      	str	r1, [sp, #4]
   11e62:	b002      	add	sp, #8
   11e64:	4770      	bx	lr

00011e66 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>:
   11e66:	b580      	push	{r7, lr}
   11e68:	b086      	sub	sp, #24
   11e6a:	9003      	str	r0, [sp, #12]
   11e6c:	9104      	str	r1, [sp, #16]
   11e6e:	9205      	str	r2, [sp, #20]
   11e70:	9002      	str	r0, [sp, #8]
   11e72:	4610      	mov	r0, r2
   11e74:	9a02      	ldr	r2, [sp, #8]
   11e76:	9101      	str	r1, [sp, #4]
   11e78:	4611      	mov	r1, r2
   11e7a:	9a01      	ldr	r2, [sp, #4]
   11e7c:	f000 f846 	bl	11f0c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>
   11e80:	9000      	str	r0, [sp, #0]
   11e82:	e7ff      	b.n	11e84 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E+0x1e>
   11e84:	9800      	ldr	r0, [sp, #0]
   11e86:	b006      	add	sp, #24
   11e88:	bd80      	pop	{r7, pc}

00011e8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>:
   11e8a:	b084      	sub	sp, #16
   11e8c:	9002      	str	r0, [sp, #8]
   11e8e:	9103      	str	r1, [sp, #12]
   11e90:	9000      	str	r0, [sp, #0]
   11e92:	9101      	str	r1, [sp, #4]
   11e94:	9801      	ldr	r0, [sp, #4]
   11e96:	b004      	add	sp, #16
   11e98:	4770      	bx	lr

00011e9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>:
   11e9a:	b082      	sub	sp, #8
   11e9c:	9000      	str	r0, [sp, #0]
   11e9e:	9101      	str	r1, [sp, #4]
   11ea0:	b002      	add	sp, #8
   11ea2:	4770      	bx	lr

00011ea4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>:
   11ea4:	b081      	sub	sp, #4
   11ea6:	9000      	str	r0, [sp, #0]
   11ea8:	b001      	add	sp, #4
   11eaa:	4770      	bx	lr

00011eac <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>:
   11eac:	b580      	push	{r7, lr}
   11eae:	b082      	sub	sp, #8
   11eb0:	9001      	str	r0, [sp, #4]
   11eb2:	f7ff fff7 	bl	11ea4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>
   11eb6:	9000      	str	r0, [sp, #0]
   11eb8:	e7ff      	b.n	11eba <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE+0xe>
   11eba:	9800      	ldr	r0, [sp, #0]
   11ebc:	b002      	add	sp, #8
   11ebe:	bd80      	pop	{r7, pc}

00011ec0 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>:
   11ec0:	b580      	push	{r7, lr}
   11ec2:	b084      	sub	sp, #16
   11ec4:	9003      	str	r0, [sp, #12]
   11ec6:	f7ff fff1 	bl	11eac <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>
   11eca:	9001      	str	r0, [sp, #4]
   11ecc:	e7ff      	b.n	11ece <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E+0xe>
   11ece:	9801      	ldr	r0, [sp, #4]
   11ed0:	9002      	str	r0, [sp, #8]
   11ed2:	9802      	ldr	r0, [sp, #8]
   11ed4:	b004      	add	sp, #16
   11ed6:	bd80      	pop	{r7, pc}

00011ed8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>:
   11ed8:	b082      	sub	sp, #8
   11eda:	9000      	str	r0, [sp, #0]
   11edc:	9101      	str	r1, [sp, #4]
   11ede:	b002      	add	sp, #8
   11ee0:	4770      	bx	lr

00011ee2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>:
   11ee2:	b580      	push	{r7, lr}
   11ee4:	b086      	sub	sp, #24
   11ee6:	9003      	str	r0, [sp, #12]
   11ee8:	9104      	str	r1, [sp, #16]
   11eea:	9205      	str	r2, [sp, #20]
   11eec:	9002      	str	r0, [sp, #8]
   11eee:	4608      	mov	r0, r1
   11ef0:	4611      	mov	r1, r2
   11ef2:	f7ff ffd2 	bl	11e9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   11ef6:	9001      	str	r0, [sp, #4]
   11ef8:	e7ff      	b.n	11efa <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x18>
   11efa:	9801      	ldr	r0, [sp, #4]
   11efc:	9902      	ldr	r1, [sp, #8]
   11efe:	f7ff ff4a 	bl	11d96 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>
   11f02:	9000      	str	r0, [sp, #0]
   11f04:	e7ff      	b.n	11f06 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x24>
   11f06:	9800      	ldr	r0, [sp, #0]
   11f08:	b006      	add	sp, #24
   11f0a:	bd80      	pop	{r7, pc}

00011f0c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>:
   11f0c:	b580      	push	{r7, lr}
   11f0e:	b086      	sub	sp, #24
   11f10:	9003      	str	r0, [sp, #12]
   11f12:	9104      	str	r1, [sp, #16]
   11f14:	9205      	str	r2, [sp, #20]
   11f16:	9002      	str	r0, [sp, #8]
   11f18:	4608      	mov	r0, r1
   11f1a:	4611      	mov	r1, r2
   11f1c:	f7ff ff9e 	bl	11e5c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
   11f20:	9001      	str	r0, [sp, #4]
   11f22:	e7ff      	b.n	11f24 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x18>
   11f24:	9801      	ldr	r0, [sp, #4]
   11f26:	9902      	ldr	r1, [sp, #8]
   11f28:	f7ff ff1f 	bl	11d6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11f2c:	9000      	str	r0, [sp, #0]
   11f2e:	e7ff      	b.n	11f30 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x24>
   11f30:	9800      	ldr	r0, [sp, #0]
   11f32:	b006      	add	sp, #24
   11f34:	bd80      	pop	{r7, pc}

00011f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>:
   11f36:	b081      	sub	sp, #4
   11f38:	b001      	add	sp, #4
   11f3a:	4770      	bx	lr

00011f3c <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>:
   11f3c:	b580      	push	{r7, lr}
   11f3e:	b086      	sub	sp, #24
   11f40:	f8dd c020 	ldr.w	ip, [sp, #32]
   11f44:	9102      	str	r1, [sp, #8]
   11f46:	9203      	str	r2, [sp, #12]
   11f48:	9304      	str	r3, [sp, #16]
   11f4a:	f8cd c014 	str.w	ip, [sp, #20]
   11f4e:	f04f 0e00 	mov.w	lr, #0
   11f52:	f8cd e004 	str.w	lr, [sp, #4]
   11f56:	f8cd e000 	str.w	lr, [sp]
   11f5a:	f8cd e000 	str.w	lr, [sp]
   11f5e:	6001      	str	r1, [r0, #0]
   11f60:	6042      	str	r2, [r0, #4]
   11f62:	9900      	ldr	r1, [sp, #0]
   11f64:	9a01      	ldr	r2, [sp, #4]
   11f66:	6081      	str	r1, [r0, #8]
   11f68:	60c2      	str	r2, [r0, #12]
   11f6a:	6103      	str	r3, [r0, #16]
   11f6c:	f8c0 c014 	str.w	ip, [r0, #20]
   11f70:	b006      	add	sp, #24
   11f72:	bd80      	pop	{r7, pc}

00011f74 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>:
   11f74:	b580      	push	{r7, lr}
   11f76:	b084      	sub	sp, #16
   11f78:	9101      	str	r1, [sp, #4]
   11f7a:	9202      	str	r2, [sp, #8]
   11f7c:	9901      	ldr	r1, [sp, #4]
   11f7e:	9a02      	ldr	r2, [sp, #8]
   11f80:	f000 fa95 	bl	124ae <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>
   11f84:	e7ff      	b.n	11f86 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE+0x12>
   11f86:	b004      	add	sp, #16
   11f88:	bd80      	pop	{r7, pc}

00011f8a <_ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE>:
   11f8a:	b081      	sub	sp, #4
   11f8c:	9000      	str	r0, [sp, #0]
   11f8e:	b001      	add	sp, #4
   11f90:	4770      	bx	lr

00011f92 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>:
   11f92:	b081      	sub	sp, #4
   11f94:	9000      	str	r0, [sp, #0]
   11f96:	b001      	add	sp, #4
   11f98:	4770      	bx	lr

00011f9a <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>:
   11f9a:	b580      	push	{r7, lr}
   11f9c:	b086      	sub	sp, #24
   11f9e:	460a      	mov	r2, r1
   11fa0:	9004      	str	r0, [sp, #16]
   11fa2:	f88d 1017 	strb.w	r1, [sp, #23]
   11fa6:	9203      	str	r2, [sp, #12]
   11fa8:	f7ff fff3 	bl	11f92 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   11fac:	9002      	str	r0, [sp, #8]
   11fae:	e7ff      	b.n	11fb0 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x16>
   11fb0:	9802      	ldr	r0, [sp, #8]
   11fb2:	9903      	ldr	r1, [sp, #12]
   11fb4:	f000 f806 	bl	11fc4 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   11fb8:	9001      	str	r0, [sp, #4]
   11fba:	e7ff      	b.n	11fbc <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x22>
   11fbc:	9801      	ldr	r0, [sp, #4]
   11fbe:	b006      	add	sp, #24
   11fc0:	bd80      	pop	{r7, pc}
	...

00011fc4 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>:
   11fc4:	b086      	sub	sp, #24
   11fc6:	460a      	mov	r2, r1
   11fc8:	f88d 100f 	strb.w	r1, [sp, #15]
   11fcc:	9005      	str	r0, [sp, #20]
   11fce:	f89d 100f 	ldrb.w	r1, [sp, #15]
   11fd2:	9002      	str	r0, [sp, #8]
   11fd4:	9101      	str	r1, [sp, #4]
   11fd6:	9901      	ldr	r1, [sp, #4]
   11fd8:	e8df f001 	tbb	[pc, r1]
   11fdc:	03102317 	.word	0x03102317
   11fe0:	001c      	.short	0x001c
   11fe2:	f64f 707c 	movw	r0, #65404	; 0xff7c
   11fe6:	f2c0 0001 	movt	r0, #1
   11fea:	f64f 72f8 	movw	r2, #65528	; 0xfff8
   11fee:	f2c0 0201 	movt	r2, #1
   11ff2:	2131      	movs	r1, #49	; 0x31
   11ff4:	f005 fc88 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11ff8:	defe      	udf	#254	; 0xfe
   11ffa:	defe      	udf	#254	; 0xfe
   11ffc:	9802      	ldr	r0, [sp, #8]
   11ffe:	6801      	ldr	r1, [r0, #0]
   12000:	f3bf 8f5f 	dmb	sy
   12004:	9104      	str	r1, [sp, #16]
   12006:	e7ff      	b.n	12008 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x44>
   12008:	e017      	b.n	1203a <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   1200a:	9802      	ldr	r0, [sp, #8]
   1200c:	6801      	ldr	r1, [r0, #0]
   1200e:	9104      	str	r1, [sp, #16]
   12010:	e7ff      	b.n	12012 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x4e>
   12012:	e012      	b.n	1203a <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   12014:	9802      	ldr	r0, [sp, #8]
   12016:	6801      	ldr	r1, [r0, #0]
   12018:	f3bf 8f5f 	dmb	sy
   1201c:	9104      	str	r1, [sp, #16]
   1201e:	e7ff      	b.n	12020 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x5c>
   12020:	e00b      	b.n	1203a <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   12022:	f240 0008 	movw	r0, #8
   12026:	f2c0 0002 	movt	r0, #2
   1202a:	f64f 72f8 	movw	r2, #65528	; 0xfff8
   1202e:	f2c0 0201 	movt	r2, #1
   12032:	2128      	movs	r1, #40	; 0x28
   12034:	f005 fc68 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12038:	defe      	udf	#254	; 0xfe
   1203a:	9804      	ldr	r0, [sp, #16]
   1203c:	b006      	add	sp, #24
   1203e:	4770      	bx	lr

00012040 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>:
   12040:	b081      	sub	sp, #4
   12042:	9000      	str	r0, [sp, #0]
   12044:	6800      	ldr	r0, [r0, #0]
   12046:	b001      	add	sp, #4
   12048:	4770      	bx	lr

0001204a <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>:
   1204a:	b082      	sub	sp, #8
   1204c:	9001      	str	r0, [sp, #4]
   1204e:	6801      	ldr	r1, [r0, #0]
   12050:	6840      	ldr	r0, [r0, #4]
   12052:	9000      	str	r0, [sp, #0]
   12054:	4608      	mov	r0, r1
   12056:	9900      	ldr	r1, [sp, #0]
   12058:	b002      	add	sp, #8
   1205a:	4770      	bx	lr

0001205c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>:
   1205c:	b580      	push	{r7, lr}
   1205e:	b08c      	sub	sp, #48	; 0x30
   12060:	9101      	str	r1, [sp, #4]
   12062:	9202      	str	r2, [sp, #8]
   12064:	2100      	movs	r1, #0
   12066:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   1206a:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   1206e:	2101      	movs	r1, #1
   12070:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   12074:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   12078:	9901      	ldr	r1, [sp, #4]
   1207a:	2900      	cmp	r1, #0
   1207c:	460a      	mov	r2, r1
   1207e:	bf18      	it	ne
   12080:	2201      	movne	r2, #1
   12082:	2900      	cmp	r1, #0
   12084:	9000      	str	r0, [sp, #0]
   12086:	d001      	beq.n	1208c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x30>
   12088:	e7ff      	b.n	1208a <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x2e>
   1208a:	e008      	b.n	1209e <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x42>
   1208c:	2000      	movs	r0, #0
   1208e:	9900      	ldr	r1, [sp, #0]
   12090:	6088      	str	r0, [r1, #8]
   12092:	6048      	str	r0, [r1, #4]
   12094:	6008      	str	r0, [r1, #0]
   12096:	2002      	movs	r0, #2
   12098:	6008      	str	r0, [r1, #0]
   1209a:	e021      	b.n	120e0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   1209c:	defe      	udf	#254	; 0xfe
   1209e:	2000      	movs	r0, #0
   120a0:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   120a4:	9901      	ldr	r1, [sp, #4]
   120a6:	9a02      	ldr	r2, [sp, #8]
   120a8:	910a      	str	r1, [sp, #40]	; 0x28
   120aa:	920b      	str	r2, [sp, #44]	; 0x2c
   120ac:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   120b0:	9106      	str	r1, [sp, #24]
   120b2:	9207      	str	r2, [sp, #28]
   120b4:	9906      	ldr	r1, [sp, #24]
   120b6:	9a07      	ldr	r2, [sp, #28]
   120b8:	a803      	add	r0, sp, #12
   120ba:	f7ff ff5b 	bl	11f74 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>
   120be:	e7ff      	b.n	120c0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x64>
   120c0:	9803      	ldr	r0, [sp, #12]
   120c2:	9904      	ldr	r1, [sp, #16]
   120c4:	9a05      	ldr	r2, [sp, #20]
   120c6:	9b00      	ldr	r3, [sp, #0]
   120c8:	609a      	str	r2, [r3, #8]
   120ca:	6059      	str	r1, [r3, #4]
   120cc:	6018      	str	r0, [r3, #0]
   120ce:	e007      	b.n	120e0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   120d0:	9801      	ldr	r0, [sp, #4]
   120d2:	2800      	cmp	r0, #0
   120d4:	d10c      	bne.n	120f0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x94>
   120d6:	e015      	b.n	12104 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa8>
   120d8:	2000      	movs	r0, #0
   120da:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   120de:	e7f7      	b.n	120d0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   120e0:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   120e4:	07c0      	lsls	r0, r0, #31
   120e6:	2800      	cmp	r0, #0
   120e8:	d1f6      	bne.n	120d8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x7c>
   120ea:	e7f1      	b.n	120d0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   120ec:	b00c      	add	sp, #48	; 0x30
   120ee:	bd80      	pop	{r7, pc}
   120f0:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   120f4:	07c0      	lsls	r0, r0, #31
   120f6:	2800      	cmp	r0, #0
   120f8:	d0f8      	beq.n	120ec <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   120fa:	e7ff      	b.n	120fc <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa0>
   120fc:	2000      	movs	r0, #0
   120fe:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   12102:	e7f3      	b.n	120ec <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   12104:	e7f2      	b.n	120ec <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>

00012106 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>:
   12106:	b081      	sub	sp, #4
   12108:	b001      	add	sp, #4
   1210a:	4770      	bx	lr

0001210c <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>:
   1210c:	b5b0      	push	{r4, r5, r7, lr}
   1210e:	b081      	sub	sp, #4
   12110:	9100      	str	r1, [sp, #0]
   12112:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   12116:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   1211a:	b001      	add	sp, #4
   1211c:	bdb0      	pop	{r4, r5, r7, pc}

0001211e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>:
   1211e:	b580      	push	{r7, lr}
   12120:	b088      	sub	sp, #32
   12122:	9106      	str	r1, [sp, #24]
   12124:	680a      	ldr	r2, [r1, #0]
   12126:	1e93      	subs	r3, r2, #2
   12128:	bf18      	it	ne
   1212a:	2301      	movne	r3, #1
   1212c:	2a02      	cmp	r2, #2
   1212e:	9102      	str	r1, [sp, #8]
   12130:	9001      	str	r0, [sp, #4]
   12132:	d001      	beq.n	12138 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x1a>
   12134:	e7ff      	b.n	12136 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x18>
   12136:	e008      	b.n	1214a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x2c>
   12138:	2000      	movs	r0, #0
   1213a:	9901      	ldr	r1, [sp, #4]
   1213c:	6088      	str	r0, [r1, #8]
   1213e:	6048      	str	r0, [r1, #4]
   12140:	6008      	str	r0, [r1, #0]
   12142:	2002      	movs	r0, #2
   12144:	6008      	str	r0, [r1, #0]
   12146:	e00f      	b.n	12168 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   12148:	defe      	udf	#254	; 0xfe
   1214a:	9802      	ldr	r0, [sp, #8]
   1214c:	9007      	str	r0, [sp, #28]
   1214e:	a803      	add	r0, sp, #12
   12150:	9902      	ldr	r1, [sp, #8]
   12152:	f000 f9b5 	bl	124c0 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>
   12156:	e7ff      	b.n	12158 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x3a>
   12158:	9803      	ldr	r0, [sp, #12]
   1215a:	9904      	ldr	r1, [sp, #16]
   1215c:	9a05      	ldr	r2, [sp, #20]
   1215e:	9b01      	ldr	r3, [sp, #4]
   12160:	609a      	str	r2, [r3, #8]
   12162:	6059      	str	r1, [r3, #4]
   12164:	6018      	str	r0, [r3, #0]
   12166:	e7ff      	b.n	12168 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   12168:	b008      	add	sp, #32
   1216a:	bd80      	pop	{r7, pc}

0001216c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>:
   1216c:	b580      	push	{r7, lr}
   1216e:	b086      	sub	sp, #24
   12170:	9004      	str	r0, [sp, #16]
   12172:	6801      	ldr	r1, [r0, #0]
   12174:	2900      	cmp	r1, #0
   12176:	9001      	str	r0, [sp, #4]
   12178:	d001      	beq.n	1217e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x12>
   1217a:	e7ff      	b.n	1217c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x10>
   1217c:	e003      	b.n	12186 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x1a>
   1217e:	2000      	movs	r0, #0
   12180:	9002      	str	r0, [sp, #8]
   12182:	e00d      	b.n	121a0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   12184:	defe      	udf	#254	; 0xfe
   12186:	9801      	ldr	r0, [sp, #4]
   12188:	1d01      	adds	r1, r0, #4
   1218a:	9105      	str	r1, [sp, #20]
   1218c:	4608      	mov	r0, r1
   1218e:	f7ff ff57 	bl	12040 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>
   12192:	9000      	str	r0, [sp, #0]
   12194:	e7ff      	b.n	12196 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x2a>
   12196:	9800      	ldr	r0, [sp, #0]
   12198:	9003      	str	r0, [sp, #12]
   1219a:	2101      	movs	r1, #1
   1219c:	9102      	str	r1, [sp, #8]
   1219e:	e7ff      	b.n	121a0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   121a0:	9802      	ldr	r0, [sp, #8]
   121a2:	9903      	ldr	r1, [sp, #12]
   121a4:	b006      	add	sp, #24
   121a6:	bd80      	pop	{r7, pc}

000121a8 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>:
    fn clone(&self) -> Level {
   121a8:	b081      	sub	sp, #4
   121aa:	9000      	str	r0, [sp, #0]
        *self
   121ac:	6800      	ldr	r0, [r0, #0]
    }
   121ae:	b001      	add	sp, #4
   121b0:	4770      	bx	lr

000121b2 <_ZN3log6Record7builder17hde62ab0132265febE>:
    pub fn builder() -> RecordBuilder<'a> {
   121b2:	b580      	push	{r7, lr}
        RecordBuilder::new()
   121b4:	f000 f802 	bl	121bc <_ZN3log13RecordBuilder3new17haca8312579858419E>
   121b8:	e7ff      	b.n	121ba <_ZN3log6Record7builder17hde62ab0132265febE+0x8>
    }
   121ba:	bd80      	pop	{r7, pc}

000121bc <_ZN3log13RecordBuilder3new17haca8312579858419E>:
    pub fn new() -> RecordBuilder<'a> {
   121bc:	b570      	push	{r4, r5, r6, lr}
   121be:	b0aa      	sub	sp, #168	; 0xa8
                args: format_args!(""),
   121c0:	f240 0148 	movw	r1, #72	; 0x48
   121c4:	f2c0 0102 	movt	r1, #2
   121c8:	6809      	ldr	r1, [r1, #0]
   121ca:	466a      	mov	r2, sp
   121cc:	2300      	movs	r3, #0
   121ce:	6013      	str	r3, [r2, #0]
   121d0:	aa16      	add	r2, sp, #88	; 0x58
   121d2:	9004      	str	r0, [sp, #16]
   121d4:	4610      	mov	r0, r2
   121d6:	9103      	str	r1, [sp, #12]
   121d8:	461a      	mov	r2, r3
   121da:	9b03      	ldr	r3, [sp, #12]
   121dc:	f7ff feae 	bl	11f3c <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>
   121e0:	e7ff      	b.n	121e2 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x26>
   121e2:	a81f      	add	r0, sp, #124	; 0x7c
                metadata: Metadata::builder().build(),
   121e4:	f000 f891 	bl	1230a <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>
   121e8:	e7ff      	b.n	121ea <_ZN3log13RecordBuilder3new17haca8312579858419E+0x2e>
   121ea:	a81c      	add	r0, sp, #112	; 0x70
   121ec:	a91f      	add	r1, sp, #124	; 0x7c
   121ee:	f000 f8a5 	bl	1233c <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>
   121f2:	e7ff      	b.n	121f4 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x38>
   121f4:	2000      	movs	r0, #0
                module_path: None,
   121f6:	9024      	str	r0, [sp, #144]	; 0x90
   121f8:	9023      	str	r0, [sp, #140]	; 0x8c
   121fa:	9022      	str	r0, [sp, #136]	; 0x88
   121fc:	2102      	movs	r1, #2
   121fe:	9122      	str	r1, [sp, #136]	; 0x88
                file: None,
   12200:	9027      	str	r0, [sp, #156]	; 0x9c
   12202:	9026      	str	r0, [sp, #152]	; 0x98
   12204:	9025      	str	r0, [sp, #148]	; 0x94
   12206:	9125      	str	r1, [sp, #148]	; 0x94
                line: None,
   12208:	9028      	str	r0, [sp, #160]	; 0xa0
            record: Record {
   1220a:	981c      	ldr	r0, [sp, #112]	; 0x70
   1220c:	991d      	ldr	r1, [sp, #116]	; 0x74
   1220e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   12210:	9207      	str	r2, [sp, #28]
   12212:	9106      	str	r1, [sp, #24]
   12214:	9005      	str	r0, [sp, #20]
   12216:	a805      	add	r0, sp, #20
   12218:	f100 010c 	add.w	r1, r0, #12
   1221c:	aa16      	add	r2, sp, #88	; 0x58
   1221e:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   12222:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   12226:	9922      	ldr	r1, [sp, #136]	; 0x88
   12228:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1222a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1222c:	9310      	str	r3, [sp, #64]	; 0x40
   1222e:	920f      	str	r2, [sp, #60]	; 0x3c
   12230:	910e      	str	r1, [sp, #56]	; 0x38
   12232:	9925      	ldr	r1, [sp, #148]	; 0x94
   12234:	9a26      	ldr	r2, [sp, #152]	; 0x98
   12236:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   12238:	9313      	str	r3, [sp, #76]	; 0x4c
   1223a:	9212      	str	r2, [sp, #72]	; 0x48
   1223c:	9111      	str	r1, [sp, #68]	; 0x44
   1223e:	9928      	ldr	r1, [sp, #160]	; 0xa0
   12240:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   12242:	9114      	str	r1, [sp, #80]	; 0x50
   12244:	9215      	str	r2, [sp, #84]	; 0x54
   12246:	2244      	movs	r2, #68	; 0x44
        return RecordBuilder {
   12248:	9904      	ldr	r1, [sp, #16]
   1224a:	9002      	str	r0, [sp, #8]
   1224c:	4608      	mov	r0, r1
   1224e:	9902      	ldr	r1, [sp, #8]
   12250:	f00b ff2e 	bl	1e0b0 <__aeabi_memcpy>
    }
   12254:	b02a      	add	sp, #168	; 0xa8
   12256:	bd70      	pop	{r4, r5, r6, pc}

00012258 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>:
    pub fn args(&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a> {
   12258:	b5f0      	push	{r4, r5, r6, r7, lr}
   1225a:	b087      	sub	sp, #28
   1225c:	9006      	str	r0, [sp, #24]
   1225e:	466a      	mov	r2, sp
        self.record.args = args;
   12260:	4613      	mov	r3, r2
   12262:	e891 50f0 	ldmia.w	r1, {r4, r5, r6, r7, ip, lr}
   12266:	e883 50f0 	stmia.w	r3, {r4, r5, r6, r7, ip, lr}
   1226a:	f100 010c 	add.w	r1, r0, #12
   1226e:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   12272:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    }
   12276:	b007      	add	sp, #28
   12278:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001227a <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>:
    pub fn level(&mut self, level: Level) -> &mut RecordBuilder<'a> {
   1227a:	b082      	sub	sp, #8
   1227c:	9000      	str	r0, [sp, #0]
   1227e:	9101      	str	r1, [sp, #4]
        self.record.metadata.level = level;
   12280:	6001      	str	r1, [r0, #0]
    }
   12282:	b002      	add	sp, #8
   12284:	4770      	bx	lr

00012286 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>:
    pub fn target(&mut self, target: &'a str) -> &mut RecordBuilder<'a> {
   12286:	b083      	sub	sp, #12
   12288:	9000      	str	r0, [sp, #0]
   1228a:	9101      	str	r1, [sp, #4]
   1228c:	9202      	str	r2, [sp, #8]
        self.record.metadata.target = target;
   1228e:	6041      	str	r1, [r0, #4]
   12290:	6082      	str	r2, [r0, #8]
    }
   12292:	b003      	add	sp, #12
   12294:	4770      	bx	lr

00012296 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>:
    pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {
   12296:	b580      	push	{r7, lr}
   12298:	b088      	sub	sp, #32
   1229a:	9005      	str	r0, [sp, #20]
   1229c:	9106      	str	r1, [sp, #24]
   1229e:	9207      	str	r2, [sp, #28]
   122a0:	ab02      	add	r3, sp, #8
        self.record.module_path = path.map(MaybeStaticStr::Static);
   122a2:	9001      	str	r0, [sp, #4]
   122a4:	4618      	mov	r0, r3
   122a6:	f7ff fed9 	bl	1205c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   122aa:	e7ff      	b.n	122ac <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE+0x16>
   122ac:	9802      	ldr	r0, [sp, #8]
   122ae:	9903      	ldr	r1, [sp, #12]
   122b0:	9a04      	ldr	r2, [sp, #16]
   122b2:	9b01      	ldr	r3, [sp, #4]
   122b4:	62da      	str	r2, [r3, #44]	; 0x2c
   122b6:	6299      	str	r1, [r3, #40]	; 0x28
   122b8:	6258      	str	r0, [r3, #36]	; 0x24
    }
   122ba:	4618      	mov	r0, r3
   122bc:	b008      	add	sp, #32
   122be:	bd80      	pop	{r7, pc}

000122c0 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>:
    pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {
   122c0:	b580      	push	{r7, lr}
   122c2:	b088      	sub	sp, #32
   122c4:	9005      	str	r0, [sp, #20]
   122c6:	9106      	str	r1, [sp, #24]
   122c8:	9207      	str	r2, [sp, #28]
   122ca:	ab02      	add	r3, sp, #8
        self.record.file = file.map(MaybeStaticStr::Static);
   122cc:	9001      	str	r0, [sp, #4]
   122ce:	4618      	mov	r0, r3
   122d0:	f7ff fec4 	bl	1205c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   122d4:	e7ff      	b.n	122d6 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E+0x16>
   122d6:	9802      	ldr	r0, [sp, #8]
   122d8:	9903      	ldr	r1, [sp, #12]
   122da:	9a04      	ldr	r2, [sp, #16]
   122dc:	9b01      	ldr	r3, [sp, #4]
   122de:	639a      	str	r2, [r3, #56]	; 0x38
   122e0:	6359      	str	r1, [r3, #52]	; 0x34
   122e2:	6318      	str	r0, [r3, #48]	; 0x30
    }
   122e4:	4618      	mov	r0, r3
   122e6:	b008      	add	sp, #32
   122e8:	bd80      	pop	{r7, pc}

000122ea <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>:
    pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {
   122ea:	b083      	sub	sp, #12
   122ec:	9000      	str	r0, [sp, #0]
   122ee:	9101      	str	r1, [sp, #4]
   122f0:	9202      	str	r2, [sp, #8]
        self.record.line = line;
   122f2:	63c1      	str	r1, [r0, #60]	; 0x3c
   122f4:	6402      	str	r2, [r0, #64]	; 0x40
    }
   122f6:	b003      	add	sp, #12
   122f8:	4770      	bx	lr

000122fa <_ZN3log13RecordBuilder5build17h83529556a009112eE>:
    pub fn build(&self) -> Record<'a> {
   122fa:	b580      	push	{r7, lr}
   122fc:	b082      	sub	sp, #8
   122fe:	9101      	str	r1, [sp, #4]
        self.record.clone()
   12300:	f000 f8e8 	bl	124d4 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>
   12304:	e7ff      	b.n	12306 <_ZN3log13RecordBuilder5build17h83529556a009112eE+0xc>
    }
   12306:	b002      	add	sp, #8
   12308:	bd80      	pop	{r7, pc}

0001230a <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>:
    pub fn builder() -> MetadataBuilder<'a> {
   1230a:	b580      	push	{r7, lr}
        MetadataBuilder::new()
   1230c:	f000 f802 	bl	12314 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>
   12310:	e7ff      	b.n	12312 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE+0x8>
    }
   12312:	bd80      	pop	{r7, pc}

00012314 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>:
    pub fn new() -> MetadataBuilder<'a> {
   12314:	b084      	sub	sp, #16
   12316:	2103      	movs	r1, #3
                level: Level::Info,
   12318:	9103      	str	r1, [sp, #12]
            metadata: Metadata {
   1231a:	9903      	ldr	r1, [sp, #12]
   1231c:	9100      	str	r1, [sp, #0]
   1231e:	f240 0130 	movw	r1, #48	; 0x30
   12322:	f2c0 0102 	movt	r1, #2
   12326:	9101      	str	r1, [sp, #4]
   12328:	2100      	movs	r1, #0
   1232a:	9102      	str	r1, [sp, #8]
        MetadataBuilder {
   1232c:	9900      	ldr	r1, [sp, #0]
   1232e:	9a01      	ldr	r2, [sp, #4]
   12330:	9b02      	ldr	r3, [sp, #8]
   12332:	6083      	str	r3, [r0, #8]
   12334:	6042      	str	r2, [r0, #4]
   12336:	6001      	str	r1, [r0, #0]
    }
   12338:	b004      	add	sp, #16
   1233a:	4770      	bx	lr

0001233c <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>:
    pub fn build(&self) -> Metadata<'a> {
   1233c:	b580      	push	{r7, lr}
   1233e:	b082      	sub	sp, #8
   12340:	9101      	str	r1, [sp, #4]
        self.metadata.clone()
   12342:	f000 f91c 	bl	1257e <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   12346:	e7ff      	b.n	12348 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E+0xc>
    }
   12348:	b002      	add	sp, #8
   1234a:	bd80      	pop	{r7, pc}

0001234c <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE>:
    fn enabled(&self, _: &Metadata) -> bool {
   1234c:	b082      	sub	sp, #8
   1234e:	9000      	str	r0, [sp, #0]
   12350:	9101      	str	r1, [sp, #4]
   12352:	2000      	movs	r0, #0
    }
   12354:	b002      	add	sp, #8
   12356:	4770      	bx	lr

00012358 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE>:
    fn log(&self, _: &Record) {}
   12358:	b082      	sub	sp, #8
   1235a:	9000      	str	r0, [sp, #0]
   1235c:	9101      	str	r1, [sp, #4]
   1235e:	b002      	add	sp, #8
   12360:	4770      	bx	lr

00012362 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE>:
    fn flush(&self) {}
   12362:	b081      	sub	sp, #4
   12364:	9000      	str	r0, [sp, #0]
   12366:	b001      	add	sp, #4
   12368:	4770      	bx	lr

0001236a <_ZN3log6logger17hf609e7cc1c031552E>:
}

/// Returns a reference to the logger.
///
/// If a logger has not been set, a no-op implementation is returned.
pub fn logger() -> &'static Log {
   1236a:	b580      	push	{r7, lr}
   1236c:	b084      	sub	sp, #16
   1236e:	2004      	movs	r0, #4
    unsafe {
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   12370:	f88d 000f 	strb.w	r0, [sp, #15]
   12374:	f89d 100f 	ldrb.w	r1, [sp, #15]
   12378:	f644 2068 	movw	r0, #19048	; 0x4a68
   1237c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12380:	f7ff fe0b 	bl	11f9a <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>
   12384:	9000      	str	r0, [sp, #0]
   12386:	e7ff      	b.n	12388 <_ZN3log6logger17hf609e7cc1c031552E+0x1e>
   12388:	9800      	ldr	r0, [sp, #0]
   1238a:	2802      	cmp	r0, #2
   1238c:	d109      	bne.n	123a2 <_ZN3log6logger17hf609e7cc1c031552E+0x38>
   1238e:	e7ff      	b.n	12390 <_ZN3log6logger17hf609e7cc1c031552E+0x26>
            static NOP: NopLogger = NopLogger;
            &NOP
        } else {
            LOGGER
   12390:	f240 00f0 	movw	r0, #240	; 0xf0
   12394:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12398:	6801      	ldr	r1, [r0, #0]
   1239a:	6840      	ldr	r0, [r0, #4]
   1239c:	9101      	str	r1, [sp, #4]
   1239e:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   123a0:	e00a      	b.n	123b8 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
            &NOP
   123a2:	f240 0064 	movw	r0, #100	; 0x64
   123a6:	f2c0 0002 	movt	r0, #2
   123aa:	9001      	str	r0, [sp, #4]
   123ac:	f240 004c 	movw	r0, #76	; 0x4c
   123b0:	f2c0 0002 	movt	r0, #2
   123b4:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   123b6:	e7ff      	b.n	123b8 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
   123b8:	9801      	ldr	r0, [sp, #4]
   123ba:	9902      	ldr	r1, [sp, #8]
        }
    }
}
   123bc:	b004      	add	sp, #16
   123be:	bd80      	pop	{r7, pc}

000123c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>:

// WARNING: this is not part of the crate's public API and is subject to change at any time
#[doc(hidden)]
pub fn __private_api_log(
   123c0:	b570      	push	{r4, r5, r6, lr}
   123c2:	b0ca      	sub	sp, #296	; 0x128
   123c4:	9141      	str	r1, [sp, #260]	; 0x104
   123c6:	9242      	str	r2, [sp, #264]	; 0x108
    args: fmt::Arguments,
    level: Level,
    &(target, module_path, file, line): &(&str, &'static str, &'static str, u32),
   123c8:	6813      	ldr	r3, [r2, #0]
   123ca:	f8d2 c004 	ldr.w	ip, [r2, #4]
   123ce:	9343      	str	r3, [sp, #268]	; 0x10c
   123d0:	f8cd c110 	str.w	ip, [sp, #272]	; 0x110
   123d4:	f8d2 e008 	ldr.w	lr, [r2, #8]
   123d8:	68d4      	ldr	r4, [r2, #12]
   123da:	f8cd e114 	str.w	lr, [sp, #276]	; 0x114
   123de:	9446      	str	r4, [sp, #280]	; 0x118
   123e0:	6915      	ldr	r5, [r2, #16]
   123e2:	6956      	ldr	r6, [r2, #20]
   123e4:	9547      	str	r5, [sp, #284]	; 0x11c
   123e6:	9648      	str	r6, [sp, #288]	; 0x120
   123e8:	6992      	ldr	r2, [r2, #24]
   123ea:	9249      	str	r2, [sp, #292]	; 0x124
) {
    logger().log(
   123ec:	9112      	str	r1, [sp, #72]	; 0x48
   123ee:	9011      	str	r0, [sp, #68]	; 0x44
   123f0:	9310      	str	r3, [sp, #64]	; 0x40
   123f2:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   123f6:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   123fa:	940d      	str	r4, [sp, #52]	; 0x34
   123fc:	950c      	str	r5, [sp, #48]	; 0x30
   123fe:	960b      	str	r6, [sp, #44]	; 0x2c
   12400:	920a      	str	r2, [sp, #40]	; 0x28
   12402:	f7ff ffb2 	bl	1236a <_ZN3log6logger17hf609e7cc1c031552E>
   12406:	9009      	str	r0, [sp, #36]	; 0x24
   12408:	9108      	str	r1, [sp, #32]
   1240a:	e7ff      	b.n	1240c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x4c>
   1240c:	a824      	add	r0, sp, #144	; 0x90
        &Record::builder()
   1240e:	f7ff fed0 	bl	121b2 <_ZN3log6Record7builder17hde62ab0132265febE>
   12412:	e7ff      	b.n	12414 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x54>
   12414:	a835      	add	r0, sp, #212	; 0xd4
            .args(args)
   12416:	4601      	mov	r1, r0
   12418:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1241a:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   1241e:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   12422:	a924      	add	r1, sp, #144	; 0x90
        &Record::builder()
   12424:	9007      	str	r0, [sp, #28]
   12426:	4608      	mov	r0, r1
   12428:	9907      	ldr	r1, [sp, #28]
   1242a:	f7ff ff15 	bl	12258 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>
   1242e:	9006      	str	r0, [sp, #24]
   12430:	e7ff      	b.n	12432 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x72>
   12432:	9806      	ldr	r0, [sp, #24]
   12434:	9912      	ldr	r1, [sp, #72]	; 0x48
   12436:	f7ff ff20 	bl	1227a <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>
   1243a:	9005      	str	r0, [sp, #20]
   1243c:	e7ff      	b.n	1243e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x7e>
   1243e:	9805      	ldr	r0, [sp, #20]
   12440:	9910      	ldr	r1, [sp, #64]	; 0x40
   12442:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12444:	f7ff ff1f 	bl	12286 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>
   12448:	9004      	str	r0, [sp, #16]
   1244a:	e7ff      	b.n	1244c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x8c>
            .level(level)
            .target(target)
            .module_path_static(Some(module_path))
   1244c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1244e:	903b      	str	r0, [sp, #236]	; 0xec
   12450:	990d      	ldr	r1, [sp, #52]	; 0x34
   12452:	913c      	str	r1, [sp, #240]	; 0xf0
        &Record::builder()
   12454:	993b      	ldr	r1, [sp, #236]	; 0xec
   12456:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   12458:	9804      	ldr	r0, [sp, #16]
   1245a:	f7ff ff1c 	bl	12296 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>
   1245e:	9003      	str	r0, [sp, #12]
   12460:	e7ff      	b.n	12462 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xa2>
            .file_static(Some(file))
   12462:	980c      	ldr	r0, [sp, #48]	; 0x30
   12464:	903d      	str	r0, [sp, #244]	; 0xf4
   12466:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12468:	913e      	str	r1, [sp, #248]	; 0xf8
        &Record::builder()
   1246a:	993d      	ldr	r1, [sp, #244]	; 0xf4
   1246c:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
   1246e:	9803      	ldr	r0, [sp, #12]
   12470:	f7ff ff26 	bl	122c0 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>
   12474:	9002      	str	r0, [sp, #8]
   12476:	e7ff      	b.n	12478 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xb8>
            .line(Some(line))
   12478:	980a      	ldr	r0, [sp, #40]	; 0x28
   1247a:	9040      	str	r0, [sp, #256]	; 0x100
   1247c:	2101      	movs	r1, #1
   1247e:	913f      	str	r1, [sp, #252]	; 0xfc
        &Record::builder()
   12480:	993f      	ldr	r1, [sp, #252]	; 0xfc
   12482:	9a40      	ldr	r2, [sp, #256]	; 0x100
   12484:	9802      	ldr	r0, [sp, #8]
   12486:	f7ff ff30 	bl	122ea <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>
   1248a:	9001      	str	r0, [sp, #4]
   1248c:	e7ff      	b.n	1248e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xce>
   1248e:	a813      	add	r0, sp, #76	; 0x4c
   12490:	9901      	ldr	r1, [sp, #4]
   12492:	f7ff ff32 	bl	122fa <_ZN3log13RecordBuilder5build17h83529556a009112eE>
   12496:	e7ff      	b.n	12498 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xd8>
    logger().log(
   12498:	9808      	ldr	r0, [sp, #32]
   1249a:	6901      	ldr	r1, [r0, #16]
   1249c:	aa13      	add	r2, sp, #76	; 0x4c
   1249e:	9809      	ldr	r0, [sp, #36]	; 0x24
   124a0:	9100      	str	r1, [sp, #0]
   124a2:	4611      	mov	r1, r2
   124a4:	9a00      	ldr	r2, [sp, #0]
   124a6:	4790      	blx	r2
   124a8:	e7ff      	b.n	124aa <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xea>
            .build(),
    );
}
   124aa:	b04a      	add	sp, #296	; 0x128
   124ac:	bd70      	pop	{r4, r5, r6, pc}

000124ae <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>:
    Static(&'static str),
   124ae:	b082      	sub	sp, #8
   124b0:	9100      	str	r1, [sp, #0]
   124b2:	9201      	str	r2, [sp, #4]
   124b4:	6041      	str	r1, [r0, #4]
   124b6:	6082      	str	r2, [r0, #8]
   124b8:	2100      	movs	r1, #0
   124ba:	6001      	str	r1, [r0, #0]
   124bc:	b002      	add	sp, #8
   124be:	4770      	bx	lr

000124c0 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>:
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   124c0:	b081      	sub	sp, #4
   124c2:	9100      	str	r1, [sp, #0]
   124c4:	680a      	ldr	r2, [r1, #0]
   124c6:	684b      	ldr	r3, [r1, #4]
   124c8:	6889      	ldr	r1, [r1, #8]
   124ca:	6081      	str	r1, [r0, #8]
   124cc:	6043      	str	r3, [r0, #4]
   124ce:	6002      	str	r2, [r0, #0]
   124d0:	b001      	add	sp, #4
   124d2:	4770      	bx	lr

000124d4 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>:
#[derive(Clone, Debug)]
   124d4:	b570      	push	{r4, r5, r6, lr}
   124d6:	b09c      	sub	sp, #112	; 0x70
   124d8:	9116      	str	r1, [sp, #88]	; 0x58
    metadata: Metadata<'a>,
   124da:	9117      	str	r1, [sp, #92]	; 0x5c
    args: fmt::Arguments<'a>,
   124dc:	f101 020c 	add.w	r2, r1, #12
   124e0:	4613      	mov	r3, r2
   124e2:	9218      	str	r2, [sp, #96]	; 0x60
    module_path: Option<MaybeStaticStr<'a>>,
   124e4:	f101 0224 	add.w	r2, r1, #36	; 0x24
   124e8:	4694      	mov	ip, r2
   124ea:	9219      	str	r2, [sp, #100]	; 0x64
    file: Option<MaybeStaticStr<'a>>,
   124ec:	f101 0230 	add.w	r2, r1, #48	; 0x30
   124f0:	4696      	mov	lr, r2
   124f2:	921a      	str	r2, [sp, #104]	; 0x68
    line: Option<u32>,
   124f4:	f101 023c 	add.w	r2, r1, #60	; 0x3c
   124f8:	4614      	mov	r4, r2
   124fa:	921b      	str	r2, [sp, #108]	; 0x6c
   124fc:	aa07      	add	r2, sp, #28
    metadata: Metadata<'a>,
   124fe:	9006      	str	r0, [sp, #24]
   12500:	4610      	mov	r0, r2
   12502:	9305      	str	r3, [sp, #20]
   12504:	f8cd c010 	str.w	ip, [sp, #16]
   12508:	f8cd e00c 	str.w	lr, [sp, #12]
   1250c:	9402      	str	r4, [sp, #8]
   1250e:	f000 f836 	bl	1257e <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   12512:	e7ff      	b.n	12514 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x40>
   12514:	a80a      	add	r0, sp, #40	; 0x28
    args: fmt::Arguments<'a>,
   12516:	9905      	ldr	r1, [sp, #20]
   12518:	f7ff fdf8 	bl	1210c <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>
   1251c:	e7ff      	b.n	1251e <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x4a>
   1251e:	a810      	add	r0, sp, #64	; 0x40
    module_path: Option<MaybeStaticStr<'a>>,
   12520:	9904      	ldr	r1, [sp, #16]
   12522:	f7ff fdfc 	bl	1211e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   12526:	e7ff      	b.n	12528 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x54>
   12528:	a813      	add	r0, sp, #76	; 0x4c
    file: Option<MaybeStaticStr<'a>>,
   1252a:	9903      	ldr	r1, [sp, #12]
   1252c:	f7ff fdf7 	bl	1211e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   12530:	e7ff      	b.n	12532 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x5e>
    line: Option<u32>,
   12532:	9802      	ldr	r0, [sp, #8]
   12534:	f7ff fe1a 	bl	1216c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>
   12538:	9001      	str	r0, [sp, #4]
   1253a:	9100      	str	r1, [sp, #0]
   1253c:	e7ff      	b.n	1253e <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x6a>
#[derive(Clone, Debug)]
   1253e:	9807      	ldr	r0, [sp, #28]
   12540:	9908      	ldr	r1, [sp, #32]
   12542:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12544:	9b06      	ldr	r3, [sp, #24]
   12546:	609a      	str	r2, [r3, #8]
   12548:	6059      	str	r1, [r3, #4]
   1254a:	6018      	str	r0, [r3, #0]
   1254c:	f103 000c 	add.w	r0, r3, #12
   12550:	a90a      	add	r1, sp, #40	; 0x28
   12552:	e891 5074 	ldmia.w	r1, {r2, r4, r5, r6, ip, lr}
   12556:	e880 5074 	stmia.w	r0, {r2, r4, r5, r6, ip, lr}
   1255a:	9810      	ldr	r0, [sp, #64]	; 0x40
   1255c:	9911      	ldr	r1, [sp, #68]	; 0x44
   1255e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12560:	62da      	str	r2, [r3, #44]	; 0x2c
   12562:	6299      	str	r1, [r3, #40]	; 0x28
   12564:	6258      	str	r0, [r3, #36]	; 0x24
   12566:	9813      	ldr	r0, [sp, #76]	; 0x4c
   12568:	9914      	ldr	r1, [sp, #80]	; 0x50
   1256a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1256c:	639a      	str	r2, [r3, #56]	; 0x38
   1256e:	6359      	str	r1, [r3, #52]	; 0x34
   12570:	6318      	str	r0, [r3, #48]	; 0x30
   12572:	9801      	ldr	r0, [sp, #4]
   12574:	63d8      	str	r0, [r3, #60]	; 0x3c
   12576:	9900      	ldr	r1, [sp, #0]
   12578:	6419      	str	r1, [r3, #64]	; 0x40
   1257a:	b01c      	add	sp, #112	; 0x70
   1257c:	bd70      	pop	{r4, r5, r6, pc}

0001257e <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>:
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   1257e:	b580      	push	{r7, lr}
   12580:	b088      	sub	sp, #32
   12582:	9105      	str	r1, [sp, #20]
    level: Level,
   12584:	9106      	str	r1, [sp, #24]
    target: &'a str,
   12586:	1d0a      	adds	r2, r1, #4
   12588:	4613      	mov	r3, r2
   1258a:	9207      	str	r2, [sp, #28]
    level: Level,
   1258c:	9004      	str	r0, [sp, #16]
   1258e:	4608      	mov	r0, r1
   12590:	9303      	str	r3, [sp, #12]
   12592:	f7ff fe09 	bl	121a8 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>
   12596:	9002      	str	r0, [sp, #8]
   12598:	e7ff      	b.n	1259a <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x1c>
    target: &'a str,
   1259a:	9803      	ldr	r0, [sp, #12]
   1259c:	f7ff fd55 	bl	1204a <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>
   125a0:	9001      	str	r0, [sp, #4]
   125a2:	9100      	str	r1, [sp, #0]
   125a4:	e7ff      	b.n	125a6 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x28>
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   125a6:	9802      	ldr	r0, [sp, #8]
   125a8:	9904      	ldr	r1, [sp, #16]
   125aa:	6008      	str	r0, [r1, #0]
   125ac:	9a01      	ldr	r2, [sp, #4]
   125ae:	604a      	str	r2, [r1, #4]
   125b0:	9b00      	ldr	r3, [sp, #0]
   125b2:	608b      	str	r3, [r1, #8]
   125b4:	b008      	add	sp, #32
   125b6:	bd80      	pop	{r7, pc}

000125b8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E>:
   125b8:	b580      	push	{r7, lr}
   125ba:	b084      	sub	sp, #16
   125bc:	9002      	str	r0, [sp, #8]
   125be:	9103      	str	r1, [sp, #12]
   125c0:	6800      	ldr	r0, [r0, #0]
   125c2:	f000 f81c 	bl	125fe <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>
   125c6:	9001      	str	r0, [sp, #4]
   125c8:	e7ff      	b.n	125ca <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E+0x12>
   125ca:	9801      	ldr	r0, [sp, #4]
   125cc:	f000 0001 	and.w	r0, r0, #1
   125d0:	b004      	add	sp, #16
   125d2:	bd80      	pop	{r7, pc}

000125d4 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>:
   125d4:	b089      	sub	sp, #36	; 0x24
   125d6:	9005      	str	r0, [sp, #20]
   125d8:	9106      	str	r1, [sp, #24]
   125da:	9107      	str	r1, [sp, #28]
   125dc:	9907      	ldr	r1, [sp, #28]
   125de:	9002      	str	r0, [sp, #8]
   125e0:	9101      	str	r1, [sp, #4]
   125e2:	e7ff      	b.n	125e4 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x10>
   125e4:	9802      	ldr	r0, [sp, #8]
   125e6:	9008      	str	r0, [sp, #32]
   125e8:	9908      	ldr	r1, [sp, #32]
   125ea:	9100      	str	r1, [sp, #0]
   125ec:	e7ff      	b.n	125ee <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x1a>
   125ee:	9800      	ldr	r0, [sp, #0]
   125f0:	9003      	str	r0, [sp, #12]
   125f2:	9901      	ldr	r1, [sp, #4]
   125f4:	9104      	str	r1, [sp, #16]
   125f6:	9803      	ldr	r0, [sp, #12]
   125f8:	9904      	ldr	r1, [sp, #16]
   125fa:	b009      	add	sp, #36	; 0x24
   125fc:	4770      	bx	lr

000125fe <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>:
   125fe:	b580      	push	{r7, lr}
   12600:	b088      	sub	sp, #32
   12602:	9006      	str	r0, [sp, #24]
   12604:	9107      	str	r1, [sp, #28]
   12606:	9004      	str	r0, [sp, #16]
   12608:	4608      	mov	r0, r1
   1260a:	9103      	str	r1, [sp, #12]
   1260c:	f006 f81d 	bl	1864a <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   12610:	9002      	str	r0, [sp, #8]
   12612:	e7ff      	b.n	12614 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x16>
   12614:	9802      	ldr	r0, [sp, #8]
   12616:	07c1      	lsls	r1, r0, #31
   12618:	2900      	cmp	r1, #0
   1261a:	d105      	bne.n	12628 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x2a>
   1261c:	e7ff      	b.n	1261e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x20>
   1261e:	9803      	ldr	r0, [sp, #12]
   12620:	f006 f817 	bl	18652 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   12624:	9001      	str	r0, [sp, #4]
   12626:	e007      	b.n	12638 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x3a>
   12628:	9804      	ldr	r0, [sp, #16]
   1262a:	9903      	ldr	r1, [sp, #12]
   1262c:	f006 fe37 	bl	1929e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   12630:	f88d 0017 	strb.w	r0, [sp, #23]
   12634:	e7ff      	b.n	12636 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x38>
   12636:	e015      	b.n	12664 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   12638:	9801      	ldr	r0, [sp, #4]
   1263a:	07c1      	lsls	r1, r0, #31
   1263c:	2900      	cmp	r1, #0
   1263e:	d107      	bne.n	12650 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x52>
   12640:	e7ff      	b.n	12642 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x44>
   12642:	9804      	ldr	r0, [sp, #16]
   12644:	9903      	ldr	r1, [sp, #12]
   12646:	f007 f81f 	bl	19688 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   1264a:	f88d 0017 	strb.w	r0, [sp, #23]
   1264e:	e007      	b.n	12660 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x62>
   12650:	9804      	ldr	r0, [sp, #16]
   12652:	9903      	ldr	r1, [sp, #12]
   12654:	f006 fe8e 	bl	19374 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   12658:	f88d 0017 	strb.w	r0, [sp, #23]
   1265c:	e7ff      	b.n	1265e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x60>
   1265e:	e000      	b.n	12662 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   12660:	e7ff      	b.n	12662 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   12662:	e7ff      	b.n	12664 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   12664:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12668:	b008      	add	sp, #32
   1266a:	bd80      	pop	{r7, pc}

0001266c <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>:
   1266c:	b086      	sub	sp, #24
   1266e:	9004      	str	r0, [sp, #16]
   12670:	9105      	str	r1, [sp, #20]
   12672:	9002      	str	r0, [sp, #8]
   12674:	9103      	str	r1, [sp, #12]
   12676:	9802      	ldr	r0, [sp, #8]
   12678:	9903      	ldr	r1, [sp, #12]
   1267a:	9000      	str	r0, [sp, #0]
   1267c:	9101      	str	r1, [sp, #4]
   1267e:	9800      	ldr	r0, [sp, #0]
   12680:	9901      	ldr	r1, [sp, #4]
   12682:	b006      	add	sp, #24
   12684:	4770      	bx	lr

00012686 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>:
   12686:	b580      	push	{r7, lr}
   12688:	b084      	sub	sp, #16
   1268a:	9002      	str	r0, [sp, #8]
   1268c:	9103      	str	r1, [sp, #12]
   1268e:	f000 f805 	bl	1269c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>
   12692:	9001      	str	r0, [sp, #4]
   12694:	e7ff      	b.n	12696 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE+0x10>
   12696:	9801      	ldr	r0, [sp, #4]
   12698:	b004      	add	sp, #16
   1269a:	bd80      	pop	{r7, pc}

0001269c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>:
   1269c:	b084      	sub	sp, #16
   1269e:	9001      	str	r0, [sp, #4]
   126a0:	9102      	str	r1, [sp, #8]
   126a2:	4408      	add	r0, r1
   126a4:	9003      	str	r0, [sp, #12]
   126a6:	9803      	ldr	r0, [sp, #12]
   126a8:	9000      	str	r0, [sp, #0]
   126aa:	e7ff      	b.n	126ac <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E+0x10>
   126ac:	9800      	ldr	r0, [sp, #0]
   126ae:	b004      	add	sp, #16
   126b0:	4770      	bx	lr

000126b2 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>:
   126b2:	b580      	push	{r7, lr}
   126b4:	b084      	sub	sp, #16
   126b6:	9002      	str	r0, [sp, #8]
   126b8:	9103      	str	r1, [sp, #12]
   126ba:	f7ff ffd7 	bl	1266c <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>
   126be:	9001      	str	r0, [sp, #4]
   126c0:	9100      	str	r1, [sp, #0]
   126c2:	e7ff      	b.n	126c4 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E+0x12>
   126c4:	9801      	ldr	r0, [sp, #4]
   126c6:	9900      	ldr	r1, [sp, #0]
   126c8:	b004      	add	sp, #16
   126ca:	bd80      	pop	{r7, pc}

000126cc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>:
   126cc:	b084      	sub	sp, #16
   126ce:	9002      	str	r0, [sp, #8]
   126d0:	9103      	str	r1, [sp, #12]
   126d2:	9000      	str	r0, [sp, #0]
   126d4:	9101      	str	r1, [sp, #4]
   126d6:	9801      	ldr	r0, [sp, #4]
   126d8:	b004      	add	sp, #16
   126da:	4770      	bx	lr

000126dc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>:
   126dc:	b082      	sub	sp, #8
   126de:	9000      	str	r0, [sp, #0]
   126e0:	9101      	str	r1, [sp, #4]
   126e2:	b002      	add	sp, #8
   126e4:	4770      	bx	lr

000126e6 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>:
   126e6:	b082      	sub	sp, #8
   126e8:	9000      	str	r0, [sp, #0]
   126ea:	9101      	str	r1, [sp, #4]
   126ec:	7800      	ldrb	r0, [r0, #0]
   126ee:	7809      	ldrb	r1, [r1, #0]
   126f0:	1a40      	subs	r0, r0, r1
   126f2:	fab0 f080 	clz	r0, r0
   126f6:	0940      	lsrs	r0, r0, #5
   126f8:	b002      	add	sp, #8
   126fa:	4770      	bx	lr

000126fc <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>:
where
    N: ArrayLength<T>,
{
    type Target = [T];

    fn deref(&self) -> &[T] {
   126fc:	b580      	push	{r7, lr}
   126fe:	b084      	sub	sp, #16
   12700:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   12702:	f004 fc17 	bl	16f34 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E>
   12706:	9002      	str	r0, [sp, #8]
   12708:	9101      	str	r1, [sp, #4]
   1270a:	e7ff      	b.n	1270c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E+0x10>
    }
   1270c:	9802      	ldr	r0, [sp, #8]
   1270e:	9901      	ldr	r1, [sp, #4]
   12710:	b004      	add	sp, #16
   12712:	bd80      	pop	{r7, pc}

00012714 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>:
    fn deref(&self) -> &[T] {
   12714:	b580      	push	{r7, lr}
   12716:	b084      	sub	sp, #16
   12718:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   1271a:	f004 fc20 	bl	16f5e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>
   1271e:	9002      	str	r0, [sp, #8]
   12720:	9101      	str	r1, [sp, #4]
   12722:	e7ff      	b.n	12724 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE+0x10>
    }
   12724:	9802      	ldr	r0, [sp, #8]
   12726:	9901      	ldr	r1, [sp, #4]
   12728:	b004      	add	sp, #16
   1272a:	bd80      	pop	{r7, pc}

0001272c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   1272c:	b580      	push	{r7, lr}
   1272e:	b084      	sub	sp, #16
   12730:	9001      	str	r0, [sp, #4]
   12732:	9102      	str	r1, [sp, #8]
   12734:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   12736:	f004 fb5f 	bl	16df8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E>
   1273a:	9000      	str	r0, [sp, #0]
   1273c:	e7ff      	b.n	1273e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E+0x12>
    }
   1273e:	9800      	ldr	r0, [sp, #0]
   12740:	f000 0001 	and.w	r0, r0, #1
   12744:	b004      	add	sp, #16
   12746:	bd80      	pop	{r7, pc}

00012748 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   12748:	b580      	push	{r7, lr}
   1274a:	b086      	sub	sp, #24
   1274c:	460a      	mov	r2, r1
   1274e:	9004      	str	r0, [sp, #16]
   12750:	f88d 1017 	strb.w	r1, [sp, #23]
        self.0.push(item)
   12754:	9203      	str	r2, [sp, #12]
   12756:	f004 fbb2 	bl	16ebe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>
   1275a:	9002      	str	r0, [sp, #8]
   1275c:	9101      	str	r1, [sp, #4]
   1275e:	e7ff      	b.n	12760 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E+0x18>
    }
   12760:	9802      	ldr	r0, [sp, #8]
   12762:	f000 0001 	and.w	r0, r0, #1
   12766:	9901      	ldr	r1, [sp, #4]
   12768:	b006      	add	sp, #24
   1276a:	bd80      	pop	{r7, pc}

0001276c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>:
    pub fn clear(&mut self) {
   1276c:	b580      	push	{r7, lr}
   1276e:	b082      	sub	sp, #8
   12770:	9001      	str	r0, [sp, #4]
        self.0.clear()
   12772:	f004 fbcd 	bl	16f10 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>
   12776:	e7ff      	b.n	12778 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E+0xc>
    }
   12778:	b002      	add	sp, #8
   1277a:	bd80      	pop	{r7, pc}

0001277c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>:
    pub fn clear(&mut self) {
   1277c:	b580      	push	{r7, lr}
   1277e:	b082      	sub	sp, #8
   12780:	9001      	str	r0, [sp, #4]
        self.0.clear()
   12782:	f004 fbce 	bl	16f22 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E>
   12786:	e7ff      	b.n	12788 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E+0xc>
    }
   12788:	b002      	add	sp, #8
   1278a:	bd80      	pop	{r7, pc}

0001278c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E>:
    pub fn capacity(&self) -> usize {
   1278c:	b580      	push	{r7, lr}
   1278e:	b082      	sub	sp, #8
   12790:	9001      	str	r0, [sp, #4]
        self.0.capacity()
   12792:	f004 fc03 	bl	16f9c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>
   12796:	9000      	str	r0, [sp, #0]
   12798:	e7ff      	b.n	1279a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E+0xe>
    }
   1279a:	9800      	ldr	r0, [sp, #0]
   1279c:	b002      	add	sp, #8
   1279e:	bd80      	pop	{r7, pc}

000127a0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>:
   127a0:	b081      	sub	sp, #4
   127a2:	9000      	str	r0, [sp, #0]
   127a4:	b001      	add	sp, #4
   127a6:	4770      	bx	lr

000127a8 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>:
   127a8:	b580      	push	{r7, lr}
   127aa:	b088      	sub	sp, #32
   127ac:	9006      	str	r0, [sp, #24]
   127ae:	9107      	str	r1, [sp, #28]
   127b0:	9004      	str	r0, [sp, #16]
   127b2:	4608      	mov	r0, r1
   127b4:	9103      	str	r1, [sp, #12]
   127b6:	f005 ff48 	bl	1864a <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   127ba:	9002      	str	r0, [sp, #8]
   127bc:	e7ff      	b.n	127be <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x16>
   127be:	9802      	ldr	r0, [sp, #8]
   127c0:	07c1      	lsls	r1, r0, #31
   127c2:	2900      	cmp	r1, #0
   127c4:	d105      	bne.n	127d2 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x2a>
   127c6:	e7ff      	b.n	127c8 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x20>
   127c8:	9803      	ldr	r0, [sp, #12]
   127ca:	f005 ff42 	bl	18652 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   127ce:	9001      	str	r0, [sp, #4]
   127d0:	e007      	b.n	127e2 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x3a>
   127d2:	9804      	ldr	r0, [sp, #16]
   127d4:	9903      	ldr	r1, [sp, #12]
   127d6:	f006 fc46 	bl	19066 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>
   127da:	f88d 0017 	strb.w	r0, [sp, #23]
   127de:	e7ff      	b.n	127e0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x38>
   127e0:	e015      	b.n	1280e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   127e2:	9801      	ldr	r0, [sp, #4]
   127e4:	07c1      	lsls	r1, r0, #31
   127e6:	2900      	cmp	r1, #0
   127e8:	d107      	bne.n	127fa <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x52>
   127ea:	e7ff      	b.n	127ec <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x44>
   127ec:	9804      	ldr	r0, [sp, #16]
   127ee:	9903      	ldr	r1, [sp, #12]
   127f0:	f006 fe2b 	bl	1944a <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>
   127f4:	f88d 0017 	strb.w	r0, [sp, #23]
   127f8:	e007      	b.n	1280a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x62>
   127fa:	9804      	ldr	r0, [sp, #16]
   127fc:	9903      	ldr	r1, [sp, #12]
   127fe:	f006 fc61 	bl	190c4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>
   12802:	f88d 0017 	strb.w	r0, [sp, #23]
   12806:	e7ff      	b.n	12808 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x60>
   12808:	e000      	b.n	1280c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   1280a:	e7ff      	b.n	1280c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   1280c:	e7ff      	b.n	1280e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   1280e:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12812:	b008      	add	sp, #32
   12814:	bd80      	pop	{r7, pc}

00012816 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>:
   12816:	b580      	push	{r7, lr}
   12818:	b088      	sub	sp, #32
   1281a:	9006      	str	r0, [sp, #24]
   1281c:	9107      	str	r1, [sp, #28]
   1281e:	9004      	str	r0, [sp, #16]
   12820:	4608      	mov	r0, r1
   12822:	9103      	str	r1, [sp, #12]
   12824:	f005 ff11 	bl	1864a <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   12828:	9002      	str	r0, [sp, #8]
   1282a:	e7ff      	b.n	1282c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x16>
   1282c:	9802      	ldr	r0, [sp, #8]
   1282e:	07c1      	lsls	r1, r0, #31
   12830:	2900      	cmp	r1, #0
   12832:	d105      	bne.n	12840 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x2a>
   12834:	e7ff      	b.n	12836 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x20>
   12836:	9803      	ldr	r0, [sp, #12]
   12838:	f005 ff0b 	bl	18652 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1283c:	9001      	str	r0, [sp, #4]
   1283e:	e007      	b.n	12850 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x3a>
   12840:	9804      	ldr	r0, [sp, #16]
   12842:	9903      	ldr	r1, [sp, #12]
   12844:	f006 fd2b 	bl	1929e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   12848:	f88d 0017 	strb.w	r0, [sp, #23]
   1284c:	e7ff      	b.n	1284e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x38>
   1284e:	e015      	b.n	1287c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   12850:	9801      	ldr	r0, [sp, #4]
   12852:	07c1      	lsls	r1, r0, #31
   12854:	2900      	cmp	r1, #0
   12856:	d107      	bne.n	12868 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x52>
   12858:	e7ff      	b.n	1285a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x44>
   1285a:	9804      	ldr	r0, [sp, #16]
   1285c:	9903      	ldr	r1, [sp, #12]
   1285e:	f006 fe99 	bl	19594 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   12862:	f88d 0017 	strb.w	r0, [sp, #23]
   12866:	e007      	b.n	12878 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x62>
   12868:	9804      	ldr	r0, [sp, #16]
   1286a:	9903      	ldr	r1, [sp, #12]
   1286c:	f006 fd82 	bl	19374 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   12870:	f88d 0017 	strb.w	r0, [sp, #23]
   12874:	e7ff      	b.n	12876 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x60>
   12876:	e000      	b.n	1287a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   12878:	e7ff      	b.n	1287a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   1287a:	e7ff      	b.n	1287c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   1287c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12880:	b008      	add	sp, #32
   12882:	bd80      	pop	{r7, pc}

00012884 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>:
   12884:	b580      	push	{r7, lr}
   12886:	b088      	sub	sp, #32
   12888:	9006      	str	r0, [sp, #24]
   1288a:	9107      	str	r1, [sp, #28]
   1288c:	9004      	str	r0, [sp, #16]
   1288e:	4608      	mov	r0, r1
   12890:	9103      	str	r1, [sp, #12]
   12892:	f005 feda 	bl	1864a <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   12896:	9002      	str	r0, [sp, #8]
   12898:	e7ff      	b.n	1289a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x16>
   1289a:	9802      	ldr	r0, [sp, #8]
   1289c:	07c1      	lsls	r1, r0, #31
   1289e:	2900      	cmp	r1, #0
   128a0:	d105      	bne.n	128ae <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x2a>
   128a2:	e7ff      	b.n	128a4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x20>
   128a4:	9803      	ldr	r0, [sp, #12]
   128a6:	f005 fed4 	bl	18652 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   128aa:	9001      	str	r0, [sp, #4]
   128ac:	e007      	b.n	128be <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x3a>
   128ae:	9804      	ldr	r0, [sp, #16]
   128b0:	9903      	ldr	r1, [sp, #12]
   128b2:	f006 fcf4 	bl	1929e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   128b6:	f88d 0017 	strb.w	r0, [sp, #23]
   128ba:	e7ff      	b.n	128bc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x38>
   128bc:	e015      	b.n	128ea <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   128be:	9801      	ldr	r0, [sp, #4]
   128c0:	07c1      	lsls	r1, r0, #31
   128c2:	2900      	cmp	r1, #0
   128c4:	d107      	bne.n	128d6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x52>
   128c6:	e7ff      	b.n	128c8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x44>
   128c8:	9804      	ldr	r0, [sp, #16]
   128ca:	9903      	ldr	r1, [sp, #12]
   128cc:	f006 fedc 	bl	19688 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   128d0:	f88d 0017 	strb.w	r0, [sp, #23]
   128d4:	e007      	b.n	128e6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x62>
   128d6:	9804      	ldr	r0, [sp, #16]
   128d8:	9903      	ldr	r1, [sp, #12]
   128da:	f006 fd4b 	bl	19374 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   128de:	f88d 0017 	strb.w	r0, [sp, #23]
   128e2:	e7ff      	b.n	128e4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x60>
   128e4:	e000      	b.n	128e8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   128e6:	e7ff      	b.n	128e8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   128e8:	e7ff      	b.n	128ea <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   128ea:	f89d 0017 	ldrb.w	r0, [sp, #23]
   128ee:	b008      	add	sp, #32
   128f0:	bd80      	pop	{r7, pc}

000128f2 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>:
   128f2:	b580      	push	{r7, lr}
   128f4:	b084      	sub	sp, #16
   128f6:	9002      	str	r0, [sp, #8]
   128f8:	9103      	str	r1, [sp, #12]
   128fa:	6800      	ldr	r0, [r0, #0]
   128fc:	6809      	ldr	r1, [r1, #0]
   128fe:	f7ff fef2 	bl	126e6 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>
   12902:	9001      	str	r0, [sp, #4]
   12904:	e7ff      	b.n	12906 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E+0x14>
   12906:	9801      	ldr	r0, [sp, #4]
   12908:	f000 0001 	and.w	r0, r0, #1
   1290c:	b004      	add	sp, #16
   1290e:	bd80      	pop	{r7, pc}

00012910 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>:

/// Non-blocking SPI transfer callback values (not used)
static mut SPI_CALLBACK: SpiCallback = SpiCallback {};

/// Init non-blocking SPI transfer
pub fn spi_noblock_init() -> MynewtResult<()> {
   12910:	b5b0      	push	{r4, r5, r7, lr}
   12912:	f5ad 6db5 	sub.w	sp, sp, #1448	; 0x5a8
   12916:	2000      	movs	r0, #0
    //  Disable SPI port
    unsafe { hal::hal_spi_disable(SPI_NUM) };
   12918:	f007 fd98 	bl	1a44c <hal_spi_disable>
   1291c:	e7ff      	b.n	1291e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xe>

    //  Configure SPI port for non-blocking SPI
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   1291e:	f240 01f8 	movw	r1, #248	; 0xf8
   12922:	f2c2 0100 	movt	r1, #8192	; 0x2000
   12926:	2000      	movs	r0, #0
   12928:	f007 fd4e 	bl	1a3c8 <hal_spi_config>
   1292c:	906a      	str	r0, [sp, #424]	; 0x1a8
   1292e:	e7ff      	b.n	12930 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x20>
   12930:	f240 0068 	movw	r0, #104	; 0x68
   12934:	f2c0 0002 	movt	r0, #2
   12938:	6800      	ldr	r0, [r0, #0]
   1293a:	a96a      	add	r1, sp, #424	; 0x1a8
   1293c:	916b      	str	r1, [sp, #428]	; 0x1ac
   1293e:	906c      	str	r0, [sp, #432]	; 0x1b0
   12940:	986b      	ldr	r0, [sp, #428]	; 0x1ac
   12942:	f8cd 04fc 	str.w	r0, [sp, #1276]	; 0x4fc
   12946:	996c      	ldr	r1, [sp, #432]	; 0x1b0
   12948:	f8cd 1500 	str.w	r1, [sp, #1280]	; 0x500
   1294c:	6802      	ldr	r2, [r0, #0]
   1294e:	680b      	ldr	r3, [r1, #0]
   12950:	429a      	cmp	r2, r3
   12952:	9068      	str	r0, [sp, #416]	; 0x1a0
   12954:	9167      	str	r1, [sp, #412]	; 0x19c
   12956:	d10c      	bne.n	12972 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x62>
   12958:	e7ff      	b.n	1295a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4a>
    let arg = unsafe { core::mem::transmute(&mut SPI_CALLBACK) };
   1295a:	f646 7004 	movw	r0, #28420	; 0x6f04
   1295e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12962:	f8cd 0510 	str.w	r0, [sp, #1296]	; 0x510
   12966:	f8dd 0510 	ldr.w	r0, [sp, #1296]	; 0x510
   1296a:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
   1296e:	9066      	str	r0, [sp, #408]	; 0x198
   12970:	e075      	b.n	12a5e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x14e>
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   12972:	f240 00c0 	movw	r0, #192	; 0xc0
   12976:	f2c0 0002 	movt	r0, #2
   1297a:	6801      	ldr	r1, [r0, #0]
   1297c:	9868      	ldr	r0, [sp, #416]	; 0x1a0
   1297e:	907c      	str	r0, [sp, #496]	; 0x1f0
   12980:	9a67      	ldr	r2, [sp, #412]	; 0x19c
   12982:	927d      	str	r2, [sp, #500]	; 0x1f4
   12984:	f240 03dc 	movw	r3, #220	; 0xdc
   12988:	f2c0 0302 	movt	r3, #2
   1298c:	681b      	ldr	r3, [r3, #0]
   1298e:	f240 0ce0 	movw	ip, #224	; 0xe0
   12992:	f2c0 0c02 	movt	ip, #2
   12996:	f8dc c000 	ldr.w	ip, [ip]
   1299a:	46ee      	mov	lr, sp
   1299c:	2400      	movs	r4, #0
   1299e:	f8ce 4000 	str.w	r4, [lr]
   129a2:	a87e      	add	r0, sp, #504	; 0x1f8
   129a4:	2201      	movs	r2, #1
   129a6:	9165      	str	r1, [sp, #404]	; 0x194
   129a8:	4619      	mov	r1, r3
   129aa:	4663      	mov	r3, ip
   129ac:	f7f6 f876 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   129b0:	e7ff      	b.n	129b2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2>
   129b2:	a87c      	add	r0, sp, #496	; 0x1f0
   129b4:	9079      	str	r0, [sp, #484]	; 0x1e4
   129b6:	a87d      	add	r0, sp, #500	; 0x1f4
   129b8:	907a      	str	r0, [sp, #488]	; 0x1e8
   129ba:	a87e      	add	r0, sp, #504	; 0x1f8
   129bc:	907b      	str	r0, [sp, #492]	; 0x1ec
   129be:	9879      	ldr	r0, [sp, #484]	; 0x1e4
   129c0:	f8cd 0504 	str.w	r0, [sp, #1284]	; 0x504
   129c4:	997a      	ldr	r1, [sp, #488]	; 0x1e8
   129c6:	f8cd 1508 	str.w	r1, [sp, #1288]	; 0x508
   129ca:	9a7b      	ldr	r2, [sp, #492]	; 0x1ec
   129cc:	f8cd 250c 	str.w	r2, [sp, #1292]	; 0x50c
   129d0:	f249 23eb 	movw	r3, #37611	; 0x92eb
   129d4:	f2c0 0300 	movt	r3, #0
   129d8:	9164      	str	r1, [sp, #400]	; 0x190
   129da:	4619      	mov	r1, r3
   129dc:	9263      	str	r2, [sp, #396]	; 0x18c
   129de:	f7f6 fcbc 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   129e2:	9062      	str	r0, [sp, #392]	; 0x188
   129e4:	9161      	str	r1, [sp, #388]	; 0x184
   129e6:	e7ff      	b.n	129e8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xd8>
   129e8:	f249 21eb 	movw	r1, #37611	; 0x92eb
   129ec:	f2c0 0100 	movt	r1, #0
   129f0:	9864      	ldr	r0, [sp, #400]	; 0x190
   129f2:	f7f6 fcb2 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   129f6:	9060      	str	r0, [sp, #384]	; 0x180
   129f8:	915f      	str	r1, [sp, #380]	; 0x17c
   129fa:	e7ff      	b.n	129fc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xec>
   129fc:	f647 61d7 	movw	r1, #32471	; 0x7ed7
   12a00:	f2c0 0101 	movt	r1, #1
   12a04:	9863      	ldr	r0, [sp, #396]	; 0x18c
   12a06:	f7f6 fce7 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12a0a:	905e      	str	r0, [sp, #376]	; 0x178
   12a0c:	915d      	str	r1, [sp, #372]	; 0x174
   12a0e:	e7ff      	b.n	12a10 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x100>
   12a10:	9862      	ldr	r0, [sp, #392]	; 0x188
   12a12:	9073      	str	r0, [sp, #460]	; 0x1cc
   12a14:	9961      	ldr	r1, [sp, #388]	; 0x184
   12a16:	9174      	str	r1, [sp, #464]	; 0x1d0
   12a18:	9a60      	ldr	r2, [sp, #384]	; 0x180
   12a1a:	9275      	str	r2, [sp, #468]	; 0x1d4
   12a1c:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
   12a1e:	9376      	str	r3, [sp, #472]	; 0x1d8
   12a20:	f8dd c178 	ldr.w	ip, [sp, #376]	; 0x178
   12a24:	f8cd c1dc 	str.w	ip, [sp, #476]	; 0x1dc
   12a28:	f8dd e174 	ldr.w	lr, [sp, #372]	; 0x174
   12a2c:	f8cd e1e0 	str.w	lr, [sp, #480]	; 0x1e0
   12a30:	466c      	mov	r4, sp
   12a32:	2503      	movs	r5, #3
   12a34:	6025      	str	r5, [r4, #0]
   12a36:	a86d      	add	r0, sp, #436	; 0x1b4
   12a38:	ab73      	add	r3, sp, #460	; 0x1cc
   12a3a:	9965      	ldr	r1, [sp, #404]	; 0x194
   12a3c:	462a      	mov	r2, r5
   12a3e:	f7f6 f82d 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12a42:	e7ff      	b.n	12a44 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x134>
   12a44:	f240 00fc 	movw	r0, #252	; 0xfc
   12a48:	f2c0 0002 	movt	r0, #2
   12a4c:	f004 ff55 	bl	178fa <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12a50:	905c      	str	r0, [sp, #368]	; 0x170
   12a52:	e7ff      	b.n	12a54 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x144>
   12a54:	a86d      	add	r0, sp, #436	; 0x1b4
   12a56:	995c      	ldr	r1, [sp, #368]	; 0x170
   12a58:	f004 ff8c 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12a5c:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
        SPI_NUM, 
        Some(spi_noblock_handler), 
   12a5e:	f643 60ab 	movw	r0, #16043	; 0x3eab
   12a62:	f2c0 0001 	movt	r0, #1
   12a66:	9085      	str	r0, [sp, #532]	; 0x214
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
   12a68:	9985      	ldr	r1, [sp, #532]	; 0x214
   12a6a:	2000      	movs	r0, #0
   12a6c:	9a66      	ldr	r2, [sp, #408]	; 0x198
   12a6e:	f007 fd51 	bl	1a514 <hal_spi_set_txrx_cb>
   12a72:	9084      	str	r0, [sp, #528]	; 0x210
   12a74:	e7ff      	b.n	12a76 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x166>
        arg
    ) };
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   12a76:	f240 0068 	movw	r0, #104	; 0x68
   12a7a:	f2c0 0002 	movt	r0, #2
   12a7e:	6800      	ldr	r0, [r0, #0]
   12a80:	a984      	add	r1, sp, #528	; 0x210
   12a82:	9186      	str	r1, [sp, #536]	; 0x218
   12a84:	9087      	str	r0, [sp, #540]	; 0x21c
   12a86:	9886      	ldr	r0, [sp, #536]	; 0x218
   12a88:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
   12a8c:	9987      	ldr	r1, [sp, #540]	; 0x21c
   12a8e:	f8cd 151c 	str.w	r1, [sp, #1308]	; 0x51c
   12a92:	6802      	ldr	r2, [r0, #0]
   12a94:	680b      	ldr	r3, [r1, #0]
   12a96:	429a      	cmp	r2, r3
   12a98:	905b      	str	r0, [sp, #364]	; 0x16c
   12a9a:	915a      	str	r1, [sp, #360]	; 0x168
   12a9c:	d105      	bne.n	12aaa <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x19a>
   12a9e:	e7ff      	b.n	12aa0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x190>
   12aa0:	2000      	movs	r0, #0

    //  Enable SPI port and set SS to high to disable SPI device
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   12aa2:	f007 fcad 	bl	1a400 <hal_spi_enable>
   12aa6:	909f      	str	r0, [sp, #636]	; 0x27c
   12aa8:	e075      	b.n	12b96 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x286>
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   12aaa:	f240 00c0 	movw	r0, #192	; 0xc0
   12aae:	f2c0 0002 	movt	r0, #2
   12ab2:	6801      	ldr	r1, [r0, #0]
   12ab4:	985b      	ldr	r0, [sp, #364]	; 0x16c
   12ab6:	9097      	str	r0, [sp, #604]	; 0x25c
   12ab8:	9a5a      	ldr	r2, [sp, #360]	; 0x168
   12aba:	9298      	str	r2, [sp, #608]	; 0x260
   12abc:	f240 1320 	movw	r3, #288	; 0x120
   12ac0:	f2c0 0302 	movt	r3, #2
   12ac4:	681b      	ldr	r3, [r3, #0]
   12ac6:	f240 0ce0 	movw	ip, #224	; 0xe0
   12aca:	f2c0 0c02 	movt	ip, #2
   12ace:	f8dc c000 	ldr.w	ip, [ip]
   12ad2:	46ee      	mov	lr, sp
   12ad4:	2400      	movs	r4, #0
   12ad6:	f8ce 4000 	str.w	r4, [lr]
   12ada:	a899      	add	r0, sp, #612	; 0x264
   12adc:	2201      	movs	r2, #1
   12ade:	9159      	str	r1, [sp, #356]	; 0x164
   12ae0:	4619      	mov	r1, r3
   12ae2:	4663      	mov	r3, ip
   12ae4:	f7f5 ffda 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12ae8:	e7ff      	b.n	12aea <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x1da>
   12aea:	a897      	add	r0, sp, #604	; 0x25c
   12aec:	9094      	str	r0, [sp, #592]	; 0x250
   12aee:	a898      	add	r0, sp, #608	; 0x260
   12af0:	9095      	str	r0, [sp, #596]	; 0x254
   12af2:	a899      	add	r0, sp, #612	; 0x264
   12af4:	9096      	str	r0, [sp, #600]	; 0x258
   12af6:	9894      	ldr	r0, [sp, #592]	; 0x250
   12af8:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
   12afc:	9995      	ldr	r1, [sp, #596]	; 0x254
   12afe:	f8cd 1524 	str.w	r1, [sp, #1316]	; 0x524
   12b02:	9a96      	ldr	r2, [sp, #600]	; 0x258
   12b04:	f8cd 2528 	str.w	r2, [sp, #1320]	; 0x528
   12b08:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12b0c:	f2c0 0300 	movt	r3, #0
   12b10:	9158      	str	r1, [sp, #352]	; 0x160
   12b12:	4619      	mov	r1, r3
   12b14:	9257      	str	r2, [sp, #348]	; 0x15c
   12b16:	f7f6 fc20 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12b1a:	9056      	str	r0, [sp, #344]	; 0x158
   12b1c:	9155      	str	r1, [sp, #340]	; 0x154
   12b1e:	e7ff      	b.n	12b20 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x210>
   12b20:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12b24:	f2c0 0100 	movt	r1, #0
   12b28:	9858      	ldr	r0, [sp, #352]	; 0x160
   12b2a:	f7f6 fc16 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12b2e:	9054      	str	r0, [sp, #336]	; 0x150
   12b30:	9153      	str	r1, [sp, #332]	; 0x14c
   12b32:	e7ff      	b.n	12b34 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x224>
   12b34:	f647 61d7 	movw	r1, #32471	; 0x7ed7
   12b38:	f2c0 0101 	movt	r1, #1
   12b3c:	9857      	ldr	r0, [sp, #348]	; 0x15c
   12b3e:	f7f6 fc4b 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12b42:	9052      	str	r0, [sp, #328]	; 0x148
   12b44:	9151      	str	r1, [sp, #324]	; 0x144
   12b46:	e7ff      	b.n	12b48 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x238>
   12b48:	9856      	ldr	r0, [sp, #344]	; 0x158
   12b4a:	908e      	str	r0, [sp, #568]	; 0x238
   12b4c:	9955      	ldr	r1, [sp, #340]	; 0x154
   12b4e:	918f      	str	r1, [sp, #572]	; 0x23c
   12b50:	9a54      	ldr	r2, [sp, #336]	; 0x150
   12b52:	9290      	str	r2, [sp, #576]	; 0x240
   12b54:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   12b56:	9391      	str	r3, [sp, #580]	; 0x244
   12b58:	f8dd c148 	ldr.w	ip, [sp, #328]	; 0x148
   12b5c:	f8cd c248 	str.w	ip, [sp, #584]	; 0x248
   12b60:	f8dd e144 	ldr.w	lr, [sp, #324]	; 0x144
   12b64:	f8cd e24c 	str.w	lr, [sp, #588]	; 0x24c
   12b68:	466c      	mov	r4, sp
   12b6a:	2503      	movs	r5, #3
   12b6c:	6025      	str	r5, [r4, #0]
   12b6e:	a888      	add	r0, sp, #544	; 0x220
   12b70:	ab8e      	add	r3, sp, #568	; 0x238
   12b72:	9959      	ldr	r1, [sp, #356]	; 0x164
   12b74:	462a      	mov	r2, r5
   12b76:	f7f5 ff91 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12b7a:	e7ff      	b.n	12b7c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x26c>
   12b7c:	f240 1024 	movw	r0, #292	; 0x124
   12b80:	f2c0 0002 	movt	r0, #2
   12b84:	f004 feb9 	bl	178fa <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12b88:	9050      	str	r0, [sp, #320]	; 0x140
   12b8a:	e7ff      	b.n	12b8c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x27c>
   12b8c:	a888      	add	r0, sp, #544	; 0x220
   12b8e:	9950      	ldr	r1, [sp, #320]	; 0x140
   12b90:	f004 fef0 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12b94:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   12b96:	f240 0068 	movw	r0, #104	; 0x68
   12b9a:	f2c0 0002 	movt	r0, #2
   12b9e:	6800      	ldr	r0, [r0, #0]
   12ba0:	a99f      	add	r1, sp, #636	; 0x27c
   12ba2:	91a0      	str	r1, [sp, #640]	; 0x280
   12ba4:	90a1      	str	r0, [sp, #644]	; 0x284
   12ba6:	98a0      	ldr	r0, [sp, #640]	; 0x280
   12ba8:	f8cd 052c 	str.w	r0, [sp, #1324]	; 0x52c
   12bac:	99a1      	ldr	r1, [sp, #644]	; 0x284
   12bae:	f8cd 1530 	str.w	r1, [sp, #1328]	; 0x530
   12bb2:	6802      	ldr	r2, [r0, #0]
   12bb4:	680b      	ldr	r3, [r1, #0]
   12bb6:	429a      	cmp	r2, r3
   12bb8:	904f      	str	r0, [sp, #316]	; 0x13c
   12bba:	914e      	str	r1, [sp, #312]	; 0x138
   12bbc:	d106      	bne.n	12bcc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2bc>
   12bbe:	e7ff      	b.n	12bc0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2b0>
   12bc0:	2019      	movs	r0, #25
   12bc2:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12bc4:	f006 fff2 	bl	19bac <hal_gpio_init_out>
   12bc8:	90b9      	str	r0, [sp, #740]	; 0x2e4
   12bca:	e075      	b.n	12cb8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3a8>
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   12bcc:	f240 00c0 	movw	r0, #192	; 0xc0
   12bd0:	f2c0 0002 	movt	r0, #2
   12bd4:	6801      	ldr	r1, [r0, #0]
   12bd6:	984f      	ldr	r0, [sp, #316]	; 0x13c
   12bd8:	90b1      	str	r0, [sp, #708]	; 0x2c4
   12bda:	9a4e      	ldr	r2, [sp, #312]	; 0x138
   12bdc:	92b2      	str	r2, [sp, #712]	; 0x2c8
   12bde:	f240 134c 	movw	r3, #332	; 0x14c
   12be2:	f2c0 0302 	movt	r3, #2
   12be6:	681b      	ldr	r3, [r3, #0]
   12be8:	f240 0ce0 	movw	ip, #224	; 0xe0
   12bec:	f2c0 0c02 	movt	ip, #2
   12bf0:	f8dc c000 	ldr.w	ip, [ip]
   12bf4:	46ee      	mov	lr, sp
   12bf6:	2400      	movs	r4, #0
   12bf8:	f8ce 4000 	str.w	r4, [lr]
   12bfc:	a8b3      	add	r0, sp, #716	; 0x2cc
   12bfe:	2201      	movs	r2, #1
   12c00:	914d      	str	r1, [sp, #308]	; 0x134
   12c02:	4619      	mov	r1, r3
   12c04:	4663      	mov	r3, ip
   12c06:	f7f5 ff49 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12c0a:	e7ff      	b.n	12c0c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2fc>
   12c0c:	a8b1      	add	r0, sp, #708	; 0x2c4
   12c0e:	90ae      	str	r0, [sp, #696]	; 0x2b8
   12c10:	a8b2      	add	r0, sp, #712	; 0x2c8
   12c12:	90af      	str	r0, [sp, #700]	; 0x2bc
   12c14:	a8b3      	add	r0, sp, #716	; 0x2cc
   12c16:	90b0      	str	r0, [sp, #704]	; 0x2c0
   12c18:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
   12c1a:	f8cd 0534 	str.w	r0, [sp, #1332]	; 0x534
   12c1e:	99af      	ldr	r1, [sp, #700]	; 0x2bc
   12c20:	f8cd 1538 	str.w	r1, [sp, #1336]	; 0x538
   12c24:	9ab0      	ldr	r2, [sp, #704]	; 0x2c0
   12c26:	f8cd 253c 	str.w	r2, [sp, #1340]	; 0x53c
   12c2a:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12c2e:	f2c0 0300 	movt	r3, #0
   12c32:	914c      	str	r1, [sp, #304]	; 0x130
   12c34:	4619      	mov	r1, r3
   12c36:	924b      	str	r2, [sp, #300]	; 0x12c
   12c38:	f7f6 fb8f 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12c3c:	904a      	str	r0, [sp, #296]	; 0x128
   12c3e:	9149      	str	r1, [sp, #292]	; 0x124
   12c40:	e7ff      	b.n	12c42 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x332>
   12c42:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12c46:	f2c0 0100 	movt	r1, #0
   12c4a:	984c      	ldr	r0, [sp, #304]	; 0x130
   12c4c:	f7f6 fb85 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12c50:	9048      	str	r0, [sp, #288]	; 0x120
   12c52:	9147      	str	r1, [sp, #284]	; 0x11c
   12c54:	e7ff      	b.n	12c56 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x346>
   12c56:	f647 61d7 	movw	r1, #32471	; 0x7ed7
   12c5a:	f2c0 0101 	movt	r1, #1
   12c5e:	984b      	ldr	r0, [sp, #300]	; 0x12c
   12c60:	f7f6 fbba 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12c64:	9046      	str	r0, [sp, #280]	; 0x118
   12c66:	9145      	str	r1, [sp, #276]	; 0x114
   12c68:	e7ff      	b.n	12c6a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x35a>
   12c6a:	984a      	ldr	r0, [sp, #296]	; 0x128
   12c6c:	90a8      	str	r0, [sp, #672]	; 0x2a0
   12c6e:	9949      	ldr	r1, [sp, #292]	; 0x124
   12c70:	91a9      	str	r1, [sp, #676]	; 0x2a4
   12c72:	9a48      	ldr	r2, [sp, #288]	; 0x120
   12c74:	92aa      	str	r2, [sp, #680]	; 0x2a8
   12c76:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   12c78:	93ab      	str	r3, [sp, #684]	; 0x2ac
   12c7a:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   12c7e:	f8cd c2b0 	str.w	ip, [sp, #688]	; 0x2b0
   12c82:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
   12c86:	f8cd e2b4 	str.w	lr, [sp, #692]	; 0x2b4
   12c8a:	466c      	mov	r4, sp
   12c8c:	2503      	movs	r5, #3
   12c8e:	6025      	str	r5, [r4, #0]
   12c90:	a8a2      	add	r0, sp, #648	; 0x288
   12c92:	aba8      	add	r3, sp, #672	; 0x2a0
   12c94:	994d      	ldr	r1, [sp, #308]	; 0x134
   12c96:	462a      	mov	r2, r5
   12c98:	f7f5 ff00 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12c9c:	e7ff      	b.n	12c9e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x38e>
   12c9e:	f240 1050 	movw	r0, #336	; 0x150
   12ca2:	f2c0 0002 	movt	r0, #2
   12ca6:	f004 fe28 	bl	178fa <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12caa:	9044      	str	r0, [sp, #272]	; 0x110
   12cac:	e7ff      	b.n	12cae <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x39e>
   12cae:	a8a2      	add	r0, sp, #648	; 0x288
   12cb0:	9944      	ldr	r1, [sp, #272]	; 0x110
   12cb2:	f004 fe5f 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12cb6:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12cb8:	f240 0068 	movw	r0, #104	; 0x68
   12cbc:	f2c0 0002 	movt	r0, #2
   12cc0:	6800      	ldr	r0, [r0, #0]
   12cc2:	a9b9      	add	r1, sp, #740	; 0x2e4
   12cc4:	91ba      	str	r1, [sp, #744]	; 0x2e8
   12cc6:	90bb      	str	r0, [sp, #748]	; 0x2ec
   12cc8:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
   12cca:	f8cd 0540 	str.w	r0, [sp, #1344]	; 0x540
   12cce:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
   12cd0:	f8cd 1544 	str.w	r1, [sp, #1348]	; 0x544
   12cd4:	6802      	ldr	r2, [r0, #0]
   12cd6:	680b      	ldr	r3, [r1, #0]
   12cd8:	429a      	cmp	r2, r3
   12cda:	9043      	str	r0, [sp, #268]	; 0x10c
   12cdc:	9142      	str	r1, [sp, #264]	; 0x108
   12cde:	d106      	bne.n	12cee <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3de>
   12ce0:	e7ff      	b.n	12ce2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3d2>
   12ce2:	2012      	movs	r0, #18
   12ce4:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12ce6:	f006 ff61 	bl	19bac <hal_gpio_init_out>
   12cea:	90d3      	str	r0, [sp, #844]	; 0x34c
   12cec:	e075      	b.n	12dda <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4ca>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12cee:	f240 00c0 	movw	r0, #192	; 0xc0
   12cf2:	f2c0 0002 	movt	r0, #2
   12cf6:	6801      	ldr	r1, [r0, #0]
   12cf8:	9843      	ldr	r0, [sp, #268]	; 0x10c
   12cfa:	90cb      	str	r0, [sp, #812]	; 0x32c
   12cfc:	9a42      	ldr	r2, [sp, #264]	; 0x108
   12cfe:	92cc      	str	r2, [sp, #816]	; 0x330
   12d00:	f240 1374 	movw	r3, #372	; 0x174
   12d04:	f2c0 0302 	movt	r3, #2
   12d08:	681b      	ldr	r3, [r3, #0]
   12d0a:	f240 0ce0 	movw	ip, #224	; 0xe0
   12d0e:	f2c0 0c02 	movt	ip, #2
   12d12:	f8dc c000 	ldr.w	ip, [ip]
   12d16:	46ee      	mov	lr, sp
   12d18:	2400      	movs	r4, #0
   12d1a:	f8ce 4000 	str.w	r4, [lr]
   12d1e:	a8cd      	add	r0, sp, #820	; 0x334
   12d20:	2201      	movs	r2, #1
   12d22:	9141      	str	r1, [sp, #260]	; 0x104
   12d24:	4619      	mov	r1, r3
   12d26:	4663      	mov	r3, ip
   12d28:	f7f5 feb8 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12d2c:	e7ff      	b.n	12d2e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x41e>
   12d2e:	a8cb      	add	r0, sp, #812	; 0x32c
   12d30:	90c8      	str	r0, [sp, #800]	; 0x320
   12d32:	a8cc      	add	r0, sp, #816	; 0x330
   12d34:	90c9      	str	r0, [sp, #804]	; 0x324
   12d36:	a8cd      	add	r0, sp, #820	; 0x334
   12d38:	90ca      	str	r0, [sp, #808]	; 0x328
   12d3a:	98c8      	ldr	r0, [sp, #800]	; 0x320
   12d3c:	f8cd 0548 	str.w	r0, [sp, #1352]	; 0x548
   12d40:	99c9      	ldr	r1, [sp, #804]	; 0x324
   12d42:	f8cd 154c 	str.w	r1, [sp, #1356]	; 0x54c
   12d46:	9aca      	ldr	r2, [sp, #808]	; 0x328
   12d48:	f8cd 2550 	str.w	r2, [sp, #1360]	; 0x550
   12d4c:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12d50:	f2c0 0300 	movt	r3, #0
   12d54:	9140      	str	r1, [sp, #256]	; 0x100
   12d56:	4619      	mov	r1, r3
   12d58:	923f      	str	r2, [sp, #252]	; 0xfc
   12d5a:	f7f6 fafe 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12d5e:	903e      	str	r0, [sp, #248]	; 0xf8
   12d60:	913d      	str	r1, [sp, #244]	; 0xf4
   12d62:	e7ff      	b.n	12d64 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x454>
   12d64:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12d68:	f2c0 0100 	movt	r1, #0
   12d6c:	9840      	ldr	r0, [sp, #256]	; 0x100
   12d6e:	f7f6 faf4 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12d72:	903c      	str	r0, [sp, #240]	; 0xf0
   12d74:	913b      	str	r1, [sp, #236]	; 0xec
   12d76:	e7ff      	b.n	12d78 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x468>
   12d78:	f647 61d7 	movw	r1, #32471	; 0x7ed7
   12d7c:	f2c0 0101 	movt	r1, #1
   12d80:	983f      	ldr	r0, [sp, #252]	; 0xfc
   12d82:	f7f6 fb29 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12d86:	903a      	str	r0, [sp, #232]	; 0xe8
   12d88:	9139      	str	r1, [sp, #228]	; 0xe4
   12d8a:	e7ff      	b.n	12d8c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x47c>
   12d8c:	983e      	ldr	r0, [sp, #248]	; 0xf8
   12d8e:	90c2      	str	r0, [sp, #776]	; 0x308
   12d90:	993d      	ldr	r1, [sp, #244]	; 0xf4
   12d92:	91c3      	str	r1, [sp, #780]	; 0x30c
   12d94:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   12d96:	92c4      	str	r2, [sp, #784]	; 0x310
   12d98:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   12d9a:	93c5      	str	r3, [sp, #788]	; 0x314
   12d9c:	f8dd c0e8 	ldr.w	ip, [sp, #232]	; 0xe8
   12da0:	f8cd c318 	str.w	ip, [sp, #792]	; 0x318
   12da4:	f8dd e0e4 	ldr.w	lr, [sp, #228]	; 0xe4
   12da8:	f8cd e31c 	str.w	lr, [sp, #796]	; 0x31c
   12dac:	466c      	mov	r4, sp
   12dae:	2503      	movs	r5, #3
   12db0:	6025      	str	r5, [r4, #0]
   12db2:	a8bc      	add	r0, sp, #752	; 0x2f0
   12db4:	abc2      	add	r3, sp, #776	; 0x308
   12db6:	9941      	ldr	r1, [sp, #260]	; 0x104
   12db8:	462a      	mov	r2, r5
   12dba:	f7f5 fe6f 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12dbe:	e7ff      	b.n	12dc0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4b0>
   12dc0:	f240 1078 	movw	r0, #376	; 0x178
   12dc4:	f2c0 0002 	movt	r0, #2
   12dc8:	f004 fd97 	bl	178fa <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12dcc:	9038      	str	r0, [sp, #224]	; 0xe0
   12dce:	e7ff      	b.n	12dd0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4c0>
   12dd0:	a8bc      	add	r0, sp, #752	; 0x2f0
   12dd2:	9938      	ldr	r1, [sp, #224]	; 0xe0
   12dd4:	f004 fdce 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12dd8:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12dda:	f240 0068 	movw	r0, #104	; 0x68
   12dde:	f2c0 0002 	movt	r0, #2
   12de2:	6800      	ldr	r0, [r0, #0]
   12de4:	a9d3      	add	r1, sp, #844	; 0x34c
   12de6:	91d4      	str	r1, [sp, #848]	; 0x350
   12de8:	90d5      	str	r0, [sp, #852]	; 0x354
   12dea:	98d4      	ldr	r0, [sp, #848]	; 0x350
   12dec:	f8cd 0554 	str.w	r0, [sp, #1364]	; 0x554
   12df0:	99d5      	ldr	r1, [sp, #852]	; 0x354
   12df2:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
   12df6:	6802      	ldr	r2, [r0, #0]
   12df8:	680b      	ldr	r3, [r1, #0]
   12dfa:	429a      	cmp	r2, r3
   12dfc:	9037      	str	r0, [sp, #220]	; 0xdc
   12dfe:	9136      	str	r1, [sp, #216]	; 0xd8
   12e00:	d107      	bne.n	12e12 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x502>
   12e02:	e7ff      	b.n	12e04 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4f4>

    //  Create Event Queue and Mbuf (Data) Queue that will store the SPI requests
    unsafe { os::os_eventq_init(&mut SPI_EVENT_QUEUE) };
   12e04:	f646 20a4 	movw	r0, #27300	; 0x6aa4
   12e08:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12e0c:	f007 ffd8 	bl	1adc0 <os_eventq_init>
   12e10:	e075      	b.n	12efe <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5ee>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12e12:	f240 00c0 	movw	r0, #192	; 0xc0
   12e16:	f2c0 0002 	movt	r0, #2
   12e1a:	6801      	ldr	r1, [r0, #0]
   12e1c:	9837      	ldr	r0, [sp, #220]	; 0xdc
   12e1e:	90e5      	str	r0, [sp, #916]	; 0x394
   12e20:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   12e22:	92e6      	str	r2, [sp, #920]	; 0x398
   12e24:	f240 1374 	movw	r3, #372	; 0x174
   12e28:	f2c0 0302 	movt	r3, #2
   12e2c:	681b      	ldr	r3, [r3, #0]
   12e2e:	f240 0ce0 	movw	ip, #224	; 0xe0
   12e32:	f2c0 0c02 	movt	ip, #2
   12e36:	f8dc c000 	ldr.w	ip, [ip]
   12e3a:	46ee      	mov	lr, sp
   12e3c:	2400      	movs	r4, #0
   12e3e:	f8ce 4000 	str.w	r4, [lr]
   12e42:	a8e7      	add	r0, sp, #924	; 0x39c
   12e44:	2201      	movs	r2, #1
   12e46:	9135      	str	r1, [sp, #212]	; 0xd4
   12e48:	4619      	mov	r1, r3
   12e4a:	4663      	mov	r3, ip
   12e4c:	f7f5 fe26 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12e50:	e7ff      	b.n	12e52 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x542>
   12e52:	a8e5      	add	r0, sp, #916	; 0x394
   12e54:	90e2      	str	r0, [sp, #904]	; 0x388
   12e56:	a8e6      	add	r0, sp, #920	; 0x398
   12e58:	90e3      	str	r0, [sp, #908]	; 0x38c
   12e5a:	a8e7      	add	r0, sp, #924	; 0x39c
   12e5c:	90e4      	str	r0, [sp, #912]	; 0x390
   12e5e:	98e2      	ldr	r0, [sp, #904]	; 0x388
   12e60:	f8cd 055c 	str.w	r0, [sp, #1372]	; 0x55c
   12e64:	99e3      	ldr	r1, [sp, #908]	; 0x38c
   12e66:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560
   12e6a:	9ae4      	ldr	r2, [sp, #912]	; 0x390
   12e6c:	f8cd 2564 	str.w	r2, [sp, #1380]	; 0x564
   12e70:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12e74:	f2c0 0300 	movt	r3, #0
   12e78:	9134      	str	r1, [sp, #208]	; 0xd0
   12e7a:	4619      	mov	r1, r3
   12e7c:	9233      	str	r2, [sp, #204]	; 0xcc
   12e7e:	f7f6 fa6c 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12e82:	9032      	str	r0, [sp, #200]	; 0xc8
   12e84:	9131      	str	r1, [sp, #196]	; 0xc4
   12e86:	e7ff      	b.n	12e88 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x578>
   12e88:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12e8c:	f2c0 0100 	movt	r1, #0
   12e90:	9834      	ldr	r0, [sp, #208]	; 0xd0
   12e92:	f7f6 fa62 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12e96:	9030      	str	r0, [sp, #192]	; 0xc0
   12e98:	912f      	str	r1, [sp, #188]	; 0xbc
   12e9a:	e7ff      	b.n	12e9c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x58c>
   12e9c:	f647 61d7 	movw	r1, #32471	; 0x7ed7
   12ea0:	f2c0 0101 	movt	r1, #1
   12ea4:	9833      	ldr	r0, [sp, #204]	; 0xcc
   12ea6:	f7f6 fa97 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12eaa:	902e      	str	r0, [sp, #184]	; 0xb8
   12eac:	912d      	str	r1, [sp, #180]	; 0xb4
   12eae:	e7ff      	b.n	12eb0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5a0>
   12eb0:	9832      	ldr	r0, [sp, #200]	; 0xc8
   12eb2:	90dc      	str	r0, [sp, #880]	; 0x370
   12eb4:	9931      	ldr	r1, [sp, #196]	; 0xc4
   12eb6:	91dd      	str	r1, [sp, #884]	; 0x374
   12eb8:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   12eba:	92de      	str	r2, [sp, #888]	; 0x378
   12ebc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   12ebe:	93df      	str	r3, [sp, #892]	; 0x37c
   12ec0:	f8dd c0b8 	ldr.w	ip, [sp, #184]	; 0xb8
   12ec4:	f8cd c380 	str.w	ip, [sp, #896]	; 0x380
   12ec8:	f8dd e0b4 	ldr.w	lr, [sp, #180]	; 0xb4
   12ecc:	f8cd e384 	str.w	lr, [sp, #900]	; 0x384
   12ed0:	466c      	mov	r4, sp
   12ed2:	2503      	movs	r5, #3
   12ed4:	6025      	str	r5, [r4, #0]
   12ed6:	a8d6      	add	r0, sp, #856	; 0x358
   12ed8:	abdc      	add	r3, sp, #880	; 0x370
   12eda:	9935      	ldr	r1, [sp, #212]	; 0xd4
   12edc:	462a      	mov	r2, r5
   12ede:	f7f5 fddd 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12ee2:	e7ff      	b.n	12ee4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5d4>
   12ee4:	f240 1088 	movw	r0, #392	; 0x188
   12ee8:	f2c0 0002 	movt	r0, #2
   12eec:	f004 fd05 	bl	178fa <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12ef0:	902c      	str	r0, [sp, #176]	; 0xb0
   12ef2:	e7ff      	b.n	12ef4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5e4>
   12ef4:	a8d6      	add	r0, sp, #856	; 0x358
   12ef6:	992c      	ldr	r1, [sp, #176]	; 0xb0
   12ef8:	f004 fd3c 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12efc:	defe      	udf	#254	; 0xfe
    let rc = unsafe { os::os_mqueue_init(
        &mut SPI_DATA_QUEUE, 
        Some(spi_event_callback), 
   12efe:	f643 008d 	movw	r0, #14477	; 0x388d
   12f02:	f2c0 0001 	movt	r0, #1
   12f06:	90ee      	str	r0, [sp, #952]	; 0x3b8
    let rc = unsafe { os::os_mqueue_init(
   12f08:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
   12f0a:	f646 208c 	movw	r0, #27276	; 0x6a8c
   12f0e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12f12:	2200      	movs	r2, #0
   12f14:	f008 f802 	bl	1af1c <os_mqueue_init>
   12f18:	90ed      	str	r0, [sp, #948]	; 0x3b4
   12f1a:	e7ff      	b.n	12f1c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x60c>
        NULL
    ) };
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   12f1c:	f240 0068 	movw	r0, #104	; 0x68
   12f20:	f2c0 0002 	movt	r0, #2
   12f24:	6800      	ldr	r0, [r0, #0]
   12f26:	a9ed      	add	r1, sp, #948	; 0x3b4
   12f28:	91ef      	str	r1, [sp, #956]	; 0x3bc
   12f2a:	90f0      	str	r0, [sp, #960]	; 0x3c0
   12f2c:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
   12f2e:	f8cd 0568 	str.w	r0, [sp, #1384]	; 0x568
   12f32:	99f0      	ldr	r1, [sp, #960]	; 0x3c0
   12f34:	f8cd 156c 	str.w	r1, [sp, #1388]	; 0x56c
   12f38:	6802      	ldr	r2, [r0, #0]
   12f3a:	680b      	ldr	r3, [r1, #0]
   12f3c:	429a      	cmp	r2, r3
   12f3e:	902b      	str	r0, [sp, #172]	; 0xac
   12f40:	912a      	str	r1, [sp, #168]	; 0xa8
   12f42:	d10a      	bne.n	12f5a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x64a>
   12f44:	e7ff      	b.n	12f46 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x636>

    //  Create the Semaphore that will signal whether the SPI request has completed
    let rc = unsafe { os::os_sem_init(&mut SPI_SEM, 0) };  //  Init to 0 tokens, so caller will block until SPI request is completed.
   12f46:	f646 207c 	movw	r0, #27260	; 0x6a7c
   12f4a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12f4e:	2100      	movs	r1, #0
   12f50:	f008 fcde 	bl	1b910 <os_sem_init>
   12f54:	f8cd 0420 	str.w	r0, [sp, #1056]	; 0x420
   12f58:	e07b      	b.n	13052 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x742>
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   12f5a:	f240 00c0 	movw	r0, #192	; 0xc0
   12f5e:	f2c0 0002 	movt	r0, #2
   12f62:	6801      	ldr	r1, [r0, #0]
   12f64:	982b      	ldr	r0, [sp, #172]	; 0xac
   12f66:	f8cd 0400 	str.w	r0, [sp, #1024]	; 0x400
   12f6a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   12f6c:	f8cd 2404 	str.w	r2, [sp, #1028]	; 0x404
   12f70:	f240 13ac 	movw	r3, #428	; 0x1ac
   12f74:	f2c0 0302 	movt	r3, #2
   12f78:	681b      	ldr	r3, [r3, #0]
   12f7a:	f240 0ce0 	movw	ip, #224	; 0xe0
   12f7e:	f2c0 0c02 	movt	ip, #2
   12f82:	f8dc c000 	ldr.w	ip, [ip]
   12f86:	46ee      	mov	lr, sp
   12f88:	2400      	movs	r4, #0
   12f8a:	f8ce 4000 	str.w	r4, [lr]
   12f8e:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   12f92:	2201      	movs	r2, #1
   12f94:	9129      	str	r1, [sp, #164]	; 0xa4
   12f96:	4619      	mov	r1, r3
   12f98:	4663      	mov	r3, ip
   12f9a:	f7f5 fd7f 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12f9e:	e7ff      	b.n	12fa0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x690>
   12fa0:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
   12fa4:	90fd      	str	r0, [sp, #1012]	; 0x3f4
   12fa6:	f20d 4004 	addw	r0, sp, #1028	; 0x404
   12faa:	90fe      	str	r0, [sp, #1016]	; 0x3f8
   12fac:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   12fb0:	90ff      	str	r0, [sp, #1020]	; 0x3fc
   12fb2:	98fd      	ldr	r0, [sp, #1012]	; 0x3f4
   12fb4:	f8cd 0570 	str.w	r0, [sp, #1392]	; 0x570
   12fb8:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
   12fba:	f8cd 1574 	str.w	r1, [sp, #1396]	; 0x574
   12fbe:	9aff      	ldr	r2, [sp, #1020]	; 0x3fc
   12fc0:	f8cd 2578 	str.w	r2, [sp, #1400]	; 0x578
   12fc4:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12fc8:	f2c0 0300 	movt	r3, #0
   12fcc:	9128      	str	r1, [sp, #160]	; 0xa0
   12fce:	4619      	mov	r1, r3
   12fd0:	9227      	str	r2, [sp, #156]	; 0x9c
   12fd2:	f7f6 f9c2 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12fd6:	9026      	str	r0, [sp, #152]	; 0x98
   12fd8:	9125      	str	r1, [sp, #148]	; 0x94
   12fda:	e7ff      	b.n	12fdc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6cc>
   12fdc:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12fe0:	f2c0 0100 	movt	r1, #0
   12fe4:	9828      	ldr	r0, [sp, #160]	; 0xa0
   12fe6:	f7f6 f9b8 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12fea:	9024      	str	r0, [sp, #144]	; 0x90
   12fec:	9123      	str	r1, [sp, #140]	; 0x8c
   12fee:	e7ff      	b.n	12ff0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6e0>
   12ff0:	f647 61d7 	movw	r1, #32471	; 0x7ed7
   12ff4:	f2c0 0101 	movt	r1, #1
   12ff8:	9827      	ldr	r0, [sp, #156]	; 0x9c
   12ffa:	f7f6 f9ed 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12ffe:	9022      	str	r0, [sp, #136]	; 0x88
   13000:	9121      	str	r1, [sp, #132]	; 0x84
   13002:	e7ff      	b.n	13004 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6f4>
   13004:	9826      	ldr	r0, [sp, #152]	; 0x98
   13006:	90f7      	str	r0, [sp, #988]	; 0x3dc
   13008:	9925      	ldr	r1, [sp, #148]	; 0x94
   1300a:	91f8      	str	r1, [sp, #992]	; 0x3e0
   1300c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1300e:	92f9      	str	r2, [sp, #996]	; 0x3e4
   13010:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   13012:	93fa      	str	r3, [sp, #1000]	; 0x3e8
   13014:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
   13018:	f8cd c3ec 	str.w	ip, [sp, #1004]	; 0x3ec
   1301c:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
   13020:	f8cd e3f0 	str.w	lr, [sp, #1008]	; 0x3f0
   13024:	466c      	mov	r4, sp
   13026:	2503      	movs	r5, #3
   13028:	6025      	str	r5, [r4, #0]
   1302a:	a8f1      	add	r0, sp, #964	; 0x3c4
   1302c:	abf7      	add	r3, sp, #988	; 0x3dc
   1302e:	9929      	ldr	r1, [sp, #164]	; 0xa4
   13030:	462a      	mov	r2, r5
   13032:	f7f5 fd33 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13036:	e7ff      	b.n	13038 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x728>
   13038:	f240 10b0 	movw	r0, #432	; 0x1b0
   1303c:	f2c0 0002 	movt	r0, #2
   13040:	f004 fc5b 	bl	178fa <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13044:	9020      	str	r0, [sp, #128]	; 0x80
   13046:	e7ff      	b.n	13048 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x738>
   13048:	a8f1      	add	r0, sp, #964	; 0x3c4
   1304a:	9920      	ldr	r1, [sp, #128]	; 0x80
   1304c:	f004 fc92 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13050:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13052:	f240 0068 	movw	r0, #104	; 0x68
   13056:	f2c0 0002 	movt	r0, #2
   1305a:	6800      	ldr	r0, [r0, #0]
   1305c:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
   13060:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
   13064:	f8cd 0428 	str.w	r0, [sp, #1064]	; 0x428
   13068:	f8dd 0424 	ldr.w	r0, [sp, #1060]	; 0x424
   1306c:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
   13070:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   13074:	f8cd 1580 	str.w	r1, [sp, #1408]	; 0x580
   13078:	6802      	ldr	r2, [r0, #0]
   1307a:	680b      	ldr	r3, [r1, #0]
   1307c:	429a      	cmp	r2, r3
   1307e:	901f      	str	r0, [sp, #124]	; 0x7c
   13080:	911e      	str	r1, [sp, #120]	; 0x78
   13082:	d10a      	bne.n	1309a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x78a>
   13084:	e7ff      	b.n	13086 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x776>

    //  Create the Semaphore that will throttle the number of queued SPI requests
    let rc = unsafe { os::os_sem_init(&mut SPI_THROTTLE_SEM, 2) };  //  Only max 2 requests queued, the next request will block
   13086:	f646 2084 	movw	r0, #27268	; 0x6a84
   1308a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1308e:	2102      	movs	r1, #2
   13090:	f008 fc3e 	bl	1b910 <os_sem_init>
   13094:	f8cd 0488 	str.w	r0, [sp, #1160]	; 0x488
   13098:	e088      	b.n	131ac <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x89c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   1309a:	f240 00c0 	movw	r0, #192	; 0xc0
   1309e:	f2c0 0002 	movt	r0, #2
   130a2:	6801      	ldr	r1, [r0, #0]
   130a4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   130a6:	f8cd 0468 	str.w	r0, [sp, #1128]	; 0x468
   130aa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   130ac:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
   130b0:	f240 13d8 	movw	r3, #472	; 0x1d8
   130b4:	f2c0 0302 	movt	r3, #2
   130b8:	681b      	ldr	r3, [r3, #0]
   130ba:	f240 0ce0 	movw	ip, #224	; 0xe0
   130be:	f2c0 0c02 	movt	ip, #2
   130c2:	f8dc c000 	ldr.w	ip, [ip]
   130c6:	46ee      	mov	lr, sp
   130c8:	2400      	movs	r4, #0
   130ca:	f8ce 4000 	str.w	r4, [lr]
   130ce:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   130d2:	2201      	movs	r2, #1
   130d4:	911d      	str	r1, [sp, #116]	; 0x74
   130d6:	4619      	mov	r1, r3
   130d8:	4663      	mov	r3, ip
   130da:	f7f5 fcdf 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   130de:	e7ff      	b.n	130e0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x7d0>
   130e0:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
   130e4:	f8cd 045c 	str.w	r0, [sp, #1116]	; 0x45c
   130e8:	f20d 406c 	addw	r0, sp, #1132	; 0x46c
   130ec:	f8cd 0460 	str.w	r0, [sp, #1120]	; 0x460
   130f0:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   130f4:	f8cd 0464 	str.w	r0, [sp, #1124]	; 0x464
   130f8:	f8dd 045c 	ldr.w	r0, [sp, #1116]	; 0x45c
   130fc:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
   13100:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   13104:	f8cd 1588 	str.w	r1, [sp, #1416]	; 0x588
   13108:	f8dd 2464 	ldr.w	r2, [sp, #1124]	; 0x464
   1310c:	f8cd 258c 	str.w	r2, [sp, #1420]	; 0x58c
   13110:	f249 333f 	movw	r3, #37695	; 0x933f
   13114:	f2c0 0300 	movt	r3, #0
   13118:	911c      	str	r1, [sp, #112]	; 0x70
   1311a:	4619      	mov	r1, r3
   1311c:	921b      	str	r2, [sp, #108]	; 0x6c
   1311e:	f7f6 f946 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13122:	901a      	str	r0, [sp, #104]	; 0x68
   13124:	9119      	str	r1, [sp, #100]	; 0x64
   13126:	e7ff      	b.n	13128 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x818>
   13128:	f249 313f 	movw	r1, #37695	; 0x933f
   1312c:	f2c0 0100 	movt	r1, #0
   13130:	981c      	ldr	r0, [sp, #112]	; 0x70
   13132:	f7f6 f93c 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13136:	9018      	str	r0, [sp, #96]	; 0x60
   13138:	9117      	str	r1, [sp, #92]	; 0x5c
   1313a:	e7ff      	b.n	1313c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x82c>
   1313c:	f647 61d7 	movw	r1, #32471	; 0x7ed7
   13140:	f2c0 0101 	movt	r1, #1
   13144:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13146:	f7f6 f947 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1314a:	9016      	str	r0, [sp, #88]	; 0x58
   1314c:	9115      	str	r1, [sp, #84]	; 0x54
   1314e:	e7ff      	b.n	13150 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x840>
   13150:	981a      	ldr	r0, [sp, #104]	; 0x68
   13152:	f8cd 0444 	str.w	r0, [sp, #1092]	; 0x444
   13156:	9919      	ldr	r1, [sp, #100]	; 0x64
   13158:	f8cd 1448 	str.w	r1, [sp, #1096]	; 0x448
   1315c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1315e:	f8cd 244c 	str.w	r2, [sp, #1100]	; 0x44c
   13162:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   13164:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
   13168:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
   1316c:	f8cd c454 	str.w	ip, [sp, #1108]	; 0x454
   13170:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
   13174:	f8cd e458 	str.w	lr, [sp, #1112]	; 0x458
   13178:	466c      	mov	r4, sp
   1317a:	2503      	movs	r5, #3
   1317c:	6025      	str	r5, [r4, #0]
   1317e:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   13182:	f20d 4344 	addw	r3, sp, #1092	; 0x444
   13186:	991d      	ldr	r1, [sp, #116]	; 0x74
   13188:	462a      	mov	r2, r5
   1318a:	f7f5 fc87 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1318e:	e7ff      	b.n	13190 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x880>
   13190:	f240 10dc 	movw	r0, #476	; 0x1dc
   13194:	f2c0 0002 	movt	r0, #2
   13198:	f004 fbaf 	bl	178fa <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1319c:	9014      	str	r0, [sp, #80]	; 0x50
   1319e:	e7ff      	b.n	131a0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x890>
   131a0:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   131a4:	9914      	ldr	r1, [sp, #80]	; 0x50
   131a6:	f004 fbe5 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   131aa:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   131ac:	f240 0068 	movw	r0, #104	; 0x68
   131b0:	f2c0 0002 	movt	r0, #2
   131b4:	6800      	ldr	r0, [r0, #0]
   131b6:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
   131ba:	f8cd 148c 	str.w	r1, [sp, #1164]	; 0x48c
   131be:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
   131c2:	f8dd 048c 	ldr.w	r0, [sp, #1164]	; 0x48c
   131c6:	f8cd 0590 	str.w	r0, [sp, #1424]	; 0x590
   131ca:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   131ce:	f8cd 1594 	str.w	r1, [sp, #1428]	; 0x594
   131d2:	6802      	ldr	r2, [r0, #0]
   131d4:	680b      	ldr	r3, [r1, #0]
   131d6:	429a      	cmp	r2, r3
   131d8:	9013      	str	r0, [sp, #76]	; 0x4c
   131da:	9112      	str	r1, [sp, #72]	; 0x48
   131dc:	d125      	bne.n	1322a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x91a>
   131de:	e7ff      	b.n	131e0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x8d0>
    
    //  Create a task to send SPI requests sequentially from the SPI Event Queue and Mbuf Queue
    os::task_init(                //  Create a new task and start it...
        unsafe { &mut SPI_TASK }, //  Task object will be saved here
        &init_strn!( "spi" ),     //  Name of task
   131e0:	f240 2008 	movw	r0, #520	; 0x208
   131e4:	f2c0 0002 	movt	r0, #2
   131e8:	6801      	ldr	r1, [r0, #0]
        Some( spi_task_func ),    //  Function to execute when task starts
   131ea:	f243 308b 	movw	r0, #13195	; 0x338b
   131ee:	f2c0 0001 	movt	r0, #1
   131f2:	f8cd 04f4 	str.w	r0, [sp, #1268]	; 0x4f4
    os::task_init(                //  Create a new task and start it...
   131f6:	f8dd 24f4 	ldr.w	r2, [sp, #1268]	; 0x4f4
   131fa:	4668      	mov	r0, sp
   131fc:	f44f 7380 	mov.w	r3, #256	; 0x100
   13200:	6103      	str	r3, [r0, #16]
   13202:	60c3      	str	r3, [r0, #12]
   13204:	f646 3304 	movw	r3, #27396	; 0x6b04
   13208:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1320c:	6083      	str	r3, [r0, #8]
   1320e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13212:	6043      	str	r3, [r0, #4]
   13214:	230a      	movs	r3, #10
   13216:	6003      	str	r3, [r0, #0]
   13218:	f646 20b4 	movw	r0, #27316	; 0x6ab4
   1321c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13220:	2300      	movs	r3, #0
   13222:	f7f5 fd35 	bl	8c90 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
   13226:	9011      	str	r0, [sp, #68]	; 0x44
   13228:	e088      	b.n	1333c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   1322a:	f240 00c0 	movw	r0, #192	; 0xc0
   1322e:	f2c0 0002 	movt	r0, #2
   13232:	6801      	ldr	r1, [r0, #0]
   13234:	9813      	ldr	r0, [sp, #76]	; 0x4c
   13236:	f8cd 04d0 	str.w	r0, [sp, #1232]	; 0x4d0
   1323a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1323c:	f8cd 24d4 	str.w	r2, [sp, #1236]	; 0x4d4
   13240:	f240 13d8 	movw	r3, #472	; 0x1d8
   13244:	f2c0 0302 	movt	r3, #2
   13248:	681b      	ldr	r3, [r3, #0]
   1324a:	f240 0ce0 	movw	ip, #224	; 0xe0
   1324e:	f2c0 0c02 	movt	ip, #2
   13252:	f8dc c000 	ldr.w	ip, [ip]
   13256:	46ee      	mov	lr, sp
   13258:	2400      	movs	r4, #0
   1325a:	f8ce 4000 	str.w	r4, [lr]
   1325e:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   13262:	2201      	movs	r2, #1
   13264:	9110      	str	r1, [sp, #64]	; 0x40
   13266:	4619      	mov	r1, r3
   13268:	4663      	mov	r3, ip
   1326a:	f7f5 fc17 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1326e:	e7ff      	b.n	13270 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x960>
   13270:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
   13274:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
   13278:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
   1327c:	f8cd 04c8 	str.w	r0, [sp, #1224]	; 0x4c8
   13280:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   13284:	f8cd 04cc 	str.w	r0, [sp, #1228]	; 0x4cc
   13288:	f8dd 04c4 	ldr.w	r0, [sp, #1220]	; 0x4c4
   1328c:	f8cd 0598 	str.w	r0, [sp, #1432]	; 0x598
   13290:	f8dd 14c8 	ldr.w	r1, [sp, #1224]	; 0x4c8
   13294:	f8cd 159c 	str.w	r1, [sp, #1436]	; 0x59c
   13298:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
   1329c:	f8cd 25a0 	str.w	r2, [sp, #1440]	; 0x5a0
   132a0:	f249 333f 	movw	r3, #37695	; 0x933f
   132a4:	f2c0 0300 	movt	r3, #0
   132a8:	910f      	str	r1, [sp, #60]	; 0x3c
   132aa:	4619      	mov	r1, r3
   132ac:	920e      	str	r2, [sp, #56]	; 0x38
   132ae:	f7f6 f87e 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   132b2:	900d      	str	r0, [sp, #52]	; 0x34
   132b4:	910c      	str	r1, [sp, #48]	; 0x30
   132b6:	e7ff      	b.n	132b8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9a8>
   132b8:	f249 313f 	movw	r1, #37695	; 0x933f
   132bc:	f2c0 0100 	movt	r1, #0
   132c0:	980f      	ldr	r0, [sp, #60]	; 0x3c
   132c2:	f7f6 f874 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   132c6:	900b      	str	r0, [sp, #44]	; 0x2c
   132c8:	910a      	str	r1, [sp, #40]	; 0x28
   132ca:	e7ff      	b.n	132cc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9bc>
   132cc:	f647 61d7 	movw	r1, #32471	; 0x7ed7
   132d0:	f2c0 0101 	movt	r1, #1
   132d4:	980e      	ldr	r0, [sp, #56]	; 0x38
   132d6:	f7f6 f87f 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   132da:	9009      	str	r0, [sp, #36]	; 0x24
   132dc:	9108      	str	r1, [sp, #32]
   132de:	e7ff      	b.n	132e0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9d0>
   132e0:	980d      	ldr	r0, [sp, #52]	; 0x34
   132e2:	f8cd 04ac 	str.w	r0, [sp, #1196]	; 0x4ac
   132e6:	990c      	ldr	r1, [sp, #48]	; 0x30
   132e8:	f8cd 14b0 	str.w	r1, [sp, #1200]	; 0x4b0
   132ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   132ee:	f8cd 24b4 	str.w	r2, [sp, #1204]	; 0x4b4
   132f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   132f4:	f8cd 34b8 	str.w	r3, [sp, #1208]	; 0x4b8
   132f8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   132fc:	f8cd c4bc 	str.w	ip, [sp, #1212]	; 0x4bc
   13300:	f8dd e020 	ldr.w	lr, [sp, #32]
   13304:	f8cd e4c0 	str.w	lr, [sp, #1216]	; 0x4c0
   13308:	466c      	mov	r4, sp
   1330a:	2503      	movs	r5, #3
   1330c:	6025      	str	r5, [r4, #0]
   1330e:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   13312:	f20d 43ac 	addw	r3, sp, #1196	; 0x4ac
   13316:	9910      	ldr	r1, [sp, #64]	; 0x40
   13318:	462a      	mov	r2, r5
   1331a:	f7f5 fbbf 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1331e:	e7ff      	b.n	13320 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa10>
   13320:	f240 10ec 	movw	r0, #492	; 0x1ec
   13324:	f2c0 0002 	movt	r0, #2
   13328:	f004 fae7 	bl	178fa <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1332c:	9007      	str	r0, [sp, #28]
   1332e:	e7ff      	b.n	13330 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa20>
   13330:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   13334:	9907      	ldr	r1, [sp, #28]
   13336:	f004 fb1d 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1333a:	defe      	udf	#254	; 0xfe
    os::task_init(                //  Create a new task and start it...
   1333c:	9811      	ldr	r0, [sp, #68]	; 0x44
   1333e:	f7f5 fc1b 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   13342:	f8cd 04f0 	str.w	r0, [sp, #1264]	; 0x4f0
   13346:	e7ff      	b.n	13348 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa38>
        NULL,  //  Argument to be passed to above function
        10,    //  Task priority: highest is 0, lowest is 255 (main task is 127)
        os::OS_WAIT_FOREVER as u32,     //  Don't do sanity / watchdog checking
        unsafe { &mut SPI_TASK_STACK }, //  Stack space for the task
        SPI_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                               //  `?` means check for error
   13348:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   1334c:	1e41      	subs	r1, r0, #1
   1334e:	bf18      	it	ne
   13350:	2101      	movne	r1, #1
   13352:	2801      	cmp	r0, #1
   13354:	d001      	beq.n	1335a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa4a>
   13356:	e7ff      	b.n	13358 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa48>
   13358:	e005      	b.n	13366 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa56>
   1335a:	2000      	movs	r0, #0
    Ok(())
   1335c:	9069      	str	r0, [sp, #420]	; 0x1a4
   1335e:	2001      	movs	r0, #1
   13360:	9069      	str	r0, [sp, #420]	; 0x1a4
}
   13362:	e008      	b.n	13376 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>
    os::task_init(                //  Create a new task and start it...
   13364:	defe      	udf	#254	; 0xfe
    ) ? ;                               //  `?` means check for error
   13366:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   1336a:	f8cd 05a4 	str.w	r0, [sp, #1444]	; 0x5a4
   1336e:	f7ff fa17 	bl	127a0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   13372:	9006      	str	r0, [sp, #24]
   13374:	e003      	b.n	1337e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa6e>
}
   13376:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   13378:	f50d 6db5 	add.w	sp, sp, #1448	; 0x5a8
   1337c:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;                               //  `?` means check for error
   1337e:	9806      	ldr	r0, [sp, #24]
   13380:	f7f5 fbee 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   13384:	9069      	str	r0, [sp, #420]	; 0x1a4
   13386:	e7ff      	b.n	13388 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa78>
   13388:	e7f5      	b.n	13376 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>

0001338a <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E>:

/// SPI Task Function.  Execute sequentially each SPI request posted to our Event Queue.  When there are no requests to process, block until one arrives.
extern "C" fn spi_task_func(_arg: Ptr) {
   1338a:	b580      	push	{r7, lr}
   1338c:	b082      	sub	sp, #8
   1338e:	9001      	str	r0, [sp, #4]
    loop {
   13390:	e7ff      	b.n	13392 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>
        //  Forever read SPI requests and execute them. Will call spi_event_callback().
        os::eventq_run(
   13392:	f646 20a4 	movw	r0, #27300	; 0x6aa4
   13396:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1339a:	f7f5 fc60 	bl	8c5e <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
   1339e:	9000      	str	r0, [sp, #0]
   133a0:	e7ff      	b.n	133a2 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x18>
   133a2:	f240 210c 	movw	r1, #524	; 0x20c
   133a6:	f2c0 0102 	movt	r1, #2
   133aa:	f240 2318 	movw	r3, #536	; 0x218
   133ae:	f2c0 0302 	movt	r3, #2
   133b2:	220b      	movs	r2, #11
   133b4:	9800      	ldr	r0, [sp, #0]
   133b6:	f7f5 fba0 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   133ba:	e7ff      	b.n	133bc <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x32>
            unsafe { &mut SPI_EVENT_QUEUE }
        ).expect("eventq fail");

        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
   133bc:	f007 f9e2 	bl	1a784 <hal_watchdog_tickle>
   133c0:	e7ff      	b.n	133c2 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x38>
    loop {
   133c2:	e7e6      	b.n	13392 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>

000133c4 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>:
    }
}

/// Set pending request for non-blocking SPI write for Command Byte. Returns without waiting for write to complete.
pub fn spi_noblock_write_command(cmd: u8) -> MynewtResult<()> {
   133c4:	b580      	push	{r7, lr}
   133c6:	b08c      	sub	sp, #48	; 0x30
   133c8:	4601      	mov	r1, r0
   133ca:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    //  If there is a pending Command Byte, enqueue it.
    spi_noblock_write_flush() ? ;
   133ce:	9104      	str	r1, [sp, #16]
   133d0:	f000 f8d4 	bl	1357c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   133d4:	9003      	str	r0, [sp, #12]
   133d6:	e7ff      	b.n	133d8 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x14>
   133d8:	9803      	ldr	r0, [sp, #12]
   133da:	f7f5 fbcd 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   133de:	9006      	str	r0, [sp, #24]
   133e0:	e7ff      	b.n	133e2 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x1e>
   133e2:	9806      	ldr	r0, [sp, #24]
   133e4:	1e41      	subs	r1, r0, #1
   133e6:	bf18      	it	ne
   133e8:	2101      	movne	r1, #1
   133ea:	2801      	cmp	r0, #1
   133ec:	d001      	beq.n	133f2 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2e>
   133ee:	e7ff      	b.n	133f0 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2c>
   133f0:	e00c      	b.n	1340c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x48>
    //  Set the pending Command Byte.
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   133f2:	f644 2070 	movw	r0, #19056	; 0x4a70
   133f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   133fa:	9904      	ldr	r1, [sp, #16]
   133fc:	f7ff f9a4 	bl	12748 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>
   13400:	f88d 101d 	strb.w	r1, [sp, #29]
   13404:	f88d 001c 	strb.w	r0, [sp, #28]
   13408:	e00f      	b.n	1342a <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x66>
    spi_noblock_write_flush() ? ;
   1340a:	defe      	udf	#254	; 0xfe
   1340c:	9806      	ldr	r0, [sp, #24]
   1340e:	900b      	str	r0, [sp, #44]	; 0x2c
   13410:	f7ff f9c6 	bl	127a0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   13414:	9002      	str	r0, [sp, #8]
   13416:	e002      	b.n	1341e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x5a>
        return Err(MynewtError::SYS_EINVAL);
    }
    Ok(())
}
   13418:	9805      	ldr	r0, [sp, #20]
   1341a:	b00c      	add	sp, #48	; 0x30
   1341c:	bd80      	pop	{r7, pc}
    spi_noblock_write_flush() ? ;
   1341e:	9802      	ldr	r0, [sp, #8]
   13420:	f7f5 fb9e 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   13424:	9005      	str	r0, [sp, #20]
   13426:	e7ff      	b.n	13428 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x64>
   13428:	e7f6      	b.n	13418 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   1342a:	a807      	add	r0, sp, #28
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   1342c:	f7f5 fb8c 	bl	8b48 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>
   13430:	9001      	str	r0, [sp, #4]
   13432:	e7ff      	b.n	13434 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x70>
   13434:	9801      	ldr	r0, [sp, #4]
   13436:	07c1      	lsls	r1, r0, #31
   13438:	2900      	cmp	r1, #0
   1343a:	d105      	bne.n	13448 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x84>
   1343c:	e7ff      	b.n	1343e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x7a>
   1343e:	2000      	movs	r0, #0
    Ok(())
   13440:	9005      	str	r0, [sp, #20]
   13442:	2001      	movs	r0, #1
   13444:	9005      	str	r0, [sp, #20]
}
   13446:	e7e7      	b.n	13418 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   13448:	f06f 0001 	mvn.w	r0, #1
        return Err(MynewtError::SYS_EINVAL);
   1344c:	9008      	str	r0, [sp, #32]
   1344e:	9808      	ldr	r0, [sp, #32]
   13450:	9005      	str	r0, [sp, #20]
   13452:	e7e1      	b.n	13418 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>

00013454 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>:

/// Set pending request for non-blocking SPI write for Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_data(data: &[u8]) -> MynewtResult<()> {
   13454:	b580      	push	{r7, lr}
   13456:	b094      	sub	sp, #80	; 0x50
   13458:	9010      	str	r0, [sp, #64]	; 0x40
   1345a:	9111      	str	r1, [sp, #68]	; 0x44
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
   1345c:	f644 2270 	movw	r2, #19056	; 0x4a70
   13460:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13464:	900d      	str	r0, [sp, #52]	; 0x34
   13466:	4610      	mov	r0, r2
   13468:	910c      	str	r1, [sp, #48]	; 0x30
   1346a:	f7ff f953 	bl	12714 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   1346e:	900b      	str	r0, [sp, #44]	; 0x2c
   13470:	910a      	str	r1, [sp, #40]	; 0x28
   13472:	e7ff      	b.n	13474 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x20>
   13474:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13476:	990a      	ldr	r1, [sp, #40]	; 0x28
   13478:	f7fe fd07 	bl	11e8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1347c:	9009      	str	r0, [sp, #36]	; 0x24
   1347e:	e7ff      	b.n	13480 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x2c>
   13480:	9809      	ldr	r0, [sp, #36]	; 0x24
   13482:	2800      	cmp	r0, #0
   13484:	d009      	beq.n	1349a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x46>
   13486:	e7ff      	b.n	13488 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x34>
    //  if unsafe { PENDING_DATA.len() + data.len() > PENDING_DATA.capacity() } { cortex_m::asm::bkpt(); } ////
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   13488:	f644 2078 	movw	r0, #19064	; 0x4a78
   1348c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13490:	f7ff f934 	bl	126fc <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   13494:	9008      	str	r0, [sp, #32]
   13496:	9107      	str	r1, [sp, #28]
   13498:	e00b      	b.n	134b2 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x5e>
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
   1349a:	f240 2028 	movw	r0, #552	; 0x228
   1349e:	f2c0 0002 	movt	r0, #2
   134a2:	f240 2234 	movw	r2, #564	; 0x234
   134a6:	f2c0 0202 	movt	r2, #2
   134aa:	210b      	movs	r1, #11
   134ac:	f004 fa2c 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   134b0:	defe      	udf	#254	; 0xfe
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   134b2:	9808      	ldr	r0, [sp, #32]
   134b4:	9907      	ldr	r1, [sp, #28]
   134b6:	f7fe fce8 	bl	11e8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   134ba:	9006      	str	r0, [sp, #24]
   134bc:	e7ff      	b.n	134be <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x6a>
   134be:	980d      	ldr	r0, [sp, #52]	; 0x34
   134c0:	990c      	ldr	r1, [sp, #48]	; 0x30
   134c2:	f7fe fce2 	bl	11e8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   134c6:	9005      	str	r0, [sp, #20]
   134c8:	e7ff      	b.n	134ca <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x76>
   134ca:	9806      	ldr	r0, [sp, #24]
   134cc:	9905      	ldr	r1, [sp, #20]
   134ce:	1842      	adds	r2, r0, r1
   134d0:	4613      	mov	r3, r2
   134d2:	4282      	cmp	r2, r0
   134d4:	9304      	str	r3, [sp, #16]
   134d6:	d345      	bcc.n	13564 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x110>
   134d8:	e7ff      	b.n	134da <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x86>
   134da:	f644 2078 	movw	r0, #19064	; 0x4a78
   134de:	f2c2 0000 	movt	r0, #8192	; 0x2000
   134e2:	f7ff f953 	bl	1278c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E>
   134e6:	9003      	str	r0, [sp, #12]
   134e8:	e7ff      	b.n	134ea <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x96>
   134ea:	9804      	ldr	r0, [sp, #16]
   134ec:	9903      	ldr	r1, [sp, #12]
   134ee:	4288      	cmp	r0, r1
   134f0:	d80a      	bhi.n	13508 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xb4>
   134f2:	e7ff      	b.n	134f4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xa0>
    //  Append Data Bytes to Pending Data Bytes.
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   134f4:	f644 2078 	movw	r0, #19064	; 0x4a78
   134f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   134fc:	990d      	ldr	r1, [sp, #52]	; 0x34
   134fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13500:	f7ff f914 	bl	1272c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E>
   13504:	9002      	str	r0, [sp, #8]
   13506:	e00b      	b.n	13520 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xcc>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   13508:	f240 207c 	movw	r0, #636	; 0x27c
   1350c:	f2c0 0002 	movt	r0, #2
   13510:	f240 2288 	movw	r2, #648	; 0x288
   13514:	f2c0 0202 	movt	r2, #2
   13518:	210c      	movs	r1, #12
   1351a:	f004 f9f5 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1351e:	defe      	udf	#254	; 0xfe
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13520:	9802      	ldr	r0, [sp, #8]
   13522:	f000 0001 	and.w	r0, r0, #1
   13526:	f7f5 fb21 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1352a:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   1352e:	e7ff      	b.n	13530 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xdc>
   13530:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
   13534:	07c1      	lsls	r1, r0, #31
   13536:	2900      	cmp	r1, #0
   13538:	d001      	beq.n	1353e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xea>
   1353a:	e7ff      	b.n	1353c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xe8>
   1353c:	e005      	b.n	1354a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xf6>
   1353e:	2000      	movs	r0, #0
    Ok(())
   13540:	900e      	str	r0, [sp, #56]	; 0x38
   13542:	2001      	movs	r0, #1
   13544:	900e      	str	r0, [sp, #56]	; 0x38
}
   13546:	e004      	b.n	13552 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xfe>
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13548:	defe      	udf	#254	; 0xfe
   1354a:	f7f5 fa9c 	bl	8a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   1354e:	9001      	str	r0, [sp, #4]
   13550:	e002      	b.n	13558 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x104>
}
   13552:	980e      	ldr	r0, [sp, #56]	; 0x38
   13554:	b014      	add	sp, #80	; 0x50
   13556:	bd80      	pop	{r7, pc}
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13558:	9801      	ldr	r0, [sp, #4]
   1355a:	f7f5 fb01 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   1355e:	900e      	str	r0, [sp, #56]	; 0x38
   13560:	e7ff      	b.n	13562 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x10e>
   13562:	e7f6      	b.n	13552 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xfe>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   13564:	f240 2060 	movw	r0, #608	; 0x260
   13568:	f2c0 0002 	movt	r0, #2
   1356c:	f240 2244 	movw	r2, #580	; 0x244
   13570:	f2c0 0202 	movt	r2, #2
   13574:	211c      	movs	r1, #28
   13576:	f004 f9c7 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1357a:	defe      	udf	#254	; 0xfe

0001357c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>:

/// Enqueue any pending request for non-blocking SPI write for Command Byte and Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_flush() -> MynewtResult<()> {
   1357c:	b580      	push	{r7, lr}
   1357e:	b090      	sub	sp, #64	; 0x40
    //  If no pending request, quit.
    if unsafe { PENDING_CMD.len() } == 0 &&
   13580:	f644 2070 	movw	r0, #19056	; 0x4a70
   13584:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13588:	f7ff f8c4 	bl	12714 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   1358c:	900b      	str	r0, [sp, #44]	; 0x2c
   1358e:	910a      	str	r1, [sp, #40]	; 0x28
   13590:	e016      	b.n	135c0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x44>
   13592:	2001      	movs	r0, #1
   13594:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   13598:	e00c      	b.n	135b4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
   1359a:	2000      	movs	r0, #0
   1359c:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   135a0:	e008      	b.n	135b4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
        unsafe { PENDING_DATA.len() } == 0 {
   135a2:	f644 2078 	movw	r0, #19064	; 0x4a78
   135a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   135aa:	f7ff f8a7 	bl	126fc <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   135ae:	9009      	str	r0, [sp, #36]	; 0x24
   135b0:	9108      	str	r1, [sp, #32]
   135b2:	e00f      	b.n	135d4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x58>
    if unsafe { PENDING_CMD.len() } == 0 &&
   135b4:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   135b8:	07c0      	lsls	r0, r0, #31
   135ba:	2800      	cmp	r0, #0
   135bc:	d11d      	bne.n	135fa <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x7e>
   135be:	e013      	b.n	135e8 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x6c>
   135c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   135c2:	990a      	ldr	r1, [sp, #40]	; 0x28
   135c4:	f7fe fc61 	bl	11e8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   135c8:	9007      	str	r0, [sp, #28]
   135ca:	e7ff      	b.n	135cc <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x50>
   135cc:	9807      	ldr	r0, [sp, #28]
   135ce:	2800      	cmp	r0, #0
   135d0:	d0e7      	beq.n	135a2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x26>
   135d2:	e7e2      	b.n	1359a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        unsafe { PENDING_DATA.len() } == 0 {
   135d4:	9809      	ldr	r0, [sp, #36]	; 0x24
   135d6:	9908      	ldr	r1, [sp, #32]
   135d8:	f7fe fc57 	bl	11e8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   135dc:	9006      	str	r0, [sp, #24]
   135de:	e7ff      	b.n	135e0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x64>
    if unsafe { PENDING_CMD.len() } == 0 &&
   135e0:	9806      	ldr	r0, [sp, #24]
   135e2:	2800      	cmp	r0, #0
   135e4:	d0d5      	beq.n	13592 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x16>
   135e6:	e7d8      	b.n	1359a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        return Ok(());
    }
    //  Enqueue the pending SPI request into the Mbuf Queue
    if let Err(e) = spi_noblock_write(
        unsafe { PENDING_CMD[0] },  //  Command Byte
   135e8:	f644 2070 	movw	r0, #19056	; 0x4a70
   135ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
   135f0:	f7ff f890 	bl	12714 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   135f4:	9005      	str	r0, [sp, #20]
   135f6:	9104      	str	r1, [sp, #16]
   135f8:	e007      	b.n	1360a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x8e>
   135fa:	2000      	movs	r0, #0
        return Ok(());
   135fc:	900c      	str	r0, [sp, #48]	; 0x30
   135fe:	2001      	movs	r0, #1
   13600:	900c      	str	r0, [sp, #48]	; 0x30
   13602:	e7ff      	b.n	13604 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    }
    //  Else clear the pending request and return Ok.
    unsafe { PENDING_CMD.clear() };
    unsafe { PENDING_DATA.clear() };
    Ok(())
}
   13604:	980c      	ldr	r0, [sp, #48]	; 0x30
   13606:	b010      	add	sp, #64	; 0x40
   13608:	bd80      	pop	{r7, pc}
        unsafe { PENDING_CMD[0] },  //  Command Byte
   1360a:	9804      	ldr	r0, [sp, #16]
   1360c:	2800      	cmp	r0, #0
   1360e:	d03f      	beq.n	13690 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x114>
   13610:	e7ff      	b.n	13612 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x96>
   13612:	9805      	ldr	r0, [sp, #20]
   13614:	7801      	ldrb	r1, [r0, #0]
        unsafe { &PENDING_DATA }    //  Data Bytes
   13616:	f644 2078 	movw	r0, #19064	; 0x4a78
   1361a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1361e:	9103      	str	r1, [sp, #12]
   13620:	f7ff f86c 	bl	126fc <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   13624:	9002      	str	r0, [sp, #8]
   13626:	9101      	str	r1, [sp, #4]
   13628:	e7ff      	b.n	1362a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xae>
    if let Err(e) = spi_noblock_write(
   1362a:	9803      	ldr	r0, [sp, #12]
   1362c:	9902      	ldr	r1, [sp, #8]
   1362e:	9a01      	ldr	r2, [sp, #4]
   13630:	f000 f837 	bl	136a2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>
   13634:	900e      	str	r0, [sp, #56]	; 0x38
   13636:	e7ff      	b.n	13638 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xbc>
   13638:	980e      	ldr	r0, [sp, #56]	; 0x38
   1363a:	2801      	cmp	r0, #1
   1363c:	d107      	bne.n	1364e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xd2>
   1363e:	e7ff      	b.n	13640 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xc4>
    unsafe { PENDING_CMD.clear() };
   13640:	f644 2070 	movw	r0, #19056	; 0x4a70
   13644:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13648:	f7ff f890 	bl	1276c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   1364c:	e014      	b.n	13678 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xfc>
    if let Err(e) = spi_noblock_write(
   1364e:	980e      	ldr	r0, [sp, #56]	; 0x38
   13650:	900f      	str	r0, [sp, #60]	; 0x3c
        unsafe { PENDING_CMD.clear() };
   13652:	f644 2170 	movw	r1, #19056	; 0x4a70
   13656:	f2c2 0100 	movt	r1, #8192	; 0x2000
   1365a:	9000      	str	r0, [sp, #0]
   1365c:	4608      	mov	r0, r1
   1365e:	f7ff f885 	bl	1276c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   13662:	e7ff      	b.n	13664 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xe8>
        unsafe { PENDING_DATA.clear() };    
   13664:	f644 2078 	movw	r0, #19064	; 0x4a78
   13668:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1366c:	f7ff f886 	bl	1277c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>
   13670:	e7ff      	b.n	13672 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xf6>
        return Err(e);
   13672:	9800      	ldr	r0, [sp, #0]
   13674:	900c      	str	r0, [sp, #48]	; 0x30
   13676:	e7c5      	b.n	13604 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    unsafe { PENDING_DATA.clear() };
   13678:	f644 2078 	movw	r0, #19064	; 0x4a78
   1367c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13680:	f7ff f87c 	bl	1277c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>
   13684:	e7ff      	b.n	13686 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x10a>
   13686:	2000      	movs	r0, #0
    Ok(())
   13688:	900c      	str	r0, [sp, #48]	; 0x30
   1368a:	2001      	movs	r0, #1
   1368c:	900c      	str	r0, [sp, #48]	; 0x30
}
   1368e:	e7b9      	b.n	13604 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
        unsafe { PENDING_CMD[0] },  //  Command Byte
   13690:	f240 2098 	movw	r0, #664	; 0x298
   13694:	f2c0 0002 	movt	r0, #2
   13698:	2100      	movs	r1, #0
   1369a:	9a04      	ldr	r2, [sp, #16]
   1369c:	f004 f94a 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   136a0:	defe      	udf	#254	; 0xfe

000136a2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>:

/// Enqueue request for non-blocking SPI write. Returns without waiting for write to complete.
/// Request must have a Command Byte, followed by optional Data Bytes.
fn spi_noblock_write(cmd: u8, data: &[u8]) -> MynewtResult<()> {
   136a2:	b580      	push	{r7, lr}
   136a4:	b0a0      	sub	sp, #128	; 0x80
   136a6:	4603      	mov	r3, r0
   136a8:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   136ac:	9116      	str	r1, [sp, #88]	; 0x58
   136ae:	9217      	str	r2, [sp, #92]	; 0x5c
   136b0:	f247 5030 	movw	r0, #30000	; 0x7530
    console::print("spi data "); ////
    console::dump(data.as_ptr(), data.len() as u32); console::print("\n"); ////
    console::flush(); */

    //  Throttle the number of queued SPI requests.
    let timeout = 30_000;
   136b4:	9018      	str	r0, [sp, #96]	; 0x60
   136b6:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   136ba:	fba0 0c0c 	umull	r0, ip, r0, ip
   136be:	f1bc 0f00 	cmp.w	ip, #0
   136c2:	920f      	str	r2, [sp, #60]	; 0x3c
   136c4:	910e      	str	r1, [sp, #56]	; 0x38
   136c6:	900d      	str	r0, [sp, #52]	; 0x34
   136c8:	f040 80c8 	bne.w	1385c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ba>
   136cc:	e7ff      	b.n	136ce <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x2c>
   136ce:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   136d2:	f2c1 0062 	movt	r0, #4194	; 0x1062
   136d6:	990d      	ldr	r1, [sp, #52]	; 0x34
   136d8:	fba1 0200 	umull	r0, r2, r1, r0
   136dc:	0991      	lsrs	r1, r2, #6
   136de:	f646 2284 	movw	r2, #27268	; 0x6a84
   136e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   136e6:	900c      	str	r0, [sp, #48]	; 0x30
   136e8:	4610      	mov	r0, r2
   136ea:	f008 f94b 	bl	1b984 <os_sem_pend>
   136ee:	e7ff      	b.n	136f0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x4e>

    //  Allocate a new mbuf chain to copy the data to be sent.
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   136f0:	980e      	ldr	r0, [sp, #56]	; 0x38
   136f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   136f4:	f7fe fbc9 	bl	11e8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   136f8:	900b      	str	r0, [sp, #44]	; 0x2c
   136fa:	e7ff      	b.n	136fc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x5a>
   136fc:	2001      	movs	r0, #1
   136fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13700:	fa10 f081 	uxtah	r0, r0, r1
   13704:	b282      	uxth	r2, r0
   13706:	4603      	mov	r3, r0
   13708:	4282      	cmp	r2, r0
   1370a:	930a      	str	r3, [sp, #40]	; 0x28
   1370c:	f040 80b2 	bne.w	13874 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1d2>
   13710:	e7ff      	b.n	13712 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x70>
   13712:	980a      	ldr	r0, [sp, #40]	; 0x28
   13714:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
    let mbuf = unsafe { os::os_msys_get_pkthdr(len, 0) };
   13718:	b280      	uxth	r0, r0
   1371a:	2100      	movs	r1, #0
   1371c:	f007 fe40 	bl	1b3a0 <os_msys_get_pkthdr>
   13720:	4601      	mov	r1, r0
   13722:	901a      	str	r0, [sp, #104]	; 0x68
   13724:	9109      	str	r1, [sp, #36]	; 0x24
   13726:	e7ff      	b.n	13728 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x86>
    if mbuf.is_null() {  //  If out of memory, quit.
   13728:	9809      	ldr	r0, [sp, #36]	; 0x24
   1372a:	f000 ff17 	bl	1455c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   1372e:	9008      	str	r0, [sp, #32]
   13730:	e7ff      	b.n	13732 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x90>
   13732:	9808      	ldr	r0, [sp, #32]
   13734:	07c1      	lsls	r1, r0, #31
   13736:	2900      	cmp	r1, #0
   13738:	d106      	bne.n	13748 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xa6>
   1373a:	e7ff      	b.n	1373c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x9a>
   1373c:	f10d 0043 	add.w	r0, sp, #67	; 0x43
    }

    //  Append the Command Byte to the mbuf chain.
    let rc = unsafe { os::os_mbuf_append(
        mbuf, 
        core::mem::transmute(&cmd), 
   13740:	901b      	str	r0, [sp, #108]	; 0x6c
   13742:	991b      	ldr	r1, [sp, #108]	; 0x6c
   13744:	9107      	str	r1, [sp, #28]
   13746:	e010      	b.n	1376a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc8>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   13748:	f646 2084 	movw	r0, #27268	; 0x6a84
   1374c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13750:	f008 f8e6 	bl	1b920 <os_sem_release>
   13754:	e7ff      	b.n	13756 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xb4>
   13756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   1375a:	9012      	str	r0, [sp, #72]	; 0x48
   1375c:	9812      	ldr	r0, [sp, #72]	; 0x48
   1375e:	9011      	str	r0, [sp, #68]	; 0x44
   13760:	e002      	b.n	13768 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
        return Err(MynewtError::SYS_EUNKNOWN); 
    }
    Ok(())
}
   13762:	9811      	ldr	r0, [sp, #68]	; 0x44
   13764:	b020      	add	sp, #128	; 0x80
   13766:	bd80      	pop	{r7, pc}
        return Err(MynewtError::SYS_ENOMEM); 
   13768:	e7fb      	b.n	13762 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
   1376a:	2201      	movs	r2, #1
    let rc = unsafe { os::os_mbuf_append(
   1376c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1376e:	9907      	ldr	r1, [sp, #28]
   13770:	f007 fc6e 	bl	1b050 <os_mbuf_append>
   13774:	4601      	mov	r1, r0
   13776:	901c      	str	r0, [sp, #112]	; 0x70
   13778:	9106      	str	r1, [sp, #24]
   1377a:	e7ff      	b.n	1377c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xda>
    if rc != 0 {  //  If out of memory, quit.
   1377c:	9806      	ldr	r0, [sp, #24]
   1377e:	2800      	cmp	r0, #0
   13780:	d106      	bne.n	13790 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xee>
   13782:	e7ff      	b.n	13784 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xe2>
        core::mem::transmute(data.as_ptr()), 
   13784:	980e      	ldr	r0, [sp, #56]	; 0x38
   13786:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13788:	f7fe fb87 	bl	11e9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   1378c:	9005      	str	r0, [sp, #20]
   1378e:	e011      	b.n	137b4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x112>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   13790:	9809      	ldr	r0, [sp, #36]	; 0x24
   13792:	f007 fc41 	bl	1b018 <os_mbuf_free_chain>
   13796:	e7ff      	b.n	13798 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xf6>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   13798:	f646 2084 	movw	r0, #27268	; 0x6a84
   1379c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   137a0:	f008 f8be 	bl	1b920 <os_sem_release>
   137a4:	e7ff      	b.n	137a6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x104>
   137a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   137aa:	9013      	str	r0, [sp, #76]	; 0x4c
   137ac:	9813      	ldr	r0, [sp, #76]	; 0x4c
   137ae:	9011      	str	r0, [sp, #68]	; 0x44
   137b0:	e7ff      	b.n	137b2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
   137b2:	e7d9      	b.n	13768 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        core::mem::transmute(data.as_ptr()), 
   137b4:	9805      	ldr	r0, [sp, #20]
   137b6:	901d      	str	r0, [sp, #116]	; 0x74
   137b8:	991d      	ldr	r1, [sp, #116]	; 0x74
   137ba:	9104      	str	r1, [sp, #16]
   137bc:	e7ff      	b.n	137be <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x11c>
        data.len() as u16
   137be:	980e      	ldr	r0, [sp, #56]	; 0x38
   137c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   137c2:	f7fe fb62 	bl	11e8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   137c6:	9003      	str	r0, [sp, #12]
   137c8:	e7ff      	b.n	137ca <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x128>
    let rc = unsafe { os::os_mbuf_append(
   137ca:	9803      	ldr	r0, [sp, #12]
   137cc:	b282      	uxth	r2, r0
   137ce:	9809      	ldr	r0, [sp, #36]	; 0x24
   137d0:	9904      	ldr	r1, [sp, #16]
   137d2:	f007 fc3d 	bl	1b050 <os_mbuf_append>
   137d6:	4601      	mov	r1, r0
   137d8:	901e      	str	r0, [sp, #120]	; 0x78
   137da:	9102      	str	r1, [sp, #8]
   137dc:	e7ff      	b.n	137de <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x13c>
    if rc != 0 {  //  If out of memory, quit.
   137de:	9802      	ldr	r0, [sp, #8]
   137e0:	2800      	cmp	r0, #0
   137e2:	d10f      	bne.n	13804 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x162>
   137e4:	e7ff      	b.n	137e6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x144>
    let rc = unsafe { os::os_mqueue_put(
   137e6:	f646 208c 	movw	r0, #27276	; 0x6a8c
   137ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
   137ee:	f646 21a4 	movw	r1, #27300	; 0x6aa4
   137f2:	f2c2 0100 	movt	r1, #8192	; 0x2000
   137f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   137f8:	f007 fbac 	bl	1af54 <os_mqueue_put>
   137fc:	4601      	mov	r1, r0
   137fe:	901f      	str	r0, [sp, #124]	; 0x7c
   13800:	9101      	str	r1, [sp, #4]
   13802:	e011      	b.n	13828 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x186>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   13804:	9809      	ldr	r0, [sp, #36]	; 0x24
   13806:	f007 fc07 	bl	1b018 <os_mbuf_free_chain>
   1380a:	e7ff      	b.n	1380c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x16a>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   1380c:	f646 2084 	movw	r0, #27268	; 0x6a84
   13810:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13814:	f008 f884 	bl	1b920 <os_sem_release>
   13818:	e7ff      	b.n	1381a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x178>
   1381a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   1381e:	9014      	str	r0, [sp, #80]	; 0x50
   13820:	9814      	ldr	r0, [sp, #80]	; 0x50
   13822:	9011      	str	r0, [sp, #68]	; 0x44
   13824:	e7ff      	b.n	13826 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
   13826:	e7c4      	b.n	137b2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
    if rc != 0 {  //  If out of memory, quit.
   13828:	9801      	ldr	r0, [sp, #4]
   1382a:	2800      	cmp	r0, #0
   1382c:	d105      	bne.n	1383a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x198>
   1382e:	e7ff      	b.n	13830 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x18e>
   13830:	2000      	movs	r0, #0
    Ok(())
   13832:	9011      	str	r0, [sp, #68]	; 0x44
   13834:	2001      	movs	r0, #1
   13836:	9011      	str	r0, [sp, #68]	; 0x44
}
   13838:	e793      	b.n	13762 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   1383a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1383c:	f007 fbec 	bl	1b018 <os_mbuf_free_chain>
   13840:	e7ff      	b.n	13842 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1a0>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   13842:	f646 2084 	movw	r0, #27268	; 0x6a84
   13846:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1384a:	f008 f869 	bl	1b920 <os_sem_release>
   1384e:	e7ff      	b.n	13850 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ae>
   13850:	f06f 000c 	mvn.w	r0, #12
        return Err(MynewtError::SYS_EUNKNOWN); 
   13854:	9015      	str	r0, [sp, #84]	; 0x54
   13856:	9815      	ldr	r0, [sp, #84]	; 0x54
   13858:	9011      	str	r0, [sp, #68]	; 0x44
   1385a:	e7e4      	b.n	13826 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   1385c:	f240 20c0 	movw	r0, #704	; 0x2c0
   13860:	f2c0 0002 	movt	r0, #2
   13864:	f240 22a8 	movw	r2, #680	; 0x2a8
   13868:	f2c0 0202 	movt	r2, #2
   1386c:	2121      	movs	r1, #33	; 0x21
   1386e:	f004 f84b 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13872:	defe      	udf	#254	; 0xfe
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   13874:	f240 2060 	movw	r0, #608	; 0x260
   13878:	f2c0 0002 	movt	r0, #2
   1387c:	f240 22e4 	movw	r2, #740	; 0x2e4
   13880:	f2c0 0202 	movt	r2, #2
   13884:	211c      	movs	r1, #28
   13886:	f004 f83f 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1388a:	defe      	udf	#254	; 0xfe

0001388c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E>:

/// Callback for the event that is triggered when an SPI request is added to the queue.
extern "C" fn spi_event_callback(_event: *mut os::os_event) {    
   1388c:	b5b0      	push	{r4, r5, r7, lr}
   1388e:	b0c4      	sub	sp, #272	; 0x110
   13890:	9038      	str	r0, [sp, #224]	; 0xe0
   13892:	e7ff      	b.n	13894 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
    loop {  //  For each mbuf chain found...
        //  Get the next SPI request, stored as an mbuf chain.
        let om = unsafe { os::os_mqueue_get(&mut SPI_DATA_QUEUE) };
   13894:	f646 208c 	movw	r0, #27276	; 0x6a8c
   13898:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1389c:	f007 fb47 	bl	1af2e <os_mqueue_get>
   138a0:	4601      	mov	r1, r0
   138a2:	9039      	str	r0, [sp, #228]	; 0xe4
   138a4:	911b      	str	r1, [sp, #108]	; 0x6c
   138a6:	e7ff      	b.n	138a8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c>
        if om.is_null() { break; }
   138a8:	981b      	ldr	r0, [sp, #108]	; 0x6c
   138aa:	f000 fe57 	bl	1455c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   138ae:	901a      	str	r0, [sp, #104]	; 0x68
   138b0:	e7ff      	b.n	138b2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26>
   138b2:	981a      	ldr	r0, [sp, #104]	; 0x68
   138b4:	07c1      	lsls	r1, r0, #31
   138b6:	2900      	cmp	r1, #0
   138b8:	d106      	bne.n	138c8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x3c>
   138ba:	e7ff      	b.n	138bc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x30>

        //  Send the mbuf chain.
        let mut m = om;
   138bc:	981b      	ldr	r0, [sp, #108]	; 0x6c
   138be:	901c      	str	r0, [sp, #112]	; 0x70
   138c0:	2101      	movs	r1, #1
        let mut first_byte = true;
   138c2:	f88d 1075 	strb.w	r1, [sp, #117]	; 0x75
        while !m.is_null() {  //  For each mbuf in the chain...
   138c6:	e001      	b.n	138cc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>

        //  Release the throttle semaphore to allow next request to be queued.
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
        assert_eq!(rc, 0, "sem fail");    
    }
}
   138c8:	b044      	add	sp, #272	; 0x110
   138ca:	bdb0      	pop	{r4, r5, r7, pc}
        while !m.is_null() {  //  For each mbuf in the chain...
   138cc:	981c      	ldr	r0, [sp, #112]	; 0x70
   138ce:	f000 fe45 	bl	1455c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   138d2:	9019      	str	r0, [sp, #100]	; 0x64
   138d4:	e7ff      	b.n	138d6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x4a>
   138d6:	9819      	ldr	r0, [sp, #100]	; 0x64
   138d8:	07c1      	lsls	r1, r0, #31
   138da:	2900      	cmp	r1, #0
   138dc:	d004      	beq.n	138e8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x5c>
   138de:	e7ff      	b.n	138e0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x54>
        unsafe { os::os_mbuf_free_chain(om) };
   138e0:	981b      	ldr	r0, [sp, #108]	; 0x6c
   138e2:	f007 fb99 	bl	1b018 <os_mbuf_free_chain>
   138e6:	e0aa      	b.n	13a3e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1b2>
            let data = unsafe { (*m).om_data };  //  Fetch the data
   138e8:	981c      	ldr	r0, [sp, #112]	; 0x70
   138ea:	6800      	ldr	r0, [r0, #0]
   138ec:	903a      	str	r0, [sp, #232]	; 0xe8
            let len = unsafe { (*m).om_len };    //  Fetch the length
   138ee:	991c      	ldr	r1, [sp, #112]	; 0x70
   138f0:	88c9      	ldrh	r1, [r1, #6]
   138f2:	460a      	mov	r2, r1
   138f4:	f8ad 10ee 	strh.w	r1, [sp, #238]	; 0xee
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   138f8:	f89d 1075 	ldrb.w	r1, [sp, #117]	; 0x75
   138fc:	07c9      	lsls	r1, r1, #31
   138fe:	2900      	cmp	r1, #0
   13900:	9018      	str	r0, [sp, #96]	; 0x60
   13902:	9217      	str	r2, [sp, #92]	; 0x5c
   13904:	d105      	bne.n	13912 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x86>
   13906:	e7ff      	b.n	13908 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x7c>
                    unsafe { core::mem::transmute(data) }, 
   13908:	9818      	ldr	r0, [sp, #96]	; 0x60
   1390a:	903e      	str	r0, [sp, #248]	; 0xf8
   1390c:	983e      	ldr	r0, [sp, #248]	; 0xf8
   1390e:	9016      	str	r0, [sp, #88]	; 0x58
   13910:	e07b      	b.n	13a0a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17e>
   13912:	2000      	movs	r0, #0
                first_byte = false;
   13914:	f88d 0075 	strb.w	r0, [sp, #117]	; 0x75
                    unsafe { core::mem::transmute(data) }, 
   13918:	9818      	ldr	r0, [sp, #96]	; 0x60
   1391a:	903c      	str	r0, [sp, #240]	; 0xf0
   1391c:	983c      	ldr	r0, [sp, #240]	; 0xf0
   1391e:	9015      	str	r0, [sp, #84]	; 0x54
   13920:	e7ff      	b.n	13922 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x96>
   13922:	2001      	movs	r0, #1
                internal_spi_noblock_write(
   13924:	9915      	ldr	r1, [sp, #84]	; 0x54
   13926:	9014      	str	r0, [sp, #80]	; 0x50
   13928:	4608      	mov	r0, r1
   1392a:	9914      	ldr	r1, [sp, #80]	; 0x50
   1392c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1392e:	f000 f921 	bl	13b74 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   13932:	9013      	str	r0, [sp, #76]	; 0x4c
   13934:	e7ff      	b.n	13936 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xaa>
   13936:	f240 21f4 	movw	r1, #756	; 0x2f4
   1393a:	f2c0 0102 	movt	r1, #2
   1393e:	f240 3300 	movw	r3, #768	; 0x300
   13942:	f2c0 0302 	movt	r3, #2
   13946:	220c      	movs	r2, #12
   13948:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1394a:	f7f5 f8d6 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   1394e:	e7ff      	b.n	13950 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xc4>
                if  unsafe { *data } == 0x01 || //  SWRESET
   13950:	9818      	ldr	r0, [sp, #96]	; 0x60
   13952:	7801      	ldrb	r1, [r0, #0]
   13954:	2901      	cmp	r1, #1
   13956:	d013      	beq.n	13980 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   13958:	e01a      	b.n	13990 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x104>
   1395a:	2001      	movs	r0, #1
   1395c:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   13960:	e008      	b.n	13974 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
   13962:	2000      	movs	r0, #0
   13964:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   13968:	e004      	b.n	13974 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
                    unsafe { *data } == 0x29 {  //  DISPON
   1396a:	9818      	ldr	r0, [sp, #96]	; 0x60
   1396c:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   1396e:	2929      	cmp	r1, #41	; 0x29
   13970:	d0f3      	beq.n	1395a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   13972:	e7f6      	b.n	13962 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xd6>
   13974:	f89d 0076 	ldrb.w	r0, [sp, #118]	; 0x76
   13978:	07c0      	lsls	r0, r0, #31
   1397a:	2800      	cmp	r0, #0
   1397c:	d113      	bne.n	139a6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x11a>
   1397e:	e017      	b.n	139b0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   13980:	2001      	movs	r0, #1
   13982:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   13986:	e008      	b.n	1399a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
   13988:	2000      	movs	r0, #0
   1398a:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   1398e:	e004      	b.n	1399a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
                    unsafe { *data } == 0x11 || //  SLPOUT
   13990:	9818      	ldr	r0, [sp, #96]	; 0x60
   13992:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   13994:	2911      	cmp	r1, #17
   13996:	d0f3      	beq.n	13980 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   13998:	e7f6      	b.n	13988 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xfc>
   1399a:	f89d 0077 	ldrb.w	r0, [sp, #119]	; 0x77
   1399e:	07c0      	lsls	r0, r0, #31
   139a0:	2800      	cmp	r0, #0
   139a2:	d1da      	bne.n	1395a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   139a4:	e7e1      	b.n	1396a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xde>
   139a6:	20c8      	movs	r0, #200	; 0xc8
                    delay_ms(200);
   139a8:	f000 fb13 	bl	13fd2 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>
   139ac:	e7ff      	b.n	139ae <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x122>
                if  unsafe { *data } == 0x01 || //  SWRESET
   139ae:	e7ff      	b.n	139b0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   139b0:	2101      	movs	r1, #1
                    unsafe { core::mem::transmute(data.add(1)) }, 
   139b2:	9818      	ldr	r0, [sp, #96]	; 0x60
   139b4:	f7fe f9d9 	bl	11d6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   139b8:	9012      	str	r0, [sp, #72]	; 0x48
   139ba:	e7ff      	b.n	139bc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x130>
   139bc:	9812      	ldr	r0, [sp, #72]	; 0x48
   139be:	903d      	str	r0, [sp, #244]	; 0xf4
   139c0:	983d      	ldr	r0, [sp, #244]	; 0xf4
   139c2:	9011      	str	r0, [sp, #68]	; 0x44
   139c4:	e7ff      	b.n	139c6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x13a>
   139c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   139ca:	9917      	ldr	r1, [sp, #92]	; 0x5c
   139cc:	fa10 f081 	uxtah	r0, r0, r1
   139d0:	b282      	uxth	r2, r0
   139d2:	4603      	mov	r3, r0
   139d4:	4282      	cmp	r2, r0
   139d6:	9310      	str	r3, [sp, #64]	; 0x40
   139d8:	f040 80c0 	bne.w	13b5c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2d0>
   139dc:	e7ff      	b.n	139de <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x152>
   139de:	9810      	ldr	r0, [sp, #64]	; 0x40
   139e0:	b281      	uxth	r1, r0
   139e2:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   139e4:	9811      	ldr	r0, [sp, #68]	; 0x44
   139e6:	f000 f8c5 	bl	13b74 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   139ea:	900f      	str	r0, [sp, #60]	; 0x3c
   139ec:	e7ff      	b.n	139ee <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x162>
   139ee:	f240 21f4 	movw	r1, #756	; 0x2f4
   139f2:	f2c0 0102 	movt	r1, #2
   139f6:	f240 3344 	movw	r3, #836	; 0x344
   139fa:	f2c0 0302 	movt	r3, #2
   139fe:	220c      	movs	r2, #12
   13a00:	980f      	ldr	r0, [sp, #60]	; 0x3c
   13a02:	f7f5 f87a 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   13a06:	e7ff      	b.n	13a08 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17c>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   13a08:	e015      	b.n	13a36 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
                    len as i32,  //  Write all Data Bytes
   13a0a:	9817      	ldr	r0, [sp, #92]	; 0x5c
   13a0c:	b281      	uxth	r1, r0
   13a0e:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   13a10:	9816      	ldr	r0, [sp, #88]	; 0x58
   13a12:	f000 f8af 	bl	13b74 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   13a16:	900e      	str	r0, [sp, #56]	; 0x38
   13a18:	e7ff      	b.n	13a1a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x18e>
   13a1a:	f240 21f4 	movw	r1, #756	; 0x2f4
   13a1e:	f2c0 0102 	movt	r1, #2
   13a22:	f240 3354 	movw	r3, #852	; 0x354
   13a26:	f2c0 0302 	movt	r3, #2
   13a2a:	220c      	movs	r2, #12
   13a2c:	980e      	ldr	r0, [sp, #56]	; 0x38
   13a2e:	f7f5 f864 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   13a32:	e7ff      	b.n	13a34 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1a8>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   13a34:	e7ff      	b.n	13a36 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
            m = unsafe { (*m).om_next.sle_next };  //  Fetch next mbuf in the chain.
   13a36:	981c      	ldr	r0, [sp, #112]	; 0x70
   13a38:	68c0      	ldr	r0, [r0, #12]
   13a3a:	901c      	str	r0, [sp, #112]	; 0x70
        while !m.is_null() {  //  For each mbuf in the chain...
   13a3c:	e746      	b.n	138cc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
   13a3e:	f646 2084 	movw	r0, #27268	; 0x6a84
   13a42:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13a46:	f007 ff6b 	bl	1b920 <os_sem_release>
   13a4a:	901e      	str	r0, [sp, #120]	; 0x78
   13a4c:	e7ff      	b.n	13a4e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c2>
        assert_eq!(rc, 0, "sem fail");    
   13a4e:	f240 0068 	movw	r0, #104	; 0x68
   13a52:	f2c0 0002 	movt	r0, #2
   13a56:	6800      	ldr	r0, [r0, #0]
   13a58:	a91e      	add	r1, sp, #120	; 0x78
   13a5a:	911f      	str	r1, [sp, #124]	; 0x7c
   13a5c:	9020      	str	r0, [sp, #128]	; 0x80
   13a5e:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13a60:	903f      	str	r0, [sp, #252]	; 0xfc
   13a62:	9920      	ldr	r1, [sp, #128]	; 0x80
   13a64:	9140      	str	r1, [sp, #256]	; 0x100
   13a66:	6802      	ldr	r2, [r0, #0]
   13a68:	680b      	ldr	r3, [r1, #0]
   13a6a:	429a      	cmp	r2, r3
   13a6c:	900d      	str	r0, [sp, #52]	; 0x34
   13a6e:	910c      	str	r1, [sp, #48]	; 0x30
   13a70:	d101      	bne.n	13a76 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1ea>
   13a72:	e7ff      	b.n	13a74 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1e8>
    loop {  //  For each mbuf chain found...
   13a74:	e70e      	b.n	13894 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
        assert_eq!(rc, 0, "sem fail");    
   13a76:	f240 00c0 	movw	r0, #192	; 0xc0
   13a7a:	f2c0 0002 	movt	r0, #2
   13a7e:	6801      	ldr	r1, [r0, #0]
   13a80:	980d      	ldr	r0, [sp, #52]	; 0x34
   13a82:	9030      	str	r0, [sp, #192]	; 0xc0
   13a84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13a86:	9231      	str	r2, [sp, #196]	; 0xc4
   13a88:	f240 13d8 	movw	r3, #472	; 0x1d8
   13a8c:	f2c0 0302 	movt	r3, #2
   13a90:	681b      	ldr	r3, [r3, #0]
   13a92:	f240 0ce0 	movw	ip, #224	; 0xe0
   13a96:	f2c0 0c02 	movt	ip, #2
   13a9a:	f8dc c000 	ldr.w	ip, [ip]
   13a9e:	46ee      	mov	lr, sp
   13aa0:	2400      	movs	r4, #0
   13aa2:	f8ce 4000 	str.w	r4, [lr]
   13aa6:	a832      	add	r0, sp, #200	; 0xc8
   13aa8:	2201      	movs	r2, #1
   13aaa:	910b      	str	r1, [sp, #44]	; 0x2c
   13aac:	4619      	mov	r1, r3
   13aae:	4663      	mov	r3, ip
   13ab0:	f7f4 fff4 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13ab4:	e7ff      	b.n	13ab6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x22a>
   13ab6:	a830      	add	r0, sp, #192	; 0xc0
   13ab8:	902d      	str	r0, [sp, #180]	; 0xb4
   13aba:	a831      	add	r0, sp, #196	; 0xc4
   13abc:	902e      	str	r0, [sp, #184]	; 0xb8
   13abe:	a832      	add	r0, sp, #200	; 0xc8
   13ac0:	902f      	str	r0, [sp, #188]	; 0xbc
   13ac2:	982d      	ldr	r0, [sp, #180]	; 0xb4
   13ac4:	9041      	str	r0, [sp, #260]	; 0x104
   13ac6:	992e      	ldr	r1, [sp, #184]	; 0xb8
   13ac8:	9142      	str	r1, [sp, #264]	; 0x108
   13aca:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   13acc:	9243      	str	r2, [sp, #268]	; 0x10c
   13ace:	f249 333f 	movw	r3, #37695	; 0x933f
   13ad2:	f2c0 0300 	movt	r3, #0
   13ad6:	910a      	str	r1, [sp, #40]	; 0x28
   13ad8:	4619      	mov	r1, r3
   13ada:	9209      	str	r2, [sp, #36]	; 0x24
   13adc:	f7f5 fc67 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13ae0:	9008      	str	r0, [sp, #32]
   13ae2:	9107      	str	r1, [sp, #28]
   13ae4:	e7ff      	b.n	13ae6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x25a>
   13ae6:	f249 313f 	movw	r1, #37695	; 0x933f
   13aea:	f2c0 0100 	movt	r1, #0
   13aee:	980a      	ldr	r0, [sp, #40]	; 0x28
   13af0:	f7f5 fc5d 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13af4:	9006      	str	r0, [sp, #24]
   13af6:	9105      	str	r1, [sp, #20]
   13af8:	e7ff      	b.n	13afa <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26e>
   13afa:	f647 61d7 	movw	r1, #32471	; 0x7ed7
   13afe:	f2c0 0101 	movt	r1, #1
   13b02:	9809      	ldr	r0, [sp, #36]	; 0x24
   13b04:	f7f5 fc68 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13b08:	9004      	str	r0, [sp, #16]
   13b0a:	9103      	str	r1, [sp, #12]
   13b0c:	e7ff      	b.n	13b0e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x282>
   13b0e:	9808      	ldr	r0, [sp, #32]
   13b10:	9027      	str	r0, [sp, #156]	; 0x9c
   13b12:	9907      	ldr	r1, [sp, #28]
   13b14:	9128      	str	r1, [sp, #160]	; 0xa0
   13b16:	9a06      	ldr	r2, [sp, #24]
   13b18:	9229      	str	r2, [sp, #164]	; 0xa4
   13b1a:	9b05      	ldr	r3, [sp, #20]
   13b1c:	932a      	str	r3, [sp, #168]	; 0xa8
   13b1e:	f8dd c010 	ldr.w	ip, [sp, #16]
   13b22:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
   13b26:	f8dd e00c 	ldr.w	lr, [sp, #12]
   13b2a:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
   13b2e:	466c      	mov	r4, sp
   13b30:	2503      	movs	r5, #3
   13b32:	6025      	str	r5, [r4, #0]
   13b34:	a821      	add	r0, sp, #132	; 0x84
   13b36:	ab27      	add	r3, sp, #156	; 0x9c
   13b38:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13b3a:	462a      	mov	r2, r5
   13b3c:	f7f4 ffae 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13b40:	e7ff      	b.n	13b42 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2b6>
   13b42:	f240 3064 	movw	r0, #868	; 0x364
   13b46:	f2c0 0002 	movt	r0, #2
   13b4a:	f003 fed6 	bl	178fa <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13b4e:	9002      	str	r0, [sp, #8]
   13b50:	e7ff      	b.n	13b52 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2c6>
   13b52:	a821      	add	r0, sp, #132	; 0x84
   13b54:	9902      	ldr	r1, [sp, #8]
   13b56:	f003 ff0d 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13b5a:	defe      	udf	#254	; 0xfe
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   13b5c:	f240 3020 	movw	r0, #800	; 0x320
   13b60:	f2c0 0002 	movt	r0, #2
   13b64:	f240 3210 	movw	r2, #784	; 0x310
   13b68:	f2c0 0202 	movt	r2, #2
   13b6c:	2121      	movs	r1, #33	; 0x21
   13b6e:	f003 fecb 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13b72:	defe      	udf	#254	; 0xfe

00013b74 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>:

/// Perform non-blocking SPI write in Mynewt OS.  Blocks until SPI write completes.
fn internal_spi_noblock_write(buf: &'static u8, len: i32, is_command: bool) -> MynewtResult<()> {
   13b74:	b5b0      	push	{r4, r5, r7, lr}
   13b76:	b0e8      	sub	sp, #416	; 0x1a0
   13b78:	4613      	mov	r3, r2
   13b7a:	9058      	str	r0, [sp, #352]	; 0x160
   13b7c:	9159      	str	r1, [sp, #356]	; 0x164
   13b7e:	f88d 216b 	strb.w	r2, [sp, #363]	; 0x16b
    if len == 0 { return Ok(()); }
   13b82:	2900      	cmp	r1, #0
   13b84:	9121      	str	r1, [sp, #132]	; 0x84
   13b86:	9020      	str	r0, [sp, #128]	; 0x80
   13b88:	931f      	str	r3, [sp, #124]	; 0x7c
   13b8a:	d004      	beq.n	13b96 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x22>
   13b8c:	e7ff      	b.n	13b8e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a>
    assert!(len > 0, "bad spi len");
   13b8e:	9821      	ldr	r0, [sp, #132]	; 0x84
   13b90:	2801      	cmp	r0, #1
   13b92:	db0d      	blt.n	13bb0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x3c>
   13b94:	e007      	b.n	13ba6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x32>
   13b96:	2000      	movs	r0, #0
    if len == 0 { return Ok(()); }
   13b98:	9022      	str	r0, [sp, #136]	; 0x88
   13b9a:	2001      	movs	r0, #1
   13b9c:	9022      	str	r0, [sp, #136]	; 0x88
   13b9e:	e7ff      	b.n	13ba0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
    }

    //  Set SS Pin to high to stop the transfer.
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
    Ok(())
}
   13ba0:	9822      	ldr	r0, [sp, #136]	; 0x88
   13ba2:	b068      	add	sp, #416	; 0x1a0
   13ba4:	bdb0      	pop	{r4, r5, r7, pc}
        if is_command { 0 }
   13ba6:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13ba8:	07c1      	lsls	r1, r0, #31
   13baa:	2900      	cmp	r1, #0
   13bac:	d10f      	bne.n	13bce <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x5a>
   13bae:	e00b      	b.n	13bc8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x54>
    assert!(len > 0, "bad spi len");
   13bb0:	f240 3074 	movw	r0, #884	; 0x374
   13bb4:	f2c0 0002 	movt	r0, #2
   13bb8:	f240 3280 	movw	r2, #896	; 0x380
   13bbc:	f2c0 0202 	movt	r2, #2
   13bc0:	210b      	movs	r1, #11
   13bc2:	f003 fea1 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13bc6:	defe      	udf	#254	; 0xfe
   13bc8:	2001      	movs	r0, #1
        else { 1 }
   13bca:	9023      	str	r0, [sp, #140]	; 0x8c
        if is_command { 0 }
   13bcc:	e002      	b.n	13bd4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
   13bce:	2000      	movs	r0, #0
   13bd0:	9023      	str	r0, [sp, #140]	; 0x8c
   13bd2:	e7ff      	b.n	13bd4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
    unsafe { hal::hal_gpio_write(
   13bd4:	9923      	ldr	r1, [sp, #140]	; 0x8c
   13bd6:	2012      	movs	r0, #18
   13bd8:	f006 f804 	bl	19be4 <hal_gpio_write>
   13bdc:	e7ff      	b.n	13bde <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x6a>
   13bde:	2019      	movs	r0, #25
   13be0:	2100      	movs	r1, #0
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 0) };
   13be2:	f005 ffff 	bl	19be4 <hal_gpio_write>
   13be6:	e7ff      	b.n	13be8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x74>
    if len == 1 {  //  If writing only 1 byte...
   13be8:	9821      	ldr	r0, [sp, #132]	; 0x84
   13bea:	2801      	cmp	r0, #1
   13bec:	d005      	beq.n	13bfa <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x86>
   13bee:	e7ff      	b.n	13bf0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x7c>
            core::mem::transmute(buf), //  TX Buffer
   13bf0:	9820      	ldr	r0, [sp, #128]	; 0x80
   13bf2:	9061      	str	r0, [sp, #388]	; 0x184
   13bf4:	9961      	ldr	r1, [sp, #388]	; 0x184
   13bf6:	911e      	str	r1, [sp, #120]	; 0x78
   13bf8:	e094      	b.n	13d24 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1b0>
            core::mem::transmute(buf), //  TX Buffer
   13bfa:	9820      	ldr	r0, [sp, #128]	; 0x80
   13bfc:	905b      	str	r0, [sp, #364]	; 0x16c
   13bfe:	995b      	ldr	r1, [sp, #364]	; 0x16c
   13c00:	911d      	str	r1, [sp, #116]	; 0x74
   13c02:	e7ff      	b.n	13c04 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x90>
   13c04:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx(
   13c06:	901c      	str	r0, [sp, #112]	; 0x70
   13c08:	991d      	ldr	r1, [sp, #116]	; 0x74
   13c0a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   13c0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   13c0e:	f006 fc97 	bl	1a540 <hal_spi_txrx>
   13c12:	9024      	str	r0, [sp, #144]	; 0x90
   13c14:	e7ff      	b.n	13c16 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xa2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13c16:	f240 0068 	movw	r0, #104	; 0x68
   13c1a:	f2c0 0002 	movt	r0, #2
   13c1e:	6800      	ldr	r0, [r0, #0]
   13c20:	a924      	add	r1, sp, #144	; 0x90
   13c22:	9125      	str	r1, [sp, #148]	; 0x94
   13c24:	9026      	str	r0, [sp, #152]	; 0x98
   13c26:	9825      	ldr	r0, [sp, #148]	; 0x94
   13c28:	905c      	str	r0, [sp, #368]	; 0x170
   13c2a:	9926      	ldr	r1, [sp, #152]	; 0x98
   13c2c:	915d      	str	r1, [sp, #372]	; 0x174
   13c2e:	6802      	ldr	r2, [r0, #0]
   13c30:	680b      	ldr	r3, [r1, #0]
   13c32:	429a      	cmp	r2, r3
   13c34:	901b      	str	r0, [sp, #108]	; 0x6c
   13c36:	911a      	str	r1, [sp, #104]	; 0x68
   13c38:	d101      	bne.n	13c3e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xca>
   13c3a:	e7ff      	b.n	13c3c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xc8>
    if len == 1 {  //  If writing only 1 byte...
   13c3c:	e11f      	b.n	13e7e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13c3e:	f240 00c0 	movw	r0, #192	; 0xc0
   13c42:	f2c0 0002 	movt	r0, #2
   13c46:	6801      	ldr	r1, [r0, #0]
   13c48:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13c4a:	9036      	str	r0, [sp, #216]	; 0xd8
   13c4c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13c4e:	9237      	str	r2, [sp, #220]	; 0xdc
   13c50:	f240 3398 	movw	r3, #920	; 0x398
   13c54:	f2c0 0302 	movt	r3, #2
   13c58:	681b      	ldr	r3, [r3, #0]
   13c5a:	f240 0ce0 	movw	ip, #224	; 0xe0
   13c5e:	f2c0 0c02 	movt	ip, #2
   13c62:	f8dc c000 	ldr.w	ip, [ip]
   13c66:	46ee      	mov	lr, sp
   13c68:	2400      	movs	r4, #0
   13c6a:	f8ce 4000 	str.w	r4, [lr]
   13c6e:	a838      	add	r0, sp, #224	; 0xe0
   13c70:	2201      	movs	r2, #1
   13c72:	9119      	str	r1, [sp, #100]	; 0x64
   13c74:	4619      	mov	r1, r3
   13c76:	4663      	mov	r3, ip
   13c78:	f7f4 ff10 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13c7c:	e7ff      	b.n	13c7e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x10a>
   13c7e:	a836      	add	r0, sp, #216	; 0xd8
   13c80:	9033      	str	r0, [sp, #204]	; 0xcc
   13c82:	a837      	add	r0, sp, #220	; 0xdc
   13c84:	9034      	str	r0, [sp, #208]	; 0xd0
   13c86:	a838      	add	r0, sp, #224	; 0xe0
   13c88:	9035      	str	r0, [sp, #212]	; 0xd4
   13c8a:	9833      	ldr	r0, [sp, #204]	; 0xcc
   13c8c:	905e      	str	r0, [sp, #376]	; 0x178
   13c8e:	9934      	ldr	r1, [sp, #208]	; 0xd0
   13c90:	915f      	str	r1, [sp, #380]	; 0x17c
   13c92:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   13c94:	9260      	str	r2, [sp, #384]	; 0x180
   13c96:	f249 23eb 	movw	r3, #37611	; 0x92eb
   13c9a:	f2c0 0300 	movt	r3, #0
   13c9e:	9118      	str	r1, [sp, #96]	; 0x60
   13ca0:	4619      	mov	r1, r3
   13ca2:	9217      	str	r2, [sp, #92]	; 0x5c
   13ca4:	f7f5 fb59 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13ca8:	9016      	str	r0, [sp, #88]	; 0x58
   13caa:	9115      	str	r1, [sp, #84]	; 0x54
   13cac:	e7ff      	b.n	13cae <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x13a>
   13cae:	f249 21eb 	movw	r1, #37611	; 0x92eb
   13cb2:	f2c0 0100 	movt	r1, #0
   13cb6:	9818      	ldr	r0, [sp, #96]	; 0x60
   13cb8:	f7f5 fb4f 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13cbc:	9014      	str	r0, [sp, #80]	; 0x50
   13cbe:	9113      	str	r1, [sp, #76]	; 0x4c
   13cc0:	e7ff      	b.n	13cc2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x14e>
   13cc2:	f647 61d7 	movw	r1, #32471	; 0x7ed7
   13cc6:	f2c0 0101 	movt	r1, #1
   13cca:	9817      	ldr	r0, [sp, #92]	; 0x5c
   13ccc:	f7f5 fb84 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13cd0:	9012      	str	r0, [sp, #72]	; 0x48
   13cd2:	9111      	str	r1, [sp, #68]	; 0x44
   13cd4:	e7ff      	b.n	13cd6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x162>
   13cd6:	9816      	ldr	r0, [sp, #88]	; 0x58
   13cd8:	902d      	str	r0, [sp, #180]	; 0xb4
   13cda:	9915      	ldr	r1, [sp, #84]	; 0x54
   13cdc:	912e      	str	r1, [sp, #184]	; 0xb8
   13cde:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13ce0:	922f      	str	r2, [sp, #188]	; 0xbc
   13ce2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13ce4:	9330      	str	r3, [sp, #192]	; 0xc0
   13ce6:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   13cea:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
   13cee:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
   13cf2:	f8cd e0c8 	str.w	lr, [sp, #200]	; 0xc8
   13cf6:	466c      	mov	r4, sp
   13cf8:	2503      	movs	r5, #3
   13cfa:	6025      	str	r5, [r4, #0]
   13cfc:	a827      	add	r0, sp, #156	; 0x9c
   13cfe:	ab2d      	add	r3, sp, #180	; 0xb4
   13d00:	9919      	ldr	r1, [sp, #100]	; 0x64
   13d02:	462a      	mov	r2, r5
   13d04:	f7f4 feca 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13d08:	e7ff      	b.n	13d0a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x196>
   13d0a:	f240 309c 	movw	r0, #924	; 0x39c
   13d0e:	f2c0 0002 	movt	r0, #2
   13d12:	f003 fdf2 	bl	178fa <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13d16:	9010      	str	r0, [sp, #64]	; 0x40
   13d18:	e7ff      	b.n	13d1a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a6>
   13d1a:	a827      	add	r0, sp, #156	; 0x9c
   13d1c:	9910      	ldr	r1, [sp, #64]	; 0x40
   13d1e:	f003 fe29 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13d22:	defe      	udf	#254	; 0xfe
   13d24:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx_noblock(
   13d26:	900f      	str	r0, [sp, #60]	; 0x3c
   13d28:	991e      	ldr	r1, [sp, #120]	; 0x78
   13d2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   13d2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   13d2e:	f006 fc5d 	bl	1a5ec <hal_spi_txrx_noblock>
   13d32:	903e      	str	r0, [sp, #248]	; 0xf8
   13d34:	e7ff      	b.n	13d36 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1c2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13d36:	f240 0068 	movw	r0, #104	; 0x68
   13d3a:	f2c0 0002 	movt	r0, #2
   13d3e:	6800      	ldr	r0, [r0, #0]
   13d40:	a93e      	add	r1, sp, #248	; 0xf8
   13d42:	913f      	str	r1, [sp, #252]	; 0xfc
   13d44:	9040      	str	r0, [sp, #256]	; 0x100
   13d46:	983f      	ldr	r0, [sp, #252]	; 0xfc
   13d48:	9062      	str	r0, [sp, #392]	; 0x188
   13d4a:	9940      	ldr	r1, [sp, #256]	; 0x100
   13d4c:	9163      	str	r1, [sp, #396]	; 0x18c
   13d4e:	6802      	ldr	r2, [r0, #0]
   13d50:	680b      	ldr	r3, [r1, #0]
   13d52:	429a      	cmp	r2, r3
   13d54:	900e      	str	r0, [sp, #56]	; 0x38
   13d56:	910d      	str	r1, [sp, #52]	; 0x34
   13d58:	d10c      	bne.n	13d74 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x200>
   13d5a:	e7ff      	b.n	13d5c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1e8>
   13d5c:	f247 5030 	movw	r0, #30000	; 0x7530
        let timeout = 30_000;
   13d60:	9067      	str	r0, [sp, #412]	; 0x19c
   13d62:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13d66:	fba0 0101 	umull	r0, r1, r0, r1
   13d6a:	2900      	cmp	r1, #0
   13d6c:	900c      	str	r0, [sp, #48]	; 0x30
   13d6e:	f040 8090 	bne.w	13e92 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x31e>
   13d72:	e072      	b.n	13e5a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2e6>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13d74:	f240 00c0 	movw	r0, #192	; 0xc0
   13d78:	f2c0 0002 	movt	r0, #2
   13d7c:	6801      	ldr	r1, [r0, #0]
   13d7e:	980e      	ldr	r0, [sp, #56]	; 0x38
   13d80:	9050      	str	r0, [sp, #320]	; 0x140
   13d82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13d84:	9251      	str	r2, [sp, #324]	; 0x144
   13d86:	f240 3398 	movw	r3, #920	; 0x398
   13d8a:	f2c0 0302 	movt	r3, #2
   13d8e:	681b      	ldr	r3, [r3, #0]
   13d90:	f240 0ce0 	movw	ip, #224	; 0xe0
   13d94:	f2c0 0c02 	movt	ip, #2
   13d98:	f8dc c000 	ldr.w	ip, [ip]
   13d9c:	46ee      	mov	lr, sp
   13d9e:	2400      	movs	r4, #0
   13da0:	f8ce 4000 	str.w	r4, [lr]
   13da4:	a852      	add	r0, sp, #328	; 0x148
   13da6:	2201      	movs	r2, #1
   13da8:	910b      	str	r1, [sp, #44]	; 0x2c
   13daa:	4619      	mov	r1, r3
   13dac:	4663      	mov	r3, ip
   13dae:	f7f4 fe75 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13db2:	e7ff      	b.n	13db4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x240>
   13db4:	a850      	add	r0, sp, #320	; 0x140
   13db6:	904d      	str	r0, [sp, #308]	; 0x134
   13db8:	a851      	add	r0, sp, #324	; 0x144
   13dba:	904e      	str	r0, [sp, #312]	; 0x138
   13dbc:	a852      	add	r0, sp, #328	; 0x148
   13dbe:	904f      	str	r0, [sp, #316]	; 0x13c
   13dc0:	984d      	ldr	r0, [sp, #308]	; 0x134
   13dc2:	9064      	str	r0, [sp, #400]	; 0x190
   13dc4:	994e      	ldr	r1, [sp, #312]	; 0x138
   13dc6:	9165      	str	r1, [sp, #404]	; 0x194
   13dc8:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
   13dca:	9266      	str	r2, [sp, #408]	; 0x198
   13dcc:	f249 23eb 	movw	r3, #37611	; 0x92eb
   13dd0:	f2c0 0300 	movt	r3, #0
   13dd4:	910a      	str	r1, [sp, #40]	; 0x28
   13dd6:	4619      	mov	r1, r3
   13dd8:	9209      	str	r2, [sp, #36]	; 0x24
   13dda:	f7f5 fabe 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13dde:	9008      	str	r0, [sp, #32]
   13de0:	9107      	str	r1, [sp, #28]
   13de2:	e7ff      	b.n	13de4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x270>
   13de4:	f249 21eb 	movw	r1, #37611	; 0x92eb
   13de8:	f2c0 0100 	movt	r1, #0
   13dec:	980a      	ldr	r0, [sp, #40]	; 0x28
   13dee:	f7f5 fab4 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13df2:	9006      	str	r0, [sp, #24]
   13df4:	9105      	str	r1, [sp, #20]
   13df6:	e7ff      	b.n	13df8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x284>
   13df8:	f647 61d7 	movw	r1, #32471	; 0x7ed7
   13dfc:	f2c0 0101 	movt	r1, #1
   13e00:	9809      	ldr	r0, [sp, #36]	; 0x24
   13e02:	f7f5 fae9 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13e06:	9004      	str	r0, [sp, #16]
   13e08:	9103      	str	r1, [sp, #12]
   13e0a:	e7ff      	b.n	13e0c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x298>
   13e0c:	9808      	ldr	r0, [sp, #32]
   13e0e:	9047      	str	r0, [sp, #284]	; 0x11c
   13e10:	9907      	ldr	r1, [sp, #28]
   13e12:	9148      	str	r1, [sp, #288]	; 0x120
   13e14:	9a06      	ldr	r2, [sp, #24]
   13e16:	9249      	str	r2, [sp, #292]	; 0x124
   13e18:	9b05      	ldr	r3, [sp, #20]
   13e1a:	934a      	str	r3, [sp, #296]	; 0x128
   13e1c:	f8dd c010 	ldr.w	ip, [sp, #16]
   13e20:	f8cd c12c 	str.w	ip, [sp, #300]	; 0x12c
   13e24:	f8dd e00c 	ldr.w	lr, [sp, #12]
   13e28:	f8cd e130 	str.w	lr, [sp, #304]	; 0x130
   13e2c:	466c      	mov	r4, sp
   13e2e:	2503      	movs	r5, #3
   13e30:	6025      	str	r5, [r4, #0]
   13e32:	a841      	add	r0, sp, #260	; 0x104
   13e34:	ab47      	add	r3, sp, #284	; 0x11c
   13e36:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13e38:	462a      	mov	r2, r5
   13e3a:	f7f4 fe2f 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13e3e:	e7ff      	b.n	13e40 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2cc>
   13e40:	f240 30ac 	movw	r0, #940	; 0x3ac
   13e44:	f2c0 0002 	movt	r0, #2
   13e48:	f003 fd57 	bl	178fa <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13e4c:	9002      	str	r0, [sp, #8]
   13e4e:	e7ff      	b.n	13e50 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2dc>
   13e50:	a841      	add	r0, sp, #260	; 0x104
   13e52:	9902      	ldr	r1, [sp, #8]
   13e54:	f003 fd8e 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13e58:	defe      	udf	#254	; 0xfe
   13e5a:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   13e5e:	f2c1 0062 	movt	r0, #4194	; 0x1062
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13e62:	990c      	ldr	r1, [sp, #48]	; 0x30
   13e64:	fba1 0200 	umull	r0, r2, r1, r0
   13e68:	0991      	lsrs	r1, r2, #6
   13e6a:	f646 227c 	movw	r2, #27260	; 0x6a7c
   13e6e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13e72:	9001      	str	r0, [sp, #4]
   13e74:	4610      	mov	r0, r2
   13e76:	f007 fd85 	bl	1b984 <os_sem_pend>
   13e7a:	e7ff      	b.n	13e7c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x308>
    if len == 1 {  //  If writing only 1 byte...
   13e7c:	e7ff      	b.n	13e7e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
   13e7e:	2019      	movs	r0, #25
   13e80:	2101      	movs	r1, #1
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
   13e82:	f005 feaf 	bl	19be4 <hal_gpio_write>
   13e86:	e7ff      	b.n	13e88 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x314>
   13e88:	2000      	movs	r0, #0
    Ok(())
   13e8a:	9022      	str	r0, [sp, #136]	; 0x88
   13e8c:	2001      	movs	r0, #1
   13e8e:	9022      	str	r0, [sp, #136]	; 0x88
}
   13e90:	e686      	b.n	13ba0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13e92:	f240 20c0 	movw	r0, #704	; 0x2c0
   13e96:	f2c0 0002 	movt	r0, #2
   13e9a:	f240 32bc 	movw	r2, #956	; 0x3bc
   13e9e:	f2c0 0202 	movt	r2, #2
   13ea2:	2121      	movs	r1, #33	; 0x21
   13ea4:	f003 fd30 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13ea8:	defe      	udf	#254	; 0xfe

00013eaa <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E>:

/// Called by interrupt handler after Non-blocking SPI transfer has completed
extern "C" fn spi_noblock_handler(_arg: Ptr, _len: i32) {
   13eaa:	b5b0      	push	{r4, r5, r7, lr}
   13eac:	b0ae      	sub	sp, #184	; 0xb8
   13eae:	9027      	str	r0, [sp, #156]	; 0x9c
   13eb0:	9128      	str	r1, [sp, #160]	; 0xa0
    //  Signal to internal_spi_noblock_write() that SPI request has been completed.
    let rc = unsafe { os::os_sem_release(&mut SPI_SEM) };
   13eb2:	f646 207c 	movw	r0, #27260	; 0x6a7c
   13eb6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13eba:	f007 fd31 	bl	1b920 <os_sem_release>
   13ebe:	900d      	str	r0, [sp, #52]	; 0x34
   13ec0:	e7ff      	b.n	13ec2 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x18>
    assert_eq!(rc, 0, "sem fail");
   13ec2:	f240 0068 	movw	r0, #104	; 0x68
   13ec6:	f2c0 0002 	movt	r0, #2
   13eca:	6800      	ldr	r0, [r0, #0]
   13ecc:	a90d      	add	r1, sp, #52	; 0x34
   13ece:	910e      	str	r1, [sp, #56]	; 0x38
   13ed0:	900f      	str	r0, [sp, #60]	; 0x3c
   13ed2:	980e      	ldr	r0, [sp, #56]	; 0x38
   13ed4:	9029      	str	r0, [sp, #164]	; 0xa4
   13ed6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13ed8:	912a      	str	r1, [sp, #168]	; 0xa8
   13eda:	6802      	ldr	r2, [r0, #0]
   13edc:	680b      	ldr	r3, [r1, #0]
   13ede:	429a      	cmp	r2, r3
   13ee0:	900c      	str	r0, [sp, #48]	; 0x30
   13ee2:	910b      	str	r1, [sp, #44]	; 0x2c
   13ee4:	d102      	bne.n	13eec <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x42>
   13ee6:	e7ff      	b.n	13ee8 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x3e>
}
   13ee8:	b02e      	add	sp, #184	; 0xb8
   13eea:	bdb0      	pop	{r4, r5, r7, pc}
    assert_eq!(rc, 0, "sem fail");
   13eec:	f240 00c0 	movw	r0, #192	; 0xc0
   13ef0:	f2c0 0002 	movt	r0, #2
   13ef4:	6801      	ldr	r1, [r0, #0]
   13ef6:	980c      	ldr	r0, [sp, #48]	; 0x30
   13ef8:	901f      	str	r0, [sp, #124]	; 0x7c
   13efa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13efc:	9220      	str	r2, [sp, #128]	; 0x80
   13efe:	f240 13d8 	movw	r3, #472	; 0x1d8
   13f02:	f2c0 0302 	movt	r3, #2
   13f06:	681b      	ldr	r3, [r3, #0]
   13f08:	f240 0ce0 	movw	ip, #224	; 0xe0
   13f0c:	f2c0 0c02 	movt	ip, #2
   13f10:	f8dc c000 	ldr.w	ip, [ip]
   13f14:	46ee      	mov	lr, sp
   13f16:	2400      	movs	r4, #0
   13f18:	f8ce 4000 	str.w	r4, [lr]
   13f1c:	a821      	add	r0, sp, #132	; 0x84
   13f1e:	2201      	movs	r2, #1
   13f20:	910a      	str	r1, [sp, #40]	; 0x28
   13f22:	4619      	mov	r1, r3
   13f24:	4663      	mov	r3, ip
   13f26:	f7f4 fdb9 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13f2a:	e7ff      	b.n	13f2c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x82>
   13f2c:	a81f      	add	r0, sp, #124	; 0x7c
   13f2e:	901c      	str	r0, [sp, #112]	; 0x70
   13f30:	a820      	add	r0, sp, #128	; 0x80
   13f32:	901d      	str	r0, [sp, #116]	; 0x74
   13f34:	a821      	add	r0, sp, #132	; 0x84
   13f36:	901e      	str	r0, [sp, #120]	; 0x78
   13f38:	981c      	ldr	r0, [sp, #112]	; 0x70
   13f3a:	902b      	str	r0, [sp, #172]	; 0xac
   13f3c:	991d      	ldr	r1, [sp, #116]	; 0x74
   13f3e:	912c      	str	r1, [sp, #176]	; 0xb0
   13f40:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13f42:	922d      	str	r2, [sp, #180]	; 0xb4
   13f44:	f249 333f 	movw	r3, #37695	; 0x933f
   13f48:	f2c0 0300 	movt	r3, #0
   13f4c:	9109      	str	r1, [sp, #36]	; 0x24
   13f4e:	4619      	mov	r1, r3
   13f50:	9208      	str	r2, [sp, #32]
   13f52:	f7f5 fa2c 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13f56:	9007      	str	r0, [sp, #28]
   13f58:	9106      	str	r1, [sp, #24]
   13f5a:	e7ff      	b.n	13f5c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xb2>
   13f5c:	f249 313f 	movw	r1, #37695	; 0x933f
   13f60:	f2c0 0100 	movt	r1, #0
   13f64:	9809      	ldr	r0, [sp, #36]	; 0x24
   13f66:	f7f5 fa22 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13f6a:	9005      	str	r0, [sp, #20]
   13f6c:	9104      	str	r1, [sp, #16]
   13f6e:	e7ff      	b.n	13f70 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xc6>
   13f70:	f647 61d7 	movw	r1, #32471	; 0x7ed7
   13f74:	f2c0 0101 	movt	r1, #1
   13f78:	9808      	ldr	r0, [sp, #32]
   13f7a:	f7f5 fa2d 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13f7e:	9003      	str	r0, [sp, #12]
   13f80:	9102      	str	r1, [sp, #8]
   13f82:	e7ff      	b.n	13f84 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xda>
   13f84:	9807      	ldr	r0, [sp, #28]
   13f86:	9016      	str	r0, [sp, #88]	; 0x58
   13f88:	9906      	ldr	r1, [sp, #24]
   13f8a:	9117      	str	r1, [sp, #92]	; 0x5c
   13f8c:	9a05      	ldr	r2, [sp, #20]
   13f8e:	9218      	str	r2, [sp, #96]	; 0x60
   13f90:	9b04      	ldr	r3, [sp, #16]
   13f92:	9319      	str	r3, [sp, #100]	; 0x64
   13f94:	f8dd c00c 	ldr.w	ip, [sp, #12]
   13f98:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
   13f9c:	f8dd e008 	ldr.w	lr, [sp, #8]
   13fa0:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
   13fa4:	466c      	mov	r4, sp
   13fa6:	2503      	movs	r5, #3
   13fa8:	6025      	str	r5, [r4, #0]
   13faa:	a810      	add	r0, sp, #64	; 0x40
   13fac:	ab16      	add	r3, sp, #88	; 0x58
   13fae:	990a      	ldr	r1, [sp, #40]	; 0x28
   13fb0:	462a      	mov	r2, r5
   13fb2:	f7f4 fd73 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13fb6:	e7ff      	b.n	13fb8 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x10e>
   13fb8:	f240 30cc 	movw	r0, #972	; 0x3cc
   13fbc:	f2c0 0002 	movt	r0, #2
   13fc0:	f003 fc9b 	bl	178fa <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13fc4:	9001      	str	r0, [sp, #4]
   13fc6:	e7ff      	b.n	13fc8 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x11e>
   13fc8:	a810      	add	r0, sp, #64	; 0x40
   13fca:	9901      	ldr	r1, [sp, #4]
   13fcc:	f003 fcd2 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13fd0:	defe      	udf	#254	; 0xfe

00013fd2 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>:

/// Sleep for the specified number of milliseconds
fn delay_ms(ms: u8) {
   13fd2:	b580      	push	{r7, lr}
   13fd4:	b084      	sub	sp, #16
   13fd6:	4601      	mov	r1, r0
   13fd8:	f88d 000b 	strb.w	r0, [sp, #11]
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   13fdc:	b2c0      	uxtb	r0, r0
   13fde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13fe2:	fba0 0202 	umull	r0, r2, r0, r2
   13fe6:	2a00      	cmp	r2, #0
   13fe8:	9001      	str	r0, [sp, #4]
   13fea:	d110      	bne.n	1400e <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x3c>
   13fec:	e7ff      	b.n	13fee <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x1c>
   13fee:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   13ff2:	f2c1 0062 	movt	r0, #4194	; 0x1062
   13ff6:	9901      	ldr	r1, [sp, #4]
   13ff8:	fba1 0200 	umull	r0, r2, r1, r0
   13ffc:	0992      	lsrs	r2, r2, #6
   13ffe:	9203      	str	r2, [sp, #12]
    unsafe { os::os_time_delay(delay_ticks) };
   14000:	9000      	str	r0, [sp, #0]
   14002:	4610      	mov	r0, r2
   14004:	f007 fe0c 	bl	1bc20 <os_time_delay>
   14008:	e7ff      	b.n	1400a <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x38>
}
   1400a:	b004      	add	sp, #16
   1400c:	bd80      	pop	{r7, pc}
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   1400e:	f240 20c0 	movw	r0, #704	; 0x2c0
   14012:	f2c0 0002 	movt	r0, #2
   14016:	f240 32dc 	movw	r2, #988	; 0x3dc
   1401a:	f2c0 0202 	movt	r2, #2
   1401e:	2121      	movs	r1, #33	; 0x21
   14020:	f003 fc72 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14024:	defe      	udf	#254	; 0xfe

00014026 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>:
};

/// Rust Embedded HAL interface for Mynewt SPI
impl SPI {
    /// Create a new SPI port
    pub fn new() -> Self {
   14026:	b082      	sub	sp, #8
   14028:	2000      	movs	r0, #0
        SPI {
   1402a:	9000      	str	r0, [sp, #0]
   1402c:	9001      	str	r0, [sp, #4]
            spi_num: 0,
            cs_pin:  0,
        }
    }
   1402e:	9800      	ldr	r0, [sp, #0]
   14030:	9901      	ldr	r1, [sp, #4]
   14032:	b002      	add	sp, #8
   14034:	4770      	bx	lr

00014036 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>:

    /// Initiaise the SPI port
    pub fn init(&mut self, spi_num: i32, cs_pin: i32, spi_settings: *mut hal::hal_spi_settings) 
   14036:	b5b0      	push	{r4, r5, r7, lr}
   14038:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
   1403c:	9077      	str	r0, [sp, #476]	; 0x1dc
   1403e:	9178      	str	r1, [sp, #480]	; 0x1e0
   14040:	9279      	str	r2, [sp, #484]	; 0x1e4
   14042:	937a      	str	r3, [sp, #488]	; 0x1e8
        -> MynewtResult<()> {
        let rc = unsafe { hal::hal_spi_config(spi_num, spi_settings) };
   14044:	9028      	str	r0, [sp, #160]	; 0xa0
   14046:	4608      	mov	r0, r1
   14048:	9127      	str	r1, [sp, #156]	; 0x9c
   1404a:	4619      	mov	r1, r3
   1404c:	9226      	str	r2, [sp, #152]	; 0x98
   1404e:	f006 f9bb 	bl	1a3c8 <hal_spi_config>
   14052:	9029      	str	r0, [sp, #164]	; 0xa4
   14054:	e7ff      	b.n	14056 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x20>
        assert_eq!(rc, 0, "spi config fail");
   14056:	f240 30ec 	movw	r0, #1004	; 0x3ec
   1405a:	f2c0 0002 	movt	r0, #2
   1405e:	6800      	ldr	r0, [r0, #0]
   14060:	a929      	add	r1, sp, #164	; 0xa4
   14062:	912a      	str	r1, [sp, #168]	; 0xa8
   14064:	902b      	str	r0, [sp, #172]	; 0xac
   14066:	982a      	ldr	r0, [sp, #168]	; 0xa8
   14068:	907b      	str	r0, [sp, #492]	; 0x1ec
   1406a:	992b      	ldr	r1, [sp, #172]	; 0xac
   1406c:	917c      	str	r1, [sp, #496]	; 0x1f0
   1406e:	6802      	ldr	r2, [r0, #0]
   14070:	680b      	ldr	r3, [r1, #0]
   14072:	429a      	cmp	r2, r3
   14074:	9025      	str	r0, [sp, #148]	; 0x94
   14076:	9124      	str	r1, [sp, #144]	; 0x90
   14078:	d105      	bne.n	14086 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x50>
   1407a:	e7ff      	b.n	1407c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x46>

        let rc = unsafe { hal::hal_spi_enable(spi_num) };
   1407c:	9827      	ldr	r0, [sp, #156]	; 0x9c
   1407e:	f006 f9bf 	bl	1a400 <hal_spi_enable>
   14082:	9043      	str	r0, [sp, #268]	; 0x10c
   14084:	e072      	b.n	1416c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x136>
        assert_eq!(rc, 0, "spi config fail");
   14086:	f240 4044 	movw	r0, #1092	; 0x444
   1408a:	f2c0 0002 	movt	r0, #2
   1408e:	6801      	ldr	r1, [r0, #0]
   14090:	9825      	ldr	r0, [sp, #148]	; 0x94
   14092:	903b      	str	r0, [sp, #236]	; 0xec
   14094:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14096:	923c      	str	r2, [sp, #240]	; 0xf0
   14098:	f240 4360 	movw	r3, #1120	; 0x460
   1409c:	f2c0 0302 	movt	r3, #2
   140a0:	681b      	ldr	r3, [r3, #0]
   140a2:	f240 4c64 	movw	ip, #1124	; 0x464
   140a6:	f2c0 0c02 	movt	ip, #2
   140aa:	f8dc c000 	ldr.w	ip, [ip]
   140ae:	46ee      	mov	lr, sp
   140b0:	2400      	movs	r4, #0
   140b2:	f8ce 4000 	str.w	r4, [lr]
   140b6:	a83d      	add	r0, sp, #244	; 0xf4
   140b8:	2201      	movs	r2, #1
   140ba:	9123      	str	r1, [sp, #140]	; 0x8c
   140bc:	4619      	mov	r1, r3
   140be:	4663      	mov	r3, ip
   140c0:	f7f4 fcec 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   140c4:	e7ff      	b.n	140c6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x90>
   140c6:	a83b      	add	r0, sp, #236	; 0xec
   140c8:	9038      	str	r0, [sp, #224]	; 0xe0
   140ca:	a83c      	add	r0, sp, #240	; 0xf0
   140cc:	9039      	str	r0, [sp, #228]	; 0xe4
   140ce:	a83d      	add	r0, sp, #244	; 0xf4
   140d0:	903a      	str	r0, [sp, #232]	; 0xe8
   140d2:	9838      	ldr	r0, [sp, #224]	; 0xe0
   140d4:	907d      	str	r0, [sp, #500]	; 0x1f4
   140d6:	9939      	ldr	r1, [sp, #228]	; 0xe4
   140d8:	917e      	str	r1, [sp, #504]	; 0x1f8
   140da:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
   140dc:	927f      	str	r2, [sp, #508]	; 0x1fc
   140de:	f249 23eb 	movw	r3, #37611	; 0x92eb
   140e2:	f2c0 0300 	movt	r3, #0
   140e6:	9122      	str	r1, [sp, #136]	; 0x88
   140e8:	4619      	mov	r1, r3
   140ea:	9221      	str	r2, [sp, #132]	; 0x84
   140ec:	f7f5 f935 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   140f0:	9020      	str	r0, [sp, #128]	; 0x80
   140f2:	911f      	str	r1, [sp, #124]	; 0x7c
   140f4:	e7ff      	b.n	140f6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xc0>
   140f6:	f249 21eb 	movw	r1, #37611	; 0x92eb
   140fa:	f2c0 0100 	movt	r1, #0
   140fe:	9822      	ldr	r0, [sp, #136]	; 0x88
   14100:	f7f5 f92b 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14104:	901e      	str	r0, [sp, #120]	; 0x78
   14106:	911d      	str	r1, [sp, #116]	; 0x74
   14108:	e7ff      	b.n	1410a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xd4>
   1410a:	f647 61d7 	movw	r1, #32471	; 0x7ed7
   1410e:	f2c0 0101 	movt	r1, #1
   14112:	9821      	ldr	r0, [sp, #132]	; 0x84
   14114:	f7f5 f960 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14118:	901c      	str	r0, [sp, #112]	; 0x70
   1411a:	911b      	str	r1, [sp, #108]	; 0x6c
   1411c:	e7ff      	b.n	1411e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xe8>
   1411e:	9820      	ldr	r0, [sp, #128]	; 0x80
   14120:	9032      	str	r0, [sp, #200]	; 0xc8
   14122:	991f      	ldr	r1, [sp, #124]	; 0x7c
   14124:	9133      	str	r1, [sp, #204]	; 0xcc
   14126:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14128:	9234      	str	r2, [sp, #208]	; 0xd0
   1412a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1412c:	9335      	str	r3, [sp, #212]	; 0xd4
   1412e:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
   14132:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
   14136:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
   1413a:	f8cd e0dc 	str.w	lr, [sp, #220]	; 0xdc
   1413e:	466c      	mov	r4, sp
   14140:	2503      	movs	r5, #3
   14142:	6025      	str	r5, [r4, #0]
   14144:	a82c      	add	r0, sp, #176	; 0xb0
   14146:	ab32      	add	r3, sp, #200	; 0xc8
   14148:	9923      	ldr	r1, [sp, #140]	; 0x8c
   1414a:	462a      	mov	r2, r5
   1414c:	f7f4 fca6 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14150:	e7ff      	b.n	14152 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x11c>
   14152:	f240 4080 	movw	r0, #1152	; 0x480
   14156:	f2c0 0002 	movt	r0, #2
   1415a:	f003 fbce 	bl	178fa <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1415e:	901a      	str	r0, [sp, #104]	; 0x68
   14160:	e7ff      	b.n	14162 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x12c>
   14162:	a82c      	add	r0, sp, #176	; 0xb0
   14164:	991a      	ldr	r1, [sp, #104]	; 0x68
   14166:	f003 fc05 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1416a:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi enable fail");
   1416c:	f240 30ec 	movw	r0, #1004	; 0x3ec
   14170:	f2c0 0002 	movt	r0, #2
   14174:	6800      	ldr	r0, [r0, #0]
   14176:	a943      	add	r1, sp, #268	; 0x10c
   14178:	9144      	str	r1, [sp, #272]	; 0x110
   1417a:	9045      	str	r0, [sp, #276]	; 0x114
   1417c:	9844      	ldr	r0, [sp, #272]	; 0x110
   1417e:	9080      	str	r0, [sp, #512]	; 0x200
   14180:	9945      	ldr	r1, [sp, #276]	; 0x114
   14182:	9181      	str	r1, [sp, #516]	; 0x204
   14184:	6802      	ldr	r2, [r0, #0]
   14186:	680b      	ldr	r3, [r1, #0]
   14188:	429a      	cmp	r2, r3
   1418a:	9019      	str	r0, [sp, #100]	; 0x64
   1418c:	9118      	str	r1, [sp, #96]	; 0x60
   1418e:	d106      	bne.n	1419e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x168>
   14190:	e7ff      	b.n	14192 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x15c>
   14192:	2101      	movs	r1, #1

        let rc = unsafe { hal::hal_gpio_init_out(cs_pin, 1) };
   14194:	9826      	ldr	r0, [sp, #152]	; 0x98
   14196:	f005 fd09 	bl	19bac <hal_gpio_init_out>
   1419a:	905d      	str	r0, [sp, #372]	; 0x174
   1419c:	e072      	b.n	14284 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x24e>
        assert_eq!(rc, 0, "spi enable fail");
   1419e:	f240 4044 	movw	r0, #1092	; 0x444
   141a2:	f2c0 0002 	movt	r0, #2
   141a6:	6801      	ldr	r1, [r0, #0]
   141a8:	9819      	ldr	r0, [sp, #100]	; 0x64
   141aa:	9055      	str	r0, [sp, #340]	; 0x154
   141ac:	9a18      	ldr	r2, [sp, #96]	; 0x60
   141ae:	9256      	str	r2, [sp, #344]	; 0x158
   141b0:	f240 43a8 	movw	r3, #1192	; 0x4a8
   141b4:	f2c0 0302 	movt	r3, #2
   141b8:	681b      	ldr	r3, [r3, #0]
   141ba:	f240 4c64 	movw	ip, #1124	; 0x464
   141be:	f2c0 0c02 	movt	ip, #2
   141c2:	f8dc c000 	ldr.w	ip, [ip]
   141c6:	46ee      	mov	lr, sp
   141c8:	2400      	movs	r4, #0
   141ca:	f8ce 4000 	str.w	r4, [lr]
   141ce:	a857      	add	r0, sp, #348	; 0x15c
   141d0:	2201      	movs	r2, #1
   141d2:	9117      	str	r1, [sp, #92]	; 0x5c
   141d4:	4619      	mov	r1, r3
   141d6:	4663      	mov	r3, ip
   141d8:	f7f4 fc60 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   141dc:	e7ff      	b.n	141de <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1a8>
   141de:	a855      	add	r0, sp, #340	; 0x154
   141e0:	9052      	str	r0, [sp, #328]	; 0x148
   141e2:	a856      	add	r0, sp, #344	; 0x158
   141e4:	9053      	str	r0, [sp, #332]	; 0x14c
   141e6:	a857      	add	r0, sp, #348	; 0x15c
   141e8:	9054      	str	r0, [sp, #336]	; 0x150
   141ea:	9852      	ldr	r0, [sp, #328]	; 0x148
   141ec:	9082      	str	r0, [sp, #520]	; 0x208
   141ee:	9953      	ldr	r1, [sp, #332]	; 0x14c
   141f0:	9183      	str	r1, [sp, #524]	; 0x20c
   141f2:	9a54      	ldr	r2, [sp, #336]	; 0x150
   141f4:	9284      	str	r2, [sp, #528]	; 0x210
   141f6:	f249 23eb 	movw	r3, #37611	; 0x92eb
   141fa:	f2c0 0300 	movt	r3, #0
   141fe:	9116      	str	r1, [sp, #88]	; 0x58
   14200:	4619      	mov	r1, r3
   14202:	9215      	str	r2, [sp, #84]	; 0x54
   14204:	f7f5 f8a9 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14208:	9014      	str	r0, [sp, #80]	; 0x50
   1420a:	9113      	str	r1, [sp, #76]	; 0x4c
   1420c:	e7ff      	b.n	1420e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1d8>
   1420e:	f249 21eb 	movw	r1, #37611	; 0x92eb
   14212:	f2c0 0100 	movt	r1, #0
   14216:	9816      	ldr	r0, [sp, #88]	; 0x58
   14218:	f7f5 f89f 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1421c:	9012      	str	r0, [sp, #72]	; 0x48
   1421e:	9111      	str	r1, [sp, #68]	; 0x44
   14220:	e7ff      	b.n	14222 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1ec>
   14222:	f647 61d7 	movw	r1, #32471	; 0x7ed7
   14226:	f2c0 0101 	movt	r1, #1
   1422a:	9815      	ldr	r0, [sp, #84]	; 0x54
   1422c:	f7f5 f8d4 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14230:	9010      	str	r0, [sp, #64]	; 0x40
   14232:	910f      	str	r1, [sp, #60]	; 0x3c
   14234:	e7ff      	b.n	14236 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x200>
   14236:	9814      	ldr	r0, [sp, #80]	; 0x50
   14238:	904c      	str	r0, [sp, #304]	; 0x130
   1423a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1423c:	914d      	str	r1, [sp, #308]	; 0x134
   1423e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14240:	924e      	str	r2, [sp, #312]	; 0x138
   14242:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14244:	934f      	str	r3, [sp, #316]	; 0x13c
   14246:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   1424a:	f8cd c140 	str.w	ip, [sp, #320]	; 0x140
   1424e:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   14252:	f8cd e144 	str.w	lr, [sp, #324]	; 0x144
   14256:	466c      	mov	r4, sp
   14258:	2503      	movs	r5, #3
   1425a:	6025      	str	r5, [r4, #0]
   1425c:	a846      	add	r0, sp, #280	; 0x118
   1425e:	ab4c      	add	r3, sp, #304	; 0x130
   14260:	9917      	ldr	r1, [sp, #92]	; 0x5c
   14262:	462a      	mov	r2, r5
   14264:	f7f4 fc1a 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14268:	e7ff      	b.n	1426a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x234>
   1426a:	f240 40ac 	movw	r0, #1196	; 0x4ac
   1426e:	f2c0 0002 	movt	r0, #2
   14272:	f003 fb42 	bl	178fa <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14276:	900e      	str	r0, [sp, #56]	; 0x38
   14278:	e7ff      	b.n	1427a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x244>
   1427a:	a846      	add	r0, sp, #280	; 0x118
   1427c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1427e:	f003 fb79 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14282:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi init fail");
   14284:	f240 30ec 	movw	r0, #1004	; 0x3ec
   14288:	f2c0 0002 	movt	r0, #2
   1428c:	6800      	ldr	r0, [r0, #0]
   1428e:	a95d      	add	r1, sp, #372	; 0x174
   14290:	915e      	str	r1, [sp, #376]	; 0x178
   14292:	905f      	str	r0, [sp, #380]	; 0x17c
   14294:	985e      	ldr	r0, [sp, #376]	; 0x178
   14296:	9085      	str	r0, [sp, #532]	; 0x214
   14298:	995f      	ldr	r1, [sp, #380]	; 0x17c
   1429a:	9186      	str	r1, [sp, #536]	; 0x218
   1429c:	6802      	ldr	r2, [r0, #0]
   1429e:	680b      	ldr	r3, [r1, #0]
   142a0:	429a      	cmp	r2, r3
   142a2:	900d      	str	r0, [sp, #52]	; 0x34
   142a4:	910c      	str	r1, [sp, #48]	; 0x30
   142a6:	d109      	bne.n	142bc <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x286>
   142a8:	e7ff      	b.n	142aa <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x274>
        self.spi_num = spi_num;
   142aa:	9827      	ldr	r0, [sp, #156]	; 0x9c
   142ac:	9928      	ldr	r1, [sp, #160]	; 0xa0
   142ae:	6008      	str	r0, [r1, #0]
        self.cs_pin  = cs_pin;
   142b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   142b2:	604a      	str	r2, [r1, #4]
   142b4:	2001      	movs	r0, #1
        Ok(())
    }
   142b6:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
   142ba:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "spi init fail");
   142bc:	f240 4044 	movw	r0, #1092	; 0x444
   142c0:	f2c0 0002 	movt	r0, #2
   142c4:	6801      	ldr	r1, [r0, #0]
   142c6:	980d      	ldr	r0, [sp, #52]	; 0x34
   142c8:	906f      	str	r0, [sp, #444]	; 0x1bc
   142ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   142cc:	9270      	str	r2, [sp, #448]	; 0x1c0
   142ce:	f240 43d4 	movw	r3, #1236	; 0x4d4
   142d2:	f2c0 0302 	movt	r3, #2
   142d6:	681b      	ldr	r3, [r3, #0]
   142d8:	f240 4c64 	movw	ip, #1124	; 0x464
   142dc:	f2c0 0c02 	movt	ip, #2
   142e0:	f8dc c000 	ldr.w	ip, [ip]
   142e4:	46ee      	mov	lr, sp
   142e6:	2400      	movs	r4, #0
   142e8:	f8ce 4000 	str.w	r4, [lr]
   142ec:	a871      	add	r0, sp, #452	; 0x1c4
   142ee:	2201      	movs	r2, #1
   142f0:	910b      	str	r1, [sp, #44]	; 0x2c
   142f2:	4619      	mov	r1, r3
   142f4:	4663      	mov	r3, ip
   142f6:	f7f4 fbd1 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   142fa:	e7ff      	b.n	142fc <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2c6>
   142fc:	a86f      	add	r0, sp, #444	; 0x1bc
   142fe:	906c      	str	r0, [sp, #432]	; 0x1b0
   14300:	a870      	add	r0, sp, #448	; 0x1c0
   14302:	906d      	str	r0, [sp, #436]	; 0x1b4
   14304:	a871      	add	r0, sp, #452	; 0x1c4
   14306:	906e      	str	r0, [sp, #440]	; 0x1b8
   14308:	986c      	ldr	r0, [sp, #432]	; 0x1b0
   1430a:	9087      	str	r0, [sp, #540]	; 0x21c
   1430c:	996d      	ldr	r1, [sp, #436]	; 0x1b4
   1430e:	9188      	str	r1, [sp, #544]	; 0x220
   14310:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
   14312:	9289      	str	r2, [sp, #548]	; 0x224
   14314:	f249 23eb 	movw	r3, #37611	; 0x92eb
   14318:	f2c0 0300 	movt	r3, #0
   1431c:	910a      	str	r1, [sp, #40]	; 0x28
   1431e:	4619      	mov	r1, r3
   14320:	9209      	str	r2, [sp, #36]	; 0x24
   14322:	f7f5 f81a 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14326:	9008      	str	r0, [sp, #32]
   14328:	9107      	str	r1, [sp, #28]
   1432a:	e7ff      	b.n	1432c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2f6>
   1432c:	f249 21eb 	movw	r1, #37611	; 0x92eb
   14330:	f2c0 0100 	movt	r1, #0
   14334:	980a      	ldr	r0, [sp, #40]	; 0x28
   14336:	f7f5 f810 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1433a:	9006      	str	r0, [sp, #24]
   1433c:	9105      	str	r1, [sp, #20]
   1433e:	e7ff      	b.n	14340 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x30a>
   14340:	f647 61d7 	movw	r1, #32471	; 0x7ed7
   14344:	f2c0 0101 	movt	r1, #1
   14348:	9809      	ldr	r0, [sp, #36]	; 0x24
   1434a:	f7f5 f845 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1434e:	9004      	str	r0, [sp, #16]
   14350:	9103      	str	r1, [sp, #12]
   14352:	e7ff      	b.n	14354 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x31e>
   14354:	9808      	ldr	r0, [sp, #32]
   14356:	9066      	str	r0, [sp, #408]	; 0x198
   14358:	9907      	ldr	r1, [sp, #28]
   1435a:	9167      	str	r1, [sp, #412]	; 0x19c
   1435c:	9a06      	ldr	r2, [sp, #24]
   1435e:	9268      	str	r2, [sp, #416]	; 0x1a0
   14360:	9b05      	ldr	r3, [sp, #20]
   14362:	9369      	str	r3, [sp, #420]	; 0x1a4
   14364:	f8dd c010 	ldr.w	ip, [sp, #16]
   14368:	f8cd c1a8 	str.w	ip, [sp, #424]	; 0x1a8
   1436c:	f8dd e00c 	ldr.w	lr, [sp, #12]
   14370:	f8cd e1ac 	str.w	lr, [sp, #428]	; 0x1ac
   14374:	466c      	mov	r4, sp
   14376:	2503      	movs	r5, #3
   14378:	6025      	str	r5, [r4, #0]
   1437a:	a860      	add	r0, sp, #384	; 0x180
   1437c:	ab66      	add	r3, sp, #408	; 0x198
   1437e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14380:	462a      	mov	r2, r5
   14382:	f7f4 fb8b 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14386:	e7ff      	b.n	14388 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x352>
   14388:	f240 40d8 	movw	r0, #1240	; 0x4d8
   1438c:	f2c0 0002 	movt	r0, #2
   14390:	f003 fab3 	bl	178fa <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14394:	9002      	str	r0, [sp, #8]
   14396:	e7ff      	b.n	14398 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x362>
   14398:	a860      	add	r0, sp, #384	; 0x180
   1439a:	9902      	ldr	r1, [sp, #8]
   1439c:	f003 faea 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   143a0:	defe      	udf	#254	; 0xfe

000143a2 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl GPIO {
    /// Create a new output GPIO pin
    pub fn new() -> Self {
   143a2:	2000      	movs	r0, #0
        GPIO {
            pin: 0,
        }
    }
   143a4:	4770      	bx	lr

000143a6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>:

    /// Initialise the output GPIO pin
    pub fn init(&mut self, pin: i32) -> MynewtResult<()> {
   143a6:	b5b0      	push	{r4, r5, r7, lr}
   143a8:	b0b0      	sub	sp, #192	; 0xc0
   143aa:	9029      	str	r0, [sp, #164]	; 0xa4
   143ac:	912a      	str	r1, [sp, #168]	; 0xa8
   143ae:	2200      	movs	r2, #0
        //  TODO: let dc = pins.d0.into_push_pull_output(&mut pins.port);
        //  TODO: let rst = pins.d1.into_push_pull_output(&mut pins.port);
        let rc = unsafe { hal::hal_gpio_init_out(pin, 0) };
   143b0:	900e      	str	r0, [sp, #56]	; 0x38
   143b2:	4608      	mov	r0, r1
   143b4:	910d      	str	r1, [sp, #52]	; 0x34
   143b6:	4611      	mov	r1, r2
   143b8:	f005 fbf8 	bl	19bac <hal_gpio_init_out>
   143bc:	900f      	str	r0, [sp, #60]	; 0x3c
   143be:	e7ff      	b.n	143c0 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x1a>
        assert_eq!(rc, 0, "gpio fail");
   143c0:	f240 30ec 	movw	r0, #1004	; 0x3ec
   143c4:	f2c0 0002 	movt	r0, #2
   143c8:	6800      	ldr	r0, [r0, #0]
   143ca:	a90f      	add	r1, sp, #60	; 0x3c
   143cc:	9110      	str	r1, [sp, #64]	; 0x40
   143ce:	9011      	str	r0, [sp, #68]	; 0x44
   143d0:	9810      	ldr	r0, [sp, #64]	; 0x40
   143d2:	902b      	str	r0, [sp, #172]	; 0xac
   143d4:	9911      	ldr	r1, [sp, #68]	; 0x44
   143d6:	912c      	str	r1, [sp, #176]	; 0xb0
   143d8:	6802      	ldr	r2, [r0, #0]
   143da:	680b      	ldr	r3, [r1, #0]
   143dc:	429a      	cmp	r2, r3
   143de:	900c      	str	r0, [sp, #48]	; 0x30
   143e0:	910b      	str	r1, [sp, #44]	; 0x2c
   143e2:	d106      	bne.n	143f2 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x4c>
   143e4:	e7ff      	b.n	143e6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x40>
        self.pin = pin;
   143e6:	980d      	ldr	r0, [sp, #52]	; 0x34
   143e8:	990e      	ldr	r1, [sp, #56]	; 0x38
   143ea:	6008      	str	r0, [r1, #0]
   143ec:	2001      	movs	r0, #1
        Ok(())
    }
   143ee:	b030      	add	sp, #192	; 0xc0
   143f0:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "gpio fail");
   143f2:	f240 4044 	movw	r0, #1092	; 0x444
   143f6:	f2c0 0002 	movt	r0, #2
   143fa:	6801      	ldr	r1, [r0, #0]
   143fc:	980c      	ldr	r0, [sp, #48]	; 0x30
   143fe:	9021      	str	r0, [sp, #132]	; 0x84
   14400:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14402:	9222      	str	r2, [sp, #136]	; 0x88
   14404:	f240 43fc 	movw	r3, #1276	; 0x4fc
   14408:	f2c0 0302 	movt	r3, #2
   1440c:	681b      	ldr	r3, [r3, #0]
   1440e:	f240 4c64 	movw	ip, #1124	; 0x464
   14412:	f2c0 0c02 	movt	ip, #2
   14416:	f8dc c000 	ldr.w	ip, [ip]
   1441a:	46ee      	mov	lr, sp
   1441c:	2400      	movs	r4, #0
   1441e:	f8ce 4000 	str.w	r4, [lr]
   14422:	a823      	add	r0, sp, #140	; 0x8c
   14424:	2201      	movs	r2, #1
   14426:	910a      	str	r1, [sp, #40]	; 0x28
   14428:	4619      	mov	r1, r3
   1442a:	4663      	mov	r3, ip
   1442c:	f7f4 fb36 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14430:	e7ff      	b.n	14432 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x8c>
   14432:	a821      	add	r0, sp, #132	; 0x84
   14434:	901e      	str	r0, [sp, #120]	; 0x78
   14436:	a822      	add	r0, sp, #136	; 0x88
   14438:	901f      	str	r0, [sp, #124]	; 0x7c
   1443a:	a823      	add	r0, sp, #140	; 0x8c
   1443c:	9020      	str	r0, [sp, #128]	; 0x80
   1443e:	981e      	ldr	r0, [sp, #120]	; 0x78
   14440:	902d      	str	r0, [sp, #180]	; 0xb4
   14442:	991f      	ldr	r1, [sp, #124]	; 0x7c
   14444:	912e      	str	r1, [sp, #184]	; 0xb8
   14446:	9a20      	ldr	r2, [sp, #128]	; 0x80
   14448:	922f      	str	r2, [sp, #188]	; 0xbc
   1444a:	f249 23eb 	movw	r3, #37611	; 0x92eb
   1444e:	f2c0 0300 	movt	r3, #0
   14452:	9109      	str	r1, [sp, #36]	; 0x24
   14454:	4619      	mov	r1, r3
   14456:	9208      	str	r2, [sp, #32]
   14458:	f7f4 ff7f 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1445c:	9007      	str	r0, [sp, #28]
   1445e:	9106      	str	r1, [sp, #24]
   14460:	e7ff      	b.n	14462 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xbc>
   14462:	f249 21eb 	movw	r1, #37611	; 0x92eb
   14466:	f2c0 0100 	movt	r1, #0
   1446a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1446c:	f7f4 ff75 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14470:	9005      	str	r0, [sp, #20]
   14472:	9104      	str	r1, [sp, #16]
   14474:	e7ff      	b.n	14476 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xd0>
   14476:	f647 61d7 	movw	r1, #32471	; 0x7ed7
   1447a:	f2c0 0101 	movt	r1, #1
   1447e:	9808      	ldr	r0, [sp, #32]
   14480:	f7f4 ffaa 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14484:	9003      	str	r0, [sp, #12]
   14486:	9102      	str	r1, [sp, #8]
   14488:	e7ff      	b.n	1448a <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xe4>
   1448a:	9807      	ldr	r0, [sp, #28]
   1448c:	9018      	str	r0, [sp, #96]	; 0x60
   1448e:	9906      	ldr	r1, [sp, #24]
   14490:	9119      	str	r1, [sp, #100]	; 0x64
   14492:	9a05      	ldr	r2, [sp, #20]
   14494:	921a      	str	r2, [sp, #104]	; 0x68
   14496:	9b04      	ldr	r3, [sp, #16]
   14498:	931b      	str	r3, [sp, #108]	; 0x6c
   1449a:	f8dd c00c 	ldr.w	ip, [sp, #12]
   1449e:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
   144a2:	f8dd e008 	ldr.w	lr, [sp, #8]
   144a6:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
   144aa:	466c      	mov	r4, sp
   144ac:	2503      	movs	r5, #3
   144ae:	6025      	str	r5, [r4, #0]
   144b0:	a812      	add	r0, sp, #72	; 0x48
   144b2:	ab18      	add	r3, sp, #96	; 0x60
   144b4:	990a      	ldr	r1, [sp, #40]	; 0x28
   144b6:	462a      	mov	r2, r5
   144b8:	f7f4 faf0 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   144bc:	e7ff      	b.n	144be <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x118>
   144be:	f240 5000 	movw	r0, #1280	; 0x500
   144c2:	f2c0 0002 	movt	r0, #2
   144c6:	f003 fa18 	bl	178fa <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   144ca:	9001      	str	r0, [sp, #4]
   144cc:	e7ff      	b.n	144ce <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x128>
   144ce:	a812      	add	r0, sp, #72	; 0x48
   144d0:	9901      	ldr	r1, [sp, #4]
   144d2:	f003 fa4f 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   144d6:	defe      	udf	#254	; 0xfe

000144d8 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl embedded_hal::digital::v2::OutputPin for GPIO {
    /// Set the GPIO pin to low
    fn set_low(&mut self) -> Result<(), Self::Error> {
   144d8:	b580      	push	{r7, lr}
   144da:	b082      	sub	sp, #8
   144dc:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 0) };
   144de:	6800      	ldr	r0, [r0, #0]
   144e0:	2100      	movs	r1, #0
   144e2:	f005 fb7f 	bl	19be4 <hal_gpio_write>
   144e6:	e7ff      	b.n	144e8 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E+0x10>
   144e8:	2001      	movs	r0, #1
        Ok(())
    }
   144ea:	b002      	add	sp, #8
   144ec:	bd80      	pop	{r7, pc}

000144ee <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>:

    /// Set the GPIO pin to high
    fn set_high(&mut self) -> Result<(), Self::Error> {
   144ee:	b580      	push	{r7, lr}
   144f0:	b082      	sub	sp, #8
   144f2:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 1) };
   144f4:	6800      	ldr	r0, [r0, #0]
   144f6:	2101      	movs	r1, #1
   144f8:	f005 fb74 	bl	19be4 <hal_gpio_write>
   144fc:	e7ff      	b.n	144fe <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE+0x10>
   144fe:	2001      	movs	r0, #1
        Ok(())
    }
   14500:	b002      	add	sp, #8
   14502:	bd80      	pop	{r7, pc}

00014504 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>:
impl Delay {
    /// Create a new delay
    pub fn new() -> Self {
        Delay {
        }
    }
   14504:	4770      	bx	lr

00014506 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>:
}

/// Rust Embedded HAL interface for Mynewt Delay
impl embedded_hal::blocking::delay::DelayMs<u8> for Delay {
    /// Sleep for the specified number of milliseconds
    fn delay_ms(&mut self, ms: u8) {
   14506:	b580      	push	{r7, lr}
   14508:	b086      	sub	sp, #24
   1450a:	460a      	mov	r2, r1
   1450c:	9003      	str	r0, [sp, #12]
   1450e:	f88d 1013 	strb.w	r1, [sp, #19]
        //  TODO: Get this constant from Mynewt
        const OS_TICKS_PER_SEC: u32 = 1000;
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   14512:	b2c8      	uxtb	r0, r1
   14514:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   14518:	fba0 0101 	umull	r0, r1, r0, r1
   1451c:	2900      	cmp	r1, #0
   1451e:	9002      	str	r0, [sp, #8]
   14520:	d110      	bne.n	14544 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3e>
   14522:	e7ff      	b.n	14524 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x1e>
   14524:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   14528:	f2c1 0062 	movt	r0, #4194	; 0x1062
   1452c:	9902      	ldr	r1, [sp, #8]
   1452e:	fba1 0200 	umull	r0, r2, r1, r0
   14532:	0992      	lsrs	r2, r2, #6
   14534:	9205      	str	r2, [sp, #20]
        unsafe { os::os_time_delay(delay_ticks) };
   14536:	9001      	str	r0, [sp, #4]
   14538:	4610      	mov	r0, r2
   1453a:	f007 fb71 	bl	1bc20 <os_time_delay>
   1453e:	e7ff      	b.n	14540 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3a>
    }
   14540:	b006      	add	sp, #24
   14542:	bd80      	pop	{r7, pc}
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   14544:	f240 5020 	movw	r0, #1312	; 0x520
   14548:	f2c0 0002 	movt	r0, #2
   1454c:	f240 5210 	movw	r2, #1296	; 0x510
   14550:	f2c0 0202 	movt	r2, #2
   14554:	2121      	movs	r1, #33	; 0x21
   14556:	f003 f9d7 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1455a:	defe      	udf	#254	; 0xfe

0001455c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>:
   1455c:	b082      	sub	sp, #8
   1455e:	9001      	str	r0, [sp, #4]
   14560:	9000      	str	r0, [sp, #0]
   14562:	e7ff      	b.n	14564 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E+0x8>
   14564:	9800      	ldr	r0, [sp, #0]
   14566:	fab0 f180 	clz	r1, r0
   1456a:	0948      	lsrs	r0, r1, #5
   1456c:	b002      	add	sp, #8
   1456e:	4770      	bx	lr

00014570 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>:
   14570:	b580      	push	{r7, lr}
   14572:	b084      	sub	sp, #16
   14574:	9002      	str	r0, [sp, #8]
   14576:	9103      	str	r1, [sp, #12]
   14578:	f000 f805 	bl	14586 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
   1457c:	9001      	str	r0, [sp, #4]
   1457e:	e7ff      	b.n	14580 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE+0x10>
   14580:	9801      	ldr	r0, [sp, #4]
   14582:	b004      	add	sp, #16
   14584:	bd80      	pop	{r7, pc}

00014586 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>:
   14586:	b084      	sub	sp, #16
   14588:	9001      	str	r0, [sp, #4]
   1458a:	9102      	str	r1, [sp, #8]
   1458c:	4408      	add	r0, r1
   1458e:	9003      	str	r0, [sp, #12]
   14590:	9803      	ldr	r0, [sp, #12]
   14592:	9000      	str	r0, [sp, #0]
   14594:	e7ff      	b.n	14596 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE+0x10>
   14596:	9800      	ldr	r0, [sp, #0]
   14598:	b004      	add	sp, #16
   1459a:	4770      	bx	lr

0001459c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>:
   1459c:	b081      	sub	sp, #4
   1459e:	b001      	add	sp, #4
   145a0:	4770      	bx	lr

000145a2 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>:

macro_rules! impl_to_primitive_uint_to_uint {
    ($SrcT:ident : $( $(#[$cfg:meta])* fn $method:ident -> $DstT:ident ; )*) => {$(
        #[inline]
        $(#[$cfg])*
        fn $method(&self) -> Option<$DstT> {
   145a2:	b08a      	sub	sp, #40	; 0x28
   145a4:	9005      	str	r0, [sp, #20]
   145a6:	2100      	movs	r1, #0
            let max = $DstT::MAX as $SrcT;
   145a8:	9107      	str	r1, [sp, #28]
   145aa:	21ff      	movs	r1, #255	; 0xff
   145ac:	9106      	str	r1, [sp, #24]
   145ae:	2108      	movs	r1, #8
   145b0:	9108      	str	r1, [sp, #32]
   145b2:	9908      	ldr	r1, [sp, #32]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   145b4:	9003      	str	r0, [sp, #12]
   145b6:	9102      	str	r1, [sp, #8]
   145b8:	e016      	b.n	145e8 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x46>
   145ba:	2001      	movs	r0, #1
   145bc:	f88d 0013 	strb.w	r0, [sp, #19]
   145c0:	e00c      	b.n	145dc <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   145c2:	2000      	movs	r0, #0
   145c4:	f88d 0013 	strb.w	r0, [sp, #19]
   145c8:	e008      	b.n	145dc <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   145ca:	9803      	ldr	r0, [sp, #12]
   145cc:	6801      	ldr	r1, [r0, #0]
   145ce:	6842      	ldr	r2, [r0, #4]
   145d0:	f5b1 7180 	subs.w	r1, r1, #256	; 0x100
   145d4:	f172 0200 	sbcs.w	r2, r2, #0
   145d8:	d3ef      	bcc.n	145ba <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   145da:	e7f2      	b.n	145c2 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x20>
   145dc:	f89d 0013 	ldrb.w	r0, [sp, #19]
   145e0:	07c0      	lsls	r0, r0, #31
   145e2:	2800      	cmp	r0, #0
   145e4:	d10e      	bne.n	14604 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x62>
   145e6:	e009      	b.n	145fc <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x5a>
   145e8:	2001      	movs	r0, #1
   145ea:	9009      	str	r0, [sp, #36]	; 0x24
   145ec:	9809      	ldr	r0, [sp, #36]	; 0x24
   145ee:	9001      	str	r0, [sp, #4]
   145f0:	e7ff      	b.n	145f2 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x50>
   145f2:	9802      	ldr	r0, [sp, #8]
   145f4:	9901      	ldr	r1, [sp, #4]
   145f6:	4288      	cmp	r0, r1
   145f8:	d9df      	bls.n	145ba <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   145fa:	e7e6      	b.n	145ca <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x28>
   145fc:	2000      	movs	r0, #0
                Some(*self as $DstT)
            } else {
                None
   145fe:	f88d 0010 	strb.w	r0, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14602:	e007      	b.n	14614 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
                Some(*self as $DstT)
   14604:	9803      	ldr	r0, [sp, #12]
   14606:	7801      	ldrb	r1, [r0, #0]
   14608:	f88d 1011 	strb.w	r1, [sp, #17]
   1460c:	2101      	movs	r1, #1
   1460e:	f88d 1010 	strb.w	r1, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14612:	e7ff      	b.n	14614 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
            }
        }
   14614:	f89d 0010 	ldrb.w	r0, [sp, #16]
   14618:	f89d 1011 	ldrb.w	r1, [sp, #17]
   1461c:	b00a      	add	sp, #40	; 0x28
   1461e:	4770      	bx	lr

00014620 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>:
   14620:	b580      	push	{r7, lr}
   14622:	b090      	sub	sp, #64	; 0x40
   14624:	2200      	movs	r2, #0
   14626:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   1462a:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   1462e:	2201      	movs	r2, #1
   14630:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   14634:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   14638:	680a      	ldr	r2, [r1, #0]
   1463a:	2a00      	cmp	r2, #0
   1463c:	9101      	str	r1, [sp, #4]
   1463e:	9000      	str	r0, [sp, #0]
   14640:	d001      	beq.n	14646 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x26>
   14642:	e7ff      	b.n	14644 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x24>
   14644:	e004      	b.n	14650 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x30>
   14646:	2000      	movs	r0, #0
   14648:	9900      	ldr	r1, [sp, #0]
   1464a:	6008      	str	r0, [r1, #0]
   1464c:	e032      	b.n	146b4 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
   1464e:	defe      	udf	#254	; 0xfe
   14650:	2000      	movs	r0, #0
   14652:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   14656:	9901      	ldr	r1, [sp, #4]
   14658:	684a      	ldr	r2, [r1, #4]
   1465a:	688b      	ldr	r3, [r1, #8]
   1465c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   14660:	f8cd c010 	str.w	ip, [sp, #16]
   14664:	9303      	str	r3, [sp, #12]
   14666:	9202      	str	r2, [sp, #8]
   14668:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   1466c:	9802      	ldr	r0, [sp, #8]
   1466e:	9a03      	ldr	r2, [sp, #12]
   14670:	9b04      	ldr	r3, [sp, #16]
   14672:	930d      	str	r3, [sp, #52]	; 0x34
   14674:	920c      	str	r2, [sp, #48]	; 0x30
   14676:	900b      	str	r0, [sp, #44]	; 0x2c
   14678:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1467a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1467c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1467e:	930a      	str	r3, [sp, #40]	; 0x28
   14680:	9209      	str	r2, [sp, #36]	; 0x24
   14682:	9008      	str	r0, [sp, #32]
   14684:	a805      	add	r0, sp, #20
   14686:	a908      	add	r1, sp, #32
   14688:	f002 f90a 	bl	168a0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>
   1468c:	e7ff      	b.n	1468e <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x6e>
   1468e:	9805      	ldr	r0, [sp, #20]
   14690:	9906      	ldr	r1, [sp, #24]
   14692:	9a07      	ldr	r2, [sp, #28]
   14694:	9b00      	ldr	r3, [sp, #0]
   14696:	60da      	str	r2, [r3, #12]
   14698:	6099      	str	r1, [r3, #8]
   1469a:	6058      	str	r0, [r3, #4]
   1469c:	2001      	movs	r0, #1
   1469e:	6018      	str	r0, [r3, #0]
   146a0:	e008      	b.n	146b4 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
   146a2:	9801      	ldr	r0, [sp, #4]
   146a4:	6801      	ldr	r1, [r0, #0]
   146a6:	2901      	cmp	r1, #1
   146a8:	d00c      	beq.n	146c4 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa4>
   146aa:	e015      	b.n	146d8 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb8>
   146ac:	2000      	movs	r0, #0
   146ae:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   146b2:	e7f6      	b.n	146a2 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
   146b4:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   146b8:	07c0      	lsls	r0, r0, #31
   146ba:	2800      	cmp	r0, #0
   146bc:	d1f6      	bne.n	146ac <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x8c>
   146be:	e7f0      	b.n	146a2 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
   146c0:	b010      	add	sp, #64	; 0x40
   146c2:	bd80      	pop	{r7, pc}
   146c4:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   146c8:	07c0      	lsls	r0, r0, #31
   146ca:	2800      	cmp	r0, #0
   146cc:	d0f8      	beq.n	146c0 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
   146ce:	e7ff      	b.n	146d0 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb0>
   146d0:	2000      	movs	r0, #0
   146d2:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   146d6:	e7f3      	b.n	146c0 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
   146d8:	e7f2      	b.n	146c0 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>

000146da <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>:
   146da:	b084      	sub	sp, #16
   146dc:	9002      	str	r0, [sp, #8]
   146de:	6801      	ldr	r1, [r0, #0]
   146e0:	2900      	cmp	r1, #0
   146e2:	9000      	str	r0, [sp, #0]
   146e4:	d001      	beq.n	146ea <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x10>
   146e6:	e7ff      	b.n	146e8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0xe>
   146e8:	e003      	b.n	146f2 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x18>
   146ea:	2000      	movs	r0, #0
   146ec:	9001      	str	r0, [sp, #4]
   146ee:	e006      	b.n	146fe <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   146f0:	defe      	udf	#254	; 0xfe
   146f2:	9800      	ldr	r0, [sp, #0]
   146f4:	f100 0108 	add.w	r1, r0, #8
   146f8:	9103      	str	r1, [sp, #12]
   146fa:	9101      	str	r1, [sp, #4]
   146fc:	e7ff      	b.n	146fe <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   146fe:	9801      	ldr	r0, [sp, #4]
   14700:	b004      	add	sp, #16
   14702:	4770      	bx	lr

00014704 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>:
   14704:	b510      	push	{r4, lr}
   14706:	b088      	sub	sp, #32
   14708:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   1470c:	468e      	mov	lr, r1
   1470e:	4604      	mov	r4, r0
   14710:	f8ad 0010 	strh.w	r0, [sp, #16]
   14714:	f8ad 1012 	strh.w	r1, [sp, #18]
   14718:	9205      	str	r2, [sp, #20]
   1471a:	9306      	str	r3, [sp, #24]
   1471c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   14720:	4601      	mov	r1, r0
   14722:	2800      	cmp	r0, #0
   14724:	9303      	str	r3, [sp, #12]
   14726:	9202      	str	r2, [sp, #8]
   14728:	f8cd c004 	str.w	ip, [sp, #4]
   1472c:	d001      	beq.n	14732 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2e>
   1472e:	e7ff      	b.n	14730 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2c>
   14730:	e006      	b.n	14740 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x3c>
   14732:	9802      	ldr	r0, [sp, #8]
   14734:	9903      	ldr	r1, [sp, #12]
   14736:	9a01      	ldr	r2, [sp, #4]
   14738:	f003 f89c 	bl	17874 <_ZN4core6option13expect_failed17had6579abaad447b4E>
   1473c:	defe      	udf	#254	; 0xfe
   1473e:	defe      	udf	#254	; 0xfe
   14740:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   14744:	4601      	mov	r1, r0
   14746:	f8ad 001e 	strh.w	r0, [sp, #30]
   1474a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   1474e:	2801      	cmp	r0, #1
   14750:	9100      	str	r1, [sp, #0]
   14752:	d103      	bne.n	1475c <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x58>
   14754:	e7ff      	b.n	14756 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>
   14756:	9800      	ldr	r0, [sp, #0]
   14758:	b008      	add	sp, #32
   1475a:	bd10      	pop	{r4, pc}
   1475c:	e7fb      	b.n	14756 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>

0001475e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>:
   1475e:	b084      	sub	sp, #16
   14760:	460b      	mov	r3, r1
   14762:	4684      	mov	ip, r0
   14764:	f88d 000c 	strb.w	r0, [sp, #12]
   14768:	f88d 100d 	strb.w	r1, [sp, #13]
   1476c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14770:	07c1      	lsls	r1, r0, #31
   14772:	2900      	cmp	r1, #0
   14774:	9202      	str	r2, [sp, #8]
   14776:	d001      	beq.n	1477c <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1e>
   14778:	e7ff      	b.n	1477a <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1c>
   1477a:	e009      	b.n	14790 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x32>
   1477c:	f240 5041 	movw	r0, #1345	; 0x541
   14780:	f2c0 0002 	movt	r0, #2
   14784:	212b      	movs	r1, #43	; 0x2b
   14786:	9a02      	ldr	r2, [sp, #8]
   14788:	f003 f8be 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1478c:	defe      	udf	#254	; 0xfe
   1478e:	defe      	udf	#254	; 0xfe
   14790:	f89d 000d 	ldrb.w	r0, [sp, #13]
   14794:	4601      	mov	r1, r0
   14796:	f88d 000f 	strb.w	r0, [sp, #15]
   1479a:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1479e:	07c0      	lsls	r0, r0, #31
   147a0:	2800      	cmp	r0, #0
   147a2:	9101      	str	r1, [sp, #4]
   147a4:	d003      	beq.n	147ae <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x50>
   147a6:	e7ff      	b.n	147a8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>
   147a8:	9801      	ldr	r0, [sp, #4]
   147aa:	b004      	add	sp, #16
   147ac:	4770      	bx	lr
   147ae:	e7fb      	b.n	147a8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>

000147b0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>:
   147b0:	b088      	sub	sp, #32
   147b2:	9004      	str	r0, [sp, #16]
   147b4:	9105      	str	r1, [sp, #20]
   147b6:	9804      	ldr	r0, [sp, #16]
   147b8:	2800      	cmp	r0, #0
   147ba:	4601      	mov	r1, r0
   147bc:	bf18      	it	ne
   147be:	2101      	movne	r1, #1
   147c0:	2800      	cmp	r0, #0
   147c2:	9203      	str	r2, [sp, #12]
   147c4:	d001      	beq.n	147ca <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x1a>
   147c6:	e7ff      	b.n	147c8 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x18>
   147c8:	e009      	b.n	147de <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x2e>
   147ca:	f240 5041 	movw	r0, #1345	; 0x541
   147ce:	f2c0 0002 	movt	r0, #2
   147d2:	212b      	movs	r1, #43	; 0x2b
   147d4:	9a03      	ldr	r2, [sp, #12]
   147d6:	f003 f897 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   147da:	defe      	udf	#254	; 0xfe
   147dc:	defe      	udf	#254	; 0xfe
   147de:	9804      	ldr	r0, [sp, #16]
   147e0:	9905      	ldr	r1, [sp, #20]
   147e2:	9006      	str	r0, [sp, #24]
   147e4:	9107      	str	r1, [sp, #28]
   147e6:	9a04      	ldr	r2, [sp, #16]
   147e8:	2a00      	cmp	r2, #0
   147ea:	9002      	str	r0, [sp, #8]
   147ec:	9101      	str	r1, [sp, #4]
   147ee:	d004      	beq.n	147fa <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x4a>
   147f0:	e7ff      	b.n	147f2 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>
   147f2:	9802      	ldr	r0, [sp, #8]
   147f4:	9901      	ldr	r1, [sp, #4]
   147f6:	b008      	add	sp, #32
   147f8:	4770      	bx	lr
   147fa:	e7fa      	b.n	147f2 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>

000147fc <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>:
   147fc:	b580      	push	{r7, lr}
   147fe:	b082      	sub	sp, #8
   14800:	9001      	str	r0, [sp, #4]
   14802:	f000 f82b 	bl	1485c <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   14806:	9000      	str	r0, [sp, #0]
   14808:	e7ff      	b.n	1480a <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E+0xe>
   1480a:	2001      	movs	r0, #1
   1480c:	9900      	ldr	r1, [sp, #0]
   1480e:	4388      	bics	r0, r1
   14810:	b002      	add	sp, #8
   14812:	bd80      	pop	{r7, pc}

00014814 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>:
   14814:	b082      	sub	sp, #8
   14816:	9001      	str	r0, [sp, #4]
   14818:	6800      	ldr	r0, [r0, #0]
   1481a:	2800      	cmp	r0, #0
   1481c:	d104      	bne.n	14828 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x14>
   1481e:	e7ff      	b.n	14820 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0xc>
   14820:	2000      	movs	r0, #0
   14822:	f88d 0003 	strb.w	r0, [sp, #3]
   14826:	e003      	b.n	14830 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   14828:	2001      	movs	r0, #1
   1482a:	f88d 0003 	strb.w	r0, [sp, #3]
   1482e:	e7ff      	b.n	14830 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   14830:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14834:	b002      	add	sp, #8
   14836:	4770      	bx	lr

00014838 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>:
   14838:	b082      	sub	sp, #8
   1483a:	9001      	str	r0, [sp, #4]
   1483c:	6800      	ldr	r0, [r0, #0]
   1483e:	2801      	cmp	r0, #1
   14840:	d004      	beq.n	1484c <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x14>
   14842:	e7ff      	b.n	14844 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0xc>
   14844:	2000      	movs	r0, #0
   14846:	f88d 0003 	strb.w	r0, [sp, #3]
   1484a:	e003      	b.n	14854 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
   1484c:	2001      	movs	r0, #1
   1484e:	f88d 0003 	strb.w	r0, [sp, #3]
   14852:	e7ff      	b.n	14854 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
   14854:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14858:	b002      	add	sp, #8
   1485a:	4770      	bx	lr

0001485c <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>:
   1485c:	b082      	sub	sp, #8
   1485e:	9001      	str	r0, [sp, #4]
   14860:	8800      	ldrh	r0, [r0, #0]
   14862:	2801      	cmp	r0, #1
   14864:	d004      	beq.n	14870 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x14>
   14866:	e7ff      	b.n	14868 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0xc>
   14868:	2000      	movs	r0, #0
   1486a:	f88d 0003 	strb.w	r0, [sp, #3]
   1486e:	e003      	b.n	14878 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
   14870:	2001      	movs	r0, #1
   14872:	f88d 0003 	strb.w	r0, [sp, #3]
   14876:	e7ff      	b.n	14878 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
   14878:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1487c:	b002      	add	sp, #8
   1487e:	4770      	bx	lr

00014880 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>:
   14880:	b580      	push	{r7, lr}
   14882:	b086      	sub	sp, #24
   14884:	9000      	str	r0, [sp, #0]
   14886:	2000      	movs	r0, #0
   14888:	f88d 000f 	strb.w	r0, [sp, #15]
   1488c:	f88d 000e 	strb.w	r0, [sp, #14]
   14890:	2001      	movs	r0, #1
   14892:	f88d 000f 	strb.w	r0, [sp, #15]
   14896:	f88d 000e 	strb.w	r0, [sp, #14]
   1489a:	9800      	ldr	r0, [sp, #0]
   1489c:	2800      	cmp	r0, #0
   1489e:	4601      	mov	r1, r0
   148a0:	bf18      	it	ne
   148a2:	2101      	movne	r1, #1
   148a4:	2800      	cmp	r0, #0
   148a6:	d001      	beq.n	148ac <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2c>
   148a8:	e7ff      	b.n	148aa <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2a>
   148aa:	e004      	b.n	148b6 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x36>
   148ac:	2000      	movs	r0, #0
   148ae:	f88d 0004 	strb.w	r0, [sp, #4]
   148b2:	e019      	b.n	148e8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   148b4:	defe      	udf	#254	; 0xfe
   148b6:	2000      	movs	r0, #0
   148b8:	f88d 000f 	strb.w	r0, [sp, #15]
   148bc:	9900      	ldr	r1, [sp, #0]
   148be:	9105      	str	r1, [sp, #20]
   148c0:	f88d 000e 	strb.w	r0, [sp, #14]
   148c4:	9102      	str	r1, [sp, #8]
   148c6:	9802      	ldr	r0, [sp, #8]
   148c8:	f7f5 ff0d 	bl	a6e6 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>
   148cc:	f88d 1005 	strb.w	r1, [sp, #5]
   148d0:	f88d 0004 	strb.w	r0, [sp, #4]
   148d4:	e7ff      	b.n	148d6 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x56>
   148d6:	e007      	b.n	148e8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   148d8:	9800      	ldr	r0, [sp, #0]
   148da:	2800      	cmp	r0, #0
   148dc:	d110      	bne.n	14900 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x80>
   148de:	e019      	b.n	14914 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x94>
   148e0:	2000      	movs	r0, #0
   148e2:	f88d 000e 	strb.w	r0, [sp, #14]
   148e6:	e7f7      	b.n	148d8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   148e8:	f89d 000e 	ldrb.w	r0, [sp, #14]
   148ec:	07c0      	lsls	r0, r0, #31
   148ee:	2800      	cmp	r0, #0
   148f0:	d1f6      	bne.n	148e0 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x60>
   148f2:	e7f1      	b.n	148d8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   148f4:	f89d 0004 	ldrb.w	r0, [sp, #4]
   148f8:	f89d 1005 	ldrb.w	r1, [sp, #5]
   148fc:	b006      	add	sp, #24
   148fe:	bd80      	pop	{r7, pc}
   14900:	f89d 000f 	ldrb.w	r0, [sp, #15]
   14904:	07c0      	lsls	r0, r0, #31
   14906:	2800      	cmp	r0, #0
   14908:	d0f4      	beq.n	148f4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   1490a:	e7ff      	b.n	1490c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x8c>
   1490c:	2000      	movs	r0, #0
   1490e:	f88d 000f 	strb.w	r0, [sp, #15]
   14912:	e7ef      	b.n	148f4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   14914:	e7ee      	b.n	148f4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>

00014916 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>:
    fn clone(&self) -> Self {
   14916:	b580      	push	{r7, lr}
   14918:	b09c      	sub	sp, #112	; 0x70
   1491a:	911b      	str	r1, [sp, #108]	; 0x6c
   1491c:	aa01      	add	r2, sp, #4
        Vec(self.0.clone())
   1491e:	9000      	str	r0, [sp, #0]
   14920:	4610      	mov	r0, r2
   14922:	f000 fafc 	bl	14f1e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>
   14926:	e7ff      	b.n	14928 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE+0x12>
   14928:	a901      	add	r1, sp, #4
   1492a:	2268      	movs	r2, #104	; 0x68
   1492c:	9800      	ldr	r0, [sp, #0]
   1492e:	f009 fbbf 	bl	1e0b0 <__aeabi_memcpy>
    }
   14932:	b01c      	add	sp, #112	; 0x70
   14934:	bd80      	pop	{r7, pc}

00014936 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>:
    fn clone(&self) -> Self {
   14936:	b580      	push	{r7, lr}
   14938:	b0b6      	sub	sp, #216	; 0xd8
   1493a:	9135      	str	r1, [sp, #212]	; 0xd4
   1493c:	aa02      	add	r2, sp, #8
        Vec(self.0.clone())
   1493e:	9001      	str	r0, [sp, #4]
   14940:	4610      	mov	r0, r2
   14942:	f000 fb14 	bl	14f6e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>
   14946:	e7ff      	b.n	14948 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E+0x12>
   14948:	a902      	add	r1, sp, #8
   1494a:	22cc      	movs	r2, #204	; 0xcc
   1494c:	9801      	ldr	r0, [sp, #4]
   1494e:	f009 fbaf 	bl	1e0b0 <__aeabi_memcpy>
    }
   14952:	b036      	add	sp, #216	; 0xd8
   14954:	bd80      	pop	{r7, pc}

00014956 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>:
    fn drop(&mut self) {
   14956:	b580      	push	{r7, lr}
   14958:	b084      	sub	sp, #16
   1495a:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
   1495c:	f000 f84c 	bl	149f8 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>
   14960:	9002      	str	r0, [sp, #8]
   14962:	9101      	str	r1, [sp, #4]
   14964:	e7ff      	b.n	14966 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x10>
   14966:	9802      	ldr	r0, [sp, #8]
   14968:	9901      	ldr	r1, [sp, #4]
   1496a:	f001 fb7b 	bl	16064 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
   1496e:	e7ff      	b.n	14970 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1a>
   14970:	e7ff      	b.n	14972 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1c>
    }
   14972:	b004      	add	sp, #16
   14974:	bd80      	pop	{r7, pc}

00014976 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>:
    fn drop(&mut self) {
   14976:	b580      	push	{r7, lr}
   14978:	b084      	sub	sp, #16
   1497a:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
   1497c:	f000 f848 	bl	14a10 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
   14980:	9002      	str	r0, [sp, #8]
   14982:	9101      	str	r1, [sp, #4]
   14984:	e7ff      	b.n	14986 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x10>
   14986:	9802      	ldr	r0, [sp, #8]
   14988:	9901      	ldr	r1, [sp, #4]
   1498a:	f001 fb6b 	bl	16064 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
   1498e:	e7ff      	b.n	14990 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1a>
   14990:	e7ff      	b.n	14992 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1c>
    }
   14992:	b004      	add	sp, #16
   14994:	bd80      	pop	{r7, pc}

00014996 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>:
    fn deref(&self) -> &[T] {
   14996:	b580      	push	{r7, lr}
   14998:	b084      	sub	sp, #16
   1499a:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   1499c:	f000 fb0f 	bl	14fbe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
   149a0:	9002      	str	r0, [sp, #8]
   149a2:	9101      	str	r1, [sp, #4]
   149a4:	e7ff      	b.n	149a6 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E+0x10>
    }
   149a6:	9802      	ldr	r0, [sp, #8]
   149a8:	9901      	ldr	r1, [sp, #4]
   149aa:	b004      	add	sp, #16
   149ac:	bd80      	pop	{r7, pc}

000149ae <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>:
    fn deref(&self) -> &[T] {
   149ae:	b580      	push	{r7, lr}
   149b0:	b084      	sub	sp, #16
   149b2:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   149b4:	f000 fb18 	bl	14fe8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
   149b8:	9002      	str	r0, [sp, #8]
   149ba:	9101      	str	r1, [sp, #4]
   149bc:	e7ff      	b.n	149be <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E+0x10>
    }
   149be:	9802      	ldr	r0, [sp, #8]
   149c0:	9901      	ldr	r1, [sp, #4]
   149c2:	b004      	add	sp, #16
   149c4:	bd80      	pop	{r7, pc}

000149c6 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>:
    fn drop(&mut self) {
   149c6:	b580      	push	{r7, lr}
   149c8:	b086      	sub	sp, #24
   149ca:	9005      	str	r0, [sp, #20]
            ptr::drop_in_place(&mut self.vec[self.next..]);
   149cc:	9003      	str	r0, [sp, #12]
   149ce:	f000 f81f 	bl	14a10 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
   149d2:	9002      	str	r0, [sp, #8]
   149d4:	9101      	str	r1, [sp, #4]
   149d6:	e7ff      	b.n	149d8 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x12>
   149d8:	9803      	ldr	r0, [sp, #12]
   149da:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   149de:	9104      	str	r1, [sp, #16]
   149e0:	9a04      	ldr	r2, [sp, #16]
   149e2:	9802      	ldr	r0, [sp, #8]
   149e4:	9901      	ldr	r1, [sp, #4]
   149e6:	f001 fb4a 	bl	1607e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>
   149ea:	e7ff      	b.n	149ec <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x26>
   149ec:	e7ff      	b.n	149ee <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x28>
   149ee:	2000      	movs	r0, #0
            self.vec.0.len = 0;
   149f0:	9903      	ldr	r1, [sp, #12]
   149f2:	6008      	str	r0, [r1, #0]
    }
   149f4:	b006      	add	sp, #24
   149f6:	bd80      	pop	{r7, pc}

000149f8 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>:

impl<T, N> ops::DerefMut for Vec<T, N>
where
    N: ArrayLength<T>,
{
    fn deref_mut(&mut self) -> &mut [T] {
   149f8:	b580      	push	{r7, lr}
   149fa:	b084      	sub	sp, #16
   149fc:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
   149fe:	f000 f8ff 	bl	14c00 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
   14a02:	9002      	str	r0, [sp, #8]
   14a04:	9101      	str	r1, [sp, #4]
   14a06:	e7ff      	b.n	14a08 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E+0x10>
    }
   14a08:	9802      	ldr	r0, [sp, #8]
   14a0a:	9901      	ldr	r1, [sp, #4]
   14a0c:	b004      	add	sp, #16
   14a0e:	bd80      	pop	{r7, pc}

00014a10 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>:
    fn deref_mut(&mut self) -> &mut [T] {
   14a10:	b580      	push	{r7, lr}
   14a12:	b084      	sub	sp, #16
   14a14:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
   14a16:	f000 f908 	bl	14c2a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
   14a1a:	9002      	str	r0, [sp, #8]
   14a1c:	9101      	str	r1, [sp, #4]
   14a1e:	e7ff      	b.n	14a20 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E+0x10>
    }
   14a20:	9802      	ldr	r0, [sp, #8]
   14a22:	9901      	ldr	r1, [sp, #4]
   14a24:	b004      	add	sp, #16
   14a26:	bd80      	pop	{r7, pc}

00014a28 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   14a28:	b580      	push	{r7, lr}
   14a2a:	b084      	sub	sp, #16
   14a2c:	9001      	str	r0, [sp, #4]
   14a2e:	9102      	str	r1, [sp, #8]
   14a30:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   14a32:	f000 f973 	bl	14d1c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
   14a36:	9000      	str	r0, [sp, #0]
   14a38:	e7ff      	b.n	14a3a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE+0x12>
    }
   14a3a:	9800      	ldr	r0, [sp, #0]
   14a3c:	f000 0001 	and.w	r0, r0, #1
   14a40:	b004      	add	sp, #16
   14a42:	bd80      	pop	{r7, pc}

00014a44 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>:
    pub fn new() -> Self {
   14a44:	b580      	push	{r7, lr}
   14a46:	b09c      	sub	sp, #112	; 0x70
   14a48:	a902      	add	r1, sp, #8
        Vec(crate::i::Vec::new())
   14a4a:	9001      	str	r0, [sp, #4]
   14a4c:	4608      	mov	r0, r1
   14a4e:	f000 f8c8 	bl	14be2 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
   14a52:	e7ff      	b.n	14a54 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E+0x10>
   14a54:	a902      	add	r1, sp, #8
   14a56:	2268      	movs	r2, #104	; 0x68
   14a58:	9801      	ldr	r0, [sp, #4]
   14a5a:	f009 fb29 	bl	1e0b0 <__aeabi_memcpy>
    }
   14a5e:	b01c      	add	sp, #112	; 0x70
   14a60:	bd80      	pop	{r7, pc}

00014a62 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>:
    pub fn new() -> Self {
   14a62:	b580      	push	{r7, lr}
   14a64:	b0b4      	sub	sp, #208	; 0xd0
   14a66:	a901      	add	r1, sp, #4
        Vec(crate::i::Vec::new())
   14a68:	9000      	str	r0, [sp, #0]
   14a6a:	4608      	mov	r0, r1
   14a6c:	f000 f8aa 	bl	14bc4 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
   14a70:	e7ff      	b.n	14a72 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE+0x10>
   14a72:	a901      	add	r1, sp, #4
   14a74:	22cc      	movs	r2, #204	; 0xcc
   14a76:	9800      	ldr	r0, [sp, #0]
   14a78:	f009 fb1a 	bl	1e0b0 <__aeabi_memcpy>
    }
   14a7c:	b034      	add	sp, #208	; 0xd0
   14a7e:	bd80      	pop	{r7, pc}

00014a80 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   14a80:	b580      	push	{r7, lr}
   14a82:	b086      	sub	sp, #24
   14a84:	460a      	mov	r2, r1
   14a86:	9004      	str	r0, [sp, #16]
   14a88:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.0.push(item)
   14a8c:	9203      	str	r2, [sp, #12]
   14a8e:	f000 fa0b 	bl	14ea8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>
   14a92:	9002      	str	r0, [sp, #8]
   14a94:	9101      	str	r1, [sp, #4]
   14a96:	e7ff      	b.n	14a98 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE+0x18>
    }
   14a98:	9802      	ldr	r0, [sp, #8]
   14a9a:	9901      	ldr	r1, [sp, #4]
   14a9c:	b006      	add	sp, #24
   14a9e:	bd80      	pop	{r7, pc}

00014aa0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>:
    pub fn clear(&mut self) {
   14aa0:	b580      	push	{r7, lr}
   14aa2:	b082      	sub	sp, #8
   14aa4:	9001      	str	r0, [sp, #4]
        self.0.clear()
   14aa6:	f000 fa28 	bl	14efa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>
   14aaa:	e7ff      	b.n	14aac <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E+0xc>
    }
   14aac:	b002      	add	sp, #8
   14aae:	bd80      	pop	{r7, pc}

00014ab0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>:
    pub fn clear(&mut self) {
   14ab0:	b580      	push	{r7, lr}
   14ab2:	b082      	sub	sp, #8
   14ab4:	9001      	str	r0, [sp, #4]
        self.0.clear()
   14ab6:	f000 fa29 	bl	14f0c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>
   14aba:	e7ff      	b.n	14abc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E+0xc>
    }
   14abc:	b002      	add	sp, #8
   14abe:	bd80      	pop	{r7, pc}

00014ac0 <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>:
    fn into_iter(self) -> Self::IntoIter {
   14ac0:	b580      	push	{r7, lr}
   14ac2:	b0b6      	sub	sp, #216	; 0xd8
   14ac4:	aa03      	add	r2, sp, #12
   14ac6:	23cc      	movs	r3, #204	; 0xcc
        IntoIter { vec: self, next: 0 }
   14ac8:	9002      	str	r0, [sp, #8]
   14aca:	4610      	mov	r0, r2
   14acc:	9201      	str	r2, [sp, #4]
   14ace:	461a      	mov	r2, r3
   14ad0:	9300      	str	r3, [sp, #0]
   14ad2:	f009 faed 	bl	1e0b0 <__aeabi_memcpy>
   14ad6:	9802      	ldr	r0, [sp, #8]
   14ad8:	9901      	ldr	r1, [sp, #4]
   14ada:	9a00      	ldr	r2, [sp, #0]
   14adc:	f009 fae8 	bl	1e0b0 <__aeabi_memcpy>
   14ae0:	2000      	movs	r0, #0
   14ae2:	9902      	ldr	r1, [sp, #8]
   14ae4:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
    }
   14ae8:	b036      	add	sp, #216	; 0xd8
   14aea:	bd80      	pop	{r7, pc}

00014aec <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>:
    fn next(&mut self) -> Option<Self::Item> {
   14aec:	b580      	push	{r7, lr}
   14aee:	b08e      	sub	sp, #56	; 0x38
   14af0:	900a      	str	r0, [sp, #40]	; 0x28
        if self.next < self.vec.len() {
   14af2:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   14af6:	9008      	str	r0, [sp, #32]
   14af8:	9107      	str	r1, [sp, #28]
   14afa:	f7ff ff58 	bl	149ae <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>
   14afe:	9006      	str	r0, [sp, #24]
   14b00:	9105      	str	r1, [sp, #20]
   14b02:	e7ff      	b.n	14b04 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x18>
   14b04:	9806      	ldr	r0, [sp, #24]
   14b06:	9905      	ldr	r1, [sp, #20]
   14b08:	f001 fa59 	bl	15fbe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   14b0c:	9004      	str	r0, [sp, #16]
   14b0e:	e7ff      	b.n	14b10 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x24>
   14b10:	9807      	ldr	r0, [sp, #28]
   14b12:	9904      	ldr	r1, [sp, #16]
   14b14:	4288      	cmp	r0, r1
   14b16:	d304      	bcc.n	14b22 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x36>
   14b18:	e7ff      	b.n	14b1a <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x2e>
   14b1a:	2000      	movs	r0, #0
            None
   14b1c:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
   14b20:	e029      	b.n	14b76 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
                (self.vec.0.buffer.as_ptr() as *const T)
   14b22:	9808      	ldr	r0, [sp, #32]
   14b24:	1d01      	adds	r1, r0, #4
   14b26:	910c      	str	r1, [sp, #48]	; 0x30
   14b28:	910d      	str	r1, [sp, #52]	; 0x34
   14b2a:	9103      	str	r1, [sp, #12]
   14b2c:	e7ff      	b.n	14b2e <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x42>
                    .add(self.next)
   14b2e:	9808      	ldr	r0, [sp, #32]
   14b30:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
                (self.vec.0.buffer.as_ptr() as *const T)
   14b34:	9803      	ldr	r0, [sp, #12]
   14b36:	f002 fc0c 	bl	17352 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
   14b3a:	9002      	str	r0, [sp, #8]
   14b3c:	e7ff      	b.n	14b3e <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x52>
   14b3e:	9802      	ldr	r0, [sp, #8]
   14b40:	f002 fc12 	bl	17368 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>
   14b44:	4601      	mov	r1, r0
   14b46:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
   14b4a:	9101      	str	r1, [sp, #4]
   14b4c:	e7ff      	b.n	14b4e <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x62>
            self.next += 1;
   14b4e:	9808      	ldr	r0, [sp, #32]
   14b50:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   14b54:	1c4a      	adds	r2, r1, #1
   14b56:	4613      	mov	r3, r2
   14b58:	428a      	cmp	r2, r1
   14b5a:	9300      	str	r3, [sp, #0]
   14b5c:	d311      	bcc.n	14b82 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x96>
   14b5e:	e7ff      	b.n	14b60 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x74>
   14b60:	9800      	ldr	r0, [sp, #0]
   14b62:	9908      	ldr	r1, [sp, #32]
   14b64:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
            Some(item)
   14b68:	9a01      	ldr	r2, [sp, #4]
   14b6a:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
   14b6e:	2301      	movs	r3, #1
   14b70:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
   14b74:	e7ff      	b.n	14b76 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
    }
   14b76:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   14b7a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   14b7e:	b00e      	add	sp, #56	; 0x38
   14b80:	bd80      	pop	{r7, pc}
            self.next += 1;
   14b82:	f240 50e0 	movw	r0, #1504	; 0x5e0
   14b86:	f2c0 0002 	movt	r0, #2
   14b8a:	f240 52c4 	movw	r2, #1476	; 0x5c4
   14b8e:	f2c0 0202 	movt	r2, #2
   14b92:	211c      	movs	r1, #28
   14b94:	f002 feb8 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14b98:	defe      	udf	#254	; 0xfe

00014b9a <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE>:
   14b9a:	b580      	push	{r7, lr}
   14b9c:	b084      	sub	sp, #16
   14b9e:	9002      	str	r0, [sp, #8]
   14ba0:	9103      	str	r1, [sp, #12]
   14ba2:	f240 50fc 	movw	r0, #1532	; 0x5fc
   14ba6:	f2c0 0002 	movt	r0, #2
   14baa:	2202      	movs	r2, #2
   14bac:	9001      	str	r0, [sp, #4]
   14bae:	4608      	mov	r0, r1
   14bb0:	9901      	ldr	r1, [sp, #4]
   14bb2:	f003 fbc9 	bl	18348 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
   14bb6:	9000      	str	r0, [sp, #0]
   14bb8:	e7ff      	b.n	14bba <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE+0x20>
   14bba:	9800      	ldr	r0, [sp, #0]
   14bbc:	f000 0001 	and.w	r0, r0, #1
   14bc0:	b004      	add	sp, #16
   14bc2:	bd80      	pop	{r7, pc}

00014bc4 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>:
    pub const fn new() -> Self {
   14bc4:	b580      	push	{r7, lr}
   14bc6:	b0b4      	sub	sp, #208	; 0xd0
            buffer: MaybeUninit::uninit(),
   14bc8:	9001      	str	r0, [sp, #4]
   14bca:	e7ff      	b.n	14bcc <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE+0x8>
        Self {
   14bcc:	9801      	ldr	r0, [sp, #4]
   14bce:	3004      	adds	r0, #4
   14bd0:	a902      	add	r1, sp, #8
   14bd2:	22c8      	movs	r2, #200	; 0xc8
   14bd4:	f009 fa6c 	bl	1e0b0 <__aeabi_memcpy>
   14bd8:	2100      	movs	r1, #0
   14bda:	9a01      	ldr	r2, [sp, #4]
   14bdc:	6011      	str	r1, [r2, #0]
    }
   14bde:	b034      	add	sp, #208	; 0xd0
   14be0:	bd80      	pop	{r7, pc}

00014be2 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>:
    pub const fn new() -> Self {
   14be2:	b580      	push	{r7, lr}
   14be4:	b09a      	sub	sp, #104	; 0x68
            buffer: MaybeUninit::uninit(),
   14be6:	9000      	str	r0, [sp, #0]
   14be8:	e7ff      	b.n	14bea <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE+0x8>
        Self {
   14bea:	9800      	ldr	r0, [sp, #0]
   14bec:	3004      	adds	r0, #4
   14bee:	a901      	add	r1, sp, #4
   14bf0:	2264      	movs	r2, #100	; 0x64
   14bf2:	f009 fa5d 	bl	1e0b0 <__aeabi_memcpy>
   14bf6:	2100      	movs	r1, #0
   14bf8:	9a00      	ldr	r2, [sp, #0]
   14bfa:	6011      	str	r1, [r2, #0]
    }
   14bfc:	b01a      	add	sp, #104	; 0x68
   14bfe:	bd80      	pop	{r7, pc}

00014c00 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   14c00:	b580      	push	{r7, lr}
   14c02:	b088      	sub	sp, #32
   14c04:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   14c06:	1d01      	adds	r1, r0, #4
   14c08:	9106      	str	r1, [sp, #24]
   14c0a:	9107      	str	r1, [sp, #28]
   14c0c:	9004      	str	r0, [sp, #16]
   14c0e:	9103      	str	r1, [sp, #12]
   14c10:	e7ff      	b.n	14c12 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x12>
   14c12:	9804      	ldr	r0, [sp, #16]
   14c14:	6801      	ldr	r1, [r0, #0]
   14c16:	9803      	ldr	r0, [sp, #12]
   14c18:	f001 f9ad 	bl	15f76 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   14c1c:	9002      	str	r0, [sp, #8]
   14c1e:	9101      	str	r1, [sp, #4]
   14c20:	e7ff      	b.n	14c22 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x22>
    }
   14c22:	9802      	ldr	r0, [sp, #8]
   14c24:	9901      	ldr	r1, [sp, #4]
   14c26:	b008      	add	sp, #32
   14c28:	bd80      	pop	{r7, pc}

00014c2a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   14c2a:	b580      	push	{r7, lr}
   14c2c:	b088      	sub	sp, #32
   14c2e:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   14c30:	1d01      	adds	r1, r0, #4
   14c32:	9106      	str	r1, [sp, #24]
   14c34:	9107      	str	r1, [sp, #28]
   14c36:	9004      	str	r0, [sp, #16]
   14c38:	9103      	str	r1, [sp, #12]
   14c3a:	e7ff      	b.n	14c3c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x12>
   14c3c:	9804      	ldr	r0, [sp, #16]
   14c3e:	6801      	ldr	r1, [r0, #0]
   14c40:	9803      	ldr	r0, [sp, #12]
   14c42:	f001 f998 	bl	15f76 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   14c46:	9002      	str	r0, [sp, #8]
   14c48:	9101      	str	r1, [sp, #4]
   14c4a:	e7ff      	b.n	14c4c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x22>
    }
   14c4c:	9802      	ldr	r0, [sp, #8]
   14c4e:	9901      	ldr	r1, [sp, #4]
   14c50:	b008      	add	sp, #32
   14c52:	bd80      	pop	{r7, pc}

00014c54 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   14c54:	b580      	push	{r7, lr}
   14c56:	b08a      	sub	sp, #40	; 0x28
   14c58:	460a      	mov	r2, r1
   14c5a:	9006      	str	r0, [sp, #24]
   14c5c:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
   14c60:	1d01      	adds	r1, r0, #4
   14c62:	9108      	str	r1, [sp, #32]
   14c64:	9109      	str	r1, [sp, #36]	; 0x24
   14c66:	9005      	str	r0, [sp, #20]
   14c68:	9204      	str	r2, [sp, #16]
   14c6a:	9103      	str	r1, [sp, #12]
   14c6c:	e7ff      	b.n	14c6e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x1a>
            .add(self.len)
   14c6e:	9805      	ldr	r0, [sp, #20]
   14c70:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   14c72:	9803      	ldr	r0, [sp, #12]
   14c74:	f001 fa9c 	bl	161b0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   14c78:	9002      	str	r0, [sp, #8]
   14c7a:	e7ff      	b.n	14c7c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x28>
   14c7c:	9802      	ldr	r0, [sp, #8]
   14c7e:	9904      	ldr	r1, [sp, #16]
   14c80:	f001 faa1 	bl	161c6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
   14c84:	e7ff      	b.n	14c86 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x32>
        self.len += 1;
   14c86:	9805      	ldr	r0, [sp, #20]
   14c88:	6801      	ldr	r1, [r0, #0]
   14c8a:	1c4a      	adds	r2, r1, #1
   14c8c:	4613      	mov	r3, r2
   14c8e:	428a      	cmp	r2, r1
   14c90:	9301      	str	r3, [sp, #4]
   14c92:	d305      	bcc.n	14ca0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x4c>
   14c94:	e7ff      	b.n	14c96 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x42>
   14c96:	9801      	ldr	r0, [sp, #4]
   14c98:	9905      	ldr	r1, [sp, #20]
   14c9a:	6008      	str	r0, [r1, #0]
    }
   14c9c:	b00a      	add	sp, #40	; 0x28
   14c9e:	bd80      	pop	{r7, pc}
        self.len += 1;
   14ca0:	f240 60a0 	movw	r0, #1696	; 0x6a0
   14ca4:	f2c0 0002 	movt	r0, #2
   14ca8:	f240 6284 	movw	r2, #1668	; 0x684
   14cac:	f2c0 0202 	movt	r2, #2
   14cb0:	211c      	movs	r1, #28
   14cb2:	f002 fe29 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14cb6:	defe      	udf	#254	; 0xfe

00014cb8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   14cb8:	b580      	push	{r7, lr}
   14cba:	b08a      	sub	sp, #40	; 0x28
   14cbc:	460a      	mov	r2, r1
   14cbe:	9006      	str	r0, [sp, #24]
   14cc0:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
   14cc4:	1d01      	adds	r1, r0, #4
   14cc6:	9108      	str	r1, [sp, #32]
   14cc8:	9109      	str	r1, [sp, #36]	; 0x24
   14cca:	9005      	str	r0, [sp, #20]
   14ccc:	9204      	str	r2, [sp, #16]
   14cce:	9103      	str	r1, [sp, #12]
   14cd0:	e7ff      	b.n	14cd2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x1a>
            .add(self.len)
   14cd2:	9805      	ldr	r0, [sp, #20]
   14cd4:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   14cd6:	9803      	ldr	r0, [sp, #12]
   14cd8:	f001 fa6a 	bl	161b0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   14cdc:	9002      	str	r0, [sp, #8]
   14cde:	e7ff      	b.n	14ce0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x28>
   14ce0:	9802      	ldr	r0, [sp, #8]
   14ce2:	9904      	ldr	r1, [sp, #16]
   14ce4:	f001 fa6f 	bl	161c6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
   14ce8:	e7ff      	b.n	14cea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x32>
        self.len += 1;
   14cea:	9805      	ldr	r0, [sp, #20]
   14cec:	6801      	ldr	r1, [r0, #0]
   14cee:	1c4a      	adds	r2, r1, #1
   14cf0:	4613      	mov	r3, r2
   14cf2:	428a      	cmp	r2, r1
   14cf4:	9301      	str	r3, [sp, #4]
   14cf6:	d305      	bcc.n	14d04 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x4c>
   14cf8:	e7ff      	b.n	14cfa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x42>
   14cfa:	9801      	ldr	r0, [sp, #4]
   14cfc:	9905      	ldr	r1, [sp, #20]
   14cfe:	6008      	str	r0, [r1, #0]
    }
   14d00:	b00a      	add	sp, #40	; 0x28
   14d02:	bd80      	pop	{r7, pc}
        self.len += 1;
   14d04:	f240 60a0 	movw	r0, #1696	; 0x6a0
   14d08:	f2c0 0002 	movt	r0, #2
   14d0c:	f240 6284 	movw	r2, #1668	; 0x684
   14d10:	f2c0 0202 	movt	r2, #2
   14d14:	211c      	movs	r1, #28
   14d16:	f002 fdf7 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14d1a:	defe      	udf	#254	; 0xfe

00014d1c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   14d1c:	b580      	push	{r7, lr}
   14d1e:	b094      	sub	sp, #80	; 0x50
   14d20:	900e      	str	r0, [sp, #56]	; 0x38
   14d22:	910f      	str	r1, [sp, #60]	; 0x3c
   14d24:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   14d26:	6803      	ldr	r3, [r0, #0]
   14d28:	9009      	str	r0, [sp, #36]	; 0x24
   14d2a:	4608      	mov	r0, r1
   14d2c:	9108      	str	r1, [sp, #32]
   14d2e:	4611      	mov	r1, r2
   14d30:	9207      	str	r2, [sp, #28]
   14d32:	9306      	str	r3, [sp, #24]
   14d34:	f001 f943 	bl	15fbe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   14d38:	9005      	str	r0, [sp, #20]
   14d3a:	e7ff      	b.n	14d3c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x20>
   14d3c:	9806      	ldr	r0, [sp, #24]
   14d3e:	9905      	ldr	r1, [sp, #20]
   14d40:	1842      	adds	r2, r0, r1
   14d42:	4613      	mov	r3, r2
   14d44:	4282      	cmp	r2, r0
   14d46:	9304      	str	r3, [sp, #16]
   14d48:	d33f      	bcc.n	14dca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xae>
   14d4a:	e7ff      	b.n	14d4c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x30>
   14d4c:	9809      	ldr	r0, [sp, #36]	; 0x24
   14d4e:	f000 f96a 	bl	15026 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>
   14d52:	9003      	str	r0, [sp, #12]
   14d54:	e7ff      	b.n	14d56 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x3a>
   14d56:	9804      	ldr	r0, [sp, #16]
   14d58:	9903      	ldr	r1, [sp, #12]
   14d5a:	4288      	cmp	r0, r1
   14d5c:	d807      	bhi.n	14d6e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x52>
   14d5e:	e7ff      	b.n	14d60 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x44>
            for elem in other {
   14d60:	9808      	ldr	r0, [sp, #32]
   14d62:	9907      	ldr	r1, [sp, #28]
   14d64:	f001 f99f 	bl	160a6 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
   14d68:	9002      	str	r0, [sp, #8]
   14d6a:	9101      	str	r1, [sp, #4]
   14d6c:	e003      	b.n	14d76 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x5a>
   14d6e:	2001      	movs	r0, #1
            Err(())
   14d70:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14d74:	e025      	b.n	14dc2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
   14d76:	9802      	ldr	r0, [sp, #8]
   14d78:	900b      	str	r0, [sp, #44]	; 0x2c
   14d7a:	9901      	ldr	r1, [sp, #4]
   14d7c:	910c      	str	r1, [sp, #48]	; 0x30
   14d7e:	e7ff      	b.n	14d80 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
   14d80:	a80b      	add	r0, sp, #44	; 0x2c
   14d82:	f001 f9b2 	bl	160ea <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
   14d86:	900d      	str	r0, [sp, #52]	; 0x34
   14d88:	e7ff      	b.n	14d8a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x6e>
   14d8a:	980d      	ldr	r0, [sp, #52]	; 0x34
   14d8c:	2800      	cmp	r0, #0
   14d8e:	4601      	mov	r1, r0
   14d90:	bf18      	it	ne
   14d92:	2101      	movne	r1, #1
   14d94:	2800      	cmp	r0, #0
   14d96:	d001      	beq.n	14d9c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x80>
   14d98:	e7ff      	b.n	14d9a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x7e>
   14d9a:	e004      	b.n	14da6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x8a>
   14d9c:	2000      	movs	r0, #0
            Ok(())
   14d9e:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14da2:	e00e      	b.n	14dc2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
   14da4:	defe      	udf	#254	; 0xfe
   14da6:	980d      	ldr	r0, [sp, #52]	; 0x34
   14da8:	9011      	str	r0, [sp, #68]	; 0x44
   14daa:	9012      	str	r0, [sp, #72]	; 0x48
   14dac:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   14dae:	f001 f856 	bl	15e5e <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
   14db2:	9000      	str	r0, [sp, #0]
   14db4:	e7ff      	b.n	14db6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x9a>
   14db6:	9809      	ldr	r0, [sp, #36]	; 0x24
   14db8:	9900      	ldr	r1, [sp, #0]
   14dba:	f7ff ff4b 	bl	14c54 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>
   14dbe:	e7ff      	b.n	14dc0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa4>
            for elem in other {
   14dc0:	e7de      	b.n	14d80 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
    }
   14dc2:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   14dc6:	b014      	add	sp, #80	; 0x50
   14dc8:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   14dca:	f240 60a0 	movw	r0, #1696	; 0x6a0
   14dce:	f2c0 0002 	movt	r0, #2
   14dd2:	f240 62bc 	movw	r2, #1724	; 0x6bc
   14dd6:	f2c0 0202 	movt	r2, #2
   14dda:	211c      	movs	r1, #28
   14ddc:	f002 fd94 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14de0:	defe      	udf	#254	; 0xfe

00014de2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   14de2:	b580      	push	{r7, lr}
   14de4:	b094      	sub	sp, #80	; 0x50
   14de6:	900e      	str	r0, [sp, #56]	; 0x38
   14de8:	910f      	str	r1, [sp, #60]	; 0x3c
   14dea:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   14dec:	6803      	ldr	r3, [r0, #0]
   14dee:	9009      	str	r0, [sp, #36]	; 0x24
   14df0:	4608      	mov	r0, r1
   14df2:	9108      	str	r1, [sp, #32]
   14df4:	4611      	mov	r1, r2
   14df6:	9207      	str	r2, [sp, #28]
   14df8:	9306      	str	r3, [sp, #24]
   14dfa:	f001 f8e0 	bl	15fbe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   14dfe:	9005      	str	r0, [sp, #20]
   14e00:	e7ff      	b.n	14e02 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x20>
   14e02:	9806      	ldr	r0, [sp, #24]
   14e04:	9905      	ldr	r1, [sp, #20]
   14e06:	1842      	adds	r2, r0, r1
   14e08:	4613      	mov	r3, r2
   14e0a:	4282      	cmp	r2, r0
   14e0c:	9304      	str	r3, [sp, #16]
   14e0e:	d33f      	bcc.n	14e90 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xae>
   14e10:	e7ff      	b.n	14e12 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x30>
   14e12:	9809      	ldr	r0, [sp, #36]	; 0x24
   14e14:	f000 f8fd 	bl	15012 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
   14e18:	9003      	str	r0, [sp, #12]
   14e1a:	e7ff      	b.n	14e1c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x3a>
   14e1c:	9804      	ldr	r0, [sp, #16]
   14e1e:	9903      	ldr	r1, [sp, #12]
   14e20:	4288      	cmp	r0, r1
   14e22:	d807      	bhi.n	14e34 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x52>
   14e24:	e7ff      	b.n	14e26 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x44>
            for elem in other {
   14e26:	9808      	ldr	r0, [sp, #32]
   14e28:	9907      	ldr	r1, [sp, #28]
   14e2a:	f001 f93c 	bl	160a6 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
   14e2e:	9002      	str	r0, [sp, #8]
   14e30:	9101      	str	r1, [sp, #4]
   14e32:	e003      	b.n	14e3c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x5a>
   14e34:	2001      	movs	r0, #1
            Err(())
   14e36:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14e3a:	e025      	b.n	14e88 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
   14e3c:	9802      	ldr	r0, [sp, #8]
   14e3e:	900b      	str	r0, [sp, #44]	; 0x2c
   14e40:	9901      	ldr	r1, [sp, #4]
   14e42:	910c      	str	r1, [sp, #48]	; 0x30
   14e44:	e7ff      	b.n	14e46 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
   14e46:	a80b      	add	r0, sp, #44	; 0x2c
   14e48:	f001 f94f 	bl	160ea <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
   14e4c:	900d      	str	r0, [sp, #52]	; 0x34
   14e4e:	e7ff      	b.n	14e50 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x6e>
   14e50:	980d      	ldr	r0, [sp, #52]	; 0x34
   14e52:	2800      	cmp	r0, #0
   14e54:	4601      	mov	r1, r0
   14e56:	bf18      	it	ne
   14e58:	2101      	movne	r1, #1
   14e5a:	2800      	cmp	r0, #0
   14e5c:	d001      	beq.n	14e62 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x80>
   14e5e:	e7ff      	b.n	14e60 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x7e>
   14e60:	e004      	b.n	14e6c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x8a>
   14e62:	2000      	movs	r0, #0
            Ok(())
   14e64:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14e68:	e00e      	b.n	14e88 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
   14e6a:	defe      	udf	#254	; 0xfe
   14e6c:	980d      	ldr	r0, [sp, #52]	; 0x34
   14e6e:	9011      	str	r0, [sp, #68]	; 0x44
   14e70:	9012      	str	r0, [sp, #72]	; 0x48
   14e72:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   14e74:	f000 fff3 	bl	15e5e <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
   14e78:	9000      	str	r0, [sp, #0]
   14e7a:	e7ff      	b.n	14e7c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x9a>
   14e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
   14e7e:	9900      	ldr	r1, [sp, #0]
   14e80:	f7ff ff1a 	bl	14cb8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
   14e84:	e7ff      	b.n	14e86 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa4>
            for elem in other {
   14e86:	e7de      	b.n	14e46 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
    }
   14e88:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   14e8c:	b014      	add	sp, #80	; 0x50
   14e8e:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   14e90:	f240 60a0 	movw	r0, #1696	; 0x6a0
   14e94:	f2c0 0002 	movt	r0, #2
   14e98:	f240 62bc 	movw	r2, #1724	; 0x6bc
   14e9c:	f2c0 0202 	movt	r2, #2
   14ea0:	211c      	movs	r1, #28
   14ea2:	f002 fd31 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14ea6:	defe      	udf	#254	; 0xfe

00014ea8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   14ea8:	b580      	push	{r7, lr}
   14eaa:	b088      	sub	sp, #32
   14eac:	460a      	mov	r2, r1
   14eae:	9006      	str	r0, [sp, #24]
   14eb0:	f8ad 101e 	strh.w	r1, [sp, #30]
        if self.len < self.capacity() {
   14eb4:	6801      	ldr	r1, [r0, #0]
   14eb6:	9004      	str	r0, [sp, #16]
   14eb8:	9203      	str	r2, [sp, #12]
   14eba:	9102      	str	r1, [sp, #8]
   14ebc:	f000 f8a9 	bl	15012 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
   14ec0:	9001      	str	r0, [sp, #4]
   14ec2:	e7ff      	b.n	14ec4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x1c>
   14ec4:	9802      	ldr	r0, [sp, #8]
   14ec6:	9901      	ldr	r1, [sp, #4]
   14ec8:	4288      	cmp	r0, r1
   14eca:	d307      	bcc.n	14edc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x34>
   14ecc:	e7ff      	b.n	14ece <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x26>
            Err(item)
   14ece:	9803      	ldr	r0, [sp, #12]
   14ed0:	f8ad 0016 	strh.w	r0, [sp, #22]
   14ed4:	2101      	movs	r1, #1
   14ed6:	f8ad 1014 	strh.w	r1, [sp, #20]
        if self.len < self.capacity() {
   14eda:	e008      	b.n	14eee <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
            unsafe { self.push_unchecked(item) }
   14edc:	9804      	ldr	r0, [sp, #16]
   14ede:	9903      	ldr	r1, [sp, #12]
   14ee0:	f7ff feea 	bl	14cb8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
   14ee4:	e7ff      	b.n	14ee6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x3e>
   14ee6:	2000      	movs	r0, #0
            Ok(())
   14ee8:	f8ad 0014 	strh.w	r0, [sp, #20]
        if self.len < self.capacity() {
   14eec:	e7ff      	b.n	14eee <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
    }
   14eee:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   14ef2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   14ef6:	b008      	add	sp, #32
   14ef8:	bd80      	pop	{r7, pc}

00014efa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>:
    pub(crate) fn clear(&mut self) {
   14efa:	b580      	push	{r7, lr}
   14efc:	b082      	sub	sp, #8
   14efe:	9001      	str	r0, [sp, #4]
   14f00:	2100      	movs	r1, #0
        self.truncate(0);
   14f02:	f000 f8d0 	bl	150a6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>
   14f06:	e7ff      	b.n	14f08 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE+0xe>
    }
   14f08:	b002      	add	sp, #8
   14f0a:	bd80      	pop	{r7, pc}

00014f0c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>:
    pub(crate) fn clear(&mut self) {
   14f0c:	b580      	push	{r7, lr}
   14f0e:	b082      	sub	sp, #8
   14f10:	9001      	str	r0, [sp, #4]
   14f12:	2100      	movs	r1, #0
        self.truncate(0);
   14f14:	f000 f891 	bl	1503a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>
   14f18:	e7ff      	b.n	14f1a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E+0xe>
    }
   14f1a:	b002      	add	sp, #8
   14f1c:	bd80      	pop	{r7, pc}

00014f1e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>:
    pub(crate) fn clone(&self) -> Self
   14f1e:	b580      	push	{r7, lr}
   14f20:	b0a0      	sub	sp, #128	; 0x80
   14f22:	911f      	str	r1, [sp, #124]	; 0x7c
   14f24:	aa05      	add	r2, sp, #20
        let mut new = Self::new();
   14f26:	9004      	str	r0, [sp, #16]
   14f28:	4610      	mov	r0, r2
   14f2a:	9103      	str	r1, [sp, #12]
   14f2c:	f7ff fe59 	bl	14be2 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
   14f30:	e7ff      	b.n	14f32 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
   14f32:	9803      	ldr	r0, [sp, #12]
   14f34:	f000 f843 	bl	14fbe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
   14f38:	9002      	str	r0, [sp, #8]
   14f3a:	9101      	str	r1, [sp, #4]
   14f3c:	e7ff      	b.n	14f3e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x20>
   14f3e:	a805      	add	r0, sp, #20
   14f40:	9902      	ldr	r1, [sp, #8]
   14f42:	9a01      	ldr	r2, [sp, #4]
   14f44:	f7ff ff4d 	bl	14de2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>
   14f48:	9000      	str	r0, [sp, #0]
   14f4a:	e7ff      	b.n	14f4c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x2e>
   14f4c:	9800      	ldr	r0, [sp, #0]
   14f4e:	f000 0001 	and.w	r0, r0, #1
   14f52:	f240 61cc 	movw	r1, #1740	; 0x6cc
   14f56:	f2c0 0102 	movt	r1, #2
   14f5a:	f000 f959 	bl	15210 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
   14f5e:	e7ff      	b.n	14f60 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x42>
   14f60:	a905      	add	r1, sp, #20
   14f62:	2268      	movs	r2, #104	; 0x68
        new
   14f64:	9804      	ldr	r0, [sp, #16]
   14f66:	f009 f8a3 	bl	1e0b0 <__aeabi_memcpy>
    }
   14f6a:	b020      	add	sp, #128	; 0x80
   14f6c:	bd80      	pop	{r7, pc}

00014f6e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>:
    pub(crate) fn clone(&self) -> Self
   14f6e:	b580      	push	{r7, lr}
   14f70:	b0ba      	sub	sp, #232	; 0xe8
   14f72:	9139      	str	r1, [sp, #228]	; 0xe4
   14f74:	aa06      	add	r2, sp, #24
        let mut new = Self::new();
   14f76:	9005      	str	r0, [sp, #20]
   14f78:	4610      	mov	r0, r2
   14f7a:	9104      	str	r1, [sp, #16]
   14f7c:	f7ff fe22 	bl	14bc4 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
   14f80:	e7ff      	b.n	14f82 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
   14f82:	9804      	ldr	r0, [sp, #16]
   14f84:	f000 f830 	bl	14fe8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
   14f88:	9003      	str	r0, [sp, #12]
   14f8a:	9102      	str	r1, [sp, #8]
   14f8c:	e7ff      	b.n	14f8e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x20>
   14f8e:	a806      	add	r0, sp, #24
   14f90:	9903      	ldr	r1, [sp, #12]
   14f92:	9a02      	ldr	r2, [sp, #8]
   14f94:	f7ff fec2 	bl	14d1c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
   14f98:	9001      	str	r0, [sp, #4]
   14f9a:	e7ff      	b.n	14f9c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x2e>
   14f9c:	9801      	ldr	r0, [sp, #4]
   14f9e:	f000 0001 	and.w	r0, r0, #1
   14fa2:	f240 61cc 	movw	r1, #1740	; 0x6cc
   14fa6:	f2c0 0102 	movt	r1, #2
   14faa:	f000 f931 	bl	15210 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
   14fae:	e7ff      	b.n	14fb0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x42>
   14fb0:	a906      	add	r1, sp, #24
   14fb2:	22cc      	movs	r2, #204	; 0xcc
        new
   14fb4:	9805      	ldr	r0, [sp, #20]
   14fb6:	f009 f87b 	bl	1e0b0 <__aeabi_memcpy>
    }
   14fba:	b03a      	add	sp, #232	; 0xe8
   14fbc:	bd80      	pop	{r7, pc}

00014fbe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   14fbe:	b580      	push	{r7, lr}
   14fc0:	b088      	sub	sp, #32
   14fc2:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   14fc4:	1d01      	adds	r1, r0, #4
   14fc6:	9106      	str	r1, [sp, #24]
   14fc8:	9107      	str	r1, [sp, #28]
   14fca:	9004      	str	r0, [sp, #16]
   14fcc:	9103      	str	r1, [sp, #12]
   14fce:	e7ff      	b.n	14fd0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x12>
   14fd0:	9804      	ldr	r0, [sp, #16]
   14fd2:	6801      	ldr	r1, [r0, #0]
   14fd4:	9803      	ldr	r0, [sp, #12]
   14fd6:	f000 ffc1 	bl	15f5c <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
   14fda:	9002      	str	r0, [sp, #8]
   14fdc:	9101      	str	r1, [sp, #4]
   14fde:	e7ff      	b.n	14fe0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x22>
    }
   14fe0:	9802      	ldr	r0, [sp, #8]
   14fe2:	9901      	ldr	r1, [sp, #4]
   14fe4:	b008      	add	sp, #32
   14fe6:	bd80      	pop	{r7, pc}

00014fe8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>:
    pub(crate) fn as_slice(&self) -> &[T] {
   14fe8:	b580      	push	{r7, lr}
   14fea:	b088      	sub	sp, #32
   14fec:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   14fee:	1d01      	adds	r1, r0, #4
   14ff0:	9106      	str	r1, [sp, #24]
   14ff2:	9107      	str	r1, [sp, #28]
   14ff4:	9004      	str	r0, [sp, #16]
   14ff6:	9103      	str	r1, [sp, #12]
   14ff8:	e7ff      	b.n	14ffa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x12>
   14ffa:	9804      	ldr	r0, [sp, #16]
   14ffc:	6801      	ldr	r1, [r0, #0]
   14ffe:	9803      	ldr	r0, [sp, #12]
   15000:	f000 ffac 	bl	15f5c <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
   15004:	9002      	str	r0, [sp, #8]
   15006:	9101      	str	r1, [sp, #4]
   15008:	e7ff      	b.n	1500a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x22>
    }
   1500a:	9802      	ldr	r0, [sp, #8]
   1500c:	9901      	ldr	r1, [sp, #4]
   1500e:	b008      	add	sp, #32
   15010:	bd80      	pop	{r7, pc}

00015012 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>:
    pub(crate) fn capacity(&self) -> usize {
   15012:	b580      	push	{r7, lr}
   15014:	b082      	sub	sp, #8
   15016:	9001      	str	r0, [sp, #4]
        N::to_usize()
   15018:	f000 fa26 	bl	15468 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
   1501c:	9000      	str	r0, [sp, #0]
   1501e:	e7ff      	b.n	15020 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E+0xe>
    }
   15020:	9800      	ldr	r0, [sp, #0]
   15022:	b002      	add	sp, #8
   15024:	bd80      	pop	{r7, pc}

00015026 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>:
    pub(crate) fn capacity(&self) -> usize {
   15026:	b580      	push	{r7, lr}
   15028:	b082      	sub	sp, #8
   1502a:	9001      	str	r0, [sp, #4]
        N::to_usize()
   1502c:	f000 fa34 	bl	15498 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>
   15030:	9000      	str	r0, [sp, #0]
   15032:	e7ff      	b.n	15034 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E+0xe>
    }
   15034:	9800      	ldr	r0, [sp, #0]
   15036:	b002      	add	sp, #8
   15038:	bd80      	pop	{r7, pc}

0001503a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>:
    pub(crate) fn truncate(&mut self, len: usize) {
   1503a:	b580      	push	{r7, lr}
   1503c:	b08a      	sub	sp, #40	; 0x28
   1503e:	9007      	str	r0, [sp, #28]
   15040:	9108      	str	r1, [sp, #32]
   15042:	9106      	str	r1, [sp, #24]
   15044:	9005      	str	r0, [sp, #20]
   15046:	e7ff      	b.n	15048 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
            while len < self.len {
   15048:	9805      	ldr	r0, [sp, #20]
   1504a:	6801      	ldr	r1, [r0, #0]
   1504c:	9a06      	ldr	r2, [sp, #24]
   1504e:	428a      	cmp	r2, r1
   15050:	d302      	bcc.n	15058 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1e>
   15052:	e7ff      	b.n	15054 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1a>
    }
   15054:	b00a      	add	sp, #40	; 0x28
   15056:	bd80      	pop	{r7, pc}
                self.len -= 1;
   15058:	9805      	ldr	r0, [sp, #20]
   1505a:	6801      	ldr	r1, [r0, #0]
   1505c:	1e4a      	subs	r2, r1, #1
   1505e:	2901      	cmp	r1, #1
   15060:	9204      	str	r2, [sp, #16]
   15062:	d314      	bcc.n	1508e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x54>
   15064:	e7ff      	b.n	15066 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x2c>
   15066:	9804      	ldr	r0, [sp, #16]
   15068:	9905      	ldr	r1, [sp, #20]
   1506a:	6008      	str	r0, [r1, #0]
                let len = self.len;
   1506c:	680a      	ldr	r2, [r1, #0]
   1506e:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   15070:	4608      	mov	r0, r1
   15072:	9203      	str	r2, [sp, #12]
   15074:	f7ff fdd9 	bl	14c2a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
   15078:	9002      	str	r0, [sp, #8]
   1507a:	9101      	str	r1, [sp, #4]
   1507c:	e7ff      	b.n	1507e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x44>
   1507e:	9802      	ldr	r0, [sp, #8]
   15080:	9901      	ldr	r1, [sp, #4]
   15082:	9a03      	ldr	r2, [sp, #12]
   15084:	f000 ff89 	bl	15f9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
   15088:	e7ff      	b.n	1508a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x50>
   1508a:	e7ff      	b.n	1508c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x52>
            while len < self.len {
   1508c:	e7dc      	b.n	15048 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
                self.len -= 1;
   1508e:	f240 6060 	movw	r0, #1632	; 0x660
   15092:	f2c0 0002 	movt	r0, #2
   15096:	f240 62dc 	movw	r2, #1756	; 0x6dc
   1509a:	f2c0 0202 	movt	r2, #2
   1509e:	2121      	movs	r1, #33	; 0x21
   150a0:	f002 fc32 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   150a4:	defe      	udf	#254	; 0xfe

000150a6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   150a6:	b580      	push	{r7, lr}
   150a8:	b08a      	sub	sp, #40	; 0x28
   150aa:	9007      	str	r0, [sp, #28]
   150ac:	9108      	str	r1, [sp, #32]
   150ae:	9106      	str	r1, [sp, #24]
   150b0:	9005      	str	r0, [sp, #20]
   150b2:	e7ff      	b.n	150b4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
            while len < self.len {
   150b4:	9805      	ldr	r0, [sp, #20]
   150b6:	6801      	ldr	r1, [r0, #0]
   150b8:	9a06      	ldr	r2, [sp, #24]
   150ba:	428a      	cmp	r2, r1
   150bc:	d302      	bcc.n	150c4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1e>
   150be:	e7ff      	b.n	150c0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1a>
    }
   150c0:	b00a      	add	sp, #40	; 0x28
   150c2:	bd80      	pop	{r7, pc}
                self.len -= 1;
   150c4:	9805      	ldr	r0, [sp, #20]
   150c6:	6801      	ldr	r1, [r0, #0]
   150c8:	1e4a      	subs	r2, r1, #1
   150ca:	2901      	cmp	r1, #1
   150cc:	9204      	str	r2, [sp, #16]
   150ce:	d314      	bcc.n	150fa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x54>
   150d0:	e7ff      	b.n	150d2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x2c>
   150d2:	9804      	ldr	r0, [sp, #16]
   150d4:	9905      	ldr	r1, [sp, #20]
   150d6:	6008      	str	r0, [r1, #0]
                let len = self.len;
   150d8:	680a      	ldr	r2, [r1, #0]
   150da:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   150dc:	4608      	mov	r0, r1
   150de:	9203      	str	r2, [sp, #12]
   150e0:	f7ff fd8e 	bl	14c00 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
   150e4:	9002      	str	r0, [sp, #8]
   150e6:	9101      	str	r1, [sp, #4]
   150e8:	e7ff      	b.n	150ea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x44>
   150ea:	9802      	ldr	r0, [sp, #8]
   150ec:	9901      	ldr	r1, [sp, #4]
   150ee:	9a03      	ldr	r2, [sp, #12]
   150f0:	f000 ff53 	bl	15f9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
   150f4:	e7ff      	b.n	150f6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x50>
   150f6:	e7ff      	b.n	150f8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x52>
            while len < self.len {
   150f8:	e7dc      	b.n	150b4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
                self.len -= 1;
   150fa:	f240 6060 	movw	r0, #1632	; 0x660
   150fe:	f2c0 0002 	movt	r0, #2
   15102:	f240 62dc 	movw	r2, #1756	; 0x6dc
   15106:	f2c0 0202 	movt	r2, #2
   1510a:	2121      	movs	r1, #33	; 0x21
   1510c:	f002 fbfc 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15110:	defe      	udf	#254	; 0xfe

00015112 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>:
   15112:	b082      	sub	sp, #8
   15114:	9001      	str	r0, [sp, #4]
   15116:	8800      	ldrh	r0, [r0, #0]
   15118:	2800      	cmp	r0, #0
   1511a:	d004      	beq.n	15126 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x14>
   1511c:	e7ff      	b.n	1511e <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0xc>
   1511e:	2000      	movs	r0, #0
   15120:	f88d 0003 	strb.w	r0, [sp, #3]
   15124:	e003      	b.n	1512e <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   15126:	2001      	movs	r0, #1
   15128:	f88d 0003 	strb.w	r0, [sp, #3]
   1512c:	e7ff      	b.n	1512e <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   1512e:	f89d 0003 	ldrb.w	r0, [sp, #3]
   15132:	b002      	add	sp, #8
   15134:	4770      	bx	lr

00015136 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>:
   15136:	b082      	sub	sp, #8
   15138:	9001      	str	r0, [sp, #4]
   1513a:	7800      	ldrb	r0, [r0, #0]
   1513c:	07c0      	lsls	r0, r0, #31
   1513e:	2800      	cmp	r0, #0
   15140:	d004      	beq.n	1514c <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x16>
   15142:	e7ff      	b.n	15144 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0xe>
   15144:	2000      	movs	r0, #0
   15146:	f88d 0003 	strb.w	r0, [sp, #3]
   1514a:	e003      	b.n	15154 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   1514c:	2001      	movs	r0, #1
   1514e:	f88d 0003 	strb.w	r0, [sp, #3]
   15152:	e7ff      	b.n	15154 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   15154:	f89d 0003 	ldrb.w	r0, [sp, #3]
   15158:	b002      	add	sp, #8
   1515a:	4770      	bx	lr

0001515c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>:
   1515c:	b510      	push	{r4, lr}
   1515e:	b08a      	sub	sp, #40	; 0x28
   15160:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   15164:	468e      	mov	lr, r1
   15166:	4604      	mov	r4, r0
   15168:	f8ad 0014 	strh.w	r0, [sp, #20]
   1516c:	f8ad 1016 	strh.w	r1, [sp, #22]
   15170:	9207      	str	r2, [sp, #28]
   15172:	9308      	str	r3, [sp, #32]
   15174:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   15178:	4601      	mov	r1, r0
   1517a:	2800      	cmp	r0, #0
   1517c:	9304      	str	r3, [sp, #16]
   1517e:	9203      	str	r2, [sp, #12]
   15180:	f8cd c008 	str.w	ip, [sp, #8]
   15184:	d013      	beq.n	151ae <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x52>
   15186:	e7ff      	b.n	15188 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x2c>
   15188:	f8bd 0016 	ldrh.w	r0, [sp, #22]
   1518c:	f8ad 001a 	strh.w	r0, [sp, #26]
   15190:	4668      	mov	r0, sp
   15192:	9902      	ldr	r1, [sp, #8]
   15194:	6001      	str	r1, [r0, #0]
   15196:	f240 63fc 	movw	r3, #1788	; 0x6fc
   1519a:	f2c0 0302 	movt	r3, #2
   1519e:	f10d 021a 	add.w	r2, sp, #26
   151a2:	9803      	ldr	r0, [sp, #12]
   151a4:	9904      	ldr	r1, [sp, #16]
   151a6:	f002 fb81 	bl	178ac <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   151aa:	defe      	udf	#254	; 0xfe
   151ac:	defe      	udf	#254	; 0xfe
   151ae:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   151b2:	2800      	cmp	r0, #0
   151b4:	d102      	bne.n	151bc <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x60>
   151b6:	e7ff      	b.n	151b8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>
   151b8:	b00a      	add	sp, #40	; 0x28
   151ba:	bd10      	pop	{r4, pc}
   151bc:	e7fc      	b.n	151b8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>

000151be <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>:
   151be:	b580      	push	{r7, lr}
   151c0:	b08a      	sub	sp, #40	; 0x28
   151c2:	4684      	mov	ip, r0
   151c4:	f88d 0017 	strb.w	r0, [sp, #23]
   151c8:	9107      	str	r1, [sp, #28]
   151ca:	9208      	str	r2, [sp, #32]
   151cc:	f89d 0017 	ldrb.w	r0, [sp, #23]
   151d0:	ea4f 7ec0 	mov.w	lr, r0, lsl #31
   151d4:	f1be 0f00 	cmp.w	lr, #0
   151d8:	9304      	str	r3, [sp, #16]
   151da:	9203      	str	r2, [sp, #12]
   151dc:	9102      	str	r1, [sp, #8]
   151de:	d00e      	beq.n	151fe <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x40>
   151e0:	e7ff      	b.n	151e2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x24>
   151e2:	4668      	mov	r0, sp
   151e4:	9904      	ldr	r1, [sp, #16]
   151e6:	6001      	str	r1, [r0, #0]
   151e8:	f240 63ec 	movw	r3, #1772	; 0x6ec
   151ec:	f2c0 0302 	movt	r3, #2
   151f0:	aa06      	add	r2, sp, #24
   151f2:	9802      	ldr	r0, [sp, #8]
   151f4:	9903      	ldr	r1, [sp, #12]
   151f6:	f002 fb59 	bl	178ac <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   151fa:	defe      	udf	#254	; 0xfe
   151fc:	defe      	udf	#254	; 0xfe
   151fe:	f89d 0017 	ldrb.w	r0, [sp, #23]
   15202:	07c0      	lsls	r0, r0, #31
   15204:	2800      	cmp	r0, #0
   15206:	d102      	bne.n	1520e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x50>
   15208:	e7ff      	b.n	1520a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>
   1520a:	b00a      	add	sp, #40	; 0x28
   1520c:	bd80      	pop	{r7, pc}
   1520e:	e7fc      	b.n	1520a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>

00015210 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>:
   15210:	b086      	sub	sp, #24
   15212:	4602      	mov	r2, r0
   15214:	f88d 000f 	strb.w	r0, [sp, #15]
   15218:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1521c:	07c3      	lsls	r3, r0, #31
   1521e:	2b00      	cmp	r3, #0
   15220:	9102      	str	r1, [sp, #8]
   15222:	d011      	beq.n	15248 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x38>
   15224:	e7ff      	b.n	15226 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x16>
   15226:	4668      	mov	r0, sp
   15228:	9902      	ldr	r1, [sp, #8]
   1522a:	6001      	str	r1, [r0, #0]
   1522c:	f240 700c 	movw	r0, #1804	; 0x70c
   15230:	f2c0 0002 	movt	r0, #2
   15234:	f240 63ec 	movw	r3, #1772	; 0x6ec
   15238:	f2c0 0302 	movt	r3, #2
   1523c:	212b      	movs	r1, #43	; 0x2b
   1523e:	aa04      	add	r2, sp, #16
   15240:	f002 fb34 	bl	178ac <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   15244:	defe      	udf	#254	; 0xfe
   15246:	defe      	udf	#254	; 0xfe
   15248:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1524c:	07c0      	lsls	r0, r0, #31
   1524e:	2800      	cmp	r0, #0
   15250:	d102      	bne.n	15258 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x48>
   15252:	e7ff      	b.n	15254 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>
   15254:	b006      	add	sp, #24
   15256:	4770      	bx	lr
   15258:	e7fc      	b.n	15254 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>

0001525a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>:
   1525a:	b580      	push	{r7, lr}
   1525c:	b088      	sub	sp, #32
   1525e:	9001      	str	r0, [sp, #4]
   15260:	2000      	movs	r0, #0
   15262:	f88d 0013 	strb.w	r0, [sp, #19]
   15266:	f88d 0011 	strb.w	r0, [sp, #17]
   1526a:	f88d 0012 	strb.w	r0, [sp, #18]
   1526e:	2001      	movs	r0, #1
   15270:	f88d 0012 	strb.w	r0, [sp, #18]
   15274:	f88d 0013 	strb.w	r0, [sp, #19]
   15278:	f88d 0011 	strb.w	r0, [sp, #17]
   1527c:	9801      	ldr	r0, [sp, #4]
   1527e:	1e41      	subs	r1, r0, #1
   15280:	bf18      	it	ne
   15282:	2101      	movne	r1, #1
   15284:	2801      	cmp	r0, #1
   15286:	d00d      	beq.n	152a4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x4a>
   15288:	e7ff      	b.n	1528a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x30>
   1528a:	2000      	movs	r0, #0
   1528c:	f88d 0013 	strb.w	r0, [sp, #19]
   15290:	9901      	ldr	r1, [sp, #4]
   15292:	9107      	str	r1, [sp, #28]
   15294:	f88d 0011 	strb.w	r0, [sp, #17]
   15298:	9103      	str	r1, [sp, #12]
   1529a:	9803      	ldr	r0, [sp, #12]
   1529c:	f7f4 faa6 	bl	97ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>
   152a0:	e006      	b.n	152b0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x56>
   152a2:	defe      	udf	#254	; 0xfe
   152a4:	2000      	movs	r0, #0
   152a6:	f88d 0012 	strb.w	r0, [sp, #18]
   152aa:	f88d 000b 	strb.w	r0, [sp, #11]
   152ae:	e003      	b.n	152b8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   152b0:	2001      	movs	r0, #1
   152b2:	f88d 000b 	strb.w	r0, [sp, #11]
   152b6:	e7ff      	b.n	152b8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   152b8:	f89d 0011 	ldrb.w	r0, [sp, #17]
   152bc:	07c0      	lsls	r0, r0, #31
   152be:	2800      	cmp	r0, #0
   152c0:	d104      	bne.n	152cc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x72>
   152c2:	e7ff      	b.n	152c4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   152c4:	9801      	ldr	r0, [sp, #4]
   152c6:	2801      	cmp	r0, #1
   152c8:	d008      	beq.n	152dc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x82>
   152ca:	e011      	b.n	152f0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x96>
   152cc:	2000      	movs	r0, #0
   152ce:	f88d 0011 	strb.w	r0, [sp, #17]
   152d2:	e7f7      	b.n	152c4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   152d4:	f89d 000b 	ldrb.w	r0, [sp, #11]
   152d8:	b008      	add	sp, #32
   152da:	bd80      	pop	{r7, pc}
   152dc:	f89d 0012 	ldrb.w	r0, [sp, #18]
   152e0:	07c0      	lsls	r0, r0, #31
   152e2:	2800      	cmp	r0, #0
   152e4:	d0f6      	beq.n	152d4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   152e6:	e7ff      	b.n	152e8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x8e>
   152e8:	2000      	movs	r0, #0
   152ea:	f88d 0012 	strb.w	r0, [sp, #18]
   152ee:	e7f1      	b.n	152d4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   152f0:	f89d 0013 	ldrb.w	r0, [sp, #19]
   152f4:	07c0      	lsls	r0, r0, #31
   152f6:	2800      	cmp	r0, #0
   152f8:	d0ec      	beq.n	152d4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   152fa:	e7ff      	b.n	152fc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0xa2>
   152fc:	2000      	movs	r0, #0
   152fe:	f88d 0013 	strb.w	r0, [sp, #19]
   15302:	e7e7      	b.n	152d4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>

00015304 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>:
   15304:	b580      	push	{r7, lr}
   15306:	b088      	sub	sp, #32
   15308:	9001      	str	r0, [sp, #4]
   1530a:	2000      	movs	r0, #0
   1530c:	f88d 0013 	strb.w	r0, [sp, #19]
   15310:	f88d 0011 	strb.w	r0, [sp, #17]
   15314:	f88d 0012 	strb.w	r0, [sp, #18]
   15318:	2001      	movs	r0, #1
   1531a:	f88d 0012 	strb.w	r0, [sp, #18]
   1531e:	f88d 0013 	strb.w	r0, [sp, #19]
   15322:	f88d 0011 	strb.w	r0, [sp, #17]
   15326:	9801      	ldr	r0, [sp, #4]
   15328:	1e41      	subs	r1, r0, #1
   1532a:	bf18      	it	ne
   1532c:	2101      	movne	r1, #1
   1532e:	2801      	cmp	r0, #1
   15330:	d00d      	beq.n	1534e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x4a>
   15332:	e7ff      	b.n	15334 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x30>
   15334:	2000      	movs	r0, #0
   15336:	f88d 0013 	strb.w	r0, [sp, #19]
   1533a:	9901      	ldr	r1, [sp, #4]
   1533c:	9107      	str	r1, [sp, #28]
   1533e:	f88d 0011 	strb.w	r0, [sp, #17]
   15342:	9103      	str	r1, [sp, #12]
   15344:	9803      	ldr	r0, [sp, #12]
   15346:	f7f4 fa47 	bl	97d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>
   1534a:	e006      	b.n	1535a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x56>
   1534c:	defe      	udf	#254	; 0xfe
   1534e:	2000      	movs	r0, #0
   15350:	f88d 0012 	strb.w	r0, [sp, #18]
   15354:	f88d 000b 	strb.w	r0, [sp, #11]
   15358:	e003      	b.n	15362 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   1535a:	2001      	movs	r0, #1
   1535c:	f88d 000b 	strb.w	r0, [sp, #11]
   15360:	e7ff      	b.n	15362 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   15362:	f89d 0011 	ldrb.w	r0, [sp, #17]
   15366:	07c0      	lsls	r0, r0, #31
   15368:	2800      	cmp	r0, #0
   1536a:	d104      	bne.n	15376 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x72>
   1536c:	e7ff      	b.n	1536e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   1536e:	9801      	ldr	r0, [sp, #4]
   15370:	2801      	cmp	r0, #1
   15372:	d008      	beq.n	15386 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x82>
   15374:	e011      	b.n	1539a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x96>
   15376:	2000      	movs	r0, #0
   15378:	f88d 0011 	strb.w	r0, [sp, #17]
   1537c:	e7f7      	b.n	1536e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   1537e:	f89d 000b 	ldrb.w	r0, [sp, #11]
   15382:	b008      	add	sp, #32
   15384:	bd80      	pop	{r7, pc}
   15386:	f89d 0012 	ldrb.w	r0, [sp, #18]
   1538a:	07c0      	lsls	r0, r0, #31
   1538c:	2800      	cmp	r0, #0
   1538e:	d0f6      	beq.n	1537e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   15390:	e7ff      	b.n	15392 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x8e>
   15392:	2000      	movs	r0, #0
   15394:	f88d 0012 	strb.w	r0, [sp, #18]
   15398:	e7f1      	b.n	1537e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   1539a:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1539e:	07c0      	lsls	r0, r0, #31
   153a0:	2800      	cmp	r0, #0
   153a2:	d0ec      	beq.n	1537e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   153a4:	e7ff      	b.n	153a6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0xa2>
   153a6:	2000      	movs	r0, #0
   153a8:	f88d 0013 	strb.w	r0, [sp, #19]
   153ac:	e7e7      	b.n	1537e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>

000153ae <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>:
   153ae:	b580      	push	{r7, lr}
   153b0:	b088      	sub	sp, #32
   153b2:	9001      	str	r0, [sp, #4]
   153b4:	2000      	movs	r0, #0
   153b6:	f88d 0013 	strb.w	r0, [sp, #19]
   153ba:	f88d 0011 	strb.w	r0, [sp, #17]
   153be:	f88d 0012 	strb.w	r0, [sp, #18]
   153c2:	2001      	movs	r0, #1
   153c4:	f88d 0012 	strb.w	r0, [sp, #18]
   153c8:	f88d 0013 	strb.w	r0, [sp, #19]
   153cc:	f88d 0011 	strb.w	r0, [sp, #17]
   153d0:	9801      	ldr	r0, [sp, #4]
   153d2:	1e41      	subs	r1, r0, #1
   153d4:	bf18      	it	ne
   153d6:	2101      	movne	r1, #1
   153d8:	2801      	cmp	r0, #1
   153da:	d00d      	beq.n	153f8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x4a>
   153dc:	e7ff      	b.n	153de <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x30>
   153de:	2000      	movs	r0, #0
   153e0:	f88d 0013 	strb.w	r0, [sp, #19]
   153e4:	9901      	ldr	r1, [sp, #4]
   153e6:	9107      	str	r1, [sp, #28]
   153e8:	f88d 0011 	strb.w	r0, [sp, #17]
   153ec:	9103      	str	r1, [sp, #12]
   153ee:	9803      	ldr	r0, [sp, #12]
   153f0:	f7f4 f9f7 	bl	97e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>
   153f4:	e006      	b.n	15404 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x56>
   153f6:	defe      	udf	#254	; 0xfe
   153f8:	2000      	movs	r0, #0
   153fa:	f88d 0012 	strb.w	r0, [sp, #18]
   153fe:	f88d 000b 	strb.w	r0, [sp, #11]
   15402:	e003      	b.n	1540c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   15404:	2001      	movs	r0, #1
   15406:	f88d 000b 	strb.w	r0, [sp, #11]
   1540a:	e7ff      	b.n	1540c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   1540c:	f89d 0011 	ldrb.w	r0, [sp, #17]
   15410:	07c0      	lsls	r0, r0, #31
   15412:	2800      	cmp	r0, #0
   15414:	d104      	bne.n	15420 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x72>
   15416:	e7ff      	b.n	15418 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   15418:	9801      	ldr	r0, [sp, #4]
   1541a:	2801      	cmp	r0, #1
   1541c:	d008      	beq.n	15430 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x82>
   1541e:	e011      	b.n	15444 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x96>
   15420:	2000      	movs	r0, #0
   15422:	f88d 0011 	strb.w	r0, [sp, #17]
   15426:	e7f7      	b.n	15418 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   15428:	f89d 000b 	ldrb.w	r0, [sp, #11]
   1542c:	b008      	add	sp, #32
   1542e:	bd80      	pop	{r7, pc}
   15430:	f89d 0012 	ldrb.w	r0, [sp, #18]
   15434:	07c0      	lsls	r0, r0, #31
   15436:	2800      	cmp	r0, #0
   15438:	d0f6      	beq.n	15428 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   1543a:	e7ff      	b.n	1543c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x8e>
   1543c:	2000      	movs	r0, #0
   1543e:	f88d 0012 	strb.w	r0, [sp, #18]
   15442:	e7f1      	b.n	15428 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   15444:	f89d 0013 	ldrb.w	r0, [sp, #19]
   15448:	07c0      	lsls	r0, r0, #31
   1544a:	2800      	cmp	r0, #0
   1544c:	d0ec      	beq.n	15428 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   1544e:	e7ff      	b.n	15450 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0xa2>
   15450:	2000      	movs	r0, #0
   15452:	f88d 0013 	strb.w	r0, [sp, #19]
   15456:	e7e7      	b.n	15428 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>

00015458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>:
   15458:	b082      	sub	sp, #8
   1545a:	2001      	movs	r0, #1
   1545c:	f88d 0003 	strb.w	r0, [sp, #3]
   15460:	f89d 0003 	ldrb.w	r0, [sp, #3]
   15464:	b002      	add	sp, #8
   15466:	4770      	bx	lr

00015468 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>:
    #[inline]
    fn to_u128() -> u128 {
        u128::from(B::to_u8()) | U::to_u128() << 1
    }
    #[inline]
    fn to_usize() -> usize {
   15468:	b580      	push	{r7, lr}
   1546a:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1546c:	f001 ff6d 	bl	1734a <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   15470:	9003      	str	r0, [sp, #12]
   15472:	e7ff      	b.n	15474 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0xc>
   15474:	9803      	ldr	r0, [sp, #12]
   15476:	f001 ffce 	bl	17416 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   1547a:	9002      	str	r0, [sp, #8]
   1547c:	e7ff      	b.n	1547e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x16>
   1547e:	f000 f823 	bl	154c8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>
   15482:	9001      	str	r0, [sp, #4]
   15484:	e7ff      	b.n	15486 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x1e>
   15486:	9801      	ldr	r0, [sp, #4]
   15488:	0041      	lsls	r1, r0, #1
   1548a:	9100      	str	r1, [sp, #0]
   1548c:	e7ff      	b.n	1548e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x26>
   1548e:	9802      	ldr	r0, [sp, #8]
   15490:	9900      	ldr	r1, [sp, #0]
   15492:	4308      	orrs	r0, r1
    }
   15494:	b004      	add	sp, #16
   15496:	bd80      	pop	{r7, pc}

00015498 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>:
    fn to_usize() -> usize {
   15498:	b580      	push	{r7, lr}
   1549a:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1549c:	f001 ff55 	bl	1734a <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   154a0:	9003      	str	r0, [sp, #12]
   154a2:	e7ff      	b.n	154a4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0xc>
   154a4:	9803      	ldr	r0, [sp, #12]
   154a6:	f001 ffb6 	bl	17416 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   154aa:	9002      	str	r0, [sp, #8]
   154ac:	e7ff      	b.n	154ae <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x16>
   154ae:	f7ff ffdb 	bl	15468 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
   154b2:	9001      	str	r0, [sp, #4]
   154b4:	e7ff      	b.n	154b6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x1e>
   154b6:	9801      	ldr	r0, [sp, #4]
   154b8:	0041      	lsls	r1, r0, #1
   154ba:	9100      	str	r1, [sp, #0]
   154bc:	e7ff      	b.n	154be <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x26>
   154be:	9802      	ldr	r0, [sp, #8]
   154c0:	9900      	ldr	r1, [sp, #0]
   154c2:	4308      	orrs	r0, r1
    }
   154c4:	b004      	add	sp, #16
   154c6:	bd80      	pop	{r7, pc}

000154c8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>:
    fn to_usize() -> usize {
   154c8:	b580      	push	{r7, lr}
   154ca:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   154cc:	f001 ff3f 	bl	1734e <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   154d0:	9003      	str	r0, [sp, #12]
   154d2:	e7ff      	b.n	154d4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0xc>
   154d4:	9803      	ldr	r0, [sp, #12]
   154d6:	f001 ff9e 	bl	17416 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   154da:	9002      	str	r0, [sp, #8]
   154dc:	e7ff      	b.n	154de <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x16>
   154de:	f000 f83b 	bl	15558 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>
   154e2:	9001      	str	r0, [sp, #4]
   154e4:	e7ff      	b.n	154e6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x1e>
   154e6:	9801      	ldr	r0, [sp, #4]
   154e8:	0041      	lsls	r1, r0, #1
   154ea:	9100      	str	r1, [sp, #0]
   154ec:	e7ff      	b.n	154ee <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x26>
   154ee:	9802      	ldr	r0, [sp, #8]
   154f0:	9900      	ldr	r1, [sp, #0]
   154f2:	4308      	orrs	r0, r1
    }
   154f4:	b004      	add	sp, #16
   154f6:	bd80      	pop	{r7, pc}

000154f8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>:
    fn to_usize() -> usize {
   154f8:	b580      	push	{r7, lr}
   154fa:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   154fc:	f001 ff25 	bl	1734a <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   15500:	9003      	str	r0, [sp, #12]
   15502:	e7ff      	b.n	15504 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0xc>
   15504:	9803      	ldr	r0, [sp, #12]
   15506:	f001 ff86 	bl	17416 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   1550a:	9002      	str	r0, [sp, #8]
   1550c:	e7ff      	b.n	1550e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x16>
   1550e:	f000 f80b 	bl	15528 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>
   15512:	9001      	str	r0, [sp, #4]
   15514:	e7ff      	b.n	15516 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x1e>
   15516:	9801      	ldr	r0, [sp, #4]
   15518:	0041      	lsls	r1, r0, #1
   1551a:	9100      	str	r1, [sp, #0]
   1551c:	e7ff      	b.n	1551e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x26>
   1551e:	9802      	ldr	r0, [sp, #8]
   15520:	9900      	ldr	r1, [sp, #0]
   15522:	4308      	orrs	r0, r1
    }
   15524:	b004      	add	sp, #16
   15526:	bd80      	pop	{r7, pc}

00015528 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>:
    fn to_usize() -> usize {
   15528:	b580      	push	{r7, lr}
   1552a:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1552c:	f001 ff0f 	bl	1734e <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   15530:	9003      	str	r0, [sp, #12]
   15532:	e7ff      	b.n	15534 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0xc>
   15534:	9803      	ldr	r0, [sp, #12]
   15536:	f001 ff6e 	bl	17416 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   1553a:	9002      	str	r0, [sp, #8]
   1553c:	e7ff      	b.n	1553e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x16>
   1553e:	f001 fe8c 	bl	1725a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   15542:	9001      	str	r0, [sp, #4]
   15544:	e7ff      	b.n	15546 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x1e>
   15546:	9801      	ldr	r0, [sp, #4]
   15548:	0041      	lsls	r1, r0, #1
   1554a:	9100      	str	r1, [sp, #0]
   1554c:	e7ff      	b.n	1554e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x26>
   1554e:	9802      	ldr	r0, [sp, #8]
   15550:	9900      	ldr	r1, [sp, #0]
   15552:	4308      	orrs	r0, r1
    }
   15554:	b004      	add	sp, #16
   15556:	bd80      	pop	{r7, pc}

00015558 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>:
    fn to_usize() -> usize {
   15558:	b580      	push	{r7, lr}
   1555a:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1555c:	f001 fef5 	bl	1734a <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   15560:	9003      	str	r0, [sp, #12]
   15562:	e7ff      	b.n	15564 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0xc>
   15564:	9803      	ldr	r0, [sp, #12]
   15566:	f001 ff56 	bl	17416 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   1556a:	9002      	str	r0, [sp, #8]
   1556c:	e7ff      	b.n	1556e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x16>
   1556e:	f7ff ffc3 	bl	154f8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>
   15572:	9001      	str	r0, [sp, #4]
   15574:	e7ff      	b.n	15576 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x1e>
   15576:	9801      	ldr	r0, [sp, #4]
   15578:	0041      	lsls	r1, r0, #1
   1557a:	9100      	str	r1, [sp, #0]
   1557c:	e7ff      	b.n	1557e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x26>
   1557e:	9802      	ldr	r0, [sp, #8]
   15580:	9900      	ldr	r1, [sp, #0]
   15582:	4308      	orrs	r0, r1
    }
   15584:	b004      	add	sp, #16
   15586:	bd80      	pop	{r7, pc}

00015588 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>:
pub fn draw_to_display<T>(item: T)
   15588:	b510      	push	{r4, lr}
   1558a:	b088      	sub	sp, #32
   1558c:	a901      	add	r1, sp, #4
        item
   1558e:	460a      	mov	r2, r1
   15590:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
   15594:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
   15598:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
   1559c:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    super::batch::draw_blocks(            //  Draw text or graphics the new faster way, as pixel blocks
   155a0:	f240 1048 	movw	r0, #328	; 0x148
   155a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   155a8:	f000 f819 	bl	155de <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>
   155ac:	9000      	str	r0, [sp, #0]
   155ae:	e7ff      	b.n	155b0 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x28>
   155b0:	9800      	ldr	r0, [sp, #0]
   155b2:	f000 0001 	and.w	r0, r0, #1
   155b6:	f240 7137 	movw	r1, #1847	; 0x737
   155ba:	f2c0 0102 	movt	r1, #2
   155be:	f240 7380 	movw	r3, #1920	; 0x780
   155c2:	f2c0 0302 	movt	r3, #2
   155c6:	2210      	movs	r2, #16
   155c8:	f7ff fdf9 	bl	151be <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   155cc:	e7ff      	b.n	155ce <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x46>
}
   155ce:	b008      	add	sp, #32
   155d0:	bd10      	pop	{r4, pc}

000155d2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>:
   155d2:	b580      	push	{r7, lr}
   155d4:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   155d8:	f008 fd6a 	bl	1e0b0 <__aeabi_memcpy>
   155dc:	bd80      	pop	{r7, pc}

000155de <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>:
    pub colors:   BlockColors,
}

/// Draw the pixels in the item as Pixel Blocks of contiguous Pixel Rows. The pixels are grouped by row then by block.
#[allow(dead_code)]
pub fn draw_blocks<SPI, DC, RST, T>(display: &mut ST7735<SPI, DC, RST>, item_pixels: T) -> Result<(),()>
   155de:	b5b0      	push	{r4, r5, r7, lr}
   155e0:	f5ad 6d48 	sub.w	sp, sp, #3200	; 0xc80
   155e4:	f8cd 0c6c 	str.w	r0, [sp, #3180]	; 0xc6c
   155e8:	aa19      	add	r2, sp, #100	; 0x64
    SPI: spi::Write<u8>,
    DC: OutputPin,
    RST: OutputPin,
    T: IntoIterator<Item = Pixel<Rgb565>>, {
    //  Get the pixels for the item to be rendered.
    let pixels = item_pixels.into_iter();
   155ea:	4613      	mov	r3, r2
   155ec:	e8b1 5010 	ldmia.w	r1!, {r4, ip, lr}
   155f0:	e8a3 5010 	stmia.w	r3!, {r4, ip, lr}
   155f4:	e891 5030 	ldmia.w	r1, {r4, r5, ip, lr}
   155f8:	e883 5030 	stmia.w	r3, {r4, r5, ip, lr}
   155fc:	a910      	add	r1, sp, #64	; 0x40
   155fe:	900e      	str	r0, [sp, #56]	; 0x38
   15600:	4608      	mov	r0, r1
   15602:	4611      	mov	r1, r2
   15604:	f000 fe01 	bl	1620a <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>
   15608:	e7ff      	b.n	1560a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x2c>
   1560a:	a810      	add	r0, sp, #64	; 0x40
   1560c:	a945      	add	r1, sp, #276	; 0x114
    //  Batch the pixels into Pixel Rows.
    let rows = to_rows(pixels);
   1560e:	460a      	mov	r2, r1
   15610:	e8b0 5018 	ldmia.w	r0!, {r3, r4, ip, lr}
   15614:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   15618:	e890 5038 	ldmia.w	r0, {r3, r4, r5, ip, lr}
   1561c:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   15620:	a820      	add	r0, sp, #128	; 0x80
   15622:	f000 f8b7 	bl	15794 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>
   15626:	e7ff      	b.n	15628 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x4a>
   15628:	a8a9      	add	r0, sp, #676	; 0x2a4
   1562a:	a920      	add	r1, sp, #128	; 0x80
   1562c:	2294      	movs	r2, #148	; 0x94
    //  Batch the Pixel Rows into Pixel Blocks.
    let blocks = to_blocks(rows);
   1562e:	900d      	str	r0, [sp, #52]	; 0x34
   15630:	f008 fd3e 	bl	1e0b0 <__aeabi_memcpy>
   15634:	a84e      	add	r0, sp, #312	; 0x138
   15636:	990d      	ldr	r1, [sp, #52]	; 0x34
   15638:	f000 f8db 	bl	157f2 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>
   1563c:	e7ff      	b.n	1563e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x60>
   1563e:	f20d 40a4 	addw	r0, sp, #1188	; 0x4a4
   15642:	a94e      	add	r1, sp, #312	; 0x138
   15644:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    //  For each Pixel Block...
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   15648:	900c      	str	r0, [sp, #48]	; 0x30
   1564a:	f008 fd31 	bl	1e0b0 <__aeabi_memcpy>
   1564e:	a8ce      	add	r0, sp, #824	; 0x338
   15650:	990c      	ldr	r1, [sp, #48]	; 0x30
   15652:	f7ff ffbe 	bl	155d2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>
   15656:	e7ff      	b.n	15658 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x7a>
   15658:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
   1565c:	a9ce      	add	r1, sp, #824	; 0x338
   1565e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   15662:	f008 fd25 	bl	1e0b0 <__aeabi_memcpy>
   15666:	e7ff      	b.n	15668 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8a>
   15668:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   1566c:	f50d 61c2 	add.w	r1, sp, #1552	; 0x610
   15670:	f000 fa2c 	bl	15acc <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>
   15674:	e7ff      	b.n	15676 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x98>
   15676:	f8dd 0850 	ldr.w	r0, [sp, #2128]	; 0x850
   1567a:	2800      	cmp	r0, #0
   1567c:	d001      	beq.n	15682 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa4>
   1567e:	e7ff      	b.n	15680 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa2>
   15680:	e005      	b.n	1568e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xb0>
   15682:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   15686:	f7f5 f88c 	bl	a7a2 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   1568a:	e01c      	b.n	156c6 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xe8>
   1568c:	defe      	udf	#254	; 0xfe
   1568e:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   15692:	1d01      	adds	r1, r0, #4
   15694:	f60d 1028 	addw	r0, sp, #2344	; 0x928
   15698:	22d4      	movs	r2, #212	; 0xd4
   1569a:	900b      	str	r0, [sp, #44]	; 0x2c
   1569c:	920a      	str	r2, [sp, #40]	; 0x28
   1569e:	f008 fd07 	bl	1e0b0 <__aeabi_memcpy>
   156a2:	f60d 10fc 	addw	r0, sp, #2556	; 0x9fc
   156a6:	9009      	str	r0, [sp, #36]	; 0x24
   156a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   156aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   156ac:	f008 fd00 	bl	1e0b0 <__aeabi_memcpy>
   156b0:	f20d 707c 	addw	r0, sp, #1916	; 0x77c
   156b4:	9909      	ldr	r1, [sp, #36]	; 0x24
   156b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   156b8:	f008 fcfa 	bl	1e0b0 <__aeabi_memcpy>
   156bc:	f8dd 0850 	ldr.w	r0, [sp, #2128]	; 0x850
   156c0:	2801      	cmp	r0, #1
   156c2:	d02c      	beq.n	1571e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x140>
   156c4:	e061      	b.n	1578a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x1ac>
   156c6:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
        //  Dump out the Pixel Blocks for the square in test_display()
        /* if x_left >= 60 && x_left <= 150 && x_right >= 60 && x_right <= 150 && y_top >= 60 && y_top <= 150 && y_bottom >= 60 && y_bottom <= 150 {
            console::print("pixel block ("); console::printint(x_left as i32); console::print(", "); console::printint(y_top as i32); ////
            console::print("), ("); console::printint(x_right as i32); console::print(", "); console::printint(y_bottom as i32); console::print(")\n"); ////    
        } */
    }
   156ca:	f7f5 f847 	bl	a75c <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   156ce:	e022      	b.n	15716 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x138>
        display.set_pixels(
   156d0:	f89d 0b9f 	ldrb.w	r0, [sp, #2975]	; 0xb9f
   156d4:	f7f3 fa4a 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   156d8:	f88d 0b9e 	strb.w	r0, [sp, #2974]	; 0xb9e
   156dc:	e7ff      	b.n	156de <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x100>
            colors) ? ;
   156de:	f89d 0b9e 	ldrb.w	r0, [sp, #2974]	; 0xb9e
   156e2:	07c1      	lsls	r1, r0, #31
   156e4:	2900      	cmp	r1, #0
   156e6:	d001      	beq.n	156ec <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x10e>
   156e8:	e7ff      	b.n	156ea <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x10c>
   156ea:	e001      	b.n	156f0 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x112>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   156ec:	e7bc      	b.n	15668 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8a>
        display.set_pixels(
   156ee:	defe      	udf	#254	; 0xfe
            colors) ? ;
   156f0:	f7fc fc21 	bl	11f36 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   156f4:	e004      	b.n	15700 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x122>
    Ok(())
}
   156f6:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
   156fa:	f50d 6d48 	add.w	sp, sp, #3200	; 0xc80
   156fe:	bdb0      	pop	{r4, r5, r7, pc}
            colors) ? ;
   15700:	f7ff feaa 	bl	15458 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   15704:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   15708:	e7ff      	b.n	1570a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x12c>
   1570a:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
    }
   1570e:	f7f5 f825 	bl	a75c <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   15712:	e7ff      	b.n	15714 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x136>
}
   15714:	e7ef      	b.n	156f6 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x118>
   15716:	2000      	movs	r0, #0
    Ok(())
   15718:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
}
   1571c:	e7eb      	b.n	156f6 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x118>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   1571e:	f8bd 0848 	ldrh.w	r0, [sp, #2120]	; 0x848
   15722:	f8ad 0c78 	strh.w	r0, [sp, #3192]	; 0xc78
   15726:	f8bd 184a 	ldrh.w	r1, [sp, #2122]	; 0x84a
   1572a:	f8ad 1c7a 	strh.w	r1, [sp, #3194]	; 0xc7a
   1572e:	f8bd 284c 	ldrh.w	r2, [sp, #2124]	; 0x84c
   15732:	f8ad 2c7c 	strh.w	r2, [sp, #3196]	; 0xc7c
   15736:	f8bd 384e 	ldrh.w	r3, [sp, #2126]	; 0x84e
   1573a:	f8ad 3c7e 	strh.w	r3, [sp, #3198]	; 0xc7e
   1573e:	f50d 6c2d 	add.w	ip, sp, #2768	; 0xad0
   15742:	f20d 7e7c 	addw	lr, sp, #1916	; 0x77c
   15746:	24cc      	movs	r4, #204	; 0xcc
   15748:	9008      	str	r0, [sp, #32]
   1574a:	4660      	mov	r0, ip
   1574c:	9107      	str	r1, [sp, #28]
   1574e:	4671      	mov	r1, lr
   15750:	9206      	str	r2, [sp, #24]
   15752:	4622      	mov	r2, r4
   15754:	9305      	str	r3, [sp, #20]
   15756:	f8cd c010 	str.w	ip, [sp, #16]
   1575a:	9403      	str	r4, [sp, #12]
   1575c:	f008 fca8 	bl	1e0b0 <__aeabi_memcpy>
   15760:	f50d 603a 	add.w	r0, sp, #2976	; 0xba0
            colors) ? ;
   15764:	9002      	str	r0, [sp, #8]
   15766:	9904      	ldr	r1, [sp, #16]
   15768:	9a03      	ldr	r2, [sp, #12]
   1576a:	f008 fca1 	bl	1e0b0 <__aeabi_memcpy>
        display.set_pixels(
   1576e:	4668      	mov	r0, sp
   15770:	9902      	ldr	r1, [sp, #8]
   15772:	6041      	str	r1, [r0, #4]
   15774:	9a05      	ldr	r2, [sp, #20]
   15776:	6002      	str	r2, [r0, #0]
   15778:	980e      	ldr	r0, [sp, #56]	; 0x38
   1577a:	9908      	ldr	r1, [sp, #32]
   1577c:	9a06      	ldr	r2, [sp, #24]
   1577e:	9b07      	ldr	r3, [sp, #28]
   15780:	f7f4 f839 	bl	97f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>
   15784:	f88d 0b9f 	strb.w	r0, [sp, #2975]	; 0xb9f
   15788:	e7a2      	b.n	156d0 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xf2>
   1578a:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   1578e:	f7f5 f808 	bl	a7a2 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   15792:	e7c4      	b.n	1571e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x140>

00015794 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>:

/// Batch the pixels into Pixel Rows, which are contiguous pixels on the same row.
/// P can be any Pixel Iterator (e.g. a rectangle).
fn to_rows<P>(pixels: P) -> RowIterator<P>
   15794:	b5b0      	push	{r4, r5, r7, lr}
   15796:	b0a4      	sub	sp, #144	; 0x90
   15798:	aa01      	add	r2, sp, #4
where
    P: Iterator<Item = Pixel<Rgb565>>, {
    RowIterator::<P> {
        pixels,
   1579a:	e8b1 5018 	ldmia.w	r1!, {r3, r4, ip, lr}
   1579e:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   157a2:	e891 5038 	ldmia.w	r1, {r3, r4, r5, ip, lr}
   157a6:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   157aa:	a90a      	add	r1, sp, #40	; 0x28
        x_left: 0,
        x_right: 0,
        y: 0,
        colors: RowColors::new(),
   157ac:	9000      	str	r0, [sp, #0]
   157ae:	4608      	mov	r0, r1
   157b0:	f7ff f948 	bl	14a44 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>
   157b4:	e7ff      	b.n	157b6 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E+0x22>
   157b6:	a801      	add	r0, sp, #4
    RowIterator::<P> {
   157b8:	9900      	ldr	r1, [sp, #0]
   157ba:	e8b0 500c 	ldmia.w	r0!, {r2, r3, ip, lr}
   157be:	e8a1 500c 	stmia.w	r1!, {r2, r3, ip, lr}
   157c2:	e890 501c 	ldmia.w	r0, {r2, r3, r4, ip, lr}
   157c6:	e881 501c 	stmia.w	r1, {r2, r3, r4, ip, lr}
   157ca:	2000      	movs	r0, #0
   157cc:	9900      	ldr	r1, [sp, #0]
   157ce:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
   157d2:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
   157d6:	f8a1 0090 	strh.w	r0, [r1, #144]	; 0x90
   157da:	f101 0024 	add.w	r0, r1, #36	; 0x24
   157de:	a90a      	add	r1, sp, #40	; 0x28
   157e0:	2268      	movs	r2, #104	; 0x68
   157e2:	f008 fc65 	bl	1e0b0 <__aeabi_memcpy>
   157e6:	2001      	movs	r0, #1
   157e8:	9900      	ldr	r1, [sp, #0]
   157ea:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
        first_pixel: true,
    }
}
   157ee:	b024      	add	sp, #144	; 0x90
   157f0:	bdb0      	pop	{r4, r5, r7, pc}

000157f2 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>:

/// Batch the Pixel Rows into Pixel Blocks, which are contiguous Pixel Rows with the same start and end column number
/// R can be any Pixel Row Iterator.
fn to_blocks<R>(rows: R) -> BlockIterator<R>
   157f2:	b580      	push	{r7, lr}
   157f4:	b0da      	sub	sp, #360	; 0x168
   157f6:	aa02      	add	r2, sp, #8
   157f8:	2394      	movs	r3, #148	; 0x94
where
    R: Iterator<Item = PixelRow>, {
    BlockIterator::<R> {
        rows,
   157fa:	9001      	str	r0, [sp, #4]
   157fc:	4610      	mov	r0, r2
   157fe:	461a      	mov	r2, r3
   15800:	f008 fc56 	bl	1e0b0 <__aeabi_memcpy>
   15804:	a827      	add	r0, sp, #156	; 0x9c
        x_left: 0,
        x_right: 0,
        y_top: 0,
        y_bottom: 0,
        colors: BlockColors::new(),
   15806:	f7ff f92c 	bl	14a62 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>
   1580a:	e7ff      	b.n	1580c <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E+0x1a>
   1580c:	a902      	add	r1, sp, #8
   1580e:	2294      	movs	r2, #148	; 0x94
    BlockIterator::<R> {
   15810:	9801      	ldr	r0, [sp, #4]
   15812:	f008 fc4d 	bl	1e0b0 <__aeabi_memcpy>
   15816:	2000      	movs	r0, #0
   15818:	9901      	ldr	r1, [sp, #4]
   1581a:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
   1581e:	f8a1 0162 	strh.w	r0, [r1, #354]	; 0x162
   15822:	f8a1 0164 	strh.w	r0, [r1, #356]	; 0x164
   15826:	f8a1 0166 	strh.w	r0, [r1, #358]	; 0x166
   1582a:	f101 0094 	add.w	r0, r1, #148	; 0x94
   1582e:	a927      	add	r1, sp, #156	; 0x9c
   15830:	22cc      	movs	r2, #204	; 0xcc
   15832:	f008 fc3d 	bl	1e0b0 <__aeabi_memcpy>
   15836:	2001      	movs	r0, #1
   15838:	9901      	ldr	r1, [sp, #4]
   1583a:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
        first_row: true,
    }
}    
   1583e:	b05a      	add	sp, #360	; 0x168
   15840:	bd80      	pop	{r7, pc}

00015842 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>:
impl<P: Iterator<Item = Pixel<Rgb565>>> Iterator for RowIterator<P> {
    /// This Iterator returns Pixel Rows
    type Item = PixelRow;

    /// Return the next Pixel Row of contiguous pixels on the same row
    fn next(&mut self) -> Option<Self::Item> {
   15842:	b580      	push	{r7, lr}
   15844:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
   15848:	91c1      	str	r1, [sp, #772]	; 0x304
        //  Loop over all pixels until we have composed a Pixel Row, or we have run out of pixels.
        loop {
   1584a:	9116      	str	r1, [sp, #88]	; 0x58
   1584c:	9015      	str	r0, [sp, #84]	; 0x54
   1584e:	e7ff      	b.n	15850 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   15850:	a817      	add	r0, sp, #92	; 0x5c
            //  Get the next pixel.
            let next_pixel = self.pixels.next();
   15852:	9916      	ldr	r1, [sp, #88]	; 0x58
   15854:	f000 fd34 	bl	162c0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>
   15858:	e7ff      	b.n	1585a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x18>
            match next_pixel {
                None => {  //  If no more pixels...
   1585a:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1585c:	2800      	cmp	r0, #0
   1585e:	d01c      	beq.n	1589a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x58>
   15860:	e7ff      	b.n	15862 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x20>
                    };
                    self.colors.clear();
                    self.first_pixel = true;
                    return Some(row);
                }
                Some(Pixel(coord, color)) => {  //  If there is a pixel...
   15862:	9818      	ldr	r0, [sp, #96]	; 0x60
   15864:	9919      	ldr	r1, [sp, #100]	; 0x64
   15866:	90c2      	str	r0, [sp, #776]	; 0x308
   15868:	91c3      	str	r1, [sp, #780]	; 0x30c
   1586a:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   1586e:	4613      	mov	r3, r2
   15870:	f8ad 2310 	strh.w	r2, [sp, #784]	; 0x310
                    let x = coord.0 as u16;
   15874:	f8ad 0312 	strh.w	r0, [sp, #786]	; 0x312
                    let y = coord.1 as u16;
   15878:	f8ad 1314 	strh.w	r1, [sp, #788]	; 0x314
                    let color = color.0;
   1587c:	f8ad 2316 	strh.w	r2, [sp, #790]	; 0x316
                    //  Save the first pixel as the row start and handle next pixel.
                    if self.first_pixel {
   15880:	9a16      	ldr	r2, [sp, #88]	; 0x58
   15882:	f892 c092 	ldrb.w	ip, [r2, #146]	; 0x92
   15886:	ea4f 7ccc 	mov.w	ip, ip, lsl #31
   1588a:	f1bc 0f00 	cmp.w	ip, #0
   1588e:	9014      	str	r0, [sp, #80]	; 0x50
   15890:	9113      	str	r1, [sp, #76]	; 0x4c
   15892:	9312      	str	r3, [sp, #72]	; 0x48
   15894:	d156      	bne.n	15944 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x102>
   15896:	e04a      	b.n	1592e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xec>
            match next_pixel {
   15898:	defe      	udf	#254	; 0xfe
                    if self.first_pixel {
   1589a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1589c:	f890 1092 	ldrb.w	r1, [r0, #146]	; 0x92
   158a0:	07c9      	lsls	r1, r1, #31
   158a2:	2900      	cmp	r1, #0
   158a4:	d111      	bne.n	158ca <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x88>
   158a6:	e7ff      	b.n	158a8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x66>
                        x_left: self.x_left,
   158a8:	9816      	ldr	r0, [sp, #88]	; 0x58
   158aa:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   158ae:	f8b0 208e 	ldrh.w	r2, [r0, #142]	; 0x8e
                        y: self.y,
   158b2:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
                        colors: self.colors.clone(),
   158b6:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   158ba:	a837      	add	r0, sp, #220	; 0xdc
   158bc:	9111      	str	r1, [sp, #68]	; 0x44
   158be:	4661      	mov	r1, ip
   158c0:	9210      	str	r2, [sp, #64]	; 0x40
   158c2:	930f      	str	r3, [sp, #60]	; 0x3c
   158c4:	f7ff f827 	bl	14916 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   158c8:	e006      	b.n	158d8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x96>
   158ca:	2000      	movs	r0, #0
                        return None;  //  No pixels to group
   158cc:	9915      	ldr	r1, [sp, #84]	; 0x54
   158ce:	6008      	str	r0, [r1, #0]
   158d0:	e7ff      	b.n	158d2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                        .expect("never");
                    return Some(row);
                }
            }
        }
    }
   158d2:	f50d 7d46 	add.w	sp, sp, #792	; 0x318
   158d6:	bd80      	pop	{r7, pc}
                    let row = PixelRow {
   158d8:	9811      	ldr	r0, [sp, #68]	; 0x44
   158da:	f8ad 00d4 	strh.w	r0, [sp, #212]	; 0xd4
   158de:	9910      	ldr	r1, [sp, #64]	; 0x40
   158e0:	f8ad 10d6 	strh.w	r1, [sp, #214]	; 0xd6
   158e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   158e6:	f8ad 20d8 	strh.w	r2, [sp, #216]	; 0xd8
   158ea:	a81b      	add	r0, sp, #108	; 0x6c
   158ec:	a937      	add	r1, sp, #220	; 0xdc
   158ee:	2268      	movs	r2, #104	; 0x68
   158f0:	f008 fbde 	bl	1e0b0 <__aeabi_memcpy>
                    self.colors.clear();
   158f4:	9816      	ldr	r0, [sp, #88]	; 0x58
   158f6:	3024      	adds	r0, #36	; 0x24
   158f8:	f7ff f8d2 	bl	14aa0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   158fc:	e7ff      	b.n	158fe <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xbc>
   158fe:	2001      	movs	r0, #1
                    self.first_pixel = true;
   15900:	9916      	ldr	r1, [sp, #88]	; 0x58
   15902:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
   15906:	aa51      	add	r2, sp, #324	; 0x144
   15908:	a91b      	add	r1, sp, #108	; 0x6c
   1590a:	2370      	movs	r3, #112	; 0x70
                    return Some(row);
   1590c:	900e      	str	r0, [sp, #56]	; 0x38
   1590e:	4610      	mov	r0, r2
   15910:	920d      	str	r2, [sp, #52]	; 0x34
   15912:	461a      	mov	r2, r3
   15914:	930c      	str	r3, [sp, #48]	; 0x30
   15916:	f008 fbcb 	bl	1e0b0 <__aeabi_memcpy>
   1591a:	9815      	ldr	r0, [sp, #84]	; 0x54
   1591c:	3004      	adds	r0, #4
   1591e:	990d      	ldr	r1, [sp, #52]	; 0x34
   15920:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15922:	f008 fbc5 	bl	1e0b0 <__aeabi_memcpy>
   15926:	980e      	ldr	r0, [sp, #56]	; 0x38
   15928:	9915      	ldr	r1, [sp, #84]	; 0x54
   1592a:	6008      	str	r0, [r1, #0]
   1592c:	e7d1      	b.n	158d2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   1592e:	9816      	ldr	r0, [sp, #88]	; 0x58
   15930:	f8b0 108e 	ldrh.w	r1, [r0, #142]	; 0x8e
   15934:	3101      	adds	r1, #1
   15936:	b28a      	uxth	r2, r1
   15938:	460b      	mov	r3, r1
   1593a:	428a      	cmp	r2, r1
   1593c:	930b      	str	r3, [sp, #44]	; 0x2c
   1593e:	f040 80b9 	bne.w	15ab4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x272>
   15942:	e040      	b.n	159c6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x184>
   15944:	2000      	movs	r0, #0
                        self.first_pixel = false;
   15946:	9916      	ldr	r1, [sp, #88]	; 0x58
   15948:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
                        self.x_left = x;
   1594c:	9814      	ldr	r0, [sp, #80]	; 0x50
   1594e:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
                        self.x_right = x;
   15952:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                        self.y = y;
   15956:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15958:	f8a1 2090 	strh.w	r2, [r1, #144]	; 0x90
                        self.colors.clear();
   1595c:	f101 0024 	add.w	r0, r1, #36	; 0x24
   15960:	f7ff f89e 	bl	14aa0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   15964:	e7ff      	b.n	15966 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x124>
                        self.colors.push(color)
   15966:	9816      	ldr	r0, [sp, #88]	; 0x58
   15968:	3024      	adds	r0, #36	; 0x24
   1596a:	9912      	ldr	r1, [sp, #72]	; 0x48
   1596c:	f7ff f888 	bl	14a80 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   15970:	900a      	str	r0, [sp, #40]	; 0x28
   15972:	9109      	str	r1, [sp, #36]	; 0x24
   15974:	e7ff      	b.n	15976 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x134>
   15976:	f240 70cc 	movw	r0, #1996	; 0x7cc
   1597a:	f2c0 0002 	movt	r0, #2
   1597e:	4669      	mov	r1, sp
   15980:	6008      	str	r0, [r1, #0]
   15982:	f240 7290 	movw	r2, #1936	; 0x790
   15986:	f2c0 0202 	movt	r2, #2
   1598a:	2305      	movs	r3, #5
   1598c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1598e:	9909      	ldr	r1, [sp, #36]	; 0x24
   15990:	f7ff fbe4 	bl	1515c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   15994:	e7ff      	b.n	15996 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x154>
                        continue;
   15996:	e7ff      	b.n	15998 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
   15998:	e75a      	b.n	15850 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   1599a:	2001      	movs	r0, #1
                    if x == self.x_right + 1 && y == self.y {
   1599c:	f88d 01b7 	strb.w	r0, [sp, #439]	; 0x1b7
   159a0:	e00b      	b.n	159ba <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   159a2:	2000      	movs	r0, #0
   159a4:	f88d 01b7 	strb.w	r0, [sp, #439]	; 0x1b7
   159a8:	e007      	b.n	159ba <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   159aa:	9816      	ldr	r0, [sp, #88]	; 0x58
   159ac:	f8b0 1090 	ldrh.w	r1, [r0, #144]	; 0x90
   159b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   159b2:	b293      	uxth	r3, r2
   159b4:	428b      	cmp	r3, r1
   159b6:	d0f0      	beq.n	1599a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x158>
   159b8:	e7f3      	b.n	159a2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
   159ba:	f89d 01b7 	ldrb.w	r0, [sp, #439]	; 0x1b7
   159be:	07c0      	lsls	r0, r0, #31
   159c0:	2800      	cmp	r0, #0
   159c2:	d107      	bne.n	159d4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x192>
   159c4:	e020      	b.n	15a08 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
   159c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   159c8:	b281      	uxth	r1, r0
   159ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
   159cc:	b293      	uxth	r3, r2
   159ce:	428b      	cmp	r3, r1
   159d0:	d0eb      	beq.n	159aa <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x168>
   159d2:	e7e6      	b.n	159a2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
                        if self.colors.push(color).is_ok() {
   159d4:	9816      	ldr	r0, [sp, #88]	; 0x58
   159d6:	3024      	adds	r0, #36	; 0x24
   159d8:	9912      	ldr	r1, [sp, #72]	; 0x48
   159da:	f7ff f851 	bl	14a80 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   159de:	f8ad 11ba 	strh.w	r1, [sp, #442]	; 0x1ba
   159e2:	f8ad 01b8 	strh.w	r0, [sp, #440]	; 0x1b8
   159e6:	e7ff      	b.n	159e8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1a6>
   159e8:	a86e      	add	r0, sp, #440	; 0x1b8
   159ea:	f7ff fb92 	bl	15112 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>
   159ee:	9008      	str	r0, [sp, #32]
   159f0:	e7ff      	b.n	159f2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1b0>
   159f2:	9808      	ldr	r0, [sp, #32]
   159f4:	07c1      	lsls	r1, r0, #31
   159f6:	2900      	cmp	r1, #0
   159f8:	d101      	bne.n	159fe <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1bc>
   159fa:	e7ff      	b.n	159fc <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1ba>
                    if x == self.x_right + 1 && y == self.y {
   159fc:	e004      	b.n	15a08 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
                            self.x_right = x;
   159fe:	9814      	ldr	r0, [sp, #80]	; 0x50
   15a00:	9916      	ldr	r1, [sp, #88]	; 0x58
   15a02:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                            continue;
   15a06:	e7c7      	b.n	15998 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
                        x_left: self.x_left,
   15a08:	9816      	ldr	r0, [sp, #88]	; 0x58
   15a0a:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   15a0e:	f8b0 208e 	ldrh.w	r2, [r0, #142]	; 0x8e
                        y: self.y,
   15a12:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
                        colors: self.colors.clone(),
   15a16:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   15a1a:	a88b      	add	r0, sp, #556	; 0x22c
   15a1c:	9107      	str	r1, [sp, #28]
   15a1e:	4661      	mov	r1, ip
   15a20:	9206      	str	r2, [sp, #24]
   15a22:	9305      	str	r3, [sp, #20]
   15a24:	f7fe ff77 	bl	14916 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   15a28:	e7ff      	b.n	15a2a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1e8>
                    let row = PixelRow {
   15a2a:	9807      	ldr	r0, [sp, #28]
   15a2c:	f8ad 0224 	strh.w	r0, [sp, #548]	; 0x224
   15a30:	9906      	ldr	r1, [sp, #24]
   15a32:	f8ad 1226 	strh.w	r1, [sp, #550]	; 0x226
   15a36:	9a05      	ldr	r2, [sp, #20]
   15a38:	f8ad 2228 	strh.w	r2, [sp, #552]	; 0x228
   15a3c:	a86f      	add	r0, sp, #444	; 0x1bc
   15a3e:	a98b      	add	r1, sp, #556	; 0x22c
   15a40:	2268      	movs	r2, #104	; 0x68
   15a42:	f008 fb35 	bl	1e0b0 <__aeabi_memcpy>
                    self.x_left = x;
   15a46:	9814      	ldr	r0, [sp, #80]	; 0x50
   15a48:	9916      	ldr	r1, [sp, #88]	; 0x58
   15a4a:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
                    self.x_right = x;
   15a4e:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                    self.y = y;
   15a52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15a54:	f8a1 2090 	strh.w	r2, [r1, #144]	; 0x90
                    self.colors.clear();
   15a58:	f101 0024 	add.w	r0, r1, #36	; 0x24
   15a5c:	f7ff f820 	bl	14aa0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   15a60:	e7ff      	b.n	15a62 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x220>
                    self.colors.push(color)
   15a62:	9816      	ldr	r0, [sp, #88]	; 0x58
   15a64:	3024      	adds	r0, #36	; 0x24
   15a66:	9912      	ldr	r1, [sp, #72]	; 0x48
   15a68:	f7ff f80a 	bl	14a80 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   15a6c:	9004      	str	r0, [sp, #16]
   15a6e:	9103      	str	r1, [sp, #12]
   15a70:	e7ff      	b.n	15a72 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x230>
   15a72:	f640 000c 	movw	r0, #2060	; 0x80c
   15a76:	f2c0 0002 	movt	r0, #2
   15a7a:	4669      	mov	r1, sp
   15a7c:	6008      	str	r0, [r1, #0]
   15a7e:	f240 7290 	movw	r2, #1936	; 0x790
   15a82:	f2c0 0202 	movt	r2, #2
   15a86:	2305      	movs	r3, #5
   15a88:	9804      	ldr	r0, [sp, #16]
   15a8a:	9903      	ldr	r1, [sp, #12]
   15a8c:	f7ff fb66 	bl	1515c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   15a90:	e7ff      	b.n	15a92 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x250>
   15a92:	a8a5      	add	r0, sp, #660	; 0x294
   15a94:	a96f      	add	r1, sp, #444	; 0x1bc
   15a96:	2270      	movs	r2, #112	; 0x70
                    return Some(row);
   15a98:	9002      	str	r0, [sp, #8]
   15a9a:	9201      	str	r2, [sp, #4]
   15a9c:	f008 fb08 	bl	1e0b0 <__aeabi_memcpy>
   15aa0:	9815      	ldr	r0, [sp, #84]	; 0x54
   15aa2:	3004      	adds	r0, #4
   15aa4:	9902      	ldr	r1, [sp, #8]
   15aa6:	9a01      	ldr	r2, [sp, #4]
   15aa8:	f008 fb02 	bl	1e0b0 <__aeabi_memcpy>
   15aac:	2001      	movs	r0, #1
   15aae:	9915      	ldr	r1, [sp, #84]	; 0x54
   15ab0:	6008      	str	r0, [r1, #0]
   15ab2:	e70e      	b.n	158d2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   15ab4:	f240 70f0 	movw	r0, #2032	; 0x7f0
   15ab8:	f2c0 0002 	movt	r0, #2
   15abc:	f240 72dc 	movw	r2, #2012	; 0x7dc
   15ac0:	f2c0 0202 	movt	r2, #2
   15ac4:	211c      	movs	r1, #28
   15ac6:	f001 ff1f 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15aca:	defe      	udf	#254	; 0xfe

00015acc <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>:
impl<R: Iterator<Item = PixelRow>> Iterator for BlockIterator<R> {
    /// This Iterator returns Pixel Blocks
    type Item = PixelBlock;

    /// Return the next Pixel Block of contiguous Pixel Rows with the same start and end column number
    fn next(&mut self) -> Option<Self::Item> {
   15acc:	b580      	push	{r7, lr}
   15ace:	f5ad 6dcb 	sub.w	sp, sp, #1624	; 0x658
   15ad2:	f8cd 164c 	str.w	r1, [sp, #1612]	; 0x64c
   15ad6:	2200      	movs	r2, #0
        //  Loop over all Pixel Rows until we have composed a Pixel Block, or we have run out of Pixel Rows.
        loop {
   15ad8:	f88d 264b 	strb.w	r2, [sp, #1611]	; 0x64b
   15adc:	911f      	str	r1, [sp, #124]	; 0x7c
   15ade:	901e      	str	r0, [sp, #120]	; 0x78
   15ae0:	e7ff      	b.n	15ae2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   15ae2:	2001      	movs	r0, #1
            //  Get the next Pixel Row.
            let next_row = self.rows.next();
   15ae4:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   15ae8:	a820      	add	r0, sp, #128	; 0x80
   15aea:	991f      	ldr	r1, [sp, #124]	; 0x7c
   15aec:	f7ff fea9 	bl	15842 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>
   15af0:	e7ff      	b.n	15af2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x26>
            match next_row {
                None => {  //  If no more Pixel Rows...
   15af2:	9820      	ldr	r0, [sp, #128]	; 0x80
   15af4:	2800      	cmp	r0, #0
   15af6:	d026      	beq.n	15b46 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x7a>
   15af8:	e7ff      	b.n	15afa <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e>
   15afa:	a820      	add	r0, sp, #128	; 0x80
                    };
                    self.colors.clear();
                    self.first_row = true;
                    return Some(row);
                }
                Some(PixelRow { x_left, x_right, y, colors, .. }) => {  //  If there is a Pixel Row...
   15afc:	1d01      	adds	r1, r0, #4
   15afe:	f8bd 00ec 	ldrh.w	r0, [sp, #236]	; 0xec
   15b02:	4602      	mov	r2, r0
   15b04:	f8ad 0652 	strh.w	r0, [sp, #1618]	; 0x652
   15b08:	f8bd 00ee 	ldrh.w	r0, [sp, #238]	; 0xee
   15b0c:	4603      	mov	r3, r0
   15b0e:	f8ad 0654 	strh.w	r0, [sp, #1620]	; 0x654
   15b12:	f8bd 00f0 	ldrh.w	r0, [sp, #240]	; 0xf0
   15b16:	4684      	mov	ip, r0
   15b18:	f8ad 0656 	strh.w	r0, [sp, #1622]	; 0x656
   15b1c:	2000      	movs	r0, #0
   15b1e:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   15b22:	a8da      	add	r0, sp, #872	; 0x368
   15b24:	f04f 0e68 	mov.w	lr, #104	; 0x68
   15b28:	921d      	str	r2, [sp, #116]	; 0x74
   15b2a:	4672      	mov	r2, lr
   15b2c:	931c      	str	r3, [sp, #112]	; 0x70
   15b2e:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
   15b32:	f008 fabd 	bl	1e0b0 <__aeabi_memcpy>
                    //  Save the first row as the block start and handle next block.
                    if self.first_row {
   15b36:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15b38:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   15b3c:	07c9      	lsls	r1, r1, #31
   15b3e:	2900      	cmp	r1, #0
   15b40:	d15a      	bne.n	15bf8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x12c>
   15b42:	e04e      	b.n	15be2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x116>
            match next_row {
   15b44:	defe      	udf	#254	; 0xfe
                    if self.first_row {
   15b46:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15b48:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   15b4c:	07c9      	lsls	r1, r1, #31
   15b4e:	2900      	cmp	r1, #0
   15b50:	d115      	bne.n	15b7e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xb2>
   15b52:	e7ff      	b.n	15b54 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x88>
                        x_left: self.x_left,
   15b54:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15b56:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
                        x_right: self.x_right,
   15b5a:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
                        y_top: self.y_top,
   15b5e:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
                        y_bottom: self.y_bottom,
   15b62:	f8b0 c166 	ldrh.w	ip, [r0, #358]	; 0x166
                        colors: self.colors.clone(),
   15b66:	f100 0e94 	add.w	lr, r0, #148	; 0x94
   15b6a:	a872      	add	r0, sp, #456	; 0x1c8
   15b6c:	911a      	str	r1, [sp, #104]	; 0x68
   15b6e:	4671      	mov	r1, lr
   15b70:	9219      	str	r2, [sp, #100]	; 0x64
   15b72:	9318      	str	r3, [sp, #96]	; 0x60
   15b74:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
   15b78:	f7fe fedd 	bl	14936 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   15b7c:	e003      	b.n	15b86 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xba>
   15b7e:	2000      	movs	r0, #0
                        return None;  //  No rows to group
   15b80:	991e      	ldr	r1, [sp, #120]	; 0x78
   15b82:	6008      	str	r0, [r1, #0]
   15b84:	e153      	b.n	15e2e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                    let row = PixelBlock {
   15b86:	981a      	ldr	r0, [sp, #104]	; 0x68
   15b88:	f8ad 01c0 	strh.w	r0, [sp, #448]	; 0x1c0
   15b8c:	9919      	ldr	r1, [sp, #100]	; 0x64
   15b8e:	f8ad 11c2 	strh.w	r1, [sp, #450]	; 0x1c2
   15b92:	9a18      	ldr	r2, [sp, #96]	; 0x60
   15b94:	f8ad 21c4 	strh.w	r2, [sp, #452]	; 0x1c4
   15b98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15b9a:	f8ad 31c6 	strh.w	r3, [sp, #454]	; 0x1c6
   15b9e:	a83d      	add	r0, sp, #244	; 0xf4
   15ba0:	a972      	add	r1, sp, #456	; 0x1c8
   15ba2:	22cc      	movs	r2, #204	; 0xcc
   15ba4:	f008 fa84 	bl	1e0b0 <__aeabi_memcpy>
                    self.colors.clear();
   15ba8:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15baa:	3094      	adds	r0, #148	; 0x94
   15bac:	f7fe ff80 	bl	14ab0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   15bb0:	e7ff      	b.n	15bb2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xe6>
   15bb2:	2001      	movs	r0, #1
                    self.first_row = true;
   15bb4:	991f      	ldr	r1, [sp, #124]	; 0x7c
   15bb6:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
   15bba:	aaa5      	add	r2, sp, #660	; 0x294
   15bbc:	a93d      	add	r1, sp, #244	; 0xf4
   15bbe:	23d4      	movs	r3, #212	; 0xd4
                    return Some(row);
   15bc0:	9016      	str	r0, [sp, #88]	; 0x58
   15bc2:	4610      	mov	r0, r2
   15bc4:	9215      	str	r2, [sp, #84]	; 0x54
   15bc6:	461a      	mov	r2, r3
   15bc8:	9314      	str	r3, [sp, #80]	; 0x50
   15bca:	f008 fa71 	bl	1e0b0 <__aeabi_memcpy>
   15bce:	981e      	ldr	r0, [sp, #120]	; 0x78
   15bd0:	3004      	adds	r0, #4
   15bd2:	9915      	ldr	r1, [sp, #84]	; 0x54
   15bd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   15bd6:	f008 fa6b 	bl	1e0b0 <__aeabi_memcpy>
   15bda:	9816      	ldr	r0, [sp, #88]	; 0x58
   15bdc:	991e      	ldr	r1, [sp, #120]	; 0x78
   15bde:	6008      	str	r0, [r1, #0]
   15be0:	e125      	b.n	15e2e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                        self.colors.extend_from_slice(&colors)
                            .expect("never");
                        continue;
                    }
                    //  If this row is adjacent to the previous row and same size, add to the block.
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   15be2:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15be4:	f8b0 1166 	ldrh.w	r1, [r0, #358]	; 0x166
   15be8:	3101      	adds	r1, #1
   15bea:	b28a      	uxth	r2, r1
   15bec:	460b      	mov	r3, r1
   15bee:	428a      	cmp	r2, r1
   15bf0:	9313      	str	r3, [sp, #76]	; 0x4c
   15bf2:	f040 8128 	bne.w	15e46 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x37a>
   15bf6:	e069      	b.n	15ccc <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x200>
   15bf8:	2000      	movs	r0, #0
                        self.first_row = false;
   15bfa:	991f      	ldr	r1, [sp, #124]	; 0x7c
   15bfc:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
                        self.x_left = x_left;
   15c00:	981d      	ldr	r0, [sp, #116]	; 0x74
   15c02:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
                        self.x_right = x_right;
   15c06:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   15c08:	f8a1 2162 	strh.w	r2, [r1, #354]	; 0x162
                        self.y_top = y;
   15c0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15c0e:	f8a1 3164 	strh.w	r3, [r1, #356]	; 0x164
                        self.y_bottom = y;
   15c12:	f8a1 3166 	strh.w	r3, [r1, #358]	; 0x166
                        self.colors.clear();
   15c16:	f101 0094 	add.w	r0, r1, #148	; 0x94
   15c1a:	f7fe ff49 	bl	14ab0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   15c1e:	e7ff      	b.n	15c20 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x154>
                        self.colors.extend_from_slice(&colors)
   15c20:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15c22:	f100 0194 	add.w	r1, r0, #148	; 0x94
   15c26:	a8da      	add	r0, sp, #872	; 0x368
   15c28:	9112      	str	r1, [sp, #72]	; 0x48
   15c2a:	f7fe feb4 	bl	14996 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   15c2e:	9011      	str	r0, [sp, #68]	; 0x44
   15c30:	9110      	str	r1, [sp, #64]	; 0x40
   15c32:	e7ff      	b.n	15c34 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x168>
   15c34:	9812      	ldr	r0, [sp, #72]	; 0x48
   15c36:	9911      	ldr	r1, [sp, #68]	; 0x44
   15c38:	9a10      	ldr	r2, [sp, #64]	; 0x40
   15c3a:	f7fe fef5 	bl	14a28 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   15c3e:	900f      	str	r0, [sp, #60]	; 0x3c
   15c40:	e7ff      	b.n	15c42 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x176>
   15c42:	980f      	ldr	r0, [sp, #60]	; 0x3c
   15c44:	f000 0001 	and.w	r0, r0, #1
   15c48:	f240 7190 	movw	r1, #1936	; 0x790
   15c4c:	f2c0 0102 	movt	r1, #2
   15c50:	f640 031c 	movw	r3, #2076	; 0x81c
   15c54:	f2c0 0302 	movt	r3, #2
   15c58:	2205      	movs	r2, #5
   15c5a:	f7ff fab0 	bl	151be <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   15c5e:	e7ff      	b.n	15c60 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x194>
                        continue;
   15c60:	e7ff      	b.n	15c62 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
   15c62:	a8da      	add	r0, sp, #872	; 0x368
                    self.colors.clear();
                    self.colors.extend_from_slice(&colors)
                        .expect("never");
                    return Some(row);
                }
            }
   15c64:	f7f4 fd95 	bl	a792 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   15c68:	e7ff      	b.n	15c6a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x19e>
        }
   15c6a:	9820      	ldr	r0, [sp, #128]	; 0x80
   15c6c:	2801      	cmp	r0, #1
   15c6e:	f000 80e2 	beq.w	15e36 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
   15c72:	e0e4      	b.n	15e3e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x372>
   15c74:	2001      	movs	r0, #1
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   15c76:	f88d 03d1 	strb.w	r0, [sp, #977]	; 0x3d1
   15c7a:	e00b      	b.n	15c94 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   15c7c:	2000      	movs	r0, #0
   15c7e:	f88d 03d1 	strb.w	r0, [sp, #977]	; 0x3d1
   15c82:	e007      	b.n	15c94 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   15c84:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15c86:	f8b0 1162 	ldrh.w	r1, [r0, #354]	; 0x162
   15c8a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   15c8c:	b293      	uxth	r3, r2
   15c8e:	428b      	cmp	r3, r1
   15c90:	d0f0      	beq.n	15c74 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1a8>
   15c92:	e7f3      	b.n	15c7c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   15c94:	f89d 03d1 	ldrb.w	r0, [sp, #977]	; 0x3d1
   15c98:	07c0      	lsls	r0, r0, #31
   15c9a:	2800      	cmp	r0, #0
   15c9c:	d11d      	bne.n	15cda <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x20e>
   15c9e:	e03f      	b.n	15d20 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
   15ca0:	2001      	movs	r0, #1
   15ca2:	f88d 03d2 	strb.w	r0, [sp, #978]	; 0x3d2
   15ca6:	e00b      	b.n	15cc0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   15ca8:	2000      	movs	r0, #0
   15caa:	f88d 03d2 	strb.w	r0, [sp, #978]	; 0x3d2
   15cae:	e007      	b.n	15cc0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   15cb0:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15cb2:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
   15cb6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   15cb8:	b293      	uxth	r3, r2
   15cba:	428b      	cmp	r3, r1
   15cbc:	d0f0      	beq.n	15ca0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1d4>
   15cbe:	e7f3      	b.n	15ca8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
   15cc0:	f89d 03d2 	ldrb.w	r0, [sp, #978]	; 0x3d2
   15cc4:	07c0      	lsls	r0, r0, #31
   15cc6:	2800      	cmp	r0, #0
   15cc8:	d1dc      	bne.n	15c84 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b8>
   15cca:	e7d7      	b.n	15c7c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   15ccc:	9813      	ldr	r0, [sp, #76]	; 0x4c
   15cce:	b281      	uxth	r1, r0
   15cd0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   15cd2:	b293      	uxth	r3, r2
   15cd4:	428b      	cmp	r3, r1
   15cd6:	d0eb      	beq.n	15cb0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1e4>
   15cd8:	e7e6      	b.n	15ca8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
                        if self.colors.extend_from_slice(&colors).is_ok() {
   15cda:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15cdc:	f100 0194 	add.w	r1, r0, #148	; 0x94
   15ce0:	a8da      	add	r0, sp, #872	; 0x368
   15ce2:	910e      	str	r1, [sp, #56]	; 0x38
   15ce4:	f7fe fe57 	bl	14996 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   15ce8:	900d      	str	r0, [sp, #52]	; 0x34
   15cea:	910c      	str	r1, [sp, #48]	; 0x30
   15cec:	e7ff      	b.n	15cee <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x222>
   15cee:	980e      	ldr	r0, [sp, #56]	; 0x38
   15cf0:	990d      	ldr	r1, [sp, #52]	; 0x34
   15cf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15cf4:	f7fe fe98 	bl	14a28 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   15cf8:	f88d 03d3 	strb.w	r0, [sp, #979]	; 0x3d3
   15cfc:	e7ff      	b.n	15cfe <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x232>
   15cfe:	f20d 30d3 	addw	r0, sp, #979	; 0x3d3
   15d02:	f7ff fa18 	bl	15136 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>
   15d06:	900b      	str	r0, [sp, #44]	; 0x2c
   15d08:	e7ff      	b.n	15d0a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x23e>
   15d0a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   15d0c:	07c1      	lsls	r1, r0, #31
   15d0e:	2900      	cmp	r1, #0
   15d10:	d101      	bne.n	15d16 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x24a>
   15d12:	e7ff      	b.n	15d14 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x248>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   15d14:	e004      	b.n	15d20 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
                            self.y_bottom = y;
   15d16:	981b      	ldr	r0, [sp, #108]	; 0x6c
   15d18:	991f      	ldr	r1, [sp, #124]	; 0x7c
   15d1a:	f8a1 0166 	strh.w	r0, [r1, #358]	; 0x166
                            continue;    
   15d1e:	e7a0      	b.n	15c62 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
                        x_left: self.x_left,
   15d20:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15d22:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
                        x_right: self.x_right,
   15d26:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
                        y_top: self.y_top,
   15d2a:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
                        y_bottom: self.y_bottom,
   15d2e:	f8b0 c166 	ldrh.w	ip, [r0, #358]	; 0x166
                        colors: self.colors.clone(),
   15d32:	f100 0e94 	add.w	lr, r0, #148	; 0x94
   15d36:	f50d 6095 	add.w	r0, sp, #1192	; 0x4a8
   15d3a:	910a      	str	r1, [sp, #40]	; 0x28
   15d3c:	4671      	mov	r1, lr
   15d3e:	9209      	str	r2, [sp, #36]	; 0x24
   15d40:	9308      	str	r3, [sp, #32]
   15d42:	f8cd c01c 	str.w	ip, [sp, #28]
   15d46:	f7fe fdf6 	bl	14936 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   15d4a:	e7ff      	b.n	15d4c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x280>
                    let row = PixelBlock {
   15d4c:	980a      	ldr	r0, [sp, #40]	; 0x28
   15d4e:	f8ad 04a0 	strh.w	r0, [sp, #1184]	; 0x4a0
   15d52:	9909      	ldr	r1, [sp, #36]	; 0x24
   15d54:	f8ad 14a2 	strh.w	r1, [sp, #1186]	; 0x4a2
   15d58:	9a08      	ldr	r2, [sp, #32]
   15d5a:	f8ad 24a4 	strh.w	r2, [sp, #1188]	; 0x4a4
   15d5e:	9b07      	ldr	r3, [sp, #28]
   15d60:	f8ad 34a6 	strh.w	r3, [sp, #1190]	; 0x4a6
   15d64:	a8f5      	add	r0, sp, #980	; 0x3d4
   15d66:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
   15d6a:	22cc      	movs	r2, #204	; 0xcc
   15d6c:	f008 f9a0 	bl	1e0b0 <__aeabi_memcpy>
                    self.x_left = x_left;
   15d70:	981d      	ldr	r0, [sp, #116]	; 0x74
   15d72:	991f      	ldr	r1, [sp, #124]	; 0x7c
   15d74:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
                    self.x_right = x_right;
   15d78:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   15d7a:	f8a1 2162 	strh.w	r2, [r1, #354]	; 0x162
                    self.y_top = y;
   15d7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15d80:	f8a1 3164 	strh.w	r3, [r1, #356]	; 0x164
                    self.y_bottom = y;
   15d84:	f8a1 3166 	strh.w	r3, [r1, #358]	; 0x166
                    self.colors.clear();
   15d88:	f101 0094 	add.w	r0, r1, #148	; 0x94
   15d8c:	f7fe fe90 	bl	14ab0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   15d90:	e7ff      	b.n	15d92 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2c6>
                    self.colors.extend_from_slice(&colors)
   15d92:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15d94:	f100 0194 	add.w	r1, r0, #148	; 0x94
   15d98:	a8da      	add	r0, sp, #872	; 0x368
   15d9a:	9106      	str	r1, [sp, #24]
   15d9c:	f7fe fdfb 	bl	14996 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   15da0:	9005      	str	r0, [sp, #20]
   15da2:	9104      	str	r1, [sp, #16]
   15da4:	e7ff      	b.n	15da6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2da>
   15da6:	9806      	ldr	r0, [sp, #24]
   15da8:	9905      	ldr	r1, [sp, #20]
   15daa:	9a04      	ldr	r2, [sp, #16]
   15dac:	f7fe fe3c 	bl	14a28 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   15db0:	9003      	str	r0, [sp, #12]
   15db2:	e7ff      	b.n	15db4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e8>
   15db4:	9803      	ldr	r0, [sp, #12]
   15db6:	f000 0001 	and.w	r0, r0, #1
   15dba:	f240 7190 	movw	r1, #1936	; 0x790
   15dbe:	f2c0 0102 	movt	r1, #2
   15dc2:	f640 033c 	movw	r3, #2108	; 0x83c
   15dc6:	f2c0 0302 	movt	r3, #2
   15dca:	2205      	movs	r2, #5
   15dcc:	f7ff f9f7 	bl	151be <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   15dd0:	e7ff      	b.n	15dd2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x306>
   15dd2:	f20d 5074 	addw	r0, sp, #1396	; 0x574
   15dd6:	a9f5      	add	r1, sp, #980	; 0x3d4
   15dd8:	22d4      	movs	r2, #212	; 0xd4
                    return Some(row);
   15dda:	9002      	str	r0, [sp, #8]
   15ddc:	9201      	str	r2, [sp, #4]
   15dde:	f008 f967 	bl	1e0b0 <__aeabi_memcpy>
   15de2:	981e      	ldr	r0, [sp, #120]	; 0x78
   15de4:	3004      	adds	r0, #4
   15de6:	9902      	ldr	r1, [sp, #8]
   15de8:	9a01      	ldr	r2, [sp, #4]
   15dea:	f008 f961 	bl	1e0b0 <__aeabi_memcpy>
   15dee:	2001      	movs	r0, #1
   15df0:	991e      	ldr	r1, [sp, #120]	; 0x78
   15df2:	6008      	str	r0, [r1, #0]
   15df4:	a8da      	add	r0, sp, #872	; 0x368
            }
   15df6:	f7f4 fccc 	bl	a792 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   15dfa:	e7ff      	b.n	15dfc <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x330>
                    return Some(row);
   15dfc:	e017      	b.n	15e2e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
   15dfe:	2000      	movs	r0, #0
        }
   15e00:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
    }
   15e04:	f50d 6dcb 	add.w	sp, sp, #1624	; 0x658
   15e08:	bd80      	pop	{r7, pc}
        }
   15e0a:	f89d 064b 	ldrb.w	r0, [sp, #1611]	; 0x64b
   15e0e:	07c0      	lsls	r0, r0, #31
   15e10:	2800      	cmp	r0, #0
   15e12:	d0f4      	beq.n	15dfe <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   15e14:	e7ff      	b.n	15e16 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x34a>
   15e16:	2000      	movs	r0, #0
   15e18:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   15e1c:	a820      	add	r0, sp, #128	; 0x80
   15e1e:	3004      	adds	r0, #4
   15e20:	f7f4 fcb7 	bl	a792 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   15e24:	e7eb      	b.n	15dfe <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   15e26:	a820      	add	r0, sp, #128	; 0x80
   15e28:	f7f4 fc78 	bl	a71c <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   15e2c:	e7e7      	b.n	15dfe <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   15e2e:	9820      	ldr	r0, [sp, #128]	; 0x80
   15e30:	2801      	cmp	r0, #1
   15e32:	d0ea      	beq.n	15e0a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x33e>
   15e34:	e7f7      	b.n	15e26 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x35a>
   15e36:	2000      	movs	r0, #0
   15e38:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
                        continue;
   15e3c:	e651      	b.n	15ae2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   15e3e:	a820      	add	r0, sp, #128	; 0x80
        }
   15e40:	f7f4 fc6c 	bl	a71c <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   15e44:	e7f7      	b.n	15e36 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   15e46:	f240 70f0 	movw	r0, #2032	; 0x7f0
   15e4a:	f2c0 0002 	movt	r0, #2
   15e4e:	f640 022c 	movw	r2, #2092	; 0x82c
   15e52:	f2c0 0202 	movt	r2, #2
   15e56:	211c      	movs	r1, #28
   15e58:	f001 fd56 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15e5c:	defe      	udf	#254	; 0xfe

00015e5e <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>:
   15e5e:	b081      	sub	sp, #4
   15e60:	9000      	str	r0, [sp, #0]
   15e62:	8800      	ldrh	r0, [r0, #0]
   15e64:	b001      	add	sp, #4
   15e66:	4770      	bx	lr

00015e68 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>:
   15e68:	b580      	push	{r7, lr}
   15e6a:	b08c      	sub	sp, #48	; 0x30
   15e6c:	9009      	str	r0, [sp, #36]	; 0x24
   15e6e:	910a      	str	r1, [sp, #40]	; 0x28
   15e70:	920b      	str	r2, [sp, #44]	; 0x2c
   15e72:	9006      	str	r0, [sp, #24]
   15e74:	4608      	mov	r0, r1
   15e76:	9105      	str	r1, [sp, #20]
   15e78:	4611      	mov	r1, r2
   15e7a:	9204      	str	r2, [sp, #16]
   15e7c:	f000 f89f 	bl	15fbe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15e80:	9003      	str	r0, [sp, #12]
   15e82:	e7ff      	b.n	15e84 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x1c>
   15e84:	9806      	ldr	r0, [sp, #24]
   15e86:	9007      	str	r0, [sp, #28]
   15e88:	9903      	ldr	r1, [sp, #12]
   15e8a:	9108      	str	r1, [sp, #32]
   15e8c:	9807      	ldr	r0, [sp, #28]
   15e8e:	9908      	ldr	r1, [sp, #32]
   15e90:	9a05      	ldr	r2, [sp, #20]
   15e92:	9b04      	ldr	r3, [sp, #16]
   15e94:	f000 f82d 	bl	15ef2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>
   15e98:	9002      	str	r0, [sp, #8]
   15e9a:	9101      	str	r1, [sp, #4]
   15e9c:	e7ff      	b.n	15e9e <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x36>
   15e9e:	9802      	ldr	r0, [sp, #8]
   15ea0:	9901      	ldr	r1, [sp, #4]
   15ea2:	b00c      	add	sp, #48	; 0x30
   15ea4:	bd80      	pop	{r7, pc}

00015ea6 <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>:
   15ea6:	b083      	sub	sp, #12
   15ea8:	9001      	str	r0, [sp, #4]
   15eaa:	9102      	str	r1, [sp, #8]
   15eac:	b003      	add	sp, #12
   15eae:	4770      	bx	lr

00015eb0 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>:
   15eb0:	b580      	push	{r7, lr}
   15eb2:	b08a      	sub	sp, #40	; 0x28
   15eb4:	9006      	str	r0, [sp, #24]
   15eb6:	9107      	str	r1, [sp, #28]
   15eb8:	9208      	str	r2, [sp, #32]
   15eba:	9309      	str	r3, [sp, #36]	; 0x24
   15ebc:	9005      	str	r0, [sp, #20]
   15ebe:	4610      	mov	r0, r2
   15ec0:	9104      	str	r1, [sp, #16]
   15ec2:	4619      	mov	r1, r3
   15ec4:	f000 f864 	bl	15f90 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   15ec8:	9003      	str	r0, [sp, #12]
   15eca:	e7ff      	b.n	15ecc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x1c>
   15ecc:	9803      	ldr	r0, [sp, #12]
   15ece:	9905      	ldr	r1, [sp, #20]
   15ed0:	f000 f96e 	bl	161b0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   15ed4:	9002      	str	r0, [sp, #8]
   15ed6:	e7ff      	b.n	15ed8 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x28>
   15ed8:	9804      	ldr	r0, [sp, #16]
   15eda:	9905      	ldr	r1, [sp, #20]
   15edc:	1a41      	subs	r1, r0, r1
   15ede:	9802      	ldr	r0, [sp, #8]
   15ee0:	f000 f849 	bl	15f76 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   15ee4:	9001      	str	r0, [sp, #4]
   15ee6:	9100      	str	r1, [sp, #0]
   15ee8:	e7ff      	b.n	15eea <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x3a>
   15eea:	9801      	ldr	r0, [sp, #4]
   15eec:	9900      	ldr	r1, [sp, #0]
   15eee:	b00a      	add	sp, #40	; 0x28
   15ef0:	bd80      	pop	{r7, pc}

00015ef2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>:
   15ef2:	b580      	push	{r7, lr}
   15ef4:	b08c      	sub	sp, #48	; 0x30
   15ef6:	9008      	str	r0, [sp, #32]
   15ef8:	9109      	str	r1, [sp, #36]	; 0x24
   15efa:	920a      	str	r2, [sp, #40]	; 0x28
   15efc:	930b      	str	r3, [sp, #44]	; 0x2c
   15efe:	4288      	cmp	r0, r1
   15f00:	9307      	str	r3, [sp, #28]
   15f02:	9206      	str	r2, [sp, #24]
   15f04:	9105      	str	r1, [sp, #20]
   15f06:	9004      	str	r0, [sp, #16]
   15f08:	d806      	bhi.n	15f18 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x26>
   15f0a:	e7ff      	b.n	15f0c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x1a>
   15f0c:	9806      	ldr	r0, [sp, #24]
   15f0e:	9907      	ldr	r1, [sp, #28]
   15f10:	f000 f855 	bl	15fbe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15f14:	9003      	str	r0, [sp, #12]
   15f16:	e004      	b.n	15f22 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x30>
   15f18:	9804      	ldr	r0, [sp, #16]
   15f1a:	9905      	ldr	r1, [sp, #20]
   15f1c:	f002 fc69 	bl	187f2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   15f20:	defe      	udf	#254	; 0xfe
   15f22:	9805      	ldr	r0, [sp, #20]
   15f24:	9903      	ldr	r1, [sp, #12]
   15f26:	4288      	cmp	r0, r1
   15f28:	d809      	bhi.n	15f3e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x4c>
   15f2a:	e7ff      	b.n	15f2c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x3a>
   15f2c:	9804      	ldr	r0, [sp, #16]
   15f2e:	9905      	ldr	r1, [sp, #20]
   15f30:	9a06      	ldr	r2, [sp, #24]
   15f32:	9b07      	ldr	r3, [sp, #28]
   15f34:	f7ff ffbc 	bl	15eb0 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>
   15f38:	9002      	str	r0, [sp, #8]
   15f3a:	9101      	str	r1, [sp, #4]
   15f3c:	e00a      	b.n	15f54 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x62>
   15f3e:	9806      	ldr	r0, [sp, #24]
   15f40:	9907      	ldr	r1, [sp, #28]
   15f42:	f000 f83c 	bl	15fbe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15f46:	9000      	str	r0, [sp, #0]
   15f48:	e7ff      	b.n	15f4a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x58>
   15f4a:	9805      	ldr	r0, [sp, #20]
   15f4c:	9900      	ldr	r1, [sp, #0]
   15f4e:	f002 fc2e 	bl	187ae <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   15f52:	defe      	udf	#254	; 0xfe
   15f54:	9802      	ldr	r0, [sp, #8]
   15f56:	9901      	ldr	r1, [sp, #4]
   15f58:	b00c      	add	sp, #48	; 0x30
   15f5a:	bd80      	pop	{r7, pc}

00015f5c <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>:
   15f5c:	b580      	push	{r7, lr}
   15f5e:	b084      	sub	sp, #16
   15f60:	9002      	str	r0, [sp, #8]
   15f62:	9103      	str	r1, [sp, #12]
   15f64:	f001 fa5e 	bl	17424 <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>
   15f68:	9001      	str	r0, [sp, #4]
   15f6a:	9100      	str	r1, [sp, #0]
   15f6c:	e7ff      	b.n	15f6e <_ZN4core5slice14from_raw_parts17h1425df913744b73aE+0x12>
   15f6e:	9801      	ldr	r0, [sp, #4]
   15f70:	9900      	ldr	r1, [sp, #0]
   15f72:	b004      	add	sp, #16
   15f74:	bd80      	pop	{r7, pc}

00015f76 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>:
   15f76:	b580      	push	{r7, lr}
   15f78:	b084      	sub	sp, #16
   15f7a:	9002      	str	r0, [sp, #8]
   15f7c:	9103      	str	r1, [sp, #12]
   15f7e:	f001 fa5e 	bl	1743e <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>
   15f82:	9001      	str	r0, [sp, #4]
   15f84:	9100      	str	r1, [sp, #0]
   15f86:	e7ff      	b.n	15f88 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E+0x12>
   15f88:	9801      	ldr	r0, [sp, #4]
   15f8a:	9900      	ldr	r1, [sp, #0]
   15f8c:	b004      	add	sp, #16
   15f8e:	bd80      	pop	{r7, pc}

00015f90 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>:
   15f90:	b082      	sub	sp, #8
   15f92:	9000      	str	r0, [sp, #0]
   15f94:	9101      	str	r1, [sp, #4]
   15f96:	b002      	add	sp, #8
   15f98:	4770      	bx	lr

00015f9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>:
   15f9a:	b580      	push	{r7, lr}
   15f9c:	b086      	sub	sp, #24
   15f9e:	9003      	str	r0, [sp, #12]
   15fa0:	9104      	str	r1, [sp, #16]
   15fa2:	9205      	str	r2, [sp, #20]
   15fa4:	9002      	str	r0, [sp, #8]
   15fa6:	4610      	mov	r0, r2
   15fa8:	9a02      	ldr	r2, [sp, #8]
   15faa:	9101      	str	r1, [sp, #4]
   15fac:	4611      	mov	r1, r2
   15fae:	9a01      	ldr	r2, [sp, #4]
   15fb0:	f000 f886 	bl	160c0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>
   15fb4:	9000      	str	r0, [sp, #0]
   15fb6:	e7ff      	b.n	15fb8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE+0x1e>
   15fb8:	9800      	ldr	r0, [sp, #0]
   15fba:	b006      	add	sp, #24
   15fbc:	bd80      	pop	{r7, pc}

00015fbe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>:
   15fbe:	b084      	sub	sp, #16
   15fc0:	9002      	str	r0, [sp, #8]
   15fc2:	9103      	str	r1, [sp, #12]
   15fc4:	9000      	str	r0, [sp, #0]
   15fc6:	9101      	str	r1, [sp, #4]
   15fc8:	9801      	ldr	r0, [sp, #4]
   15fca:	b004      	add	sp, #16
   15fcc:	4770      	bx	lr

00015fce <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>:
   15fce:	b580      	push	{r7, lr}
   15fd0:	b092      	sub	sp, #72	; 0x48
   15fd2:	900e      	str	r0, [sp, #56]	; 0x38
   15fd4:	910f      	str	r1, [sp, #60]	; 0x3c
   15fd6:	9009      	str	r0, [sp, #36]	; 0x24
   15fd8:	9108      	str	r1, [sp, #32]
   15fda:	f000 f83e 	bl	1605a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>
   15fde:	4601      	mov	r1, r0
   15fe0:	9010      	str	r0, [sp, #64]	; 0x40
   15fe2:	9107      	str	r1, [sp, #28]
   15fe4:	e7ff      	b.n	15fe6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x18>
   15fe6:	9807      	ldr	r0, [sp, #28]
   15fe8:	f001 f9d4 	bl	17394 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
   15fec:	e7ff      	b.n	15fee <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x20>
   15fee:	e7ff      	b.n	15ff0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x22>
   15ff0:	2002      	movs	r0, #2
   15ff2:	9011      	str	r0, [sp, #68]	; 0x44
   15ff4:	9811      	ldr	r0, [sp, #68]	; 0x44
   15ff6:	9006      	str	r0, [sp, #24]
   15ff8:	e7ff      	b.n	15ffa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x2c>
   15ffa:	9806      	ldr	r0, [sp, #24]
   15ffc:	2800      	cmp	r0, #0
   15ffe:	d006      	beq.n	1600e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x40>
   16000:	e7ff      	b.n	16002 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x34>
   16002:	9809      	ldr	r0, [sp, #36]	; 0x24
   16004:	9908      	ldr	r1, [sp, #32]
   16006:	f7ff ffda 	bl	15fbe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   1600a:	9005      	str	r0, [sp, #20]
   1600c:	e011      	b.n	16032 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x64>
   1600e:	9807      	ldr	r0, [sp, #28]
   16010:	9909      	ldr	r1, [sp, #36]	; 0x24
   16012:	9004      	str	r0, [sp, #16]
   16014:	4608      	mov	r0, r1
   16016:	9908      	ldr	r1, [sp, #32]
   16018:	f7ff ffd1 	bl	15fbe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   1601c:	9003      	str	r0, [sp, #12]
   1601e:	e7ff      	b.n	16020 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x52>
   16020:	9804      	ldr	r0, [sp, #16]
   16022:	9903      	ldr	r1, [sp, #12]
   16024:	f7fe faa4 	bl	14570 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>
   16028:	9002      	str	r0, [sp, #8]
   1602a:	e7ff      	b.n	1602c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x5e>
   1602c:	9802      	ldr	r0, [sp, #8]
   1602e:	900c      	str	r0, [sp, #48]	; 0x30
   16030:	e006      	b.n	16040 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
   16032:	9807      	ldr	r0, [sp, #28]
   16034:	9905      	ldr	r1, [sp, #20]
   16036:	f001 f98c 	bl	17352 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
   1603a:	900c      	str	r0, [sp, #48]	; 0x30
   1603c:	e7ff      	b.n	1603e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x70>
   1603e:	e7ff      	b.n	16040 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
   16040:	9807      	ldr	r0, [sp, #28]
   16042:	f000 fc93 	bl	1696c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
   16046:	9001      	str	r0, [sp, #4]
   16048:	e7ff      	b.n	1604a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x7c>
   1604a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1604c:	9901      	ldr	r1, [sp, #4]
   1604e:	910a      	str	r1, [sp, #40]	; 0x28
   16050:	900b      	str	r0, [sp, #44]	; 0x2c
   16052:	980a      	ldr	r0, [sp, #40]	; 0x28
   16054:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16056:	b012      	add	sp, #72	; 0x48
   16058:	bd80      	pop	{r7, pc}

0001605a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>:
   1605a:	b082      	sub	sp, #8
   1605c:	9000      	str	r0, [sp, #0]
   1605e:	9101      	str	r1, [sp, #4]
   16060:	b002      	add	sp, #8
   16062:	4770      	bx	lr

00016064 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>:
   16064:	b580      	push	{r7, lr}
   16066:	b086      	sub	sp, #24
   16068:	9003      	str	r0, [sp, #12]
   1606a:	9104      	str	r1, [sp, #16]
   1606c:	f7ff ff1b 	bl	15ea6 <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>
   16070:	9002      	str	r0, [sp, #8]
   16072:	9101      	str	r1, [sp, #4]
   16074:	e7ff      	b.n	16076 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E+0x12>
   16076:	9802      	ldr	r0, [sp, #8]
   16078:	9901      	ldr	r1, [sp, #4]
   1607a:	b006      	add	sp, #24
   1607c:	bd80      	pop	{r7, pc}

0001607e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>:
   1607e:	b580      	push	{r7, lr}
   16080:	b088      	sub	sp, #32
   16082:	9005      	str	r0, [sp, #20]
   16084:	9106      	str	r1, [sp, #24]
   16086:	9207      	str	r2, [sp, #28]
   16088:	9004      	str	r0, [sp, #16]
   1608a:	4610      	mov	r0, r2
   1608c:	9a04      	ldr	r2, [sp, #16]
   1608e:	9103      	str	r1, [sp, #12]
   16090:	4611      	mov	r1, r2
   16092:	9a03      	ldr	r2, [sp, #12]
   16094:	f7ff fee8 	bl	15e68 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>
   16098:	9002      	str	r0, [sp, #8]
   1609a:	9101      	str	r1, [sp, #4]
   1609c:	e7ff      	b.n	1609e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E+0x20>
   1609e:	9802      	ldr	r0, [sp, #8]
   160a0:	9901      	ldr	r1, [sp, #4]
   160a2:	b008      	add	sp, #32
   160a4:	bd80      	pop	{r7, pc}

000160a6 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>:
   160a6:	b580      	push	{r7, lr}
   160a8:	b084      	sub	sp, #16
   160aa:	9002      	str	r0, [sp, #8]
   160ac:	9103      	str	r1, [sp, #12]
   160ae:	f7ff ff8e 	bl	15fce <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>
   160b2:	9001      	str	r0, [sp, #4]
   160b4:	9100      	str	r1, [sp, #0]
   160b6:	e7ff      	b.n	160b8 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE+0x12>
   160b8:	9801      	ldr	r0, [sp, #4]
   160ba:	9900      	ldr	r1, [sp, #0]
   160bc:	b004      	add	sp, #16
   160be:	bd80      	pop	{r7, pc}

000160c0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>:
   160c0:	b580      	push	{r7, lr}
   160c2:	b086      	sub	sp, #24
   160c4:	9003      	str	r0, [sp, #12]
   160c6:	9104      	str	r1, [sp, #16]
   160c8:	9205      	str	r2, [sp, #20]
   160ca:	9002      	str	r0, [sp, #8]
   160cc:	4608      	mov	r0, r1
   160ce:	4611      	mov	r1, r2
   160d0:	f7ff ff5e 	bl	15f90 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   160d4:	9001      	str	r0, [sp, #4]
   160d6:	e7ff      	b.n	160d8 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x18>
   160d8:	9801      	ldr	r0, [sp, #4]
   160da:	9902      	ldr	r1, [sp, #8]
   160dc:	f000 f868 	bl	161b0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   160e0:	9000      	str	r0, [sp, #0]
   160e2:	e7ff      	b.n	160e4 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x24>
   160e4:	9800      	ldr	r0, [sp, #0]
   160e6:	b006      	add	sp, #24
   160e8:	bd80      	pop	{r7, pc}

000160ea <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>:
   160ea:	b580      	push	{r7, lr}
   160ec:	b08e      	sub	sp, #56	; 0x38
   160ee:	9007      	str	r0, [sp, #28]
   160f0:	6801      	ldr	r1, [r0, #0]
   160f2:	9005      	str	r0, [sp, #20]
   160f4:	4608      	mov	r0, r1
   160f6:	f000 fc3f 	bl	16978 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   160fa:	9004      	str	r0, [sp, #16]
   160fc:	e7ff      	b.n	160fe <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x14>
   160fe:	9804      	ldr	r0, [sp, #16]
   16100:	f000 f879 	bl	161f6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>
   16104:	e7ff      	b.n	16106 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1c>
   16106:	e7ff      	b.n	16108 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1e>
   16108:	2002      	movs	r0, #2
   1610a:	9008      	str	r0, [sp, #32]
   1610c:	9808      	ldr	r0, [sp, #32]
   1610e:	9003      	str	r0, [sp, #12]
   16110:	e7ff      	b.n	16112 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x28>
   16112:	9803      	ldr	r0, [sp, #12]
   16114:	2800      	cmp	r0, #0
   16116:	d007      	beq.n	16128 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
   16118:	e7ff      	b.n	1611a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x30>
   1611a:	9805      	ldr	r0, [sp, #20]
   1611c:	6840      	ldr	r0, [r0, #4]
   1611e:	f001 f939 	bl	17394 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
   16122:	e7ff      	b.n	16124 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3a>
   16124:	e7ff      	b.n	16126 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3c>
   16126:	e7ff      	b.n	16128 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
   16128:	9805      	ldr	r0, [sp, #20]
   1612a:	6800      	ldr	r0, [r0, #0]
   1612c:	f000 fc24 	bl	16978 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   16130:	9002      	str	r0, [sp, #8]
   16132:	e7ff      	b.n	16134 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x4a>
   16134:	9805      	ldr	r0, [sp, #20]
   16136:	6841      	ldr	r1, [r0, #4]
   16138:	9a02      	ldr	r2, [sp, #8]
   1613a:	428a      	cmp	r2, r1
   1613c:	d02f      	beq.n	1619e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xb4>
   1613e:	e7ff      	b.n	16140 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x56>
   16140:	9805      	ldr	r0, [sp, #20]
   16142:	900a      	str	r0, [sp, #40]	; 0x28
   16144:	2101      	movs	r1, #1
   16146:	910b      	str	r1, [sp, #44]	; 0x2c
   16148:	2102      	movs	r1, #2
   1614a:	910d      	str	r1, [sp, #52]	; 0x34
   1614c:	990d      	ldr	r1, [sp, #52]	; 0x34
   1614e:	2900      	cmp	r1, #0
   16150:	d015      	beq.n	1617e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x94>
   16152:	e7ff      	b.n	16154 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x6a>
   16154:	9805      	ldr	r0, [sp, #20]
   16156:	6800      	ldr	r0, [r0, #0]
   16158:	f000 fc0e 	bl	16978 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   1615c:	900c      	str	r0, [sp, #48]	; 0x30
   1615e:	9905      	ldr	r1, [sp, #20]
   16160:	680a      	ldr	r2, [r1, #0]
   16162:	9001      	str	r0, [sp, #4]
   16164:	4610      	mov	r0, r2
   16166:	f000 fc07 	bl	16978 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   1616a:	2101      	movs	r1, #1
   1616c:	f000 f837 	bl	161de <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
   16170:	f000 fbfc 	bl	1696c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
   16174:	9905      	ldr	r1, [sp, #20]
   16176:	6008      	str	r0, [r1, #0]
   16178:	9801      	ldr	r0, [sp, #4]
   1617a:	9009      	str	r0, [sp, #36]	; 0x24
   1617c:	e00c      	b.n	16198 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
   1617e:	9805      	ldr	r0, [sp, #20]
   16180:	6840      	ldr	r0, [r0, #4]
   16182:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16186:	f7fe f9fe 	bl	14586 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
   1618a:	9905      	ldr	r1, [sp, #20]
   1618c:	6048      	str	r0, [r1, #4]
   1618e:	6808      	ldr	r0, [r1, #0]
   16190:	f000 fbf2 	bl	16978 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   16194:	9009      	str	r0, [sp, #36]	; 0x24
   16196:	e7ff      	b.n	16198 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
   16198:	9809      	ldr	r0, [sp, #36]	; 0x24
   1619a:	9000      	str	r0, [sp, #0]
   1619c:	e002      	b.n	161a4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xba>
   1619e:	2000      	movs	r0, #0
   161a0:	9006      	str	r0, [sp, #24]
   161a2:	e002      	b.n	161aa <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
   161a4:	9800      	ldr	r0, [sp, #0]
   161a6:	9006      	str	r0, [sp, #24]
   161a8:	e7ff      	b.n	161aa <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
   161aa:	9806      	ldr	r0, [sp, #24]
   161ac:	b00e      	add	sp, #56	; 0x38
   161ae:	bd80      	pop	{r7, pc}

000161b0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>:
   161b0:	b580      	push	{r7, lr}
   161b2:	b084      	sub	sp, #16
   161b4:	9002      	str	r0, [sp, #8]
   161b6:	9103      	str	r1, [sp, #12]
   161b8:	f000 f811 	bl	161de <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
   161bc:	9001      	str	r0, [sp, #4]
   161be:	e7ff      	b.n	161c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E+0x10>
   161c0:	9801      	ldr	r0, [sp, #4]
   161c2:	b004      	add	sp, #16
   161c4:	bd80      	pop	{r7, pc}

000161c6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>:
   161c6:	b580      	push	{r7, lr}
   161c8:	b084      	sub	sp, #16
   161ca:	460a      	mov	r2, r1
   161cc:	9002      	str	r0, [sp, #8]
   161ce:	f8ad 100e 	strh.w	r1, [sp, #14]
   161d2:	9201      	str	r2, [sp, #4]
   161d4:	f001 f961 	bl	1749a <_ZN4core3ptr5write17h147d4643d861e927E>
   161d8:	e7ff      	b.n	161da <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E+0x14>
   161da:	b004      	add	sp, #16
   161dc:	bd80      	pop	{r7, pc}

000161de <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>:
   161de:	b084      	sub	sp, #16
   161e0:	9001      	str	r0, [sp, #4]
   161e2:	9102      	str	r1, [sp, #8]
   161e4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   161e8:	9003      	str	r0, [sp, #12]
   161ea:	9803      	ldr	r0, [sp, #12]
   161ec:	9000      	str	r0, [sp, #0]
   161ee:	e7ff      	b.n	161f0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE+0x12>
   161f0:	9800      	ldr	r0, [sp, #0]
   161f2:	b004      	add	sp, #16
   161f4:	4770      	bx	lr

000161f6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>:
   161f6:	b082      	sub	sp, #8
   161f8:	9001      	str	r0, [sp, #4]
   161fa:	9000      	str	r0, [sp, #0]
   161fc:	e7ff      	b.n	161fe <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE+0x8>
   161fe:	9800      	ldr	r0, [sp, #0]
   16200:	fab0 f180 	clz	r1, r0
   16204:	0948      	lsrs	r0, r1, #5
   16206:	b002      	add	sp, #8
   16208:	4770      	bx	lr

0001620a <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   1620a:	b580      	push	{r7, lr}
        (&self).into_iter()
   1620c:	f000 f814 	bl	16238 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>
   16210:	e7ff      	b.n	16212 <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E+0x8>
    }
   16212:	bd80      	pop	{r7, pc}

00016214 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>:
    fn fill(mut self, color: Option<C>) -> Self {
   16214:	b5b0      	push	{r4, r5, r7, lr}
   16216:	b081      	sub	sp, #4
   16218:	469c      	mov	ip, r3
   1621a:	4696      	mov	lr, r2
   1621c:	f8ad 2000 	strh.w	r2, [sp]
   16220:	f8ad 3002 	strh.w	r3, [sp, #2]
        self.style.fill_color = color;
   16224:	820a      	strh	r2, [r1, #16]
   16226:	824b      	strh	r3, [r1, #18]
        self
   16228:	c91c      	ldmia	r1!, {r2, r3, r4}
   1622a:	c01c      	stmia	r0!, {r2, r3, r4}
   1622c:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
   16230:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
    }
   16234:	b001      	add	sp, #4
   16236:	bdb0      	pop	{r4, r5, r7, pc}

00016238 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   16238:	b570      	push	{r4, r5, r6, lr}
   1623a:	b08e      	sub	sp, #56	; 0x38
   1623c:	910d      	str	r1, [sp, #52]	; 0x34
        RectangleIterator {
            top_left: self.top_left,
   1623e:	680a      	ldr	r2, [r1, #0]
   16240:	684b      	ldr	r3, [r1, #4]
            bottom_right: self.bottom_right,
   16242:	f8d1 c008 	ldr.w	ip, [r1, #8]
   16246:	f8d1 e00c 	ldr.w	lr, [r1, #12]
            style: self.style,
   1624a:	8b0c      	ldrh	r4, [r1, #24]
   1624c:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
   16250:	690c      	ldr	r4, [r1, #16]
   16252:	694d      	ldr	r5, [r1, #20]
   16254:	950b      	str	r5, [sp, #44]	; 0x2c
   16256:	940a      	str	r4, [sp, #40]	; 0x28
   16258:	2400      	movs	r4, #0
            x: self.top_left[0],
   1625a:	9009      	str	r0, [sp, #36]	; 0x24
   1625c:	4608      	mov	r0, r1
   1625e:	9108      	str	r1, [sp, #32]
   16260:	4621      	mov	r1, r4
   16262:	9207      	str	r2, [sp, #28]
   16264:	9306      	str	r3, [sp, #24]
   16266:	f8cd c014 	str.w	ip, [sp, #20]
   1626a:	f8cd e010 	str.w	lr, [sp, #16]
   1626e:	f7fb fb3c 	bl	118ea <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16272:	9003      	str	r0, [sp, #12]
   16274:	e7ff      	b.n	16276 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x3e>
   16276:	9803      	ldr	r0, [sp, #12]
   16278:	6801      	ldr	r1, [r0, #0]
   1627a:	2201      	movs	r2, #1
            y: self.top_left[1],
   1627c:	9808      	ldr	r0, [sp, #32]
   1627e:	9102      	str	r1, [sp, #8]
   16280:	4611      	mov	r1, r2
   16282:	f7fb fb32 	bl	118ea <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16286:	9001      	str	r0, [sp, #4]
   16288:	e7ff      	b.n	1628a <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x52>
   1628a:	9801      	ldr	r0, [sp, #4]
   1628c:	6801      	ldr	r1, [r0, #0]
        RectangleIterator {
   1628e:	9a07      	ldr	r2, [sp, #28]
   16290:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16292:	601a      	str	r2, [r3, #0]
   16294:	f8dd c018 	ldr.w	ip, [sp, #24]
   16298:	f8c3 c004 	str.w	ip, [r3, #4]
   1629c:	f8dd e014 	ldr.w	lr, [sp, #20]
   162a0:	f8c3 e008 	str.w	lr, [r3, #8]
   162a4:	9c04      	ldr	r4, [sp, #16]
   162a6:	60dc      	str	r4, [r3, #12]
   162a8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   162ac:	841d      	strh	r5, [r3, #32]
   162ae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   162b0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   162b2:	61de      	str	r6, [r3, #28]
   162b4:	619d      	str	r5, [r3, #24]
   162b6:	9d02      	ldr	r5, [sp, #8]
   162b8:	611d      	str	r5, [r3, #16]
   162ba:	6159      	str	r1, [r3, #20]
        }
    }
   162bc:	b00e      	add	sp, #56	; 0x38
   162be:	bd70      	pop	{r4, r5, r6, pc}

000162c0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>:
where
    C: PixelColor,
{
    type Item = Pixel<C>;

    fn next(&mut self) -> Option<Self::Item> {
   162c0:	b510      	push	{r4, lr}
   162c2:	b0d2      	sub	sp, #328	; 0x148
   162c4:	914f      	str	r1, [sp, #316]	; 0x13c
   162c6:	2200      	movs	r2, #0
        // If entire object is off the top left of the screen or has no border or fill colour,
        // don't render anything
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   162c8:	902a      	str	r0, [sp, #168]	; 0xa8
   162ca:	4608      	mov	r0, r1
   162cc:	9129      	str	r1, [sp, #164]	; 0xa4
   162ce:	4611      	mov	r1, r2
   162d0:	f7fb fb0b 	bl	118ea <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   162d4:	9028      	str	r0, [sp, #160]	; 0xa0
   162d6:	e03c      	b.n	16352 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x92>
   162d8:	2001      	movs	r0, #1
   162da:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   162de:	e009      	b.n	162f4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
   162e0:	2000      	movs	r0, #0
   162e2:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   162e6:	e005      	b.n	162f4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   162e8:	9829      	ldr	r0, [sp, #164]	; 0xa4
   162ea:	301c      	adds	r0, #28
   162ec:	f7fe fa86 	bl	147fc <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   162f0:	9027      	str	r0, [sp, #156]	; 0x9c
   162f2:	e06c      	b.n	163ce <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x10e>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   162f4:	f89d 00af 	ldrb.w	r0, [sp, #175]	; 0xaf
   162f8:	07c0      	lsls	r0, r0, #31
   162fa:	2800      	cmp	r0, #0
   162fc:	d172      	bne.n	163e4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x124>
   162fe:	e070      	b.n	163e2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x122>
   16300:	2001      	movs	r0, #1
   16302:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   16306:	e00a      	b.n	1631e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
   16308:	2000      	movs	r0, #0
   1630a:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   1630e:	e006      	b.n	1631e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   16310:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16312:	3008      	adds	r0, #8
   16314:	2100      	movs	r1, #0
   16316:	f7fb fae8 	bl	118ea <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1631a:	9026      	str	r0, [sp, #152]	; 0x98
   1631c:	e038      	b.n	16390 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xd0>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   1631e:	f89d 00b0 	ldrb.w	r0, [sp, #176]	; 0xb0
   16322:	07c0      	lsls	r0, r0, #31
   16324:	2800      	cmp	r0, #0
   16326:	d1d7      	bne.n	162d8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   16328:	e7de      	b.n	162e8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x28>
   1632a:	2001      	movs	r0, #1
   1632c:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   16330:	e009      	b.n	16346 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   16332:	2000      	movs	r0, #0
   16334:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   16338:	e005      	b.n	16346 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   1633a:	2101      	movs	r1, #1
   1633c:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1633e:	f7fb fad4 	bl	118ea <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16342:	9025      	str	r0, [sp, #148]	; 0x94
   16344:	e00a      	b.n	1635c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x9c>
   16346:	f89d 00b1 	ldrb.w	r0, [sp, #177]	; 0xb1
   1634a:	07c0      	lsls	r0, r0, #31
   1634c:	2800      	cmp	r0, #0
   1634e:	d1df      	bne.n	16310 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x50>
   16350:	e7da      	b.n	16308 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
   16352:	9828      	ldr	r0, [sp, #160]	; 0xa0
   16354:	6801      	ldr	r1, [r0, #0]
   16356:	2900      	cmp	r1, #0
   16358:	d4e7      	bmi.n	1632a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   1635a:	e7ee      	b.n	1633a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x7a>
   1635c:	9825      	ldr	r0, [sp, #148]	; 0x94
   1635e:	6801      	ldr	r1, [r0, #0]
   16360:	2900      	cmp	r1, #0
   16362:	d4e2      	bmi.n	1632a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   16364:	e7e5      	b.n	16332 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x72>
   16366:	2001      	movs	r0, #1
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   16368:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   1636c:	e00a      	b.n	16384 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   1636e:	2000      	movs	r0, #0
   16370:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   16374:	e006      	b.n	16384 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   16376:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16378:	3008      	adds	r0, #8
   1637a:	2101      	movs	r1, #1
   1637c:	f7fb fab5 	bl	118ea <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16380:	9024      	str	r0, [sp, #144]	; 0x90
   16382:	e00a      	b.n	1639a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xda>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   16384:	f89d 00b2 	ldrb.w	r0, [sp, #178]	; 0xb2
   16388:	07c0      	lsls	r0, r0, #31
   1638a:	2800      	cmp	r0, #0
   1638c:	d1b8      	bne.n	16300 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40>
   1638e:	e7bb      	b.n	16308 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   16390:	9826      	ldr	r0, [sp, #152]	; 0x98
   16392:	6801      	ldr	r1, [r0, #0]
   16394:	2900      	cmp	r1, #0
   16396:	d4e6      	bmi.n	16366 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   16398:	e7ed      	b.n	16376 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xb6>
   1639a:	9824      	ldr	r0, [sp, #144]	; 0x90
   1639c:	6801      	ldr	r1, [r0, #0]
   1639e:	2900      	cmp	r1, #0
   163a0:	d4e1      	bmi.n	16366 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   163a2:	e7e4      	b.n	1636e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xae>
   163a4:	2001      	movs	r0, #1
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   163a6:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   163aa:	e009      	b.n	163c0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   163ac:	2000      	movs	r0, #0
   163ae:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   163b2:	e005      	b.n	163c0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   163b4:	9829      	ldr	r0, [sp, #164]	; 0xa4
   163b6:	3018      	adds	r0, #24
   163b8:	f7fe fa20 	bl	147fc <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   163bc:	9023      	str	r0, [sp, #140]	; 0x8c
   163be:	e00b      	b.n	163d8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x118>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   163c0:	f89d 00b3 	ldrb.w	r0, [sp, #179]	; 0xb3
   163c4:	07c0      	lsls	r0, r0, #31
   163c6:	2800      	cmp	r0, #0
   163c8:	f47f af86 	bne.w	162d8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   163cc:	e788      	b.n	162e0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20>
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   163ce:	9827      	ldr	r0, [sp, #156]	; 0x9c
   163d0:	07c1      	lsls	r1, r0, #31
   163d2:	2900      	cmp	r1, #0
   163d4:	d1ee      	bne.n	163b4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xf4>
   163d6:	e7e9      	b.n	163ac <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
   163d8:	9823      	ldr	r0, [sp, #140]	; 0x8c
   163da:	07c1      	lsls	r1, r0, #31
   163dc:	2900      	cmp	r1, #0
   163de:	d1e1      	bne.n	163a4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xe4>
   163e0:	e7e4      	b.n	163ac <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
        {
            return None;
        }

        let pixel = loop {
   163e2:	e012      	b.n	1640a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
   163e4:	2000      	movs	r0, #0
            return None;
   163e6:	992a      	ldr	r1, [sp, #168]	; 0xa8
   163e8:	6008      	str	r0, [r1, #0]
   163ea:	e7ff      	b.n	163ec <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                break out;
            }
        };

        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
    }
   163ec:	b052      	add	sp, #328	; 0x148
   163ee:	bd10      	pop	{r4, pc}
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   163f0:	982d      	ldr	r0, [sp, #180]	; 0xb4
   163f2:	992e      	ldr	r1, [sp, #184]	; 0xb8
   163f4:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   163f6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   163f8:	934d      	str	r3, [sp, #308]	; 0x134
   163fa:	924c      	str	r2, [sp, #304]	; 0x130
   163fc:	914b      	str	r1, [sp, #300]	; 0x12c
   163fe:	904a      	str	r0, [sp, #296]	; 0x128
   16400:	a94a      	add	r1, sp, #296	; 0x128
   16402:	982a      	ldr	r0, [sp, #168]	; 0xa8
   16404:	f7fe f90c 	bl	14620 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>
   16408:	e201      	b.n	1680e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x54e>
   1640a:	2000      	movs	r0, #0
            let mut out = None;
   1640c:	9031      	str	r0, [sp, #196]	; 0xc4
            if self.y > self.bottom_right[1] {
   1640e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16410:	6941      	ldr	r1, [r0, #20]
   16412:	3008      	adds	r0, #8
   16414:	2201      	movs	r2, #1
   16416:	9122      	str	r1, [sp, #136]	; 0x88
   16418:	4611      	mov	r1, r2
   1641a:	f7fb fa66 	bl	118ea <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1641e:	9021      	str	r0, [sp, #132]	; 0x84
   16420:	e7ff      	b.n	16422 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x162>
   16422:	9821      	ldr	r0, [sp, #132]	; 0x84
   16424:	6801      	ldr	r1, [r0, #0]
   16426:	9a22      	ldr	r2, [sp, #136]	; 0x88
   16428:	428a      	cmp	r2, r1
   1642a:	dc13      	bgt.n	16454 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x194>
   1642c:	e7ff      	b.n	1642e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x16e>
            let border_width = self.style.stroke_width as i32;
   1642e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16430:	f890 1020 	ldrb.w	r1, [r0, #32]
   16434:	460a      	mov	r2, r1
   16436:	9150      	str	r1, [sp, #320]	; 0x140
            let tl = self.top_left;
   16438:	6801      	ldr	r1, [r0, #0]
   1643a:	6843      	ldr	r3, [r0, #4]
   1643c:	9135      	str	r1, [sp, #212]	; 0xd4
   1643e:	9336      	str	r3, [sp, #216]	; 0xd8
            let br = self.bottom_right;
   16440:	6881      	ldr	r1, [r0, #8]
   16442:	68c3      	ldr	r3, [r0, #12]
   16444:	9137      	str	r1, [sp, #220]	; 0xdc
   16446:	9338      	str	r3, [sp, #224]	; 0xe0
            if self.x >= 0 && self.y >= 0 {
   16448:	6901      	ldr	r1, [r0, #16]
   1644a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1644e:	9220      	str	r2, [sp, #128]	; 0x80
   16450:	dc0b      	bgt.n	1646a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1aa>
   16452:	e006      	b.n	16462 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   16454:	2000      	movs	r0, #0
                break None;
   16456:	902d      	str	r0, [sp, #180]	; 0xb4
   16458:	e7ca      	b.n	163f0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
   1645a:	2001      	movs	r0, #1
            if self.x >= 0 && self.y >= 0 {
   1645c:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   16460:	e009      	b.n	16476 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   16462:	2000      	movs	r0, #0
   16464:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   16468:	e005      	b.n	16476 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   1646a:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1646c:	6941      	ldr	r1, [r0, #20]
   1646e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   16472:	dcf2      	bgt.n	1645a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x19a>
   16474:	e7f5      	b.n	16462 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   16476:	f89d 00e7 	ldrb.w	r0, [sp, #231]	; 0xe7
   1647a:	07c0      	lsls	r0, r0, #31
   1647c:	2800      	cmp	r0, #0
   1647e:	f000 8182 	beq.w	16786 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
   16482:	e7ff      	b.n	16484 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1c4>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   16484:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16486:	6941      	ldr	r1, [r0, #20]
   16488:	a835      	add	r0, sp, #212	; 0xd4
   1648a:	2201      	movs	r2, #1
   1648c:	911f      	str	r1, [sp, #124]	; 0x7c
   1648e:	4611      	mov	r1, r2
   16490:	f7fb fa2b 	bl	118ea <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16494:	901e      	str	r0, [sp, #120]	; 0x78
   16496:	e074      	b.n	16582 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2c2>
   16498:	2001      	movs	r0, #1
                if (
   1649a:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   1649e:	e009      	b.n	164b4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
   164a0:	2000      	movs	r0, #0
   164a2:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   164a6:	e005      	b.n	164b4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
                ) && self.style.stroke_color.is_some()
   164a8:	9829      	ldr	r0, [sp, #164]	; 0xa4
   164aa:	301c      	adds	r0, #28
   164ac:	f7fe f9d6 	bl	1485c <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   164b0:	901d      	str	r0, [sp, #116]	; 0x74
   164b2:	e104      	b.n	166be <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3fe>
                if (
   164b4:	f89d 00e8 	ldrb.w	r0, [sp, #232]	; 0xe8
   164b8:	07c0      	lsls	r0, r0, #31
   164ba:	2800      	cmp	r0, #0
   164bc:	f040 810a 	bne.w	166d4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x414>
   164c0:	e103      	b.n	166ca <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40a>
   164c2:	2001      	movs	r0, #1
   164c4:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   164c8:	e00d      	b.n	164e6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
   164ca:	2000      	movs	r0, #0
   164cc:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   164d0:	e009      	b.n	164e6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   164d2:	9829      	ldr	r0, [sp, #164]	; 0xa4
   164d4:	6901      	ldr	r1, [r0, #16]
   164d6:	a837      	add	r0, sp, #220	; 0xdc
   164d8:	2200      	movs	r2, #0
   164da:	911c      	str	r1, [sp, #112]	; 0x70
   164dc:	4611      	mov	r1, r2
   164de:	f7fb fa04 	bl	118ea <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   164e2:	901b      	str	r0, [sp, #108]	; 0x6c
   164e4:	e0d7      	b.n	16696 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3d6>
                if (
   164e6:	f89d 00e9 	ldrb.w	r0, [sp, #233]	; 0xe9
   164ea:	07c0      	lsls	r0, r0, #31
   164ec:	2800      	cmp	r0, #0
   164ee:	d1db      	bne.n	164a8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e8>
   164f0:	e7d6      	b.n	164a0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
   164f2:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   164f4:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   164f8:	e00d      	b.n	16516 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
   164fa:	2000      	movs	r0, #0
   164fc:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   16500:	e009      	b.n	16516 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   16502:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16504:	6901      	ldr	r1, [r0, #16]
   16506:	a835      	add	r0, sp, #212	; 0xd4
   16508:	2200      	movs	r2, #0
   1650a:	911a      	str	r1, [sp, #104]	; 0x68
   1650c:	4611      	mov	r1, r2
   1650e:	f7fb f9ec 	bl	118ea <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16512:	9019      	str	r0, [sp, #100]	; 0x64
   16514:	e090      	b.n	16638 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x378>
                if (
   16516:	f89d 00ea 	ldrb.w	r0, [sp, #234]	; 0xea
   1651a:	07c0      	lsls	r0, r0, #31
   1651c:	2800      	cmp	r0, #0
   1651e:	d1d0      	bne.n	164c2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   16520:	e7d7      	b.n	164d2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x212>
   16522:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   16524:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   16528:	e00d      	b.n	16546 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
   1652a:	2000      	movs	r0, #0
   1652c:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   16530:	e009      	b.n	16546 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   16532:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16534:	6941      	ldr	r1, [r0, #20]
   16536:	a837      	add	r0, sp, #220	; 0xdc
   16538:	2201      	movs	r2, #1
   1653a:	9118      	str	r1, [sp, #96]	; 0x60
   1653c:	4611      	mov	r1, r2
   1653e:	f7fb f9d4 	bl	118ea <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16542:	9017      	str	r0, [sp, #92]	; 0x5c
   16544:	e04b      	b.n	165de <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x31e>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   16546:	f89d 00eb 	ldrb.w	r0, [sp, #235]	; 0xeb
   1654a:	07c0      	lsls	r0, r0, #31
   1654c:	2800      	cmp	r0, #0
   1654e:	d1d0      	bne.n	164f2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   16550:	e7d7      	b.n	16502 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x242>
   16552:	2001      	movs	r0, #1
   16554:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   16558:	e00d      	b.n	16576 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   1655a:	2000      	movs	r0, #0
   1655c:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   16560:	e009      	b.n	16576 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   16562:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16564:	6941      	ldr	r1, [r0, #20]
   16566:	a835      	add	r0, sp, #212	; 0xd4
   16568:	2201      	movs	r2, #1
   1656a:	9116      	str	r1, [sp, #88]	; 0x58
   1656c:	4611      	mov	r1, r2
   1656e:	f7fb f9bc 	bl	118ea <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16572:	9015      	str	r0, [sp, #84]	; 0x54
   16574:	e00b      	b.n	1658e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ce>
   16576:	f89d 00ec 	ldrb.w	r0, [sp, #236]	; 0xec
   1657a:	07c0      	lsls	r0, r0, #31
   1657c:	2800      	cmp	r0, #0
   1657e:	d1d0      	bne.n	16522 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   16580:	e7d7      	b.n	16532 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x272>
   16582:	981e      	ldr	r0, [sp, #120]	; 0x78
   16584:	6801      	ldr	r1, [r0, #0]
   16586:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   16588:	428a      	cmp	r2, r1
   1658a:	daea      	bge.n	16562 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2a2>
   1658c:	e7e5      	b.n	1655a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   1658e:	9815      	ldr	r0, [sp, #84]	; 0x54
   16590:	6801      	ldr	r1, [r0, #0]
   16592:	9a20      	ldr	r2, [sp, #128]	; 0x80
   16594:	188b      	adds	r3, r1, r2
   16596:	469c      	mov	ip, r3
   16598:	428b      	cmp	r3, r1
   1659a:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
   1659e:	f180 8137 	bvs.w	16810 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x550>
   165a2:	e7ff      	b.n	165a4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2e4>
   165a4:	9816      	ldr	r0, [sp, #88]	; 0x58
   165a6:	9914      	ldr	r1, [sp, #80]	; 0x50
   165a8:	4288      	cmp	r0, r1
   165aa:	dbd2      	blt.n	16552 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x292>
   165ac:	e7d5      	b.n	1655a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   165ae:	2001      	movs	r0, #1
                || (self.y <= br[1] && self.y > br[1] - border_width)
   165b0:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   165b4:	e00d      	b.n	165d2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   165b6:	2000      	movs	r0, #0
   165b8:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   165bc:	e009      	b.n	165d2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   165be:	9829      	ldr	r0, [sp, #164]	; 0xa4
   165c0:	6941      	ldr	r1, [r0, #20]
   165c2:	a837      	add	r0, sp, #220	; 0xdc
   165c4:	2201      	movs	r2, #1
   165c6:	9113      	str	r1, [sp, #76]	; 0x4c
   165c8:	4611      	mov	r1, r2
   165ca:	f7fb f98e 	bl	118ea <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   165ce:	9012      	str	r0, [sp, #72]	; 0x48
   165d0:	e00b      	b.n	165ea <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x32a>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   165d2:	f89d 00ed 	ldrb.w	r0, [sp, #237]	; 0xed
   165d6:	07c0      	lsls	r0, r0, #31
   165d8:	2800      	cmp	r0, #0
   165da:	d1a2      	bne.n	16522 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   165dc:	e7a5      	b.n	1652a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x26a>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   165de:	9817      	ldr	r0, [sp, #92]	; 0x5c
   165e0:	6801      	ldr	r1, [r0, #0]
   165e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   165e4:	428a      	cmp	r2, r1
   165e6:	ddea      	ble.n	165be <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2fe>
   165e8:	e7e5      	b.n	165b6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   165ea:	9812      	ldr	r0, [sp, #72]	; 0x48
   165ec:	6801      	ldr	r1, [r0, #0]
   165ee:	9a20      	ldr	r2, [sp, #128]	; 0x80
   165f0:	1a8b      	subs	r3, r1, r2
   165f2:	4291      	cmp	r1, r2
   165f4:	9311      	str	r3, [sp, #68]	; 0x44
   165f6:	f180 8117 	bvs.w	16828 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x568>
   165fa:	e7ff      	b.n	165fc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x33c>
   165fc:	9813      	ldr	r0, [sp, #76]	; 0x4c
   165fe:	9911      	ldr	r1, [sp, #68]	; 0x44
   16600:	4288      	cmp	r0, r1
   16602:	dcd4      	bgt.n	165ae <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ee>
   16604:	e7d7      	b.n	165b6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   16606:	2001      	movs	r0, #1
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   16608:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   1660c:	e00d      	b.n	1662a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   1660e:	2000      	movs	r0, #0
   16610:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   16614:	e009      	b.n	1662a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   16616:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16618:	6901      	ldr	r1, [r0, #16]
   1661a:	a835      	add	r0, sp, #212	; 0xd4
   1661c:	2200      	movs	r2, #0
   1661e:	9110      	str	r1, [sp, #64]	; 0x40
   16620:	4611      	mov	r1, r2
   16622:	f7fb f962 	bl	118ea <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16626:	900f      	str	r0, [sp, #60]	; 0x3c
   16628:	e00c      	b.n	16644 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x384>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   1662a:	f89d 00ee 	ldrb.w	r0, [sp, #238]	; 0xee
   1662e:	07c0      	lsls	r0, r0, #31
   16630:	2800      	cmp	r0, #0
   16632:	f47f af5e 	bne.w	164f2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   16636:	e760      	b.n	164fa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x23a>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   16638:	9819      	ldr	r0, [sp, #100]	; 0x64
   1663a:	6801      	ldr	r1, [r0, #0]
   1663c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1663e:	428a      	cmp	r2, r1
   16640:	dae9      	bge.n	16616 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x356>
   16642:	e7e4      	b.n	1660e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   16644:	980f      	ldr	r0, [sp, #60]	; 0x3c
   16646:	6801      	ldr	r1, [r0, #0]
   16648:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1664a:	188b      	adds	r3, r1, r2
   1664c:	469c      	mov	ip, r3
   1664e:	428b      	cmp	r3, r1
   16650:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   16654:	f180 80f4 	bvs.w	16840 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x580>
   16658:	e7ff      	b.n	1665a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x39a>
   1665a:	9810      	ldr	r0, [sp, #64]	; 0x40
   1665c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1665e:	4288      	cmp	r0, r1
   16660:	dbd1      	blt.n	16606 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x346>
   16662:	e7d4      	b.n	1660e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   16664:	2001      	movs	r0, #1
                || (self.x <= br[0] && self.x > br[0] - border_width)
   16666:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   1666a:	e00d      	b.n	16688 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   1666c:	2000      	movs	r0, #0
   1666e:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   16672:	e009      	b.n	16688 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   16674:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16676:	6901      	ldr	r1, [r0, #16]
   16678:	a837      	add	r0, sp, #220	; 0xdc
   1667a:	2200      	movs	r2, #0
   1667c:	910d      	str	r1, [sp, #52]	; 0x34
   1667e:	4611      	mov	r1, r2
   16680:	f7fb f933 	bl	118ea <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16684:	900c      	str	r0, [sp, #48]	; 0x30
   16686:	e00c      	b.n	166a2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3e2>
                if (
   16688:	f89d 00ef 	ldrb.w	r0, [sp, #239]	; 0xef
   1668c:	07c0      	lsls	r0, r0, #31
   1668e:	2800      	cmp	r0, #0
   16690:	f47f af17 	bne.w	164c2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   16694:	e719      	b.n	164ca <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20a>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   16696:	981b      	ldr	r0, [sp, #108]	; 0x6c
   16698:	6801      	ldr	r1, [r0, #0]
   1669a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1669c:	428a      	cmp	r2, r1
   1669e:	dde9      	ble.n	16674 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3b4>
   166a0:	e7e4      	b.n	1666c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
   166a2:	980c      	ldr	r0, [sp, #48]	; 0x30
   166a4:	6801      	ldr	r1, [r0, #0]
   166a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
   166a8:	1a8b      	subs	r3, r1, r2
   166aa:	4291      	cmp	r1, r2
   166ac:	930b      	str	r3, [sp, #44]	; 0x2c
   166ae:	f180 80d3 	bvs.w	16858 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x598>
   166b2:	e7ff      	b.n	166b4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3f4>
   166b4:	980d      	ldr	r0, [sp, #52]	; 0x34
   166b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   166b8:	4288      	cmp	r0, r1
   166ba:	dcd3      	bgt.n	16664 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3a4>
   166bc:	e7d6      	b.n	1666c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
                if (
   166be:	981d      	ldr	r0, [sp, #116]	; 0x74
   166c0:	07c1      	lsls	r1, r0, #31
   166c2:	2900      	cmp	r1, #0
   166c4:	f47f aee8 	bne.w	16498 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1d8>
   166c8:	e6ea      	b.n	164a0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
                else if let Some(fill) = self.style.fill_color {
   166ca:	9829      	ldr	r0, [sp, #164]	; 0xa4
   166cc:	8b01      	ldrh	r1, [r0, #24]
   166ce:	2901      	cmp	r1, #1
   166d0:	d03b      	beq.n	1674a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48a>
   166d2:	e057      	b.n	16784 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                        self.x,
   166d4:	9829      	ldr	r0, [sp, #164]	; 0xa4
   166d6:	6901      	ldr	r1, [r0, #16]
                        self.y,
   166d8:	6942      	ldr	r2, [r0, #20]
                        self.style.stroke_color.expect("Expected stroke"),
   166da:	8bc3      	ldrh	r3, [r0, #30]
   166dc:	8b80      	ldrh	r0, [r0, #28]
   166de:	f640 1c54 	movw	ip, #2388	; 0x954
   166e2:	f2c0 0c02 	movt	ip, #2
   166e6:	46ee      	mov	lr, sp
   166e8:	f8ce c000 	str.w	ip, [lr]
   166ec:	f640 1c44 	movw	ip, #2372	; 0x944
   166f0:	f2c0 0c02 	movt	ip, #2
   166f4:	f04f 0e0f 	mov.w	lr, #15
   166f8:	910a      	str	r1, [sp, #40]	; 0x28
   166fa:	4619      	mov	r1, r3
   166fc:	9209      	str	r2, [sp, #36]	; 0x24
   166fe:	4662      	mov	r2, ip
   16700:	4673      	mov	r3, lr
   16702:	f7fd ffff 	bl	14704 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>
   16706:	9008      	str	r0, [sp, #32]
   16708:	e7ff      	b.n	1670a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x44a>
                    out = Some((
   1670a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1670c:	9040      	str	r0, [sp, #256]	; 0x100
   1670e:	9909      	ldr	r1, [sp, #36]	; 0x24
   16710:	9141      	str	r1, [sp, #260]	; 0x104
   16712:	9a08      	ldr	r2, [sp, #32]
   16714:	f8ad 2108 	strh.w	r2, [sp, #264]	; 0x108
   16718:	9b40      	ldr	r3, [sp, #256]	; 0x100
   1671a:	f8dd c104 	ldr.w	ip, [sp, #260]	; 0x104
   1671e:	f8dd e108 	ldr.w	lr, [sp, #264]	; 0x108
   16722:	f8cd e0fc 	str.w	lr, [sp, #252]	; 0xfc
   16726:	f8cd c0f8 	str.w	ip, [sp, #248]	; 0xf8
   1672a:	933d      	str	r3, [sp, #244]	; 0xf4
   1672c:	2301      	movs	r3, #1
   1672e:	933c      	str	r3, [sp, #240]	; 0xf0
   16730:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
   16732:	f8dd c0f4 	ldr.w	ip, [sp, #244]	; 0xf4
   16736:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
   1673a:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
   1673c:	9434      	str	r4, [sp, #208]	; 0xd0
   1673e:	f8cd e0cc 	str.w	lr, [sp, #204]	; 0xcc
   16742:	f8cd c0c8 	str.w	ip, [sp, #200]	; 0xc8
   16746:	9331      	str	r3, [sp, #196]	; 0xc4
                if (
   16748:	e01c      	b.n	16784 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                else if let Some(fill) = self.style.fill_color {
   1674a:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1674c:	8b41      	ldrh	r1, [r0, #26]
   1674e:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
                    out = Some((self.x, self.y, fill));
   16752:	6902      	ldr	r2, [r0, #16]
   16754:	6943      	ldr	r3, [r0, #20]
   16756:	9247      	str	r2, [sp, #284]	; 0x11c
   16758:	9348      	str	r3, [sp, #288]	; 0x120
   1675a:	f8ad 1124 	strh.w	r1, [sp, #292]	; 0x124
   1675e:	9947      	ldr	r1, [sp, #284]	; 0x11c
   16760:	9a48      	ldr	r2, [sp, #288]	; 0x120
   16762:	9b49      	ldr	r3, [sp, #292]	; 0x124
   16764:	9346      	str	r3, [sp, #280]	; 0x118
   16766:	9245      	str	r2, [sp, #276]	; 0x114
   16768:	9144      	str	r1, [sp, #272]	; 0x110
   1676a:	2101      	movs	r1, #1
   1676c:	9143      	str	r1, [sp, #268]	; 0x10c
   1676e:	9943      	ldr	r1, [sp, #268]	; 0x10c
   16770:	9a44      	ldr	r2, [sp, #272]	; 0x110
   16772:	9b45      	ldr	r3, [sp, #276]	; 0x114
   16774:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   16778:	f8cd c0d0 	str.w	ip, [sp, #208]	; 0xd0
   1677c:	9333      	str	r3, [sp, #204]	; 0xcc
   1677e:	9232      	str	r2, [sp, #200]	; 0xc8
   16780:	9131      	str	r1, [sp, #196]	; 0xc4
                else if let Some(fill) = self.style.fill_color {
   16782:	e7ff      	b.n	16784 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
            if self.x >= 0 && self.y >= 0 {
   16784:	e7ff      	b.n	16786 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
            self.x += 1;
   16786:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16788:	6901      	ldr	r1, [r0, #16]
   1678a:	1c4a      	adds	r2, r1, #1
   1678c:	4613      	mov	r3, r2
   1678e:	428a      	cmp	r2, r1
   16790:	9307      	str	r3, [sp, #28]
   16792:	d66d      	bvs.n	16870 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5b0>
   16794:	e7ff      	b.n	16796 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4d6>
   16796:	9807      	ldr	r0, [sp, #28]
   16798:	9929      	ldr	r1, [sp, #164]	; 0xa4
   1679a:	6108      	str	r0, [r1, #16]
            if self.x > self.bottom_right[0] {
   1679c:	690a      	ldr	r2, [r1, #16]
   1679e:	f101 0008 	add.w	r0, r1, #8
   167a2:	2100      	movs	r1, #0
   167a4:	9206      	str	r2, [sp, #24]
   167a6:	f7fb f8a0 	bl	118ea <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   167aa:	9005      	str	r0, [sp, #20]
   167ac:	e7ff      	b.n	167ae <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4ee>
   167ae:	9805      	ldr	r0, [sp, #20]
   167b0:	6801      	ldr	r1, [r0, #0]
   167b2:	9a06      	ldr	r2, [sp, #24]
   167b4:	428a      	cmp	r2, r1
   167b6:	dd16      	ble.n	167e6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   167b8:	e7ff      	b.n	167ba <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4fa>
   167ba:	2100      	movs	r1, #0
                self.x = self.top_left[0];
   167bc:	9829      	ldr	r0, [sp, #164]	; 0xa4
   167be:	f7fb f894 	bl	118ea <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   167c2:	9004      	str	r0, [sp, #16]
   167c4:	e7ff      	b.n	167c6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x506>
   167c6:	9804      	ldr	r0, [sp, #16]
   167c8:	6801      	ldr	r1, [r0, #0]
   167ca:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   167cc:	6111      	str	r1, [r2, #16]
                self.y += 1;
   167ce:	6951      	ldr	r1, [r2, #20]
   167d0:	1c4b      	adds	r3, r1, #1
   167d2:	469c      	mov	ip, r3
   167d4:	428b      	cmp	r3, r1
   167d6:	f8cd c00c 	str.w	ip, [sp, #12]
   167da:	d655      	bvs.n	16888 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5c8>
   167dc:	e7ff      	b.n	167de <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x51e>
   167de:	9803      	ldr	r0, [sp, #12]
   167e0:	9929      	ldr	r1, [sp, #164]	; 0xa4
   167e2:	6148      	str	r0, [r1, #20]
            if self.x > self.bottom_right[0] {
   167e4:	e7ff      	b.n	167e6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   167e6:	a831      	add	r0, sp, #196	; 0xc4
            if out.is_some() {
   167e8:	f7fe f826 	bl	14838 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>
   167ec:	9002      	str	r0, [sp, #8]
   167ee:	e7ff      	b.n	167f0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x530>
   167f0:	9802      	ldr	r0, [sp, #8]
   167f2:	07c1      	lsls	r1, r0, #31
   167f4:	2900      	cmp	r1, #0
   167f6:	d101      	bne.n	167fc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53c>
   167f8:	e7ff      	b.n	167fa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53a>
        let pixel = loop {
   167fa:	e606      	b.n	1640a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
                break out;
   167fc:	9831      	ldr	r0, [sp, #196]	; 0xc4
   167fe:	9932      	ldr	r1, [sp, #200]	; 0xc8
   16800:	9a33      	ldr	r2, [sp, #204]	; 0xcc
   16802:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   16804:	9330      	str	r3, [sp, #192]	; 0xc0
   16806:	922f      	str	r2, [sp, #188]	; 0xbc
   16808:	912e      	str	r1, [sp, #184]	; 0xb8
   1680a:	902d      	str	r0, [sp, #180]	; 0xb4
   1680c:	e5f0      	b.n	163f0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
    }
   1680e:	e5ed      	b.n	163ec <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   16810:	f640 00d0 	movw	r0, #2256	; 0x8d0
   16814:	f2c0 0002 	movt	r0, #2
   16818:	f640 02bc 	movw	r2, #2236	; 0x8bc
   1681c:	f2c0 0202 	movt	r2, #2
   16820:	211c      	movs	r1, #28
   16822:	f001 f871 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16826:	defe      	udf	#254	; 0xfe
                || (self.y <= br[1] && self.y > br[1] - border_width)
   16828:	f640 1000 	movw	r0, #2304	; 0x900
   1682c:	f2c0 0002 	movt	r0, #2
   16830:	f640 02ec 	movw	r2, #2284	; 0x8ec
   16834:	f2c0 0202 	movt	r2, #2
   16838:	2121      	movs	r1, #33	; 0x21
   1683a:	f001 f865 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1683e:	defe      	udf	#254	; 0xfe
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   16840:	f640 00d0 	movw	r0, #2256	; 0x8d0
   16844:	f2c0 0002 	movt	r0, #2
   16848:	f640 1224 	movw	r2, #2340	; 0x924
   1684c:	f2c0 0202 	movt	r2, #2
   16850:	211c      	movs	r1, #28
   16852:	f001 f859 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16856:	defe      	udf	#254	; 0xfe
                || (self.x <= br[0] && self.x > br[0] - border_width)
   16858:	f640 1000 	movw	r0, #2304	; 0x900
   1685c:	f2c0 0002 	movt	r0, #2
   16860:	f640 1234 	movw	r2, #2356	; 0x934
   16864:	f2c0 0202 	movt	r2, #2
   16868:	2121      	movs	r1, #33	; 0x21
   1686a:	f001 f84d 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1686e:	defe      	udf	#254	; 0xfe
            self.x += 1;
   16870:	f640 00d0 	movw	r0, #2256	; 0x8d0
   16874:	f2c0 0002 	movt	r0, #2
   16878:	f640 1264 	movw	r2, #2404	; 0x964
   1687c:	f2c0 0202 	movt	r2, #2
   16880:	211c      	movs	r1, #28
   16882:	f001 f841 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16886:	defe      	udf	#254	; 0xfe
                self.y += 1;
   16888:	f640 00d0 	movw	r0, #2256	; 0x8d0
   1688c:	f2c0 0002 	movt	r0, #2
   16890:	f640 1274 	movw	r2, #2420	; 0x974
   16894:	f2c0 0202 	movt	r2, #2
   16898:	211c      	movs	r1, #28
   1689a:	f001 f835 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1689e:	defe      	udf	#254	; 0xfe

000168a0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>:
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   168a0:	b580      	push	{r7, lr}
   168a2:	b08a      	sub	sp, #40	; 0x28
   168a4:	680a      	ldr	r2, [r1, #0]
   168a6:	9207      	str	r2, [sp, #28]
   168a8:	684b      	ldr	r3, [r1, #4]
   168aa:	9308      	str	r3, [sp, #32]
   168ac:	8909      	ldrh	r1, [r1, #8]
   168ae:	468c      	mov	ip, r1
   168b0:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
   168b4:	9005      	str	r0, [sp, #20]
   168b6:	4610      	mov	r0, r2
   168b8:	4619      	mov	r1, r3
   168ba:	f8cd c010 	str.w	ip, [sp, #16]
   168be:	f7fb f80b 	bl	118d8 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
   168c2:	9003      	str	r0, [sp, #12]
   168c4:	9102      	str	r1, [sp, #8]
   168c6:	e7ff      	b.n	168c8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x28>
   168c8:	9803      	ldr	r0, [sp, #12]
   168ca:	9902      	ldr	r1, [sp, #8]
   168cc:	f7fb f856 	bl	1197c <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>
   168d0:	9001      	str	r0, [sp, #4]
   168d2:	9100      	str	r1, [sp, #0]
   168d4:	e7ff      	b.n	168d6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x36>
   168d6:	9801      	ldr	r0, [sp, #4]
   168d8:	9905      	ldr	r1, [sp, #20]
   168da:	6008      	str	r0, [r1, #0]
   168dc:	9a00      	ldr	r2, [sp, #0]
   168de:	604a      	str	r2, [r1, #4]
   168e0:	9b04      	ldr	r3, [sp, #16]
   168e2:	810b      	strh	r3, [r1, #8]
   168e4:	b00a      	add	sp, #40	; 0x28
   168e6:	bd80      	pop	{r7, pc}

000168e8 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>:
    pub fn new(top_left: Coord, bottom_right: Coord) -> Self {
   168e8:	b510      	push	{r4, lr}
   168ea:	b08c      	sub	sp, #48	; 0x30
   168ec:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   168f0:	9108      	str	r1, [sp, #32]
   168f2:	9209      	str	r2, [sp, #36]	; 0x24
   168f4:	930a      	str	r3, [sp, #40]	; 0x28
   168f6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   168fa:	f10d 0e14 	add.w	lr, sp, #20
            style: Style::default(),
   168fe:	9004      	str	r0, [sp, #16]
   16900:	4670      	mov	r0, lr
   16902:	9303      	str	r3, [sp, #12]
   16904:	9202      	str	r2, [sp, #8]
   16906:	9101      	str	r1, [sp, #4]
   16908:	f8cd c000 	str.w	ip, [sp]
   1690c:	f000 f818 	bl	16940 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>
   16910:	e7ff      	b.n	16912 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E+0x2a>
        Rectangle {
   16912:	9801      	ldr	r0, [sp, #4]
   16914:	9904      	ldr	r1, [sp, #16]
   16916:	6008      	str	r0, [r1, #0]
   16918:	9a02      	ldr	r2, [sp, #8]
   1691a:	604a      	str	r2, [r1, #4]
   1691c:	9b03      	ldr	r3, [sp, #12]
   1691e:	608b      	str	r3, [r1, #8]
   16920:	f8dd c000 	ldr.w	ip, [sp]
   16924:	f8c1 c00c 	str.w	ip, [r1, #12]
   16928:	f8bd e01c 	ldrh.w	lr, [sp, #28]
   1692c:	f8a1 e018 	strh.w	lr, [r1, #24]
   16930:	f8dd e014 	ldr.w	lr, [sp, #20]
   16934:	9c06      	ldr	r4, [sp, #24]
   16936:	614c      	str	r4, [r1, #20]
   16938:	f8c1 e010 	str.w	lr, [r1, #16]
    }
   1693c:	b00c      	add	sp, #48	; 0x30
   1693e:	bd10      	pop	{r4, pc}

00016940 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>:

impl<P> Default for Style<P>
where
    P: PixelColor,
{
    fn default() -> Self {
   16940:	b082      	sub	sp, #8
   16942:	2100      	movs	r1, #0
        Self {
            fill_color: None,
   16944:	f8ad 1000 	strh.w	r1, [sp]
            stroke_color: None,
   16948:	f8ad 1004 	strh.w	r1, [sp, #4]
        Self {
   1694c:	f8bd 1000 	ldrh.w	r1, [sp]
   16950:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   16954:	8001      	strh	r1, [r0, #0]
   16956:	8042      	strh	r2, [r0, #2]
   16958:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1695c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16960:	8081      	strh	r1, [r0, #4]
   16962:	80c2      	strh	r2, [r0, #6]
   16964:	2101      	movs	r1, #1
   16966:	7201      	strb	r1, [r0, #8]
            stroke_width: 1,
        }
    }
   16968:	b002      	add	sp, #8
   1696a:	4770      	bx	lr

0001696c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>:
   1696c:	b082      	sub	sp, #8
   1696e:	9001      	str	r0, [sp, #4]
   16970:	9000      	str	r0, [sp, #0]
   16972:	9800      	ldr	r0, [sp, #0]
   16974:	b002      	add	sp, #8
   16976:	4770      	bx	lr

00016978 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>:
   16978:	b081      	sub	sp, #4
   1697a:	9000      	str	r0, [sp, #0]
   1697c:	b001      	add	sp, #4
   1697e:	4770      	bx	lr

00016980 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>:
#[derive(ToPrimitive)]
   16980:	b084      	sub	sp, #16
   16982:	460a      	mov	r2, r1
   16984:	4603      	mov	r3, r0
   16986:	9103      	str	r1, [sp, #12]
   16988:	9002      	str	r0, [sp, #8]
   1698a:	b004      	add	sp, #16
   1698c:	4770      	bx	lr

0001698e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>:
   1698e:	b510      	push	{r4, lr}
   16990:	b088      	sub	sp, #32
   16992:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   16996:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
   1699a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1699c:	9102      	str	r1, [sp, #8]
   1699e:	9203      	str	r2, [sp, #12]
   169a0:	9304      	str	r3, [sp, #16]
   169a2:	9405      	str	r4, [sp, #20]
   169a4:	f8cd e018 	str.w	lr, [sp, #24]
   169a8:	f8cd c01c 	str.w	ip, [sp, #28]
   169ac:	f8cd e000 	str.w	lr, [sp]
   169b0:	f8cd c004 	str.w	ip, [sp, #4]
   169b4:	6001      	str	r1, [r0, #0]
   169b6:	6042      	str	r2, [r0, #4]
   169b8:	9900      	ldr	r1, [sp, #0]
   169ba:	9a01      	ldr	r2, [sp, #4]
   169bc:	6081      	str	r1, [r0, #8]
   169be:	60c2      	str	r2, [r0, #12]
   169c0:	6103      	str	r3, [r0, #16]
   169c2:	6144      	str	r4, [r0, #20]
   169c4:	b008      	add	sp, #32
   169c6:	bd10      	pop	{r4, pc}

000169c8 <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>:
   169c8:	b580      	push	{r7, lr}
   169ca:	b086      	sub	sp, #24
   169cc:	f8dd c020 	ldr.w	ip, [sp, #32]
   169d0:	9102      	str	r1, [sp, #8]
   169d2:	9203      	str	r2, [sp, #12]
   169d4:	9304      	str	r3, [sp, #16]
   169d6:	f8cd c014 	str.w	ip, [sp, #20]
   169da:	f04f 0e00 	mov.w	lr, #0
   169de:	f8cd e004 	str.w	lr, [sp, #4]
   169e2:	f8cd e000 	str.w	lr, [sp]
   169e6:	f8cd e000 	str.w	lr, [sp]
   169ea:	6001      	str	r1, [r0, #0]
   169ec:	6042      	str	r2, [r0, #4]
   169ee:	9900      	ldr	r1, [sp, #0]
   169f0:	9a01      	ldr	r2, [sp, #4]
   169f2:	6081      	str	r1, [r0, #8]
   169f4:	60c2      	str	r2, [r0, #12]
   169f6:	6103      	str	r3, [r0, #16]
   169f8:	f8c0 c014 	str.w	ip, [r0, #20]
   169fc:	b006      	add	sp, #24
   169fe:	bd80      	pop	{r7, pc}

00016a00 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E>:
   16a00:	b580      	push	{r7, lr}
   16a02:	b086      	sub	sp, #24
   16a04:	460a      	mov	r2, r1
   16a06:	4603      	mov	r3, r0
   16a08:	f88d 0014 	strb.w	r0, [sp, #20]
   16a0c:	f88d 1015 	strb.w	r1, [sp, #21]
   16a10:	9203      	str	r2, [sp, #12]
   16a12:	9302      	str	r3, [sp, #8]
   16a14:	f000 f865 	bl	16ae2 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>
   16a18:	9001      	str	r0, [sp, #4]
   16a1a:	9100      	str	r1, [sp, #0]
   16a1c:	e7ff      	b.n	16a1e <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x1e>
   16a1e:	9801      	ldr	r0, [sp, #4]
   16a20:	f88d 0016 	strb.w	r0, [sp, #22]
   16a24:	9900      	ldr	r1, [sp, #0]
   16a26:	f001 0201 	and.w	r2, r1, #1
   16a2a:	f88d 2017 	strb.w	r2, [sp, #23]
   16a2e:	2a00      	cmp	r2, #0
   16a30:	d107      	bne.n	16a42 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x42>
   16a32:	e7ff      	b.n	16a34 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x34>
   16a34:	9801      	ldr	r0, [sp, #4]
   16a36:	f88d 0011 	strb.w	r0, [sp, #17]
   16a3a:	2101      	movs	r1, #1
   16a3c:	f88d 1010 	strb.w	r1, [sp, #16]
   16a40:	e003      	b.n	16a4a <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x4a>
   16a42:	2000      	movs	r0, #0
   16a44:	f88d 0010 	strb.w	r0, [sp, #16]
   16a48:	e7ff      	b.n	16a4a <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x4a>
   16a4a:	f89d 0010 	ldrb.w	r0, [sp, #16]
   16a4e:	f89d 1011 	ldrb.w	r1, [sp, #17]
   16a52:	b006      	add	sp, #24
   16a54:	bd80      	pop	{r7, pc}

00016a56 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>:
   16a56:	b082      	sub	sp, #8
   16a58:	460a      	mov	r2, r1
   16a5a:	4603      	mov	r3, r0
   16a5c:	f88d 0005 	strb.w	r0, [sp, #5]
   16a60:	f88d 1006 	strb.w	r1, [sp, #6]
   16a64:	4408      	add	r0, r1
   16a66:	f88d 0007 	strb.w	r0, [sp, #7]
   16a6a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   16a6e:	9000      	str	r0, [sp, #0]
   16a70:	e7ff      	b.n	16a72 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE+0x1c>
   16a72:	9800      	ldr	r0, [sp, #0]
   16a74:	b002      	add	sp, #8
   16a76:	4770      	bx	lr

00016a78 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E>:
   16a78:	b084      	sub	sp, #16
   16a7a:	4602      	mov	r2, r0
   16a7c:	f88d 0007 	strb.w	r0, [sp, #7]
   16a80:	9102      	str	r1, [sp, #8]
   16a82:	f001 0107 	and.w	r1, r1, #7
   16a86:	4088      	lsls	r0, r1
   16a88:	f88d 000f 	strb.w	r0, [sp, #15]
   16a8c:	f89d 000f 	ldrb.w	r0, [sp, #15]
   16a90:	9000      	str	r0, [sp, #0]
   16a92:	e7ff      	b.n	16a94 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E+0x1c>
   16a94:	9800      	ldr	r0, [sp, #0]
   16a96:	b004      	add	sp, #16
   16a98:	4770      	bx	lr

00016a9a <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E>:
   16a9a:	b084      	sub	sp, #16
   16a9c:	b2c2      	uxtb	r2, r0
   16a9e:	4603      	mov	r3, r0
   16aa0:	f88d 0007 	strb.w	r0, [sp, #7]
   16aa4:	9102      	str	r1, [sp, #8]
   16aa6:	f001 0007 	and.w	r0, r1, #7
   16aaa:	fa22 f000 	lsr.w	r0, r2, r0
   16aae:	f88d 000f 	strb.w	r0, [sp, #15]
   16ab2:	f89d 000f 	ldrb.w	r0, [sp, #15]
   16ab6:	9000      	str	r0, [sp, #0]
   16ab8:	e7ff      	b.n	16aba <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E+0x20>
   16aba:	9800      	ldr	r0, [sp, #0]
   16abc:	b004      	add	sp, #16
   16abe:	4770      	bx	lr

00016ac0 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E>:
   16ac0:	b082      	sub	sp, #8
   16ac2:	460a      	mov	r2, r1
   16ac4:	4603      	mov	r3, r0
   16ac6:	f88d 0005 	strb.w	r0, [sp, #5]
   16aca:	f88d 1006 	strb.w	r1, [sp, #6]
   16ace:	1a40      	subs	r0, r0, r1
   16ad0:	f88d 0007 	strb.w	r0, [sp, #7]
   16ad4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   16ad8:	9000      	str	r0, [sp, #0]
   16ada:	e7ff      	b.n	16adc <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E+0x1c>
   16adc:	9800      	ldr	r0, [sp, #0]
   16ade:	b002      	add	sp, #8
   16ae0:	4770      	bx	lr

00016ae2 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>:
   16ae2:	b084      	sub	sp, #16
   16ae4:	b2c2      	uxtb	r2, r0
   16ae6:	460b      	mov	r3, r1
   16ae8:	4684      	mov	ip, r0
   16aea:	f88d 000a 	strb.w	r0, [sp, #10]
   16aee:	f88d 100b 	strb.w	r1, [sp, #11]
   16af2:	fa52 f081 	uxtab	r0, r2, r1
   16af6:	b2c1      	uxtb	r1, r0
   16af8:	1a09      	subs	r1, r1, r0
   16afa:	bf18      	it	ne
   16afc:	2101      	movne	r1, #1
   16afe:	f88d 000c 	strb.w	r0, [sp, #12]
   16b02:	f88d 100d 	strb.w	r1, [sp, #13]
   16b06:	f89d 000c 	ldrb.w	r0, [sp, #12]
   16b0a:	f89d 100d 	ldrb.w	r1, [sp, #13]
   16b0e:	9001      	str	r0, [sp, #4]
   16b10:	9100      	str	r1, [sp, #0]
   16b12:	e7ff      	b.n	16b14 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E+0x32>
   16b14:	9801      	ldr	r0, [sp, #4]
   16b16:	f88d 000e 	strb.w	r0, [sp, #14]
   16b1a:	9900      	ldr	r1, [sp, #0]
   16b1c:	f001 0201 	and.w	r2, r1, #1
   16b20:	f88d 200f 	strb.w	r2, [sp, #15]
   16b24:	f88d 0008 	strb.w	r0, [sp, #8]
   16b28:	f88d 2009 	strb.w	r2, [sp, #9]
   16b2c:	f89d 0008 	ldrb.w	r0, [sp, #8]
   16b30:	f89d 1009 	ldrb.w	r1, [sp, #9]
   16b34:	b004      	add	sp, #16
   16b36:	4770      	bx	lr

00016b38 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>:
   16b38:	b580      	push	{r7, lr}
   16b3a:	b084      	sub	sp, #16
   16b3c:	b2ca      	uxtb	r2, r1
   16b3e:	b2c3      	uxtb	r3, r0
   16b40:	468c      	mov	ip, r1
   16b42:	4686      	mov	lr, r0
   16b44:	f88d 000a 	strb.w	r0, [sp, #10]
   16b48:	f88d 100b 	strb.w	r1, [sp, #11]
   16b4c:	1a98      	subs	r0, r3, r2
   16b4e:	b2c1      	uxtb	r1, r0
   16b50:	1a09      	subs	r1, r1, r0
   16b52:	bf18      	it	ne
   16b54:	2101      	movne	r1, #1
   16b56:	f88d 000c 	strb.w	r0, [sp, #12]
   16b5a:	f88d 100d 	strb.w	r1, [sp, #13]
   16b5e:	f89d 000c 	ldrb.w	r0, [sp, #12]
   16b62:	f89d 100d 	ldrb.w	r1, [sp, #13]
   16b66:	9001      	str	r0, [sp, #4]
   16b68:	9100      	str	r1, [sp, #0]
   16b6a:	e7ff      	b.n	16b6c <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E+0x34>
   16b6c:	9801      	ldr	r0, [sp, #4]
   16b6e:	f88d 000e 	strb.w	r0, [sp, #14]
   16b72:	9900      	ldr	r1, [sp, #0]
   16b74:	f001 0201 	and.w	r2, r1, #1
   16b78:	f88d 200f 	strb.w	r2, [sp, #15]
   16b7c:	f88d 0008 	strb.w	r0, [sp, #8]
   16b80:	f88d 2009 	strb.w	r2, [sp, #9]
   16b84:	f89d 0008 	ldrb.w	r0, [sp, #8]
   16b88:	f89d 1009 	ldrb.w	r1, [sp, #9]
   16b8c:	b004      	add	sp, #16
   16b8e:	bd80      	pop	{r7, pc}

00016b90 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>:
   16b90:	b083      	sub	sp, #12
   16b92:	460a      	mov	r2, r1
   16b94:	4603      	mov	r3, r0
   16b96:	f8ad 0006 	strh.w	r0, [sp, #6]
   16b9a:	f8ad 1008 	strh.w	r1, [sp, #8]
   16b9e:	4408      	add	r0, r1
   16ba0:	f8ad 000a 	strh.w	r0, [sp, #10]
   16ba4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   16ba8:	9000      	str	r0, [sp, #0]
   16baa:	e7ff      	b.n	16bac <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E+0x1c>
   16bac:	9800      	ldr	r0, [sp, #0]
   16bae:	b003      	add	sp, #12
   16bb0:	4770      	bx	lr

00016bb2 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>:
   16bb2:	b083      	sub	sp, #12
   16bb4:	460a      	mov	r2, r1
   16bb6:	4603      	mov	r3, r0
   16bb8:	f8ad 0006 	strh.w	r0, [sp, #6]
   16bbc:	f8ad 1008 	strh.w	r1, [sp, #8]
   16bc0:	1a40      	subs	r0, r0, r1
   16bc2:	f8ad 000a 	strh.w	r0, [sp, #10]
   16bc6:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   16bca:	9000      	str	r0, [sp, #0]
   16bcc:	e7ff      	b.n	16bce <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E+0x1c>
   16bce:	9800      	ldr	r0, [sp, #0]
   16bd0:	b003      	add	sp, #12
   16bd2:	4770      	bx	lr

00016bd4 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE>:
   16bd4:	b5b0      	push	{r4, r5, r7, lr}
   16bd6:	b088      	sub	sp, #32
   16bd8:	469c      	mov	ip, r3
   16bda:	4696      	mov	lr, r2
   16bdc:	460c      	mov	r4, r1
   16bde:	4605      	mov	r5, r0
   16be0:	9103      	str	r1, [sp, #12]
   16be2:	9002      	str	r0, [sp, #8]
   16be4:	9305      	str	r3, [sp, #20]
   16be6:	9204      	str	r2, [sp, #16]
   16be8:	1a80      	subs	r0, r0, r2
   16bea:	eb61 0103 	sbc.w	r1, r1, r3
   16bee:	9107      	str	r1, [sp, #28]
   16bf0:	9006      	str	r0, [sp, #24]
   16bf2:	9806      	ldr	r0, [sp, #24]
   16bf4:	9907      	ldr	r1, [sp, #28]
   16bf6:	9001      	str	r0, [sp, #4]
   16bf8:	9100      	str	r1, [sp, #0]
   16bfa:	e7ff      	b.n	16bfc <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE+0x28>
   16bfc:	9801      	ldr	r0, [sp, #4]
   16bfe:	9900      	ldr	r1, [sp, #0]
   16c00:	b008      	add	sp, #32
   16c02:	bdb0      	pop	{r4, r5, r7, pc}

00016c04 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>:
    fn le(&self, other: &LevelFilter) -> bool {
   16c04:	b082      	sub	sp, #8
   16c06:	9000      	str	r0, [sp, #0]
   16c08:	9101      	str	r1, [sp, #4]
        *self as usize <= *other as usize
   16c0a:	6800      	ldr	r0, [r0, #0]
   16c0c:	6809      	ldr	r1, [r1, #0]
   16c0e:	2200      	movs	r2, #0
   16c10:	4288      	cmp	r0, r1
   16c12:	bf98      	it	ls
   16c14:	2201      	movls	r2, #1
    }
   16c16:	4610      	mov	r0, r2
   16c18:	b002      	add	sp, #8
   16c1a:	4770      	bx	lr

00016c1c <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E>:
   16c1c:	b081      	sub	sp, #4
   16c1e:	4601      	mov	r1, r0
   16c20:	f88d 0003 	strb.w	r0, [sp, #3]
   16c24:	b2c0      	uxtb	r0, r0
   16c26:	b001      	add	sp, #4
   16c28:	4770      	bx	lr

00016c2a <_ZN4core3mem4swap17h206518364108b51fE>:
   16c2a:	b580      	push	{r7, lr}
   16c2c:	b082      	sub	sp, #8
   16c2e:	9000      	str	r0, [sp, #0]
   16c30:	9101      	str	r1, [sp, #4]
   16c32:	f000 fc55 	bl	174e0 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE>
   16c36:	e7ff      	b.n	16c38 <_ZN4core3mem4swap17h206518364108b51fE+0xe>
   16c38:	b002      	add	sp, #8
   16c3a:	bd80      	pop	{r7, pc}

00016c3c <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE>:
   16c3c:	b580      	push	{r7, lr}
   16c3e:	b088      	sub	sp, #32
   16c40:	9004      	str	r0, [sp, #16]
   16c42:	9105      	str	r1, [sp, #20]
   16c44:	9206      	str	r2, [sp, #24]
   16c46:	9307      	str	r3, [sp, #28]
   16c48:	9003      	str	r0, [sp, #12]
   16c4a:	4610      	mov	r0, r2
   16c4c:	9102      	str	r1, [sp, #8]
   16c4e:	4619      	mov	r1, r3
   16c50:	9a03      	ldr	r2, [sp, #12]
   16c52:	9b02      	ldr	r3, [sp, #8]
   16c54:	f7f1 ffce 	bl	8bf4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
   16c58:	9001      	str	r0, [sp, #4]
   16c5a:	9100      	str	r1, [sp, #0]
   16c5c:	e7ff      	b.n	16c5e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE+0x22>
   16c5e:	9801      	ldr	r0, [sp, #4]
   16c60:	9900      	ldr	r1, [sp, #0]
   16c62:	b008      	add	sp, #32
   16c64:	bd80      	pop	{r7, pc}

00016c66 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE>:
   16c66:	b082      	sub	sp, #8
   16c68:	9000      	str	r0, [sp, #0]
   16c6a:	9101      	str	r1, [sp, #4]
   16c6c:	7800      	ldrb	r0, [r0, #0]
   16c6e:	7809      	ldrb	r1, [r1, #0]
   16c70:	2200      	movs	r2, #0
   16c72:	4288      	cmp	r0, r1
   16c74:	bf38      	it	cc
   16c76:	2201      	movcc	r2, #1
   16c78:	4610      	mov	r0, r2
   16c7a:	b002      	add	sp, #8
   16c7c:	4770      	bx	lr

00016c7e <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE>:
   16c7e:	b580      	push	{r7, lr}
   16c80:	b088      	sub	sp, #32
   16c82:	9005      	str	r0, [sp, #20]
   16c84:	9106      	str	r1, [sp, #24]
   16c86:	9002      	str	r0, [sp, #8]
   16c88:	4608      	mov	r0, r1
   16c8a:	f000 fd04 	bl	17696 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE>
   16c8e:	f88d 1011 	strb.w	r1, [sp, #17]
   16c92:	f88d 0010 	strb.w	r0, [sp, #16]
   16c96:	e7ff      	b.n	16c98 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x1a>
   16c98:	f89d 0010 	ldrb.w	r0, [sp, #16]
   16c9c:	07c1      	lsls	r1, r0, #31
   16c9e:	2900      	cmp	r1, #0
   16ca0:	d005      	beq.n	16cae <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x30>
   16ca2:	e7ff      	b.n	16ca4 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x26>
   16ca4:	2000      	movs	r0, #0
   16ca6:	f88d 000c 	strb.w	r0, [sp, #12]
   16caa:	e011      	b.n	16cd0 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x52>
   16cac:	defe      	udf	#254	; 0xfe
   16cae:	f89d 0011 	ldrb.w	r0, [sp, #17]
   16cb2:	f88d 001f 	strb.w	r0, [sp, #31]
   16cb6:	9902      	ldr	r1, [sp, #8]
   16cb8:	780a      	ldrb	r2, [r1, #0]
   16cba:	9001      	str	r0, [sp, #4]
   16cbc:	4610      	mov	r0, r2
   16cbe:	9901      	ldr	r1, [sp, #4]
   16cc0:	f7ff fe9e 	bl	16a00 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E>
   16cc4:	f88d 100d 	strb.w	r1, [sp, #13]
   16cc8:	f88d 000c 	strb.w	r0, [sp, #12]
   16ccc:	e7ff      	b.n	16cce <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x50>
   16cce:	e7ff      	b.n	16cd0 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x52>
   16cd0:	f89d 000c 	ldrb.w	r0, [sp, #12]
   16cd4:	f89d 100d 	ldrb.w	r1, [sp, #13]
   16cd8:	b008      	add	sp, #32
   16cda:	bd80      	pop	{r7, pc}

00016cdc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   16cdc:	b580      	push	{r7, lr}
   16cde:	b088      	sub	sp, #32
   16ce0:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   16ce2:	1d01      	adds	r1, r0, #4
   16ce4:	9106      	str	r1, [sp, #24]
   16ce6:	9107      	str	r1, [sp, #28]
   16ce8:	9004      	str	r0, [sp, #16]
   16cea:	9103      	str	r1, [sp, #12]
   16cec:	e7ff      	b.n	16cee <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x12>
   16cee:	9804      	ldr	r0, [sp, #16]
   16cf0:	6801      	ldr	r1, [r0, #0]
   16cf2:	9803      	ldr	r0, [sp, #12]
   16cf4:	f7f2 f82e 	bl	8d54 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   16cf8:	9002      	str	r0, [sp, #8]
   16cfa:	9101      	str	r1, [sp, #4]
   16cfc:	e7ff      	b.n	16cfe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x22>
    }
   16cfe:	9802      	ldr	r0, [sp, #8]
   16d00:	9901      	ldr	r1, [sp, #4]
   16d02:	b008      	add	sp, #32
   16d04:	bd80      	pop	{r7, pc}

00016d06 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   16d06:	b580      	push	{r7, lr}
   16d08:	b088      	sub	sp, #32
   16d0a:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   16d0c:	1d01      	adds	r1, r0, #4
   16d0e:	9106      	str	r1, [sp, #24]
   16d10:	9107      	str	r1, [sp, #28]
   16d12:	9004      	str	r0, [sp, #16]
   16d14:	9103      	str	r1, [sp, #12]
   16d16:	e7ff      	b.n	16d18 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE+0x12>
   16d18:	9804      	ldr	r0, [sp, #16]
   16d1a:	6801      	ldr	r1, [r0, #0]
   16d1c:	9803      	ldr	r0, [sp, #12]
   16d1e:	f7f2 f819 	bl	8d54 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   16d22:	9002      	str	r0, [sp, #8]
   16d24:	9101      	str	r1, [sp, #4]
   16d26:	e7ff      	b.n	16d28 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE+0x22>
    }
   16d28:	9802      	ldr	r0, [sp, #8]
   16d2a:	9901      	ldr	r1, [sp, #4]
   16d2c:	b008      	add	sp, #32
   16d2e:	bd80      	pop	{r7, pc}

00016d30 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   16d30:	b580      	push	{r7, lr}
   16d32:	b08a      	sub	sp, #40	; 0x28
   16d34:	460a      	mov	r2, r1
   16d36:	9006      	str	r0, [sp, #24]
   16d38:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   16d3c:	1d01      	adds	r1, r0, #4
   16d3e:	9108      	str	r1, [sp, #32]
   16d40:	9109      	str	r1, [sp, #36]	; 0x24
   16d42:	9005      	str	r0, [sp, #20]
   16d44:	9204      	str	r2, [sp, #16]
   16d46:	9103      	str	r1, [sp, #12]
   16d48:	e7ff      	b.n	16d4a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x1a>
            .add(self.len)
   16d4a:	9805      	ldr	r0, [sp, #20]
   16d4c:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   16d4e:	9803      	ldr	r0, [sp, #12]
   16d50:	f7fb f80b 	bl	11d6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   16d54:	9002      	str	r0, [sp, #8]
   16d56:	e7ff      	b.n	16d58 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x28>
   16d58:	9802      	ldr	r0, [sp, #8]
   16d5a:	9904      	ldr	r1, [sp, #16]
   16d5c:	f000 f994 	bl	17088 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   16d60:	e7ff      	b.n	16d62 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x32>
        self.len += 1;
   16d62:	9805      	ldr	r0, [sp, #20]
   16d64:	6801      	ldr	r1, [r0, #0]
   16d66:	1c4a      	adds	r2, r1, #1
   16d68:	4613      	mov	r3, r2
   16d6a:	428a      	cmp	r2, r1
   16d6c:	9301      	str	r3, [sp, #4]
   16d6e:	d305      	bcc.n	16d7c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x4c>
   16d70:	e7ff      	b.n	16d72 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x42>
   16d72:	9801      	ldr	r0, [sp, #4]
   16d74:	9905      	ldr	r1, [sp, #20]
   16d76:	6008      	str	r0, [r1, #0]
    }
   16d78:	b00a      	add	sp, #40	; 0x28
   16d7a:	bd80      	pop	{r7, pc}
        self.len += 1;
   16d7c:	f640 10f0 	movw	r0, #2544	; 0x9f0
   16d80:	f2c0 0002 	movt	r0, #2
   16d84:	f640 12dc 	movw	r2, #2524	; 0x9dc
   16d88:	f2c0 0202 	movt	r2, #2
   16d8c:	211c      	movs	r1, #28
   16d8e:	f000 fdbb 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16d92:	defe      	udf	#254	; 0xfe

00016d94 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   16d94:	b580      	push	{r7, lr}
   16d96:	b08a      	sub	sp, #40	; 0x28
   16d98:	460a      	mov	r2, r1
   16d9a:	9006      	str	r0, [sp, #24]
   16d9c:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   16da0:	1d01      	adds	r1, r0, #4
   16da2:	9108      	str	r1, [sp, #32]
   16da4:	9109      	str	r1, [sp, #36]	; 0x24
   16da6:	9005      	str	r0, [sp, #20]
   16da8:	9204      	str	r2, [sp, #16]
   16daa:	9103      	str	r1, [sp, #12]
   16dac:	e7ff      	b.n	16dae <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x1a>
            .add(self.len)
   16dae:	9805      	ldr	r0, [sp, #20]
   16db0:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   16db2:	9803      	ldr	r0, [sp, #12]
   16db4:	f7fa ffd9 	bl	11d6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   16db8:	9002      	str	r0, [sp, #8]
   16dba:	e7ff      	b.n	16dbc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x28>
   16dbc:	9802      	ldr	r0, [sp, #8]
   16dbe:	9904      	ldr	r1, [sp, #16]
   16dc0:	f000 f962 	bl	17088 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   16dc4:	e7ff      	b.n	16dc6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x32>
        self.len += 1;
   16dc6:	9805      	ldr	r0, [sp, #20]
   16dc8:	6801      	ldr	r1, [r0, #0]
   16dca:	1c4a      	adds	r2, r1, #1
   16dcc:	4613      	mov	r3, r2
   16dce:	428a      	cmp	r2, r1
   16dd0:	9301      	str	r3, [sp, #4]
   16dd2:	d305      	bcc.n	16de0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x4c>
   16dd4:	e7ff      	b.n	16dd6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x42>
   16dd6:	9801      	ldr	r0, [sp, #4]
   16dd8:	9905      	ldr	r1, [sp, #20]
   16dda:	6008      	str	r0, [r1, #0]
    }
   16ddc:	b00a      	add	sp, #40	; 0x28
   16dde:	bd80      	pop	{r7, pc}
        self.len += 1;
   16de0:	f640 10f0 	movw	r0, #2544	; 0x9f0
   16de4:	f2c0 0002 	movt	r0, #2
   16de8:	f640 12dc 	movw	r2, #2524	; 0x9dc
   16dec:	f2c0 0202 	movt	r2, #2
   16df0:	211c      	movs	r1, #28
   16df2:	f000 fd89 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16df6:	defe      	udf	#254	; 0xfe

00016df8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   16df8:	b580      	push	{r7, lr}
   16dfa:	b094      	sub	sp, #80	; 0x50
   16dfc:	900e      	str	r0, [sp, #56]	; 0x38
   16dfe:	910f      	str	r1, [sp, #60]	; 0x3c
   16e00:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   16e02:	6803      	ldr	r3, [r0, #0]
   16e04:	9009      	str	r0, [sp, #36]	; 0x24
   16e06:	4608      	mov	r0, r1
   16e08:	9108      	str	r1, [sp, #32]
   16e0a:	4611      	mov	r1, r2
   16e0c:	9207      	str	r2, [sp, #28]
   16e0e:	9306      	str	r3, [sp, #24]
   16e10:	f7fb f83b 	bl	11e8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   16e14:	9005      	str	r0, [sp, #20]
   16e16:	e7ff      	b.n	16e18 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x20>
   16e18:	9806      	ldr	r0, [sp, #24]
   16e1a:	9905      	ldr	r1, [sp, #20]
   16e1c:	1842      	adds	r2, r0, r1
   16e1e:	4613      	mov	r3, r2
   16e20:	4282      	cmp	r2, r0
   16e22:	9304      	str	r3, [sp, #16]
   16e24:	d33f      	bcc.n	16ea6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xae>
   16e26:	e7ff      	b.n	16e28 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x30>
   16e28:	9809      	ldr	r0, [sp, #36]	; 0x24
   16e2a:	f000 f8b7 	bl	16f9c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>
   16e2e:	9003      	str	r0, [sp, #12]
   16e30:	e7ff      	b.n	16e32 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x3a>
   16e32:	9804      	ldr	r0, [sp, #16]
   16e34:	9903      	ldr	r1, [sp, #12]
   16e36:	4288      	cmp	r0, r1
   16e38:	d807      	bhi.n	16e4a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x52>
   16e3a:	e7ff      	b.n	16e3c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x44>
            for elem in other {
   16e3c:	9808      	ldr	r0, [sp, #32]
   16e3e:	9907      	ldr	r1, [sp, #28]
   16e40:	f7f2 f8a6 	bl	8f90 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>
   16e44:	9002      	str	r0, [sp, #8]
   16e46:	9101      	str	r1, [sp, #4]
   16e48:	e003      	b.n	16e52 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x5a>
   16e4a:	2001      	movs	r0, #1
            Err(())
   16e4c:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   16e50:	e025      	b.n	16e9e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa6>
            for elem in other {
   16e52:	9802      	ldr	r0, [sp, #8]
   16e54:	900b      	str	r0, [sp, #44]	; 0x2c
   16e56:	9901      	ldr	r1, [sp, #4]
   16e58:	910c      	str	r1, [sp, #48]	; 0x30
   16e5a:	e7ff      	b.n	16e5c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x64>
   16e5c:	a80b      	add	r0, sp, #44	; 0x2c
   16e5e:	f7fa fbe6 	bl	1162e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>
   16e62:	900d      	str	r0, [sp, #52]	; 0x34
   16e64:	e7ff      	b.n	16e66 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x6e>
   16e66:	980d      	ldr	r0, [sp, #52]	; 0x34
   16e68:	2800      	cmp	r0, #0
   16e6a:	4601      	mov	r1, r0
   16e6c:	bf18      	it	ne
   16e6e:	2101      	movne	r1, #1
   16e70:	2800      	cmp	r0, #0
   16e72:	d001      	beq.n	16e78 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x80>
   16e74:	e7ff      	b.n	16e76 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x7e>
   16e76:	e004      	b.n	16e82 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x8a>
   16e78:	2000      	movs	r0, #0
            Ok(())
   16e7a:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   16e7e:	e00e      	b.n	16e9e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa6>
            for elem in other {
   16e80:	defe      	udf	#254	; 0xfe
   16e82:	980d      	ldr	r0, [sp, #52]	; 0x34
   16e84:	9011      	str	r0, [sp, #68]	; 0x44
   16e86:	9012      	str	r0, [sp, #72]	; 0x48
   16e88:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   16e8a:	f000 f909 	bl	170a0 <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>
   16e8e:	9000      	str	r0, [sp, #0]
   16e90:	e7ff      	b.n	16e92 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x9a>
   16e92:	9809      	ldr	r0, [sp, #36]	; 0x24
   16e94:	9900      	ldr	r1, [sp, #0]
   16e96:	f7ff ff7d 	bl	16d94 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE>
   16e9a:	e7ff      	b.n	16e9c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa4>
            for elem in other {
   16e9c:	e7de      	b.n	16e5c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x64>
    }
   16e9e:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   16ea2:	b014      	add	sp, #80	; 0x50
   16ea4:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   16ea6:	f640 10f0 	movw	r0, #2544	; 0x9f0
   16eaa:	f2c0 0002 	movt	r0, #2
   16eae:	f640 220c 	movw	r2, #2572	; 0xa0c
   16eb2:	f2c0 0202 	movt	r2, #2
   16eb6:	211c      	movs	r1, #28
   16eb8:	f000 fd26 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16ebc:	defe      	udf	#254	; 0xfe

00016ebe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   16ebe:	b580      	push	{r7, lr}
   16ec0:	b088      	sub	sp, #32
   16ec2:	460a      	mov	r2, r1
   16ec4:	9006      	str	r0, [sp, #24]
   16ec6:	f88d 101f 	strb.w	r1, [sp, #31]
        if self.len < self.capacity() {
   16eca:	6801      	ldr	r1, [r0, #0]
   16ecc:	9004      	str	r0, [sp, #16]
   16ece:	9203      	str	r2, [sp, #12]
   16ed0:	9102      	str	r1, [sp, #8]
   16ed2:	f000 f859 	bl	16f88 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>
   16ed6:	9001      	str	r0, [sp, #4]
   16ed8:	e7ff      	b.n	16eda <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x1c>
   16eda:	9802      	ldr	r0, [sp, #8]
   16edc:	9901      	ldr	r1, [sp, #4]
   16ede:	4288      	cmp	r0, r1
   16ee0:	d307      	bcc.n	16ef2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x34>
   16ee2:	e7ff      	b.n	16ee4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x26>
            Err(item)
   16ee4:	9803      	ldr	r0, [sp, #12]
   16ee6:	f88d 0015 	strb.w	r0, [sp, #21]
   16eea:	2101      	movs	r1, #1
   16eec:	f88d 1014 	strb.w	r1, [sp, #20]
        if self.len < self.capacity() {
   16ef0:	e008      	b.n	16f04 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
            unsafe { self.push_unchecked(item) }
   16ef2:	9804      	ldr	r0, [sp, #16]
   16ef4:	9903      	ldr	r1, [sp, #12]
   16ef6:	f7ff ff1b 	bl	16d30 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>
   16efa:	e7ff      	b.n	16efc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x3e>
   16efc:	2000      	movs	r0, #0
            Ok(())
   16efe:	f88d 0014 	strb.w	r0, [sp, #20]
        if self.len < self.capacity() {
   16f02:	e7ff      	b.n	16f04 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
    }
   16f04:	f89d 0014 	ldrb.w	r0, [sp, #20]
   16f08:	f89d 1015 	ldrb.w	r1, [sp, #21]
   16f0c:	b008      	add	sp, #32
   16f0e:	bd80      	pop	{r7, pc}

00016f10 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>:
    pub(crate) fn clear(&mut self) {
   16f10:	b580      	push	{r7, lr}
   16f12:	b082      	sub	sp, #8
   16f14:	9001      	str	r0, [sp, #4]
   16f16:	2100      	movs	r1, #0
        self.truncate(0);
   16f18:	f000 f880 	bl	1701c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>
   16f1c:	e7ff      	b.n	16f1e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E+0xe>
    }
   16f1e:	b002      	add	sp, #8
   16f20:	bd80      	pop	{r7, pc}

00016f22 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E>:
    pub(crate) fn clear(&mut self) {
   16f22:	b580      	push	{r7, lr}
   16f24:	b082      	sub	sp, #8
   16f26:	9001      	str	r0, [sp, #4]
   16f28:	2100      	movs	r1, #0
        self.truncate(0);
   16f2a:	f000 f841 	bl	16fb0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E>
   16f2e:	e7ff      	b.n	16f30 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E+0xe>
    }
   16f30:	b002      	add	sp, #8
   16f32:	bd80      	pop	{r7, pc}

00016f34 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E>:
    pub(crate) fn as_slice(&self) -> &[T] {
   16f34:	b580      	push	{r7, lr}
   16f36:	b088      	sub	sp, #32
   16f38:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   16f3a:	1d01      	adds	r1, r0, #4
   16f3c:	9106      	str	r1, [sp, #24]
   16f3e:	9107      	str	r1, [sp, #28]
   16f40:	9004      	str	r0, [sp, #16]
   16f42:	9103      	str	r1, [sp, #12]
   16f44:	e7ff      	b.n	16f46 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E+0x12>
   16f46:	9804      	ldr	r0, [sp, #16]
   16f48:	6801      	ldr	r1, [r0, #0]
   16f4a:	9803      	ldr	r0, [sp, #12]
   16f4c:	f7fb fbb1 	bl	126b2 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   16f50:	9002      	str	r0, [sp, #8]
   16f52:	9101      	str	r1, [sp, #4]
   16f54:	e7ff      	b.n	16f56 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E+0x22>
    }
   16f56:	9802      	ldr	r0, [sp, #8]
   16f58:	9901      	ldr	r1, [sp, #4]
   16f5a:	b008      	add	sp, #32
   16f5c:	bd80      	pop	{r7, pc}

00016f5e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   16f5e:	b580      	push	{r7, lr}
   16f60:	b088      	sub	sp, #32
   16f62:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   16f64:	1d01      	adds	r1, r0, #4
   16f66:	9106      	str	r1, [sp, #24]
   16f68:	9107      	str	r1, [sp, #28]
   16f6a:	9004      	str	r0, [sp, #16]
   16f6c:	9103      	str	r1, [sp, #12]
   16f6e:	e7ff      	b.n	16f70 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x12>
   16f70:	9804      	ldr	r0, [sp, #16]
   16f72:	6801      	ldr	r1, [r0, #0]
   16f74:	9803      	ldr	r0, [sp, #12]
   16f76:	f7fb fb9c 	bl	126b2 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   16f7a:	9002      	str	r0, [sp, #8]
   16f7c:	9101      	str	r1, [sp, #4]
   16f7e:	e7ff      	b.n	16f80 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x22>
    }
   16f80:	9802      	ldr	r0, [sp, #8]
   16f82:	9901      	ldr	r1, [sp, #4]
   16f84:	b008      	add	sp, #32
   16f86:	bd80      	pop	{r7, pc}

00016f88 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>:
    pub(crate) fn capacity(&self) -> usize {
   16f88:	b580      	push	{r7, lr}
   16f8a:	b082      	sub	sp, #8
   16f8c:	9001      	str	r0, [sp, #4]
        N::to_usize()
   16f8e:	f000 f964 	bl	1725a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   16f92:	9000      	str	r0, [sp, #0]
   16f94:	e7ff      	b.n	16f96 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E+0xe>
    }
   16f96:	9800      	ldr	r0, [sp, #0]
   16f98:	b002      	add	sp, #8
   16f9a:	bd80      	pop	{r7, pc}

00016f9c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>:
    pub(crate) fn capacity(&self) -> usize {
   16f9c:	b580      	push	{r7, lr}
   16f9e:	b082      	sub	sp, #8
   16fa0:	9001      	str	r0, [sp, #4]
        N::to_usize()
   16fa2:	f000 f8b2 	bl	1710a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E>
   16fa6:	9000      	str	r0, [sp, #0]
   16fa8:	e7ff      	b.n	16faa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE+0xe>
    }
   16faa:	9800      	ldr	r0, [sp, #0]
   16fac:	b002      	add	sp, #8
   16fae:	bd80      	pop	{r7, pc}

00016fb0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   16fb0:	b580      	push	{r7, lr}
   16fb2:	b08a      	sub	sp, #40	; 0x28
   16fb4:	9007      	str	r0, [sp, #28]
   16fb6:	9108      	str	r1, [sp, #32]
   16fb8:	9106      	str	r1, [sp, #24]
   16fba:	9005      	str	r0, [sp, #20]
   16fbc:	e7ff      	b.n	16fbe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0xe>
            while len < self.len {
   16fbe:	9805      	ldr	r0, [sp, #20]
   16fc0:	6801      	ldr	r1, [r0, #0]
   16fc2:	9a06      	ldr	r2, [sp, #24]
   16fc4:	428a      	cmp	r2, r1
   16fc6:	d302      	bcc.n	16fce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x1e>
   16fc8:	e7ff      	b.n	16fca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x1a>
    }
   16fca:	b00a      	add	sp, #40	; 0x28
   16fcc:	bd80      	pop	{r7, pc}
                self.len -= 1;
   16fce:	9805      	ldr	r0, [sp, #20]
   16fd0:	6801      	ldr	r1, [r0, #0]
   16fd2:	1e4a      	subs	r2, r1, #1
   16fd4:	2901      	cmp	r1, #1
   16fd6:	9204      	str	r2, [sp, #16]
   16fd8:	d314      	bcc.n	17004 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x54>
   16fda:	e7ff      	b.n	16fdc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x2c>
   16fdc:	9804      	ldr	r0, [sp, #16]
   16fde:	9905      	ldr	r1, [sp, #20]
   16fe0:	6008      	str	r0, [r1, #0]
                let len = self.len;
   16fe2:	680a      	ldr	r2, [r1, #0]
   16fe4:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   16fe6:	4608      	mov	r0, r1
   16fe8:	9203      	str	r2, [sp, #12]
   16fea:	f7ff fe8c 	bl	16d06 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE>
   16fee:	9002      	str	r0, [sp, #8]
   16ff0:	9101      	str	r1, [sp, #4]
   16ff2:	e7ff      	b.n	16ff4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x44>
   16ff4:	9802      	ldr	r0, [sp, #8]
   16ff6:	9901      	ldr	r1, [sp, #4]
   16ff8:	9a03      	ldr	r2, [sp, #12]
   16ffa:	f7fa ff34 	bl	11e66 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   16ffe:	e7ff      	b.n	17000 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x50>
   17000:	e7ff      	b.n	17002 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x52>
            while len < self.len {
   17002:	e7dc      	b.n	16fbe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0xe>
                self.len -= 1;
   17004:	f640 2030 	movw	r0, #2608	; 0xa30
   17008:	f2c0 0002 	movt	r0, #2
   1700c:	f640 221c 	movw	r2, #2588	; 0xa1c
   17010:	f2c0 0202 	movt	r2, #2
   17014:	2121      	movs	r1, #33	; 0x21
   17016:	f000 fc77 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1701a:	defe      	udf	#254	; 0xfe

0001701c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   1701c:	b580      	push	{r7, lr}
   1701e:	b08a      	sub	sp, #40	; 0x28
   17020:	9007      	str	r0, [sp, #28]
   17022:	9108      	str	r1, [sp, #32]
   17024:	9106      	str	r1, [sp, #24]
   17026:	9005      	str	r0, [sp, #20]
   17028:	e7ff      	b.n	1702a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
            while len < self.len {
   1702a:	9805      	ldr	r0, [sp, #20]
   1702c:	6801      	ldr	r1, [r0, #0]
   1702e:	9a06      	ldr	r2, [sp, #24]
   17030:	428a      	cmp	r2, r1
   17032:	d302      	bcc.n	1703a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1e>
   17034:	e7ff      	b.n	17036 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1a>
    }
   17036:	b00a      	add	sp, #40	; 0x28
   17038:	bd80      	pop	{r7, pc}
                self.len -= 1;
   1703a:	9805      	ldr	r0, [sp, #20]
   1703c:	6801      	ldr	r1, [r0, #0]
   1703e:	1e4a      	subs	r2, r1, #1
   17040:	2901      	cmp	r1, #1
   17042:	9204      	str	r2, [sp, #16]
   17044:	d314      	bcc.n	17070 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x54>
   17046:	e7ff      	b.n	17048 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x2c>
   17048:	9804      	ldr	r0, [sp, #16]
   1704a:	9905      	ldr	r1, [sp, #20]
   1704c:	6008      	str	r0, [r1, #0]
                let len = self.len;
   1704e:	680a      	ldr	r2, [r1, #0]
   17050:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   17052:	4608      	mov	r0, r1
   17054:	9203      	str	r2, [sp, #12]
   17056:	f7ff fe41 	bl	16cdc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>
   1705a:	9002      	str	r0, [sp, #8]
   1705c:	9101      	str	r1, [sp, #4]
   1705e:	e7ff      	b.n	17060 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x44>
   17060:	9802      	ldr	r0, [sp, #8]
   17062:	9901      	ldr	r1, [sp, #4]
   17064:	9a03      	ldr	r2, [sp, #12]
   17066:	f7fa fefe 	bl	11e66 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   1706a:	e7ff      	b.n	1706c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x50>
   1706c:	e7ff      	b.n	1706e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x52>
            while len < self.len {
   1706e:	e7dc      	b.n	1702a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
                self.len -= 1;
   17070:	f640 2030 	movw	r0, #2608	; 0xa30
   17074:	f2c0 0002 	movt	r0, #2
   17078:	f640 221c 	movw	r2, #2588	; 0xa1c
   1707c:	f2c0 0202 	movt	r2, #2
   17080:	2121      	movs	r1, #33	; 0x21
   17082:	f000 fc41 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17086:	defe      	udf	#254	; 0xfe

00017088 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>:
   17088:	b580      	push	{r7, lr}
   1708a:	b084      	sub	sp, #16
   1708c:	460a      	mov	r2, r1
   1708e:	9002      	str	r0, [sp, #8]
   17090:	f88d 100f 	strb.w	r1, [sp, #15]
   17094:	9201      	str	r2, [sp, #4]
   17096:	f7f2 f803 	bl	90a0 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   1709a:	e7ff      	b.n	1709c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE+0x14>
   1709c:	b004      	add	sp, #16
   1709e:	bd80      	pop	{r7, pc}

000170a0 <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>:
   170a0:	b081      	sub	sp, #4
   170a2:	9000      	str	r0, [sp, #0]
   170a4:	7800      	ldrb	r0, [r0, #0]
   170a6:	b001      	add	sp, #4
   170a8:	4770      	bx	lr

000170aa <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>:
    fn to_usize() -> usize {
   170aa:	b580      	push	{r7, lr}
   170ac:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   170ae:	f000 fb0b 	bl	176c8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   170b2:	9003      	str	r0, [sp, #12]
   170b4:	e7ff      	b.n	170b6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0xc>
   170b6:	9803      	ldr	r0, [sp, #12]
   170b8:	f000 fb0c 	bl	176d4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   170bc:	9002      	str	r0, [sp, #8]
   170be:	e7ff      	b.n	170c0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x16>
   170c0:	f000 f8cb 	bl	1725a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   170c4:	9001      	str	r0, [sp, #4]
   170c6:	e7ff      	b.n	170c8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x1e>
   170c8:	9801      	ldr	r0, [sp, #4]
   170ca:	0041      	lsls	r1, r0, #1
   170cc:	9100      	str	r1, [sp, #0]
   170ce:	e7ff      	b.n	170d0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x26>
   170d0:	9802      	ldr	r0, [sp, #8]
   170d2:	9900      	ldr	r1, [sp, #0]
   170d4:	4308      	orrs	r0, r1
    }
   170d6:	b004      	add	sp, #16
   170d8:	bd80      	pop	{r7, pc}

000170da <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>:
    fn to_usize() -> usize {
   170da:	b580      	push	{r7, lr}
   170dc:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   170de:	f000 faf3 	bl	176c8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   170e2:	9003      	str	r0, [sp, #12]
   170e4:	e7ff      	b.n	170e6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0xc>
   170e6:	9803      	ldr	r0, [sp, #12]
   170e8:	f000 faf4 	bl	176d4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   170ec:	9002      	str	r0, [sp, #8]
   170ee:	e7ff      	b.n	170f0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x16>
   170f0:	f000 f86b 	bl	171ca <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>
   170f4:	9001      	str	r0, [sp, #4]
   170f6:	e7ff      	b.n	170f8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x1e>
   170f8:	9801      	ldr	r0, [sp, #4]
   170fa:	0041      	lsls	r1, r0, #1
   170fc:	9100      	str	r1, [sp, #0]
   170fe:	e7ff      	b.n	17100 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x26>
   17100:	9802      	ldr	r0, [sp, #8]
   17102:	9900      	ldr	r1, [sp, #0]
   17104:	4308      	orrs	r0, r1
    }
   17106:	b004      	add	sp, #16
   17108:	bd80      	pop	{r7, pc}

0001710a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E>:
    fn to_usize() -> usize {
   1710a:	b580      	push	{r7, lr}
   1710c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1710e:	f000 fadb 	bl	176c8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17112:	9003      	str	r0, [sp, #12]
   17114:	e7ff      	b.n	17116 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0xc>
   17116:	9803      	ldr	r0, [sp, #12]
   17118:	f000 fadc 	bl	176d4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1711c:	9002      	str	r0, [sp, #8]
   1711e:	e7ff      	b.n	17120 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x16>
   17120:	f000 f8fb 	bl	1731a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>
   17124:	9001      	str	r0, [sp, #4]
   17126:	e7ff      	b.n	17128 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x1e>
   17128:	9801      	ldr	r0, [sp, #4]
   1712a:	0041      	lsls	r1, r0, #1
   1712c:	9100      	str	r1, [sp, #0]
   1712e:	e7ff      	b.n	17130 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x26>
   17130:	9802      	ldr	r0, [sp, #8]
   17132:	9900      	ldr	r1, [sp, #0]
   17134:	4308      	orrs	r0, r1
    }
   17136:	b004      	add	sp, #16
   17138:	bd80      	pop	{r7, pc}

0001713a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>:
    fn to_usize() -> usize {
   1713a:	b580      	push	{r7, lr}
   1713c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1713e:	f000 fac3 	bl	176c8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17142:	9003      	str	r0, [sp, #12]
   17144:	e7ff      	b.n	17146 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0xc>
   17146:	9803      	ldr	r0, [sp, #12]
   17148:	f000 fac4 	bl	176d4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1714c:	9002      	str	r0, [sp, #8]
   1714e:	e7ff      	b.n	17150 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x16>
   17150:	f000 f80b 	bl	1716a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>
   17154:	9001      	str	r0, [sp, #4]
   17156:	e7ff      	b.n	17158 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x1e>
   17158:	9801      	ldr	r0, [sp, #4]
   1715a:	0041      	lsls	r1, r0, #1
   1715c:	9100      	str	r1, [sp, #0]
   1715e:	e7ff      	b.n	17160 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x26>
   17160:	9802      	ldr	r0, [sp, #8]
   17162:	9900      	ldr	r1, [sp, #0]
   17164:	4308      	orrs	r0, r1
    }
   17166:	b004      	add	sp, #16
   17168:	bd80      	pop	{r7, pc}

0001716a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>:
    fn to_usize() -> usize {
   1716a:	b580      	push	{r7, lr}
   1716c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1716e:	f000 faab 	bl	176c8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17172:	9003      	str	r0, [sp, #12]
   17174:	e7ff      	b.n	17176 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0xc>
   17176:	9803      	ldr	r0, [sp, #12]
   17178:	f000 faac 	bl	176d4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1717c:	9002      	str	r0, [sp, #8]
   1717e:	e7ff      	b.n	17180 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x16>
   17180:	f000 f89b 	bl	172ba <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>
   17184:	9001      	str	r0, [sp, #4]
   17186:	e7ff      	b.n	17188 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x1e>
   17188:	9801      	ldr	r0, [sp, #4]
   1718a:	0041      	lsls	r1, r0, #1
   1718c:	9100      	str	r1, [sp, #0]
   1718e:	e7ff      	b.n	17190 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x26>
   17190:	9802      	ldr	r0, [sp, #8]
   17192:	9900      	ldr	r1, [sp, #0]
   17194:	4308      	orrs	r0, r1
    }
   17196:	b004      	add	sp, #16
   17198:	bd80      	pop	{r7, pc}

0001719a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>:
    fn to_usize() -> usize {
   1719a:	b580      	push	{r7, lr}
   1719c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1719e:	f000 fa93 	bl	176c8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   171a2:	9003      	str	r0, [sp, #12]
   171a4:	e7ff      	b.n	171a6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0xc>
   171a6:	9803      	ldr	r0, [sp, #12]
   171a8:	f000 fa94 	bl	176d4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   171ac:	9002      	str	r0, [sp, #8]
   171ae:	e7ff      	b.n	171b0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x16>
   171b0:	f7ff ff7b 	bl	170aa <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>
   171b4:	9001      	str	r0, [sp, #4]
   171b6:	e7ff      	b.n	171b8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x1e>
   171b8:	9801      	ldr	r0, [sp, #4]
   171ba:	0041      	lsls	r1, r0, #1
   171bc:	9100      	str	r1, [sp, #0]
   171be:	e7ff      	b.n	171c0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x26>
   171c0:	9802      	ldr	r0, [sp, #8]
   171c2:	9900      	ldr	r1, [sp, #0]
   171c4:	4308      	orrs	r0, r1
    }
   171c6:	b004      	add	sp, #16
   171c8:	bd80      	pop	{r7, pc}

000171ca <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>:
    fn to_usize() -> usize {
   171ca:	b580      	push	{r7, lr}
   171cc:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   171ce:	f000 fa7b 	bl	176c8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   171d2:	9003      	str	r0, [sp, #12]
   171d4:	e7ff      	b.n	171d6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0xc>
   171d6:	9803      	ldr	r0, [sp, #12]
   171d8:	f000 fa7c 	bl	176d4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   171dc:	9002      	str	r0, [sp, #8]
   171de:	e7ff      	b.n	171e0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x16>
   171e0:	f000 f823 	bl	1722a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>
   171e4:	9001      	str	r0, [sp, #4]
   171e6:	e7ff      	b.n	171e8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x1e>
   171e8:	9801      	ldr	r0, [sp, #4]
   171ea:	0041      	lsls	r1, r0, #1
   171ec:	9100      	str	r1, [sp, #0]
   171ee:	e7ff      	b.n	171f0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x26>
   171f0:	9802      	ldr	r0, [sp, #8]
   171f2:	9900      	ldr	r1, [sp, #0]
   171f4:	4308      	orrs	r0, r1
    }
   171f6:	b004      	add	sp, #16
   171f8:	bd80      	pop	{r7, pc}

000171fa <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>:
    fn to_usize() -> usize {
   171fa:	b580      	push	{r7, lr}
   171fc:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   171fe:	f000 fa63 	bl	176c8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17202:	9003      	str	r0, [sp, #12]
   17204:	e7ff      	b.n	17206 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0xc>
   17206:	9803      	ldr	r0, [sp, #12]
   17208:	f000 fa64 	bl	176d4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1720c:	9002      	str	r0, [sp, #8]
   1720e:	e7ff      	b.n	17210 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x16>
   17210:	f000 f86b 	bl	172ea <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>
   17214:	9001      	str	r0, [sp, #4]
   17216:	e7ff      	b.n	17218 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x1e>
   17218:	9801      	ldr	r0, [sp, #4]
   1721a:	0041      	lsls	r1, r0, #1
   1721c:	9100      	str	r1, [sp, #0]
   1721e:	e7ff      	b.n	17220 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x26>
   17220:	9802      	ldr	r0, [sp, #8]
   17222:	9900      	ldr	r1, [sp, #0]
   17224:	4308      	orrs	r0, r1
    }
   17226:	b004      	add	sp, #16
   17228:	bd80      	pop	{r7, pc}

0001722a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>:
    fn to_usize() -> usize {
   1722a:	b580      	push	{r7, lr}
   1722c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1722e:	f000 fa4b 	bl	176c8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17232:	9003      	str	r0, [sp, #12]
   17234:	e7ff      	b.n	17236 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0xc>
   17236:	9803      	ldr	r0, [sp, #12]
   17238:	f000 fa4c 	bl	176d4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1723c:	9002      	str	r0, [sp, #8]
   1723e:	e7ff      	b.n	17240 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x16>
   17240:	f000 f823 	bl	1728a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>
   17244:	9001      	str	r0, [sp, #4]
   17246:	e7ff      	b.n	17248 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x1e>
   17248:	9801      	ldr	r0, [sp, #4]
   1724a:	0041      	lsls	r1, r0, #1
   1724c:	9100      	str	r1, [sp, #0]
   1724e:	e7ff      	b.n	17250 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x26>
   17250:	9802      	ldr	r0, [sp, #8]
   17252:	9900      	ldr	r1, [sp, #0]
   17254:	4308      	orrs	r0, r1
    }
   17256:	b004      	add	sp, #16
   17258:	bd80      	pop	{r7, pc}

0001725a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>:
    fn to_usize() -> usize {
   1725a:	b580      	push	{r7, lr}
   1725c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1725e:	f000 fa35 	bl	176cc <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>
   17262:	9003      	str	r0, [sp, #12]
   17264:	e7ff      	b.n	17266 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0xc>
   17266:	9803      	ldr	r0, [sp, #12]
   17268:	f000 fa34 	bl	176d4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1726c:	9002      	str	r0, [sp, #8]
   1726e:	e7ff      	b.n	17270 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x16>
   17270:	f000 fa2e 	bl	176d0 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>
   17274:	9001      	str	r0, [sp, #4]
   17276:	e7ff      	b.n	17278 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x1e>
   17278:	9801      	ldr	r0, [sp, #4]
   1727a:	0041      	lsls	r1, r0, #1
   1727c:	9100      	str	r1, [sp, #0]
   1727e:	e7ff      	b.n	17280 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x26>
   17280:	9802      	ldr	r0, [sp, #8]
   17282:	9900      	ldr	r1, [sp, #0]
   17284:	4308      	orrs	r0, r1
    }
   17286:	b004      	add	sp, #16
   17288:	bd80      	pop	{r7, pc}

0001728a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>:
    fn to_usize() -> usize {
   1728a:	b580      	push	{r7, lr}
   1728c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1728e:	f000 fa1b 	bl	176c8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17292:	9003      	str	r0, [sp, #12]
   17294:	e7ff      	b.n	17296 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0xc>
   17296:	9803      	ldr	r0, [sp, #12]
   17298:	f000 fa1c 	bl	176d4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1729c:	9002      	str	r0, [sp, #8]
   1729e:	e7ff      	b.n	172a0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x16>
   172a0:	f7ff ff7b 	bl	1719a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>
   172a4:	9001      	str	r0, [sp, #4]
   172a6:	e7ff      	b.n	172a8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x1e>
   172a8:	9801      	ldr	r0, [sp, #4]
   172aa:	0041      	lsls	r1, r0, #1
   172ac:	9100      	str	r1, [sp, #0]
   172ae:	e7ff      	b.n	172b0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x26>
   172b0:	9802      	ldr	r0, [sp, #8]
   172b2:	9900      	ldr	r1, [sp, #0]
   172b4:	4308      	orrs	r0, r1
    }
   172b6:	b004      	add	sp, #16
   172b8:	bd80      	pop	{r7, pc}

000172ba <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>:
    fn to_usize() -> usize {
   172ba:	b580      	push	{r7, lr}
   172bc:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   172be:	f000 fa03 	bl	176c8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   172c2:	9003      	str	r0, [sp, #12]
   172c4:	e7ff      	b.n	172c6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0xc>
   172c6:	9803      	ldr	r0, [sp, #12]
   172c8:	f000 fa04 	bl	176d4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   172cc:	9002      	str	r0, [sp, #8]
   172ce:	e7ff      	b.n	172d0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x16>
   172d0:	f7ff ff03 	bl	170da <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>
   172d4:	9001      	str	r0, [sp, #4]
   172d6:	e7ff      	b.n	172d8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x1e>
   172d8:	9801      	ldr	r0, [sp, #4]
   172da:	0041      	lsls	r1, r0, #1
   172dc:	9100      	str	r1, [sp, #0]
   172de:	e7ff      	b.n	172e0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x26>
   172e0:	9802      	ldr	r0, [sp, #8]
   172e2:	9900      	ldr	r1, [sp, #0]
   172e4:	4308      	orrs	r0, r1
    }
   172e6:	b004      	add	sp, #16
   172e8:	bd80      	pop	{r7, pc}

000172ea <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>:
    fn to_usize() -> usize {
   172ea:	b580      	push	{r7, lr}
   172ec:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   172ee:	f000 f9eb 	bl	176c8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   172f2:	9003      	str	r0, [sp, #12]
   172f4:	e7ff      	b.n	172f6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0xc>
   172f6:	9803      	ldr	r0, [sp, #12]
   172f8:	f000 f9ec 	bl	176d4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   172fc:	9002      	str	r0, [sp, #8]
   172fe:	e7ff      	b.n	17300 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x16>
   17300:	f7ff ff1b 	bl	1713a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>
   17304:	9001      	str	r0, [sp, #4]
   17306:	e7ff      	b.n	17308 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x1e>
   17308:	9801      	ldr	r0, [sp, #4]
   1730a:	0041      	lsls	r1, r0, #1
   1730c:	9100      	str	r1, [sp, #0]
   1730e:	e7ff      	b.n	17310 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x26>
   17310:	9802      	ldr	r0, [sp, #8]
   17312:	9900      	ldr	r1, [sp, #0]
   17314:	4308      	orrs	r0, r1
    }
   17316:	b004      	add	sp, #16
   17318:	bd80      	pop	{r7, pc}

0001731a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>:
    fn to_usize() -> usize {
   1731a:	b580      	push	{r7, lr}
   1731c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1731e:	f000 f9d3 	bl	176c8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17322:	9003      	str	r0, [sp, #12]
   17324:	e7ff      	b.n	17326 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0xc>
   17326:	9803      	ldr	r0, [sp, #12]
   17328:	f000 f9d4 	bl	176d4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1732c:	9002      	str	r0, [sp, #8]
   1732e:	e7ff      	b.n	17330 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x16>
   17330:	f7ff ff63 	bl	171fa <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>
   17334:	9001      	str	r0, [sp, #4]
   17336:	e7ff      	b.n	17338 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x1e>
   17338:	9801      	ldr	r0, [sp, #4]
   1733a:	0041      	lsls	r1, r0, #1
   1733c:	9100      	str	r1, [sp, #0]
   1733e:	e7ff      	b.n	17340 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x26>
   17340:	9802      	ldr	r0, [sp, #8]
   17342:	9900      	ldr	r1, [sp, #0]
   17344:	4308      	orrs	r0, r1
    }
   17346:	b004      	add	sp, #16
   17348:	bd80      	pop	{r7, pc}

0001734a <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>:
impl Bit for B0 {
    const U8: u8 = 0;
    const BOOL: bool = false;

    #[inline]
    fn to_u8() -> u8 {
   1734a:	2000      	movs	r0, #0
        0
    }
   1734c:	4770      	bx	lr

0001734e <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>:
impl Bit for B1 {
    const U8: u8 = 1;
    const BOOL: bool = true;

    #[inline]
    fn to_u8() -> u8 {
   1734e:	2001      	movs	r0, #1
        1
    }
   17350:	4770      	bx	lr

00017352 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>:
   17352:	b580      	push	{r7, lr}
   17354:	b084      	sub	sp, #16
   17356:	9002      	str	r0, [sp, #8]
   17358:	9103      	str	r1, [sp, #12]
   1735a:	f000 f80f 	bl	1737c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>
   1735e:	9001      	str	r0, [sp, #4]
   17360:	e7ff      	b.n	17362 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E+0x10>
   17362:	9801      	ldr	r0, [sp, #4]
   17364:	b004      	add	sp, #16
   17366:	bd80      	pop	{r7, pc}

00017368 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>:
   17368:	b580      	push	{r7, lr}
   1736a:	b082      	sub	sp, #8
   1736c:	9001      	str	r0, [sp, #4]
   1736e:	f000 f873 	bl	17458 <_ZN4core3ptr4read17h27a035d1812d8297E>
   17372:	9000      	str	r0, [sp, #0]
   17374:	e7ff      	b.n	17376 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E+0xe>
   17376:	9800      	ldr	r0, [sp, #0]
   17378:	b002      	add	sp, #8
   1737a:	bd80      	pop	{r7, pc}

0001737c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>:
   1737c:	b084      	sub	sp, #16
   1737e:	9001      	str	r0, [sp, #4]
   17380:	9102      	str	r1, [sp, #8]
   17382:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   17386:	9003      	str	r0, [sp, #12]
   17388:	9803      	ldr	r0, [sp, #12]
   1738a:	9000      	str	r0, [sp, #0]
   1738c:	e7ff      	b.n	1738e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE+0x12>
   1738e:	9800      	ldr	r0, [sp, #0]
   17390:	b004      	add	sp, #16
   17392:	4770      	bx	lr

00017394 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>:
   17394:	b082      	sub	sp, #8
   17396:	9001      	str	r0, [sp, #4]
   17398:	9000      	str	r0, [sp, #0]
   1739a:	e7ff      	b.n	1739c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E+0x8>
   1739c:	9800      	ldr	r0, [sp, #0]
   1739e:	fab0 f180 	clz	r1, r0
   173a2:	0948      	lsrs	r0, r1, #5
   173a4:	b002      	add	sp, #8
   173a6:	4770      	bx	lr

000173a8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE>:
   173a8:	b580      	push	{r7, lr}
   173aa:	b088      	sub	sp, #32
   173ac:	9006      	str	r0, [sp, #24]
   173ae:	9107      	str	r1, [sp, #28]
   173b0:	9004      	str	r0, [sp, #16]
   173b2:	4608      	mov	r0, r1
   173b4:	9103      	str	r1, [sp, #12]
   173b6:	f001 f948 	bl	1864a <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   173ba:	9002      	str	r0, [sp, #8]
   173bc:	e7ff      	b.n	173be <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x16>
   173be:	9802      	ldr	r0, [sp, #8]
   173c0:	07c1      	lsls	r1, r0, #31
   173c2:	2900      	cmp	r1, #0
   173c4:	d105      	bne.n	173d2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x2a>
   173c6:	e7ff      	b.n	173c8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x20>
   173c8:	9803      	ldr	r0, [sp, #12]
   173ca:	f001 f942 	bl	18652 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   173ce:	9001      	str	r0, [sp, #4]
   173d0:	e007      	b.n	173e2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x3a>
   173d2:	9804      	ldr	r0, [sp, #16]
   173d4:	9903      	ldr	r1, [sp, #12]
   173d6:	f001 fea4 	bl	19122 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>
   173da:	f88d 0017 	strb.w	r0, [sp, #23]
   173de:	e7ff      	b.n	173e0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x38>
   173e0:	e015      	b.n	1740e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   173e2:	9801      	ldr	r0, [sp, #4]
   173e4:	07c1      	lsls	r1, r0, #31
   173e6:	2900      	cmp	r1, #0
   173e8:	d107      	bne.n	173fa <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x52>
   173ea:	e7ff      	b.n	173ec <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x44>
   173ec:	9804      	ldr	r0, [sp, #16]
   173ee:	9903      	ldr	r1, [sp, #12]
   173f0:	f002 f868 	bl	194c4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>
   173f4:	f88d 0017 	strb.w	r0, [sp, #23]
   173f8:	e007      	b.n	1740a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x62>
   173fa:	9804      	ldr	r0, [sp, #16]
   173fc:	9903      	ldr	r1, [sp, #12]
   173fe:	f001 feef 	bl	191e0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>
   17402:	f88d 0017 	strb.w	r0, [sp, #23]
   17406:	e7ff      	b.n	17408 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x60>
   17408:	e000      	b.n	1740c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   1740a:	e7ff      	b.n	1740c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   1740c:	e7ff      	b.n	1740e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   1740e:	f89d 0017 	ldrb.w	r0, [sp, #23]
   17412:	b008      	add	sp, #32
   17414:	bd80      	pop	{r7, pc}

00017416 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>:
   17416:	b081      	sub	sp, #4
   17418:	4601      	mov	r1, r0
   1741a:	f88d 0003 	strb.w	r0, [sp, #3]
   1741e:	b2c0      	uxtb	r0, r0
   17420:	b001      	add	sp, #4
   17422:	4770      	bx	lr

00017424 <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>:
   17424:	b086      	sub	sp, #24
   17426:	9004      	str	r0, [sp, #16]
   17428:	9105      	str	r1, [sp, #20]
   1742a:	9002      	str	r0, [sp, #8]
   1742c:	9103      	str	r1, [sp, #12]
   1742e:	9802      	ldr	r0, [sp, #8]
   17430:	9903      	ldr	r1, [sp, #12]
   17432:	9000      	str	r0, [sp, #0]
   17434:	9101      	str	r1, [sp, #4]
   17436:	9800      	ldr	r0, [sp, #0]
   17438:	9901      	ldr	r1, [sp, #4]
   1743a:	b006      	add	sp, #24
   1743c:	4770      	bx	lr

0001743e <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>:
   1743e:	b086      	sub	sp, #24
   17440:	9004      	str	r0, [sp, #16]
   17442:	9105      	str	r1, [sp, #20]
   17444:	9002      	str	r0, [sp, #8]
   17446:	9103      	str	r1, [sp, #12]
   17448:	9802      	ldr	r0, [sp, #8]
   1744a:	9903      	ldr	r1, [sp, #12]
   1744c:	9000      	str	r0, [sp, #0]
   1744e:	9101      	str	r1, [sp, #4]
   17450:	9800      	ldr	r0, [sp, #0]
   17452:	9901      	ldr	r1, [sp, #4]
   17454:	b006      	add	sp, #24
   17456:	4770      	bx	lr

00017458 <_ZN4core3ptr4read17h27a035d1812d8297E>:
   17458:	b580      	push	{r7, lr}
   1745a:	b088      	sub	sp, #32
   1745c:	9003      	str	r0, [sp, #12]
   1745e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   17462:	f8ad 100a 	strh.w	r1, [sp, #10]
   17466:	9001      	str	r0, [sp, #4]
   17468:	e7ff      	b.n	1746a <_ZN4core3ptr4read17h27a035d1812d8297E+0x12>
   1746a:	f10d 000a 	add.w	r0, sp, #10
   1746e:	9006      	str	r0, [sp, #24]
   17470:	9007      	str	r0, [sp, #28]
   17472:	e7ff      	b.n	17474 <_ZN4core3ptr4read17h27a035d1812d8297E+0x1c>
   17474:	f10d 010a 	add.w	r1, sp, #10
   17478:	2201      	movs	r2, #1
   1747a:	9801      	ldr	r0, [sp, #4]
   1747c:	f000 f931 	bl	176e2 <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>
   17480:	e7ff      	b.n	17482 <_ZN4core3ptr4read17h27a035d1812d8297E+0x2a>
   17482:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   17486:	4601      	mov	r1, r0
   17488:	f8ad 0014 	strh.w	r0, [sp, #20]
   1748c:	f8ad 0016 	strh.w	r0, [sp, #22]
   17490:	9100      	str	r1, [sp, #0]
   17492:	e7ff      	b.n	17494 <_ZN4core3ptr4read17h27a035d1812d8297E+0x3c>
   17494:	9800      	ldr	r0, [sp, #0]
   17496:	b008      	add	sp, #32
   17498:	bd80      	pop	{r7, pc}

0001749a <_ZN4core3ptr5write17h147d4643d861e927E>:
   1749a:	b082      	sub	sp, #8
   1749c:	460a      	mov	r2, r1
   1749e:	9000      	str	r0, [sp, #0]
   174a0:	f8ad 1006 	strh.w	r1, [sp, #6]
   174a4:	8001      	strh	r1, [r0, #0]
   174a6:	b002      	add	sp, #8
   174a8:	4770      	bx	lr

000174aa <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE>:
   174aa:	b580      	push	{r7, lr}
   174ac:	b08c      	sub	sp, #48	; 0x30
   174ae:	9005      	str	r0, [sp, #20]
   174b0:	9106      	str	r1, [sp, #24]
   174b2:	9207      	str	r2, [sp, #28]
   174b4:	9008      	str	r0, [sp, #32]
   174b6:	9109      	str	r1, [sp, #36]	; 0x24
   174b8:	2301      	movs	r3, #1
   174ba:	930b      	str	r3, [sp, #44]	; 0x2c
   174bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   174be:	9204      	str	r2, [sp, #16]
   174c0:	9103      	str	r1, [sp, #12]
   174c2:	9002      	str	r0, [sp, #8]
   174c4:	9301      	str	r3, [sp, #4]
   174c6:	e7ff      	b.n	174c8 <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE+0x1e>
   174c8:	9801      	ldr	r0, [sp, #4]
   174ca:	9904      	ldr	r1, [sp, #16]
   174cc:	fb00 f201 	mul.w	r2, r0, r1
   174d0:	920a      	str	r2, [sp, #40]	; 0x28
   174d2:	9802      	ldr	r0, [sp, #8]
   174d4:	9903      	ldr	r1, [sp, #12]
   174d6:	f000 f850 	bl	1757a <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE>
   174da:	e7ff      	b.n	174dc <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE+0x32>
   174dc:	b00c      	add	sp, #48	; 0x30
   174de:	bd80      	pop	{r7, pc}

000174e0 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE>:
   174e0:	b580      	push	{r7, lr}
   174e2:	b088      	sub	sp, #32
   174e4:	9004      	str	r0, [sp, #16]
   174e6:	9105      	str	r1, [sp, #20]
   174e8:	2201      	movs	r2, #1
   174ea:	9207      	str	r2, [sp, #28]
   174ec:	9a07      	ldr	r2, [sp, #28]
   174ee:	9103      	str	r1, [sp, #12]
   174f0:	9002      	str	r0, [sp, #8]
   174f2:	9201      	str	r2, [sp, #4]
   174f4:	e7ff      	b.n	174f6 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x16>
   174f6:	9801      	ldr	r0, [sp, #4]
   174f8:	2820      	cmp	r0, #32
   174fa:	d306      	bcc.n	1750a <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x2a>
   174fc:	e7ff      	b.n	174fe <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x1e>
   174fe:	2201      	movs	r2, #1
   17500:	9802      	ldr	r0, [sp, #8]
   17502:	9903      	ldr	r1, [sp, #12]
   17504:	f7ff ffd1 	bl	174aa <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE>
   17508:	e013      	b.n	17532 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x52>
   1750a:	9802      	ldr	r0, [sp, #8]
   1750c:	f000 f814 	bl	17538 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE>
   17510:	4601      	mov	r1, r0
   17512:	f88d 001b 	strb.w	r0, [sp, #27]
   17516:	9100      	str	r1, [sp, #0]
   17518:	e7ff      	b.n	1751a <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x3a>
   1751a:	2201      	movs	r2, #1
   1751c:	9803      	ldr	r0, [sp, #12]
   1751e:	9902      	ldr	r1, [sp, #8]
   17520:	f7fa fabf 	bl	11aa2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   17524:	e7ff      	b.n	17526 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x46>
   17526:	9803      	ldr	r0, [sp, #12]
   17528:	9900      	ldr	r1, [sp, #0]
   1752a:	f7f1 fdb9 	bl	90a0 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   1752e:	e7ff      	b.n	17530 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x50>
   17530:	e000      	b.n	17534 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x54>
   17532:	e7ff      	b.n	17534 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x54>
   17534:	b008      	add	sp, #32
   17536:	bd80      	pop	{r7, pc}

00017538 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE>:
   17538:	b580      	push	{r7, lr}
   1753a:	b088      	sub	sp, #32
   1753c:	9004      	str	r0, [sp, #16]
   1753e:	f89d 1015 	ldrb.w	r1, [sp, #21]
   17542:	f88d 100f 	strb.w	r1, [sp, #15]
   17546:	9002      	str	r0, [sp, #8]
   17548:	e7ff      	b.n	1754a <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x12>
   1754a:	f10d 000f 	add.w	r0, sp, #15
   1754e:	9006      	str	r0, [sp, #24]
   17550:	9007      	str	r0, [sp, #28]
   17552:	e7ff      	b.n	17554 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x1c>
   17554:	f10d 010f 	add.w	r1, sp, #15
   17558:	2201      	movs	r2, #1
   1755a:	9802      	ldr	r0, [sp, #8]
   1755c:	f7fa faa1 	bl	11aa2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   17560:	e7ff      	b.n	17562 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x2a>
   17562:	f89d 000f 	ldrb.w	r0, [sp, #15]
   17566:	4601      	mov	r1, r0
   17568:	f88d 0016 	strb.w	r0, [sp, #22]
   1756c:	f88d 0017 	strb.w	r0, [sp, #23]
   17570:	9101      	str	r1, [sp, #4]
   17572:	e7ff      	b.n	17574 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x3c>
   17574:	9801      	ldr	r0, [sp, #4]
   17576:	b008      	add	sp, #32
   17578:	bd80      	pop	{r7, pc}

0001757a <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE>:
   1757a:	b5d0      	push	{r4, r6, r7, lr}
   1757c:	af02      	add	r7, sp, #8
   1757e:	b0b4      	sub	sp, #208	; 0xd0
   17580:	466c      	mov	r4, sp
   17582:	f36f 0404 	bfc	r4, #0, #5
   17586:	46a5      	mov	sp, r4
   17588:	9024      	str	r0, [sp, #144]	; 0x90
   1758a:	9125      	str	r1, [sp, #148]	; 0x94
   1758c:	9226      	str	r2, [sp, #152]	; 0x98
   1758e:	2320      	movs	r3, #32
   17590:	932f      	str	r3, [sp, #188]	; 0xbc
   17592:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   17594:	9327      	str	r3, [sp, #156]	; 0x9c
   17596:	920e      	str	r2, [sp, #56]	; 0x38
   17598:	910d      	str	r1, [sp, #52]	; 0x34
   1759a:	900c      	str	r0, [sp, #48]	; 0x30
   1759c:	930b      	str	r3, [sp, #44]	; 0x2c
   1759e:	e7ff      	b.n	175a0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x26>
   175a0:	2000      	movs	r0, #0
   175a2:	900f      	str	r0, [sp, #60]	; 0x3c
   175a4:	e7ff      	b.n	175a6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x2c>
   175a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
   175a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   175aa:	4408      	add	r0, r1
   175ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   175ae:	4290      	cmp	r0, r2
   175b0:	d905      	bls.n	175be <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x44>
   175b2:	e7ff      	b.n	175b4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x3a>
   175b4:	980f      	ldr	r0, [sp, #60]	; 0x3c
   175b6:	990e      	ldr	r1, [sp, #56]	; 0x38
   175b8:	4288      	cmp	r0, r1
   175ba:	d334      	bcc.n	17626 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xac>
   175bc:	e067      	b.n	1768e <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x114>
   175be:	e7ff      	b.n	175c0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x46>
   175c0:	a810      	add	r0, sp, #64	; 0x40
   175c2:	9032      	str	r0, [sp, #200]	; 0xc8
   175c4:	9033      	str	r0, [sp, #204]	; 0xcc
   175c6:	e7ff      	b.n	175c8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x4e>
   175c8:	a810      	add	r0, sp, #64	; 0x40
   175ca:	4601      	mov	r1, r0
   175cc:	9028      	str	r0, [sp, #160]	; 0xa0
   175ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
   175d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   175d2:	900a      	str	r0, [sp, #40]	; 0x28
   175d4:	4610      	mov	r0, r2
   175d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   175d8:	9109      	str	r1, [sp, #36]	; 0x24
   175da:	4619      	mov	r1, r3
   175dc:	f7fa fbc5 	bl	11d6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   175e0:	4601      	mov	r1, r0
   175e2:	9029      	str	r0, [sp, #164]	; 0xa4
   175e4:	9108      	str	r1, [sp, #32]
   175e6:	e7ff      	b.n	175e8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x6e>
   175e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   175ea:	980d      	ldr	r0, [sp, #52]	; 0x34
   175ec:	f7fa fbbd 	bl	11d6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   175f0:	4601      	mov	r1, r0
   175f2:	902a      	str	r0, [sp, #168]	; 0xa8
   175f4:	9107      	str	r1, [sp, #28]
   175f6:	e7ff      	b.n	175f8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x7e>
   175f8:	9808      	ldr	r0, [sp, #32]
   175fa:	9909      	ldr	r1, [sp, #36]	; 0x24
   175fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   175fe:	f7fa fa50 	bl	11aa2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   17602:	e7ff      	b.n	17604 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x8a>
   17604:	9807      	ldr	r0, [sp, #28]
   17606:	9908      	ldr	r1, [sp, #32]
   17608:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1760a:	f7fa fa4a 	bl	11aa2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1760e:	e7ff      	b.n	17610 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x96>
   17610:	9809      	ldr	r0, [sp, #36]	; 0x24
   17612:	9907      	ldr	r1, [sp, #28]
   17614:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   17616:	f7fa fa44 	bl	11aa2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1761a:	e7ff      	b.n	1761c <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xa2>
   1761c:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1761e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   17620:	4408      	add	r0, r1
   17622:	900f      	str	r0, [sp, #60]	; 0x3c
   17624:	e7bf      	b.n	175a6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x2c>
   17626:	e7ff      	b.n	17628 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xae>
   17628:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1762a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1762c:	1a08      	subs	r0, r1, r0
   1762e:	4602      	mov	r2, r0
   17630:	902b      	str	r0, [sp, #172]	; 0xac
   17632:	a81c      	add	r0, sp, #112	; 0x70
   17634:	9030      	str	r0, [sp, #192]	; 0xc0
   17636:	9031      	str	r0, [sp, #196]	; 0xc4
   17638:	9206      	str	r2, [sp, #24]
   1763a:	9005      	str	r0, [sp, #20]
   1763c:	e7ff      	b.n	1763e <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xc4>
   1763e:	9805      	ldr	r0, [sp, #20]
   17640:	9905      	ldr	r1, [sp, #20]
   17642:	912c      	str	r1, [sp, #176]	; 0xb0
   17644:	990f      	ldr	r1, [sp, #60]	; 0x3c
   17646:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   17648:	9004      	str	r0, [sp, #16]
   1764a:	4610      	mov	r0, r2
   1764c:	f7fa fb8d 	bl	11d6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   17650:	4601      	mov	r1, r0
   17652:	902d      	str	r0, [sp, #180]	; 0xb4
   17654:	9103      	str	r1, [sp, #12]
   17656:	e7ff      	b.n	17658 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xde>
   17658:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1765a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1765c:	f7fa fb85 	bl	11d6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   17660:	4601      	mov	r1, r0
   17662:	902e      	str	r0, [sp, #184]	; 0xb8
   17664:	9102      	str	r1, [sp, #8]
   17666:	e7ff      	b.n	17668 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xee>
   17668:	9803      	ldr	r0, [sp, #12]
   1766a:	9904      	ldr	r1, [sp, #16]
   1766c:	9a06      	ldr	r2, [sp, #24]
   1766e:	f7fa fa18 	bl	11aa2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   17672:	e7ff      	b.n	17674 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xfa>
   17674:	9802      	ldr	r0, [sp, #8]
   17676:	9903      	ldr	r1, [sp, #12]
   17678:	9a06      	ldr	r2, [sp, #24]
   1767a:	f7fa fa12 	bl	11aa2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1767e:	e7ff      	b.n	17680 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x106>
   17680:	9804      	ldr	r0, [sp, #16]
   17682:	9902      	ldr	r1, [sp, #8]
   17684:	9a06      	ldr	r2, [sp, #24]
   17686:	f7fa fa0c 	bl	11aa2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1768a:	e7ff      	b.n	1768c <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x112>
   1768c:	e7ff      	b.n	1768e <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x114>
   1768e:	f1a7 0408 	sub.w	r4, r7, #8
   17692:	46a5      	mov	sp, r4
   17694:	bdd0      	pop	{r4, r6, r7, pc}

00017696 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE>:
   17696:	b083      	sub	sp, #12
   17698:	9002      	str	r0, [sp, #8]
   1769a:	9000      	str	r0, [sp, #0]
   1769c:	e7ff      	b.n	1769e <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x8>
   1769e:	9800      	ldr	r0, [sp, #0]
   176a0:	28ff      	cmp	r0, #255	; 0xff
   176a2:	d807      	bhi.n	176b4 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x1e>
   176a4:	e7ff      	b.n	176a6 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x10>
   176a6:	9800      	ldr	r0, [sp, #0]
   176a8:	f88d 0005 	strb.w	r0, [sp, #5]
   176ac:	2100      	movs	r1, #0
   176ae:	f88d 1004 	strb.w	r1, [sp, #4]
   176b2:	e003      	b.n	176bc <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x26>
   176b4:	2001      	movs	r0, #1
   176b6:	f88d 0004 	strb.w	r0, [sp, #4]
   176ba:	e7ff      	b.n	176bc <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x26>
   176bc:	f89d 0004 	ldrb.w	r0, [sp, #4]
   176c0:	f89d 1005 	ldrb.w	r1, [sp, #5]
   176c4:	b003      	add	sp, #12
   176c6:	4770      	bx	lr

000176c8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>:
    fn to_u8() -> u8 {
   176c8:	2000      	movs	r0, #0
    }
   176ca:	4770      	bx	lr

000176cc <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>:
    fn to_u8() -> u8 {
   176cc:	2001      	movs	r0, #1
    }
   176ce:	4770      	bx	lr

000176d0 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>:
    fn to_usize() -> usize {
   176d0:	2000      	movs	r0, #0
    }
   176d2:	4770      	bx	lr

000176d4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>:
   176d4:	b081      	sub	sp, #4
   176d6:	4601      	mov	r1, r0
   176d8:	f88d 0003 	strb.w	r0, [sp, #3]
   176dc:	b2c0      	uxtb	r0, r0
   176de:	b001      	add	sp, #4
   176e0:	4770      	bx	lr

000176e2 <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>:
   176e2:	b580      	push	{r7, lr}
   176e4:	b084      	sub	sp, #16
   176e6:	9001      	str	r0, [sp, #4]
   176e8:	9102      	str	r1, [sp, #8]
   176ea:	9203      	str	r2, [sp, #12]
   176ec:	0052      	lsls	r2, r2, #1
   176ee:	9000      	str	r0, [sp, #0]
   176f0:	4608      	mov	r0, r1
   176f2:	9900      	ldr	r1, [sp, #0]
   176f4:	f006 fcdc 	bl	1e0b0 <__aeabi_memcpy>
   176f8:	e7ff      	b.n	176fa <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E+0x18>
   176fa:	b004      	add	sp, #16
   176fc:	bd80      	pop	{r7, pc}

000176fe <_ZN4core3ptr13drop_in_place17h000c7c147ade2111E>:
   176fe:	4770      	bx	lr

00017700 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE>:
   17700:	b5b0      	push	{r4, r5, r7, lr}
   17702:	b086      	sub	sp, #24
   17704:	460c      	mov	r4, r1
   17706:	4605      	mov	r5, r0
   17708:	f001 fb87 	bl	18e1a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>
   1770c:	b9a8      	cbnz	r0, 1773a <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x3a>
   1770e:	f640 2354 	movw	r3, #2644	; 0xa54
   17712:	2200      	movs	r2, #0
   17714:	f2c0 0302 	movt	r3, #2
   17718:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   1771c:	9205      	str	r2, [sp, #20]
   1771e:	9304      	str	r3, [sp, #16]
   17720:	e9cd 2202 	strd	r2, r2, [sp, #8]
   17724:	2201      	movs	r2, #1
   17726:	9201      	str	r2, [sp, #4]
   17728:	f640 3218 	movw	r2, #2840	; 0xb18
   1772c:	f2c0 0202 	movt	r2, #2
   17730:	9200      	str	r2, [sp, #0]
   17732:	466a      	mov	r2, sp
   17734:	f000 fbe0 	bl	17ef8 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   17738:	b110      	cbz	r0, 17740 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x40>
   1773a:	2001      	movs	r0, #1
   1773c:	b006      	add	sp, #24
   1773e:	bdb0      	pop	{r4, r5, r7, pc}
   17740:	1d28      	adds	r0, r5, #4
   17742:	4621      	mov	r1, r4
   17744:	b006      	add	sp, #24
   17746:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
   1774a:	f001 bb66 	b.w	18e1a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>

0001774e <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE>:
   1774e:	f642 20e1 	movw	r0, #10977	; 0x2ae1
   17752:	f243 6134 	movw	r1, #13876	; 0x3634
   17756:	f6c9 405d 	movt	r0, #40029	; 0x9c5d
   1775a:	f6cd 0131 	movt	r1, #55345	; 0xd831
   1775e:	4770      	bx	lr

00017760 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>:
   17760:	b570      	push	{r4, r5, r6, lr}
   17762:	460e      	mov	r6, r1
   17764:	3909      	subs	r1, #9
   17766:	4604      	mov	r4, r0
   17768:	291e      	cmp	r1, #30
   1776a:	d818      	bhi.n	1779e <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x3e>
   1776c:	2002      	movs	r0, #2
   1776e:	2574      	movs	r5, #116	; 0x74
   17770:	e8df f001 	tbb	[pc, r1]
   17774:	1c1c1019 	.word	0x1c1c1019
   17778:	1c1c1c29 	.word	0x1c1c1c29
   1777c:	1c1c1c1c 	.word	0x1c1c1c1c
   17780:	1c1c1c1c 	.word	0x1c1c1c1c
   17784:	1c1c1c1c 	.word	0x1c1c1c1c
   17788:	1c1c1c1c 	.word	0x1c1c1c1c
   1778c:	1c1c171c 	.word	0x1c1c171c
   17790:	00171c1c 	.word	0x00171c1c
   17794:	2002      	movs	r0, #2
   17796:	256e      	movs	r5, #110	; 0x6e
   17798:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   1779c:	bd70      	pop	{r4, r5, r6, pc}
   1779e:	2e5c      	cmp	r6, #92	; 0x5c
   177a0:	d104      	bne.n	177ac <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x4c>
   177a2:	2002      	movs	r0, #2
   177a4:	4635      	mov	r5, r6
   177a6:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   177aa:	bd70      	pop	{r4, r5, r6, pc}
   177ac:	2a00      	cmp	r2, #0
   177ae:	d040      	beq.n	17832 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   177b0:	f3c6 1083 	ubfx	r0, r6, #6, #4
   177b4:	0ab1      	lsrs	r1, r6, #10
   177b6:	f5b6 3ff6 	cmp.w	r6, #125952	; 0x1ec00
   177ba:	d309      	bcc.n	177d0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x70>
   177bc:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
   177c0:	d137      	bne.n	17832 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   177c2:	211e      	movs	r1, #30
   177c4:	e00b      	b.n	177de <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x7e>
   177c6:	2002      	movs	r0, #2
   177c8:	2572      	movs	r5, #114	; 0x72
   177ca:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   177ce:	bd70      	pop	{r4, r5, r6, pc}
   177d0:	f241 528c 	movw	r2, #5516	; 0x158c
   177d4:	f2c0 0202 	movt	r2, #2
   177d8:	5c51      	ldrb	r1, [r2, r1]
   177da:	291e      	cmp	r1, #30
   177dc:	d842      	bhi.n	17864 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x104>
   177de:	f241 6207 	movw	r2, #5639	; 0x1607
   177e2:	f2c0 0202 	movt	r2, #2
   177e6:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   177ea:	5c09      	ldrb	r1, [r1, r0]
   177ec:	298b      	cmp	r1, #139	; 0x8b
   177ee:	d231      	bcs.n	17854 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xf4>
   177f0:	f241 70f8 	movw	r0, #6136	; 0x17f8
   177f4:	2301      	movs	r3, #1
   177f6:	f2c0 0002 	movt	r0, #2
   177fa:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   177fe:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
   17802:	f006 013f 	and.w	r1, r6, #63	; 0x3f
   17806:	f8d2 c004 	ldr.w	ip, [r2, #4]
   1780a:	fa03 f501 	lsl.w	r5, r3, r1
   1780e:	f1b1 0220 	subs.w	r2, r1, #32
   17812:	f1c1 0120 	rsb	r1, r1, #32
   17816:	bf58      	it	pl
   17818:	2500      	movpl	r5, #0
   1781a:	2a00      	cmp	r2, #0
   1781c:	ea00 0005 	and.w	r0, r0, r5
   17820:	fa23 f101 	lsr.w	r1, r3, r1
   17824:	bf58      	it	pl
   17826:	fa03 f102 	lslpl.w	r1, r3, r2
   1782a:	ea01 010c 	and.w	r1, r1, ip
   1782e:	4308      	orrs	r0, r1
   17830:	d105      	bne.n	1783e <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   17832:	4630      	mov	r0, r6
   17834:	f001 f9a5 	bl	18b82 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>
   17838:	b108      	cbz	r0, 1783e <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   1783a:	2001      	movs	r0, #1
   1783c:	e7b2      	b.n	177a4 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   1783e:	f046 0001 	orr.w	r0, r6, #1
   17842:	2107      	movs	r1, #7
   17844:	fab0 f080 	clz	r0, r0
   17848:	f04f 0e05 	mov.w	lr, #5
   1784c:	ea81 0c90 	eor.w	ip, r1, r0, lsr #2
   17850:	2003      	movs	r0, #3
   17852:	e7a7      	b.n	177a4 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   17854:	f241 507c 	movw	r0, #5500	; 0x157c
   17858:	228b      	movs	r2, #139	; 0x8b
   1785a:	f2c0 0002 	movt	r0, #2
   1785e:	f000 f869 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   17862:	defe      	udf	#254	; 0xfe
   17864:	f241 506c 	movw	r0, #5484	; 0x156c
   17868:	221f      	movs	r2, #31
   1786a:	f2c0 0002 	movt	r0, #2
   1786e:	f000 f861 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   17872:	defe      	udf	#254	; 0xfe

00017874 <_ZN4core6option13expect_failed17had6579abaad447b4E>:
   17874:	b08a      	sub	sp, #40	; 0x28
   17876:	e9cd 0100 	strd	r0, r1, [sp]
   1787a:	2001      	movs	r0, #1
   1787c:	a908      	add	r1, sp, #32
   1787e:	9007      	str	r0, [sp, #28]
   17880:	9106      	str	r1, [sp, #24]
   17882:	2100      	movs	r1, #0
   17884:	9105      	str	r1, [sp, #20]
   17886:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1788a:	f640 401c 	movw	r0, #3100	; 0xc1c
   1788e:	f2c0 0002 	movt	r0, #2
   17892:	4611      	mov	r1, r2
   17894:	9002      	str	r0, [sp, #8]
   17896:	f249 7077 	movw	r0, #38775	; 0x9777
   1789a:	f2c0 0001 	movt	r0, #1
   1789e:	9009      	str	r0, [sp, #36]	; 0x24
   178a0:	4668      	mov	r0, sp
   178a2:	9008      	str	r0, [sp, #32]
   178a4:	a802      	add	r0, sp, #8
   178a6:	f000 f865 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   178aa:	defe      	udf	#254	; 0xfe

000178ac <_ZN4core6option18expect_none_failed17h54d938081af97677E>:
   178ac:	b08e      	sub	sp, #56	; 0x38
   178ae:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   178b2:	2002      	movs	r0, #2
   178b4:	a90a      	add	r1, sp, #40	; 0x28
   178b6:	9009      	str	r0, [sp, #36]	; 0x24
   178b8:	9108      	str	r1, [sp, #32]
   178ba:	2100      	movs	r1, #0
   178bc:	9107      	str	r1, [sp, #28]
   178be:	e9cd 0105 	strd	r0, r1, [sp, #20]
   178c2:	f640 4028 	movw	r0, #3112	; 0xc28
   178c6:	f2c0 0002 	movt	r0, #2
   178ca:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   178ce:	9004      	str	r0, [sp, #16]
   178d0:	f249 706d 	movw	r0, #38765	; 0x976d
   178d4:	f2c0 0001 	movt	r0, #1
   178d8:	900d      	str	r0, [sp, #52]	; 0x34
   178da:	a802      	add	r0, sp, #8
   178dc:	900c      	str	r0, [sp, #48]	; 0x30
   178de:	f249 7077 	movw	r0, #38775	; 0x9777
   178e2:	f2c0 0001 	movt	r0, #1
   178e6:	4661      	mov	r1, ip
   178e8:	900b      	str	r0, [sp, #44]	; 0x2c
   178ea:	4668      	mov	r0, sp
   178ec:	900a      	str	r0, [sp, #40]	; 0x28
   178ee:	a804      	add	r0, sp, #16
   178f0:	f000 f840 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   178f4:	defe      	udf	#254	; 0xfe

000178f6 <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>:
   178f6:	68c0      	ldr	r0, [r0, #12]
   178f8:	4770      	bx	lr

000178fa <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>:
   178fa:	4770      	bx	lr

000178fc <_ZN4core5panic8Location4file17h61e77cb122865fdbE>:
   178fc:	e9d0 2100 	ldrd	r2, r1, [r0]
   17900:	4610      	mov	r0, r2
   17902:	4770      	bx	lr

00017904 <_ZN4core5panic8Location4line17h650a566d9637c91dE>:
   17904:	6880      	ldr	r0, [r0, #8]
   17906:	4770      	bx	lr

00017908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>:
   17908:	b088      	sub	sp, #32
   1790a:	4694      	mov	ip, r2
   1790c:	f640 2254 	movw	r2, #2644	; 0xa54
   17910:	2300      	movs	r3, #0
   17912:	f2c0 0202 	movt	r2, #2
   17916:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1791a:	4668      	mov	r0, sp
   1791c:	9305      	str	r3, [sp, #20]
   1791e:	4661      	mov	r1, ip
   17920:	9204      	str	r2, [sp, #16]
   17922:	2201      	movs	r2, #1
   17924:	e9cd 3302 	strd	r3, r3, [sp, #8]
   17928:	9201      	str	r2, [sp, #4]
   1792a:	aa06      	add	r2, sp, #24
   1792c:	9200      	str	r2, [sp, #0]
   1792e:	f000 f821 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17932:	defe      	udf	#254	; 0xfe

00017934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>:
   17934:	b08c      	sub	sp, #48	; 0x30
   17936:	4603      	mov	r3, r0
   17938:	e9cd 1200 	strd	r1, r2, [sp]
   1793c:	2002      	movs	r0, #2
   1793e:	a908      	add	r1, sp, #32
   17940:	9007      	str	r0, [sp, #28]
   17942:	9106      	str	r1, [sp, #24]
   17944:	2100      	movs	r1, #0
   17946:	9105      	str	r1, [sp, #20]
   17948:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1794c:	f640 405c 	movw	r0, #3164	; 0xc5c
   17950:	f2c0 0002 	movt	r0, #2
   17954:	4669      	mov	r1, sp
   17956:	9002      	str	r0, [sp, #8]
   17958:	f249 6089 	movw	r0, #38537	; 0x9689
   1795c:	f2c0 0001 	movt	r0, #1
   17960:	900b      	str	r0, [sp, #44]	; 0x2c
   17962:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   17966:	a801      	add	r0, sp, #4
   17968:	9008      	str	r0, [sp, #32]
   1796a:	a802      	add	r0, sp, #8
   1796c:	4619      	mov	r1, r3
   1796e:	f000 f801 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17972:	defe      	udf	#254	; 0xfe

00017974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>:
   17974:	b084      	sub	sp, #16
   17976:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1797a:	f640 4038 	movw	r0, #3128	; 0xc38
   1797e:	f2c0 0002 	movt	r0, #2
   17982:	9001      	str	r0, [sp, #4]
   17984:	f640 2054 	movw	r0, #2644	; 0xa54
   17988:	f2c0 0002 	movt	r0, #2
   1798c:	9000      	str	r0, [sp, #0]
   1798e:	4668      	mov	r0, sp
   17990:	f7f0 fe9e 	bl	86d0 <rust_begin_unwind>
   17994:	defe      	udf	#254	; 0xfe

00017996 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>:
   17996:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1799a:	b081      	sub	sp, #4
   1799c:	2a00      	cmp	r2, #0
   1799e:	f000 80fe 	beq.w	17b9e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   179a2:	4690      	mov	r8, r2
   179a4:	468a      	mov	sl, r1
   179a6:	4681      	mov	r9, r0
   179a8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   179ac:	7800      	ldrb	r0, [r0, #0]
   179ae:	b948      	cbnz	r0, 179c4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x2e>
   179b0:	e014      	b.n	179dc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   179b2:	44da      	add	sl, fp
   179b4:	2c00      	cmp	r4, #0
   179b6:	46a0      	mov	r8, r4
   179b8:	f000 80f1 	beq.w	17b9e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   179bc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   179c0:	7800      	ldrb	r0, [r0, #0]
   179c2:	b158      	cbz	r0, 179dc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   179c4:	e9d9 0100 	ldrd	r0, r1, [r9]
   179c8:	2204      	movs	r2, #4
   179ca:	68cb      	ldr	r3, [r1, #12]
   179cc:	f640 3174 	movw	r1, #2932	; 0xb74
   179d0:	f2c0 0102 	movt	r1, #2
   179d4:	4798      	blx	r3
   179d6:	2800      	cmp	r0, #0
   179d8:	f040 80e5 	bne.w	17ba6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   179dc:	f04f 0b00 	mov.w	fp, #0
   179e0:	4641      	mov	r1, r8
   179e2:	e008      	b.n	179f6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x60>
   179e4:	ebb8 010b 	subs.w	r1, r8, fp
   179e8:	f04f 0000 	mov.w	r0, #0
   179ec:	bf38      	it	cc
   179ee:	4601      	movcc	r1, r0
   179f0:	45c3      	cmp	fp, r8
   179f2:	f200 80a5 	bhi.w	17b40 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1aa>
   179f6:	eb0a 0e0b 	add.w	lr, sl, fp
   179fa:	2000      	movs	r0, #0
   179fc:	f01e 0203 	ands.w	r2, lr, #3
   17a00:	bf18      	it	ne
   17a02:	f1d2 0c04 	rsbsne	ip, r2, #4
   17a06:	d120      	bne.n	17a4a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xb4>
   17a08:	2908      	cmp	r1, #8
   17a0a:	d357      	bcc.n	17abc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   17a0c:	f1a1 0208 	sub.w	r2, r1, #8
   17a10:	4290      	cmp	r0, r2
   17a12:	d853      	bhi.n	17abc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   17a14:	f85e 3000 	ldr.w	r3, [lr, r0]
   17a18:	eb0e 0700 	add.w	r7, lr, r0
   17a1c:	687f      	ldr	r7, [r7, #4]
   17a1e:	f083 360a 	eor.w	r6, r3, #168430090	; 0xa0a0a0a
   17a22:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   17a26:	ea26 0303 	bic.w	r3, r6, r3
   17a2a:	f087 360a 	eor.w	r6, r7, #168430090	; 0xa0a0a0a
   17a2e:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   17a32:	ea26 0707 	bic.w	r7, r6, r7
   17a36:	433b      	orrs	r3, r7
   17a38:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   17a3c:	d102      	bne.n	17a44 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xae>
   17a3e:	3008      	adds	r0, #8
   17a40:	4290      	cmp	r0, r2
   17a42:	d9e7      	bls.n	17a14 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x7e>
   17a44:	4288      	cmp	r0, r1
   17a46:	d939      	bls.n	17abc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   17a48:	e0b1      	b.n	17bae <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x218>
   17a4a:	458c      	cmp	ip, r1
   17a4c:	bf88      	it	hi
   17a4e:	468c      	movhi	ip, r1
   17a50:	eb0e 060c 	add.w	r6, lr, ip
   17a54:	2000      	movs	r0, #0
   17a56:	4663      	mov	r3, ip
   17a58:	4677      	mov	r7, lr
   17a5a:	b363      	cbz	r3, 17ab6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   17a5c:	463a      	mov	r2, r7
   17a5e:	f812 4b01 	ldrb.w	r4, [r2], #1
   17a62:	f1b4 050a 	subs.w	r5, r4, #10
   17a66:	bf18      	it	ne
   17a68:	2501      	movne	r5, #1
   17a6a:	4428      	add	r0, r5
   17a6c:	2c0a      	cmp	r4, #10
   17a6e:	d059      	beq.n	17b24 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   17a70:	42b2      	cmp	r2, r6
   17a72:	d020      	beq.n	17ab6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   17a74:	787a      	ldrb	r2, [r7, #1]
   17a76:	f1b2 040a 	subs.w	r4, r2, #10
   17a7a:	bf18      	it	ne
   17a7c:	2401      	movne	r4, #1
   17a7e:	4420      	add	r0, r4
   17a80:	2a0a      	cmp	r2, #10
   17a82:	d04f      	beq.n	17b24 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   17a84:	1cba      	adds	r2, r7, #2
   17a86:	42b2      	cmp	r2, r6
   17a88:	d015      	beq.n	17ab6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   17a8a:	78ba      	ldrb	r2, [r7, #2]
   17a8c:	f1b2 040a 	subs.w	r4, r2, #10
   17a90:	bf18      	it	ne
   17a92:	2401      	movne	r4, #1
   17a94:	4420      	add	r0, r4
   17a96:	2a0a      	cmp	r2, #10
   17a98:	d044      	beq.n	17b24 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   17a9a:	1cfa      	adds	r2, r7, #3
   17a9c:	42b2      	cmp	r2, r6
   17a9e:	d00a      	beq.n	17ab6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   17aa0:	78fa      	ldrb	r2, [r7, #3]
   17aa2:	3b04      	subs	r3, #4
   17aa4:	3704      	adds	r7, #4
   17aa6:	f1b2 040a 	subs.w	r4, r2, #10
   17aaa:	bf18      	it	ne
   17aac:	2401      	movne	r4, #1
   17aae:	4420      	add	r0, r4
   17ab0:	2a0a      	cmp	r2, #10
   17ab2:	d1d2      	bne.n	17a5a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xc4>
   17ab4:	e036      	b.n	17b24 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   17ab6:	4660      	mov	r0, ip
   17ab8:	2908      	cmp	r1, #8
   17aba:	d2a7      	bcs.n	17a0c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x76>
   17abc:	eb0e 0700 	add.w	r7, lr, r0
   17ac0:	eb0e 0201 	add.w	r2, lr, r1
   17ac4:	1a0e      	subs	r6, r1, r0
   17ac6:	2100      	movs	r1, #0
   17ac8:	b3ce      	cbz	r6, 17b3e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   17aca:	463b      	mov	r3, r7
   17acc:	f813 5b01 	ldrb.w	r5, [r3], #1
   17ad0:	f1b5 040a 	subs.w	r4, r5, #10
   17ad4:	bf18      	it	ne
   17ad6:	2401      	movne	r4, #1
   17ad8:	4421      	add	r1, r4
   17ada:	2d0a      	cmp	r5, #10
   17adc:	d021      	beq.n	17b22 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   17ade:	4293      	cmp	r3, r2
   17ae0:	d02d      	beq.n	17b3e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   17ae2:	787b      	ldrb	r3, [r7, #1]
   17ae4:	f1b3 050a 	subs.w	r5, r3, #10
   17ae8:	bf18      	it	ne
   17aea:	2501      	movne	r5, #1
   17aec:	4429      	add	r1, r5
   17aee:	2b0a      	cmp	r3, #10
   17af0:	d017      	beq.n	17b22 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   17af2:	1cbb      	adds	r3, r7, #2
   17af4:	4293      	cmp	r3, r2
   17af6:	d022      	beq.n	17b3e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   17af8:	78bb      	ldrb	r3, [r7, #2]
   17afa:	f1b3 050a 	subs.w	r5, r3, #10
   17afe:	bf18      	it	ne
   17b00:	2501      	movne	r5, #1
   17b02:	4429      	add	r1, r5
   17b04:	2b0a      	cmp	r3, #10
   17b06:	d00c      	beq.n	17b22 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   17b08:	1cfb      	adds	r3, r7, #3
   17b0a:	4293      	cmp	r3, r2
   17b0c:	d017      	beq.n	17b3e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   17b0e:	78fb      	ldrb	r3, [r7, #3]
   17b10:	3e04      	subs	r6, #4
   17b12:	3704      	adds	r7, #4
   17b14:	f1b3 050a 	subs.w	r5, r3, #10
   17b18:	bf18      	it	ne
   17b1a:	2501      	movne	r5, #1
   17b1c:	4429      	add	r1, r5
   17b1e:	2b0a      	cmp	r3, #10
   17b20:	d1d2      	bne.n	17ac8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x132>
   17b22:	4408      	add	r0, r1
   17b24:	4458      	add	r0, fp
   17b26:	f100 0b01 	add.w	fp, r0, #1
   17b2a:	4540      	cmp	r0, r8
   17b2c:	f4bf af5a 	bcs.w	179e4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   17b30:	f81a 0000 	ldrb.w	r0, [sl, r0]
   17b34:	280a      	cmp	r0, #10
   17b36:	f47f af55 	bne.w	179e4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   17b3a:	2001      	movs	r0, #1
   17b3c:	e001      	b.n	17b42 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1ac>
   17b3e:	2000      	movs	r0, #0
   17b40:	46c3      	mov	fp, r8
   17b42:	f8d9 1008 	ldr.w	r1, [r9, #8]
   17b46:	eba8 040b 	sub.w	r4, r8, fp
   17b4a:	7008      	strb	r0, [r1, #0]
   17b4c:	fab4 f084 	clz	r0, r4
   17b50:	0942      	lsrs	r2, r0, #5
   17b52:	fabb f08b 	clz	r0, fp
   17b56:	0943      	lsrs	r3, r0, #5
   17b58:	e9d9 0100 	ldrd	r0, r1, [r9]
   17b5c:	ea53 0602 	orrs.w	r6, r3, r2
   17b60:	d106      	bne.n	17b70 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1da>
   17b62:	45d8      	cmp	r8, fp
   17b64:	d926      	bls.n	17bb4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   17b66:	f91a 200b 	ldrsb.w	r2, [sl, fp]
   17b6a:	f112 0f41 	cmn.w	r2, #65	; 0x41
   17b6e:	dd21      	ble.n	17bb4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   17b70:	68cb      	ldr	r3, [r1, #12]
   17b72:	4651      	mov	r1, sl
   17b74:	465a      	mov	r2, fp
   17b76:	4798      	blx	r3
   17b78:	b9a8      	cbnz	r0, 17ba6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   17b7a:	2e00      	cmp	r6, #0
   17b7c:	f47f af19 	bne.w	179b2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   17b80:	45d8      	cmp	r8, fp
   17b82:	d905      	bls.n	17b90 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1fa>
   17b84:	f91a 000b 	ldrsb.w	r0, [sl, fp]
   17b88:	f110 0f41 	cmn.w	r0, #65	; 0x41
   17b8c:	f73f af11 	bgt.w	179b2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   17b90:	4650      	mov	r0, sl
   17b92:	4641      	mov	r1, r8
   17b94:	465a      	mov	r2, fp
   17b96:	4643      	mov	r3, r8
   17b98:	f000 fe4d 	bl	18836 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   17b9c:	defe      	udf	#254	; 0xfe
   17b9e:	2000      	movs	r0, #0
   17ba0:	b001      	add	sp, #4
   17ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ba6:	2001      	movs	r0, #1
   17ba8:	b001      	add	sp, #4
   17baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17bae:	f000 fe20 	bl	187f2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   17bb2:	defe      	udf	#254	; 0xfe
   17bb4:	4650      	mov	r0, sl
   17bb6:	4641      	mov	r1, r8
   17bb8:	2200      	movs	r2, #0
   17bba:	465b      	mov	r3, fp
   17bbc:	f000 fe3b 	bl	18836 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   17bc0:	defe      	udf	#254	; 0xfe

00017bc2 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>:
   17bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
   17bc4:	b08d      	sub	sp, #52	; 0x34
   17bc6:	4604      	mov	r4, r0
   17bc8:	7a00      	ldrb	r0, [r0, #8]
   17bca:	b138      	cbz	r0, 17bdc <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x1a>
   17bcc:	2001      	movs	r0, #1
   17bce:	6861      	ldr	r1, [r4, #4]
   17bd0:	7220      	strb	r0, [r4, #8]
   17bd2:	1c48      	adds	r0, r1, #1
   17bd4:	6060      	str	r0, [r4, #4]
   17bd6:	4620      	mov	r0, r4
   17bd8:	b00d      	add	sp, #52	; 0x34
   17bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17bdc:	4616      	mov	r6, r2
   17bde:	460d      	mov	r5, r1
   17be0:	e9d4 1200 	ldrd	r1, r2, [r4]
   17be4:	7808      	ldrb	r0, [r1, #0]
   17be6:	0740      	lsls	r0, r0, #29
   17be8:	d419      	bmi.n	17c1e <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x5c>
   17bea:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
   17bee:	f640 4186 	movw	r1, #3206	; 0xc86
   17bf2:	f640 4c8a 	movw	ip, #3210	; 0xc8a
   17bf6:	f2c0 0102 	movt	r1, #2
   17bfa:	2a00      	cmp	r2, #0
   17bfc:	f2c0 0c02 	movt	ip, #2
   17c00:	bf08      	it	eq
   17c02:	4661      	moveq	r1, ip
   17c04:	68db      	ldr	r3, [r3, #12]
   17c06:	f04f 0202 	mov.w	r2, #2
   17c0a:	bf08      	it	eq
   17c0c:	2201      	moveq	r2, #1
   17c0e:	4798      	blx	r3
   17c10:	2800      	cmp	r0, #0
   17c12:	d1db      	bne.n	17bcc <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   17c14:	68f2      	ldr	r2, [r6, #12]
   17c16:	4628      	mov	r0, r5
   17c18:	6821      	ldr	r1, [r4, #0]
   17c1a:	4790      	blx	r2
   17c1c:	e7d7      	b.n	17bce <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>
   17c1e:	b95a      	cbnz	r2, 17c38 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x76>
   17c20:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   17c24:	2202      	movs	r2, #2
   17c26:	68cb      	ldr	r3, [r1, #12]
   17c28:	f640 4188 	movw	r1, #3208	; 0xc88
   17c2c:	f2c0 0102 	movt	r1, #2
   17c30:	4798      	blx	r3
   17c32:	2800      	cmp	r0, #0
   17c34:	d1ca      	bne.n	17bcc <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   17c36:	6821      	ldr	r1, [r4, #0]
   17c38:	2001      	movs	r0, #1
   17c3a:	f10d 030f 	add.w	r3, sp, #15
   17c3e:	f88d 000f 	strb.w	r0, [sp, #15]
   17c42:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
   17c46:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
   17c4a:	e891 5005 	ldmia.w	r1, {r0, r2, ip, lr}
   17c4e:	e9d1 3704 	ldrd	r3, r7, [r1, #16]
   17c52:	f891 1020 	ldrb.w	r1, [r1, #32]
   17c56:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   17c5a:	a904      	add	r1, sp, #16
   17c5c:	e9cd 0204 	strd	r0, r2, [sp, #16]
   17c60:	f640 406c 	movw	r0, #3180	; 0xc6c
   17c64:	f2c0 0002 	movt	r0, #2
   17c68:	68f2      	ldr	r2, [r6, #12]
   17c6a:	900b      	str	r0, [sp, #44]	; 0x2c
   17c6c:	4668      	mov	r0, sp
   17c6e:	900a      	str	r0, [sp, #40]	; 0x28
   17c70:	4628      	mov	r0, r5
   17c72:	e9cd 3708 	strd	r3, r7, [sp, #32]
   17c76:	e9cd ce06 	strd	ip, lr, [sp, #24]
   17c7a:	4790      	blx	r2
   17c7c:	2800      	cmp	r0, #0
   17c7e:	d1a5      	bne.n	17bcc <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   17c80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   17c84:	2202      	movs	r2, #2
   17c86:	68cb      	ldr	r3, [r1, #12]
   17c88:	f640 4184 	movw	r1, #3204	; 0xc84
   17c8c:	f2c0 0102 	movt	r1, #2
   17c90:	4798      	blx	r3
   17c92:	e79c      	b.n	17bce <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>

00017c94 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>:
   17c94:	b5b0      	push	{r4, r5, r7, lr}
   17c96:	4604      	mov	r4, r0
   17c98:	7a05      	ldrb	r5, [r0, #8]
   17c9a:	6840      	ldr	r0, [r0, #4]
   17c9c:	b308      	cbz	r0, 17ce2 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4e>
   17c9e:	b10d      	cbz	r5, 17ca4 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x10>
   17ca0:	2501      	movs	r5, #1
   17ca2:	e01d      	b.n	17ce0 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   17ca4:	2801      	cmp	r0, #1
   17ca6:	d110      	bne.n	17cca <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   17ca8:	7a60      	ldrb	r0, [r4, #9]
   17caa:	b170      	cbz	r0, 17cca <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   17cac:	6821      	ldr	r1, [r4, #0]
   17cae:	7808      	ldrb	r0, [r1, #0]
   17cb0:	0740      	lsls	r0, r0, #29
   17cb2:	d40a      	bmi.n	17cca <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   17cb4:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   17cb8:	2201      	movs	r2, #1
   17cba:	68cb      	ldr	r3, [r1, #12]
   17cbc:	f640 418b 	movw	r1, #3211	; 0xc8b
   17cc0:	f2c0 0102 	movt	r1, #2
   17cc4:	2501      	movs	r5, #1
   17cc6:	4798      	blx	r3
   17cc8:	b950      	cbnz	r0, 17ce0 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   17cca:	6821      	ldr	r1, [r4, #0]
   17ccc:	2201      	movs	r2, #1
   17cce:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   17cd2:	68cb      	ldr	r3, [r1, #12]
   17cd4:	f640 418c 	movw	r1, #3212	; 0xc8c
   17cd8:	f2c0 0102 	movt	r1, #2
   17cdc:	4798      	blx	r3
   17cde:	4605      	mov	r5, r0
   17ce0:	7225      	strb	r5, [r4, #8]
   17ce2:	2d00      	cmp	r5, #0
   17ce4:	bf18      	it	ne
   17ce6:	2501      	movne	r5, #1
   17ce8:	4628      	mov	r0, r5
   17cea:	bdb0      	pop	{r4, r5, r7, pc}

00017cec <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>:
   17cec:	b580      	push	{r7, lr}
   17cee:	b082      	sub	sp, #8
   17cf0:	468c      	mov	ip, r1
   17cf2:	2100      	movs	r1, #0
   17cf4:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   17cf8:	9101      	str	r1, [sp, #4]
   17cfa:	d207      	bcs.n	17d0c <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x20>
   17cfc:	f88d c004 	strb.w	ip, [sp, #4]
   17d00:	a901      	add	r1, sp, #4
   17d02:	2201      	movs	r2, #1
   17d04:	f7ff fe47 	bl	17996 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   17d08:	b002      	add	sp, #8
   17d0a:	bd80      	pop	{r7, pc}
   17d0c:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
   17d10:	d210      	bcs.n	17d34 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x48>
   17d12:	ea4f 119c 	mov.w	r1, ip, lsr #6
   17d16:	2306      	movs	r3, #6
   17d18:	2202      	movs	r2, #2
   17d1a:	f363 115f 	bfi	r1, r3, #5, #27
   17d1e:	f362 1c9f 	bfi	ip, r2, #6, #26
   17d22:	f88d c005 	strb.w	ip, [sp, #5]
   17d26:	f88d 1004 	strb.w	r1, [sp, #4]
   17d2a:	a901      	add	r1, sp, #4
   17d2c:	f7ff fe33 	bl	17996 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   17d30:	b002      	add	sp, #8
   17d32:	bd80      	pop	{r7, pc}
   17d34:	2202      	movs	r2, #2
   17d36:	4663      	mov	r3, ip
   17d38:	a901      	add	r1, sp, #4
   17d3a:	f362 139f 	bfi	r3, r2, #6, #26
   17d3e:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   17d42:	d213      	bcs.n	17d6c <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x80>
   17d44:	f88d 3006 	strb.w	r3, [sp, #6]
   17d48:	ea4f 139c 	mov.w	r3, ip, lsr #6
   17d4c:	f362 139f 	bfi	r3, r2, #6, #26
   17d50:	f88d 3005 	strb.w	r3, [sp, #5]
   17d54:	ea4f 321c 	mov.w	r2, ip, lsr #12
   17d58:	230e      	movs	r3, #14
   17d5a:	f363 121f 	bfi	r2, r3, #4, #28
   17d5e:	f88d 2004 	strb.w	r2, [sp, #4]
   17d62:	2203      	movs	r2, #3
   17d64:	f7ff fe17 	bl	17996 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   17d68:	b002      	add	sp, #8
   17d6a:	bd80      	pop	{r7, pc}
   17d6c:	f88d 3007 	strb.w	r3, [sp, #7]
   17d70:	ea4f 139c 	mov.w	r3, ip, lsr #6
   17d74:	f362 139f 	bfi	r3, r2, #6, #26
   17d78:	f88d 3006 	strb.w	r3, [sp, #6]
   17d7c:	ea4f 331c 	mov.w	r3, ip, lsr #12
   17d80:	f362 139f 	bfi	r3, r2, #6, #26
   17d84:	22f0      	movs	r2, #240	; 0xf0
   17d86:	ea42 429c 	orr.w	r2, r2, ip, lsr #18
   17d8a:	f88d 3005 	strb.w	r3, [sp, #5]
   17d8e:	f88d 2004 	strb.w	r2, [sp, #4]
   17d92:	2204      	movs	r2, #4
   17d94:	f7ff fdff 	bl	17996 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   17d98:	b002      	add	sp, #8
   17d9a:	bd80      	pop	{r7, pc}

00017d9c <_ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE>:
   17d9c:	b570      	push	{r4, r5, r6, lr}
   17d9e:	b088      	sub	sp, #32
   17da0:	9001      	str	r0, [sp, #4]
   17da2:	aa02      	add	r2, sp, #8
   17da4:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   17da8:	f640 5158 	movw	r1, #3416	; 0xd58
   17dac:	4610      	mov	r0, r2
   17dae:	f2c0 0102 	movt	r1, #2
   17db2:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   17db6:	a801      	add	r0, sp, #4
   17db8:	f000 f89e 	bl	17ef8 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   17dbc:	b008      	add	sp, #32
   17dbe:	bd70      	pop	{r4, r5, r6, pc}

00017dc0 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E>:
   17dc0:	6800      	ldr	r0, [r0, #0]
   17dc2:	f7ff bde8 	b.w	17996 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>

00017dc6 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE>:
   17dc6:	6800      	ldr	r0, [r0, #0]
   17dc8:	f7ff bf90 	b.w	17cec <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>

00017dcc <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE>:
   17dcc:	b570      	push	{r4, r5, r6, lr}
   17dce:	b088      	sub	sp, #32
   17dd0:	6800      	ldr	r0, [r0, #0]
   17dd2:	aa02      	add	r2, sp, #8
   17dd4:	9001      	str	r0, [sp, #4]
   17dd6:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   17dda:	4610      	mov	r0, r2
   17ddc:	f640 5158 	movw	r1, #3416	; 0xd58
   17de0:	f2c0 0102 	movt	r1, #2
   17de4:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   17de8:	a801      	add	r0, sp, #4
   17dea:	f000 f885 	bl	17ef8 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   17dee:	b008      	add	sp, #32
   17df0:	bd70      	pop	{r4, r5, r6, pc}

00017df2 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE>:
   17df2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17df6:	b08d      	sub	sp, #52	; 0x34
   17df8:	468c      	mov	ip, r1
   17dfa:	6801      	ldr	r1, [r0, #0]
   17dfc:	f248 5e1f 	movw	lr, #34079	; 0x851f
   17e00:	f640 408f 	movw	r0, #3215	; 0xc8f
   17e04:	f242 7810 	movw	r8, #10000	; 0x2710
   17e08:	4541      	cmp	r1, r8
   17e0a:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   17e0e:	f2c0 0002 	movt	r0, #2
   17e12:	d337      	bcc.n	17e84 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x92>
   17e14:	f241 7959 	movw	r9, #5977	; 0x1759
   17e18:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   17e1c:	f10d 0b0c 	add.w	fp, sp, #12
   17e20:	2300      	movs	r3, #0
   17e22:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   17e26:	f04f 0a64 	mov.w	sl, #100	; 0x64
   17e2a:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   17e2e:	fba1 2409 	umull	r2, r4, r1, r9
   17e32:	42b9      	cmp	r1, r7
   17e34:	ea4f 3254 	mov.w	r2, r4, lsr #13
   17e38:	fb02 1418 	mls	r4, r2, r8, r1
   17e3c:	4611      	mov	r1, r2
   17e3e:	b2a5      	uxth	r5, r4
   17e40:	fba5 560e 	umull	r5, r6, r5, lr
   17e44:	ea4f 1556 	mov.w	r5, r6, lsr #5
   17e48:	eb0b 0603 	add.w	r6, fp, r3
   17e4c:	fb05 441a 	mls	r4, r5, sl, r4
   17e50:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   17e54:	f1a3 0304 	sub.w	r3, r3, #4
   17e58:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   17e5c:	b2a4      	uxth	r4, r4
   17e5e:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   17e62:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   17e66:	d8e2      	bhi.n	17e2e <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x3c>
   17e68:	f103 0427 	add.w	r4, r3, #39	; 0x27
   17e6c:	4611      	mov	r1, r2
   17e6e:	2963      	cmp	r1, #99	; 0x63
   17e70:	dc0b      	bgt.n	17e8a <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x98>
   17e72:	460b      	mov	r3, r1
   17e74:	2b0a      	cmp	r3, #10
   17e76:	db17      	blt.n	17ea8 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xb6>
   17e78:	1ea1      	subs	r1, r4, #2
   17e7a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   17e7e:	aa03      	add	r2, sp, #12
   17e80:	5250      	strh	r0, [r2, r1]
   17e82:	e016      	b.n	17eb2 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xc0>
   17e84:	2427      	movs	r4, #39	; 0x27
   17e86:	2963      	cmp	r1, #99	; 0x63
   17e88:	ddf3      	ble.n	17e72 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x80>
   17e8a:	b28a      	uxth	r2, r1
   17e8c:	3c02      	subs	r4, #2
   17e8e:	fba2 230e 	umull	r2, r3, r2, lr
   17e92:	2264      	movs	r2, #100	; 0x64
   17e94:	095b      	lsrs	r3, r3, #5
   17e96:	fb03 1112 	mls	r1, r3, r2, r1
   17e9a:	aa03      	add	r2, sp, #12
   17e9c:	b289      	uxth	r1, r1
   17e9e:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   17ea2:	5311      	strh	r1, [r2, r4]
   17ea4:	2b0a      	cmp	r3, #10
   17ea6:	dae7      	bge.n	17e78 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x86>
   17ea8:	1e61      	subs	r1, r4, #1
   17eaa:	aa03      	add	r2, sp, #12
   17eac:	f103 0030 	add.w	r0, r3, #48	; 0x30
   17eb0:	5450      	strb	r0, [r2, r1]
   17eb2:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   17eb6:	aa03      	add	r2, sp, #12
   17eb8:	4411      	add	r1, r2
   17eba:	f640 2254 	movw	r2, #2644	; 0xa54
   17ebe:	e9cd 1000 	strd	r1, r0, [sp]
   17ec2:	f2c0 0202 	movt	r2, #2
   17ec6:	4660      	mov	r0, ip
   17ec8:	2101      	movs	r1, #1
   17eca:	2300      	movs	r3, #0
   17ecc:	f000 f8f4 	bl	180b8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   17ed0:	b00d      	add	sp, #52	; 0x34
   17ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017ed6 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E>:
   17ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17eda:	b086      	sub	sp, #24
   17edc:	e9d1 c106 	ldrd	ip, r1, [r1, #24]
   17ee0:	466a      	mov	r2, sp
   17ee2:	e890 41f0 	ldmia.w	r0, {r4, r5, r6, r7, r8, lr}
   17ee6:	4613      	mov	r3, r2
   17ee8:	4660      	mov	r0, ip
   17eea:	e883 41f0 	stmia.w	r3, {r4, r5, r6, r7, r8, lr}
   17eee:	f000 f803 	bl	17ef8 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   17ef2:	b006      	add	sp, #24
   17ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017ef8 <_ZN4core3fmt5write17hd95ac78ed22a2252E>:
   17ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17efc:	b08b      	sub	sp, #44	; 0x2c
   17efe:	2303      	movs	r3, #3
   17f00:	6897      	ldr	r7, [r2, #8]
   17f02:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   17f06:	2320      	movs	r3, #32
   17f08:	9303      	str	r3, [sp, #12]
   17f0a:	2300      	movs	r3, #0
   17f0c:	2f00      	cmp	r7, #0
   17f0e:	9302      	str	r3, [sp, #8]
   17f10:	e9cd 0108 	strd	r0, r1, [sp, #32]
   17f14:	9306      	str	r3, [sp, #24]
   17f16:	9304      	str	r3, [sp, #16]
   17f18:	d07c      	beq.n	18014 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x11c>
   17f1a:	f8d2 b00c 	ldr.w	fp, [r2, #12]
   17f1e:	e9d2 9400 	ldrd	r9, r4, [r2]
   17f22:	45a3      	cmp	fp, r4
   17f24:	bf88      	it	hi
   17f26:	46a3      	movhi	fp, r4
   17f28:	f1bb 0f00 	cmp.w	fp, #0
   17f2c:	f000 809b 	beq.w	18066 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   17f30:	e9d2 6204 	ldrd	r6, r2, [r2, #16]
   17f34:	68cd      	ldr	r5, [r1, #12]
   17f36:	9201      	str	r2, [sp, #4]
   17f38:	e9d9 3200 	ldrd	r3, r2, [r9]
   17f3c:	4619      	mov	r1, r3
   17f3e:	47a8      	blx	r5
   17f40:	2800      	cmp	r0, #0
   17f42:	f040 809e 	bne.w	18082 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   17f46:	464d      	mov	r5, r9
   17f48:	f04f 0a01 	mov.w	sl, #1
   17f4c:	f04f 0800 	mov.w	r8, #0
   17f50:	f04f 0910 	mov.w	r9, #16
   17f54:	eb07 0088 	add.w	r0, r7, r8, lsl #2
   17f58:	6841      	ldr	r1, [r0, #4]
   17f5a:	9103      	str	r1, [sp, #12]
   17f5c:	7f01      	ldrb	r1, [r0, #28]
   17f5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   17f62:	6881      	ldr	r1, [r0, #8]
   17f64:	9102      	str	r1, [sp, #8]
   17f66:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   17f6a:	b18a      	cbz	r2, 17f90 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x98>
   17f6c:	2a02      	cmp	r2, #2
   17f6e:	d011      	beq.n	17f94 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   17f70:	9a01      	ldr	r2, [sp, #4]
   17f72:	4291      	cmp	r1, r2
   17f74:	f080 8098 	bcs.w	180a8 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   17f78:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
   17f7c:	f647 53f3 	movw	r3, #32243	; 0x7df3
   17f80:	f2c0 0301 	movt	r3, #1
   17f84:	6852      	ldr	r2, [r2, #4]
   17f86:	429a      	cmp	r2, r3
   17f88:	d104      	bne.n	17f94 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   17f8a:	f856 1031 	ldr.w	r1, [r6, r1, lsl #3]
   17f8e:	6809      	ldr	r1, [r1, #0]
   17f90:	2201      	movs	r2, #1
   17f92:	e000      	b.n	17f96 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9e>
   17f94:	2200      	movs	r2, #0
   17f96:	e9cd 2104 	strd	r2, r1, [sp, #16]
   17f9a:	f857 1009 	ldr.w	r1, [r7, r9]
   17f9e:	68c0      	ldr	r0, [r0, #12]
   17fa0:	b180      	cbz	r0, 17fc4 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xcc>
   17fa2:	2802      	cmp	r0, #2
   17fa4:	d010      	beq.n	17fc8 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   17fa6:	9801      	ldr	r0, [sp, #4]
   17fa8:	4281      	cmp	r1, r0
   17faa:	d27d      	bcs.n	180a8 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   17fac:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   17fb0:	f647 52f3 	movw	r2, #32243	; 0x7df3
   17fb4:	f2c0 0201 	movt	r2, #1
   17fb8:	6840      	ldr	r0, [r0, #4]
   17fba:	4290      	cmp	r0, r2
   17fbc:	d104      	bne.n	17fc8 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   17fbe:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   17fc2:	6801      	ldr	r1, [r0, #0]
   17fc4:	2001      	movs	r0, #1
   17fc6:	e000      	b.n	17fca <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd2>
   17fc8:	2000      	movs	r0, #0
   17fca:	eb07 0209 	add.w	r2, r7, r9
   17fce:	e9cd 0106 	strd	r0, r1, [sp, #24]
   17fd2:	9801      	ldr	r0, [sp, #4]
   17fd4:	f852 1c10 	ldr.w	r1, [r2, #-16]
   17fd8:	4281      	cmp	r1, r0
   17fda:	d25d      	bcs.n	18098 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1a0>
   17fdc:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   17fe0:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   17fe4:	684a      	ldr	r2, [r1, #4]
   17fe6:	a902      	add	r1, sp, #8
   17fe8:	4790      	blx	r2
   17fea:	2800      	cmp	r0, #0
   17fec:	d149      	bne.n	18082 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   17fee:	45da      	cmp	sl, fp
   17ff0:	d24b      	bcs.n	1808a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x192>
   17ff2:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   17ff6:	eb05 0208 	add.w	r2, r5, r8
   17ffa:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   17ffe:	68db      	ldr	r3, [r3, #12]
   18000:	4798      	blx	r3
   18002:	f109 0920 	add.w	r9, r9, #32
   18006:	f108 0808 	add.w	r8, r8, #8
   1800a:	f10a 0a01 	add.w	sl, sl, #1
   1800e:	2800      	cmp	r0, #0
   18010:	d0a0      	beq.n	17f54 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x5c>
   18012:	e036      	b.n	18082 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   18014:	6956      	ldr	r6, [r2, #20]
   18016:	e9d2 9400 	ldrd	r9, r4, [r2]
   1801a:	42a6      	cmp	r6, r4
   1801c:	bf88      	it	hi
   1801e:	4626      	movhi	r6, r4
   18020:	b30e      	cbz	r6, 18066 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   18022:	6917      	ldr	r7, [r2, #16]
   18024:	e9d9 3200 	ldrd	r3, r2, [r9]
   18028:	68cd      	ldr	r5, [r1, #12]
   1802a:	4619      	mov	r1, r3
   1802c:	47a8      	blx	r5
   1802e:	bb40      	cbnz	r0, 18082 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   18030:	f10d 0808 	add.w	r8, sp, #8
   18034:	2500      	movs	r5, #0
   18036:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
   1803a:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   1803e:	684a      	ldr	r2, [r1, #4]
   18040:	4641      	mov	r1, r8
   18042:	4790      	blx	r2
   18044:	b9e8      	cbnz	r0, 18082 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   18046:	f105 0a01 	add.w	sl, r5, #1
   1804a:	45b2      	cmp	sl, r6
   1804c:	d20d      	bcs.n	1806a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x172>
   1804e:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   18052:	eb09 02c5 	add.w	r2, r9, r5, lsl #3
   18056:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   1805a:	68db      	ldr	r3, [r3, #12]
   1805c:	4798      	blx	r3
   1805e:	2800      	cmp	r0, #0
   18060:	4655      	mov	r5, sl
   18062:	d0e8      	beq.n	18036 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x13e>
   18064:	e00d      	b.n	18082 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   18066:	f04f 0a00 	mov.w	sl, #0
   1806a:	4554      	cmp	r4, sl
   1806c:	d910      	bls.n	18090 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   1806e:	eb09 02ca 	add.w	r2, r9, sl, lsl #3
   18072:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   18076:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
   1807a:	6852      	ldr	r2, [r2, #4]
   1807c:	68db      	ldr	r3, [r3, #12]
   1807e:	4798      	blx	r3
   18080:	b130      	cbz	r0, 18090 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   18082:	2001      	movs	r0, #1
   18084:	b00b      	add	sp, #44	; 0x2c
   18086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1808a:	46a9      	mov	r9, r5
   1808c:	4554      	cmp	r4, sl
   1808e:	d8ee      	bhi.n	1806e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x176>
   18090:	2000      	movs	r0, #0
   18092:	b00b      	add	sp, #44	; 0x2c
   18094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18098:	f640 5088 	movw	r0, #3464	; 0xd88
   1809c:	f2c0 0002 	movt	r0, #2
   180a0:	9a01      	ldr	r2, [sp, #4]
   180a2:	f7ff fc47 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   180a6:	defe      	udf	#254	; 0xfe
   180a8:	f640 5098 	movw	r0, #3480	; 0xd98
   180ac:	f2c0 0002 	movt	r0, #2
   180b0:	9a01      	ldr	r2, [sp, #4]
   180b2:	f7ff fc3f 	bl	17934 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   180b6:	defe      	udf	#254	; 0xfe

000180b8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>:
   180b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180bc:	b083      	sub	sp, #12
   180be:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
   180c2:	469a      	mov	sl, r3
   180c4:	4604      	mov	r4, r0
   180c6:	b1e1      	cbz	r1, 18102 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x4a>
   180c8:	f8d4 e000 	ldr.w	lr, [r4]
   180cc:	f04f 082b 	mov.w	r8, #43	; 0x2b
   180d0:	f01e 0101 	ands.w	r1, lr, #1
   180d4:	bf08      	it	eq
   180d6:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
   180da:	eb01 0907 	add.w	r9, r1, r7
   180de:	ea5f 714e 	movs.w	r1, lr, lsl #29
   180e2:	d517      	bpl.n	18114 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x5c>
   180e4:	f1ba 0f00 	cmp.w	sl, #0
   180e8:	d033      	beq.n	18152 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9a>
   180ea:	f1aa 0101 	sub.w	r1, sl, #1
   180ee:	f00a 0c03 	and.w	ip, sl, #3
   180f2:	2903      	cmp	r1, #3
   180f4:	d22f      	bcs.n	18156 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9e>
   180f6:	2100      	movs	r1, #0
   180f8:	4613      	mov	r3, r2
   180fa:	f1bc 0f00 	cmp.w	ip, #0
   180fe:	d152      	bne.n	181a6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xee>
   18100:	e069      	b.n	181d6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   18102:	f8d4 e000 	ldr.w	lr, [r4]
   18106:	f107 0901 	add.w	r9, r7, #1
   1810a:	f04f 082d 	mov.w	r8, #45	; 0x2d
   1810e:	ea5f 714e 	movs.w	r1, lr, lsl #29
   18112:	d4e7      	bmi.n	180e4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x2c>
   18114:	f04f 0a00 	mov.w	sl, #0
   18118:	2200      	movs	r2, #0
   1811a:	68a0      	ldr	r0, [r4, #8]
   1811c:	2801      	cmp	r0, #1
   1811e:	d161      	bne.n	181e4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   18120:	f8d4 b00c 	ldr.w	fp, [r4, #12]
   18124:	45cb      	cmp	fp, r9
   18126:	d95d      	bls.n	181e4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   18128:	ea5f 700e 	movs.w	r0, lr, lsl #28
   1812c:	d46e      	bmi.n	1820c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x154>
   1812e:	9202      	str	r2, [sp, #8]
   18130:	ebab 0109 	sub.w	r1, fp, r9
   18134:	f894 2020 	ldrb.w	r2, [r4, #32]
   18138:	2000      	movs	r0, #0
   1813a:	46a9      	mov	r9, r5
   1813c:	460e      	mov	r6, r1
   1813e:	2a03      	cmp	r2, #3
   18140:	bf08      	it	eq
   18142:	2201      	moveq	r2, #1
   18144:	e8df f002 	tbb	[pc, r2]
   18148:	02840287 	.word	0x02840287
   1814c:	2600      	movs	r6, #0
   1814e:	4608      	mov	r0, r1
   18150:	e081      	b.n	18256 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x19e>
   18152:	2100      	movs	r1, #0
   18154:	e03f      	b.n	181d6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   18156:	ebac 060a 	sub.w	r6, ip, sl
   1815a:	2100      	movs	r1, #0
   1815c:	4693      	mov	fp, r2
   1815e:	4613      	mov	r3, r2
   18160:	e9cd 7501 	strd	r7, r5, [sp, #4]
   18164:	781a      	ldrb	r2, [r3, #0]
   18166:	785d      	ldrb	r5, [r3, #1]
   18168:	7898      	ldrb	r0, [r3, #2]
   1816a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1816e:	78df      	ldrb	r7, [r3, #3]
   18170:	2a80      	cmp	r2, #128	; 0x80
   18172:	f005 02c0 	and.w	r2, r5, #192	; 0xc0
   18176:	bf08      	it	eq
   18178:	3101      	addeq	r1, #1
   1817a:	2a80      	cmp	r2, #128	; 0x80
   1817c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   18180:	bf08      	it	eq
   18182:	3101      	addeq	r1, #1
   18184:	2880      	cmp	r0, #128	; 0x80
   18186:	f007 00c0 	and.w	r0, r7, #192	; 0xc0
   1818a:	bf08      	it	eq
   1818c:	3101      	addeq	r1, #1
   1818e:	2880      	cmp	r0, #128	; 0x80
   18190:	bf08      	it	eq
   18192:	3101      	addeq	r1, #1
   18194:	3304      	adds	r3, #4
   18196:	3604      	adds	r6, #4
   18198:	d1e4      	bne.n	18164 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xac>
   1819a:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   1819e:	465a      	mov	r2, fp
   181a0:	f1bc 0f00 	cmp.w	ip, #0
   181a4:	d017      	beq.n	181d6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   181a6:	7818      	ldrb	r0, [r3, #0]
   181a8:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   181ac:	2880      	cmp	r0, #128	; 0x80
   181ae:	bf08      	it	eq
   181b0:	3101      	addeq	r1, #1
   181b2:	f1bc 0f01 	cmp.w	ip, #1
   181b6:	d00e      	beq.n	181d6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   181b8:	7858      	ldrb	r0, [r3, #1]
   181ba:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   181be:	2880      	cmp	r0, #128	; 0x80
   181c0:	bf08      	it	eq
   181c2:	3101      	addeq	r1, #1
   181c4:	f1bc 0f02 	cmp.w	ip, #2
   181c8:	d005      	beq.n	181d6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   181ca:	7898      	ldrb	r0, [r3, #2]
   181cc:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   181d0:	2880      	cmp	r0, #128	; 0x80
   181d2:	bf08      	it	eq
   181d4:	3101      	addeq	r1, #1
   181d6:	eb09 000a 	add.w	r0, r9, sl
   181da:	eba0 0901 	sub.w	r9, r0, r1
   181de:	68a0      	ldr	r0, [r4, #8]
   181e0:	2801      	cmp	r0, #1
   181e2:	d09d      	beq.n	18120 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x68>
   181e4:	4620      	mov	r0, r4
   181e6:	4641      	mov	r1, r8
   181e8:	4653      	mov	r3, sl
   181ea:	f000 f893 	bl	18314 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   181ee:	b120      	cbz	r0, 181fa <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x142>
   181f0:	2601      	movs	r6, #1
   181f2:	4630      	mov	r0, r6
   181f4:	b003      	add	sp, #12
   181f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181fa:	69e1      	ldr	r1, [r4, #28]
   181fc:	463a      	mov	r2, r7
   181fe:	69a0      	ldr	r0, [r4, #24]
   18200:	68cb      	ldr	r3, [r1, #12]
   18202:	4629      	mov	r1, r5
   18204:	b003      	add	sp, #12
   18206:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1820a:	4718      	bx	r3
   1820c:	6860      	ldr	r0, [r4, #4]
   1820e:	2601      	movs	r6, #1
   18210:	9002      	str	r0, [sp, #8]
   18212:	2030      	movs	r0, #48	; 0x30
   18214:	f894 1020 	ldrb.w	r1, [r4, #32]
   18218:	4653      	mov	r3, sl
   1821a:	6060      	str	r0, [r4, #4]
   1821c:	4620      	mov	r0, r4
   1821e:	9101      	str	r1, [sp, #4]
   18220:	4641      	mov	r1, r8
   18222:	f884 6020 	strb.w	r6, [r4, #32]
   18226:	f000 f875 	bl	18314 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   1822a:	2800      	cmp	r0, #0
   1822c:	d1e1      	bne.n	181f2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   1822e:	f894 2020 	ldrb.w	r2, [r4, #32]
   18232:	ebab 0109 	sub.w	r1, fp, r9
   18236:	2000      	movs	r0, #0
   18238:	46a9      	mov	r9, r5
   1823a:	2a03      	cmp	r2, #3
   1823c:	bf08      	it	eq
   1823e:	2201      	moveq	r2, #1
   18240:	460e      	mov	r6, r1
   18242:	e8df f002 	tbb	[pc, r2]
   18246:	0235      	.short	0x0235
   18248:	0232      	.short	0x0232
   1824a:	2600      	movs	r6, #0
   1824c:	4608      	mov	r0, r1
   1824e:	e02f      	b.n	182b0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1f8>
   18250:	0848      	lsrs	r0, r1, #1
   18252:	3101      	adds	r1, #1
   18254:	084e      	lsrs	r6, r1, #1
   18256:	1c45      	adds	r5, r0, #1
   18258:	3d01      	subs	r5, #1
   1825a:	d007      	beq.n	1826c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1b4>
   1825c:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   18260:	6861      	ldr	r1, [r4, #4]
   18262:	6912      	ldr	r2, [r2, #16]
   18264:	4790      	blx	r2
   18266:	2800      	cmp	r0, #0
   18268:	d0f6      	beq.n	18258 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1a0>
   1826a:	e7c1      	b.n	181f0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   1826c:	9a02      	ldr	r2, [sp, #8]
   1826e:	4620      	mov	r0, r4
   18270:	4641      	mov	r1, r8
   18272:	4653      	mov	r3, sl
   18274:	f8d4 b004 	ldr.w	fp, [r4, #4]
   18278:	f000 f84c 	bl	18314 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   1827c:	2800      	cmp	r0, #0
   1827e:	d1b7      	bne.n	181f0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   18280:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   18284:	463a      	mov	r2, r7
   18286:	68cb      	ldr	r3, [r1, #12]
   18288:	4649      	mov	r1, r9
   1828a:	4798      	blx	r3
   1828c:	2800      	cmp	r0, #0
   1828e:	d1af      	bne.n	181f0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   18290:	e9d4 5406 	ldrd	r5, r4, [r4, #24]
   18294:	1c77      	adds	r7, r6, #1
   18296:	2601      	movs	r6, #1
   18298:	3f01      	subs	r7, #1
   1829a:	d02c      	beq.n	182f6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x23e>
   1829c:	6922      	ldr	r2, [r4, #16]
   1829e:	4628      	mov	r0, r5
   182a0:	4659      	mov	r1, fp
   182a2:	4790      	blx	r2
   182a4:	2800      	cmp	r0, #0
   182a6:	d0f7      	beq.n	18298 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1e0>
   182a8:	e7a3      	b.n	181f2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   182aa:	0848      	lsrs	r0, r1, #1
   182ac:	3101      	adds	r1, #1
   182ae:	084e      	lsrs	r6, r1, #1
   182b0:	1c45      	adds	r5, r0, #1
   182b2:	3d01      	subs	r5, #1
   182b4:	d007      	beq.n	182c6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x20e>
   182b6:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   182ba:	6861      	ldr	r1, [r4, #4]
   182bc:	6912      	ldr	r2, [r2, #16]
   182be:	4790      	blx	r2
   182c0:	2800      	cmp	r0, #0
   182c2:	d0f6      	beq.n	182b2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1fa>
   182c4:	e794      	b.n	181f0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   182c6:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   182ca:	463a      	mov	r2, r7
   182cc:	68cb      	ldr	r3, [r1, #12]
   182ce:	4649      	mov	r1, r9
   182d0:	f8d4 8004 	ldr.w	r8, [r4, #4]
   182d4:	4798      	blx	r3
   182d6:	2800      	cmp	r0, #0
   182d8:	f47f af8a 	bne.w	181f0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   182dc:	e9d4 9506 	ldrd	r9, r5, [r4, #24]
   182e0:	1c77      	adds	r7, r6, #1
   182e2:	2601      	movs	r6, #1
   182e4:	3f01      	subs	r7, #1
   182e6:	d00b      	beq.n	18300 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x248>
   182e8:	692a      	ldr	r2, [r5, #16]
   182ea:	4648      	mov	r0, r9
   182ec:	4641      	mov	r1, r8
   182ee:	4790      	blx	r2
   182f0:	2800      	cmp	r0, #0
   182f2:	d0f7      	beq.n	182e4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x22c>
   182f4:	e77d      	b.n	181f2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   182f6:	2600      	movs	r6, #0
   182f8:	4630      	mov	r0, r6
   182fa:	b003      	add	sp, #12
   182fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18300:	9801      	ldr	r0, [sp, #4]
   18302:	2600      	movs	r6, #0
   18304:	f884 0020 	strb.w	r0, [r4, #32]
   18308:	9802      	ldr	r0, [sp, #8]
   1830a:	6060      	str	r0, [r4, #4]
   1830c:	4630      	mov	r0, r6
   1830e:	b003      	add	sp, #12
   18310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018314 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>:
   18314:	b570      	push	{r4, r5, r6, lr}
   18316:	461c      	mov	r4, r3
   18318:	4615      	mov	r5, r2
   1831a:	4606      	mov	r6, r0
   1831c:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
   18320:	d006      	beq.n	18330 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   18322:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
   18326:	6912      	ldr	r2, [r2, #16]
   18328:	4790      	blx	r2
   1832a:	b108      	cbz	r0, 18330 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   1832c:	2001      	movs	r0, #1
   1832e:	bd70      	pop	{r4, r5, r6, pc}
   18330:	b13d      	cbz	r5, 18342 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x2e>
   18332:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
   18336:	4622      	mov	r2, r4
   18338:	68cb      	ldr	r3, [r1, #12]
   1833a:	4629      	mov	r1, r5
   1833c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18340:	4718      	bx	r3
   18342:	2000      	movs	r0, #0
   18344:	bd70      	pop	{r4, r5, r6, pc}
	...

00018348 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>:
   18348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1834c:	b081      	sub	sp, #4
   1834e:	f8d0 e008 	ldr.w	lr, [r0, #8]
   18352:	4682      	mov	sl, r0
   18354:	6900      	ldr	r0, [r0, #16]
   18356:	4691      	mov	r9, r2
   18358:	4688      	mov	r8, r1
   1835a:	f1be 0f01 	cmp.w	lr, #1
   1835e:	d111      	bne.n	18384 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x3c>
   18360:	2801      	cmp	r0, #1
   18362:	d012      	beq.n	1838a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x42>
   18364:	f1b9 0f00 	cmp.w	r9, #0
   18368:	f000 80c5 	beq.w	184f6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1ae>
   1836c:	f1a9 0101 	sub.w	r1, r9, #1
   18370:	f009 0003 	and.w	r0, r9, #3
   18374:	2903      	cmp	r1, #3
   18376:	d267      	bcs.n	18448 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x100>
   18378:	2100      	movs	r1, #0
   1837a:	4642      	mov	r2, r8
   1837c:	2800      	cmp	r0, #0
   1837e:	f040 8083 	bne.w	18488 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x140>
   18382:	e097      	b.n	184b4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   18384:	2801      	cmp	r0, #1
   18386:	f040 80bd 	bne.w	18504 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   1838a:	f1b9 0f00 	cmp.w	r9, #0
   1838e:	d054      	beq.n	1843a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xf2>
   18390:	f8da 0014 	ldr.w	r0, [sl, #20]
   18394:	eb08 0109 	add.w	r1, r8, r9
   18398:	2200      	movs	r2, #0
   1839a:	4647      	mov	r7, r8
   1839c:	1c43      	adds	r3, r0, #1
   1839e:	4646      	mov	r6, r8
   183a0:	463c      	mov	r4, r7
   183a2:	f914 5b01 	ldrsb.w	r5, [r4], #1
   183a6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   183aa:	b2e8      	uxtb	r0, r5
   183ac:	dc2e      	bgt.n	1840c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   183ae:	428c      	cmp	r4, r1
   183b0:	d01a      	beq.n	183e8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xa0>
   183b2:	787d      	ldrb	r5, [r7, #1]
   183b4:	1cbc      	adds	r4, r7, #2
   183b6:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   183ba:	4627      	mov	r7, r4
   183bc:	f000 0b1f 	and.w	fp, r0, #31
   183c0:	28df      	cmp	r0, #223	; 0xdf
   183c2:	d917      	bls.n	183f4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xac>
   183c4:	428f      	cmp	r7, r1
   183c6:	d018      	beq.n	183fa <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xb2>
   183c8:	f817 4b01 	ldrb.w	r4, [r7], #1
   183cc:	f004 0c3f 	and.w	ip, r4, #63	; 0x3f
   183d0:	463c      	mov	r4, r7
   183d2:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   183d6:	28f0      	cmp	r0, #240	; 0xf0
   183d8:	d316      	bcc.n	18408 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc0>
   183da:	428f      	cmp	r7, r1
   183dc:	d020      	beq.n	18420 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xd8>
   183de:	f817 0b01 	ldrb.w	r0, [r7], #1
   183e2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   183e6:	e01d      	b.n	18424 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xdc>
   183e8:	2500      	movs	r5, #0
   183ea:	460f      	mov	r7, r1
   183ec:	f000 0b1f 	and.w	fp, r0, #31
   183f0:	28df      	cmp	r0, #223	; 0xdf
   183f2:	d8e7      	bhi.n	183c4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x7c>
   183f4:	ea45 108b 	orr.w	r0, r5, fp, lsl #6
   183f8:	e008      	b.n	1840c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   183fa:	f04f 0c00 	mov.w	ip, #0
   183fe:	460f      	mov	r7, r1
   18400:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   18404:	28f0      	cmp	r0, #240	; 0xf0
   18406:	d2e8      	bcs.n	183da <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x92>
   18408:	ea45 300b 	orr.w	r0, r5, fp, lsl #12
   1840c:	4627      	mov	r7, r4
   1840e:	3b01      	subs	r3, #1
   18410:	d065      	beq.n	184de <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x196>
   18412:	1b90      	subs	r0, r2, r6
   18414:	42b9      	cmp	r1, r7
   18416:	eb00 0207 	add.w	r2, r0, r7
   1841a:	463e      	mov	r6, r7
   1841c:	d1c0      	bne.n	183a0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x58>
   1841e:	e061      	b.n	184e4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   18420:	2000      	movs	r0, #0
   18422:	4627      	mov	r7, r4
   18424:	f44f 14e0 	mov.w	r4, #1835008	; 0x1c0000
   18428:	ea04 448b 	and.w	r4, r4, fp, lsl #18
   1842c:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   18430:	4428      	add	r0, r5
   18432:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   18436:	d1ea      	bne.n	1840e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc6>
   18438:	e054      	b.n	184e4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   1843a:	2200      	movs	r2, #0
   1843c:	f1be 0f01 	cmp.w	lr, #1
   18440:	d054      	beq.n	184ec <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   18442:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   18446:	e062      	b.n	1850e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1c6>
   18448:	eba0 0309 	sub.w	r3, r0, r9
   1844c:	2100      	movs	r1, #0
   1844e:	4642      	mov	r2, r8
   18450:	7817      	ldrb	r7, [r2, #0]
   18452:	7856      	ldrb	r6, [r2, #1]
   18454:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
   18458:	7895      	ldrb	r5, [r2, #2]
   1845a:	78d4      	ldrb	r4, [r2, #3]
   1845c:	2f80      	cmp	r7, #128	; 0x80
   1845e:	f006 07c0 	and.w	r7, r6, #192	; 0xc0
   18462:	bf08      	it	eq
   18464:	3101      	addeq	r1, #1
   18466:	2f80      	cmp	r7, #128	; 0x80
   18468:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
   1846c:	bf08      	it	eq
   1846e:	3101      	addeq	r1, #1
   18470:	2f80      	cmp	r7, #128	; 0x80
   18472:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   18476:	bf08      	it	eq
   18478:	3101      	addeq	r1, #1
   1847a:	2f80      	cmp	r7, #128	; 0x80
   1847c:	bf08      	it	eq
   1847e:	3101      	addeq	r1, #1
   18480:	3204      	adds	r2, #4
   18482:	3304      	adds	r3, #4
   18484:	d1e4      	bne.n	18450 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x108>
   18486:	b1a8      	cbz	r0, 184b4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   18488:	7813      	ldrb	r3, [r2, #0]
   1848a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1848e:	2b80      	cmp	r3, #128	; 0x80
   18490:	bf08      	it	eq
   18492:	3101      	addeq	r1, #1
   18494:	2801      	cmp	r0, #1
   18496:	d00d      	beq.n	184b4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   18498:	7853      	ldrb	r3, [r2, #1]
   1849a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1849e:	2b80      	cmp	r3, #128	; 0x80
   184a0:	bf08      	it	eq
   184a2:	3101      	addeq	r1, #1
   184a4:	2802      	cmp	r0, #2
   184a6:	d005      	beq.n	184b4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   184a8:	7890      	ldrb	r0, [r2, #2]
   184aa:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   184ae:	2880      	cmp	r0, #128	; 0x80
   184b0:	bf08      	it	eq
   184b2:	3101      	addeq	r1, #1
   184b4:	f8da 000c 	ldr.w	r0, [sl, #12]
   184b8:	eba9 0101 	sub.w	r1, r9, r1
   184bc:	4281      	cmp	r1, r0
   184be:	d221      	bcs.n	18504 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   184c0:	f1b9 0f00 	cmp.w	r9, #0
   184c4:	d029      	beq.n	1851a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d2>
   184c6:	f1a9 0101 	sub.w	r1, r9, #1
   184ca:	f009 0c03 	and.w	ip, r9, #3
   184ce:	2903      	cmp	r1, #3
   184d0:	d225      	bcs.n	1851e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d6>
   184d2:	2100      	movs	r1, #0
   184d4:	4643      	mov	r3, r8
   184d6:	f1bc 0f00 	cmp.w	ip, #0
   184da:	d142      	bne.n	18562 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x21a>
   184dc:	e059      	b.n	18592 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   184de:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   184e2:	d167      	bne.n	185b4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x26c>
   184e4:	464a      	mov	r2, r9
   184e6:	f1be 0f01 	cmp.w	lr, #1
   184ea:	d1aa      	bne.n	18442 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   184ec:	4691      	mov	r9, r2
   184ee:	f1b9 0f00 	cmp.w	r9, #0
   184f2:	f47f af3b 	bne.w	1836c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24>
   184f6:	2100      	movs	r1, #0
   184f8:	f8da 000c 	ldr.w	r0, [sl, #12]
   184fc:	eba9 0101 	sub.w	r1, r9, r1
   18500:	4281      	cmp	r1, r0
   18502:	d3dd      	bcc.n	184c0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x178>
   18504:	f8da 101c 	ldr.w	r1, [sl, #28]
   18508:	464a      	mov	r2, r9
   1850a:	f8da 0018 	ldr.w	r0, [sl, #24]
   1850e:	68cb      	ldr	r3, [r1, #12]
   18510:	4641      	mov	r1, r8
   18512:	b001      	add	sp, #4
   18514:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18518:	4718      	bx	r3
   1851a:	2100      	movs	r1, #0
   1851c:	e039      	b.n	18592 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   1851e:	ebac 0709 	sub.w	r7, ip, r9
   18522:	2100      	movs	r1, #0
   18524:	4643      	mov	r3, r8
   18526:	781e      	ldrb	r6, [r3, #0]
   18528:	785d      	ldrb	r5, [r3, #1]
   1852a:	f006 06c0 	and.w	r6, r6, #192	; 0xc0
   1852e:	789c      	ldrb	r4, [r3, #2]
   18530:	78da      	ldrb	r2, [r3, #3]
   18532:	2e80      	cmp	r6, #128	; 0x80
   18534:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   18538:	bf08      	it	eq
   1853a:	3101      	addeq	r1, #1
   1853c:	2e80      	cmp	r6, #128	; 0x80
   1853e:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
   18542:	bf08      	it	eq
   18544:	3101      	addeq	r1, #1
   18546:	2e80      	cmp	r6, #128	; 0x80
   18548:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1854c:	bf08      	it	eq
   1854e:	3101      	addeq	r1, #1
   18550:	2a80      	cmp	r2, #128	; 0x80
   18552:	bf08      	it	eq
   18554:	3101      	addeq	r1, #1
   18556:	3304      	adds	r3, #4
   18558:	3704      	adds	r7, #4
   1855a:	d1e4      	bne.n	18526 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1de>
   1855c:	f1bc 0f00 	cmp.w	ip, #0
   18560:	d017      	beq.n	18592 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   18562:	781a      	ldrb	r2, [r3, #0]
   18564:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   18568:	2a80      	cmp	r2, #128	; 0x80
   1856a:	bf08      	it	eq
   1856c:	3101      	addeq	r1, #1
   1856e:	f1bc 0f01 	cmp.w	ip, #1
   18572:	d00e      	beq.n	18592 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   18574:	785a      	ldrb	r2, [r3, #1]
   18576:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1857a:	2a80      	cmp	r2, #128	; 0x80
   1857c:	bf08      	it	eq
   1857e:	3101      	addeq	r1, #1
   18580:	f1bc 0f02 	cmp.w	ip, #2
   18584:	d005      	beq.n	18592 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   18586:	789a      	ldrb	r2, [r3, #2]
   18588:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1858c:	2a80      	cmp	r2, #128	; 0x80
   1858e:	bf08      	it	eq
   18590:	3101      	addeq	r1, #1
   18592:	f89a 3020 	ldrb.w	r3, [sl, #32]
   18596:	eba1 0109 	sub.w	r1, r1, r9
   1859a:	4401      	add	r1, r0
   1859c:	2000      	movs	r0, #0
   1859e:	1eda      	subs	r2, r3, #3
   185a0:	bf18      	it	ne
   185a2:	461a      	movne	r2, r3
   185a4:	460e      	mov	r6, r1
   185a6:	e8df f002 	tbb	[pc, r2]
   185aa:	0216      	.short	0x0216
   185ac:	0213      	.short	0x0213
   185ae:	2600      	movs	r6, #0
   185b0:	4608      	mov	r0, r1
   185b2:	e010      	b.n	185d6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x28e>
   185b4:	2a00      	cmp	r2, #0
   185b6:	bf18      	it	ne
   185b8:	454a      	cmpne	r2, r9
   185ba:	d134      	bne.n	18626 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2de>
   185bc:	4640      	mov	r0, r8
   185be:	2800      	cmp	r0, #0
   185c0:	bf0c      	ite	eq
   185c2:	464a      	moveq	r2, r9
   185c4:	4680      	movne	r8, r0
   185c6:	f1be 0f01 	cmp.w	lr, #1
   185ca:	f43f af8f 	beq.w	184ec <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   185ce:	e738      	b.n	18442 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   185d0:	0848      	lsrs	r0, r1, #1
   185d2:	3101      	adds	r1, #1
   185d4:	084e      	lsrs	r6, r1, #1
   185d6:	1c44      	adds	r4, r0, #1
   185d8:	3c01      	subs	r4, #1
   185da:	d008      	beq.n	185ee <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2a6>
   185dc:	e9da 0206 	ldrd	r0, r2, [sl, #24]
   185e0:	f8da 1004 	ldr.w	r1, [sl, #4]
   185e4:	6912      	ldr	r2, [r2, #16]
   185e6:	4790      	blx	r2
   185e8:	2800      	cmp	r0, #0
   185ea:	d0f5      	beq.n	185d8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x290>
   185ec:	e013      	b.n	18616 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   185ee:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   185f2:	464a      	mov	r2, r9
   185f4:	68cb      	ldr	r3, [r1, #12]
   185f6:	4641      	mov	r1, r8
   185f8:	f8da 7004 	ldr.w	r7, [sl, #4]
   185fc:	4798      	blx	r3
   185fe:	b950      	cbnz	r0, 18616 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   18600:	e9da 4506 	ldrd	r4, r5, [sl, #24]
   18604:	3601      	adds	r6, #1
   18606:	3e01      	subs	r6, #1
   18608:	d009      	beq.n	1861e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2d6>
   1860a:	692a      	ldr	r2, [r5, #16]
   1860c:	4620      	mov	r0, r4
   1860e:	4639      	mov	r1, r7
   18610:	4790      	blx	r2
   18612:	2800      	cmp	r0, #0
   18614:	d0f7      	beq.n	18606 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2be>
   18616:	2001      	movs	r0, #1
   18618:	b001      	add	sp, #4
   1861a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1861e:	2000      	movs	r0, #0
   18620:	b001      	add	sp, #4
   18622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18626:	454a      	cmp	r2, r9
   18628:	d204      	bcs.n	18634 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ec>
   1862a:	f918 0002 	ldrsb.w	r0, [r8, r2]
   1862e:	f110 0f40 	cmn.w	r0, #64	; 0x40
   18632:	dac3      	bge.n	185bc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x274>
   18634:	2000      	movs	r0, #0
   18636:	2200      	movs	r2, #0
   18638:	2800      	cmp	r0, #0
   1863a:	bf0c      	ite	eq
   1863c:	464a      	moveq	r2, r9
   1863e:	4680      	movne	r8, r0
   18640:	f1be 0f01 	cmp.w	lr, #1
   18644:	f43f af52 	beq.w	184ec <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   18648:	e6fb      	b.n	18442 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>

0001864a <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>:
   1864a:	7800      	ldrb	r0, [r0, #0]
   1864c:	f3c0 1000 	ubfx	r0, r0, #4, #1
   18650:	4770      	bx	lr

00018652 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>:
   18652:	7800      	ldrb	r0, [r0, #0]
   18654:	f3c0 1040 	ubfx	r0, r0, #5, #1
   18658:	4770      	bx	lr

0001865a <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>:
   1865a:	b570      	push	{r4, r5, r6, lr}
   1865c:	460d      	mov	r5, r1
   1865e:	4606      	mov	r6, r0
   18660:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   18664:	461c      	mov	r4, r3
   18666:	68cb      	ldr	r3, [r1, #12]
   18668:	4611      	mov	r1, r2
   1866a:	4622      	mov	r2, r4
   1866c:	4798      	blx	r3
   1866e:	7230      	strb	r0, [r6, #8]
   18670:	fab4 f084 	clz	r0, r4
   18674:	0940      	lsrs	r0, r0, #5
   18676:	7270      	strb	r0, [r6, #9]
   18678:	2000      	movs	r0, #0
   1867a:	e9c6 5000 	strd	r5, r0, [r6]
   1867e:	bd70      	pop	{r4, r5, r6, pc}

00018680 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E>:
   18680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18684:	b085      	sub	sp, #20
   18686:	460c      	mov	r4, r1
   18688:	4605      	mov	r5, r0
   1868a:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   1868e:	690a      	ldr	r2, [r1, #16]
   18690:	2127      	movs	r1, #39	; 0x27
   18692:	4790      	blx	r2
   18694:	b118      	cbz	r0, 1869e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x1e>
   18696:	2001      	movs	r0, #1
   18698:	b005      	add	sp, #20
   1869a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1869e:	6829      	ldr	r1, [r5, #0]
   186a0:	a801      	add	r0, sp, #4
   186a2:	2201      	movs	r2, #1
   186a4:	f7ff f85c 	bl	17760 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>
   186a8:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   186ac:	f04f 091c 	mov.w	r9, #28
   186b0:	f8dd 800c 	ldr.w	r8, [sp, #12]
   186b4:	f5b5 1f88 	cmp.w	r5, #1114112	; 0x110000
   186b8:	f89d 6010 	ldrb.w	r6, [sp, #16]
   186bc:	d139      	bne.n	18732 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xb2>
   186be:	f44f 1588 	mov.w	r5, #1114112	; 0x110000
   186c2:	2f02      	cmp	r7, #2
   186c4:	f0c0 806b 	bcc.w	1879e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x11e>
   186c8:	d00c      	beq.n	186e4 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x64>
   186ca:	b2f0      	uxtb	r0, r6
   186cc:	2604      	movs	r6, #4
   186ce:	2703      	movs	r7, #3
   186d0:	215c      	movs	r1, #92	; 0x5c
   186d2:	e8df f000 	tbb	[pc, r0]
   186d6:	0364      	.short	0x0364
   186d8:	09242010 	.word	0x09242010
   186dc:	2600      	movs	r6, #0
   186de:	2703      	movs	r7, #3
   186e0:	217d      	movs	r1, #125	; 0x7d
   186e2:	e001      	b.n	186e8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   186e4:	2701      	movs	r7, #1
   186e6:	215c      	movs	r1, #92	; 0x5c
   186e8:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   186ec:	6912      	ldr	r2, [r2, #16]
   186ee:	4790      	blx	r2
   186f0:	2800      	cmp	r0, #0
   186f2:	d0e6      	beq.n	186c2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x42>
   186f4:	e7cf      	b.n	18696 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   186f6:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   186fa:	2602      	movs	r6, #2
   186fc:	2703      	movs	r7, #3
   186fe:	f1b8 0f00 	cmp.w	r8, #0
   18702:	fa25 f100 	lsr.w	r1, r5, r0
   18706:	bf08      	it	eq
   18708:	2601      	moveq	r6, #1
   1870a:	bf18      	it	ne
   1870c:	f1a8 0801 	subne.w	r8, r8, #1
   18710:	f367 111f 	bfi	r1, r7, #4, #28
   18714:	e7e8      	b.n	186e8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   18716:	2602      	movs	r6, #2
   18718:	2703      	movs	r7, #3
   1871a:	217b      	movs	r1, #123	; 0x7b
   1871c:	e7e4      	b.n	186e8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   1871e:	2703      	movs	r7, #3
   18720:	2175      	movs	r1, #117	; 0x75
   18722:	2603      	movs	r6, #3
   18724:	e7e0      	b.n	186e8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   18726:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   1872a:	6912      	ldr	r2, [r2, #16]
   1872c:	4790      	blx	r2
   1872e:	2800      	cmp	r0, #0
   18730:	d1b1      	bne.n	18696 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   18732:	4638      	mov	r0, r7
   18734:	2701      	movs	r7, #1
   18736:	215c      	movs	r1, #92	; 0x5c
   18738:	e8df f000 	tbb	[pc, r0]
   1873c:	06020331 	.word	0x06020331
   18740:	e7f1      	b.n	18726 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   18742:	2700      	movs	r7, #0
   18744:	4629      	mov	r1, r5
   18746:	e7ee      	b.n	18726 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   18748:	b2f0      	uxtb	r0, r6
   1874a:	2604      	movs	r6, #4
   1874c:	2703      	movs	r7, #3
   1874e:	215c      	movs	r1, #92	; 0x5c
   18750:	e8df f000 	tbb	[pc, r0]
   18754:	1d080425 	.word	0x1d080425
   18758:	0321      	.short	0x0321
   1875a:	e7e4      	b.n	18726 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1875c:	2600      	movs	r6, #0
   1875e:	2703      	movs	r7, #3
   18760:	217d      	movs	r1, #125	; 0x7d
   18762:	e7e0      	b.n	18726 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   18764:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   18768:	2602      	movs	r6, #2
   1876a:	2703      	movs	r7, #3
   1876c:	fa25 f000 	lsr.w	r0, r5, r0
   18770:	f000 000f 	and.w	r0, r0, #15
   18774:	f100 0157 	add.w	r1, r0, #87	; 0x57
   18778:	280a      	cmp	r0, #10
   1877a:	bf38      	it	cc
   1877c:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   18780:	f1b8 0f00 	cmp.w	r8, #0
   18784:	bf0c      	ite	eq
   18786:	2601      	moveq	r6, #1
   18788:	f1a8 0801 	subne.w	r8, r8, #1
   1878c:	e7cb      	b.n	18726 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1878e:	2602      	movs	r6, #2
   18790:	2703      	movs	r7, #3
   18792:	217b      	movs	r1, #123	; 0x7b
   18794:	e7c7      	b.n	18726 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   18796:	2703      	movs	r7, #3
   18798:	2175      	movs	r1, #117	; 0x75
   1879a:	2603      	movs	r6, #3
   1879c:	e7c3      	b.n	18726 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1879e:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   187a2:	690a      	ldr	r2, [r1, #16]
   187a4:	2127      	movs	r1, #39	; 0x27
   187a6:	b005      	add	sp, #20
   187a8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   187ac:	4710      	bx	r2

000187ae <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>:
   187ae:	b08c      	sub	sp, #48	; 0x30
   187b0:	e9cd 0100 	strd	r0, r1, [sp]
   187b4:	2002      	movs	r0, #2
   187b6:	a908      	add	r1, sp, #32
   187b8:	9007      	str	r0, [sp, #28]
   187ba:	9106      	str	r1, [sp, #24]
   187bc:	2100      	movs	r1, #0
   187be:	9105      	str	r1, [sp, #20]
   187c0:	e9cd 0103 	strd	r0, r1, [sp, #12]
   187c4:	f640 50e8 	movw	r0, #3560	; 0xde8
   187c8:	f2c0 0002 	movt	r0, #2
   187cc:	a901      	add	r1, sp, #4
   187ce:	9002      	str	r0, [sp, #8]
   187d0:	f249 6089 	movw	r0, #38537	; 0x9689
   187d4:	f2c0 0001 	movt	r0, #1
   187d8:	900b      	str	r0, [sp, #44]	; 0x2c
   187da:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   187de:	4668      	mov	r0, sp
   187e0:	f640 51f8 	movw	r1, #3576	; 0xdf8
   187e4:	9008      	str	r0, [sp, #32]
   187e6:	a802      	add	r0, sp, #8
   187e8:	f2c0 0102 	movt	r1, #2
   187ec:	f7ff f8c2 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   187f0:	defe      	udf	#254	; 0xfe

000187f2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>:
   187f2:	b08c      	sub	sp, #48	; 0x30
   187f4:	e9cd 0100 	strd	r0, r1, [sp]
   187f8:	2002      	movs	r0, #2
   187fa:	a908      	add	r1, sp, #32
   187fc:	9007      	str	r0, [sp, #28]
   187fe:	9106      	str	r1, [sp, #24]
   18800:	2100      	movs	r1, #0
   18802:	9105      	str	r1, [sp, #20]
   18804:	e9cd 0103 	strd	r0, r1, [sp, #12]
   18808:	f640 602c 	movw	r0, #3628	; 0xe2c
   1880c:	f2c0 0002 	movt	r0, #2
   18810:	a901      	add	r1, sp, #4
   18812:	9002      	str	r0, [sp, #8]
   18814:	f249 6089 	movw	r0, #38537	; 0x9689
   18818:	f2c0 0001 	movt	r0, #1
   1881c:	900b      	str	r0, [sp, #44]	; 0x2c
   1881e:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   18822:	4668      	mov	r0, sp
   18824:	f640 613c 	movw	r1, #3644	; 0xe3c
   18828:	9008      	str	r0, [sp, #32]
   1882a:	a802      	add	r0, sp, #8
   1882c:	f2c0 0102 	movt	r1, #2
   18830:	f7ff f8a0 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   18834:	defe      	udf	#254	; 0xfe

00018836 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>:
   18836:	b09a      	sub	sp, #104	; 0x68
   18838:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   1883c:	e9cd 2300 	strd	r2, r3, [sp]
   18840:	d802      	bhi.n	18848 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12>
   18842:	2501      	movs	r5, #1
   18844:	468c      	mov	ip, r1
   18846:	e03e      	b.n	188c6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   18848:	f1c1 0e00 	rsb	lr, r1, #0
   1884c:	f44f 7c80 	mov.w	ip, #256	; 0x100
   18850:	458c      	cmp	ip, r1
   18852:	d205      	bcs.n	18860 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2a>
   18854:	f910 400c 	ldrsb.w	r4, [r0, ip]
   18858:	f114 0f41 	cmn.w	r4, #65	; 0x41
   1885c:	f300 8108 	bgt.w	18a70 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23a>
   18860:	eb0e 040c 	add.w	r4, lr, ip
   18864:	f1ac 0601 	sub.w	r6, ip, #1
   18868:	2c01      	cmp	r4, #1
   1886a:	d02a      	beq.n	188c2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   1886c:	428e      	cmp	r6, r1
   1886e:	d206      	bcs.n	1887e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x48>
   18870:	eb00 050c 	add.w	r5, r0, ip
   18874:	f915 5c01 	ldrsb.w	r5, [r5, #-1]
   18878:	f115 0f41 	cmn.w	r5, #65	; 0x41
   1887c:	dc21      	bgt.n	188c2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   1887e:	f1ac 0602 	sub.w	r6, ip, #2
   18882:	2c02      	cmp	r4, #2
   18884:	d01d      	beq.n	188c2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   18886:	428e      	cmp	r6, r1
   18888:	d206      	bcs.n	18898 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x62>
   1888a:	eb00 050c 	add.w	r5, r0, ip
   1888e:	f915 5c02 	ldrsb.w	r5, [r5, #-2]
   18892:	f115 0f41 	cmn.w	r5, #65	; 0x41
   18896:	dc14      	bgt.n	188c2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   18898:	f1ac 0603 	sub.w	r6, ip, #3
   1889c:	2c03      	cmp	r4, #3
   1889e:	d010      	beq.n	188c2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   188a0:	428e      	cmp	r6, r1
   188a2:	d206      	bcs.n	188b2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x7c>
   188a4:	eb00 050c 	add.w	r5, r0, ip
   188a8:	f915 5c03 	ldrsb.w	r5, [r5, #-3]
   188ac:	f115 0f41 	cmn.w	r5, #65	; 0x41
   188b0:	dc07      	bgt.n	188c2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   188b2:	f1bc 0c04 	subs.w	ip, ip, #4
   188b6:	f04f 0500 	mov.w	r5, #0
   188ba:	d004      	beq.n	188c6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   188bc:	2c04      	cmp	r4, #4
   188be:	d1c7      	bne.n	18850 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1a>
   188c0:	e001      	b.n	188c6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   188c2:	2500      	movs	r5, #0
   188c4:	46b4      	mov	ip, r6
   188c6:	2605      	movs	r6, #5
   188c8:	2d00      	cmp	r5, #0
   188ca:	f640 750a 	movw	r5, #3850	; 0xf0a
   188ce:	e9cd 0c02 	strd	r0, ip, [sp, #8]
   188d2:	bf18      	it	ne
   188d4:	2600      	movne	r6, #0
   188d6:	9605      	str	r6, [sp, #20]
   188d8:	f640 2654 	movw	r6, #2644	; 0xa54
   188dc:	f2c0 0502 	movt	r5, #2
   188e0:	f2c0 0602 	movt	r6, #2
   188e4:	bf18      	it	ne
   188e6:	4635      	movne	r5, r6
   188e8:	428a      	cmp	r2, r1
   188ea:	9504      	str	r5, [sp, #16]
   188ec:	bf98      	it	ls
   188ee:	428b      	cmpls	r3, r1
   188f0:	d92a      	bls.n	18948 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x112>
   188f2:	428a      	cmp	r2, r1
   188f4:	f04f 0003 	mov.w	r0, #3
   188f8:	a910      	add	r1, sp, #64	; 0x40
   188fa:	bf88      	it	hi
   188fc:	4613      	movhi	r3, r2
   188fe:	900f      	str	r0, [sp, #60]	; 0x3c
   18900:	910e      	str	r1, [sp, #56]	; 0x38
   18902:	2100      	movs	r1, #0
   18904:	910d      	str	r1, [sp, #52]	; 0x34
   18906:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   1890a:	f640 7030 	movw	r0, #3888	; 0xf30
   1890e:	f2c0 0002 	movt	r0, #2
   18912:	a904      	add	r1, sp, #16
   18914:	900a      	str	r0, [sp, #40]	; 0x28
   18916:	f249 7077 	movw	r0, #38775	; 0x9777
   1891a:	f2c0 0001 	movt	r0, #1
   1891e:	9308      	str	r3, [sp, #32]
   18920:	9015      	str	r0, [sp, #84]	; 0x54
   18922:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
   18926:	a802      	add	r0, sp, #8
   18928:	f640 7148 	movw	r1, #3912	; 0xf48
   1892c:	9012      	str	r0, [sp, #72]	; 0x48
   1892e:	f249 6089 	movw	r0, #38537	; 0x9689
   18932:	f2c0 0102 	movt	r1, #2
   18936:	f2c0 0001 	movt	r0, #1
   1893a:	9011      	str	r0, [sp, #68]	; 0x44
   1893c:	a808      	add	r0, sp, #32
   1893e:	9010      	str	r0, [sp, #64]	; 0x40
   18940:	a80a      	add	r0, sp, #40	; 0x28
   18942:	f7ff f817 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   18946:	defe      	udf	#254	; 0xfe
   18948:	429a      	cmp	r2, r3
   1894a:	f200 80f1 	bhi.w	18b30 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2fa>
   1894e:	2a00      	cmp	r2, #0
   18950:	bf18      	it	ne
   18952:	4291      	cmpne	r1, r2
   18954:	d109      	bne.n	1896a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x134>
   18956:	461a      	mov	r2, r3
   18958:	2a00      	cmp	r2, #0
   1895a:	9206      	str	r2, [sp, #24]
   1895c:	bf18      	it	ne
   1895e:	428a      	cmpne	r2, r1
   18960:	d10e      	bne.n	18980 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x14a>
   18962:	4613      	mov	r3, r2
   18964:	428b      	cmp	r3, r1
   18966:	d047      	beq.n	189f8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   18968:	e052      	b.n	18a10 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   1896a:	d9f5      	bls.n	18958 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x122>
   1896c:	5686      	ldrsb	r6, [r0, r2]
   1896e:	f116 0f40 	cmn.w	r6, #64	; 0x40
   18972:	bfa8      	it	ge
   18974:	461a      	movge	r2, r3
   18976:	2a00      	cmp	r2, #0
   18978:	9206      	str	r2, [sp, #24]
   1897a:	bf18      	it	ne
   1897c:	428a      	cmpne	r2, r1
   1897e:	d0f0      	beq.n	18962 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   18980:	f1a0 0c01 	sub.w	ip, r0, #1
   18984:	f101 0e02 	add.w	lr, r1, #2
   18988:	1ccc      	adds	r4, r1, #3
   1898a:	1c4d      	adds	r5, r1, #1
   1898c:	1d0e      	adds	r6, r1, #4
   1898e:	428a      	cmp	r2, r1
   18990:	d206      	bcs.n	189a0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x16a>
   18992:	eb0c 0302 	add.w	r3, ip, r2
   18996:	f993 3001 	ldrsb.w	r3, [r3, #1]
   1899a:	f113 0f41 	cmn.w	r3, #65	; 0x41
   1899e:	dce0      	bgt.n	18962 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   189a0:	1e53      	subs	r3, r2, #1
   189a2:	bf18      	it	ne
   189a4:	4295      	cmpne	r5, r2
   189a6:	d025      	beq.n	189f4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   189a8:	428b      	cmp	r3, r1
   189aa:	d204      	bcs.n	189b6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x180>
   189ac:	f91c 7002 	ldrsb.w	r7, [ip, r2]
   189b0:	f117 0f41 	cmn.w	r7, #65	; 0x41
   189b4:	dc1e      	bgt.n	189f4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   189b6:	1e93      	subs	r3, r2, #2
   189b8:	bf18      	it	ne
   189ba:	4596      	cmpne	lr, r2
   189bc:	d01a      	beq.n	189f4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   189be:	428b      	cmp	r3, r1
   189c0:	d206      	bcs.n	189d0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x19a>
   189c2:	eb0c 0702 	add.w	r7, ip, r2
   189c6:	f917 7c01 	ldrsb.w	r7, [r7, #-1]
   189ca:	f117 0f41 	cmn.w	r7, #65	; 0x41
   189ce:	dc11      	bgt.n	189f4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   189d0:	1ed3      	subs	r3, r2, #3
   189d2:	bf18      	it	ne
   189d4:	4294      	cmpne	r4, r2
   189d6:	d00d      	beq.n	189f4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   189d8:	428b      	cmp	r3, r1
   189da:	d206      	bcs.n	189ea <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1b4>
   189dc:	eb0c 0702 	add.w	r7, ip, r2
   189e0:	f917 7c02 	ldrsb.w	r7, [r7, #-2]
   189e4:	f117 0f41 	cmn.w	r7, #65	; 0x41
   189e8:	dc04      	bgt.n	189f4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   189ea:	1f13      	subs	r3, r2, #4
   189ec:	d002      	beq.n	189f4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   189ee:	4296      	cmp	r6, r2
   189f0:	461a      	mov	r2, r3
   189f2:	d1cc      	bne.n	1898e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x158>
   189f4:	428b      	cmp	r3, r1
   189f6:	d10b      	bne.n	18a10 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   189f8:	f640 30f0 	movw	r0, #3056	; 0xbf0
   189fc:	f640 7298 	movw	r2, #3992	; 0xf98
   18a00:	f2c0 0002 	movt	r0, #2
   18a04:	f2c0 0202 	movt	r2, #2
   18a08:	212b      	movs	r1, #43	; 0x2b
   18a0a:	f7fe ff7d 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   18a0e:	defe      	udf	#254	; 0xfe
   18a10:	18c5      	adds	r5, r0, r3
   18a12:	462e      	mov	r6, r5
   18a14:	f916 4b01 	ldrsb.w	r4, [r6], #1
   18a18:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   18a1c:	b2e2      	uxtb	r2, r4
   18a1e:	dd02      	ble.n	18a26 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1f0>
   18a20:	9207      	str	r2, [sp, #28]
   18a22:	2101      	movs	r1, #1
   18a24:	e04d      	b.n	18ac2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   18a26:	4408      	add	r0, r1
   18a28:	4286      	cmp	r6, r0
   18a2a:	d10b      	bne.n	18a44 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x20e>
   18a2c:	2500      	movs	r5, #0
   18a2e:	4606      	mov	r6, r0
   18a30:	f002 011f 	and.w	r1, r2, #31
   18a34:	2adf      	cmp	r2, #223	; 0xdf
   18a36:	d80d      	bhi.n	18a54 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x21e>
   18a38:	ea45 1081 	orr.w	r0, r5, r1, lsl #6
   18a3c:	2880      	cmp	r0, #128	; 0x80
   18a3e:	9007      	str	r0, [sp, #28]
   18a40:	d333      	bcc.n	18aaa <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   18a42:	e034      	b.n	18aae <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   18a44:	7869      	ldrb	r1, [r5, #1]
   18a46:	1cae      	adds	r6, r5, #2
   18a48:	f001 053f 	and.w	r5, r1, #63	; 0x3f
   18a4c:	f002 011f 	and.w	r1, r2, #31
   18a50:	2adf      	cmp	r2, #223	; 0xdf
   18a52:	d9f1      	bls.n	18a38 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x202>
   18a54:	4286      	cmp	r6, r0
   18a56:	d10d      	bne.n	18a74 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23e>
   18a58:	2400      	movs	r4, #0
   18a5a:	4606      	mov	r6, r0
   18a5c:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   18a60:	2af0      	cmp	r2, #240	; 0xf0
   18a62:	d20f      	bcs.n	18a84 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x24e>
   18a64:	ea45 3001 	orr.w	r0, r5, r1, lsl #12
   18a68:	2880      	cmp	r0, #128	; 0x80
   18a6a:	9007      	str	r0, [sp, #28]
   18a6c:	d31d      	bcc.n	18aaa <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   18a6e:	e01e      	b.n	18aae <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   18a70:	2500      	movs	r5, #0
   18a72:	e728      	b.n	188c6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   18a74:	f816 4b01 	ldrb.w	r4, [r6], #1
   18a78:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   18a7c:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   18a80:	2af0      	cmp	r2, #240	; 0xf0
   18a82:	d3ef      	bcc.n	18a64 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x22e>
   18a84:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   18a88:	ea02 4181 	and.w	r1, r2, r1, lsl #18
   18a8c:	4286      	cmp	r6, r0
   18a8e:	bf1a      	itte	ne
   18a90:	7830      	ldrbne	r0, [r6, #0]
   18a92:	f000 003f 	andne.w	r0, r0, #63	; 0x3f
   18a96:	2000      	moveq	r0, #0
   18a98:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
   18a9c:	4408      	add	r0, r1
   18a9e:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   18aa2:	d0a9      	beq.n	189f8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   18aa4:	2880      	cmp	r0, #128	; 0x80
   18aa6:	9007      	str	r0, [sp, #28]
   18aa8:	d201      	bcs.n	18aae <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   18aaa:	2101      	movs	r1, #1
   18aac:	e009      	b.n	18ac2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   18aae:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   18ab2:	d201      	bcs.n	18ab8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x282>
   18ab4:	2102      	movs	r1, #2
   18ab6:	e004      	b.n	18ac2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   18ab8:	2104      	movs	r1, #4
   18aba:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   18abe:	bf38      	it	cc
   18ac0:	2103      	movcc	r1, #3
   18ac2:	4419      	add	r1, r3
   18ac4:	aa10      	add	r2, sp, #64	; 0x40
   18ac6:	a808      	add	r0, sp, #32
   18ac8:	e9cd 3108 	strd	r3, r1, [sp, #32]
   18acc:	2105      	movs	r1, #5
   18ace:	910f      	str	r1, [sp, #60]	; 0x3c
   18ad0:	920e      	str	r2, [sp, #56]	; 0x38
   18ad2:	2200      	movs	r2, #0
   18ad4:	920d      	str	r2, [sp, #52]	; 0x34
   18ad6:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
   18ada:	f640 71d4 	movw	r1, #4052	; 0xfd4
   18ade:	f2c0 0102 	movt	r1, #2
   18ae2:	aa04      	add	r2, sp, #16
   18ae4:	910a      	str	r1, [sp, #40]	; 0x28
   18ae6:	f249 7177 	movw	r1, #38775	; 0x9777
   18aea:	f2c0 0101 	movt	r1, #1
   18aee:	9119      	str	r1, [sp, #100]	; 0x64
   18af0:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
   18af4:	a902      	add	r1, sp, #8
   18af6:	9116      	str	r1, [sp, #88]	; 0x58
   18af8:	f247 7101 	movw	r1, #30465	; 0x7701
   18afc:	f2c0 0101 	movt	r1, #1
   18b00:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   18b04:	f248 6081 	movw	r0, #34433	; 0x8681
   18b08:	f2c0 0001 	movt	r0, #1
   18b0c:	f640 71fc 	movw	r1, #4092	; 0xffc
   18b10:	9013      	str	r0, [sp, #76]	; 0x4c
   18b12:	a807      	add	r0, sp, #28
   18b14:	9012      	str	r0, [sp, #72]	; 0x48
   18b16:	f249 6089 	movw	r0, #38537	; 0x9689
   18b1a:	f2c0 0001 	movt	r0, #1
   18b1e:	f2c0 0102 	movt	r1, #2
   18b22:	9011      	str	r0, [sp, #68]	; 0x44
   18b24:	a806      	add	r0, sp, #24
   18b26:	9010      	str	r0, [sp, #64]	; 0x40
   18b28:	a80a      	add	r0, sp, #40	; 0x28
   18b2a:	f7fe ff23 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   18b2e:	defe      	udf	#254	; 0xfe
   18b30:	2004      	movs	r0, #4
   18b32:	a910      	add	r1, sp, #64	; 0x40
   18b34:	900f      	str	r0, [sp, #60]	; 0x3c
   18b36:	910e      	str	r1, [sp, #56]	; 0x38
   18b38:	2100      	movs	r1, #0
   18b3a:	910d      	str	r1, [sp, #52]	; 0x34
   18b3c:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   18b40:	f640 7068 	movw	r0, #3944	; 0xf68
   18b44:	f2c0 0002 	movt	r0, #2
   18b48:	a904      	add	r1, sp, #16
   18b4a:	900a      	str	r0, [sp, #40]	; 0x28
   18b4c:	f249 7077 	movw	r0, #38775	; 0x9777
   18b50:	f2c0 0001 	movt	r0, #1
   18b54:	9017      	str	r0, [sp, #92]	; 0x5c
   18b56:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
   18b5a:	a802      	add	r0, sp, #8
   18b5c:	9014      	str	r0, [sp, #80]	; 0x50
   18b5e:	f249 6089 	movw	r0, #38537	; 0x9689
   18b62:	a901      	add	r1, sp, #4
   18b64:	f2c0 0001 	movt	r0, #1
   18b68:	9013      	str	r0, [sp, #76]	; 0x4c
   18b6a:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
   18b6e:	f640 7188 	movw	r1, #3976	; 0xf88
   18b72:	4668      	mov	r0, sp
   18b74:	f2c0 0102 	movt	r1, #2
   18b78:	9010      	str	r0, [sp, #64]	; 0x40
   18b7a:	a80a      	add	r0, sp, #40	; 0x28
   18b7c:	f7fe fefa 	bl	17974 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   18b80:	defe      	udf	#254	; 0xfe

00018b82 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>:
   18b82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18b86:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   18b8a:	d270      	bcs.n	18c6e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xec>
   18b8c:	f241 0e1c 	movw	lr, #4124	; 0x101c
   18b90:	f241 086e 	movw	r8, #4206	; 0x106e
   18b94:	fa1f f980 	uxth.w	r9, r0
   18b98:	f2c0 0e02 	movt	lr, #2
   18b9c:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   18ba0:	f04f 0a00 	mov.w	sl, #0
   18ba4:	f2c0 0802 	movt	r8, #2
   18ba8:	4675      	mov	r5, lr
   18baa:	786e      	ldrb	r6, [r5, #1]
   18bac:	4652      	mov	r2, sl
   18bae:	782b      	ldrb	r3, [r5, #0]
   18bb0:	3502      	adds	r5, #2
   18bb2:	44b2      	add	sl, r6
   18bb4:	4563      	cmp	r3, ip
   18bb6:	d129      	bne.n	18c0c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x8a>
   18bb8:	4592      	cmp	sl, r2
   18bba:	f0c0 8112 	bcc.w	18de2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   18bbe:	ea4f 035a 	mov.w	r3, sl, lsr #1
   18bc2:	2b92      	cmp	r3, #146	; 0x92
   18bc4:	f200 8112 	bhi.w	18dec <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x26a>
   18bc8:	eb08 0302 	add.w	r3, r8, r2
   18bcc:	199a      	adds	r2, r3, r6
   18bce:	b31e      	cbz	r6, 18c18 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   18bd0:	461f      	mov	r7, r3
   18bd2:	b2c4      	uxtb	r4, r0
   18bd4:	f817 1b01 	ldrb.w	r1, [r7], #1
   18bd8:	42a1      	cmp	r1, r4
   18bda:	f000 80b6 	beq.w	18d4a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18bde:	4297      	cmp	r7, r2
   18be0:	d01a      	beq.n	18c18 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   18be2:	7859      	ldrb	r1, [r3, #1]
   18be4:	42a1      	cmp	r1, r4
   18be6:	f000 80b0 	beq.w	18d4a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18bea:	1c99      	adds	r1, r3, #2
   18bec:	4291      	cmp	r1, r2
   18bee:	d013      	beq.n	18c18 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   18bf0:	7899      	ldrb	r1, [r3, #2]
   18bf2:	42a1      	cmp	r1, r4
   18bf4:	f000 80a9 	beq.w	18d4a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18bf8:	1cd9      	adds	r1, r3, #3
   18bfa:	4291      	cmp	r1, r2
   18bfc:	d00c      	beq.n	18c18 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   18bfe:	1d19      	adds	r1, r3, #4
   18c00:	78db      	ldrb	r3, [r3, #3]
   18c02:	3e04      	subs	r6, #4
   18c04:	42a3      	cmp	r3, r4
   18c06:	460b      	mov	r3, r1
   18c08:	d1e1      	bne.n	18bce <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x4c>
   18c0a:	e09e      	b.n	18d4a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18c0c:	d808      	bhi.n	18c20 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   18c0e:	f10e 0252 	add.w	r2, lr, #82	; 0x52
   18c12:	4295      	cmp	r5, r2
   18c14:	d1c9      	bne.n	18baa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   18c16:	e003      	b.n	18c20 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   18c18:	f10e 0152 	add.w	r1, lr, #82	; 0x52
   18c1c:	428d      	cmp	r5, r1
   18c1e:	d1c4      	bne.n	18baa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   18c20:	f241 1593 	movw	r5, #4499	; 0x1193
   18c24:	2101      	movs	r1, #1
   18c26:	f2c0 0502 	movt	r5, #2
   18c2a:	4628      	mov	r0, r5
   18c2c:	4602      	mov	r2, r0
   18c2e:	f812 7b01 	ldrb.w	r7, [r2], #1
   18c32:	b27e      	sxtb	r6, r7
   18c34:	2e00      	cmp	r6, #0
   18c36:	d404      	bmi.n	18c42 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xc0>
   18c38:	4610      	mov	r0, r2
   18c3a:	ebb9 0907 	subs.w	r9, r9, r7
   18c3e:	d50f      	bpl.n	18c60 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xde>
   18c40:	e0bd      	b.n	18dbe <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18c42:	f505 739d 	add.w	r3, r5, #314	; 0x13a
   18c46:	429a      	cmp	r2, r3
   18c48:	f000 80db 	beq.w	18e02 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   18c4c:	7842      	ldrb	r2, [r0, #1]
   18c4e:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   18c52:	3002      	adds	r0, #2
   18c54:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   18c58:	ebb9 0907 	subs.w	r9, r9, r7
   18c5c:	f100 80af 	bmi.w	18dbe <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18c60:	f505 729d 	add.w	r2, r5, #314	; 0x13a
   18c64:	f081 0101 	eor.w	r1, r1, #1
   18c68:	4290      	cmp	r0, r2
   18c6a:	d1df      	bne.n	18c2c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xaa>
   18c6c:	e0a7      	b.n	18dbe <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18c6e:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
   18c72:	d26f      	bcs.n	18d54 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1d2>
   18c74:	f241 2ecd 	movw	lr, #4813	; 0x12cd
   18c78:	f241 3813 	movw	r8, #4883	; 0x1313
   18c7c:	fa1f f980 	uxth.w	r9, r0
   18c80:	f2c0 0e02 	movt	lr, #2
   18c84:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   18c88:	f04f 0a00 	mov.w	sl, #0
   18c8c:	f2c0 0802 	movt	r8, #2
   18c90:	4675      	mov	r5, lr
   18c92:	786e      	ldrb	r6, [r5, #1]
   18c94:	4652      	mov	r2, sl
   18c96:	782b      	ldrb	r3, [r5, #0]
   18c98:	3502      	adds	r5, #2
   18c9a:	44b2      	add	sl, r6
   18c9c:	4563      	cmp	r3, ip
   18c9e:	d125      	bne.n	18cec <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x16a>
   18ca0:	4592      	cmp	sl, r2
   18ca2:	f0c0 809e 	bcc.w	18de2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   18ca6:	f1ba 0fa6 	cmp.w	sl, #166	; 0xa6
   18caa:	f200 80a5 	bhi.w	18df8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x276>
   18cae:	eb08 0302 	add.w	r3, r8, r2
   18cb2:	199a      	adds	r2, r3, r6
   18cb4:	b306      	cbz	r6, 18cf8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   18cb6:	461f      	mov	r7, r3
   18cb8:	b2c4      	uxtb	r4, r0
   18cba:	f817 1b01 	ldrb.w	r1, [r7], #1
   18cbe:	42a1      	cmp	r1, r4
   18cc0:	d043      	beq.n	18d4a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18cc2:	4297      	cmp	r7, r2
   18cc4:	d018      	beq.n	18cf8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   18cc6:	7859      	ldrb	r1, [r3, #1]
   18cc8:	42a1      	cmp	r1, r4
   18cca:	d03e      	beq.n	18d4a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18ccc:	1c99      	adds	r1, r3, #2
   18cce:	4291      	cmp	r1, r2
   18cd0:	d012      	beq.n	18cf8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   18cd2:	7899      	ldrb	r1, [r3, #2]
   18cd4:	42a1      	cmp	r1, r4
   18cd6:	d038      	beq.n	18d4a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18cd8:	1cd9      	adds	r1, r3, #3
   18cda:	4291      	cmp	r1, r2
   18cdc:	d00c      	beq.n	18cf8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   18cde:	1d19      	adds	r1, r3, #4
   18ce0:	78db      	ldrb	r3, [r3, #3]
   18ce2:	3e04      	subs	r6, #4
   18ce4:	42a3      	cmp	r3, r4
   18ce6:	460b      	mov	r3, r1
   18ce8:	d1e4      	bne.n	18cb4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x132>
   18cea:	e02e      	b.n	18d4a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18cec:	d808      	bhi.n	18d00 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   18cee:	f10e 0246 	add.w	r2, lr, #70	; 0x46
   18cf2:	4295      	cmp	r5, r2
   18cf4:	d1cd      	bne.n	18c92 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   18cf6:	e003      	b.n	18d00 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   18cf8:	f10e 0146 	add.w	r1, lr, #70	; 0x46
   18cfc:	428d      	cmp	r5, r1
   18cfe:	d1c8      	bne.n	18c92 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   18d00:	f241 35b9 	movw	r5, #5049	; 0x13b9
   18d04:	2101      	movs	r1, #1
   18d06:	f2c0 0502 	movt	r5, #2
   18d0a:	4628      	mov	r0, r5
   18d0c:	4602      	mov	r2, r0
   18d0e:	f812 7b01 	ldrb.w	r7, [r2], #1
   18d12:	b27e      	sxtb	r6, r7
   18d14:	2e00      	cmp	r6, #0
   18d16:	d40a      	bmi.n	18d2e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1ac>
   18d18:	4610      	mov	r0, r2
   18d1a:	ebb9 0907 	subs.w	r9, r9, r7
   18d1e:	d44e      	bmi.n	18dbe <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18d20:	f505 72cc 	add.w	r2, r5, #408	; 0x198
   18d24:	f081 0101 	eor.w	r1, r1, #1
   18d28:	4290      	cmp	r0, r2
   18d2a:	d1ef      	bne.n	18d0c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x18a>
   18d2c:	e047      	b.n	18dbe <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18d2e:	f505 73cc 	add.w	r3, r5, #408	; 0x198
   18d32:	429a      	cmp	r2, r3
   18d34:	d065      	beq.n	18e02 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   18d36:	7842      	ldrb	r2, [r0, #1]
   18d38:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   18d3c:	3002      	adds	r0, #2
   18d3e:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   18d42:	ebb9 0907 	subs.w	r9, r9, r7
   18d46:	d5eb      	bpl.n	18d20 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x19e>
   18d48:	e039      	b.n	18dbe <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18d4a:	2100      	movs	r1, #0
   18d4c:	f001 0001 	and.w	r0, r1, #1
   18d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18d54:	f240 51e2 	movw	r1, #1506	; 0x5e2
   18d58:	f240 63e2 	movw	r3, #1762	; 0x6e2
   18d5c:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
   18d60:	1842      	adds	r2, r0, r1
   18d62:	f2c0 030b 	movt	r3, #11
   18d66:	2100      	movs	r1, #0
   18d68:	429a      	cmp	r2, r3
   18d6a:	d328      	bcc.n	18dbe <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18d6c:	f241 421f 	movw	r2, #5151	; 0x141f
   18d70:	f640 431f 	movw	r3, #3103	; 0xc1f
   18d74:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   18d78:	4402      	add	r2, r0
   18d7a:	429a      	cmp	r2, r3
   18d7c:	bf21      	itttt	cs
   18d7e:	f243 125e 	movwcs	r2, #12638	; 0x315e
   18d82:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   18d86:	4402      	addcs	r2, r0
   18d88:	2a0e      	cmpcs	r2, #14
   18d8a:	d318      	bcc.n	18dbe <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18d8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   18d90:	f64b 031e 	movw	r3, #47134	; 0xb81e
   18d94:	f2c0 021f 	movt	r2, #31
   18d98:	f2c0 0302 	movt	r3, #2
   18d9c:	4002      	ands	r2, r0
   18d9e:	429a      	cmp	r2, r3
   18da0:	d00d      	beq.n	18dbe <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18da2:	f645 1229 	movw	r2, #22825	; 0x5929
   18da6:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   18daa:	4402      	add	r2, r0
   18dac:	2a29      	cmp	r2, #41	; 0x29
   18dae:	bf21      	itttt	cs
   18db0:	f644 02cb 	movwcs	r2, #18635	; 0x48cb
   18db4:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   18db8:	4402      	addcs	r2, r0
   18dba:	2a0b      	cmpcs	r2, #11
   18dbc:	d203      	bcs.n	18dc6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x244>
   18dbe:	f001 0001 	and.w	r0, r1, #1
   18dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18dc6:	f5a0 2060 	sub.w	r0, r0, #917504	; 0xe0000
   18dca:	f64f 620f 	movw	r2, #65039	; 0xfe0f
   18dce:	f5a0 71f8 	sub.w	r1, r0, #496	; 0x1f0
   18dd2:	2000      	movs	r0, #0
   18dd4:	f2c0 0202 	movt	r2, #2
   18dd8:	4291      	cmp	r1, r2
   18dda:	bf88      	it	hi
   18ddc:	2001      	movhi	r0, #1
   18dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18de2:	4610      	mov	r0, r2
   18de4:	4651      	mov	r1, sl
   18de6:	f7ff fd04 	bl	187f2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   18dea:	defe      	udf	#254	; 0xfe
   18dec:	4650      	mov	r0, sl
   18dee:	f240 1125 	movw	r1, #293	; 0x125
   18df2:	f7ff fcdc 	bl	187ae <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   18df6:	defe      	udf	#254	; 0xfe
   18df8:	4650      	mov	r0, sl
   18dfa:	21a6      	movs	r1, #166	; 0xa6
   18dfc:	f7ff fcd7 	bl	187ae <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   18e00:	defe      	udf	#254	; 0xfe
   18e02:	f640 30f0 	movw	r0, #3056	; 0xbf0
   18e06:	f241 020c 	movw	r2, #4108	; 0x100c
   18e0a:	f2c0 0002 	movt	r0, #2
   18e0e:	f2c0 0202 	movt	r2, #2
   18e12:	212b      	movs	r1, #43	; 0x2b
   18e14:	f7fe fd78 	bl	17908 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   18e18:	defe      	udf	#254	; 0xfe

00018e1a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>:
   18e1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e1e:	b0a3      	sub	sp, #140	; 0x8c
   18e20:	468c      	mov	ip, r1
   18e22:	6809      	ldr	r1, [r1, #0]
   18e24:	06ca      	lsls	r2, r1, #27
   18e26:	d44a      	bmi.n	18ebe <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xa4>
   18e28:	6804      	ldr	r4, [r0, #0]
   18e2a:	0688      	lsls	r0, r1, #26
   18e2c:	f100 8089 	bmi.w	18f42 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x128>
   18e30:	f248 5e1f 	movw	lr, #34079	; 0x851f
   18e34:	f640 428f 	movw	r2, #3215	; 0xc8f
   18e38:	f242 7810 	movw	r8, #10000	; 0x2710
   18e3c:	4544      	cmp	r4, r8
   18e3e:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   18e42:	f2c0 0202 	movt	r2, #2
   18e46:	f0c0 80e3 	bcc.w	19010 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1f6>
   18e4a:	f241 7959 	movw	r9, #5977	; 0x1759
   18e4e:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   18e52:	f10d 0b0c 	add.w	fp, sp, #12
   18e56:	2300      	movs	r3, #0
   18e58:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   18e5c:	f04f 0a64 	mov.w	sl, #100	; 0x64
   18e60:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   18e64:	fba4 0109 	umull	r0, r1, r4, r9
   18e68:	42bc      	cmp	r4, r7
   18e6a:	ea4f 3051 	mov.w	r0, r1, lsr #13
   18e6e:	fb00 4118 	mls	r1, r0, r8, r4
   18e72:	4604      	mov	r4, r0
   18e74:	b28d      	uxth	r5, r1
   18e76:	fba5 560e 	umull	r5, r6, r5, lr
   18e7a:	ea4f 1556 	mov.w	r5, r6, lsr #5
   18e7e:	eb0b 0603 	add.w	r6, fp, r3
   18e82:	fb05 111a 	mls	r1, r5, sl, r1
   18e86:	f832 5015 	ldrh.w	r5, [r2, r5, lsl #1]
   18e8a:	f1a3 0304 	sub.w	r3, r3, #4
   18e8e:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   18e92:	b289      	uxth	r1, r1
   18e94:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   18e98:	f8a6 1025 	strh.w	r1, [r6, #37]	; 0x25
   18e9c:	d8e2      	bhi.n	18e64 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x4a>
   18e9e:	f103 0127 	add.w	r1, r3, #39	; 0x27
   18ea2:	4604      	mov	r4, r0
   18ea4:	2c63      	cmp	r4, #99	; 0x63
   18ea6:	f300 80b7 	bgt.w	19018 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1fe>
   18eaa:	4623      	mov	r3, r4
   18eac:	2b0a      	cmp	r3, #10
   18eae:	f2c0 80c3 	blt.w	19038 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x21e>
   18eb2:	1e88      	subs	r0, r1, #2
   18eb4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   18eb8:	aa03      	add	r2, sp, #12
   18eba:	5211      	strh	r1, [r2, r0]
   18ebc:	e0c1      	b.n	19042 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x228>
   18ebe:	6800      	ldr	r0, [r0, #0]
   18ec0:	f10d 0e0c 	add.w	lr, sp, #12
   18ec4:	2381      	movs	r3, #129	; 0x81
   18ec6:	2100      	movs	r1, #0
   18ec8:	f000 020f 	and.w	r2, r0, #15
   18ecc:	f102 0457 	add.w	r4, r2, #87	; 0x57
   18ed0:	2a0a      	cmp	r2, #10
   18ed2:	bf38      	it	cc
   18ed4:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   18ed8:	eb0e 0203 	add.w	r2, lr, r3
   18edc:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   18ee0:	f802 4c02 	strb.w	r4, [r2, #-2]
   18ee4:	d071      	beq.n	18fca <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   18ee6:	0904      	lsrs	r4, r0, #4
   18ee8:	f004 040f 	and.w	r4, r4, #15
   18eec:	f104 0557 	add.w	r5, r4, #87	; 0x57
   18ef0:	2c0a      	cmp	r4, #10
   18ef2:	bf38      	it	cc
   18ef4:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18ef8:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   18efc:	f802 5c03 	strb.w	r5, [r2, #-3]
   18f00:	d079      	beq.n	18ff6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   18f02:	0a04      	lsrs	r4, r0, #8
   18f04:	f004 040f 	and.w	r4, r4, #15
   18f08:	f104 0557 	add.w	r5, r4, #87	; 0x57
   18f0c:	2c0a      	cmp	r4, #10
   18f0e:	bf38      	it	cc
   18f10:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18f14:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   18f18:	f802 5c04 	strb.w	r5, [r2, #-4]
   18f1c:	d073      	beq.n	19006 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   18f1e:	0b04      	lsrs	r4, r0, #12
   18f20:	3b04      	subs	r3, #4
   18f22:	f004 040f 	and.w	r4, r4, #15
   18f26:	f104 0557 	add.w	r5, r4, #87	; 0x57
   18f2a:	2c0a      	cmp	r4, #10
   18f2c:	bf38      	it	cc
   18f2e:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18f32:	f802 5c05 	strb.w	r5, [r2, #-5]
   18f36:	0c02      	lsrs	r2, r0, #16
   18f38:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   18f3c:	4610      	mov	r0, r2
   18f3e:	d1c3      	bne.n	18ec8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xae>
   18f40:	e03f      	b.n	18fc2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1a8>
   18f42:	f10d 0e0c 	add.w	lr, sp, #12
   18f46:	2381      	movs	r3, #129	; 0x81
   18f48:	2100      	movs	r1, #0
   18f4a:	f004 000f 	and.w	r0, r4, #15
   18f4e:	eb0e 0203 	add.w	r2, lr, r3
   18f52:	f100 0537 	add.w	r5, r0, #55	; 0x37
   18f56:	280a      	cmp	r0, #10
   18f58:	bf38      	it	cc
   18f5a:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   18f5e:	ebb1 1f14 	cmp.w	r1, r4, lsr #4
   18f62:	f802 5c02 	strb.w	r5, [r2, #-2]
   18f66:	d030      	beq.n	18fca <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   18f68:	0920      	lsrs	r0, r4, #4
   18f6a:	f000 000f 	and.w	r0, r0, #15
   18f6e:	f100 0537 	add.w	r5, r0, #55	; 0x37
   18f72:	280a      	cmp	r0, #10
   18f74:	bf38      	it	cc
   18f76:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   18f7a:	ebb1 2f14 	cmp.w	r1, r4, lsr #8
   18f7e:	f802 5c03 	strb.w	r5, [r2, #-3]
   18f82:	d038      	beq.n	18ff6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   18f84:	0a20      	lsrs	r0, r4, #8
   18f86:	f000 000f 	and.w	r0, r0, #15
   18f8a:	f100 0537 	add.w	r5, r0, #55	; 0x37
   18f8e:	280a      	cmp	r0, #10
   18f90:	bf38      	it	cc
   18f92:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   18f96:	ebb1 3f14 	cmp.w	r1, r4, lsr #12
   18f9a:	f802 5c04 	strb.w	r5, [r2, #-4]
   18f9e:	d032      	beq.n	19006 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   18fa0:	0b20      	lsrs	r0, r4, #12
   18fa2:	3b04      	subs	r3, #4
   18fa4:	f000 000f 	and.w	r0, r0, #15
   18fa8:	f100 0537 	add.w	r5, r0, #55	; 0x37
   18fac:	280a      	cmp	r0, #10
   18fae:	bf38      	it	cc
   18fb0:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   18fb4:	0c20      	lsrs	r0, r4, #16
   18fb6:	ebb1 4f14 	cmp.w	r1, r4, lsr #16
   18fba:	4604      	mov	r4, r0
   18fbc:	f802 5c05 	strb.w	r5, [r2, #-5]
   18fc0:	d1c3      	bne.n	18f4a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x130>
   18fc2:	1e58      	subs	r0, r3, #1
   18fc4:	2881      	cmp	r0, #129	; 0x81
   18fc6:	d305      	bcc.n	18fd4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   18fc8:	e019      	b.n	18ffe <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   18fca:	1e59      	subs	r1, r3, #1
   18fcc:	1e98      	subs	r0, r3, #2
   18fce:	460b      	mov	r3, r1
   18fd0:	2881      	cmp	r0, #129	; 0x81
   18fd2:	d214      	bcs.n	18ffe <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   18fd4:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   18fd8:	f640 428d 	movw	r2, #3213	; 0xc8d
   18fdc:	4470      	add	r0, lr
   18fde:	f2c0 0202 	movt	r2, #2
   18fe2:	e9cd 0100 	strd	r0, r1, [sp]
   18fe6:	4660      	mov	r0, ip
   18fe8:	2101      	movs	r1, #1
   18fea:	2302      	movs	r3, #2
   18fec:	f7ff f864 	bl	180b8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18ff0:	b023      	add	sp, #140	; 0x8c
   18ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ff6:	1ed8      	subs	r0, r3, #3
   18ff8:	3b02      	subs	r3, #2
   18ffa:	2881      	cmp	r0, #129	; 0x81
   18ffc:	d3ea      	bcc.n	18fd4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   18ffe:	2180      	movs	r1, #128	; 0x80
   19000:	f7ff fbf7 	bl	187f2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   19004:	defe      	udf	#254	; 0xfe
   19006:	1f18      	subs	r0, r3, #4
   19008:	3b03      	subs	r3, #3
   1900a:	2881      	cmp	r0, #129	; 0x81
   1900c:	d3e2      	bcc.n	18fd4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   1900e:	e7f6      	b.n	18ffe <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   19010:	2127      	movs	r1, #39	; 0x27
   19012:	2c63      	cmp	r4, #99	; 0x63
   19014:	f77f af49 	ble.w	18eaa <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x90>
   19018:	b2a0      	uxth	r0, r4
   1901a:	3902      	subs	r1, #2
   1901c:	fba0 030e 	umull	r0, r3, r0, lr
   19020:	af03      	add	r7, sp, #12
   19022:	2064      	movs	r0, #100	; 0x64
   19024:	095b      	lsrs	r3, r3, #5
   19026:	fb03 4010 	mls	r0, r3, r0, r4
   1902a:	b280      	uxth	r0, r0
   1902c:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   19030:	5278      	strh	r0, [r7, r1]
   19032:	2b0a      	cmp	r3, #10
   19034:	f6bf af3d 	bge.w	18eb2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x98>
   19038:	1e48      	subs	r0, r1, #1
   1903a:	aa03      	add	r2, sp, #12
   1903c:	f103 0130 	add.w	r1, r3, #48	; 0x30
   19040:	5411      	strb	r1, [r2, r0]
   19042:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   19046:	aa03      	add	r2, sp, #12
   19048:	4410      	add	r0, r2
   1904a:	f640 2254 	movw	r2, #2644	; 0xa54
   1904e:	e9cd 0100 	strd	r0, r1, [sp]
   19052:	f2c0 0202 	movt	r2, #2
   19056:	4660      	mov	r0, ip
   19058:	2101      	movs	r1, #1
   1905a:	2300      	movs	r3, #0
   1905c:	f7ff f82c 	bl	180b8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19060:	b023      	add	sp, #140	; 0x8c
   19062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019066 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>:
   19066:	b580      	push	{r7, lr}
   19068:	b0a2      	sub	sp, #136	; 0x88
   1906a:	7802      	ldrb	r2, [r0, #0]
   1906c:	468c      	mov	ip, r1
   1906e:	f002 030f 	and.w	r3, r2, #15
   19072:	f103 0057 	add.w	r0, r3, #87	; 0x57
   19076:	2b0a      	cmp	r3, #10
   19078:	bf38      	it	cc
   1907a:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   1907e:	2300      	movs	r3, #0
   19080:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   19084:	d00b      	beq.n	1909e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x38>
   19086:	0913      	lsrs	r3, r2, #4
   19088:	f103 0157 	add.w	r1, r3, #87	; 0x57
   1908c:	2aa0      	cmp	r2, #160	; 0xa0
   1908e:	bf38      	it	cc
   19090:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   19094:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   19098:	227e      	movs	r2, #126	; 0x7e
   1909a:	2302      	movs	r3, #2
   1909c:	e001      	b.n	190a2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x3c>
   1909e:	227f      	movs	r2, #127	; 0x7f
   190a0:	2301      	movs	r3, #1
   190a2:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   190a6:	a802      	add	r0, sp, #8
   190a8:	4410      	add	r0, r2
   190aa:	f640 428d 	movw	r2, #3213	; 0xc8d
   190ae:	e9cd 0300 	strd	r0, r3, [sp]
   190b2:	f2c0 0202 	movt	r2, #2
   190b6:	4660      	mov	r0, ip
   190b8:	2101      	movs	r1, #1
   190ba:	2302      	movs	r3, #2
   190bc:	f7fe fffc 	bl	180b8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   190c0:	b022      	add	sp, #136	; 0x88
   190c2:	bd80      	pop	{r7, pc}

000190c4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>:
   190c4:	b580      	push	{r7, lr}
   190c6:	b0a2      	sub	sp, #136	; 0x88
   190c8:	7802      	ldrb	r2, [r0, #0]
   190ca:	468c      	mov	ip, r1
   190cc:	f002 030f 	and.w	r3, r2, #15
   190d0:	f103 0037 	add.w	r0, r3, #55	; 0x37
   190d4:	2b0a      	cmp	r3, #10
   190d6:	bf38      	it	cc
   190d8:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   190dc:	2300      	movs	r3, #0
   190de:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   190e2:	d00b      	beq.n	190fc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x38>
   190e4:	0913      	lsrs	r3, r2, #4
   190e6:	f103 0137 	add.w	r1, r3, #55	; 0x37
   190ea:	2aa0      	cmp	r2, #160	; 0xa0
   190ec:	bf38      	it	cc
   190ee:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   190f2:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   190f6:	227e      	movs	r2, #126	; 0x7e
   190f8:	2302      	movs	r3, #2
   190fa:	e001      	b.n	19100 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x3c>
   190fc:	227f      	movs	r2, #127	; 0x7f
   190fe:	2301      	movs	r3, #1
   19100:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   19104:	a802      	add	r0, sp, #8
   19106:	4410      	add	r0, r2
   19108:	f640 428d 	movw	r2, #3213	; 0xc8d
   1910c:	e9cd 0300 	strd	r0, r3, [sp]
   19110:	f2c0 0202 	movt	r2, #2
   19114:	4660      	mov	r0, ip
   19116:	2101      	movs	r1, #1
   19118:	2302      	movs	r3, #2
   1911a:	f7fe ffcd 	bl	180b8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1911e:	b022      	add	sp, #136	; 0x88
   19120:	bd80      	pop	{r7, pc}

00019122 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>:
   19122:	b580      	push	{r7, lr}
   19124:	b0a2      	sub	sp, #136	; 0x88
   19126:	8800      	ldrh	r0, [r0, #0]
   19128:	468c      	mov	ip, r1
   1912a:	f000 020f 	and.w	r2, r0, #15
   1912e:	f102 0357 	add.w	r3, r2, #87	; 0x57
   19132:	2a0a      	cmp	r2, #10
   19134:	bf38      	it	cc
   19136:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   1913a:	2200      	movs	r2, #0
   1913c:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   19140:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   19144:	d02a      	beq.n	1919c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x7a>
   19146:	0903      	lsrs	r3, r0, #4
   19148:	f003 030f 	and.w	r3, r3, #15
   1914c:	f103 0157 	add.w	r1, r3, #87	; 0x57
   19150:	2b0a      	cmp	r3, #10
   19152:	bf38      	it	cc
   19154:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   19158:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   1915c:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   19160:	d031      	beq.n	191c6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xa4>
   19162:	0a01      	lsrs	r1, r0, #8
   19164:	f001 010f 	and.w	r1, r1, #15
   19168:	f101 0257 	add.w	r2, r1, #87	; 0x57
   1916c:	290a      	cmp	r1, #10
   1916e:	bf38      	it	cc
   19170:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   19174:	2100      	movs	r1, #0
   19176:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   1917a:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   1917e:	d027      	beq.n	191d0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xae>
   19180:	0b00      	lsrs	r0, r0, #12
   19182:	f100 0157 	add.w	r1, r0, #87	; 0x57
   19186:	280a      	cmp	r0, #10
   19188:	bf38      	it	cc
   1918a:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   1918e:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   19192:	227d      	movs	r2, #125	; 0x7d
   19194:	207c      	movs	r0, #124	; 0x7c
   19196:	2881      	cmp	r0, #129	; 0x81
   19198:	d304      	bcc.n	191a4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   1919a:	e01d      	b.n	191d8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   1919c:	2280      	movs	r2, #128	; 0x80
   1919e:	207f      	movs	r0, #127	; 0x7f
   191a0:	2881      	cmp	r0, #129	; 0x81
   191a2:	d219      	bcs.n	191d8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   191a4:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   191a8:	ab02      	add	r3, sp, #8
   191aa:	4418      	add	r0, r3
   191ac:	2101      	movs	r1, #1
   191ae:	e9cd 0200 	strd	r0, r2, [sp]
   191b2:	f640 428d 	movw	r2, #3213	; 0xc8d
   191b6:	f2c0 0202 	movt	r2, #2
   191ba:	4660      	mov	r0, ip
   191bc:	2302      	movs	r3, #2
   191be:	f7fe ff7b 	bl	180b8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   191c2:	b022      	add	sp, #136	; 0x88
   191c4:	bd80      	pop	{r7, pc}
   191c6:	207e      	movs	r0, #126	; 0x7e
   191c8:	227f      	movs	r2, #127	; 0x7f
   191ca:	2881      	cmp	r0, #129	; 0x81
   191cc:	d3ea      	bcc.n	191a4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   191ce:	e003      	b.n	191d8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   191d0:	207d      	movs	r0, #125	; 0x7d
   191d2:	227e      	movs	r2, #126	; 0x7e
   191d4:	2881      	cmp	r0, #129	; 0x81
   191d6:	d3e5      	bcc.n	191a4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   191d8:	2180      	movs	r1, #128	; 0x80
   191da:	f7ff fb0a 	bl	187f2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   191de:	defe      	udf	#254	; 0xfe

000191e0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>:
   191e0:	b580      	push	{r7, lr}
   191e2:	b0a2      	sub	sp, #136	; 0x88
   191e4:	8800      	ldrh	r0, [r0, #0]
   191e6:	468c      	mov	ip, r1
   191e8:	f000 020f 	and.w	r2, r0, #15
   191ec:	f102 0337 	add.w	r3, r2, #55	; 0x37
   191f0:	2a0a      	cmp	r2, #10
   191f2:	bf38      	it	cc
   191f4:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   191f8:	2200      	movs	r2, #0
   191fa:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   191fe:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   19202:	d02a      	beq.n	1925a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x7a>
   19204:	0903      	lsrs	r3, r0, #4
   19206:	f003 030f 	and.w	r3, r3, #15
   1920a:	f103 0137 	add.w	r1, r3, #55	; 0x37
   1920e:	2b0a      	cmp	r3, #10
   19210:	bf38      	it	cc
   19212:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   19216:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   1921a:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   1921e:	d031      	beq.n	19284 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xa4>
   19220:	0a01      	lsrs	r1, r0, #8
   19222:	f001 010f 	and.w	r1, r1, #15
   19226:	f101 0237 	add.w	r2, r1, #55	; 0x37
   1922a:	290a      	cmp	r1, #10
   1922c:	bf38      	it	cc
   1922e:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   19232:	2100      	movs	r1, #0
   19234:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   19238:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   1923c:	d027      	beq.n	1928e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xae>
   1923e:	0b00      	lsrs	r0, r0, #12
   19240:	f100 0137 	add.w	r1, r0, #55	; 0x37
   19244:	280a      	cmp	r0, #10
   19246:	bf38      	it	cc
   19248:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   1924c:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   19250:	227d      	movs	r2, #125	; 0x7d
   19252:	207c      	movs	r0, #124	; 0x7c
   19254:	2881      	cmp	r0, #129	; 0x81
   19256:	d304      	bcc.n	19262 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   19258:	e01d      	b.n	19296 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   1925a:	2280      	movs	r2, #128	; 0x80
   1925c:	207f      	movs	r0, #127	; 0x7f
   1925e:	2881      	cmp	r0, #129	; 0x81
   19260:	d219      	bcs.n	19296 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   19262:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   19266:	ab02      	add	r3, sp, #8
   19268:	4418      	add	r0, r3
   1926a:	2101      	movs	r1, #1
   1926c:	e9cd 0200 	strd	r0, r2, [sp]
   19270:	f640 428d 	movw	r2, #3213	; 0xc8d
   19274:	f2c0 0202 	movt	r2, #2
   19278:	4660      	mov	r0, ip
   1927a:	2302      	movs	r3, #2
   1927c:	f7fe ff1c 	bl	180b8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19280:	b022      	add	sp, #136	; 0x88
   19282:	bd80      	pop	{r7, pc}
   19284:	207e      	movs	r0, #126	; 0x7e
   19286:	227f      	movs	r2, #127	; 0x7f
   19288:	2881      	cmp	r0, #129	; 0x81
   1928a:	d3ea      	bcc.n	19262 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   1928c:	e003      	b.n	19296 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   1928e:	207d      	movs	r0, #125	; 0x7d
   19290:	227e      	movs	r2, #126	; 0x7e
   19292:	2881      	cmp	r0, #129	; 0x81
   19294:	d3e5      	bcc.n	19262 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   19296:	2180      	movs	r1, #128	; 0x80
   19298:	f7ff faab 	bl	187f2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1929c:	defe      	udf	#254	; 0xfe

0001929e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>:
   1929e:	b5b0      	push	{r4, r5, r7, lr}
   192a0:	b0a2      	sub	sp, #136	; 0x88
   192a2:	6800      	ldr	r0, [r0, #0]
   192a4:	f10d 0e08 	add.w	lr, sp, #8
   192a8:	468c      	mov	ip, r1
   192aa:	2381      	movs	r3, #129	; 0x81
   192ac:	2100      	movs	r1, #0
   192ae:	f000 020f 	and.w	r2, r0, #15
   192b2:	f102 0457 	add.w	r4, r2, #87	; 0x57
   192b6:	2a0a      	cmp	r2, #10
   192b8:	bf38      	it	cc
   192ba:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   192be:	eb0e 0203 	add.w	r2, lr, r3
   192c2:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   192c6:	f802 4c02 	strb.w	r4, [r2, #-2]
   192ca:	d030      	beq.n	1932e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x90>
   192cc:	0904      	lsrs	r4, r0, #4
   192ce:	f004 040f 	and.w	r4, r4, #15
   192d2:	f104 0557 	add.w	r5, r4, #87	; 0x57
   192d6:	2c0a      	cmp	r4, #10
   192d8:	bf38      	it	cc
   192da:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   192de:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   192e2:	f802 5c03 	strb.w	r5, [r2, #-3]
   192e6:	d028      	beq.n	1933a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x9c>
   192e8:	0a04      	lsrs	r4, r0, #8
   192ea:	f004 040f 	and.w	r4, r4, #15
   192ee:	f104 0557 	add.w	r5, r4, #87	; 0x57
   192f2:	2c0a      	cmp	r4, #10
   192f4:	bf38      	it	cc
   192f6:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   192fa:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   192fe:	f802 5c04 	strb.w	r5, [r2, #-4]
   19302:	d01f      	beq.n	19344 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xa6>
   19304:	0b04      	lsrs	r4, r0, #12
   19306:	3b04      	subs	r3, #4
   19308:	f004 040f 	and.w	r4, r4, #15
   1930c:	f104 0557 	add.w	r5, r4, #87	; 0x57
   19310:	2c0a      	cmp	r4, #10
   19312:	bf38      	it	cc
   19314:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   19318:	f802 5c05 	strb.w	r5, [r2, #-5]
   1931c:	0c02      	lsrs	r2, r0, #16
   1931e:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   19322:	4610      	mov	r0, r2
   19324:	d1c3      	bne.n	192ae <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x10>
   19326:	1e58      	subs	r0, r3, #1
   19328:	2881      	cmp	r0, #129	; 0x81
   1932a:	d30f      	bcc.n	1934c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   1932c:	e01e      	b.n	1936c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   1932e:	1e59      	subs	r1, r3, #1
   19330:	1e98      	subs	r0, r3, #2
   19332:	460b      	mov	r3, r1
   19334:	2881      	cmp	r0, #129	; 0x81
   19336:	d309      	bcc.n	1934c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   19338:	e018      	b.n	1936c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   1933a:	1ed8      	subs	r0, r3, #3
   1933c:	3b02      	subs	r3, #2
   1933e:	2881      	cmp	r0, #129	; 0x81
   19340:	d304      	bcc.n	1934c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   19342:	e013      	b.n	1936c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   19344:	1f18      	subs	r0, r3, #4
   19346:	3b03      	subs	r3, #3
   19348:	2881      	cmp	r0, #129	; 0x81
   1934a:	d20f      	bcs.n	1936c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   1934c:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   19350:	f640 428d 	movw	r2, #3213	; 0xc8d
   19354:	4470      	add	r0, lr
   19356:	f2c0 0202 	movt	r2, #2
   1935a:	e9cd 0100 	strd	r0, r1, [sp]
   1935e:	4660      	mov	r0, ip
   19360:	2101      	movs	r1, #1
   19362:	2302      	movs	r3, #2
   19364:	f7fe fea8 	bl	180b8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19368:	b022      	add	sp, #136	; 0x88
   1936a:	bdb0      	pop	{r4, r5, r7, pc}
   1936c:	2180      	movs	r1, #128	; 0x80
   1936e:	f7ff fa40 	bl	187f2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   19372:	defe      	udf	#254	; 0xfe

00019374 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>:
   19374:	b5b0      	push	{r4, r5, r7, lr}
   19376:	b0a2      	sub	sp, #136	; 0x88
   19378:	6800      	ldr	r0, [r0, #0]
   1937a:	f10d 0e08 	add.w	lr, sp, #8
   1937e:	468c      	mov	ip, r1
   19380:	2381      	movs	r3, #129	; 0x81
   19382:	2100      	movs	r1, #0
   19384:	f000 020f 	and.w	r2, r0, #15
   19388:	f102 0437 	add.w	r4, r2, #55	; 0x37
   1938c:	2a0a      	cmp	r2, #10
   1938e:	bf38      	it	cc
   19390:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   19394:	eb0e 0203 	add.w	r2, lr, r3
   19398:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   1939c:	f802 4c02 	strb.w	r4, [r2, #-2]
   193a0:	d030      	beq.n	19404 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x90>
   193a2:	0904      	lsrs	r4, r0, #4
   193a4:	f004 040f 	and.w	r4, r4, #15
   193a8:	f104 0537 	add.w	r5, r4, #55	; 0x37
   193ac:	2c0a      	cmp	r4, #10
   193ae:	bf38      	it	cc
   193b0:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   193b4:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   193b8:	f802 5c03 	strb.w	r5, [r2, #-3]
   193bc:	d028      	beq.n	19410 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x9c>
   193be:	0a04      	lsrs	r4, r0, #8
   193c0:	f004 040f 	and.w	r4, r4, #15
   193c4:	f104 0537 	add.w	r5, r4, #55	; 0x37
   193c8:	2c0a      	cmp	r4, #10
   193ca:	bf38      	it	cc
   193cc:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   193d0:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   193d4:	f802 5c04 	strb.w	r5, [r2, #-4]
   193d8:	d01f      	beq.n	1941a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xa6>
   193da:	0b04      	lsrs	r4, r0, #12
   193dc:	3b04      	subs	r3, #4
   193de:	f004 040f 	and.w	r4, r4, #15
   193e2:	f104 0537 	add.w	r5, r4, #55	; 0x37
   193e6:	2c0a      	cmp	r4, #10
   193e8:	bf38      	it	cc
   193ea:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   193ee:	f802 5c05 	strb.w	r5, [r2, #-5]
   193f2:	0c02      	lsrs	r2, r0, #16
   193f4:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   193f8:	4610      	mov	r0, r2
   193fa:	d1c3      	bne.n	19384 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x10>
   193fc:	1e58      	subs	r0, r3, #1
   193fe:	2881      	cmp	r0, #129	; 0x81
   19400:	d30f      	bcc.n	19422 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   19402:	e01e      	b.n	19442 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   19404:	1e59      	subs	r1, r3, #1
   19406:	1e98      	subs	r0, r3, #2
   19408:	460b      	mov	r3, r1
   1940a:	2881      	cmp	r0, #129	; 0x81
   1940c:	d309      	bcc.n	19422 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   1940e:	e018      	b.n	19442 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   19410:	1ed8      	subs	r0, r3, #3
   19412:	3b02      	subs	r3, #2
   19414:	2881      	cmp	r0, #129	; 0x81
   19416:	d304      	bcc.n	19422 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   19418:	e013      	b.n	19442 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   1941a:	1f18      	subs	r0, r3, #4
   1941c:	3b03      	subs	r3, #3
   1941e:	2881      	cmp	r0, #129	; 0x81
   19420:	d20f      	bcs.n	19442 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   19422:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   19426:	f640 428d 	movw	r2, #3213	; 0xc8d
   1942a:	4470      	add	r0, lr
   1942c:	f2c0 0202 	movt	r2, #2
   19430:	e9cd 0100 	strd	r0, r1, [sp]
   19434:	4660      	mov	r0, ip
   19436:	2101      	movs	r1, #1
   19438:	2302      	movs	r3, #2
   1943a:	f7fe fe3d 	bl	180b8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1943e:	b022      	add	sp, #136	; 0x88
   19440:	bdb0      	pop	{r4, r5, r7, pc}
   19442:	2180      	movs	r1, #128	; 0x80
   19444:	f7ff f9d5 	bl	187f2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   19448:	defe      	udf	#254	; 0xfe

0001944a <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>:
   1944a:	b580      	push	{r7, lr}
   1944c:	b08c      	sub	sp, #48	; 0x30
   1944e:	7802      	ldrb	r2, [r0, #0]
   19450:	2a64      	cmp	r2, #100	; 0x64
   19452:	d314      	bcc.n	1947e <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x34>
   19454:	f248 501f 	movw	r0, #34079	; 0x851f
   19458:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
   1945c:	fba2 0300 	umull	r0, r3, r2, r0
   19460:	2064      	movs	r0, #100	; 0x64
   19462:	095b      	lsrs	r3, r3, #5
   19464:	fb03 2010 	mls	r0, r3, r0, r2
   19468:	f640 428f 	movw	r2, #3215	; 0xc8f
   1946c:	f2c0 0202 	movt	r2, #2
   19470:	b2c0      	uxtb	r0, r0
   19472:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   19476:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   1947a:	2024      	movs	r0, #36	; 0x24
   1947c:	e003      	b.n	19486 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x3c>
   1947e:	2a0a      	cmp	r2, #10
   19480:	d206      	bcs.n	19490 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x46>
   19482:	2026      	movs	r0, #38	; 0x26
   19484:	4613      	mov	r3, r2
   19486:	f103 0230 	add.w	r2, r3, #48	; 0x30
   1948a:	ab02      	add	r3, sp, #8
   1948c:	541a      	strb	r2, [r3, r0]
   1948e:	e008      	b.n	194a2 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x58>
   19490:	f640 408f 	movw	r0, #3215	; 0xc8f
   19494:	f2c0 0002 	movt	r0, #2
   19498:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   1949c:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   194a0:	2025      	movs	r0, #37	; 0x25
   194a2:	f1c0 0227 	rsb	r2, r0, #39	; 0x27
   194a6:	ab02      	add	r3, sp, #8
   194a8:	4418      	add	r0, r3
   194aa:	2300      	movs	r3, #0
   194ac:	e9cd 0200 	strd	r0, r2, [sp]
   194b0:	f640 2254 	movw	r2, #2644	; 0xa54
   194b4:	4608      	mov	r0, r1
   194b6:	f2c0 0202 	movt	r2, #2
   194ba:	2101      	movs	r1, #1
   194bc:	f7fe fdfc 	bl	180b8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   194c0:	b00c      	add	sp, #48	; 0x30
   194c2:	bd80      	pop	{r7, pc}

000194c4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>:
   194c4:	b580      	push	{r7, lr}
   194c6:	b08c      	sub	sp, #48	; 0x30
   194c8:	8800      	ldrh	r0, [r0, #0]
   194ca:	f242 720f 	movw	r2, #9999	; 0x270f
   194ce:	468e      	mov	lr, r1
   194d0:	4290      	cmp	r0, r2
   194d2:	d924      	bls.n	1951e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x5a>
   194d4:	f241 7259 	movw	r2, #5977	; 0x1759
   194d8:	f248 511f 	movw	r1, #34079	; 0x851f
   194dc:	f2cd 12b7 	movt	r2, #53687	; 0xd1b7
   194e0:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   194e4:	fba0 2302 	umull	r2, r3, r0, r2
   194e8:	0b5a      	lsrs	r2, r3, #13
   194ea:	f242 7310 	movw	r3, #10000	; 0x2710
   194ee:	fb02 0013 	mls	r0, r2, r3, r0
   194f2:	b283      	uxth	r3, r0
   194f4:	fba3 1301 	umull	r1, r3, r3, r1
   194f8:	0959      	lsrs	r1, r3, #5
   194fa:	2364      	movs	r3, #100	; 0x64
   194fc:	fb01 0013 	mls	r0, r1, r3, r0
   19500:	f640 438f 	movw	r3, #3215	; 0xc8f
   19504:	f2c0 0302 	movt	r3, #2
   19508:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   1950c:	f8ad 102b 	strh.w	r1, [sp, #43]	; 0x2b
   19510:	b280      	uxth	r0, r0
   19512:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   19516:	2323      	movs	r3, #35	; 0x23
   19518:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   1951c:	e024      	b.n	19568 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa4>
   1951e:	f640 4c8f 	movw	ip, #3215	; 0xc8f
   19522:	2863      	cmp	r0, #99	; 0x63
   19524:	f2c0 0c02 	movt	ip, #2
   19528:	d919      	bls.n	1955e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x9a>
   1952a:	f248 511f 	movw	r1, #34079	; 0x851f
   1952e:	2325      	movs	r3, #37	; 0x25
   19530:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   19534:	fba0 1201 	umull	r1, r2, r0, r1
   19538:	0951      	lsrs	r1, r2, #5
   1953a:	2264      	movs	r2, #100	; 0x64
   1953c:	fb01 0012 	mls	r0, r1, r2, r0
   19540:	b280      	uxth	r0, r0
   19542:	f83c 0010 	ldrh.w	r0, [ip, r0, lsl #1]
   19546:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   1954a:	4608      	mov	r0, r1
   1954c:	b282      	uxth	r2, r0
   1954e:	2a0a      	cmp	r2, #10
   19550:	d309      	bcc.n	19566 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa2>
   19552:	f83c 1012 	ldrh.w	r1, [ip, r2, lsl #1]
   19556:	1e98      	subs	r0, r3, #2
   19558:	aa02      	add	r2, sp, #8
   1955a:	5211      	strh	r1, [r2, r0]
   1955c:	e009      	b.n	19572 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xae>
   1955e:	2327      	movs	r3, #39	; 0x27
   19560:	b282      	uxth	r2, r0
   19562:	2a0a      	cmp	r2, #10
   19564:	d2f5      	bcs.n	19552 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x8e>
   19566:	4602      	mov	r2, r0
   19568:	1e58      	subs	r0, r3, #1
   1956a:	f102 0130 	add.w	r1, r2, #48	; 0x30
   1956e:	aa02      	add	r2, sp, #8
   19570:	5411      	strb	r1, [r2, r0]
   19572:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   19576:	aa02      	add	r2, sp, #8
   19578:	4410      	add	r0, r2
   1957a:	f640 2254 	movw	r2, #2644	; 0xa54
   1957e:	e9cd 0100 	strd	r0, r1, [sp]
   19582:	f2c0 0202 	movt	r2, #2
   19586:	4670      	mov	r0, lr
   19588:	2101      	movs	r1, #1
   1958a:	2300      	movs	r3, #0
   1958c:	f7fe fd94 	bl	180b8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19590:	b00c      	add	sp, #48	; 0x30
   19592:	bd80      	pop	{r7, pc}

00019594 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>:
   19594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19598:	b08f      	sub	sp, #60	; 0x3c
   1959a:	6805      	ldr	r5, [r0, #0]
   1959c:	f248 581f 	movw	r8, #34079	; 0x851f
   195a0:	460e      	mov	r6, r1
   195a2:	f640 418f 	movw	r1, #3215	; 0xc8f
   195a6:	2d00      	cmp	r5, #0
   195a8:	f242 7910 	movw	r9, #10000	; 0x2710
   195ac:	462b      	mov	r3, r5
   195ae:	f2c5 18eb 	movt	r8, #20971	; 0x51eb
   195b2:	bf48      	it	mi
   195b4:	426b      	negmi	r3, r5
   195b6:	454b      	cmp	r3, r9
   195b8:	f2c0 0102 	movt	r1, #2
   195bc:	d33a      	bcc.n	19634 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa0>
   195be:	f241 7a59 	movw	sl, #5977	; 0x1759
   195c2:	f24e 00ff 	movw	r0, #57599	; 0xe0ff
   195c6:	f10d 0e14 	add.w	lr, sp, #20
   195ca:	2400      	movs	r4, #0
   195cc:	f2cd 1ab7 	movt	sl, #53687	; 0xd1b7
   195d0:	f04f 0b64 	mov.w	fp, #100	; 0x64
   195d4:	f2c0 50f5 	movt	r0, #1525	; 0x5f5
   195d8:	e9cd 5603 	strd	r5, r6, [sp, #12]
   195dc:	fba3 250a 	umull	r2, r5, r3, sl
   195e0:	eb0e 0704 	add.w	r7, lr, r4
   195e4:	3c04      	subs	r4, #4
   195e6:	4283      	cmp	r3, r0
   195e8:	ea4f 3255 	mov.w	r2, r5, lsr #13
   195ec:	fb02 3519 	mls	r5, r2, r9, r3
   195f0:	4613      	mov	r3, r2
   195f2:	b2ae      	uxth	r6, r5
   195f4:	fba6 6c08 	umull	r6, ip, r6, r8
   195f8:	ea4f 165c 	mov.w	r6, ip, lsr #5
   195fc:	fb06 551b 	mls	r5, r6, fp, r5
   19600:	f831 6016 	ldrh.w	r6, [r1, r6, lsl #1]
   19604:	f8a7 6023 	strh.w	r6, [r7, #35]	; 0x23
   19608:	b2ad      	uxth	r5, r5
   1960a:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
   1960e:	f8a7 5025 	strh.w	r5, [r7, #37]	; 0x25
   19612:	d8e3      	bhi.n	195dc <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x48>
   19614:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
   19618:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1961c:	4613      	mov	r3, r2
   1961e:	2b63      	cmp	r3, #99	; 0x63
   19620:	dc0b      	bgt.n	1963a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa6>
   19622:	461a      	mov	r2, r3
   19624:	2a0a      	cmp	r2, #10
   19626:	db17      	blt.n	19658 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xc4>
   19628:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
   1962c:	3802      	subs	r0, #2
   1962e:	aa05      	add	r2, sp, #20
   19630:	5211      	strh	r1, [r2, r0]
   19632:	e016      	b.n	19662 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xce>
   19634:	2027      	movs	r0, #39	; 0x27
   19636:	2b63      	cmp	r3, #99	; 0x63
   19638:	ddf3      	ble.n	19622 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x8e>
   1963a:	b29a      	uxth	r2, r3
   1963c:	3802      	subs	r0, #2
   1963e:	fba2 2708 	umull	r2, r7, r2, r8
   19642:	097a      	lsrs	r2, r7, #5
   19644:	2764      	movs	r7, #100	; 0x64
   19646:	fb02 3317 	mls	r3, r2, r7, r3
   1964a:	af05      	add	r7, sp, #20
   1964c:	b29b      	uxth	r3, r3
   1964e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   19652:	523b      	strh	r3, [r7, r0]
   19654:	2a0a      	cmp	r2, #10
   19656:	dae7      	bge.n	19628 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x94>
   19658:	3801      	subs	r0, #1
   1965a:	f102 0130 	add.w	r1, r2, #48	; 0x30
   1965e:	aa05      	add	r2, sp, #20
   19660:	5411      	strb	r1, [r2, r0]
   19662:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   19666:	aa05      	add	r2, sp, #20
   19668:	4410      	add	r0, r2
   1966a:	f640 2254 	movw	r2, #2644	; 0xa54
   1966e:	e9cd 0100 	strd	r0, r1, [sp]
   19672:	43e8      	mvns	r0, r5
   19674:	0fc1      	lsrs	r1, r0, #31
   19676:	f2c0 0202 	movt	r2, #2
   1967a:	4630      	mov	r0, r6
   1967c:	2300      	movs	r3, #0
   1967e:	f7fe fd1b 	bl	180b8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19682:	b00f      	add	sp, #60	; 0x3c
   19684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019688 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>:
   19688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1968c:	b08d      	sub	sp, #52	; 0x34
   1968e:	468c      	mov	ip, r1
   19690:	6801      	ldr	r1, [r0, #0]
   19692:	f248 5e1f 	movw	lr, #34079	; 0x851f
   19696:	f640 408f 	movw	r0, #3215	; 0xc8f
   1969a:	f242 7810 	movw	r8, #10000	; 0x2710
   1969e:	4541      	cmp	r1, r8
   196a0:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   196a4:	f2c0 0002 	movt	r0, #2
   196a8:	d337      	bcc.n	1971a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x92>
   196aa:	f241 7959 	movw	r9, #5977	; 0x1759
   196ae:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   196b2:	f10d 0b0c 	add.w	fp, sp, #12
   196b6:	2300      	movs	r3, #0
   196b8:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   196bc:	f04f 0a64 	mov.w	sl, #100	; 0x64
   196c0:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   196c4:	fba1 2409 	umull	r2, r4, r1, r9
   196c8:	42b9      	cmp	r1, r7
   196ca:	ea4f 3254 	mov.w	r2, r4, lsr #13
   196ce:	fb02 1418 	mls	r4, r2, r8, r1
   196d2:	4611      	mov	r1, r2
   196d4:	b2a5      	uxth	r5, r4
   196d6:	fba5 560e 	umull	r5, r6, r5, lr
   196da:	ea4f 1556 	mov.w	r5, r6, lsr #5
   196de:	eb0b 0603 	add.w	r6, fp, r3
   196e2:	fb05 441a 	mls	r4, r5, sl, r4
   196e6:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   196ea:	f1a3 0304 	sub.w	r3, r3, #4
   196ee:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   196f2:	b2a4      	uxth	r4, r4
   196f4:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   196f8:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   196fc:	d8e2      	bhi.n	196c4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x3c>
   196fe:	f103 0427 	add.w	r4, r3, #39	; 0x27
   19702:	4611      	mov	r1, r2
   19704:	2963      	cmp	r1, #99	; 0x63
   19706:	dc0b      	bgt.n	19720 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x98>
   19708:	460b      	mov	r3, r1
   1970a:	2b0a      	cmp	r3, #10
   1970c:	db17      	blt.n	1973e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xb6>
   1970e:	1ea1      	subs	r1, r4, #2
   19710:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   19714:	aa03      	add	r2, sp, #12
   19716:	5250      	strh	r0, [r2, r1]
   19718:	e016      	b.n	19748 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xc0>
   1971a:	2427      	movs	r4, #39	; 0x27
   1971c:	2963      	cmp	r1, #99	; 0x63
   1971e:	ddf3      	ble.n	19708 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x80>
   19720:	b28a      	uxth	r2, r1
   19722:	3c02      	subs	r4, #2
   19724:	fba2 230e 	umull	r2, r3, r2, lr
   19728:	2264      	movs	r2, #100	; 0x64
   1972a:	095b      	lsrs	r3, r3, #5
   1972c:	fb03 1112 	mls	r1, r3, r2, r1
   19730:	aa03      	add	r2, sp, #12
   19732:	b289      	uxth	r1, r1
   19734:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   19738:	5311      	strh	r1, [r2, r4]
   1973a:	2b0a      	cmp	r3, #10
   1973c:	dae7      	bge.n	1970e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x86>
   1973e:	1e61      	subs	r1, r4, #1
   19740:	aa03      	add	r2, sp, #12
   19742:	f103 0030 	add.w	r0, r3, #48	; 0x30
   19746:	5450      	strb	r0, [r2, r1]
   19748:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   1974c:	aa03      	add	r2, sp, #12
   1974e:	4411      	add	r1, r2
   19750:	f640 2254 	movw	r2, #2644	; 0xa54
   19754:	e9cd 1000 	strd	r1, r0, [sp]
   19758:	f2c0 0202 	movt	r2, #2
   1975c:	4660      	mov	r0, ip
   1975e:	2101      	movs	r1, #1
   19760:	2300      	movs	r3, #0
   19762:	f7fe fca9 	bl	180b8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19766:	b00d      	add	sp, #52	; 0x34
   19768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001976c <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E>:
   1976c:	e9d0 2000 	ldrd	r2, r0, [r0]
   19770:	68c3      	ldr	r3, [r0, #12]
   19772:	4610      	mov	r0, r2
   19774:	4718      	bx	r3

00019776 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E>:
   19776:	460b      	mov	r3, r1
   19778:	e9d0 1200 	ldrd	r1, r2, [r0]
   1977c:	4618      	mov	r0, r3
   1977e:	f7fe bde3 	b.w	18348 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
	...

00019784 <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
   19784:	4b07      	ldr	r3, [pc, #28]	; (197a4 <__semihost+0x20>)
   19786:	781b      	ldrb	r3, [r3, #0]
   19788:	b14b      	cbz	r3, 1979e <__semihost+0x1a>
static int __semihost(int command, void* message) {
   1978a:	b410      	push	{r4}
   1978c:	4602      	mov	r2, r0
   1978e:	460c      	mov	r4, r1
    __asm( 
   19790:	4610      	mov	r0, r2
   19792:	4621      	mov	r1, r4
   19794:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
   19796:	2000      	movs	r0, #0
}
   19798:	f85d 4b04 	ldr.w	r4, [sp], #4
   1979c:	4770      	bx	lr
    if (!log_enabled) return -1;
   1979e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   197a2:	4770      	bx	lr
   197a4:	20000100 	.word	0x20000100

000197a8 <debugger_connected>:
// #define SYS_RENAME (0xf)
// #define SYS_EXIT   (0x18)

static int debugger_connected(void) {
    //  Return non-zero if debugger is connected. From repos/apache-mynewt-core/hw/mcu/ambiq/apollo2/src/hal_system.c
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   197a8:	4b02      	ldr	r3, [pc, #8]	; (197b4 <debugger_connected+0xc>)
   197aa:	6818      	ldr	r0, [r3, #0]
}
   197ac:	f000 0001 	and.w	r0, r0, #1
   197b0:	4770      	bx	lr
   197b2:	bf00      	nop
   197b4:	e000edf0 	.word	0xe000edf0

000197b8 <semihost_write>:
#endif  //  !DISABLE_SEMIHOSTING

// We normally set the file handle to 2 to write to the debugger's stderr output.
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
   197b8:	b570      	push	{r4, r5, r6, lr}
   197ba:	b084      	sub	sp, #16
   197bc:	4606      	mov	r6, r0
   197be:	460d      	mov	r5, r1
   197c0:	4614      	mov	r4, r2
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return 0;               //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
   197c2:	f7ff fff1 	bl	197a8 <debugger_connected>
   197c6:	4603      	mov	r3, r0
   197c8:	b108      	cbz	r0, 197ce <semihost_write+0x16>
    if (length == 0) { return 0; }
   197ca:	b91c      	cbnz	r4, 197d4 <semihost_write+0x1c>
   197cc:	2300      	movs	r3, #0
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
#endif  //  DISABLE_SEMIHOSTING
}
   197ce:	4618      	mov	r0, r3
   197d0:	b004      	add	sp, #16
   197d2:	bd70      	pop	{r4, r5, r6, pc}
    args[0] = (uint32_t)fh;
   197d4:	9601      	str	r6, [sp, #4]
    args[1] = (uint32_t)buffer;
   197d6:	9502      	str	r5, [sp, #8]
    args[2] = (uint32_t)length;
   197d8:	9403      	str	r4, [sp, #12]
    return __semihost(SYS_WRITE, args);
   197da:	a901      	add	r1, sp, #4
   197dc:	2005      	movs	r0, #5
   197de:	f7ff ffd1 	bl	19784 <__semihost>
   197e2:	4603      	mov	r3, r0
   197e4:	e7f3      	b.n	197ce <semihost_write+0x16>
	...

000197e8 <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
   197e8:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
   197ea:	4b0e      	ldr	r3, [pc, #56]	; (19824 <console_flush+0x3c>)
   197ec:	781b      	ldrb	r3, [r3, #0]
   197ee:	b1bb      	cbz	r3, 19820 <console_flush+0x38>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
   197f0:	4b0d      	ldr	r3, [pc, #52]	; (19828 <console_flush+0x40>)
   197f2:	681d      	ldr	r5, [r3, #0]
   197f4:	b1a5      	cbz	r5, 19820 <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   197f6:	4b0d      	ldr	r3, [pc, #52]	; (1982c <console_flush+0x44>)
   197f8:	685b      	ldr	r3, [r3, #4]
   197fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
   197fe:	b97b      	cbnz	r3, 19820 <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
   19800:	4b09      	ldr	r3, [pc, #36]	; (19828 <console_flush+0x40>)
   19802:	2200      	movs	r2, #0
   19804:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
   19806:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
   19808:	e005      	b.n	19816 <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
   1980a:	88e2      	ldrh	r2, [r4, #6]
   1980c:	6821      	ldr	r1, [r4, #0]
   1980e:	2002      	movs	r0, #2
   19810:	f7ff ffd2 	bl	197b8 <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
   19814:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
   19816:	2c00      	cmp	r4, #0
   19818:	d1f7      	bne.n	1980a <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
   1981a:	4628      	mov	r0, r5
   1981c:	f001 fbfc 	bl	1b018 <os_mbuf_free_chain>
}
   19820:	bd38      	pop	{r3, r4, r5, pc}
   19822:	bf00      	nop
   19824:	20000100 	.word	0x20000100
   19828:	20006f04 	.word	0x20006f04
   1982c:	e000ed00 	.word	0xe000ed00

00019830 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
   19830:	b508      	push	{r3, lr}
   19832:	f7ff ffd9 	bl	197e8 <console_flush>
   19836:	bd08      	pop	{r3, pc}

00019838 <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
   19838:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return;                 //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
   1983a:	4b12      	ldr	r3, [pc, #72]	; (19884 <console_buffer+0x4c>)
   1983c:	781b      	ldrb	r3, [r3, #0]
   1983e:	b903      	cbnz	r3, 19842 <console_buffer+0xa>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
   19840:	bd38      	pop	{r3, r4, r5, pc}
   19842:	460d      	mov	r5, r1
   19844:	4604      	mov	r4, r0
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
   19846:	f7ff ffaf 	bl	197a8 <debugger_connected>
   1984a:	2800      	cmp	r0, #0
   1984c:	d0f8      	beq.n	19840 <console_buffer+0x8>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
   1984e:	4b0e      	ldr	r3, [pc, #56]	; (19888 <console_buffer+0x50>)
   19850:	681b      	ldr	r3, [r3, #0]
   19852:	b173      	cbz	r3, 19872 <console_buffer+0x3a>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
   19854:	4b0c      	ldr	r3, [pc, #48]	; (19888 <console_buffer+0x50>)
   19856:	6818      	ldr	r0, [r3, #0]
   19858:	f001 fbf0 	bl	1b03c <os_mbuf_len>
   1985c:	4428      	add	r0, r5
   1985e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   19862:	d2ed      	bcs.n	19840 <console_buffer+0x8>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
   19864:	b2aa      	uxth	r2, r5
   19866:	4621      	mov	r1, r4
   19868:	4b07      	ldr	r3, [pc, #28]	; (19888 <console_buffer+0x50>)
   1986a:	6818      	ldr	r0, [r3, #0]
   1986c:	f001 fbf0 	bl	1b050 <os_mbuf_append>
   19870:	e7e6      	b.n	19840 <console_buffer+0x8>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
   19872:	2100      	movs	r1, #0
   19874:	b2a8      	uxth	r0, r5
   19876:	f001 fd93 	bl	1b3a0 <os_msys_get_pkthdr>
   1987a:	4b03      	ldr	r3, [pc, #12]	; (19888 <console_buffer+0x50>)
   1987c:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
   1987e:	2800      	cmp	r0, #0
   19880:	d1e8      	bne.n	19854 <console_buffer+0x1c>
   19882:	e7dd      	b.n	19840 <console_buffer+0x8>
   19884:	20000100 	.word	0x20000100
   19888:	20006f04 	.word	0x20006f04

0001988c <semihosting_console_write_ch>:
    float f_abs = *neg ? -f : f;          //  Absolute value of f
    *i = (int) f_abs;                     //  Integer part
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  6 decimal places
}

static void semihosting_console_write_ch(char c) {
   1988c:	b500      	push	{lr}
   1988e:	b083      	sub	sp, #12
   19890:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
   19894:	280d      	cmp	r0, #13
   19896:	d004      	beq.n	198a2 <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
   19898:	2101      	movs	r1, #1
   1989a:	f10d 0007 	add.w	r0, sp, #7
   1989e:	f7ff ffcb 	bl	19838 <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
   198a2:	b003      	add	sp, #12
   198a4:	f85d fb04 	ldr.w	pc, [sp], #4

000198a8 <console_printhex>:
void console_printhex(uint8_t v) {
   198a8:	b510      	push	{r4, lr}
   198aa:	b082      	sub	sp, #8
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   198ac:	2310      	movs	r3, #16
    int length = 0;
   198ae:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   198b0:	e005      	b.n	198be <console_printhex+0x16>
        v = v % divisor;
   198b2:	fbb0 f1f3 	udiv	r1, r0, r3
   198b6:	fb03 0011 	mls	r0, r3, r1, r0
   198ba:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   198bc:	091b      	lsrs	r3, r3, #4
   198be:	b18b      	cbz	r3, 198e4 <console_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
   198c0:	fbb0 f4f3 	udiv	r4, r0, r3
   198c4:	f104 0130 	add.w	r1, r4, #48	; 0x30
   198c8:	b2c9      	uxtb	r1, r1
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
   198ca:	2939      	cmp	r1, #57	; 0x39
   198cc:	d902      	bls.n	198d4 <console_printhex+0x2c>
   198ce:	f104 0157 	add.w	r1, r4, #87	; 0x57
   198d2:	b2c9      	uxtb	r1, r1
            if (length < size) {
   198d4:	2a02      	cmp	r2, #2
   198d6:	dcec      	bgt.n	198b2 <console_printhex+0xa>
                buffer[length++] = digit;
   198d8:	ac02      	add	r4, sp, #8
   198da:	4414      	add	r4, r2
   198dc:	f804 1c04 	strb.w	r1, [r4, #-4]
   198e0:	3201      	adds	r2, #1
   198e2:	e7e6      	b.n	198b2 <console_printhex+0xa>
    if (length == 0) { buffer[length++] = '0'; };
   198e4:	b92a      	cbnz	r2, 198f2 <console_printhex+0x4a>
   198e6:	ab02      	add	r3, sp, #8
   198e8:	4413      	add	r3, r2
   198ea:	2130      	movs	r1, #48	; 0x30
   198ec:	f803 1c04 	strb.w	r1, [r3, #-4]
   198f0:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
   198f2:	2a02      	cmp	r2, #2
   198f4:	dc04      	bgt.n	19900 <console_printhex+0x58>
   198f6:	ab02      	add	r3, sp, #8
   198f8:	441a      	add	r2, r3
   198fa:	2300      	movs	r3, #0
   198fc:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
   19900:	2300      	movs	r3, #0
   19902:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
   19906:	a801      	add	r0, sp, #4
   19908:	f002 fb73 	bl	1bff2 <strlen>
   1990c:	4601      	mov	r1, r0
   1990e:	a801      	add	r0, sp, #4
   19910:	f7ff ff92 	bl	19838 <console_buffer>
}
   19914:	b002      	add	sp, #8
   19916:	bd10      	pop	{r4, pc}

00019918 <console_printint>:
void console_printint(int i) {
   19918:	b508      	push	{r3, lr}
    console_printf("%d", i);
   1991a:	4601      	mov	r1, r0
   1991c:	4801      	ldr	r0, [pc, #4]	; (19924 <console_printint+0xc>)
   1991e:	f000 f873 	bl	19a08 <console_printf>
}
   19922:	bd08      	pop	{r3, pc}
   19924:	00021c54 	.word	0x00021c54

00019928 <console_dump>:
    if (buffer == NULL || len == 0) { return; }
   19928:	b180      	cbz	r0, 1994c <console_dump+0x24>
void console_dump(const uint8_t *buffer, unsigned int len) {
   1992a:	b570      	push	{r4, r5, r6, lr}
   1992c:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
   1992e:	b161      	cbz	r1, 1994a <console_dump+0x22>
   19930:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
   19932:	2400      	movs	r4, #0
   19934:	e007      	b.n	19946 <console_dump+0x1e>
   19936:	5d30      	ldrb	r0, [r6, r4]
   19938:	f7ff ffb6 	bl	198a8 <console_printhex>
   1993c:	2101      	movs	r1, #1
   1993e:	4804      	ldr	r0, [pc, #16]	; (19950 <console_dump+0x28>)
   19940:	f7ff ff7a 	bl	19838 <console_buffer>
   19944:	3401      	adds	r4, #1
   19946:	42ac      	cmp	r4, r5
   19948:	d3f5      	bcc.n	19936 <console_dump+0xe>
}
   1994a:	bd70      	pop	{r4, r5, r6, pc}
   1994c:	4770      	bx	lr
   1994e:	bf00      	nop
   19950:	00021c50 	.word	0x00021c50

00019954 <console_out_nolock>:

int console_out_nolock(int character) {
   19954:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
   19956:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
   19958:	4b0b      	ldr	r3, [pc, #44]	; (19988 <console_out_nolock+0x34>)
   1995a:	781b      	ldrb	r3, [r3, #0]
   1995c:	b953      	cbnz	r3, 19974 <console_out_nolock+0x20>
   1995e:	4604      	mov	r4, r0
    if ('\n' == c) {
   19960:	2d0a      	cmp	r5, #10
   19962:	d009      	beq.n	19978 <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
   19964:	4b09      	ldr	r3, [pc, #36]	; (1998c <console_out_nolock+0x38>)
   19966:	2201      	movs	r2, #1
   19968:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
   1996a:	4628      	mov	r0, r5
   1996c:	f7ff ff8e 	bl	1988c <semihosting_console_write_ch>
    return character;
   19970:	4620      	mov	r0, r4
}
   19972:	bd38      	pop	{r3, r4, r5, pc}
   19974:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
   19976:	e7fc      	b.n	19972 <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
   19978:	200d      	movs	r0, #13
   1997a:	f7ff ff87 	bl	1988c <semihosting_console_write_ch>
        console_is_midline = 0;
   1997e:	4b03      	ldr	r3, [pc, #12]	; (1998c <console_out_nolock+0x38>)
   19980:	2200      	movs	r2, #0
   19982:	601a      	str	r2, [r3, #0]
   19984:	e7f1      	b.n	1996a <console_out_nolock+0x16>
   19986:	bf00      	nop
   19988:	2000ddb4 	.word	0x2000ddb4
   1998c:	2000ddb8 	.word	0x2000ddb8

00019990 <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
   19990:	2000      	movs	r0, #0
   19992:	4770      	bx	lr

00019994 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
   19994:	b570      	push	{r4, r5, r6, lr}
   19996:	4606      	mov	r6, r0
   19998:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
   1999a:	2400      	movs	r4, #0
   1999c:	42ac      	cmp	r4, r5
   1999e:	da07      	bge.n	199b0 <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
   199a0:	5d30      	ldrb	r0, [r6, r4]
   199a2:	f7ff ffd7 	bl	19954 <console_out_nolock>
   199a6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   199aa:	d001      	beq.n	199b0 <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
   199ac:	3401      	adds	r4, #1
   199ae:	e7f5      	b.n	1999c <console_write+0x8>
    }
}
   199b0:	bd70      	pop	{r4, r5, r6, pc}

000199b2 <console_blocking_mode>:

void console_blocking_mode(void) {
   199b2:	b508      	push	{r3, lr}
    disable_buffer();
   199b4:	f7ff ff3c 	bl	19830 <disable_buffer>
}
   199b8:	bd08      	pop	{r3, pc}
	...

000199bc <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
   199bc:	b510      	push	{r4, lr}
   199be:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   199c0:	4b0d      	ldr	r3, [pc, #52]	; (199f8 <console_pkg_init+0x3c>)
   199c2:	781b      	ldrb	r3, [r3, #0]
   199c4:	b193      	cbz	r3, 199ec <console_pkg_init+0x30>

    os_eventq_init(&avail_queue);
   199c6:	480d      	ldr	r0, [pc, #52]	; (199fc <console_pkg_init+0x40>)
   199c8:	f001 f9fa 	bl	1adc0 <os_eventq_init>
    os_mutex_init(&console_write_lock);
   199cc:	480c      	ldr	r0, [pc, #48]	; (19a00 <console_pkg_init+0x44>)
   199ce:	f001 fd15 	bl	1b3fc <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
   199d2:	f7ff ffdd 	bl	19990 <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   199d6:	b138      	cbz	r0, 199e8 <console_pkg_init+0x2c>
   199d8:	2000      	movs	r0, #0
   199da:	9000      	str	r0, [sp, #0]
   199dc:	4b09      	ldr	r3, [pc, #36]	; (19a04 <console_pkg_init+0x48>)
   199de:	681c      	ldr	r4, [r3, #0]
   199e0:	4603      	mov	r3, r0
   199e2:	4602      	mov	r2, r0
   199e4:	4601      	mov	r1, r0
   199e6:	47a0      	blx	r4
}
   199e8:	b002      	add	sp, #8
   199ea:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   199ec:	461a      	mov	r2, r3
   199ee:	4619      	mov	r1, r3
   199f0:	4618      	mov	r0, r3
   199f2:	f000 fed1 	bl	1a798 <__assert_func>
   199f6:	bf00      	nop
   199f8:	2000ddbc 	.word	0x2000ddbc
   199fc:	20006f08 	.word	0x20006f08
   19a00:	20006f18 	.word	0x20006f18
   19a04:	20000104 	.word	0x20000104

00019a08 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   19a08:	b40f      	push	{r0, r1, r2, r3}
   19a0a:	b510      	push	{r4, lr}
   19a0c:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   19a0e:	f000 f81f 	bl	19a50 <console_get_ticks>
   19a12:	b160      	cbz	r0, 19a2e <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   19a14:	4b0c      	ldr	r3, [pc, #48]	; (19a48 <console_printf+0x40>)
   19a16:	681b      	ldr	r3, [r3, #0]
   19a18:	b10b      	cbz	r3, 19a1e <console_printf+0x16>
    num_chars = 0;
   19a1a:	2400      	movs	r4, #0
   19a1c:	e008      	b.n	19a30 <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   19a1e:	f002 f8d9 	bl	1bbd4 <os_time_get>
   19a22:	4601      	mov	r1, r0
   19a24:	4809      	ldr	r0, [pc, #36]	; (19a4c <console_printf+0x44>)
   19a26:	f002 fd97 	bl	1c558 <printf>
   19a2a:	4604      	mov	r4, r0
   19a2c:	e000      	b.n	19a30 <console_printf+0x28>
    num_chars = 0;
   19a2e:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
   19a30:	a905      	add	r1, sp, #20
   19a32:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
   19a34:	9804      	ldr	r0, [sp, #16]
   19a36:	f002 fdbf 	bl	1c5b8 <vprintf>
    va_end(args);

    return num_chars;
}
   19a3a:	4420      	add	r0, r4
   19a3c:	b002      	add	sp, #8
   19a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19a42:	b004      	add	sp, #16
   19a44:	4770      	bx	lr
   19a46:	bf00      	nop
   19a48:	2000ddb8 	.word	0x2000ddb8
   19a4c:	00021c58 	.word	0x00021c58

00019a50 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   19a50:	4b01      	ldr	r3, [pc, #4]	; (19a58 <console_get_ticks+0x8>)
   19a52:	7818      	ldrb	r0, [r3, #0]
   19a54:	4770      	bx	lr
   19a56:	bf00      	nop
   19a58:	20006f24 	.word	0x20006f24

00019a5c <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   19a5c:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   19a5e:	f000 fe9b 	bl	1a798 <__assert_func>
	...

00019a64 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   19a64:	4b01      	ldr	r3, [pc, #4]	; (19a6c <sysinit_start+0x8>)
   19a66:	2201      	movs	r2, #1
   19a68:	701a      	strb	r2, [r3, #0]
}
   19a6a:	4770      	bx	lr
   19a6c:	2000ddbc 	.word	0x2000ddbc

00019a70 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   19a70:	4b01      	ldr	r3, [pc, #4]	; (19a78 <sysinit_end+0x8>)
   19a72:	2200      	movs	r2, #0
   19a74:	701a      	strb	r2, [r3, #0]
}
   19a76:	4770      	bx	lr
   19a78:	2000ddbc 	.word	0x2000ddbc

00019a7c <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   19a7c:	4a09      	ldr	r2, [pc, #36]	; (19aa4 <NVIC_Relocate+0x28>)
   19a7e:	4b0a      	ldr	r3, [pc, #40]	; (19aa8 <NVIC_Relocate+0x2c>)
   19a80:	429a      	cmp	r2, r3
   19a82:	d00a      	beq.n	19a9a <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   19a84:	2300      	movs	r3, #0
   19a86:	e006      	b.n	19a96 <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
   19a88:	4a07      	ldr	r2, [pc, #28]	; (19aa8 <NVIC_Relocate+0x2c>)
   19a8a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   19a8e:	4a05      	ldr	r2, [pc, #20]	; (19aa4 <NVIC_Relocate+0x28>)
   19a90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   19a94:	3301      	adds	r3, #1
   19a96:	2b35      	cmp	r3, #53	; 0x35
   19a98:	ddf6      	ble.n	19a88 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   19a9a:	4a02      	ldr	r2, [pc, #8]	; (19aa4 <NVIC_Relocate+0x28>)
   19a9c:	4b03      	ldr	r3, [pc, #12]	; (19aac <NVIC_Relocate+0x30>)
   19a9e:	609a      	str	r2, [r3, #8]
#endif
}
   19aa0:	4770      	bx	lr
   19aa2:	bf00      	nop
   19aa4:	20000000 	.word	0x20000000
   19aa8:	00008020 	.word	0x00008020
   19aac:	e000ed00 	.word	0xe000ed00

00019ab0 <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
   19ab0:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   19ab2:	2400      	movs	r4, #0
   19ab4:	e000      	b.n	19ab8 <hal_gpio_irq_handler+0x8>
   19ab6:	3401      	adds	r4, #1
   19ab8:	2c07      	cmp	r4, #7
   19aba:	dc1c      	bgt.n	19af6 <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
   19abc:	f104 0340 	add.w	r3, r4, #64	; 0x40
   19ac0:	4a0d      	ldr	r2, [pc, #52]	; (19af8 <hal_gpio_irq_handler+0x48>)
   19ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   19ac6:	2b00      	cmp	r3, #0
   19ac8:	d0f5      	beq.n	19ab6 <hal_gpio_irq_handler+0x6>
   19aca:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   19ace:	2301      	movs	r3, #1
   19ad0:	40a3      	lsls	r3, r4
   19ad2:	421a      	tst	r2, r3
   19ad4:	d0ef      	beq.n	19ab6 <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
   19ad6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   19ada:	4a07      	ldr	r2, [pc, #28]	; (19af8 <hal_gpio_irq_handler+0x48>)
   19adc:	2100      	movs	r1, #0
   19ade:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
   19ae2:	4b06      	ldr	r3, [pc, #24]	; (19afc <hal_gpio_irq_handler+0x4c>)
   19ae4:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   19ae8:	2a00      	cmp	r2, #0
   19aea:	d0e4      	beq.n	19ab6 <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
   19aec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   19af0:	6858      	ldr	r0, [r3, #4]
   19af2:	4790      	blx	r2
   19af4:	e7df      	b.n	19ab6 <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
   19af6:	bd10      	pop	{r4, pc}
   19af8:	40006000 	.word	0x40006000
   19afc:	20006f28 	.word	0x20006f28

00019b00 <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
   19b00:	4b06      	ldr	r3, [pc, #24]	; (19b1c <hal_gpio_irq_setup+0x1c>)
   19b02:	781b      	ldrb	r3, [r3, #0]
   19b04:	b94b      	cbnz	r3, 19b1a <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   19b06:	4b06      	ldr	r3, [pc, #24]	; (19b20 <hal_gpio_irq_setup+0x20>)
   19b08:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   19b0a:	4a06      	ldr	r2, [pc, #24]	; (19b24 <hal_gpio_irq_setup+0x24>)
   19b0c:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19b0e:	4b06      	ldr	r3, [pc, #24]	; (19b28 <hal_gpio_irq_setup+0x28>)
   19b10:	2240      	movs	r2, #64	; 0x40
   19b12:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
   19b14:	4b01      	ldr	r3, [pc, #4]	; (19b1c <hal_gpio_irq_setup+0x1c>)
   19b16:	2201      	movs	r2, #1
   19b18:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
   19b1a:	4770      	bx	lr
   19b1c:	20006f68 	.word	0x20006f68
   19b20:	e000ed00 	.word	0xe000ed00
   19b24:	00019ab1 	.word	0x00019ab1
   19b28:	e000e100 	.word	0xe000e100

00019b2c <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   19b2c:	2000      	movs	r0, #0
   19b2e:	2807      	cmp	r0, #7
   19b30:	dc05      	bgt.n	19b3e <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
   19b32:	4b04      	ldr	r3, [pc, #16]	; (19b44 <hal_gpio_find_empty_slot+0x18>)
   19b34:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   19b38:	b11b      	cbz	r3, 19b42 <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   19b3a:	3001      	adds	r0, #1
   19b3c:	e7f7      	b.n	19b2e <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
   19b3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19b42:	4770      	bx	lr
   19b44:	20006f28 	.word	0x20006f28

00019b48 <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
   19b48:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   19b4a:	2000      	movs	r0, #0
   19b4c:	e000      	b.n	19b50 <hal_gpio_find_pin+0x8>
   19b4e:	3001      	adds	r0, #1
   19b50:	2807      	cmp	r0, #7
   19b52:	dc0e      	bgt.n	19b72 <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
   19b54:	4b08      	ldr	r3, [pc, #32]	; (19b78 <hal_gpio_find_pin+0x30>)
   19b56:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   19b5a:	2b00      	cmp	r3, #0
   19b5c:	d0f7      	beq.n	19b4e <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
   19b5e:	f500 73a2 	add.w	r3, r0, #324	; 0x144
   19b62:	4a06      	ldr	r2, [pc, #24]	; (19b7c <hal_gpio_find_pin+0x34>)
   19b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   19b68:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
   19b6c:	428b      	cmp	r3, r1
   19b6e:	d1ee      	bne.n	19b4e <hal_gpio_find_pin+0x6>
   19b70:	e001      	b.n	19b76 <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
   19b72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19b76:	4770      	bx	lr
   19b78:	20006f28 	.word	0x20006f28
   19b7c:	40006000 	.word	0x40006000

00019b80 <hal_gpio_init_in>:
    switch (pull) {
   19b80:	2901      	cmp	r1, #1
   19b82:	d003      	beq.n	19b8c <hal_gpio_init_in+0xc>
   19b84:	2902      	cmp	r1, #2
   19b86:	d00f      	beq.n	19ba8 <hal_gpio_init_in+0x28>
        conf = 0;
   19b88:	2100      	movs	r1, #0
        break;
   19b8a:	e000      	b.n	19b8e <hal_gpio_init_in+0xe>
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
   19b8c:	210c      	movs	r1, #12
    port->PIN_CNF[pin_index] = conf;
   19b8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19b92:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   19b96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
   19b9a:	2301      	movs	r3, #1
   19b9c:	fa03 f000 	lsl.w	r0, r3, r0
   19ba0:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
   19ba4:	2000      	movs	r0, #0
   19ba6:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
   19ba8:	2104      	movs	r1, #4
   19baa:	e7f0      	b.n	19b8e <hal_gpio_init_in+0xe>

00019bac <hal_gpio_init_out>:
    if (val) {
   19bac:	b999      	cbnz	r1, 19bd6 <hal_gpio_init_out+0x2a>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   19bae:	2301      	movs	r3, #1
   19bb0:	4083      	lsls	r3, r0
   19bb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19bb6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
   19bba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19bbe:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   19bc2:	2103      	movs	r1, #3
   19bc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
   19bc8:	2301      	movs	r3, #1
   19bca:	fa03 f000 	lsl.w	r0, r3, r0
   19bce:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
   19bd2:	2000      	movs	r0, #0
   19bd4:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   19bd6:	2301      	movs	r3, #1
   19bd8:	4083      	lsls	r3, r0
   19bda:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19bde:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   19be2:	e7ea      	b.n	19bba <hal_gpio_init_out+0xe>

00019be4 <hal_gpio_write>:
    if (val) {
   19be4:	b939      	cbnz	r1, 19bf6 <hal_gpio_write+0x12>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   19be6:	2301      	movs	r3, #1
   19be8:	fa03 f000 	lsl.w	r0, r3, r0
   19bec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19bf0:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   19bf4:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   19bf6:	2301      	movs	r3, #1
   19bf8:	fa03 f000 	lsl.w	r0, r3, r0
   19bfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19c00:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   19c04:	4770      	bx	lr

00019c06 <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
   19c06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19c0a:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
   19c0e:	2301      	movs	r3, #1
   19c10:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   19c12:	421a      	tst	r2, r3
   19c14:	d108      	bne.n	19c28 <hal_gpio_read+0x22>
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   19c16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19c1a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   19c1e:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   19c22:	f000 0001 	and.w	r0, r0, #1
}
   19c26:	4770      	bx	lr
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   19c28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19c2c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   19c30:	fa23 f000 	lsr.w	r0, r3, r0
   19c34:	f000 0001 	and.w	r0, r0, #1
   19c38:	4770      	bx	lr
	...

00019c3c <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
   19c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c40:	4680      	mov	r8, r0
   19c42:	460f      	mov	r7, r1
   19c44:	4616      	mov	r6, r2
   19c46:	461c      	mov	r4, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
   19c48:	f7ff ff5a 	bl	19b00 <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
   19c4c:	f7ff ff6e 	bl	19b2c <hal_gpio_find_empty_slot>
    if (i < 0) {
   19c50:	1e05      	subs	r5, r0, #0
   19c52:	db27      	blt.n	19ca4 <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
   19c54:	f89d 1018 	ldrb.w	r1, [sp, #24]
   19c58:	4640      	mov	r0, r8
   19c5a:	f7ff ff91 	bl	19b80 <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
   19c5e:	2c02      	cmp	r4, #2
   19c60:	d01d      	beq.n	19c9e <hal_gpio_irq_init+0x62>
   19c62:	2c03      	cmp	r4, #3
   19c64:	d018      	beq.n	19c98 <hal_gpio_irq_init+0x5c>
   19c66:	2c01      	cmp	r4, #1
   19c68:	d002      	beq.n	19c70 <hal_gpio_irq_init+0x34>
        break;
    case HAL_GPIO_TRIG_BOTH:
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
        break;
    default:
        return -1;
   19c6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19c6e:	e011      	b.n	19c94 <hal_gpio_irq_init+0x58>
        conf = GPIOTE_CONFIG_POLARITY_LoToHi << GPIOTE_CONFIG_POLARITY_Pos;
   19c70:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
   19c74:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
   19c78:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
   19c7c:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   19c80:	4b0a      	ldr	r3, [pc, #40]	; (19cac <hal_gpio_irq_init+0x70>)
   19c82:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
   19c86:	4b0a      	ldr	r3, [pc, #40]	; (19cb0 <hal_gpio_irq_init+0x74>)
   19c88:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
    hal_gpio_irqs[i].arg = arg;
   19c8c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   19c90:	605e      	str	r6, [r3, #4]

    return 0;
   19c92:	2000      	movs	r0, #0
}
   19c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
   19c98:	f44f 3040 	mov.w	r0, #196608	; 0x30000
        break;
   19c9c:	e7ea      	b.n	19c74 <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
   19c9e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   19ca2:	e7e7      	b.n	19c74 <hal_gpio_irq_init+0x38>
        return -1;
   19ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19ca8:	e7f4      	b.n	19c94 <hal_gpio_irq_init+0x58>
   19caa:	bf00      	nop
   19cac:	40006000 	.word	0x40006000
   19cb0:	20006f28 	.word	0x20006f28

00019cb4 <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
   19cb4:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
   19cb6:	f7ff ff47 	bl	19b48 <hal_gpio_find_pin>
    if (i < 0) {
   19cba:	2800      	cmp	r0, #0
   19cbc:	db0a      	blt.n	19cd4 <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
   19cbe:	4a06      	ldr	r2, [pc, #24]	; (19cd8 <hal_gpio_irq_enable+0x24>)
   19cc0:	f100 0340 	add.w	r3, r0, #64	; 0x40
   19cc4:	2100      	movs	r1, #0
   19cc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
   19cca:	2301      	movs	r3, #1
   19ccc:	fa03 f000 	lsl.w	r0, r3, r0
   19cd0:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
   19cd4:	bd08      	pop	{r3, pc}
   19cd6:	bf00      	nop
   19cd8:	40006000 	.word	0x40006000

00019cdc <hal_i2c_delay_us>:

static void
hal_i2c_delay_us(uint32_t number_of_us)
{
register uint32_t delay __ASM ("r0") = number_of_us;
__ASM volatile (
   19cdc:	3801      	subs	r0, #1
   19cde:	bf00      	nop
   19ce0:	bf00      	nop
   19ce2:	bf00      	nop
   19ce4:	bf00      	nop
   19ce6:	bf00      	nop
   19ce8:	bf00      	nop
   19cea:	bf00      	nop
   19cec:	bf00      	nop
   19cee:	bf00      	nop
   19cf0:	bf00      	nop
   19cf2:	bf00      	nop
   19cf4:	bf00      	nop
   19cf6:	bf00      	nop
   19cf8:	bf00      	nop
   19cfa:	bf00      	nop
   19cfc:	bf00      	nop
   19cfe:	bf00      	nop
   19d00:	bf00      	nop
   19d02:	bf00      	nop
   19d04:	bf00      	nop
   19d06:	bf00      	nop
   19d08:	bf00      	nop
   19d0a:	bf00      	nop
   19d0c:	bf00      	nop
   19d0e:	bf00      	nop
   19d10:	bf00      	nop
   19d12:	bf00      	nop
   19d14:	bf00      	nop
   19d16:	bf00      	nop
   19d18:	bf00      	nop
   19d1a:	bf00      	nop
   19d1c:	bf00      	nop
   19d1e:	bf00      	nop
   19d20:	bf00      	nop
   19d22:	bf00      	nop
   19d24:	bf00      	nop
   19d26:	bf00      	nop
   19d28:	bf00      	nop
   19d2a:	bf00      	nop
   19d2c:	bf00      	nop
   19d2e:	bf00      	nop
   19d30:	bf00      	nop
   19d32:	bf00      	nop
   19d34:	bf00      	nop
   19d36:	bf00      	nop
   19d38:	bf00      	nop
   19d3a:	bf00      	nop
   19d3c:	bf00      	nop
   19d3e:	bf00      	nop
   19d40:	bf00      	nop
   19d42:	bf00      	nop
   19d44:	bf00      	nop
   19d46:	bf00      	nop
   19d48:	bf00      	nop
   19d4a:	bf00      	nop
   19d4c:	bf00      	nop
   19d4e:	bf00      	nop
   19d50:	bf00      	nop
   19d52:	d1c3      	bne.n	19cdc <hal_i2c_delay_us>
    " BNE 1b\n"
#ifdef NRF51
    ".syntax divided\n"
#endif
    : "+r" (delay));
}
   19d54:	4770      	bx	lr
	...

00019d58 <hal_i2c_resolve>:

static int
hal_i2c_resolve(uint8_t i2c_num, struct nrf52_hal_i2c **out_i2c)
{
    if (i2c_num >= NRF52_HAL_I2C_MAX) {
   19d58:	2801      	cmp	r0, #1
   19d5a:	d806      	bhi.n	19d6a <hal_i2c_resolve+0x12>
        *out_i2c = NULL;
        return HAL_I2C_ERR_INVAL;
    }

    *out_i2c = nrf52_hal_i2cs[i2c_num];
   19d5c:	4b06      	ldr	r3, [pc, #24]	; (19d78 <hal_i2c_resolve+0x20>)
   19d5e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   19d62:	600b      	str	r3, [r1, #0]
    if (*out_i2c == NULL) {
   19d64:	b12b      	cbz	r3, 19d72 <hal_i2c_resolve+0x1a>
        return HAL_I2C_ERR_INVAL;
    }

    return 0;
   19d66:	2000      	movs	r0, #0
}
   19d68:	4770      	bx	lr
        *out_i2c = NULL;
   19d6a:	2300      	movs	r3, #0
   19d6c:	600b      	str	r3, [r1, #0]
        return HAL_I2C_ERR_INVAL;
   19d6e:	2002      	movs	r0, #2
   19d70:	4770      	bx	lr
        return HAL_I2C_ERR_INVAL;
   19d72:	2002      	movs	r0, #2
   19d74:	4770      	bx	lr
   19d76:	bf00      	nop
   19d78:	00021c60 	.word	0x00021c60

00019d7c <hal_i2c_convert_status>:
 * Converts an nRF SDK I2C status to a HAL I2C error code.
 */
static int
hal_i2c_convert_status(int nrf_status)
{
    if (nrf_status == 0) {
   19d7c:	b148      	cbz	r0, 19d92 <hal_i2c_convert_status+0x16>
        return 0;
    } else if (nrf_status & NRF_TWIM_ERROR_DATA_NACK) {
   19d7e:	f010 0f04 	tst.w	r0, #4
   19d82:	d107      	bne.n	19d94 <hal_i2c_convert_status+0x18>
        return HAL_I2C_ERR_DATA_NACK;
    } else if (nrf_status & NRF_TWIM_ERROR_ADDRESS_NACK) {
   19d84:	f010 0f02 	tst.w	r0, #2
   19d88:	d101      	bne.n	19d8e <hal_i2c_convert_status+0x12>
        return HAL_I2C_ERR_ADDR_NACK;
    } else {
        return HAL_I2C_ERR_UNKNOWN;
   19d8a:	2001      	movs	r0, #1
    }
}
   19d8c:	4770      	bx	lr
        return HAL_I2C_ERR_ADDR_NACK;
   19d8e:	2004      	movs	r0, #4
   19d90:	4770      	bx	lr
   19d92:	4770      	bx	lr
        return HAL_I2C_ERR_DATA_NACK;
   19d94:	2005      	movs	r0, #5
   19d96:	4770      	bx	lr

00019d98 <read_gpio_inbuffer>:
read_gpio_inbuffer(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   19d98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19d9c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   19da0:	fa23 f000 	lsr.w	r0, r3, r0
}
   19da4:	f000 0001 	and.w	r0, r0, #1
   19da8:	4770      	bx	lr

00019daa <hal_i2c_clear_bus>:
 * Clear the bus after reset by clocking 9 bits manually.
 * This should reset state from (most of) the devices on the other end.
 */
static void
hal_i2c_clear_bus(int scl_pin, int sda_pin)
{
   19daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19dae:	4605      	mov	r5, r0
   19db0:	460e      	mov	r6, r1
    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(scl_pin);
    sda_port = HAL_GPIO_PORT(sda_pin);

    /* Input connected, standard-low disconnected-high, pull-ups */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   19db2:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   19db6:	f500 78e0 	add.w	r8, r0, #448	; 0x1c0
   19dba:	f240 630c 	movw	r3, #1548	; 0x60c
   19dbe:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   19dc2:	f501 77e0 	add.w	r7, r1, #448	; 0x1c0
   19dc6:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_gpio_write(scl_pin, 1);
   19dca:	2101      	movs	r1, #1
   19dcc:	f7ff ff0a 	bl	19be4 <hal_gpio_write>
    hal_gpio_write(sda_pin, 1);
   19dd0:	2101      	movs	r1, #1
   19dd2:	4630      	mov	r0, r6
   19dd4:	f7ff ff06 	bl	19be4 <hal_gpio_write>

    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF_CLR;
   19dd8:	f240 630d 	movw	r3, #1549	; 0x60d
   19ddc:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF_CLR;
   19de0:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_i2c_delay_us(4);
   19de4:	2004      	movs	r0, #4
   19de6:	f7ff ff79 	bl	19cdc <hal_i2c_delay_us>

    for (i = 0; i < 9; i++) {
   19dea:	2400      	movs	r4, #0
   19dec:	2c08      	cmp	r4, #8
   19dee:	dc14      	bgt.n	19e1a <hal_i2c_clear_bus+0x70>
        if (read_gpio_inbuffer(sda_pin)) {
   19df0:	4630      	mov	r0, r6
   19df2:	f7ff ffd1 	bl	19d98 <read_gpio_inbuffer>
   19df6:	b978      	cbnz	r0, 19e18 <hal_i2c_clear_bus+0x6e>
                goto ret;
            } else {
                break;
            }
        }
        hal_gpio_write(scl_pin, 0);
   19df8:	2100      	movs	r1, #0
   19dfa:	4628      	mov	r0, r5
   19dfc:	f7ff fef2 	bl	19be4 <hal_gpio_write>
        hal_i2c_delay_us(4);
   19e00:	2004      	movs	r0, #4
   19e02:	f7ff ff6b 	bl	19cdc <hal_i2c_delay_us>
        hal_gpio_write(scl_pin, 1);
   19e06:	2101      	movs	r1, #1
   19e08:	4628      	mov	r0, r5
   19e0a:	f7ff feeb 	bl	19be4 <hal_gpio_write>
        hal_i2c_delay_us(4);
   19e0e:	2004      	movs	r0, #4
   19e10:	f7ff ff64 	bl	19cdc <hal_i2c_delay_us>
    for (i = 0; i < 9; i++) {
   19e14:	3401      	adds	r4, #1
   19e16:	e7e9      	b.n	19dec <hal_i2c_clear_bus+0x42>
            if (i == 0) {
   19e18:	b154      	cbz	r4, 19e30 <hal_i2c_clear_bus+0x86>
    }

    /*
     * Send STOP.
     */
    hal_gpio_write(sda_pin, 0);
   19e1a:	2100      	movs	r1, #0
   19e1c:	4630      	mov	r0, r6
   19e1e:	f7ff fee1 	bl	19be4 <hal_gpio_write>
    hal_i2c_delay_us(4);
   19e22:	2004      	movs	r0, #4
   19e24:	f7ff ff5a 	bl	19cdc <hal_i2c_delay_us>
    hal_gpio_write(sda_pin, 1);
   19e28:	2101      	movs	r1, #1
   19e2a:	4630      	mov	r0, r6
   19e2c:	f7ff feda 	bl	19be4 <hal_gpio_write>

ret:
    /* Restore GPIO config */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   19e30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19e34:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   19e38:	f240 620c 	movw	r2, #1548	; 0x60c
   19e3c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   19e40:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   19e44:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   19e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019e4c <hal_i2c_init>:

int
hal_i2c_init(uint8_t i2c_num, void *usercfg)
{
   19e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19e4e:	b083      	sub	sp, #12
    struct nrf52_hal_i2c_cfg *cfg;
    uint32_t freq;
    int rc;
    NRF_GPIO_Type *scl_port, *sda_port;

    assert(usercfg != NULL);
   19e50:	b1a1      	cbz	r1, 19e7c <hal_i2c_init+0x30>
   19e52:	460c      	mov	r4, r1

    rc = hal_i2c_resolve(i2c_num, &i2c);
   19e54:	a901      	add	r1, sp, #4
   19e56:	f7ff ff7f 	bl	19d58 <hal_i2c_resolve>
    if (rc != 0) {
   19e5a:	4606      	mov	r6, r0
   19e5c:	bba8      	cbnz	r0, 19eca <hal_i2c_init+0x7e>
        goto err;
    }

    cfg = (struct nrf52_hal_i2c_cfg *) usercfg;
    regs = i2c->nhi_regs;
   19e5e:	9b01      	ldr	r3, [sp, #4]
   19e60:	681d      	ldr	r5, [r3, #0]

    switch (cfg->i2c_frequency) {
   19e62:	68a3      	ldr	r3, [r4, #8]
   19e64:	2bfa      	cmp	r3, #250	; 0xfa
   19e66:	d035      	beq.n	19ed4 <hal_i2c_init+0x88>
   19e68:	d90e      	bls.n	19e88 <hal_i2c_init+0x3c>
   19e6a:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
   19e6e:	d02f      	beq.n	19ed0 <hal_i2c_init+0x84>
   19e70:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   19e74:	d131      	bne.n	19eda <hal_i2c_init+0x8e>
        break;
    case 380:
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
        break;
    case 400:
        freq = TWI_FREQUENCY_FREQUENCY_K400;
   19e76:	f04f 67cd 	mov.w	r7, #107479040	; 0x6680000
        break;
   19e7a:	e009      	b.n	19e90 <hal_i2c_init+0x44>
    assert(usercfg != NULL);
   19e7c:	2300      	movs	r3, #0
   19e7e:	461a      	mov	r2, r3
   19e80:	4619      	mov	r1, r3
   19e82:	4618      	mov	r0, r3
   19e84:	f000 fc88 	bl	1a798 <__assert_func>
    switch (cfg->i2c_frequency) {
   19e88:	2b64      	cmp	r3, #100	; 0x64
   19e8a:	d126      	bne.n	19eda <hal_i2c_init+0x8e>
        freq = TWI_FREQUENCY_FREQUENCY_K100;
   19e8c:	f04f 77cc 	mov.w	r7, #26738688	; 0x1980000
    default:
        rc = HAL_I2C_ERR_INVAL;
        goto err;
    }

    hal_i2c_clear_bus(cfg->scl_pin, cfg->sda_pin);
   19e90:	6861      	ldr	r1, [r4, #4]
   19e92:	6820      	ldr	r0, [r4, #0]
   19e94:	f7ff ff89 	bl	19daa <hal_i2c_clear_bus>

    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(cfg->scl_pin);
    sda_port = HAL_GPIO_PORT(cfg->sda_pin);

    scl_port->PIN_CNF[HAL_GPIO_INDEX(cfg->scl_pin)] = NRF52_SCL_PIN_CONF;
   19e98:	6823      	ldr	r3, [r4, #0]
   19e9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19e9e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19ea2:	f240 610c 	movw	r1, #1548	; 0x60c
   19ea6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    sda_port->PIN_CNF[HAL_GPIO_INDEX(cfg->sda_pin)] = NRF52_SDA_PIN_CONF;
   19eaa:	6863      	ldr	r3, [r4, #4]
   19eac:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19eb0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    regs->PSELSCL = cfg->scl_pin;
   19eb4:	6823      	ldr	r3, [r4, #0]
   19eb6:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    regs->PSELSDA = cfg->sda_pin;
   19eba:	6863      	ldr	r3, [r4, #4]
   19ebc:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    regs->FREQUENCY = freq;
   19ec0:	f8c5 7524 	str.w	r7, [r5, #1316]	; 0x524
    regs->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   19ec4:	2305      	movs	r3, #5
   19ec6:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    return (0);
err:
    return (rc);
}
   19eca:	4630      	mov	r0, r6
   19ecc:	b003      	add	sp, #12
   19ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
   19ed0:	4f03      	ldr	r7, [pc, #12]	; (19ee0 <hal_i2c_init+0x94>)
        break;
   19ed2:	e7dd      	b.n	19e90 <hal_i2c_init+0x44>
        freq = TWI_FREQUENCY_FREQUENCY_K250;
   19ed4:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
   19ed8:	e7da      	b.n	19e90 <hal_i2c_init+0x44>
        rc = HAL_I2C_ERR_INVAL;
   19eda:	2602      	movs	r6, #2
   19edc:	e7f5      	b.n	19eca <hal_i2c_init+0x7e>
   19ede:	bf00      	nop
   19ee0:	06147ae9 	.word	0x06147ae9

00019ee4 <hal_i2c_master_write>:
}

int
hal_i2c_master_write(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                     uint32_t timo, uint8_t last_op)
{
   19ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ee8:	b083      	sub	sp, #12
   19eea:	4688      	mov	r8, r1
   19eec:	4615      	mov	r5, r2
   19eee:	469a      	mov	sl, r3
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   19ef0:	a901      	add	r1, sp, #4
   19ef2:	f7ff ff31 	bl	19d58 <hal_i2c_resolve>
    if (rc != 0) {
   19ef6:	4681      	mov	r9, r0
   19ef8:	b118      	cbz	r0, 19f02 <hal_i2c_master_write+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   19efa:	4648      	mov	r0, r9
   19efc:	b003      	add	sp, #12
   19efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   19f02:	9b01      	ldr	r3, [sp, #4]
   19f04:	681c      	ldr	r4, [r3, #0]
    regs->ADDRESS = pdata->address;
   19f06:	f898 3000 	ldrb.w	r3, [r8]
   19f0a:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    regs->EVENTS_ERROR = 0;
   19f0e:	2300      	movs	r3, #0
   19f10:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   19f14:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   19f18:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->SHORTS = 0;
   19f1c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTTX);
   19f20:	f104 0708 	add.w	r7, r4, #8
    int retry = 2;
   19f24:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   19f28:	2300      	movs	r3, #0
   19f2a:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   19f2e:	2301      	movs	r3, #1
   19f30:	603b      	str	r3, [r7, #0]
        end_ticks = os_cputime_get32() +
   19f32:	f000 fe61 	bl	1abf8 <os_cputime_get32>
   19f36:	f100 0664 	add.w	r6, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   19f3a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   19f3e:	f7ff fe62 	bl	19c06 <hal_gpio_read>
   19f42:	b1b0      	cbz	r0, 19f72 <hal_i2c_master_write+0x8e>
   19f44:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   19f48:	b99b      	cbnz	r3, 19f72 <hal_i2c_master_write+0x8e>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   19f4a:	f000 fe55 	bl	1abf8 <os_cputime_get32>
   19f4e:	1b80      	subs	r0, r0, r6
   19f50:	2800      	cmp	r0, #0
   19f52:	dbf2      	blt.n	19f3a <hal_i2c_master_write+0x56>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   19f54:	2300      	movs	r3, #0
   19f56:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   19f5a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   19f5e:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   19f62:	f7ff ff22 	bl	19daa <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   19f66:	2305      	movs	r3, #5
   19f68:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   19f6c:	f1bb 0b01 	subs.w	fp, fp, #1
   19f70:	d1da      	bne.n	19f28 <hal_i2c_master_write+0x44>
    start = os_time_get();
   19f72:	f001 fe2f 	bl	1bbd4 <os_time_get>
   19f76:	4606      	mov	r6, r0
    for (i = 0; i < pdata->len; i++) {
   19f78:	464f      	mov	r7, r9
   19f7a:	e003      	b.n	19f84 <hal_i2c_master_write+0xa0>
        if (regs->EVENTS_ERROR) {
   19f7c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19f80:	b9db      	cbnz	r3, 19fba <hal_i2c_master_write+0xd6>
    for (i = 0; i < pdata->len; i++) {
   19f82:	3701      	adds	r7, #1
   19f84:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   19f88:	42bb      	cmp	r3, r7
   19f8a:	dd24      	ble.n	19fd6 <hal_i2c_master_write+0xf2>
        regs->EVENTS_TXDSENT = 0;
   19f8c:	2300      	movs	r3, #0
   19f8e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        regs->TXD = pdata->buffer[i];
   19f92:	f8d8 3004 	ldr.w	r3, [r8, #4]
   19f96:	5ddb      	ldrb	r3, [r3, r7]
   19f98:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
        while (!regs->EVENTS_TXDSENT && !regs->EVENTS_ERROR) {
   19f9c:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   19fa0:	2b00      	cmp	r3, #0
   19fa2:	d1eb      	bne.n	19f7c <hal_i2c_master_write+0x98>
   19fa4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19fa8:	2b00      	cmp	r3, #0
   19faa:	d1e7      	bne.n	19f7c <hal_i2c_master_write+0x98>
            if (os_time_get() - start > timo) {
   19fac:	f001 fe12 	bl	1bbd4 <os_time_get>
   19fb0:	1b80      	subs	r0, r0, r6
   19fb2:	42a8      	cmp	r0, r5
   19fb4:	d9f2      	bls.n	19f9c <hal_i2c_master_write+0xb8>
                rc = HAL_I2C_ERR_TIMEOUT;
   19fb6:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   19fba:	2301      	movs	r3, #1
   19fbc:	6163      	str	r3, [r4, #20]
    if (regs->EVENTS_ERROR) {
   19fbe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19fc2:	2b00      	cmp	r3, #0
   19fc4:	d099      	beq.n	19efa <hal_i2c_master_write+0x16>
        nrf_status = regs->ERRORSRC;
   19fc6:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   19fca:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   19fce:	f7ff fed5 	bl	19d7c <hal_i2c_convert_status>
   19fd2:	4681      	mov	r9, r0
   19fd4:	e791      	b.n	19efa <hal_i2c_master_write+0x16>
    if (last_op) {
   19fd6:	f1ba 0f00 	cmp.w	sl, #0
   19fda:	d08e      	beq.n	19efa <hal_i2c_master_write+0x16>
        regs->EVENTS_STOPPED = 0;
   19fdc:	2300      	movs	r3, #0
   19fde:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        regs->TASKS_STOP = 1;
   19fe2:	2301      	movs	r3, #1
   19fe4:	6163      	str	r3, [r4, #20]
        while (!regs->EVENTS_STOPPED && !regs->EVENTS_ERROR) {
   19fe6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   19fea:	b953      	cbnz	r3, 1a002 <hal_i2c_master_write+0x11e>
   19fec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19ff0:	b93b      	cbnz	r3, 1a002 <hal_i2c_master_write+0x11e>
            if (os_time_get() - start > timo) {
   19ff2:	f001 fdef 	bl	1bbd4 <os_time_get>
   19ff6:	1b80      	subs	r0, r0, r6
   19ff8:	42a8      	cmp	r0, r5
   19ffa:	d9f4      	bls.n	19fe6 <hal_i2c_master_write+0x102>
                rc = HAL_I2C_ERR_TIMEOUT;
   19ffc:	f04f 0903 	mov.w	r9, #3
   1a000:	e7db      	b.n	19fba <hal_i2c_master_write+0xd6>
        if (regs->EVENTS_ERROR) {
   1a002:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a006:	2b00      	cmp	r3, #0
   1a008:	d1d7      	bne.n	19fba <hal_i2c_master_write+0xd6>
   1a00a:	e776      	b.n	19efa <hal_i2c_master_write+0x16>

0001a00c <hal_i2c_master_read>:

int
hal_i2c_master_read(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                    uint32_t timo, uint8_t last_op)
{
   1a00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a010:	b085      	sub	sp, #20
   1a012:	460f      	mov	r7, r1
   1a014:	4615      	mov	r5, r2
   1a016:	9301      	str	r3, [sp, #4]
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   1a018:	a903      	add	r1, sp, #12
   1a01a:	f7ff fe9d 	bl	19d58 <hal_i2c_resolve>
    if (rc != 0) {
   1a01e:	4681      	mov	r9, r0
   1a020:	b118      	cbz	r0, 1a02a <hal_i2c_master_read+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   1a022:	4648      	mov	r0, r9
   1a024:	b005      	add	sp, #20
   1a026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   1a02a:	9b03      	ldr	r3, [sp, #12]
   1a02c:	681c      	ldr	r4, [r3, #0]
    start = os_time_get();
   1a02e:	f001 fdd1 	bl	1bbd4 <os_time_get>
   1a032:	4606      	mov	r6, r0
    if (regs->EVENTS_RXDREADY) {
   1a034:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a038:	b11b      	cbz	r3, 1a042 <hal_i2c_master_read+0x36>
        (void)regs->RXD;
   1a03a:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
        (void)regs->RXD;
   1a03e:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    regs->EVENTS_ERROR = 0;
   1a042:	2300      	movs	r3, #0
   1a044:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   1a048:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   1a04c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->EVENTS_RXDREADY = 0;
   1a050:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    regs->ADDRESS = pdata->address;
   1a054:	783b      	ldrb	r3, [r7, #0]
   1a056:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (pdata->len == 1 && last_op) {
   1a05a:	887b      	ldrh	r3, [r7, #2]
   1a05c:	2b01      	cmp	r3, #1
   1a05e:	d02e      	beq.n	1a0be <hal_i2c_master_read+0xb2>
        regs->SHORTS = TWI_SHORTS_BB_SUSPEND_Msk;
   1a060:	2301      	movs	r3, #1
   1a062:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTRX);
   1a066:	46a2      	mov	sl, r4
    int retry = 2;
   1a068:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   1a06c:	2300      	movs	r3, #0
   1a06e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   1a072:	2301      	movs	r3, #1
   1a074:	f8ca 3000 	str.w	r3, [sl]
        end_ticks = os_cputime_get32() +
   1a078:	f000 fdbe 	bl	1abf8 <os_cputime_get32>
   1a07c:	f100 0864 	add.w	r8, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   1a080:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1a084:	f7ff fdbf 	bl	19c06 <hal_gpio_read>
   1a088:	b1b8      	cbz	r0, 1a0ba <hal_i2c_master_read+0xae>
   1a08a:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   1a08e:	b9a3      	cbnz	r3, 1a0ba <hal_i2c_master_read+0xae>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   1a090:	f000 fdb2 	bl	1abf8 <os_cputime_get32>
   1a094:	eba0 0008 	sub.w	r0, r0, r8
   1a098:	2800      	cmp	r0, #0
   1a09a:	dbf1      	blt.n	1a080 <hal_i2c_master_read+0x74>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   1a09c:	2300      	movs	r3, #0
   1a09e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   1a0a2:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1a0a6:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   1a0aa:	f7ff fe7e 	bl	19daa <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   1a0ae:	2305      	movs	r3, #5
   1a0b0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   1a0b4:	f1bb 0b01 	subs.w	fp, fp, #1
   1a0b8:	d1d8      	bne.n	1a06c <hal_i2c_master_read+0x60>
    int retry = 2;
   1a0ba:	46c8      	mov	r8, r9
   1a0bc:	e017      	b.n	1a0ee <hal_i2c_master_read+0xe2>
    if (pdata->len == 1 && last_op) {
   1a0be:	9b01      	ldr	r3, [sp, #4]
   1a0c0:	2b00      	cmp	r3, #0
   1a0c2:	d0cd      	beq.n	1a060 <hal_i2c_master_read+0x54>
        regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   1a0c4:	2302      	movs	r3, #2
   1a0c6:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   1a0ca:	e7cc      	b.n	1a066 <hal_i2c_master_read+0x5a>
        if (regs->EVENTS_ERROR) {
   1a0cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a0d0:	bb0b      	cbnz	r3, 1a116 <hal_i2c_master_read+0x10a>
        pdata->buffer[i] = regs->RXD;
   1a0d2:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
   1a0d6:	687b      	ldr	r3, [r7, #4]
   1a0d8:	f803 2008 	strb.w	r2, [r3, r8]
        if (i == pdata->len - 2) {
   1a0dc:	887b      	ldrh	r3, [r7, #2]
   1a0de:	3b02      	subs	r3, #2
   1a0e0:	4543      	cmp	r3, r8
   1a0e2:	d02a      	beq.n	1a13a <hal_i2c_master_read+0x12e>
        regs->EVENTS_RXDREADY = 0;
   1a0e4:	2300      	movs	r3, #0
   1a0e6:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    for (i = 0; i < pdata->len; i++) {
   1a0ea:	f108 0801 	add.w	r8, r8, #1
   1a0ee:	887b      	ldrh	r3, [r7, #2]
   1a0f0:	4543      	cmp	r3, r8
   1a0f2:	dd96      	ble.n	1a022 <hal_i2c_master_read+0x16>
        regs->TASKS_RESUME = 1;
   1a0f4:	2301      	movs	r3, #1
   1a0f6:	6223      	str	r3, [r4, #32]
        while (!regs->EVENTS_RXDREADY && !regs->EVENTS_ERROR) {
   1a0f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a0fc:	2b00      	cmp	r3, #0
   1a0fe:	d1e5      	bne.n	1a0cc <hal_i2c_master_read+0xc0>
   1a100:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a104:	2b00      	cmp	r3, #0
   1a106:	d1e1      	bne.n	1a0cc <hal_i2c_master_read+0xc0>
            if (os_time_get() - start > timo) {
   1a108:	f001 fd64 	bl	1bbd4 <os_time_get>
   1a10c:	1b80      	subs	r0, r0, r6
   1a10e:	42a8      	cmp	r0, r5
   1a110:	d9f2      	bls.n	1a0f8 <hal_i2c_master_read+0xec>
                rc = HAL_I2C_ERR_TIMEOUT;
   1a112:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   1a116:	2301      	movs	r3, #1
   1a118:	6163      	str	r3, [r4, #20]
    regs->SHORTS = 0;
   1a11a:	2300      	movs	r3, #0
   1a11c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (regs->EVENTS_ERROR) {
   1a120:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a124:	2b00      	cmp	r3, #0
   1a126:	f43f af7c 	beq.w	1a022 <hal_i2c_master_read+0x16>
        nrf_status = regs->ERRORSRC;
   1a12a:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   1a12e:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   1a132:	f7ff fe23 	bl	19d7c <hal_i2c_convert_status>
   1a136:	4681      	mov	r9, r0
   1a138:	e773      	b.n	1a022 <hal_i2c_master_read+0x16>
            if (last_op) {
   1a13a:	9b01      	ldr	r3, [sp, #4]
   1a13c:	2b00      	cmp	r3, #0
   1a13e:	d0d1      	beq.n	1a0e4 <hal_i2c_master_read+0xd8>
                regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   1a140:	2302      	movs	r3, #2
   1a142:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   1a146:	e7cd      	b.n	1a0e4 <hal_i2c_master_read+0xd8>

0001a148 <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   1a148:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   1a14a:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   1a14c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   1a150:	b32b      	cbz	r3, 1a19e <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
   1a152:	2300      	movs	r3, #0
   1a154:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   1a158:	7843      	ldrb	r3, [r0, #1]
   1a15a:	b303      	cbz	r3, 1a19e <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   1a15c:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   1a160:	88c3      	ldrh	r3, [r0, #6]
   1a162:	fa13 f382 	uxtah	r3, r3, r2
   1a166:	b29b      	uxth	r3, r3
   1a168:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   1a16a:	8881      	ldrh	r1, [r0, #4]
   1a16c:	428b      	cmp	r3, r1
   1a16e:	d217      	bcs.n	1a1a0 <nrf52_irqm_handler+0x58>
   1a170:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
   1a172:	6984      	ldr	r4, [r0, #24]
   1a174:	4414      	add	r4, r2
   1a176:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   1a178:	1acb      	subs	r3, r1, r3
   1a17a:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   1a17c:	2bff      	cmp	r3, #255	; 0xff
   1a17e:	bf28      	it	cs
   1a180:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   1a182:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   1a186:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   1a18a:	69c1      	ldr	r1, [r0, #28]
   1a18c:	b129      	cbz	r1, 1a19a <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
   1a18e:	440a      	add	r2, r1
   1a190:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   1a192:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   1a196:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   1a19a:	2301      	movs	r3, #1
   1a19c:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   1a19e:	bd38      	pop	{r3, r4, r5, pc}
   1a1a0:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
   1a1a2:	6a03      	ldr	r3, [r0, #32]
   1a1a4:	b10b      	cbz	r3, 1a1aa <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   1a1a6:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1a1a8:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   1a1aa:	2300      	movs	r3, #0
   1a1ac:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   1a1ae:	2340      	movs	r3, #64	; 0x40
   1a1b0:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   1a1b4:	e7f3      	b.n	1a19e <nrf52_irqm_handler+0x56>
	...

0001a1b8 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   1a1b8:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   1a1ba:	4b04      	ldr	r3, [pc, #16]	; (1a1cc <nrf52_spi0_irq_handler+0x14>)
   1a1bc:	781b      	ldrb	r3, [r3, #0]
   1a1be:	b103      	cbz	r3, 1a1c2 <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   1a1c0:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   1a1c2:	4802      	ldr	r0, [pc, #8]	; (1a1cc <nrf52_spi0_irq_handler+0x14>)
   1a1c4:	f7ff ffc0 	bl	1a148 <nrf52_irqm_handler>
}
   1a1c8:	e7fa      	b.n	1a1c0 <nrf52_spi0_irq_handler+0x8>
   1a1ca:	bf00      	nop
   1a1cc:	2000ddc0 	.word	0x2000ddc0

0001a1d0 <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   1a1d0:	2301      	movs	r3, #1
   1a1d2:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   1a1d4:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   1a1d8:	2b00      	cmp	r3, #0
   1a1da:	d0fb      	beq.n	1a1d4 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   1a1dc:	2300      	movs	r3, #0
   1a1de:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   1a1e2:	4770      	bx	lr

0001a1e4 <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
   1a1e4:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   1a1e6:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   1a1e8:	780b      	ldrb	r3, [r1, #0]
   1a1ea:	2b03      	cmp	r3, #3
   1a1ec:	d80c      	bhi.n	1a208 <hal_spi_config_slave+0x24>
   1a1ee:	e8df f003 	tbb	[pc, r3]
   1a1f2:	0e02      	.short	0x0e02
   1a1f4:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   1a1f6:	2300      	movs	r3, #0
    rc = 0;
   1a1f8:	4618      	mov	r0, r3
   1a1fa:	e00a      	b.n	1a212 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   1a1fc:	2304      	movs	r3, #4
    rc = 0;
   1a1fe:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
   1a200:	e007      	b.n	1a212 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   1a202:	2306      	movs	r3, #6
    rc = 0;
   1a204:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
   1a206:	e004      	b.n	1a212 <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
   1a208:	2300      	movs	r3, #0
            rc = EINVAL;
   1a20a:	2016      	movs	r0, #22
            break;
   1a20c:	e001      	b.n	1a212 <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   1a20e:	2302      	movs	r3, #2
    rc = 0;
   1a210:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1a212:	784c      	ldrb	r4, [r1, #1]
   1a214:	2c01      	cmp	r4, #1
   1a216:	d006      	beq.n	1a226 <hal_spi_config_slave+0x42>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   1a218:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   1a21c:	788b      	ldrb	r3, [r1, #2]
   1a21e:	b92b      	cbnz	r3, 1a22c <hal_spi_config_slave+0x48>
            rc = EINVAL;
            break;
    }

    return rc;
}
   1a220:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a224:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   1a226:	f043 0301 	orr.w	r3, r3, #1
   1a22a:	e7f5      	b.n	1a218 <hal_spi_config_slave+0x34>
            rc = EINVAL;
   1a22c:	2016      	movs	r0, #22
    return rc;
   1a22e:	e7f7      	b.n	1a220 <hal_spi_config_slave+0x3c>

0001a230 <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   1a230:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   1a232:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   1a234:	2501      	movs	r5, #1
   1a236:	409d      	lsls	r5, r3
   1a238:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1a23c:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   1a240:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a244:	2503      	movs	r5, #3
   1a246:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   1a24a:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   1a24c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a250:	2500      	movs	r5, #0
   1a252:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   1a256:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   1a258:	780c      	ldrb	r4, [r1, #0]
   1a25a:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   1a25e:	784c      	ldrb	r4, [r1, #1]
   1a260:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   1a264:	7889      	ldrb	r1, [r1, #2]
   1a266:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1a26a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a26e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   1a272:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a276:	4919      	ldr	r1, [pc, #100]	; (1a2dc <hal_spi_init_master+0xac>)
   1a278:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a27a:	3310      	adds	r3, #16
   1a27c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   1a280:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1a284:	42ab      	cmp	r3, r5
   1a286:	db22      	blt.n	1a2ce <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a288:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1a28c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   1a290:	22e0      	movs	r2, #224	; 0xe0
   1a292:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   1a296:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1a29a:	2b00      	cmp	r3, #0
   1a29c:	db08      	blt.n	1a2b0 <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a29e:	f003 011f 	and.w	r1, r3, #31
   1a2a2:	095b      	lsrs	r3, r3, #5
   1a2a4:	2201      	movs	r2, #1
   1a2a6:	408a      	lsls	r2, r1
   1a2a8:	3360      	adds	r3, #96	; 0x60
   1a2aa:	490d      	ldr	r1, [pc, #52]	; (1a2e0 <hal_spi_init_master+0xb0>)
   1a2ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   1a2b0:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1a2b4:	2b00      	cmp	r3, #0
   1a2b6:	db07      	blt.n	1a2c8 <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a2b8:	f003 011f 	and.w	r1, r3, #31
   1a2bc:	095b      	lsrs	r3, r3, #5
   1a2be:	2201      	movs	r2, #1
   1a2c0:	408a      	lsls	r2, r1
   1a2c2:	4907      	ldr	r1, [pc, #28]	; (1a2e0 <hal_spi_init_master+0xb0>)
   1a2c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   1a2c8:	2000      	movs	r0, #0
   1a2ca:	bc30      	pop	{r4, r5}
   1a2cc:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a2ce:	f003 030f 	and.w	r3, r3, #15
   1a2d2:	4a04      	ldr	r2, [pc, #16]	; (1a2e4 <hal_spi_init_master+0xb4>)
   1a2d4:	441a      	add	r2, r3
   1a2d6:	23e0      	movs	r3, #224	; 0xe0
   1a2d8:	7613      	strb	r3, [r2, #24]
   1a2da:	e7dc      	b.n	1a296 <hal_spi_init_master+0x66>
   1a2dc:	e000ed00 	.word	0xe000ed00
   1a2e0:	e000e100 	.word	0xe000e100
   1a2e4:	e000ecfc 	.word	0xe000ecfc

0001a2e8 <hal_spi_config_master>:
{
   1a2e8:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   1a2ea:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   1a2ec:	680c      	ldr	r4, [r1, #0]
   1a2ee:	684b      	ldr	r3, [r1, #4]
   1a2f0:	6084      	str	r4, [r0, #8]
   1a2f2:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   1a2f4:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   1a2f8:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   1a2fc:	7808      	ldrb	r0, [r1, #0]
   1a2fe:	2801      	cmp	r0, #1
   1a300:	d916      	bls.n	1a330 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   1a302:	2001      	movs	r0, #1
   1a304:	4098      	lsls	r0, r3
   1a306:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1a30a:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   1a30e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a312:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1a316:	2403      	movs	r4, #3
   1a318:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   1a31c:	788b      	ldrb	r3, [r1, #2]
   1a31e:	b973      	cbnz	r3, 1a33e <hal_spi_config_master+0x56>
    rc = 0;
   1a320:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   1a322:	780b      	ldrb	r3, [r1, #0]
   1a324:	2b03      	cmp	r3, #3
   1a326:	d812      	bhi.n	1a34e <hal_spi_config_master+0x66>
   1a328:	e8df f003 	tbb	[pc, r3]
   1a32c:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
   1a330:	2001      	movs	r0, #1
   1a332:	4098      	lsls	r0, r3
   1a334:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1a338:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   1a33c:	e7e7      	b.n	1a30e <hal_spi_config_master+0x26>
            rc = EINVAL;
   1a33e:	2016      	movs	r0, #22
   1a340:	e7ef      	b.n	1a322 <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1a342:	2300      	movs	r3, #0
   1a344:	e007      	b.n	1a356 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1a346:	2304      	movs	r3, #4
            break;
   1a348:	e005      	b.n	1a356 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1a34a:	2306      	movs	r3, #6
            break;
   1a34c:	e003      	b.n	1a356 <hal_spi_config_master+0x6e>
            nrf_config = 0;
   1a34e:	2300      	movs	r3, #0
            rc = EINVAL;
   1a350:	2016      	movs	r0, #22
            break;
   1a352:	e000      	b.n	1a356 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1a354:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1a356:	784c      	ldrb	r4, [r1, #1]
   1a358:	2c01      	cmp	r4, #1
   1a35a:	d010      	beq.n	1a37e <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   1a35c:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   1a360:	684b      	ldr	r3, [r1, #4]
   1a362:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1a366:	d023      	beq.n	1a3b0 <hal_spi_config_master+0xc8>
   1a368:	d80c      	bhi.n	1a384 <hal_spi_config_master+0x9c>
   1a36a:	2bfa      	cmp	r3, #250	; 0xfa
   1a36c:	d029      	beq.n	1a3c2 <hal_spi_config_master+0xda>
   1a36e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1a372:	d01a      	beq.n	1a3aa <hal_spi_config_master+0xc2>
   1a374:	2b7d      	cmp	r3, #125	; 0x7d
   1a376:	d011      	beq.n	1a39c <hal_spi_config_master+0xb4>
            frequency = 0;
   1a378:	2300      	movs	r3, #0
            rc = EINVAL;
   1a37a:	2016      	movs	r0, #22
            break;
   1a37c:	e010      	b.n	1a3a0 <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   1a37e:	f043 0301 	orr.w	r3, r3, #1
   1a382:	e7eb      	b.n	1a35c <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
   1a384:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   1a388:	d015      	beq.n	1a3b6 <hal_spi_config_master+0xce>
   1a38a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   1a38e:	d015      	beq.n	1a3bc <hal_spi_config_master+0xd4>
   1a390:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   1a394:	d1f0      	bne.n	1a378 <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   1a396:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
   1a39a:	e001      	b.n	1a3a0 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
   1a39c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   1a3a0:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   1a3a4:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a3a8:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   1a3aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
   1a3ae:	e7f7      	b.n	1a3a0 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   1a3b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
   1a3b4:	e7f4      	b.n	1a3a0 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   1a3b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
   1a3ba:	e7f1      	b.n	1a3a0 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   1a3bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
   1a3c0:	e7ee      	b.n	1a3a0 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   1a3c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1a3c6:	e7eb      	b.n	1a3a0 <hal_spi_config_master+0xb8>

0001a3c8 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a3c8:	2802      	cmp	r0, #2
   1a3ca:	dc10      	bgt.n	1a3ee <hal_spi_config+0x26>
{
   1a3cc:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a3ce:	4b0b      	ldr	r3, [pc, #44]	; (1a3fc <hal_spi_config+0x34>)
   1a3d0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a3d4:	b168      	cbz	r0, 1a3f2 <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1a3d6:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   1a3d8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   1a3dc:	b95b      	cbnz	r3, 1a3f6 <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1a3de:	7803      	ldrb	r3, [r0, #0]
   1a3e0:	b113      	cbz	r3, 1a3e8 <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
   1a3e2:	f7ff feff 	bl	1a1e4 <hal_spi_config_slave>
    }

err:
    return (rc);
}
   1a3e6:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
   1a3e8:	f7ff ff7e 	bl	1a2e8 <hal_spi_config_master>
   1a3ec:	e7fb      	b.n	1a3e6 <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a3ee:	2016      	movs	r0, #22
}
   1a3f0:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a3f2:	2016      	movs	r0, #22
   1a3f4:	e7f7      	b.n	1a3e6 <hal_spi_config+0x1e>
        return -1;
   1a3f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a3fa:	e7f4      	b.n	1a3e6 <hal_spi_config+0x1e>
   1a3fc:	00021c68 	.word	0x00021c68

0001a400 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a400:	2802      	cmp	r0, #2
   1a402:	dc1b      	bgt.n	1a43c <hal_spi_enable+0x3c>
   1a404:	4b10      	ldr	r3, [pc, #64]	; (1a448 <hal_spi_enable+0x48>)
   1a406:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1a40a:	b1cb      	cbz	r3, 1a440 <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1a40c:	781a      	ldrb	r2, [r3, #0]
   1a40e:	b17a      	cbz	r2, 1a430 <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
   1a410:	6a1a      	ldr	r2, [r3, #32]
   1a412:	b1ba      	cbz	r2, 1a444 <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
   1a414:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   1a416:	2000      	movs	r0, #0
   1a418:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   1a41c:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   1a420:	f240 4202 	movw	r2, #1026	; 0x402
   1a424:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   1a428:	2202      	movs	r2, #2
   1a42a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1a42e:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   1a430:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1a432:	2201      	movs	r2, #1
   1a434:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
   1a438:	2000      	movs	r0, #0
   1a43a:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a43c:	2016      	movs	r0, #22
   1a43e:	4770      	bx	lr
   1a440:	2016      	movs	r0, #22
   1a442:	4770      	bx	lr
            rc = EINVAL;
   1a444:	2016      	movs	r0, #22

err:
    return rc;
}
   1a446:	4770      	bx	lr
   1a448:	00021c68 	.word	0x00021c68

0001a44c <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a44c:	2802      	cmp	r0, #2
   1a44e:	dc2a      	bgt.n	1a4a6 <hal_spi_disable+0x5a>
{
   1a450:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a452:	4b17      	ldr	r3, [pc, #92]	; (1a4b0 <hal_spi_disable+0x64>)
   1a454:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1a458:	b33c      	cbz	r4, 1a4aa <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1a45a:	7823      	ldrb	r3, [r4, #0]
   1a45c:	b9ab      	cbnz	r3, 1a48a <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   1a45e:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1a460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a464:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   1a468:	7863      	ldrb	r3, [r4, #1]
   1a46a:	b943      	cbnz	r3, 1a47e <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   1a46c:	2300      	movs	r3, #0
   1a46e:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   1a472:	2000      	movs	r0, #0
   1a474:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   1a476:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   1a478:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   1a47a:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   1a47c:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   1a47e:	4628      	mov	r0, r5
   1a480:	f7ff fea6 	bl	1a1d0 <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   1a484:	2300      	movs	r3, #0
   1a486:	7063      	strb	r3, [r4, #1]
   1a488:	e7f0      	b.n	1a46c <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   1a48a:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1a48c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a490:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   1a494:	2300      	movs	r3, #0
   1a496:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   1a49a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   1a49e:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   1a4a2:	70e3      	strb	r3, [r4, #3]
   1a4a4:	e7e5      	b.n	1a472 <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a4a6:	2016      	movs	r0, #22
}
   1a4a8:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a4aa:	2016      	movs	r0, #22
    return rc;
   1a4ac:	e7e6      	b.n	1a47c <hal_spi_disable+0x30>
   1a4ae:	bf00      	nop
   1a4b0:	00021c68 	.word	0x00021c68

0001a4b4 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a4b4:	2802      	cmp	r0, #2
   1a4b6:	dc1d      	bgt.n	1a4f4 <hal_spi_init+0x40>
{
   1a4b8:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a4ba:	4b13      	ldr	r3, [pc, #76]	; (1a508 <hal_spi_init+0x54>)
   1a4bc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1a4c0:	b1d4      	cbz	r4, 1a4f8 <hal_spi_init+0x44>
    if (cfg == NULL) {
   1a4c2:	b1d9      	cbz	r1, 1a4fc <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   1a4c4:	2a01      	cmp	r2, #1
   1a4c6:	d81b      	bhi.n	1a500 <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
   1a4c8:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
   1a4ca:	b9d8      	cbnz	r0, 1a504 <hal_spi_init+0x50>
   1a4cc:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   1a4ce:	2303      	movs	r3, #3
   1a4d0:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   1a4d2:	b94a      	cbnz	r2, 1a4e8 <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   1a4d4:	4b0d      	ldr	r3, [pc, #52]	; (1a50c <hal_spi_init+0x58>)
   1a4d6:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
   1a4d8:	f7ff ffb8 	bl	1a44c <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   1a4dc:	4a0c      	ldr	r2, [pc, #48]	; (1a510 <hal_spi_init+0x5c>)
   1a4de:	4629      	mov	r1, r5
   1a4e0:	4620      	mov	r0, r4
   1a4e2:	f7ff fea5 	bl	1a230 <hal_spi_init_master>
   1a4e6:	e00c      	b.n	1a502 <hal_spi_init+0x4e>
            assert(0);
   1a4e8:	2300      	movs	r3, #0
   1a4ea:	461a      	mov	r2, r3
   1a4ec:	4619      	mov	r1, r3
   1a4ee:	4618      	mov	r0, r3
   1a4f0:	f000 f952 	bl	1a798 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a4f4:	2016      	movs	r0, #22
}
   1a4f6:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a4f8:	2016      	movs	r0, #22
   1a4fa:	e002      	b.n	1a502 <hal_spi_init+0x4e>
    rc = EINVAL;
   1a4fc:	2016      	movs	r0, #22
   1a4fe:	e000      	b.n	1a502 <hal_spi_init+0x4e>
   1a500:	2016      	movs	r0, #22
}
   1a502:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
   1a504:	2016      	movs	r0, #22
    return (rc);
   1a506:	e7fc      	b.n	1a502 <hal_spi_init+0x4e>
   1a508:	00021c68 	.word	0x00021c68
   1a50c:	40003000 	.word	0x40003000
   1a510:	0001a1b9 	.word	0x0001a1b9

0001a514 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a514:	2802      	cmp	r0, #2
   1a516:	dc0a      	bgt.n	1a52e <hal_spi_set_txrx_cb+0x1a>
   1a518:	4b08      	ldr	r3, [pc, #32]	; (1a53c <hal_spi_set_txrx_cb+0x28>)
   1a51a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1a51e:	b143      	cbz	r3, 1a532 <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1a520:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   1a522:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   1a526:	b930      	cbnz	r0, 1a536 <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   1a528:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   1a52a:	625a      	str	r2, [r3, #36]	; 0x24
   1a52c:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a52e:	2016      	movs	r0, #22
   1a530:	4770      	bx	lr
   1a532:	2016      	movs	r0, #22
   1a534:	4770      	bx	lr
        rc = -1;
   1a536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
   1a53a:	4770      	bx	lr
   1a53c:	00021c68 	.word	0x00021c68

0001a540 <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   1a540:	2b00      	cmp	r3, #0
   1a542:	d046      	beq.n	1a5d2 <hal_spi_txrx+0x92>
{
   1a544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a546:	460d      	mov	r5, r1
   1a548:	4617      	mov	r7, r2
   1a54a:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   1a54c:	2802      	cmp	r0, #2
   1a54e:	dc42      	bgt.n	1a5d6 <hal_spi_txrx+0x96>
   1a550:	4b25      	ldr	r3, [pc, #148]	; (1a5e8 <hal_spi_txrx+0xa8>)
   1a552:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1a556:	2b00      	cmp	r3, #0
   1a558:	d03f      	beq.n	1a5da <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1a55a:	781a      	ldrb	r2, [r3, #0]
   1a55c:	2a00      	cmp	r2, #0
   1a55e:	d13e      	bne.n	1a5de <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   1a560:	2900      	cmp	r1, #0
   1a562:	d03e      	beq.n	1a5e2 <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   1a564:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   1a566:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   1a56a:	2b07      	cmp	r3, #7
   1a56c:	d004      	beq.n	1a578 <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   1a56e:	b95b      	cbnz	r3, 1a588 <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1a570:	2301      	movs	r3, #1
   1a572:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   1a576:	e007      	b.n	1a588 <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   1a578:	f7ff ff68 	bl	1a44c <hal_spi_disable>
   1a57c:	e7f8      	b.n	1a570 <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   1a57e:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   1a582:	2300      	movs	r3, #0
   1a584:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   1a588:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a58c:	2b00      	cmp	r3, #0
   1a58e:	d1f6      	bne.n	1a57e <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   1a590:	782b      	ldrb	r3, [r5, #0]
   1a592:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   1a596:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
   1a598:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
   1a59a:	2200      	movs	r2, #0
   1a59c:	e00d      	b.n	1a5ba <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   1a59e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a5a2:	2b00      	cmp	r3, #0
   1a5a4:	d0fb      	beq.n	1a59e <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   1a5a6:	2300      	movs	r3, #0
   1a5a8:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   1a5ac:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   1a5b0:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   1a5b2:	b10f      	cbz	r7, 1a5b8 <hal_spi_txrx+0x78>
                *rxd = rxval;
   1a5b4:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
   1a5b8:	3201      	adds	r2, #1
   1a5ba:	42b2      	cmp	r2, r6
   1a5bc:	da07      	bge.n	1a5ce <hal_spi_txrx+0x8e>
            if (txcnt) {
   1a5be:	2900      	cmp	r1, #0
   1a5c0:	d0ed      	beq.n	1a59e <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   1a5c2:	786b      	ldrb	r3, [r5, #1]
   1a5c4:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   1a5c8:	3901      	subs	r1, #1
                ++txd;
   1a5ca:	3501      	adds	r5, #1
   1a5cc:	e7e7      	b.n	1a59e <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   1a5ce:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   1a5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   1a5d2:	2016      	movs	r0, #22
}
   1a5d4:	4770      	bx	lr
    return rc;
   1a5d6:	2016      	movs	r0, #22
   1a5d8:	e7fa      	b.n	1a5d0 <hal_spi_txrx+0x90>
   1a5da:	2016      	movs	r0, #22
   1a5dc:	e7f8      	b.n	1a5d0 <hal_spi_txrx+0x90>
   1a5de:	2016      	movs	r0, #22
   1a5e0:	e7f6      	b.n	1a5d0 <hal_spi_txrx+0x90>
   1a5e2:	2016      	movs	r0, #22
   1a5e4:	e7f4      	b.n	1a5d0 <hal_spi_txrx+0x90>
   1a5e6:	bf00      	nop
   1a5e8:	00021c68 	.word	0x00021c68

0001a5ec <hal_spi_txrx_noblock>:
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a5ec:	2802      	cmp	r0, #2
   1a5ee:	dc57      	bgt.n	1a6a0 <hal_spi_txrx_noblock+0xb4>
{
   1a5f0:	b430      	push	{r4, r5}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a5f2:	4c35      	ldr	r4, [pc, #212]	; (1a6c8 <hal_spi_txrx_noblock+0xdc>)
   1a5f4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   1a5f8:	2800      	cmp	r0, #0
   1a5fa:	d053      	beq.n	1a6a4 <hal_spi_txrx_noblock+0xb8>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   1a5fc:	6a04      	ldr	r4, [r0, #32]
   1a5fe:	2c00      	cmp	r4, #0
   1a600:	d052      	beq.n	1a6a8 <hal_spi_txrx_noblock+0xbc>
   1a602:	2b00      	cmp	r3, #0
   1a604:	d052      	beq.n	1a6ac <hal_spi_txrx_noblock+0xc0>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1a606:	7804      	ldrb	r4, [r0, #0]
   1a608:	2c00      	cmp	r4, #0
   1a60a:	d137      	bne.n	1a67c <hal_spi_txrx_noblock+0x90>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   1a60c:	2900      	cmp	r1, #0
   1a60e:	d050      	beq.n	1a6b2 <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
   1a610:	7844      	ldrb	r4, [r0, #1]
   1a612:	2c00      	cmp	r4, #0
   1a614:	d14f      	bne.n	1a6b6 <hal_spi_txrx_noblock+0xca>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
   1a616:	6904      	ldr	r4, [r0, #16]
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   1a618:	2540      	movs	r5, #64	; 0x40
   1a61a:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   1a61e:	2501      	movs	r5, #1
   1a620:	7045      	strb	r5, [r0, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   1a622:	f8d4 5500 	ldr.w	r5, [r4, #1280]	; 0x500
   1a626:	2d07      	cmp	r5, #7
   1a628:	d005      	beq.n	1a636 <hal_spi_txrx_noblock+0x4a>
            spim->ENABLE = 0;
   1a62a:	2500      	movs	r5, #0
   1a62c:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   1a630:	2507      	movs	r5, #7
   1a632:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
   1a636:	2500      	movs	r5, #0
   1a638:	80c5      	strh	r5, [r0, #6]
        spi->nhs_buflen = len;
   1a63a:	8083      	strh	r3, [r0, #4]
        spi->nhs_txbuf = txbuf;
   1a63c:	6181      	str	r1, [r0, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
   1a63e:	2bff      	cmp	r3, #255	; 0xff
   1a640:	bfa8      	it	ge
   1a642:	23ff      	movge	r3, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
   1a644:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   1a648:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
   1a64c:	61c2      	str	r2, [r0, #28]
        if (rxbuf == NULL) {
   1a64e:	b172      	cbz	r2, 1a66e <hal_spi_txrx_noblock+0x82>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
   1a650:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   1a654:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
   1a658:	2000      	movs	r0, #0
   1a65a:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   1a65e:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        spim->TASKS_START = 1;
   1a662:	2301      	movs	r3, #1
   1a664:	6123      	str	r3, [r4, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   1a666:	2340      	movs	r3, #64	; 0x40
   1a668:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1a66c:	e01f      	b.n	1a6ae <hal_spi_txrx_noblock+0xc2>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   1a66e:	3002      	adds	r0, #2
   1a670:	f8c4 0534 	str.w	r0, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   1a674:	2301      	movs	r3, #1
   1a676:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
   1a67a:	e7ed      	b.n	1a658 <hal_spi_txrx_noblock+0x6c>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   1a67c:	b161      	cbz	r1, 1a698 <hal_spi_txrx_noblock+0xac>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
   1a67e:	2bff      	cmp	r3, #255	; 0xff
   1a680:	dc1c      	bgt.n	1a6bc <hal_spi_txrx_noblock+0xd0>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   1a682:	78c4      	ldrb	r4, [r0, #3]
   1a684:	b9e4      	cbnz	r4, 1a6c0 <hal_spi_txrx_noblock+0xd4>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
   1a686:	61c2      	str	r2, [r0, #28]
        spi->nhs_txbuf = txbuf;
   1a688:	6181      	str	r1, [r0, #24]
        spi->nhs_buflen = len;
   1a68a:	8083      	strh	r3, [r0, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   1a68c:	2301      	movs	r3, #1
   1a68e:	70c3      	strb	r3, [r0, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   1a690:	6902      	ldr	r2, [r0, #16]
   1a692:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
   1a694:	2000      	movs	r0, #0
   1a696:	e00a      	b.n	1a6ae <hal_spi_txrx_noblock+0xc2>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   1a698:	2a00      	cmp	r2, #0
   1a69a:	d1f0      	bne.n	1a67e <hal_spi_txrx_noblock+0x92>
    rc = EINVAL;
   1a69c:	2016      	movs	r0, #22
   1a69e:	e006      	b.n	1a6ae <hal_spi_txrx_noblock+0xc2>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a6a0:	2016      	movs	r0, #22

err:
    return rc;
}
   1a6a2:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a6a4:	2016      	movs	r0, #22
   1a6a6:	e002      	b.n	1a6ae <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   1a6a8:	2016      	movs	r0, #22
   1a6aa:	e000      	b.n	1a6ae <hal_spi_txrx_noblock+0xc2>
   1a6ac:	2016      	movs	r0, #22
}
   1a6ae:	bc30      	pop	{r4, r5}
   1a6b0:	4770      	bx	lr
    rc = EINVAL;
   1a6b2:	2016      	movs	r0, #22
   1a6b4:	e7fb      	b.n	1a6ae <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   1a6b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a6ba:	e7f8      	b.n	1a6ae <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   1a6bc:	2016      	movs	r0, #22
   1a6be:	e7f6      	b.n	1a6ae <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   1a6c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a6c4:	e7f3      	b.n	1a6ae <hal_spi_txrx_noblock+0xc2>
   1a6c6:	bf00      	nop
   1a6c8:	00021c68 	.word	0x00021c68

0001a6cc <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   1a6cc:	b508      	push	{r3, lr}
    assert(0);
   1a6ce:	2300      	movs	r3, #0
   1a6d0:	461a      	mov	r2, r3
   1a6d2:	4619      	mov	r1, r3
   1a6d4:	4618      	mov	r0, r3
   1a6d6:	f000 f85f 	bl	1a798 <__assert_func>
	...

0001a6dc <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   1a6dc:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   1a6de:	4b06      	ldr	r3, [pc, #24]	; (1a6f8 <nrf52_wdt_irq_handler+0x1c>)
   1a6e0:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   1a6e4:	f013 0f01 	tst.w	r3, #1
   1a6e8:	d100      	bne.n	1a6ec <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   1a6ea:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   1a6ec:	4b02      	ldr	r3, [pc, #8]	; (1a6f8 <nrf52_wdt_irq_handler+0x1c>)
   1a6ee:	2200      	movs	r2, #0
   1a6f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   1a6f4:	f7ff ffea 	bl	1a6cc <nrf52_hal_wdt_default_handler>
   1a6f8:	40010000 	.word	0x40010000

0001a6fc <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   1a6fc:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   1a6fe:	4b17      	ldr	r3, [pc, #92]	; (1a75c <hal_watchdog_init+0x60>)
   1a700:	2201      	movs	r2, #1
   1a702:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   1a706:	4b16      	ldr	r3, [pc, #88]	; (1a760 <hal_watchdog_init+0x64>)
   1a708:	4298      	cmp	r0, r3
   1a70a:	d821      	bhi.n	1a750 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   1a70c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   1a710:	0153      	lsls	r3, r2, #5
   1a712:	4a14      	ldr	r2, [pc, #80]	; (1a764 <hal_watchdog_init+0x68>)
   1a714:	fba2 2303 	umull	r2, r3, r2, r3
   1a718:	08db      	lsrs	r3, r3, #3
   1a71a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1a71e:	4b0f      	ldr	r3, [pc, #60]	; (1a75c <hal_watchdog_init+0x60>)
   1a720:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a724:	4a10      	ldr	r2, [pc, #64]	; (1a768 <hal_watchdog_init+0x6c>)
   1a726:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a728:	4910      	ldr	r1, [pc, #64]	; (1a76c <hal_watchdog_init+0x70>)
   1a72a:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a72e:	4a10      	ldr	r2, [pc, #64]	; (1a770 <hal_watchdog_init+0x74>)
   1a730:	21e0      	movs	r1, #224	; 0xe0
   1a732:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a736:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1a73a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a73e:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   1a740:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   1a744:	f042 0201 	orr.w	r2, r2, #1
   1a748:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   1a74c:	2000      	movs	r0, #0
   1a74e:	bd08      	pop	{r3, pc}
        assert(0);
   1a750:	2300      	movs	r3, #0
   1a752:	461a      	mov	r2, r3
   1a754:	4619      	mov	r1, r3
   1a756:	4618      	mov	r0, r3
   1a758:	f000 f81e 	bl	1a798 <__assert_func>
   1a75c:	40010000 	.word	0x40010000
   1a760:	02aaaaaa 	.word	0x02aaaaaa
   1a764:	10624dd3 	.word	0x10624dd3
   1a768:	e000ed00 	.word	0xe000ed00
   1a76c:	0001a6dd 	.word	0x0001a6dd
   1a770:	e000e100 	.word	0xe000e100

0001a774 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   1a774:	4b02      	ldr	r3, [pc, #8]	; (1a780 <hal_watchdog_enable+0xc>)
   1a776:	2201      	movs	r2, #1
   1a778:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   1a77c:	601a      	str	r2, [r3, #0]
}
   1a77e:	4770      	bx	lr
   1a780:	40010000 	.word	0x40010000

0001a784 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   1a784:	4b02      	ldr	r3, [pc, #8]	; (1a790 <hal_watchdog_tickle+0xc>)
   1a786:	4a03      	ldr	r2, [pc, #12]	; (1a794 <hal_watchdog_tickle+0x10>)
   1a788:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   1a78c:	4770      	bx	lr
   1a78e:	bf00      	nop
   1a790:	40010000 	.word	0x40010000
   1a794:	6e524635 	.word	0x6e524635

0001a798 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   1a798:	b508      	push	{r3, lr}
   1a79a:	4675      	mov	r5, lr
   1a79c:	4604      	mov	r4, r0
   1a79e:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   1a7a0:	f001 fa90 	bl	1bcc4 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   1a7a4:	f7ff f905 	bl	199b2 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   1a7a8:	b18c      	cbz	r4, 1a7ce <__assert_func+0x36>
   1a7aa:	4633      	mov	r3, r6
   1a7ac:	4622      	mov	r2, r4
   1a7ae:	4629      	mov	r1, r5
   1a7b0:	4809      	ldr	r0, [pc, #36]	; (1a7d8 <__assert_func+0x40>)
   1a7b2:	f7ff f929 	bl	19a08 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
   1a7b6:	f7ed fce5 	bl	8184 <hal_debugger_connected>
   1a7ba:	b100      	cbz	r0, 1a7be <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
   1a7bc:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   1a7be:	4b07      	ldr	r3, [pc, #28]	; (1a7dc <__assert_func+0x44>)
   1a7c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1a7c4:	605a      	str	r2, [r3, #4]
    asm("isb");
   1a7c6:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   1a7ca:	f7ed fce3 	bl	8194 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   1a7ce:	4629      	mov	r1, r5
   1a7d0:	4803      	ldr	r0, [pc, #12]	; (1a7e0 <__assert_func+0x48>)
   1a7d2:	f7ff f919 	bl	19a08 <console_printf>
   1a7d6:	e7ee      	b.n	1a7b6 <__assert_func+0x1e>
   1a7d8:	00021c84 	.word	0x00021c84
   1a7dc:	e000ed00 	.word	0xe000ed00
   1a7e0:	00021c74 	.word	0x00021c74

0001a7e4 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   1a7e4:	b500      	push	{lr}
   1a7e6:	b083      	sub	sp, #12
   1a7e8:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   1a7ea:	f7ff f8e2 	bl	199b2 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   1a7ee:	4d1b      	ldr	r5, [pc, #108]	; (1a85c <os_default_irq+0x78>)
   1a7f0:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   1a7f2:	6822      	ldr	r2, [r4, #0]
   1a7f4:	f3c1 0108 	ubfx	r1, r1, #0, #9
   1a7f8:	4819      	ldr	r0, [pc, #100]	; (1a860 <os_default_irq+0x7c>)
   1a7fa:	f7ff f905 	bl	19a08 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   1a7fe:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   1a800:	6883      	ldr	r3, [r0, #8]
   1a802:	6842      	ldr	r2, [r0, #4]
   1a804:	6801      	ldr	r1, [r0, #0]
   1a806:	68c0      	ldr	r0, [r0, #12]
   1a808:	9000      	str	r0, [sp, #0]
   1a80a:	4816      	ldr	r0, [pc, #88]	; (1a864 <os_default_irq+0x80>)
   1a80c:	f7ff f8fc 	bl	19a08 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   1a810:	6923      	ldr	r3, [r4, #16]
   1a812:	9300      	str	r3, [sp, #0]
   1a814:	68e3      	ldr	r3, [r4, #12]
   1a816:	68a2      	ldr	r2, [r4, #8]
   1a818:	6861      	ldr	r1, [r4, #4]
   1a81a:	4813      	ldr	r0, [pc, #76]	; (1a868 <os_default_irq+0x84>)
   1a81c:	f7ff f8f4 	bl	19a08 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   1a820:	6a23      	ldr	r3, [r4, #32]
   1a822:	9300      	str	r3, [sp, #0]
   1a824:	69e3      	ldr	r3, [r4, #28]
   1a826:	69a2      	ldr	r2, [r4, #24]
   1a828:	6961      	ldr	r1, [r4, #20]
   1a82a:	4810      	ldr	r0, [pc, #64]	; (1a86c <os_default_irq+0x88>)
   1a82c:	f7ff f8ec 	bl	19a08 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   1a830:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   1a832:	6983      	ldr	r3, [r0, #24]
   1a834:	6942      	ldr	r2, [r0, #20]
   1a836:	6901      	ldr	r1, [r0, #16]
   1a838:	69c0      	ldr	r0, [r0, #28]
   1a83a:	9000      	str	r0, [sp, #0]
   1a83c:	480c      	ldr	r0, [pc, #48]	; (1a870 <os_default_irq+0x8c>)
   1a83e:	f7ff f8e3 	bl	19a08 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   1a842:	6869      	ldr	r1, [r5, #4]
   1a844:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   1a846:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1a848:	480a      	ldr	r0, [pc, #40]	; (1a874 <os_default_irq+0x90>)
   1a84a:	f7ff f8dd 	bl	19a08 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   1a84e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   1a850:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   1a852:	4809      	ldr	r0, [pc, #36]	; (1a878 <os_default_irq+0x94>)
   1a854:	f7ff f8d8 	bl	19a08 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   1a858:	f7ed fc9c 	bl	8194 <hal_system_reset>
   1a85c:	e000ed00 	.word	0xe000ed00
   1a860:	00021c9c 	.word	0x00021c9c
   1a864:	00021cd0 	.word	0x00021cd0
   1a868:	00021d04 	.word	0x00021d04
   1a86c:	00021d38 	.word	0x00021d38
   1a870:	00021d6c 	.word	0x00021d6c
   1a874:	00021da0 	.word	0x00021da0
   1a878:	00021dc8 	.word	0x00021dc8

0001a87c <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   1a87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
   1a87e:	f7ff ff81 	bl	1a784 <hal_watchdog_tickle>
    sanity_last = 0;
   1a882:	2500      	movs	r5, #0
   1a884:	e00b      	b.n	1a89e <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   1a886:	f000 fec7 	bl	1b618 <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   1a88a:	f7ff ff7b 	bl	1a784 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
   1a88e:	4625      	mov	r5, r4
   1a890:	e011      	b.n	1a8b6 <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   1a892:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   1a894:	f002 f842 	bl	1c91c <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   1a898:	4638      	mov	r0, r7
   1a89a:	f001 fa19 	bl	1bcd0 <os_arch_restore_sr>
        ++g_os_idle_ctr;
   1a89e:	4a14      	ldr	r2, [pc, #80]	; (1a8f0 <os_idle_task+0x74>)
   1a8a0:	6813      	ldr	r3, [r2, #0]
   1a8a2:	3301      	adds	r3, #1
   1a8a4:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   1a8a6:	f001 f995 	bl	1bbd4 <os_time_get>
   1a8aa:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
   1a8ac:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   1a8b0:	1ac3      	subs	r3, r0, r3
   1a8b2:	2b00      	cmp	r3, #0
   1a8b4:	dce7      	bgt.n	1a886 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   1a8b6:	f001 fa05 	bl	1bcc4 <os_arch_save_sr>
   1a8ba:	4607      	mov	r7, r0
        now = os_time_get();
   1a8bc:	f001 f98a 	bl	1bbd4 <os_time_get>
   1a8c0:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
   1a8c2:	f000 ffd7 	bl	1b874 <os_sched_wakeup_ticks>
   1a8c6:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   1a8c8:	4630      	mov	r0, r6
   1a8ca:	f000 f975 	bl	1abb8 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   1a8ce:	42a0      	cmp	r0, r4
   1a8d0:	bf28      	it	cs
   1a8d2:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
   1a8d4:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   1a8d8:	1b9b      	subs	r3, r3, r6
   1a8da:	4298      	cmp	r0, r3
   1a8dc:	bf28      	it	cs
   1a8de:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
   1a8e0:	280b      	cmp	r0, #11
   1a8e2:	d9d6      	bls.n	1a892 <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
   1a8e4:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   1a8e8:	d9d4      	bls.n	1a894 <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
   1a8ea:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   1a8ee:	e7d1      	b.n	1a894 <os_idle_task+0x18>
   1a8f0:	2000de8c 	.word	0x2000de8c

0001a8f4 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   1a8f4:	b508      	push	{r3, lr}
   1a8f6:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   1a8f8:	2100      	movs	r1, #0
   1a8fa:	4608      	mov	r0, r1
   1a8fc:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   1a8fe:	2300      	movs	r3, #0
   1a900:	461a      	mov	r2, r3
   1a902:	4619      	mov	r1, r3
   1a904:	4618      	mov	r0, r3
   1a906:	f7ff ff47 	bl	1a798 <__assert_func>
	...

0001a90c <os_started>:
}
   1a90c:	4b01      	ldr	r3, [pc, #4]	; (1a914 <os_started+0x8>)
   1a90e:	6818      	ldr	r0, [r3, #0]
   1a910:	4770      	bx	lr
   1a912:	bf00      	nop
   1a914:	2000de88 	.word	0x2000de88

0001a918 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   1a918:	b500      	push	{lr}
   1a91a:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   1a91c:	2340      	movs	r3, #64	; 0x40
   1a91e:	9303      	str	r3, [sp, #12]
   1a920:	4b15      	ldr	r3, [pc, #84]	; (1a978 <os_init_idle_task+0x60>)
   1a922:	9302      	str	r3, [sp, #8]
   1a924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a928:	9301      	str	r3, [sp, #4]
   1a92a:	23ff      	movs	r3, #255	; 0xff
   1a92c:	9300      	str	r3, [sp, #0]
   1a92e:	2300      	movs	r3, #0
   1a930:	4a12      	ldr	r2, [pc, #72]	; (1a97c <os_init_idle_task+0x64>)
   1a932:	4913      	ldr	r1, [pc, #76]	; (1a980 <os_init_idle_task+0x68>)
   1a934:	4813      	ldr	r0, [pc, #76]	; (1a984 <os_init_idle_task+0x6c>)
   1a936:	f001 f88d 	bl	1ba54 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   1a93a:	b950      	cbnz	r0, 1a952 <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   1a93c:	f000 fea2 	bl	1b684 <os_sanity_init>
    assert(rc == 0);
   1a940:	b968      	cbnz	r0, 1a95e <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   1a942:	f247 5030 	movw	r0, #30000	; 0x7530
   1a946:	f7ff fed9 	bl	1a6fc <hal_watchdog_init>
    assert(rc == 0);
   1a94a:	b970      	cbnz	r0, 1a96a <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
   1a94c:	b005      	add	sp, #20
   1a94e:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   1a952:	2300      	movs	r3, #0
   1a954:	461a      	mov	r2, r3
   1a956:	4619      	mov	r1, r3
   1a958:	4618      	mov	r0, r3
   1a95a:	f7ff ff1d 	bl	1a798 <__assert_func>
    assert(rc == 0);
   1a95e:	2300      	movs	r3, #0
   1a960:	461a      	mov	r2, r3
   1a962:	4619      	mov	r1, r3
   1a964:	4618      	mov	r0, r3
   1a966:	f7ff ff17 	bl	1a798 <__assert_func>
    assert(rc == 0);
   1a96a:	2300      	movs	r3, #0
   1a96c:	461a      	mov	r2, r3
   1a96e:	4619      	mov	r1, r3
   1a970:	4618      	mov	r0, r3
   1a972:	f7ff ff11 	bl	1a798 <__assert_func>
   1a976:	bf00      	nop
   1a978:	20006f70 	.word	0x20006f70
   1a97c:	0001a87d 	.word	0x0001a87d
   1a980:	00021dec 	.word	0x00021dec
   1a984:	2000dde8 	.word	0x2000dde8

0001a988 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   1a988:	b510      	push	{r4, lr}
   1a98a:	b084      	sub	sp, #16
   1a98c:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   1a98e:	4b24      	ldr	r3, [pc, #144]	; (1aa20 <os_init+0x98>)
   1a990:	2200      	movs	r2, #0
   1a992:	601a      	str	r2, [r3, #0]
   1a994:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   1a996:	4b23      	ldr	r3, [pc, #140]	; (1aa24 <os_init+0x9c>)
   1a998:	601a      	str	r2, [r3, #0]
   1a99a:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   1a99c:	f000 faba 	bl	1af14 <os_eventq_dflt_get>
   1a9a0:	f000 fa0e 	bl	1adc0 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   1a9a4:	f000 fa04 	bl	1adb0 <os_dev_reset>

    err = os_arch_os_init();
   1a9a8:	f001 f9c6 	bl	1bd38 <os_arch_os_init>
    assert(err == OS_OK);
   1a9ac:	bb00      	cbnz	r0, 1a9f0 <os_init+0x68>

    if (main_fn) {
   1a9ae:	b18c      	cbz	r4, 1a9d4 <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   1a9b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   1a9b4:	9303      	str	r3, [sp, #12]
   1a9b6:	4b1c      	ldr	r3, [pc, #112]	; (1aa28 <os_init+0xa0>)
   1a9b8:	9302      	str	r3, [sp, #8]
   1a9ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a9be:	9301      	str	r3, [sp, #4]
   1a9c0:	237f      	movs	r3, #127	; 0x7f
   1a9c2:	9300      	str	r3, [sp, #0]
   1a9c4:	4623      	mov	r3, r4
   1a9c6:	4a19      	ldr	r2, [pc, #100]	; (1aa2c <os_init+0xa4>)
   1a9c8:	4919      	ldr	r1, [pc, #100]	; (1aa30 <os_init+0xa8>)
   1a9ca:	481a      	ldr	r0, [pc, #104]	; (1aa34 <os_init+0xac>)
   1a9cc:	f001 f842 	bl	1ba54 <os_task_init>
   1a9d0:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   1a9d2:	b998      	cbnz	r0, 1a9fc <os_init+0x74>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   1a9d4:	f001 fe72 	bl	1c6bc <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   1a9d8:	2001      	movs	r0, #1
   1a9da:	f000 f985 	bl	1ace8 <os_dev_initialize_all>
   1a9de:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1a9e0:	b990      	cbnz	r0, 1aa08 <os_init+0x80>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   1a9e2:	2002      	movs	r0, #2
   1a9e4:	f000 f980 	bl	1ace8 <os_dev_initialize_all>
   1a9e8:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1a9ea:	b998      	cbnz	r0, 1aa14 <os_init+0x8c>
}
   1a9ec:	b004      	add	sp, #16
   1a9ee:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   1a9f0:	2300      	movs	r3, #0
   1a9f2:	461a      	mov	r2, r3
   1a9f4:	4619      	mov	r1, r3
   1a9f6:	4618      	mov	r0, r3
   1a9f8:	f7ff fece 	bl	1a798 <__assert_func>
        assert(err == 0);
   1a9fc:	2300      	movs	r3, #0
   1a9fe:	461a      	mov	r2, r3
   1aa00:	4619      	mov	r1, r3
   1aa02:	4618      	mov	r0, r3
   1aa04:	f7ff fec8 	bl	1a798 <__assert_func>
    assert(err == OS_OK);
   1aa08:	2300      	movs	r3, #0
   1aa0a:	461a      	mov	r2, r3
   1aa0c:	4619      	mov	r1, r3
   1aa0e:	4618      	mov	r0, r3
   1aa10:	f7ff fec2 	bl	1a798 <__assert_func>
    assert(err == OS_OK);
   1aa14:	2300      	movs	r3, #0
   1aa16:	461a      	mov	r2, r3
   1aa18:	4619      	mov	r1, r3
   1aa1a:	4618      	mov	r0, r3
   1aa1c:	f7ff febc 	bl	1a798 <__assert_func>
   1aa20:	2000de90 	.word	0x2000de90
   1aa24:	2000deb8 	.word	0x2000deb8
   1aa28:	20007070 	.word	0x20007070
   1aa2c:	0001a8f5 	.word	0x0001a8f5
   1aa30:	00021de4 	.word	0x00021de4
   1aa34:	2000de38 	.word	0x2000de38

0001aa38 <os_start>:

void
os_start(void)
{
   1aa38:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   1aa3a:	f7ff fe9b 	bl	1a774 <hal_watchdog_enable>

    err = os_arch_os_start();
   1aa3e:	f001 f9db 	bl	1bdf8 <os_arch_os_start>
    assert(err == OS_OK);
   1aa42:	b900      	cbnz	r0, 1aa46 <os_start+0xe>
#else
    assert(0);
#endif
}
   1aa44:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   1aa46:	2300      	movs	r3, #0
   1aa48:	461a      	mov	r2, r3
   1aa4a:	4619      	mov	r1, r3
   1aa4c:	4618      	mov	r0, r3
   1aa4e:	f7ff fea3 	bl	1a798 <__assert_func>
	...

0001aa54 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   1aa54:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1aa56:	4b0c      	ldr	r3, [pc, #48]	; (1aa88 <os_pkg_init+0x34>)
   1aa58:	781b      	ldrb	r3, [r3, #0]
   1aa5a:	b14b      	cbz	r3, 1aa70 <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   1aa5c:	2003      	movs	r0, #3
   1aa5e:	f000 f943 	bl	1ace8 <os_dev_initialize_all>
   1aa62:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1aa64:	b948      	cbnz	r0, 1aa7a <os_pkg_init+0x26>

    os_mempool_module_init();
   1aa66:	f000 fc25 	bl	1b2b4 <os_mempool_module_init>
    os_msys_init();
   1aa6a:	f000 fcad 	bl	1b3c8 <os_msys_init>
}
   1aa6e:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1aa70:	461a      	mov	r2, r3
   1aa72:	4619      	mov	r1, r3
   1aa74:	4618      	mov	r0, r3
   1aa76:	f7ff fe8f 	bl	1a798 <__assert_func>
    assert(err == OS_OK);
   1aa7a:	2300      	movs	r3, #0
   1aa7c:	461a      	mov	r2, r3
   1aa7e:	4619      	mov	r1, r3
   1aa80:	4618      	mov	r0, r3
   1aa82:	f7ff fe89 	bl	1a798 <__assert_func>
   1aa86:	bf00      	nop
   1aa88:	2000ddbc 	.word	0x2000ddbc

0001aa8c <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   1aa8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aa8e:	4604      	mov	r4, r0
   1aa90:	460d      	mov	r5, r1
   1aa92:	4617      	mov	r7, r2
   1aa94:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   1aa96:	2220      	movs	r2, #32
   1aa98:	2100      	movs	r1, #0
   1aa9a:	f001 fa80 	bl	1bf9e <memset>
    c->c_ev.ev_cb = ev_cb;
   1aa9e:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   1aaa0:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   1aaa2:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   1aaa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001aaa8 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   1aaa8:	b538      	push	{r3, r4, r5, lr}
   1aaaa:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   1aaac:	f001 f90a 	bl	1bcc4 <os_arch_save_sr>
   1aab0:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   1aab2:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   1aab4:	b13b      	cbz	r3, 1aac6 <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   1aab6:	69a2      	ldr	r2, [r4, #24]
   1aab8:	b172      	cbz	r2, 1aad8 <os_callout_stop+0x30>
   1aaba:	61d3      	str	r3, [r2, #28]
   1aabc:	69e3      	ldr	r3, [r4, #28]
   1aabe:	69a2      	ldr	r2, [r4, #24]
   1aac0:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   1aac2:	2300      	movs	r3, #0
   1aac4:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   1aac6:	6920      	ldr	r0, [r4, #16]
   1aac8:	b110      	cbz	r0, 1aad0 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   1aaca:	4621      	mov	r1, r4
   1aacc:	f000 fa02 	bl	1aed4 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   1aad0:	4628      	mov	r0, r5
   1aad2:	f001 f8fd 	bl	1bcd0 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   1aad6:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   1aad8:	4a01      	ldr	r2, [pc, #4]	; (1aae0 <os_callout_stop+0x38>)
   1aada:	6053      	str	r3, [r2, #4]
   1aadc:	e7ee      	b.n	1aabc <os_callout_stop+0x14>
   1aade:	bf00      	nop
   1aae0:	2000de90 	.word	0x2000de90

0001aae4 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   1aae4:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   1aae6:	6903      	ldr	r3, [r0, #16]
   1aae8:	b1c3      	cbz	r3, 1ab1c <os_callout_reset+0x38>
   1aaea:	4605      	mov	r5, r0
   1aaec:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   1aaee:	2900      	cmp	r1, #0
   1aaf0:	db2f      	blt.n	1ab52 <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   1aaf2:	f001 f8e7 	bl	1bcc4 <os_arch_save_sr>
   1aaf6:	4606      	mov	r6, r0

    os_callout_stop(c);
   1aaf8:	4628      	mov	r0, r5
   1aafa:	f7ff ffd5 	bl	1aaa8 <os_callout_stop>

    if (ticks == 0) {
   1aafe:	b904      	cbnz	r4, 1ab02 <os_callout_reset+0x1e>
        ticks = 1;
   1ab00:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
   1ab02:	f001 f867 	bl	1bbd4 <os_time_get>
   1ab06:	4420      	add	r0, r4
   1ab08:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   1ab0a:	4b13      	ldr	r3, [pc, #76]	; (1ab58 <os_callout_reset+0x74>)
   1ab0c:	681b      	ldr	r3, [r3, #0]
   1ab0e:	b153      	cbz	r3, 1ab26 <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   1ab10:	695a      	ldr	r2, [r3, #20]
   1ab12:	1a82      	subs	r2, r0, r2
   1ab14:	2a00      	cmp	r2, #0
   1ab16:	db06      	blt.n	1ab26 <os_callout_reset+0x42>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   1ab18:	699b      	ldr	r3, [r3, #24]
   1ab1a:	e7f8      	b.n	1ab0e <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   1ab1c:	461a      	mov	r2, r3
   1ab1e:	4619      	mov	r1, r3
   1ab20:	4618      	mov	r0, r3
   1ab22:	f7ff fe39 	bl	1a798 <__assert_func>
            break;
        }
    }

    if (entry) {
   1ab26:	b15b      	cbz	r3, 1ab40 <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   1ab28:	69da      	ldr	r2, [r3, #28]
   1ab2a:	61ea      	str	r2, [r5, #28]
   1ab2c:	61ab      	str	r3, [r5, #24]
   1ab2e:	69da      	ldr	r2, [r3, #28]
   1ab30:	6015      	str	r5, [r2, #0]
   1ab32:	3518      	adds	r5, #24
   1ab34:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   1ab36:	4630      	mov	r0, r6
   1ab38:	f001 f8ca 	bl	1bcd0 <os_arch_restore_sr>

    ret = OS_OK;
   1ab3c:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   1ab3e:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   1ab40:	2300      	movs	r3, #0
   1ab42:	61ab      	str	r3, [r5, #24]
   1ab44:	4b04      	ldr	r3, [pc, #16]	; (1ab58 <os_callout_reset+0x74>)
   1ab46:	685a      	ldr	r2, [r3, #4]
   1ab48:	61ea      	str	r2, [r5, #28]
   1ab4a:	6015      	str	r5, [r2, #0]
   1ab4c:	3518      	adds	r5, #24
   1ab4e:	605d      	str	r5, [r3, #4]
   1ab50:	e7f1      	b.n	1ab36 <os_callout_reset+0x52>
        ret = OS_EINVAL;
   1ab52:	2002      	movs	r0, #2
    return ret;
   1ab54:	e7f3      	b.n	1ab3e <os_callout_reset+0x5a>
   1ab56:	bf00      	nop
   1ab58:	2000de90 	.word	0x2000de90

0001ab5c <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   1ab5c:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   1ab5e:	f001 f839 	bl	1bbd4 <os_time_get>
   1ab62:	4605      	mov	r5, r0
   1ab64:	e00f      	b.n	1ab86 <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   1ab66:	69e2      	ldr	r2, [r4, #28]
   1ab68:	4b12      	ldr	r3, [pc, #72]	; (1abb4 <os_callout_tick+0x58>)
   1ab6a:	605a      	str	r2, [r3, #4]
   1ab6c:	69e3      	ldr	r3, [r4, #28]
   1ab6e:	69a2      	ldr	r2, [r4, #24]
   1ab70:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   1ab72:	2300      	movs	r3, #0
   1ab74:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   1ab76:	f001 f8ab 	bl	1bcd0 <os_arch_restore_sr>

        if (c) {
   1ab7a:	b1d4      	cbz	r4, 1abb2 <os_callout_tick+0x56>
            if (c->c_evq) {
   1ab7c:	6920      	ldr	r0, [r4, #16]
   1ab7e:	b9a0      	cbnz	r0, 1abaa <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   1ab80:	6863      	ldr	r3, [r4, #4]
   1ab82:	4620      	mov	r0, r4
   1ab84:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
   1ab86:	f001 f89d 	bl	1bcc4 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   1ab8a:	4b0a      	ldr	r3, [pc, #40]	; (1abb4 <os_callout_tick+0x58>)
   1ab8c:	681c      	ldr	r4, [r3, #0]
        if (c) {
   1ab8e:	2c00      	cmp	r4, #0
   1ab90:	d0f1      	beq.n	1ab76 <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   1ab92:	6963      	ldr	r3, [r4, #20]
   1ab94:	1aeb      	subs	r3, r5, r3
   1ab96:	2b00      	cmp	r3, #0
   1ab98:	db05      	blt.n	1aba6 <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   1ab9a:	69a3      	ldr	r3, [r4, #24]
   1ab9c:	2b00      	cmp	r3, #0
   1ab9e:	d0e2      	beq.n	1ab66 <os_callout_tick+0xa>
   1aba0:	69e2      	ldr	r2, [r4, #28]
   1aba2:	61da      	str	r2, [r3, #28]
   1aba4:	e7e2      	b.n	1ab6c <os_callout_tick+0x10>
                c = NULL;
   1aba6:	2400      	movs	r4, #0
   1aba8:	e7e5      	b.n	1ab76 <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
   1abaa:	4621      	mov	r1, r4
   1abac:	f000 f915 	bl	1adda <os_eventq_put>
   1abb0:	e7e9      	b.n	1ab86 <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   1abb2:	bd38      	pop	{r3, r4, r5, pc}
   1abb4:	2000de90 	.word	0x2000de90

0001abb8 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   1abb8:	b510      	push	{r4, lr}
   1abba:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   1abbc:	f001 f88b 	bl	1bcd6 <os_arch_in_critical>
   1abc0:	b130      	cbz	r0, 1abd0 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   1abc2:	4b09      	ldr	r3, [pc, #36]	; (1abe8 <os_callout_wakeup_ticks+0x30>)
   1abc4:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   1abc6:	b15b      	cbz	r3, 1abe0 <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   1abc8:	6958      	ldr	r0, [r3, #20]
   1abca:	1b00      	subs	r0, r0, r4
   1abcc:	d406      	bmi.n	1abdc <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   1abce:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1abd0:	2300      	movs	r3, #0
   1abd2:	461a      	mov	r2, r3
   1abd4:	4619      	mov	r1, r3
   1abd6:	4618      	mov	r0, r3
   1abd8:	f7ff fdde 	bl	1a798 <__assert_func>
            rt = 0;     /* callout time is in the past */
   1abdc:	2000      	movs	r0, #0
   1abde:	e7f6      	b.n	1abce <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   1abe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1abe4:	e7f3      	b.n	1abce <os_callout_wakeup_ticks+0x16>
   1abe6:	bf00      	nop
   1abe8:	2000de90 	.word	0x2000de90

0001abec <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   1abec:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   1abee:	4601      	mov	r1, r0
   1abf0:	2000      	movs	r0, #0
   1abf2:	f002 f84d 	bl	1cc90 <hal_timer_config>
    return rc;
}
   1abf6:	bd08      	pop	{r3, pc}

0001abf8 <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
   1abf8:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   1abfa:	2000      	movs	r0, #0
   1abfc:	f002 f8c4 	bl	1cd88 <hal_timer_read>
    return cpu_time;
}
   1ac00:	bd08      	pop	{r3, pc}
	...

0001ac04 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   1ac04:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   1ac06:	4b15      	ldr	r3, [pc, #84]	; (1ac5c <os_dev_add+0x58>)
   1ac08:	681d      	ldr	r5, [r3, #0]
   1ac0a:	b115      	cbz	r5, 1ac12 <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   1ac0c:	462b      	mov	r3, r5
    prev_dev = NULL;
   1ac0e:	2400      	movs	r4, #0
   1ac10:	e008      	b.n	1ac24 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   1ac12:	4603      	mov	r3, r0
   1ac14:	f843 5f20 	str.w	r5, [r3, #32]!
   1ac18:	4a10      	ldr	r2, [pc, #64]	; (1ac5c <os_dev_add+0x58>)
   1ac1a:	6053      	str	r3, [r2, #4]
   1ac1c:	6010      	str	r0, [r2, #0]
        return (0);
   1ac1e:	e010      	b.n	1ac42 <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   1ac20:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   1ac22:	6a1b      	ldr	r3, [r3, #32]
   1ac24:	b143      	cbz	r3, 1ac38 <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
   1ac26:	7e01      	ldrb	r1, [r0, #24]
   1ac28:	7e1a      	ldrb	r2, [r3, #24]
   1ac2a:	4291      	cmp	r1, r2
   1ac2c:	d304      	bcc.n	1ac38 <os_dev_add+0x34>
   1ac2e:	d1f7      	bne.n	1ac20 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
   1ac30:	7e41      	ldrb	r1, [r0, #25]
   1ac32:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
   1ac34:	4291      	cmp	r1, r2
   1ac36:	d2f3      	bcs.n	1ac20 <os_dev_add+0x1c>
    }

    if (prev_dev) {
   1ac38:	b15c      	cbz	r4, 1ac52 <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   1ac3a:	6a23      	ldr	r3, [r4, #32]
   1ac3c:	6203      	str	r3, [r0, #32]
   1ac3e:	b11b      	cbz	r3, 1ac48 <os_dev_add+0x44>
   1ac40:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   1ac42:	2000      	movs	r0, #0
   1ac44:	bc30      	pop	{r4, r5}
   1ac46:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   1ac48:	f100 0320 	add.w	r3, r0, #32
   1ac4c:	4a03      	ldr	r2, [pc, #12]	; (1ac5c <os_dev_add+0x58>)
   1ac4e:	6053      	str	r3, [r2, #4]
   1ac50:	e7f6      	b.n	1ac40 <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   1ac52:	6205      	str	r5, [r0, #32]
   1ac54:	4b01      	ldr	r3, [pc, #4]	; (1ac5c <os_dev_add+0x58>)
   1ac56:	6018      	str	r0, [r3, #0]
   1ac58:	e7f3      	b.n	1ac42 <os_dev_add+0x3e>
   1ac5a:	bf00      	nop
   1ac5c:	20009070 	.word	0x20009070

0001ac60 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   1ac60:	b510      	push	{r4, lr}
   1ac62:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   1ac64:	6903      	ldr	r3, [r0, #16]
   1ac66:	6941      	ldr	r1, [r0, #20]
   1ac68:	4798      	blx	r3
    if (rc != 0) {
   1ac6a:	4603      	mov	r3, r0
   1ac6c:	b128      	cbz	r0, 1ac7a <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   1ac6e:	7ee2      	ldrb	r2, [r4, #27]
   1ac70:	f012 0f08 	tst.w	r2, #8
   1ac74:	d105      	bne.n	1ac82 <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   1ac76:	2300      	movs	r3, #0
   1ac78:	e003      	b.n	1ac82 <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   1ac7a:	7ee2      	ldrb	r2, [r4, #27]
   1ac7c:	f042 0201 	orr.w	r2, r2, #1
   1ac80:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
   1ac82:	4618      	mov	r0, r3
   1ac84:	bd10      	pop	{r4, pc}

0001ac86 <os_dev_init>:
    dev->od_name = name;
   1ac86:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   1ac88:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   1ac8a:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   1ac8c:	2300      	movs	r3, #0
   1ac8e:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
   1ac90:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
   1ac92:	9a00      	ldr	r2, [sp, #0]
   1ac94:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
   1ac96:	9a01      	ldr	r2, [sp, #4]
   1ac98:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   1ac9a:	6003      	str	r3, [r0, #0]
   1ac9c:	6043      	str	r3, [r0, #4]
   1ac9e:	6083      	str	r3, [r0, #8]
   1aca0:	60c3      	str	r3, [r0, #12]
}
   1aca2:	4618      	mov	r0, r3
   1aca4:	4770      	bx	lr
	...

0001aca8 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   1aca8:	b530      	push	{r4, r5, lr}
   1acaa:	b083      	sub	sp, #12
   1acac:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   1acae:	9c07      	ldr	r4, [sp, #28]
   1acb0:	9401      	str	r4, [sp, #4]
   1acb2:	9c06      	ldr	r4, [sp, #24]
   1acb4:	9400      	str	r4, [sp, #0]
   1acb6:	f7ff ffe6 	bl	1ac86 <os_dev_init>
    if (rc != 0) {
   1acba:	4603      	mov	r3, r0
   1acbc:	b110      	cbz	r0, 1acc4 <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   1acbe:	4618      	mov	r0, r3
   1acc0:	b003      	add	sp, #12
   1acc2:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   1acc4:	4628      	mov	r0, r5
   1acc6:	f7ff ff9d 	bl	1ac04 <os_dev_add>
    if (rc != 0) {
   1acca:	4603      	mov	r3, r0
   1accc:	2800      	cmp	r0, #0
   1acce:	d1f6      	bne.n	1acbe <os_dev_create+0x16>
    if (g_os_started) {
   1acd0:	4a04      	ldr	r2, [pc, #16]	; (1ace4 <os_dev_create+0x3c>)
   1acd2:	6812      	ldr	r2, [r2, #0]
   1acd4:	2a00      	cmp	r2, #0
   1acd6:	d0f2      	beq.n	1acbe <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
   1acd8:	4628      	mov	r0, r5
   1acda:	f7ff ffc1 	bl	1ac60 <os_dev_initialize>
   1acde:	4603      	mov	r3, r0
    return (rc);
   1ace0:	e7ed      	b.n	1acbe <os_dev_create+0x16>
   1ace2:	bf00      	nop
   1ace4:	2000de88 	.word	0x2000de88

0001ace8 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   1ace8:	b538      	push	{r3, r4, r5, lr}
   1acea:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1acec:	4b08      	ldr	r3, [pc, #32]	; (1ad10 <os_dev_initialize_all+0x28>)
   1acee:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   1acf0:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1acf2:	e000      	b.n	1acf6 <os_dev_initialize_all+0xe>
   1acf4:	6a24      	ldr	r4, [r4, #32]
   1acf6:	b144      	cbz	r4, 1ad0a <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   1acf8:	7e23      	ldrb	r3, [r4, #24]
   1acfa:	42ab      	cmp	r3, r5
   1acfc:	d1fa      	bne.n	1acf4 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   1acfe:	4620      	mov	r0, r4
   1ad00:	f7ff ffae 	bl	1ac60 <os_dev_initialize>
            if (rc) {
   1ad04:	4602      	mov	r2, r0
   1ad06:	2800      	cmp	r0, #0
   1ad08:	d0f4      	beq.n	1acf4 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   1ad0a:	4610      	mov	r0, r2
   1ad0c:	bd38      	pop	{r3, r4, r5, pc}
   1ad0e:	bf00      	nop
   1ad10:	20009070 	.word	0x20009070

0001ad14 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   1ad14:	b538      	push	{r3, r4, r5, lr}
   1ad16:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1ad18:	4b05      	ldr	r3, [pc, #20]	; (1ad30 <os_dev_lookup+0x1c>)
   1ad1a:	681c      	ldr	r4, [r3, #0]
   1ad1c:	b134      	cbz	r4, 1ad2c <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   1ad1e:	4629      	mov	r1, r5
   1ad20:	69e0      	ldr	r0, [r4, #28]
   1ad22:	f001 f958 	bl	1bfd6 <strcmp>
   1ad26:	b108      	cbz	r0, 1ad2c <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1ad28:	6a24      	ldr	r4, [r4, #32]
   1ad2a:	e7f7      	b.n	1ad1c <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   1ad2c:	4620      	mov	r0, r4
   1ad2e:	bd38      	pop	{r3, r4, r5, pc}
   1ad30:	20009070 	.word	0x20009070

0001ad34 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   1ad34:	b570      	push	{r4, r5, r6, lr}
   1ad36:	460d      	mov	r5, r1
   1ad38:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   1ad3a:	f7ff ffeb 	bl	1ad14 <os_dev_lookup>
    if (dev == NULL) {
   1ad3e:	4604      	mov	r4, r0
   1ad40:	b1a0      	cbz	r0, 1ad6c <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   1ad42:	7ec3      	ldrb	r3, [r0, #27]
   1ad44:	f013 0f01 	tst.w	r3, #1
   1ad48:	d012      	beq.n	1ad70 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   1ad4a:	6803      	ldr	r3, [r0, #0]
   1ad4c:	b11b      	cbz	r3, 1ad56 <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   1ad4e:	4632      	mov	r2, r6
   1ad50:	4629      	mov	r1, r5
   1ad52:	4798      	blx	r3
        if (rc != 0) {
   1ad54:	b970      	cbnz	r0, 1ad74 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   1ad56:	f000 ffb5 	bl	1bcc4 <os_arch_save_sr>
    ++dev->od_open_ref;
   1ad5a:	7ea3      	ldrb	r3, [r4, #26]
   1ad5c:	3301      	adds	r3, #1
   1ad5e:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   1ad60:	7ee3      	ldrb	r3, [r4, #27]
   1ad62:	f043 0302 	orr.w	r3, r3, #2
   1ad66:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   1ad68:	f000 ffb2 	bl	1bcd0 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   1ad6c:	4620      	mov	r0, r4
   1ad6e:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   1ad70:	2400      	movs	r4, #0
   1ad72:	e7fb      	b.n	1ad6c <os_dev_open+0x38>
    return (NULL);
   1ad74:	2400      	movs	r4, #0
   1ad76:	e7f9      	b.n	1ad6c <os_dev_open+0x38>

0001ad78 <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev == NULL) {
   1ad78:	b1b0      	cbz	r0, 1ada8 <os_dev_close+0x30>
{
   1ad7a:	b510      	push	{r4, lr}
   1ad7c:	4604      	mov	r4, r0
        rc = OS_EINVAL;
        goto err;
    }

    if (dev->od_handlers.od_close) {
   1ad7e:	68c3      	ldr	r3, [r0, #12]
   1ad80:	b113      	cbz	r3, 1ad88 <os_dev_close+0x10>
        rc = dev->od_handlers.od_close(dev);
   1ad82:	4798      	blx	r3
        if (rc != 0) {
   1ad84:	4603      	mov	r3, r0
   1ad86:	b968      	cbnz	r0, 1ada4 <os_dev_close+0x2c>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   1ad88:	f000 ff9c 	bl	1bcc4 <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
   1ad8c:	7ea3      	ldrb	r3, [r4, #26]
   1ad8e:	3b01      	subs	r3, #1
   1ad90:	b2db      	uxtb	r3, r3
   1ad92:	76a3      	strb	r3, [r4, #26]
   1ad94:	b91b      	cbnz	r3, 1ad9e <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
   1ad96:	7ee3      	ldrb	r3, [r4, #27]
   1ad98:	f023 0306 	bic.w	r3, r3, #6
   1ad9c:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
   1ad9e:	f000 ff97 	bl	1bcd0 <os_arch_restore_sr>

    return (0);
   1ada2:	2300      	movs	r3, #0
err:
    return (rc);
}
   1ada4:	4618      	mov	r0, r3
   1ada6:	bd10      	pop	{r4, pc}
        rc = OS_EINVAL;
   1ada8:	2302      	movs	r3, #2
}
   1adaa:	4618      	mov	r0, r3
   1adac:	4770      	bx	lr
	...

0001adb0 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   1adb0:	4b02      	ldr	r3, [pc, #8]	; (1adbc <os_dev_reset+0xc>)
   1adb2:	2200      	movs	r2, #0
   1adb4:	601a      	str	r2, [r3, #0]
   1adb6:	605b      	str	r3, [r3, #4]
}
   1adb8:	4770      	bx	lr
   1adba:	bf00      	nop
   1adbc:	20009070 	.word	0x20009070

0001adc0 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   1adc0:	2200      	movs	r2, #0
   1adc2:	6002      	str	r2, [r0, #0]
   1adc4:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   1adc6:	4603      	mov	r3, r0
   1adc8:	f843 2f08 	str.w	r2, [r3, #8]!
   1adcc:	60c3      	str	r3, [r0, #12]
}
   1adce:	4770      	bx	lr

0001add0 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   1add0:	68c0      	ldr	r0, [r0, #12]
}
   1add2:	3000      	adds	r0, #0
   1add4:	bf18      	it	ne
   1add6:	2001      	movne	r0, #1
   1add8:	4770      	bx	lr

0001adda <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   1adda:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   1addc:	b1f0      	cbz	r0, 1ae1c <os_eventq_put+0x42>
   1adde:	460c      	mov	r4, r1
   1ade0:	4605      	mov	r5, r0
   1ade2:	f7ff fff5 	bl	1add0 <os_eventq_inited>
   1ade6:	b1c8      	cbz	r0, 1ae1c <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   1ade8:	f000 ff6c 	bl	1bcc4 <os_arch_save_sr>
   1adec:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   1adee:	7823      	ldrb	r3, [r4, #0]
   1adf0:	b9d3      	cbnz	r3, 1ae28 <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   1adf2:	2301      	movs	r3, #1
   1adf4:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   1adf6:	2300      	movs	r3, #0
   1adf8:	60e3      	str	r3, [r4, #12]
   1adfa:	68eb      	ldr	r3, [r5, #12]
   1adfc:	601c      	str	r4, [r3, #0]
   1adfe:	340c      	adds	r4, #12
   1ae00:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
   1ae02:	6868      	ldr	r0, [r5, #4]
   1ae04:	b1b8      	cbz	r0, 1ae36 <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   1ae06:	7b03      	ldrb	r3, [r0, #12]
   1ae08:	2b02      	cmp	r3, #2
   1ae0a:	d010      	beq.n	1ae2e <os_eventq_put+0x54>
    resched = 0;
   1ae0c:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   1ae0e:	2300      	movs	r3, #0
   1ae10:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
   1ae12:	4630      	mov	r0, r6
   1ae14:	f000 ff5c 	bl	1bcd0 <os_arch_restore_sr>

    if (resched) {
   1ae18:	b97c      	cbnz	r4, 1ae3a <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   1ae1a:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   1ae1c:	2300      	movs	r3, #0
   1ae1e:	461a      	mov	r2, r3
   1ae20:	4619      	mov	r1, r3
   1ae22:	4618      	mov	r0, r3
   1ae24:	f7ff fcb8 	bl	1a798 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   1ae28:	f000 ff52 	bl	1bcd0 <os_arch_restore_sr>
   1ae2c:	e7f5      	b.n	1ae1a <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   1ae2e:	f000 fcc7 	bl	1b7c0 <os_sched_wakeup>
            resched = 1;
   1ae32:	2401      	movs	r4, #1
   1ae34:	e7eb      	b.n	1ae0e <os_eventq_put+0x34>
    resched = 0;
   1ae36:	2400      	movs	r4, #0
   1ae38:	e7eb      	b.n	1ae12 <os_eventq_put+0x38>
        os_sched(NULL);
   1ae3a:	2000      	movs	r0, #0
   1ae3c:	f000 fd40 	bl	1b8c0 <os_sched>
   1ae40:	e7eb      	b.n	1ae1a <os_eventq_put+0x40>

0001ae42 <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   1ae42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ae44:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   1ae46:	f000 fc67 	bl	1b718 <os_sched_get_current_task>
   1ae4a:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   1ae4c:	682b      	ldr	r3, [r5, #0]
   1ae4e:	4283      	cmp	r3, r0
   1ae50:	d001      	beq.n	1ae56 <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   1ae52:	b9db      	cbnz	r3, 1ae8c <os_eventq_get+0x4a>
            evq->evq_owner = t;
   1ae54:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   1ae56:	f000 ff35 	bl	1bcc4 <os_arch_save_sr>
   1ae5a:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   1ae5c:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
   1ae5e:	b9de      	cbnz	r6, 1ae98 <os_eventq_get+0x56>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   1ae60:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   1ae62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ae66:	4620      	mov	r0, r4
   1ae68:	f000 fc62 	bl	1b730 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   1ae6c:	7b63      	ldrb	r3, [r4, #13]
   1ae6e:	f043 0308 	orr.w	r3, r3, #8
   1ae72:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   1ae74:	4638      	mov	r0, r7
   1ae76:	f000 ff2b 	bl	1bcd0 <os_arch_restore_sr>

        os_sched(NULL);
   1ae7a:	2000      	movs	r0, #0
   1ae7c:	f000 fd20 	bl	1b8c0 <os_sched>

        OS_ENTER_CRITICAL(sr);
   1ae80:	f000 ff20 	bl	1bcc4 <os_arch_save_sr>
   1ae84:	4607      	mov	r7, r0
        evq->evq_task = NULL;
   1ae86:	2300      	movs	r3, #0
   1ae88:	606b      	str	r3, [r5, #4]
        goto pull_one;
   1ae8a:	e7e7      	b.n	1ae5c <os_eventq_get+0x1a>
            assert(0);
   1ae8c:	2300      	movs	r3, #0
   1ae8e:	461a      	mov	r2, r3
   1ae90:	4619      	mov	r1, r3
   1ae92:	4618      	mov	r0, r3
   1ae94:	f7ff fc80 	bl	1a798 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1ae98:	68f3      	ldr	r3, [r6, #12]
   1ae9a:	60ab      	str	r3, [r5, #8]
   1ae9c:	b153      	cbz	r3, 1aeb4 <os_eventq_get+0x72>
        ev->ev_queued = 0;
   1ae9e:	2300      	movs	r3, #0
   1aea0:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   1aea2:	7b63      	ldrb	r3, [r4, #13]
   1aea4:	f023 0308 	bic.w	r3, r3, #8
   1aea8:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   1aeaa:	4638      	mov	r0, r7
   1aeac:	f000 ff10 	bl	1bcd0 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   1aeb0:	4630      	mov	r0, r6
   1aeb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1aeb4:	f105 0308 	add.w	r3, r5, #8
   1aeb8:	60eb      	str	r3, [r5, #12]
   1aeba:	e7f0      	b.n	1ae9e <os_eventq_get+0x5c>

0001aebc <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   1aebc:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   1aebe:	f7ff ffc0 	bl	1ae42 <os_eventq_get>
    assert(ev->ev_cb != NULL);
   1aec2:	6843      	ldr	r3, [r0, #4]
   1aec4:	b10b      	cbz	r3, 1aeca <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   1aec6:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   1aec8:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   1aeca:	461a      	mov	r2, r3
   1aecc:	4619      	mov	r1, r3
   1aece:	4618      	mov	r0, r3
   1aed0:	f7ff fc62 	bl	1a798 <__assert_func>

0001aed4 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   1aed4:	b538      	push	{r3, r4, r5, lr}
   1aed6:	4605      	mov	r5, r0
   1aed8:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   1aeda:	f000 fef3 	bl	1bcc4 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   1aede:	7823      	ldrb	r3, [r4, #0]
   1aee0:	b183      	cbz	r3, 1af04 <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1aee2:	68aa      	ldr	r2, [r5, #8]
   1aee4:	42a2      	cmp	r2, r4
   1aee6:	d107      	bne.n	1aef8 <os_eventq_remove+0x24>
   1aee8:	68d3      	ldr	r3, [r2, #12]
   1aeea:	60ab      	str	r3, [r5, #8]
   1aeec:	b953      	cbnz	r3, 1af04 <os_eventq_remove+0x30>
   1aeee:	f105 0308 	add.w	r3, r5, #8
   1aef2:	60eb      	str	r3, [r5, #12]
   1aef4:	e006      	b.n	1af04 <os_eventq_remove+0x30>
   1aef6:	461a      	mov	r2, r3
   1aef8:	68d3      	ldr	r3, [r2, #12]
   1aefa:	42a3      	cmp	r3, r4
   1aefc:	d1fb      	bne.n	1aef6 <os_eventq_remove+0x22>
   1aefe:	68db      	ldr	r3, [r3, #12]
   1af00:	60d3      	str	r3, [r2, #12]
   1af02:	b123      	cbz	r3, 1af0e <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
   1af04:	2300      	movs	r3, #0
   1af06:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   1af08:	f000 fee2 	bl	1bcd0 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   1af0c:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1af0e:	320c      	adds	r2, #12
   1af10:	60ea      	str	r2, [r5, #12]
   1af12:	e7f7      	b.n	1af04 <os_eventq_remove+0x30>

0001af14 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   1af14:	4800      	ldr	r0, [pc, #0]	; (1af18 <os_eventq_dflt_get+0x4>)
   1af16:	4770      	bx	lr
   1af18:	20009078 	.word	0x20009078

0001af1c <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
   1af1c:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
   1af1e:	2000      	movs	r0, #0
   1af20:	6018      	str	r0, [r3, #0]
   1af22:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
   1af24:	6098      	str	r0, [r3, #8]
   1af26:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
   1af28:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
   1af2a:	611a      	str	r2, [r3, #16]

    return (0);
}
   1af2c:	4770      	bx	lr

0001af2e <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
   1af2e:	b538      	push	{r3, r4, r5, lr}
   1af30:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1af32:	f000 fec7 	bl	1bcc4 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
   1af36:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   1af38:	b114      	cbz	r4, 1af40 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   1af3a:	6863      	ldr	r3, [r4, #4]
   1af3c:	602b      	str	r3, [r5, #0]
   1af3e:	b12b      	cbz	r3, 1af4c <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   1af40:	f000 fec6 	bl	1bcd0 <os_arch_restore_sr>

    if (mp) {
   1af44:	b124      	cbz	r4, 1af50 <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
   1af46:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
   1af4a:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   1af4c:	606d      	str	r5, [r5, #4]
   1af4e:	e7f7      	b.n	1af40 <os_mqueue_get+0x12>
        m = NULL;
   1af50:	2000      	movs	r0, #0
    return (m);
   1af52:	e7fa      	b.n	1af4a <os_mqueue_get+0x1c>

0001af54 <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
   1af54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
   1af56:	7953      	ldrb	r3, [r2, #5]
   1af58:	2b07      	cmp	r3, #7
   1af5a:	d916      	bls.n	1af8a <os_mqueue_put+0x36>
   1af5c:	4614      	mov	r4, r2
   1af5e:	460e      	mov	r6, r1
   1af60:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
   1af62:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   1af66:	f000 fead 	bl	1bcc4 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   1af6a:	2300      	movs	r3, #0
   1af6c:	f844 3f14 	str.w	r3, [r4, #20]!
   1af70:	686b      	ldr	r3, [r5, #4]
   1af72:	601f      	str	r7, [r3, #0]
   1af74:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   1af76:	f000 feab 	bl	1bcd0 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   1af7a:	b146      	cbz	r6, 1af8e <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
   1af7c:	f105 0108 	add.w	r1, r5, #8
   1af80:	4630      	mov	r0, r6
   1af82:	f7ff ff2a 	bl	1adda <os_eventq_put>
    }

    return (0);
   1af86:	2000      	movs	r0, #0
   1af88:	e000      	b.n	1af8c <os_mqueue_put+0x38>
err:
    return (rc);
   1af8a:	2002      	movs	r0, #2
}
   1af8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   1af8e:	2000      	movs	r0, #0
   1af90:	e7fc      	b.n	1af8c <os_mqueue_put+0x38>

0001af92 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   1af92:	3a10      	subs	r2, #16
   1af94:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   1af96:	6041      	str	r1, [r0, #4]

    return (0);
}
   1af98:	2000      	movs	r0, #0
   1af9a:	4770      	bx	lr

0001af9c <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   1af9c:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   1af9e:	8803      	ldrh	r3, [r0, #0]
   1afa0:	428b      	cmp	r3, r1
   1afa2:	d312      	bcc.n	1afca <os_mbuf_get+0x2e>
   1afa4:	460d      	mov	r5, r1
   1afa6:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   1afa8:	6840      	ldr	r0, [r0, #4]
   1afaa:	f000 f947 	bl	1b23c <os_memblock_get>
    if (!om) {
   1afae:	4603      	mov	r3, r0
   1afb0:	b148      	cbz	r0, 1afc6 <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   1afb2:	2200      	movs	r2, #0
   1afb4:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
   1afb6:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
   1afb8:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
   1afba:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   1afbc:	f100 0110 	add.w	r1, r0, #16
   1afc0:	4429      	add	r1, r5
   1afc2:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
   1afc4:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   1afc6:	4618      	mov	r0, r3
   1afc8:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1afca:	2300      	movs	r3, #0
    return om;
   1afcc:	e7fb      	b.n	1afc6 <os_mbuf_get+0x2a>

0001afce <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   1afce:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   1afd0:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   1afd4:	8803      	ldrh	r3, [r0, #0]
   1afd6:	42ab      	cmp	r3, r5
   1afd8:	d310      	bcc.n	1affc <os_mbuf_get_pkthdr+0x2e>
   1afda:	2dff      	cmp	r5, #255	; 0xff
   1afdc:	d810      	bhi.n	1b000 <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   1afde:	2100      	movs	r1, #0
   1afe0:	f7ff ffdc 	bl	1af9c <os_mbuf_get>
    if (om) {
   1afe4:	4603      	mov	r3, r0
   1afe6:	b138      	cbz	r0, 1aff8 <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
   1afe8:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
   1afea:	6802      	ldr	r2, [r0, #0]
   1afec:	4415      	add	r5, r2
   1afee:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   1aff0:	2200      	movs	r2, #0
   1aff2:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
   1aff4:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   1aff6:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   1aff8:	4618      	mov	r0, r3
   1affa:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1affc:	2300      	movs	r3, #0
   1affe:	e7fb      	b.n	1aff8 <os_mbuf_get_pkthdr+0x2a>
   1b000:	2300      	movs	r3, #0
    return om;
   1b002:	e7f9      	b.n	1aff8 <os_mbuf_get_pkthdr+0x2a>

0001b004 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   1b004:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   1b006:	6883      	ldr	r3, [r0, #8]
   1b008:	b123      	cbz	r3, 1b014 <os_mbuf_free+0x10>
   1b00a:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   1b00c:	6858      	ldr	r0, [r3, #4]
   1b00e:	f000 f93d 	bl	1b28c <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   1b012:	bd08      	pop	{r3, pc}
    rc = 0;
   1b014:	2000      	movs	r0, #0
    return (rc);
   1b016:	e7fc      	b.n	1b012 <os_mbuf_free+0xe>

0001b018 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
   1b018:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   1b01a:	b160      	cbz	r0, 1b036 <os_mbuf_free_chain+0x1e>
{
   1b01c:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   1b01e:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
   1b020:	4618      	mov	r0, r3
   1b022:	f7ff ffef 	bl	1b004 <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
   1b026:	4623      	mov	r3, r4
        if (rc != 0) {
   1b028:	4602      	mov	r2, r0
   1b02a:	b910      	cbnz	r0, 1b032 <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
   1b02c:	2c00      	cmp	r4, #0
   1b02e:	d1f6      	bne.n	1b01e <os_mbuf_free_chain+0x6>
    }

    rc = 0;
   1b030:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   1b032:	4610      	mov	r0, r2
   1b034:	bd10      	pop	{r4, pc}
    rc = 0;
   1b036:	2200      	movs	r2, #0
}
   1b038:	4610      	mov	r0, r2
   1b03a:	4770      	bx	lr

0001b03c <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
   1b03c:	2300      	movs	r3, #0
    while (om != NULL) {
   1b03e:	e003      	b.n	1b048 <os_mbuf_len+0xc>
        len += om->om_len;
   1b040:	88c2      	ldrh	r2, [r0, #6]
   1b042:	4413      	add	r3, r2
   1b044:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
   1b046:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
   1b048:	2800      	cmp	r0, #0
   1b04a:	d1f9      	bne.n	1b040 <os_mbuf_len+0x4>
    }

    return len;
}
   1b04c:	4618      	mov	r0, r3
   1b04e:	4770      	bx	lr

0001b050 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   1b050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   1b054:	2800      	cmp	r0, #0
   1b056:	d04d      	beq.n	1b0f4 <os_mbuf_append+0xa4>
   1b058:	460f      	mov	r7, r1
   1b05a:	4691      	mov	r9, r2
   1b05c:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   1b05e:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   1b062:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   1b064:	e000      	b.n	1b068 <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
   1b066:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
   1b068:	68eb      	ldr	r3, [r5, #12]
   1b06a:	2b00      	cmp	r3, #0
   1b06c:	d1fb      	bne.n	1b066 <os_mbuf_append+0x16>
    }

    remainder = len;
   1b06e:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   1b070:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1b072:	f105 0410 	add.w	r4, r5, #16
   1b076:	881b      	ldrh	r3, [r3, #0]
   1b078:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   1b07a:	6828      	ldr	r0, [r5, #0]
   1b07c:	88eb      	ldrh	r3, [r5, #6]
   1b07e:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1b080:	1a24      	subs	r4, r4, r0
   1b082:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   1b084:	b164      	cbz	r4, 1b0a0 <os_mbuf_append+0x50>
        if (space > remainder) {
   1b086:	454c      	cmp	r4, r9
   1b088:	dd00      	ble.n	1b08c <os_mbuf_append+0x3c>
            space = remainder;
   1b08a:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   1b08c:	4622      	mov	r2, r4
   1b08e:	4639      	mov	r1, r7
   1b090:	f000 ff78 	bl	1bf84 <memcpy>

        last->om_len += space;
   1b094:	88eb      	ldrh	r3, [r5, #6]
   1b096:	4423      	add	r3, r4
   1b098:	80eb      	strh	r3, [r5, #6]
        data += space;
   1b09a:	4427      	add	r7, r4
        remainder -= space;
   1b09c:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   1b0a0:	2e00      	cmp	r6, #0
   1b0a2:	dd16      	ble.n	1b0d2 <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
   1b0a4:	2100      	movs	r1, #0
   1b0a6:	4640      	mov	r0, r8
   1b0a8:	f7ff ff78 	bl	1af9c <os_mbuf_get>
        if (!new) {
   1b0ac:	4604      	mov	r4, r0
   1b0ae:	b180      	cbz	r0, 1b0d2 <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   1b0b0:	f8b8 2000 	ldrh.w	r2, [r8]
   1b0b4:	42b2      	cmp	r2, r6
   1b0b6:	bfa8      	it	ge
   1b0b8:	4632      	movge	r2, r6
   1b0ba:	b292      	uxth	r2, r2
   1b0bc:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   1b0be:	4639      	mov	r1, r7
   1b0c0:	6800      	ldr	r0, [r0, #0]
   1b0c2:	f000 ff5f 	bl	1bf84 <memcpy>
        data += new->om_len;
   1b0c6:	88e3      	ldrh	r3, [r4, #6]
   1b0c8:	441f      	add	r7, r3
        remainder -= new->om_len;
   1b0ca:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
   1b0cc:	60ec      	str	r4, [r5, #12]
        last = new;
   1b0ce:	4625      	mov	r5, r4
   1b0d0:	e7e6      	b.n	1b0a0 <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   1b0d2:	f89a 3005 	ldrb.w	r3, [sl, #5]
   1b0d6:	2b07      	cmp	r3, #7
   1b0d8:	d907      	bls.n	1b0ea <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   1b0da:	eba9 0906 	sub.w	r9, r9, r6
   1b0de:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   1b0e2:	fa13 f989 	uxtah	r9, r3, r9
   1b0e6:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   1b0ea:	b106      	cbz	r6, 1b0ee <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
   1b0ec:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
   1b0ee:	4630      	mov	r0, r6
   1b0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   1b0f4:	2602      	movs	r6, #2
   1b0f6:	e7fa      	b.n	1b0ee <os_mbuf_append+0x9e>

0001b0f8 <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
   1b0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b0fc:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
   1b0fe:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
   1b102:	2700      	movs	r7, #0
    head = NULL;
   1b104:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1b106:	e017      	b.n	1b138 <os_mbuf_dup+0x40>
    startoff = 0;
   1b108:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1b10a:	4623      	mov	r3, r4
   1b10c:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1b110:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1b112:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
   1b114:	b299      	uxth	r1, r3
   1b116:	4640      	mov	r0, r8
   1b118:	f7ff ff40 	bl	1af9c <os_mbuf_get>
   1b11c:	4605      	mov	r5, r0
   1b11e:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
   1b120:	b188      	cbz	r0, 1b146 <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
   1b122:	7923      	ldrb	r3, [r4, #4]
   1b124:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
   1b126:	88e3      	ldrh	r3, [r4, #6]
   1b128:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
   1b12a:	88e2      	ldrh	r2, [r4, #6]
   1b12c:	6821      	ldr	r1, [r4, #0]
   1b12e:	6828      	ldr	r0, [r5, #0]
   1b130:	f000 ff28 	bl	1bf84 <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1b134:	68e4      	ldr	r4, [r4, #12]
   1b136:	462f      	mov	r7, r5
   1b138:	b14c      	cbz	r4, 1b14e <os_mbuf_dup+0x56>
        if (head) {
   1b13a:	b15e      	cbz	r6, 1b154 <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   1b13c:	7963      	ldrb	r3, [r4, #5]
   1b13e:	2b07      	cmp	r3, #7
   1b140:	d9e2      	bls.n	1b108 <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
   1b142:	b299      	uxth	r1, r3
   1b144:	e7e1      	b.n	1b10a <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
   1b146:	4630      	mov	r0, r6
   1b148:	f7ff ff66 	bl	1b018 <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
   1b14c:	462e      	mov	r6, r5
}
   1b14e:	4630      	mov	r0, r6
   1b150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
   1b154:	7963      	ldrb	r3, [r4, #5]
   1b156:	2b07      	cmp	r3, #7
   1b158:	d911      	bls.n	1b17e <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
   1b15a:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1b15c:	4623      	mov	r3, r4
   1b15e:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1b162:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1b164:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
   1b166:	b299      	uxth	r1, r3
   1b168:	4640      	mov	r0, r8
   1b16a:	f7ff ff17 	bl	1af9c <os_mbuf_get>
            if (!head) {
   1b16e:	4606      	mov	r6, r0
   1b170:	2800      	cmp	r0, #0
   1b172:	d0ec      	beq.n	1b14e <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
   1b174:	7963      	ldrb	r3, [r4, #5]
   1b176:	2b07      	cmp	r3, #7
   1b178:	d803      	bhi.n	1b182 <os_mbuf_dup+0x8a>
            copy = head;
   1b17a:	4605      	mov	r5, r0
   1b17c:	e7d1      	b.n	1b122 <os_mbuf_dup+0x2a>
    startoff = 0;
   1b17e:	2100      	movs	r1, #0
   1b180:	e7ec      	b.n	1b15c <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
   1b182:	88c3      	ldrh	r3, [r0, #6]
   1b184:	b973      	cbnz	r3, 1b1a4 <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   1b186:	f100 0510 	add.w	r5, r0, #16
   1b18a:	7962      	ldrb	r2, [r4, #5]
   1b18c:	f104 0110 	add.w	r1, r4, #16
   1b190:	4628      	mov	r0, r5
   1b192:	f000 fef7 	bl	1bf84 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   1b196:	7963      	ldrb	r3, [r4, #5]
   1b198:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   1b19a:	7963      	ldrb	r3, [r4, #5]
   1b19c:	441d      	add	r5, r3
   1b19e:	6035      	str	r5, [r6, #0]
            copy = head;
   1b1a0:	4635      	mov	r5, r6
   1b1a2:	e7be      	b.n	1b122 <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
   1b1a4:	2300      	movs	r3, #0
   1b1a6:	461a      	mov	r2, r3
   1b1a8:	4619      	mov	r1, r3
   1b1aa:	4618      	mov	r0, r3
   1b1ac:	f7ff faf4 	bl	1a798 <__assert_func>

0001b1b0 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   1b1b0:	2800      	cmp	r0, #0
   1b1b2:	d031      	beq.n	1b218 <os_mempool_init_internal+0x68>
{
   1b1b4:	b430      	push	{r4, r5}
   1b1b6:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   1b1b8:	2a00      	cmp	r2, #0
   1b1ba:	d02f      	beq.n	1b21c <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   1b1bc:	b1bb      	cbz	r3, 1b1ee <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   1b1be:	b113      	cbz	r3, 1b1c6 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   1b1c0:	f013 0f03 	tst.w	r3, #3
   1b1c4:	d12c      	bne.n	1b220 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   1b1c6:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   1b1c8:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   1b1ca:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   1b1cc:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1b1d0:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   1b1d2:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   1b1d4:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   1b1d6:	9802      	ldr	r0, [sp, #8]
   1b1d8:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   1b1da:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   1b1dc:	b199      	cbz	r1, 1b206 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   1b1de:	f012 0f03 	tst.w	r2, #3
   1b1e2:	d002      	beq.n	1b1ea <os_mempool_init_internal+0x3a>
   1b1e4:	f022 0203 	bic.w	r2, r2, #3
   1b1e8:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   1b1ea:	2001      	movs	r0, #1
   1b1ec:	e007      	b.n	1b1fe <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   1b1ee:	2900      	cmp	r1, #0
   1b1f0:	d0e5      	beq.n	1b1be <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   1b1f2:	2003      	movs	r0, #3
   1b1f4:	e00e      	b.n	1b214 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   1b1f6:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   1b1f8:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   1b1fa:	3001      	adds	r0, #1
            block_addr += true_block_size;
   1b1fc:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   1b1fe:	4281      	cmp	r1, r0
   1b200:	dcf9      	bgt.n	1b1f6 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   1b202:	2200      	movs	r2, #0
   1b204:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   1b206:	2000      	movs	r0, #0
   1b208:	6120      	str	r0, [r4, #16]
   1b20a:	4b06      	ldr	r3, [pc, #24]	; (1b224 <os_mempool_init_internal+0x74>)
   1b20c:	685a      	ldr	r2, [r3, #4]
   1b20e:	6014      	str	r4, [r2, #0]
   1b210:	3410      	adds	r4, #16
   1b212:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   1b214:	bc30      	pop	{r4, r5}
   1b216:	4770      	bx	lr
        return OS_INVALID_PARM;
   1b218:	2003      	movs	r0, #3
}
   1b21a:	4770      	bx	lr
        return OS_INVALID_PARM;
   1b21c:	2003      	movs	r0, #3
   1b21e:	e7f9      	b.n	1b214 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   1b220:	2004      	movs	r0, #4
   1b222:	e7f7      	b.n	1b214 <os_mempool_init_internal+0x64>
   1b224:	2000de98 	.word	0x2000de98

0001b228 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   1b228:	b510      	push	{r4, lr}
   1b22a:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   1b22c:	2400      	movs	r4, #0
   1b22e:	9401      	str	r4, [sp, #4]
   1b230:	9c04      	ldr	r4, [sp, #16]
   1b232:	9400      	str	r4, [sp, #0]
   1b234:	f7ff ffbc 	bl	1b1b0 <os_mempool_init_internal>
}
   1b238:	b002      	add	sp, #8
   1b23a:	bd10      	pop	{r4, pc}

0001b23c <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
   1b23c:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   1b23e:	b1a0      	cbz	r0, 1b26a <os_memblock_get+0x2e>
   1b240:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1b242:	f000 fd3f 	bl	1bcc4 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   1b246:	88e3      	ldrh	r3, [r4, #6]
   1b248:	b153      	cbz	r3, 1b260 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   1b24a:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   1b24c:	682a      	ldr	r2, [r5, #0]
   1b24e:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   1b250:	3b01      	subs	r3, #1
   1b252:	b29b      	uxth	r3, r3
   1b254:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   1b256:	8922      	ldrh	r2, [r4, #8]
   1b258:	4293      	cmp	r3, r2
   1b25a:	d202      	bcs.n	1b262 <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   1b25c:	8123      	strh	r3, [r4, #8]
   1b25e:	e000      	b.n	1b262 <os_memblock_get+0x26>
    block = NULL;
   1b260:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   1b262:	f000 fd35 	bl	1bcd0 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   1b266:	4628      	mov	r0, r5
   1b268:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   1b26a:	2500      	movs	r5, #0
    return (void *)block;
   1b26c:	e7fb      	b.n	1b266 <os_memblock_get+0x2a>

0001b26e <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   1b26e:	b538      	push	{r3, r4, r5, lr}
   1b270:	4604      	mov	r4, r0
   1b272:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   1b274:	f000 fd26 	bl	1bcc4 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   1b278:	6963      	ldr	r3, [r4, #20]
   1b27a:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   1b27c:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   1b27e:	88e3      	ldrh	r3, [r4, #6]
   1b280:	3301      	adds	r3, #1
   1b282:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   1b284:	f000 fd24 	bl	1bcd0 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   1b288:	2000      	movs	r0, #0
   1b28a:	bd38      	pop	{r3, r4, r5, pc}

0001b28c <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   1b28c:	b168      	cbz	r0, 1b2aa <os_memblock_put+0x1e>
{
   1b28e:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
   1b290:	b169      	cbz	r1, 1b2ae <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   1b292:	7a83      	ldrb	r3, [r0, #10]
   1b294:	f013 0f01 	tst.w	r3, #1
   1b298:	d004      	beq.n	1b2a4 <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   1b29a:	69c3      	ldr	r3, [r0, #28]
   1b29c:	b113      	cbz	r3, 1b2a4 <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   1b29e:	6a02      	ldr	r2, [r0, #32]
   1b2a0:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   1b2a2:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
   1b2a4:	f7ff ffe3 	bl	1b26e <os_memblock_put_from_cb>
   1b2a8:	e7fb      	b.n	1b2a2 <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
   1b2aa:	2003      	movs	r0, #3
}
   1b2ac:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1b2ae:	2003      	movs	r0, #3
   1b2b0:	e7f7      	b.n	1b2a2 <os_memblock_put+0x16>
	...

0001b2b4 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   1b2b4:	4b02      	ldr	r3, [pc, #8]	; (1b2c0 <os_mempool_module_init+0xc>)
   1b2b6:	2200      	movs	r2, #0
   1b2b8:	601a      	str	r2, [r3, #0]
   1b2ba:	605b      	str	r3, [r3, #4]
}
   1b2bc:	4770      	bx	lr
   1b2be:	bf00      	nop
   1b2c0:	2000de98 	.word	0x2000de98

0001b2c4 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1b2c4:	4b02      	ldr	r3, [pc, #8]	; (1b2d0 <os_msys_find_biggest_pool+0xc>)
   1b2c6:	6818      	ldr	r0, [r3, #0]
   1b2c8:	b108      	cbz	r0, 1b2ce <os_msys_find_biggest_pool+0xa>
   1b2ca:	6858      	ldr	r0, [r3, #4]
   1b2cc:	3808      	subs	r0, #8
}
   1b2ce:	4770      	bx	lr
   1b2d0:	2000010c 	.word	0x2000010c

0001b2d4 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1b2d4:	4b09      	ldr	r3, [pc, #36]	; (1b2fc <os_msys_find_pool+0x28>)
   1b2d6:	6819      	ldr	r1, [r3, #0]
   1b2d8:	460b      	mov	r3, r1
   1b2da:	b123      	cbz	r3, 1b2e6 <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
   1b2dc:	881a      	ldrh	r2, [r3, #0]
   1b2de:	4282      	cmp	r2, r0
   1b2e0:	d201      	bcs.n	1b2e6 <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1b2e2:	689b      	ldr	r3, [r3, #8]
   1b2e4:	e7f9      	b.n	1b2da <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
   1b2e6:	b10b      	cbz	r3, 1b2ec <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   1b2e8:	4618      	mov	r0, r3
   1b2ea:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1b2ec:	b119      	cbz	r1, 1b2f6 <os_msys_find_pool+0x22>
   1b2ee:	4b03      	ldr	r3, [pc, #12]	; (1b2fc <os_msys_find_pool+0x28>)
   1b2f0:	685b      	ldr	r3, [r3, #4]
   1b2f2:	3b08      	subs	r3, #8
   1b2f4:	e7f8      	b.n	1b2e8 <os_msys_find_pool+0x14>
   1b2f6:	460b      	mov	r3, r1
    return (pool);
   1b2f8:	e7f6      	b.n	1b2e8 <os_msys_find_pool+0x14>
   1b2fa:	bf00      	nop
   1b2fc:	2000010c 	.word	0x2000010c

0001b300 <os_msys_register>:
{
   1b300:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1b302:	4b11      	ldr	r3, [pc, #68]	; (1b348 <os_msys_register+0x48>)
   1b304:	681d      	ldr	r5, [r3, #0]
   1b306:	462b      	mov	r3, r5
    prev = NULL;
   1b308:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1b30a:	b133      	cbz	r3, 1b31a <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   1b30c:	8801      	ldrh	r1, [r0, #0]
   1b30e:	881a      	ldrh	r2, [r3, #0]
   1b310:	4291      	cmp	r1, r2
   1b312:	d302      	bcc.n	1b31a <os_msys_register+0x1a>
        prev = pool;
   1b314:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1b316:	689b      	ldr	r3, [r3, #8]
   1b318:	e7f7      	b.n	1b30a <os_msys_register+0xa>
    if (prev) {
   1b31a:	b15c      	cbz	r4, 1b334 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1b31c:	68a3      	ldr	r3, [r4, #8]
   1b31e:	6083      	str	r3, [r0, #8]
   1b320:	b11b      	cbz	r3, 1b32a <os_msys_register+0x2a>
   1b322:	60a0      	str	r0, [r4, #8]
}
   1b324:	2000      	movs	r0, #0
   1b326:	bc30      	pop	{r4, r5}
   1b328:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1b32a:	f100 0308 	add.w	r3, r0, #8
   1b32e:	4a06      	ldr	r2, [pc, #24]	; (1b348 <os_msys_register+0x48>)
   1b330:	6053      	str	r3, [r2, #4]
   1b332:	e7f6      	b.n	1b322 <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   1b334:	6085      	str	r5, [r0, #8]
   1b336:	b115      	cbz	r5, 1b33e <os_msys_register+0x3e>
   1b338:	4b03      	ldr	r3, [pc, #12]	; (1b348 <os_msys_register+0x48>)
   1b33a:	6018      	str	r0, [r3, #0]
   1b33c:	e7f2      	b.n	1b324 <os_msys_register+0x24>
   1b33e:	f100 0308 	add.w	r3, r0, #8
   1b342:	4a01      	ldr	r2, [pc, #4]	; (1b348 <os_msys_register+0x48>)
   1b344:	6053      	str	r3, [r2, #4]
   1b346:	e7f7      	b.n	1b338 <os_msys_register+0x38>
   1b348:	2000010c 	.word	0x2000010c

0001b34c <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   1b34c:	b530      	push	{r4, r5, lr}
   1b34e:	b083      	sub	sp, #12
   1b350:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   1b352:	9d07      	ldr	r5, [sp, #28]
   1b354:	9501      	str	r5, [sp, #4]
   1b356:	9d06      	ldr	r5, [sp, #24]
   1b358:	9500      	str	r5, [sp, #0]
   1b35a:	f001 f96d 	bl	1c638 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   1b35e:	b138      	cbz	r0, 1b370 <os_msys_init_once+0x24>
   1b360:	2000      	movs	r0, #0
   1b362:	9000      	str	r0, [sp, #0]
   1b364:	4b09      	ldr	r3, [pc, #36]	; (1b38c <os_msys_init_once+0x40>)
   1b366:	681d      	ldr	r5, [r3, #0]
   1b368:	4603      	mov	r3, r0
   1b36a:	4602      	mov	r2, r0
   1b36c:	4601      	mov	r1, r0
   1b36e:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
   1b370:	4620      	mov	r0, r4
   1b372:	f7ff ffc5 	bl	1b300 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1b376:	b138      	cbz	r0, 1b388 <os_msys_init_once+0x3c>
   1b378:	2000      	movs	r0, #0
   1b37a:	9000      	str	r0, [sp, #0]
   1b37c:	4b03      	ldr	r3, [pc, #12]	; (1b38c <os_msys_init_once+0x40>)
   1b37e:	681c      	ldr	r4, [r3, #0]
   1b380:	4603      	mov	r3, r0
   1b382:	4602      	mov	r2, r0
   1b384:	4601      	mov	r1, r0
   1b386:	47a0      	blx	r4
}
   1b388:	b003      	add	sp, #12
   1b38a:	bd30      	pop	{r4, r5, pc}
   1b38c:	20000104 	.word	0x20000104

0001b390 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   1b390:	4b02      	ldr	r3, [pc, #8]	; (1b39c <os_msys_reset+0xc>)
   1b392:	2200      	movs	r2, #0
   1b394:	601a      	str	r2, [r3, #0]
   1b396:	605b      	str	r3, [r3, #4]
}
   1b398:	4770      	bx	lr
   1b39a:	bf00      	nop
   1b39c:	2000010c 	.word	0x2000010c

0001b3a0 <os_msys_get_pkthdr>:
{
   1b3a0:	b510      	push	{r4, lr}
   1b3a2:	460c      	mov	r4, r1
    if (dsize == 0) {
   1b3a4:	b930      	cbnz	r0, 1b3b4 <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   1b3a6:	f7ff ff8d 	bl	1b2c4 <os_msys_find_biggest_pool>
    if (!pool) {
   1b3aa:	b158      	cbz	r0, 1b3c4 <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   1b3ac:	b2e1      	uxtb	r1, r4
   1b3ae:	f7ff fe0e 	bl	1afce <os_mbuf_get_pkthdr>
}
   1b3b2:	bd10      	pop	{r4, pc}
   1b3b4:	f101 0308 	add.w	r3, r1, #8
   1b3b8:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   1b3ba:	4403      	add	r3, r0
   1b3bc:	b298      	uxth	r0, r3
   1b3be:	f7ff ff89 	bl	1b2d4 <os_msys_find_pool>
   1b3c2:	e7f2      	b.n	1b3aa <os_msys_get_pkthdr+0xa>
    return (NULL);
   1b3c4:	2000      	movs	r0, #0
   1b3c6:	e7f4      	b.n	1b3b2 <os_msys_get_pkthdr+0x12>

0001b3c8 <os_msys_init>:

void
os_msys_init(void)
{
   1b3c8:	b500      	push	{lr}
   1b3ca:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   1b3cc:	f7ff ffe0 	bl	1b390 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   1b3d0:	4b06      	ldr	r3, [pc, #24]	; (1b3ec <os_msys_init+0x24>)
   1b3d2:	9301      	str	r3, [sp, #4]
   1b3d4:	f44f 7392 	mov.w	r3, #292	; 0x124
   1b3d8:	9300      	str	r3, [sp, #0]
   1b3da:	2340      	movs	r3, #64	; 0x40
   1b3dc:	4a04      	ldr	r2, [pc, #16]	; (1b3f0 <os_msys_init+0x28>)
   1b3de:	4905      	ldr	r1, [pc, #20]	; (1b3f4 <os_msys_init+0x2c>)
   1b3e0:	4805      	ldr	r0, [pc, #20]	; (1b3f8 <os_msys_init+0x30>)
   1b3e2:	f7ff ffb3 	bl	1b34c <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   1b3e6:	b003      	add	sp, #12
   1b3e8:	f85d fb04 	ldr.w	pc, [sp], #4
   1b3ec:	00021df4 	.word	0x00021df4
   1b3f0:	2000d988 	.word	0x2000d988
   1b3f4:	2000d994 	.word	0x2000d994
   1b3f8:	20009088 	.word	0x20009088

0001b3fc <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   1b3fc:	4603      	mov	r3, r0
   1b3fe:	b128      	cbz	r0, 1b40c <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   1b400:	2000      	movs	r0, #0
   1b402:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   1b404:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   1b406:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   1b408:	6018      	str	r0, [r3, #0]
   1b40a:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1b40c:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   1b40e:	4770      	bx	lr

0001b410 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   1b410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   1b412:	4b2c      	ldr	r3, [pc, #176]	; (1b4c4 <os_mutex_release+0xb4>)
   1b414:	681b      	ldr	r3, [r3, #0]
   1b416:	2b00      	cmp	r3, #0
   1b418:	d04d      	beq.n	1b4b6 <os_mutex_release+0xa6>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1b41a:	2800      	cmp	r0, #0
   1b41c:	d04d      	beq.n	1b4ba <os_mutex_release+0xaa>
   1b41e:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   1b420:	f000 f97a 	bl	1b718 <os_sched_get_current_task>
   1b424:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   1b426:	88e3      	ldrh	r3, [r4, #6]
   1b428:	2b00      	cmp	r3, #0
   1b42a:	d048      	beq.n	1b4be <os_mutex_release+0xae>
   1b42c:	68a2      	ldr	r2, [r4, #8]
   1b42e:	4282      	cmp	r2, r0
   1b430:	d001      	beq.n	1b436 <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
   1b432:	2005      	movs	r0, #5
   1b434:	e040      	b.n	1b4b8 <os_mutex_release+0xa8>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   1b436:	2b01      	cmp	r3, #1
   1b438:	d003      	beq.n	1b442 <os_mutex_release+0x32>
        --mu->mu_level;
   1b43a:	3b01      	subs	r3, #1
   1b43c:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1b43e:	2000      	movs	r0, #0
        goto done;
   1b440:	e03a      	b.n	1b4b8 <os_mutex_release+0xa8>
    }

    OS_ENTER_CRITICAL(sr);
   1b442:	f000 fc3f 	bl	1bcc4 <os_arch_save_sr>
   1b446:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   1b448:	88e3      	ldrh	r3, [r4, #6]
   1b44a:	3b01      	subs	r3, #1
   1b44c:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   1b44e:	7aea      	ldrb	r2, [r5, #11]
   1b450:	7963      	ldrb	r3, [r4, #5]
   1b452:	429a      	cmp	r2, r3
   1b454:	d11e      	bne.n	1b494 <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   1b456:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   1b458:	b146      	cbz	r6, 1b46c <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   1b45a:	69f3      	ldr	r3, [r6, #28]
   1b45c:	b1fb      	cbz	r3, 1b49e <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
   1b45e:	4630      	mov	r0, r6
   1b460:	f000 f9ae 	bl	1b7c0 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   1b464:	2301      	movs	r3, #1
   1b466:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   1b468:	7af3      	ldrb	r3, [r6, #11]
   1b46a:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   1b46c:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   1b46e:	b116      	cbz	r6, 1b476 <os_mutex_release+0x66>
        rdy->t_lockcnt++;
   1b470:	7bb3      	ldrb	r3, [r6, #14]
   1b472:	3301      	adds	r3, #1
   1b474:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   1b476:	7bab      	ldrb	r3, [r5, #14]
   1b478:	3b01      	subs	r3, #1
   1b47a:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   1b47c:	f000 fa1a 	bl	1b8b4 <os_sched_next_task>
   1b480:	4604      	mov	r4, r0
    if (rdy != current) {
   1b482:	4285      	cmp	r5, r0
   1b484:	d010      	beq.n	1b4a8 <os_mutex_release+0x98>
        resched = 1;
   1b486:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   1b488:	4638      	mov	r0, r7
   1b48a:	f000 fc21 	bl	1bcd0 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1b48e:	b96d      	cbnz	r5, 1b4ac <os_mutex_release+0x9c>
        os_sched(rdy);
    }

    ret = OS_OK;
   1b490:	2000      	movs	r0, #0
   1b492:	e011      	b.n	1b4b8 <os_mutex_release+0xa8>
        current->t_prio = mu->mu_prio;
   1b494:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   1b496:	4628      	mov	r0, r5
   1b498:	f000 fa24 	bl	1b8e4 <os_sched_resort>
   1b49c:	e7db      	b.n	1b456 <os_mutex_release+0x46>
        assert(rdy->t_obj);
   1b49e:	461a      	mov	r2, r3
   1b4a0:	4619      	mov	r1, r3
   1b4a2:	4618      	mov	r0, r3
   1b4a4:	f7ff f978 	bl	1a798 <__assert_func>
    resched = 0;
   1b4a8:	2500      	movs	r5, #0
   1b4aa:	e7ed      	b.n	1b488 <os_mutex_release+0x78>
        os_sched(rdy);
   1b4ac:	4620      	mov	r0, r4
   1b4ae:	f000 fa07 	bl	1b8c0 <os_sched>
    ret = OS_OK;
   1b4b2:	2000      	movs	r0, #0
   1b4b4:	e000      	b.n	1b4b8 <os_mutex_release+0xa8>
        ret = OS_NOT_STARTED;
   1b4b6:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   1b4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   1b4ba:	2003      	movs	r0, #3
   1b4bc:	e7fc      	b.n	1b4b8 <os_mutex_release+0xa8>
        ret = OS_BAD_MUTEX;
   1b4be:	2005      	movs	r0, #5
   1b4c0:	e7fa      	b.n	1b4b8 <os_mutex_release+0xa8>
   1b4c2:	bf00      	nop
   1b4c4:	2000de88 	.word	0x2000de88

0001b4c8 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   1b4c8:	4b36      	ldr	r3, [pc, #216]	; (1b5a4 <os_mutex_pend+0xdc>)
   1b4ca:	681b      	ldr	r3, [r3, #0]
   1b4cc:	2b00      	cmp	r3, #0
   1b4ce:	d065      	beq.n	1b59c <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1b4d0:	2800      	cmp	r0, #0
   1b4d2:	d065      	beq.n	1b5a0 <os_mutex_pend+0xd8>
{
   1b4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b4d8:	460f      	mov	r7, r1
   1b4da:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   1b4dc:	f000 fbf2 	bl	1bcc4 <os_arch_save_sr>
   1b4e0:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   1b4e2:	f000 f919 	bl	1b718 <os_sched_get_current_task>
   1b4e6:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
   1b4e8:	88e3      	ldrh	r3, [r4, #6]
   1b4ea:	b19b      	cbz	r3, 1b514 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   1b4ec:	68a2      	ldr	r2, [r4, #8]
   1b4ee:	4282      	cmp	r2, r0
   1b4f0:	d01e      	beq.n	1b530 <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   1b4f2:	b327      	cbz	r7, 1b53e <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   1b4f4:	7ad1      	ldrb	r1, [r2, #11]
   1b4f6:	7ac3      	ldrb	r3, [r0, #11]
   1b4f8:	4299      	cmp	r1, r3
   1b4fa:	d825      	bhi.n	1b548 <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   1b4fc:	6821      	ldr	r1, [r4, #0]
   1b4fe:	b369      	cbz	r1, 1b55c <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1b500:	460b      	mov	r3, r1
    last = NULL;
   1b502:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1b504:	b32b      	cbz	r3, 1b552 <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
   1b506:	7ae8      	ldrb	r0, [r5, #11]
   1b508:	7ada      	ldrb	r2, [r3, #11]
   1b50a:	4290      	cmp	r0, r2
   1b50c:	d321      	bcc.n	1b552 <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
   1b50e:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1b510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1b512:	e7f7      	b.n	1b504 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   1b514:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
   1b516:	7ac3      	ldrb	r3, [r0, #11]
   1b518:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
   1b51a:	7b83      	ldrb	r3, [r0, #14]
   1b51c:	3301      	adds	r3, #1
   1b51e:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   1b520:	2301      	movs	r3, #1
   1b522:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1b524:	4640      	mov	r0, r8
   1b526:	f000 fbd3 	bl	1bcd0 <os_arch_restore_sr>
        ret = OS_OK;
   1b52a:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   1b52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
   1b530:	3301      	adds	r3, #1
   1b532:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1b534:	4640      	mov	r0, r8
   1b536:	f000 fbcb 	bl	1bcd0 <os_arch_restore_sr>
        ret = OS_OK;
   1b53a:	2000      	movs	r0, #0
        goto done;
   1b53c:	e7f6      	b.n	1b52c <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
   1b53e:	4640      	mov	r0, r8
   1b540:	f000 fbc6 	bl	1bcd0 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   1b544:	2006      	movs	r0, #6
        goto done;
   1b546:	e7f1      	b.n	1b52c <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
   1b548:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
   1b54a:	68a0      	ldr	r0, [r4, #8]
   1b54c:	f000 f9ca 	bl	1b8e4 <os_sched_resort>
   1b550:	e7d4      	b.n	1b4fc <os_mutex_pend+0x34>
    if (last) {
   1b552:	b11e      	cbz	r6, 1b55c <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   1b554:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   1b556:	64eb      	str	r3, [r5, #76]	; 0x4c
   1b558:	64f5      	str	r5, [r6, #76]	; 0x4c
   1b55a:	e001      	b.n	1b560 <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   1b55c:	64e9      	str	r1, [r5, #76]	; 0x4c
   1b55e:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
   1b560:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   1b562:	7b6b      	ldrb	r3, [r5, #13]
   1b564:	f043 0304 	orr.w	r3, r3, #4
   1b568:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
   1b56a:	4639      	mov	r1, r7
   1b56c:	4628      	mov	r0, r5
   1b56e:	f000 f8df 	bl	1b730 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   1b572:	4640      	mov	r0, r8
   1b574:	f000 fbac 	bl	1bcd0 <os_arch_restore_sr>
    os_sched(NULL);
   1b578:	2000      	movs	r0, #0
   1b57a:	f000 f9a1 	bl	1b8c0 <os_sched>
    OS_ENTER_CRITICAL(sr);
   1b57e:	f000 fba1 	bl	1bcc4 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   1b582:	7b6b      	ldrb	r3, [r5, #13]
   1b584:	f023 0304 	bic.w	r3, r3, #4
   1b588:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
   1b58a:	f000 fba1 	bl	1bcd0 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
   1b58e:	68a3      	ldr	r3, [r4, #8]
   1b590:	42ab      	cmp	r3, r5
   1b592:	d001      	beq.n	1b598 <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
   1b594:	2006      	movs	r0, #6
   1b596:	e7c9      	b.n	1b52c <os_mutex_pend+0x64>
        ret = OS_OK;
   1b598:	2000      	movs	r0, #0
   1b59a:	e7c7      	b.n	1b52c <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
   1b59c:	2009      	movs	r0, #9
   1b59e:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1b5a0:	2003      	movs	r0, #3
}
   1b5a2:	4770      	bx	lr
   1b5a4:	2000de88 	.word	0x2000de88

0001b5a8 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   1b5a8:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1b5aa:	4b05      	ldr	r3, [pc, #20]	; (1b5c0 <os_sanity_check_list_lock+0x18>)
   1b5ac:	6818      	ldr	r0, [r3, #0]
   1b5ae:	b900      	cbnz	r0, 1b5b2 <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1b5b0:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   1b5b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b5b6:	4803      	ldr	r0, [pc, #12]	; (1b5c4 <os_sanity_check_list_lock+0x1c>)
   1b5b8:	f7ff ff86 	bl	1b4c8 <os_mutex_pend>
err:
   1b5bc:	e7f8      	b.n	1b5b0 <os_sanity_check_list_lock+0x8>
   1b5be:	bf00      	nop
   1b5c0:	2000de88 	.word	0x2000de88
   1b5c4:	2000dea0 	.word	0x2000dea0

0001b5c8 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   1b5c8:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1b5ca:	4b04      	ldr	r3, [pc, #16]	; (1b5dc <os_sanity_check_list_unlock+0x14>)
   1b5cc:	6818      	ldr	r0, [r3, #0]
   1b5ce:	b900      	cbnz	r0, 1b5d2 <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1b5d0:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   1b5d2:	4803      	ldr	r0, [pc, #12]	; (1b5e0 <os_sanity_check_list_unlock+0x18>)
   1b5d4:	f7ff ff1c 	bl	1b410 <os_mutex_release>
err:
   1b5d8:	e7fa      	b.n	1b5d0 <os_sanity_check_list_unlock+0x8>
   1b5da:	bf00      	nop
   1b5dc:	2000de88 	.word	0x2000de88
   1b5e0:	2000dea0 	.word	0x2000dea0

0001b5e4 <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
   1b5e4:	2300      	movs	r3, #0
   1b5e6:	6003      	str	r3, [r0, #0]
   1b5e8:	6043      	str	r3, [r0, #4]
   1b5ea:	6083      	str	r3, [r0, #8]
   1b5ec:	60c3      	str	r3, [r0, #12]
   1b5ee:	6103      	str	r3, [r0, #16]
}
   1b5f0:	4618      	mov	r0, r3
   1b5f2:	4770      	bx	lr

0001b5f4 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   1b5f4:	b510      	push	{r4, lr}
   1b5f6:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   1b5f8:	f7ff ffd6 	bl	1b5a8 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   1b5fc:	4603      	mov	r3, r0
   1b5fe:	b108      	cbz	r0, 1b604 <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
   1b600:	4618      	mov	r0, r3
   1b602:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   1b604:	4b03      	ldr	r3, [pc, #12]	; (1b614 <os_sanity_check_register+0x20>)
   1b606:	681a      	ldr	r2, [r3, #0]
   1b608:	6122      	str	r2, [r4, #16]
   1b60a:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   1b60c:	f7ff ffdc 	bl	1b5c8 <os_sanity_check_list_unlock>
   1b610:	4603      	mov	r3, r0
err:
   1b612:	e7f5      	b.n	1b600 <os_sanity_check_register+0xc>
   1b614:	2000d9b0 	.word	0x2000d9b0

0001b618 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   1b618:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   1b61a:	f7ff ffc5 	bl	1b5a8 <os_sanity_check_list_lock>
    if (rc != 0) {
   1b61e:	b910      	cbnz	r0, 1b626 <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1b620:	4b17      	ldr	r3, [pc, #92]	; (1b680 <os_sanity_run+0x68>)
   1b622:	681c      	ldr	r4, [r3, #0]
   1b624:	e00e      	b.n	1b644 <os_sanity_run+0x2c>
        assert(0);
   1b626:	2300      	movs	r3, #0
   1b628:	461a      	mov	r2, r3
   1b62a:	4619      	mov	r1, r3
   1b62c:	4618      	mov	r0, r3
   1b62e:	f7ff f8b3 	bl	1a798 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   1b632:	f000 facf 	bl	1bbd4 <os_time_get>
   1b636:	6823      	ldr	r3, [r4, #0]
   1b638:	6862      	ldr	r2, [r4, #4]
   1b63a:	4413      	add	r3, r2
   1b63c:	1ac3      	subs	r3, r0, r3
   1b63e:	2b00      	cmp	r3, #0
   1b640:	dc0d      	bgt.n	1b65e <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1b642:	6924      	ldr	r4, [r4, #16]
   1b644:	b18c      	cbz	r4, 1b66a <os_sanity_run+0x52>
        if (sc->sc_func) {
   1b646:	68a3      	ldr	r3, [r4, #8]
   1b648:	2b00      	cmp	r3, #0
   1b64a:	d0f2      	beq.n	1b632 <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
   1b64c:	68e1      	ldr	r1, [r4, #12]
   1b64e:	4620      	mov	r0, r4
   1b650:	4798      	blx	r3
            if (rc == OS_OK) {
   1b652:	2800      	cmp	r0, #0
   1b654:	d1ed      	bne.n	1b632 <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
   1b656:	f000 fabd 	bl	1bbd4 <os_time_get>
   1b65a:	6020      	str	r0, [r4, #0]
                continue;
   1b65c:	e7f1      	b.n	1b642 <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   1b65e:	2300      	movs	r3, #0
   1b660:	461a      	mov	r2, r3
   1b662:	4619      	mov	r1, r3
   1b664:	4618      	mov	r0, r3
   1b666:	f7ff f897 	bl	1a798 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   1b66a:	f7ff ffad 	bl	1b5c8 <os_sanity_check_list_unlock>
    if (rc != 0) {
   1b66e:	b900      	cbnz	r0, 1b672 <os_sanity_run+0x5a>
        assert(0);
    }
}
   1b670:	bd10      	pop	{r4, pc}
        assert(0);
   1b672:	2300      	movs	r3, #0
   1b674:	461a      	mov	r2, r3
   1b676:	4619      	mov	r1, r3
   1b678:	4618      	mov	r0, r3
   1b67a:	f7ff f88d 	bl	1a798 <__assert_func>
   1b67e:	bf00      	nop
   1b680:	2000d9b0 	.word	0x2000d9b0

0001b684 <os_sanity_init>:

int
os_sanity_init(void)
{
   1b684:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   1b686:	4802      	ldr	r0, [pc, #8]	; (1b690 <os_sanity_init+0xc>)
   1b688:	f7ff feb8 	bl	1b3fc <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   1b68c:	bd08      	pop	{r3, pc}
   1b68e:	bf00      	nop
   1b690:	2000dea0 	.word	0x2000dea0

0001b694 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   1b694:	7b03      	ldrb	r3, [r0, #12]
   1b696:	2b01      	cmp	r3, #1
   1b698:	d001      	beq.n	1b69e <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   1b69a:	2002      	movs	r0, #2
}
   1b69c:	4770      	bx	lr
{
   1b69e:	b510      	push	{r4, lr}
   1b6a0:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1b6a2:	f000 fb0f 	bl	1bcc4 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1b6a6:	4b0f      	ldr	r3, [pc, #60]	; (1b6e4 <os_sched_insert+0x50>)
   1b6a8:	681b      	ldr	r3, [r3, #0]
   1b6aa:	b12b      	cbz	r3, 1b6b8 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   1b6ac:	7ae1      	ldrb	r1, [r4, #11]
   1b6ae:	7ada      	ldrb	r2, [r3, #11]
   1b6b0:	4291      	cmp	r1, r2
   1b6b2:	d301      	bcc.n	1b6b8 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1b6b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1b6b6:	e7f8      	b.n	1b6aa <os_sched_insert+0x16>
    if (entry) {
   1b6b8:	b153      	cbz	r3, 1b6d0 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   1b6ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1b6bc:	64a2      	str	r2, [r4, #72]	; 0x48
   1b6be:	6463      	str	r3, [r4, #68]	; 0x44
   1b6c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1b6c2:	6014      	str	r4, [r2, #0]
   1b6c4:	3444      	adds	r4, #68	; 0x44
   1b6c6:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   1b6c8:	f000 fb02 	bl	1bcd0 <os_arch_restore_sr>
    return (0);
   1b6cc:	2000      	movs	r0, #0
}
   1b6ce:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   1b6d0:	2300      	movs	r3, #0
   1b6d2:	6463      	str	r3, [r4, #68]	; 0x44
   1b6d4:	4b03      	ldr	r3, [pc, #12]	; (1b6e4 <os_sched_insert+0x50>)
   1b6d6:	685a      	ldr	r2, [r3, #4]
   1b6d8:	64a2      	str	r2, [r4, #72]	; 0x48
   1b6da:	6014      	str	r4, [r2, #0]
   1b6dc:	3444      	adds	r4, #68	; 0x44
   1b6de:	605c      	str	r4, [r3, #4]
   1b6e0:	e7f2      	b.n	1b6c8 <os_sched_insert+0x34>
   1b6e2:	bf00      	nop
   1b6e4:	20000114 	.word	0x20000114

0001b6e8 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   1b6e8:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   1b6ea:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1b6ec:	3301      	adds	r3, #1
   1b6ee:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
   1b6f0:	4b06      	ldr	r3, [pc, #24]	; (1b70c <os_sched_ctx_sw_hook+0x24>)
   1b6f2:	681c      	ldr	r4, [r3, #0]
   1b6f4:	4b06      	ldr	r3, [pc, #24]	; (1b710 <os_sched_ctx_sw_hook+0x28>)
   1b6f6:	6818      	ldr	r0, [r3, #0]
   1b6f8:	4906      	ldr	r1, [pc, #24]	; (1b714 <os_sched_ctx_sw_hook+0x2c>)
   1b6fa:	680b      	ldr	r3, [r1, #0]
   1b6fc:	1ac2      	subs	r2, r0, r3
   1b6fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1b700:	4413      	add	r3, r2
   1b702:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
   1b704:	6008      	str	r0, [r1, #0]
}
   1b706:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b70a:	4770      	bx	lr
   1b70c:	2000deb0 	.word	0x2000deb0
   1b710:	2000dec0 	.word	0x2000dec0
   1b714:	2000deac 	.word	0x2000deac

0001b718 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   1b718:	4b01      	ldr	r3, [pc, #4]	; (1b720 <os_sched_get_current_task+0x8>)
   1b71a:	6818      	ldr	r0, [r3, #0]
   1b71c:	4770      	bx	lr
   1b71e:	bf00      	nop
   1b720:	2000deb0 	.word	0x2000deb0

0001b724 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   1b724:	4b01      	ldr	r3, [pc, #4]	; (1b72c <os_sched_set_current_task+0x8>)
   1b726:	6018      	str	r0, [r3, #0]
}
   1b728:	4770      	bx	lr
   1b72a:	bf00      	nop
   1b72c:	2000deb0 	.word	0x2000deb0

0001b730 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   1b730:	b538      	push	{r3, r4, r5, lr}
   1b732:	4604      	mov	r4, r0
   1b734:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1b736:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1b738:	b1d3      	cbz	r3, 1b770 <os_sched_sleep+0x40>
   1b73a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b73c:	649a      	str	r2, [r3, #72]	; 0x48
   1b73e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1b740:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1b742:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   1b744:	2302      	movs	r3, #2
   1b746:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   1b748:	f000 fa44 	bl	1bbd4 <os_time_get>
   1b74c:	4428      	add	r0, r5
   1b74e:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   1b750:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1b754:	d010      	beq.n	1b778 <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1b756:	4b18      	ldr	r3, [pc, #96]	; (1b7b8 <os_sched_sleep+0x88>)
   1b758:	681b      	ldr	r3, [r3, #0]
   1b75a:	b1d3      	cbz	r3, 1b792 <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1b75c:	7b5a      	ldrb	r2, [r3, #13]
   1b75e:	f012 0f01 	tst.w	r2, #1
   1b762:	d116      	bne.n	1b792 <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   1b764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1b766:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1b768:	2a00      	cmp	r2, #0
   1b76a:	dc12      	bgt.n	1b792 <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1b76c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1b76e:	e7f4      	b.n	1b75a <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1b770:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b772:	4b12      	ldr	r3, [pc, #72]	; (1b7bc <os_sched_sleep+0x8c>)
   1b774:	605a      	str	r2, [r3, #4]
   1b776:	e7e2      	b.n	1b73e <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   1b778:	7b63      	ldrb	r3, [r4, #13]
   1b77a:	f043 0301 	orr.w	r3, r3, #1
   1b77e:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1b780:	2300      	movs	r3, #0
   1b782:	6463      	str	r3, [r4, #68]	; 0x44
   1b784:	4b0c      	ldr	r3, [pc, #48]	; (1b7b8 <os_sched_sleep+0x88>)
   1b786:	685a      	ldr	r2, [r3, #4]
   1b788:	64a2      	str	r2, [r4, #72]	; 0x48
   1b78a:	6014      	str	r4, [r2, #0]
   1b78c:	3444      	adds	r4, #68	; 0x44
   1b78e:	605c      	str	r4, [r3, #4]
   1b790:	e007      	b.n	1b7a2 <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
   1b792:	b143      	cbz	r3, 1b7a6 <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   1b794:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1b796:	64a2      	str	r2, [r4, #72]	; 0x48
   1b798:	6463      	str	r3, [r4, #68]	; 0x44
   1b79a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1b79c:	6014      	str	r4, [r2, #0]
   1b79e:	3444      	adds	r4, #68	; 0x44
   1b7a0:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   1b7a2:	2000      	movs	r0, #0
   1b7a4:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1b7a6:	2300      	movs	r3, #0
   1b7a8:	6463      	str	r3, [r4, #68]	; 0x44
   1b7aa:	4b03      	ldr	r3, [pc, #12]	; (1b7b8 <os_sched_sleep+0x88>)
   1b7ac:	685a      	ldr	r2, [r3, #4]
   1b7ae:	64a2      	str	r2, [r4, #72]	; 0x48
   1b7b0:	6014      	str	r4, [r2, #0]
   1b7b2:	3444      	adds	r4, #68	; 0x44
   1b7b4:	605c      	str	r4, [r3, #4]
   1b7b6:	e7f4      	b.n	1b7a2 <os_sched_sleep+0x72>
   1b7b8:	2000011c 	.word	0x2000011c
   1b7bc:	20000114 	.word	0x20000114

0001b7c0 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   1b7c0:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   1b7c2:	7b03      	ldrb	r3, [r0, #12]
   1b7c4:	2b02      	cmp	r3, #2
   1b7c6:	d108      	bne.n	1b7da <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   1b7c8:	69c3      	ldr	r3, [r0, #28]
   1b7ca:	b1db      	cbz	r3, 1b804 <os_sched_wakeup+0x44>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1b7cc:	681a      	ldr	r2, [r3, #0]
   1b7ce:	b152      	cbz	r2, 1b7e6 <os_sched_wakeup+0x26>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1b7d0:	4282      	cmp	r2, r0
   1b7d2:	d10f      	bne.n	1b7f4 <os_sched_wakeup+0x34>
   1b7d4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1b7d6:	601a      	str	r2, [r3, #0]
   1b7d8:	e011      	b.n	1b7fe <os_sched_wakeup+0x3e>
    assert(t->t_state == OS_TASK_SLEEP);
   1b7da:	2300      	movs	r3, #0
   1b7dc:	461a      	mov	r2, r3
   1b7de:	4619      	mov	r1, r3
   1b7e0:	4618      	mov	r0, r3
   1b7e2:	f7fe ffd9 	bl	1a798 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1b7e6:	2300      	movs	r3, #0
   1b7e8:	461a      	mov	r2, r3
   1b7ea:	4619      	mov	r1, r3
   1b7ec:	4618      	mov	r0, r3
   1b7ee:	f7fe ffd3 	bl	1a798 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1b7f2:	461a      	mov	r2, r3
   1b7f4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1b7f6:	4283      	cmp	r3, r0
   1b7f8:	d1fb      	bne.n	1b7f2 <os_sched_wakeup+0x32>
   1b7fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1b7fc:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   1b7fe:	2300      	movs	r3, #0
   1b800:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   1b802:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   1b804:	2301      	movs	r3, #1
   1b806:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   1b808:	2300      	movs	r3, #0
   1b80a:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   1b80c:	7b43      	ldrb	r3, [r0, #13]
   1b80e:	f023 0301 	bic.w	r3, r3, #1
   1b812:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1b814:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1b816:	b143      	cbz	r3, 1b82a <os_sched_wakeup+0x6a>
   1b818:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b81a:	649a      	str	r2, [r3, #72]	; 0x48
   1b81c:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1b81e:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1b820:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   1b822:	f7ff ff37 	bl	1b694 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   1b826:	2000      	movs	r0, #0
   1b828:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1b82a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b82c:	4b01      	ldr	r3, [pc, #4]	; (1b834 <os_sched_wakeup+0x74>)
   1b82e:	605a      	str	r2, [r3, #4]
   1b830:	e7f4      	b.n	1b81c <os_sched_wakeup+0x5c>
   1b832:	bf00      	nop
   1b834:	2000011c 	.word	0x2000011c

0001b838 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   1b838:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   1b83a:	f000 f9cb 	bl	1bbd4 <os_time_get>
   1b83e:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   1b840:	f000 fa40 	bl	1bcc4 <os_arch_save_sr>
   1b844:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   1b846:	4b0a      	ldr	r3, [pc, #40]	; (1b870 <os_sched_os_timer_exp+0x38>)
   1b848:	6818      	ldr	r0, [r3, #0]
    while (t) {
   1b84a:	b160      	cbz	r0, 1b866 <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   1b84c:	7b43      	ldrb	r3, [r0, #13]
   1b84e:	f013 0f01 	tst.w	r3, #1
   1b852:	d108      	bne.n	1b866 <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
   1b854:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   1b856:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1b858:	1aeb      	subs	r3, r5, r3
   1b85a:	2b00      	cmp	r3, #0
   1b85c:	db03      	blt.n	1b866 <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
   1b85e:	f7ff ffaf 	bl	1b7c0 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   1b862:	4620      	mov	r0, r4
   1b864:	e7f1      	b.n	1b84a <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
   1b866:	4630      	mov	r0, r6
   1b868:	f000 fa32 	bl	1bcd0 <os_arch_restore_sr>
}
   1b86c:	bd70      	pop	{r4, r5, r6, pc}
   1b86e:	bf00      	nop
   1b870:	2000011c 	.word	0x2000011c

0001b874 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   1b874:	b510      	push	{r4, lr}
   1b876:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   1b878:	f000 fa2d 	bl	1bcd6 <os_arch_in_critical>
   1b87c:	b150      	cbz	r0, 1b894 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   1b87e:	4b0c      	ldr	r3, [pc, #48]	; (1b8b0 <os_sched_wakeup_ticks+0x3c>)
   1b880:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   1b882:	b17b      	cbz	r3, 1b8a4 <os_sched_wakeup_ticks+0x30>
   1b884:	7b5a      	ldrb	r2, [r3, #13]
   1b886:	f012 0f01 	tst.w	r2, #1
   1b88a:	d10e      	bne.n	1b8aa <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   1b88c:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1b88e:	1b00      	subs	r0, r0, r4
   1b890:	d406      	bmi.n	1b8a0 <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   1b892:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1b894:	2300      	movs	r3, #0
   1b896:	461a      	mov	r2, r3
   1b898:	4619      	mov	r1, r3
   1b89a:	4618      	mov	r0, r3
   1b89c:	f7fe ff7c 	bl	1a798 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   1b8a0:	2000      	movs	r0, #0
   1b8a2:	e7f6      	b.n	1b892 <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   1b8a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b8a8:	e7f3      	b.n	1b892 <os_sched_wakeup_ticks+0x1e>
   1b8aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1b8ae:	e7f0      	b.n	1b892 <os_sched_wakeup_ticks+0x1e>
   1b8b0:	2000011c 	.word	0x2000011c

0001b8b4 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   1b8b4:	4b01      	ldr	r3, [pc, #4]	; (1b8bc <os_sched_next_task+0x8>)
   1b8b6:	6818      	ldr	r0, [r3, #0]
   1b8b8:	4770      	bx	lr
   1b8ba:	bf00      	nop
   1b8bc:	20000114 	.word	0x20000114

0001b8c0 <os_sched>:
{
   1b8c0:	b538      	push	{r3, r4, r5, lr}
   1b8c2:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1b8c4:	f000 f9fe 	bl	1bcc4 <os_arch_save_sr>
   1b8c8:	4605      	mov	r5, r0
    if (!next_t) {
   1b8ca:	b134      	cbz	r4, 1b8da <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   1b8cc:	4620      	mov	r0, r4
   1b8ce:	f000 f9ef 	bl	1bcb0 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   1b8d2:	4628      	mov	r0, r5
   1b8d4:	f000 f9fc 	bl	1bcd0 <os_arch_restore_sr>
}
   1b8d8:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   1b8da:	f7ff ffeb 	bl	1b8b4 <os_sched_next_task>
   1b8de:	4604      	mov	r4, r0
   1b8e0:	e7f4      	b.n	1b8cc <os_sched+0xc>
	...

0001b8e4 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   1b8e4:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   1b8e6:	7b03      	ldrb	r3, [r0, #12]
   1b8e8:	2b01      	cmp	r3, #1
   1b8ea:	d000      	beq.n	1b8ee <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   1b8ec:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1b8ee:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1b8f0:	b13b      	cbz	r3, 1b902 <os_sched_resort+0x1e>
   1b8f2:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b8f4:	649a      	str	r2, [r3, #72]	; 0x48
   1b8f6:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1b8f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1b8fa:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   1b8fc:	f7ff feca 	bl	1b694 <os_sched_insert>
}
   1b900:	e7f4      	b.n	1b8ec <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1b902:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b904:	4b01      	ldr	r3, [pc, #4]	; (1b90c <os_sched_resort+0x28>)
   1b906:	605a      	str	r2, [r3, #4]
   1b908:	e7f5      	b.n	1b8f6 <os_sched_resort+0x12>
   1b90a:	bf00      	nop
   1b90c:	20000114 	.word	0x20000114

0001b910 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   1b910:	4603      	mov	r3, r0
   1b912:	b118      	cbz	r0, 1b91c <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   1b914:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   1b916:	2000      	movs	r0, #0
   1b918:	6018      	str	r0, [r3, #0]
   1b91a:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1b91c:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   1b91e:	4770      	bx	lr

0001b920 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   1b920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   1b922:	4b17      	ldr	r3, [pc, #92]	; (1b980 <os_sem_release+0x60>)
   1b924:	681b      	ldr	r3, [r3, #0]
   1b926:	b33b      	cbz	r3, 1b978 <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1b928:	b340      	cbz	r0, 1b97c <os_sem_release+0x5c>
   1b92a:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   1b92c:	f7ff fef4 	bl	1b718 <os_sched_get_current_task>
   1b930:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   1b932:	f000 f9c7 	bl	1bcc4 <os_arch_save_sr>
   1b936:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   1b938:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   1b93a:	b165      	cbz	r5, 1b956 <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1b93c:	7b6b      	ldrb	r3, [r5, #13]
   1b93e:	f023 0302 	bic.w	r3, r3, #2
   1b942:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   1b944:	4628      	mov	r0, r5
   1b946:	f7ff ff3b 	bl	1b7c0 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
   1b94a:	7afa      	ldrb	r2, [r7, #11]
   1b94c:	7aeb      	ldrb	r3, [r5, #11]
   1b94e:	429a      	cmp	r2, r3
   1b950:	d80b      	bhi.n	1b96a <os_sem_release+0x4a>
    resched = 0;
   1b952:	2400      	movs	r4, #0
   1b954:	e003      	b.n	1b95e <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   1b956:	88e3      	ldrh	r3, [r4, #6]
   1b958:	3301      	adds	r3, #1
   1b95a:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   1b95c:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   1b95e:	4630      	mov	r0, r6
   1b960:	f000 f9b6 	bl	1bcd0 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1b964:	b91c      	cbnz	r4, 1b96e <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   1b966:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   1b968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   1b96a:	2401      	movs	r4, #1
   1b96c:	e7f7      	b.n	1b95e <os_sem_release+0x3e>
        os_sched(rdy);
   1b96e:	4628      	mov	r0, r5
   1b970:	f7ff ffa6 	bl	1b8c0 <os_sched>
    ret = OS_OK;
   1b974:	2000      	movs	r0, #0
   1b976:	e7f7      	b.n	1b968 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   1b978:	2009      	movs	r0, #9
   1b97a:	e7f5      	b.n	1b968 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   1b97c:	2003      	movs	r0, #3
   1b97e:	e7f3      	b.n	1b968 <os_sem_release+0x48>
   1b980:	2000de88 	.word	0x2000de88

0001b984 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   1b984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   1b986:	4b2c      	ldr	r3, [pc, #176]	; (1ba38 <os_sem_pend+0xb4>)
   1b988:	681b      	ldr	r3, [r3, #0]
   1b98a:	2b00      	cmp	r3, #0
   1b98c:	d04f      	beq.n	1ba2e <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1b98e:	2800      	cmp	r0, #0
   1b990:	d04f      	beq.n	1ba32 <os_sem_pend+0xae>
   1b992:	460d      	mov	r5, r1
   1b994:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   1b996:	f7ff febf 	bl	1b718 <os_sched_get_current_task>
   1b99a:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
   1b99c:	f000 f992 	bl	1bcc4 <os_arch_save_sr>
   1b9a0:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   1b9a2:	88e3      	ldrh	r3, [r4, #6]
   1b9a4:	b14b      	cbz	r3, 1b9ba <os_sem_pend+0x36>
        sem->sem_tokens--;
   1b9a6:	3b01      	subs	r3, #1
   1b9a8:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1b9aa:	2400      	movs	r4, #0
    sched = 0;
   1b9ac:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   1b9ae:	4638      	mov	r0, r7
   1b9b0:	f000 f98e 	bl	1bcd0 <os_arch_restore_sr>

    if (sched) {
   1b9b4:	bb45      	cbnz	r5, 1ba08 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   1b9b6:	4620      	mov	r0, r4
   1b9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   1b9ba:	b315      	cbz	r5, 1ba02 <os_sem_pend+0x7e>
        current->t_obj = sem;
   1b9bc:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   1b9be:	7b73      	ldrb	r3, [r6, #13]
   1b9c0:	f043 0302 	orr.w	r3, r3, #2
   1b9c4:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   1b9c6:	f8d4 c000 	ldr.w	ip, [r4]
   1b9ca:	f1bc 0f00 	cmp.w	ip, #0
   1b9ce:	d00e      	beq.n	1b9ee <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1b9d0:	4663      	mov	r3, ip
        last = NULL;
   1b9d2:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1b9d4:	b133      	cbz	r3, 1b9e4 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   1b9d6:	7af1      	ldrb	r1, [r6, #11]
   1b9d8:	7ada      	ldrb	r2, [r3, #11]
   1b9da:	4291      	cmp	r1, r2
   1b9dc:	d302      	bcc.n	1b9e4 <os_sem_pend+0x60>
                last = entry;
   1b9de:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1b9e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1b9e2:	e7f7      	b.n	1b9d4 <os_sem_pend+0x50>
        if (last) {
   1b9e4:	b118      	cbz	r0, 1b9ee <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   1b9e6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1b9e8:	64f3      	str	r3, [r6, #76]	; 0x4c
   1b9ea:	64c6      	str	r6, [r0, #76]	; 0x4c
   1b9ec:	e002      	b.n	1b9f4 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   1b9ee:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
   1b9f2:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
   1b9f4:	4629      	mov	r1, r5
   1b9f6:	4630      	mov	r0, r6
   1b9f8:	f7ff fe9a 	bl	1b730 <os_sched_sleep>
        ret = OS_OK;
   1b9fc:	2400      	movs	r4, #0
        sched = 1;
   1b9fe:	2501      	movs	r5, #1
   1ba00:	e7d5      	b.n	1b9ae <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   1ba02:	2406      	movs	r4, #6
    sched = 0;
   1ba04:	2500      	movs	r5, #0
   1ba06:	e7d2      	b.n	1b9ae <os_sem_pend+0x2a>
        os_sched(NULL);
   1ba08:	2000      	movs	r0, #0
   1ba0a:	f7ff ff59 	bl	1b8c0 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   1ba0e:	7b73      	ldrb	r3, [r6, #13]
   1ba10:	f013 0f02 	tst.w	r3, #2
   1ba14:	d101      	bne.n	1ba1a <os_sem_pend+0x96>
            ret = OS_OK;
   1ba16:	2400      	movs	r4, #0
   1ba18:	e7cd      	b.n	1b9b6 <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   1ba1a:	f000 f953 	bl	1bcc4 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1ba1e:	7b73      	ldrb	r3, [r6, #13]
   1ba20:	f023 0302 	bic.w	r3, r3, #2
   1ba24:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
   1ba26:	f000 f953 	bl	1bcd0 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   1ba2a:	2406      	movs	r4, #6
   1ba2c:	e7c3      	b.n	1b9b6 <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   1ba2e:	2409      	movs	r4, #9
   1ba30:	e7c1      	b.n	1b9b6 <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   1ba32:	2403      	movs	r4, #3
   1ba34:	e7bf      	b.n	1b9b6 <os_sem_pend+0x32>
   1ba36:	bf00      	nop
   1ba38:	2000de88 	.word	0x2000de88

0001ba3c <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   1ba3c:	2300      	movs	r3, #0
   1ba3e:	e003      	b.n	1ba48 <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
   1ba40:	4a03      	ldr	r2, [pc, #12]	; (1ba50 <_clear_stack+0x14>)
   1ba42:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   1ba46:	3301      	adds	r3, #1
   1ba48:	428b      	cmp	r3, r1
   1ba4a:	dbf9      	blt.n	1ba40 <_clear_stack+0x4>
    }
}
   1ba4c:	4770      	bx	lr
   1ba4e:	bf00      	nop
   1ba50:	deadbeef 	.word	0xdeadbeef

0001ba54 <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
   1ba54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba58:	4604      	mov	r4, r0
   1ba5a:	460f      	mov	r7, r1
   1ba5c:	4690      	mov	r8, r2
   1ba5e:	461d      	mov	r5, r3
   1ba60:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
   1ba64:	2250      	movs	r2, #80	; 0x50
   1ba66:	2100      	movs	r1, #0
   1ba68:	f000 fa99 	bl	1bf9e <memset>

    t->t_func = func;
   1ba6c:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
   1ba70:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   1ba72:	f000 f927 	bl	1bcc4 <os_arch_save_sr>
    rc = g_task_id;
   1ba76:	4b2b      	ldr	r3, [pc, #172]	; (1bb24 <os_task_init+0xd0>)
   1ba78:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
   1ba7a:	1c6a      	adds	r2, r5, #1
   1ba7c:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1ba7e:	f000 f927 	bl	1bcd0 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
   1ba82:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
   1ba84:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1ba88:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
   1ba8a:	2301      	movs	r3, #1
   1ba8c:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   1ba8e:	6127      	str	r7, [r4, #16]
    t->t_next_wakeup = 0;
   1ba90:	2300      	movs	r3, #0
   1ba92:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
   1ba94:	f104 0720 	add.w	r7, r4, #32
   1ba98:	4638      	mov	r0, r7
   1ba9a:	f7ff fda3 	bl	1b5e4 <os_sanity_check_init>
    if (rc != OS_OK) {
   1ba9e:	4605      	mov	r5, r0
   1baa0:	2800      	cmp	r0, #0
   1baa2:	d132      	bne.n	1bb0a <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
   1baa4:	9b07      	ldr	r3, [sp, #28]
   1baa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1baaa:	d005      	beq.n	1bab8 <os_task_init+0x64>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
   1baac:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
   1baae:	4638      	mov	r0, r7
   1bab0:	f7ff fda0 	bl	1b5f4 <os_sanity_check_register>
        if (rc != OS_OK) {
   1bab4:	4605      	mov	r5, r0
   1bab6:	bb40      	cbnz	r0, 1bb0a <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
   1bab8:	4631      	mov	r1, r6
   1baba:	9808      	ldr	r0, [sp, #32]
   1babc:	f7ff ffbe 	bl	1ba3c <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
   1bac0:	9b08      	ldr	r3, [sp, #32]
   1bac2:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   1bac6:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
   1bac8:	8126      	strh	r6, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
   1baca:	4632      	mov	r2, r6
   1bacc:	4620      	mov	r0, r4
   1bace:	f000 f907 	bl	1bce0 <os_arch_task_stack_init>
   1bad2:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1bad4:	4b14      	ldr	r3, [pc, #80]	; (1bb28 <os_task_init+0xd4>)
   1bad6:	681b      	ldr	r3, [r3, #0]
   1bad8:	b15b      	cbz	r3, 1baf2 <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
   1bada:	7ae1      	ldrb	r1, [r4, #11]
   1badc:	7ada      	ldrb	r2, [r3, #11]
   1bade:	4291      	cmp	r1, r2
   1bae0:	d001      	beq.n	1bae6 <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1bae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bae4:	e7f8      	b.n	1bad8 <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
   1bae6:	2300      	movs	r3, #0
   1bae8:	461a      	mov	r2, r3
   1baea:	4619      	mov	r1, r3
   1baec:	4618      	mov	r0, r3
   1baee:	f7fe fe53 	bl	1a798 <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   1baf2:	6423      	str	r3, [r4, #64]	; 0x40
   1baf4:	4b0c      	ldr	r3, [pc, #48]	; (1bb28 <os_task_init+0xd4>)
   1baf6:	685a      	ldr	r2, [r3, #4]
   1baf8:	6014      	str	r4, [r2, #0]
   1bafa:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1bafe:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
   1bb00:	4620      	mov	r0, r4
   1bb02:	f7ff fdc7 	bl	1b694 <os_sched_insert>
   1bb06:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   1bb08:	b110      	cbz	r0, 1bb10 <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
   1bb0a:	4628      	mov	r0, r5
   1bb0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
   1bb10:	f7fe fefc 	bl	1a90c <os_started>
   1bb14:	b908      	cbnz	r0, 1bb1a <os_task_init+0xc6>
    return (0);
   1bb16:	4605      	mov	r5, r0
   1bb18:	e7f7      	b.n	1bb0a <os_task_init+0xb6>
        os_sched(NULL);
   1bb1a:	2000      	movs	r0, #0
   1bb1c:	f7ff fed0 	bl	1b8c0 <os_sched>
   1bb20:	e7f3      	b.n	1bb0a <os_task_init+0xb6>
   1bb22:	bf00      	nop
   1bb24:	2000deb4 	.word	0x2000deb4
   1bb28:	2000deb8 	.word	0x2000deb8

0001bb2c <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   1bb2c:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   1bb30:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   1bb32:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   1bb36:	e9d1 4500 	ldrd	r4, r5, [r1]
   1bb3a:	eb14 0b03 	adds.w	fp, r4, r3
   1bb3e:	f145 0c00 	adc.w	ip, r5, #0
   1bb42:	e9c2 bc00 	strd	fp, ip, [r2]
   1bb46:	688b      	ldr	r3, [r1, #8]
   1bb48:	f641 6184 	movw	r1, #7812	; 0x1e84
   1bb4c:	fb01 3000 	mla	r0, r1, r0, r3
   1bb50:	6090      	str	r0, [r2, #8]
   1bb52:	4b08      	ldr	r3, [pc, #32]	; (1bb74 <os_deltatime+0x48>)
   1bb54:	4298      	cmp	r0, r3
   1bb56:	dd0a      	ble.n	1bb6e <os_deltatime+0x42>
   1bb58:	f11b 0401 	adds.w	r4, fp, #1
   1bb5c:	f14c 0500 	adc.w	r5, ip, #0
   1bb60:	e9c2 4500 	strd	r4, r5, [r2]
   1bb64:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   1bb68:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   1bb6c:	6090      	str	r0, [r2, #8]
}
   1bb6e:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1bb72:	4770      	bx	lr
   1bb74:	000f423f 	.word	0x000f423f

0001bb78 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   1bb78:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   1bb7a:	1e04      	subs	r4, r0, #0
   1bb7c:	db0d      	blt.n	1bb9a <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   1bb7e:	f000 f8a1 	bl	1bcc4 <os_arch_save_sr>
   1bb82:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   1bb84:	4a11      	ldr	r2, [pc, #68]	; (1bbcc <os_time_tick+0x54>)
   1bb86:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
   1bb88:	18e0      	adds	r0, r4, r3
   1bb8a:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   1bb8c:	ea90 0f03 	teq	r0, r3
   1bb90:	d409      	bmi.n	1bba6 <os_time_tick+0x2e>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   1bb92:	4628      	mov	r0, r5
   1bb94:	f000 f89c 	bl	1bcd0 <os_arch_restore_sr>
}
   1bb98:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   1bb9a:	2300      	movs	r3, #0
   1bb9c:	461a      	mov	r2, r3
   1bb9e:	4619      	mov	r1, r3
   1bba0:	4618      	mov	r0, r3
   1bba2:	f7fe fdf9 	bl	1a798 <__assert_func>
        delta = g_os_time - basetod.ostime;
   1bba6:	4e0a      	ldr	r6, [pc, #40]	; (1bbd0 <os_time_tick+0x58>)
   1bba8:	4631      	mov	r1, r6
   1bbaa:	f851 4b08 	ldr.w	r4, [r1], #8
   1bbae:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   1bbb0:	460a      	mov	r2, r1
   1bbb2:	4620      	mov	r0, r4
   1bbb4:	f7ff ffba 	bl	1bb2c <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   1bbb8:	f106 0118 	add.w	r1, r6, #24
   1bbbc:	460a      	mov	r2, r1
   1bbbe:	4620      	mov	r0, r4
   1bbc0:	f7ff ffb4 	bl	1bb2c <os_deltatime>
        basetod.ostime = g_os_time;
   1bbc4:	4b01      	ldr	r3, [pc, #4]	; (1bbcc <os_time_tick+0x54>)
   1bbc6:	681b      	ldr	r3, [r3, #0]
   1bbc8:	6033      	str	r3, [r6, #0]
   1bbca:	e7e2      	b.n	1bb92 <os_time_tick+0x1a>
   1bbcc:	2000dec0 	.word	0x2000dec0
   1bbd0:	2000d9b8 	.word	0x2000d9b8

0001bbd4 <os_time_get>:
}
   1bbd4:	4b01      	ldr	r3, [pc, #4]	; (1bbdc <os_time_get+0x8>)
   1bbd6:	6818      	ldr	r0, [r3, #0]
   1bbd8:	4770      	bx	lr
   1bbda:	bf00      	nop
   1bbdc:	2000dec0 	.word	0x2000dec0

0001bbe0 <os_time_advance>:

void
os_time_advance(int ticks)
{
   1bbe0:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   1bbe2:	1e04      	subs	r4, r0, #0
   1bbe4:	db09      	blt.n	1bbfa <os_time_advance+0x1a>

    if (ticks > 0) {
   1bbe6:	2c00      	cmp	r4, #0
   1bbe8:	dd06      	ble.n	1bbf8 <os_time_advance+0x18>
        if (!os_started()) {
   1bbea:	f7fe fe8f 	bl	1a90c <os_started>
   1bbee:	b950      	cbnz	r0, 1bc06 <os_time_advance+0x26>
            g_os_time += ticks;
   1bbf0:	4a0a      	ldr	r2, [pc, #40]	; (1bc1c <os_time_advance+0x3c>)
   1bbf2:	6813      	ldr	r3, [r2, #0]
   1bbf4:	441c      	add	r4, r3
   1bbf6:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   1bbf8:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   1bbfa:	2300      	movs	r3, #0
   1bbfc:	461a      	mov	r2, r3
   1bbfe:	4619      	mov	r1, r3
   1bc00:	4618      	mov	r0, r3
   1bc02:	f7fe fdc9 	bl	1a798 <__assert_func>
            os_time_tick(ticks);
   1bc06:	4620      	mov	r0, r4
   1bc08:	f7ff ffb6 	bl	1bb78 <os_time_tick>
            os_callout_tick();
   1bc0c:	f7fe ffa6 	bl	1ab5c <os_callout_tick>
            os_sched_os_timer_exp();
   1bc10:	f7ff fe12 	bl	1b838 <os_sched_os_timer_exp>
            os_sched(NULL);
   1bc14:	2000      	movs	r0, #0
   1bc16:	f7ff fe53 	bl	1b8c0 <os_sched>
}
   1bc1a:	e7ed      	b.n	1bbf8 <os_time_advance+0x18>
   1bc1c:	2000dec0 	.word	0x2000dec0

0001bc20 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   1bc20:	b900      	cbnz	r0, 1bc24 <os_time_delay+0x4>
   1bc22:	4770      	bx	lr
{
   1bc24:	b538      	push	{r3, r4, r5, lr}
   1bc26:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1bc28:	f000 f84c 	bl	1bcc4 <os_arch_save_sr>
   1bc2c:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   1bc2e:	f7ff fd73 	bl	1b718 <os_sched_get_current_task>
   1bc32:	4621      	mov	r1, r4
   1bc34:	f7ff fd7c 	bl	1b730 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   1bc38:	4628      	mov	r0, r5
   1bc3a:	f000 f849 	bl	1bcd0 <os_arch_restore_sr>
        os_sched(NULL);
   1bc3e:	2000      	movs	r0, #0
   1bc40:	f7ff fe3e 	bl	1b8c0 <os_sched>
    }
}
   1bc44:	bd38      	pop	{r3, r4, r5, pc}
	...

0001bc48 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   1bc48:	b570      	push	{r4, r5, r6, lr}
   1bc4a:	4605      	mov	r5, r0
   1bc4c:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   1bc4e:	f000 f839 	bl	1bcc4 <os_arch_save_sr>
   1bc52:	4606      	mov	r6, r0
    if (tv != NULL) {
   1bc54:	b145      	cbz	r5, 1bc68 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   1bc56:	f7ff ffbd 	bl	1bbd4 <os_time_get>
   1bc5a:	4908      	ldr	r1, [pc, #32]	; (1bc7c <os_gettimeofday+0x34>)
   1bc5c:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   1bc60:	462a      	mov	r2, r5
   1bc62:	1ac0      	subs	r0, r0, r3
   1bc64:	f7ff ff62 	bl	1bb2c <os_deltatime>
    }

    if (tz != NULL) {
   1bc68:	b114      	cbz	r4, 1bc70 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   1bc6a:	4b04      	ldr	r3, [pc, #16]	; (1bc7c <os_gettimeofday+0x34>)
   1bc6c:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1bc6e:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   1bc70:	4630      	mov	r0, r6
   1bc72:	f000 f82d 	bl	1bcd0 <os_arch_restore_sr>

    return (0);
}
   1bc76:	2000      	movs	r0, #0
   1bc78:	bd70      	pop	{r4, r5, r6, pc}
   1bc7a:	bf00      	nop
   1bc7c:	2000d9b8 	.word	0x2000d9b8

0001bc80 <os_time_ms_to_ticks>:
  return (tv.tv_sec * 1000000 + tv.tv_usec);
}

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   1bc80:	b538      	push	{r3, r4, r5, lr}
   1bc82:	4604      	mov	r4, r0
   1bc84:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   1bc86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bc8a:	2300      	movs	r3, #0
   1bc8c:	01c0      	lsls	r0, r0, #7
   1bc8e:	0e61      	lsrs	r1, r4, #25
   1bc90:	f002 f88a 	bl	1dda8 <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   1bc94:	2901      	cmp	r1, #1
   1bc96:	bf08      	it	eq
   1bc98:	2800      	cmpeq	r0, #0
   1bc9a:	d202      	bcs.n	1bca2 <os_time_ms_to_ticks+0x22>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   1bc9c:	6028      	str	r0, [r5, #0]
    return 0;
   1bc9e:	2000      	movs	r0, #0
}
   1bca0:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
   1bca2:	2002      	movs	r0, #2
   1bca4:	e7fc      	b.n	1bca0 <os_time_ms_to_ticks+0x20>

0001bca6 <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
   1bca6:	b508      	push	{r3, lr}
    os_time_advance(1);
   1bca8:	2001      	movs	r0, #1
   1bcaa:	f7ff ff99 	bl	1bbe0 <os_time_advance>
}
   1bcae:	bd08      	pop	{r3, pc}

0001bcb0 <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
   1bcb0:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   1bcb2:	f7ff fd19 	bl	1b6e8 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   1bcb6:	4b02      	ldr	r3, [pc, #8]	; (1bcc0 <os_arch_ctx_sw+0x10>)
   1bcb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1bcbc:	605a      	str	r2, [r3, #4]
}
   1bcbe:	bd08      	pop	{r3, pc}
   1bcc0:	e000ed00 	.word	0xe000ed00

0001bcc4 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1bcc4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1bcc8:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
   1bcca:	f000 0001 	and.w	r0, r0, #1
   1bcce:	4770      	bx	lr

0001bcd0 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
   1bcd0:	b900      	cbnz	r0, 1bcd4 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   1bcd2:	b662      	cpsie	i
        __enable_irq();
    }
}
   1bcd4:	4770      	bx	lr

0001bcd6 <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1bcd6:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
   1bcda:	f000 0001 	and.w	r0, r0, #1
   1bcde:	4770      	bx	lr

0001bce0 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   1bce0:	b570      	push	{r4, r5, r6, lr}
   1bce2:	4606      	mov	r6, r0
   1bce4:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   1bce6:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
   1bcea:	2309      	movs	r3, #9
   1bcec:	e003      	b.n	1bcf6 <os_arch_task_stack_init+0x16>
        s[i] = 0;
   1bcee:	2200      	movs	r2, #0
   1bcf0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
   1bcf4:	3301      	adds	r3, #1
   1bcf6:	2b0d      	cmp	r3, #13
   1bcf8:	ddf9      	ble.n	1bcee <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   1bcfa:	4620      	mov	r0, r4
   1bcfc:	f000 f8b6 	bl	1be6c <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   1bd00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1bd04:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
   1bd08:	6973      	ldr	r3, [r6, #20]
   1bd0a:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   1bd0e:	69b3      	ldr	r3, [r6, #24]
   1bd10:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
   1bd14:	f06f 0302 	mvn.w	r3, #2
   1bd18:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
   1bd1c:	4620      	mov	r0, r4
   1bd1e:	bd70      	pop	{r4, r5, r6, pc}

0001bd20 <os_arch_init>:

void
os_arch_init(void)
{
   1bd20:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1bd22:	4a04      	ldr	r2, [pc, #16]	; (1bd34 <os_arch_init+0x14>)
   1bd24:	6953      	ldr	r3, [r2, #20]
   1bd26:	f043 0310 	orr.w	r3, r3, #16
   1bd2a:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   1bd2c:	f7fe fdf4 	bl	1a918 <os_init_idle_task>
}
   1bd30:	bd08      	pop	{r3, pc}
   1bd32:	bf00      	nop
   1bd34:	e000ed00 	.word	0xe000ed00

0001bd38 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   1bd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1bd3a:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1bd3e:	b90c      	cbnz	r4, 1bd44 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1bd40:	2400      	movs	r4, #0
   1bd42:	e009      	b.n	1bd58 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   1bd44:	2007      	movs	r0, #7
   1bd46:	e02e      	b.n	1bda6 <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   1bd48:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   1bd4c:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   1bd50:	26ff      	movs	r6, #255	; 0xff
   1bd52:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1bd56:	3401      	adds	r4, #1
   1bd58:	2cef      	cmp	r4, #239	; 0xef
   1bd5a:	d9f5      	bls.n	1bd48 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1bd5c:	f06f 040d 	mvn.w	r4, #13
   1bd60:	e007      	b.n	1bd72 <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   1bd62:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1bd64:	4e12      	ldr	r6, [pc, #72]	; (1bdb0 <os_arch_os_init+0x78>)
   1bd66:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1bd68:	3510      	adds	r5, #16
   1bd6a:	4f12      	ldr	r7, [pc, #72]	; (1bdb4 <os_arch_os_init+0x7c>)
   1bd6c:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   1bd70:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1bd72:	2c25      	cmp	r4, #37	; 0x25
   1bd74:	ddf5      	ble.n	1bd62 <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1bd76:	4c0e      	ldr	r4, [pc, #56]	; (1bdb0 <os_arch_os_init+0x78>)
   1bd78:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1bd7a:	4e0f      	ldr	r6, [pc, #60]	; (1bdb8 <os_arch_os_init+0x80>)
   1bd7c:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1bd7e:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1bd80:	4e0e      	ldr	r6, [pc, #56]	; (1bdbc <os_arch_os_init+0x84>)
   1bd82:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1bd84:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1bd86:	4e0e      	ldr	r6, [pc, #56]	; (1bdc0 <os_arch_os_init+0x88>)
   1bd88:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bd8a:	25e0      	movs	r5, #224	; 0xe0
   1bd8c:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   1bd90:	2520      	movs	r5, #32
   1bd92:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1bd94:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   1bd98:	f014 0f01 	tst.w	r4, #1
   1bd9c:	d004      	beq.n	1bda8 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   1bd9e:	f8df c024 	ldr.w	ip, [pc, #36]	; 1bdc4 <os_arch_os_init+0x8c>
   1bda2:	df00      	svc	0
        err = OS_OK;
   1bda4:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   1bda6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   1bda8:	f7ff ffba 	bl	1bd20 <os_arch_init>
        err = OS_OK;
   1bdac:	2000      	movs	r0, #0
   1bdae:	e7fa      	b.n	1bda6 <os_arch_os_init+0x6e>
   1bdb0:	e000ed00 	.word	0xe000ed00
   1bdb4:	0001bf0b 	.word	0x0001bf0b
   1bdb8:	0001be73 	.word	0x0001be73
   1bdbc:	0001beb9 	.word	0x0001beb9
   1bdc0:	0001beff 	.word	0x0001beff
   1bdc4:	0001bd21 	.word	0x0001bd21

0001bdc8 <os_arch_start>:

uint32_t
os_arch_start(void)
{
   1bdc8:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   1bdca:	f7ff fd73 	bl	1b8b4 <os_sched_next_task>
   1bdce:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   1bdd0:	f7ff fca8 	bl	1b724 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   1bdd4:	6823      	ldr	r3, [r4, #0]
   1bdd6:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1bdd8:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   1bddc:	2106      	movs	r1, #6
   1bdde:	2080      	movs	r0, #128	; 0x80
   1bde0:	f000 fde8 	bl	1c9b4 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   1bde4:	4b03      	ldr	r3, [pc, #12]	; (1bdf4 <os_arch_start+0x2c>)
   1bde6:	2201      	movs	r2, #1
   1bde8:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   1bdea:	4620      	mov	r0, r4
   1bdec:	f7ff ff60 	bl	1bcb0 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   1bdf0:	69a0      	ldr	r0, [r4, #24]
   1bdf2:	bd10      	pop	{r4, pc}
   1bdf4:	2000de88 	.word	0x2000de88

0001bdf8 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   1bdf8:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   1bdfa:	4814      	ldr	r0, [pc, #80]	; (1be4c <os_arch_os_start+0x54>)
   1bdfc:	6800      	ldr	r0, [r0, #0]
   1bdfe:	3804      	subs	r0, #4
   1be00:	f000 f82a 	bl	1be58 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1be04:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1be08:	b9d4      	cbnz	r4, 1be40 <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1be0a:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   1be0e:	f004 0403 	and.w	r4, r4, #3
   1be12:	2c03      	cmp	r4, #3
   1be14:	d808      	bhi.n	1be28 <os_arch_os_start+0x30>
   1be16:	e8df f004 	tbb	[pc, r4]
   1be1a:	1515      	.short	0x1515
   1be1c:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   1be1e:	4c0c      	ldr	r4, [pc, #48]	; (1be50 <os_arch_os_start+0x58>)
   1be20:	6824      	ldr	r4, [r4, #0]
   1be22:	f014 0f01 	tst.w	r4, #1
   1be26:	d10f      	bne.n	1be48 <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
   1be28:	f8df c028 	ldr.w	ip, [pc, #40]	; 1be54 <os_arch_os_start+0x5c>
   1be2c:	df00      	svc	0
   1be2e:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
   1be30:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   1be32:	4c07      	ldr	r4, [pc, #28]	; (1be50 <os_arch_os_start+0x58>)
   1be34:	6824      	ldr	r4, [r4, #0]
   1be36:	f014 0f01 	tst.w	r4, #1
   1be3a:	d1f5      	bne.n	1be28 <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
   1be3c:	2008      	movs	r0, #8
   1be3e:	e7f7      	b.n	1be30 <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
   1be40:	2007      	movs	r0, #7
   1be42:	e7f5      	b.n	1be30 <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
   1be44:	2008      	movs	r0, #8
   1be46:	e7f3      	b.n	1be30 <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
   1be48:	2008      	movs	r0, #8
   1be4a:	e7f1      	b.n	1be30 <os_arch_os_start+0x38>
   1be4c:	2000dde8 	.word	0x2000dde8
   1be50:	2000d9e8 	.word	0x2000d9e8
   1be54:	0001bdc9 	.word	0x0001bdc9

0001be58 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   1be58:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   1be5c:	4832      	ldr	r0, [pc, #200]	; (1bf28 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   1be5e:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   1be60:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   1be62:	f380 8814 	msr	CONTROL, r0
        ISB
   1be66:	f3bf 8f6f 	isb	sy
        BX      LR
   1be6a:	4770      	bx	lr

0001be6c <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   1be6c:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   1be70:	4770      	bx	lr

0001be72 <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   1be72:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   1be76:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   1be78:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   1be7c:	b951      	cbnz	r1, 1be94 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1be7e:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1be82:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   1be84:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1be86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   1be8a:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   1be8e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   1be92:	4770      	bx	lr

0001be94 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1be94:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   1be96:	4a25      	ldr	r2, [pc, #148]	; (1bf2c <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   1be98:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   1be9a:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   1be9c:	d809      	bhi.n	1beb2 <SVC_Done>

        LDR     R4,=SVC_Table-4
   1be9e:	4c24      	ldr	r4, [pc, #144]	; (1bf30 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   1bea0:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1bea4:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   1bea8:	47a0      	blx	r4

        MRS     R12,PSP
   1beaa:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   1beae:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0001beb2 <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1beb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   1beb6:	4770      	bx	lr

0001beb8 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1beb8:	4b1e      	ldr	r3, [pc, #120]	; (1bf34 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   1beba:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   1bebc:	4b1e      	ldr	r3, [pc, #120]	; (1bf38 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   1bebe:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   1bec0:	4291      	cmp	r1, r2
        IT      EQ
   1bec2:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   1bec4:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   1bec6:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
   1beca:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
   1bece:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
   1bed0:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
   1bed4:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1bed8:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1bedc:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   1bede:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
   1bee2:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
   1bee6:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
   1beea:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
   1beec:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
   1bef0:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
   1bef4:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
   1bef8:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1befc:	4770      	bx	lr

0001befe <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1befe:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   1bf00:	f7ff fed1 	bl	1bca6 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1bf04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   1bf08:	4770      	bx	lr

0001bf0a <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1bf0a:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1bf0e:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   1bf10:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   1bf14:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   1bf18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1bf1c:	4668      	mov	r0, sp
        BL      os_default_irq
   1bf1e:	f7fe fc61 	bl	1a7e4 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   1bf22:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   1bf26:	4770      	bx	lr
        LDR     R0,=os_flags
   1bf28:	2000d9e8 	.word	0x2000d9e8
        LDR     R2,=SVC_Count
   1bf2c:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   1bf30:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1bf34:	20000114 	.word	0x20000114
        LDR     R3,=g_current_task      /* Get current task */
   1bf38:	2000deb0 	.word	0x2000deb0

0001bf3c <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
   1bf3c:	b470      	push	{r4, r5, r6}
   1bf3e:	f04f 0500 	mov.w	r5, #0
   1bf42:	f022 0603 	bic.w	r6, r2, #3
   1bf46:	e005      	b.n	1bf54 <test1>

0001bf48 <loop1>:
   1bf48:	5943      	ldr	r3, [r0, r5]
   1bf4a:	594c      	ldr	r4, [r1, r5]
   1bf4c:	42a3      	cmp	r3, r4
   1bf4e:	d104      	bne.n	1bf5a <res1>
   1bf50:	f105 0504 	add.w	r5, r5, #4

0001bf54 <test1>:
   1bf54:	42b5      	cmp	r5, r6
   1bf56:	d1f7      	bne.n	1bf48 <loop1>
   1bf58:	e00d      	b.n	1bf76 <test2>

0001bf5a <res1>:
   1bf5a:	ba1b      	rev	r3, r3
   1bf5c:	ba24      	rev	r4, r4
   1bf5e:	1b1b      	subs	r3, r3, r4
   1bf60:	bf8c      	ite	hi
   1bf62:	2301      	movhi	r3, #1
   1bf64:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   1bf68:	e009      	b.n	1bf7e <done>

0001bf6a <loop2>:
   1bf6a:	5d43      	ldrb	r3, [r0, r5]
   1bf6c:	5d4c      	ldrb	r4, [r1, r5]
   1bf6e:	1b1b      	subs	r3, r3, r4
   1bf70:	d105      	bne.n	1bf7e <done>
   1bf72:	f105 0501 	add.w	r5, r5, #1

0001bf76 <test2>:
   1bf76:	4295      	cmp	r5, r2
   1bf78:	d1f7      	bne.n	1bf6a <loop2>
   1bf7a:	f04f 0300 	mov.w	r3, #0

0001bf7e <done>:
   1bf7e:	4618      	mov	r0, r3
   1bf80:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   1bf82:	4770      	bx	lr

0001bf84 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   1bf84:	e001      	b.n	1bf8a <test1>

0001bf86 <loop1>:
   1bf86:	588b      	ldr	r3, [r1, r2]
   1bf88:	5083      	str	r3, [r0, r2]

0001bf8a <test1>:
   1bf8a:	3a04      	subs	r2, #4
   1bf8c:	d5fb      	bpl.n	1bf86 <loop1>
   1bf8e:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   1bf92:	e001      	b.n	1bf98 <test2>

0001bf94 <loop2>:
   1bf94:	5c8b      	ldrb	r3, [r1, r2]
   1bf96:	5483      	strb	r3, [r0, r2]

0001bf98 <test2>:
   1bf98:	3a01      	subs	r2, #1
   1bf9a:	d5fb      	bpl.n	1bf94 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   1bf9c:	4770      	bx	lr

0001bf9e <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   1bf9e:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   1bfa0:	4605      	mov	r5, r0
   1bfa2:	b2c9      	uxtb	r1, r1
   1bfa4:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1bfa8:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1bfac:	18ab      	adds	r3, r5, r2
   1bfae:	2403      	movs	r4, #3
   1bfb0:	4023      	ands	r3, r4
   1bfb2:	1ad3      	subs	r3, r2, r3
   1bfb4:	d40b      	bmi.n	1bfce <memset+0x30>
   1bfb6:	e001      	b.n	1bfbc <memset+0x1e>
   1bfb8:	3a01      	subs	r2, #1
   1bfba:	54a9      	strb	r1, [r5, r2]
   1bfbc:	429a      	cmp	r2, r3
   1bfbe:	d1fb      	bne.n	1bfb8 <memset+0x1a>
   1bfc0:	e000      	b.n	1bfc4 <memset+0x26>
   1bfc2:	50a9      	str	r1, [r5, r2]
   1bfc4:	3a04      	subs	r2, #4
   1bfc6:	d5fc      	bpl.n	1bfc2 <memset+0x24>
   1bfc8:	3204      	adds	r2, #4
   1bfca:	e000      	b.n	1bfce <memset+0x30>
   1bfcc:	54a9      	strb	r1, [r5, r2]
   1bfce:	3a01      	subs	r2, #1
   1bfd0:	d5fc      	bpl.n	1bfcc <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   1bfd2:	bc30      	pop	{r4, r5}
   1bfd4:	4770      	bx	lr

0001bfd6 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   1bfd6:	b430      	push	{r4, r5}
   1bfd8:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   1bfda:	1c55      	adds	r5, r2, #1
   1bfdc:	7813      	ldrb	r3, [r2, #0]
   1bfde:	1c4c      	adds	r4, r1, #1
   1bfe0:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
   1bfe2:	1a18      	subs	r0, r3, r0
   1bfe4:	d103      	bne.n	1bfee <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
   1bfe6:	462a      	mov	r2, r5
   1bfe8:	4621      	mov	r1, r4
		if (d || !ch)
   1bfea:	2b00      	cmp	r3, #0
   1bfec:	d1f5      	bne.n	1bfda <strcmp+0x4>
			break;
	}

	return d;
}
   1bfee:	bc30      	pop	{r4, r5}
   1bff0:	4770      	bx	lr

0001bff2 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   1bff2:	4603      	mov	r3, r0
	while (*ss)
   1bff4:	e000      	b.n	1bff8 <strlen+0x6>
		ss++;
   1bff6:	3301      	adds	r3, #1
	while (*ss)
   1bff8:	781a      	ldrb	r2, [r3, #0]
   1bffa:	2a00      	cmp	r2, #0
   1bffc:	d1fb      	bne.n	1bff6 <strlen+0x4>
	return ss - s;
}
   1bffe:	1a18      	subs	r0, r3, r0
   1c000:	4770      	bx	lr

0001c002 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   1c002:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c006:	b082      	sub	sp, #8
   1c008:	e9cd 0100 	strd	r0, r1, [sp]
   1c00c:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   1c00e:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
   1c012:	2401      	movs	r4, #1
   1c014:	2500      	movs	r5, #0
    while (num / d >= p->base)
   1c016:	e004      	b.n	1c022 <ui2a+0x20>
        d *= p->base;
   1c018:	fb06 f305 	mul.w	r3, r6, r5
   1c01c:	fba4 4506 	umull	r4, r5, r4, r6
   1c020:	441d      	add	r5, r3
    while (num / d >= p->base)
   1c022:	4622      	mov	r2, r4
   1c024:	462b      	mov	r3, r5
   1c026:	e9dd 0100 	ldrd	r0, r1, [sp]
   1c02a:	f001 febd 	bl	1dda8 <__aeabi_uldivmod>
   1c02e:	f899 6003 	ldrb.w	r6, [r9, #3]
   1c032:	2700      	movs	r7, #0
   1c034:	42b9      	cmp	r1, r7
   1c036:	bf08      	it	eq
   1c038:	42b0      	cmpeq	r0, r6
   1c03a:	d2ed      	bcs.n	1c018 <ui2a+0x16>
    int n = 0;
   1c03c:	f04f 0a00 	mov.w	sl, #0
   1c040:	e007      	b.n	1c052 <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1c042:	2330      	movs	r3, #48	; 0x30
   1c044:	441e      	add	r6, r3
   1c046:	f888 6000 	strb.w	r6, [r8]
            ++n;
   1c04a:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1c04e:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
   1c052:	ea54 0305 	orrs.w	r3, r4, r5
   1c056:	d02e      	beq.n	1c0b6 <ui2a+0xb4>
        unsigned long long  dgt = num / d;
   1c058:	4622      	mov	r2, r4
   1c05a:	462b      	mov	r3, r5
   1c05c:	e9dd 0100 	ldrd	r0, r1, [sp]
   1c060:	f001 fea2 	bl	1dda8 <__aeabi_uldivmod>
   1c064:	4606      	mov	r6, r0
   1c066:	460f      	mov	r7, r1
        num %= d;
   1c068:	4622      	mov	r2, r4
   1c06a:	462b      	mov	r3, r5
   1c06c:	e9dd 0100 	ldrd	r0, r1, [sp]
   1c070:	f001 fe9a 	bl	1dda8 <__aeabi_uldivmod>
   1c074:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
   1c078:	f899 2003 	ldrb.w	r2, [r9, #3]
   1c07c:	2300      	movs	r3, #0
   1c07e:	4620      	mov	r0, r4
   1c080:	4629      	mov	r1, r5
   1c082:	f001 fe91 	bl	1dda8 <__aeabi_uldivmod>
   1c086:	4604      	mov	r4, r0
   1c088:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
   1c08a:	f1ba 0f00 	cmp.w	sl, #0
   1c08e:	d105      	bne.n	1c09c <ui2a+0x9a>
   1c090:	ea56 0307 	orrs.w	r3, r6, r7
   1c094:	d102      	bne.n	1c09c <ui2a+0x9a>
   1c096:	ea54 0305 	orrs.w	r3, r4, r5
   1c09a:	d1da      	bne.n	1c052 <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1c09c:	2f00      	cmp	r7, #0
   1c09e:	bf08      	it	eq
   1c0a0:	2e0a      	cmpeq	r6, #10
   1c0a2:	d3ce      	bcc.n	1c042 <ui2a+0x40>
   1c0a4:	f899 3002 	ldrb.w	r3, [r9, #2]
   1c0a8:	f013 0f04 	tst.w	r3, #4
   1c0ac:	d001      	beq.n	1c0b2 <ui2a+0xb0>
   1c0ae:	2337      	movs	r3, #55	; 0x37
   1c0b0:	e7c8      	b.n	1c044 <ui2a+0x42>
   1c0b2:	2357      	movs	r3, #87	; 0x57
   1c0b4:	e7c6      	b.n	1c044 <ui2a+0x42>
        }
    }
    *bf = 0;
   1c0b6:	2300      	movs	r3, #0
   1c0b8:	f888 3000 	strb.w	r3, [r8]
}
   1c0bc:	b002      	add	sp, #8
   1c0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c0c2 <i2a>:

static void i2a(long long int num, struct param *p)
{
   1c0c2:	b508      	push	{r3, lr}
    if (num < 0) {
   1c0c4:	2800      	cmp	r0, #0
   1c0c6:	f171 0300 	sbcs.w	r3, r1, #0
   1c0ca:	db02      	blt.n	1c0d2 <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   1c0cc:	f7ff ff99 	bl	1c002 <ui2a>
}
   1c0d0:	bd08      	pop	{r3, pc}
        num = -num;
   1c0d2:	4240      	negs	r0, r0
   1c0d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   1c0d8:	7893      	ldrb	r3, [r2, #2]
   1c0da:	f043 0301 	orr.w	r3, r3, #1
   1c0de:	7093      	strb	r3, [r2, #2]
   1c0e0:	e7f4      	b.n	1c0cc <i2a+0xa>

0001c0e2 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   1c0e2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1c0e6:	b2db      	uxtb	r3, r3
   1c0e8:	2b09      	cmp	r3, #9
   1c0ea:	d90b      	bls.n	1c104 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   1c0ec:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1c0f0:	b2db      	uxtb	r3, r3
   1c0f2:	2b05      	cmp	r3, #5
   1c0f4:	d908      	bls.n	1c108 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   1c0f6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1c0fa:	b2db      	uxtb	r3, r3
   1c0fc:	2b05      	cmp	r3, #5
   1c0fe:	d805      	bhi.n	1c10c <a2d+0x2a>
        return ch - 'A' + 10;
   1c100:	3837      	subs	r0, #55	; 0x37
   1c102:	4770      	bx	lr
        return ch - '0';
   1c104:	3830      	subs	r0, #48	; 0x30
   1c106:	4770      	bx	lr
        return ch - 'a' + 10;
   1c108:	3857      	subs	r0, #87	; 0x57
   1c10a:	4770      	bx	lr
    else
        return -1;
   1c10c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1c110:	4770      	bx	lr

0001c112 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   1c112:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c116:	4605      	mov	r5, r0
   1c118:	4688      	mov	r8, r1
   1c11a:	4617      	mov	r7, r2
   1c11c:	4699      	mov	r9, r3
    const char *p = *src;
   1c11e:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   1c120:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   1c122:	4628      	mov	r0, r5
   1c124:	f7ff ffdd 	bl	1c0e2 <a2d>
   1c128:	2800      	cmp	r0, #0
   1c12a:	db06      	blt.n	1c13a <a2i+0x28>
        if (digit > base)
   1c12c:	42b8      	cmp	r0, r7
   1c12e:	dc04      	bgt.n	1c13a <a2i+0x28>
            break;
        num = num * base + digit;
   1c130:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
   1c134:	7825      	ldrb	r5, [r4, #0]
   1c136:	3401      	adds	r4, #1
   1c138:	e7f3      	b.n	1c122 <a2i+0x10>
    }
    *src = p;
   1c13a:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   1c13e:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
   1c142:	4628      	mov	r0, r5
   1c144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c148 <putf>:

static int putf(FILE *putp, char c)
{
   1c148:	b500      	push	{lr}
   1c14a:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   1c14c:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   1c150:	6803      	ldr	r3, [r0, #0]
   1c152:	681b      	ldr	r3, [r3, #0]
   1c154:	b14b      	cbz	r3, 1c16a <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   1c156:	2201      	movs	r2, #1
   1c158:	f10d 0107 	add.w	r1, sp, #7
   1c15c:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   1c15e:	2801      	cmp	r0, #1
   1c160:	d005      	beq.n	1c16e <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
   1c162:	2000      	movs	r0, #0
    else
        return 1;
}
   1c164:	b003      	add	sp, #12
   1c166:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   1c16a:	2000      	movs	r0, #0
   1c16c:	e7fa      	b.n	1c164 <putf+0x1c>
        return 1;
   1c16e:	2001      	movs	r0, #1
   1c170:	e7f8      	b.n	1c164 <putf+0x1c>
	...

0001c174 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   1c174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c178:	4606      	mov	r6, r0
   1c17a:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   1c17c:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   1c17e:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   1c180:	e001      	b.n	1c186 <putchw+0x12>
        n--;
   1c182:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   1c184:	4613      	mov	r3, r2
   1c186:	1c5a      	adds	r2, r3, #1
   1c188:	781b      	ldrb	r3, [r3, #0]
   1c18a:	b10b      	cbz	r3, 1c190 <putchw+0x1c>
   1c18c:	2c00      	cmp	r4, #0
   1c18e:	dcf8      	bgt.n	1c182 <putchw+0xe>
    if (p->sign)
   1c190:	78bb      	ldrb	r3, [r7, #2]
   1c192:	f013 0f01 	tst.w	r3, #1
   1c196:	d000      	beq.n	1c19a <putchw+0x26>
        n--;
   1c198:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   1c19a:	887b      	ldrh	r3, [r7, #2]
   1c19c:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1c1a0:	b29b      	uxth	r3, r3
   1c1a2:	f241 0202 	movw	r2, #4098	; 0x1002
   1c1a6:	4293      	cmp	r3, r2
   1c1a8:	d01c      	beq.n	1c1e4 <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
   1c1aa:	f640 0202 	movw	r2, #2050	; 0x802
   1c1ae:	4293      	cmp	r3, r2
   1c1b0:	d01a      	beq.n	1c1e8 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   1c1b2:	683b      	ldr	r3, [r7, #0]
   1c1b4:	4d35      	ldr	r5, [pc, #212]	; (1c28c <putchw+0x118>)
   1c1b6:	401d      	ands	r5, r3
   1c1b8:	b1f5      	cbz	r5, 1c1f8 <putchw+0x84>
    unsigned written = 0;
   1c1ba:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   1c1bc:	78bb      	ldrb	r3, [r7, #2]
   1c1be:	f013 0f01 	tst.w	r3, #1
   1c1c2:	d11f      	bne.n	1c204 <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   1c1c4:	887b      	ldrh	r3, [r7, #2]
   1c1c6:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1c1ca:	b29b      	uxth	r3, r3
   1c1cc:	f241 0202 	movw	r2, #4098	; 0x1002
   1c1d0:	4293      	cmp	r3, r2
   1c1d2:	d01d      	beq.n	1c210 <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   1c1d4:	f640 0202 	movw	r2, #2050	; 0x802
   1c1d8:	4293      	cmp	r3, r2
   1c1da:	d02a      	beq.n	1c232 <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   1c1dc:	787b      	ldrb	r3, [r7, #1]
   1c1de:	bba3      	cbnz	r3, 1c24a <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   1c1e0:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
   1c1e2:	e03d      	b.n	1c260 <putchw+0xec>
        n -= 2;
   1c1e4:	3c02      	subs	r4, #2
   1c1e6:	e7e4      	b.n	1c1b2 <putchw+0x3e>
        n--;
   1c1e8:	3c01      	subs	r4, #1
   1c1ea:	e7e2      	b.n	1c1b2 <putchw+0x3e>
            written += putf(putp, ' ');
   1c1ec:	2120      	movs	r1, #32
   1c1ee:	4630      	mov	r0, r6
   1c1f0:	f7ff ffaa 	bl	1c148 <putf>
   1c1f4:	4405      	add	r5, r0
        while (n-- > 0)
   1c1f6:	4644      	mov	r4, r8
   1c1f8:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1c1fc:	2c00      	cmp	r4, #0
   1c1fe:	dcf5      	bgt.n	1c1ec <putchw+0x78>
   1c200:	4644      	mov	r4, r8
   1c202:	e7db      	b.n	1c1bc <putchw+0x48>
        written += putf(putp, '-');
   1c204:	212d      	movs	r1, #45	; 0x2d
   1c206:	4630      	mov	r0, r6
   1c208:	f7ff ff9e 	bl	1c148 <putf>
   1c20c:	4405      	add	r5, r0
   1c20e:	e7d9      	b.n	1c1c4 <putchw+0x50>
        written += putf(putp, '0');
   1c210:	2130      	movs	r1, #48	; 0x30
   1c212:	4630      	mov	r0, r6
   1c214:	f7ff ff98 	bl	1c148 <putf>
   1c218:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   1c21a:	78bb      	ldrb	r3, [r7, #2]
   1c21c:	f013 0f04 	tst.w	r3, #4
   1c220:	d005      	beq.n	1c22e <putchw+0xba>
   1c222:	2158      	movs	r1, #88	; 0x58
   1c224:	4630      	mov	r0, r6
   1c226:	f7ff ff8f 	bl	1c148 <putf>
   1c22a:	4405      	add	r5, r0
   1c22c:	e7d6      	b.n	1c1dc <putchw+0x68>
   1c22e:	2178      	movs	r1, #120	; 0x78
   1c230:	e7f8      	b.n	1c224 <putchw+0xb0>
        written += putf(putp, '0');
   1c232:	2130      	movs	r1, #48	; 0x30
   1c234:	4630      	mov	r0, r6
   1c236:	f7ff ff87 	bl	1c148 <putf>
   1c23a:	4405      	add	r5, r0
   1c23c:	e7ce      	b.n	1c1dc <putchw+0x68>
            written += putf(putp, '0');
   1c23e:	2130      	movs	r1, #48	; 0x30
   1c240:	4630      	mov	r0, r6
   1c242:	f7ff ff81 	bl	1c148 <putf>
   1c246:	4405      	add	r5, r0
        while (n-- > 0)
   1c248:	4644      	mov	r4, r8
   1c24a:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1c24e:	2c00      	cmp	r4, #0
   1c250:	dcf5      	bgt.n	1c23e <putchw+0xca>
   1c252:	4644      	mov	r4, r8
   1c254:	e7c4      	b.n	1c1e0 <putchw+0x6c>
        written += putf(putp, ch);
   1c256:	4630      	mov	r0, r6
   1c258:	f7ff ff76 	bl	1c148 <putf>
   1c25c:	4405      	add	r5, r0
    while ((ch = *bf++))
   1c25e:	4643      	mov	r3, r8
   1c260:	f103 0801 	add.w	r8, r3, #1
   1c264:	7819      	ldrb	r1, [r3, #0]
   1c266:	2900      	cmp	r1, #0
   1c268:	d1f5      	bne.n	1c256 <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   1c26a:	78bb      	ldrb	r3, [r7, #2]
   1c26c:	f013 0f08 	tst.w	r3, #8
   1c270:	d106      	bne.n	1c280 <putchw+0x10c>
   1c272:	e008      	b.n	1c286 <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
   1c274:	2120      	movs	r1, #32
   1c276:	4630      	mov	r0, r6
   1c278:	f7ff ff66 	bl	1c148 <putf>
   1c27c:	4405      	add	r5, r0
        while (n-- > 0)
   1c27e:	463c      	mov	r4, r7
   1c280:	1e67      	subs	r7, r4, #1
   1c282:	2c00      	cmp	r4, #0
   1c284:	dcf6      	bgt.n	1c274 <putchw+0x100>
    }
    
    return written;
}
   1c286:	4628      	mov	r0, r5
   1c288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c28c:	0008ff00 	.word	0x0008ff00

0001c290 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   1c290:	b160      	cbz	r0, 1c2ac <intarg+0x1c>
   1c292:	2801      	cmp	r0, #1
   1c294:	d017      	beq.n	1c2c6 <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   1c296:	bb19      	cbnz	r1, 1c2e0 <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
   1c298:	6813      	ldr	r3, [r2, #0]
   1c29a:	3307      	adds	r3, #7
   1c29c:	f023 0307 	bic.w	r3, r3, #7
   1c2a0:	f103 0108 	add.w	r1, r3, #8
   1c2a4:	6011      	str	r1, [r2, #0]
   1c2a6:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   1c2aa:	4770      	bx	lr
        if (sign) {
   1c2ac:	b129      	cbz	r1, 1c2ba <intarg+0x2a>
            val = va_arg(*va, int);
   1c2ae:	6813      	ldr	r3, [r2, #0]
   1c2b0:	1d19      	adds	r1, r3, #4
   1c2b2:	6011      	str	r1, [r2, #0]
   1c2b4:	6818      	ldr	r0, [r3, #0]
   1c2b6:	17c1      	asrs	r1, r0, #31
   1c2b8:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   1c2ba:	6813      	ldr	r3, [r2, #0]
   1c2bc:	1d19      	adds	r1, r3, #4
   1c2be:	6011      	str	r1, [r2, #0]
   1c2c0:	6818      	ldr	r0, [r3, #0]
   1c2c2:	2100      	movs	r1, #0
   1c2c4:	4770      	bx	lr
        if (sign) {
   1c2c6:	b129      	cbz	r1, 1c2d4 <intarg+0x44>
            val = va_arg(*va, long);
   1c2c8:	6813      	ldr	r3, [r2, #0]
   1c2ca:	1d19      	adds	r1, r3, #4
   1c2cc:	6011      	str	r1, [r2, #0]
   1c2ce:	6818      	ldr	r0, [r3, #0]
   1c2d0:	17c1      	asrs	r1, r0, #31
   1c2d2:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   1c2d4:	6813      	ldr	r3, [r2, #0]
   1c2d6:	1d19      	adds	r1, r3, #4
   1c2d8:	6011      	str	r1, [r2, #0]
   1c2da:	6818      	ldr	r0, [r3, #0]
   1c2dc:	2100      	movs	r1, #0
   1c2de:	4770      	bx	lr
            val = va_arg(*va, long long);
   1c2e0:	6813      	ldr	r3, [r2, #0]
   1c2e2:	3307      	adds	r3, #7
   1c2e4:	f023 0307 	bic.w	r3, r3, #7
   1c2e8:	f103 0108 	add.w	r1, r3, #8
   1c2ec:	6011      	str	r1, [r2, #0]
   1c2ee:	e9d3 0100 	ldrd	r0, r1, [r3]
   1c2f2:	4770      	bx	lr

0001c2f4 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   1c2f4:	b570      	push	{r4, r5, r6, lr}
   1c2f6:	b08a      	sub	sp, #40	; 0x28
   1c2f8:	4605      	mov	r5, r0
   1c2fa:	9101      	str	r1, [sp, #4]
   1c2fc:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   1c2fe:	ab02      	add	r3, sp, #8
   1c300:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   1c302:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
   1c304:	9b01      	ldr	r3, [sp, #4]
   1c306:	1c5a      	adds	r2, r3, #1
   1c308:	9201      	str	r2, [sp, #4]
   1c30a:	7819      	ldrb	r1, [r3, #0]
   1c30c:	2900      	cmp	r1, #0
   1c30e:	f000 811c 	beq.w	1c54a <tfp_format+0x256>
        if (ch != '%') {
   1c312:	2925      	cmp	r1, #37	; 0x25
   1c314:	d004      	beq.n	1c320 <tfp_format+0x2c>
            written += putf(putp, ch);
   1c316:	4628      	mov	r0, r5
   1c318:	f7ff ff16 	bl	1c148 <putf>
   1c31c:	4404      	add	r4, r0
   1c31e:	e7f1      	b.n	1c304 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   1c320:	2200      	movs	r2, #0
   1c322:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   1c326:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   1c32a:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
   1c32e:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
   1c332:	f362 0382 	bfi	r3, r2, #2, #1
   1c336:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   1c33a:	9b01      	ldr	r3, [sp, #4]
   1c33c:	1c5a      	adds	r2, r3, #1
   1c33e:	9201      	str	r2, [sp, #4]
   1c340:	7818      	ldrb	r0, [r3, #0]
   1c342:	b128      	cbz	r0, 1c350 <tfp_format+0x5c>
                switch (ch) {
   1c344:	282d      	cmp	r0, #45	; 0x2d
   1c346:	d04e      	beq.n	1c3e6 <tfp_format+0xf2>
   1c348:	2830      	cmp	r0, #48	; 0x30
   1c34a:	d03c      	beq.n	1c3c6 <tfp_format+0xd2>
   1c34c:	2823      	cmp	r0, #35	; 0x23
   1c34e:	d043      	beq.n	1c3d8 <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   1c350:	282a      	cmp	r0, #42	; 0x2a
   1c352:	d052      	beq.n	1c3fa <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   1c354:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1c358:	b2db      	uxtb	r3, r3
   1c35a:	2b09      	cmp	r3, #9
   1c35c:	d961      	bls.n	1c422 <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   1c35e:	286c      	cmp	r0, #108	; 0x6c
   1c360:	d065      	beq.n	1c42e <tfp_format+0x13a>
            lng = 0;
   1c362:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   1c364:	287a      	cmp	r0, #122	; 0x7a
   1c366:	d06f      	beq.n	1c448 <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
   1c368:	2869      	cmp	r0, #105	; 0x69
   1c36a:	f000 808e 	beq.w	1c48a <tfp_format+0x196>
   1c36e:	d970      	bls.n	1c452 <tfp_format+0x15e>
   1c370:	2873      	cmp	r0, #115	; 0x73
   1c372:	f000 80dd 	beq.w	1c530 <tfp_format+0x23c>
   1c376:	f200 8099 	bhi.w	1c4ac <tfp_format+0x1b8>
   1c37a:	286f      	cmp	r0, #111	; 0x6f
   1c37c:	f000 80c7 	beq.w	1c50e <tfp_format+0x21a>
   1c380:	2870      	cmp	r0, #112	; 0x70
   1c382:	d1bf      	bne.n	1c304 <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
   1c384:	9b00      	ldr	r3, [sp, #0]
   1c386:	1d1a      	adds	r2, r3, #4
   1c388:	9200      	str	r2, [sp, #0]
   1c38a:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   1c38c:	2310      	movs	r3, #16
   1c38e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   1c392:	aa08      	add	r2, sp, #32
   1c394:	2100      	movs	r1, #0
   1c396:	f7ff fe34 	bl	1c002 <ui2a>
                p.width = 2 * sizeof(void*);
   1c39a:	2308      	movs	r3, #8
   1c39c:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   1c3a0:	2301      	movs	r3, #1
   1c3a2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   1c3a6:	2130      	movs	r1, #48	; 0x30
   1c3a8:	4628      	mov	r0, r5
   1c3aa:	f7ff fecd 	bl	1c148 <putf>
   1c3ae:	4404      	add	r4, r0
                written += putf(putp, 'x');
   1c3b0:	2178      	movs	r1, #120	; 0x78
   1c3b2:	4628      	mov	r0, r5
   1c3b4:	f7ff fec8 	bl	1c148 <putf>
   1c3b8:	4404      	add	r4, r0
                written += putchw(putp, &p);
   1c3ba:	a908      	add	r1, sp, #32
   1c3bc:	4628      	mov	r0, r5
   1c3be:	f7ff fed9 	bl	1c174 <putchw>
   1c3c2:	4404      	add	r4, r0
                break;
   1c3c4:	e79e      	b.n	1c304 <tfp_format+0x10>
                    if (!p.left) {
   1c3c6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1c3ca:	f013 0f08 	tst.w	r3, #8
   1c3ce:	d1b4      	bne.n	1c33a <tfp_format+0x46>
                        p.lz = 1;
   1c3d0:	2301      	movs	r3, #1
   1c3d2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1c3d6:	e7b0      	b.n	1c33a <tfp_format+0x46>
                    p.alt = 1;
   1c3d8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1c3dc:	f043 0302 	orr.w	r3, r3, #2
   1c3e0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   1c3e4:	e7a9      	b.n	1c33a <tfp_format+0x46>
                    p.left = 1;
   1c3e6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1c3ea:	f043 0308 	orr.w	r3, r3, #8
   1c3ee:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   1c3f2:	2300      	movs	r3, #0
   1c3f4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1c3f8:	e79f      	b.n	1c33a <tfp_format+0x46>
                i = intarg(0, 1, &va);
   1c3fa:	466a      	mov	r2, sp
   1c3fc:	2101      	movs	r1, #1
   1c3fe:	2000      	movs	r0, #0
   1c400:	f7ff ff46 	bl	1c290 <intarg>
                if (i > UCHAR_MAX) {
   1c404:	28ff      	cmp	r0, #255	; 0xff
   1c406:	dd07      	ble.n	1c418 <tfp_format+0x124>
                    p.width = UCHAR_MAX;
   1c408:	23ff      	movs	r3, #255	; 0xff
   1c40a:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   1c40e:	9b01      	ldr	r3, [sp, #4]
   1c410:	1c5a      	adds	r2, r3, #1
   1c412:	9201      	str	r2, [sp, #4]
   1c414:	7818      	ldrb	r0, [r3, #0]
   1c416:	e7a2      	b.n	1c35e <tfp_format+0x6a>
                } else if (i > 0) {
   1c418:	2800      	cmp	r0, #0
   1c41a:	ddf8      	ble.n	1c40e <tfp_format+0x11a>
                    p.width = i;
   1c41c:	f88d 0020 	strb.w	r0, [sp, #32]
   1c420:	e7f5      	b.n	1c40e <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
   1c422:	ab08      	add	r3, sp, #32
   1c424:	220a      	movs	r2, #10
   1c426:	a901      	add	r1, sp, #4
   1c428:	f7ff fe73 	bl	1c112 <a2i>
   1c42c:	e797      	b.n	1c35e <tfp_format+0x6a>
                ch = *(fmt++);
   1c42e:	9b01      	ldr	r3, [sp, #4]
   1c430:	1c5a      	adds	r2, r3, #1
   1c432:	9201      	str	r2, [sp, #4]
   1c434:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
   1c436:	286c      	cmp	r0, #108	; 0x6c
   1c438:	d001      	beq.n	1c43e <tfp_format+0x14a>
                lng = 1;
   1c43a:	2601      	movs	r6, #1
   1c43c:	e792      	b.n	1c364 <tfp_format+0x70>
                    ch = *(fmt++);
   1c43e:	1c9a      	adds	r2, r3, #2
   1c440:	9201      	str	r2, [sp, #4]
   1c442:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
   1c444:	2602      	movs	r6, #2
   1c446:	e78d      	b.n	1c364 <tfp_format+0x70>
                ch = *(fmt++);
   1c448:	9b01      	ldr	r3, [sp, #4]
   1c44a:	1c5a      	adds	r2, r3, #1
   1c44c:	9201      	str	r2, [sp, #4]
   1c44e:	7818      	ldrb	r0, [r3, #0]
   1c450:	e78a      	b.n	1c368 <tfp_format+0x74>
            switch (ch) {
   1c452:	2858      	cmp	r0, #88	; 0x58
   1c454:	d040      	beq.n	1c4d8 <tfp_format+0x1e4>
   1c456:	d80a      	bhi.n	1c46e <tfp_format+0x17a>
   1c458:	2800      	cmp	r0, #0
   1c45a:	d076      	beq.n	1c54a <tfp_format+0x256>
   1c45c:	2825      	cmp	r0, #37	; 0x25
   1c45e:	f47f af51 	bne.w	1c304 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   1c462:	4601      	mov	r1, r0
   1c464:	4628      	mov	r0, r5
   1c466:	f7ff fe6f 	bl	1c148 <putf>
   1c46a:	4404      	add	r4, r0
                break;
   1c46c:	e74a      	b.n	1c304 <tfp_format+0x10>
            switch (ch) {
   1c46e:	2863      	cmp	r0, #99	; 0x63
   1c470:	d108      	bne.n	1c484 <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
   1c472:	9b00      	ldr	r3, [sp, #0]
   1c474:	1d1a      	adds	r2, r3, #4
   1c476:	9200      	str	r2, [sp, #0]
   1c478:	7819      	ldrb	r1, [r3, #0]
   1c47a:	4628      	mov	r0, r5
   1c47c:	f7ff fe64 	bl	1c148 <putf>
   1c480:	4404      	add	r4, r0
                break;
   1c482:	e73f      	b.n	1c304 <tfp_format+0x10>
            switch (ch) {
   1c484:	2864      	cmp	r0, #100	; 0x64
   1c486:	f47f af3d 	bne.w	1c304 <tfp_format+0x10>
                p.base = 10;
   1c48a:	230a      	movs	r3, #10
   1c48c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   1c490:	466a      	mov	r2, sp
   1c492:	2101      	movs	r1, #1
   1c494:	4630      	mov	r0, r6
   1c496:	f7ff fefb 	bl	1c290 <intarg>
   1c49a:	aa08      	add	r2, sp, #32
   1c49c:	f7ff fe11 	bl	1c0c2 <i2a>
                written += putchw(putp, &p);
   1c4a0:	a908      	add	r1, sp, #32
   1c4a2:	4628      	mov	r0, r5
   1c4a4:	f7ff fe66 	bl	1c174 <putchw>
   1c4a8:	4404      	add	r4, r0
                break;
   1c4aa:	e72b      	b.n	1c304 <tfp_format+0x10>
            switch (ch) {
   1c4ac:	2875      	cmp	r0, #117	; 0x75
   1c4ae:	d110      	bne.n	1c4d2 <tfp_format+0x1de>
                p.base = 10;
   1c4b0:	230a      	movs	r3, #10
   1c4b2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1c4b6:	466a      	mov	r2, sp
   1c4b8:	2100      	movs	r1, #0
   1c4ba:	4630      	mov	r0, r6
   1c4bc:	f7ff fee8 	bl	1c290 <intarg>
   1c4c0:	aa08      	add	r2, sp, #32
   1c4c2:	f7ff fd9e 	bl	1c002 <ui2a>
                written += putchw(putp, &p);
   1c4c6:	a908      	add	r1, sp, #32
   1c4c8:	4628      	mov	r0, r5
   1c4ca:	f7ff fe53 	bl	1c174 <putchw>
   1c4ce:	4404      	add	r4, r0
                break;
   1c4d0:	e718      	b.n	1c304 <tfp_format+0x10>
            switch (ch) {
   1c4d2:	2878      	cmp	r0, #120	; 0x78
   1c4d4:	f47f af16 	bne.w	1c304 <tfp_format+0x10>
                p.base = 16;
   1c4d8:	2310      	movs	r3, #16
   1c4da:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   1c4de:	2858      	cmp	r0, #88	; 0x58
   1c4e0:	bf14      	ite	ne
   1c4e2:	2300      	movne	r3, #0
   1c4e4:	2301      	moveq	r3, #1
   1c4e6:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1c4ea:	f363 0282 	bfi	r2, r3, #2, #1
   1c4ee:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   1c4f2:	466a      	mov	r2, sp
   1c4f4:	2100      	movs	r1, #0
   1c4f6:	4630      	mov	r0, r6
   1c4f8:	f7ff feca 	bl	1c290 <intarg>
   1c4fc:	aa08      	add	r2, sp, #32
   1c4fe:	f7ff fd80 	bl	1c002 <ui2a>
                written += putchw(putp, &p);
   1c502:	a908      	add	r1, sp, #32
   1c504:	4628      	mov	r0, r5
   1c506:	f7ff fe35 	bl	1c174 <putchw>
   1c50a:	4404      	add	r4, r0
                break;
   1c50c:	e6fa      	b.n	1c304 <tfp_format+0x10>
                p.base = 8;
   1c50e:	2308      	movs	r3, #8
   1c510:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1c514:	466a      	mov	r2, sp
   1c516:	2100      	movs	r1, #0
   1c518:	4630      	mov	r0, r6
   1c51a:	f7ff feb9 	bl	1c290 <intarg>
   1c51e:	aa08      	add	r2, sp, #32
   1c520:	f7ff fd6f 	bl	1c002 <ui2a>
                written += putchw(putp, &p);
   1c524:	a908      	add	r1, sp, #32
   1c526:	4628      	mov	r0, r5
   1c528:	f7ff fe24 	bl	1c174 <putchw>
   1c52c:	4404      	add	r4, r0
                break;
   1c52e:	e6e9      	b.n	1c304 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   1c530:	9b00      	ldr	r3, [sp, #0]
   1c532:	1d1a      	adds	r2, r3, #4
   1c534:	9200      	str	r2, [sp, #0]
   1c536:	681b      	ldr	r3, [r3, #0]
   1c538:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   1c53a:	a908      	add	r1, sp, #32
   1c53c:	4628      	mov	r0, r5
   1c53e:	f7ff fe19 	bl	1c174 <putchw>
   1c542:	4404      	add	r4, r0
                p.bf = bf;
   1c544:	ab02      	add	r3, sp, #8
   1c546:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   1c548:	e6dc      	b.n	1c304 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   1c54a:	4620      	mov	r0, r4
   1c54c:	b00a      	add	sp, #40	; 0x28
   1c54e:	bd70      	pop	{r4, r5, r6, pc}

0001c550 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   1c550:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   1c552:	f7ff fecf 	bl	1c2f4 <tfp_format>
}
   1c556:	bd08      	pop	{r3, pc}

0001c558 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
   1c558:	b40f      	push	{r0, r1, r2, r3}
   1c55a:	b500      	push	{lr}
   1c55c:	b083      	sub	sp, #12
   1c55e:	aa04      	add	r2, sp, #16
   1c560:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   1c564:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   1c566:	4b04      	ldr	r3, [pc, #16]	; (1c578 <printf+0x20>)
   1c568:	6818      	ldr	r0, [r3, #0]
   1c56a:	f7ff fff1 	bl	1c550 <vfprintf>
    va_end(va);
    return rv;
}
   1c56e:	b003      	add	sp, #12
   1c570:	f85d eb04 	ldr.w	lr, [sp], #4
   1c574:	b004      	add	sp, #16
   1c576:	4770      	bx	lr
   1c578:	00021e04 	.word	0x00021e04

0001c57c <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   1c57c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c57e:	b085      	sub	sp, #20
   1c580:	4605      	mov	r5, r0
   1c582:	460c      	mov	r4, r1
   1c584:	4616      	mov	r6, r2
   1c586:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   1c588:	460a      	mov	r2, r1
   1c58a:	4601      	mov	r1, r0
   1c58c:	4668      	mov	r0, sp
   1c58e:	f000 f835 	bl	1c5fc <fmemopen_w>
    tfp_format(f, fmt, va);
   1c592:	463a      	mov	r2, r7
   1c594:	4631      	mov	r1, r6
   1c596:	f7ff fead 	bl	1c2f4 <tfp_format>
    if (size > 0) {
   1c59a:	b12c      	cbz	r4, 1c5a8 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   1c59c:	9b02      	ldr	r3, [sp, #8]
   1c59e:	42a3      	cmp	r3, r4
   1c5a0:	d305      	bcc.n	1c5ae <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
   1c5a2:	3c01      	subs	r4, #1
   1c5a4:	2300      	movs	r3, #0
   1c5a6:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
   1c5a8:	9802      	ldr	r0, [sp, #8]
   1c5aa:	b005      	add	sp, #20
   1c5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
   1c5ae:	9b01      	ldr	r3, [sp, #4]
   1c5b0:	2200      	movs	r2, #0
   1c5b2:	701a      	strb	r2, [r3, #0]
   1c5b4:	e7f8      	b.n	1c5a8 <vsnprintf+0x2c>
	...

0001c5b8 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   1c5b8:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
   1c5ba:	460a      	mov	r2, r1
   1c5bc:	4601      	mov	r1, r0
   1c5be:	4b02      	ldr	r3, [pc, #8]	; (1c5c8 <vprintf+0x10>)
   1c5c0:	6818      	ldr	r0, [r3, #0]
   1c5c2:	f7ff ffc5 	bl	1c550 <vfprintf>
}
   1c5c6:	bd08      	pop	{r3, pc}
   1c5c8:	00021e04 	.word	0x00021e04

0001c5cc <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   1c5cc:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   1c5ce:	2500      	movs	r5, #0
    
    while (n--)
   1c5d0:	e000      	b.n	1c5d4 <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   1c5d2:	4622      	mov	r2, r4
    while (n--)
   1c5d4:	1e54      	subs	r4, r2, #1
   1c5d6:	b16a      	cbz	r2, 1c5f4 <memfile_write+0x28>
        f->bytes_written++;
   1c5d8:	6883      	ldr	r3, [r0, #8]
   1c5da:	3301      	adds	r3, #1
   1c5dc:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
   1c5de:	68c2      	ldr	r2, [r0, #12]
   1c5e0:	4293      	cmp	r3, r2
   1c5e2:	d8f6      	bhi.n	1c5d2 <memfile_write+0x6>
            *f->buffer++ = *bp++;
   1c5e4:	6843      	ldr	r3, [r0, #4]
   1c5e6:	1c5a      	adds	r2, r3, #1
   1c5e8:	6042      	str	r2, [r0, #4]
   1c5ea:	780a      	ldrb	r2, [r1, #0]
   1c5ec:	701a      	strb	r2, [r3, #0]
            i++;
   1c5ee:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
   1c5f0:	3101      	adds	r1, #1
   1c5f2:	e7ee      	b.n	1c5d2 <memfile_write+0x6>
        }
    }
    
    return i;
}
   1c5f4:	4628      	mov	r0, r5
   1c5f6:	bc30      	pop	{r4, r5}
   1c5f8:	4770      	bx	lr
	...

0001c5fc <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   1c5fc:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   1c5fe:	4c04      	ldr	r4, [pc, #16]	; (1c610 <fmemopen_w+0x14>)
   1c600:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   1c602:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   1c604:	2100      	movs	r1, #0
   1c606:	6081      	str	r1, [r0, #8]
    storage->size = size;
   1c608:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   1c60a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c60e:	4770      	bx	lr
   1c610:	00021dfc 	.word	0x00021dfc

0001c614 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   1c614:	2000      	movs	r0, #0
   1c616:	4770      	bx	lr

0001c618 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   1c618:	b510      	push	{r4, lr}
   1c61a:	4608      	mov	r0, r1
   1c61c:	4614      	mov	r4, r2
    console_write(bp, n);
   1c61e:	4611      	mov	r1, r2
   1c620:	f7fd f9b8 	bl	19994 <console_write>
    return n;
}
   1c624:	4620      	mov	r0, r4
   1c626:	bd10      	pop	{r4, pc}

0001c628 <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
   1c628:	b508      	push	{r3, lr}
    sysinit();
   1c62a:	f7fd fa1b 	bl	19a64 <sysinit_start>
   1c62e:	f000 f81b 	bl	1c668 <sysinit_app>
   1c632:	f7fd fa1d 	bl	19a70 <sysinit_end>
}
   1c636:	bd08      	pop	{r3, pc}

0001c638 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   1c638:	b570      	push	{r4, r5, r6, lr}
   1c63a:	b082      	sub	sp, #8
   1c63c:	460c      	mov	r4, r1
   1c63e:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   1c640:	b29d      	uxth	r5, r3
   1c642:	9b07      	ldr	r3, [sp, #28]
   1c644:	9300      	str	r3, [sp, #0]
   1c646:	4603      	mov	r3, r0
   1c648:	9a06      	ldr	r2, [sp, #24]
   1c64a:	4629      	mov	r1, r5
   1c64c:	4620      	mov	r0, r4
   1c64e:	f7fe fdeb 	bl	1b228 <os_mempool_init>
    if (rc != 0) {
   1c652:	b108      	cbz	r0, 1c658 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1c654:	b002      	add	sp, #8
   1c656:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   1c658:	462b      	mov	r3, r5
   1c65a:	9a06      	ldr	r2, [sp, #24]
   1c65c:	b292      	uxth	r2, r2
   1c65e:	4621      	mov	r1, r4
   1c660:	4630      	mov	r0, r6
   1c662:	f7fe fc96 	bl	1af92 <os_mbuf_pool_init>
   1c666:	e7f5      	b.n	1c654 <mem_init_mbuf_pool+0x1c>

0001c668 <sysinit_app>:
void sensor_network_init(void);
void init_sensor_coap(void);

void
sysinit_app(void)
{
   1c668:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   1c66a:	f7fe f9f3 	bl	1aa54 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   1c66e:	f001 f985 	bl	1d97c <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
   1c672:	f7fd f9a3 	bl	199bc <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
   1c676:	f001 fac7 	bl	1dc08 <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
   1c67a:	f001 f9b7 	bl	1d9ec <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
   1c67e:	f001 f8e1 	bl	1d844 <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
   1c682:	f001 f8f1 	bl	1d868 <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
   1c686:	f001 f8f0 	bl	1d86a <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
   1c68a:	f001 f8ef 	bl	1d86c <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
   1c68e:	f001 f8ee 	bl	1d86e <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
   1c692:	f001 f8ed 	bl	1d870 <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
   1c696:	f000 fbd1 	bl	1ce3c <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
   1c69a:	f000 fd1f 	bl	1d0dc <sensor_pkg_init>

    /*** Stage 620 */
    /* 620.0: temp_stub_create (libs/temp_stub) */
    temp_stub_create();
   1c69e:	f000 ff3d 	bl	1d51c <temp_stub_create>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
   1c6a2:	f000 feb3 	bl	1d40c <sensor_network_init>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
   1c6a6:	f000 fe3d 	bl	1d324 <init_sensor_coap>
}
   1c6aa:	bd08      	pop	{r3, pc}

0001c6ac <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
   1c6ac:	b908      	cbnz	r0, 1c6b2 <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
   1c6ae:	4802      	ldr	r0, [pc, #8]	; (1c6b8 <hal_bsp_flash_dev+0xc>)
   1c6b0:	4770      	bx	lr
    }

    return NULL;
   1c6b2:	2000      	movs	r0, #0
}
   1c6b4:	4770      	bx	lr
   1c6b6:	bf00      	nop
   1c6b8:	00021e08 	.word	0x00021e08

0001c6bc <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   1c6bc:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   1c6be:	f7eb fd7f 	bl	81c0 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   1c6c2:	f000 fbb3 	bl	1ce2c <nrf52_periph_create>
}
   1c6c6:	bd08      	pop	{r3, pc}

0001c6c8 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   1c6c8:	2300      	movs	r3, #0
   1c6ca:	4a07      	ldr	r2, [pc, #28]	; (1c6e8 <nrf52k_flash_wait_ready+0x20>)
   1c6cc:	4293      	cmp	r3, r2
   1c6ce:	dc06      	bgt.n	1c6de <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   1c6d0:	4a06      	ldr	r2, [pc, #24]	; (1c6ec <nrf52k_flash_wait_ready+0x24>)
   1c6d2:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   1c6d6:	2a01      	cmp	r2, #1
   1c6d8:	d004      	beq.n	1c6e4 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   1c6da:	3301      	adds	r3, #1
   1c6dc:	e7f5      	b.n	1c6ca <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   1c6de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c6e2:	4770      	bx	lr
            return 0;
   1c6e4:	2000      	movs	r0, #0
}
   1c6e6:	4770      	bx	lr
   1c6e8:	0001869f 	.word	0x0001869f
   1c6ec:	4001e000 	.word	0x4001e000

0001c6f0 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   1c6f0:	b538      	push	{r3, r4, r5, lr}
   1c6f2:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   1c6f4:	f7ff ffe8 	bl	1c6c8 <nrf52k_flash_wait_ready>
   1c6f8:	b9f0      	cbnz	r0, 1c738 <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1c6fa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1c6fe:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   1c700:	4b0f      	ldr	r3, [pc, #60]	; (1c740 <nrf52k_flash_erase_sector+0x50>)
   1c702:	2202      	movs	r2, #2
   1c704:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   1c708:	f7ff ffde 	bl	1c6c8 <nrf52k_flash_wait_ready>
   1c70c:	b148      	cbz	r0, 1c722 <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
   1c70e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   1c712:	4a0b      	ldr	r2, [pc, #44]	; (1c740 <nrf52k_flash_erase_sector+0x50>)
   1c714:	2100      	movs	r1, #0
   1c716:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1c71a:	b904      	cbnz	r4, 1c71e <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   1c71c:	b662      	cpsie	i
    return rc;
}
   1c71e:	4618      	mov	r0, r3
   1c720:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   1c722:	4b07      	ldr	r3, [pc, #28]	; (1c740 <nrf52k_flash_erase_sector+0x50>)
   1c724:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   1c728:	f7ff ffce 	bl	1c6c8 <nrf52k_flash_wait_ready>
   1c72c:	4603      	mov	r3, r0
   1c72e:	2800      	cmp	r0, #0
   1c730:	d0ef      	beq.n	1c712 <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   1c732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c736:	e7ec      	b.n	1c712 <nrf52k_flash_erase_sector+0x22>
        return -1;
   1c738:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c73c:	e7ef      	b.n	1c71e <nrf52k_flash_erase_sector+0x2e>
   1c73e:	bf00      	nop
   1c740:	4001e000 	.word	0x4001e000

0001c744 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   1c744:	2000      	movs	r0, #0
   1c746:	4770      	bx	lr

0001c748 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1c748:	297f      	cmp	r1, #127	; 0x7f
   1c74a:	dc06      	bgt.n	1c75a <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   1c74c:	0309      	lsls	r1, r1, #12
   1c74e:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   1c750:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1c754:	601a      	str	r2, [r3, #0]
}
   1c756:	2000      	movs	r0, #0
   1c758:	4770      	bx	lr
{
   1c75a:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1c75c:	2300      	movs	r3, #0
   1c75e:	461a      	mov	r2, r3
   1c760:	4619      	mov	r1, r3
   1c762:	4618      	mov	r0, r3
   1c764:	f7fe f818 	bl	1a798 <__assert_func>

0001c768 <nrf52k_flash_write>:
{
   1c768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c76c:	b082      	sub	sp, #8
   1c76e:	460d      	mov	r5, r1
   1c770:	4616      	mov	r6, r2
   1c772:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   1c774:	f7ff ffa8 	bl	1c6c8 <nrf52k_flash_wait_ready>
   1c778:	2800      	cmp	r0, #0
   1c77a:	d158      	bne.n	1c82e <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1c77c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1c780:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   1c782:	4b2c      	ldr	r3, [pc, #176]	; (1c834 <nrf52k_flash_write+0xcc>)
   1c784:	2201      	movs	r2, #1
   1c786:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   1c78a:	f015 0803 	ands.w	r8, r5, #3
   1c78e:	d10b      	bne.n	1c7a8 <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
   1c790:	2c03      	cmp	r4, #3
   1c792:	d925      	bls.n	1c7e0 <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
   1c794:	f7ff ff98 	bl	1c6c8 <nrf52k_flash_wait_ready>
   1c798:	2800      	cmp	r0, #0
   1c79a:	d139      	bne.n	1c810 <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
   1c79c:	f856 3b04 	ldr.w	r3, [r6], #4
   1c7a0:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   1c7a4:	3c04      	subs	r4, #4
   1c7a6:	e7f3      	b.n	1c790 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   1c7a8:	f7ff ff8e 	bl	1c6c8 <nrf52k_flash_wait_ready>
   1c7ac:	bb68      	cbnz	r0, 1c80a <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
   1c7ae:	f025 0a03 	bic.w	sl, r5, #3
   1c7b2:	f8da 3000 	ldr.w	r3, [sl]
   1c7b6:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   1c7b8:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   1c7bc:	45a1      	cmp	r9, r4
   1c7be:	d900      	bls.n	1c7c2 <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
   1c7c0:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   1c7c2:	464a      	mov	r2, r9
   1c7c4:	4631      	mov	r1, r6
   1c7c6:	ab01      	add	r3, sp, #4
   1c7c8:	eb03 0008 	add.w	r0, r3, r8
   1c7cc:	f7ff fbda 	bl	1bf84 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   1c7d0:	9b01      	ldr	r3, [sp, #4]
   1c7d2:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   1c7d6:	444d      	add	r5, r9
        num_bytes -= cnt;
   1c7d8:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   1c7dc:	444e      	add	r6, r9
   1c7de:	e7d7      	b.n	1c790 <nrf52k_flash_write+0x28>
    if (num_bytes) {
   1c7e0:	b164      	cbz	r4, 1c7fc <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   1c7e2:	682b      	ldr	r3, [r5, #0]
   1c7e4:	a802      	add	r0, sp, #8
   1c7e6:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
   1c7ea:	4622      	mov	r2, r4
   1c7ec:	4631      	mov	r1, r6
   1c7ee:	f7ff fbc9 	bl	1bf84 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   1c7f2:	f7ff ff69 	bl	1c6c8 <nrf52k_flash_wait_ready>
   1c7f6:	b9b8      	cbnz	r0, 1c828 <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
   1c7f8:	9b01      	ldr	r3, [sp, #4]
   1c7fa:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   1c7fc:	f7ff ff64 	bl	1c6c8 <nrf52k_flash_wait_ready>
   1c800:	4603      	mov	r3, r0
   1c802:	b138      	cbz	r0, 1c814 <nrf52k_flash_write+0xac>
        rc = -1;
   1c804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c808:	e004      	b.n	1c814 <nrf52k_flash_write+0xac>
    int rc = -1;
   1c80a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c80e:	e001      	b.n	1c814 <nrf52k_flash_write+0xac>
   1c810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   1c814:	4a07      	ldr	r2, [pc, #28]	; (1c834 <nrf52k_flash_write+0xcc>)
   1c816:	2100      	movs	r1, #0
   1c818:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1c81c:	b907      	cbnz	r7, 1c820 <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
   1c81e:	b662      	cpsie	i
}
   1c820:	4618      	mov	r0, r3
   1c822:	b002      	add	sp, #8
   1c824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   1c828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c82c:	e7f2      	b.n	1c814 <nrf52k_flash_write+0xac>
        return -1;
   1c82e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c832:	e7f5      	b.n	1c820 <nrf52k_flash_write+0xb8>
   1c834:	4001e000 	.word	0x4001e000

0001c838 <nrf52k_flash_read>:
{
   1c838:	b508      	push	{r3, lr}
   1c83a:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   1c83c:	461a      	mov	r2, r3
   1c83e:	f7ff fba1 	bl	1bf84 <memcpy>
}
   1c842:	2000      	movs	r0, #0
   1c844:	bd08      	pop	{r3, pc}
	...

0001c848 <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   1c848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   1c84a:	f7ff fa3b 	bl	1bcc4 <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   1c84e:	4b31      	ldr	r3, [pc, #196]	; (1c914 <nrf52_timer_handler+0xcc>)
   1c850:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   1c854:	4b30      	ldr	r3, [pc, #192]	; (1c918 <nrf52_timer_handler+0xd0>)
   1c856:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
   1c858:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   1c85c:	d225      	bcs.n	1c8aa <nrf52_timer_handler+0x62>
   1c85e:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   1c860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1c864:	d227      	bcs.n	1c8b6 <nrf52_timer_handler+0x6e>
    result = x - y;
   1c866:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
   1c868:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   1c86c:	d129      	bne.n	1c8c2 <nrf52_timer_handler+0x7a>
        return (result & 0x007fffff);
   1c86e:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   1c872:	4f29      	ldr	r7, [pc, #164]	; (1c918 <nrf52_timer_handler+0xd0>)
   1c874:	683c      	ldr	r4, [r7, #0]
   1c876:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
   1c87a:	4628      	mov	r0, r5
   1c87c:	f7ff f9b0 	bl	1bbe0 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1c880:	4b24      	ldr	r3, [pc, #144]	; (1c914 <nrf52_timer_handler+0xcc>)
   1c882:	2200      	movs	r2, #0
   1c884:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1c888:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1c88a:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1c88c:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1c890:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1c894:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   1c896:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   1c898:	f7ff fa1d 	bl	1bcd6 <os_arch_in_critical>
   1c89c:	bb28      	cbnz	r0, 1c8ea <nrf52_timer_handler+0xa2>
   1c89e:	2300      	movs	r3, #0
   1c8a0:	461a      	mov	r2, r3
   1c8a2:	4619      	mov	r1, r3
   1c8a4:	4618      	mov	r0, r3
   1c8a6:	f7fd ff77 	bl	1a798 <__assert_func>
    assert(x <= 0xffffff);
   1c8aa:	2300      	movs	r3, #0
   1c8ac:	461a      	mov	r2, r3
   1c8ae:	4619      	mov	r1, r3
   1c8b0:	4618      	mov	r0, r3
   1c8b2:	f7fd ff71 	bl	1a798 <__assert_func>
    assert(y <= 0xffffff);
   1c8b6:	2300      	movs	r3, #0
   1c8b8:	461a      	mov	r2, r3
   1c8ba:	4619      	mov	r1, r3
   1c8bc:	4618      	mov	r0, r3
   1c8be:	f7fd ff6b 	bl	1a798 <__assert_func>
        return (result | 0xff800000);
   1c8c2:	ea6f 2545 	mvn.w	r5, r5, lsl #9
   1c8c6:	ea6f 2555 	mvn.w	r5, r5, lsr #9
   1c8ca:	e7d2      	b.n	1c872 <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
   1c8cc:	2300      	movs	r3, #0
   1c8ce:	461a      	mov	r2, r3
   1c8d0:	4619      	mov	r1, r3
   1c8d2:	4618      	mov	r0, r3
   1c8d4:	f7fd ff60 	bl	1a798 <__assert_func>
        return (result | 0xff800000);
   1c8d8:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   1c8dc:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
   1c8e0:	2a02      	cmp	r2, #2
   1c8e2:	dc13      	bgt.n	1c90c <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1c8e4:	4a0c      	ldr	r2, [pc, #48]	; (1c918 <nrf52_timer_handler+0xd0>)
   1c8e6:	6814      	ldr	r4, [r2, #0]
   1c8e8:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   1c8ea:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1c8ee:	4a09      	ldr	r2, [pc, #36]	; (1c914 <nrf52_timer_handler+0xcc>)
   1c8f0:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1c8f4:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   1c8f8:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1c8fc:	d2e6      	bcs.n	1c8cc <nrf52_timer_handler+0x84>
    result = x - y;
   1c8fe:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   1c900:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1c904:	d1e8      	bne.n	1c8d8 <nrf52_timer_handler+0x90>
        return (result & 0x007fffff);
   1c906:	f3c2 0216 	ubfx	r2, r2, #0, #23
   1c90a:	e7e9      	b.n	1c8e0 <nrf52_timer_handler+0x98>

    OS_EXIT_CRITICAL(sr);
   1c90c:	4630      	mov	r0, r6
   1c90e:	f7ff f9df 	bl	1bcd0 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   1c912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c914:	40011000 	.word	0x40011000
   1c918:	2000dec4 	.word	0x2000dec4

0001c91c <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   1c91c:	b538      	push	{r3, r4, r5, lr}
   1c91e:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   1c920:	f7ff f9d9 	bl	1bcd6 <os_arch_in_critical>
   1c924:	b1a0      	cbz	r0, 1c950 <os_tick_idle+0x34>

    if (ticks > 0) {
   1c926:	2d00      	cmp	r5, #0
   1c928:	d038      	beq.n	1c99c <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   1c92a:	4b20      	ldr	r3, [pc, #128]	; (1c9ac <os_tick_idle+0x90>)
   1c92c:	685b      	ldr	r3, [r3, #4]
   1c92e:	42ab      	cmp	r3, r5
   1c930:	d200      	bcs.n	1c934 <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   1c932:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   1c934:	4b1d      	ldr	r3, [pc, #116]	; (1c9ac <os_tick_idle+0x90>)
   1c936:	689c      	ldr	r4, [r3, #8]
   1c938:	681a      	ldr	r2, [r3, #0]
   1c93a:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   1c93e:	f7ff f9ca 	bl	1bcd6 <os_arch_in_critical>
   1c942:	b9d0      	cbnz	r0, 1c97a <os_tick_idle+0x5e>
   1c944:	2300      	movs	r3, #0
   1c946:	461a      	mov	r2, r3
   1c948:	4619      	mov	r1, r3
   1c94a:	4618      	mov	r0, r3
   1c94c:	f7fd ff24 	bl	1a798 <__assert_func>
    OS_ASSERT_CRITICAL();
   1c950:	2300      	movs	r3, #0
   1c952:	461a      	mov	r2, r3
   1c954:	4619      	mov	r1, r3
   1c956:	4618      	mov	r0, r3
   1c958:	f7fd ff1e 	bl	1a798 <__assert_func>
    assert(y <= 0xffffff);
   1c95c:	2300      	movs	r3, #0
   1c95e:	461a      	mov	r2, r3
   1c960:	4619      	mov	r1, r3
   1c962:	4618      	mov	r0, r3
   1c964:	f7fd ff18 	bl	1a798 <__assert_func>
        return (result | 0xff800000);
   1c968:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1c96c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
   1c970:	2b02      	cmp	r3, #2
   1c972:	dc13      	bgt.n	1c99c <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1c974:	4b0d      	ldr	r3, [pc, #52]	; (1c9ac <os_tick_idle+0x90>)
   1c976:	681c      	ldr	r4, [r3, #0]
   1c978:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1c97a:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1c97e:	4b0c      	ldr	r3, [pc, #48]	; (1c9b0 <os_tick_idle+0x94>)
   1c980:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1c984:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   1c988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1c98c:	d2e6      	bcs.n	1c95c <os_tick_idle+0x40>
    result = x - y;
   1c98e:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   1c990:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1c994:	d1e8      	bne.n	1c968 <os_tick_idle+0x4c>
        return (result & 0x007fffff);
   1c996:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1c99a:	e7e9      	b.n	1c970 <os_tick_idle+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
   1c99c:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   1c9a0:	bf30      	wfi

    if (ticks > 0) {
   1c9a2:	b905      	cbnz	r5, 1c9a6 <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   1c9a4:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   1c9a6:	f7ff ff4f 	bl	1c848 <nrf52_timer_handler>
}
   1c9aa:	e7fb      	b.n	1c9a4 <os_tick_idle+0x88>
   1c9ac:	2000dec4 	.word	0x2000dec4
   1c9b0:	40011000 	.word	0x40011000

0001c9b4 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   1c9b4:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1c9b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1c9ba:	fbb3 f3f0 	udiv	r3, r3, r0
   1c9be:	fb00 f303 	mul.w	r3, r0, r3
   1c9c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1c9c6:	d136      	bne.n	1ca36 <os_tick_init+0x82>
   1c9c8:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   1c9ca:	4d1e      	ldr	r5, [pc, #120]	; (1ca44 <os_tick_init+0x90>)
   1c9cc:	2600      	movs	r6, #0
   1c9ce:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   1c9d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1c9d4:	fbb3 f0f0 	udiv	r0, r3, r0
   1c9d8:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1c9da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1c9de:	fbb3 f0f0 	udiv	r0, r3, r0
   1c9e2:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1c9e4:	f7ff f96e 	bl	1bcc4 <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c9e8:	0164      	lsls	r4, r4, #5
   1c9ea:	b2e4      	uxtb	r4, r4
   1c9ec:	4b16      	ldr	r3, [pc, #88]	; (1ca48 <os_tick_init+0x94>)
   1c9ee:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1c9f2:	4a16      	ldr	r2, [pc, #88]	; (1ca4c <os_tick_init+0x98>)
   1c9f4:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1c9f6:	4916      	ldr	r1, [pc, #88]	; (1ca50 <os_tick_init+0x9c>)
   1c9f8:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c9fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1ca00:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1ca02:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1ca06:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1ca0a:	2201      	movs	r2, #1
   1ca0c:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   1ca0e:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1ca10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ca14:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   1ca18:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1ca1c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1ca20:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1ca24:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1ca28:	6829      	ldr	r1, [r5, #0]
   1ca2a:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   1ca2e:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   1ca30:	f7ff f94e 	bl	1bcd0 <os_arch_restore_sr>
}
   1ca34:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1ca36:	2300      	movs	r3, #0
   1ca38:	461a      	mov	r2, r3
   1ca3a:	4619      	mov	r1, r3
   1ca3c:	4618      	mov	r0, r3
   1ca3e:	f7fd feab 	bl	1a798 <__assert_func>
   1ca42:	bf00      	nop
   1ca44:	2000dec4 	.word	0x2000dec4
   1ca48:	e000e100 	.word	0xe000e100
   1ca4c:	e000ed00 	.word	0xe000ed00
   1ca50:	0001c849 	.word	0x0001c849

0001ca54 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1ca54:	2301      	movs	r3, #1
   1ca56:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1ca58:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   1ca5c:	4770      	bx	lr
	...

0001ca60 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   1ca60:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   1ca62:	7883      	ldrb	r3, [r0, #2]
   1ca64:	b393      	cbz	r3, 1cacc <nrf_timer_set_ocmp+0x6c>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1ca66:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1ca68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1ca6c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   1ca70:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   1ca72:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1ca76:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1ca7a:	b11d      	cbz	r5, 1ca84 <nrf_timer_set_ocmp+0x24>
            temp += (1UL << 24);
   1ca7c:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   1ca80:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   1ca84:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
   1ca86:	1acb      	subs	r3, r1, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   1ca88:	2b02      	cmp	r3, #2
   1ca8a:	dc0e      	bgt.n	1caaa <nrf_timer_set_ocmp+0x4a>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1ca8c:	7842      	ldrb	r2, [r0, #1]
   1ca8e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1ca90:	2b00      	cmp	r3, #0
   1ca92:	db15      	blt.n	1cac0 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ca94:	f002 021f 	and.w	r2, r2, #31
   1ca98:	095b      	lsrs	r3, r3, #5
   1ca9a:	2101      	movs	r1, #1
   1ca9c:	fa01 f202 	lsl.w	r2, r1, r2
   1caa0:	3340      	adds	r3, #64	; 0x40
   1caa2:	491b      	ldr	r1, [pc, #108]	; (1cb10 <nrf_timer_set_ocmp+0xb0>)
   1caa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1caa8:	e00a      	b.n	1cac0 <nrf_timer_set_ocmp+0x60>
        } else  {
            if (delta_t < (1UL << 24)) {
   1caaa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1caae:	d208      	bcs.n	1cac2 <nrf_timer_set_ocmp+0x62>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1cab0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1cab4:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1cab8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1cabc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   1cac0:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1cac2:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
   1cac6:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
   1caca:	e7f5      	b.n	1cab8 <nrf_timer_set_ocmp+0x58>
   1cacc:	460d      	mov	r5, r1
   1cace:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
   1cad0:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1cad2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1cad6:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   1cada:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1cade:	2200      	movs	r2, #0
   1cae0:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1cae4:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1cae8:	f7ff ffb4 	bl	1ca54 <nrf_read_timer_cntr>
   1caec:	1b40      	subs	r0, r0, r5
   1caee:	2800      	cmp	r0, #0
   1caf0:	dbe6      	blt.n	1cac0 <nrf_timer_set_ocmp+0x60>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1caf2:	7862      	ldrb	r2, [r4, #1]
   1caf4:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1caf6:	2b00      	cmp	r3, #0
   1caf8:	dbe2      	blt.n	1cac0 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cafa:	f002 021f 	and.w	r2, r2, #31
   1cafe:	095b      	lsrs	r3, r3, #5
   1cb00:	2101      	movs	r1, #1
   1cb02:	fa01 f202 	lsl.w	r2, r1, r2
   1cb06:	3340      	adds	r3, #64	; 0x40
   1cb08:	4901      	ldr	r1, [pc, #4]	; (1cb10 <nrf_timer_set_ocmp+0xb0>)
   1cb0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1cb0e:	e7d7      	b.n	1cac0 <nrf_timer_set_ocmp+0x60>
   1cb10:	e000e100 	.word	0xe000e100

0001cb14 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1cb14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1cb18:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1cb1c:	4770      	bx	lr

0001cb1e <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1cb1e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1cb22:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1cb26:	4770      	bx	lr

0001cb28 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1cb28:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1cb2a:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1cb2c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1cb30:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   1cb32:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   1cb34:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1cb38:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1cb3c:	b1ad      	cbz	r5, 1cb6a <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
   1cb3e:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   1cb42:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   1cb44:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1cb48:	2500      	movs	r5, #0
   1cb4a:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1cb4e:	7840      	ldrb	r0, [r0, #1]
   1cb50:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
   1cb52:	42aa      	cmp	r2, r5
   1cb54:	db09      	blt.n	1cb6a <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cb56:	f000 001f 	and.w	r0, r0, #31
   1cb5a:	0952      	lsrs	r2, r2, #5
   1cb5c:	2501      	movs	r5, #1
   1cb5e:	fa05 f000 	lsl.w	r0, r5, r0
   1cb62:	3240      	adds	r2, #64	; 0x40
   1cb64:	4d04      	ldr	r5, [pc, #16]	; (1cb78 <hal_timer_read_bsptimer+0x50>)
   1cb66:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
   1cb6a:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   1cb6e:	b904      	cbnz	r4, 1cb72 <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
   1cb70:	b662      	cpsie	i

    return tcntr;
}
   1cb72:	bc30      	pop	{r4, r5}
   1cb74:	4770      	bx	lr
   1cb76:	bf00      	nop
   1cb78:	e000e100 	.word	0xe000e100

0001cb7c <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   1cb7c:	b570      	push	{r4, r5, r6, lr}
   1cb7e:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1cb80:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1cb84:	b672      	cpsid	i
   1cb86:	e013      	b.n	1cbb0 <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1cb88:	6928      	ldr	r0, [r5, #16]
   1cb8a:	f7ff ff63 	bl	1ca54 <nrf_read_timer_cntr>
            delta = 0;
   1cb8e:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   1cb90:	68e3      	ldr	r3, [r4, #12]
   1cb92:	1ac0      	subs	r0, r0, r3
   1cb94:	4290      	cmp	r0, r2
   1cb96:	db19      	blt.n	1cbcc <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1cb98:	6923      	ldr	r3, [r4, #16]
   1cb9a:	b1a3      	cbz	r3, 1cbc6 <hal_timer_chk_queue+0x4a>
   1cb9c:	6962      	ldr	r2, [r4, #20]
   1cb9e:	615a      	str	r2, [r3, #20]
   1cba0:	6963      	ldr	r3, [r4, #20]
   1cba2:	6922      	ldr	r2, [r4, #16]
   1cba4:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1cba6:	2300      	movs	r3, #0
   1cba8:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1cbaa:	6863      	ldr	r3, [r4, #4]
   1cbac:	68a0      	ldr	r0, [r4, #8]
   1cbae:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   1cbb0:	696c      	ldr	r4, [r5, #20]
   1cbb2:	b15c      	cbz	r4, 1cbcc <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   1cbb4:	78ab      	ldrb	r3, [r5, #2]
   1cbb6:	2b00      	cmp	r3, #0
   1cbb8:	d0e6      	beq.n	1cb88 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1cbba:	4628      	mov	r0, r5
   1cbbc:	f7ff ffb4 	bl	1cb28 <hal_timer_read_bsptimer>
            delta = -3;
   1cbc0:	f06f 0202 	mvn.w	r2, #2
   1cbc4:	e7e4      	b.n	1cb90 <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1cbc6:	6963      	ldr	r3, [r4, #20]
   1cbc8:	61ab      	str	r3, [r5, #24]
   1cbca:	e7e9      	b.n	1cba0 <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1cbcc:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   1cbce:	b133      	cbz	r3, 1cbde <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1cbd0:	68d9      	ldr	r1, [r3, #12]
   1cbd2:	4628      	mov	r0, r5
   1cbd4:	f7ff ff44 	bl	1ca60 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   1cbd8:	b906      	cbnz	r6, 1cbdc <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1cbda:	b662      	cpsie	i
}
   1cbdc:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   1cbde:	78ab      	ldrb	r3, [r5, #2]
   1cbe0:	b11b      	cbz	r3, 1cbea <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1cbe2:	6928      	ldr	r0, [r5, #16]
   1cbe4:	f7ff ff9b 	bl	1cb1e <nrf_rtc_disable_ocmp>
   1cbe8:	e7f6      	b.n	1cbd8 <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1cbea:	6928      	ldr	r0, [r5, #16]
   1cbec:	f7ff ff92 	bl	1cb14 <nrf_timer_disable_ocmp>
   1cbf0:	e7f2      	b.n	1cbd8 <hal_timer_chk_queue+0x5c>

0001cbf2 <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1cbf2:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   1cbf4:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1cbf6:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   1cbfa:	b113      	cbz	r3, 1cc02 <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1cbfc:	2300      	movs	r3, #0
   1cbfe:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1cc02:	6883      	ldr	r3, [r0, #8]
   1cc04:	3301      	adds	r3, #1
   1cc06:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   1cc08:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   1cc0c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   1cc10:	d100      	bne.n	1cc14 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   1cc12:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   1cc14:	f7ff ffb2 	bl	1cb7c <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1cc18:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   1cc1c:	e7f9      	b.n	1cc12 <hal_timer_irq_handler+0x20>
	...

0001cc20 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   1cc20:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   1cc22:	4802      	ldr	r0, [pc, #8]	; (1cc2c <nrf52_timer0_irq_handler+0xc>)
   1cc24:	f7ff ffe5 	bl	1cbf2 <hal_timer_irq_handler>
}
   1cc28:	bd08      	pop	{r3, pc}
   1cc2a:	bf00      	nop
   1cc2c:	2000ded0 	.word	0x2000ded0

0001cc30 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1cc30:	2805      	cmp	r0, #5
   1cc32:	dc1c      	bgt.n	1cc6e <hal_timer_init+0x3e>
   1cc34:	4b12      	ldr	r3, [pc, #72]	; (1cc80 <hal_timer_init+0x50>)
   1cc36:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1cc3a:	b1d3      	cbz	r3, 1cc72 <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1cc3c:	781a      	ldrb	r2, [r3, #0]
   1cc3e:	b9d2      	cbnz	r2, 1cc76 <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   1cc40:	b9d8      	cbnz	r0, 1cc7a <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1cc42:	4a10      	ldr	r2, [pc, #64]	; (1cc84 <hal_timer_init+0x54>)
   1cc44:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1cc46:	2208      	movs	r2, #8
   1cc48:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cc4a:	4b0f      	ldr	r3, [pc, #60]	; (1cc88 <hal_timer_init+0x58>)
   1cc4c:	f44f 7280 	mov.w	r2, #256	; 0x100
   1cc50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1cc54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1cc58:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1cc5c:	22e0      	movs	r2, #224	; 0xe0
   1cc5e:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1cc62:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1cc66:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1cc68:	4a08      	ldr	r2, [pc, #32]	; (1cc8c <hal_timer_init+0x5c>)
   1cc6a:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   1cc6c:	4770      	bx	lr

err:
    return rc;
   1cc6e:	2016      	movs	r0, #22
   1cc70:	4770      	bx	lr
   1cc72:	2016      	movs	r0, #22
   1cc74:	4770      	bx	lr
   1cc76:	2016      	movs	r0, #22
   1cc78:	4770      	bx	lr
   1cc7a:	2016      	movs	r0, #22
}
   1cc7c:	4770      	bx	lr
   1cc7e:	bf00      	nop
   1cc80:	00021e3c 	.word	0x00021e3c
   1cc84:	40008000 	.word	0x40008000
   1cc88:	e000e100 	.word	0xe000e100
   1cc8c:	0001cc21 	.word	0x0001cc21

0001cc90 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1cc90:	2805      	cmp	r0, #5
   1cc92:	dc65      	bgt.n	1cd60 <hal_timer_config+0xd0>
   1cc94:	4b39      	ldr	r3, [pc, #228]	; (1cd7c <hal_timer_config+0xec>)
   1cc96:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1cc9a:	2800      	cmp	r0, #0
   1cc9c:	d062      	beq.n	1cd64 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   1cc9e:	4b38      	ldr	r3, [pc, #224]	; (1cd80 <hal_timer_config+0xf0>)
   1cca0:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1cca4:	7803      	ldrb	r3, [r0, #0]
   1cca6:	2b00      	cmp	r3, #0
   1cca8:	d15e      	bne.n	1cd68 <hal_timer_config+0xd8>
   1ccaa:	2900      	cmp	r1, #0
   1ccac:	d05e      	beq.n	1cd6c <hal_timer_config+0xdc>
   1ccae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1ccb2:	d85d      	bhi.n	1cd70 <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
   1ccb4:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1ccb6:	2a00      	cmp	r2, #0
   1ccb8:	d05c      	beq.n	1cd74 <hal_timer_config+0xe4>
{
   1ccba:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1ccbc:	2901      	cmp	r1, #1
   1ccbe:	d013      	beq.n	1cce8 <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1ccc0:	2301      	movs	r3, #1
   1ccc2:	2b09      	cmp	r3, #9
   1ccc4:	d810      	bhi.n	1cce8 <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
   1ccc6:	2201      	movs	r2, #1
   1ccc8:	409a      	lsls	r2, r3
   1ccca:	428a      	cmp	r2, r1
   1cccc:	d202      	bcs.n	1ccd4 <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1ccce:	3301      	adds	r3, #1
   1ccd0:	b2db      	uxtb	r3, r3
   1ccd2:	e7f6      	b.n	1ccc2 <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
   1ccd4:	1e5c      	subs	r4, r3, #1
   1ccd6:	2501      	movs	r5, #1
   1ccd8:	fa05 f404 	lsl.w	r4, r5, r4
   1ccdc:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
   1ccde:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
   1cce0:	428c      	cmp	r4, r1
   1cce2:	d201      	bcs.n	1cce8 <hal_timer_config+0x58>
                    prescaler -= 1;
   1cce4:	3b01      	subs	r3, #1
   1cce6:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1cce8:	4a25      	ldr	r2, [pc, #148]	; (1cd80 <hal_timer_config+0xf0>)
   1ccea:	411a      	asrs	r2, r3
   1ccec:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
   1ccee:	2201      	movs	r2, #1
   1ccf0:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1ccf2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1ccf6:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1ccf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1ccfc:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   1cd00:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1cd04:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1cd08:	d00c      	beq.n	1cd24 <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1cd0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1cd0e:	2100      	movs	r1, #0
   1cd10:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1cd14:	2101      	movs	r1, #1
   1cd16:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1cd18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1cd1c:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1cd20:	2a00      	cmp	r2, #0
   1cd22:	d0f9      	beq.n	1cd18 <hal_timer_config+0x88>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1cd24:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1cd26:	2101      	movs	r1, #1
   1cd28:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   1cd2a:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1cd2c:	2500      	movs	r5, #0
   1cd2e:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1cd32:	2503      	movs	r5, #3
   1cd34:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1cd38:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1cd3c:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1cd3e:	7842      	ldrb	r2, [r0, #1]
   1cd40:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1cd42:	2b00      	cmp	r3, #0
   1cd44:	db07      	blt.n	1cd56 <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cd46:	f002 021f 	and.w	r2, r2, #31
   1cd4a:	095b      	lsrs	r3, r3, #5
   1cd4c:	fa01 f202 	lsl.w	r2, r1, r2
   1cd50:	490c      	ldr	r1, [pc, #48]	; (1cd84 <hal_timer_config+0xf4>)
   1cd52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1cd56:	b97c      	cbnz	r4, 1cd78 <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
   1cd58:	b662      	cpsie	i

    return 0;
   1cd5a:	2000      	movs	r0, #0

err:
    return rc;
}
   1cd5c:	bc30      	pop	{r4, r5}
   1cd5e:	4770      	bx	lr
    return rc;
   1cd60:	2016      	movs	r0, #22
   1cd62:	4770      	bx	lr
   1cd64:	2016      	movs	r0, #22
   1cd66:	4770      	bx	lr
   1cd68:	2016      	movs	r0, #22
   1cd6a:	4770      	bx	lr
   1cd6c:	2016      	movs	r0, #22
   1cd6e:	4770      	bx	lr
   1cd70:	2016      	movs	r0, #22
   1cd72:	4770      	bx	lr
   1cd74:	2016      	movs	r0, #22
}
   1cd76:	4770      	bx	lr
    return 0;
   1cd78:	2000      	movs	r0, #0
   1cd7a:	e7ef      	b.n	1cd5c <hal_timer_config+0xcc>
   1cd7c:	00021e3c 	.word	0x00021e3c
   1cd80:	00f42400 	.word	0x00f42400
   1cd84:	e000e100 	.word	0xe000e100

0001cd88 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   1cd88:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1cd8a:	2805      	cmp	r0, #5
   1cd8c:	dc0c      	bgt.n	1cda8 <hal_timer_read+0x20>
   1cd8e:	4b09      	ldr	r3, [pc, #36]	; (1cdb4 <hal_timer_read+0x2c>)
   1cd90:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1cd94:	b140      	cbz	r0, 1cda8 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   1cd96:	7883      	ldrb	r3, [r0, #2]
   1cd98:	b91b      	cbnz	r3, 1cda2 <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1cd9a:	6900      	ldr	r0, [r0, #16]
   1cd9c:	f7ff fe5a 	bl	1ca54 <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   1cda0:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   1cda2:	f7ff fec1 	bl	1cb28 <hal_timer_read_bsptimer>
   1cda6:	e7fb      	b.n	1cda0 <hal_timer_read+0x18>
    assert(0);
   1cda8:	2300      	movs	r3, #0
   1cdaa:	461a      	mov	r2, r3
   1cdac:	4619      	mov	r1, r3
   1cdae:	4618      	mov	r0, r3
   1cdb0:	f7fd fcf2 	bl	1a798 <__assert_func>
   1cdb4:	00021e3c 	.word	0x00021e3c

0001cdb8 <nrf52_periph_create_timers>:
};
#endif

static void
nrf52_periph_create_timers(void)
{
   1cdb8:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   1cdba:	2100      	movs	r1, #0
   1cdbc:	4608      	mov	r0, r1
   1cdbe:	f7ff ff37 	bl	1cc30 <hal_timer_init>
    assert(rc == 0);
   1cdc2:	b920      	cbnz	r0, 1cdce <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1cdc4:	4808      	ldr	r0, [pc, #32]	; (1cde8 <nrf52_periph_create_timers+0x30>)
   1cdc6:	f7fd ff11 	bl	1abec <os_cputime_init>
    assert(rc == 0);
   1cdca:	b930      	cbnz	r0, 1cdda <nrf52_periph_create_timers+0x22>
#endif
}
   1cdcc:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1cdce:	2300      	movs	r3, #0
   1cdd0:	461a      	mov	r2, r3
   1cdd2:	4619      	mov	r1, r3
   1cdd4:	4618      	mov	r0, r3
   1cdd6:	f7fd fcdf 	bl	1a798 <__assert_func>
    assert(rc == 0);
   1cdda:	2300      	movs	r3, #0
   1cddc:	461a      	mov	r2, r3
   1cdde:	4619      	mov	r1, r3
   1cde0:	4618      	mov	r0, r3
   1cde2:	f7fd fcd9 	bl	1a798 <__assert_func>
   1cde6:	bf00      	nop
   1cde8:	000f4240 	.word	0x000f4240

0001cdec <nrf52_periph_create_i2c>:
#endif
}

static void
nrf52_periph_create_i2c(void)
{
   1cdec:	b508      	push	{r3, lr}
    rc = bus_i2c_hal_dev_create("i2c1", &i2c1_bus,
                                (struct bus_i2c_dev_cfg *)&i2c1_cfg);
    assert(rc == 0);
#endif
#else
    rc = hal_i2c_init(1, (void *)&hal_i2c1_cfg);
   1cdee:	4906      	ldr	r1, [pc, #24]	; (1ce08 <nrf52_periph_create_i2c+0x1c>)
   1cdf0:	2001      	movs	r0, #1
   1cdf2:	f7fd f82b 	bl	19e4c <hal_i2c_init>
    assert(rc == 0);
   1cdf6:	b900      	cbnz	r0, 1cdfa <nrf52_periph_create_i2c+0xe>
#endif
#endif
}
   1cdf8:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1cdfa:	2300      	movs	r3, #0
   1cdfc:	461a      	mov	r2, r3
   1cdfe:	4619      	mov	r1, r3
   1ce00:	4618      	mov	r0, r3
   1ce02:	f7fd fcc9 	bl	1a798 <__assert_func>
   1ce06:	bf00      	nop
   1ce08:	00021e54 	.word	0x00021e54

0001ce0c <nrf52_periph_create_spi>:

static void
nrf52_periph_create_spi(void)
{
   1ce0c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   1ce0e:	2200      	movs	r2, #0
   1ce10:	4905      	ldr	r1, [pc, #20]	; (1ce28 <nrf52_periph_create_spi+0x1c>)
   1ce12:	4610      	mov	r0, r2
   1ce14:	f7fd fb4e 	bl	1a4b4 <hal_spi_init>
    assert(rc == 0);
   1ce18:	b900      	cbnz	r0, 1ce1c <nrf52_periph_create_spi+0x10>
#endif
#if MYNEWT_VAL(SPI_2_SLAVE)
    rc = hal_spi_init(2, (void *)&os_bsp_spi2s_cfg, HAL_SPI_TYPE_SLAVE);
    assert(rc == 0);
#endif
}
   1ce1a:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1ce1c:	2300      	movs	r3, #0
   1ce1e:	461a      	mov	r2, r3
   1ce20:	4619      	mov	r1, r3
   1ce22:	4618      	mov	r0, r3
   1ce24:	f7fd fcb8 	bl	1a798 <__assert_func>
   1ce28:	00021e60 	.word	0x00021e60

0001ce2c <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   1ce2c:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   1ce2e:	f7ff ffc3 	bl	1cdb8 <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
   1ce32:	f7ff ffdb 	bl	1cdec <nrf52_periph_create_i2c>
    nrf52_periph_create_spi();
   1ce36:	f7ff ffe9 	bl	1ce0c <nrf52_periph_create_spi>
}
   1ce3a:	bd08      	pop	{r3, pc}

0001ce3c <sensor_dev_create>:
    assert(rc == 0);

    rc = config_icp10114_sensor();
    assert(rc == 0);
#endif
}
   1ce3c:	4770      	bx	lr
	...

0001ce40 <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
   1ce40:	4b08      	ldr	r3, [pc, #32]	; (1ce64 <sensor_mgr_remove+0x24>)
   1ce42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1ce44:	4282      	cmp	r2, r0
   1ce46:	d104      	bne.n	1ce52 <sensor_mgr_remove+0x12>
   1ce48:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
   1ce4c:	631a      	str	r2, [r3, #48]	; 0x30
   1ce4e:	4770      	bx	lr
   1ce50:	461a      	mov	r2, r3
   1ce52:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1ce56:	4283      	cmp	r3, r0
   1ce58:	d1fa      	bne.n	1ce50 <sensor_mgr_remove+0x10>
   1ce5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1ce5e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
   1ce62:	4770      	bx	lr
   1ce64:	2000def0 	.word	0x2000def0

0001ce68 <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
   1ce68:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
   1ce6a:	6a03      	ldr	r3, [r0, #32]
   1ce6c:	b993      	cbnz	r3, 1ce94 <sensor_mgr_insert+0x2c>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1ce6e:	4b15      	ldr	r3, [pc, #84]	; (1cec4 <sensor_mgr_insert+0x5c>)
   1ce70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1ce72:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1ce74:	e002      	b.n	1ce7c <sensor_mgr_insert+0x14>
            prev = cursor;
   1ce76:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1ce78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1ce7c:	2b00      	cmp	r3, #0
   1ce7e:	d1fa      	bne.n	1ce76 <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
   1ce80:	b1c9      	cbz	r1, 1ceb6 <sensor_mgr_insert+0x4e>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
   1ce82:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   1ce86:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
   1ce8a:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
   1ce8e:	f85d 4b04 	ldr.w	r4, [sp], #4
   1ce92:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1ce94:	4b0b      	ldr	r3, [pc, #44]	; (1cec4 <sensor_mgr_insert+0x5c>)
   1ce96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1ce98:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1ce9a:	2b00      	cmp	r3, #0
   1ce9c:	d0f0      	beq.n	1ce80 <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
   1ce9e:	6a1a      	ldr	r2, [r3, #32]
   1cea0:	2a00      	cmp	r2, #0
   1cea2:	d0ed      	beq.n	1ce80 <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
   1cea4:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1cea6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1cea8:	1b12      	subs	r2, r2, r4
   1ceaa:	2a00      	cmp	r2, #0
   1ceac:	dbe8      	blt.n	1ce80 <sensor_mgr_insert+0x18>
        prev = cursor;
   1ceae:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1ceb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1ceb4:	e7f1      	b.n	1ce9a <sensor_mgr_insert+0x32>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
   1ceb6:	4b03      	ldr	r3, [pc, #12]	; (1cec4 <sensor_mgr_insert+0x5c>)
   1ceb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1ceba:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   1cebe:	6318      	str	r0, [r3, #48]	; 0x30
   1cec0:	e7e5      	b.n	1ce8e <sensor_mgr_insert+0x26>
   1cec2:	bf00      	nop
   1cec4:	2000def0 	.word	0x2000def0

0001cec8 <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
   1cec8:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
   1ceca:	fab0 f080 	clz	r0, r0
   1cece:	0940      	lsrs	r0, r0, #5
   1ced0:	4770      	bx	lr
	...

0001ced4 <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
   1ced4:	4b01      	ldr	r3, [pc, #4]	; (1cedc <sensor_mgr_evq_set+0x8>)
   1ced6:	62d8      	str	r0, [r3, #44]	; 0x2c
}
   1ced8:	4770      	bx	lr
   1ceda:	bf00      	nop
   1cedc:	2000def0 	.word	0x2000def0

0001cee0 <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
   1cee0:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
   1cee4:	e9d1 2300 	ldrd	r2, r3, [r1]
   1cee8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1ceec:	ea02 0b04 	and.w	fp, r2, r4
   1cef0:	ea03 0c05 	and.w	ip, r3, r5
   1cef4:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
   1cef8:	ea0b 0200 	and.w	r2, fp, r0
   1cefc:	ea0c 0301 	and.w	r3, ip, r1
   1cf00:	4313      	orrs	r3, r2
}
   1cf02:	bf14      	ite	ne
   1cf04:	2001      	movne	r0, #1
   1cf06:	2000      	moveq	r0, #0
   1cf08:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1cf0c:	4770      	bx	lr

0001cf0e <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
   1cf0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cf12:	b083      	sub	sp, #12
   1cf14:	4605      	mov	r5, r0
   1cf16:	4689      	mov	r9, r1
   1cf18:	4690      	mov	r8, r2
   1cf1a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
   1cf1e:	790b      	ldrb	r3, [r1, #4]
   1cf20:	2b01      	cmp	r3, #1
   1cf22:	d013      	beq.n	1cf4c <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
   1cf24:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   1cf26:	e000      	b.n	1cf2a <sensor_read_data_func+0x1c>
   1cf28:	6924      	ldr	r4, [r4, #16]
   1cf2a:	b17c      	cbz	r4, 1cf4c <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
   1cf2c:	e9d4 0100 	ldrd	r0, r1, [r4]
   1cf30:	ea00 0206 	and.w	r2, r0, r6
   1cf34:	ea01 0307 	and.w	r3, r1, r7
   1cf38:	4313      	orrs	r3, r2
   1cf3a:	d0f5      	beq.n	1cf28 <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
   1cf3c:	68a3      	ldr	r3, [r4, #8]
   1cf3e:	68e1      	ldr	r1, [r4, #12]
   1cf40:	e9cd 6700 	strd	r6, r7, [sp]
   1cf44:	4642      	mov	r2, r8
   1cf46:	4628      	mov	r0, r5
   1cf48:	4798      	blx	r3
   1cf4a:	e7ed      	b.n	1cf28 <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
   1cf4c:	f8d9 3000 	ldr.w	r3, [r9]
   1cf50:	b14b      	cbz	r3, 1cf66 <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
   1cf52:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1cf56:	e9cd 6700 	strd	r6, r7, [sp]
   1cf5a:	4642      	mov	r2, r8
   1cf5c:	4628      	mov	r0, r5
   1cf5e:	4798      	blx	r3
    }

    return (0);
}
   1cf60:	b003      	add	sp, #12
   1cf62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
   1cf66:	2000      	movs	r0, #0
   1cf68:	e7fa      	b.n	1cf60 <sensor_read_data_func+0x52>
	...

0001cf6c <sensor_base_ts_update_event>:
{
   1cf6c:	b530      	push	{r4, r5, lr}
   1cf6e:	b087      	sub	sp, #28
    ticks = os_time_get();
   1cf70:	f7fe fe30 	bl	1bbd4 <os_time_get>
   1cf74:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
   1cf76:	a901      	add	r1, sp, #4
   1cf78:	a802      	add	r0, sp, #8
   1cf7a:	f7fe fe65 	bl	1bc48 <os_gettimeofday>
    if (rc) {
   1cf7e:	b138      	cbz	r0, 1cf90 <sensor_base_ts_update_event+0x24>
        ticks += OS_TICKS_PER_SEC * 600;
   1cf80:	f504 3496 	add.w	r4, r4, #76800	; 0x12c00
    os_callout_reset(&st_up_osco, ticks);
   1cf84:	4621      	mov	r1, r4
   1cf86:	4809      	ldr	r0, [pc, #36]	; (1cfac <sensor_base_ts_update_event+0x40>)
   1cf88:	f7fd fdac 	bl	1aae4 <os_callout_reset>
}
   1cf8c:	b007      	add	sp, #28
   1cf8e:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
   1cf90:	f504 347a 	add.w	r4, r4, #256000	; 0x3e800
    sensor_base_ts.st_ostv = ostv;
   1cf94:	4d06      	ldr	r5, [pc, #24]	; (1cfb0 <sensor_base_ts_update_event+0x44>)
   1cf96:	ab06      	add	r3, sp, #24
   1cf98:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1cf9c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1cfa0:	9b01      	ldr	r3, [sp, #4]
   1cfa2:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1cfa4:	f7fd fe28 	bl	1abf8 <os_cputime_get32>
   1cfa8:	6168      	str	r0, [r5, #20]
   1cfaa:	e7eb      	b.n	1cf84 <sensor_base_ts_update_event+0x18>
   1cfac:	2000df24 	.word	0x2000df24
   1cfb0:	2000df48 	.word	0x2000df48

0001cfb4 <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
   1cfb4:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1cfb8:	4604      	mov	r4, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
   1cfba:	f7fd fe1d 	bl	1abf8 <os_cputime_get32>

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
   1cfbe:	4a0e      	ldr	r2, [pc, #56]	; (1cff8 <sensor_up_timestamp+0x44>)
   1cfc0:	6955      	ldr	r5, [r2, #20]
   1cfc2:	1b43      	subs	r3, r0, r5
             sensor_base_ts.st_cputime);

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
   1cfc4:	6460      	str	r0, [r4, #68]	; 0x44
   1cfc6:	6150      	str	r0, [r2, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1cfc8:	e9d2 0100 	ldrd	r0, r1, [r2]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1cfcc:	6895      	ldr	r5, [r2, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1cfce:	441d      	add	r5, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1cfd0:	4b0a      	ldr	r3, [pc, #40]	; (1cffc <sensor_up_timestamp+0x48>)
   1cfd2:	fba3 c305 	umull	ip, r3, r3, r5
   1cfd6:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1cfd8:	eb10 0b03 	adds.w	fp, r0, r3
   1cfdc:	f141 0c00 	adc.w	ip, r1, #0
   1cfe0:	e9c2 bc00 	strd	fp, ip, [r2]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
   1cfe4:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
   1cfe8:	4905      	ldr	r1, [pc, #20]	; (1d000 <sensor_up_timestamp+0x4c>)
   1cfea:	fb01 5113 	mls	r1, r1, r3, r5
    sensor_base_ts.st_ostv.tv_usec  =
   1cfee:	6091      	str	r1, [r2, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
   1cff0:	63a1      	str	r1, [r4, #56]	; 0x38

}
   1cff2:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   1cff6:	bf00      	nop
   1cff8:	2000df48 	.word	0x2000df48
   1cffc:	431bde83 	.word	0x431bde83
   1d000:	000f4240 	.word	0x000f4240

0001d004 <sensor_mgr_lock>:
{
   1d004:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
   1d006:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d00a:	4804      	ldr	r0, [pc, #16]	; (1d01c <sensor_mgr_lock+0x18>)
   1d00c:	f7fe fa5c 	bl	1b4c8 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1d010:	b108      	cbz	r0, 1d016 <sensor_mgr_lock+0x12>
   1d012:	2809      	cmp	r0, #9
   1d014:	d000      	beq.n	1d018 <sensor_mgr_lock+0x14>
}
   1d016:	bd08      	pop	{r3, pc}
        return (0);
   1d018:	2000      	movs	r0, #0
   1d01a:	e7fc      	b.n	1d016 <sensor_mgr_lock+0x12>
   1d01c:	2000def0 	.word	0x2000def0

0001d020 <sensor_mgr_unlock>:
{
   1d020:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
   1d022:	4802      	ldr	r0, [pc, #8]	; (1d02c <sensor_mgr_unlock+0xc>)
   1d024:	f7fe f9f4 	bl	1b410 <os_mutex_release>
}
   1d028:	bd08      	pop	{r3, pc}
   1d02a:	bf00      	nop
   1d02c:	2000def0 	.word	0x2000def0

0001d030 <sensor_mgr_evq_get>:
}
   1d030:	4b01      	ldr	r3, [pc, #4]	; (1d038 <sensor_mgr_evq_get+0x8>)
   1d032:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1d034:	4770      	bx	lr
   1d036:	bf00      	nop
   1d038:	2000def0 	.word	0x2000def0

0001d03c <sensor_mgr_init>:
{
   1d03c:	b570      	push	{r4, r5, r6, lr}
   1d03e:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
   1d040:	f7fd ff68 	bl	1af14 <os_eventq_dflt_get>
   1d044:	f7ff ff46 	bl	1ced4 <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
   1d048:	4b1c      	ldr	r3, [pc, #112]	; (1d0bc <sensor_mgr_init+0x80>)
   1d04a:	9300      	str	r3, [sp, #0]
   1d04c:	4b1c      	ldr	r3, [pc, #112]	; (1d0c0 <sensor_mgr_init+0x84>)
   1d04e:	2218      	movs	r2, #24
   1d050:	2105      	movs	r1, #5
   1d052:	481c      	ldr	r0, [pc, #112]	; (1d0c4 <sensor_mgr_init+0x88>)
   1d054:	f7fe f8e8 	bl	1b228 <os_mempool_init>
    assert(rc == OS_OK);
   1d058:	bb50      	cbnz	r0, 1d0b0 <sensor_mgr_init+0x74>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
   1d05a:	f7ff ffe9 	bl	1d030 <sensor_mgr_evq_get>
   1d05e:	4e1a      	ldr	r6, [pc, #104]	; (1d0c8 <sensor_mgr_init+0x8c>)
   1d060:	2300      	movs	r3, #0
   1d062:	4a1a      	ldr	r2, [pc, #104]	; (1d0cc <sensor_mgr_init+0x90>)
   1d064:	4601      	mov	r1, r0
   1d066:	4630      	mov	r0, r6
   1d068:	f7fd fd10 	bl	1aa8c <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
   1d06c:	ad04      	add	r5, sp, #16
   1d06e:	a903      	add	r1, sp, #12
   1d070:	4628      	mov	r0, r5
   1d072:	f7fe fde9 	bl	1bc48 <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
   1d076:	4c16      	ldr	r4, [pc, #88]	; (1d0d0 <sensor_mgr_init+0x94>)
   1d078:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1d07c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1d080:	9b03      	ldr	r3, [sp, #12]
   1d082:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1d084:	f7fd fdb8 	bl	1abf8 <os_cputime_get32>
   1d088:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
   1d08a:	f7ff ffd1 	bl	1d030 <sensor_mgr_evq_get>
   1d08e:	4c11      	ldr	r4, [pc, #68]	; (1d0d4 <sensor_mgr_init+0x98>)
   1d090:	2300      	movs	r3, #0
   1d092:	4a11      	ldr	r2, [pc, #68]	; (1d0d8 <sensor_mgr_init+0x9c>)
   1d094:	4601      	mov	r1, r0
   1d096:	4620      	mov	r0, r4
   1d098:	f7fd fcf8 	bl	1aa8c <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
   1d09c:	2180      	movs	r1, #128	; 0x80
   1d09e:	4620      	mov	r0, r4
   1d0a0:	f7fd fd20 	bl	1aae4 <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
   1d0a4:	f1a6 000c 	sub.w	r0, r6, #12
   1d0a8:	f7fe f9a8 	bl	1b3fc <os_mutex_init>
}
   1d0ac:	b008      	add	sp, #32
   1d0ae:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
   1d0b0:	2300      	movs	r3, #0
   1d0b2:	461a      	mov	r2, r3
   1d0b4:	4619      	mov	r1, r3
   1d0b6:	4618      	mov	r0, r3
   1d0b8:	f7fd fb6e 	bl	1a798 <__assert_func>
   1d0bc:	00021e64 	.word	0x00021e64
   1d0c0:	2000d9ec 	.word	0x2000d9ec
   1d0c4:	2000da64 	.word	0x2000da64
   1d0c8:	2000defc 	.word	0x2000defc
   1d0cc:	0001d2a9 	.word	0x0001d2a9
   1d0d0:	2000df48 	.word	0x2000df48
   1d0d4:	2000df24 	.word	0x2000df24
   1d0d8:	0001cf6d 	.word	0x0001cf6d

0001d0dc <sensor_pkg_init>:
{
   1d0dc:	b508      	push	{r3, lr}
    sensor_mgr_init();
   1d0de:	f7ff ffad 	bl	1d03c <sensor_mgr_init>
}
   1d0e2:	bd08      	pop	{r3, pc}

0001d0e4 <sensor_lock>:
{
   1d0e4:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
   1d0e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d0ea:	3004      	adds	r0, #4
   1d0ec:	f7fe f9ec 	bl	1b4c8 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1d0f0:	b108      	cbz	r0, 1d0f6 <sensor_lock+0x12>
   1d0f2:	2809      	cmp	r0, #9
   1d0f4:	d000      	beq.n	1d0f8 <sensor_lock+0x14>
}
   1d0f6:	bd08      	pop	{r3, pc}
        return (0);
   1d0f8:	2000      	movs	r0, #0
   1d0fa:	e7fc      	b.n	1d0f6 <sensor_lock+0x12>

0001d0fc <sensor_unlock>:
{
   1d0fc:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
   1d0fe:	3004      	adds	r0, #4
   1d100:	f7fe f986 	bl	1b410 <os_mutex_release>
}
   1d104:	bd08      	pop	{r3, pc}

0001d106 <sensor_update_nextrun>:
{
   1d106:	b530      	push	{r4, r5, lr}
   1d108:	b083      	sub	sp, #12
   1d10a:	4604      	mov	r4, r0
   1d10c:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
   1d10e:	a901      	add	r1, sp, #4
   1d110:	6a00      	ldr	r0, [r0, #32]
   1d112:	f7fe fdb5 	bl	1bc80 <os_time_ms_to_ticks>
    sensor_lock(sensor);
   1d116:	4620      	mov	r0, r4
   1d118:	f7ff ffe4 	bl	1d0e4 <sensor_lock>
    sensor_mgr_remove(sensor);
   1d11c:	4620      	mov	r0, r4
   1d11e:	f7ff fe8f 	bl	1ce40 <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
   1d122:	9b01      	ldr	r3, [sp, #4]
   1d124:	441d      	add	r5, r3
   1d126:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
   1d128:	4620      	mov	r0, r4
   1d12a:	f7ff fe9d 	bl	1ce68 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1d12e:	4620      	mov	r0, r4
   1d130:	f7ff ffe4 	bl	1d0fc <sensor_unlock>
}
   1d134:	b003      	add	sp, #12
   1d136:	bd30      	pop	{r4, r5, pc}

0001d138 <sensor_calc_nextrun_delta>:
{
   1d138:	b538      	push	{r3, r4, r5, lr}
   1d13a:	4605      	mov	r5, r0
   1d13c:	460c      	mov	r4, r1
    sensor_lock(sensor);
   1d13e:	f7ff ffd1 	bl	1d0e4 <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
   1d142:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
   1d144:	1b0c      	subs	r4, r1, r4
   1d146:	d404      	bmi.n	1d152 <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
   1d148:	4628      	mov	r0, r5
   1d14a:	f7ff ffd7 	bl	1d0fc <sensor_unlock>
}
   1d14e:	4620      	mov	r0, r4
   1d150:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
   1d152:	2400      	movs	r4, #0
   1d154:	e7f8      	b.n	1d148 <sensor_calc_nextrun_delta+0x10>
	...

0001d158 <sensor_find_min_nextrun_sensor>:
{
   1d158:	b570      	push	{r4, r5, r6, lr}
   1d15a:	4606      	mov	r6, r0
   1d15c:	460d      	mov	r5, r1
    sensor_mgr_lock();
   1d15e:	f7ff ff51 	bl	1d004 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
   1d162:	4b05      	ldr	r3, [pc, #20]	; (1d178 <sensor_find_min_nextrun_sensor+0x20>)
   1d164:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
   1d166:	4631      	mov	r1, r6
   1d168:	4620      	mov	r0, r4
   1d16a:	f7ff ffe5 	bl	1d138 <sensor_calc_nextrun_delta>
   1d16e:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
   1d170:	f7ff ff56 	bl	1d020 <sensor_mgr_unlock>
}
   1d174:	4620      	mov	r0, r4
   1d176:	bd70      	pop	{r4, r5, r6, pc}
   1d178:	2000def0 	.word	0x2000def0

0001d17c <sensor_mgr_register>:
{
   1d17c:	b538      	push	{r3, r4, r5, lr}
   1d17e:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
   1d180:	f7ff ff40 	bl	1d004 <sensor_mgr_lock>
    if (rc != 0) {
   1d184:	4604      	mov	r4, r0
   1d186:	b108      	cbz	r0, 1d18c <sensor_mgr_register+0x10>
}
   1d188:	4620      	mov	r0, r4
   1d18a:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
   1d18c:	4628      	mov	r0, r5
   1d18e:	f7ff ffa9 	bl	1d0e4 <sensor_lock>
    if (rc != 0) {
   1d192:	4604      	mov	r4, r0
   1d194:	2800      	cmp	r0, #0
   1d196:	d1f7      	bne.n	1d188 <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
   1d198:	4628      	mov	r0, r5
   1d19a:	f7ff fe65 	bl	1ce68 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1d19e:	4628      	mov	r0, r5
   1d1a0:	f7ff ffac 	bl	1d0fc <sensor_unlock>
    sensor_mgr_unlock();
   1d1a4:	f7ff ff3c 	bl	1d020 <sensor_mgr_unlock>
    return (0);
   1d1a8:	e7ee      	b.n	1d188 <sensor_mgr_register+0xc>

0001d1aa <sensor_init>:
{
   1d1aa:	b538      	push	{r3, r4, r5, lr}
   1d1ac:	4604      	mov	r4, r0
   1d1ae:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
   1d1b0:	2288      	movs	r2, #136	; 0x88
   1d1b2:	2100      	movs	r1, #0
   1d1b4:	f7fe fef3 	bl	1bf9e <memset>
    rc = os_mutex_init(&sensor->s_lock);
   1d1b8:	1d20      	adds	r0, r4, #4
   1d1ba:	f7fe f91f 	bl	1b3fc <os_mutex_init>
    if (rc != 0) {
   1d1be:	4603      	mov	r3, r0
   1d1c0:	b900      	cbnz	r0, 1d1c4 <sensor_init+0x1a>
    sensor->s_dev = dev;
   1d1c2:	6025      	str	r5, [r4, #0]
}
   1d1c4:	4618      	mov	r0, r3
   1d1c6:	bd38      	pop	{r3, r4, r5, pc}

0001d1c8 <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
   1d1c8:	b530      	push	{r4, r5, lr}
   1d1ca:	b089      	sub	sp, #36	; 0x24
   1d1cc:	4604      	mov	r4, r0
   1d1ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
   1d1d2:	f7ff ff87 	bl	1d0e4 <sensor_lock>
    if (rc) {
   1d1d6:	4605      	mov	r5, r0
   1d1d8:	b9f8      	cbnz	r0, 1d21a <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
   1d1da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d1dc:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
   1d1de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1d1e0:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
   1d1e2:	a904      	add	r1, sp, #16
   1d1e4:	4620      	mov	r0, r4
   1d1e6:	f7ff fe7b 	bl	1cee0 <sensor_mgr_match_bytype>
   1d1ea:	b1e0      	cbz	r0, 1d226 <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
   1d1ec:	4620      	mov	r0, r4
   1d1ee:	f7ff fee1 	bl	1cfb4 <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
   1d1f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d1f4:	6819      	ldr	r1, [r3, #0]
   1d1f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d1f8:	9302      	str	r3, [sp, #8]
   1d1fa:	ab06      	add	r3, sp, #24
   1d1fc:	9301      	str	r3, [sp, #4]
   1d1fe:	4b0b      	ldr	r3, [pc, #44]	; (1d22c <sensor_read+0x64>)
   1d200:	9300      	str	r3, [sp, #0]
   1d202:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1d206:	4620      	mov	r0, r4
   1d208:	4788      	blx	r1
                                  timeout);
    if (rc) {
   1d20a:	4605      	mov	r5, r0
   1d20c:	b128      	cbz	r0, 1d21a <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
   1d20e:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1d210:	b11b      	cbz	r3, 1d21a <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
   1d212:	4602      	mov	r2, r0
   1d214:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1d216:	4620      	mov	r0, r4
   1d218:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
   1d21a:	4620      	mov	r0, r4
   1d21c:	f7ff ff6e 	bl	1d0fc <sensor_unlock>
    return (rc);
}
   1d220:	4628      	mov	r0, r5
   1d222:	b009      	add	sp, #36	; 0x24
   1d224:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
   1d226:	f06f 0503 	mvn.w	r5, #3
   1d22a:	e7f6      	b.n	1d21a <sensor_read+0x52>
   1d22c:	0001cf0f 	.word	0x0001cf0f

0001d230 <sensor_mgr_poll_bytype>:
{
   1d230:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d232:	b085      	sub	sp, #20
   1d234:	4616      	mov	r6, r2
   1d236:	461f      	mov	r7, r3
   1d238:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
   1d23a:	b10c      	cbz	r4, 1d240 <sensor_mgr_poll_bytype+0x10>
   1d23c:	8aa3      	ldrh	r3, [r4, #20]
   1d23e:	b9cb      	cbnz	r3, 1d274 <sensor_mgr_poll_bytype+0x44>
   1d240:	4632      	mov	r2, r6
   1d242:	463b      	mov	r3, r7
   1d244:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
   1d246:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d24a:	9102      	str	r1, [sp, #8]
   1d24c:	2100      	movs	r1, #0
   1d24e:	9101      	str	r1, [sp, #4]
   1d250:	9100      	str	r1, [sp, #0]
   1d252:	f7ff ffb9 	bl	1d1c8 <sensor_read>
        sensor_lock(sensor);
   1d256:	4628      	mov	r0, r5
   1d258:	f7ff ff44 	bl	1d0e4 <sensor_lock>
        if (stt) {
   1d25c:	b12c      	cbz	r4, 1d26a <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
   1d25e:	8aa3      	ldrh	r3, [r4, #20]
   1d260:	b91b      	cbnz	r3, 1d26a <sensor_mgr_poll_bytype+0x3a>
   1d262:	8a63      	ldrh	r3, [r4, #18]
   1d264:	b10b      	cbz	r3, 1d26a <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
   1d266:	3b01      	subs	r3, #1
   1d268:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
   1d26a:	4628      	mov	r0, r5
   1d26c:	f7ff ff46 	bl	1d0fc <sensor_unlock>
}
   1d270:	b005      	add	sp, #20
   1d272:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
   1d274:	3b01      	subs	r3, #1
   1d276:	82a3      	strh	r3, [r4, #20]
}
   1d278:	e7fa      	b.n	1d270 <sensor_mgr_poll_bytype+0x40>

0001d27a <sensor_poll_per_type_trait>:
{
   1d27a:	b570      	push	{r4, r5, r6, lr}
   1d27c:	b082      	sub	sp, #8
   1d27e:	4605      	mov	r5, r0
   1d280:	460e      	mov	r6, r1
    sensor_lock(sensor);
   1d282:	f7ff ff2f 	bl	1d0e4 <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1d286:	6fec      	ldr	r4, [r5, #124]	; 0x7c
   1d288:	e007      	b.n	1d29a <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
   1d28a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d28e:	9601      	str	r6, [sp, #4]
   1d290:	9400      	str	r4, [sp, #0]
   1d292:	4628      	mov	r0, r5
   1d294:	f7ff ffcc 	bl	1d230 <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1d298:	6a24      	ldr	r4, [r4, #32]
   1d29a:	2c00      	cmp	r4, #0
   1d29c:	d1f5      	bne.n	1d28a <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
   1d29e:	4628      	mov	r0, r5
   1d2a0:	f7ff ff2c 	bl	1d0fc <sensor_unlock>
}
   1d2a4:	b002      	add	sp, #8
   1d2a6:	bd70      	pop	{r4, r5, r6, pc}

0001d2a8 <sensor_mgr_wakeup_event>:
{
   1d2a8:	b570      	push	{r4, r5, r6, lr}
   1d2aa:	b084      	sub	sp, #16
    now = os_time_get();
   1d2ac:	f7fe fc92 	bl	1bbd4 <os_time_get>
   1d2b0:	4605      	mov	r5, r0
    sensor_mgr_lock();
   1d2b2:	f7ff fea7 	bl	1d004 <sensor_mgr_lock>
   1d2b6:	e012      	b.n	1d2de <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
   1d2b8:	4620      	mov	r0, r4
   1d2ba:	f7ff ff1f 	bl	1d0fc <sensor_unlock>
            sensor_mgr_unlock();
   1d2be:	f7ff feaf 	bl	1d020 <sensor_mgr_unlock>
}
   1d2c2:	b004      	add	sp, #16
   1d2c4:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
   1d2c6:	4632      	mov	r2, r6
   1d2c8:	4629      	mov	r1, r5
   1d2ca:	4620      	mov	r0, r4
   1d2cc:	f7ff ffd5 	bl	1d27a <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
   1d2d0:	4629      	mov	r1, r5
   1d2d2:	4620      	mov	r0, r4
   1d2d4:	f7ff ff17 	bl	1d106 <sensor_update_nextrun>
        sensor_unlock(cursor);
   1d2d8:	4620      	mov	r0, r4
   1d2da:	f7ff ff0f 	bl	1d0fc <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
   1d2de:	a903      	add	r1, sp, #12
   1d2e0:	4628      	mov	r0, r5
   1d2e2:	f7ff ff39 	bl	1d158 <sensor_find_min_nextrun_sensor>
   1d2e6:	4604      	mov	r4, r0
        sensor_lock(cursor);
   1d2e8:	f7ff fefc 	bl	1d0e4 <sensor_lock>
        if (!cursor->s_poll_rate) {
   1d2ec:	6a23      	ldr	r3, [r4, #32]
   1d2ee:	2b00      	cmp	r3, #0
   1d2f0:	d0e2      	beq.n	1d2b8 <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
   1d2f2:	9e03      	ldr	r6, [sp, #12]
   1d2f4:	b96e      	cbnz	r6, 1d312 <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
   1d2f6:	4620      	mov	r0, r4
   1d2f8:	f7ff fde6 	bl	1cec8 <sensor_type_traits_empty>
   1d2fc:	2800      	cmp	r0, #0
   1d2fe:	d0e2      	beq.n	1d2c6 <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
   1d300:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1d304:	9501      	str	r5, [sp, #4]
   1d306:	2100      	movs	r1, #0
   1d308:	9100      	str	r1, [sp, #0]
   1d30a:	4620      	mov	r0, r4
   1d30c:	f7ff ff90 	bl	1d230 <sensor_mgr_poll_bytype>
   1d310:	e7de      	b.n	1d2d0 <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
   1d312:	f7ff fe85 	bl	1d020 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
   1d316:	9903      	ldr	r1, [sp, #12]
   1d318:	4801      	ldr	r0, [pc, #4]	; (1d320 <sensor_mgr_wakeup_event+0x78>)
   1d31a:	f7fd fbe3 	bl	1aae4 <os_callout_reset>
   1d31e:	e7d0      	b.n	1d2c2 <sensor_mgr_wakeup_event+0x1a>
   1d320:	2000defc 	.word	0x2000defc

0001d324 <init_sensor_coap>:

///////////////////////////////////////////////////////////////////////////////
//  CoAP Functions

///  Init the Sensor CoAP module. Called by sysinit() during startup, defined in pkg.yml.
void init_sensor_coap(void) {
   1d324:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
   1d326:	2101      	movs	r1, #1
   1d328:	4806      	ldr	r0, [pc, #24]	; (1d344 <init_sensor_coap+0x20>)
   1d32a:	f7fe faf1 	bl	1b910 <os_sem_init>
    assert(rc == OS_OK);
   1d32e:	b918      	cbnz	r0, 1d338 <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
   1d330:	4b05      	ldr	r3, [pc, #20]	; (1d348 <init_sensor_coap+0x24>)
   1d332:	2201      	movs	r2, #1
   1d334:	701a      	strb	r2, [r3, #0]
}
   1d336:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
   1d338:	2300      	movs	r3, #0
   1d33a:	461a      	mov	r2, r3
   1d33c:	4619      	mov	r1, r3
   1d33e:	4618      	mov	r0, r3
   1d340:	f7fd fa2a 	bl	1a798 <__assert_func>
   1d344:	2000da80 	.word	0x2000da80
   1d348:	2000da88 	.word	0x2000da88

0001d34c <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1d34c:	4b04      	ldr	r3, [pc, #16]	; (1d360 <is_sensor_node+0x14>)
   1d34e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d352:	4313      	orrs	r3, r2
   1d354:	d101      	bne.n	1d35a <is_sensor_node+0xe>
    return false;
   1d356:	2000      	movs	r0, #0
}
   1d358:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1d35a:	2001      	movs	r0, #1
   1d35c:	4770      	bx	lr
   1d35e:	bf00      	nop
   1d360:	2000daa0 	.word	0x2000daa0

0001d364 <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
   1d364:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
   1d366:	4b16      	ldr	r3, [pc, #88]	; (1d3c0 <get_hardware_id+0x5c>)
   1d368:	681b      	ldr	r3, [r3, #0]
   1d36a:	b10b      	cbz	r3, 1d370 <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
   1d36c:	4815      	ldr	r0, [pc, #84]	; (1d3c4 <get_hardware_id+0x60>)
   1d36e:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
   1d370:	f000 fcee 	bl	1dd50 <hal_bsp_hw_id_len>
   1d374:	4b12      	ldr	r3, [pc, #72]	; (1d3c0 <get_hardware_id+0x5c>)
   1d376:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1d378:	280b      	cmp	r0, #11
   1d37a:	d914      	bls.n	1d3a6 <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1d37c:	210c      	movs	r1, #12
   1d37e:	4811      	ldr	r0, [pc, #68]	; (1d3c4 <get_hardware_id+0x60>)
   1d380:	f000 fce8 	bl	1dd54 <hal_bsp_hw_id>
   1d384:	4b0e      	ldr	r3, [pc, #56]	; (1d3c0 <get_hardware_id+0x5c>)
   1d386:	6018      	str	r0, [r3, #0]
   1d388:	2800      	cmp	r0, #0
   1d38a:	dd12      	ble.n	1d3b2 <get_hardware_id+0x4e>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
   1d38c:	490e      	ldr	r1, [pc, #56]	; (1d3c8 <get_hardware_id+0x64>)
   1d38e:	480f      	ldr	r0, [pc, #60]	; (1d3cc <get_hardware_id+0x68>)
   1d390:	f7fc fb3a 	bl	19a08 <console_printf>
   1d394:	4b0a      	ldr	r3, [pc, #40]	; (1d3c0 <get_hardware_id+0x5c>)
   1d396:	6819      	ldr	r1, [r3, #0]
   1d398:	480a      	ldr	r0, [pc, #40]	; (1d3c4 <get_hardware_id+0x60>)
   1d39a:	f7fc fac5 	bl	19928 <console_dump>
   1d39e:	480c      	ldr	r0, [pc, #48]	; (1d3d0 <get_hardware_id+0x6c>)
   1d3a0:	f7fc fb32 	bl	19a08 <console_printf>
   1d3a4:	e7e2      	b.n	1d36c <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1d3a6:	2300      	movs	r3, #0
   1d3a8:	461a      	mov	r2, r3
   1d3aa:	4619      	mov	r1, r3
   1d3ac:	4618      	mov	r0, r3
   1d3ae:	f7fd f9f3 	bl	1a798 <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1d3b2:	2300      	movs	r3, #0
   1d3b4:	461a      	mov	r2, r3
   1d3b6:	4619      	mov	r1, r3
   1d3b8:	4618      	mov	r0, r3
   1d3ba:	f7fd f9ed 	bl	1a798 <__assert_func>
   1d3be:	bf00      	nop
   1d3c0:	2000da98 	.word	0x2000da98
   1d3c4:	2000da8c 	.word	0x2000da8c
   1d3c8:	00021f08 	.word	0x00021f08
   1d3cc:	00021ec0 	.word	0x00021ec0
   1d3d0:	00022020 	.word	0x00022020

0001d3d4 <is_collector_node>:
bool is_collector_node(void) {
   1d3d4:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
   1d3d6:	f7ff ffc5 	bl	1d364 <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1d3da:	220c      	movs	r2, #12
   1d3dc:	4903      	ldr	r1, [pc, #12]	; (1d3ec <is_collector_node+0x18>)
   1d3de:	f7fe fdad 	bl	1bf3c <memcmp>
   1d3e2:	b108      	cbz	r0, 1d3e8 <is_collector_node+0x14>
    return false; 
   1d3e4:	2000      	movs	r0, #0
}
   1d3e6:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1d3e8:	2001      	movs	r0, #1
   1d3ea:	e7fc      	b.n	1d3e6 <is_collector_node+0x12>
   1d3ec:	00021e78 	.word	0x00021e78

0001d3f0 <is_standalone_node>:
bool is_standalone_node(void) {
   1d3f0:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
   1d3f2:	f7ff ffef 	bl	1d3d4 <is_collector_node>
   1d3f6:	b928      	cbnz	r0, 1d404 <is_standalone_node+0x14>
   1d3f8:	4604      	mov	r4, r0
   1d3fa:	f7ff ffa7 	bl	1d34c <is_sensor_node>
   1d3fe:	b910      	cbnz	r0, 1d406 <is_standalone_node+0x16>
   1d400:	2401      	movs	r4, #1
   1d402:	e000      	b.n	1d406 <is_standalone_node+0x16>
    return false;
   1d404:	2400      	movs	r4, #0
}
   1d406:	4620      	mov	r0, r4
   1d408:	bd10      	pop	{r4, pc}
	...

0001d40c <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
   1d40c:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1d40e:	2400      	movs	r4, #0
   1d410:	2c04      	cmp	r4, #4
   1d412:	dc15      	bgt.n	1d440 <sensor_network_init+0x34>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
   1d414:	4b23      	ldr	r3, [pc, #140]	; (1d4a4 <sensor_network_init+0x98>)
   1d416:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1d41a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d41e:	4922      	ldr	r1, [pc, #136]	; (1d4a8 <sensor_network_init+0x9c>)
   1d420:	4822      	ldr	r0, [pc, #136]	; (1d4ac <sensor_network_init+0xa0>)
   1d422:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1d426:	f000 fcaf 	bl	1dd88 <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1d42a:	3001      	adds	r0, #1
   1d42c:	280b      	cmp	r0, #11
   1d42e:	dc01      	bgt.n	1d434 <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1d430:	3401      	adds	r4, #1
   1d432:	e7ed      	b.n	1d410 <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1d434:	2300      	movs	r3, #0
   1d436:	461a      	mov	r2, r3
   1d438:	4619      	mov	r1, r3
   1d43a:	4618      	mov	r0, r3
   1d43c:	f7fd f9ac 	bl	1a798 <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
   1d440:	f7ff ff90 	bl	1d364 <get_hardware_id>
   1d444:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1d446:	2400      	movs	r4, #0
   1d448:	2c04      	cmp	r4, #4
   1d44a:	dc19      	bgt.n	1d480 <sensor_network_init+0x74>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
   1d44c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1d450:	0093      	lsls	r3, r2, #2
   1d452:	220c      	movs	r2, #12
   1d454:	4916      	ldr	r1, [pc, #88]	; (1d4b0 <sensor_network_init+0xa4>)
   1d456:	4419      	add	r1, r3
   1d458:	4628      	mov	r0, r5
   1d45a:	f7fe fd6f 	bl	1bf3c <memcmp>
   1d45e:	b108      	cbz	r0, 1d464 <sensor_network_init+0x58>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1d460:	3401      	adds	r4, #1
   1d462:	e7f1      	b.n	1d448 <sensor_network_init+0x3c>
            sensor_node_address = sensor_node_addresses[i];
   1d464:	4b0f      	ldr	r3, [pc, #60]	; (1d4a4 <sensor_network_init+0x98>)
   1d466:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1d46a:	e9d3 0100 	ldrd	r0, r1, [r3]
   1d46e:	4b11      	ldr	r3, [pc, #68]	; (1d4b4 <sensor_network_init+0xa8>)
   1d470:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
   1d474:	1c63      	adds	r3, r4, #1
   1d476:	4a10      	ldr	r2, [pc, #64]	; (1d4b8 <sensor_network_init+0xac>)
   1d478:	4910      	ldr	r1, [pc, #64]	; (1d4bc <sensor_network_init+0xb0>)
   1d47a:	4811      	ldr	r0, [pc, #68]	; (1d4c0 <sensor_network_init+0xb4>)
   1d47c:	f7fc fac4 	bl	19a08 <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1d480:	f7ff ffa8 	bl	1d3d4 <is_collector_node>
   1d484:	b940      	cbnz	r0, 1d498 <sensor_network_init+0x8c>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
   1d486:	f7ff ffb3 	bl	1d3f0 <is_standalone_node>
   1d48a:	b150      	cbz	r0, 1d4a2 <sensor_network_init+0x96>
   1d48c:	4a0a      	ldr	r2, [pc, #40]	; (1d4b8 <sensor_network_init+0xac>)
   1d48e:	490b      	ldr	r1, [pc, #44]	; (1d4bc <sensor_network_init+0xb0>)
   1d490:	480c      	ldr	r0, [pc, #48]	; (1d4c4 <sensor_network_init+0xb8>)
   1d492:	f7fc fab9 	bl	19a08 <console_printf>
}
   1d496:	e004      	b.n	1d4a2 <sensor_network_init+0x96>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1d498:	4a07      	ldr	r2, [pc, #28]	; (1d4b8 <sensor_network_init+0xac>)
   1d49a:	4908      	ldr	r1, [pc, #32]	; (1d4bc <sensor_network_init+0xb0>)
   1d49c:	480a      	ldr	r0, [pc, #40]	; (1d4c8 <sensor_network_init+0xbc>)
   1d49e:	f7fc fab3 	bl	19a08 <console_printf>
}
   1d4a2:	bd38      	pop	{r3, r4, r5, pc}
   1d4a4:	00021f20 	.word	0x00021f20
   1d4a8:	00021ec8 	.word	0x00021ec8
   1d4ac:	20000130 	.word	0x20000130
   1d4b0:	00021e84 	.word	0x00021e84
   1d4b4:	2000daa0 	.word	0x2000daa0
   1d4b8:	00021ed0 	.word	0x00021ed0
   1d4bc:	00021f08 	.word	0x00021f08
   1d4c0:	00021ed8 	.word	0x00021ed8
   1d4c4:	00021ef8 	.word	0x00021ef8
   1d4c8:	00021ee8 	.word	0x00021ee8

0001d4cc <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
   1d4cc:	b530      	push	{r4, r5, lr}
   1d4ce:	b083      	sub	sp, #12
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
   1d4d0:	2200      	movs	r2, #0
   1d4d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d4d6:	4810      	ldr	r0, [pc, #64]	; (1d518 <config_device+0x4c>)
   1d4d8:	f7fd fc2c 	bl	1ad34 <os_dev_open>
    assert(dev != NULL);
   1d4dc:	b178      	cbz	r0, 1d4fe <config_device+0x32>
   1d4de:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
   1d4e0:	4668      	mov	r0, sp
   1d4e2:	f000 f86c 	bl	1d5be <temp_stub_default_cfg>
    assert(rc == 0);
   1d4e6:	b980      	cbnz	r0, 1d50a <config_device+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
   1d4e8:	4669      	mov	r1, sp
   1d4ea:	4620      	mov	r0, r4
   1d4ec:	f000 f900 	bl	1d6f0 <temp_stub_config>
   1d4f0:	4605      	mov	r5, r0
    os_dev_close(dev);
   1d4f2:	4620      	mov	r0, r4
   1d4f4:	f7fd fc40 	bl	1ad78 <os_dev_close>
    return rc;
}
   1d4f8:	4628      	mov	r0, r5
   1d4fa:	b003      	add	sp, #12
   1d4fc:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
   1d4fe:	2300      	movs	r3, #0
   1d500:	461a      	mov	r2, r3
   1d502:	4619      	mov	r1, r3
   1d504:	4618      	mov	r0, r3
   1d506:	f7fd f947 	bl	1a798 <__assert_func>
    assert(rc == 0);
   1d50a:	2300      	movs	r3, #0
   1d50c:	461a      	mov	r2, r3
   1d50e:	4619      	mov	r1, r3
   1d510:	4618      	mov	r0, r3
   1d512:	f7fd f941 	bl	1a798 <__assert_func>
   1d516:	bf00      	nop
   1d518:	00021f48 	.word	0x00021f48

0001d51c <temp_stub_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
   1d51c:	b510      	push	{r4, lr}
   1d51e:	b082      	sub	sp, #8
    console_printf("TMP create %s\n", DEVICE_NAME);
   1d520:	4c10      	ldr	r4, [pc, #64]	; (1d564 <temp_stub_create+0x48>)
   1d522:	4621      	mov	r1, r4
   1d524:	4810      	ldr	r0, [pc, #64]	; (1d568 <temp_stub_create+0x4c>)
   1d526:	f7fc fa6f 	bl	19a08 <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
   1d52a:	4b10      	ldr	r3, [pc, #64]	; (1d56c <temp_stub_create+0x50>)
   1d52c:	9301      	str	r3, [sp, #4]
   1d52e:	4b10      	ldr	r3, [pc, #64]	; (1d570 <temp_stub_create+0x54>)
   1d530:	9300      	str	r3, [sp, #0]
   1d532:	2300      	movs	r3, #0
   1d534:	2201      	movs	r2, #1
   1d536:	4621      	mov	r1, r4
   1d538:	480e      	ldr	r0, [pc, #56]	; (1d574 <temp_stub_create+0x58>)
   1d53a:	f7fd fbb5 	bl	1aca8 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
   1d53e:	b920      	cbnz	r0, 1d54a <temp_stub_create+0x2e>

    //  Configure the device.
    rc = config_device();
   1d540:	f7ff ffc4 	bl	1d4cc <config_device>
    assert(rc == 0);
   1d544:	b938      	cbnz	r0, 1d556 <temp_stub_create+0x3a>
}
   1d546:	b002      	add	sp, #8
   1d548:	bd10      	pop	{r4, pc}
    assert(rc == 0);
   1d54a:	2300      	movs	r3, #0
   1d54c:	461a      	mov	r2, r3
   1d54e:	4619      	mov	r1, r3
   1d550:	4618      	mov	r0, r3
   1d552:	f7fd f921 	bl	1a798 <__assert_func>
    assert(rc == 0);
   1d556:	2300      	movs	r3, #0
   1d558:	461a      	mov	r2, r3
   1d55a:	4619      	mov	r1, r3
   1d55c:	4618      	mov	r0, r3
   1d55e:	f7fd f91b 	bl	1a798 <__assert_func>
   1d562:	bf00      	nop
   1d564:	00021f48 	.word	0x00021f48
   1d568:	00021f54 	.word	0x00021f54
   1d56c:	2000dae0 	.word	0x2000dae0
   1d570:	0001d5cd 	.word	0x0001d5cd
   1d574:	2000daf8 	.word	0x2000daf8

0001d578 <temp_stub_close>:
}

static int temp_stub_close(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
   1d578:	2000      	movs	r0, #0
   1d57a:	4770      	bx	lr

0001d57c <temp_stub_sensor_get_config>:

static int temp_stub_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
   1d57c:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
   1d580:	2100      	movs	r1, #0
   1d582:	ea50 0301 	orrs.w	r3, r0, r1
   1d586:	d004      	beq.n	1d592 <temp_stub_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
   1d588:	9b00      	ldr	r3, [sp, #0]
   1d58a:	2201      	movs	r2, #1
   1d58c:	701a      	strb	r2, [r3, #0]
    return (0);
   1d58e:	2000      	movs	r0, #0
   1d590:	4770      	bx	lr
err:
    return (rc);
   1d592:	f06f 0001 	mvn.w	r0, #1
}
   1d596:	4770      	bx	lr

0001d598 <temp_stub_open>:
static int temp_stub_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
   1d598:	b508      	push	{r3, lr}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1d59a:	b120      	cbz	r0, 1d5a6 <temp_stub_open+0xe>
    cfg = &dev->cfg; assert(cfg);
   1d59c:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
   1d5a0:	d007      	beq.n	1d5b2 <temp_stub_open+0x1a>
}
   1d5a2:	2000      	movs	r0, #0
   1d5a4:	bd08      	pop	{r3, pc}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1d5a6:	2300      	movs	r3, #0
   1d5a8:	461a      	mov	r2, r3
   1d5aa:	4619      	mov	r1, r3
   1d5ac:	4618      	mov	r0, r3
   1d5ae:	f7fd f8f3 	bl	1a798 <__assert_func>
    cfg = &dev->cfg; assert(cfg);
   1d5b2:	2300      	movs	r3, #0
   1d5b4:	461a      	mov	r2, r3
   1d5b6:	4619      	mov	r1, r3
   1d5b8:	4618      	mov	r0, r3
   1d5ba:	f7fd f8ed 	bl	1a798 <__assert_func>

0001d5be <temp_stub_default_cfg>:
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
   1d5be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d5c2:	2300      	movs	r3, #0
   1d5c4:	e9c0 2300 	strd	r2, r3, [r0]
}
   1d5c8:	2000      	movs	r0, #0
   1d5ca:	4770      	bx	lr

0001d5cc <temp_stub_init>:
int temp_stub_init(struct os_dev *dev0, void *arg) {
   1d5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1d5ce:	b379      	cbz	r1, 1d630 <temp_stub_init+0x64>
   1d5d0:	460d      	mov	r5, r1
   1d5d2:	b380      	cbz	r0, 1d636 <temp_stub_init+0x6a>
   1d5d4:	4604      	mov	r4, r0
    rc = temp_stub_default_cfg(&dev->cfg);
   1d5d6:	30b0      	adds	r0, #176	; 0xb0
   1d5d8:	f7ff fff1 	bl	1d5be <temp_stub_default_cfg>
    if (rc) { goto err; }
   1d5dc:	4603      	mov	r3, r0
   1d5de:	b108      	cbz	r0, 1d5e4 <temp_stub_init+0x18>
}
   1d5e0:	4618      	mov	r0, r3
   1d5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
   1d5e4:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
   1d5e8:	4621      	mov	r1, r4
   1d5ea:	4630      	mov	r0, r6
   1d5ec:	f7ff fddd 	bl	1d1aa <sensor_init>
    if (rc != 0) { goto err; }
   1d5f0:	4603      	mov	r3, r0
   1d5f2:	2800      	cmp	r0, #0
   1d5f4:	d1f4      	bne.n	1d5e0 <temp_stub_init+0x14>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
   1d5f6:	4b11      	ldr	r3, [pc, #68]	; (1d63c <temp_stub_init+0x70>)
   1d5f8:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
   1d5fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1d5fe:	2300      	movs	r3, #0
   1d600:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
   1d604:	682a      	ldr	r2, [r5, #0]
   1d606:	686f      	ldr	r7, [r5, #4]
   1d608:	68a8      	ldr	r0, [r5, #8]
   1d60a:	68e9      	ldr	r1, [r5, #12]
   1d60c:	6722      	str	r2, [r4, #112]	; 0x70
   1d60e:	6767      	str	r7, [r4, #116]	; 0x74
   1d610:	67a0      	str	r0, [r4, #120]	; 0x78
   1d612:	67e1      	str	r1, [r4, #124]	; 0x7c
   1d614:	692a      	ldr	r2, [r5, #16]
   1d616:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
   1d61a:	4630      	mov	r0, r6
   1d61c:	f7ff fdae 	bl	1d17c <sensor_mgr_register>
    if (rc != 0) { goto err; }
   1d620:	4603      	mov	r3, r0
   1d622:	2800      	cmp	r0, #0
   1d624:	d1dc      	bne.n	1d5e0 <temp_stub_init+0x14>
    OS_DEV_SETHANDLERS(dev0, temp_stub_open, temp_stub_close);
   1d626:	4a06      	ldr	r2, [pc, #24]	; (1d640 <temp_stub_init+0x74>)
   1d628:	6022      	str	r2, [r4, #0]
   1d62a:	4a06      	ldr	r2, [pc, #24]	; (1d644 <temp_stub_init+0x78>)
   1d62c:	60e2      	str	r2, [r4, #12]
    return (0);
   1d62e:	e7d7      	b.n	1d5e0 <temp_stub_init+0x14>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1d630:	f06f 0308 	mvn.w	r3, #8
   1d634:	e7d4      	b.n	1d5e0 <temp_stub_init+0x14>
   1d636:	f06f 0308 	mvn.w	r3, #8
   1d63a:	e7d1      	b.n	1d5e0 <temp_stub_init+0x14>
   1d63c:	00021f64 	.word	0x00021f64
   1d640:	0001d599 	.word	0x0001d599
   1d644:	0001d579 	.word	0x0001d579

0001d648 <temp_stub_get_raw_temperature>:
int temp_stub_get_raw_temperature(struct temp_stub *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
   1d648:	b538      	push	{r3, r4, r5, lr}
   1d64a:	460d      	mov	r5, r1
   1d64c:	4614      	mov	r4, r2
    console_printf("STB read temp sensor\n");  ////
   1d64e:	4808      	ldr	r0, [pc, #32]	; (1d670 <temp_stub_get_raw_temperature+0x28>)
   1d650:	f7fc f9da 	bl	19a08 <console_printf>
    assert(temp_sum);
   1d654:	b134      	cbz	r4, 1d664 <temp_stub_get_raw_temperature+0x1c>
    *temp_sum = 1757 * num_readings;
   1d656:	f240 61dd 	movw	r1, #1757	; 0x6dd
   1d65a:	fb01 f105 	mul.w	r1, r1, r5
   1d65e:	6021      	str	r1, [r4, #0]
}
   1d660:	2000      	movs	r0, #0
   1d662:	bd38      	pop	{r3, r4, r5, pc}
    assert(temp_sum);
   1d664:	2300      	movs	r3, #0
   1d666:	461a      	mov	r2, r3
   1d668:	4619      	mov	r1, r3
   1d66a:	4618      	mov	r0, r3
   1d66c:	f7fd f894 	bl	1a798 <__assert_func>
   1d670:	00021f8c 	.word	0x00021f8c

0001d674 <temp_stub_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
   1d674:	b530      	push	{r4, r5, lr}
   1d676:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1d678:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
   1d67c:	2500      	movs	r5, #0
   1d67e:	ea54 0305 	orrs.w	r3, r4, r5
   1d682:	d032      	beq.n	1d6ea <temp_stub_sensor_read+0x76>
   1d684:	4604      	mov	r4, r0
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1d686:	6805      	ldr	r5, [r0, #0]
   1d688:	b165      	cbz	r5, 1d6a4 <temp_stub_sensor_read+0x30>
    rawtemp = -1;
   1d68a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d68e:	9303      	str	r3, [sp, #12]
        rc = temp_stub_open((struct os_dev *) dev, 0, NULL);
   1d690:	2200      	movs	r2, #0
   1d692:	4611      	mov	r1, r2
   1d694:	4628      	mov	r0, r5
   1d696:	f7ff ff7f 	bl	1d598 <temp_stub_open>
        if (rc) { goto err; }
   1d69a:	4603      	mov	r3, r0
   1d69c:	b140      	cbz	r0, 1d6b0 <temp_stub_sensor_read+0x3c>
}
   1d69e:	4618      	mov	r0, r3
   1d6a0:	b007      	add	sp, #28
   1d6a2:	bd30      	pop	{r4, r5, pc}
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1d6a4:	2300      	movs	r3, #0
   1d6a6:	461a      	mov	r2, r3
   1d6a8:	4619      	mov	r1, r3
   1d6aa:	4618      	mov	r0, r3
   1d6ac:	f7fd f874 	bl	1a798 <__assert_func>
        rc = temp_stub_get_raw_temperature(dev, 1, &rawtemp, NULL);
   1d6b0:	2300      	movs	r3, #0
   1d6b2:	aa03      	add	r2, sp, #12
   1d6b4:	2101      	movs	r1, #1
   1d6b6:	4628      	mov	r0, r5
   1d6b8:	f7ff ffc6 	bl	1d648 <temp_stub_get_raw_temperature>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
   1d6bc:	4603      	mov	r3, r0
   1d6be:	2800      	cmp	r0, #0
   1d6c0:	d1ed      	bne.n	1d69e <temp_stub_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
   1d6c2:	9a03      	ldr	r2, [sp, #12]
   1d6c4:	9204      	str	r2, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
   1d6c6:	2201      	movs	r2, #1
   1d6c8:	f88d 2014 	strb.w	r2, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
   1d6cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1d6ce:	2a00      	cmp	r2, #0
   1d6d0:	d0e5      	beq.n	1d69e <temp_stub_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
   1d6d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1d6d6:	2300      	movs	r3, #0
   1d6d8:	e9cd 2300 	strd	r2, r3, [sp]
   1d6dc:	aa04      	add	r2, sp, #16
   1d6de:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1d6e0:	4620      	mov	r0, r4
   1d6e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d6e4:	4798      	blx	r3
   1d6e6:	4603      	mov	r3, r0
   1d6e8:	e7d9      	b.n	1d69e <temp_stub_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1d6ea:	f06f 0301 	mvn.w	r3, #1
   1d6ee:	e7d6      	b.n	1d69e <temp_stub_sensor_read+0x2a>

0001d6f0 <temp_stub_config>:
 * @param Sensor device temp_stub structure
 * @param Sensor device temp_stub_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stub_config(struct temp_stub *dev, struct temp_stub_cfg *cfg) {
   1d6f0:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1d6f2:	f110 0f70 	cmn.w	r0, #112	; 0x70
   1d6f6:	d009      	beq.n	1d70c <temp_stub_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
   1d6f8:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
   1d6fc:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
   1d700:	e9d1 2300 	ldrd	r2, r3, [r1]
   1d704:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
   1d708:	2000      	movs	r0, #0
   1d70a:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1d70c:	2300      	movs	r3, #0
   1d70e:	461a      	mov	r2, r3
   1d710:	4619      	mov	r1, r3
   1d712:	4618      	mov	r0, r3
   1d714:	f7fd f840 	bl	1a798 <__assert_func>

0001d718 <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
   1d718:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1d71a:	e002      	b.n	1d722 <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
   1d71c:	4618      	mov	r0, r3
   1d71e:	f000 f85b 	bl	1d7d8 <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1d722:	4808      	ldr	r0, [pc, #32]	; (1d744 <oc_buffer_tx+0x2c>)
   1d724:	f7fd fc03 	bl	1af2e <os_mqueue_get>
   1d728:	4603      	mov	r3, r0
   1d72a:	b148      	cbz	r0, 1d740 <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
   1d72c:	2200      	movs	r2, #0
   1d72e:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
   1d730:	7e1a      	ldrb	r2, [r3, #24]
   1d732:	f012 0f08 	tst.w	r2, #8
   1d736:	d0f1      	beq.n	1d71c <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
   1d738:	4618      	mov	r0, r3
   1d73a:	f000 f85d 	bl	1d7f8 <oc_send_multicast_message>
   1d73e:	e7f0      	b.n	1d722 <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
   1d740:	bd08      	pop	{r3, pc}
   1d742:	bf00      	nop
   1d744:	2000dbd0 	.word	0x2000dbd0

0001d748 <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
   1d748:	b500      	push	{lr}
   1d74a:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
   1d74c:	4808      	ldr	r0, [pc, #32]	; (1d770 <oc_buffer_rx+0x28>)
   1d74e:	f7fd fbee 	bl	1af2e <os_mqueue_get>
   1d752:	9001      	str	r0, [sp, #4]
   1d754:	b140      	cbz	r0, 1d768 <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
   1d756:	a801      	add	r0, sp, #4
   1d758:	f000 faa2 	bl	1dca0 <__wrap_coap_receive>
#endif
        if (m) {
   1d75c:	9801      	ldr	r0, [sp, #4]
   1d75e:	2800      	cmp	r0, #0
   1d760:	d0f4      	beq.n	1d74c <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
   1d762:	f7fd fc59 	bl	1b018 <os_mbuf_free_chain>
   1d766:	e7f1      	b.n	1d74c <oc_buffer_rx+0x4>
        }
    }
}
   1d768:	b003      	add	sp, #12
   1d76a:	f85d fb04 	ldr.w	pc, [sp], #4
   1d76e:	bf00      	nop
   1d770:	2000dbb8 	.word	0x2000dbb8

0001d774 <oc_buffer_init>:

void
oc_buffer_init(void)
{
   1d774:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
   1d776:	2200      	movs	r2, #0
   1d778:	4904      	ldr	r1, [pc, #16]	; (1d78c <oc_buffer_init+0x18>)
   1d77a:	4805      	ldr	r0, [pc, #20]	; (1d790 <oc_buffer_init+0x1c>)
   1d77c:	f7fd fbce 	bl	1af1c <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
   1d780:	2200      	movs	r2, #0
   1d782:	4904      	ldr	r1, [pc, #16]	; (1d794 <oc_buffer_init+0x20>)
   1d784:	4804      	ldr	r0, [pc, #16]	; (1d798 <oc_buffer_init+0x24>)
   1d786:	f7fd fbc9 	bl	1af1c <os_mqueue_init>
}
   1d78a:	bd08      	pop	{r3, pc}
   1d78c:	0001d749 	.word	0x0001d749
   1d790:	2000dbb8 	.word	0x2000dbb8
   1d794:	0001d719 	.word	0x0001d719
   1d798:	2000dbd0 	.word	0x2000dbd0

0001d79c <oc_ri_mem_init>:
}
#endif

void
oc_ri_mem_init(void)
{
   1d79c:	b500      	push	{lr}
   1d79e:	b083      	sub	sp, #12
#ifdef OC_SERVER
  os_mempool_init(&oc_resource_pool, MAX_APP_RESOURCES, sizeof(oc_resource_t),
                  oc_resource_area, "oc_res");
#endif
#ifdef OC_CLIENT
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
   1d7a0:	4b07      	ldr	r3, [pc, #28]	; (1d7c0 <oc_ri_mem_init+0x24>)
   1d7a2:	9300      	str	r3, [sp, #0]
   1d7a4:	4b07      	ldr	r3, [pc, #28]	; (1d7c4 <oc_ri_mem_init+0x28>)
   1d7a6:	2264      	movs	r2, #100	; 0x64
   1d7a8:	2102      	movs	r1, #2
   1d7aa:	4807      	ldr	r0, [pc, #28]	; (1d7c8 <oc_ri_mem_init+0x2c>)
   1d7ac:	f7fd fd3c 	bl	1b228 <os_mempool_init>
      sizeof(oc_client_cb_t), oc_client_cb_area, "oc_cl_cbs");
    oc_rep_init();
   1d7b0:	f000 f860 	bl	1d874 <oc_rep_init>
#endif
    oc_buffer_init();
   1d7b4:	f7ff ffde 	bl	1d774 <oc_buffer_init>
}
   1d7b8:	b003      	add	sp, #12
   1d7ba:	f85d fb04 	ldr.w	pc, [sp], #4
   1d7be:	bf00      	nop
   1d7c0:	00021fa4 	.word	0x00021fa4
   1d7c4:	2000dbe8 	.word	0x2000dbe8
   1d7c8:	2000dcb0 	.word	0x2000dcb0

0001d7cc <oc_evq_set>:
}

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
   1d7cc:	4b01      	ldr	r3, [pc, #4]	; (1d7d4 <oc_evq_set+0x8>)
   1d7ce:	6018      	str	r0, [r3, #0]
}
   1d7d0:	4770      	bx	lr
   1d7d2:	bf00      	nop
   1d7d4:	2000dccc 	.word	0x2000dccc

0001d7d8 <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
   1d7d8:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
   1d7da:	7e03      	ldrb	r3, [r0, #24]
   1d7dc:	f003 0307 	and.w	r3, r3, #7
   1d7e0:	4a04      	ldr	r2, [pc, #16]	; (1d7f4 <oc_send_buffer+0x1c>)
   1d7e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
   1d7e6:	b113      	cbz	r3, 1d7ee <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
   1d7e8:	68db      	ldr	r3, [r3, #12]
   1d7ea:	4798      	blx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
   1d7ec:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
   1d7ee:	f7fd fc13 	bl	1b018 <os_mbuf_free_chain>
}
   1d7f2:	e7fb      	b.n	1d7ec <oc_send_buffer+0x14>
   1d7f4:	2000df60 	.word	0x2000df60

0001d7f8 <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
   1d7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d7fc:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1d7fe:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
   1d800:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1d802:	e002      	b.n	1d80a <oc_send_multicast_message+0x12>
   1d804:	4635      	mov	r5, r6
   1d806:	3401      	adds	r4, #1
   1d808:	462e      	mov	r6, r5
   1d80a:	2c07      	cmp	r4, #7
   1d80c:	dc12      	bgt.n	1d834 <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
   1d80e:	4b0c      	ldr	r3, [pc, #48]	; (1d840 <oc_send_multicast_message+0x48>)
   1d810:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   1d814:	2d00      	cmp	r5, #0
   1d816:	d0f5      	beq.n	1d804 <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
   1d818:	2e00      	cmp	r6, #0
   1d81a:	d0f4      	beq.n	1d806 <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
   1d81c:	4638      	mov	r0, r7
   1d81e:	f7fd fc6b 	bl	1b0f8 <os_mbuf_dup>
   1d822:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
   1d824:	6933      	ldr	r3, [r6, #16]
   1d826:	4638      	mov	r0, r7
   1d828:	4798      	blx	r3
            if (!n) {
   1d82a:	f1b8 0f00 	cmp.w	r8, #0
   1d82e:	d005      	beq.n	1d83c <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
   1d830:	4647      	mov	r7, r8
   1d832:	e7e8      	b.n	1d806 <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
   1d834:	b116      	cbz	r6, 1d83c <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
   1d836:	6933      	ldr	r3, [r6, #16]
   1d838:	4638      	mov	r0, r7
   1d83a:	4798      	blx	r3
    }
}
   1d83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d840:	2000df60 	.word	0x2000df60

0001d844 <oc_init>:
    return rc;
}

void
oc_init(void)
{
   1d844:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1d846:	4b07      	ldr	r3, [pc, #28]	; (1d864 <oc_init+0x20>)
   1d848:	781b      	ldrb	r3, [r3, #0]
   1d84a:	b133      	cbz	r3, 1d85a <oc_init+0x16>
    oc_ri_mem_init();
   1d84c:	f7ff ffa6 	bl	1d79c <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
   1d850:	f7fd fb60 	bl	1af14 <os_eventq_dflt_get>
   1d854:	f7ff ffba 	bl	1d7cc <oc_evq_set>
}
   1d858:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1d85a:	461a      	mov	r2, r3
   1d85c:	4619      	mov	r1, r3
   1d85e:	4618      	mov	r0, r3
   1d860:	f7fc ff9a 	bl	1a798 <__assert_func>
   1d864:	2000ddbc 	.word	0x2000ddbc

0001d868 <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
   1d868:	4770      	bx	lr

0001d86a <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
   1d86a:	4770      	bx	lr

0001d86c <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
   1d86c:	4770      	bx	lr

0001d86e <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
   1d86e:	4770      	bx	lr

0001d870 <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
   1d870:	4770      	bx	lr
	...

0001d874 <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
   1d874:	b500      	push	{lr}
   1d876:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
   1d878:	4b05      	ldr	r3, [pc, #20]	; (1d890 <oc_rep_init+0x1c>)
   1d87a:	9300      	str	r3, [sp, #0]
   1d87c:	4b05      	ldr	r3, [pc, #20]	; (1d894 <oc_rep_init+0x20>)
   1d87e:	2218      	movs	r2, #24
   1d880:	2102      	movs	r1, #2
   1d882:	4805      	ldr	r0, [pc, #20]	; (1d898 <oc_rep_init+0x24>)
   1d884:	f7fd fcd0 	bl	1b228 <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
   1d888:	b003      	add	sp, #12
   1d88a:	f85d fb04 	ldr.w	pc, [sp], #4
   1d88e:	bf00      	nop
   1d890:	00021fb0 	.word	0x00021fb0
   1d894:	2000dcec 	.word	0x2000dcec
   1d898:	2000dcd0 	.word	0x2000dcd0

0001d89c <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   1d89c:	b570      	push	{r4, r5, r6, lr}
   1d89e:	b086      	sub	sp, #24
   1d8a0:	4605      	mov	r5, r0
   1d8a2:	460e      	mov	r6, r1
   1d8a4:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   1d8a6:	2300      	movs	r3, #0
   1d8a8:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   1d8aa:	f000 f9ad 	bl	1dc08 <mfg_init>

    mfg_open(&reader);
   1d8ae:	a801      	add	r0, sp, #4
   1d8b0:	f000 f9c6 	bl	1dc40 <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   1d8b4:	6823      	ldr	r3, [r4, #0]
   1d8b6:	42ab      	cmp	r3, r5
   1d8b8:	da29      	bge.n	1d90e <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   1d8ba:	2102      	movs	r1, #2
   1d8bc:	a801      	add	r0, sp, #4
   1d8be:	f000 f98c 	bl	1dbda <mfg_seek_next_with_type>
   1d8c2:	4603      	mov	r3, r0
        switch (rc) {
   1d8c4:	f110 0f0f 	cmn.w	r0, #15
   1d8c8:	d003      	beq.n	1d8d2 <flash_map_read_mfg+0x36>
   1d8ca:	b120      	cbz	r0, 1d8d6 <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
   1d8cc:	4618      	mov	r0, r3
   1d8ce:	b006      	add	sp, #24
   1d8d0:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
   1d8d2:	2300      	movs	r3, #0
   1d8d4:	e7fa      	b.n	1d8cc <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   1d8d6:	a903      	add	r1, sp, #12
   1d8d8:	a801      	add	r0, sp, #4
   1d8da:	f000 f98b 	bl	1dbf4 <mfg_read_tlv_flash_area>
        if (rc != 0) {
   1d8de:	4603      	mov	r3, r0
   1d8e0:	2800      	cmp	r0, #0
   1d8e2:	d1f3      	bne.n	1d8cc <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
   1d8e4:	6823      	ldr	r3, [r4, #0]
   1d8e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1d8ea:	009a      	lsls	r2, r3, #2
   1d8ec:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
   1d8ee:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1d8f2:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
   1d8f4:	f89d 200d 	ldrb.w	r2, [sp, #13]
   1d8f8:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
   1d8fa:	f8dd 200e 	ldr.w	r2, [sp, #14]
   1d8fe:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
   1d900:	f8dd 2012 	ldr.w	r2, [sp, #18]
   1d904:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
   1d906:	6823      	ldr	r3, [r4, #0]
   1d908:	3301      	adds	r3, #1
   1d90a:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   1d90c:	e7d2      	b.n	1d8b4 <flash_map_read_mfg+0x18>
            return -1;
   1d90e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d912:	e7db      	b.n	1d8cc <flash_map_read_mfg+0x30>

0001d914 <flash_area_open>:
{
   1d914:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   1d916:	4b0d      	ldr	r3, [pc, #52]	; (1d94c <flash_area_open+0x38>)
   1d918:	681d      	ldr	r5, [r3, #0]
   1d91a:	b1a5      	cbz	r5, 1d946 <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
   1d91c:	2300      	movs	r3, #0
   1d91e:	4a0c      	ldr	r2, [pc, #48]	; (1d950 <flash_area_open+0x3c>)
   1d920:	6812      	ldr	r2, [r2, #0]
   1d922:	429a      	cmp	r2, r3
   1d924:	dd0b      	ble.n	1d93e <flash_area_open+0x2a>
        area = flash_map + i;
   1d926:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1d92a:	00a2      	lsls	r2, r4, #2
   1d92c:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
   1d92e:	5caa      	ldrb	r2, [r5, r2]
   1d930:	4282      	cmp	r2, r0
   1d932:	d001      	beq.n	1d938 <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
   1d934:	3301      	adds	r3, #1
   1d936:	e7f2      	b.n	1d91e <flash_area_open+0xa>
            *fap = area;
   1d938:	600c      	str	r4, [r1, #0]
            return 0;
   1d93a:	2000      	movs	r0, #0
   1d93c:	e001      	b.n	1d942 <flash_area_open+0x2e>
    return SYS_ENOENT;
   1d93e:	f06f 0003 	mvn.w	r0, #3
}
   1d942:	bc30      	pop	{r4, r5}
   1d944:	4770      	bx	lr
        return SYS_EACCES;
   1d946:	f06f 0006 	mvn.w	r0, #6
   1d94a:	e7fa      	b.n	1d942 <flash_area_open+0x2e>
   1d94c:	2000df84 	.word	0x2000df84
   1d950:	2000df80 	.word	0x2000df80

0001d954 <flash_area_read>:
{
   1d954:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1d956:	6884      	ldr	r4, [r0, #8]
   1d958:	428c      	cmp	r4, r1
   1d95a:	d308      	bcc.n	1d96e <flash_area_read+0x1a>
   1d95c:	18cd      	adds	r5, r1, r3
   1d95e:	42ac      	cmp	r4, r5
   1d960:	d308      	bcc.n	1d974 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   1d962:	6844      	ldr	r4, [r0, #4]
   1d964:	4421      	add	r1, r4
   1d966:	7840      	ldrb	r0, [r0, #1]
   1d968:	f000 f9c8 	bl	1dcfc <hal_flash_read>
}
   1d96c:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   1d96e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d972:	e7fb      	b.n	1d96c <flash_area_read+0x18>
   1d974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d978:	e7f8      	b.n	1d96c <flash_area_read+0x18>
	...

0001d97c <flash_map_init>:

void
flash_map_init(void)
{
   1d97c:	b510      	push	{r4, lr}
   1d97e:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1d980:	4b14      	ldr	r3, [pc, #80]	; (1d9d4 <flash_map_init+0x58>)
   1d982:	781b      	ldrb	r3, [r3, #0]
   1d984:	b303      	cbz	r3, 1d9c8 <flash_map_init+0x4c>

    rc = hal_flash_init();
   1d986:	f000 f9a5 	bl	1dcd4 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1d98a:	b138      	cbz	r0, 1d99c <flash_map_init+0x20>
   1d98c:	2000      	movs	r0, #0
   1d98e:	9000      	str	r0, [sp, #0]
   1d990:	4b11      	ldr	r3, [pc, #68]	; (1d9d8 <flash_map_init+0x5c>)
   1d992:	681c      	ldr	r4, [r3, #0]
   1d994:	4603      	mov	r3, r0
   1d996:	4602      	mov	r2, r0
   1d998:	4601      	mov	r1, r0
   1d99a:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1d99c:	4b0f      	ldr	r3, [pc, #60]	; (1d9dc <flash_map_init+0x60>)
   1d99e:	4a10      	ldr	r2, [pc, #64]	; (1d9e0 <flash_map_init+0x64>)
   1d9a0:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1d9a2:	4b10      	ldr	r3, [pc, #64]	; (1d9e4 <flash_map_init+0x68>)
   1d9a4:	2206      	movs	r2, #6
   1d9a6:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   1d9a8:	aa03      	add	r2, sp, #12
   1d9aa:	490f      	ldr	r1, [pc, #60]	; (1d9e8 <flash_map_init+0x6c>)
   1d9ac:	200a      	movs	r0, #10
   1d9ae:	f7ff ff75 	bl	1d89c <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   1d9b2:	b938      	cbnz	r0, 1d9c4 <flash_map_init+0x48>
   1d9b4:	9b03      	ldr	r3, [sp, #12]
   1d9b6:	2b00      	cmp	r3, #0
   1d9b8:	dd04      	ble.n	1d9c4 <flash_map_init+0x48>
        flash_map = mfg_areas;
   1d9ba:	4a08      	ldr	r2, [pc, #32]	; (1d9dc <flash_map_init+0x60>)
   1d9bc:	490a      	ldr	r1, [pc, #40]	; (1d9e8 <flash_map_init+0x6c>)
   1d9be:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   1d9c0:	4a08      	ldr	r2, [pc, #32]	; (1d9e4 <flash_map_init+0x68>)
   1d9c2:	6013      	str	r3, [r2, #0]
    }
}
   1d9c4:	b004      	add	sp, #16
   1d9c6:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1d9c8:	461a      	mov	r2, r3
   1d9ca:	4619      	mov	r1, r3
   1d9cc:	4618      	mov	r0, r3
   1d9ce:	f7fc fee3 	bl	1a798 <__assert_func>
   1d9d2:	bf00      	nop
   1d9d4:	2000ddbc 	.word	0x2000ddbc
   1d9d8:	20000104 	.word	0x20000104
   1d9dc:	2000df84 	.word	0x2000df84
   1d9e0:	00021fbc 	.word	0x00021fbc
   1d9e4:	2000df80 	.word	0x2000df80
   1d9e8:	2000dd1c 	.word	0x2000dd1c

0001d9ec <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   1d9ec:	4770      	bx	lr
	...

0001d9f0 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   1d9f0:	b530      	push	{r4, r5, lr}
   1d9f2:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   1d9f4:	7885      	ldrb	r5, [r0, #2]
   1d9f6:	4b21      	ldr	r3, [pc, #132]	; (1da7c <mfg_seek_next_aux+0x8c>)
   1d9f8:	681b      	ldr	r3, [r3, #0]
   1d9fa:	429d      	cmp	r5, r3
   1d9fc:	da32      	bge.n	1da64 <mfg_seek_next_aux+0x74>
   1d9fe:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   1da00:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   1da04:	0093      	lsls	r3, r2, #2
   1da06:	a901      	add	r1, sp, #4
   1da08:	4a1d      	ldr	r2, [pc, #116]	; (1da80 <mfg_seek_next_aux+0x90>)
   1da0a:	5cd0      	ldrb	r0, [r2, r3]
   1da0c:	f7ff ff82 	bl	1d914 <flash_area_open>
    if (rc != 0) {
   1da10:	bb58      	cbnz	r0, 1da6a <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1da12:	6862      	ldr	r2, [r4, #4]
   1da14:	b9c2      	cbnz	r2, 1da48 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1da16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1da1a:	00aa      	lsls	r2, r5, #2
   1da1c:	4b18      	ldr	r3, [pc, #96]	; (1da80 <mfg_seek_next_aux+0x90>)
   1da1e:	4413      	add	r3, r2
   1da20:	685b      	ldr	r3, [r3, #4]
   1da22:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   1da24:	6861      	ldr	r1, [r4, #4]
   1da26:	9801      	ldr	r0, [sp, #4]
   1da28:	6883      	ldr	r3, [r0, #8]
   1da2a:	3b08      	subs	r3, #8
   1da2c:	4299      	cmp	r1, r3
   1da2e:	d310      	bcc.n	1da52 <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1da30:	78a3      	ldrb	r3, [r4, #2]
   1da32:	1c59      	adds	r1, r3, #1
   1da34:	4a11      	ldr	r2, [pc, #68]	; (1da7c <mfg_seek_next_aux+0x8c>)
   1da36:	6812      	ldr	r2, [r2, #0]
   1da38:	4291      	cmp	r1, r2
   1da3a:	da19      	bge.n	1da70 <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   1da3c:	2200      	movs	r2, #0
   1da3e:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1da40:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   1da42:	f06f 0305 	mvn.w	r3, #5
   1da46:	e015      	b.n	1da74 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1da48:	7863      	ldrb	r3, [r4, #1]
   1da4a:	4413      	add	r3, r2
   1da4c:	3302      	adds	r3, #2
   1da4e:	6063      	str	r3, [r4, #4]
   1da50:	e7e8      	b.n	1da24 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1da52:	2302      	movs	r3, #2
   1da54:	4622      	mov	r2, r4
   1da56:	f7ff ff7d 	bl	1d954 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   1da5a:	4603      	mov	r3, r0
   1da5c:	b150      	cbz	r0, 1da74 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
   1da5e:	f06f 0304 	mvn.w	r3, #4
   1da62:	e007      	b.n	1da74 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
   1da64:	f06f 0301 	mvn.w	r3, #1
   1da68:	e004      	b.n	1da74 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
   1da6a:	f06f 0304 	mvn.w	r3, #4
   1da6e:	e001      	b.n	1da74 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
   1da70:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
   1da74:	4618      	mov	r0, r3
   1da76:	b003      	add	sp, #12
   1da78:	bd30      	pop	{r4, r5, pc}
   1da7a:	bf00      	nop
   1da7c:	2000ddb0 	.word	0x2000ddb0
   1da80:	2000dd98 	.word	0x2000dd98

0001da84 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   1da84:	b530      	push	{r4, r5, lr}
   1da86:	b085      	sub	sp, #20
   1da88:	4605      	mov	r5, r0
   1da8a:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   1da8c:	a903      	add	r1, sp, #12
   1da8e:	f7ff ff41 	bl	1d914 <flash_area_open>
    if (rc != 0) {
   1da92:	b9e8      	cbnz	r0, 1dad0 <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   1da94:	9803      	ldr	r0, [sp, #12]
   1da96:	6881      	ldr	r1, [r0, #8]
   1da98:	2308      	movs	r3, #8
   1da9a:	aa01      	add	r2, sp, #4
   1da9c:	3908      	subs	r1, #8
   1da9e:	f7ff ff59 	bl	1d954 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   1daa2:	4601      	mov	r1, r0
   1daa4:	b9b8      	cbnz	r0, 1dad6 <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   1daa6:	9a02      	ldr	r2, [sp, #8]
   1daa8:	4b11      	ldr	r3, [pc, #68]	; (1daf0 <mfg_read_mmr+0x6c>)
   1daaa:	429a      	cmp	r2, r3
   1daac:	d116      	bne.n	1dadc <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   1daae:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1dab2:	2b02      	cmp	r3, #2
   1dab4:	d115      	bne.n	1dae2 <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   1dab6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1daba:	9b03      	ldr	r3, [sp, #12]
   1dabc:	689b      	ldr	r3, [r3, #8]
   1dabe:	429a      	cmp	r2, r3
   1dac0:	d812      	bhi.n	1dae8 <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   1dac2:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1dac4:	7025      	strb	r5, [r4, #0]
   1dac6:	6063      	str	r3, [r4, #4]
   1dac8:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   1daca:	4608      	mov	r0, r1
   1dacc:	b005      	add	sp, #20
   1dace:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   1dad0:	f06f 0104 	mvn.w	r1, #4
   1dad4:	e7f9      	b.n	1daca <mfg_read_mmr+0x46>
        return SYS_EIO;
   1dad6:	f06f 0104 	mvn.w	r1, #4
   1dada:	e7f6      	b.n	1daca <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1dadc:	f06f 0108 	mvn.w	r1, #8
   1dae0:	e7f3      	b.n	1daca <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
   1dae2:	f06f 010b 	mvn.w	r1, #11
   1dae6:	e7f0      	b.n	1daca <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1dae8:	f06f 0108 	mvn.w	r1, #8
   1daec:	e7ed      	b.n	1daca <mfg_read_mmr+0x46>
   1daee:	bf00      	nop
   1daf0:	3bb2a269 	.word	0x3bb2a269

0001daf4 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   1daf4:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1daf6:	2300      	movs	r3, #0
   1daf8:	4a11      	ldr	r2, [pc, #68]	; (1db40 <mfg_read_next_mmr+0x4c>)
   1dafa:	6812      	ldr	r2, [r2, #0]
   1dafc:	429a      	cmp	r2, r3
   1dafe:	dd08      	ble.n	1db12 <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   1db00:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1db04:	008a      	lsls	r2, r1, #2
   1db06:	490f      	ldr	r1, [pc, #60]	; (1db44 <mfg_read_next_mmr+0x50>)
   1db08:	5c8a      	ldrb	r2, [r1, r2]
   1db0a:	4282      	cmp	r2, r0
   1db0c:	d011      	beq.n	1db32 <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
   1db0e:	3301      	adds	r3, #1
   1db10:	e7f2      	b.n	1daf8 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1db12:	2a01      	cmp	r2, #1
   1db14:	dc11      	bgt.n	1db3a <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1db16:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1db1a:	0093      	lsls	r3, r2, #2
   1db1c:	4909      	ldr	r1, [pc, #36]	; (1db44 <mfg_read_next_mmr+0x50>)
   1db1e:	4419      	add	r1, r3
   1db20:	f7ff ffb0 	bl	1da84 <mfg_read_mmr>
    if (rc != 0) {
   1db24:	4603      	mov	r3, r0
   1db26:	b930      	cbnz	r0, 1db36 <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
   1db28:	4905      	ldr	r1, [pc, #20]	; (1db40 <mfg_read_next_mmr+0x4c>)
   1db2a:	680a      	ldr	r2, [r1, #0]
   1db2c:	3201      	adds	r2, #1
   1db2e:	600a      	str	r2, [r1, #0]
    return 0;
   1db30:	e001      	b.n	1db36 <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
   1db32:	f06f 030a 	mvn.w	r3, #10
}
   1db36:	4618      	mov	r0, r3
   1db38:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   1db3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1db3e:	e7fa      	b.n	1db36 <mfg_read_next_mmr+0x42>
   1db40:	2000ddb0 	.word	0x2000ddb0
   1db44:	2000dd98 	.word	0x2000dd98

0001db48 <mfg_open_flash_area>:
{
   1db48:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1db4a:	7883      	ldrb	r3, [r0, #2]
   1db4c:	4a0b      	ldr	r2, [pc, #44]	; (1db7c <mfg_open_flash_area+0x34>)
   1db4e:	6812      	ldr	r2, [r2, #0]
   1db50:	4293      	cmp	r3, r2
   1db52:	da0a      	bge.n	1db6a <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
   1db54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1db58:	009a      	lsls	r2, r3, #2
   1db5a:	4b09      	ldr	r3, [pc, #36]	; (1db80 <mfg_open_flash_area+0x38>)
   1db5c:	5c98      	ldrb	r0, [r3, r2]
   1db5e:	f7ff fed9 	bl	1d914 <flash_area_open>
    if (rc != 0) {
   1db62:	4603      	mov	r3, r0
   1db64:	b938      	cbnz	r0, 1db76 <mfg_open_flash_area+0x2e>
}
   1db66:	4618      	mov	r0, r3
   1db68:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1db6a:	2300      	movs	r3, #0
   1db6c:	461a      	mov	r2, r3
   1db6e:	4619      	mov	r1, r3
   1db70:	4618      	mov	r0, r3
   1db72:	f7fc fe11 	bl	1a798 <__assert_func>
        return SYS_EIO;
   1db76:	f06f 0304 	mvn.w	r3, #4
   1db7a:	e7f4      	b.n	1db66 <mfg_open_flash_area+0x1e>
   1db7c:	2000ddb0 	.word	0x2000ddb0
   1db80:	2000dd98 	.word	0x2000dd98

0001db84 <mfg_read_tlv_body>:
{
   1db84:	b570      	push	{r4, r5, r6, lr}
   1db86:	b082      	sub	sp, #8
   1db88:	4606      	mov	r6, r0
   1db8a:	460c      	mov	r4, r1
   1db8c:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   1db8e:	a901      	add	r1, sp, #4
   1db90:	f7ff ffda 	bl	1db48 <mfg_open_flash_area>
    if (rc != 0) {
   1db94:	4603      	mov	r3, r0
   1db96:	b110      	cbz	r0, 1db9e <mfg_read_tlv_body+0x1a>
}
   1db98:	4618      	mov	r0, r3
   1db9a:	b002      	add	sp, #8
   1db9c:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   1db9e:	462a      	mov	r2, r5
   1dba0:	2100      	movs	r1, #0
   1dba2:	4620      	mov	r0, r4
   1dba4:	f7fe f9fb 	bl	1bf9e <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   1dba8:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   1dbaa:	6871      	ldr	r1, [r6, #4]
   1dbac:	42ab      	cmp	r3, r5
   1dbae:	bfa8      	it	ge
   1dbb0:	462b      	movge	r3, r5
   1dbb2:	4622      	mov	r2, r4
   1dbb4:	3102      	adds	r1, #2
   1dbb6:	9801      	ldr	r0, [sp, #4]
   1dbb8:	f7ff fecc 	bl	1d954 <flash_area_read>
    if (rc != 0) {
   1dbbc:	4603      	mov	r3, r0
   1dbbe:	2800      	cmp	r0, #0
   1dbc0:	d0ea      	beq.n	1db98 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
   1dbc2:	f06f 0304 	mvn.w	r3, #4
   1dbc6:	e7e7      	b.n	1db98 <mfg_read_tlv_body+0x14>

0001dbc8 <mfg_seek_next>:
{
   1dbc8:	b510      	push	{r4, lr}
   1dbca:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   1dbcc:	4620      	mov	r0, r4
   1dbce:	f7ff ff0f 	bl	1d9f0 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   1dbd2:	f110 0f06 	cmn.w	r0, #6
   1dbd6:	d0f9      	beq.n	1dbcc <mfg_seek_next+0x4>
}
   1dbd8:	bd10      	pop	{r4, pc}

0001dbda <mfg_seek_next_with_type>:
{
   1dbda:	b538      	push	{r3, r4, r5, lr}
   1dbdc:	4604      	mov	r4, r0
   1dbde:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   1dbe0:	4620      	mov	r0, r4
   1dbe2:	f7ff fff1 	bl	1dbc8 <mfg_seek_next>
        if (rc != 0) {
   1dbe6:	4602      	mov	r2, r0
   1dbe8:	b910      	cbnz	r0, 1dbf0 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   1dbea:	7823      	ldrb	r3, [r4, #0]
   1dbec:	42ab      	cmp	r3, r5
   1dbee:	d1f7      	bne.n	1dbe0 <mfg_seek_next_with_type+0x6>
}
   1dbf0:	4610      	mov	r0, r2
   1dbf2:	bd38      	pop	{r3, r4, r5, pc}

0001dbf4 <mfg_read_tlv_flash_area>:
{
   1dbf4:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1dbf6:	220a      	movs	r2, #10
   1dbf8:	f7ff ffc4 	bl	1db84 <mfg_read_tlv_body>
}
   1dbfc:	bd08      	pop	{r3, pc}

0001dbfe <mfg_read_tlv_mmr_ref>:
{
   1dbfe:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1dc00:	2201      	movs	r2, #1
   1dc02:	f7ff ffbf 	bl	1db84 <mfg_read_tlv_body>
}
   1dc06:	bd08      	pop	{r3, pc}

0001dc08 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1dc08:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1dc0a:	4b0b      	ldr	r3, [pc, #44]	; (1dc38 <mfg_init+0x30>)
   1dc0c:	781b      	ldrb	r3, [r3, #0]
   1dc0e:	b94b      	cbnz	r3, 1dc24 <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   1dc10:	4b09      	ldr	r3, [pc, #36]	; (1dc38 <mfg_init+0x30>)
   1dc12:	2201      	movs	r2, #1
   1dc14:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1dc16:	4b09      	ldr	r3, [pc, #36]	; (1dc3c <mfg_init+0x34>)
   1dc18:	781b      	ldrb	r3, [r3, #0]
   1dc1a:	b123      	cbz	r3, 1dc26 <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1dc1c:	2000      	movs	r0, #0
   1dc1e:	f7ff ff69 	bl	1daf4 <mfg_read_next_mmr>
    if (rc != 0) {
   1dc22:	b128      	cbz	r0, 1dc30 <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
   1dc24:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1dc26:	461a      	mov	r2, r3
   1dc28:	4619      	mov	r1, r3
   1dc2a:	4618      	mov	r0, r3
   1dc2c:	f7fc fdb4 	bl	1a798 <__assert_func>
    rc = mfg_read_mmr_refs();
   1dc30:	f000 f80e 	bl	1dc50 <mfg_read_mmr_refs>
err:
   1dc34:	e7f6      	b.n	1dc24 <mfg_init+0x1c>
   1dc36:	bf00      	nop
   1dc38:	2000dd94 	.word	0x2000dd94
   1dc3c:	2000ddbc 	.word	0x2000ddbc

0001dc40 <mfg_open>:
{
   1dc40:	b510      	push	{r4, lr}
   1dc42:	4604      	mov	r4, r0
    mfg_init();
   1dc44:	f7ff ffe0 	bl	1dc08 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1dc48:	2300      	movs	r3, #0
   1dc4a:	6023      	str	r3, [r4, #0]
   1dc4c:	6063      	str	r3, [r4, #4]
}
   1dc4e:	bd10      	pop	{r4, pc}

0001dc50 <mfg_read_mmr_refs>:
{
   1dc50:	b500      	push	{lr}
   1dc52:	b085      	sub	sp, #20
    mfg_open(&reader);
   1dc54:	a801      	add	r0, sp, #4
   1dc56:	f7ff fff3 	bl	1dc40 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1dc5a:	2104      	movs	r1, #4
   1dc5c:	eb0d 0001 	add.w	r0, sp, r1
   1dc60:	f7ff ffbb 	bl	1dbda <mfg_seek_next_with_type>
   1dc64:	4603      	mov	r3, r0
        switch (rc) {
   1dc66:	f110 0f0f 	cmn.w	r0, #15
   1dc6a:	d004      	beq.n	1dc76 <mfg_read_mmr_refs+0x26>
   1dc6c:	b128      	cbz	r0, 1dc7a <mfg_read_mmr_refs+0x2a>
}
   1dc6e:	4618      	mov	r0, r3
   1dc70:	b005      	add	sp, #20
   1dc72:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
   1dc76:	2300      	movs	r3, #0
   1dc78:	e7f9      	b.n	1dc6e <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1dc7a:	a903      	add	r1, sp, #12
   1dc7c:	a801      	add	r0, sp, #4
   1dc7e:	f7ff ffbe 	bl	1dbfe <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1dc82:	4603      	mov	r3, r0
   1dc84:	2800      	cmp	r0, #0
   1dc86:	d1f2      	bne.n	1dc6e <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   1dc88:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1dc8c:	f7ff ff32 	bl	1daf4 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1dc90:	4603      	mov	r3, r0
   1dc92:	2800      	cmp	r0, #0
   1dc94:	d0e1      	beq.n	1dc5a <mfg_read_mmr_refs+0xa>
   1dc96:	f110 0f0b 	cmn.w	r0, #11
   1dc9a:	d0de      	beq.n	1dc5a <mfg_read_mmr_refs+0xa>
   1dc9c:	e7e7      	b.n	1dc6e <mfg_read_mmr_refs+0x1e>
	...

0001dca0 <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
   1dca0:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
   1dca2:	4803      	ldr	r0, [pc, #12]	; (1dcb0 <__wrap_coap_receive+0x10>)
   1dca4:	f7fb feb0 	bl	19a08 <console_printf>
    return -1;
}
   1dca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dcac:	bd08      	pop	{r3, pc}
   1dcae:	bf00      	nop
   1dcb0:	00022004 	.word	0x00022004

0001dcb4 <_fini>:
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
int __aeabi_atexit(void *object, void (*destructor)(void *), void *dso_handle) { return 0; }

#ifndef ARCH_rv32imac  //  If not RISC-V...
void _fini(void) { }   //  Define the function to be called when main() exits
   1dcb4:	4770      	bx	lr

0001dcb6 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1dcb6:	6843      	ldr	r3, [r0, #4]
   1dcb8:	428b      	cmp	r3, r1
   1dcba:	d808      	bhi.n	1dcce <hal_flash_check_addr+0x18>
   1dcbc:	6882      	ldr	r2, [r0, #8]
   1dcbe:	4413      	add	r3, r2
   1dcc0:	428b      	cmp	r3, r1
   1dcc2:	d301      	bcc.n	1dcc8 <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
   1dcc4:	2000      	movs	r0, #0
}
   1dcc6:	4770      	bx	lr
        return SYS_EINVAL;
   1dcc8:	f06f 0001 	mvn.w	r0, #1
   1dccc:	4770      	bx	lr
   1dcce:	f06f 0001 	mvn.w	r0, #1
   1dcd2:	4770      	bx	lr

0001dcd4 <hal_flash_init>:
{
   1dcd4:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   1dcd6:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   1dcd8:	462c      	mov	r4, r5
   1dcda:	e001      	b.n	1dce0 <hal_flash_init+0xc>
   1dcdc:	3401      	adds	r4, #1
   1dcde:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   1dce0:	4620      	mov	r0, r4
   1dce2:	f7fe fce3 	bl	1c6ac <hal_bsp_flash_dev>
        if (!hf) {
   1dce6:	b138      	cbz	r0, 1dcf8 <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   1dce8:	6802      	ldr	r2, [r0, #0]
   1dcea:	6952      	ldr	r2, [r2, #20]
   1dcec:	4790      	blx	r2
   1dcee:	2800      	cmp	r0, #0
   1dcf0:	d0f4      	beq.n	1dcdc <hal_flash_init+0x8>
            rc = SYS_EIO;
   1dcf2:	f06f 0504 	mvn.w	r5, #4
   1dcf6:	e7f1      	b.n	1dcdc <hal_flash_init+0x8>
}
   1dcf8:	4628      	mov	r0, r5
   1dcfa:	bd38      	pop	{r3, r4, r5, pc}

0001dcfc <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1dcfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dd00:	460d      	mov	r5, r1
   1dd02:	4690      	mov	r8, r2
   1dd04:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1dd06:	f7fe fcd1 	bl	1c6ac <hal_bsp_flash_dev>
    if (!hf) {
   1dd0a:	b1c0      	cbz	r0, 1dd3e <hal_flash_read+0x42>
   1dd0c:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1dd0e:	4629      	mov	r1, r5
   1dd10:	f7ff ffd1 	bl	1dcb6 <hal_flash_check_addr>
   1dd14:	b9b0      	cbnz	r0, 1dd44 <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1dd16:	19a9      	adds	r1, r5, r6
   1dd18:	4620      	mov	r0, r4
   1dd1a:	f7ff ffcc 	bl	1dcb6 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1dd1e:	b9a0      	cbnz	r0, 1dd4a <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1dd20:	6823      	ldr	r3, [r4, #0]
   1dd22:	681f      	ldr	r7, [r3, #0]
   1dd24:	4633      	mov	r3, r6
   1dd26:	4642      	mov	r2, r8
   1dd28:	4629      	mov	r1, r5
   1dd2a:	4620      	mov	r0, r4
   1dd2c:	47b8      	blx	r7
    if (rc != 0) {
   1dd2e:	4603      	mov	r3, r0
   1dd30:	b910      	cbnz	r0, 1dd38 <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
   1dd32:	4618      	mov	r0, r3
   1dd34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   1dd38:	f06f 0304 	mvn.w	r3, #4
   1dd3c:	e7f9      	b.n	1dd32 <hal_flash_read+0x36>
        return SYS_EINVAL;
   1dd3e:	f06f 0301 	mvn.w	r3, #1
   1dd42:	e7f6      	b.n	1dd32 <hal_flash_read+0x36>
        return SYS_EINVAL;
   1dd44:	f06f 0301 	mvn.w	r3, #1
   1dd48:	e7f3      	b.n	1dd32 <hal_flash_read+0x36>
   1dd4a:	f06f 0301 	mvn.w	r3, #1
   1dd4e:	e7f0      	b.n	1dd32 <hal_flash_read+0x36>

0001dd50 <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return sizeof(NRF_FICR->DEVICEID) + sizeof(NRF_FICR->DEVICEADDR);
}
   1dd50:	2010      	movs	r0, #16
   1dd52:	4770      	bx	lr

0001dd54 <hal_bsp_hw_id>:
 * These values are generated at random.
 * DEVICEID[0-1] and DEVICEADDR[0-1].
 */
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
   1dd54:	b570      	push	{r4, r5, r6, lr}
   1dd56:	4606      	mov	r6, r0
   1dd58:	460c      	mov	r4, r1
    int len, cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEID), max_len);
   1dd5a:	460d      	mov	r5, r1
   1dd5c:	2908      	cmp	r1, #8
   1dd5e:	bf28      	it	cs
   1dd60:	2508      	movcs	r5, #8
    memcpy(id, (void *)NRF_FICR->DEVICEID, cnt);
   1dd62:	462a      	mov	r2, r5
   1dd64:	4906      	ldr	r1, [pc, #24]	; (1dd80 <hal_bsp_hw_id+0x2c>)
   1dd66:	f7fe f90d 	bl	1bf84 <memcpy>
    len = cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEADDR), max_len - len);
   1dd6a:	1b64      	subs	r4, r4, r5
   1dd6c:	2c08      	cmp	r4, #8
   1dd6e:	bf28      	it	cs
   1dd70:	2408      	movcs	r4, #8
    memcpy(id + len, (void *)NRF_FICR->DEVICEADDR, cnt);
   1dd72:	4622      	mov	r2, r4
   1dd74:	4903      	ldr	r1, [pc, #12]	; (1dd84 <hal_bsp_hw_id+0x30>)
   1dd76:	1970      	adds	r0, r6, r5
   1dd78:	f7fe f904 	bl	1bf84 <memcpy>

    return len + cnt;
}
   1dd7c:	1928      	adds	r0, r5, r4
   1dd7e:	bd70      	pop	{r4, r5, r6, pc}
   1dd80:	10000060 	.word	0x10000060
   1dd84:	100000a4 	.word	0x100000a4

0001dd88 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1dd88:	b40e      	push	{r1, r2, r3}
   1dd8a:	b500      	push	{lr}
   1dd8c:	b082      	sub	sp, #8
   1dd8e:	ab03      	add	r3, sp, #12
   1dd90:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1dd94:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1dd96:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1dd9a:	f7fe fbef 	bl	1c57c <vsnprintf>
	va_end(ap);

	return rv;
}
   1dd9e:	b002      	add	sp, #8
   1dda0:	f85d eb04 	ldr.w	lr, [sp], #4
   1dda4:	b003      	add	sp, #12
   1dda6:	4770      	bx	lr

0001dda8 <__aeabi_uldivmod>:
   1dda8:	b953      	cbnz	r3, 1ddc0 <__aeabi_uldivmod+0x18>
   1ddaa:	b94a      	cbnz	r2, 1ddc0 <__aeabi_uldivmod+0x18>
   1ddac:	2900      	cmp	r1, #0
   1ddae:	bf08      	it	eq
   1ddb0:	2800      	cmpeq	r0, #0
   1ddb2:	bf1c      	itt	ne
   1ddb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1ddb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1ddbc:	f000 b972 	b.w	1e0a4 <__aeabi_idiv0>
   1ddc0:	f1ad 0c08 	sub.w	ip, sp, #8
   1ddc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1ddc8:	f000 f806 	bl	1ddd8 <__udivmoddi4>
   1ddcc:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ddd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ddd4:	b004      	add	sp, #16
   1ddd6:	4770      	bx	lr

0001ddd8 <__udivmoddi4>:
   1ddd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dddc:	9e08      	ldr	r6, [sp, #32]
   1ddde:	4604      	mov	r4, r0
   1dde0:	4688      	mov	r8, r1
   1dde2:	2b00      	cmp	r3, #0
   1dde4:	d14b      	bne.n	1de7e <__udivmoddi4+0xa6>
   1dde6:	428a      	cmp	r2, r1
   1dde8:	4615      	mov	r5, r2
   1ddea:	d967      	bls.n	1debc <__udivmoddi4+0xe4>
   1ddec:	fab2 f282 	clz	r2, r2
   1ddf0:	b14a      	cbz	r2, 1de06 <__udivmoddi4+0x2e>
   1ddf2:	f1c2 0720 	rsb	r7, r2, #32
   1ddf6:	fa01 f302 	lsl.w	r3, r1, r2
   1ddfa:	fa20 f707 	lsr.w	r7, r0, r7
   1ddfe:	4095      	lsls	r5, r2
   1de00:	ea47 0803 	orr.w	r8, r7, r3
   1de04:	4094      	lsls	r4, r2
   1de06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1de0a:	0c23      	lsrs	r3, r4, #16
   1de0c:	fbb8 f7fe 	udiv	r7, r8, lr
   1de10:	fa1f fc85 	uxth.w	ip, r5
   1de14:	fb0e 8817 	mls	r8, lr, r7, r8
   1de18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   1de1c:	fb07 f10c 	mul.w	r1, r7, ip
   1de20:	4299      	cmp	r1, r3
   1de22:	d909      	bls.n	1de38 <__udivmoddi4+0x60>
   1de24:	18eb      	adds	r3, r5, r3
   1de26:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   1de2a:	f080 811b 	bcs.w	1e064 <__udivmoddi4+0x28c>
   1de2e:	4299      	cmp	r1, r3
   1de30:	f240 8118 	bls.w	1e064 <__udivmoddi4+0x28c>
   1de34:	3f02      	subs	r7, #2
   1de36:	442b      	add	r3, r5
   1de38:	1a5b      	subs	r3, r3, r1
   1de3a:	b2a4      	uxth	r4, r4
   1de3c:	fbb3 f0fe 	udiv	r0, r3, lr
   1de40:	fb0e 3310 	mls	r3, lr, r0, r3
   1de44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1de48:	fb00 fc0c 	mul.w	ip, r0, ip
   1de4c:	45a4      	cmp	ip, r4
   1de4e:	d909      	bls.n	1de64 <__udivmoddi4+0x8c>
   1de50:	192c      	adds	r4, r5, r4
   1de52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1de56:	f080 8107 	bcs.w	1e068 <__udivmoddi4+0x290>
   1de5a:	45a4      	cmp	ip, r4
   1de5c:	f240 8104 	bls.w	1e068 <__udivmoddi4+0x290>
   1de60:	3802      	subs	r0, #2
   1de62:	442c      	add	r4, r5
   1de64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   1de68:	eba4 040c 	sub.w	r4, r4, ip
   1de6c:	2700      	movs	r7, #0
   1de6e:	b11e      	cbz	r6, 1de78 <__udivmoddi4+0xa0>
   1de70:	40d4      	lsrs	r4, r2
   1de72:	2300      	movs	r3, #0
   1de74:	e9c6 4300 	strd	r4, r3, [r6]
   1de78:	4639      	mov	r1, r7
   1de7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1de7e:	428b      	cmp	r3, r1
   1de80:	d909      	bls.n	1de96 <__udivmoddi4+0xbe>
   1de82:	2e00      	cmp	r6, #0
   1de84:	f000 80eb 	beq.w	1e05e <__udivmoddi4+0x286>
   1de88:	2700      	movs	r7, #0
   1de8a:	e9c6 0100 	strd	r0, r1, [r6]
   1de8e:	4638      	mov	r0, r7
   1de90:	4639      	mov	r1, r7
   1de92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1de96:	fab3 f783 	clz	r7, r3
   1de9a:	2f00      	cmp	r7, #0
   1de9c:	d147      	bne.n	1df2e <__udivmoddi4+0x156>
   1de9e:	428b      	cmp	r3, r1
   1dea0:	d302      	bcc.n	1dea8 <__udivmoddi4+0xd0>
   1dea2:	4282      	cmp	r2, r0
   1dea4:	f200 80fa 	bhi.w	1e09c <__udivmoddi4+0x2c4>
   1dea8:	1a84      	subs	r4, r0, r2
   1deaa:	eb61 0303 	sbc.w	r3, r1, r3
   1deae:	2001      	movs	r0, #1
   1deb0:	4698      	mov	r8, r3
   1deb2:	2e00      	cmp	r6, #0
   1deb4:	d0e0      	beq.n	1de78 <__udivmoddi4+0xa0>
   1deb6:	e9c6 4800 	strd	r4, r8, [r6]
   1deba:	e7dd      	b.n	1de78 <__udivmoddi4+0xa0>
   1debc:	b902      	cbnz	r2, 1dec0 <__udivmoddi4+0xe8>
   1debe:	deff      	udf	#255	; 0xff
   1dec0:	fab2 f282 	clz	r2, r2
   1dec4:	2a00      	cmp	r2, #0
   1dec6:	f040 808f 	bne.w	1dfe8 <__udivmoddi4+0x210>
   1deca:	1b49      	subs	r1, r1, r5
   1decc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1ded0:	fa1f f885 	uxth.w	r8, r5
   1ded4:	2701      	movs	r7, #1
   1ded6:	fbb1 fcfe 	udiv	ip, r1, lr
   1deda:	0c23      	lsrs	r3, r4, #16
   1dedc:	fb0e 111c 	mls	r1, lr, ip, r1
   1dee0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1dee4:	fb08 f10c 	mul.w	r1, r8, ip
   1dee8:	4299      	cmp	r1, r3
   1deea:	d907      	bls.n	1defc <__udivmoddi4+0x124>
   1deec:	18eb      	adds	r3, r5, r3
   1deee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1def2:	d202      	bcs.n	1defa <__udivmoddi4+0x122>
   1def4:	4299      	cmp	r1, r3
   1def6:	f200 80cd 	bhi.w	1e094 <__udivmoddi4+0x2bc>
   1defa:	4684      	mov	ip, r0
   1defc:	1a59      	subs	r1, r3, r1
   1defe:	b2a3      	uxth	r3, r4
   1df00:	fbb1 f0fe 	udiv	r0, r1, lr
   1df04:	fb0e 1410 	mls	r4, lr, r0, r1
   1df08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   1df0c:	fb08 f800 	mul.w	r8, r8, r0
   1df10:	45a0      	cmp	r8, r4
   1df12:	d907      	bls.n	1df24 <__udivmoddi4+0x14c>
   1df14:	192c      	adds	r4, r5, r4
   1df16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1df1a:	d202      	bcs.n	1df22 <__udivmoddi4+0x14a>
   1df1c:	45a0      	cmp	r8, r4
   1df1e:	f200 80b6 	bhi.w	1e08e <__udivmoddi4+0x2b6>
   1df22:	4618      	mov	r0, r3
   1df24:	eba4 0408 	sub.w	r4, r4, r8
   1df28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1df2c:	e79f      	b.n	1de6e <__udivmoddi4+0x96>
   1df2e:	f1c7 0c20 	rsb	ip, r7, #32
   1df32:	40bb      	lsls	r3, r7
   1df34:	fa22 fe0c 	lsr.w	lr, r2, ip
   1df38:	ea4e 0e03 	orr.w	lr, lr, r3
   1df3c:	fa01 f407 	lsl.w	r4, r1, r7
   1df40:	fa20 f50c 	lsr.w	r5, r0, ip
   1df44:	fa21 f30c 	lsr.w	r3, r1, ip
   1df48:	ea4f 481e 	mov.w	r8, lr, lsr #16
   1df4c:	4325      	orrs	r5, r4
   1df4e:	fbb3 f9f8 	udiv	r9, r3, r8
   1df52:	0c2c      	lsrs	r4, r5, #16
   1df54:	fb08 3319 	mls	r3, r8, r9, r3
   1df58:	fa1f fa8e 	uxth.w	sl, lr
   1df5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   1df60:	fb09 f40a 	mul.w	r4, r9, sl
   1df64:	429c      	cmp	r4, r3
   1df66:	fa02 f207 	lsl.w	r2, r2, r7
   1df6a:	fa00 f107 	lsl.w	r1, r0, r7
   1df6e:	d90b      	bls.n	1df88 <__udivmoddi4+0x1b0>
   1df70:	eb1e 0303 	adds.w	r3, lr, r3
   1df74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1df78:	f080 8087 	bcs.w	1e08a <__udivmoddi4+0x2b2>
   1df7c:	429c      	cmp	r4, r3
   1df7e:	f240 8084 	bls.w	1e08a <__udivmoddi4+0x2b2>
   1df82:	f1a9 0902 	sub.w	r9, r9, #2
   1df86:	4473      	add	r3, lr
   1df88:	1b1b      	subs	r3, r3, r4
   1df8a:	b2ad      	uxth	r5, r5
   1df8c:	fbb3 f0f8 	udiv	r0, r3, r8
   1df90:	fb08 3310 	mls	r3, r8, r0, r3
   1df94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   1df98:	fb00 fa0a 	mul.w	sl, r0, sl
   1df9c:	45a2      	cmp	sl, r4
   1df9e:	d908      	bls.n	1dfb2 <__udivmoddi4+0x1da>
   1dfa0:	eb1e 0404 	adds.w	r4, lr, r4
   1dfa4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1dfa8:	d26b      	bcs.n	1e082 <__udivmoddi4+0x2aa>
   1dfaa:	45a2      	cmp	sl, r4
   1dfac:	d969      	bls.n	1e082 <__udivmoddi4+0x2aa>
   1dfae:	3802      	subs	r0, #2
   1dfb0:	4474      	add	r4, lr
   1dfb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1dfb6:	fba0 8902 	umull	r8, r9, r0, r2
   1dfba:	eba4 040a 	sub.w	r4, r4, sl
   1dfbe:	454c      	cmp	r4, r9
   1dfc0:	46c2      	mov	sl, r8
   1dfc2:	464b      	mov	r3, r9
   1dfc4:	d354      	bcc.n	1e070 <__udivmoddi4+0x298>
   1dfc6:	d051      	beq.n	1e06c <__udivmoddi4+0x294>
   1dfc8:	2e00      	cmp	r6, #0
   1dfca:	d069      	beq.n	1e0a0 <__udivmoddi4+0x2c8>
   1dfcc:	ebb1 050a 	subs.w	r5, r1, sl
   1dfd0:	eb64 0403 	sbc.w	r4, r4, r3
   1dfd4:	fa04 fc0c 	lsl.w	ip, r4, ip
   1dfd8:	40fd      	lsrs	r5, r7
   1dfda:	40fc      	lsrs	r4, r7
   1dfdc:	ea4c 0505 	orr.w	r5, ip, r5
   1dfe0:	e9c6 5400 	strd	r5, r4, [r6]
   1dfe4:	2700      	movs	r7, #0
   1dfe6:	e747      	b.n	1de78 <__udivmoddi4+0xa0>
   1dfe8:	f1c2 0320 	rsb	r3, r2, #32
   1dfec:	fa20 f703 	lsr.w	r7, r0, r3
   1dff0:	4095      	lsls	r5, r2
   1dff2:	fa01 f002 	lsl.w	r0, r1, r2
   1dff6:	fa21 f303 	lsr.w	r3, r1, r3
   1dffa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1dffe:	4338      	orrs	r0, r7
   1e000:	0c01      	lsrs	r1, r0, #16
   1e002:	fbb3 f7fe 	udiv	r7, r3, lr
   1e006:	fa1f f885 	uxth.w	r8, r5
   1e00a:	fb0e 3317 	mls	r3, lr, r7, r3
   1e00e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1e012:	fb07 f308 	mul.w	r3, r7, r8
   1e016:	428b      	cmp	r3, r1
   1e018:	fa04 f402 	lsl.w	r4, r4, r2
   1e01c:	d907      	bls.n	1e02e <__udivmoddi4+0x256>
   1e01e:	1869      	adds	r1, r5, r1
   1e020:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   1e024:	d22f      	bcs.n	1e086 <__udivmoddi4+0x2ae>
   1e026:	428b      	cmp	r3, r1
   1e028:	d92d      	bls.n	1e086 <__udivmoddi4+0x2ae>
   1e02a:	3f02      	subs	r7, #2
   1e02c:	4429      	add	r1, r5
   1e02e:	1acb      	subs	r3, r1, r3
   1e030:	b281      	uxth	r1, r0
   1e032:	fbb3 f0fe 	udiv	r0, r3, lr
   1e036:	fb0e 3310 	mls	r3, lr, r0, r3
   1e03a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1e03e:	fb00 f308 	mul.w	r3, r0, r8
   1e042:	428b      	cmp	r3, r1
   1e044:	d907      	bls.n	1e056 <__udivmoddi4+0x27e>
   1e046:	1869      	adds	r1, r5, r1
   1e048:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1e04c:	d217      	bcs.n	1e07e <__udivmoddi4+0x2a6>
   1e04e:	428b      	cmp	r3, r1
   1e050:	d915      	bls.n	1e07e <__udivmoddi4+0x2a6>
   1e052:	3802      	subs	r0, #2
   1e054:	4429      	add	r1, r5
   1e056:	1ac9      	subs	r1, r1, r3
   1e058:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   1e05c:	e73b      	b.n	1ded6 <__udivmoddi4+0xfe>
   1e05e:	4637      	mov	r7, r6
   1e060:	4630      	mov	r0, r6
   1e062:	e709      	b.n	1de78 <__udivmoddi4+0xa0>
   1e064:	4607      	mov	r7, r0
   1e066:	e6e7      	b.n	1de38 <__udivmoddi4+0x60>
   1e068:	4618      	mov	r0, r3
   1e06a:	e6fb      	b.n	1de64 <__udivmoddi4+0x8c>
   1e06c:	4541      	cmp	r1, r8
   1e06e:	d2ab      	bcs.n	1dfc8 <__udivmoddi4+0x1f0>
   1e070:	ebb8 0a02 	subs.w	sl, r8, r2
   1e074:	eb69 020e 	sbc.w	r2, r9, lr
   1e078:	3801      	subs	r0, #1
   1e07a:	4613      	mov	r3, r2
   1e07c:	e7a4      	b.n	1dfc8 <__udivmoddi4+0x1f0>
   1e07e:	4660      	mov	r0, ip
   1e080:	e7e9      	b.n	1e056 <__udivmoddi4+0x27e>
   1e082:	4618      	mov	r0, r3
   1e084:	e795      	b.n	1dfb2 <__udivmoddi4+0x1da>
   1e086:	4667      	mov	r7, ip
   1e088:	e7d1      	b.n	1e02e <__udivmoddi4+0x256>
   1e08a:	4681      	mov	r9, r0
   1e08c:	e77c      	b.n	1df88 <__udivmoddi4+0x1b0>
   1e08e:	3802      	subs	r0, #2
   1e090:	442c      	add	r4, r5
   1e092:	e747      	b.n	1df24 <__udivmoddi4+0x14c>
   1e094:	f1ac 0c02 	sub.w	ip, ip, #2
   1e098:	442b      	add	r3, r5
   1e09a:	e72f      	b.n	1defc <__udivmoddi4+0x124>
   1e09c:	4638      	mov	r0, r7
   1e09e:	e708      	b.n	1deb2 <__udivmoddi4+0xda>
   1e0a0:	4637      	mov	r7, r6
   1e0a2:	e6e9      	b.n	1de78 <__udivmoddi4+0xa0>

0001e0a4 <__aeabi_idiv0>:
   1e0a4:	4770      	bx	lr
   1e0a6:	bf00      	nop

0001e0a8 <__aeabi_memclr>:
   1e0a8:	2200      	movs	r2, #0
   1e0aa:	f000 b803 	b.w	1e0b4 <__aeabi_memset>
   1e0ae:	bf00      	nop

0001e0b0 <__aeabi_memcpy>:
   1e0b0:	f7fd bf68 	b.w	1bf84 <memcpy>

0001e0b4 <__aeabi_memset>:
   1e0b4:	b470      	push	{r4, r5, r6}
   1e0b6:	0784      	lsls	r4, r0, #30
   1e0b8:	d046      	beq.n	1e148 <__aeabi_memset+0x94>
   1e0ba:	1e4c      	subs	r4, r1, #1
   1e0bc:	2900      	cmp	r1, #0
   1e0be:	d041      	beq.n	1e144 <__aeabi_memset+0x90>
   1e0c0:	b2d5      	uxtb	r5, r2
   1e0c2:	4603      	mov	r3, r0
   1e0c4:	e002      	b.n	1e0cc <__aeabi_memset+0x18>
   1e0c6:	1e61      	subs	r1, r4, #1
   1e0c8:	b3e4      	cbz	r4, 1e144 <__aeabi_memset+0x90>
   1e0ca:	460c      	mov	r4, r1
   1e0cc:	f803 5b01 	strb.w	r5, [r3], #1
   1e0d0:	0799      	lsls	r1, r3, #30
   1e0d2:	d1f8      	bne.n	1e0c6 <__aeabi_memset+0x12>
   1e0d4:	2c03      	cmp	r4, #3
   1e0d6:	d92e      	bls.n	1e136 <__aeabi_memset+0x82>
   1e0d8:	b2d5      	uxtb	r5, r2
   1e0da:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1e0de:	2c0f      	cmp	r4, #15
   1e0e0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1e0e4:	d919      	bls.n	1e11a <__aeabi_memset+0x66>
   1e0e6:	4626      	mov	r6, r4
   1e0e8:	f103 0110 	add.w	r1, r3, #16
   1e0ec:	3e10      	subs	r6, #16
   1e0ee:	2e0f      	cmp	r6, #15
   1e0f0:	f841 5c10 	str.w	r5, [r1, #-16]
   1e0f4:	f841 5c0c 	str.w	r5, [r1, #-12]
   1e0f8:	f841 5c08 	str.w	r5, [r1, #-8]
   1e0fc:	f841 5c04 	str.w	r5, [r1, #-4]
   1e100:	f101 0110 	add.w	r1, r1, #16
   1e104:	d8f2      	bhi.n	1e0ec <__aeabi_memset+0x38>
   1e106:	f1a4 0110 	sub.w	r1, r4, #16
   1e10a:	f021 010f 	bic.w	r1, r1, #15
   1e10e:	f004 040f 	and.w	r4, r4, #15
   1e112:	3110      	adds	r1, #16
   1e114:	2c03      	cmp	r4, #3
   1e116:	440b      	add	r3, r1
   1e118:	d90d      	bls.n	1e136 <__aeabi_memset+0x82>
   1e11a:	461e      	mov	r6, r3
   1e11c:	4621      	mov	r1, r4
   1e11e:	3904      	subs	r1, #4
   1e120:	2903      	cmp	r1, #3
   1e122:	f846 5b04 	str.w	r5, [r6], #4
   1e126:	d8fa      	bhi.n	1e11e <__aeabi_memset+0x6a>
   1e128:	1f21      	subs	r1, r4, #4
   1e12a:	f021 0103 	bic.w	r1, r1, #3
   1e12e:	3104      	adds	r1, #4
   1e130:	440b      	add	r3, r1
   1e132:	f004 0403 	and.w	r4, r4, #3
   1e136:	b12c      	cbz	r4, 1e144 <__aeabi_memset+0x90>
   1e138:	b2d2      	uxtb	r2, r2
   1e13a:	441c      	add	r4, r3
   1e13c:	f803 2b01 	strb.w	r2, [r3], #1
   1e140:	42a3      	cmp	r3, r4
   1e142:	d1fb      	bne.n	1e13c <__aeabi_memset+0x88>
   1e144:	bc70      	pop	{r4, r5, r6}
   1e146:	4770      	bx	lr
   1e148:	460c      	mov	r4, r1
   1e14a:	4603      	mov	r3, r0
   1e14c:	e7c2      	b.n	1e0d4 <__aeabi_memset+0x20>
   1e14e:	5344      	.short	0x5344
   1e150:	61662050 	.word	0x61662050
   1e154:	43546c69 	.word	0x43546c69
   1e158:	61662048 	.word	0x61662048
   1e15c:	45476c69 	.word	0x45476c69
   1e160:	61662054 	.word	0x61662054
   1e164:	55526c69 	.word	0x55526c69
   1e168:	6166204e 	.word	0x6166204e
   1e16c:	6c69      	.short	0x6c69
   1e16e:	7572      	.short	0x7572
   1e170:	612f7473 	.word	0x612f7473
   1e174:	732f7070 	.word	0x732f7070
   1e178:	6c2f6372 	.word	0x6c2f6372
   1e17c:	722e6269 	.word	0x722e6269
   1e180:	00000073 	.word	0x00000073
   1e184:	0001e16e 	.word	0x0001e16e
   1e188:	00000013 	.word	0x00000013
   1e18c:	0000005b 	.word	0x0000005b
   1e190:	00000005 	.word	0x00000005
   1e194:	0001e16e 	.word	0x0001e16e
   1e198:	00000013 	.word	0x00000013
   1e19c:	00000064 	.word	0x00000064
   1e1a0:	00000005 	.word	0x00000005
   1e1a4:	50494843 	.word	0x50494843
   1e1a8:	61662038 	.word	0x61662038
   1e1ac:	00006c69 	.word	0x00006c69
   1e1b0:	0001e16e 	.word	0x0001e16e
   1e1b4:	00000013 	.word	0x00000013
   1e1b8:	00000076 	.word	0x00000076
   1e1bc:	00000005 	.word	0x00000005
   1e1c0:	0001e16e 	.word	0x0001e16e
   1e1c4:	00000013 	.word	0x00000013
   1e1c8:	0000007c 	.word	0x0000007c
   1e1cc:	0000000d 	.word	0x0000000d
   1e1d0:	0001e16e 	.word	0x0001e16e
   1e1d4:	00000013 	.word	0x00000013
   1e1d8:	0000007b 	.word	0x0000007b
   1e1dc:	00000009 	.word	0x00000009
   1e1e0:	696e6170 	.word	0x696e6170
   1e1e4:	2063      	.short	0x2063
   1e1e6:	6f6e      	.short	0x6f6e
   1e1e8:	636f6c20 	.word	0x636f6c20
   1e1ec:	0a          	.byte	0x0a
   1e1ed:	61          	.byte	0x61
   1e1ee:	2074      	.short	0x2074
   1e1f0:	6e696c20 	.word	0x6e696c20
   1e1f4:	2065      	.short	0x2065
   1e1f6:	000a      	.short	0x000a
   1e1f8:	0001e16e 	.word	0x0001e16e
   1e1fc:	00000013 	.word	0x00000013
   1e200:	00000094 	.word	0x00000094
   1e204:	00000014 	.word	0x00000014
   1e208:	00008827 	.word	0x00008827
   1e20c:	00000004 	.word	0x00000004
   1e210:	00000004 	.word	0x00000004
   1e214:	00008a91 	.word	0x00008a91
   1e218:	00000000 	.word	0x00000000
   1e21c:	0001e218 	.word	0x0001e218
   1e220:	0001e21c 	.word	0x0001e21c
   1e224:	65737361 	.word	0x65737361
   1e228:	6f697472 	.word	0x6f697472
   1e22c:	6166206e 	.word	0x6166206e
   1e230:	64656c69 	.word	0x64656c69
   1e234:	2860203a 	.word	0x2860203a
   1e238:	7466656c 	.word	0x7466656c
   1e23c:	203d3d20 	.word	0x203d3d20
   1e240:	68676972 	.word	0x68676972
   1e244:	0a602974 	.word	0x0a602974
   1e248:	656c2020 	.word	0x656c2020
   1e24c:	203a7466 	.word	0x203a7466
   1e250:	60          	.byte	0x60
   1e251:	60          	.byte	0x60
   1e252:	0a2c      	.short	0x0a2c
   1e254:	67697220 	.word	0x67697220
   1e258:	203a7468 	.word	0x203a7468
   1e25c:	60          	.byte	0x60
   1e25d:	60          	.byte	0x60
   1e25e:	203a      	.short	0x203a
   1e260:	0001e224 	.word	0x0001e224
   1e264:	0000002d 	.word	0x0000002d
   1e268:	0001e251 	.word	0x0001e251
   1e26c:	0000000c 	.word	0x0000000c
   1e270:	0001e25d 	.word	0x0001e25d
   1e274:	00000003 	.word	0x00000003
   1e278:	0001e260 	.word	0x0001e260
   1e27c:	6e206f6e 	.word	0x6e206f6e
   1e280:	006c6c75 	.word	0x006c6c75
   1e284:	0001e27c 	.word	0x0001e27c
   1e288:	00000007 	.word	0x00000007
   1e28c:	0001e284 	.word	0x0001e284
   1e290:	0001e290 	.word	0x0001e290
   1e294:	74737572 	.word	0x74737572
   1e298:	6e796d2f 	.word	0x6e796d2f
   1e29c:	2f747765 	.word	0x2f747765
   1e2a0:	2f637273 	.word	0x2f637273
   1e2a4:	2e62696c 	.word	0x2e62696c
   1e2a8:	00007372 	.word	0x00007372
   1e2ac:	0001e294 	.word	0x0001e294
   1e2b0:	00000016 	.word	0x00000016
   1e2b4:	000000db 	.word	0x000000db
   1e2b8:	00000011 	.word	0x00000011
   1e2bc:	00008d4d 	.word	0x00008d4d
   1e2c0:	00000004 	.word	0x00000004
   1e2c4:	00000004 	.word	0x00000004
   1e2c8:	00008a91 	.word	0x00008a91
   1e2cc:	65737361 	.word	0x65737361
   1e2d0:	6f697472 	.word	0x6f697472
   1e2d4:	6166206e 	.word	0x6166206e
   1e2d8:	64656c69 	.word	0x64656c69
   1e2dc:	2860203a 	.word	0x2860203a
   1e2e0:	7466656c 	.word	0x7466656c
   1e2e4:	203d3d20 	.word	0x203d3d20
   1e2e8:	68676972 	.word	0x68676972
   1e2ec:	0a602974 	.word	0x0a602974
   1e2f0:	656c2020 	.word	0x656c2020
   1e2f4:	203a7466 	.word	0x203a7466
   1e2f8:	60          	.byte	0x60
   1e2f9:	60          	.byte	0x60
   1e2fa:	0a2c      	.short	0x0a2c
   1e2fc:	67697220 	.word	0x67697220
   1e300:	203a7468 	.word	0x203a7468
   1e304:	60          	.byte	0x60
   1e305:	60          	.byte	0x60
   1e306:	203a      	.short	0x203a
   1e308:	0001e2cc 	.word	0x0001e2cc
   1e30c:	0000002d 	.word	0x0000002d
   1e310:	0001e2f9 	.word	0x0001e2f9
   1e314:	0000000c 	.word	0x0000000c
   1e318:	0001e305 	.word	0x0001e305
   1e31c:	00000003 	.word	0x00000003
   1e320:	0001e308 	.word	0x0001e308
   1e324:	74736564 	.word	0x74736564
   1e328:	74616e69 	.word	0x74616e69
   1e32c:	206e6f69 	.word	0x206e6f69
   1e330:	20646e61 	.word	0x20646e61
   1e334:	72756f73 	.word	0x72756f73
   1e338:	73206563 	.word	0x73206563
   1e33c:	6563696c 	.word	0x6563696c
   1e340:	61682073 	.word	0x61682073
   1e344:	64206576 	.word	0x64206576
   1e348:	65666669 	.word	0x65666669
   1e34c:	746e6572 	.word	0x746e6572
   1e350:	6e656c20 	.word	0x6e656c20
   1e354:	73687467 	.word	0x73687467
   1e358:	0001e324 	.word	0x0001e324
   1e35c:	00000034 	.word	0x00000034
   1e360:	0001e358 	.word	0x0001e358
   1e364:	0001e364 	.word	0x0001e364
   1e368:	7375722f 	.word	0x7375722f
   1e36c:	352f6374 	.word	0x352f6374
   1e370:	66613765 	.word	0x66613765
   1e374:	39363634 	.word	0x39363634
   1e378:	65303866 	.word	0x65303866
   1e37c:	38366635 	.word	0x38366635
   1e380:	31343132 	.word	0x31343132
   1e384:	30353066 	.word	0x30353066
   1e388:	61333931 	.word	0x61333931
   1e38c:	39373662 	.word	0x39373662
   1e390:	62646661 	.word	0x62646661
   1e394:	2f316234 	.word	0x2f316234
   1e398:	2f637273 	.word	0x2f637273
   1e39c:	6362696c 	.word	0x6362696c
   1e3a0:	2f65726f 	.word	0x2f65726f
   1e3a4:	7263616d 	.word	0x7263616d
   1e3a8:	6d2f736f 	.word	0x6d2f736f
   1e3ac:	722e646f 	.word	0x722e646f
   1e3b0:	00000073 	.word	0x00000073
   1e3b4:	0001e368 	.word	0x0001e368
   1e3b8:	00000049 	.word	0x00000049
   1e3bc:	00000012 	.word	0x00000012
   1e3c0:	0000000d 	.word	0x0000000d
   1e3c4:	656d6f53 	.word	0x656d6f53
   1e3c8:	656e6f4e 	.word	0x656e6f4e
   1e3cc:	00008d45 	.word	0x00008d45
   1e3d0:	00000004 	.word	0x00000004
   1e3d4:	00000004 	.word	0x00000004
   1e3d8:	00009323 	.word	0x00009323
   1e3dc:	00000060 	.word	0x00000060
   1e3e0:	0001e3dc 	.word	0x0001e3dc
   1e3e4:	20697073 	.word	0x20697073
   1e3e8:	73756c66 	.word	0x73756c66
   1e3ec:	61662068 	.word	0x61662068
   1e3f0:	6c69      	.short	0x6c69
   1e3f2:	552f      	.short	0x552f
   1e3f4:	73726573 	.word	0x73726573
   1e3f8:	70754c2f 	.word	0x70754c2f
   1e3fc:	502f7970 	.word	0x502f7970
   1e400:	54656e69 	.word	0x54656e69
   1e404:	2f656d69 	.word	0x2f656d69
   1e408:	656e6970 	.word	0x656e6970
   1e40c:	656d6974 	.word	0x656d6974
   1e410:	7375722d 	.word	0x7375722d
   1e414:	796d2d74 	.word	0x796d2d74
   1e418:	7477656e 	.word	0x7477656e
   1e41c:	7375722f 	.word	0x7375722f
   1e420:	74732f74 	.word	0x74732f74
   1e424:	35333737 	.word	0x35333737
   1e428:	64636c2d 	.word	0x64636c2d
   1e42c:	7461622d 	.word	0x7461622d
   1e430:	722d6863 	.word	0x722d6863
   1e434:	72732f73 	.word	0x72732f73
   1e438:	696c2f63 	.word	0x696c2f63
   1e43c:	73722e62 	.word	0x73722e62
   1e440:	0001e3f2 	.word	0x0001e3f2
   1e444:	0000004e 	.word	0x0000004e
   1e448:	000000fe 	.word	0x000000fe
   1e44c:	00000009 	.word	0x00000009
   1e450:	20697073 	.word	0x20697073
   1e454:	61746164 	.word	0x61746164
   1e458:	69616620 	.word	0x69616620
   1e45c:	0000006c 	.word	0x0000006c
   1e460:	0001e3f2 	.word	0x0001e3f2
   1e464:	0000004e 	.word	0x0000004e
   1e468:	000000b0 	.word	0x000000b0
   1e46c:	00000009 	.word	0x00000009
   1e470:	0001e3f2 	.word	0x0001e3f2
   1e474:	0000004e 	.word	0x0000004e
   1e478:	000000f3 	.word	0x000000f3
   1e47c:	00000009 	.word	0x00000009
   1e480:	0001e3f2 	.word	0x0001e3f2
   1e484:	0000004e 	.word	0x0000004e
   1e488:	00000098 	.word	0x00000098
   1e48c:	0000000d 	.word	0x0000000d
   1e490:	20697073 	.word	0x20697073
   1e494:	20646d63 	.word	0x20646d63
   1e498:	6c696166 	.word	0x6c696166
   1e49c:	0001e3f2 	.word	0x0001e3f2
   1e4a0:	0000004e 	.word	0x0000004e
   1e4a4:	00000097 	.word	0x00000097
   1e4a8:	00000009 	.word	0x00000009
   1e4ac:	0001e3f2 	.word	0x0001e3f2
   1e4b0:	0000004e 	.word	0x0000004e
   1e4b4:	0000009d 	.word	0x0000009d
   1e4b8:	00000011 	.word	0x00000011
   1e4bc:	0001e3f2 	.word	0x0001e3f2
   1e4c0:	0000004e 	.word	0x0000004e
   1e4c4:	0000009c 	.word	0x0000009c
   1e4c8:	0000000d 	.word	0x0000000d
   1e4cc:	0001e3f2 	.word	0x0001e3f2
   1e4d0:	0000004e 	.word	0x0000004e
   1e4d4:	000000c5 	.word	0x000000c5
   1e4d8:	0000002d 	.word	0x0000002d
   1e4dc:	0001e3f2 	.word	0x0001e3f2
   1e4e0:	0000004e 	.word	0x0000004e
   1e4e4:	000000c9 	.word	0x000000c9
   1e4e8:	0000002d 	.word	0x0000002d
   1e4ec:	0001e3f2 	.word	0x0001e3f2
   1e4f0:	0000004e 	.word	0x0000004e
   1e4f4:	000000d8 	.word	0x000000d8
   1e4f8:	00000019 	.word	0x00000019
   1e4fc:	00000000 	.word	0x00000000

0001e500 <str.0>:
   1e500:	65747461 2074706d 61206f74 77206464     attempt to add w
   1e510:	20687469 7265766f 776f6c66 0001e3f2     ith overflow....
   1e520:	0000004e 000000d9 00000019 0001e3f2     N...............
   1e530:	0000004e 000000db 00000019 0001e3f2     N...............
   1e540:	0000004e 000000dc 00000019 20697073     N...........spi 
   1e550:	74696e69 69616620 0000006c 0001e3f2     init fail.......
   1e560:	0000004e 00000066 00000009 002d2c01     N...f........,-.
   1e570:	0001e56c 012d2c01 00002d2c 0001e574     l....,-.,-..t...
   1e580:	00000007 0001e580 008402a2 0001e588     ................
   1e590:	000000c5 0001e590 0000000a 0001e598     ................
   1e5a0:	00002a8a 0001e5a0 0000ee8a 0001e5a8     .*..............
   1e5b0:	0000000e 0001e5b0 00000000 0001e5b8     ................
   1e5c0:	00000008 0001e5c0 00000005 0001e5c8     ................
   1e5d0:	0001e3f2 0000004e 00000088 00000009     ....N...........
   1e5e0:	74737552 756f7420 73206863 6f736e65     Rust touch senso
   1e5f0:	00000a72 00000000 0001e5f4 65737361     r...........asse
   1e600:	6f697472 6166206e 64656c69 2860203a     rtion failed: `(
   1e610:	7466656c 203d3d20 68676972 0a602974     left == right)`.
   1e620:	656c2020 203a7466 0a2c6060 67697220       left: ``,. rig
   1e630:	203a7468 203a6060 0001e5fc 0000002d     ht: ``: ....-...
   1e640:	0001e629 0000000c 0001e635 00000003     ).......5.......
   1e650:	0001e638 20515249 74696e69 69616620     8...IRQ init fai
   1e660:	0000006c 0001e654 0000000d 0001e664     l...T.......d...
   1e670:	0001e670 74737572 7070612f 6372732f     p...rust/app/src
   1e680:	756f742f 735f6863 6f736e65 73722e72     /touch_sensor.rs
   1e690:	0001e674 0000001c 0000003f 00000005     t.......?.......
   1e6a0:	20633269 72646461 0001e674 0000001c     i2c addrt.......
   1e6b0:	0000004b 00000011 63756f74 74616468     K.......touchdat
   1e6c0:	61662061 00006c69 0001e674 0000001c     a fail..t.......
   1e6d0:	00000056 00000009 0001e674 0000001c     V.......t.......
   1e6e0:	0000005a 00000031 64616572 756f7420     Z...1...read tou
   1e6f0:	61646863 66206174 006c6961 0001e674     chdata fail.t...
   1e700:	0000001c 00000089 00000005 0001e674     ............t...
   1e710:	0000001c 00000095 00000037 00000000     ........7.......

0001e720 <str.0>:
   1e720:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1e730:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1e740:	00000077 0001e674 0000001c 00000095     w...t...........
   1e750:	00000024 00000000 00000000 00000000     $...............

0001e760 <str.1>:
   1e760:	65747461 2074706d 61206f74 77206464     attempt to add w
   1e770:	20687469 7265766f 776f6c66 0001e674     ith overflowt...
   1e780:	0000001c 00000095 00000020 0001e674     ........ ...t...
   1e790:	0000001c 00000099 00000009 0001e674     ............t...
   1e7a0:	0000001c 0000009a 00000037 0001e674     ........7...t...
   1e7b0:	0000001c 0000009a 00000023 0001e674     ........#...t...
   1e7c0:	0000001c 0000009a 0000001f 0001e674     ............t...
   1e7d0:	0000001c 0000009b 00000037 0001e674     ........7...t...
   1e7e0:	0000001c 0000009b 00000023 0001e674     ........#...t...
   1e7f0:	0000001c 0000009b 0000001f 0001e674     ............t...
   1e800:	0000001c 0000009c 00000009 0001e674     ............t...
   1e810:	0000001c 0000009e 00000037 0001e674     ........7...t...
   1e820:	0000001c 0000009e 00000023 0001e674     ........#...t...
   1e830:	0000001c 0000009e 0000001f 0001e674     ............t...
   1e840:	0000001c 0000009f 00000037 0001e674     ........7...t...
   1e850:	0000001c 0000009f 00000023 0001e674     ........#...t...
   1e860:	0000001c 0000009f 0000001f 0001e674     ............t...
   1e870:	0000001c 000000a0 00000009 0001e674     ............t...
   1e880:	0000001c 000000a4 00000030 0001e674     ........0...t...
   1e890:	0000001c 000000a4 0000001a 0001e674     ............t...
   1e8a0:	0000001c 000000a4 00000016 0001e674     ............t...
   1e8b0:	0000001c 000000a3 00000009 0001e674     ............t...
   1e8c0:	0000001c 000000a6 00000030 0001e674     ........0...t...
   1e8d0:	0000001c 000000a6 0000001a 0001e674     ............t...
   1e8e0:	0000001c 000000a6 00000016 0001e674     ............t...
   1e8f0:	0000001c 000000a5 00000009 0001e674     ............t...
   1e900:	0000001c 000000aa 0000002d 0001e674     ........-...t...
   1e910:	0000001c 000000aa 0000001a 0001e674     ............t...
   1e920:	0000001c 000000aa 00000016 0001e674     ............t...
   1e930:	0000001c 000000a9 00000009 0001e674     ............t...
   1e940:	0000001c 000000ac 0000002d 0001e674     ........-...t...
   1e950:	0000001c 000000ac 0000001a 0001e674     ............t...
   1e960:	0000001c 000000ac 00000016 0001e674     ............t...
   1e970:	0000001c 000000ab 00000009 0001e674     ............t...
   1e980:	0000001c 000000af 0000000d 0001e674     ............t...
   1e990:	0000001c 000000af 0000002c 20633269     ........,...i2c 
   1e9a0:	00667562 0001e674 0000001c 000000f1     buf.t...........
   1e9b0:	00000005 0001e674 0000001c 000000f2     ....t...........
   1e9c0:	0000000d 0001e674 0000001c 000000f2     ....t...........
   1e9d0:	00000005 20633269 6c696166 7375520a     ....i2c fail.Rus
   1e9e0:	48432074 0a385049 70696863 00000038     t CHIP8.chip8...
   1e9f0:	00000000 0001e9e8 00000006 0001e9f0     ................
   1ea00:	50494843 74732038 65747261 026a0a64     CHIP8 started.j.
   1ea10:	3f6c0c6b eaa20c6d d6dcb6da d422006e     k.l?m.......n.".
   1ea20:	02680366 15f06060 003007f0 17c71a12     f.h.``....0.....
   1ea30:	ff690877 71d6f0a2 b6daeaa2 0160d6dc     w.i....q......`.
   1ea40:	fe7ba1e0 a1e00460 1f60027b b6da028b     ..{.`...{.`.....
   1ea50:	a1e00c60 0d60fe7d 027da1e0 028d1f60     `...}.`...}.`...
   1ea60:	f0a2d6dc 848671d6 3f609487 1f610286     .....q....`?..a.
   1ea70:	02461287 3f467812 1f478212 0047ff69     ..F..xF?..G.i.G.
   1ea80:	71d60169 02682a12 70800163 8a12b580     i..q.*h.c..p....
   1ea90:	0a63fe68 d5807080 a212013f 15800261     h.c..p..?...a...
   1eaa0:	ba12013f 013f1580 1580c812 c212013f     ?.....?.....?...
   1eab0:	18f02060 348ed422 3e66d422 03660133     ` .."..4".f>3.f.
   1eac0:	0133fe68 16120268 fe49ff79 c812ff69     h.3.h...y.I.i...
   1ead0:	02490179 04600169 017618f0 fe764046     y.I.i.`...v.F@v.
   1eae0:	f2a26c12 65f233fe 146429f1 55d40065     .l...3.e.)d.e..U
   1eaf0:	29f21574 ee0055d4 80808080 00808080     t..).U..........
   1eb00:	00000000 50494843 6f642038 430a656e     ....CHIP8 done.C
   1eb10:	38504948 6f687320 20646c75 20746f6e     HIP8 should not 
   1eb20:	72646e65 2f747375 2f707061 2f637273     endrust/app/src/
   1eb30:	70696863 73722e38 0001eb23 00000015     chip8.rs#.......
   1eb40:	0000004b 00000005 0001eb23 00000015     K.......#.......
   1eb50:	0000008f 00000018 00000000 00000000     ................

0001eb60 <str.0>:
   1eb60:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1eb70:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1eb80:	00000077 0001eb23 00000015 00000090     w...#...........
   1eb90:	00000017 0001eb23 00000015 00000091     ....#...........
   1eba0:	00000021 00000000 00000000 00000000     !...............

0001ebb0 <str.1>:
   1ebb0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1ebc0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1ebd0:	00000077 0001eb23 00000015 00000091     w...#...........
   1ebe0:	00000020 00000000 00000000 00000000      ...............

0001ebf0 <str.2>:
   1ebf0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1ec00:	20687469 7265766f 776f6c66 0001eb23     ith overflow#...
   1ec10:	00000015 00000091 00000019 0001eb23     ............#...
   1ec20:	00000015 00000092 00000021 0001eb23     ........!...#...
   1ec30:	00000015 00000092 00000020 0001eb23     ........ ...#...
   1ec40:	00000015 00000092 0000001a 7265766f     ............over
   1ec50:	776f6c66 73746573 20657a69 666f5f78     flowsetsize x_of
   1ec60:	74657366 666f5f79 74657366 0001eb23     fsety_offset#...
   1ec70:	00000015 00000093 00000009 766f2078     ............x ov
   1ec80:	6c667265 0000776f 0001eb23 00000015     erflow..#.......
   1ec90:	000000a3 00000009 766f2079 6c667265     ........y overfl
   1eca0:	0000776f 0001eb23 00000015 000000a4     ow..#...........
   1ecb0:	00000009 0001eb23 00000015 000000a5     ....#...........
   1ecc0:	00000023 0001eb23 00000015 000000a5     #...#...........
   1ecd0:	00000011 0001eb23 00000015 000000a7     ....#...........
   1ece0:	00000010 0001eb23 00000015 000000aa     ....#...........
   1ecf0:	00000009 0001eb23 00000015 000000af     ....#...........
   1ed00:	0000000d 0001eb23 00000015 000000b4     ....#...........
   1ed10:	00000011 0001eb23 00000015 000000b9     ....#...........
   1ed20:	00000015 0001eb23 00000015 00000101     ....#...........
   1ed30:	00000009 0001eb23 00000015 00000102     ....#...........
   1ed40:	00000009 0001eb23 00000015 00000103     ....#...........
   1ed50:	00000015 0001eb23 00000015 00000103     ....#...........
   1ed60:	00000011 0001eb23 00000015 00000104     ....#...........
   1ed70:	00000012 0001eb23 00000015 00000117     ....#...........
   1ed80:	00000009 0001eb23 00000015 00000118     ....#...........
   1ed90:	00000009 0001eb23 00000015 00000119     ....#...........
   1eda0:	00000015 0001eb23 00000015 00000119     ....#...........
   1edb0:	00000011 0001eb23 00000015 0000011a     ....#...........
   1edc0:	00000012 000a202c 0001eb23 00000015     ...., ..#.......
   1edd0:	00000129 00000012 0001eb23 00000015     ).......#.......
   1ede0:	00000153 00000011 0001eb23 00000015     S.......#.......
   1edf0:	00000154 00000012 0001eb23 00000015     T.......#.......
   1ee00:	00000156 00000008 0001eb23 00000015     V.......#.......
   1ee10:	0000015d 0000001f 0001eb23 00000015     ].......#.......
   1ee20:	0000015e 00000020 0001eb23 00000015     ^... ...#.......
   1ee30:	00000163 0000000d 0001eb23 00000015     c.......#.......
   1ee40:	00000166 00000011 20746573 65786970     f.......set pixe
   1ee50:	6620736c 656c6961 00000064 0001eb23     ls failed...#...
   1ee60:	00000015 00000177 00000005 50494843     ....w.......CHIP
   1ee70:	6f742038 20686375 20746f6e 646e6168     8 touch not hand
   1ee80:	0a64656c 6c6c6163 60206465 6974704f     led.called `Opti
   1ee90:	3a3a6e6f 72776e75 29287061 6e6f2060     on::unwrap()` on
   1eea0:	60206120 656e6f4e 61762060 7365756c      a `None` values
   1eeb0:	66206970 6873756c 69616620 73552f6c     pi flush fail/Us
   1eec0:	2f737265 7070754c 69502f79 6954656e     ers/Luppy/PineTi
   1eed0:	702f656d 74656e69 2d656d69 74737572     me/pinetime-rust
   1eee0:	6e796d2d 2f747765 74737572 3774732f     -mynewt/rust/st7
   1eef0:	2d353337 2d64636c 63746162 73722d68     735-lcd-batch-rs
   1ef00:	6372732f 62696c2f 0073722e 0001eebd     /src/lib.rs.....
   1ef10:	0000004e 000000fe 00000009 0001eebd     N...............
   1ef20:	0000004e 000000f3 00000009 6573552f     N.........../Use
   1ef30:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   1ef40:	69676572 79727473 6372732f 7469672f     registry/src/git
   1ef50:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   1ef60:	65396264 33323863 62696c2f 70696863     db9ec823/libchip
   1ef70:	2e302d38 2f322e31 2f637273 2e62696c     8-0.1.2/src/lib.
   1ef80:	00007372 0001ef2c 00000056 0000009d     rs..,...V.......
   1ef90:	00000014 0001ef2c 00000056 000000d4     ....,...V.......
   1efa0:	00000011 0001ef2c 00000056 000000d5     ....,...V.......
   1efb0:	0000001a 00000000 00000000 00000000     ................

0001efc0 <str.0>:
   1efc0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1efd0:	20687469 7265766f 776f6c66 0001ef2c     ith overflow,...
   1efe0:	00000056 000000d5 00000011 00000005     V...............
   1eff0:	0001efec 4c205d5b 78562044 495b202c     ....[] LD Vx, [I
   1f000:	0000005d 0001eff4 00000001 0001eff5     ]...............
   1f010:	0000000c 0001f004 00000000 00000020     ............ ...
   1f020:	00000008 00000002 00000000 00000000     ................
   1f030:	00000004 00000003 0001f018 6362696c     ............libc
   1f040:	38706968 4b53205d 78562050 504a205d     hip8] SKP Vx] JP
   1f050:	6e6e6e20 00000040 00000020 0001f03c      nnn@... ...<...
   1f060:	00000008 0001f03c 00000008 0001ef2c     ....<.......,...
   1f070:	00000056 000001a1 0001f05c 0001ef2c     V.......\...,...
   1f080:	00000056 000001a3 0000001d 0001ef2c     V...........,...
   1f090:	00000056 000001a4 0000002a 0001ef2c     V.......*...,...
   1f0a0:	00000056 000001a4 00000021 0001ef2c     V.......!...,...
   1f0b0:	00000056 000001a4 00000015 444c205d     V...........] LD
   1f0c0:	5d495b20 7856202c 0001eff4 00000001      [I], Vx........
   1f0d0:	0001f0bc 0000000c 0001f0c8 0001f03c     ............<...
   1f0e0:	00000008 0001f03c 00000008 0001ef2c     ....<.......,...
   1f0f0:	00000056 0000019a 0001f0dc 0001ef2c     V...........,...
   1f100:	00000056 0000019c 0000001d 0001ef2c     V...........,...
   1f110:	00000056 0000019d 00000035 0001ef2c     V.......5...,...
   1f120:	00000056 0000019d 0000001e 0001ef2c     V...........,...
   1f130:	00000056 0000019d 00000015 444c205d     V...........] LD
   1f140:	202c4220 00007856 0001eff4 00000001      B, Vx..........
   1f150:	0001f13c 0000000a 0001f148 0001f03c     <.......H...<...
   1f160:	00000008 0001f03c 00000008 0001ef2c     ....<.......,...
   1f170:	00000056 00000193 0001f15c 0001ef2c     V.......\...,...
   1f180:	00000056 00000194 0000001b 0001ef2c     V...........,...
   1f190:	00000056 00000195 00000011 0001ef2c     V...........,...
   1f1a0:	00000056 00000196 0000001a 0001ef2c     V...........,...
   1f1b0:	00000056 00000196 00000011 0001ef2c     V...........,...
   1f1c0:	00000056 00000197 0000001a 0001ef2c     V...........,...
   1f1d0:	00000056 00000197 00000011 444c205d     V...........] LD
   1f1e0:	202c4620 00007856 0001eff4 00000001      F, Vx..........
   1f1f0:	0001f1dc 0000000a 0001f1e8 0001f03c     ............<...
   1f200:	00000008 0001f03c 00000008 0001ef2c     ....<.......,...
   1f210:	00000056 0000018f 0001f1fc 0001ef2c     V...........,...
   1f220:	00000056 00000190 0000001b 0001ef2c     V...........,...
   1f230:	00000056 00000190 0000001a 00000000     V...............

0001f240 <str.1>:
   1f240:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1f250:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1f260:	41205d77 49204444 7856202c 0001eff4     w] ADD I, Vx....
   1f270:	00000001 0001f261 0000000b 0001f26c     ....a.......l...
   1f280:	0001f03c 00000008 0001f03c 00000008     <.......<.......
   1f290:	0001ef2c 00000056 0000018b 0001f280     ,...V...........
   1f2a0:	0001ef2c 00000056 0000018c 0000002e     ,...V...........
   1f2b0:	444c205d 2c545320 00785620 0001eff4     ] LD ST, Vx.....
   1f2c0:	00000001 0001f2b0 0000000b 0001f2bc     ................
   1f2d0:	0001f03c 00000008 0001f03c 00000008     <.......<.......
   1f2e0:	0001ef2c 00000056 00000187 0001f2d0     ,...V...........
   1f2f0:	0001ef2c 00000056 00000188 0000001b     ,...V...........
   1f300:	444c205d 2c544420 00785620 0001eff4     ] LD DT, Vx.....
   1f310:	00000001 0001f300 0000000b 0001f30c     ................
   1f320:	0001f03c 00000008 0001f03c 00000008     <.......<.......
   1f330:	0001ef2c 00000056 00000183 0001f320     ,...V....... ...
   1f340:	0001ef2c 00000056 00000184 0000001b     ,...V...........
   1f350:	444c205d 2c785620 00004b20 0001eff4     ] LD Vx, K......
   1f360:	00000001 0001f350 0000000a 0001f35c     ....P.......\...
   1f370:	0001f03c 00000008 0001f03c 00000008     <.......<.......
   1f380:	0001ef2c 00000056 0000017f 0001f370     ,...V.......p...
   1f390:	0001ef2c 00000056 00000180 00000011     ,...V...........
   1f3a0:	444c205d 2c785620 00544420 0001eff4     ] LD Vx, DT.....
   1f3b0:	00000001 0001f3a0 0000000b 0001f3ac     ................
   1f3c0:	0001f03c 00000008 0001f03c 00000008     <.......<.......
   1f3d0:	0001ef2c 00000056 0000017b 0001f3c0     ,...V...{.......
   1f3e0:	0001ef2c 00000056 0000017c 00000011     ,...V...|.......
   1f3f0:	4b53205d 5620504e 00000078 0001eff4     ] SKNP Vx.......
   1f400:	00000001 0001f3f0 00000009 0001f3fc     ................
   1f410:	0001f03c 00000008 0001f03c 00000008     <.......<.......
   1f420:	0001ef2c 00000056 00000175 0001f410     ,...V...u.......
   1f430:	0001ef2c 00000056 00000176 00000021     ,...V...v...!...
   1f440:	0001eff4 00000001 0001f044 00000008     ........D.......
   1f450:	0001f440 0001f03c 00000008 0001f03c     @...<.......<...
   1f460:	00000008 0001ef2c 00000056 0000016f     ....,...V...o...
   1f470:	0001f454 0001ef2c 00000056 00000170     T...,...V...p...
   1f480:	00000020 5244205d 78562057 7956202c      ...] DRW Vx, Vy
   1f490:	006e202c 0001eff4 00000001 0001f484     , n.............
   1f4a0:	0000000f 0001f494 0001f03c 00000008     ........<.......
   1f4b0:	0001f03c 00000008 0001ef2c 00000056     <.......,...V...
   1f4c0:	00000156 0001f4a8 0001ef2c 00000056     V.......,...V...
   1f4d0:	00000157 0000001d 0001ef2c 00000056     W.......,...V...
   1f4e0:	00000158 0000001d 0001ef2c 00000056     X.......,...V...
   1f4f0:	0000015e 00000026 0001ef2c 00000056     ^...&...,...V...
   1f500:	0000015e 0000001d 0001ef2c 00000056     ^.......,...V...
   1f510:	00000160 00000021 00000000 00000000     `...!...........

0001f520 <str.2>:
   1f520:	65747461 2074706d 63206f74 75636c61     attempt to calcu
   1f530:	6574616c 65687420 6d657220 646e6961     late the remaind
   1f540:	77207265 20687469 69642061 6f736976     er with a diviso
   1f550:	666f2072 72657a20 0000006f 0001ef2c     r of zero...,...
   1f560:	00000056 00000163 00000025 0001ef2c     V...c...%...,...
   1f570:	00000056 00000165 0000002d 00000000     V...e...-.......

0001f580 <str.3>:
   1f580:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1f590:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1f5a0:	00000077 0001ef2c 00000056 00000165     w...,...V...e...
   1f5b0:	00000028 00000000 00000000 00000000     (...............

0001f5c0 <str.4>:
   1f5c0:	65747461 2074706d 73206f74 74666968     attempt to shift
   1f5d0:	66656c20 69772074 6f206874 66726576      left with overf
   1f5e0:	5d776f6c 444e5220 2c785620 006b6b20     low] RND Vx, kk.
   1f5f0:	0001eff4 00000001 0001f5e3 0000000c     ................
   1f600:	0001f5f0 0001f03c 00000008 0001f03c     ....<.......<...
   1f610:	00000008 0001ef2c 00000056 00000152     ....,...V...R...
   1f620:	0001f604 0001ef2c 00000056 00000153     ....,...V...S...
   1f630:	00000011 504a205d 2c305620 6e6e6e20     ....] JP V0, nnn
   1f640:	0001eff4 00000001 0001f634 0000000c     ........4.......
   1f650:	0001f640 0001f03c 00000008 0001f03c     @...<.......<...
   1f660:	00000008 0001ef2c 00000056 0000014e     ....,...V...N...
   1f670:	0001f654 444c205d 202c4920 006e6e6e     T...] LD I, nnn.
   1f680:	0001eff4 00000001 0001f674 0000000b     ........t.......
   1f690:	0001f680 0001f03c 00000008 0001f03c     ....<.......<...
   1f6a0:	00000008 0001ef2c 00000056 0000014a     ....,...V...J...
   1f6b0:	0001f694 4e53205d 78562045 7956202c     ....] SNE Vx, Vy
   1f6c0:	0001eff4 00000001 0001f6b4 0000000c     ................
   1f6d0:	0001f6c0 0001f03c 00000008 0001f03c     ....<.......<...
   1f6e0:	00000008 0001ef2c 00000056 00000144     ....,...V...D...
   1f6f0:	0001f6d4 0001ef2c 00000056 00000145     ....,...V...E...
   1f700:	00000014 0001ef2c 00000056 00000145     ....,...V...E...
   1f710:	00000021 4853205d 7856204c 7956202c     !...] SHL Vx, Vy
   1f720:	0001eff4 00000001 0001f714 0000000c     ................
   1f730:	0001f720 0001f03c 00000008 0001f03c      ...<.......<...
   1f740:	00000008 0001ef2c 00000056 0000013f     ....,...V...?...
   1f750:	0001f734 0001ef2c 00000056 00000140     4...,...V...@...
   1f760:	00000020 0001ef2c 00000056 00000141      ...,...V...A...
   1f770:	0000001d 0001ef2c 00000056 00000141     ....,...V...A...
   1f780:	00000011 5553205d 56204e42 56202c78     ....] SUBN Vx, V
   1f790:	00000079 0001eff4 00000001 0001f784     y...............
   1f7a0:	0000000d 0001f794 0001f03c 00000008     ........<.......
   1f7b0:	0001f03c 00000008 0001ef2c 00000056     <.......,...V...
   1f7c0:	00000139 0001f7a8 0001ef2c 00000056     9.......,...V...
   1f7d0:	0000013a 0000001e 0001ef2c 00000056     :.......,...V...
   1f7e0:	0000013a 00000038 0001ef2c 00000056     :...8...,...V...
   1f7f0:	0000013b 00000011 4853205d 78562052     ;.......] SHR Vx
   1f800:	7956202c 0001eff4 00000001 0001f7f8     , Vy............
   1f810:	0000000c 0001f804 0001f03c 00000008     ........<.......
   1f820:	0001f03c 00000008 0001ef2c 00000056     <.......,...V...
   1f830:	00000134 0001f818 0001ef2c 00000056     4.......,...V...
   1f840:	00000135 0000001f 0001ef2c 00000056     5.......,...V...
   1f850:	00000136 0000001d 0001ef2c 00000056     6.......,...V...
   1f860:	00000136 00000011 5553205d 78562042     6.......] SUB Vx
   1f870:	7956202c 0001eff4 00000001 0001f868     , Vy........h...
   1f880:	0000000c 0001f874 0001f03c 00000008     ....t...<.......
   1f890:	0001f03c 00000008 0001ef2c 00000056     <.......,...V...
   1f8a0:	0000012e 0001f888 0001ef2c 00000056     ........,...V...
   1f8b0:	0000012f 0000001e 0001ef2c 00000056     /.......,...V...
   1f8c0:	0000012f 00000038 0001ef2c 00000056     /...8...,...V...
   1f8d0:	00000130 00000011 4441205d 78562044     0.......] ADD Vx
   1f8e0:	7956202c 0001eff4 00000001 0001f8d8     , Vy............
   1f8f0:	0000000c 0001f8e4 0001f03c 00000008     ........<.......
   1f900:	0001f03c 00000008 0001ef2c 00000056     <.......,...V...
   1f910:	00000128 0001f8f8 0001ef2c 00000056     (.......,...V...
   1f920:	00000129 0000001e 0001ef2c 00000056     ).......,...V...
   1f930:	00000129 00000038 0001ef2c 00000056     )...8...,...V...
   1f940:	0000012a 00000011 4f58205d 78562052     *.......] XOR Vx
   1f950:	7956202c 0001eff4 00000001 0001f948     , Vy........H...
   1f960:	0000000c 0001f954 0001f03c 00000008     ....T...<.......
   1f970:	0001f03c 00000008 0001ef2c 00000056     <.......,...V...
   1f980:	00000124 0001f968 0001ef2c 00000056     $...h...,...V...
   1f990:	00000125 0000001e 0001ef2c 00000056     %.......,...V...
   1f9a0:	00000125 00000011 4e41205d 78562044     %.......] AND Vx
   1f9b0:	7956202c 0001eff4 00000001 0001f9a8     , Vy............
   1f9c0:	0000000c 0001f9b4 0001f03c 00000008     ........<.......
   1f9d0:	0001f03c 00000008 0001ef2c 00000056     <.......,...V...
   1f9e0:	00000120 0001f9c8 0001ef2c 00000056      .......,...V...
   1f9f0:	00000121 0000001e 0001ef2c 00000056     !.......,...V...
   1fa00:	00000121 00000011 524f205d 2c785620     !.......] OR Vx,
   1fa10:	00795620 0001eff4 00000001 0001fa08      Vy.............
   1fa20:	0000000b 0001fa14 0001f03c 00000008     ........<.......
   1fa30:	0001f03c 00000008 0001ef2c 00000056     <.......,...V...
   1fa40:	0000011c 0001fa28 0001ef2c 00000056     ....(...,...V...
   1fa50:	0000011d 0000001e 0001ef2c 00000056     ........,...V...
   1fa60:	0000011d 00000011 444c205d 2c785620     ........] LD Vx,
   1fa70:	00795620 0001eff4 00000001 0001fa68      Vy.........h...
   1fa80:	0000000b 0001fa74 0001f03c 00000008     ....t...<.......
   1fa90:	0001f03c 00000008 0001ef2c 00000056     <.......,...V...
   1faa0:	00000118 0001fa88 0001ef2c 00000056     ........,...V...
   1fab0:	00000119 0000001d 0001ef2c 00000056     ........,...V...
   1fac0:	00000119 00000011 4441205d 78562044     ........] ADD Vx
   1fad0:	6b6b202c 0001eff4 00000001 0001fac8     , kk............
   1fae0:	0000000c 0001fad4 0001f03c 00000008     ........<.......
   1faf0:	0001f03c 00000008 0001ef2c 00000056     <.......,...V...
   1fb00:	00000114 0001fae8 0001ef2c 00000056     ........,...V...
   1fb10:	00000115 0000001d 0001ef2c 00000056     ........,...V...
   1fb20:	00000115 00000011 444c205d 2c785620     ........] LD Vx,
   1fb30:	006b6b20 0001eff4 00000001 0001fb28      kk.........(...
   1fb40:	0000000b 0001fb34 0001f03c 00000008     ....4...<.......
   1fb50:	0001f03c 00000008 0001ef2c 00000056     <.......,...V...
   1fb60:	00000110 0001fb48 0001ef2c 00000056     ....H...,...V...
   1fb70:	00000111 00000011 6e49205d 696c6176     ........] Invali
   1fb80:	706f2064 0000203a 0001eff4 00000001     d op: ..........
   1fb90:	0001fb78 0000000e 0001fb88 00000000     x...............
   1fba0:	00000020 00000008 00000002 00000000      ...............
   1fbb0:	00000000 00000004 00000003 00000001     ................
   1fbc0:	00000020 00000008 00000002 00000000      ...............
   1fbd0:	00000000 00000004 00000003 0001fb9c     ................
   1fbe0:	633a3a3c 3a65726f 63616d3a 3a736f72     <::core::macros:
   1fbf0:	6e61703a 6d206369 6f726361 00003e73     :panic macros>..
   1fc00:	0001fbe0 0000001e 00000005 00000032     ............2...
   1fc10:	4553205d 2c785620 00795620 0001eff4     ] SE Vx, Vy.....
   1fc20:	00000001 0001fc10 0000000b 0001fc1c     ................
   1fc30:	0001f03c 00000008 0001f03c 00000008     <.......<.......
   1fc40:	0001ef2c 00000056 0000010a 0001fc30     ,...V.......0...
   1fc50:	0001ef2c 00000056 0000010b 00000014     ,...V...........
   1fc60:	0001ef2c 00000056 0000010b 00000021     ,...V.......!...
   1fc70:	4e53205d 78562045 6b6b202c 0001eff4     ] SNE Vx, kk....
   1fc80:	00000001 0001fc70 0000000c 0001fc7c     ....p.......|...
   1fc90:	0001f03c 00000008 0001f03c 00000008     <.......<.......
   1fca0:	0001ef2c 00000056 00000104 0001fc90     ,...V...........
   1fcb0:	0001ef2c 00000056 00000105 00000014     ,...V...........
   1fcc0:	4553205d 20785620 00006b6b 0001eff4     ] SE Vx kk......
   1fcd0:	00000001 0001fcc0 0000000a 0001fccc     ................
   1fce0:	0001f03c 00000008 0001f03c 00000008     <.......<.......
   1fcf0:	0001ef2c 00000056 000000fe 0001fce0     ,...V...........
   1fd00:	0001ef2c 00000056 000000ff 00000014     ,...V...........
   1fd10:	4143205d 6e204c4c 00006e6e 0001eff4     ] CALL nnn......
   1fd20:	00000001 0001fd10 0000000a 0001fd1c     ................
   1fd30:	0001f03c 00000008 0001f03c 00000008     <.......<.......
   1fd40:	0001ef2c 00000056 000000f9 0001fd30     ,...V.......0...
   1fd50:	0001eff4 00000001 0001f04c 00000008     ........L.......
   1fd60:	0001fd50 0001f03c 00000008 0001f03c     P...<.......<...
   1fd70:	00000008 0001ef2c 00000056 000000f5     ....,...V.......
   1fd80:	0001fd64 5953205d 6e6e2053 0000006e     d...] SYS nnn...
   1fd90:	0001eff4 00000001 0001fd84 00000009     ................
   1fda0:	0001fd90 0001f03c 00000008 0001f03c     ....<.......<...
   1fdb0:	00000008 0001ef2c 00000056 000000f1     ....,...V.......
   1fdc0:	0001fda4 20746f6e 6c706d69 6e656d65     ....not implemen
   1fdd0:	00646574 0001fbe0 0000001e 00000002     ted.............
   1fde0:	00000002 4552205d 00000054 0001eff4     ....] RET.......
   1fdf0:	00000001 0001fde4 00000005 0001fdec     ................
   1fe00:	0001f03c 00000008 0001f03c 00000008     <.......<.......
   1fe10:	0001ef2c 00000056 000000ec 0001fe00     ,...V...........
   1fe20:	4c43205d 00000053 0001eff4 00000001     ] CLS...........
   1fe30:	0001fe20 00000005 0001fe28 0001f03c      .......(...<...
   1fe40:	00000008 0001f03c 00000008 0001ef2c     ....<.......,...
   1fe50:	00000056 000000e5 0001fe3c 0001ef2c     V.......<...,...
   1fe60:	00000056 00000093 0000001b 0001ef2c     V...........,...
   1fe70:	00000056 00000097 00000009 0001ef2c     V...........,...
   1fe80:	00000056 000000bb 0000000d 0001ef2c     V...........,...
   1fe90:	00000056 000000be 0000000d 6573552f     V.........../Use
   1fea0:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   1feb0:	69676572 79727473 6372732f 7469672f     registry/src/git
   1fec0:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   1fed0:	65396264 33323863 626d652f 65646465     db9ec823/embedde
   1fee0:	72672d64 69687061 302d7363 322e352e     d-graphics-0.5.2
   1fef0:	6372732f 6f6f632f 722e6472 726e5573     /src/coord.rsUnr
   1ff00:	68636165 656c6261 646e6920 00207865     eachable index .
   1ff10:	0001fefd 00000012 0001ff10 0001fe9c     ................
   1ff20:	00000061 00000070 00000016              a...p.......

0001ff2c <_ZN8libchip87CHARBUF17h227c6d0d7e24574cE>:
   1ff2c:	909090f0 206020f0 10f07020 f0f080f0     ..... `  p......
   1ff3c:	f010f010 10f09090 f080f010 80f0f010     ................
   1ff4c:	f0f090f0 40402010 90f090f0 f090f0f0     ..... @@........
   1ff5c:	90f0f010 e09090f0 e090e090 808080f0     ................
   1ff6c:	9090e0f0 80f0e090 f0f080f0 8080f080     ................
   1ff7c:	72656874 73692065 206f6e20 68637573     there is no such
   1ff8c:	69687420 6120676e 6e612073 71636120      thing as an acq
   1ff9c:	65726975 6c65722f 65736165 616f6c20     uire/release loa
   1ffac:	75722f64 2f637473 61376535 36363466     d/rustc/5e7af466
   1ffbc:	30386639 36663565 34313238 35306631     9f80e5f682141f05
   1ffcc:	33393130 37366261 64666139 31623462     0193ab679afdb4b1
   1ffdc:	6372732f 62696c2f 65726f63 63616d2f     /src/libcore/mac
   1ffec:	2f736f72 2e646f6d 00007372 0001ffad     ros/mod.rs......
   1fffc:	00000049 0000000a 00000009 72656874     I...........ther
   2000c:	73692065 206f6e20 68637573 69687420     e is no such thi
   2001c:	6120676e 20612073 656c6572 20657361     ng as a release 
   2002c:	64616f6c 00011f8b 00000000 00000001     load............
   2003c:	0001234d 00012359 00012363 00020030     M#..Y#..c#..0...
   2004c:	00011f8b 00000000 00000001 0001234d     ............M#..
   2005c:	00012359 00012363                       Y#..c#..

00020064 <_ZN3log6logger3NOP17h5a3de47970f20990E>:
   20064:	00697073 0001e5f4 65737361 6f697472     spi.....assertio
   20074:	6166206e 64656c69 2860203a 7466656c     n failed: `(left
   20084:	203d3d20 68676972 0a602974 656c2020      == right)`.  le
   20094:	203a7466 0a2c6060 67697220 203a7468     ft: ``,. right: 
   200a4:	203a6060 0002006c 0000002d 00020099     ``: l...-.......
   200b4:	0000000c 000200a5 00000003 000200a8     ................
   200c4:	20697073 666e6f63 66206769 006c6961     spi config fail.
   200d4:	000200c4 0000000f 000200d4 000200e0     ................
   200e4:	74737572 6e796d2f 2f747765 2f637273     rust/mynewt/src/
   200f4:	2e697073 00007372 000200e4 00000016     spi.rs..........
   20104:	00000050 0000004a 20697073 66206263     P...J...spi cb f
   20114:	006c6961 0002010c 0000000b 00020118     ail.............
   20124:	000200e4 00000016 00000057 00000005     ........W.......
   20134:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   20144:	00020134 0000000f 00020144 000200e4     4.......D.......
   20154:	00000016 0000005a 00000037 6f697067     ....Z...7...gpio
   20164:	69616620 0000006c 00020160 00000009      fail...`.......
   20174:	0002016c 000200e4 00000016 0000005b     l...........[...
   20184:	00000040 000200e4 00000016 0000005c     @...........\...
   20194:	00000040 6575716d 66206575 006c6961     @...mqueue fail.
   201a4:	00020198 0000000b 000201a4 000200e4     ................
   201b4:	00000016 00000065 00000005 206d6573     ....e.......sem 
   201c4:	6c696166 20697073 6c696166 000201c0     failspi fail....
   201d4:	00000008 000201d0 000200e4 00000016     ................
   201e4:	00000069 00000005 000200e4 00000016     i...............
   201f4:	0000006d 00000005 00000000 00020064     m...........d...
   20204:	00000004 000201fc 6e657665 66207174     ........eventq f
   20214:	006c6961 000200e4 00000016 00000081     ail.............
   20224:	00000009 63206f6e 6220646d 00657479     ....no cmd byte.
   20234:	000200e4 00000016 00000097 00000005     ................
   20244:	000200e4 00000016 00000099 00000016     ................
	...

00020260 <str.0>:
   20260:	65747461 2074706d 61206f74 77206464     attempt to add w
   20270:	20687469 7265766f 776f6c66 20697073     ith overflowspi 
   20280:	7265766f 776f6c66 000200e4 00000016     overflow........
   20290:	00000099 00000005 000200e4 00000016     ................
   202a0:	000000a8 00000012 000200e4 00000016     ................
   202b0:	000000c1 00000035 00000000 00000000     ....5...........

000202c0 <str.1>:
   202c0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   202d0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   202e0:	00000077 000200e4 00000016 000000c4     w...............
   202f0:	0000000f 20746e69 20697073 6c696166     ....int spi fail
   20300:	000200e4 00000016 00000101 00000011     ................
   20310:	000200e4 00000016 00000111 00000015     ................

00020320 <str.2>:
   20320:	65747461 2074706d 73206f74 72746275     attempt to subtr
   20330:	20746361 68746977 65766f20 6f6c6672     act with overflo
   20340:	00000077 000200e4 00000016 0000010f     w...............
   20350:	00000011 000200e4 00000016 00000117     ................
   20360:	00000011 000200e4 00000016 00000124     ............$...
   20370:	00000009 20646162 20697073 006e656c     ....bad spi len.
   20380:	000200e4 00000016 0000012b 00000005     ........+.......
   20390:	000201c8 00000008 00020390 000200e4     ................
   203a0:	00000016 00000141 00000009 000200e4     ....A...........
   203b0:	00000016 0000014a 00000009 000200e4     ....J...........
   203c0:	00000016 0000014e 00000030 000200e4     ....N...0.......
   203d0:	00000016 0000015a 00000005 000200e4     ....Z...........
   203e0:	00000016 0000015f 00000017 0001e5f4     ...._...........
   203f0:	65737361 6f697472 6166206e 64656c69     assertion failed
   20400:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   20410:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   20420:	67697220 203a7468 203a6060 000203f0      right: ``: ....
   20430:	0000002d 0002041d 0000000c 00020429     -...........)...
   20440:	00000003 0002042c 20697073 666e6f63     ....,...spi conf
   20450:	66206769 006c6961 00020448 0000000f     ig fail.H.......
   20460:	00020458 00020464 74737572 6e796d2f     X...d...rust/myn
   20470:	2f747765 2f637273 2e6c6168 00007372     ewt/src/hal.rs..
   20480:	00020468 00000016 00000016 00000009     h...............
   20490:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   204a0:	00020490 0000000f 000204a0 00020468     ............h...
   204b0:	00000016 00000019 00000009 20697073     ............spi 
   204c0:	74696e69 69616620 0000006c 000204bc     init fail.......
   204d0:	0000000d 000204cc 00020468 00000016     ........h.......
   204e0:	0000001c 00000009 6f697067 69616620     ........gpio fai
   204f0:	0000006c 000204e8 00000009 000204f4     l...............
   20500:	00020468 00000016 00000045 00000009     h.......E.......
   20510:	00020468 00000016 0000006c 0000001b     h.......l.......

00020520 <str.0>:
   20520:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   20530:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   20540:	6c616377 2064656c 74704f60 3a6e6f69     wcalled `Option:
   20550:	776e753a 28706172 6f206029 2061206e     :unwrap()` on a 
   20560:	6e6f4e60 76206065 65756c61 6573552f     `None` value/Use
   20570:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   20580:	69676572 79727473 6372732f 7469672f     registry/src/git
   20590:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   205a0:	65396264 33323863 6165682f 73656c70     db9ec823/heaples
   205b0:	2e302d73 2f312e35 2f637273 2e636576     s-0.5.1/src/vec.
   205c0:	00007372 0002056c 00000056 000001e8     rs..l...V.......
   205d0:	0000000d 00000000 00000000 00000000     ................

000205e0 <str.0>:
   205e0:	65747461 2074706d 61206f74 77206464     attempt to add w
   205f0:	20687469 7265766f 776f6c66 552f2928     ith overflow()/U
   20600:	73726573 70754c2f 2e2f7970 67726163     sers/Luppy/.carg
   20610:	65722f6f 74736967 732f7972 672f6372     o/registry/src/g
   20620:	75687469 6f632e62 65312d6d 32366363     ithub.com-1ecc62
   20630:	62643939 38636539 682f3332 6c706165     99db9ec823/heapl
   20640:	2d737365 2e352e30 72732f31 65762f63     ess-0.5.1/src/ve
   20650:	73722e63 00000000 00000000 00000000     c.rs............

00020660 <str.0>:
   20660:	65747461 2074706d 73206f74 72746275     attempt to subtr
   20670:	20746361 68746977 65766f20 6f6c6672     act with overflo
   20680:	00000077 000205fe 00000056 00000066     w.......V...f...
   20690:	00000009 00000000 00000000 00000000     ................

000206a0 <str.1>:
   206a0:	65747461 2074706d 61206f74 77206464     attempt to add w
   206b0:	20687469 7265766f 776f6c66 000205fe     ith overflow....
   206c0:	00000056 0000003e 0000000c 000205fe     V...>...........
   206d0:	00000056 0000002d 00000009 000205fe     V...-...........
   206e0:	00000056 0000007e 00000011 0000a7c1     V...~...........
   206f0:	00000000 00000001 00014b9b 0000a705     .........K......
   20700:	00000002 00000002 000173a9 6c6c6163     .........s..call
   20710:	60206465 75736552 3a3a746c 72776e75     ed `Result::unwr
   20720:	29287061 6e6f2060 206e6120 72724560     ap()` on an `Err
   20730:	61762060 6465756c 20776172 636f6c62     ` valuedraw bloc
   20740:	6620736b 726c6961 2f747375 74656970     ks failrust/piet
   20750:	626d652d 65646465 69702f64 652d7465     -embedded/piet-e
   20760:	6465626d 2d646564 70617267 73636968     mbedded-graphics
   20770:	6372732f 7369642f 79616c70 0073722e     /src/display.rs.
   20780:	00020747 00000038 00000080 00000005     G...8...........
   20790:	6576656e 73757272 69702f74 652d7465     neverrust/piet-e
   207a0:	6465626d 2f646564 74656970 626d652d     mbedded/piet-emb
   207b0:	65646465 72672d64 69687061 732f7363     edded-graphics/s
   207c0:	622f6372 68637461 0073722e 00020795     rc/batch.rs.....
   207d0:	00000036 000000be 00000019 00020795     6...............
   207e0:	00000036 000000c3 0000001d 00000000     6...............

000207f0 <str.0>:
   207f0:	65747461 2074706d 61206f74 77206464     attempt to add w
   20800:	20687469 7265766f 776f6c66 00020795     ith overflow....
   20810:	00000036 000000d5 00000015 00020795     6...............
   20820:	00000036 00000104 00000019 00020795     6...............
   20830:	00000036 00000109 0000001d 00020795     6...............
   20840:	00000036 0000011d 00000015 6573552f     6.........../Use
   20850:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   20860:	69676572 79727473 6372732f 7469672f     registry/src/git
   20870:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   20880:	65396264 33323863 626d652f 65646465     db9ec823/embedde
   20890:	72672d64 69687061 302d7363 322e352e     d-graphics-0.5.2
   208a0:	6372732f 6972702f 6974696d 2f736576     /src/primitives/
   208b0:	74636572 6c676e61 73722e65 0002084c     rectangle.rsL...
   208c0:	00000070 000000c0 00000032 00000000     p.......2.......

000208d0 <str.0>:
   208d0:	65747461 2074706d 61206f74 77206464     attempt to add w
   208e0:	20687469 7265766f 776f6c66 0002084c     ith overflowL...
   208f0:	00000070 000000c2 00000031 00000000     p.......1.......

00020900 <str.1>:
   20900:	65747461 2074706d 73206f74 72746275     attempt to subtr
   20910:	20746361 68746977 65766f20 6f6c6672     act with overflo
   20920:	00000077 0002084c 00000070 000000c4     w...L...p.......
   20930:	00000031 0002084c 00000070 000000c6     1...L...p.......
   20940:	00000031 65707845 64657463 72747320     1...Expected str
   20950:	00656b6f 0002084c 00000070 000000cc     oke.L...p.......
   20960:	00000019 0002084c 00000070 000000d5     ....L...p.......
   20970:	0000000d 0002084c 00000070 000000da     ....L...p.......
   20980:	00000011 6573552f 4c2f7372 79707075     ..../Users/Luppy
   20990:	61632e2f 2f6f6772 69676572 79727473     /.cargo/registry
   209a0:	6372732f 7469672f 2e627568 2d6d6f63     /src/github.com-
   209b0:	63636531 39393236 65396264 33323863     1ecc6299db9ec823
   209c0:	6165682f 73656c70 2e302d73 2f312e35     /heapless-0.5.1/
   209d0:	2f637273 2e636576 00007372 00020984     src/vec.rs......
   209e0:	00000056 00000066 00000009 00000000     V...f...........

000209f0 <str.0>:
   209f0:	65747461 2074706d 61206f74 77206464     attempt to add w
   20a00:	20687469 7265766f 776f6c66 00020984     ith overflow....
   20a10:	00000056 0000003e 0000000c 00020984     V...>...........
   20a20:	00000056 0000007e 00000011 00000000     V...~...........

00020a30 <str.1>:
   20a30:	65747461 2074706d 73206f74 72746275     attempt to subtr
   20a40:	20746361 68746977 65766f20 6f6c6672     act with overflo
   20a50:	00000077 2f637273 6362696c 2f65726f     w...src/libcore/
   20a60:	2f6d756e 32636564 2f746c66 66776172     num/dec2flt/rawf
   20a70:	73722e70 65646e69 756f2078 666f2074     p.rsindex out of
   20a80:	756f6220 3a73646e 65687420 6e656c20      bounds: the len
   20a90:	20736920 00000000 00000020 00000008      is .... .......
   20aa0:	00000002 00000000 00000000 00000002     ................
   20ab0:	00000003 2f637273 6362696c 2f65726f     ....src/libcore/
   20ac0:	63696e75 2f65646f 6e697270 6c626174     unicode/printabl
   20ad0:	73722e65 00000000 00000020 00000004     e.rs.... .......
   20ae0:	00000002 00000000 00000002 00000000     ................
   20af0:	00000003 00000000 00000020 00000008     ........ .......
   20b00:	00000002 00000000 00000001 00000001     ................
   20b10:	00000003 002e2e60 00020b15 00000002     ....`...........
   20b20:	65726c61 20796461 72726f62 6465776f     already borrowed
   20b30:	68772029 73206e65 6963696c 6020676e     ) when slicing `
   20b40:	72616843 46797254 456d6f72 726f7272     CharTryFromError
   20b50:	6f636544 74556564 45363166 726f7272     DecodeUtf16Error

00020b60 <_ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE>:
   20b60:	00010201 00000000 00000000 00000000     ................
   20b70:	72657469 20202020 2e2e202c 65757274     iter    , ..true
   20b80:	72657449 203d3c20 61746164 646e696b     Iter <= datakind
   20b90:	746e616d 73756c70 6f72655a 79706f43     mantplusZeroCopy
   20ba0:	7373654c 65646f63 65707954 656e6f44     LesscodeTypeDone
   20bb0:	72616843 6b636142 68746f42 6d657449     CharBackBothItem
   20bc0:	656c6966 656e696c 7466654c 6c696174     filelineLefttail
   20bd0:	656b6177 706f7264 32783875 32783869     wakedropu8x2i8x2
   20be0:	34783875 34783869 38783875 38783869     u8x4i8x4u8x8i8x8
   20bf0:	6c6c6163 60206465 6974704f 3a3a6e6f     called `Option::
   20c00:	72776e75 29287061 6e6f2060 60206120     unwrap()` on a `
   20c10:	656e6f4e 61762060 0065756c 00020a54     None` value.T...
   20c20:	00000000 0000203a 00020a54 00000000     ....: ..T.......
   20c30:	00020c24 00000002 000176ff 00000000     $........v......
   20c40:	00000001 0001774f 74756220 65687420     ....Ow.. but the
   20c50:	646e6920 69207865 00002073 00020a74      index is ..t...
   20c60:	00000020 00020c48 00000012 000176ff      ...H........v..
   20c70:	0000000c 00000004 00017997 00017ced     .........y...|..
   20c80:	00017d9d 202c0a2c 2c280a28 30783029     .}..,., (.(,)0x0
   20c90:	30313030 30333032 30353034 30373036     0010203040506070
   20ca0:	31393038 31313130 31333132 31353134     8091011121314151
   20cb0:	31373136 32393138 32313230 32333232     6171819202122232
   20cc0:	32353234 32373236 33393238 33313330     4252627282930313
   20cd0:	33333332 33353334 33373336 34393338     2333435363738394
   20ce0:	34313430 34333432 34353434 34373436     0414243444546474
   20cf0:	35393438 35313530 35333532 35353534     8495051525354555
   20d00:	35373536 36393538 36313630 36333632     6575859606162636
   20d10:	36353634 36373636 37393638 37313730     4656667686970717
   20d20:	37333732 37353734 37373736 38393738     2737475767778798
   20d30:	38313830 38333832 38353834 38373836     0818283848586878
   20d40:	39393838 39313930 39333932 39353934     8899091929394959
   20d50:	39373936 00393938 000176ff 00000004     6979899..v......
   20d60:	00000004 00017dc1 00017dc7 00017dcd     .....}...}...}..
   20d70:	2f637273 6362696c 2f65726f 2f746d66     src/libcore/fmt/
   20d80:	2e646f6d 00007372 00020d70 00000016     mod.rs..p.......
   20d90:	0000043b 00000011 00020d70 00000016     ;.......p.......
   20da0:	00000445 00000024 2f637273 6362696c     E...$...src/libc
   20db0:	2f65726f 63696c73 6f6d2f65 73722e64     ore/slice/mod.rs
   20dc0:	65646e69 6f202078 6f207475 61722066     index  out of ra
   20dd0:	2065676e 20726f66 63696c73 666f2065     nge for slice of
   20de0:	6e656c20 20687467 00020dc0 00000006      length ........
   20df0:	00020dc6 00000022 00020da8 00000018     ...."...........
   20e00:	00000a72 00000005 63696c73 6e692065     r.......slice in
   20e10:	20786564 72617473 61207374 62202074     dex starts at  b
   20e20:	65207475 2073646e 00207461 00020e08     ut ends at .....
   20e30:	00000016 00020e1e 0000000d 00020da8     ................
   20e40:	00000018 00000a78 00000005 696e6966     ....x.......fini
   20e50:	64656873 73796168 6b636174 79622820     shedhaystack (by
   20e60:	20736574 6167654e 65766974 69736f50     tes NegativePosi
   20e70:	65766974 65746e69 6c617267 61706e55     tiveintegralUnpa
   20e80:	64656b63 69666e49 6574696e 756e694d     ckedInfiniteMinu
   20e90:	77615273 7265764f 776f6c66 6b636162     sRawOverflowback
   20ea0:	72657469 6f746e49 72657449 61636f6c     iterIntoIterloca
   20eb0:	6e6f6974 61636f4c 6e6f6974 72616573     tionLocationsear
   20ec0:	72656863 69736f70 6e6f6974 74697263     cherpositioncrit
   20ed0:	736f705f 656e694c 796e4173 57776152     _posLinesAnyRawW
   20ee0:	72656b61 6f6c6c41 72724563 38746e69     akerAllocErrint8
   20ef0:	745f3478 2f637273 6362696c 2f65726f     x4_tsrc/libcore/
   20f00:	2f727473 2e646f6d 2e5b7372 625d2e2e     str/mod.rs[...]b
   20f10:	20657479 65646e69 69202078 756f2073     yte index  is ou
   20f20:	666f2074 756f6220 2073646e 6020666f     t of bounds of `
   20f30:	00020f0f 0000000b 00020f1a 00000016     ................
   20f40:	00020b14 00000001 00020ef4 00000016     ................
   20f50:	00000853 00000009 69676562 3d3c206e     S.......begin <=
   20f60:	646e6520 00002820 00020f58 0000000e      end (..X.......
   20f70:	00020b84 00000004 00020b30 00000010     ........0.......
   20f80:	00020b14 00000001 00020ef4 00000016     ................
   20f90:	00000857 00000005 00020ef4 00000016     W...............
   20fa0:	00000868 0000000e 20736920 20746f6e     h....... is not 
   20fb0:	68632061 62207261 646e756f 3b797261     a char boundary;
   20fc0:	20746920 69207369 6469736e 20292065      it is inside ) 
   20fd0:	6020666f 00020f0f 0000000b 00020fa8     of `............
   20fe0:	00000026 00020e5c 00000008 00020fce     &...\...........
   20ff0:	00000006 00020b14 00000001 00020ef4     ................
   21000:	00000016 0000086a 00000005 00020ab4     ....j...........
   21010:	00000020 0000001a 00000028 05030100      .......(.......
   21020:	03060605 08080607 1c0a1109 140c190b     ................
   21030:	0d0e120d 0310040f 09131212 05170116     ................
   21040:	03190218 021c071a 161f011d 042b0320     ............ .+.
   21050:	0b2d022c 0330012e 01320231 02a902a7     ,.-...0.1.2.....
   21060:	08ab04aa 05fb02fa 03fe04fd 78ad09ff     ...............x
   21070:	a28d8b79 8b585730 1d1c908c 4b0f0edd     y...0WX........K
   21080:	2efcfb4c 5d5c3f2f 84e2b55f 92918e8d     L.../?\]_.......
   21090:	bbbab1a9 cac9c6c5 ffe5e4de 12110400     ................
   210a0:	37343129 493d3b3a 8e845d4a b4b1a992     )147:;=IJ]......
   210b0:	cac6bbba e5e4cfce 0e0d0400 31291211     ..............)1
   210c0:	453b3a34 5e4a4946 91846564 cec99d9b     4:;EFIJ^de......
   210d0:	29110dcf 64574945 a9918d65 c5bbbab4     ...)EIWde.......
   210e0:	e5e4dfc9 110d04f0 65644945 b2848180     ........EIde....
   210f0:	d5bfbebc 83f1f0d7 a6a48b85 c7c5bfbe     ................
   21100:	dbdacfce cdbd9848 49cfcec6 59574f4e     ....H......INOWY
   21110:	8e895f5e b7b6b18f c7c6c1bf 171611d7     ^_..............
   21120:	f7f65c5b 0d80fffe dfde716d 6e1f0f0e     [\......mq.....n
   21130:	5f1d1c6f afae7e7d 16fabcbb 461f1e17     o.._}~.........F
   21140:	584f4e47 7e5e5c5a d4c5b57f f1f0dcd5     GNOXZ\^~........
   21150:	8f7372f5 97967574 2e265f2f b7afa72f     .rs.tu../_&./...
   21160:	d7cfc7bf 97409adf 1f8f3098 ffcec1c0     ......@..0......
   21170:	5b5a4f4e 100f0807 efee2f27 3d376f6e     NOZ[....'/..no7=
   21180:	9045423f 53fffe91 c9c87567 d9d8d1d0     ?BE....Sgu......
   21190:	00fffee7 82225f20 448204df 06041b08     .... _"....D....
   211a0:	0eac8111 1e35ab80 03e08015 04010819     ......5.........
   211b0:	0434042f 07010307 0a110706 07120f50     /.4.........P...
   211c0:	04020855 03090a1c 03070308 03030302     U...............
   211d0:	0305040c 0e01060b 033a0515 05060711     ..........:.....
   211e0:	07570710 0d150702 03430450 0401032d     ..W.....P.C.-...
   211f0:	0c0f0611 251d043a 046d205f c880256a     ....:..%_ m.j%..
   21200:	03b08205 fd82061a 15075903 1409170b     .........Y......
   21210:	6a0c140c 1a060a06 2b075906 2c0a4605     ...j.....Y.+.F.,
   21220:	01040c04 2c0b3103 0b061a04 06ac8003     .....1.,........
   21230:	411f060a 032d044c 033c0874 073c030f     ...AL.-.t.<...<.
   21240:	052b0838 1811ff82 2d112f08 21102003     8.+....../.-. .!
   21250:	048c800f 0b199782 05948815 073b052f     ............/.;.
   21260:	09180e02 7430b080 1ad6800c ff80050c     ......0t........
   21270:	05b68005 c69b0c24 1030d20a 37038d84     ....$.....0....7
   21280:	145c8109 8008b880 043530c7 0838060a     ..\......05...8.
   21290:	060c0846 031e0b74 0959045a 1c188380     F...t...Z.Y.....
   212a0:	4809160a 068a8008 170ca4ab 04a13104     ...H.........1..
   212b0:	0726da81 8005050c 6d8111a5 2a287810     ..&........m.x(*
   212c0:	80044c06 be80048d 0f031b03 0106000d     .L..............
   212d0:	04010301 09080802 0b050a02 11011002     ................
   212e0:	13051204 15021411 19021702 1d051c04     ................
   212f0:	6a012408 bc026b03 d402d102 d609d50c     .$.j.k..........
   21300:	da02d702 e105e001 ee02e802 f904f020     ............ ...
   21310:	0c02fa06 4e3e3b27 9e9e8f4f 0907069f     ....';>NO.......
   21320:	563e3d36 04d1d0f3 37361814 35bd5756     6=>V......67VW.5
   21330:	12e0cfce 9e8e8987 110e0d04 34312912     .............)14
   21340:	4946453a 644f4e4a b65c5a65 a81c1bb7     :EFIJNOdeZ\.....
   21350:	09d9d8a9 a8919037 3e3b0a07 928f6966     ....7.....;>fi..
   21360:	efee5f6f 9b9a625a 9d552827 a4a3a1a0     o_..Zb..'(U.....
   21370:	baada8a7 0b06c4bc 3a1d150c a651453f     ...........:?EQ.
   21380:	a0cdcca7 221a1907 c53f3e25 232004c6     ......."%>?... #
   21390:	33282625 4a483a38 5553504c 5c5a5856     %&(38:HJLPSUVXZ\
   213a0:	6563605e 78736b66 a48a7f7d c0b0afaa     ^`cefksx}.......
   213b0:	a3720cd0 6ecccba4 7b225e6f 2d040305     ..r....no^"{...-
   213c0:	01046503 82802e2f 0f31031d 0924041c     .e../.....1...$.
   213d0:	052b051e 2a0e0444 2406aa80 28042404     ..+.D..*...$.$.(
   213e0:	010b3408 37819080 080a1609 03399880     .4.....7......9.
   213f0:	30090863 03210516 4001051b 054b0438     c..0..!....@8.K.
   21400:	070a042f 20400709 090c0427 053a0336     /.....@ '...6.:.
   21410:	0c04071a 37495007 07330d33 810a082e     .....PI73.3.....
   21420:	81801f26 802a0828 4e091786 430f1e04     &...(.*....N...C
   21430:	0a07190e 27094706 3f0b7509 3b062a41     .....G.'.u.?A*.;
   21440:	51060a05 10050106 8b800503 08482060     ...Q........` H.
   21450:	5ea6800a 0a0b4522 39130d06 2c360a07     ...^"E.....9..6,
   21460:	c0801004 0c53643c 45a08001 5308481b     ....<dS....E.H.S
   21470:	0781391d 031d0a46 03374947 060a080e     .9..F...GI7.....
   21480:	810a0739 c7801936 9b830d32 800b7566     9...6...2...fu..
   21490:	84bc8ac4 82d18f2f 82b9a147 042a0739     ..../...G...9.*.
   214a0:	0a266002 05280a46 5bb08213 39044b65     .`&.F.(....[eK.9
   214b0:	04401107 08f8971c 0da5f382 03311f81     ..@...........1.
   214c0:	81080411 6b04898c 09030d05 60931007     .......k.......`
   214d0:	730af680 46176e08 0c149a80 80190957     ...s.n.F....W...
   214e0:	03478187 150f4285 802b5085 1a032dd5     ..G..B...P+..-..
   214f0:	70810204 8501053a 29d78000 040a044c     ...p:......)L...
   21500:	44118302 c2803d4c 0401063c 341b0555     ...DL=..<...U..4
   21510:	2c0e8102 560c6404 5d030d0a 1d393d03     ...,.d.V...].=9.
   21520:	09042c0d 060e0207 d6839a80 0b030d0a     .,..............
   21530:	590c7405 0c140c07 0a083804 1e082806     .t.Y.....8...(..
   21540:	31037752 0ca68003 05030414 85060d03     Rw.1............
   21550:	6372736a 62696c2f 65726f63 696e752f     jsrc/libcore/uni
   21560:	65646f63 646f6d2f 0073722e 00021551     code/mod.rs.Q...
   21570:	0000001a 00000038 0000000f 00021551     ....8.......Q...
   21580:	0000001a 00000039 00000010              ....9.......

0002158c <_ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E>:
   2158c:	1b150f04 17120319 0e000011 00000016     ................
	...
   215b4:	00130600 00000000 00000000 00000000     ................
   215c4:	00000000 07020000 0c08000a 1a181c1d     ................
	...
   215e4:	01050000 00000000 00000000 00000000     ................
   215f4:	00000000 10000000 00000000 0009000b     ................
   21604:	                                         ...

00021607 <_ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E>:
	...
   21623:	00120f00 00000000 00000000 00000000     ................
   21633:	0000001f 00000000 00000000 00000000     ................
   21643:	1d664649 00000000 00000000 00000000     IFf.............
   21653:	00003e8a 00000000 00000000 4b000000     .>.............K
   21663:	00000053 00000000 00000000 42236700     S............g#B
	...
   2167f:	0000003d 00230000 00000000 00000000     =.....#.........
   2168f:	2d000075 00000000 00000000 00000000     u..-............
   2169f:	003c4e82 00000000 00000000 63000000     .N<............c
   216af:	25000000 00005a00 00000000 00368100     ...%.Z........6.
   216bf:	00000300 00000000 00000000 0000002f     ............/...
   216cf:	00000000 00001000 13000000 00000800     ................
	...
   216e7:	43000000 89007200 00000000 00000000     ...C.r..........
   216f7:	00070000 057d0000 37003f18 64400987     ......}..?.7..@d
   21707:	00210000 00000000 00000000 00000000     ..!.............
   21717:	4100000a 00000000 00000000 00000000     ...A............
   21727:	0030000c 0000005c 00717719 44354760     ..0.\....wq.`G5D
   21737:	7400002e 2c651139 507f5e51 34000000     ...t9.e,Q^.P...4
   21747:	00000031 00000053 3a000000 00000000     1...S......:....
   21757:	88001a38 696b2b5f 845d4f5d 14682a80     8..._+ki]O]..*h.
   21767:	0017003b 00000000 00000000 00000000     ;...............
   21777:	57000055 83000000 00000000 00000000     U..W............
   21787:	00000059 26000000 00161b6e 00000000     Y......&n.......
   21797:	001c4a6d 00000000 00000000 00002400     mJ...........$..
   217a7:	0052007c 0015067b 48000000 00000000     |.R.{......H....
   217b7:	2776287e 2200296c 0d610e5b 04627056     ~(v'l)."[.a.Vpb.
   217c7:	02782085 1e7a0000 00540179 00000033     . x...z.y.T.3...
   217d7:	00587386 0b6f454d 3200006a 00004c6c     .sX.MEo.j..2lL..
   217e7:	00008a89 3e8a8a8a 00000000 00000000     .......>........
	...

000217f8 <_ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E>:
	...
   21800:	00000001 00000000 0000000d 00000000     ................
   21810:	0000001c 00000000 00000040 00000000     ........@.......
   21820:	000000b6 00000000 000000bf 00000000     ................
   21830:	000003f8 00000000 000007f0 00000000     ................
   21840:	000007ff 00000000 00001000 00000000     ................
   21850:	00001e00 00000000 00003800 00000000     .........8......
   21860:	00003f00 00000000 00007f80 00000000     .?..............
   21870:	00008000 00000000 0001ffc0 00000000     ................
   21880:	0003ff80 00000000 00078000 00000000     ................
   21890:	007f0000 00000000 00802001 00000000     ......... ......
   218a0:	00a30000 00000000 037ffc00 00000000     ................
   218b0:	06000000 00000000 07ff0000 00000000     ................
   218c0:	09800000 00000000 0e000000 00000000     ................
   218d0:	0e7e0080 00000000 20002064 00000000     ..~.....d . ....
   218e0:	200ffe40 00000000 30000001 00000000     @.. .......0....
   218f0:	40000000 00000000 4000005c 00000000     ...@....\..@....
   21900:	60000000 00000000 805c8400 00000000     ...`......\.....
   21910:	c0000000 00000000 e0000000 00000000     ................
   21920:	00000000 00000001 0cf00000 00000001     ................
   21930:	00603044 0000000c 00603dc1 0000000c     D0`......=`.....
   21940:	0080201e 0000000c 00c0201e 0000000c     . ....... ......
   21950:	00fe21fe 0000000c 00000000 00000020     .!.......... ...
   21960:	00000000 00000060 00000844 00000060     ....`...D...`...
   21970:	00000000 000000f0 00000060 00000200     ........`.......
   21980:	f9ffff7f 000007db 80000000 000007f8     ................
   21990:	e0000000 00000fbc 00000000 00002120     ............ !..
   219a0:	00000003 00003b3c 00000fe7 00003c00     ....<;.......<..
   219b0:	9fc00000 00003d9f fbc00000 00003eef     .....=.......>..
   219c0:	00000000 00003fc0 00000000 0000f000     .....?..........
   219d0:	00000000 0000fc00 f8000010 0000fffe     ................
   219e0:	0000ffff 0000ffff ffffffff 0000ffff     ................
   219f0:	fffff800 00010000 00000000 0001ffc0     ................
   21a00:	ffff0000 0001ffff 00000000 00030000     ................
   21a10:	00000000 00038000 00000000 0003a340     ............@...
   21a20:	00000000 00080000 000c0000 000c0000     ................
   21a30:	00000004 000ff800 00000000 00180000     ................
   21a40:	001c0000 001c0000 c3000000 001e0001     ................
   21a50:	00000000 001f0000 00800001 001f1fc0     ................
   21a60:	00000007 001fef80 ffffffff 00201fff     .............. .
   21a70:	00023986 00230000 00000002 00403000     .9....#......0@.
   21a80:	00000000 00667e00 fffc0000 006dfcff     .....~f.......m.
   21a90:	00000000 007f0000 00000000 00bf2800     .............(..
   21aa0:	00000000 00cff000 03000000 02a00000     ................
   21ab0:	fff70000 031021fd 00000003 06780000     .....!........x.
   21ac0:	00000000 06ff8000 00000000 07c00000     ................
   21ad0:	00000000 07f20000 00000000 0e040187     ................
   21ae0:	00000006 10000000 00001008 10000000     ................
   21af0:	00000007 14000000 0000000f 17f00000     ................
   21b00:	00000000 1ff20000 feffe0df 1fffffff     ................
   21b10:	00000000 20000000 00000000 200ff800     ....... ....... 
   21b20:	00000007 33c80000 00000000 3fb00000     .......3.......?
   21b30:	00000000 3ff78000 00000004 40000000     .......?.......@
   21b40:	0080201e 4000000c 00000000 40d38000     . .....@.......@
   21b50:	00000002 50000000 00000003 58000000     .......P.......X
   21b60:	00000000 66fde000 000007fe 79f80000     .......f.......y
   21b70:	00000003 7fc00000 00000000 7ffe0000     ................
   21b80:	00000000 7fff0000 00000000 80000000     ................
   21b90:	0000007f 80000000 00000030 8003ffff     ........0.......
   21ba0:	0000f06e 87000000 00000002 90000000     n...............
   21bb0:	7f400000 9ff81fe5 00000000 a5f90000     ..@.............
   21bc0:	00000000 a7f80000 00000000 b03c8000     ..............<.
   21bd0:	00000000 b47e0000 00000000 bf7f0000     ......~.........
   21be0:	fffe0000 bfffffff 00000011 c0000000     ................
   21bf0:	00000000 c19d0000 00000002 d0000000     ................
   21c00:	00000000 f807c3a0 ffffffff f87fffff     ................
   21c10:	ffffffff fbffffff 000021be fc00000c     .........!......
   21c20:	00000000 ff000000 00000002 ff000000     ................
   21c30:	00020000 ffff0000 fff80000 fffffffb     ................
   21c40:	00000000 ffffffff ffffffff ffffffff     ................
   21c50:	00000020 00006425 6c363025 00002075      ...%d..%06lu ..

00021c60 <nrf52_hal_i2cs>:
   21c60:	00000000 20000108                       ....... 

00021c68 <nrf52_hal_spis>:
   21c68:	2000ddc0 00000000 00000000 65737341     ... ........Asse
   21c78:	40207472 25783020 00000a78 65737341     rt @ 0x%x...Asse
   21c88:	40207472 25783020 202d2078 253a7325     rt @ 0x%x - %s:%
   21c98:	00000a64 61686e55 656c646e 6e692064     d...Unhandled in
   21ca8:	72726574 20747075 646c2528 65202c29     terrupt (%ld), e
   21cb8:	70656378 6e6f6974 20707320 30257830     xception sp 0x%0
   21cc8:	0a786c38 00000000 3a307220 30257830     8lx..... r0:0x%0
   21cd8:	20786c38 3a317220 30257830 20786c38     8lx  r1:0x%08lx 
   21ce8:	3a327220 30257830 20786c38 3a337220      r2:0x%08lx  r3:
   21cf8:	30257830 0a786c38 00000000 3a347220     0x%08lx..... r4:
   21d08:	30257830 20786c38 3a357220 30257830     0x%08lx  r5:0x%0
   21d18:	20786c38 3a367220 30257830 20786c38     8lx  r6:0x%08lx 
   21d28:	3a377220 30257830 0a786c38 00000000      r7:0x%08lx.....
   21d38:	3a387220 30257830 20786c38 3a397220      r8:0x%08lx  r9:
   21d48:	30257830 20786c38 3a303172 30257830     0x%08lx r10:0x%0
   21d58:	20786c38 3a313172 30257830 0a786c38     8lx r11:0x%08lx.
   21d68:	00000000 3a323172 30257830 20786c38     ....r12:0x%08lx 
   21d78:	3a726c20 30257830 20786c38 3a637020      lr:0x%08lx  pc:
   21d88:	30257830 20786c38 3a727370 30257830     0x%08lx psr:0x%0
   21d98:	0a786c38 00000000 52534349 2578303a     8lx.....ICSR:0x%
   21da8:	786c3830 53464820 78303a52 6c383025     08lx HFSR:0x%08l
   21db8:	46432078 303a5253 38302578 000a786c     x CFSR:0x%08lx..
   21dc8:	52414642 2578303a 786c3830 464d4d20     BFAR:0x%08lx MMF
   21dd8:	303a5241 38302578 000a786c 6e69616d     AR:0x%08lx..main
   21de8:	00000000 656c6469 00000000 7379736d     ....idle....msys
   21df8:	0000315f                                _1..

00021dfc <MemFile_methods>:
   21dfc:	0001c5cd 00000000                       ........

00021e04 <stdout>:
   21e04:	20000124                                $.. 

00021e08 <nrf52k_flash_dev>:
   21e08:	00021e20 00000000 00080000 00000080      ...............
   21e18:	00000001 000000ff                       ........

00021e20 <nrf52k_flash_funcs>:
   21e20:	0001c839 0001c769 0001c6f1 0001c749     9...i.......I...
   21e30:	00000000 0001c745 00000000              ....E.......

00021e3c <nrf52_hal_timers>:
   21e3c:	2000ded0 00000000 00000000 00000000     ... ............
	...

00021e54 <hal_i2c1_cfg>:
   21e54:	00000007 00000006 00000064              ........d...

00021e60 <os_bsp_spi0m_cfg>:
   21e60:	001d0302 736e6573 6e5f726f 6669746f     ....sensor_notif
   21e70:	7476655f 00000073                       _evts...

00021e78 <COLLECTOR_NODE_HW_ID>:
   21e78:	066aff57 50547878 67242949              W.j.xxTPI)$g

00021e84 <SENSOR_NODE_HW_IDS>:
   21e84:	066dff38 3634574e 43085825 04030201     8.m.NW46%X.C....
   21e94:	08070605 020b0a09 04030201 08070605     ................
   21ea4:	030b0a09 04030201 08070605 040b0a09     ................
   21eb4:	04030201 08070605 050b0a09 77687325     ............%shw
   21ec4:	00206469 30313025 00786c6c 646f6e20     id .%010llx. nod
   21ed4:	00002065 65737325 726f736e 25237325     e ..%ssensor%s#%
   21ee4:	00000a64 6f637325 63656c6c 25726f74     d...%scollector%
   21ef4:	00000a73 74737325 61646e61 656e6f6c     s...%sstandalone
   21f04:	000a7325 2054454e 00000000 73257325     %s..NET ....%s%s
   21f14:	0a732520 00000000 00000000               %s.........

00021f20 <sensor_node_addresses>:
   21f20:	b4b5b6f1 000000b3 b4b5b6cd 000000b3     ................
   21f30:	b4b5b6a3 000000b3 b4b5b60f 000000b3     ................
   21f40:	b4b5b605 000000b3 706d6574 7574735f     ........temp_stu
   21f50:	00305f62 20504d54 61657263 25206574     b_0.TMP create %
   21f60:	00000a73                                s...

00021f64 <g_temp_stub_sensor_driver>:
   21f64:	0001d675 0001d57d 00000000 00000000     u...}...........
	...
   21f8c:	20425453 64616572 6d657420 65732070     STB read temp se
   21f9c:	726f736e 0000000a 635f636f 62635f6c     nsor....oc_cl_cb
   21fac:	00000073 725f636f 6f5f7065 00000000     s...oc_rep_o....

00021fbc <sysflash_map_dflt>:
	...
   21fc4:	00004000 00000001 00008000 00073c00     .@...........<..
   21fd4:	00000002 0007bc00 00000400 00000003     ................
   21fe4:	0007c000 00001000 00000010 00004000     .............@..
   21ff4:	00004000 00000011 0007d000 00003000     .@...........0..
   22004:	70616f63 6365725f 65766965 544f4e20     coap_receive NOT
   22014:	504d4920 454d454c 4445544e 0000000a      IMPLEMENTED....

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 106524	    108	  57144	 163776	  27fc0	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
