
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x00021264 vaddr 0x00021264 paddr 0x00021264 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0002127c memsz 0x0002127c flags rwx
    LOAD off    0x000300d8 vaddr 0x200000d8 paddr 0x0002127c align 2**16
         filesz 0x0000006c memsz 0x0000006c flags rw-
    LOAD off    0x00030148 vaddr 0x20000148 paddr 0x000212e8 align 2**16
         filesz 0x00000000 memsz 0x0000a5f0 flags rw-
    LOAD off    0x00040000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              00019244  00008020  00008020  00008020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  00021264  00021264  00030144  2**0  CONTENTS
  3 .ARM.exidx         00000018  00021264  00021264  00021264  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000000  200000d8  200000d8  00030144  2**0  CONTENTS
  6 .data              0000006c  200000d8  0002127c  000300d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20000144  20000144  00030144  2**0  CONTENTS
  8 .bss               0000a5f0  20000148  000212e8  00030148  2**3  ALLOC
  9 .stack_dummy       000001b0  2000a738  2000a738  00030148  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000003b  00000000  00000000  000302f8  2**0  CONTENTS, READONLY
 11 .comment           0000007f  00000000  00000000  00030333  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  000303b2  2**0  CONTENTS, READONLY
 13 .debug_line        0004a527  00000000  00000000  000303b6  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        000891bf  00000000  00000000  0007a8dd  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      0000ebb6  00000000  00000000  00103a9c  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     00005e08  00000000  00000000  00112658  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         0005f5d2  00000000  00000000  00118460  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00013513  00000000  00000000  00177a32  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      0001a130  00000000  00000000  0018af45  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       0000f398  00000000  00000000  001a5078  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_macinfo     00000060  00000000  00000000  001b4410  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_pubnames    00018ddd  00000000  00000000  001b4470  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_pubtypes    00035ef2  00000000  00000000  001cd24d  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
00021264 l    d  .ARM.extab	00000000 .ARM.extab
00021264 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
20000144 l    d  .bssnz	00000000 .bssnz
20000148 l    d  .bss	00000000 .bss
2000a738 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
0000820c l     F .text	0000003c errata_16
00008248 l     F .text	0000004c errata_31
00008294 l     F .text	0000003c errata_32
000082d0 l     F .text	0000004c errata_36
0000831c l     F .text	0000003c errata_37
00008358 l     F .text	0000003c errata_57
00008394 l     F .text	0000003c errata_66
000083d0 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 29v7ssp6j8vk2cgm
00000d09 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
00032171 l       .debug_str	00000000 
00057dfd l       .debug_str	00000000 
00058564 l       .debug_str	00000000 
00057831 l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
0003219e l       .debug_str	00000000 
00032190 l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
00000e0f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0005aa56 l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
000598df l       .debug_str	00000000 
00000bbf l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
0000f4a4 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0003215d l       .debug_str	00000000 
0005d517 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2ac9yj7x9inahmak
00000d77 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
0005dd4e l       .debug_str	00000000 
0005b209 l       .debug_str	00000000 
000013b3 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d1f2 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00057c37 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d2d4 l       .debug_str	00000000 
0005e02d l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010d81 l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000159b l       .debug_str	00000000 
000015a4 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000015ad l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
00001605 l       .debug_str	00000000 
000015ec l       .debug_str	00000000 
0005c359 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
0000161a l       .debug_str	00000000 
00001641 l       .debug_str	00000000 
00001649 l       .debug_str	00000000 
00001650 l       .debug_str	00000000 
00001656 l       .debug_str	00000000 
0000165d l       .debug_str	00000000 
0005ad43 l       .debug_str	00000000 
00001663 l       .debug_str	00000000 
00001672 l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
0000168a l       .debug_str	00000000 
0000168f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005aa56 l       .debug_str	00000000 
0000120a l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
00058744 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
000159c1 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
00000e6e l       .debug_str	00000000 
000159d8 l       .debug_str	00000000 
00000e7a l       .debug_str	00000000 
00000eb1 l       .debug_str	00000000 
00000ebc l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00000ec4 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ecb l       .debug_str	00000000 
00000ed2 l       .debug_str	00000000 
0005e0cb l       .debug_str	00000000 
00000edb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
00000ee5 l       .debug_str	00000000 
00001632 l       .debug_str	00000000 
00000eef l       .debug_str	00000000 
000074cc l       .debug_str	00000000 
00000f25 l       .debug_str	00000000 
00000f53 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00040335 l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b57c l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
0000103f l       .debug_str	00000000 
00001076 l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
0005dbff l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000107f l       .debug_str	00000000 
00001093 l       .debug_str	00000000 
000010c6 l       .debug_str	00000000 
000010d1 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000011c6 l       .debug_str	00000000 
00001204 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
0000123f l       .debug_str	00000000 
00001282 l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
000012da l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00001329 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
00001377 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
00005d6d l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
200001f8 l     O .bss	00000001 _ZN3app12touch_sensor10I2C_BUFFER17h8f3c7b5d2c207abfE
2000014c l     O .bss	00000052 _ZN3app12touch_sensor10TOUCH_DATA17h64b26c24ec50591aE
2000014c l     O .bss	00000000 _ZN3app12touch_sensor11TOUCH_DELAY17h41aa62dc06660831E
200001e0 l     O .bss	00000010 _ZN3app12touch_sensor11TOUCH_EVENT17h248d1b5995e7331aE
20000148 l     O .bss	00000004 _ZN3app12touch_sensor11TOUCH_RESET17hc6437d039f5b5b2dE
00008bc8 l     F .text	00000752 _ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E
0000931a l     F .text	0000019a _ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E
00008a8e l     F .text	0000013a _ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E
00008a42 l     F .text	0000004c _ZN3app12touch_sensor23touch_interrupt_handler17he79adf05b4785acfE
2000019e l     O .bss	0000003f _ZN3app12touch_sensor3BUF17h7dd26ed30d22a01eE
200001f0 l     O .bss	00000008 _ZN3app12touch_sensor8I2C_DATA17h66f4f9260b49f5dfE
0001d430 l     O .text	00000021 str.0
0001d470 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 3av1m1so5ua992q
00001b35 l       .debug_str	00000000 
00001adf l       .debug_str	00000000 
00001aea l       .debug_str	00000000 
00001af4 l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
00001afd l       .debug_str	00000000 
00005de6 l       .debug_str	00000000 
00001b0c l       .debug_str	00000000 
00001b19 l       .debug_str	00000000 
00001b1f l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0001dd48 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
0001dc37 l       .debug_str	00000000 
00001b56 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
00001b5f l       .debug_str	00000000 
0000777d l       .debug_str	00000000 
00001b62 l       .debug_str	00000000 
0004a9ad l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
000593bf l       .debug_str	00000000 
0005dcd8 l       .debug_str	00000000 
00024d3b l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
00001b87 l       .debug_str	00000000 
00002262 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00001b76 l       .debug_str	00000000 
0003b620 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0001eaee l       .debug_str	00000000 
00001b43 l       .debug_str	00000000 
00019d26 l       .debug_str	00000000 
00001b90 l       .debug_str	00000000 
00001b99 l       .debug_str	00000000 
0005d269 l       .debug_str	00000000 
0000d92f l       .debug_str	00000000 
0000d935 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005aa56 l       .debug_str	00000000 
00001b59 l       .debug_str	00000000 
00001693 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000016a1 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00001706 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
0000170f l       .debug_str	00000000 
00058603 l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
0003b621 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
000017c2 l       .debug_str	00000000 
00001820 l       .debug_str	00000000 
00001829 l       .debug_str	00000000 
00001887 l       .debug_str	00000000 
00001890 l       .debug_str	00000000 
000018f3 l       .debug_str	00000000 
00001900 l       .debug_str	00000000 
0000195f l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
0000196d l       .debug_str	00000000 
0000197c l       .debug_str	00000000 
000019d7 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
000019dd l       .debug_str	00000000 
00001a37 l       .debug_str	00000000 
00001a3c l       .debug_str	00000000 
000598c6 l       .debug_str	00000000 
00001a97 l       .debug_str	00000000 
00001ac7 l       .debug_str	00000000 
00001ad4 l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
200001f9 l     O .bss	00000800 _ZN3app5chip813SCREEN_BUFFER17h6824cb449058aaa8E
0001dc40 l     O .text	00000021 str.0
0001dc80 l     O .text	0000001c str.1
0001dce0 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 3k1rew1y0sa9p4cs
0000209d l       .debug_str	00000000 
0000338a l       .debug_str	00000000 
0000228f l       .debug_str	00000000 
000418b8 l       .debug_str	00000000 
00002287 l       .debug_str	00000000 
0000da03 l       .debug_str	00000000 
00002283 l       .debug_str	00000000 
0000227e l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00059da5 l       .debug_str	00000000 
00002253 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0000285f l       .debug_str	00000000 
00001ca7 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
0000196d l       .debug_str	00000000 
00001d33 l       .debug_str	00000000 
00001d68 l       .debug_str	00000000 
00001d82 l       .debug_str	00000000 
00001db7 l       .debug_str	00000000 
00001dd1 l       .debug_str	00000000 
00001e06 l       .debug_str	00000000 
00001e20 l       .debug_str	00000000 
00001e56 l       .debug_str	00000000 
00001e71 l       .debug_str	00000000 
00001ec5 l       .debug_str	00000000 
00001ee7 l       .debug_str	00000000 
00001f59 l       .debug_str	00000000 
00001f8f l       .debug_str	00000000 
00001faa l       .debug_str	00000000 
00001fe0 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00002244 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00002225 l       .debug_str	00000000 
00001ffb l       .debug_str	00000000 
000021eb l       .debug_str	00000000 
000021cd l       .debug_str	00000000 
00002194 l       .debug_str	00000000 
00002031 l       .debug_str	00000000 
00002178 l       .debug_str	00000000 
00002141 l       .debug_str	00000000 
0000204c l       .debug_str	00000000 
00002125 l       .debug_str	00000000 
000020ee l       .debug_str	00000000 
000020d3 l       .debug_str	00000000 
00002082 l       .debug_str	00000000 
0001ea7c l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
000022c7 l       .debug_str	00000000 
000022c3 l       .debug_str	00000000 
00058b61 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005785d l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00001ba2 l       .debug_str	00000000 
0002144a l       .debug_str	00000000 
00001ba6 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
00032129 l       .debug_str	00000000 
00001bab l       .debug_str	00000000 
0000cc02 l       .debug_str	00000000 
0000ca0e l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00001b56 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00001b5f l       .debug_str	00000000 
0000777d l       .debug_str	00000000 
00001b62 l       .debug_str	00000000 
0004a9ad l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
000593bf l       .debug_str	00000000 
0005dcd8 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000022bd l       .debug_str	00000000 
000022b7 l       .debug_str	00000000 
000022b1 l       .debug_str	00000000 
000022ab l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0005ad43 l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
0000dae8 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
000022a8 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00024d3b l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
0005aa56 l       .debug_str	00000000 
00001b59 l       .debug_str	00000000 
00001b87 l       .debug_str	00000000 
00002262 l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
00001bb1 l       .debug_str	00000000 
00001bd7 l       .debug_str	00000000 
0000f38d l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00001bed l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
00001bf5 l       .debug_str	00000000 
00001c81 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
000022a4 l       .debug_str	00000000 
000594f7 l       .debug_str	00000000 
00002cb0 l       .debug_str	00000000 
00002d22 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00002299 l       .debug_str	00000000 
0001de00 l     O .text	0000001c str.0
0001e080 l     O .text	00000021 str.1
0001e360 l     O .text	00000039 str.2
0001e3c0 l     O .text	00000021 str.3
0001e400 l     O .text	00000023 str.4
00000000 l    df *ABS*	00000000 4g2px1fyklyi5loj
00001b71 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00002325 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
000022d4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4li2bx5hst9qmla8
00001b71 l       .debug_str	00000000 
0000239a l       .debug_str	00000000 
000023d6 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
000023df l       .debug_str	00000000 
00007aa2 l       .debug_str	00000000 
0000240a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0003215d l       .debug_str	00000000 
00002468 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
0001eae9 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00002332 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c9d7 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000238c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4omwjvgyphguh48u
00002587 l       .debug_str	00000000 
00002299 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00002d22 l       .debug_str	00000000 
00002cb0 l       .debug_str	00000000 
00002518 l       .debug_str	00000000 
00002559 l       .debug_str	00000000 
000025c8 l       .debug_str	00000000 
0000262b l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
0000196d l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
0000267b l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
00002739 l       .debug_str	00000000 
00002750 l       .debug_str	00000000 
000027d0 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00002844 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
00002471 l       .debug_str	00000000 
00034330 l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00001b56 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000f38d l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
0000285f l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
00002487 l       .debug_str	00000000 
000024ca l       .debug_str	00000000 
00002287 l       .debug_str	00000000 
000418b8 l       .debug_str	00000000 
0000228f l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000338a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 52x5s6n74aarru7s
00002a3c l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
0000196d l       .debug_str	00000000 
00002739 l       .debug_str	00000000 
000029a8 l       .debug_str	00000000 
00002a85 l       .debug_str	00000000 
00002acf l       .debug_str	00000000 
00002b22 l       .debug_str	00000000 
00002bb1 l       .debug_str	00000000 
00002c14 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00002c8c l       .debug_str	00000000 
00002cfe l       .debug_str	00000000 
00002dbc l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
00002dc0 l       .debug_str	00000000 
00002844 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00002287 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
000418b8 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00001b56 l       .debug_str	00000000 
0000f38d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
0000285f l       .debug_str	00000000 
0000228f l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000338a l       .debug_str	00000000 
00002299 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00002d22 l       .debug_str	00000000 
00002cb0 l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
0000288e l       .debug_str	00000000 
00002918 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 ltoum6qebj303de
00000d1e l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
00002dca l       .debug_str	00000000 
00002e07 l       .debug_str	00000000 
00002e18 l       .debug_str	00000000 
00002e4a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 t2faay6g6bya59u
00001b71 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
00002e57 l       .debug_str	00000000 
00002ed3 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 xuw4v3fy8tiv1h2
00003087 l       .debug_str	00000000 
00002dc0 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
0000304c l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000030f0 l       .debug_str	00000000 
0000315b l       .debug_str	00000000 
00003197 l       .debug_str	00000000 
000031e4 l       .debug_str	00000000 
00003220 l       .debug_str	00000000 
0000322e l       .debug_str	00000000 
00003299 l       .debug_str	00000000 
000032b4 l       .debug_str	00000000 
00003320 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
00003377 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00001b56 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000f38d l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
0000285f l       .debug_str	00000000 
00002844 l       .debug_str	00000000 
00002f00 l       .debug_str	00000000 
0000338a l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c9d7 l       .debug_str	00000000 
0000238c l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
0000196d l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00002244 l       .debug_str	00000000 
00002f52 l       .debug_str	00000000 
00002f8b l       .debug_str	00000000 
00002739 l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
00002fb4 l       .debug_str	00000000 
00002fed l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 embedded_graphics.94s3esdv-cgu.0
00003e12 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000349f l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
00001afd l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00005de6 l       .debug_str	00000000 
000034a6 l       .debug_str	00000000 
000034ac l       .debug_str	00000000 
000034b6 l       .debug_str	00000000 
000034bf l       .debug_str	00000000 
000034c7 l       .debug_str	00000000 
000034d0 l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
000034dd l       .debug_str	00000000 
000034ed l       .debug_str	00000000 
000034fe l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
00001adf l       .debug_str	00000000 
0000350f l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
00003526 l       .debug_str	00000000 
00005e97 l       .debug_str	00000000 
0000353e l       .debug_str	00000000 
00003544 l       .debug_str	00000000 
0000354f l       .debug_str	00000000 
00003559 l       .debug_str	00000000 
00003563 l       .debug_str	00000000 
000035ab l       .debug_str	00000000 
000035b4 l       .debug_str	00000000 
000035fc l       .debug_str	00000000 
00003605 l       .debug_str	00000000 
0000364d l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
00003656 l       .debug_str	00000000 
0000367f l       .debug_str	00000000 
00003688 l       .debug_str	00000000 
000036e5 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
0000370b l       .debug_str	00000000 
00003733 l       .debug_str	00000000 
00003765 l       .debug_str	00000000 
00003796 l       .debug_str	00000000 
000037a1 l       .debug_str	00000000 
000037fe l       .debug_str	00000000 
0000385b l       .debug_str	00000000 
000038b8 l       .debug_str	00000000 
00002e4a l       .debug_str	00000000 
000038ea l       .debug_str	00000000 
0000392f l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0000393b l       .debug_str	00000000 
0005797d l       .debug_str	00000000 
00003977 l       .debug_str	00000000 
000039bb l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
00003a0d l       .debug_str	00000000 
00003a1b l       .debug_str	00000000 
00003a62 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00003ab0 l       .debug_str	00000000 
00003ab8 l       .debug_str	00000000 
00003ac5 l       .debug_str	00000000 
00003aca l       .debug_str	00000000 
00003b05 l       .debug_str	00000000 
00003b43 l       .debug_str	00000000 
00003b73 l       .debug_str	00000000 
00003b87 l       .debug_str	00000000 
00003bb7 l       .debug_str	00000000 
00003bcb l       .debug_str	00000000 
00003bfb l       .debug_str	00000000 
00003c0f l       .debug_str	00000000 
0003d63b l       .debug_str	00000000 
00003c5a l       .debug_str	00000000 
00003cb1 l       .debug_str	00000000 
00003cc0 l       .debug_str	00000000 
00003d0b l       .debug_str	00000000 
0000668d l       .debug_str	00000000 
00003d82 l       .debug_str	00000000 
00003e07 l       .debug_str	00000000 
00016531 l       .debug_str	00000000 
00003e89 l       .debug_str	00000000 
00003f0e l       .debug_str	00000000 
00003f19 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
00003fa2 l       .debug_str	00000000 
00021f68 l       .debug_str	00000000 
00004019 l       .debug_str	00000000 
00059da4 l       .debug_str	00000000 
000040ae l       .debug_str	00000000 
00004145 l       .debug_str	00000000 
000041e0 l       .debug_str	00000000 
00004275 l       .debug_str	00000000 
0000430c l       .debug_str	00000000 
000043a7 l       .debug_str	00000000 
0000446f l       .debug_str	00000000 
0000447a l       .debug_str	00000000 
00004546 l       .debug_str	00000000 
000045d6 l       .debug_str	00000000 
000045e2 l       .debug_str	00000000 
00004688 l       .debug_str	00000000 
00004694 l       .debug_str	00000000 
00004738 l       .debug_str	00000000 
000047da l       .debug_str	00000000 
0000487e l       .debug_str	00000000 
000048d2 l       .debug_str	00000000 
00004927 l       .debug_str	00000000 
0000497c l       .debug_str	00000000 
0001eed8 l       .debug_str	00000000 
000049ff l       .debug_str	00000000 
00004a83 l       .debug_str	00000000 
00004b07 l       .debug_str	00000000 
0000de2b l       .debug_str	00000000 
00004b4e l       .debug_str	00000000 
0000de31 l       .debug_str	00000000 
00004b95 l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
00004bdc l       .debug_str	00000000 
00004c5a l       .debug_str	00000000 
00004cd9 l       .debug_str	00000000 
00004d74 l       .debug_str	00000000 
00004e08 l       .debug_str	00000000 
00004e55 l       .debug_str	00000000 
00004e61 l       .debug_str	00000000 
00004ec4 l       .debug_str	00000000 
00004f0c l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
00004f18 l       .debug_str	00000000 
00004fac l       .debug_str	00000000 
00005012 l       .debug_str	00000000 
000050a3 l       .debug_str	00000000 
00005142 l       .debug_str	00000000 
000051d3 l       .debug_str	00000000 
00005272 l       .debug_str	00000000 
00005314 l       .debug_str	00000000 
000053a5 l       .debug_str	00000000 
00005453 l       .debug_str	00000000 
00005503 l       .debug_str	00000000 
000055b7 l       .debug_str	00000000 
000056aa l       .debug_str	00000000 
000056b5 l       .debug_str	00000000 
000057ac l       .debug_str	00000000 
00005858 l       .debug_str	00000000 
00005862 l       .debug_str	00000000 
000058d4 l       .debug_str	00000000 
00005949 l       .debug_str	00000000 
000059bc l       .debug_str	00000000 
00005a2d l       .debug_str	00000000 
00005aa0 l       .debug_str	00000000 
00005b17 l       .debug_str	00000000 
00005b8c l       .debug_str	00000000 
00005c01 l       .debug_str	00000000 
00005c71 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00005cfd l       .debug_str	00000000 
00005d03 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
00005d09 l       .debug_str	00000000 
00005d0c l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
00005d14 l       .debug_str	00000000 
00003a15 l       .debug_str	00000000 
00005d68 l       .debug_str	00000000 
00005d72 l       .debug_str	00000000 
00005d7c l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00005d86 l       .debug_str	00000000 
00005db7 l       .debug_str	00000000 
0005f498 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
00005dec l       .debug_str	00000000 
00005df6 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00005e00 l       .debug_str	00000000 
00005e09 l       .debug_str	00000000 
00005e38 l       .debug_str	00000000 
00005e45 l       .debug_str	00000000 
00005e48 l       .debug_str	00000000 
00005e4b l       .debug_str	00000000 
00005e4e l       .debug_str	00000000 
00005e51 l       .debug_str	00000000 
00005e54 l       .debug_str	00000000 
00005e57 l       .debug_str	00000000 
00005ea5 l       .debug_str	00000000 
00005eef l       .debug_str	00000000 
00005f03 l       .debug_str	00000000 
0000cc9c l       .debug_str	00000000 
00005f0c l       .debug_str	00000000 
00005f17 l       .debug_str	00000000 
00005f22 l       .debug_str	00000000 
00005f2d l       .debug_str	00000000 
00005f5e l       .debug_str	00000000 
00005f38 l       .debug_str	00000000 
00005f91 l       .debug_str	00000000 
00005f6c l       .debug_str	00000000 
00005fc2 l       .debug_str	00000000 
00005f9e l       .debug_str	00000000 
00005ff3 l       .debug_str	00000000 
00005fce l       .debug_str	00000000 
00006027 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
0000605c l       .debug_str	00000000 
00006036 l       .debug_str	00000000 
00006090 l       .debug_str	00000000 
0000606a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000033d7 l       .debug_str	00000000 
00003437 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00005d6d l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00005d81 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
000334dc l       .debug_str	00000000 
0000348c l       .debug_str	00000000 
00003491 l       .debug_str	00000000 
00003497 l       .debug_str	00000000 
00003702 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
000363cd l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
0000e142 l     F .text	00000044 _ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE
0000e236 l     F .text	0000006e _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E
0000e2a4 l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE
0000e2dc l     F .text	0000001a _ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E
00000000 l    df *ABS*	00000000 hash32.79y5bd3b-cgu.0
00006d2b l       .debug_str	00000000 
00006691 l       .debug_str	00000000 
000066dc l       .debug_str	00000000 
000066ec l       .debug_str	00000000 
000066fa l       .debug_str	00000000 
00006730 l       .debug_str	00000000 
0000674b l       .debug_str	00000000 
00006785 l       .debug_str	00000000 
000067a4 l       .debug_str	00000000 
000067e0 l       .debug_str	00000000 
00006806 l       .debug_str	00000000 
00006812 l       .debug_str	00000000 
00006839 l       .debug_str	00000000 
00006846 l       .debug_str	00000000 
000092b0 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00006894 l       .debug_str	00000000 
00009320 l       .debug_str	00000000 
000068e5 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00006937 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0000698c l       .debug_str	00000000 
00006a21 l       .debug_str	00000000 
00006a2d l       .debug_str	00000000 
00006a7b l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
00006a8a l       .debug_str	00000000 
00006adb l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00006af3 l       .debug_str	00000000 
00006b48 l       .debug_str	00000000 
00006b64 l       .debug_str	00000000 
00006b6c l       .debug_str	00000000 
00006bb2 l       .debug_str	00000000 
00006bba l       .debug_str	00000000 
00006c03 l       .debug_str	00000000 
00006c0e l       .debug_str	00000000 
00059da4 l       .debug_str	00000000 
00006c7d l       .debug_str	00000000 
00006cce l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00006cda l       .debug_str	00000000 
00006d3d l       .debug_str	00000000 
00006d95 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00006dab l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00006db6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
00006ddf l       .debug_str	00000000 
00006e42 l       .debug_str	00000000 
00006e6c l       .debug_str	00000000 
00006ecf l       .debug_str	00000000 
00006ed8 l       .debug_str	00000000 
00006f45 l       .debug_str	00000000 
00006f57 l       .debug_str	00000000 
00006fc8 l       .debug_str	00000000 
00006fde l       .debug_str	00000000 
0001eed8 l       .debug_str	00000000 
0000703e l       .debug_str	00000000 
00007071 l       .debug_str	00000000 
000070db l       .debug_str	00000000 
0000710e l       .debug_str	00000000 
00007113 l       .debug_str	00000000 
00007177 l       .debug_str	00000000 
0005c65d l       .debug_str	00000000 
000071d2 l       .debug_str	00000000 
0000720e l       .debug_str	00000000 
0000721c l       .debug_str	00000000 
0000724b l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
00007253 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00058b61 l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
0000725a l       .debug_str	00000000 
00007267 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00007272 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0000727d l       .debug_str	00000000 
0005a8ee l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0000d93c l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00007281 l       .debug_str	00000000 
000072bb l       .debug_str	00000000 
000072f4 l       .debug_str	00000000 
00007303 l       .debug_str	00000000 
00007346 l       .debug_str	00000000 
00059e32 l       .debug_str	00000000 
000367bd l       .debug_str	00000000 
0005b857 l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
0000738e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
00033a4f l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
000073b2 l       .debug_str	00000000 
000073ca l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
000073e7 l       .debug_str	00000000 
00007216 l       .debug_str	00000000 
00007400 l       .debug_str	00000000 
0000741c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000609e l       .debug_str	00000000 
000060f3 l       .debug_str	00000000 
0000613d l       .debug_str	00000000 
00006144 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00005f2a l       .debug_str	00000000 
00005f35 l       .debug_str	00000000 
0000ccb7 l       .debug_str	00000000 
0000ccc2 l       .debug_str	00000000 
000073c4 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000614c l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00006157 l       .debug_str	00000000 
00006180 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000618f l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
000061a9 l       .debug_str	00000000 
000072fd l       .debug_str	00000000 
000061ad l       .debug_str	00000000 
000061d6 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00006226 l       .debug_str	00000000 
0000623a l       .debug_str	00000000 
0000624d l       .debug_str	00000000 
00006299 l       .debug_str	00000000 
000062a7 l       .debug_str	00000000 
000062af l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
000062b9 l       .debug_str	00000000 
000062e2 l       .debug_str	00000000 
000062ef l       .debug_str	00000000 
000062f9 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00003a15 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000574 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
000062fd l       .debug_str	00000000 
000588db l       .debug_str	00000000 
00007416 l       .debug_str	00000000 
000073e0 l       .debug_str	00000000 
00006307 l       .debug_str	00000000 
0000635c l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00006366 l       .debug_str	00000000 
000063a4 l       .debug_str	00000000 
000063bc l       .debug_str	00000000 
000063fa l       .debug_str	00000000 
00006415 l       .debug_str	00000000 
00002dbd l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0000647a l       .debug_str	00000000 
000064aa l       .debug_str	00000000 
000064d1 l       .debug_str	00000000 
000064f7 l       .debug_str	00000000 
00006503 l       .debug_str	00000000 
00006548 l       .debug_str	00000000 
00006554 l       .debug_str	00000000 
0000659a l       .debug_str	00000000 
000065a7 l       .debug_str	00000000 
000065ed l       .debug_str	00000000 
000065fa l       .debug_str	00000000 
00006638 l       .debug_str	00000000 
0000663e l       .debug_str	00000000 
00006685 l       .debug_str	00000000 
0000e48c l     F .text	00000034 _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE
0000e4f6 l     F .text	00000018 _ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E
0000e520 l     F .text	0000003e _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE
0000e55e l     F .text	00000040 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE
0000e62e l     F .text	0000011c _ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE
00000000 l    df *ABS*	00000000 log.9af4yuww-cgu.0
00009697 l       .debug_str	00000000 
0000776a l       .debug_str	00000000 
00007772 l       .debug_str	00000000 
00007779 l       .debug_str	00000000 
00001ba2 l       .debug_str	00000000 
0000cc02 l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00007780 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
00007784 l       .debug_str	00000000 
00006bb2 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
000334b6 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00007813 l       .debug_str	00000000 
0001679c l       .debug_str	00000000 
00007824 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0004455b l       .debug_str	00000000 
0005de01 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000783b l       .debug_str	00000000 
00007864 l       .debug_str	00000000 
00007870 l       .debug_str	00000000 
000078a2 l       .debug_str	00000000 
0000614c l       .debug_str	00000000 
000363cd l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
0000349f l       .debug_str	00000000 
000078b4 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
0000618f l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
000061a9 l       .debug_str	00000000 
000072fd l       .debug_str	00000000 
00007902 l       .debug_str	00000000 
000061d6 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
0000792b l       .debug_str	00000000 
00007955 l       .debug_str	00000000 
0000797e l       .debug_str	00000000 
000079ca l       .debug_str	00000000 
000062a7 l       .debug_str	00000000 
000079ee l       .debug_str	00000000 
000062af l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007a3d l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00007a46 l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
00002471 l       .debug_str	00000000 
00034330 l       .debug_str	00000000 
000596cc l       .debug_str	00000000 
0004c71f l       .debug_str	00000000 
0005a431 l       .debug_str	00000000 
0005bd4a l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0000c813 l       .debug_str	00000000 
000418b8 l       .debug_str	00000000 
00036fd7 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0000cb6c l       .debug_str	00000000 
0000cacb l       .debug_str	00000000 
00007a5b l       .debug_str	00000000 
00007a65 l       .debug_str	00000000 
0000c9ab l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0000c783 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
0000a47e l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
0000cba5 l       .debug_str	00000000 
0005a8ee l       .debug_str	00000000 
0000cb84 l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0000c7d4 l       .debug_str	00000000 
00007a6e l       .debug_str	00000000 
00007a74 l       .debug_str	00000000 
00007a9d l       .debug_str	00000000 
00007aab l       .debug_str	00000000 
00007ab8 l       .debug_str	00000000 
00007acb l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00007ae4 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
00007af9 l       .debug_str	00000000 
00007b75 l       .debug_str	00000000 
00007b0c l       .debug_str	00000000 
00007b4e l       .debug_str	00000000 
00007b63 l       .debug_str	00000000 
0005d37d l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
00048c0a l       .debug_str	00000000 
00007b80 l       .debug_str	00000000 
00007b8a l       .debug_str	00000000 
00007bbc l       .debug_str	00000000 
00007bd0 l       .debug_str	00000000 
00007be5 l       .debug_str	00000000 
0000bd7e l       .debug_str	00000000 
0000bf87 l       .debug_str	00000000 
00007bec l       .debug_str	00000000 
00007bf7 l       .debug_str	00000000 
00007c7b l       .debug_str	00000000 
00007ca9 l       .debug_str	00000000 
00007d2f l       .debug_str	00000000 
000407b9 l       .debug_str	00000000 
00007d57 l       .debug_str	00000000 
00007d68 l       .debug_str	00000000 
00007df2 l       .debug_str	00000000 
00007e10 l       .debug_str	00000000 
00007e9e l       .debug_str	00000000 
00007ec5 l       .debug_str	00000000 
00007f54 l       .debug_str	00000000 
00007f9c l       .debug_str	00000000 
00007fcb l       .debug_str	00000000 
00008013 l       .debug_str	00000000 
00008032 l       .debug_str	00000000 
0000807a l       .debug_str	00000000 
0000808a l       .debug_str	00000000 
000080d2 l       .debug_str	00000000 
000080e3 l       .debug_str	00000000 
0000812b l       .debug_str	00000000 
00008133 l       .debug_str	00000000 
0000817b l       .debug_str	00000000 
00008185 l       .debug_str	00000000 
000081cd l       .debug_str	00000000 
000081e7 l       .debug_str	00000000 
0000822f l       .debug_str	00000000 
00008248 l       .debug_str	00000000 
00008290 l       .debug_str	00000000 
000082a3 l       .debug_str	00000000 
000082eb l       .debug_str	00000000 
000082f4 l       .debug_str	00000000 
000035fc l       .debug_str	00000000 
0000833c l       .debug_str	00000000 
00008386 l       .debug_str	00000000 
000083d1 l       .debug_str	00000000 
0000840f l       .debug_str	00000000 
00008440 l       .debug_str	00000000 
000063a4 l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
0000847e l       .debug_str	00000000 
000084a7 l       .debug_str	00000000 
000084b2 l       .debug_str	00000000 
000084d7 l       .debug_str	00000000 
00008536 l       .debug_str	00000000 
000319ea l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
0000859d l       .debug_str	00000000 
000085c7 l       .debug_str	00000000 
000085ef l       .debug_str	00000000 
00008627 l       .debug_str	00000000 
00008658 l       .debug_str	00000000 
00008662 l       .debug_str	00000000 
000086bf l       .debug_str	00000000 
00002e4a l       .debug_str	00000000 
000086f1 l       .debug_str	00000000 
00008717 l       .debug_str	00000000 
00008739 l       .debug_str	00000000 
0000875f l       .debug_str	00000000 
00008781 l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
000087cf l       .debug_str	00000000 
00008817 l       .debug_str	00000000 
00008824 l       .debug_str	00000000 
0000882d l       .debug_str	00000000 
000088b7 l       .debug_str	00000000 
00001bed l       .debug_str	00000000 
000088d4 l       .debug_str	00000000 
00008960 l       .debug_str	00000000 
0000897d l       .debug_str	00000000 
0000899d l       .debug_str	00000000 
00003ac5 l       .debug_str	00000000 
000089a4 l       .debug_str	00000000 
000089df l       .debug_str	00000000 
00008a11 l       .debug_str	00000000 
00008a22 l       .debug_str	00000000 
00008a5d l       .debug_str	00000000 
00008aa3 l       .debug_str	00000000 
00003bfb l       .debug_str	00000000 
00008ad3 l       .debug_str	00000000 
00008b03 l       .debug_str	00000000 
00008b21 l       .debug_str	00000000 
00008b51 l       .debug_str	00000000 
00008b64 l       .debug_str	00000000 
00008b94 l       .debug_str	00000000 
00008ba9 l       .debug_str	00000000 
00008bd9 l       .debug_str	00000000 
00008bf5 l       .debug_str	00000000 
00008c25 l       .debug_str	00000000 
00008c43 l       .debug_str	00000000 
00008c73 l       .debug_str	00000000 
00008c8e l       .debug_str	00000000 
00008cbe l       .debug_str	00000000 
00008ce2 l       .debug_str	00000000 
00008d12 l       .debug_str	00000000 
00008d4c l       .debug_str	00000000 
00008d7c l       .debug_str	00000000 
00008da1 l       .debug_str	00000000 
00008dd1 l       .debug_str	00000000 
00008dfb l       .debug_str	00000000 
00008e31 l       .debug_str	00000000 
00008e62 l       .debug_str	00000000 
00008e9c l       .debug_str	00000000 
00008ed1 l       .debug_str	00000000 
00008f0d l       .debug_str	00000000 
00008f33 l       .debug_str	00000000 
00008f55 l       .debug_str	00000000 
00008f7c l       .debug_str	00000000 
00008f9f l       .debug_str	00000000 
000092b0 l       .debug_str	00000000 
00008fed l       .debug_str	00000000 
00009320 l       .debug_str	00000000 
0000903e l       .debug_str	00000000 
0000908f l       .debug_str	00000000 
0000909c l       .debug_str	00000000 
000090ee l       .debug_str	00000000 
000090fc l       .debug_str	00000000 
00009147 l       .debug_str	00000000 
00009159 l       .debug_str	00000000 
000091a4 l       .debug_str	00000000 
000091b8 l       .debug_str	00000000 
000091fb l       .debug_str	00000000 
00009208 l       .debug_str	00000000 
00006c03 l       .debug_str	00000000 
0000924b l       .debug_str	00000000 
000092a7 l       .debug_str	00000000 
000092b8 l       .debug_str	00000000 
00009317 l       .debug_str	00000000 
0000932b l       .debug_str	00000000 
0000937d l       .debug_str	00000000 
000093cf l       .debug_str	00000000 
000093d9 l       .debug_str	00000000 
0000942e l       .debug_str	00000000 
00009483 l       .debug_str	00000000 
000094d9 l       .debug_str	00000000 
0000952f l       .debug_str	00000000 
0000953b l       .debug_str	00000000 
00009577 l       .debug_str	00000000 
00003a15 l       .debug_str	00000000 
000095b5 l       .debug_str	00000000 
000095f0 l       .debug_str	00000000 
00007267 l       .debug_str	00000000 
000095fb l       .debug_str	00000000 
00009642 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00009658 l       .debug_str	00000000 
000096e9 l       .debug_str	00000000 
000096ff l       .debug_str	00000000 
00009744 l       .debug_str	00000000 
0000975e l       .debug_str	00000000 
000097c1 l       .debug_str	00000000 
000097e1 l       .debug_str	00000000 
00009820 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00009881 l       .debug_str	00000000 
000098c0 l       .debug_str	00000000 
0000c9a6 l       .debug_str	00000000 
000098e7 l       .debug_str	00000000 
00009927 l       .debug_str	00000000 
0000995a l       .debug_str	00000000 
00009971 l       .debug_str	00000000 
000099b7 l       .debug_str	00000000 
000099d3 l       .debug_str	00000000 
00009a37 l       .debug_str	00000000 
00009a59 l       .debug_str	00000000 
00009a9b l       .debug_str	00000000 
00009abc l       .debug_str	00000000 
00009afe l       .debug_str	00000000 
0005af8a l       .debug_str	00000000 
00009b2e l       .debug_str	00000000 
00009b72 l       .debug_str	00000000 
00009bc7 l       .debug_str	00000000 
00009c0b l       .debug_str	00000000 
00009c61 l       .debug_str	00000000 
00009ca5 l       .debug_str	00000000 
00009d1d l       .debug_str	00000000 
00009d61 l       .debug_str	00000000 
00009da1 l       .debug_str	00000000 
00009dbc l       .debug_str	00000000 
00009dfd l       .debug_str	00000000 
00009e53 l       .debug_str	00000000 
00009e97 l       .debug_str	00000000 
00009ec4 l       .debug_str	00000000 
00009f09 l       .debug_str	00000000 
00009f51 l       .debug_str	00000000 
00009f62 l       .debug_str	00000000 
00009faa l       .debug_str	00000000 
00009fbb l       .debug_str	00000000 
00031ad0 l       .debug_str	00000000 
00009ff6 l       .debug_str	00000000 
0000a032 l       .debug_str	00000000 
0000a038 l       .debug_str	00000000 
0000a06e l       .debug_str	00000000 
0000a081 l       .debug_str	00000000 
0000a0b8 l       .debug_str	00000000 
0000a0cc l       .debug_str	00000000 
0000a10e l       .debug_str	00000000 
0000a12d l       .debug_str	00000000 
0000a172 l       .debug_str	00000000 
0000a18d l       .debug_str	00000000 
0000a1f2 l       .debug_str	00000000 
0000a259 l       .debug_str	00000000 
0000a264 l       .debug_str	00000000 
0000a2aa l       .debug_str	00000000 
0000a2f0 l       .debug_str	00000000 
0000a2fa l       .debug_str	00000000 
0000a341 l       .debug_str	00000000 
0000a34c l       .debug_str	00000000 
00014f55 l       .debug_str	00000000 
0000a393 l       .debug_str	00000000 
0000a3dc l       .debug_str	00000000 
0000a425 l       .debug_str	00000000 
0000a45e l       .debug_str	00000000 
0000a479 l       .debug_str	00000000 
0000a488 l       .debug_str	00000000 
0000a4c1 l       .debug_str	00000000 
0000a4e6 l       .debug_str	00000000 
0000a51f l       .debug_str	00000000 
0000a558 l       .debug_str	00000000 
0000a57e l       .debug_str	00000000 
0000a5b7 l       .debug_str	00000000 
0000a5f5 l       .debug_str	00000000 
0000a62f l       .debug_str	00000000 
0000a63b l       .debug_str	00000000 
0000a677 l       .debug_str	00000000 
0000a68a l       .debug_str	00000000 
0000a6c6 l       .debug_str	00000000 
0000a6df l       .debug_str	00000000 
0000a71c l       .debug_str	00000000 
0000a72d l       .debug_str	00000000 
00006cce l       .debug_str	00000000 
0000a77e l       .debug_str	00000000 
0000a7cf l       .debug_str	00000000 
0000a7d8 l       .debug_str	00000000 
0000a833 l       .debug_str	00000000 
0000a896 l       .debug_str	00000000 
0000a8b2 l       .debug_str	00000000 
0000a912 l       .debug_str	00000000 
0000a972 l       .debug_str	00000000 
0000a9d6 l       .debug_str	00000000 
0000a9f1 l       .debug_str	00000000 
0000aa55 l       .debug_str	00000000 
0000aa60 l       .debug_str	00000000 
0000aaca l       .debug_str	00000000 
0000aad9 l       .debug_str	00000000 
0000ab48 l       .debug_str	00000000 
0000ab60 l       .debug_str	00000000 
0000abd0 l       .debug_str	00000000 
0000abe9 l       .debug_str	00000000 
0000ac54 l       .debug_str	00000000 
0000ac69 l       .debug_str	00000000 
0000acd9 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
0000ad5e l       .debug_str	00000000 
0000ad70 l       .debug_str	00000000 
0000ade1 l       .debug_str	00000000 
0000adf4 l       .debug_str	00000000 
0000ae65 l       .debug_str	00000000 
0000ae7b l       .debug_str	00000000 
0000ae8d l       .debug_str	00000000 
0000aef9 l       .debug_str	00000000 
0000af0b l       .debug_str	00000000 
0000af77 l       .debug_str	00000000 
0000af86 l       .debug_str	00000000 
0000afee l       .debug_str	00000000 
0000aff8 l       .debug_str	00000000 
0000b06c l       .debug_str	00000000 
0000238c l       .debug_str	00000000 
0000b077 l       .debug_str	00000000 
0000b0ef l       .debug_str	00000000 
0000b108 l       .debug_str	00000000 
0000b180 l       .debug_str	00000000 
0000b216 l       .debug_str	00000000 
0000b232 l       .debug_str	00000000 
0000b2c8 l       .debug_str	00000000 
0000b35e l       .debug_str	00000000 
0000b3f4 l       .debug_str	00000000 
00006a21 l       .debug_str	00000000 
0000b469 l       .debug_str	00000000 
0000b4dd l       .debug_str	00000000 
0000b556 l       .debug_str	00000000 
0000b5d5 l       .debug_str	00000000 
0000b5e6 l       .debug_str	00000000 
0000b666 l       .debug_str	00000000 
0000b6c8 l       .debug_str	00000000 
0000cc6f l       .debug_str	00000000 
0000b719 l       .debug_str	00000000 
0000b73b l       .debug_str	00000000 
0000b768 l       .debug_str	00000000 
0000b797 l       .debug_str	00000000 
0000b7b9 l       .debug_str	00000000 
0000b7e0 l       .debug_str	00000000 
0000b809 l       .debug_str	00000000 
0000b83b l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
0000b88b l       .debug_str	00000000 
0000b8d1 l       .debug_str	00000000 
0000b8e4 l       .debug_str	00000000 
0000b938 l       .debug_str	00000000 
0000b9aa l       .debug_str	00000000 
0000ba1c l       .debug_str	00000000 
0000ba8e l       .debug_str	00000000 
0000badd l       .debug_str	00000000 
0000bb0b l       .debug_str	00000000 
0000bb16 l       .debug_str	00000000 
0000bb70 l       .debug_str	00000000 
0000bbe8 l       .debug_str	00000000 
0000bc60 l       .debug_str	00000000 
0000bcb5 l       .debug_str	00000000 
0000bcea l       .debug_str	00000000 
00005efb l       .debug_str	00000000 
0000bd15 l       .debug_str	00000000 
0003d63b l       .debug_str	00000000 
0000bd44 l       .debug_str	00000000 
0000bd74 l       .debug_str	00000000 
0000bd8c l       .debug_str	00000000 
0000bdbd l       .debug_str	00000000 
0000bdef l       .debug_str	00000000 
0000be2e l       .debug_str	00000000 
0000be41 l       .debug_str	00000000 
0000be79 l       .debug_str	00000000 
0000be85 l       .debug_str	00000000 
0000beb5 l       .debug_str	00000000 
0000bee6 l       .debug_str	00000000 
0000beec l       .debug_str	00000000 
0000bf19 l       .debug_str	00000000 
0000bf4a l       .debug_str	00000000 
0000bf7d l       .debug_str	00000000 
0000bf97 l       .debug_str	00000000 
0000bfcb l       .debug_str	00000000 
0000bffe l       .debug_str	00000000 
00057915 l       .debug_str	00000000 
0000c04b l       .debug_str	00000000 
0000c094 l       .debug_str	00000000 
000578f8 l       .debug_str	00000000 
0000c0df l       .debug_str	00000000 
0000c107 l       .debug_str	00000000 
0000c14d l       .debug_str	00000000 
0000c153 l       .debug_str	00000000 
0000c181 l       .debug_str	00000000 
0000c19d l       .debug_str	00000000 
0000c1ca l       .debug_str	00000000 
0000c1da l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
0000c28b l       .debug_str	00000000 
0000c2ae l       .debug_str	00000000 
0000c2dd l       .debug_str	00000000 
0000c2ef l       .debug_str	00000000 
0000c322 l       .debug_str	00000000 
0000c338 l       .debug_str	00000000 
0000c385 l       .debug_str	00000000 
0000c3d8 l       .debug_str	00000000 
0000c40b l       .debug_str	00000000 
0000c41b l       .debug_str	00000000 
0000c471 l       .debug_str	00000000 
0000c4cb l       .debug_str	00000000 
0000c519 l       .debug_str	00000000 
0000c56b l       .debug_str	00000000 
0000c5c0 l       .debug_str	00000000 
0000c610 l       .debug_str	00000000 
0000c664 l       .debug_str	00000000 
0000c6bb l       .debug_str	00000000 
0000c711 l       .debug_str	00000000 
0000c768 l       .debug_str	00000000 
0000c7b4 l       .debug_str	00000000 
0000c7fc l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0000c831 l       .debug_str	00000000 
0000c85d l       .debug_str	00000000 
0000c879 l       .debug_str	00000000 
0000c886 l       .debug_str	00000000 
0000c894 l       .debug_str	00000000 
0000c899 l       .debug_str	00000000 
0000c8a0 l       .debug_str	00000000 
0000c8b7 l       .debug_str	00000000 
0000c8cd l       .debug_str	00000000 
00005cfd l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0000c8dd l       .debug_str	00000000 
00058b61 l       .debug_str	00000000 
0000c900 l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
00005d09 l       .debug_str	00000000 
0000c921 l       .debug_str	00000000 
00005d0c l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0000c928 l       .debug_str	00000000 
0000c97b l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
0000727d l       .debug_str	00000000 
0000c9a1 l       .debug_str	00000000 
00005d7c l       .debug_str	00000000 
0000c9b5 l       .debug_str	00000000 
0000c9c9 l       .debug_str	00000000 
0000c9d2 l       .debug_str	00000000 
0000c9dd l       .debug_str	00000000 
0000c9ef l       .debug_str	00000000 
0000ca03 l       .debug_str	00000000 
0000ca14 l       .debug_str	00000000 
0000ca2e l       .debug_str	00000000 
0000ca5e l       .debug_str	00000000 
0000ca79 l       .debug_str	00000000 
0000d93c l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00007281 l       .debug_str	00000000 
000072bb l       .debug_str	00000000 
000072f4 l       .debug_str	00000000 
00007303 l       .debug_str	00000000 
00007346 l       .debug_str	00000000 
00059e32 l       .debug_str	00000000 
000367bd l       .debug_str	00000000 
0005b857 l       .debug_str	00000000 
0000ca99 l       .debug_str	00000000 
0000cab8 l       .debug_str	00000000 
0005dd87 l       .debug_str	00000000 
0000cadb l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0000cae1 l       .debug_str	00000000 
0000cb02 l       .debug_str	00000000 
00015969 l       .debug_str	00000000 
0000cb0a l       .debug_str	00000000 
00059739 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
0000725a l       .debug_str	00000000 
0005a1a8 l       .debug_str	00000000 
00005eef l       .debug_str	00000000 
00005f03 l       .debug_str	00000000 
0000cc9c l       .debug_str	00000000 
00005f0c l       .debug_str	00000000 
00005f17 l       .debug_str	00000000 
0000cb12 l       .debug_str	00000000 
0000cb1b l       .debug_str	00000000 
0000cb3a l       .debug_str	00000000 
0000cb44 l       .debug_str	00000000 
0000cb4f l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cb78 l       .debug_str	00000000 
0000cb8a l       .debug_str	00000000 
00003ab6 l       .debug_str	00000000 
00002244 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0005f498 l       .debug_str	00000000 
0005a053 l       .debug_str	00000000 
00035157 l       .debug_str	00000000 
0000cbfc l       .debug_str	00000000 
0000774b l       .debug_str	00000000 
0000cc0e l       .debug_str	00000000 
0005dd4e l       .debug_str	00000000 
0000cc22 l       .debug_str	00000000 
0000cc38 l       .debug_str	00000000 
0000cc48 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000cc54 l       .debug_str	00000000 
0000cc69 l       .debug_str	00000000 
0000cc80 l       .debug_str	00000000 
0000cc7f l       .debug_str	00000000 
0000cc98 l       .debug_str	00000000 
0000cca3 l       .debug_str	00000000 
00005f22 l       .debug_str	00000000 
00005f2d l       .debug_str	00000000 
0000ccaf l       .debug_str	00000000 
0000ccba l       .debug_str	00000000 
0000ccc5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000074f9 l       .debug_str	00000000 
0000754b l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0005785d l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00007592 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00007599 l       .debug_str	00000000 
0000898e l       .debug_str	00000000 
0000ca19 l       .debug_str	00000000 
00005d81 l       .debug_str	00000000 
000075a2 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0000c14e l       .debug_str	00000000 
000075a9 l       .debug_str	00000000 
000075cc l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000075d2 l       .debug_str	00000000 
000075d7 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
000075de l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000caa6 l       .debug_str	00000000 
0000caf6 l       .debug_str	00000000 
000075e3 l       .debug_str	00000000 
00007605 l       .debug_str	00000000 
0000761a l       .debug_str	00000000 
0000764c l       .debug_str	00000000 
0000765c l       .debug_str	00000000 
00007689 l       .debug_str	00000000 
0000769a l       .debug_str	00000000 
000076c8 l       .debug_str	00000000 
000076da l       .debug_str	00000000 
0000c9bf l       .debug_str	00000000 
0000cc4d l       .debug_str	00000000 
00007709 l       .debug_str	00000000 
0000770d l       .debug_str	00000000 
0000c9d7 l       .debug_str	00000000 
0000d384 l       .debug_str	00000000 
0002144a l       .debug_str	00000000 
00001ba6 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
00032129 l       .debug_str	00000000 
00001bab l       .debug_str	00000000 
0000ca0e l       .debug_str	00000000 
00007734 l       .debug_str	00000000 
0000c9fa l       .debug_str	00000000 
0000c9f4 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
0000ca33 l       .debug_str	00000000 
0000ca8d l       .debug_str	00000000 
0000ca7e l       .debug_str	00000000 
0000773b l       .debug_str	00000000 
00007744 l       .debug_str	00000000 
00058564 l       .debug_str	00000000 
00057831 l       .debug_str	00000000 
0000c9e8 l       .debug_str	00000000 
0000c9e2 l       .debug_str	00000000 
0000ca08 l       .debug_str	00000000 
0000c9ce l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
000334dc l       .debug_str	00000000 
0000348c l       .debug_str	00000000 
00003491 l       .debug_str	00000000 
00003497 l       .debug_str	00000000 
00003702 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
000317dc l       .debug_str	00000000 
0005ca30 l       .debug_str	00000000 
00007750 l       .debug_str	00000000 
0000775a l       .debug_str	00000000 
00007762 l       .debug_str	00000000 
0000ecd2 l     F .text	0000002a _ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E
0000eca8 l     F .text	0000002a _ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE
0000ebce l     F .text	0000009c _ZN3log13RecordBuilder3new17haca8312579858419E
0000ec6a l     F .text	00000022 _ZN3log13RecordBuilder4args17h0d0d49873389eda9E
0000ecfc l     F .text	00000010 _ZN3log13RecordBuilder4line17h44de9f431bb34307E
0000ed0c l     F .text	00000010 _ZN3log13RecordBuilder5build17h83529556a009112eE
0000ec8c l     F .text	0000000c _ZN3log13RecordBuilder5level17h0f95d7860f854eb5E
0000ec98 l     F .text	00000010 _ZN3log13RecordBuilder6target17hd1b0e0684e399993E
0000eec0 l     F .text	00000012 _ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E
0000ed26 l     F .text	00000028 _ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E
0000ed4e l     F .text	00000010 _ZN3log15MetadataBuilder5build17h2478972692162fc0E
200009fc l     O .bss	00000004 _ZN3log5STATE17hc9404a0f5c97cef6E
200000e8 l     O .data	00000008 _ZN3log6LOGGER17hc33d4d9c061fc628E
0000ebc4 l     F .text	0000000a _ZN3log6Record7builder17hde62ab0132265febE
0001eed0 l     O .text	00000000 _ZN3log6logger3NOP17h5a3de47970f20990E
0000ed1c l     F .text	0000000a _ZN3log8Metadata7builder17ha56bd59835d60a3cE
0000ebba l     F .text	0000000a _ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E
0000e954 l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E
0000e98c l     F .text	00000016 _ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE
0000e9a2 l     F .text	00000008 _ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE
0000e9b2 l     F .text	00000028 _ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E
0000ea58 l     F .text	0000000a _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E
0000eee6 l     F .text	000000aa _ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E
0000ef90 l     F .text	0000003a _ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E
0000eed2 l     F .text	00000014 _ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE
0000eb1e l     F .text	00000012 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E
00000000 l    df *ABS*	00000000 16zjnp1vbo7kc1gp
00000c82 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
0000ce21 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000f264 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005dc16 l       .debug_str	00000000 
0000cce7 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0005ebea l       .debug_str	00000000 
0000ccf4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
000211e4 l       .debug_str	00000000 
0000ccfc l       .debug_str	00000000 
0000cfa2 l       .debug_str	00000000 
0000cd04 l       .debug_str	00000000 
0000cd89 l       .debug_str	00000000 
0000cd9f l       .debug_str	00000000 
0005aa5f l       .debug_str	00000000 
0000cdc6 l       .debug_str	00000000 
0003d63b l       .debug_str	00000000 
0000cdee l       .debug_str	00000000 
0000ce1c l       .debug_str	00000000 
0000ce26 l       .debug_str	00000000 
0000ce51 l       .debug_str	00000000 
0000ce58 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0000ce80 l       .debug_str	00000000 
0005efab l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0000cead l       .debug_str	00000000 
0000ced9 l       .debug_str	00000000 
0000cee1 l       .debug_str	00000000 
0000cf11 l       .debug_str	00000000 
0000cf1c l       .debug_str	00000000 
0000cf49 l       .debug_str	00000000 
0000cf52 l       .debug_str	00000000 
0000cf88 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000cf99 l       .debug_str	00000000 
0000ce20 l       .debug_str	00000000 
0005797e l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000cfb7 l       .debug_str	00000000 
0000cfa8 l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
0000cfa7 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2d0u1dup22f6p5uq
00000d12 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000cfc3 l       .debug_str	00000000 
00002e4a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2q7rzzztqsy7quqz
0000e6eb l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0000ebdc l       .debug_str	00000000 
0000ec1c l       .debug_str	00000000 
0000ec6a l       .debug_str	00000000 
0000ecaa l       .debug_str	00000000 
0000ecd1 l       .debug_str	00000000 
0000ed11 l       .debug_str	00000000 
0000ed1f l       .debug_str	00000000 
0000ed8e l       .debug_str	00000000 
0000edb9 l       .debug_str	00000000 
0000ade1 l       .debug_str	00000000 
0000ee29 l       .debug_str	00000000 
0000ee99 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000eec5 l       .debug_str	00000000 
0000eee3 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00003ab6 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
0000eed4 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
0000eb3a l       .debug_str	00000000 
0000cff5 l       .debug_str	00000000 
0000d343 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00040335 l       .debug_str	00000000 
0000cffe l       .debug_str	00000000 
0000d00a l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
0000d012 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000d06c l       .debug_str	00000000 
0000d0ce l       .debug_str	00000000 
0000d0d9 l       .debug_str	00000000 
0000d120 l       .debug_str	00000000 
0000d16f l       .debug_str	00000000 
0000d179 l       .debug_str	00000000 
0000d1b6 l       .debug_str	00000000 
0000d1fb l       .debug_str	00000000 
0000d204 l       .debug_str	00000000 
0000d214 l       .debug_str	00000000 
0000d21c l       .debug_str	00000000 
0000d271 l       .debug_str	00000000 
0000d2ce l       .debug_str	00000000 
0000d2da l       .debug_str	00000000 
0000d2e3 l       .debug_str	00000000 
0000d2ef l       .debug_str	00000000 
0000d2fb l       .debug_str	00000000 
0000d304 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0000d30c l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000d314 l       .debug_str	00000000 
0000d342 l       .debug_str	00000000 
0000d329 l       .debug_str	00000000 
0000d349 l       .debug_str	00000000 
0000d350 l       .debug_str	00000000 
0000d358 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d1f2 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00057c37 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d2d4 l       .debug_str	00000000 
0005e02d l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010d81 l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000d362 l       .debug_str	00000000 
0004d2da l       .debug_str	00000000 
0000d379 l       .debug_str	00000000 
0000d381 l       .debug_str	00000000 
0000d38a l       .debug_str	00000000 
0000e78e l       .debug_str	00000000 
0000d393 l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
0005dce0 l       .debug_str	00000000 
0000d39b l       .debug_str	00000000 
0000d3a7 l       .debug_str	00000000 
0000d3b2 l       .debug_str	00000000 
0000d3ba l       .debug_str	00000000 
0001558a l       .debug_str	00000000 
00015d8c l       .debug_str	00000000 
0000d3c2 l       .debug_str	00000000 
0000d4be l       .debug_str	00000000 
0000d5c2 l       .debug_str	00000000 
0000d5d0 l       .debug_str	00000000 
0000d5db l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000d608 l       .debug_str	00000000 
0000d5e5 l       .debug_str	00000000 
0000d613 l       .debug_str	00000000 
0000d68e l       .debug_str	00000000 
0000d711 l       .debug_str	00000000 
0000d71f l       .debug_str	00000000 
0000d77e l       .debug_str	00000000 
0000d7e5 l       .debug_str	00000000 
0000d7fb l       .debug_str	00000000 
0000d80b l       .debug_str	00000000 
0005c516 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000d81a l       .debug_str	00000000 
00018800 l       .debug_str	00000000 
0000d820 l       .debug_str	00000000 
0000d826 l       .debug_str	00000000 
0000d82c l       .debug_str	00000000 
0000d838 l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d840 l       .debug_str	00000000 
0000d848 l       .debug_str	00000000 
0000d84e l       .debug_str	00000000 
0000d894 l       .debug_str	00000000 
0000d871 l       .debug_str	00000000 
0000d8a4 l       .debug_str	00000000 
0000d8e4 l       .debug_str	00000000 
0005c0a3 l       .debug_str	00000000 
0000d92c l       .debug_str	00000000 
0000d932 l       .debug_str	00000000 
0000d938 l       .debug_str	00000000 
0000d961 l       .debug_str	00000000 
0000d93e l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000d9b5 l       .debug_str	00000000 
0005bf8c l       .debug_str	00000000 
0000d9ff l       .debug_str	00000000 
0000da05 l       .debug_str	00000000 
0000da0b l       .debug_str	00000000 
0000da34 l       .debug_str	00000000 
0000da11 l       .debug_str	00000000 
0000da46 l       .debug_str	00000000 
0000da88 l       .debug_str	00000000 
0005b450 l       .debug_str	00000000 
0000dad2 l       .debug_str	00000000 
0000dad8 l       .debug_str	00000000 
0000dade l       .debug_str	00000000 
0000dae4 l       .debug_str	00000000 
0000db0d l       .debug_str	00000000 
0000daea l       .debug_str	00000000 
0000db1e l       .debug_str	00000000 
0000db5f l       .debug_str	00000000 
0000dba8 l       .debug_str	00000000 
0000dbad l       .debug_str	00000000 
0005c2da l       .debug_str	00000000 
0000dbb2 l       .debug_str	00000000 
0000dbb8 l       .debug_str	00000000 
0000dbbe l       .debug_str	00000000 
0000dbe7 l       .debug_str	00000000 
0000dbc4 l       .debug_str	00000000 
0000dbf8 l       .debug_str	00000000 
0000dc39 l       .debug_str	00000000 
0005b508 l       .debug_str	00000000 
0000dc82 l       .debug_str	00000000 
0000dcae l       .debug_str	00000000 
0000dc8b l       .debug_str	00000000 
0000dcbf l       .debug_str	00000000 
0000dd00 l       .debug_str	00000000 
0000dd49 l       .debug_str	00000000 
0005c4ae l       .debug_str	00000000 
0000dd4e l       .debug_str	00000000 
0000dd57 l       .debug_str	00000000 
0000dd5e l       .debug_str	00000000 
0000dd89 l       .debug_str	00000000 
0000dd66 l       .debug_str	00000000 
0000dd9b l       .debug_str	00000000 
0000dddd l       .debug_str	00000000 
0005c176 l       .debug_str	00000000 
0000de27 l       .debug_str	00000000 
0000de2d l       .debug_str	00000000 
0000de33 l       .debug_str	00000000 
0000de39 l       .debug_str	00000000 
0000de3f l       .debug_str	00000000 
0000de47 l       .debug_str	00000000 
0000de55 l       .debug_str	00000000 
0000de64 l       .debug_str	00000000 
0000de75 l       .debug_str	00000000 
0000de80 l       .debug_str	00000000 
0000de8b l       .debug_str	00000000 
0000de96 l       .debug_str	00000000 
0000de9d l       .debug_str	00000000 
0000dee3 l       .debug_str	00000000 
0000dec0 l       .debug_str	00000000 
0000def5 l       .debug_str	00000000 
0000df37 l       .debug_str	00000000 
0005b60b l       .debug_str	00000000 
0000df81 l       .debug_str	00000000 
0000dfae l       .debug_str	00000000 
0000df8b l       .debug_str	00000000 
0000dfc0 l       .debug_str	00000000 
0000e002 l       .debug_str	00000000 
0000e04c l       .debug_str	00000000 
0000e051 l       .debug_str	00000000 
0000e07e l       .debug_str	00000000 
0000e05b l       .debug_str	00000000 
0000e090 l       .debug_str	00000000 
0000e0d2 l       .debug_str	00000000 
0000e11c l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
0000e19b l       .debug_str	00000000 
0000e130 l       .debug_str	00000000 
0000e140 l       .debug_str	00000000 
0000e149 l       .debug_str	00000000 
0000e154 l       .debug_str	00000000 
0000e163 l       .debug_str	00000000 
0000e178 l       .debug_str	00000000 
0000e1a9 l       .debug_str	00000000 
0000e246 l       .debug_str	00000000 
0000e2eb l       .debug_str	00000000 
0000e2f6 l       .debug_str	00000000 
0000e2ff l       .debug_str	00000000 
0000e343 l       .debug_str	00000000 
0000e320 l       .debug_str	00000000 
0000e356 l       .debug_str	00000000 
0000e3d9 l       .debug_str	00000000 
0000e464 l       .debug_str	00000000 
0000e480 l       .debug_str	00000000 
0000e4cc l       .debug_str	00000000 
0000e520 l       .debug_str	00000000 
0000e53d l       .debug_str	00000000 
0000e551 l       .debug_str	00000000 
0000e59d l       .debug_str	00000000 
0000e5f1 l       .debug_str	00000000 
0000e607 l       .debug_str	00000000 
0000e61b l       .debug_str	00000000 
0000e662 l       .debug_str	00000000 
0000e6b1 l       .debug_str	00000000 
0000e6dd l       .debug_str	00000000 
0000e6ba l       .debug_str	00000000 
0000e6f1 l       .debug_str	00000000 
0000e6f9 l       .debug_str	00000000 
0000e700 l       .debug_str	00000000 
0000f387 l       .debug_str	00000000 
0000e708 l       .debug_str	00000000 
0000e710 l       .debug_str	00000000 
00031c5c l       .debug_str	00000000 
0000e71f l       .debug_str	00000000 
0000f3b9 l       .debug_str	00000000 
0000e72a l       .debug_str	00000000 
0000e735 l       .debug_str	00000000 
0000e746 l       .debug_str	00000000 
0000e74c l       .debug_str	00000000 
0000e754 l       .debug_str	00000000 
0000e75b l       .debug_str	00000000 
0000e765 l       .debug_str	00000000 
0000e76d l       .debug_str	00000000 
0000e775 l       .debug_str	00000000 
0000e797 l       .debug_str	00000000 
0000e7a2 l       .debug_str	00000000 
0000e7ae l       .debug_str	00000000 
0000e7b6 l       .debug_str	00000000 
0000e7bf l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
0000e7ca l       .debug_str	00000000 
0000e7d5 l       .debug_str	00000000 
0000e7e0 l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b57c l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
0000e7f0 l       .debug_str	00000000 
0000e800 l       .debug_str	00000000 
0000e80f l       .debug_str	00000000 
0000e817 l       .debug_str	00000000 
0000e81e l       .debug_str	00000000 
0000e826 l       .debug_str	00000000 
0000e867 l       .debug_str	00000000 
0000e844 l       .debug_str	00000000 
0000e877 l       .debug_str	00000000 
0000e88c l       .debug_str	00000000 
0000e895 l       .debug_str	00000000 
0000e8f2 l       .debug_str	00000000 
0000e957 l       .debug_str	00000000 
0000e961 l       .debug_str	00000000 
0000e971 l       .debug_str	00000000 
0000e986 l       .debug_str	00000000 
0000e98e l       .debug_str	00000000 
0000e9f2 l       .debug_str	00000000 
0000ea5e l       .debug_str	00000000 
0000ea65 l       .debug_str	00000000 
0000ea6d l       .debug_str	00000000 
0000eaae l       .debug_str	00000000 
0000ea8b l       .debug_str	00000000 
0000eabe l       .debug_str	00000000 
0000ead3 l       .debug_str	00000000 
0000eae6 l       .debug_str	00000000 
0000eafb l       .debug_str	00000000 
0000eb02 l       .debug_str	00000000 
0000eb17 l       .debug_str	00000000 
0000eb41 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000eb90 l       .debug_str	00000000 
0000ebcf l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2vuqh37eag1b6y30
0000f0a9 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000f264 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0000f01e l       .debug_str	00000000 
0000f081 l       .debug_str	00000000 
0000f127 l       .debug_str	00000000 
00006fc8 l       .debug_str	00000000 
0000f1b7 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000f23e l       .debug_str	00000000 
0000f24d l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
0000f26f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000eee7 l       .debug_str	00000000 
0000ef71 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0000ef7f l       .debug_str	00000000 
0000f014 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ca8d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xneats2au1n52xr
0000f2ca l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000f279 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3l5pa7f4r4pjxp5p
0000ffb1 l       .debug_str	00000000 
0000ffde l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000ffe9 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000fff9 l       .debug_str	00000000 
0001002d l       .debug_str	00000000 
00010014 l       .debug_str	00000000 
00010035 l       .debug_str	00000000 
0001004b l       .debug_str	00000000 
000100b3 l       .debug_str	00000000 
0001012b l       .debug_str	00000000 
00010158 l       .debug_str	00000000 
00010170 l       .debug_str	00000000 
000101da l       .debug_str	00000000 
000101e2 l       .debug_str	00000000 
000101e8 l       .debug_str	00000000 
000101f2 l       .debug_str	00000000 
0001026c l       .debug_str	00000000 
000102d8 l       .debug_str	00000000 
00010351 l       .debug_str	00000000 
000103ca l       .debug_str	00000000 
00010435 l       .debug_str	00000000 
000104a4 l       .debug_str	00000000 
000104ab l       .debug_str	00000000 
000104b6 l       .debug_str	00000000 
000104de l       .debug_str	00000000 
00010553 l       .debug_str	00000000 
000105d0 l       .debug_str	00000000 
000104cf l       .debug_str	00000000 
000105dc l       .debug_str	00000000 
0000d362 l       .debug_str	00000000 
00010653 l       .debug_str	00000000 
0000d350 l       .debug_str	00000000 
0004d2da l       .debug_str	00000000 
0000d379 l       .debug_str	00000000 
0000d381 l       .debug_str	00000000 
0000d38a l       .debug_str	00000000 
0000e78e l       .debug_str	00000000 
000106bc l       .debug_str	00000000 
0001073a l       .debug_str	00000000 
000107aa l       .debug_str	00000000 
00010824 l       .debug_str	00000000 
0001083e l       .debug_str	00000000 
000108aa l       .debug_str	00000000 
000108b3 l       .debug_str	00000000 
000108bf l       .debug_str	00000000 
00010935 l       .debug_str	00000000 
000109ab l       .debug_str	00000000 
00010a21 l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00010af8 l       .debug_str	00000000 
00000a4f l       .debug_str	00000000 
00010b65 l       .debug_str	00000000 
00010bda l       .debug_str	00000000 
00010bef l       .debug_str	00000000 
00010c56 l       .debug_str	00000000 
00010c5f l       .debug_str	00000000 
00010c6a l       .debug_str	00000000 
00010c71 l       .debug_str	00000000 
000598e7 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00010ca6 l       .debug_str	00000000 
00059320 l       .debug_str	00000000 
00010ce0 l       .debug_str	00000000 
00010d28 l       .debug_str	00000000 
000591c7 l       .debug_str	00000000 
0005e65e l       .debug_str	00000000 
00010d5b l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
00010d68 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
0005ebea l       .debug_str	00000000 
0000ccf4 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
000211e4 l       .debug_str	00000000 
0000ccfc l       .debug_str	00000000 
0000cfa2 l       .debug_str	00000000 
0000cf99 l       .debug_str	00000000 
00010d89 l       .debug_str	00000000 
00010d8e l       .debug_str	00000000 
00010d93 l       .debug_str	00000000 
00010d98 l       .debug_str	00000000 
00010d9d l       .debug_str	00000000 
00010da2 l       .debug_str	00000000 
00010dad l       .debug_str	00000000 
00010db8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00040335 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000f2ec l       .debug_str	00000000 
0001eed8 l       .debug_str	00000000 
0000f360 l       .debug_str	00000000 
0000e6f9 l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
0000e700 l       .debug_str	00000000 
0000f387 l       .debug_str	00000000 
0000f36c l       .debug_str	00000000 
0000f392 l       .debug_str	00000000 
0000e710 l       .debug_str	00000000 
00031c5c l       .debug_str	00000000 
0000e71f l       .debug_str	00000000 
0000f3b9 l       .debug_str	00000000 
0000f39e l       .debug_str	00000000 
0000f3c5 l       .debug_str	00000000 
0000f3d0 l       .debug_str	00000000 
0000f3db l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0000f495 l       .debug_str	00000000 
0000f3ec l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000f473 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000f47a l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
0000f4a9 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000f506 l       .debug_str	00000000 
0000f56b l       .debug_str	00000000 
0000f573 l       .debug_str	00000000 
0000f595 l       .debug_str	00000000 
0000f57c l       .debug_str	00000000 
0000f5ad l       .debug_str	00000000 
0000f5d3 l       .debug_str	00000000 
0000f64b l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b57c l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
0000f6c2 l       .debug_str	00000000 
0000f72b l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000015ad l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
0000f7a3 l       .debug_str	00000000 
000013b3 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d1f2 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00057c37 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d2d4 l       .debug_str	00000000 
0005e02d l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010d81 l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000159b l       .debug_str	00000000 
000015a4 l       .debug_str	00000000 
00001605 l       .debug_str	00000000 
0000f80d l       .debug_str	00000000 
0000f886 l       .debug_str	00000000 
0005e65c l       .debug_str	00000000 
000015ec l       .debug_str	00000000 
0000f88b l       .debug_str	00000000 
00000aa4 l       .debug_str	00000000 
0000f8b1 l       .debug_str	00000000 
0000f898 l       .debug_str	00000000 
0000f893 l       .debug_str	00000000 
0000f8bc l       .debug_str	00000000 
0000f8d5 l       .debug_str	00000000 
0000f940 l       .debug_str	00000000 
00000896 l       .debug_str	00000000 
00000ad4 l       .debug_str	00000000 
0000f9b0 l       .debug_str	00000000 
0000f9c0 l       .debug_str	00000000 
0000fa38 l       .debug_str	00000000 
00058e77 l       .debug_str	00000000 
00058bd1 l       .debug_str	00000000 
0000fa42 l       .debug_str	00000000 
0000fa49 l       .debug_str	00000000 
0000fa6c l       .debug_str	00000000 
0000fa53 l       .debug_str	00000000 
0000fa4e l       .debug_str	00000000 
0000fa76 l       .debug_str	00000000 
0000fa8e l       .debug_str	00000000 
0000faf8 l       .debug_str	00000000 
0000cffe l       .debug_str	00000000 
0000d00a l       .debug_str	00000000 
0000d012 l       .debug_str	00000000 
0000d06c l       .debug_str	00000000 
0000d0ce l       .debug_str	00000000 
0000d0d9 l       .debug_str	00000000 
0000d120 l       .debug_str	00000000 
0000d16f l       .debug_str	00000000 
0000d179 l       .debug_str	00000000 
0000d1b6 l       .debug_str	00000000 
0000d1fb l       .debug_str	00000000 
0000d204 l       .debug_str	00000000 
0000d214 l       .debug_str	00000000 
0000d21c l       .debug_str	00000000 
0000d271 l       .debug_str	00000000 
0000d2ce l       .debug_str	00000000 
0000d2da l       .debug_str	00000000 
0000d2e3 l       .debug_str	00000000 
0000d2ef l       .debug_str	00000000 
0000d2fb l       .debug_str	00000000 
0000d304 l       .debug_str	00000000 
0000d30c l       .debug_str	00000000 
0000d342 l       .debug_str	00000000 
0000d329 l       .debug_str	00000000 
0000d314 l       .debug_str	00000000 
0000fb6d l       .debug_str	00000000 
0000fbd4 l       .debug_str	00000000 
0000fc4f l       .debug_str	00000000 
0000fc5f l       .debug_str	00000000 
0000fc68 l       .debug_str	00000000 
0000fc76 l       .debug_str	00000000 
0000fc84 l       .debug_str	00000000 
0000fc90 l       .debug_str	00000000 
0000fe9e l       .debug_str	00000000 
0000fc9c l       .debug_str	00000000 
0000fcab l       .debug_str	00000000 
0000fcb3 l       .debug_str	00000000 
0000fccc l       .debug_str	00000000 
0000d358 l       .debug_str	00000000 
0000fcdd l       .debug_str	00000000 
0000fce5 l       .debug_str	00000000 
0000fd18 l       .debug_str	00000000 
0000fcff l       .debug_str	00000000 
0000fd24 l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000fd56 l       .debug_str	00000000 
0000fd3d l       .debug_str	00000000 
0000fd61 l       .debug_str	00000000 
0000fd83 l       .debug_str	00000000 
0000fd6a l       .debug_str	00000000 
0000fd90 l       .debug_str	00000000 
0000fdab l       .debug_str	00000000 
0000fe18 l       .debug_str	00000000 
0000fe95 l       .debug_str	00000000 
0000fe9d l       .debug_str	00000000 
00010149 l       .debug_str	00000000 
00010130 l       .debug_str	00000000 
0000fea7 l       .debug_str	00000000 
0000fec4 l       .debug_str	00000000 
0000ff33 l       .debug_str	00000000 
0000ffa9 l       .debug_str	00000000 
0000ffba l       .debug_str	00000000 
0000ffc8 l       .debug_str	00000000 
0000ffcf l       .debug_str	00000000 
0000ffd6 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 413mqmtb04w1hzsl
00013753 l       .debug_str	00000000 
00014747 l       .debug_str	00000000 
00014795 l       .debug_str	00000000 
00014800 l       .debug_str	00000000 
0002f298 l       .debug_str	00000000 
00023b8c l       .debug_str	00000000 
0001486a l       .debug_str	00000000 
0001489a l       .debug_str	00000000 
000148fd l       .debug_str	00000000 
0001492d l       .debug_str	00000000 
00014958 l       .debug_str	00000000 
00014b5e l       .debug_str	00000000 
00014b68 l       .debug_str	00000000 
00014bc1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00010de4 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000ffe9 l       .debug_str	00000000 
00010e00 l       .debug_str	00000000 
00010e45 l       .debug_str	00000000 
00010eb3 l       .debug_str	00000000 
00010f4a l       .debug_str	00000000 
0001100a l       .debug_str	00000000 
000110f3 l       .debug_str	00000000 
00011205 l       .debug_str	00000000 
00011340 l       .debug_str	00000000 
000114a4 l       .debug_str	00000000 
00011631 l       .debug_str	00000000 
000117e7 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
00011b6c l       .debug_str	00000000 
00011be3 l       .debug_str	00000000 
00011c67 l       .debug_str	00000000 
00011ce2 l       .debug_str	00000000 
00011d80 l       .debug_str	00000000 
00011e2b l       .debug_str	00000000 
00011ecd l       .debug_str	00000000 
00011f92 l       .debug_str	00000000 
00012064 l       .debug_str	00000000 
0001212d l       .debug_str	00000000 
00012219 l       .debug_str	00000000 
00012312 l       .debug_str	00000000 
00012402 l       .debug_str	00000000 
00012515 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
0001274c l       .debug_str	00000000 
00012886 l       .debug_str	00000000 
000129cd l       .debug_str	00000000 
00012b0b l       .debug_str	00000000 
00012c6c l       .debug_str	00000000 
00012dda l       .debug_str	00000000 
00012f3f l       .debug_str	00000000 
000130c7 l       .debug_str	00000000 
0001325c l       .debug_str	00000000 
000133e8 l       .debug_str	00000000 
00013597 l       .debug_str	00000000 
00013906 l       .debug_str	00000000 
00013adc l       .debug_str	00000000 
00013cbf l       .debug_str	00000000 
00013e99 l       .debug_str	00000000 
00014094 l       .debug_str	00000000 
000142ac l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002f30c l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00023986 l       .debug_str	00000000 
000144c3 l       .debug_str	00000000 
000144f3 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00014b63 l       .debug_str	00000000 
00014703 l       .debug_str	00000000 
00014733 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n7qec2sa6vjglqv
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
00002dc0 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00014fd0 l       .debug_str	00000000 
00014fd9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00014be2 l       .debug_str	00000000 
000154d5 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
00014c19 l       .debug_str	00000000 
00014c6c l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
00014cc6 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000cfb7 l       .debug_str	00000000 
00014cd4 l       .debug_str	00000000 
00014d1b l       .debug_str	00000000 
00014d24 l       .debug_str	00000000 
00014d6d l       .debug_str	00000000 
00010da2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0000f26f l       .debug_str	00000000 
00014d79 l       .debug_str	00000000 
00014df5 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000f23e l       .debug_str	00000000 
00014e1f l       .debug_str	00000000 
00014e9b l       .debug_str	00000000 
00014eca l       .debug_str	00000000 
00014f50 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
000334b6 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00007813 l       .debug_str	00000000 
0001679c l       .debug_str	00000000 
00014f5e l       .debug_str	00000000 
00014fc0 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
00014fc8 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4oqy1cznfkuv6rc
0005ad42 l       .debug_str	00000000 
000151ec l       .debug_str	00000000 
000578f8 l       .debug_str	00000000 
0000eee3 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0005f370 l       .debug_str	00000000 
0005f36f l       .debug_str	00000000 
0005ebea l       .debug_str	00000000 
0000ccf4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
000211e4 l       .debug_str	00000000 
0000ccfc l       .debug_str	00000000 
0000cfa2 l       .debug_str	00000000 
0000cf99 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00018800 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00014fe0 l       .debug_str	00000000 
0005781b l       .debug_str	00000000 
00014fe4 l       .debug_str	00000000 
00015015 l       .debug_str	00000000 
0001501b l       .debug_str	00000000 
0001505c l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00015071 l       .debug_str	00000000 
000150a8 l       .debug_str	00000000 
000150b3 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
000150e5 l       .debug_str	00000000 
0005795f l       .debug_str	00000000 
00015119 l       .debug_str	00000000 
0005794e l       .debug_str	00000000 
0001514d l       .debug_str	00000000 
00057906 l       .debug_str	00000000 
00015184 l       .debug_str	00000000 
00057998 l       .debug_str	00000000 
000151bc l       .debug_str	00000000 
000577c9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4qlpitlm4hs8kdcv
0000f3b9 l       .debug_str	00000000 
00015526 l       .debug_str	00000000 
0001554d l       .debug_str	00000000 
00015558 l       .debug_str	00000000 
0001557f l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0001558a l       .debug_str	00000000 
00015589 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0000d93c l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00010da2 l       .debug_str	00000000 
0005b857 l       .debug_str	00000000 
00058b61 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001521d l       .debug_str	00000000 
000062e2 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00015246 l       .debug_str	00000000 
00015258 l       .debug_str	00000000 
00015269 l       .debug_str	00000000 
000152b5 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
000152c1 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
0000eb3a l       .debug_str	00000000 
0000cff5 l       .debug_str	00000000 
0000d343 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00040335 l       .debug_str	00000000 
0000cffe l       .debug_str	00000000 
0000d00a l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
0000d012 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d06c l       .debug_str	00000000 
0000d0ce l       .debug_str	00000000 
0000d0d9 l       .debug_str	00000000 
0000d120 l       .debug_str	00000000 
0000d16f l       .debug_str	00000000 
0000d179 l       .debug_str	00000000 
0000d1b6 l       .debug_str	00000000 
0000d1fb l       .debug_str	00000000 
0000d204 l       .debug_str	00000000 
0000d214 l       .debug_str	00000000 
0000d21c l       .debug_str	00000000 
0000d271 l       .debug_str	00000000 
0000d2ce l       .debug_str	00000000 
0000d2da l       .debug_str	00000000 
0000d2e3 l       .debug_str	00000000 
0000d2ef l       .debug_str	00000000 
0000d2fb l       .debug_str	00000000 
0000d304 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0000d30c l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000d314 l       .debug_str	00000000 
0000d342 l       .debug_str	00000000 
0000d329 l       .debug_str	00000000 
0000d349 l       .debug_str	00000000 
0000d350 l       .debug_str	00000000 
0000d358 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d1f2 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00057c37 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d2d4 l       .debug_str	00000000 
0005e02d l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010d81 l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000d362 l       .debug_str	00000000 
0004d2da l       .debug_str	00000000 
0000d379 l       .debug_str	00000000 
0000d381 l       .debug_str	00000000 
0000d38a l       .debug_str	00000000 
0000e78e l       .debug_str	00000000 
0000d393 l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
0005dce0 l       .debug_str	00000000 
0000d39b l       .debug_str	00000000 
0000d3a7 l       .debug_str	00000000 
0000d3b2 l       .debug_str	00000000 
0000d3ba l       .debug_str	00000000 
000152c5 l       .debug_str	00000000 
00015d8c l       .debug_str	00000000 
0000d3c2 l       .debug_str	00000000 
0000d4be l       .debug_str	00000000 
0000d5c2 l       .debug_str	00000000 
0000d5d0 l       .debug_str	00000000 
0000d5db l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000d608 l       .debug_str	00000000 
0000d5e5 l       .debug_str	00000000 
0000d613 l       .debug_str	00000000 
0000d68e l       .debug_str	00000000 
0000d711 l       .debug_str	00000000 
0000d71f l       .debug_str	00000000 
0000d77e l       .debug_str	00000000 
0000d7e5 l       .debug_str	00000000 
0000d7fb l       .debug_str	00000000 
0000d80b l       .debug_str	00000000 
0005c516 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000d81a l       .debug_str	00000000 
00018800 l       .debug_str	00000000 
0000d820 l       .debug_str	00000000 
0000d826 l       .debug_str	00000000 
0000d82c l       .debug_str	00000000 
0000d838 l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d840 l       .debug_str	00000000 
0000d848 l       .debug_str	00000000 
0000d84e l       .debug_str	00000000 
0000d894 l       .debug_str	00000000 
0000d871 l       .debug_str	00000000 
0000d8a4 l       .debug_str	00000000 
0000d8e4 l       .debug_str	00000000 
0005c0a3 l       .debug_str	00000000 
0000d92c l       .debug_str	00000000 
0000d932 l       .debug_str	00000000 
0000d938 l       .debug_str	00000000 
0000d961 l       .debug_str	00000000 
0000d93e l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000d9b5 l       .debug_str	00000000 
0005bf8c l       .debug_str	00000000 
0000d9ff l       .debug_str	00000000 
0000da05 l       .debug_str	00000000 
0000da0b l       .debug_str	00000000 
0000da34 l       .debug_str	00000000 
0000da11 l       .debug_str	00000000 
0000da46 l       .debug_str	00000000 
0000da88 l       .debug_str	00000000 
0005b450 l       .debug_str	00000000 
0000dad2 l       .debug_str	00000000 
0000dad8 l       .debug_str	00000000 
0000dade l       .debug_str	00000000 
0000dae4 l       .debug_str	00000000 
0000db0d l       .debug_str	00000000 
0000daea l       .debug_str	00000000 
0000db1e l       .debug_str	00000000 
0000db5f l       .debug_str	00000000 
0000dba8 l       .debug_str	00000000 
0000dbad l       .debug_str	00000000 
0005c2da l       .debug_str	00000000 
0000dbb2 l       .debug_str	00000000 
0000dbb8 l       .debug_str	00000000 
0000dbbe l       .debug_str	00000000 
0000dbe7 l       .debug_str	00000000 
0000dbc4 l       .debug_str	00000000 
0000dbf8 l       .debug_str	00000000 
0000dc39 l       .debug_str	00000000 
0005b508 l       .debug_str	00000000 
0000dc82 l       .debug_str	00000000 
0000dcae l       .debug_str	00000000 
0000dc8b l       .debug_str	00000000 
0000dcbf l       .debug_str	00000000 
0000dd00 l       .debug_str	00000000 
0000dd49 l       .debug_str	00000000 
0005c4ae l       .debug_str	00000000 
0000dd4e l       .debug_str	00000000 
0000dd57 l       .debug_str	00000000 
0000dd5e l       .debug_str	00000000 
0000dd89 l       .debug_str	00000000 
0000dd66 l       .debug_str	00000000 
0000dd9b l       .debug_str	00000000 
0000dddd l       .debug_str	00000000 
0005c176 l       .debug_str	00000000 
0000de27 l       .debug_str	00000000 
0000de2d l       .debug_str	00000000 
0000de33 l       .debug_str	00000000 
0000de39 l       .debug_str	00000000 
0000de3f l       .debug_str	00000000 
0000de47 l       .debug_str	00000000 
0000de55 l       .debug_str	00000000 
0000de64 l       .debug_str	00000000 
0000de75 l       .debug_str	00000000 
0000de80 l       .debug_str	00000000 
0000de8b l       .debug_str	00000000 
0000de96 l       .debug_str	00000000 
0000de9d l       .debug_str	00000000 
0000dee3 l       .debug_str	00000000 
0000dec0 l       .debug_str	00000000 
0000def5 l       .debug_str	00000000 
0000df37 l       .debug_str	00000000 
0005b60b l       .debug_str	00000000 
0000df81 l       .debug_str	00000000 
0000dfae l       .debug_str	00000000 
0000df8b l       .debug_str	00000000 
0000dfc0 l       .debug_str	00000000 
0000e002 l       .debug_str	00000000 
0000e04c l       .debug_str	00000000 
0000e051 l       .debug_str	00000000 
0000e07e l       .debug_str	00000000 
0000e05b l       .debug_str	00000000 
0000e090 l       .debug_str	00000000 
0000e0d2 l       .debug_str	00000000 
0000e11c l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
0000e19b l       .debug_str	00000000 
0000e130 l       .debug_str	00000000 
0000e140 l       .debug_str	00000000 
0000e149 l       .debug_str	00000000 
0000e154 l       .debug_str	00000000 
0000e163 l       .debug_str	00000000 
0000e178 l       .debug_str	00000000 
0000e1a9 l       .debug_str	00000000 
0000e246 l       .debug_str	00000000 
0000e2eb l       .debug_str	00000000 
0000e2f6 l       .debug_str	00000000 
0000e2ff l       .debug_str	00000000 
0000e343 l       .debug_str	00000000 
0000e320 l       .debug_str	00000000 
0000e356 l       .debug_str	00000000 
0000e3d9 l       .debug_str	00000000 
0000e464 l       .debug_str	00000000 
0000e480 l       .debug_str	00000000 
0000e4cc l       .debug_str	00000000 
0000e520 l       .debug_str	00000000 
0000e53d l       .debug_str	00000000 
0000e551 l       .debug_str	00000000 
0000e59d l       .debug_str	00000000 
0000e5f1 l       .debug_str	00000000 
0000e607 l       .debug_str	00000000 
0000e61b l       .debug_str	00000000 
0000e662 l       .debug_str	00000000 
0000e6b1 l       .debug_str	00000000 
0000e6dd l       .debug_str	00000000 
0000e6ba l       .debug_str	00000000 
0000e6eb l       .debug_str	00000000 
0000e6f1 l       .debug_str	00000000 
0000e6f9 l       .debug_str	00000000 
0000e700 l       .debug_str	00000000 
0000f387 l       .debug_str	00000000 
0000e708 l       .debug_str	00000000 
0000e710 l       .debug_str	00000000 
00031c5c l       .debug_str	00000000 
0000e71f l       .debug_str	00000000 
0000e72a l       .debug_str	00000000 
0000e735 l       .debug_str	00000000 
0000e746 l       .debug_str	00000000 
0000e74c l       .debug_str	00000000 
0000e754 l       .debug_str	00000000 
0000e75b l       .debug_str	00000000 
0000e765 l       .debug_str	00000000 
0000e76d l       .debug_str	00000000 
0000e775 l       .debug_str	00000000 
0000e797 l       .debug_str	00000000 
0000e7a2 l       .debug_str	00000000 
0000e7ae l       .debug_str	00000000 
0000e7b6 l       .debug_str	00000000 
0000e7bf l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
0000e7ca l       .debug_str	00000000 
0000e7d5 l       .debug_str	00000000 
0000e7e0 l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b57c l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
0000e7f0 l       .debug_str	00000000 
0000e800 l       .debug_str	00000000 
0000e80f l       .debug_str	00000000 
0000e817 l       .debug_str	00000000 
0000e81e l       .debug_str	00000000 
0000e826 l       .debug_str	00000000 
0000e867 l       .debug_str	00000000 
0000e844 l       .debug_str	00000000 
0000e877 l       .debug_str	00000000 
0000e88c l       .debug_str	00000000 
0000e895 l       .debug_str	00000000 
0000e8f2 l       .debug_str	00000000 
0000e957 l       .debug_str	00000000 
0000e961 l       .debug_str	00000000 
0000e971 l       .debug_str	00000000 
0000e986 l       .debug_str	00000000 
0000e98e l       .debug_str	00000000 
0000e9f2 l       .debug_str	00000000 
0000ea5e l       .debug_str	00000000 
0000ea65 l       .debug_str	00000000 
0000ea6d l       .debug_str	00000000 
0000eaae l       .debug_str	00000000 
0000ea8b l       .debug_str	00000000 
0000eabe l       .debug_str	00000000 
0000ead3 l       .debug_str	00000000 
0000eae6 l       .debug_str	00000000 
0000eafb l       .debug_str	00000000 
0000eb02 l       .debug_str	00000000 
0000eb17 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
00058684 l       .debug_str	00000000 
000152d2 l       .debug_str	00000000 
0001538a l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
000153ee l       .debug_str	00000000 
00015424 l       .debug_str	00000000 
0001543d l       .debug_str	00000000 
00015477 l       .debug_str	00000000 
00015494 l       .debug_str	00000000 
000154cf l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
000154ec l       .debug_str	00000000 
000154f6 l       .debug_str	00000000 
0001551c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z8krxbvbr97ayck
0005d3b0 l       .debug_str	00000000 
00015606 l       .debug_str	00000000 
00015642 l       .debug_str	00000000 
0000ce51 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007a3d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53x3bckk5lzipnpa
00000c52 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
000159a9 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
000159af l       .debug_str	00000000 
000159c6 l       .debug_str	00000000 
0005b6ef l       .debug_str	00000000 
000595e1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
00015681 l       .debug_str	00000000 
0000e75e l       .debug_str	00000000 
00015956 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00058744 l       .debug_str	00000000 
000159c1 l       .debug_str	00000000 
000159d8 l       .debug_str	00000000 
00015689 l       .debug_str	00000000 
0003d63b l       .debug_str	00000000 
000156b4 l       .debug_str	00000000 
0005dd87 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
000156e0 l       .debug_str	00000000 
0005f083 l       .debug_str	00000000 
00015751 l       .debug_str	00000000 
0001577d l       .debug_str	00000000 
000157aa l       .debug_str	00000000 
00015816 l       .debug_str	00000000 
0001581e l       .debug_str	00000000 
0001588b l       .debug_str	00000000 
00015894 l       .debug_str	00000000 
000158c1 l       .debug_str	00000000 
0001593b l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00015944 l       .debug_str	00000000 
0001599c l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
0001595a l       .debug_str	00000000 
00015964 l       .debug_str	00000000 
0001596f l       .debug_str	00000000 
00015979 l       .debug_str	00000000 
00015998 l       .debug_str	00000000 
00015982 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
00005d6d l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001f1b0 l     O .text	00000021 str.0
00000000 l    df *ABS*	00000000 54b6z89c74d8bdz1
0000e708 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
00005eef l       .debug_str	00000000 
00005f03 l       .debug_str	00000000 
0000cc9c l       .debug_str	00000000 
00005f0c l       .debug_str	00000000 
00005f17 l       .debug_str	00000000 
0000cb12 l       .debug_str	00000000 
00015d7d l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
0000cb3a l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
0000cb44 l       .debug_str	00000000 
00015589 l       .debug_str	00000000 
0000cb4f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00014b63 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
0000cfb7 l       .debug_str	00000000 
000159de l       .debug_str	00000000 
00015a26 l       .debug_str	00000000 
00002dc0 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00015a45 l       .debug_str	00000000 
00015a80 l       .debug_str	00000000 
00015aa5 l       .debug_str	00000000 
00015acc l       .debug_str	00000000 
00015b2c l       .debug_str	00000000 
00015b35 l       .debug_str	00000000 
00015ba0 l       .debug_str	00000000 
00015bb0 l       .debug_str	00000000 
00015c1c l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
0000eb3a l       .debug_str	00000000 
0000cff5 l       .debug_str	00000000 
0000d343 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00040335 l       .debug_str	00000000 
0000cffe l       .debug_str	00000000 
0000d00a l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
0000d012 l       .debug_str	00000000 
0000d06c l       .debug_str	00000000 
0000d0ce l       .debug_str	00000000 
0000d0d9 l       .debug_str	00000000 
0000d120 l       .debug_str	00000000 
0000d16f l       .debug_str	00000000 
0000d179 l       .debug_str	00000000 
0000d1b6 l       .debug_str	00000000 
0000d1fb l       .debug_str	00000000 
0000d204 l       .debug_str	00000000 
0000d214 l       .debug_str	00000000 
0000d21c l       .debug_str	00000000 
0000d271 l       .debug_str	00000000 
0000d2ce l       .debug_str	00000000 
0000d2da l       .debug_str	00000000 
0000d2e3 l       .debug_str	00000000 
0000d2ef l       .debug_str	00000000 
0000d2fb l       .debug_str	00000000 
0000d304 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0000d30c l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000d314 l       .debug_str	00000000 
0000d342 l       .debug_str	00000000 
0000d329 l       .debug_str	00000000 
0000d349 l       .debug_str	00000000 
0000d350 l       .debug_str	00000000 
0000d358 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d1f2 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00057c37 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d2d4 l       .debug_str	00000000 
0005e02d l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010d81 l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000d362 l       .debug_str	00000000 
0004d2da l       .debug_str	00000000 
0000d379 l       .debug_str	00000000 
0000d381 l       .debug_str	00000000 
0000d38a l       .debug_str	00000000 
0000e78e l       .debug_str	00000000 
0000d393 l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
0005dce0 l       .debug_str	00000000 
0000d39b l       .debug_str	00000000 
0000d3a7 l       .debug_str	00000000 
0000d3b2 l       .debug_str	00000000 
0000d3ba l       .debug_str	00000000 
00015d8c l       .debug_str	00000000 
0000d3c2 l       .debug_str	00000000 
0000d4be l       .debug_str	00000000 
0000d5c2 l       .debug_str	00000000 
0000d5d0 l       .debug_str	00000000 
0000d5db l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000d608 l       .debug_str	00000000 
0000d5e5 l       .debug_str	00000000 
0000d613 l       .debug_str	00000000 
0000d68e l       .debug_str	00000000 
0000d711 l       .debug_str	00000000 
0000d71f l       .debug_str	00000000 
0000d77e l       .debug_str	00000000 
0000d7e5 l       .debug_str	00000000 
0000d7fb l       .debug_str	00000000 
0000d80b l       .debug_str	00000000 
0005c516 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000d81a l       .debug_str	00000000 
00018800 l       .debug_str	00000000 
0000d820 l       .debug_str	00000000 
0000d826 l       .debug_str	00000000 
0000d82c l       .debug_str	00000000 
0000d838 l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d840 l       .debug_str	00000000 
0000d848 l       .debug_str	00000000 
0000d84e l       .debug_str	00000000 
0000d894 l       .debug_str	00000000 
0000d871 l       .debug_str	00000000 
0000d8a4 l       .debug_str	00000000 
0000d8e4 l       .debug_str	00000000 
0005c0a3 l       .debug_str	00000000 
0000d92c l       .debug_str	00000000 
0000d932 l       .debug_str	00000000 
0000d938 l       .debug_str	00000000 
0000d961 l       .debug_str	00000000 
0000d93e l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000d9b5 l       .debug_str	00000000 
0005bf8c l       .debug_str	00000000 
0000d9ff l       .debug_str	00000000 
0000da05 l       .debug_str	00000000 
0000da0b l       .debug_str	00000000 
0000da34 l       .debug_str	00000000 
0000da11 l       .debug_str	00000000 
0000da46 l       .debug_str	00000000 
0000da88 l       .debug_str	00000000 
0005b450 l       .debug_str	00000000 
0000dad2 l       .debug_str	00000000 
0000dad8 l       .debug_str	00000000 
0000dade l       .debug_str	00000000 
0000dae4 l       .debug_str	00000000 
0000db0d l       .debug_str	00000000 
0000daea l       .debug_str	00000000 
0000db1e l       .debug_str	00000000 
0000db5f l       .debug_str	00000000 
0000dba8 l       .debug_str	00000000 
0000dbad l       .debug_str	00000000 
0005c2da l       .debug_str	00000000 
0000dbb2 l       .debug_str	00000000 
0000dbb8 l       .debug_str	00000000 
0000dbbe l       .debug_str	00000000 
0000dbe7 l       .debug_str	00000000 
0000dbc4 l       .debug_str	00000000 
0000dbf8 l       .debug_str	00000000 
0000dc39 l       .debug_str	00000000 
0005b508 l       .debug_str	00000000 
0000dc82 l       .debug_str	00000000 
0000dcae l       .debug_str	00000000 
0000dc8b l       .debug_str	00000000 
0000dcbf l       .debug_str	00000000 
0000dd00 l       .debug_str	00000000 
0000dd49 l       .debug_str	00000000 
0005c4ae l       .debug_str	00000000 
0000dd4e l       .debug_str	00000000 
0000dd57 l       .debug_str	00000000 
0000dd5e l       .debug_str	00000000 
0000dd89 l       .debug_str	00000000 
0000dd66 l       .debug_str	00000000 
0000dd9b l       .debug_str	00000000 
0000dddd l       .debug_str	00000000 
0005c176 l       .debug_str	00000000 
0000de27 l       .debug_str	00000000 
0000de2d l       .debug_str	00000000 
0000de33 l       .debug_str	00000000 
0000de39 l       .debug_str	00000000 
0000de3f l       .debug_str	00000000 
0000de47 l       .debug_str	00000000 
0000de55 l       .debug_str	00000000 
0000de64 l       .debug_str	00000000 
0000de75 l       .debug_str	00000000 
0000de80 l       .debug_str	00000000 
0000de8b l       .debug_str	00000000 
0000de96 l       .debug_str	00000000 
0000de9d l       .debug_str	00000000 
0000dee3 l       .debug_str	00000000 
0000dec0 l       .debug_str	00000000 
0000def5 l       .debug_str	00000000 
0000df37 l       .debug_str	00000000 
0005b60b l       .debug_str	00000000 
0000df81 l       .debug_str	00000000 
0000dfae l       .debug_str	00000000 
0000df8b l       .debug_str	00000000 
0000dfc0 l       .debug_str	00000000 
0000e002 l       .debug_str	00000000 
0000e04c l       .debug_str	00000000 
0000e051 l       .debug_str	00000000 
0000e07e l       .debug_str	00000000 
0000e05b l       .debug_str	00000000 
0000e090 l       .debug_str	00000000 
0000e0d2 l       .debug_str	00000000 
0000e11c l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
0000e19b l       .debug_str	00000000 
0000e130 l       .debug_str	00000000 
0000e140 l       .debug_str	00000000 
0000e149 l       .debug_str	00000000 
0000e154 l       .debug_str	00000000 
0000e163 l       .debug_str	00000000 
0000e178 l       .debug_str	00000000 
0000e1a9 l       .debug_str	00000000 
0000e246 l       .debug_str	00000000 
0000e2eb l       .debug_str	00000000 
0000e2f6 l       .debug_str	00000000 
0000e2ff l       .debug_str	00000000 
0000e343 l       .debug_str	00000000 
0000e320 l       .debug_str	00000000 
0000e356 l       .debug_str	00000000 
0000e3d9 l       .debug_str	00000000 
0000e464 l       .debug_str	00000000 
0000e480 l       .debug_str	00000000 
0000e4cc l       .debug_str	00000000 
0000e520 l       .debug_str	00000000 
0000e53d l       .debug_str	00000000 
0000e551 l       .debug_str	00000000 
0000e59d l       .debug_str	00000000 
0000e5f1 l       .debug_str	00000000 
0000e607 l       .debug_str	00000000 
0000e61b l       .debug_str	00000000 
0000e662 l       .debug_str	00000000 
0000e6b1 l       .debug_str	00000000 
0000e6dd l       .debug_str	00000000 
0000e6ba l       .debug_str	00000000 
0000e6eb l       .debug_str	00000000 
0000e6f1 l       .debug_str	00000000 
0000e6f9 l       .debug_str	00000000 
0000e700 l       .debug_str	00000000 
0000f387 l       .debug_str	00000000 
0000e710 l       .debug_str	00000000 
00031c5c l       .debug_str	00000000 
0000e71f l       .debug_str	00000000 
0000f3b9 l       .debug_str	00000000 
0000e72a l       .debug_str	00000000 
0000e735 l       .debug_str	00000000 
0000e746 l       .debug_str	00000000 
0000e74c l       .debug_str	00000000 
0000e754 l       .debug_str	00000000 
0000e75b l       .debug_str	00000000 
0000e765 l       .debug_str	00000000 
0000e76d l       .debug_str	00000000 
0000e775 l       .debug_str	00000000 
0000e797 l       .debug_str	00000000 
0000e7a2 l       .debug_str	00000000 
0000e7ae l       .debug_str	00000000 
0000e7b6 l       .debug_str	00000000 
0000e7bf l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
0000e7ca l       .debug_str	00000000 
0000e7d5 l       .debug_str	00000000 
0000e7e0 l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b57c l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
0000e7f0 l       .debug_str	00000000 
0000e800 l       .debug_str	00000000 
0000e80f l       .debug_str	00000000 
0000e817 l       .debug_str	00000000 
0000e81e l       .debug_str	00000000 
0000e826 l       .debug_str	00000000 
0000e867 l       .debug_str	00000000 
0000e844 l       .debug_str	00000000 
0000e877 l       .debug_str	00000000 
0000e88c l       .debug_str	00000000 
0000e895 l       .debug_str	00000000 
0000e8f2 l       .debug_str	00000000 
0000e957 l       .debug_str	00000000 
0000e961 l       .debug_str	00000000 
0000e971 l       .debug_str	00000000 
0000e986 l       .debug_str	00000000 
0000e98e l       .debug_str	00000000 
0000e9f2 l       .debug_str	00000000 
0000ea5e l       .debug_str	00000000 
0000ea65 l       .debug_str	00000000 
0000ea6d l       .debug_str	00000000 
0000eaae l       .debug_str	00000000 
0000ea8b l       .debug_str	00000000 
0000eabe l       .debug_str	00000000 
0000ead3 l       .debug_str	00000000 
0000eae6 l       .debug_str	00000000 
0000eafb l       .debug_str	00000000 
0000eb02 l       .debug_str	00000000 
0000eb17 l       .debug_str	00000000 
0001558a l       .debug_str	00000000 
00015c2f l       .debug_str	00000000 
00015c92 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00015d12 l       .debug_str	00000000 
00015d75 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000cfa8 l       .debug_str	00000000 
0000cfa7 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 57lqf44sdwu8qayr
00000c71 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
00016099 l       .debug_str	00000000 
000160ca l       .debug_str	00000000 
00016351 l       .debug_str	00000000 
000160e4 l       .debug_str	00000000 
00016115 l       .debug_str	00000000 
00016187 l       .debug_str	00000000 
00016145 l       .debug_str	00000000 
00016176 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00014b63 l       .debug_str	00000000 
00016180 l       .debug_str	00000000 
00005cfd l       .debug_str	00000000 
00016186 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0001618c l       .debug_str	00000000 
000161de l       .debug_str	00000000 
0000cfa7 l       .debug_str	00000000 
00016231 l       .debug_str	00000000 
0001629a l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
000162ed l       .debug_str	00000000 
00016350 l       .debug_str	00000000 
0001637c l       .debug_str	00000000 
000163f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005dc16 l       .debug_str	00000000 
0000cce7 l       .debug_str	00000000 
0000110c l       .debug_str	00000000 
00015e10 l       .debug_str	00000000 
00016372 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00015e1f l       .debug_str	00000000 
000035ab l       .debug_str	00000000 
00015e67 l       .debug_str	00000000 
00015eaf l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00015eb7 l       .debug_str	00000000 
00015b2c l       .debug_str	00000000 
00015eff l       .debug_str	00000000 
000035fc l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
00015f47 l       .debug_str	00000000 
00015f8f l       .debug_str	00000000 
00015f98 l       .debug_str	00000000 
00015fc9 l       .debug_str	00000000 
00005d6d l       .debug_str	00000000 
00015fd2 l       .debug_str	00000000 
00016003 l       .debug_str	00000000 
0000cfb7 l       .debug_str	00000000 
0000cfa8 l       .debug_str	00000000 
0001600d l       .debug_str	00000000 
0001603e l       .debug_str	00000000 
00005d81 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
0001608f l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dmg7ylzo67ab86f
00016580 l       .debug_str	00000000 
0001648d l       .debug_str	00000000 
000066dc l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
000164d6 l       .debug_str	00000000 
000164e2 l       .debug_str	00000000 
00016529 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00016535 l       .debug_str	00000000 
000066ec l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000727d l       .debug_str	00000000 
0005a8ee l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00016448 l       .debug_str	00000000 
00006685 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ca8d l       .debug_str	00000000 
00010044 l     F .text	00000044 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E
00000000 l    df *ABS*	00000000 num_traits.eydd4btj-cgu.0
0001796c l       .debug_str	00000000 
00016b6d l       .debug_str	00000000 
00006c03 l       .debug_str	00000000 
00016bb0 l       .debug_str	00000000 
000092a7 l       .debug_str	00000000 
00016c0c l       .debug_str	00000000 
00009317 l       .debug_str	00000000 
00016c6b l       .debug_str	00000000 
000092b0 l       .debug_str	00000000 
00016cbd l       .debug_str	00000000 
00016d12 l       .debug_str	00000000 
00016d68 l       .debug_str	00000000 
00016d96 l       .debug_str	00000000 
00016da2 l       .debug_str	00000000 
00016dd4 l       .debug_str	00000000 
00016dfb l       .debug_str	00000000 
00016e2d l       .debug_str	00000000 
00016e3d l       .debug_str	00000000 
00016e72 l       .debug_str	00000000 
00016e85 l       .debug_str	00000000 
00016ebb l       .debug_str	00000000 
00016ecf l       .debug_str	00000000 
00016f19 l       .debug_str	00000000 
00016f2a l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00016f66 l       .debug_str	00000000 
00057c63 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
00016fa4 l       .debug_str	00000000 
00016fe2 l       .debug_str	00000000 
00016fef l       .debug_str	00000000 
00016ff4 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00017002 l       .debug_str	00000000 
0001702a l       .debug_str	00000000 
0000ce51 l       .debug_str	00000000 
00017069 l       .debug_str	00000000 
00017097 l       .debug_str	00000000 
0001709e l       .debug_str	00000000 
00017141 l       .debug_str	00000000 
0001714f l       .debug_str	00000000 
0003eb44 l       .debug_str	00000000 
000171e7 l       .debug_str	00000000 
00017281 l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
00017339 l       .debug_str	00000000 
000319ea l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0001739c l       .debug_str	00000000 
000173ad l       .debug_str	00000000 
0001741f l       .debug_str	00000000 
00017449 l       .debug_str	00000000 
00017487 l       .debug_str	00000000 
0001749a l       .debug_str	00000000 
000174e5 l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
000174ee l       .debug_str	00000000 
00017530 l       .debug_str	00000000 
00018833 l       .debug_str	00000000 
0001756a l       .debug_str	00000000 
000175af l       .debug_str	00000000 
000175cb l       .debug_str	00000000 
0001760e l       .debug_str	00000000 
00017624 l       .debug_str	00000000 
00017689 l       .debug_str	00000000 
000176ee l       .debug_str	00000000 
00017729 l       .debug_str	00000000 
00017736 l       .debug_str	00000000 
00016a60 l       .debug_str	00000000 
00017769 l       .debug_str	00000000 
00014cc6 l       .debug_str	00000000 
000177af l       .debug_str	00000000 
00006bb2 l       .debug_str	00000000 
000177f5 l       .debug_str	00000000 
00014f55 l       .debug_str	00000000 
0001783c l       .debug_str	00000000 
00017885 l       .debug_str	00000000 
000178fe l       .debug_str	00000000 
0000c9d7 l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00017908 l       .debug_str	00000000 
0001794d l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
000179a5 l       .debug_str	00000000 
00002dc0 l       .debug_str	00000000 
000179bd l       .debug_str	00000000 
000179f8 l       .debug_str	00000000 
00017a1c l       .debug_str	00000000 
00017a42 l       .debug_str	00000000 
00017a7d l       .debug_str	00000000 
00017aa0 l       .debug_str	00000000 
00017ac5 l       .debug_str	00000000 
00017b02 l       .debug_str	00000000 
00017b19 l       .debug_str	00000000 
00017b56 l       .debug_str	00000000 
00017b6d l       .debug_str	00000000 
00017bbe l       .debug_str	00000000 
00017bdc l       .debug_str	00000000 
00003e07 l       .debug_str	00000000 
00017c37 l       .debug_str	00000000 
00017c9a l       .debug_str	00000000 
00017cdc l       .debug_str	00000000 
00017d40 l       .debug_str	00000000 
00017d4a l       .debug_str	00000000 
00006f45 l       .debug_str	00000000 
00017db7 l       .debug_str	00000000 
00014fc0 l       .debug_str	00000000 
00017e19 l       .debug_str	00000000 
00017e27 l       .debug_str	00000000 
00017e92 l       .debug_str	00000000 
00017eac l       .debug_str	00000000 
00017ec2 l       .debug_str	00000000 
00017f2d l       .debug_str	00000000 
00017f3d l       .debug_str	00000000 
00017fa9 l       .debug_str	00000000 
00017fbb l       .debug_str	00000000 
00018027 l       .debug_str	00000000 
00018038 l       .debug_str	00000000 
0001809f l       .debug_str	00000000 
000180d7 l       .debug_str	00000000 
00018141 l       .debug_str	00000000 
000181c9 l       .debug_str	00000000 
0001823d l       .debug_str	00000000 
00018246 l       .debug_str	00000000 
000182c8 l       .debug_str	00000000 
000182df l       .debug_str	00000000 
0001831d l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00031c5c l       .debug_str	00000000 
000334dc l       .debug_str	00000000 
00018330 l       .debug_str	00000000 
0001833f l       .debug_str	00000000 
0001837d l       .debug_str	00000000 
00018390 l       .debug_str	00000000 
000183bc l       .debug_str	00000000 
000183c5 l       .debug_str	00000000 
000183f1 l       .debug_str	00000000 
000183fa l       .debug_str	00000000 
0001845a l       .debug_str	00000000 
0003169d l       .debug_str	00000000 
000184ab l       .debug_str	00000000 
000184fc l       .debug_str	00000000 
00018559 l       .debug_str	00000000 
000185b7 l       .debug_str	00000000 
000188a3 l       .debug_str	00000000 
00018608 l       .debug_str	00000000 
00018631 l       .debug_str	00000000 
00018694 l       .debug_str	00000000 
000186a5 l       .debug_str	00000000 
000186b2 l       .debug_str	00000000 
000186c7 l       .debug_str	00000000 
00018718 l       .debug_str	00000000 
00018741 l       .debug_str	00000000 
000187a4 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
000187c1 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
0000727d l       .debug_str	00000000 
000187c8 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00036fd7 l       .debug_str	00000000 
00021afa l       .debug_str	00000000 
00003a15 l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
00057937 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0005dd87 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0000d93c l       .debug_str	00000000 
000187e9 l       .debug_str	00000000 
0000dae8 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
000187ed l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
000167bd l       .debug_str	00000000 
000187ff l       .debug_str	00000000 
00018804 l       .debug_str	00000000 
00018809 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00007272 l       .debug_str	00000000 
0001882e l       .debug_str	00000000 
0001886a l       .debug_str	00000000 
0005a8ee l       .debug_str	00000000 
0003ba03 l       .debug_str	00000000 
00018880 l       .debug_str	00000000 
00018889 l       .debug_str	00000000 
00035008 l       .debug_str	00000000 
000589d3 l       .debug_str	00000000 
0004ac1a l       .debug_str	00000000 
00018892 l       .debug_str	00000000 
00018896 l       .debug_str	00000000 
000352ce l       .debug_str	00000000 
00005eef l       .debug_str	00000000 
00005f03 l       .debug_str	00000000 
0000cc9c l       .debug_str	00000000 
00005f0c l       .debug_str	00000000 
00005f17 l       .debug_str	00000000 
0000cc98 l       .debug_str	00000000 
0000cca3 l       .debug_str	00000000 
00005f22 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000188b8 l       .debug_str	00000000 
000188b3 l       .debug_str	00000000 
00058754 l       .debug_str	00000000 
000188bc l       .debug_str	00000000 
00036da5 l       .debug_str	00000000 
000188c5 l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0003985f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00016590 l       .debug_str	00000000 
000165ea l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00016639 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00031907 l       .debug_str	00000000 
00016644 l       .debug_str	00000000 
000187da l       .debug_str	00000000 
000187cd l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
0001664c l       .debug_str	00000000 
00016659 l       .debug_str	00000000 
00016662 l       .debug_str	00000000 
00057851 l       .debug_str	00000000 
00031cd3 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0001666c l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000062a7 l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000334b6 l       .debug_str	00000000 
000062af l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007a3d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00007813 l       .debug_str	00000000 
0001679c l       .debug_str	00000000 
0001887a l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
0005a97c l       .debug_str	00000000 
00002471 l       .debug_str	00000000 
00034330 l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0001884e l       .debug_str	00000000 
00007a6e l       .debug_str	00000000 
00016672 l       .debug_str	00000000 
000166b0 l       .debug_str	00000000 
00007824 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0004455b l       .debug_str	00000000 
0005de01 l       .debug_str	00000000 
000166bf l       .debug_str	00000000 
00007864 l       .debug_str	00000000 
000166e8 l       .debug_str	00000000 
000078a2 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00007aab l       .debug_str	00000000 
0000ca8d l       .debug_str	00000000 
0001671a l       .debug_str	00000000 
0000cfb7 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00016727 l       .debug_str	00000000 
00018818 l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
00016735 l       .debug_str	00000000 
00016777 l       .debug_str	00000000 
0001678a l       .debug_str	00000000 
0005d37d l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
00048c0a l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
000579ec l       .debug_str	00000000 
000167a5 l       .debug_str	00000000 
000167a9 l       .debug_str	00000000 
000167b4 l       .debug_str	00000000 
000167c3 l       .debug_str	00000000 
0001680b l       .debug_str	00000000 
0001682b l       .debug_str	00000000 
00037af1 l       .debug_str	00000000 
00018800 l       .debug_str	00000000 
00016876 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
000168c1 l       .debug_str	00000000 
00016932 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00016940 l       .debug_str	00000000 
0001696e l       .debug_str	00000000 
00016980 l       .debug_str	00000000 
00008817 l       .debug_str	00000000 
000169c8 l       .debug_str	00000000 
000169f8 l       .debug_str	00000000 
00016a23 l       .debug_str	00000000 
00016a5a l       .debug_str	00000000 
00016a73 l       .debug_str	00000000 
00016a7f l       .debug_str	00000000 
00009320 l       .debug_str	00000000 
00016ad0 l       .debug_str	00000000 
0000952f l       .debug_str	00000000 
00016b22 l       .debug_str	00000000 
00009147 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2tupw4qr6cy3al7x
00000c36 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0001dd48 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
0001dc37 l       .debug_str	00000000 
0001891d l       .debug_str	00000000 
00018966 l       .debug_str	00000000 
000022c7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018906 l       .debug_str	00000000 
000034d5 l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
00001adf l       .debug_str	00000000 
00001aea l       .debug_str	00000000 
00001af4 l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
00001afd l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00005de6 l       .debug_str	00000000 
00001b0c l       .debug_str	00000000 
00001b19 l       .debug_str	00000000 
00001b1f l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2zydbnxo7qpu1b5q
00018c02 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00001b19 l       .debug_str	00000000 
00001b1f l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0001dd48 l       .debug_str	00000000 
00018c0f l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
000034ac l       .debug_str	00000000 
00005f5e l       .debug_str	00000000 
00018c15 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
00005f99 l       .debug_str	00000000 
00018c55 l       .debug_str	00000000 
00018cc4 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018906 l       .debug_str	00000000 
000034d5 l       .debug_str	00000000 
000189da l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
0001595a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00015964 l       .debug_str	00000000 
0001596f l       .debug_str	00000000 
00015979 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00015998 l       .debug_str	00000000 
000189e7 l       .debug_str	00000000 
00018a2d l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
0005b311 l       .debug_str	00000000 
00015681 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
0000e75e l       .debug_str	00000000 
00015956 l       .debug_str	00000000 
00018a40 l       .debug_str	00000000 
00058744 l       .debug_str	00000000 
000159c1 l       .debug_str	00000000 
0005e1ec l       .debug_str	00000000 
00018a44 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00018a48 l       .debug_str	00000000 
00001610 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
0005d628 l       .debug_str	00000000 
00018a51 l       .debug_str	00000000 
0005cc80 l       .debug_str	00000000 
0001ab76 l       .debug_str	00000000 
00018a54 l       .debug_str	00000000 
00018a94 l       .debug_str	00000000 
00018aa3 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
00018aeb l       .debug_str	00000000 
00018b32 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00018b40 l       .debug_str	00000000 
00018b84 l       .debug_str	00000000 
00018b8f l       .debug_str	00000000 
00018b98 l       .debug_str	00000000 
00018ba0 l       .debug_str	00000000 
0005a529 l       .debug_str	00000000 
000159d8 l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00018ba9 l       .debug_str	00000000 
00018baf l       .debug_str	00000000 
00018bb8 l       .debug_str	00000000 
00018bc5 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
000418b8 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00018bc8 l       .debug_str	00000000 
00018bdf l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0001d4bd l       .debug_str	00000000 
00018bf5 l       .debug_str	00000000 
00018bfb l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
000034a6 l       .debug_str	00000000 
00021895 l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
00001afd l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00005de6 l       .debug_str	00000000 
0005daa9 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
200000f0 l     O .data	00000008 _ZN22piet_embedded_graphics7display12SPI_SETTINGS17h78a64d1040fbeee1E
20000a1c l     O .bss	00000004 _ZN22piet_embedded_graphics7display14BACKLIGHT_HIGH17hd6bdc29c96588211E
00000000 l    df *ABS*	00000000 32m5mr5zne5f73k7
00018a51 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
0005b311 l       .debug_str	00000000 
00018a40 l       .debug_str	00000000 
0005e1ec l       .debug_str	00000000 
00018a44 l       .debug_str	00000000 
00018a48 l       .debug_str	00000000 
00001610 l       .debug_str	00000000 
0005d628 l       .debug_str	00000000 
0001ab76 l       .debug_str	00000000 
0001ab65 l       .debug_str	00000000 
00059ccf l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0001abb5 l       .debug_str	00000000 
0001abc1 l       .debug_str	00000000 
0001ac5d l       .debug_str	00000000 
0001ac68 l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
00003526 l       .debug_str	00000000 
00005e97 l       .debug_str	00000000 
0001ac71 l       .debug_str	00000000 
0001aca6 l       .debug_str	00000000 
0001a586 l       .debug_str	00000000 
00001b43 l       .debug_str	00000000 
0001ad00 l       .debug_str	00000000 
0001adca l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00018906 l       .debug_str	00000000 
00018ccb l       .debug_str	00000000 
00018cd1 l       .debug_str	00000000 
0001abba l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
00001adf l       .debug_str	00000000 
00001aea l       .debug_str	00000000 
00001af4 l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
00001afd l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00005de6 l       .debug_str	00000000 
00001b0c l       .debug_str	00000000 
00001b19 l       .debug_str	00000000 
00001b1f l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0001dd48 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
0001dca2 l       .debug_str	00000000 
00018cd6 l       .debug_str	00000000 
00018cdd l       .debug_str	00000000 
00018ce5 l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00018cec l       .debug_str	00000000 
00018d09 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00018d4f l       .debug_str	00000000 
00018d60 l       .debug_str	00000000 
00018dd0 l       .debug_str	00000000 
00018e6a l       .debug_str	00000000 
00018f2d l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
0001901a l       .debug_str	00000000 
0001906a l       .debug_str	00000000 
000190c7 l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
0001911b l       .debug_str	00000000 
00019192 l       .debug_str	00000000 
00019216 l       .debug_str	00000000 
00019291 l       .debug_str	00000000 
0001932f l       .debug_str	00000000 
000193da l       .debug_str	00000000 
0001947c l       .debug_str	00000000 
00019541 l       .debug_str	00000000 
00019613 l       .debug_str	00000000 
000196dc l       .debug_str	00000000 
000197c8 l       .debug_str	00000000 
000198c1 l       .debug_str	00000000 
000199b1 l       .debug_str	00000000 
00019ac3 l       .debug_str	00000000 
00019bf2 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002b15c l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027002 l       .debug_str	00000000 
00019d20 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0001abe5 l       .debug_str	00000000 
00019d2c l       .debug_str	00000000 
00019d32 l       .debug_str	00000000 
00019d3b l       .debug_str	00000000 
00019e52 l       .debug_str	00000000 
00019f65 l       .debug_str	00000000 
0001a085 l       .debug_str	00000000 
0001a19c l       .debug_str	00000000 
0001a2d5 l       .debug_str	00000000 
0001a42b l       .debug_str	00000000 
0002b294 l       .debug_str	00000000 
0002711f l       .debug_str	00000000 
0001a580 l       .debug_str	00000000 
0005af8a l       .debug_str	00000000 
0001ad24 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0001a58a l       .debug_str	00000000 
0001a5ed l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
00015681 l       .debug_str	00000000 
0000e75e l       .debug_str	00000000 
00015956 l       .debug_str	00000000 
00058744 l       .debug_str	00000000 
000159c1 l       .debug_str	00000000 
0005cc80 l       .debug_str	00000000 
0001dc37 l       .debug_str	00000000 
0001a6bd l       .debug_str	00000000 
0001a700 l       .debug_str	00000000 
0001a7a5 l       .debug_str	00000000 
0001a7e3 l       .debug_str	00000000 
0001a857 l       .debug_str	00000000 
0001a897 l       .debug_str	00000000 
0001a939 l       .debug_str	00000000 
0001a9c7 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
0001ce31 l       .debug_str	00000000 
0001ce4d l       .debug_str	00000000 
0001aa38 l       .debug_str	00000000 
0001aac8 l       .debug_str	00000000 
0001d544 l       .debug_str	00000000 
0001d4e6 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
000034d5 l       .debug_str	00000000 
0001f2b0 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3eyht9wxrw4fbo0o
0001b7d1 l       .debug_str	00000000 
0001b735 l       .debug_str	00000000 
0001b77b l       .debug_str	00000000 
0001b81a l       .debug_str	00000000 
0001b860 l       .debug_str	00000000 
000159d8 l       .debug_str	00000000 
00000e74 l       .debug_str	00000000 
0001b89a l       .debug_str	00000000 
0001b8e1 l       .debug_str	00000000 
0001b92f l       .debug_str	00000000 
0001b97b l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
000034a6 l       .debug_str	00000000 
00018c02 l       .debug_str	00000000 
00021895 l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
00001afd l       .debug_str	00000000 
00005de6 l       .debug_str	00000000 
0005daa9 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00001b19 l       .debug_str	00000000 
00001b1f l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
0001dd48 l       .debug_str	00000000 
00018c0f l       .debug_str	00000000 
000034ac l       .debug_str	00000000 
00005f5e l       .debug_str	00000000 
00018c15 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
00005f99 l       .debug_str	00000000 
00018c55 l       .debug_str	00000000 
0001b9bb l       .debug_str	00000000 
0001ba67 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0001bb39 l       .debug_str	00000000 
0001ab65 l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0000c9ab l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
0000a47e l       .debug_str	00000000 
0001bb52 l       .debug_str	00000000 
0003ea72 l       .debug_str	00000000 
000073c7 l       .debug_str	00000000 
0003b622 l       .debug_str	00000000 
00018ce5 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
00003a15 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
00027263 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
00001b43 l       .debug_str	00000000 
0002443b l       .debug_str	00000000 
0001bb55 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00024d56 l       .debug_str	00000000 
0001bb5c l       .debug_str	00000000 
0005b312 l       .debug_str	00000000 
00018a41 l       .debug_str	00000000 
000034d5 l       .debug_str	00000000 
0005a529 l       .debug_str	00000000 
000159c6 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0001bb68 l       .debug_str	00000000 
0001bb74 l       .debug_str	00000000 
0001bb80 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0001671a l       .debug_str	00000000 
0005f498 l       .debug_str	00000000 
0001bb8d l       .debug_str	00000000 
0001ac68 l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
00003526 l       .debug_str	00000000 
00005e97 l       .debug_str	00000000 
0001ac71 l       .debug_str	00000000 
0001abb5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0001add3 l       .debug_str	00000000 
0001addc l       .debug_str	00000000 
0001ade6 l       .debug_str	00000000 
0001adf6 l       .debug_str	00000000 
0001bb46 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0001ae07 l       .debug_str	00000000 
00007709 l       .debug_str	00000000 
0001ae13 l       .debug_str	00000000 
0001ae1b l       .debug_str	00000000 
0001ae21 l       .debug_str	00000000 
0001ae27 l       .debug_str	00000000 
0001ae2d l       .debug_str	00000000 
0001ae34 l       .debug_str	00000000 
0001ae3a l       .debug_str	00000000 
0001ae40 l       .debug_str	00000000 
0001ae47 l       .debug_str	00000000 
0001ae4d l       .debug_str	00000000 
0001ae55 l       .debug_str	00000000 
0001ae5c l       .debug_str	00000000 
0001ae62 l       .debug_str	00000000 
0001ae68 l       .debug_str	00000000 
0001ae6e l       .debug_str	00000000 
0001ae74 l       .debug_str	00000000 
0001ae7a l       .debug_str	00000000 
0001ae81 l       .debug_str	00000000 
0001ae88 l       .debug_str	00000000 
0001ae90 l       .debug_str	00000000 
0001ae98 l       .debug_str	00000000 
0001aea0 l       .debug_str	00000000 
0001aea7 l       .debug_str	00000000 
0001aeaf l       .debug_str	00000000 
0001aeb6 l       .debug_str	00000000 
0001aebd l       .debug_str	00000000 
0001aec4 l       .debug_str	00000000 
0001aecb l       .debug_str	00000000 
0001aed2 l       .debug_str	00000000 
0001aed9 l       .debug_str	00000000 
0001aedf l       .debug_str	00000000 
0001aee5 l       .debug_str	00000000 
0001aeeb l       .debug_str	00000000 
0001aef1 l       .debug_str	00000000 
0001aef8 l       .debug_str	00000000 
0001af00 l       .debug_str	00000000 
0001bc86 l       .debug_str	00000000 
00016639 l       .debug_str	00000000 
0005cb85 l       .debug_str	00000000 
0001af08 l       .debug_str	00000000 
0005b311 l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
00015681 l       .debug_str	00000000 
0000e75e l       .debug_str	00000000 
00015956 l       .debug_str	00000000 
00018a40 l       .debug_str	00000000 
00058744 l       .debug_str	00000000 
000159c1 l       .debug_str	00000000 
0005e1ec l       .debug_str	00000000 
00018a44 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00018a48 l       .debug_str	00000000 
00001610 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
0005d628 l       .debug_str	00000000 
00018a51 l       .debug_str	00000000 
0005cc80 l       .debug_str	00000000 
0001ab76 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001af14 l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
0001af1f l       .debug_str	00000000 
0001af5b l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
0001af7a l       .debug_str	00000000 
0001afc8 l       .debug_str	00000000 
0001b009 l       .debug_str	00000000 
0001b075 l       .debug_str	00000000 
0001b0b7 l       .debug_str	00000000 
0001b123 l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00018cec l       .debug_str	00000000 
00018d09 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00018d4f l       .debug_str	00000000 
00018d60 l       .debug_str	00000000 
00018dd0 l       .debug_str	00000000 
00018e6a l       .debug_str	00000000 
00018f2d l       .debug_str	00000000 
00019d3b l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
0001901a l       .debug_str	00000000 
0001906a l       .debug_str	00000000 
000190c7 l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
0001911b l       .debug_str	00000000 
00019192 l       .debug_str	00000000 
00019216 l       .debug_str	00000000 
00019291 l       .debug_str	00000000 
0001932f l       .debug_str	00000000 
000193da l       .debug_str	00000000 
0001947c l       .debug_str	00000000 
00019541 l       .debug_str	00000000 
00019613 l       .debug_str	00000000 
000196dc l       .debug_str	00000000 
000197c8 l       .debug_str	00000000 
000198c1 l       .debug_str	00000000 
00019e52 l       .debug_str	00000000 
00019f65 l       .debug_str	00000000 
0001a085 l       .debug_str	00000000 
0001a19c l       .debug_str	00000000 
0001a2d5 l       .debug_str	00000000 
0001a42b l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002b294 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002711f l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0001b18f l       .debug_str	00000000 
0001b1dd l       .debug_str	00000000 
0001b35d l       .debug_str	00000000 
0001b3ab l       .debug_str	00000000 
0001b3ec l       .debug_str	00000000 
0001b43a l       .debug_str	00000000 
0001b47b l       .debug_str	00000000 
0001b4cb l       .debug_str	00000000 
0001b64d l       .debug_str	00000000 
0001b69e l       .debug_str	00000000 
0001b6e2 l       .debug_str	00000000 
0001f430 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3sr9zgbizuzi7j5h
0001af08 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0001bc6c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
0001ae07 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00007709 l       .debug_str	00000000 
0001ae13 l       .debug_str	00000000 
0001ae1b l       .debug_str	00000000 
0001ae21 l       .debug_str	00000000 
0001ae27 l       .debug_str	00000000 
0001ae2d l       .debug_str	00000000 
0001ae34 l       .debug_str	00000000 
0001ae3a l       .debug_str	00000000 
0001ae40 l       .debug_str	00000000 
0001ae47 l       .debug_str	00000000 
0001ae4d l       .debug_str	00000000 
0001ae55 l       .debug_str	00000000 
0001ae5c l       .debug_str	00000000 
0001ae62 l       .debug_str	00000000 
0001ae68 l       .debug_str	00000000 
0001ae6e l       .debug_str	00000000 
0001ae74 l       .debug_str	00000000 
0001ae7a l       .debug_str	00000000 
0001ae81 l       .debug_str	00000000 
0001ae88 l       .debug_str	00000000 
0001ae90 l       .debug_str	00000000 
0001ae98 l       .debug_str	00000000 
0001aea0 l       .debug_str	00000000 
0001aea7 l       .debug_str	00000000 
0001aeaf l       .debug_str	00000000 
0001aeb6 l       .debug_str	00000000 
0001aebd l       .debug_str	00000000 
0001aec4 l       .debug_str	00000000 
0001aecb l       .debug_str	00000000 
0001aed2 l       .debug_str	00000000 
0001aed9 l       .debug_str	00000000 
0001aedf l       .debug_str	00000000 
0001aee5 l       .debug_str	00000000 
0001aeeb l       .debug_str	00000000 
0001aef1 l       .debug_str	00000000 
0001aef8 l       .debug_str	00000000 
0001af00 l       .debug_str	00000000 
0001bc86 l       .debug_str	00000000 
00016639 l       .debug_str	00000000 
0005cb85 l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
0001bc04 l       .debug_str	00000000 
0001bc40 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 44cnu8660c26myi6
0001bcd6 l       .debug_str	00000000 
000039bb l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
0001bd14 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001bc92 l       .debug_str	00000000 
00011bba l     F .text	0000001e _ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E
00000000 l    df *ABS*	00000000 469um0xjm96v8cgk
0001c39a l       .debug_str	00000000 
0001c9be l       .debug_str	00000000 
0001cb11 l       .debug_str	00000000 
0001cb41 l       .debug_str	00000000 
00018baf l       .debug_str	00000000 
00018bb8 l       .debug_str	00000000 
00018bc5 l       .debug_str	00000000 
000418b8 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00018bc8 l       .debug_str	00000000 
00018bdf l       .debug_str	00000000 
0001d4bd l       .debug_str	00000000 
0001d4a0 l       .debug_str	00000000 
0001cc68 l       .debug_str	00000000 
0001cc98 l       .debug_str	00000000 
0001d544 l       .debug_str	00000000 
0001d4e6 l       .debug_str	00000000 
0001ccda l       .debug_str	00000000 
0001cd0a l       .debug_str	00000000 
0001cd59 l       .debug_str	00000000 
0001cd89 l       .debug_str	00000000 
0001cd9b l       .debug_str	00000000 
0001cdcb l       .debug_str	00000000 
0001ce04 l       .debug_str	00000000 
0001ce0d l       .debug_str	00000000 
0001ce3a l       .debug_str	00000000 
0001ce7d l       .debug_str	00000000 
0001ce93 l       .debug_str	00000000 
0001cfd7 l       .debug_str	00000000 
0001d073 l       .debug_str	00000000 
0001d13d l       .debug_str	00000000 
0001d156 l       .debug_str	00000000 
0001d235 l       .debug_str	00000000 
0001d37e l       .debug_str	00000000 
0001d49b l       .debug_str	00000000 
0001d4d3 l       .debug_str	00000000 
0001d518 l       .debug_str	00000000 
0001d520 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0000349f l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
0001bd1a l       .debug_str	00000000 
0001bd1f l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
0001bd44 l       .debug_str	00000000 
00003ac5 l       .debug_str	00000000 
0001bd4b l       .debug_str	00000000 
0001bd86 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
0001bdbd l       .debug_str	00000000 
0001bded l       .debug_str	00000000 
00018906 l       .debug_str	00000000 
00018ccb l       .debug_str	00000000 
00018cd6 l       .debug_str	00000000 
00018cdd l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00018ce5 l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00018cec l       .debug_str	00000000 
00018d09 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00018d4f l       .debug_str	00000000 
00018d60 l       .debug_str	00000000 
00018dd0 l       .debug_str	00000000 
00018e6a l       .debug_str	00000000 
00018f2d l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
0001901a l       .debug_str	00000000 
0001906a l       .debug_str	00000000 
000190c7 l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
0001911b l       .debug_str	00000000 
00019192 l       .debug_str	00000000 
00019216 l       .debug_str	00000000 
00019291 l       .debug_str	00000000 
0001932f l       .debug_str	00000000 
000193da l       .debug_str	00000000 
0001947c l       .debug_str	00000000 
00019541 l       .debug_str	00000000 
00019613 l       .debug_str	00000000 
000196dc l       .debug_str	00000000 
000197c8 l       .debug_str	00000000 
000198c1 l       .debug_str	00000000 
000199b1 l       .debug_str	00000000 
00019ac3 l       .debug_str	00000000 
00019bf2 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002b15c l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027002 l       .debug_str	00000000 
0001ce31 l       .debug_str	00000000 
0001be00 l       .debug_str	00000000 
0001be30 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
0001ce4d l       .debug_str	00000000 
0001be67 l       .debug_str	00000000 
0001be97 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
0002144a l       .debug_str	00000000 
0001bee4 l       .debug_str	00000000 
0001bf14 l       .debug_str	00000000 
00019d3b l       .debug_str	00000000 
00019e52 l       .debug_str	00000000 
00019f65 l       .debug_str	00000000 
0001a085 l       .debug_str	00000000 
0001a19c l       .debug_str	00000000 
0001a2d5 l       .debug_str	00000000 
0001a42b l       .debug_str	00000000 
0002b294 l       .debug_str	00000000 
0002711f l       .debug_str	00000000 
0001bf34 l       .debug_str	00000000 
0001bf64 l       .debug_str	00000000 
0001abba l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
00001adf l       .debug_str	00000000 
00001aea l       .debug_str	00000000 
00001af4 l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
00001afd l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00005de6 l       .debug_str	00000000 
00001b0c l       .debug_str	00000000 
00001b19 l       .debug_str	00000000 
00001b1f l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0001dd48 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
0001dca2 l       .debug_str	00000000 
00019d20 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0001abe5 l       .debug_str	00000000 
0001c0b2 l       .debug_str	00000000 
0001c0e2 l       .debug_str	00000000 
00018cd1 l       .debug_str	00000000 
00019d2c l       .debug_str	00000000 
00019d32 l       .debug_str	00000000 
0001a580 l       .debug_str	00000000 
0005af8a l       .debug_str	00000000 
0001ad24 l       .debug_str	00000000 
0001c188 l       .debug_str	00000000 
0001c1b8 l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
0001c292 l       .debug_str	00000000 
0001c2c2 l       .debug_str	00000000 
0001c2e5 l       .debug_str	00000000 
0001c312 l       .debug_str	00000000 
0001c333 l       .debug_str	00000000 
0001c43a l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
0001c514 l       .debug_str	00000000 
0001c58b l       .debug_str	00000000 
0001c60f l       .debug_str	00000000 
0001c68a l       .debug_str	00000000 
0001c728 l       .debug_str	00000000 
0001c7d3 l       .debug_str	00000000 
0002866e l       .debug_str	00000000 
00027da5 l       .debug_str	00000000 
000280dc l       .debug_str	00000000 
0002b062 l       .debug_str	00000000 
00026cca l       .debug_str	00000000 
0001c875 l       .debug_str	00000000 
0001c8a5 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
00027263 l       .debug_str	00000000 
0001c98e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 49htiubyezwzqodr
000584e9 l       .debug_str	00000000 
0001d54f l       .debug_str	00000000 
0001d580 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
0001d589 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53kqumdi8360wwys
0001db54 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
0001ac68 l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
00003526 l       .debug_str	00000000 
00005e97 l       .debug_str	00000000 
0001ac71 l       .debug_str	00000000 
0001aca6 l       .debug_str	00000000 
0001d9d0 l       .debug_str	00000000 
0001da8d l       .debug_str	00000000 
0001dac8 l       .debug_str	00000000 
0001db21 l       .debug_str	00000000 
0001dbd7 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0001dc0c l       .debug_str	00000000 
0001dc70 l       .debug_str	00000000 
00001b43 l       .debug_str	00000000 
0001dc73 l       .debug_str	00000000 
00019d26 l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
0001dce3 l       .debug_str	00000000 
00024d73 l       .debug_str	00000000 
00057b62 l       .debug_str	00000000 
0005f482 l       .debug_str	00000000 
0001dd1d l       .debug_str	00000000 
0001dd20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00005f22 l       .debug_str	00000000 
00005d86 l       .debug_str	00000000 
00005f2d l       .debug_str	00000000 
0000ccaf l       .debug_str	00000000 
0001dd2d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
00001adf l       .debug_str	00000000 
00001aea l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
00001af4 l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
00001afd l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00005de6 l       .debug_str	00000000 
00001b0c l       .debug_str	00000000 
00001b19 l       .debug_str	00000000 
00001b1f l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0001dd48 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
0001dc37 l       .debug_str	00000000 
0001d5db l       .debug_str	00000000 
0001d678 l       .debug_str	00000000 
0001d6b1 l       .debug_str	00000000 
0001d750 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0001dca2 l       .debug_str	00000000 
0001d789 l       .debug_str	00000000 
0001d826 l       .debug_str	00000000 
0001d85a l       .debug_str	00000000 
0001d8fd l       .debug_str	00000000 
0001d99c l       .debug_str	00000000 
0001f590 l     O .text	0000001c str.0
0001f5c0 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 tool5db1zbl71ep
0001dd2d l       .debug_str	00000000 
0001dd48 l       .debug_str	00000000 
0001ddec l       .debug_str	00000000 
0001de61 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00005f22 l       .debug_str	00000000 
0001de98 l       .debug_str	00000000 
00005f2d l       .debug_str	00000000 
0000ccaf l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
00001b19 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0001dd7d l       .debug_str	00000000 
0001dbd7 l       .debug_str	00000000 
00001b1f l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1vm1jsf9206jqt1a
0001ed35 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001dfef l       .debug_str	00000000 
0001dffb l       .debug_str	00000000 
0001e0bc l       .debug_str	00000000 
00024d3b l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0001bc6c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001dedd l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
0001ae07 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00007709 l       .debug_str	00000000 
0001ae13 l       .debug_str	00000000 
0001ae1b l       .debug_str	00000000 
0001ae21 l       .debug_str	00000000 
0001ae27 l       .debug_str	00000000 
0001ae2d l       .debug_str	00000000 
0001ae34 l       .debug_str	00000000 
0001ae3a l       .debug_str	00000000 
0001ae40 l       .debug_str	00000000 
0001ae47 l       .debug_str	00000000 
0001ae4d l       .debug_str	00000000 
0001ae55 l       .debug_str	00000000 
0001ae5c l       .debug_str	00000000 
0001ae62 l       .debug_str	00000000 
0001ae68 l       .debug_str	00000000 
0001ae6e l       .debug_str	00000000 
0001ae74 l       .debug_str	00000000 
0001ae7a l       .debug_str	00000000 
0001ae81 l       .debug_str	00000000 
0001ae88 l       .debug_str	00000000 
0001ae90 l       .debug_str	00000000 
0001ae98 l       .debug_str	00000000 
0001aea0 l       .debug_str	00000000 
0001aea7 l       .debug_str	00000000 
0001aeaf l       .debug_str	00000000 
0001aeb6 l       .debug_str	00000000 
0001aebd l       .debug_str	00000000 
0001aec4 l       .debug_str	00000000 
0001aecb l       .debug_str	00000000 
0001aed2 l       .debug_str	00000000 
0001aed9 l       .debug_str	00000000 
0001aedf l       .debug_str	00000000 
0001aee5 l       .debug_str	00000000 
0001aeeb l       .debug_str	00000000 
0001aef1 l       .debug_str	00000000 
0001aef8 l       .debug_str	00000000 
0001af00 l       .debug_str	00000000 
0001bc86 l       .debug_str	00000000 
0001df01 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001df27 l       .debug_str	00000000 
0001dfe8 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3on1efjgx1q5grpf
00024d3b l       .debug_str	00000000 
0001e0bc l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0001bb39 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001dedd l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0001add3 l       .debug_str	00000000 
0001addc l       .debug_str	00000000 
0001ade6 l       .debug_str	00000000 
0001adf6 l       .debug_str	00000000 
0001bb46 l       .debug_str	00000000 
0001e0c3 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001e0e9 l       .debug_str	00000000 
0001dfe8 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001dfef l       .debug_str	00000000 
0001e190 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dxw5xp80tje79rx
00001b71 l       .debug_str	00000000 
0001e287 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001dedd l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001dfef l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
0001ae07 l       .debug_str	00000000 
0001df01 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001e0bc l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
0001e237 l       .debug_str	00000000 
0001e270 l       .debug_str	00000000 
00024d3b l       .debug_str	00000000 
0001e0c3 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 t2y6wwi1wx5h1fq
0000d930 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001dedd l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
0001ae07 l       .debug_str	00000000 
0001df01 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
0001e0bc l       .debug_str	00000000 
0001e2c0 l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1dj5xwzbw170pcth
00033a4f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001e39f l       .debug_str	00000000 
00059da4 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1h94gy75t1lfyk2m
00000f66 l       .debug_str	00000000 
0001e40e l       .debug_str	00000000 
0001e44e l       .debug_str	00000000 
0000eee3 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00003ab6 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00040335 l       .debug_str	00000000 
000013b3 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d1f2 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00057c37 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d2d4 l       .debug_str	00000000 
0005e02d l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010d81 l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000159b l       .debug_str	00000000 
000015a4 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
0005b57c l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000015ad l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
00001605 l       .debug_str	00000000 
000015ec l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00010ce0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 21g9i1epq5ht4p79
0000c922 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005785d l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
0002144a l       .debug_str	00000000 
00001ba6 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
0000cbfc l       .debug_str	00000000 
00032129 l       .debug_str	00000000 
00001bab l       .debug_str	00000000 
0000ca0e l       .debug_str	00000000 
00001ba2 l       .debug_str	00000000 
0000cc02 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001e495 l       .debug_str	00000000 
0000663b l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000ca08 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 22m4u7gnp4iz6z75
0000cae1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000075d2 l       .debug_str	00000000 
000075d7 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000775a l       .debug_str	00000000 
00007762 l       .debug_str	00000000 
00015969 l       .debug_str	00000000 
0000776a l       .debug_str	00000000 
00007772 l       .debug_str	00000000 
00007779 l       .debug_str	00000000 
00003702 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
000075de l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000caa6 l       .debug_str	00000000 
0000caf6 l       .debug_str	00000000 
0001e4fe l       .debug_str	00000000 
00031ad0 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2jghko95f1fcw2kw
0001e6fe l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
0001e57d l       .debug_str	00000000 
0000659a l       .debug_str	00000000 
0001e5c2 l       .debug_str	00000000 
0001e607 l       .debug_str	00000000 
0001e614 l       .debug_str	00000000 
0001e659 l       .debug_str	00000000 
0001e666 l       .debug_str	00000000 
00008817 l       .debug_str	00000000 
0001e6ab l       .debug_str	00000000 
000066dc l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0001e6f3 l       .debug_str	00000000 
00016580 l       .debug_str	00000000 
0001e746 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
0001e78c l       .debug_str	00000000 
0001e7d2 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000727d l       .debug_str	00000000 
0005a8ee l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001e539 l       .debug_str	00000000 
00006685 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2t4h7x9pofzwxo58
0001e8ad l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
0001e8ec l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
0000196d l       .debug_str	00000000 
0001e95f l       .debug_str	00000000 
0001e99e l       .debug_str	00000000 
0001ea7c l       .debug_str	00000000 
0001e9db l       .debug_str	00000000 
0001ea3e l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0001ea65 l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
00002471 l       .debug_str	00000000 
00034330 l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0001e818 l       .debug_str	00000000 
0001823d l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00001b56 l       .debug_str	00000000 
0000f38d l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
0000285f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 31djkeejljxsexfi
00005f22 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001ea86 l       .debug_str	00000000 
000319ea l       .debug_str	00000000 
0001bd1a l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
0001eae9 l       .debug_str	00000000 
0001eadd l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
0001eaf0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 44vzahdamekpfupi
00007261 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001eafb l       .debug_str	00000000 
00007253 l       .debug_str	00000000 
0000635c l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 48kp7dqlhcnw98ww
0001492d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
00014bc1 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001eb4d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4jc7ajwyicjft5df
00006b64 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001eb7d l       .debug_str	00000000 
0001eba3 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 xzrg48g93icjbc1
0005a053 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
0001ebac l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001ebbf l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0001ec4b l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
0001ec54 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
0001ec64 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.8j8txwjh-cgu.0
0002009c l       .debug_str	00000000 
0001f190 l       .debug_str	00000000 
0001f1ba l       .debug_str	00000000 
00005d0c l       .debug_str	00000000 
0001f208 l       .debug_str	00000000 
00016531 l       .debug_str	00000000 
0001f255 l       .debug_str	00000000 
0001f2af l       .debug_str	00000000 
0001f2bd l       .debug_str	00000000 
0001f310 l       .debug_str	00000000 
0001f318 l       .debug_str	00000000 
0000635c l       .debug_str	00000000 
0001f36d l       .debug_str	00000000 
000063fa l       .debug_str	00000000 
0001f3ab l       .debug_str	00000000 
0001f40a l       .debug_str	00000000 
00002dbd l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0001f46f l       .debug_str	00000000 
00003796 l       .debug_str	00000000 
0001f4a0 l       .debug_str	00000000 
00002e4a l       .debug_str	00000000 
0001f4d2 l       .debug_str	00000000 
0001696e l       .debug_str	00000000 
0001f500 l       .debug_str	00000000 
000064f7 l       .debug_str	00000000 
0001f526 l       .debug_str	00000000 
00006685 l       .debug_str	00000000 
0001f56d l       .debug_str	00000000 
000066dc l       .debug_str	00000000 
000066ec l       .debug_str	00000000 
0001f5b8 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0001f5be l       .debug_str	00000000 
0001f64a l       .debug_str	00000000 
0001f665 l       .debug_str	00000000 
0001f695 l       .debug_str	00000000 
0001f6ca l       .debug_str	00000000 
0001f6fa l       .debug_str	00000000 
0001f710 l       .debug_str	00000000 
00006730 l       .debug_str	00000000 
0001f746 l       .debug_str	00000000 
00006785 l       .debug_str	00000000 
0001f780 l       .debug_str	00000000 
0001f7bc l       .debug_str	00000000 
00006806 l       .debug_str	00000000 
0001f7e2 l       .debug_str	00000000 
00006839 l       .debug_str	00000000 
0001f809 l       .debug_str	00000000 
000092b0 l       .debug_str	00000000 
0001f857 l       .debug_str	00000000 
00009320 l       .debug_str	00000000 
0001f8a8 l       .debug_str	00000000 
0000952f l       .debug_str	00000000 
0001f8fa l       .debug_str	00000000 
00009147 l       .debug_str	00000000 
0001f945 l       .debug_str	00000000 
00006c03 l       .debug_str	00000000 
0001f988 l       .debug_str	00000000 
000092a7 l       .debug_str	00000000 
0001f9e4 l       .debug_str	00000000 
00009317 l       .debug_str	00000000 
0001fa43 l       .debug_str	00000000 
0001fa99 l       .debug_str	00000000 
00006a21 l       .debug_str	00000000 
0001fb2e l       .debug_str	00000000 
0001fbc8 l       .debug_str	00000000 
0001fbd9 l       .debug_str	00000000 
0001fbfe l       .debug_str	00000000 
0001fca7 l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
0001fcb8 l       .debug_str	00000000 
0001fd40 l       .debug_str	00000000 
0001fcf7 l       .debug_str	00000000 
0001fd3b l       .debug_str	00000000 
0001fd85 l       .debug_str	00000000 
0001fdc6 l       .debug_str	00000000 
0001fdeb l       .debug_str	00000000 
0001fe3c l       .debug_str	00000000 
0001fe81 l       .debug_str	00000000 
0001fed4 l       .debug_str	00000000 
0001ff35 l       .debug_str	00000000 
0001ff9c l       .debug_str	00000000 
00014f55 l       .debug_str	00000000 
0001ffe3 l       .debug_str	00000000 
0002002e l       .debug_str	00000000 
0002003b l       .debug_str	00000000 
00020115 l       .debug_str	00000000 
0002010d l       .debug_str	00000000 
0002011d l       .debug_str	00000000 
0000f23e l       .debug_str	00000000 
00020139 l       .debug_str	00000000 
000201ae l       .debug_str	00000000 
000201d9 l       .debug_str	00000000 
000178fe l       .debug_str	00000000 
00020252 l       .debug_str	00000000 
00020278 l       .debug_str	00000000 
000202b1 l       .debug_str	00000000 
00002244 l       .debug_str	00000000 
000202c9 l       .debug_str	00000000 
00020302 l       .debug_str	00000000 
0002033a l       .debug_str	00000000 
00002dc0 l       .debug_str	00000000 
00020373 l       .debug_str	00000000 
000203ae l       .debug_str	00000000 
000203f2 l       .debug_str	00000000 
00020438 l       .debug_str	00000000 
00020474 l       .debug_str	00000000 
0002049c l       .debug_str	00000000 
000204d8 l       .debug_str	00000000 
000204fc l       .debug_str	00000000 
00020559 l       .debug_str	00000000 
0002056d l       .debug_str	00000000 
00006cce l       .debug_str	00000000 
0002144a l       .debug_str	00000000 
000205be l       .debug_str	00000000 
0002060f l       .debug_str	00000000 
00020626 l       .debug_str	00000000 
00017bbe l       .debug_str	00000000 
00020677 l       .debug_str	00000000 
00006d2b l       .debug_str	00000000 
000206c8 l       .debug_str	00000000 
00006d95 l       .debug_str	00000000 
00020720 l       .debug_str	00000000 
00020783 l       .debug_str	00000000 
000207ae l       .debug_str	00000000 
00020811 l       .debug_str	00000000 
00020886 l       .debug_str	00000000 
00017d40 l       .debug_str	00000000 
000208ea l       .debug_str	00000000 
00020955 l       .debug_str	00000000 
00020964 l       .debug_str	00000000 
000209d0 l       .debug_str	00000000 
00020a02 l       .debug_str	00000000 
00020a28 l       .debug_str	00000000 
00020a97 l       .debug_str	00000000 
00020ab7 l       .debug_str	00000000 
00020b27 l       .debug_str	00000000 
00020b48 l       .debug_str	00000000 
0001823d l       .debug_str	00000000 
00020bbc l       .debug_str	00000000 
00020c3c l       .debug_str	00000000 
00020c82 l       .debug_str	00000000 
00020cab l       .debug_str	00000000 
00020cb2 l       .debug_str	00000000 
00020cea l       .debug_str	00000000 
00020d29 l       .debug_str	00000000 
00020d30 l       .debug_str	00000000 
00020da9 l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
00020e40 l       .debug_str	00000000 
00020ebe l       .debug_str	00000000 
00020ec8 l       .debug_str	00000000 
00020f56 l       .debug_str	00000000 
00021002 l       .debug_str	00000000 
00021049 l       .debug_str	00000000 
00021056 l       .debug_str	00000000 
000210a3 l       .debug_str	00000000 
000210b6 l       .debug_str	00000000 
00021108 l       .debug_str	00000000 
00021178 l       .debug_str	00000000 
0001eed8 l       .debug_str	00000000 
000211d8 l       .debug_str	00000000 
000211e9 l       .debug_str	00000000 
0002124e l       .debug_str	00000000 
0002127e l       .debug_str	00000000 
00021287 l       .debug_str	00000000 
000212c3 l       .debug_str	00000000 
000212d7 l       .debug_str	00000000 
00021312 l       .debug_str	00000000 
00021358 l       .debug_str	00000000 
00021376 l       .debug_str	00000000 
000213a6 l       .debug_str	00000000 
000213af l       .debug_str	00000000 
000213e9 l       .debug_str	00000000 
000213fb l       .debug_str	00000000 
00021429 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00021430 l       .debug_str	00000000 
0002143c l       .debug_str	00000000 
00021446 l       .debug_str	00000000 
00021450 l       .debug_str	00000000 
00021473 l       .debug_str	00000000 
000319ea l       .debug_str	00000000 
000214c8 l       .debug_str	00000000 
00021528 l       .debug_str	00000000 
00021534 l       .debug_str	00000000 
00021584 l       .debug_str	00000000 
000215e7 l       .debug_str	00000000 
0002164e l       .debug_str	00000000 
000216bd l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
00002dbc l       .debug_str	00000000 
0002174d l       .debug_str	00000000 
00059c1d l       .debug_str	00000000 
0004e17c l       .debug_str	00000000 
00015969 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
00007253 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0000725a l       .debug_str	00000000 
00058b61 l       .debug_str	00000000 
00007267 l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00005d14 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00007272 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0000727d l       .debug_str	00000000 
0005a8ee l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
00021774 l       .debug_str	00000000 
0002179f l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0000d93c l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00007281 l       .debug_str	00000000 
000072bb l       .debug_str	00000000 
000072f4 l       .debug_str	00000000 
00007303 l       .debug_str	00000000 
00007346 l       .debug_str	00000000 
00059e32 l       .debug_str	00000000 
000367bd l       .debug_str	00000000 
0005b857 l       .debug_str	00000000 
0000738e l       .debug_str	00000000 
000217ab l       .debug_str	00000000 
00020ec3 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
000217cb l       .debug_str	00000000 
0004455b l       .debug_str	00000000 
00021806 l       .debug_str	00000000 
0002180d l       .debug_str	00000000 
00035157 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
00021895 l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
00021afa l       .debug_str	00000000 
0002186f l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
00003a15 l       .debug_str	00000000 
00021891 l       .debug_str	00000000 
00005eef l       .debug_str	00000000 
00005f03 l       .debug_str	00000000 
0000cc98 l       .debug_str	00000000 
0000cca3 l       .debug_str	00000000 
00005f22 l       .debug_str	00000000 
0000cc9c l       .debug_str	00000000 
00005f0c l       .debug_str	00000000 
00005f17 l       .debug_str	00000000 
0000cb12 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001ec8b l       .debug_str	00000000 
0001ece3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0001ed30 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
0001ed3a l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0001ed46 l       .debug_str	00000000 
00021785 l       .debug_str	00000000 
00021779 l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
000334dc l       .debug_str	00000000 
0000348c l       .debug_str	00000000 
00003491 l       .debug_str	00000000 
00003497 l       .debug_str	00000000 
00003702 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00002287 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0001666c l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0000614c l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0001ed57 l       .debug_str	00000000 
00006180 l       .debug_str	00000000 
0000618f l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
000061a9 l       .debug_str	00000000 
000072fd l       .debug_str	00000000 
0001ed80 l       .debug_str	00000000 
000061d6 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00006226 l       .debug_str	00000000 
0000623a l       .debug_str	00000000 
0001eda9 l       .debug_str	00000000 
00006299 l       .debug_str	00000000 
000062a7 l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
000334b6 l       .debug_str	00000000 
000062af l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
00002471 l       .debug_str	00000000 
00034330 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00007813 l       .debug_str	00000000 
0001679c l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
00021828 l       .debug_str	00000000 
000418b8 l       .debug_str	00000000 
0000228f l       .debug_str	00000000 
0001edf5 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
0002026a l       .debug_str	00000000 
000217de l       .debug_str	00000000 
00002299 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
000216e1 l       .debug_str	00000000 
00021672 l       .debug_str	00000000 
00007a6e l       .debug_str	00000000 
0001edfb l       .debug_str	00000000 
00007864 l       .debug_str	00000000 
0000cfb7 l       .debug_str	00000000 
00020253 l       .debug_str	00000000 
0001ee24 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
00006dab l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00006db6 l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
0001ee51 l       .debug_str	00000000 
0001ee58 l       .debug_str	00000000 
0001ee82 l       .debug_str	00000000 
000227e4 l       .debug_str	00000000 
0001ee86 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
0001ee8f l       .debug_str	00000000 
00016777 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0001678a l       .debug_str	00000000 
0005d37d l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
00048c0a l       .debug_str	00000000 
0001eed1 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
0001eee0 l       .debug_str	00000000 
00016fef l       .debug_str	00000000 
0002187b l       .debug_str	00000000 
000211e4 l       .debug_str	00000000 
0001eeea l       .debug_str	00000000 
0001ef70 l       .debug_str	00000000 
0001ef7a l       .debug_str	00000000 
0001f00c l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
0001f052 l       .debug_str	00000000 
0001f0e6 l       .debug_str	00000000 
0001f148 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4iim1qfb3qo0ur8y
0002190b l       .debug_str	00000000 
00021909 l       .debug_str	00000000 
0002195c l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00021899 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000218b8 l       .debug_str	00000000 
0000a7cf l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 memchr.2yzmedhn-cgu.0
00021fb7 l       .debug_str	00000000 
0001ee51 l       .debug_str	00000000 
00005e00 l       .debug_str	00000000 
00021a03 l       .debug_str	00000000 
00021a38 l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
00021a44 l       .debug_str	00000000 
00021a7c l       .debug_str	00000000 
00021a96 l       .debug_str	00000000 
00021aa0 l       .debug_str	00000000 
00021aa8 l       .debug_str	00000000 
00021ab0 l       .debug_str	00000000 
00021aec l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00021aff l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00021b07 l       .debug_str	00000000 
00021b3f l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
00021b47 l       .debug_str	00000000 
00021b7f l       .debug_str	00000000 
00021b87 l       .debug_str	00000000 
00021bbf l       .debug_str	00000000 
00021bd9 l       .debug_str	00000000 
00021be2 l       .debug_str	00000000 
00021c1a l       .debug_str	00000000 
00021c23 l       .debug_str	00000000 
00021c5b l       .debug_str	00000000 
0001ef70 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
00021ce3 l       .debug_str	00000000 
00021d2b l       .debug_str	00000000 
00021d36 l       .debug_str	00000000 
000063a4 l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
00021d74 l       .debug_str	00000000 
000084a7 l       .debug_str	00000000 
00021d9d l       .debug_str	00000000 
00021dc2 l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
0000859d l       .debug_str	00000000 
00021e21 l       .debug_str	00000000 
000085ef l       .debug_str	00000000 
00021e49 l       .debug_str	00000000 
00021e7a l       .debug_str	00000000 
00021e86 l       .debug_str	00000000 
00021ee5 l       .debug_str	00000000 
00002e4a l       .debug_str	00000000 
00021f17 l       .debug_str	00000000 
00021f5f l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
00021f6c l       .debug_str	00000000 
00021fc7 l       .debug_str	00000000 
00021fd5 l       .debug_str	00000000 
00008817 l       .debug_str	00000000 
00008a11 l       .debug_str	00000000 
00003ac5 l       .debug_str	00000000 
0002201d l       .debug_str	00000000 
00008a5d l       .debug_str	00000000 
00022058 l       .debug_str	00000000 
00016a5a l       .debug_str	00000000 
00016a73 l       .debug_str	00000000 
0002208f l       .debug_str	00000000 
000092b0 l       .debug_str	00000000 
000220e1 l       .debug_str	00000000 
00009320 l       .debug_str	00000000 
00022136 l       .debug_str	00000000 
00016a60 l       .debug_str	00000000 
00022169 l       .debug_str	00000000 
00006bb2 l       .debug_str	00000000 
000221af l       .debug_str	00000000 
00006c03 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0001739c l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
000221f8 l       .debug_str	00000000 
0002226d l       .debug_str	00000000 
0002229a l       .debug_str	00000000 
00006f45 l       .debug_str	00000000 
00022326 l       .debug_str	00000000 
000223a9 l       .debug_str	00000000 
000223d8 l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
00022425 l       .debug_str	00000000 
00022455 l       .debug_str	00000000 
000224a3 l       .debug_str	00000000 
000224d3 l       .debug_str	00000000 
00022521 l       .debug_str	00000000 
00022551 l       .debug_str	00000000 
0002259f l       .debug_str	00000000 
000225d0 l       .debug_str	00000000 
0002261f l       .debug_str	00000000 
00022650 l       .debug_str	00000000 
0002269f l       .debug_str	00000000 
000226cf l       .debug_str	00000000 
000226d7 l       .debug_str	00000000 
00022707 l       .debug_str	00000000 
0002270f l       .debug_str	00000000 
0002274d l       .debug_str	00000000 
00022762 l       .debug_str	00000000 
00016531 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00014fc8 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00058b61 l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
00005d09 l       .debug_str	00000000 
00005d0c l       .debug_str	00000000 
0002278e l       .debug_str	00000000 
0000727d l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
000227e4 l       .debug_str	00000000 
0001ee86 l       .debug_str	00000000 
000227e3 l       .debug_str	00000000 
000227e7 l       .debug_str	00000000 
000227f1 l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0005a8ee l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000227f7 l       .debug_str	00000000 
000227fb l       .debug_str	00000000 
00021afa l       .debug_str	00000000 
00022800 l       .debug_str	00000000 
000227ff l       .debug_str	00000000 
00022803 l       .debug_str	00000000 
00022807 l       .debug_str	00000000 
0002280c l       .debug_str	00000000 
0002280b l       .debug_str	00000000 
0002280f l       .debug_str	00000000 
00022813 l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00021964 l       .debug_str	00000000 
000219b9 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
000334dc l       .debug_str	00000000 
0000348c l       .debug_str	00000000 
00003491 l       .debug_str	00000000 
00003497 l       .debug_str	00000000 
00003702 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000614c l       .debug_str	00000000 
000363cd l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000349f l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000062af l       .debug_str	00000000 
000130c8 l     F .text	0000006e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE
00000000 l    df *ABS*	00000000 1oq54qwymghnfn7s
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00022817 l       .debug_str	00000000 
00059da4 l       .debug_str	00000000 
0002289c l       .debug_str	00000000 
00022909 l       .debug_str	00000000 
0002297b l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
000229d9 l       .debug_str	00000000 
0004c75b l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1sklumn9v47r13ke
0000c922 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00005d81 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
000229f6 l       .debug_str	00000000 
000319ea l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00022a57 l       .debug_str	00000000 
00002dbd l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2la8qm50nrg05wyh
00022aba l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
0002301f l       .debug_str	00000000 
0002308a l       .debug_str	00000000 
000230d0 l       .debug_str	00000000 
00023142 l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
00023339 l       .debug_str	00000000 
000233ab l       .debug_str	00000000 
000233f5 l       .debug_str	00000000 
0002343f l       .debug_str	00000000 
0002363e l       .debug_str	00000000 
0002367a l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
0000eed4 l       .debug_str	00000000 
000236bf l       .debug_str	00000000 
000236fc l       .debug_str	00000000 
000238ef l       .debug_str	00000000 
0002392c l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00023972 l       .debug_str	00000000 
00023b78 l       .debug_str	00000000 
00023bd1 l       .debug_str	00000000 
00023dd3 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
000022c7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00010de4 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000ffe9 l       .debug_str	00000000 
00010e00 l       .debug_str	00000000 
00010e45 l       .debug_str	00000000 
00010eb3 l       .debug_str	00000000 
00010f4a l       .debug_str	00000000 
0001100a l       .debug_str	00000000 
000110f3 l       .debug_str	00000000 
00011205 l       .debug_str	00000000 
00011340 l       .debug_str	00000000 
000114a4 l       .debug_str	00000000 
00011631 l       .debug_str	00000000 
000117e7 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
00011b6c l       .debug_str	00000000 
00011be3 l       .debug_str	00000000 
00011c67 l       .debug_str	00000000 
00011ce2 l       .debug_str	00000000 
00011d80 l       .debug_str	00000000 
00011e2b l       .debug_str	00000000 
00011ecd l       .debug_str	00000000 
00011f92 l       .debug_str	00000000 
00012064 l       .debug_str	00000000 
0001212d l       .debug_str	00000000 
00012219 l       .debug_str	00000000 
00012312 l       .debug_str	00000000 
00012402 l       .debug_str	00000000 
00012515 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
0001274c l       .debug_str	00000000 
00012886 l       .debug_str	00000000 
000129cd l       .debug_str	00000000 
00012b0b l       .debug_str	00000000 
00012c6c l       .debug_str	00000000 
00012dda l       .debug_str	00000000 
00012f3f l       .debug_str	00000000 
000130c7 l       .debug_str	00000000 
0001325c l       .debug_str	00000000 
000133e8 l       .debug_str	00000000 
00013597 l       .debug_str	00000000 
00013753 l       .debug_str	00000000 
00013906 l       .debug_str	00000000 
00013adc l       .debug_str	00000000 
00013cbf l       .debug_str	00000000 
00013e99 l       .debug_str	00000000 
00014094 l       .debug_str	00000000 
000142ac l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002f30c l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00023986 l       .debug_str	00000000 
00014747 l       .debug_str	00000000 
00014795 l       .debug_str	00000000 
00014800 l       .debug_str	00000000 
0002f298 l       .debug_str	00000000 
00023b8c l       .debug_str	00000000 
00022b22 l       .debug_str	00000000 
00022d14 l       .debug_str	00000000 
00022d7c l       .debug_str	00000000 
00022dc1 l       .debug_str	00000000 
00022e2c l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3hq83qlgyhwbaj1j
00000beb l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00005d6d l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
00016187 l       .debug_str	00000000 
00005d81 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00023e28 l       .debug_str	00000000 
00023e84 l       .debug_str	00000000 
00023ee1 l       .debug_str	00000000 
00023f3e l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4dguvrsipkvuzwcx
0000c9d7 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00014b63 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
000187c1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
000334dc l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00023f9b l       .debug_str	00000000 
0002400c l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00024018 l       .debug_str	00000000 
000178fe l       .debug_str	00000000 
00024089 l       .debug_str	00000000 
00016932 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 501bil2zkh495ov3
000245b1 l       .debug_str	00000000 
00024556 l       .debug_str	00000000 
00024569 l       .debug_str	00000000 
000245a8 l       .debug_str	00000000 
000245c3 l       .debug_str	00000000 
000245fb l       .debug_str	00000000 
0002460f l       .debug_str	00000000 
0001593b l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
00005d6d l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0005dd4e l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
00005d81 l       .debug_str	00000000 
00005cfd l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0005dd4d l       .debug_str	00000000 
0002463b l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
00003ab6 l       .debug_str	00000000 
0002463f l       .debug_str	00000000 
0005d27b l       .debug_str	00000000 
0000ffa9 l       .debug_str	00000000 
0000ffb1 l       .debug_str	00000000 
0000ffba l       .debug_str	00000000 
0000ffc8 l       .debug_str	00000000 
0000ffcf l       .debug_str	00000000 
0000fc4f l       .debug_str	00000000 
0000fc5f l       .debug_str	00000000 
0000fc68 l       .debug_str	00000000 
0000fc76 l       .debug_str	00000000 
0000fc84 l       .debug_str	00000000 
0000fc90 l       .debug_str	00000000 
0000fe9e l       .debug_str	00000000 
0000fc9c l       .debug_str	00000000 
0000fcab l       .debug_str	00000000 
0000fcb3 l       .debug_str	00000000 
0000fccc l       .debug_str	00000000 
0000fcdd l       .debug_str	00000000 
0000fce5 l       .debug_str	00000000 
0000fd18 l       .debug_str	00000000 
0000fcff l       .debug_str	00000000 
0000fd24 l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000fd56 l       .debug_str	00000000 
0000fd3d l       .debug_str	00000000 
0000fd90 l       .debug_str	00000000 
0000fd83 l       .debug_str	00000000 
0000fd6a l       .debug_str	00000000 
0000ffd6 l       .debug_str	00000000 
00010035 l       .debug_str	00000000 
0000ffde l       .debug_str	00000000 
0000fff9 l       .debug_str	00000000 
0001002d l       .debug_str	00000000 
00010014 l       .debug_str	00000000 
0005c359 l       .debug_str	00000000 
0004a9a6 l       .debug_str	00000000 
00016e32 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00059b6b l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00024647 l       .debug_str	00000000 
0005d3af l       .debug_str	00000000 
0005b6ef l       .debug_str	00000000 
000595e1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b312 l       .debug_str	00000000 
000189da l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
0001595a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00015964 l       .debug_str	00000000 
0001596f l       .debug_str	00000000 
00015979 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00015998 l       .debug_str	00000000 
000240fa l       .debug_str	00000000 
0002412b l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00010de4 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
00014747 l       .debug_str	00000000 
00014795 l       .debug_str	00000000 
00014800 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002f298 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00023b8c l       .debug_str	00000000 
00024137 l       .debug_str	00000000 
00024167 l       .debug_str	00000000 
0000ffe9 l       .debug_str	00000000 
00010e00 l       .debug_str	00000000 
00010e45 l       .debug_str	00000000 
00010eb3 l       .debug_str	00000000 
00010f4a l       .debug_str	00000000 
0001100a l       .debug_str	00000000 
000110f3 l       .debug_str	00000000 
00011205 l       .debug_str	00000000 
00011340 l       .debug_str	00000000 
000114a4 l       .debug_str	00000000 
00011631 l       .debug_str	00000000 
000117e7 l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
00011b6c l       .debug_str	00000000 
00011be3 l       .debug_str	00000000 
00011c67 l       .debug_str	00000000 
00011ce2 l       .debug_str	00000000 
00011d80 l       .debug_str	00000000 
00011e2b l       .debug_str	00000000 
00011ecd l       .debug_str	00000000 
00011f92 l       .debug_str	00000000 
00012064 l       .debug_str	00000000 
0001212d l       .debug_str	00000000 
00012219 l       .debug_str	00000000 
00012312 l       .debug_str	00000000 
00012402 l       .debug_str	00000000 
00012515 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
0001274c l       .debug_str	00000000 
00012886 l       .debug_str	00000000 
000129cd l       .debug_str	00000000 
00012b0b l       .debug_str	00000000 
00012c6c l       .debug_str	00000000 
00012dda l       .debug_str	00000000 
00012f3f l       .debug_str	00000000 
000130c7 l       .debug_str	00000000 
0001325c l       .debug_str	00000000 
000133e8 l       .debug_str	00000000 
00013597 l       .debug_str	00000000 
00013753 l       .debug_str	00000000 
00013906 l       .debug_str	00000000 
00013adc l       .debug_str	00000000 
00013cbf l       .debug_str	00000000 
00013e99 l       .debug_str	00000000 
00014094 l       .debug_str	00000000 
000142ac l       .debug_str	00000000 
0002f30c l       .debug_str	00000000 
00023986 l       .debug_str	00000000 
00024174 l       .debug_str	00000000 
000241a5 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00040335 l       .debug_str	00000000 
00010c56 l       .debug_str	00000000 
0000d358 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d1f2 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00057c37 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d2d4 l       .debug_str	00000000 
0005e02d l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010d81 l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
00010bda l       .debug_str	00000000 
0004d2da l       .debug_str	00000000 
00010c5f l       .debug_str	00000000 
00010c6a l       .debug_str	00000000 
000241ad l       .debug_str	00000000 
000241d8 l       .debug_str	00000000 
000241e9 l       .debug_str	00000000 
0002421e l       .debug_str	00000000 
000101da l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
0000fe95 l       .debug_str	00000000 
0000fe9d l       .debug_str	00000000 
0000fd61 l       .debug_str	00000000 
0000fea7 l       .debug_str	00000000 
00010149 l       .debug_str	00000000 
00010130 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
0001012b l       .debug_str	00000000 
00010158 l       .debug_str	00000000 
000101e2 l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b57c l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
000101e8 l       .debug_str	00000000 
0002422d l       .debug_str	00000000 
00024260 l       .debug_str	00000000 
000013b3 l       .debug_str	00000000 
0000159b l       .debug_str	00000000 
000015a4 l       .debug_str	00000000 
000015ad l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
00001605 l       .debug_str	00000000 
00024270 l       .debug_str	00000000 
000242a4 l       .debug_str	00000000 
000242ad l       .debug_str	00000000 
000242d9 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000242e8 l       .debug_str	00000000 
0002431b l       .debug_str	00000000 
00024328 l       .debug_str	00000000 
00024334 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00024365 l       .debug_str	00000000 
0002439a l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
000243ab l       .debug_str	00000000 
000243dd l       .debug_str	00000000 
000243eb l       .debug_str	00000000 
00024429 l       .debug_str	00000000 
00024443 l       .debug_str	00000000 
0002447e l       .debug_str	00000000 
00024495 l       .debug_str	00000000 
000244d1 l       .debug_str	00000000 
000244e9 l       .debug_str	00000000 
0002451f l       .debug_str	00000000 
20000a20 l     O .bss	00000008 _ZN6mynewt3spi11PENDING_CMD17hd08bb758c99a7708E
20000a28 l     O .bss	00000804 _ZN6mynewt3spi12PENDING_DATA17h17892bfe7f609123E
200016b4 l     O .bss	00000000 _ZN6mynewt3spi12SPI_CALLBACK17h9820a4217e4879a6E
200000f8 l     O .data	00000008 _ZN6mynewt3spi12SPI_SETTINGS17h4a4473e27299c06dE
00013e60 l     F .text	0000003a _ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E
2000123c l     O .bss	00000018 _ZN6mynewt3spi14SPI_DATA_QUEUE17h4880c24292cc1218E
200012b4 l     O .bss	00000400 _ZN6mynewt3spi14SPI_TASK_STACK17h041a1fc76b4d16c1E
20001254 l     O .bss	00000010 _ZN6mynewt3spi15SPI_EVENT_QUEUE17h4e2cf68a255fc2fdE
20001234 l     O .bss	00000008 _ZN6mynewt3spi16SPI_THROTTLE_SEM17h1f0932d6e65cb8daE
000140f4 l     F .text	000001ea _ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E
000142de l     F .text	000002e8 _ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E
000148fc l     F .text	00000128 _ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E
000145c6 l     F .text	00000336 _ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E
2000122c l     O .bss	00000008 _ZN6mynewt3spi7SPI_SEM17hd7399e388b8e657cE
20001264 l     O .bss	00000050 _ZN6mynewt3spi8SPI_TASK17h4c45c24ee73ad430E
00014a24 l     F .text	00000054 _ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E
0001f880 l     O .text	00000021 str.0
0001f8c0 l     O .text	0000001c str.1
0001f910 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 n1xzuhnvw82wqrn
0000ffde l       .debug_str	00000000 
0000fff9 l       .debug_str	00000000 
0001002d l       .debug_str	00000000 
00024652 l       .debug_str	00000000 
000246a4 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000062a7 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00040335 l       .debug_str	00000000 
0000ffa9 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000ffb1 l       .debug_str	00000000 
0000ffba l       .debug_str	00000000 
0000ffc8 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
0000ffcf l       .debug_str	00000000 
0000fc4f l       .debug_str	00000000 
0000fc5f l       .debug_str	00000000 
0000fc68 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
0000fc76 l       .debug_str	00000000 
0000fc84 l       .debug_str	00000000 
0000fc90 l       .debug_str	00000000 
0000fe9e l       .debug_str	00000000 
0000fc9c l       .debug_str	00000000 
0000fcab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000fcb3 l       .debug_str	00000000 
0000fccc l       .debug_str	00000000 
0000d358 l       .debug_str	00000000 
0000fcdd l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
0000fce5 l       .debug_str	00000000 
0000fd18 l       .debug_str	00000000 
0000fcff l       .debug_str	00000000 
0000fd24 l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000fd56 l       .debug_str	00000000 
0000fd3d l       .debug_str	00000000 
0000fd61 l       .debug_str	00000000 
0000fd90 l       .debug_str	00000000 
0000fd83 l       .debug_str	00000000 
0000fd6a l       .debug_str	00000000 
0000ffd6 l       .debug_str	00000000 
00010014 l       .debug_str	00000000 
00010035 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000ffe9 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19c5s2vweequjzfw
0001bd1a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000246c9 l       .debug_str	00000000 
000246f2 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00024783 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000246ff l       .debug_str	00000000 
00007864 l       .debug_str	00000000 
00016639 l       .debug_str	00000000 
0005cb85 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00024728 l       .debug_str	00000000 
0002477d l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1bm86yaetip2rc3f
00024a64 l       .debug_str	00000000 
000248cc l       .debug_str	00000000 
00024908 l       .debug_str	00000000 
00024924 l       .debug_str	00000000 
00024960 l       .debug_str	00000000 
00024996 l       .debug_str	00000000 
000249d2 l       .debug_str	00000000 
000249dd l       .debug_str	00000000 
00024a19 l       .debug_str	00000000 
00024a27 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00024a9b l       .debug_str	00000000 
00024ad8 l       .debug_str	00000000 
00024ae7 l       .debug_str	00000000 
00024b24 l       .debug_str	00000000 
00024b67 l       .debug_str	00000000 
00024ba4 l       .debug_str	00000000 
0001bd1f l       .debug_str	00000000 
00024bdb l       .debug_str	00000000 
00024c19 l       .debug_str	00000000 
00024c50 l       .debug_str	00000000 
00024c8f l       .debug_str	00000000 
00024cc8 l       .debug_str	00000000 
0001dbd7 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00024d2c l       .debug_str	00000000 
0000eee3 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001de98 l       .debug_str	00000000 
00024d47 l       .debug_str	00000000 
00024d64 l       .debug_str	00000000 
0001eed8 l       .debug_str	00000000 
00005e09 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
0001dce3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00024d73 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00024d3b l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
00024787 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
00024d56 l       .debug_str	00000000 
0001bd1a l       .debug_str	00000000 
000247a3 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001ac68 l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
00003526 l       .debug_str	00000000 
00005e97 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
0001ac71 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00001adf l       .debug_str	00000000 
00001aea l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
000247b0 l       .debug_str	00000000 
000247e9 l       .debug_str	00000000 
0001aca6 l       .debug_str	00000000 
00024884 l       .debug_str	00000000 
000248c0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1i10ukgv8hgyc1v7
0005c691 l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
0002584d l       .debug_str	00000000 
00025854 l       .debug_str	00000000 
000258bf l       .debug_str	00000000 
000259f0 l       .debug_str	00000000 
00025a5d l       .debug_str	00000000 
00025acf l       .debug_str	00000000 
00025bdd l       .debug_str	00000000 
00025be8 l       .debug_str	00000000 
00025c5a l       .debug_str	00000000 
00025d8f l       .debug_str	00000000 
00025e01 l       .debug_str	00000000 
00025ed1 l       .debug_str	00000000 
00025eec l       .debug_str	00000000 
00025f36 l       .debug_str	00000000 
00026073 l       .debug_str	00000000 
000260ae l       .debug_str	00000000 
000261b6 l       .debug_str	00000000 
000261f1 l       .debug_str	00000000 
00026320 l       .debug_str	00000000 
0002635b l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00024787 l       .debug_str	00000000 
00026425 l       .debug_str	00000000 
00026461 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
0002652c l       .debug_str	00000000 
0002654c l       .debug_str	00000000 
00026588 l       .debug_str	00000000 
0002c41c l       .debug_str	00000000 
00026691 l       .debug_str	00000000 
000266ce l       .debug_str	00000000 
000267d8 l       .debug_str	00000000 
00026815 l       .debug_str	00000000 
00026946 l       .debug_str	00000000 
000269c7 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
00027263 l       .debug_str	00000000 
00026afc l       .debug_str	00000000 
00026b7a l       .debug_str	00000000 
00026caa l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00026cb6 l       .debug_str	00000000 
00026d95 l       .debug_str	00000000 
00026eae l       .debug_str	00000000 
00026fee l       .debug_str	00000000 
0002710b l       .debug_str	00000000 
0002724f l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
000022c7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00018cec l       .debug_str	00000000 
00018d09 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00018d4f l       .debug_str	00000000 
00018d60 l       .debug_str	00000000 
00018dd0 l       .debug_str	00000000 
00018e6a l       .debug_str	00000000 
00018f2d l       .debug_str	00000000 
00019d3b l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
0001901a l       .debug_str	00000000 
0001906a l       .debug_str	00000000 
000190c7 l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
0001911b l       .debug_str	00000000 
00019192 l       .debug_str	00000000 
00019216 l       .debug_str	00000000 
00019291 l       .debug_str	00000000 
0001932f l       .debug_str	00000000 
000193da l       .debug_str	00000000 
0001947c l       .debug_str	00000000 
00019541 l       .debug_str	00000000 
00019613 l       .debug_str	00000000 
000196dc l       .debug_str	00000000 
000197c8 l       .debug_str	00000000 
000198c1 l       .debug_str	00000000 
00019e52 l       .debug_str	00000000 
00019f65 l       .debug_str	00000000 
0001a085 l       .debug_str	00000000 
0001a19c l       .debug_str	00000000 
0001a2d5 l       .debug_str	00000000 
0001a42b l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002b294 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002711f l       .debug_str	00000000 
000199b1 l       .debug_str	00000000 
00019ac3 l       .debug_str	00000000 
00019bf2 l       .debug_str	00000000 
0002b15c l       .debug_str	00000000 
00027002 l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
0001c2e5 l       .debug_str	00000000 
0001c312 l       .debug_str	00000000 
0001c333 l       .debug_str	00000000 
0001c39a l       .debug_str	00000000 
0001c43a l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
0001c514 l       .debug_str	00000000 
0001c58b l       .debug_str	00000000 
0001c60f l       .debug_str	00000000 
0001c68a l       .debug_str	00000000 
0001c728 l       .debug_str	00000000 
0001c7d3 l       .debug_str	00000000 
0002866e l       .debug_str	00000000 
00027da5 l       .debug_str	00000000 
000280dc l       .debug_str	00000000 
0002b062 l       .debug_str	00000000 
00026cca l       .debug_str	00000000 
00024db5 l       .debug_str	00000000 
00024e43 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00024f13 l       .debug_str	00000000 
00024f2e l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0001d13d l       .debug_str	00000000 
00024f4b l       .debug_str	00000000 
00024f64 l       .debug_str	00000000 
0002d43f l       .debug_str	00000000 
00024f8a l       .debug_str	00000000 
00024ff0 l       .debug_str	00000000 
000250fa l       .debug_str	00000000 
00025160 l       .debug_str	00000000 
00025291 l       .debug_str	00000000 
000252f9 l       .debug_str	00000000 
000253c4 l       .debug_str	00000000 
0002542c l       .debug_str	00000000 
00025535 l       .debug_str	00000000 
0002559d l       .debug_str	00000000 
000256cd l       .debug_str	00000000 
00025738 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0001fa70 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 1w4juabyv8bmed5v
00000d37 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
00027398 l       .debug_str	00000000 
000273e3 l       .debug_str	00000000 
00002e4a l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000c9ce l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 24fd677mu7rr1lzm
00025f36 l       .debug_str	00000000 
0002969f l       .debug_str	00000000 
00029728 l       .debug_str	00000000 
00029862 l       .debug_str	00000000 
000298eb l       .debug_str	00000000 
000299fe l       .debug_str	00000000 
00029a8a l       .debug_str	00000000 
00029b16 l       .debug_str	00000000 
00029c2c l       .debug_str	00000000 
00029cb8 l       .debug_str	00000000 
00029da6 l       .debug_str	00000000 
00026461 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
0002652c l       .debug_str	00000000 
00029e24 l       .debug_str	00000000 
00026588 l       .debug_str	00000000 
0002c41c l       .debug_str	00000000 
00029ea2 l       .debug_str	00000000 
000266ce l       .debug_str	00000000 
00029f21 l       .debug_str	00000000 
00026815 l       .debug_str	00000000 
00029fa0 l       .debug_str	00000000 
00024ff0 l       .debug_str	00000000 
0002a01f l       .debug_str	00000000 
00025160 l       .debug_str	00000000 
0002a09e l       .debug_str	00000000 
0002a120 l       .debug_str	00000000 
0002584d l       .debug_str	00000000 
0002a22d l       .debug_str	00000000 
0002a2af l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
0002a394 l       .debug_str	00000000 
0002a416 l       .debug_str	00000000 
0002a4e5 l       .debug_str	00000000 
0002a4fc l       .debug_str	00000000 
0002a57e l       .debug_str	00000000 
0002a6b2 l       .debug_str	00000000 
0002a734 l       .debug_str	00000000 
0002a819 l       .debug_str	00000000 
0002a89b l       .debug_str	00000000 
0002a9a8 l       .debug_str	00000000 
0002aa2a l       .debug_str	00000000 
0002ab5e l       .debug_str	00000000 
0002abe0 l       .debug_str	00000000 
0002acaf l       .debug_str	00000000 
0002ad31 l       .debug_str	00000000 
0002ae65 l       .debug_str	00000000 
0002aee7 l       .debug_str	00000000 
0002aff4 l       .debug_str	00000000 
0002b050 l       .debug_str	00000000 
0002b14a l       .debug_str	00000000 
0002b282 l       .debug_str	00000000 
000022c7 l       .debug_str	00000000 
0002b3e1 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0002b4f1 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
0002b4fe l       .debug_str	00000000 
0002d374 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
0002b510 l       .debug_str	00000000 
000334b6 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00007813 l       .debug_str	00000000 
0001679c l       .debug_str	00000000 
0002b515 l       .debug_str	00000000 
0003d63b l       .debug_str	00000000 
0002b649 l       .debug_str	00000000 
0002b7a4 l       .debug_str	00000000 
0002b8b0 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00010de4 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000ffe9 l       .debug_str	00000000 
00010e00 l       .debug_str	00000000 
00027415 l       .debug_str	00000000 
00027482 l       .debug_str	00000000 
00027518 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
0001c514 l       .debug_str	00000000 
0001c58b l       .debug_str	00000000 
0001c60f l       .debug_str	00000000 
0001c68a l       .debug_str	00000000 
0001c728 l       .debug_str	00000000 
0001c7d3 l       .debug_str	00000000 
000275d7 l       .debug_str	00000000 
0002769c l       .debug_str	00000000 
0002776e l       .debug_str	00000000 
00027837 l       .debug_str	00000000 
00027921 l       .debug_str	00000000 
00027a28 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002b3f3 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00018cec l       .debug_str	00000000 
00018d09 l       .debug_str	00000000 
00018d4f l       .debug_str	00000000 
00018d60 l       .debug_str	00000000 
00018dd0 l       .debug_str	00000000 
00018e6a l       .debug_str	00000000 
00018f2d l       .debug_str	00000000 
00019d3b l       .debug_str	00000000 
0001901a l       .debug_str	00000000 
0001906a l       .debug_str	00000000 
000190c7 l       .debug_str	00000000 
0001911b l       .debug_str	00000000 
00019192 l       .debug_str	00000000 
00019216 l       .debug_str	00000000 
00019291 l       .debug_str	00000000 
0001932f l       .debug_str	00000000 
000193da l       .debug_str	00000000 
0001947c l       .debug_str	00000000 
00019541 l       .debug_str	00000000 
00019613 l       .debug_str	00000000 
000196dc l       .debug_str	00000000 
000197c8 l       .debug_str	00000000 
000198c1 l       .debug_str	00000000 
00019e52 l       .debug_str	00000000 
00019f65 l       .debug_str	00000000 
0001a085 l       .debug_str	00000000 
0001a19c l       .debug_str	00000000 
0001a2d5 l       .debug_str	00000000 
0001a42b l       .debug_str	00000000 
0002b294 l       .debug_str	00000000 
000199b1 l       .debug_str	00000000 
00019ac3 l       .debug_str	00000000 
00019bf2 l       .debug_str	00000000 
0002b15c l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
0001c2e5 l       .debug_str	00000000 
0001c312 l       .debug_str	00000000 
0001c333 l       .debug_str	00000000 
0001c39a l       .debug_str	00000000 
0001c43a l       .debug_str	00000000 
0002866e l       .debug_str	00000000 
00027b2e l       .debug_str	00000000 
00027bb0 l       .debug_str	00000000 
00027c9e l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00027da5 l       .debug_str	00000000 
00027d86 l       .debug_str	00000000 
000280dc l       .debug_str	00000000 
00027e96 l       .debug_str	00000000 
00027ee7 l       .debug_str	00000000 
00027fd6 l       .debug_str	00000000 
000280be l       .debug_str	00000000 
0002b062 l       .debug_str	00000000 
000281cc l       .debug_str	00000000 
00028247 l       .debug_str	00000000 
00028331 l       .debug_str	00000000 
00028415 l       .debug_str	00000000 
00028521 l       .debug_str	00000000 
0002856d l       .debug_str	00000000 
00028658 l       .debug_str	00000000 
00028742 l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
0002884c l       .debug_str	00000000 
0002894d l       .debug_str	00000000 
000289a3 l       .debug_str	00000000 
00028aa1 l       .debug_str	00000000 
00028af7 l       .debug_str	00000000 
00028c44 l       .debug_str	00000000 
00028c9a l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00028dc0 l       .debug_str	00000000 
00028e47 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00024f13 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00025ed1 l       .debug_str	00000000 
00028f1a l       .debug_str	00000000 
00028fa1 l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
00025bdd l       .debug_str	00000000 
000290b2 l       .debug_str	00000000 
00029139 l       .debug_str	00000000 
00029271 l       .debug_str	00000000 
000292f9 l       .debug_str	00000000 
000293cd l       .debug_str	00000000 
00029456 l       .debug_str	00000000 
0002952b l       .debug_str	00000000 
000295b4 l       .debug_str	00000000 
0001faf0 l     O .text	00000021 str.0
0001fb30 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 2jbqb9ep0zzhh36j
0000996c l       .debug_str	00000000 
0002bcab l       .debug_str	00000000 
0002bcb8 l       .debug_str	00000000 
0002bcf8 l       .debug_str	00000000 
0002bdf5 l       .debug_str	00000000 
0002be35 l       .debug_str	00000000 
0002be44 l       .debug_str	00000000 
0002be84 l       .debug_str	00000000 
0002bea3 l       .debug_str	00000000 
0002bee3 l       .debug_str	00000000 
0002beff l       .debug_str	00000000 
0002bf3f l       .debug_str	00000000 
0002bf4d l       .debug_str	00000000 
0002bf8d l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
0001af14 l       .debug_str	00000000 
0000a47e l       .debug_str	00000000 
00000788 l       .debug_str	00000000 
0002bf9b l       .debug_str	00000000 
0002bfdc l       .debug_str	00000000 
00018bb8 l       .debug_str	00000000 
0002c011 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
0002c01b l       .debug_str	00000000 
0002c05c l       .debug_str	00000000 
0000c9ab l       .debug_str	00000000 
0002c0a9 l       .debug_str	00000000 
0002c0ea l       .debug_str	00000000 
0002c11f l       .debug_str	00000000 
0002c12a l       .debug_str	00000000 
0002c16b l       .debug_str	00000000 
0002c1b8 l       .debug_str	00000000 
0002c1f9 l       .debug_str	00000000 
0002c22e l       .debug_str	00000000 
0002c29d l       .debug_str	00000000 
0002c39e l       .debug_str	00000000 
0000ad5e l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0002c40d l       .debug_str	00000000 
0002c42c l       .debug_str	00000000 
0000eee3 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00003ab6 l       .debug_str	00000000 
000587bf l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
0002144a l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
0002c41c l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
0005e82a l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00010de4 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000ffe9 l       .debug_str	00000000 
00010e00 l       .debug_str	00000000 
00027415 l       .debug_str	00000000 
00027482 l       .debug_str	00000000 
00027518 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
0001c514 l       .debug_str	00000000 
0001c58b l       .debug_str	00000000 
0001c60f l       .debug_str	00000000 
0001c68a l       .debug_str	00000000 
0001c728 l       .debug_str	00000000 
0001c7d3 l       .debug_str	00000000 
000275d7 l       .debug_str	00000000 
0002769c l       .debug_str	00000000 
0002776e l       .debug_str	00000000 
00027837 l       .debug_str	00000000 
00027921 l       .debug_str	00000000 
00027a28 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002b3f3 l       .debug_str	00000000 
0002884c l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002b9a6 l       .debug_str	00000000 
0002ba86 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
0002652c l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00018baf l       .debug_str	00000000 
0002bb84 l       .debug_str	00000000 
0002bb8b l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0002bb93 l       .debug_str	00000000 
0002bba7 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0002bbd9 l       .debug_str	00000000 
0002bbed l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0002bc1f l       .debug_str	00000000 
0002bc5e l       .debug_str	00000000 
0002bc6c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2nk42jtdlqpdrpvo
0001c514 l       .debug_str	00000000 
0002c5b8 l       .debug_str	00000000 
000196dc l       .debug_str	00000000 
000197c8 l       .debug_str	00000000 
000198c1 l       .debug_str	00000000 
0002c6ab l       .debug_str	00000000 
0002c723 l       .debug_str	00000000 
0002c83d l       .debug_str	00000000 
0002c8b5 l       .debug_str	00000000 
0001c58b l       .debug_str	00000000 
0001c60f l       .debug_str	00000000 
0001c68a l       .debug_str	00000000 
0001c728 l       .debug_str	00000000 
0001c7d3 l       .debug_str	00000000 
0002c981 l       .debug_str	00000000 
0002c9f9 l       .debug_str	00000000 
0002cac5 l       .debug_str	00000000 
0002cb3d l       .debug_str	00000000 
0002cbe2 l       .debug_str	00000000 
0002cc5a l       .debug_str	00000000 
0002ccd8 l       .debug_str	00000000 
0002cd50 l       .debug_str	00000000 
0002cda7 l       .debug_str	00000000 
0002ce1f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
0002c44a l       .debug_str	00000000 
0002c4c2 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0001901a l       .debug_str	00000000 
0001906a l       .debug_str	00000000 
000190c7 l       .debug_str	00000000 
0001911b l       .debug_str	00000000 
00019192 l       .debug_str	00000000 
00019216 l       .debug_str	00000000 
00019291 l       .debug_str	00000000 
0001932f l       .debug_str	00000000 
000193da l       .debug_str	00000000 
0001947c l       .debug_str	00000000 
00019541 l       .debug_str	00000000 
00019613 l       .debug_str	00000000 
0002c540 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ulq1z5tkxz9njop
00001b71 l       .debug_str	00000000 
0002cf8d l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00005d81 l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00007a6e l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0002cec4 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002cf28 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4f0czol4b3uljl4v
00000d05 l       .debug_str	00000000 
0002d10b l       .debug_str	00000000 
00024f13 l       .debug_str	00000000 
00025ed1 l       .debug_str	00000000 
0002d12a l       .debug_str	00000000 
0002d1a8 l       .debug_str	00000000 
0002d238 l       .debug_str	00000000 
0002d24f l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0001739c l       .debug_str	00000000 
0000f26f l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002cff2 l       .debug_str	00000000 
0002d07e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00025bdd l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
0002d08d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n9jsiq8blzioqfk
0002d69f l       .debug_str	00000000 
0002d5e3 l       .debug_str	00000000 
0002d600 l       .debug_str	00000000 
0002d609 l       .debug_str	00000000 
0002d64f l       .debug_str	00000000 
0002d658 l       .debug_str	00000000 
0002d8d4 l       .debug_str	00000000 
0002d6e8 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0000f26f l       .debug_str	00000000 
0002d6f4 l       .debug_str	00000000 
0002d770 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0001739c l       .debug_str	00000000 
0002d79b l       .debug_str	00000000 
0002d817 l       .debug_str	00000000 
0002d849 l       .debug_str	00000000 
0002d8cf l       .debug_str	00000000 
0002d8de l       .debug_str	00000000 
0002d238 l       .debug_str	00000000 
0002d94f l       .debug_str	00000000 
0002d9c3 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002d9cd l       .debug_str	00000000 
0002d9da l       .debug_str	00000000 
0002da51 l       .debug_str	00000000 
0002da6b l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002d2d6 l       .debug_str	00000000 
0002d2ff l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
0002b4f1 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
0002b4fe l       .debug_str	00000000 
0002d374 l       .debug_str	00000000 
0002d30c l       .debug_str	00000000 
0002d34e l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0002d362 l       .debug_str	00000000 
0005d37d l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
00048c0a l       .debug_str	00000000 
0001ce04 l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
0002d37e l       .debug_str	00000000 
0002d3a7 l       .debug_str	00000000 
00024f13 l       .debug_str	00000000 
00024f2e l       .debug_str	00000000 
0001d13d l       .debug_str	00000000 
00024f4b l       .debug_str	00000000 
00024f64 l       .debug_str	00000000 
0002d43f l       .debug_str	00000000 
0002d3c4 l       .debug_str	00000000 
0002d409 l       .debug_str	00000000 
0002d42d l       .debug_str	00000000 
0002d45c l       .debug_str	00000000 
00030e95 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
0002584d l       .debug_str	00000000 
0002d48f l       .debug_str	00000000 
00030ef3 l       .debug_str	00000000 
0002a4e5 l       .debug_str	00000000 
0002d4c2 l       .debug_str	00000000 
00030f75 l       .debug_str	00000000 
00025ed1 l       .debug_str	00000000 
0002d4f9 l       .debug_str	00000000 
00030ff9 l       .debug_str	00000000 
00025bdd l       .debug_str	00000000 
0002d530 l       .debug_str	00000000 
0002d57e l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0002d58e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z4uczzv8d994j8w
00001b71 l       .debug_str	00000000 
0002db9b l       .debug_str	00000000 
0002dbed l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000062a7 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002da8c l       .debug_str	00000000 
0002dada l       .debug_str	00000000 
0001ce04 l       .debug_str	00000000 
0002dae3 l       .debug_str	00000000 
0002db33 l       .debug_str	00000000 
0002db3e l       .debug_str	00000000 
0002db8f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 vnkfcw75uydipan
0002dd09 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
00024f13 l       .debug_str	00000000 
00024f2e l       .debug_str	00000000 
0002dbfa l       .debug_str	00000000 
0002dc45 l       .debug_str	00000000 
0002dc58 l       .debug_str	00000000 
0002dca3 l       .debug_str	00000000 
0002dcc6 l       .debug_str	00000000 
0001d13d l       .debug_str	00000000 
0002dd25 l       .debug_str	00000000 
0002d6e8 l       .debug_str	00000000 
0001ce04 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002b4f1 l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ik332mkg6tevaet
00016188 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001dedd l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
0001e0c3 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0001e0bc l       .debug_str	00000000 
0002dd68 l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2bp05xqc1vzz7bvb
00014b64 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
0002de2d l       .debug_str	00000000 
00002dbd l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4fx9oaepmfmbf8wt
00058907 l       .debug_str	00000000 
0002dfb8 l       .debug_str	00000000 
0002dfd4 l       .debug_str	00000000 
0002dffa l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0000d93c l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005b857 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002de8f l       .debug_str	00000000 
00007864 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
0002deb8 l       .debug_str	00000000 
0002dec9 l       .debug_str	00000000 
0002ded9 l       .debug_str	00000000 
0002df25 l       .debug_str	00000000 
0002df30 l       .debug_str	00000000 
0002df66 l       .debug_str	00000000 
0002df7e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 13ma8mzaba1sllzw
0002343f l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
0000eed4 l       .debug_str	00000000 
0002e7bf l       .debug_str	00000000 
0002392c l       .debug_str	00000000 
0002e83e l       .debug_str	00000000 
000236fc l       .debug_str	00000000 
0002e8bd l       .debug_str	00000000 
0002e93f l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
0002eb35 l       .debug_str	00000000 
0002ebb7 l       .debug_str	00000000 
0002ec00 l       .debug_str	00000000 
0002ec82 l       .debug_str	00000000 
0002ee78 l       .debug_str	00000000 
0002eefa l       .debug_str	00000000 
0002ef43 l       .debug_str	00000000 
0002efc5 l       .debug_str	00000000 
0002f1bb l       .debug_str	00000000 
0002f23d l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0002f286 l       .debug_str	00000000 
0002f2fa l       .debug_str	00000000 
000022c7 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
000334b6 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00007813 l       .debug_str	00000000 
0001679c l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
0002b510 l       .debug_str	00000000 
0002f51b l       .debug_str	00000000 
0002f738 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00010de4 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
00014747 l       .debug_str	00000000 
00014795 l       .debug_str	00000000 
00014800 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002f298 l       .debug_str	00000000 
0000ffe9 l       .debug_str	00000000 
00010e00 l       .debug_str	00000000 
00010e45 l       .debug_str	00000000 
00010eb3 l       .debug_str	00000000 
00010f4a l       .debug_str	00000000 
0001100a l       .debug_str	00000000 
000110f3 l       .debug_str	00000000 
00011205 l       .debug_str	00000000 
00011340 l       .debug_str	00000000 
000114a4 l       .debug_str	00000000 
00011631 l       .debug_str	00000000 
000117e7 l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
00011b6c l       .debug_str	00000000 
00011be3 l       .debug_str	00000000 
00011c67 l       .debug_str	00000000 
00011ce2 l       .debug_str	00000000 
00011d80 l       .debug_str	00000000 
00011e2b l       .debug_str	00000000 
00011ecd l       .debug_str	00000000 
00011f92 l       .debug_str	00000000 
00012064 l       .debug_str	00000000 
0001212d l       .debug_str	00000000 
00012219 l       .debug_str	00000000 
00012312 l       .debug_str	00000000 
00012402 l       .debug_str	00000000 
00012515 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
0001274c l       .debug_str	00000000 
00012886 l       .debug_str	00000000 
000129cd l       .debug_str	00000000 
00012b0b l       .debug_str	00000000 
00012c6c l       .debug_str	00000000 
00012dda l       .debug_str	00000000 
00012f3f l       .debug_str	00000000 
000130c7 l       .debug_str	00000000 
0001325c l       .debug_str	00000000 
000133e8 l       .debug_str	00000000 
00013597 l       .debug_str	00000000 
00013753 l       .debug_str	00000000 
00013906 l       .debug_str	00000000 
00013adc l       .debug_str	00000000 
00013cbf l       .debug_str	00000000 
00013e99 l       .debug_str	00000000 
00014094 l       .debug_str	00000000 
000142ac l       .debug_str	00000000 
0002f30c l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002e003 l       .debug_str	00000000 
0002e08a l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
0002e0d7 l       .debug_str	00000000 
0002e15e l       .debug_str	00000000 
0002e358 l       .debug_str	00000000 
0002e3e1 l       .debug_str	00000000 
0002e5dd l       .debug_str	00000000 
0002e666 l       .debug_str	00000000 
0002e6b5 l       .debug_str	00000000 
0002e741 l       .debug_str	00000000 
0002367a l       .debug_str	00000000 
0001fc30 l     O .text	0000001c str.0
0001fc70 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 4miap3quw76e3k6m
00000beb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000062a7 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002f7a8 l       .debug_str	00000000 
0001557f l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4yl298udq4i2eqhh
00001b71 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00007a6e l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0002f7f8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 f8ebwo3yn0ryfmw
0002fea4 l       .debug_str	00000000 
000129cd l       .debug_str	00000000 
00012b0b l       .debug_str	00000000 
00012c6c l       .debug_str	00000000 
00012dda l       .debug_str	00000000 
0002fabd l       .debug_str	00000000 
0002fb35 l       .debug_str	00000000 
0002fcc4 l       .debug_str	00000000 
0002fd3c l       .debug_str	00000000 
0002ff1c l       .debug_str	00000000 
0002ff9a l       .debug_str	00000000 
00030012 l       .debug_str	00000000 
00012f3f l       .debug_str	00000000 
000130c7 l       .debug_str	00000000 
0001325c l       .debug_str	00000000 
000133e8 l       .debug_str	00000000 
00013597 l       .debug_str	00000000 
00013753 l       .debug_str	00000000 
00030105 l       .debug_str	00000000 
0003017d l       .debug_str	00000000 
0003035a l       .debug_str	00000000 
000303d2 l       .debug_str	00000000 
0003049e l       .debug_str	00000000 
00030516 l       .debug_str	00000000 
00030546 l       .debug_str	00000000 
000305be l       .debug_str	00000000 
00030663 l       .debug_str	00000000 
000306db l       .debug_str	00000000 
0003081c l       .debug_str	00000000 
00030894 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
0002f85c l       .debug_str	00000000 
0002f8d4 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
00011b6c l       .debug_str	00000000 
00011be3 l       .debug_str	00000000 
00011c67 l       .debug_str	00000000 
00011ce2 l       .debug_str	00000000 
00011d80 l       .debug_str	00000000 
00011e2b l       .debug_str	00000000 
00011ecd l       .debug_str	00000000 
00011f92 l       .debug_str	00000000 
00012064 l       .debug_str	00000000 
0001212d l       .debug_str	00000000 
00012219 l       .debug_str	00000000 
00012312 l       .debug_str	00000000 
0002f92b l       .debug_str	00000000 
0002f9a3 l       .debug_str	00000000 
00012402 l       .debug_str	00000000 
00012515 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
0001274c l       .debug_str	00000000 
00012886 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16gyyaet005v3lvf
0002477d l       .debug_str	00000000 
00030a4a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00030aaa l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1gec8qpvo4ti2nbg
0000996c l       .debug_str	00000000 
0002db8f l       .debug_str	00000000 
00030c0e l       .debug_str	00000000 
0002dbed l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000062af l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00030b0a l       .debug_str	00000000 
0002dada l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
00030b5c l       .debug_str	00000000 
00030baf l       .debug_str	00000000 
00030bb9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 28buxl9xaffr9rke
000584e9 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00030c64 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2leljxexqh8ze7wz
00033a4f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00030cc1 l       .debug_str	00000000 
00059da4 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cgt5uexdtuxl7pe
00031011 l       .debug_str	00000000 
00030f17 l       .debug_str	00000000 
00030f34 l       .debug_str	00000000 
00030f6f l       .debug_str	00000000 
00030f9d l       .debug_str	00000000 
00030fb8 l       .debug_str	00000000 
00030ff3 l       .debug_str	00000000 
0003101c l       .debug_str	00000000 
00030baf l       .debug_str	00000000 
00031042 l       .debug_str	00000000 
00031068 l       .debug_str	00000000 
00031082 l       .debug_str	00000000 
0002db33 l       .debug_str	00000000 
000310a9 l       .debug_str	00000000 
000310d0 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0001d13d l       .debug_str	00000000 
0001ce04 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005b857 l       .debug_str	00000000 
00058b61 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00030d32 l       .debug_str	00000000 
00030d44 l       .debug_str	00000000 
00030d55 l       .debug_str	00000000 
00030da1 l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
00030dad l       .debug_str	00000000 
00030dcf l       .debug_str	00000000 
00030df0 l       .debug_str	00000000 
00030e3c l       .debug_str	00000000 
00030e58 l       .debug_str	00000000 
00030e8f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00030ea9 l       .debug_str	00000000 
00030eb6 l       .debug_str	00000000 
00030eed l       .debug_str	00000000 
00024f13 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 27tt2oece7npu1p2
00007281 l       .debug_str	00000000 
000072bb l       .debug_str	00000000 
000072f4 l       .debug_str	00000000 
00007303 l       .debug_str	00000000 
00007346 l       .debug_str	00000000 
00059e32 l       .debug_str	00000000 
000367bd l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000618f l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
000061a9 l       .debug_str	00000000 
000072fd l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000310eb l       .debug_str	00000000 
000061d6 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00031114 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19nunfeq6523tst5
0002477d l       .debug_str	00000000 
00031150 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000311b0 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1xpo0qpsduc6enem
0003127c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00031210 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4xxoizn3g1nl6m5i
00033a4f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00031285 l       .debug_str	00000000 
00059da4 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 25lz0dio8kzdubcg
00007261 l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
00024f13 l       .debug_str	00000000 
0001d13d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0000614c l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000312f6 l       .debug_str	00000000 
00031334 l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
0003134d l       .debug_str	00000000 
0003138b l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
00058b61 l       .debug_str	00000000 
0001ce04 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 core.b09zx0wt-cgu.0
00000afc l       .debug_str	00000000 
000313b4 l       .debug_str	00000000 
000313c7 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
000313f8 l       .debug_str	00000000 
00031400 l       .debug_str	00000000 
00031409 l       .debug_str	00000000 
00031452 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00031410 l       .debug_str	00000000 
0003144f l       .debug_str	00000000 
00031458 l       .debug_str	00000000 
0003149a l       .debug_str	00000000 
000314a4 l       .debug_str	00000000 
000314e7 l       .debug_str	00000000 
000314f1 l       .debug_str	00000000 
00031534 l       .debug_str	00000000 
0003153e l       .debug_str	00000000 
00031581 l       .debug_str	00000000 
0003158c l       .debug_str	00000000 
000315d1 l       .debug_str	00000000 
000315dc l       .debug_str	00000000 
00031621 l       .debug_str	00000000 
00031627 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00031c5c l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
00031634 l       .debug_str	00000000 
00031644 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00002287 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000334b6 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00007813 l       .debug_str	00000000 
0001679c l       .debug_str	00000000 
0001887a l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
0003168a l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
00032060 l       .debug_str	00000000 
0000228f l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000007da l       .debug_str	00000000 
000588db l       .debug_str	00000000 
0003169c l       .debug_str	00000000 
000316a1 l       .debug_str	00000000 
0005e9fb l       .debug_str	00000000 
000316ac l       .debug_str	00000000 
00000326 l       .debug_str	00000000 
000316b6 l       .debug_str	00000000 
00031d2a l       .debug_str	00000000 
000316c0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00031d6a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000320a3 l       .debug_str	00000000 
00002299 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
000316ce l       .debug_str	00000000 
00031742 l       .debug_str	00000000 
00031f84 l       .debug_str	00000000 
00031754 l       .debug_str	00000000 
00031d70 l       .debug_str	00000000 
00031d4a l       .debug_str	00000000 
0002026a l       .debug_str	00000000 
00031fc7 l       .debug_str	00000000 
00031759 l       .debug_str	00000000 
000317cd l       .debug_str	00000000 
000320dc l       .debug_str	00000000 
00032123 l       .debug_str	00000000 
00032029 l       .debug_str	00000000 
000317e5 l       .debug_str	00000000 
000418b8 l       .debug_str	00000000 
00036fd7 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0003213e l       .debug_str	00000000 
00031ff8 l       .debug_str	00000000 
0003185d l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
000318b5 l       .debug_str	00000000 
000318ba l       .debug_str	00000000 
000318cc l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
000318d5 l       .debug_str	00000000 
00007a5b l       .debug_str	00000000 
000318fd l       .debug_str	00000000 
0003190d l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
00031966 l       .debug_str	00000000 
0003196e l       .debug_str	00000000 
0001ee86 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000ecb l       .debug_str	00000000 
00031976 l       .debug_str	00000000 
00021806 l       .debug_str	00000000 
00031982 l       .debug_str	00000000 
0003198c l       .debug_str	00000000 
00031999 l       .debug_str	00000000 
000319a6 l       .debug_str	00000000 
000319bb l       .debug_str	00000000 
000319cf l       .debug_str	00000000 
000319e5 l       .debug_str	00000000 
000319ed l       .debug_str	00000000 
000319fa l       .debug_str	00000000 
00031a07 l       .debug_str	00000000 
00032310 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
00031a14 l       .debug_str	00000000 
00031a41 l       .debug_str	00000000 
00031a70 l       .debug_str	00000000 
00031a97 l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00031ab6 l       .debug_str	00000000 
00031acb l       .debug_str	00000000 
00021909 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00005f03 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00031ad5 l       .debug_str	00000000 
00031afa l       .debug_str	00000000 
00031ae0 l       .debug_str	00000000 
00031b79 l       .debug_str	00000000 
00031b0a l       .debug_str	00000000 
00031b10 l       .debug_str	00000000 
00031b1f l       .debug_str	00000000 
00031b2a l       .debug_str	00000000 
00031b5f l       .debug_str	00000000 
00031b84 l       .debug_str	00000000 
00031b94 l       .debug_str	00000000 
000590f3 l       .debug_str	00000000 
00031bc6 l       .debug_str	00000000 
00031bcb l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00033429 l       .debug_str	00000000 
00007a6e l       .debug_str	00000000 
00033457 l       .debug_str	00000000 
0003348b l       .debug_str	00000000 
00031bd1 l       .debug_str	00000000 
00006221 l       .debug_str	00000000 
00031c0f l       .debug_str	00000000 
00033434 l       .debug_str	00000000 
00033481 l       .debug_str	00000000 
00031bf0 l       .debug_str	00000000 
00031bdd l       .debug_str	00000000 
00031bf6 l       .debug_str	00000000 
000187c1 l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
00016187 l       .debug_str	00000000 
00031c1e l       .debug_str	00000000 
00031c26 l       .debug_str	00000000 
0003d0ef l       .debug_str	00000000 
00031c2c l       .debug_str	00000000 
0004ac1a l       .debug_str	00000000 
00031c53 l       .debug_str	00000000 
00031c37 l       .debug_str	00000000 
0001bd1a l       .debug_str	00000000 
00031c5b l       .debug_str	00000000 
00031907 l       .debug_str	00000000 
00016644 l       .debug_str	00000000 
000187da l       .debug_str	00000000 
00031c60 l       .debug_str	00000000 
00031c84 l       .debug_str	00000000 
00031c8a l       .debug_str	00000000 
00031c92 l       .debug_str	00000000 
0004d285 l       .debug_str	00000000 
0003cceb l       .debug_str	00000000 
00031c97 l       .debug_str	00000000 
00031cbf l       .debug_str	00000000 
00031ca1 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
0000c9ce l       .debug_str	00000000 
0001664c l       .debug_str	00000000 
00016659 l       .debug_str	00000000 
00016662 l       .debug_str	00000000 
00057851 l       .debug_str	00000000 
00031cd3 l       .debug_str	00000000 
00031cc7 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
00031ce0 l       .debug_str	00000000 
00031cec l       .debug_str	00000000 
00031d0f l       .debug_str	00000000 
00031cf9 l       .debug_str	00000000 
00031d1d l       .debug_str	00000000 
00031d3d l       .debug_str	00000000 
00031d5d l       .debug_str	00000000 
00031d78 l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00031d99 l       .debug_str	00000000 
00031d9d l       .debug_str	00000000 
00031dae l       .debug_str	00000000 
00031da1 l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
00031dc3 l       .debug_str	00000000 
00031dbe l       .debug_str	00000000 
00031dd6 l       .debug_str	00000000 
00031e22 l       .debug_str	00000000 
00031dfb l       .debug_str	00000000 
00031e12 l       .debug_str	00000000 
00031e3c l       .debug_str	00000000 
00031e2d l       .debug_str	00000000 
00031e84 l       .debug_str	00000000 
00031e64 l       .debug_str	00000000 
00031edd l       .debug_str	00000000 
00031ebd l       .debug_str	00000000 
00057843 l       .debug_str	00000000 
00031f34 l       .debug_str	00000000 
00031f39 l       .debug_str	00000000 
00031f3f l       .debug_str	00000000 
00031f62 l       .debug_str	00000000 
00031f44 l       .debug_str	00000000 
00031f6d l       .debug_str	00000000 
00031fb8 l       .debug_str	00000000 
00031fe9 l       .debug_str	00000000 
0003201a l       .debug_str	00000000 
00032049 l       .debug_str	00000000 
00032094 l       .debug_str	00000000 
000320c5 l       .debug_str	00000000 
00007824 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
0000c8a0 l       .debug_str	00000000 
00032116 l       .debug_str	00000000 
0003212f l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
0003215d l       .debug_str	00000000 
0003215c l       .debug_str	00000000 
00032171 l       .debug_str	00000000 
00032162 l       .debug_str	00000000 
00058564 l       .debug_str	00000000 
00057831 l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
0003219e l       .debug_str	00000000 
00032190 l       .debug_str	00000000 
0003218f l       .debug_str	00000000 
0000c9d7 l       .debug_str	00000000 
00005d81 l       .debug_str	00000000 
0005f370 l       .debug_str	00000000 
000321a7 l       .debug_str	00000000 
000321ab l       .debug_str	00000000 
000321ae l       .debug_str	00000000 
0005de60 l       .debug_str	00000000 
00005d09 l       .debug_str	00000000 
000321b1 l       .debug_str	00000000 
00007416 l       .debug_str	00000000 
000321b5 l       .debug_str	00000000 
000321b4 l       .debug_str	00000000 
000321ba l       .debug_str	00000000 
0003228c l       .debug_str	00000000 
00000238 l       .debug_str	00000000 
000321d8 l       .debug_str	00000000 
000321c6 l       .debug_str	00000000 
000321fd l       .debug_str	00000000 
000322c5 l       .debug_str	00000000 
0003221b l       .debug_str	00000000 
00032209 l       .debug_str	00000000 
00032240 l       .debug_str	00000000 
00032259 l       .debug_str	00000000 
00032247 l       .debug_str	00000000 
00032265 l       .debug_str	00000000 
0003227d l       .debug_str	00000000 
000322b6 l       .debug_str	00000000 
0000741c l       .debug_str	00000000 
000322ef l       .debug_str	00000000 
000322fc l       .debug_str	00000000 
000322fb l       .debug_str	00000000 
00032304 l       .debug_str	00000000 
00032331 l       .debug_str	00000000 
0003231c l       .debug_str	00000000 
0003234e l       .debug_str	00000000 
0003235a l       .debug_str	00000000 
00032404 l       .debug_str	00000000 
00032366 l       .debug_str	00000000 
0003236d l       .debug_str	00000000 
00032376 l       .debug_str	00000000 
00032384 l       .debug_str	00000000 
0003238b l       .debug_str	00000000 
00032393 l       .debug_str	00000000 
0003239a l       .debug_str	00000000 
000323e0 l       .debug_str	00000000 
000323bb l       .debug_str	00000000 
000323a6 l       .debug_str	00000000 
000323cb l       .debug_str	00000000 
000323ef l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
00032410 l       .debug_str	00000000 
000187ed l       .debug_str	00000000 
0005bd4a l       .debug_str	00000000 
0000c813 l       .debug_str	00000000 
0000c7fc l       .debug_str	00000000 
0003242a l       .debug_str	00000000 
0003244d l       .debug_str	00000000 
00032436 l       .debug_str	00000000 
00032497 l       .debug_str	00000000 
0003248b l       .debug_str	00000000 
00031902 l       .debug_str	00000000 
000324b4 l       .debug_str	00000000 
0003249d l       .debug_str	00000000 
000324fd l       .debug_str	00000000 
00032525 l       .debug_str	00000000 
0003250e l       .debug_str	00000000 
0005a8ee l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
000325d4 l       .debug_str	00000000 
000325b6 l       .debug_str	00000000 
000326ca l       .debug_str	00000000 
000326aa l       .debug_str	00000000 
0003273d l       .debug_str	00000000 
0003271d l       .debug_str	00000000 
00048d43 l       .debug_str	00000000 
00032790 l       .debug_str	00000000 
0003279d l       .debug_str	00000000 
000327a8 l       .debug_str	00000000 
000327be l       .debug_str	00000000 
000327c8 l       .debug_str	00000000 
0003281e l       .debug_str	00000000 
00032830 l       .debug_str	00000000 
00032882 l       .debug_str	00000000 
00032896 l       .debug_str	00000000 
000328ea l       .debug_str	00000000 
000328f1 l       .debug_str	00000000 
00032937 l       .debug_str	00000000 
00032946 l       .debug_str	00000000 
000329a0 l       .debug_str	00000000 
000329f6 l       .debug_str	00000000 
00032a4e l       .debug_str	00000000 
00032a98 l       .debug_str	00000000 
00032a9e l       .debug_str	00000000 
00032aee l       .debug_str	00000000 
00032b3a l       .debug_str	00000000 
00032b88 l       .debug_str	00000000 
00018893 l       .debug_str	00000000 
00032bc8 l       .debug_str	00000000 
00032c15 l       .debug_str	00000000 
00032c5e l       .debug_str	00000000 
00032ca9 l       .debug_str	00000000 
00032ce6 l       .debug_str	00000000 
00032cf6 l       .debug_str	00000000 
00032d51 l       .debug_str	00000000 
00032da8 l       .debug_str	00000000 
00032e01 l       .debug_str	00000000 
000400d7 l       .debug_str	00000000 
00032e4c l       .debug_str	00000000 
00032ea0 l       .debug_str	00000000 
00032ef0 l       .debug_str	00000000 
00032f42 l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
00032f86 l       .debug_str	00000000 
00032fd2 l       .debug_str	00000000 
0003301a l       .debug_str	00000000 
00033064 l       .debug_str	00000000 
0003ff0d l       .debug_str	00000000 
000330a0 l       .debug_str	00000000 
000330f4 l       .debug_str	00000000 
00033144 l       .debug_str	00000000 
00033196 l       .debug_str	00000000 
000331da l       .debug_str	00000000 
000331e6 l       .debug_str	00000000 
0003323d l       .debug_str	00000000 
00033290 l       .debug_str	00000000 
000332e5 l       .debug_str	00000000 
0003332c l       .debug_str	00000000 
00033338 l       .debug_str	00000000 
0003334f l       .debug_str	00000000 
00033348 l       .debug_str	00000000 
00033361 l       .debug_str	00000000 
00033376 l       .debug_str	00000000 
000333c7 l       .debug_str	00000000 
000333d7 l       .debug_str	00000000 
00033428 l       .debug_str	00000000 
00033433 l       .debug_str	00000000 
00033456 l       .debug_str	00000000 
0003348a l       .debug_str	00000000 
000334a0 l       .debug_str	00000000 
000334ce l       .debug_str	00000000 
000334c2 l       .debug_str	00000000 
000334dc l       .debug_str	00000000 
000334db l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00005d6d l       .debug_str	00000000 
00018800 l       .debug_str	00000000 
000187ff l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
00018804 l       .debug_str	00000000 
000334df l       .debug_str	00000000 
0003351f l       .debug_str	00000000 
00033527 l       .debug_str	00000000 
00033567 l       .debug_str	00000000 
00033571 l       .debug_str	00000000 
0005797d l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
000335ad l       .debug_str	00000000 
000085ef l       .debug_str	00000000 
000363cd l       .debug_str	00000000 
000335d5 l       .debug_str	00000000 
000084a7 l       .debug_str	00000000 
000335fe l       .debug_str	00000000 
00033623 l       .debug_str	00000000 
0004455b l       .debug_str	00000000 
000589d3 l       .debug_str	00000000 
0003362a l       .debug_str	00000000 
00033633 l       .debug_str	00000000 
0003366c l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
00033674 l       .debug_str	00000000 
00006a21 l       .debug_str	00000000 
00033709 l       .debug_str	00000000 
000066dc l       .debug_str	00000000 
00033754 l       .debug_str	00000000 
00006685 l       .debug_str	00000000 
0003379b l       .debug_str	00000000 
0000635c l       .debug_str	00000000 
000337f0 l       .debug_str	00000000 
0003382d l       .debug_str	00000000 
000062af l       .debug_str	00000000 
00033838 l       .debug_str	00000000 
00009320 l       .debug_str	00000000 
0003388d l       .debug_str	00000000 
000092b0 l       .debug_str	00000000 
000338df l       .debug_str	00000000 
00014f55 l       .debug_str	00000000 
00033926 l       .debug_str	00000000 
00014f50 l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
00002471 l       .debug_str	00000000 
00034330 l       .debug_str	00000000 
000339ac l       .debug_str	00000000 
000339ed l       .debug_str	00000000 
00033a10 l       .debug_str	00000000 
00033a4b l       .debug_str	00000000 
00033a55 l       .debug_str	00000000 
00033adf l       .debug_str	00000000 
00033b11 l       .debug_str	00000000 
0001823d l       .debug_str	00000000 
000062a7 l       .debug_str	00000000 
00033b85 l       .debug_str	00000000 
00033bd6 l       .debug_str	00000000 
00016777 l       .debug_str	00000000 
00033c18 l       .debug_str	00000000 
00033c9f l       .debug_str	00000000 
00033cae l       .debug_str	00000000 
00033d38 l       .debug_str	00000000 
00033db4 l       .debug_str	00000000 
00033de4 l       .debug_str	00000000 
00033e1f l       .debug_str	00000000 
00033e29 l       .debug_str	00000000 
0000f014 l       .debug_str	00000000 
00033ea0 l       .debug_str	00000000 
00033ef5 l       .debug_str	00000000 
00033efe l       .debug_str	00000000 
00033f4f l       .debug_str	00000000 
00010da2 l       .debug_str	00000000 
00033f5b l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
00033f68 l       .debug_str	00000000 
00033f71 l       .debug_str	00000000 
00033f87 l       .debug_str	00000000 
00033f94 l       .debug_str	00000000 
00033fd9 l       .debug_str	00000000 
00033fed l       .debug_str	00000000 
00034042 l       .debug_str	00000000 
0003404b l       .debug_str	00000000 
0004b1fa l       .debug_str	00000000 
00034083 l       .debug_str	00000000 
000340c0 l       .debug_str	00000000 
000340cb l       .debug_str	00000000 
0003414e l       .debug_str	00000000 
00034159 l       .debug_str	00000000 
000341df l       .debug_str	00000000 
00034254 l       .debug_str	00000000 
00034280 l       .debug_str	00000000 
00034309 l       .debug_str	00000000 
00034318 l       .debug_str	00000000 
00034325 l       .debug_str	00000000 
00034339 l       .debug_str	00000000 
0003438f l       .debug_str	00000000 
000343fe l       .debug_str	00000000 
0003447e l       .debug_str	00000000 
000344ec l       .debug_str	00000000 
00034577 l       .debug_str	00000000 
000345ec l       .debug_str	00000000 
0003462c l       .debug_str	00000000 
000346af l       .debug_str	00000000 
000346f0 l       .debug_str	00000000 
00048c05 l       .debug_str	00000000 
0004c71f l       .debug_str	00000000 
00034755 l       .debug_str	00000000 
00034804 l       .debug_str	00000000 
0003484f l       .debug_str	00000000 
0001fca7 l       .debug_str	00000000 
000348f8 l       .debug_str	00000000 
00034974 l       .debug_str	00000000 
0001666c l       .debug_str	00000000 
00034999 l       .debug_str	00000000 
00016531 l       .debug_str	00000000 
000349e6 l       .debug_str	00000000 
0001f310 l       .debug_str	00000000 
00034a39 l       .debug_str	00000000 
00034a74 l       .debug_str	00000000 
00034a7f l       .debug_str	00000000 
00006f45 l       .debug_str	00000000 
00034b0b l       .debug_str	00000000 
0001ef70 l       .debug_str	00000000 
00034b8e l       .debug_str	00000000 
00034c16 l       .debug_str	00000000 
0002226d l       .debug_str	00000000 
00034c8b l       .debug_str	00000000 
00034d11 l       .debug_str	00000000 
000201ae l       .debug_str	00000000 
00034d86 l       .debug_str	00000000 
00015d75 l       .debug_str	00000000 
00034de9 l       .debug_str	00000000 
00014fc0 l       .debug_str	00000000 
00034e4b l       .debug_str	00000000 
00014cc6 l       .debug_str	00000000 
00034e91 l       .debug_str	00000000 
00034ed9 l       .debug_str	00000000 
00034ee3 l       .debug_str	00000000 
00034f24 l       .debug_str	00000000 
00034f3e l       .debug_str	00000000 
000188b8 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
00034f44 l       .debug_str	00000000 
00034f4d l       .debug_str	00000000 
00034fb2 l       .debug_str	00000000 
00034fc1 l       .debug_str	00000000 
00035003 l       .debug_str	00000000 
0003500d l       .debug_str	00000000 
00035072 l       .debug_str	00000000 
000350b4 l       .debug_str	00000000 
000350fe l       .debug_str	00000000 
0003510d l       .debug_str	00000000 
00035143 l       .debug_str	00000000 
0003514c l       .debug_str	00000000 
00003ab6 l       .debug_str	00000000 
00035156 l       .debug_str	00000000 
00035159 l       .debug_str	00000000 
00035191 l       .debug_str	00000000 
0003519b l       .debug_str	00000000 
000351df l       .debug_str	00000000 
000351f5 l       .debug_str	00000000 
0003523e l       .debug_str	00000000 
00016fef l       .debug_str	00000000 
000188a3 l       .debug_str	00000000 
00035283 l       .debug_str	00000000 
000352cc l       .debug_str	00000000 
000352da l       .debug_str	00000000 
00035322 l       .debug_str	00000000 
00016f19 l       .debug_str	00000000 
0003536c l       .debug_str	00000000 
0003eb44 l       .debug_str	00000000 
00035404 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
0003549e l       .debug_str	00000000 
0001741f l       .debug_str	00000000 
00035510 l       .debug_str	00000000 
00017141 l       .debug_str	00000000 
000355b3 l       .debug_str	00000000 
00002e4a l       .debug_str	00000000 
000355e5 l       .debug_str	00000000 
0003562c l       .debug_str	00000000 
0003563a l       .debug_str	00000000 
00035644 l       .debug_str	00000000 
00035692 l       .debug_str	00000000 
000356a2 l       .debug_str	00000000 
000356ed l       .debug_str	00000000 
000356fb l       .debug_str	00000000 
00035789 l       .debug_str	00000000 
00035798 l       .debug_str	00000000 
00016580 l       .debug_str	00000000 
000357e1 l       .debug_str	00000000 
00016529 l       .debug_str	00000000 
00035826 l       .debug_str	00000000 
00035860 l       .debug_str	00000000 
00035869 l       .debug_str	00000000 
000358b5 l       .debug_str	00000000 
000358cd l       .debug_str	00000000 
0003592f l       .debug_str	00000000 
0000668d l       .debug_str	00000000 
00035964 l       .debug_str	00000000 
0003598c l       .debug_str	00000000 
000359c4 l       .debug_str	00000000 
000359ed l       .debug_str	00000000 
000359f8 l       .debug_str	00000000 
00007780 l       .debug_str	00000000 
00035a1d l       .debug_str	00000000 
00035aac l       .debug_str	00000000 
00035ae3 l       .debug_str	00000000 
00035b69 l       .debug_str	00000000 
00035bb7 l       .debug_str	00000000 
00035bc0 l       .debug_str	00000000 
00035c46 l       .debug_str	00000000 
00035c59 l       .debug_str	00000000 
00035ce2 l       .debug_str	00000000 
00035d3e l       .debug_str	00000000 
00035d80 l       .debug_str	00000000 
00035e32 l       .debug_str	00000000 
00035e71 l       .debug_str	00000000 
00035f16 l       .debug_str	00000000 
00035faa l       .debug_str	00000000 
00035fd0 l       .debug_str	00000000 
0003604c l       .debug_str	00000000 
00036087 l       .debug_str	00000000 
00036094 l       .debug_str	00000000 
000360cd l       .debug_str	00000000 
000360e5 l       .debug_str	00000000 
00036125 l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
00036131 l       .debug_str	00000000 
0003618e l       .debug_str	00000000 
000361eb l       .debug_str	00000000 
00036298 l       .debug_str	00000000 
000362f5 l       .debug_str	00000000 
00021528 l       .debug_str	00000000 
00036362 l       .debug_str	00000000 
000363c6 l       .debug_str	00000000 
000363d1 l       .debug_str	00000000 
00036401 l       .debug_str	00000000 
0003642d l       .debug_str	00000000 
00036499 l       .debug_str	00000000 
000364c9 l       .debug_str	00000000 
00036505 l       .debug_str	00000000 
0003654f l       .debug_str	00000000 
0003655f l       .debug_str	00000000 
00036594 l       .debug_str	00000000 
000365d9 l       .debug_str	00000000 
000365e4 l       .debug_str	00000000 
00036624 l       .debug_str	00000000 
00036632 l       .debug_str	00000000 
000366be l       .debug_str	00000000 
0003673a l       .debug_str	00000000 
0003675a l       .debug_str	00000000 
000367b4 l       .debug_str	00000000 
000367c1 l       .debug_str	00000000 
000367fa l       .debug_str	00000000 
00036802 l       .debug_str	00000000 
00036857 l       .debug_str	00000000 
000368a9 l       .debug_str	00000000 
0003578e l       .debug_str	00000000 
000368f0 l       .debug_str	00000000 
00036964 l       .debug_str	00000000 
000369a8 l       .debug_str	00000000 
000369f4 l       .debug_str	00000000 
00036a33 l       .debug_str	00000000 
00036a59 l       .debug_str	00000000 
00036a6b l       .debug_str	00000000 
00036a75 l       .debug_str	00000000 
00036ab7 l       .debug_str	00000000 
0000ef71 l       .debug_str	00000000 
00036b3e l       .debug_str	00000000 
00002ed3 l       .debug_str	00000000 
00036bba l       .debug_str	00000000 
00036c31 l       .debug_str	00000000 
00036c7f l       .debug_str	00000000 
00006fc8 l       .debug_str	00000000 
00036d0f l       .debug_str	00000000 
00036d4b l       .debug_str	00000000 
00036d58 l       .debug_str	00000000 
00036d9e l       .debug_str	00000000 
00036dab l       .debug_str	00000000 
00037af1 l       .debug_str	00000000 
00036ddd l       .debug_str	00000000 
00036e2d l       .debug_str	00000000 
00036e44 l       .debug_str	00000000 
00036ece l       .debug_str	00000000 
00014e9b l       .debug_str	00000000 
00036f4a l       .debug_str	00000000 
00036f5e l       .debug_str	00000000 
00036fbb l       .debug_str	00000000 
00036fca l       .debug_str	00000000 
00036fdb l       .debug_str	00000000 
00037035 l       .debug_str	00000000 
00037044 l       .debug_str	00000000 
000370cd l       .debug_str	00000000 
000370db l       .debug_str	00000000 
00037131 l       .debug_str	00000000 
00037185 l       .debug_str	00000000 
000371fe l       .debug_str	00000000 
00037216 l       .debug_str	00000000 
00037220 l       .debug_str	00000000 
000372b7 l       .debug_str	00000000 
000372d1 l       .debug_str	00000000 
0000a45e l       .debug_str	00000000 
0003730a l       .debug_str	00000000 
00002dbd l       .debug_str	00000000 
0003736f l       .debug_str	00000000 
00037406 l       .debug_str	00000000 
0003740a l       .debug_str	00000000 
000376ff l       .debug_str	00000000 
0003740f l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0000614c l       .debug_str	00000000 
00037441 l       .debug_str	00000000 
000063a4 l       .debug_str	00000000 
0003747f l       .debug_str	00000000 
00014c6c l       .debug_str	00000000 
000374d2 l       .debug_str	00000000 
0003755e l       .debug_str	00000000 
000375da l       .debug_str	00000000 
000375f9 l       .debug_str	00000000 
00037644 l       .debug_str	00000000 
00037651 l       .debug_str	00000000 
000376c5 l       .debug_str	00000000 
0003ba03 l       .debug_str	00000000 
0004d13e l       .debug_str	00000000 
000376e4 l       .debug_str	00000000 
00037704 l       .debug_str	00000000 
00037720 l       .debug_str	00000000 
0003772a l       .debug_str	00000000 
000377b6 l       .debug_str	00000000 
00037832 l       .debug_str	00000000 
00037863 l       .debug_str	00000000 
000378e6 l       .debug_str	00000000 
00037906 l       .debug_str	00000000 
0003798c l       .debug_str	00000000 
00037a01 l       .debug_str	00000000 
0001ec54 l       .debug_str	00000000 
0005a97c l       .debug_str	00000000 
00037a42 l       .debug_str	00000000 
000174e5 l       .debug_str	00000000 
00037a8d l       .debug_str	00000000 
00037ae9 l       .debug_str	00000000 
00037af5 l       .debug_str	00000000 
00037b3e l       .debug_str	00000000 
00037b4e l       .debug_str	00000000 
00037b93 l       .debug_str	00000000 
00037bdc l       .debug_str	00000000 
00037c21 l       .debug_str	00000000 
00037c7d l       .debug_str	00000000 
00037cc8 l       .debug_str	00000000 
00037d0f l       .debug_str	00000000 
00037d6d l       .debug_str	00000000 
00037db8 l       .debug_str	00000000 
00037dff l       .debug_str	00000000 
00037e5d l       .debug_str	00000000 
00037ea8 l       .debug_str	00000000 
00037eef l       .debug_str	00000000 
00037f4d l       .debug_str	00000000 
00037f96 l       .debug_str	00000000 
00037fdb l       .debug_str	00000000 
00038037 l       .debug_str	00000000 
00038080 l       .debug_str	00000000 
000380c5 l       .debug_str	00000000 
00038121 l       .debug_str	00000000 
0003816b l       .debug_str	00000000 
000381b1 l       .debug_str	00000000 
0003820e l       .debug_str	00000000 
00038258 l       .debug_str	00000000 
0003829e l       .debug_str	00000000 
000382fb l       .debug_str	00000000 
00038356 l       .debug_str	00000000 
0003839e l       .debug_str	00000000 
000383e2 l       .debug_str	00000000 
0003842a l       .debug_str	00000000 
0003846e l       .debug_str	00000000 
000384c9 l       .debug_str	00000000 
00038512 l       .debug_str	00000000 
00038557 l       .debug_str	00000000 
000385b3 l       .debug_str	00000000 
000385fc l       .debug_str	00000000 
00038641 l       .debug_str	00000000 
0003869d l       .debug_str	00000000 
000386e6 l       .debug_str	00000000 
0003872b l       .debug_str	00000000 
00038787 l       .debug_str	00000000 
000387d1 l       .debug_str	00000000 
00038817 l       .debug_str	00000000 
00038874 l       .debug_str	00000000 
000388be l       .debug_str	00000000 
00038904 l       .debug_str	00000000 
00038961 l       .debug_str	00000000 
000389ab l       .debug_str	00000000 
000389f1 l       .debug_str	00000000 
00038a4e l       .debug_str	00000000 
00038aa9 l       .debug_str	00000000 
00038af1 l       .debug_str	00000000 
00038b35 l       .debug_str	00000000 
00038b7d l       .debug_str	00000000 
00038bc1 l       .debug_str	00000000 
00038c1c l       .debug_str	00000000 
00038c77 l       .debug_str	00000000 
00038cbf l       .debug_str	00000000 
00038d03 l       .debug_str	00000000 
00038d4c l       .debug_str	00000000 
00038d91 l       .debug_str	00000000 
00038ded l       .debug_str	00000000 
00038e49 l       .debug_str	00000000 
00038e92 l       .debug_str	00000000 
00038ed7 l       .debug_str	00000000 
00038f33 l       .debug_str	00000000 
00038f7c l       .debug_str	00000000 
00038fc1 l       .debug_str	00000000 
0003901d l       .debug_str	00000000 
00039066 l       .debug_str	00000000 
000390ab l       .debug_str	00000000 
00016ff4 l       .debug_str	00000000 
00039107 l       .debug_str	00000000 
00039146 l       .debug_str	00000000 
0003917b l       .debug_str	00000000 
00010dce l       .debug_str	00000000 
0001edf5 l       .debug_str	00000000 
0001eed1 l       .debug_str	00000000 
00039185 l       .debug_str	00000000 
00020d29 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
000391bf l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
00039251 l       .debug_str	00000000 
000202b1 l       .debug_str	00000000 
0003928a l       .debug_str	00000000 
00006839 l       .debug_str	00000000 
000392b1 l       .debug_str	00000000 
00006785 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
000392eb l       .debug_str	00000000 
000064f7 l       .debug_str	00000000 
00039311 l       .debug_str	00000000 
0001f2af l       .debug_str	00000000 
0003936b l       .debug_str	00000000 
0001fbc8 l       .debug_str	00000000 
00039405 l       .debug_str	00000000 
0001eee0 l       .debug_str	00000000 
0003948e l       .debug_str	00000000 
00039535 l       .debug_str	00000000 
0003956e l       .debug_str	00000000 
000395e3 l       .debug_str	00000000 
0003960c l       .debug_str	00000000 
0002c011 l       .debug_str	00000000 
00039641 l       .debug_str	00000000 
0003967d l       .debug_str	00000000 
0003968e l       .debug_str	00000000 
000396c7 l       .debug_str	00000000 
000075de l       .debug_str	00000000 
000396d4 l       .debug_str	00000000 
000396e3 l       .debug_str	00000000 
00034fba l       .debug_str	00000000 
0003972c l       .debug_str	00000000 
0003975f l       .debug_str	00000000 
0003976c l       .debug_str	00000000 
0005e66f l       .debug_str	00000000 
000397b7 l       .debug_str	00000000 
0003980f l       .debug_str	00000000 
00039824 l       .debug_str	00000000 
0003985a l       .debug_str	00000000 
00039865 l       .debug_str	00000000 
0002c11f l       .debug_str	00000000 
000398c4 l       .debug_str	00000000 
00039937 l       .debug_str	00000000 
0003999e l       .debug_str	00000000 
000399be l       .debug_str	00000000 
000399fd l       .debug_str	00000000 
00039a1c l       .debug_str	00000000 
00000ad8 l       .debug_str	00000000 
00039a8f l       .debug_str	00000000 
00039b0c l       .debug_str	00000000 
00039b71 l       .debug_str	00000000 
00039bd1 l       .debug_str	00000000 
00039c44 l       .debug_str	00000000 
00039cc1 l       .debug_str	00000000 
00020ebe l       .debug_str	00000000 
00039d39 l       .debug_str	00000000 
00039dae l       .debug_str	00000000 
00039e28 l       .debug_str	00000000 
0000cc98 l       .debug_str	00000000 
0000cca3 l       .debug_str	00000000 
00039e88 l       .debug_str	00000000 
0005c65d l       .debug_str	00000000 
00039ec6 l       .debug_str	00000000 
00039f08 l       .debug_str	00000000 
00039f33 l       .debug_str	00000000 
00039f74 l       .debug_str	00000000 
00039f7e l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
0005d517 l       .debug_str	00000000 
00057dfd l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
00039fda l       .debug_str	00000000 
000023d6 l       .debug_str	00000000 
0003a016 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
0003a05d l       .debug_str	00000000 
0003a0bb l       .debug_str	00000000 
000319ea l       .debug_str	00000000 
0003a112 l       .debug_str	00000000 
0003a16c l       .debug_str	00000000 
0003a176 l       .debug_str	00000000 
000075d2 l       .debug_str	00000000 
000075d7 l       .debug_str	00000000 
0003a1b9 l       .debug_str	00000000 
0003a1ef l       .debug_str	00000000 
0003a1ff l       .debug_str	00000000 
0003a20e l       .debug_str	00000000 
0003a219 l       .debug_str	00000000 
00031ad0 l       .debug_str	00000000 
0003a253 l       .debug_str	00000000 
0003a29c l       .debug_str	00000000 
00024d56 l       .debug_str	00000000 
0003a2e3 l       .debug_str	00000000 
0003a31e l       .debug_str	00000000 
0003a343 l       .debug_str	00000000 
0003a3af l       .debug_str	00000000 
0003a3c2 l       .debug_str	00000000 
0003a439 l       .debug_str	00000000 
0003a444 l       .debug_str	00000000 
0003a481 l       .debug_str	00000000 
0003a48c l       .debug_str	00000000 
0003a50d l       .debug_str	00000000 
0003a553 l       .debug_str	00000000 
0003a57a l       .debug_str	00000000 
0003a5a9 l       .debug_str	00000000 
0003a5ba l       .debug_str	00000000 
0001ee51 l       .debug_str	00000000 
0003a616 l       .debug_str	00000000 
0003a647 l       .debug_str	00000000 
00008817 l       .debug_str	00000000 
0003a68f l       .debug_str	00000000 
00021aec l       .debug_str	00000000 
0003a6cd l       .debug_str	00000000 
0003a711 l       .debug_str	00000000 
0003a764 l       .debug_str	00000000 
000371ff l       .debug_str	00000000 
0003a7dc l       .debug_str	00000000 
0003a82b l       .debug_str	00000000 
0003a8c1 l       .debug_str	00000000 
0003a905 l       .debug_str	00000000 
0003e643 l       .debug_str	00000000 
0003a97d l       .debug_str	00000000 
0003a9cc l       .debug_str	00000000 
0003aa62 l       .debug_str	00000000 
0003aa7c l       .debug_str	00000000 
0003aacb l       .debug_str	00000000 
0003ab04 l       .debug_str	00000000 
0003ab1f l       .debug_str	00000000 
00017d40 l       .debug_str	00000000 
0003ab83 l       .debug_str	00000000 
000178fe l       .debug_str	00000000 
0003abfc l       .debug_str	00000000 
00016932 l       .debug_str	00000000 
0003ac6d l       .debug_str	00000000 
0003ad03 l       .debug_str	00000000 
0003ad9b l       .debug_str	00000000 
0003ae0d l       .debug_str	00000000 
0003ae35 l       .debug_str	00000000 
00007aab l       .debug_str	00000000 
0003aeed l       .debug_str	00000000 
0001794d l       .debug_str	00000000 
0003af32 l       .debug_str	00000000 
0003afe8 l       .debug_str	00000000 
0003b02d l       .debug_str	00000000 
0000e12a l       .debug_str	00000000 
0003b06f l       .debug_str	00000000 
0003b0ca l       .debug_str	00000000 
0003b0cf l       .debug_str	00000000 
0003b128 l       .debug_str	00000000 
0003b15c l       .debug_str	00000000 
0003b170 l       .debug_str	00000000 
0003b1ab l       .debug_str	00000000 
0003b1ed l       .debug_str	00000000 
0003b203 l       .debug_str	00000000 
0003b26f l       .debug_str	00000000 
0000cc9c l       .debug_str	00000000 
00005f0c l       .debug_str	00000000 
00005f17 l       .debug_str	00000000 
0003b2b1 l       .debug_str	00000000 
0003b2f1 l       .debug_str	00000000 
0003b34b l       .debug_str	00000000 
0003b38d l       .debug_str	00000000 
0003b3e8 l       .debug_str	00000000 
0003b42a l       .debug_str	00000000 
0003b435 l       .debug_str	00000000 
0003b475 l       .debug_str	00000000 
0003b47b l       .debug_str	00000000 
0003b4d5 l       .debug_str	00000000 
0003b4de l       .debug_str	00000000 
0003b520 l       .debug_str	00000000 
0003b578 l       .debug_str	00000000 
0003b5ba l       .debug_str	00000000 
0003b613 l       .debug_str	00000000 
0003b61d l       .debug_str	00000000 
0003b625 l       .debug_str	00000000 
0003b62e l       .debug_str	00000000 
0003b621 l       .debug_str	00000000 
0003b670 l       .debug_str	00000000 
0003b6c5 l       .debug_str	00000000 
0003b702 l       .debug_str	00000000 
0003b744 l       .debug_str	00000000 
0003b79b l       .debug_str	00000000 
0003b7dd l       .debug_str	00000000 
0003b835 l       .debug_str	00000000 
0003b86d l       .debug_str	00000000 
0003b879 l       .debug_str	00000000 
0003b8b6 l       .debug_str	00000000 
0003b918 l       .debug_str	00000000 
0003b959 l       .debug_str	00000000 
0003b962 l       .debug_str	00000000 
0003b9c0 l       .debug_str	00000000 
0003b9f9 l       .debug_str	00000000 
0003ba08 l       .debug_str	00000000 
0003ba47 l       .debug_str	00000000 
0003ba5c l       .debug_str	00000000 
0003baa2 l       .debug_str	00000000 
0003baaf l       .debug_str	00000000 
0003bab5 l       .debug_str	00000000 
0003baee l       .debug_str	00000000 
0003bb7a l       .debug_str	00000000 
0003bbb6 l       .debug_str	00000000 
000579ec l       .debug_str	00000000 
0003bbc8 l       .debug_str	00000000 
0003bc00 l       .debug_str	00000000 
0003bc0c l       .debug_str	00000000 
0003bc49 l       .debug_str	00000000 
0003bcab l       .debug_str	00000000 
0003bcec l       .debug_str	00000000 
0003bd4a l       .debug_str	00000000 
0003bd84 l       .debug_str	00000000 
0003bdde l       .debug_str	00000000 
0003be27 l       .debug_str	00000000 
0003be37 l       .debug_str	00000000 
0003be70 l       .debug_str	00000000 
0003bef2 l       .debug_str	00000000 
0003bf2c l       .debug_str	00000000 
0003bf86 l       .debug_str	00000000 
0003bfc1 l       .debug_str	00000000 
0003c021 l       .debug_str	00000000 
0003c05c l       .debug_str	00000000 
0003c0bc l       .debug_str	00000000 
0003c0fa l       .debug_str	00000000 
0003c158 l       .debug_str	00000000 
0003c196 l       .debug_str	00000000 
0003c1f4 l       .debug_str	00000000 
0003c23f l       .debug_str	00000000 
0003c248 l       .debug_str	00000000 
0003c297 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
0003c2a3 l       .debug_str	00000000 
0003c2d4 l       .debug_str	00000000 
0003c2ff l       .debug_str	00000000 
0003c34d l       .debug_str	00000000 
0001ee82 l       .debug_str	00000000 
0003c354 l       .debug_str	00000000 
0003c3b9 l       .debug_str	00000000 
0003c3ea l       .debug_str	00000000 
0003c3f2 l       .debug_str	00000000 
00003796 l       .debug_str	00000000 
0003c423 l       .debug_str	00000000 
0003c47c l       .debug_str	00000000 
0003c50a l       .debug_str	00000000 
0003c556 l       .debug_str	00000000 
0003c57b l       .debug_str	00000000 
0003c598 l       .debug_str	00000000 
0003c5c2 l       .debug_str	00000000 
000079ee l       .debug_str	00000000 
00007af9 l       .debug_str	00000000 
00007b75 l       .debug_str	00000000 
0003c5e4 l       .debug_str	00000000 
0003c631 l       .debug_str	00000000 
0003c676 l       .debug_str	00000000 
0003c6b5 l       .debug_str	00000000 
0003c701 l       .debug_str	00000000 
0003c790 l       .debug_str	00000000 
0003c7dd l       .debug_str	00000000 
0003c863 l       .debug_str	00000000 
000598ee l       .debug_str	00000000 
0003c888 l       .debug_str	00000000 
0003c8b2 l       .debug_str	00000000 
0003c8bb l       .debug_str	00000000 
0003c8f1 l       .debug_str	00000000 
0003c8fa l       .debug_str	00000000 
0003c988 l       .debug_str	00000000 
0003c9ce l       .debug_str	00000000 
0003c9ed l       .debug_str	00000000 
0003ca04 l       .debug_str	00000000 
0003ca28 l       .debug_str	00000000 
0003ca44 l       .debug_str	00000000 
0003ca8b l       .debug_str	00000000 
0003cad0 l       .debug_str	00000000 
0003cb0f l       .debug_str	00000000 
0003cb55 l       .debug_str	00000000 
0003cbe4 l       .debug_str	00000000 
0003cc2b l       .debug_str	00000000 
0003ccb1 l       .debug_str	00000000 
0003cce6 l       .debug_str	00000000 
0003ccf0 l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
0003cd5b l       .debug_str	00000000 
0003cd90 l       .debug_str	00000000 
0003cd9a l       .debug_str	00000000 
0003cdcd l       .debug_str	00000000 
0003cdd5 l       .debug_str	00000000 
0003ce09 l       .debug_str	00000000 
0003ce1b l       .debug_str	00000000 
0003ce55 l       .debug_str	00000000 
0003ce73 l       .debug_str	00000000 
0003ce99 l       .debug_str	00000000 
0003cea4 l       .debug_str	00000000 
0003cecd l       .debug_str	00000000 
0003cedb l       .debug_str	00000000 
0003cf15 l       .debug_str	00000000 
0003cf4b l       .debug_str	00000000 
0003cf71 l       .debug_str	00000000 
0003cf94 l       .debug_str	00000000 
0003cfbd l       .debug_str	00000000 
0003cfe3 l       .debug_str	00000000 
0003d021 l       .debug_str	00000000 
0003d03b l       .debug_str	00000000 
0003d079 l       .debug_str	00000000 
0003d0ab l       .debug_str	00000000 
0003d0b7 l       .debug_str	00000000 
0005f083 l       .debug_str	00000000 
0003d0eb l       .debug_str	00000000 
0003d0f8 l       .debug_str	00000000 
00016dd4 l       .debug_str	00000000 
0003d12a l       .debug_str	00000000 
0003d194 l       .debug_str	00000000 
0003d204 l       .debug_str	00000000 
0003d26b l       .debug_str	00000000 
0003d288 l       .debug_str	00000000 
0003d2c7 l       .debug_str	00000000 
0003d2e3 l       .debug_str	00000000 
00016d96 l       .debug_str	00000000 
0003d311 l       .debug_str	00000000 
00016e72 l       .debug_str	00000000 
0003d346 l       .debug_str	00000000 
0003d382 l       .debug_str	00000000 
0003d3a8 l       .debug_str	00000000 
0003d3e7 l       .debug_str	00000000 
0003d3f7 l       .debug_str	00000000 
0003d45b l       .debug_str	00000000 
0003d492 l       .debug_str	00000000 
0003d4a8 l       .debug_str	00000000 
0003d4f7 l       .debug_str	00000000 
0003d503 l       .debug_str	00000000 
0003d5d5 l       .debug_str	00000000 
0003d54a l       .debug_str	00000000 
0003d5d0 l       .debug_str	00000000 
0003d5f4 l       .debug_str	00000000 
0003d62f l       .debug_str	00000000 
0003d63f l       .debug_str	00000000 
0005efab l       .debug_str	00000000 
0003d680 l       .debug_str	00000000 
0003d6ba l       .debug_str	00000000 
0003d6c9 l       .debug_str	00000000 
0003d702 l       .debug_str	00000000 
0003d710 l       .debug_str	00000000 
0003d749 l       .debug_str	00000000 
0003d757 l       .debug_str	00000000 
0003d7a7 l       .debug_str	00000000 
0003d7b4 l       .debug_str	00000000 
0003d82a l       .debug_str	00000000 
0003d835 l       .debug_str	00000000 
0003d847 l       .debug_str	00000000 
0003d893 l       .debug_str	00000000 
0003d8b0 l       .debug_str	00000000 
0003d944 l       .debug_str	00000000 
0003d9da l       .debug_str	00000000 
0003da4c l       .debug_str	00000000 
0003da72 l       .debug_str	00000000 
0003db11 l       .debug_str	00000000 
0003db82 l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
0003dbc7 l       .debug_str	00000000 
0003dc2a l       .debug_str	00000000 
0003dc4d l       .debug_str	00000000 
0003dca1 l       .debug_str	00000000 
0003dcb8 l       .debug_str	00000000 
0002477d l       .debug_str	00000000 
0003dd05 l       .debug_str	00000000 
0003dd12 l       .debug_str	00000000 
0003dd4d l       .debug_str	00000000 
0003dd75 l       .debug_str	00000000 
0003ddd7 l       .debug_str	00000000 
0003985f l       .debug_str	00000000 
0003de40 l       .debug_str	00000000 
0004066e l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
0002deb8 l       .debug_str	00000000 
0002dec9 l       .debug_str	00000000 
0003de8d l       .debug_str	00000000 
0001557f l       .debug_str	00000000 
0003ded8 l       .debug_str	00000000 
0003df5b l       .debug_str	00000000 
0003df8b l       .debug_str	00000000 
0003e013 l       .debug_str	00000000 
0003e088 l       .debug_str	00000000 
0003e0db l       .debug_str	00000000 
0003e167 l       .debug_str	00000000 
0003e19f l       .debug_str	00000000 
0003e1f4 l       .debug_str	00000000 
0003e225 l       .debug_str	00000000 
0003e277 l       .debug_str	00000000 
0003e2a5 l       .debug_str	00000000 
0003e2f9 l       .debug_str	00000000 
0003e31f l       .debug_str	00000000 
00021a38 l       .debug_str	00000000 
0003e356 l       .debug_str	00000000 
0003e3a1 l       .debug_str	00000000 
0003e3bd l       .debug_str	00000000 
0003e413 l       .debug_str	00000000 
00021b7f l       .debug_str	00000000 
0003e48c l       .debug_str	00000000 
0003e4dc l       .debug_str	00000000 
0003e573 l       .debug_str	00000000 
0003e5c9 l       .debug_str	00000000 
0003e642 l       .debug_str	00000000 
0003e65a l       .debug_str	00000000 
0003e6f1 l       .debug_str	00000000 
0003e72a l       .debug_str	00000000 
0003e95a l       .debug_str	00000000 
0003e773 l       .debug_str	00000000 
0003d63b l       .debug_str	00000000 
0003e7b0 l       .debug_str	00000000 
0003e7f4 l       .debug_str	00000000 
0003e83f l       .debug_str	00000000 
0003e87f l       .debug_str	00000000 
0003e8a9 l       .debug_str	00000000 
0003e8f2 l       .debug_str	00000000 
0003e901 l       .debug_str	00000000 
0003e952 l       .debug_str	00000000 
0003e969 l       .debug_str	00000000 
00048c09 l       .debug_str	00000000 
0005a1a8 l       .debug_str	00000000 
0003e9d0 l       .debug_str	00000000 
0003ea31 l       .debug_str	00000000 
0003ea50 l       .debug_str	00000000 
0003ea59 l       .debug_str	00000000 
0003ea65 l       .debug_str	00000000 
00003a15 l       .debug_str	00000000 
0003ea6b l       .debug_str	00000000 
0003ea75 l       .debug_str	00000000 
0003eaa7 l       .debug_str	00000000 
0003eab7 l       .debug_str	00000000 
0003eb3f l       .debug_str	00000000 
0003eb48 l       .debug_str	00000000 
0000cfb7 l       .debug_str	00000000 
0003ebb5 l       .debug_str	00000000 
0003ebf4 l       .debug_str	00000000 
00021430 l       .debug_str	00000000 
0002143c l       .debug_str	00000000 
00021446 l       .debug_str	00000000 
0003ec03 l       .debug_str	00000000 
0003ec73 l       .debug_str	00000000 
0003ec98 l       .debug_str	00000000 
0003ed07 l       .debug_str	00000000 
0003ed2d l       .debug_str	00000000 
0003ed9c l       .debug_str	00000000 
0003edc6 l       .debug_str	00000000 
0003edfd l       .debug_str	00000000 
0003ee08 l       .debug_str	00000000 
0003ee44 l       .debug_str	00000000 
0003ee63 l       .debug_str	00000000 
0003ee9d l       .debug_str	00000000 
0003eed8 l       .debug_str	00000000 
0003ef14 l       .debug_str	00000000 
0001671a l       .debug_str	00000000 
0003ef2e l       .debug_str	00000000 
0003ef6a l       .debug_str	00000000 
0003ef77 l       .debug_str	00000000 
00057c63 l       .debug_str	00000000 
0003efb5 l       .debug_str	00000000 
0003effb l       .debug_str	00000000 
0003f083 l       .debug_str	00000000 
0003f09c l       .debug_str	00000000 
0003f0f6 l       .debug_str	00000000 
0003f13c l       .debug_str	00000000 
0003f154 l       .debug_str	00000000 
0003f1d4 l       .debug_str	00000000 
0003f6a8 l       .debug_str	00000000 
0003f1e4 l       .debug_str	00000000 
0003f223 l       .debug_str	00000000 
0003f263 l       .debug_str	00000000 
0003f2ed l       .debug_str	00000000 
0003f304 l       .debug_str	00000000 
0003f355 l       .debug_str	00000000 
0003f363 l       .debug_str	00000000 
0003f368 l       .debug_str	00000000 
0003f3c3 l       .debug_str	00000000 
0003fd7d l       .debug_str	00000000 
0003f41a l       .debug_str	00000000 
0003f44d l       .debug_str	00000000 
0003f494 l       .debug_str	00000000 
0003f4ce l       .debug_str	00000000 
0003f4fd l       .debug_str	00000000 
0003f57b l       .debug_str	00000000 
0003f5ff l       .debug_str	00000000 
0003f68c l       .debug_str	00000000 
0003f6a1 l       .debug_str	00000000 
0003f6b1 l       .debug_str	00000000 
0003f6fd l       .debug_str	00000000 
0003f742 l       .debug_str	00000000 
0003f7d9 l       .debug_str	00000000 
0003f7f5 l       .debug_str	00000000 
0003f83c l       .debug_str	00000000 
0003f86a l       .debug_str	00000000 
0003f8a3 l       .debug_str	00000000 
0003f8c5 l       .debug_str	00000000 
00006bb2 l       .debug_str	00000000 
0003f943 l       .debug_str	00000000 
0003f9c3 l       .debug_str	00000000 
0003fa02 l       .debug_str	00000000 
0003fa8c l       .debug_str	00000000 
0003fad8 l       .debug_str	00000000 
0003faf6 l       .debug_str	00000000 
0003fb01 l       .debug_str	00000000 
0003fb63 l       .debug_str	00000000 
0003fbba l       .debug_str	00000000 
0003fc47 l       .debug_str	00000000 
0003fc93 l       .debug_str	00000000 
0003fd2a l       .debug_str	00000000 
0003fd74 l       .debug_str	00000000 
0003fd90 l       .debug_str	00000000 
0003fdea l       .debug_str	00000000 
0003fdf3 l       .debug_str	00000000 
0003fe52 l       .debug_str	00000000 
0003fea9 l       .debug_str	00000000 
0003ff02 l       .debug_str	00000000 
0003ff17 l       .debug_str	00000000 
0003ff64 l       .debug_str	00000000 
0003ffaf l       .debug_str	00000000 
0003ffc2 l       .debug_str	00000000 
0000b8d1 l       .debug_str	00000000 
00006b64 l       .debug_str	00000000 
0004000d l       .debug_str	00000000 
00040022 l       .debug_str	00000000 
0004002e l       .debug_str	00000000 
00040073 l       .debug_str	00000000 
000400cc l       .debug_str	00000000 
000400e1 l       .debug_str	00000000 
0004012e l       .debug_str	00000000 
00040179 l       .debug_str	00000000 
0004018c l       .debug_str	00000000 
000401d7 l       .debug_str	00000000 
000401ea l       .debug_str	00000000 
0004024e l       .debug_str	00000000 
00040287 l       .debug_str	00000000 
000402b3 l       .debug_str	00000000 
0005dcd8 l       .debug_str	00000000 
0005909d l       .debug_str	00000000 
00040332 l       .debug_str	00000000 
00040338 l       .debug_str	00000000 
00040341 l       .debug_str	00000000 
00040379 l       .debug_str	00000000 
00040396 l       .debug_str	00000000 
000403d2 l       .debug_str	00000000 
000403ef l       .debug_str	00000000 
0004044b l       .debug_str	00000000 
00040483 l       .debug_str	00000000 
000404df l       .debug_str	00000000 
00024d3b l       .debug_str	00000000 
00040517 l       .debug_str	00000000 
00040555 l       .debug_str	00000000 
00040571 l       .debug_str	00000000 
000405c7 l       .debug_str	00000000 
0004062e l       .debug_str	00000000 
00040666 l       .debug_str	00000000 
00040672 l       .debug_str	00000000 
000406d9 l       .debug_str	00000000 
00040718 l       .debug_str	00000000 
00040729 l       .debug_str	00000000 
00040762 l       .debug_str	00000000 
0004e70a l       .debug_str	00000000 
0004077d l       .debug_str	00000000 
000407b9 l       .debug_str	00000000 
000407b2 l       .debug_str	00000000 
000407c2 l       .debug_str	00000000 
000407d4 l       .debug_str	00000000 
0004081f l       .debug_str	00000000 
00040837 l       .debug_str	00000000 
00040841 l       .debug_str	00000000 
00040858 l       .debug_str	00000000 
00040867 l       .debug_str	00000000 
000408a9 l       .debug_str	00000000 
000408c2 l       .debug_str	00000000 
00040936 l       .debug_str	00000000 
00040945 l       .debug_str	00000000 
0004097e l       .debug_str	00000000 
00040994 l       .debug_str	00000000 
000409d4 l       .debug_str	00000000 
000409df l       .debug_str	00000000 
00040a5e l       .debug_str	00000000 
00058816 l       .debug_str	00000000 
00040a7d l       .debug_str	00000000 
00040a92 l       .debug_str	00000000 
00040a9c l       .debug_str	00000000 
000073c7 l       .debug_str	00000000 
00040aa1 l       .debug_str	00000000 
00040ad2 l       .debug_str	00000000 
00040ae5 l       .debug_str	00000000 
00040aef l       .debug_str	00000000 
00040b0c l       .debug_str	00000000 
00040b47 l       .debug_str	00000000 
00040b7c l       .debug_str	00000000 
00040bad l       .debug_str	00000000 
00040bc1 l       .debug_str	00000000 
00040bcc l       .debug_str	00000000 
00040bea l       .debug_str	00000000 
00040c25 l       .debug_str	00000000 
00040c5b l       .debug_str	00000000 
00040c8c l       .debug_str	00000000 
00040ca0 l       .debug_str	00000000 
00040cab l       .debug_str	00000000 
00040cc9 l       .debug_str	00000000 
00040d04 l       .debug_str	00000000 
00040d3a l       .debug_str	00000000 
00040d6b l       .debug_str	00000000 
00040d7f l       .debug_str	00000000 
00040d8a l       .debug_str	00000000 
00040da8 l       .debug_str	00000000 
00040de3 l       .debug_str	00000000 
00040e19 l       .debug_str	00000000 
00040e4a l       .debug_str	00000000 
00045697 l       .debug_str	00000000 
00040e5f l       .debug_str	00000000 
00040e6b l       .debug_str	00000000 
00040e8a l       .debug_str	00000000 
00040ec5 l       .debug_str	00000000 
00040efc l       .debug_str	00000000 
00040f2d l       .debug_str	00000000 
00040f40 l       .debug_str	00000000 
00040f4a l       .debug_str	00000000 
00040f67 l       .debug_str	00000000 
00040fa2 l       .debug_str	00000000 
00040fd7 l       .debug_str	00000000 
00041008 l       .debug_str	00000000 
0004101c l       .debug_str	00000000 
00041027 l       .debug_str	00000000 
00041045 l       .debug_str	00000000 
00041080 l       .debug_str	00000000 
000410b6 l       .debug_str	00000000 
000410e7 l       .debug_str	00000000 
000410fb l       .debug_str	00000000 
0004116a l       .debug_str	00000000 
000411a5 l       .debug_str	00000000 
000411ee l       .debug_str	00000000 
00041233 l       .debug_str	00000000 
0004128f l       .debug_str	00000000 
000412d8 l       .debug_str	00000000 
0004131d l       .debug_str	00000000 
00041379 l       .debug_str	00000000 
000413c2 l       .debug_str	00000000 
00041407 l       .debug_str	00000000 
00041463 l       .debug_str	00000000 
0004146e l       .debug_str	00000000 
0004148c l       .debug_str	00000000 
000414c7 l       .debug_str	00000000 
000414fd l       .debug_str	00000000 
0004152e l       .debug_str	00000000 
00041542 l       .debug_str	00000000 
0004154d l       .debug_str	00000000 
0004156b l       .debug_str	00000000 
000415a6 l       .debug_str	00000000 
000415dc l       .debug_str	00000000 
0004164b l       .debug_str	00000000 
00041686 l       .debug_str	00000000 
000416b7 l       .debug_str	00000000 
000416cc l       .debug_str	00000000 
000416d1 l       .debug_str	00000000 
000416dd l       .debug_str	00000000 
000416fc l       .debug_str	00000000 
00041737 l       .debug_str	00000000 
0004176e l       .debug_str	00000000 
000417dd l       .debug_str	00000000 
00041819 l       .debug_str	00000000 
00014d6d l       .debug_str	00000000 
00041862 l       .debug_str	00000000 
0004186d l       .debug_str	00000000 
000418b4 l       .debug_str	00000000 
000418be l       .debug_str	00000000 
00041940 l       .debug_str	00000000 
0004195d l       .debug_str	00000000 
00003e07 l       .debug_str	00000000 
000419b8 l       .debug_str	00000000 
00041a12 l       .debug_str	00000000 
00041a1f l       .debug_str	00000000 
00041a91 l       .debug_str	00000000 
00041af5 l       .debug_str	00000000 
00041b00 l       .debug_str	00000000 
00041b79 l       .debug_str	00000000 
00041b85 l       .debug_str	00000000 
00041c01 l       .debug_str	00000000 
00041c07 l       .debug_str	00000000 
00041c0e l       .debug_str	00000000 
00041c4a l       .debug_str	00000000 
00006c03 l       .debug_str	00000000 
00041c93 l       .debug_str	00000000 
00041cd7 l       .debug_str	00000000 
00041d22 l       .debug_str	00000000 
00041d61 l       .debug_str	00000000 
00041d86 l       .debug_str	00000000 
00041ddc l       .debug_str	00000000 
00041e4a l       .debug_str	00000000 
00041eca l       .debug_str	00000000 
00041f37 l       .debug_str	00000000 
00041fc2 l       .debug_str	00000000 
00042036 l       .debug_str	00000000 
00042076 l       .debug_str	00000000 
000420f7 l       .debug_str	00000000 
00042138 l       .debug_str	00000000 
0004219c l       .debug_str	00000000 
0004224b l       .debug_str	00000000 
00042295 l       .debug_str	00000000 
000422e2 l       .debug_str	00000000 
00042328 l       .debug_str	00000000 
00042332 l       .debug_str	00000000 
0004236b l       .debug_str	00000000 
0004239a l       .debug_str	00000000 
000423fb l       .debug_str	00000000 
0004242a l       .debug_str	00000000 
00042467 l       .debug_str	00000000 
000424f6 l       .debug_str	00000000 
0004252b l       .debug_str	00000000 
000425b1 l       .debug_str	00000000 
00042637 l       .debug_str	00000000 
0004268b l       .debug_str	00000000 
00042714 l       .debug_str	00000000 
00006a7b l       .debug_str	00000000 
00042762 l       .debug_str	00000000 
000427f0 l       .debug_str	00000000 
00042844 l       .debug_str	00000000 
00042883 l       .debug_str	00000000 
000428ce l       .debug_str	00000000 
00042950 l       .debug_str	00000000 
0004296c l       .debug_str	00000000 
000429c5 l       .debug_str	00000000 
00042a1e l       .debug_str	00000000 
00042a5b l       .debug_str	00000000 
00042a9c l       .debug_str	00000000 
00042afd l       .debug_str	00000000 
00042b6e l       .debug_str	00000000 
00042b9e l       .debug_str	00000000 
00042be4 l       .debug_str	00000000 
00042c56 l       .debug_str	00000000 
00042cea l       .debug_str	00000000 
00042d0e l       .debug_str	00000000 
00042d8a l       .debug_str	00000000 
00042dc4 l       .debug_str	00000000 
00042e06 l       .debug_str	00000000 
00042eb6 l       .debug_str	00000000 
00042ef5 l       .debug_str	00000000 
00042f98 l       .debug_str	00000000 
00042ff4 l       .debug_str	00000000 
00043051 l       .debug_str	00000000 
000430fc l       .debug_str	00000000 
00043135 l       .debug_str	00000000 
000431b1 l       .debug_str	00000000 
000431e9 l       .debug_str	00000000 
000431f5 l       .debug_str	00000000 
00043232 l       .debug_str	00000000 
0004328a l       .debug_str	00000000 
000432aa l       .debug_str	00000000 
00043303 l       .debug_str	00000000 
0004335c l       .debug_str	00000000 
000433b5 l       .debug_str	00000000 
0004340f l       .debug_str	00000000 
00043445 l       .debug_str	00000000 
00043455 l       .debug_str	00000000 
00043464 l       .debug_str	00000000 
0004346d l       .debug_str	00000000 
000434a4 l       .debug_str	00000000 
000434e0 l       .debug_str	00000000 
000434f0 l       .debug_str	00000000 
0004354c l       .debug_str	00000000 
000435ae l       .debug_str	00000000 
000367bd l       .debug_str	00000000 
000435f8 l       .debug_str	00000000 
00043633 l       .debug_str	00000000 
00043658 l       .debug_str	00000000 
000436b7 l       .debug_str	00000000 
00043701 l       .debug_str	00000000 
0004373c l       .debug_str	00000000 
00043761 l       .debug_str	00000000 
000437c0 l       .debug_str	00000000 
00043829 l       .debug_str	00000000 
00043832 l       .debug_str	00000000 
00043869 l       .debug_str	00000000 
000438c5 l       .debug_str	00000000 
00043927 l       .debug_str	00000000 
00043986 l       .debug_str	00000000 
000439e5 l       .debug_str	00000000 
00043a1b l       .debug_str	00000000 
00043a2c l       .debug_str	00000000 
00043a3c l       .debug_str	00000000 
00043a46 l       .debug_str	00000000 
00043a7e l       .debug_str	00000000 
00043adb l       .debug_str	00000000 
00043b3e l       .debug_str	00000000 
00043b89 l       .debug_str	00000000 
00043bc4 l       .debug_str	00000000 
00043bea l       .debug_str	00000000 
00043c4a l       .debug_str	00000000 
00043c95 l       .debug_str	00000000 
00043cd0 l       .debug_str	00000000 
00043cf6 l       .debug_str	00000000 
00043d56 l       .debug_str	00000000 
00043d8c l       .debug_str	00000000 
00043d9d l       .debug_str	00000000 
00043dad l       .debug_str	00000000 
00043db7 l       .debug_str	00000000 
00043def l       .debug_str	00000000 
00043e4c l       .debug_str	00000000 
00043eaf l       .debug_str	00000000 
00043f0f l       .debug_str	00000000 
00043f6f l       .debug_str	00000000 
00043fa5 l       .debug_str	00000000 
00043fb6 l       .debug_str	00000000 
00043fc6 l       .debug_str	00000000 
00043fd0 l       .debug_str	00000000 
00044008 l       .debug_str	00000000 
00044065 l       .debug_str	00000000 
000440c8 l       .debug_str	00000000 
00044113 l       .debug_str	00000000 
0004414e l       .debug_str	00000000 
00044174 l       .debug_str	00000000 
000441d4 l       .debug_str	00000000 
0004421f l       .debug_str	00000000 
0004425a l       .debug_str	00000000 
00044280 l       .debug_str	00000000 
000442e0 l       .debug_str	00000000 
00044316 l       .debug_str	00000000 
00044327 l       .debug_str	00000000 
00044337 l       .debug_str	00000000 
00044341 l       .debug_str	00000000 
00044379 l       .debug_str	00000000 
000443d6 l       .debug_str	00000000 
00044439 l       .debug_str	00000000 
00044499 l       .debug_str	00000000 
000444f9 l       .debug_str	00000000 
0004452f l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
00044542 l       .debug_str	00000000 
00044554 l       .debug_str	00000000 
00044560 l       .debug_str	00000000 
0004459b l       .debug_str	00000000 
000445fa l       .debug_str	00000000 
0004465f l       .debug_str	00000000 
000446c1 l       .debug_str	00000000 
000446fc l       .debug_str	00000000 
00044724 l       .debug_str	00000000 
00044786 l       .debug_str	00000000 
0000a06e l       .debug_str	00000000 
0000caa6 l       .debug_str	00000000 
0000caf6 l       .debug_str	00000000 
000447bc l       .debug_str	00000000 
000447f7 l       .debug_str	00000000 
00044837 l       .debug_str	00000000 
00044854 l       .debug_str	00000000 
00044898 l       .debug_str	00000000 
000448b9 l       .debug_str	00000000 
000448f9 l       .debug_str	00000000 
00044916 l       .debug_str	00000000 
0004495a l       .debug_str	00000000 
0004497b l       .debug_str	00000000 
000449dd l       .debug_str	00000000 
00044a44 l       .debug_str	00000000 
00044a7f l       .debug_str	00000000 
00044aa2 l       .debug_str	00000000 
00044b08 l       .debug_str	00000000 
00044b43 l       .debug_str	00000000 
00044b65 l       .debug_str	00000000 
00044ba0 l       .debug_str	00000000 
00044bc4 l       .debug_str	00000000 
00044bff l       .debug_str	00000000 
00044c22 l       .debug_str	00000000 
00044c5d l       .debug_str	00000000 
00044c81 l       .debug_str	00000000 
00044cbc l       .debug_str	00000000 
00044cdf l       .debug_str	00000000 
00044d1a l       .debug_str	00000000 
00044d3e l       .debug_str	00000000 
00044d89 l       .debug_str	00000000 
00044deb l       .debug_str	00000000 
00044e26 l       .debug_str	00000000 
00044e49 l       .debug_str	00000000 
00044e94 l       .debug_str	00000000 
00044ecf l       .debug_str	00000000 
00044ef5 l       .debug_str	00000000 
00044f30 l       .debug_str	00000000 
00044f56 l       .debug_str	00000000 
00044fa7 l       .debug_str	00000000 
00044ff5 l       .debug_str	00000000 
00045040 l       .debug_str	00000000 
00045073 l       .debug_str	00000000 
000450ae l       .debug_str	00000000 
000450d3 l       .debug_str	00000000 
0004515f l       .debug_str	00000000 
00045193 l       .debug_str	00000000 
0004520f l       .debug_str	00000000 
00045254 l       .debug_str	00000000 
000452a0 l       .debug_str	00000000 
00045303 l       .debug_str	00000000 
0004533e l       .debug_str	00000000 
00045362 l       .debug_str	00000000 
0004539d l       .debug_str	00000000 
000453c4 l       .debug_str	00000000 
00045410 l       .debug_str	00000000 
0004544b l       .debug_str	00000000 
00045472 l       .debug_str	00000000 
000454bd l       .debug_str	00000000 
00045509 l       .debug_str	00000000 
00045555 l       .debug_str	00000000 
00045586 l       .debug_str	00000000 
0004558e l       .debug_str	00000000 
0001e0bc l       .debug_str	00000000 
000455da l       .debug_str	00000000 
0004560f l       .debug_str	00000000 
0004563d l       .debug_str	00000000 
00045646 l       .debug_str	00000000 
00045694 l       .debug_str	00000000 
0004569c l       .debug_str	00000000 
00045701 l       .debug_str	00000000 
00045754 l       .debug_str	00000000 
000457b4 l       .debug_str	00000000 
000457d3 l       .debug_str	00000000 
00045836 l       .debug_str	00000000 
00045858 l       .debug_str	00000000 
000458a3 l       .debug_str	00000000 
00045908 l       .debug_str	00000000 
0004592a l       .debug_str	00000000 
00045993 l       .debug_str	00000000 
000459d0 l       .debug_str	00000000 
00045a39 l       .debug_str	00000000 
00045ac9 l       .debug_str	00000000 
00015eaf l       .debug_str	00000000 
00045b29 l       .debug_str	00000000 
00045b8c l       .debug_str	00000000 
00045bf5 l       .debug_str	00000000 
00045c28 l       .debug_str	00000000 
00045c70 l       .debug_str	00000000 
00045cea l       .debug_str	00000000 
00045d3b l       .debug_str	00000000 
00045d92 l       .debug_str	00000000 
000081cd l       .debug_str	00000000 
00045dda l       .debug_str	00000000 
00045e38 l       .debug_str	00000000 
00045e55 l       .debug_str	00000000 
00045ec1 l       .debug_str	00000000 
00045f06 l       .debug_str	00000000 
00045f54 l       .debug_str	00000000 
00045f9c l       .debug_str	00000000 
00045fa6 l       .debug_str	00000000 
00046014 l       .debug_str	00000000 
00046050 l       .debug_str	00000000 
00046073 l       .debug_str	00000000 
000460e3 l       .debug_str	00000000 
0004612b l       .debug_str	00000000 
00046134 l       .debug_str	00000000 
00046191 l       .debug_str	00000000 
000461f4 l       .debug_str	00000000 
00046254 l       .debug_str	00000000 
000462b4 l       .debug_str	00000000 
00046310 l       .debug_str	00000000 
0004636f l       .debug_str	00000000 
000463cf l       .debug_str	00000000 
000463ea l       .debug_str	00000000 
0000812b l       .debug_str	00000000 
0004643e l       .debug_str	00000000 
000464bc l       .debug_str	00000000 
000464e6 l       .debug_str	00000000 
00046548 l       .debug_str	00000000 
000465a9 l       .debug_str	00000000 
00046603 l       .debug_str	00000000 
00046668 l       .debug_str	00000000 
000466ba l       .debug_str	00000000 
00046702 l       .debug_str	00000000 
0004671d l       .debug_str	00000000 
00046797 l       .debug_str	00000000 
000467e4 l       .debug_str	00000000 
0004685e l       .debug_str	00000000 
000468ab l       .debug_str	00000000 
000468ff l       .debug_str	00000000 
00046951 l       .debug_str	00000000 
000469b9 l       .debug_str	00000000 
00046a19 l       .debug_str	00000000 
00046a73 l       .debug_str	00000000 
00046ad2 l       .debug_str	00000000 
00046b2c l       .debug_str	00000000 
00046b89 l       .debug_str	00000000 
000166b0 l       .debug_str	00000000 
00046bc7 l       .debug_str	00000000 
00017729 l       .debug_str	00000000 
00046c02 l       .debug_str	00000000 
00046c74 l       .debug_str	00000000 
00046d47 l       .debug_str	00000000 
000082eb l       .debug_str	00000000 
00046d8f l       .debug_str	00000000 
00046ddd l       .debug_str	00000000 
00046de7 l       .debug_str	00000000 
00046e2f l       .debug_str	00000000 
00046e3b l       .debug_str	00000000 
00046eaf l       .debug_str	00000000 
00046eba l       .debug_str	00000000 
00046ef6 l       .debug_str	00000000 
00046f1d l       .debug_str	00000000 
00046f6e l       .debug_str	00000000 
00046f7b l       .debug_str	00000000 
00046f89 l       .debug_str	00000000 
00046f9c l       .debug_str	00000000 
00046fa7 l       .debug_str	00000000 
00046fe9 l       .debug_str	00000000 
00046ffe l       .debug_str	00000000 
00047068 l       .debug_str	00000000 
000470c5 l       .debug_str	00000000 
00047125 l       .debug_str	00000000 
00047185 l       .debug_str	00000000 
000471f7 l       .debug_str	00000000 
00047244 l       .debug_str	00000000 
000472a3 l       .debug_str	00000000 
000472fd l       .debug_str	00000000 
00047370 l       .debug_str	00000000 
0004737d l       .debug_str	00000000 
000473dd l       .debug_str	00000000 
000473fc l       .debug_str	00000000 
00047464 l       .debug_str	00000000 
0004747f l       .debug_str	00000000 
000474d7 l       .debug_str	00000000 
00047521 l       .debug_str	00000000 
00047585 l       .debug_str	00000000 
000475a4 l       .debug_str	00000000 
00047606 l       .debug_str	00000000 
0004766c l       .debug_str	00000000 
000476ec l       .debug_str	00000000 
0004773b l       .debug_str	00000000 
000477b1 l       .debug_str	00000000 
00047827 l       .debug_str	00000000 
000478fc l       .debug_str	00000000 
00047959 l       .debug_str	00000000 
000479b7 l       .debug_str	00000000 
00047a37 l       .debug_str	00000000 
00047aa6 l       .debug_str	00000000 
00047b24 l       .debug_str	00000000 
00047b77 l       .debug_str	00000000 
00047bdc l       .debug_str	00000000 
00047c3c l       .debug_str	00000000 
00047caa l       .debug_str	00000000 
00047d42 l       .debug_str	00000000 
00047dd1 l       .debug_str	00000000 
00047e5f l       .debug_str	00000000 
00047eed l       .debug_str	00000000 
00047ffd l       .debug_str	00000000 
00048071 l       .debug_str	00000000 
000480b3 l       .debug_str	00000000 
000480fc l       .debug_str	00000000 
00048156 l       .debug_str	00000000 
000481cf l       .debug_str	00000000 
000481dc l       .debug_str	00000000 
000481e1 l       .debug_str	00000000 
0004824d l       .debug_str	00000000 
00048294 l       .debug_str	00000000 
0004831e l       .debug_str	00000000 
0004833d l       .debug_str	00000000 
000483c7 l       .debug_str	00000000 
000483eb l       .debug_str	00000000 
0004842f l       .debug_str	00000000 
00048493 l       .debug_str	00000000 
000484d7 l       .debug_str	00000000 
00048549 l       .debug_str	00000000 
00048607 l       .debug_str	00000000 
00048669 l       .debug_str	00000000 
00048701 l       .debug_str	00000000 
000487b0 l       .debug_str	00000000 
00048846 l       .debug_str	00000000 
000488d9 l       .debug_str	00000000 
0004891d l       .debug_str	00000000 
00048970 l       .debug_str	00000000 
000489f4 l       .debug_str	00000000 
00048a82 l       .debug_str	00000000 
00048ad6 l       .debug_str	00000000 
00048ae7 l       .debug_str	00000000 
00048b6c l       .debug_str	00000000 
00048bf8 l       .debug_str	00000000 
00048c01 l       .debug_str	00000000 
00048c0e l       .debug_str	00000000 
00048c65 l       .debug_str	00000000 
00048cea l       .debug_str	00000000 
00048d3c l       .debug_str	00000000 
00048d4b l       .debug_str	00000000 
00048d92 l       .debug_str	00000000 
00048df6 l       .debug_str	00000000 
00048e17 l       .debug_str	00000000 
00048e97 l       .debug_str	00000000 
00048f02 l       .debug_str	00000000 
00048f80 l       .debug_str	00000000 
00048fcf l       .debug_str	00000000 
0004902e l       .debug_str	00000000 
000490c6 l       .debug_str	00000000 
0004916c l       .debug_str	00000000 
00049202 l       .debug_str	00000000 
0004928c l       .debug_str	00000000 
00049302 l       .debug_str	00000000 
0004934b l       .debug_str	00000000 
000493a7 l       .debug_str	00000000 
00049422 l       .debug_str	00000000 
0004948e l       .debug_str	00000000 
00049518 l       .debug_str	00000000 
0004955c l       .debug_str	00000000 
000495bd l       .debug_str	00000000 
00049601 l       .debug_str	00000000 
00049685 l       .debug_str	00000000 
0004970f l       .debug_str	00000000 
00049761 l       .debug_str	00000000 
000497df l       .debug_str	00000000 
00049864 l       .debug_str	00000000 
000498bb l       .debug_str	00000000 
0004993c l       .debug_str	00000000 
000499fa l       .debug_str	00000000 
00049a59 l       .debug_str	00000000 
00049abc l       .debug_str	00000000 
00049ae1 l       .debug_str	00000000 
00049b45 l       .debug_str	00000000 
00049b66 l       .debug_str	00000000 
00049be6 l       .debug_str	00000000 
00049c51 l       .debug_str	00000000 
00049ccf l       .debug_str	00000000 
00049d1e l       .debug_str	00000000 
00049d7d l       .debug_str	00000000 
00049e15 l       .debug_str	00000000 
00049ebb l       .debug_str	00000000 
00049f51 l       .debug_str	00000000 
00049fdb l       .debug_str	00000000 
0004a051 l       .debug_str	00000000 
0004a09a l       .debug_str	00000000 
0004a0f6 l       .debug_str	00000000 
0004a171 l       .debug_str	00000000 
0004a1dd l       .debug_str	00000000 
0004a267 l       .debug_str	00000000 
0004a2ab l       .debug_str	00000000 
0004a30c l       .debug_str	00000000 
0004a350 l       .debug_str	00000000 
0004a3d4 l       .debug_str	00000000 
0004a45e l       .debug_str	00000000 
0004a4dc l       .debug_str	00000000 
0004a561 l       .debug_str	00000000 
0004a5b8 l       .debug_str	00000000 
0004a639 l       .debug_str	00000000 
0004a6f7 l       .debug_str	00000000 
0004a756 l       .debug_str	00000000 
0004a789 l       .debug_str	00000000 
0004a7bc l       .debug_str	00000000 
0004a7ef l       .debug_str	00000000 
0004a822 l       .debug_str	00000000 
0004a855 l       .debug_str	00000000 
0004a888 l       .debug_str	00000000 
0004a8bb l       .debug_str	00000000 
0004a90f l       .debug_str	00000000 
0004a93d l       .debug_str	00000000 
0004a991 l       .debug_str	00000000 
0005d36e l       .debug_str	00000000 
00001676 l       .debug_str	00000000 
0004a9a4 l       .debug_str	00000000 
0004a9a8 l       .debug_str	00000000 
0004a9ac l       .debug_str	00000000 
0004a9b0 l       .debug_str	00000000 
0004a9b7 l       .debug_str	00000000 
0004a9bc l       .debug_str	00000000 
0004a9ec l       .debug_str	00000000 
0004aa3e l       .debug_str	00000000 
0004aa7f l       .debug_str	00000000 
0004aa8c l       .debug_str	00000000 
0004aacb l       .debug_str	00000000 
0004aad6 l       .debug_str	00000000 
0004ab12 l       .debug_str	00000000 
0004ab20 l       .debug_str	00000000 
0004ab54 l       .debug_str	00000000 
0004ab8f l       .debug_str	00000000 
0004abcd l       .debug_str	00000000 
0004abdb l       .debug_str	00000000 
0004ac14 l       .debug_str	00000000 
0004ac1e l       .debug_str	00000000 
0004ac5a l       .debug_str	00000000 
0004acb6 l       .debug_str	00000000 
0004acbd l       .debug_str	00000000 
0004ad1b l       .debug_str	00000000 
0004ad24 l       .debug_str	00000000 
0004ad8b l       .debug_str	00000000 
0004ad9c l       .debug_str	00000000 
0004adf9 l       .debug_str	00000000 
0004ae58 l       .debug_str	00000000 
0004aeb4 l       .debug_str	00000000 
0004af12 l       .debug_str	00000000 
0004af79 l       .debug_str	00000000 
0004afd6 l       .debug_str	00000000 
0004b035 l       .debug_str	00000000 
0004b06e l       .debug_str	00000000 
0004b078 l       .debug_str	00000000 
0004b0e0 l       .debug_str	00000000 
0004b113 l       .debug_str	00000000 
0004b11d l       .debug_str	00000000 
0004b153 l       .debug_str	00000000 
0004b15f l       .debug_str	00000000 
0004b196 l       .debug_str	00000000 
0004b1a3 l       .debug_str	00000000 
0004b1e7 l       .debug_str	00000000 
0004b201 l       .debug_str	00000000 
0004b272 l       .debug_str	00000000 
0004b285 l       .debug_str	00000000 
0004b2f6 l       .debug_str	00000000 
0004b339 l       .debug_str	00000000 
0004b343 l       .debug_str	00000000 
0004b38d l       .debug_str	00000000 
0004b3d4 l       .debug_str	00000000 
0004b421 l       .debug_str	00000000 
0004b46b l       .debug_str	00000000 
0004b49d l       .debug_str	00000000 
0004b4a6 l       .debug_str	00000000 
0004b4da l       .debug_str	00000000 
0004b513 l       .debug_str	00000000 
0004b54f l       .debug_str	00000000 
0004b561 l       .debug_str	00000000 
0004b5a2 l       .debug_str	00000000 
0004b601 l       .debug_str	00000000 
0004b632 l       .debug_str	00000000 
0004b648 l       .debug_str	00000000 
0004b67d l       .debug_str	00000000 
0004b6da l       .debug_str	00000000 
0004b73e l       .debug_str	00000000 
0004b79d l       .debug_str	00000000 
0004b7fd l       .debug_str	00000000 
0004b85b l       .debug_str	00000000 
00021d2b l       .debug_str	00000000 
0004b8c0 l       .debug_str	00000000 
0004b906 l       .debug_str	00000000 
0004b946 l       .debug_str	00000000 
0004b9ce l       .debug_str	00000000 
00059da4 l       .debug_str	00000000 
0004ba55 l       .debug_str	00000000 
0004ba88 l       .debug_str	00000000 
0004bafc l       .debug_str	00000000 
0004bb75 l       .debug_str	00000000 
0004bbe9 l       .debug_str	00000000 
0004bc48 l       .debug_str	00000000 
0004bca5 l       .debug_str	00000000 
0004bcff l       .debug_str	00000000 
0004bd5b l       .debug_str	00000000 
0004bdb8 l       .debug_str	00000000 
0004be17 l       .debug_str	00000000 
0004be7f l       .debug_str	00000000 
0004bee9 l       .debug_str	00000000 
0004bf52 l       .debug_str	00000000 
0004bfb0 l       .debug_str	00000000 
0004c022 l       .debug_str	00000000 
0004c026 l       .debug_str	00000000 
0004c099 l       .debug_str	00000000 
0004c0f7 l       .debug_str	00000000 
0004c153 l       .debug_str	00000000 
0004c1c4 l       .debug_str	00000000 
0004c23a l       .debug_str	00000000 
0004c271 l       .debug_str	00000000 
0004c2cd l       .debug_str	00000000 
0004c321 l       .debug_str	00000000 
0004c37f l       .debug_str	00000000 
0004c3eb l       .debug_str	00000000 
0004c440 l       .debug_str	00000000 
0004c473 l       .debug_str	00000000 
0004c481 l       .debug_str	00000000 
0004c4b9 l       .debug_str	00000000 
0004c4cc l       .debug_str	00000000 
0004c501 l       .debug_str	00000000 
0004c537 l       .debug_str	00000000 
0004c592 l       .debug_str	00000000 
0004c5c5 l       .debug_str	00000000 
0004c5cc l       .debug_str	00000000 
0004c60e l       .debug_str	00000000 
0004c63f l       .debug_str	00000000 
0004c670 l       .debug_str	00000000 
0004c6a3 l       .debug_str	00000000 
0004c6aa l       .debug_str	00000000 
0004c6d7 l       .debug_str	00000000 
0004c712 l       .debug_str	00000000 
0004c725 l       .debug_str	00000000 
0004c756 l       .debug_str	00000000 
0004c760 l       .debug_str	00000000 
0004c7c1 l       .debug_str	00000000 
0004c829 l       .debug_str	00000000 
0004c866 l       .debug_str	00000000 
0004c8b4 l       .debug_str	00000000 
0004c8f0 l       .debug_str	00000000 
0004c92c l       .debug_str	00000000 
0004c965 l       .debug_str	00000000 
0004c99f l       .debug_str	00000000 
0004c9d8 l       .debug_str	00000000 
0004ca0f l       .debug_str	00000000 
0004ca48 l       .debug_str	00000000 
0004ca82 l       .debug_str	00000000 
0004cac8 l       .debug_str	00000000 
0004caeb l       .debug_str	00000000 
0004cb31 l       .debug_str	00000000 
0004cb54 l       .debug_str	00000000 
0004cb9d l       .debug_str	00000000 
0004cbc3 l       .debug_str	00000000 
0004cc0c l       .debug_str	00000000 
0004cc32 l       .debug_str	00000000 
0004cc7c l       .debug_str	00000000 
0004cca3 l       .debug_str	00000000 
0004cced l       .debug_str	00000000 
0004cd14 l       .debug_str	00000000 
0004cd61 l       .debug_str	00000000 
0004cd8b l       .debug_str	00000000 
0004cdd8 l       .debug_str	00000000 
0004ce02 l       .debug_str	00000000 
0004ce35 l       .debug_str	00000000 
0004ce61 l       .debug_str	00000000 
0004ceb7 l       .debug_str	00000000 
0004cee2 l       .debug_str	00000000 
0004cf3a l       .debug_str	00000000 
0004cf90 l       .debug_str	00000000 
0004cfc9 l       .debug_str	00000000 
0004cfd4 l       .debug_str	00000000 
0000bb0b l       .debug_str	00000000 
0004d00d l       .debug_str	00000000 
0004d034 l       .debug_str	00000000 
0004d06d l       .debug_str	00000000 
0004d0b4 l       .debug_str	00000000 
0004d0c1 l       .debug_str	00000000 
0004d2db l       .debug_str	00000000 
0004d0f0 l       .debug_str	00000000 
0004d130 l       .debug_str	00000000 
0004d144 l       .debug_str	00000000 
0004d186 l       .debug_str	00000000 
0004d1b7 l       .debug_str	00000000 
0004d1e7 l       .debug_str	00000000 
0004d218 l       .debug_str	00000000 
0004d249 l       .debug_str	00000000 
0004d280 l       .debug_str	00000000 
0004d28b l       .debug_str	00000000 
0004d2cb l       .debug_str	00000000 
0004d2df l       .debug_str	00000000 
0004d31b l       .debug_str	00000000 
0004d32b l       .debug_str	00000000 
0004d360 l       .debug_str	00000000 
0004d36a l       .debug_str	00000000 
0004d39f l       .debug_str	00000000 
0004d3a9 l       .debug_str	00000000 
0004d3fe l       .debug_str	00000000 
0004d446 l       .debug_str	00000000 
0004d48c l       .debug_str	00000000 
0004d4d3 l       .debug_str	00000000 
0004d51c l       .debug_str	00000000 
0004d56e l       .debug_str	00000000 
0004d5c0 l       .debug_str	00000000 
0004d65e l       .debug_str	00000000 
0004d690 l       .debug_str	00000000 
0004d6c9 l       .debug_str	00000000 
0004d6de l       .debug_str	00000000 
0004d719 l       .debug_str	00000000 
0004d730 l       .debug_str	00000000 
0004d76e l       .debug_str	00000000 
0004d788 l       .debug_str	00000000 
0004d7ea l       .debug_str	00000000 
0004d80f l       .debug_str	00000000 
0004d86a l       .debug_str	00000000 
0004d879 l       .debug_str	00000000 
0004d8ee l       .debug_str	00000000 
0004d90b l       .debug_str	00000000 
0004d945 l       .debug_str	00000000 
0004d982 l       .debug_str	00000000 
0004d98d l       .debug_str	00000000 
0004d9c5 l       .debug_str	00000000 
0004d9cc l       .debug_str	00000000 
0004da4b l       .debug_str	00000000 
0004daab l       .debug_str	00000000 
0004db09 l       .debug_str	00000000 
0004db67 l       .debug_str	00000000 
0004db9f l       .debug_str	00000000 
0004dbd4 l       .debug_str	00000000 
0004dbff l       .debug_str	00000000 
0004dc09 l       .debug_str	00000000 
0004dc39 l       .debug_str	00000000 
0004dc47 l       .debug_str	00000000 
0004dca0 l       .debug_str	00000000 
0004dcf3 l       .debug_str	00000000 
0004dd6f l       .debug_str	00000000 
0004ddd3 l       .debug_str	00000000 
0004de37 l       .debug_str	00000000 
0004de6d l       .debug_str	00000000 
0004de81 l       .debug_str	00000000 
0004dec2 l       .debug_str	00000000 
0004deda l       .debug_str	00000000 
0004df8e l       .debug_str	00000000 
0004dfc1 l       .debug_str	00000000 
0004dfd2 l       .debug_str	00000000 
0004e018 l       .debug_str	00000000 
0004e025 l       .debug_str	00000000 
0004e062 l       .debug_str	00000000 
0004e0a6 l       .debug_str	00000000 
0004e0e7 l       .debug_str	00000000 
0004e129 l       .debug_str	00000000 
0004e133 l       .debug_str	00000000 
0004e177 l       .debug_str	00000000 
0004e182 l       .debug_str	00000000 
0004e1d0 l       .debug_str	00000000 
0004e21e l       .debug_str	00000000 
0004e264 l       .debug_str	00000000 
0004e2ac l       .debug_str	00000000 
0004e2f4 l       .debug_str	00000000 
0001eed8 l       .debug_str	00000000 
0004e35b l       .debug_str	00000000 
0004e3b4 l       .debug_str	00000000 
0004e41e l       .debug_str	00000000 
00003f0e l       .debug_str	00000000 
0004e488 l       .debug_str	00000000 
0004e503 l       .debug_str	00000000 
0004e578 l       .debug_str	00000000 
0004e583 l       .debug_str	00000000 
0004e5f8 l       .debug_str	00000000 
0004e603 l       .debug_str	00000000 
0004e65a l       .debug_str	00000000 
0004e6be l       .debug_str	00000000 
0004e6ca l       .debug_str	00000000 
0004e707 l       .debug_str	00000000 
0004e714 l       .debug_str	00000000 
0004e748 l       .debug_str	00000000 
0004e783 l       .debug_str	00000000 
0004e7df l       .debug_str	00000000 
0004e83a l       .debug_str	00000000 
0004e894 l       .debug_str	00000000 
000352ce l       .debug_str	00000000 
0004e8da l       .debug_str	00000000 
0004e940 l       .debug_str	00000000 
0004e977 l       .debug_str	00000000 
0004e97f l       .debug_str	00000000 
0004e9b7 l       .debug_str	00000000 
0004e9c0 l       .debug_str	00000000 
0004e9f8 l       .debug_str	00000000 
0004ea01 l       .debug_str	00000000 
0004ea38 l       .debug_str	00000000 
0004ea40 l       .debug_str	00000000 
0004ea78 l       .debug_str	00000000 
0004ea81 l       .debug_str	00000000 
0004eab9 l       .debug_str	00000000 
0004eac2 l       .debug_str	00000000 
0004eaf9 l       .debug_str	00000000 
0004eb01 l       .debug_str	00000000 
0004eb7b l       .debug_str	00000000 
0004ebf5 l       .debug_str	00000000 
0004ec6f l       .debug_str	00000000 
0004eceb l       .debug_str	00000000 
00007a65 l       .debug_str	00000000 
0004ed49 l       .debug_str	00000000 
0004eda8 l       .debug_str	00000000 
0004ee07 l       .debug_str	00000000 
0004ee66 l       .debug_str	00000000 
0004eec6 l       .debug_str	00000000 
0004ef24 l       .debug_str	00000000 
0004ef83 l       .debug_str	00000000 
0004efe2 l       .debug_str	00000000 
0004f041 l       .debug_str	00000000 
0004f0a1 l       .debug_str	00000000 
0004f0f6 l       .debug_str	00000000 
0004f14b l       .debug_str	00000000 
0004f1a5 l       .debug_str	00000000 
0004f1ff l       .debug_str	00000000 
0004f239 l       .debug_str	00000000 
0004f242 l       .debug_str	00000000 
0004f27c l       .debug_str	00000000 
0004f285 l       .debug_str	00000000 
0004f2c2 l       .debug_str	00000000 
000367b9 l       .debug_str	00000000 
0004f2fb l       .debug_str	00000000 
0004f35c l       .debug_str	00000000 
0004f3ba l       .debug_str	00000000 
0004f3fb l       .debug_str	00000000 
0004f439 l       .debug_str	00000000 
0004f472 l       .debug_str	00000000 
0004f4b1 l       .debug_str	00000000 
0004f4ef l       .debug_str	00000000 
0004f52d l       .debug_str	00000000 
0004f56e l       .debug_str	00000000 
0004f5b2 l       .debug_str	00000000 
0004f5ef l       .debug_str	00000000 
0004f655 l       .debug_str	00000000 
0004f6bc l       .debug_str	00000000 
0004f71f l       .debug_str	00000000 
0004f781 l       .debug_str	00000000 
0004f7e6 l       .debug_str	00000000 
0004f84f l       .debug_str	00000000 
0004f8b5 l       .debug_str	00000000 
0004f91b l       .debug_str	00000000 
0004f976 l       .debug_str	00000000 
0004f9dd l       .debug_str	00000000 
0004fa48 l       .debug_str	00000000 
0004faa3 l       .debug_str	00000000 
0004fafe l       .debug_str	00000000 
000167b4 l       .debug_str	00000000 
0004fb45 l       .debug_str	00000000 
0004fb8d l       .debug_str	00000000 
0004fbd5 l       .debug_str	00000000 
0004fc1d l       .debug_str	00000000 
0004fc66 l       .debug_str	00000000 
0004fcb0 l       .debug_str	00000000 
0004fcf7 l       .debug_str	00000000 
0004fd4a l       .debug_str	00000000 
0004fd65 l       .debug_str	00000000 
0004fdad l       .debug_str	00000000 
0004fe01 l       .debug_str	00000000 
0004fe49 l       .debug_str	00000000 
0004fe9d l       .debug_str	00000000 
0004fee5 l       .debug_str	00000000 
0004ff39 l       .debug_str	00000000 
0004ff82 l       .debug_str	00000000 
0004ffd7 l       .debug_str	00000000 
00050021 l       .debug_str	00000000 
00050079 l       .debug_str	00000000 
000500db l       .debug_str	00000000 
0005013a l       .debug_str	00000000 
0005019a l       .debug_str	00000000 
000501fa l       .debug_str	00000000 
0005025a l       .debug_str	00000000 
000502bb l       .debug_str	00000000 
0005031a l       .debug_str	00000000 
0005037a l       .debug_str	00000000 
000503da l       .debug_str	00000000 
0005043a l       .debug_str	00000000 
0005049b l       .debug_str	00000000 
000504f8 l       .debug_str	00000000 
00050553 l       .debug_str	00000000 
000505a9 l       .debug_str	00000000 
00050607 l       .debug_str	00000000 
0005065b l       .debug_str	00000000 
000506bc l       .debug_str	00000000 
00050722 l       .debug_str	00000000 
0005078a l       .debug_str	00000000 
000507f1 l       .debug_str	00000000 
0005084d l       .debug_str	00000000 
000508ae l       .debug_str	00000000 
00050908 l       .debug_str	00000000 
00050962 l       .debug_str	00000000 
000509c0 l       .debug_str	00000000 
00050a14 l       .debug_str	00000000 
00050a90 l       .debug_str	00000000 
00050af9 l       .debug_str	00000000 
00050b75 l       .debug_str	00000000 
00050bf1 l       .debug_str	00000000 
00050c5a l       .debug_str	00000000 
00050cd6 l       .debug_str	00000000 
00050d43 l       .debug_str	00000000 
00050d9d l       .debug_str	00000000 
00050df6 l       .debug_str	00000000 
00050e4e l       .debug_str	00000000 
00050ead l       .debug_str	00000000 
00050f0c l       .debug_str	00000000 
00050f6b l       .debug_str	00000000 
00050fcb l       .debug_str	00000000 
0005102b l       .debug_str	00000000 
0005108b l       .debug_str	00000000 
000510eb l       .debug_str	00000000 
0005114d l       .debug_str	00000000 
000511af l       .debug_str	00000000 
00051210 l       .debug_str	00000000 
00051272 l       .debug_str	00000000 
000512d4 l       .debug_str	00000000 
00051335 l       .debug_str	00000000 
00051397 l       .debug_str	00000000 
000513f9 l       .debug_str	00000000 
000367fd l       .debug_str	00000000 
00051442 l       .debug_str	00000000 
0005148e l       .debug_str	00000000 
00051496 l       .debug_str	00000000 
000514e0 l       .debug_str	00000000 
0005152b l       .debug_str	00000000 
00051532 l       .debug_str	00000000 
0005157d l       .debug_str	00000000 
000515c8 l       .debug_str	00000000 
00051614 l       .debug_str	00000000 
0005165e l       .debug_str	00000000 
000516ab l       .debug_str	00000000 
000516f6 l       .debug_str	00000000 
00051742 l       .debug_str	00000000 
0005178e l       .debug_str	00000000 
000517da l       .debug_str	00000000 
00051827 l       .debug_str	00000000 
00051871 l       .debug_str	00000000 
000518be l       .debug_str	00000000 
00051909 l       .debug_str	00000000 
00051955 l       .debug_str	00000000 
000519a1 l       .debug_str	00000000 
000519ed l       .debug_str	00000000 
00051a3a l       .debug_str	00000000 
00051a84 l       .debug_str	00000000 
00051ad1 l       .debug_str	00000000 
00051b1c l       .debug_str	00000000 
00051b68 l       .debug_str	00000000 
00051bb4 l       .debug_str	00000000 
00051c00 l       .debug_str	00000000 
00051c4d l       .debug_str	00000000 
00051c98 l       .debug_str	00000000 
00051ce6 l       .debug_str	00000000 
00051d32 l       .debug_str	00000000 
00051d7f l       .debug_str	00000000 
00051dcc l       .debug_str	00000000 
00051e19 l       .debug_str	00000000 
00051e67 l       .debug_str	00000000 
00051eb2 l       .debug_str	00000000 
00051efd l       .debug_str	00000000 
00051f49 l       .debug_str	00000000 
00051f95 l       .debug_str	00000000 
00051fe2 l       .debug_str	00000000 
0005202e l       .debug_str	00000000 
0005207b l       .debug_str	00000000 
000520c8 l       .debug_str	00000000 
00052127 l       .debug_str	00000000 
00052184 l       .debug_str	00000000 
000521e0 l       .debug_str	00000000 
0005223e l       .debug_str	00000000 
0005229b l       .debug_str	00000000 
000522f9 l       .debug_str	00000000 
00052356 l       .debug_str	00000000 
000523b4 l       .debug_str	00000000 
00052411 l       .debug_str	00000000 
00052470 l       .debug_str	00000000 
000524ce l       .debug_str	00000000 
0005252f l       .debug_str	00000000 
00052590 l       .debug_str	00000000 
000525f3 l       .debug_str	00000000 
00052624 l       .debug_str	00000000 
0005262c l       .debug_str	00000000 
0005268f l       .debug_str	00000000 
000526f2 l       .debug_str	00000000 
00052756 l       .debug_str	00000000 
000527ba l       .debug_str	00000000 
0005281e l       .debug_str	00000000 
00052882 l       .debug_str	00000000 
000528e5 l       .debug_str	00000000 
00052948 l       .debug_str	00000000 
000529ac l       .debug_str	00000000 
00052a10 l       .debug_str	00000000 
00052a74 l       .debug_str	00000000 
00052ad8 l       .debug_str	00000000 
00052b09 l       .debug_str	00000000 
00052b11 l       .debug_str	00000000 
00052b75 l       .debug_str	00000000 
00052bd9 l       .debug_str	00000000 
00052c3d l       .debug_str	00000000 
00052ca1 l       .debug_str	00000000 
00052d01 l       .debug_str	00000000 
00052d61 l       .debug_str	00000000 
00052d8f l       .debug_str	00000000 
00052d98 l       .debug_str	00000000 
00052df9 l       .debug_str	00000000 
00052e5a l       .debug_str	00000000 
00052ebb l       .debug_str	00000000 
00052f1c l       .debug_str	00000000 
00052f73 l       .debug_str	00000000 
00052fc6 l       .debug_str	00000000 
0005300e l       .debug_str	00000000 
00053036 l       .debug_str	00000000 
0005307e l       .debug_str	00000000 
00053094 l       .debug_str	00000000 
000530dc l       .debug_str	00000000 
00053111 l       .debug_str	00000000 
00053159 l       .debug_str	00000000 
00053194 l       .debug_str	00000000 
000531dc l       .debug_str	00000000 
00053224 l       .debug_str	00000000 
00053245 l       .debug_str	00000000 
0005328d l       .debug_str	00000000 
00053298 l       .debug_str	00000000 
000532e0 l       .debug_str	00000000 
0005331d l       .debug_str	00000000 
00053365 l       .debug_str	00000000 
000533be l       .debug_str	00000000 
00053406 l       .debug_str	00000000 
00053422 l       .debug_str	00000000 
0005346a l       .debug_str	00000000 
00053516 l       .debug_str	00000000 
0005355e l       .debug_str	00000000 
0005357c l       .debug_str	00000000 
000535c4 l       .debug_str	00000000 
000535ce l       .debug_str	00000000 
00053616 l       .debug_str	00000000 
00053651 l       .debug_str	00000000 
00053699 l       .debug_str	00000000 
000536e8 l       .debug_str	00000000 
00053730 l       .debug_str	00000000 
00053757 l       .debug_str	00000000 
0005379f l       .debug_str	00000000 
000537c9 l       .debug_str	00000000 
00053811 l       .debug_str	00000000 
0005388c l       .debug_str	00000000 
000538d4 l       .debug_str	00000000 
0005391c l       .debug_str	00000000 
00053932 l       .debug_str	00000000 
0000364d l       .debug_str	00000000 
0005397a l       .debug_str	00000000 
000539c2 l       .debug_str	00000000 
00053a0a l       .debug_str	00000000 
00053a3b l       .debug_str	00000000 
00053a83 l       .debug_str	00000000 
00053ae7 l       .debug_str	00000000 
00053b2f l       .debug_str	00000000 
000035ab l       .debug_str	00000000 
00053b77 l       .debug_str	00000000 
00053bbf l       .debug_str	00000000 
00053bcc l       .debug_str	00000000 
00053c14 l       .debug_str	00000000 
00053c1e l       .debug_str	00000000 
00053c66 l       .debug_str	00000000 
00053c6f l       .debug_str	00000000 
00053cb7 l       .debug_str	00000000 
00053cdf l       .debug_str	00000000 
00053d27 l       .debug_str	00000000 
00053d6f l       .debug_str	00000000 
00053d91 l       .debug_str	00000000 
00053dd9 l       .debug_str	00000000 
00053e0a l       .debug_str	00000000 
00053e52 l       .debug_str	00000000 
00053e9a l       .debug_str	00000000 
00053ed2 l       .debug_str	00000000 
00053f1a l       .debug_str	00000000 
00053f4f l       .debug_str	00000000 
00053f97 l       .debug_str	00000000 
00053fc0 l       .debug_str	00000000 
00054008 l       .debug_str	00000000 
0005402c l       .debug_str	00000000 
00054074 l       .debug_str	00000000 
00054099 l       .debug_str	00000000 
000540e1 l       .debug_str	00000000 
000540fe l       .debug_str	00000000 
00054146 l       .debug_str	00000000 
00054151 l       .debug_str	00000000 
00054199 l       .debug_str	00000000 
000541c1 l       .debug_str	00000000 
00054209 l       .debug_str	00000000 
00054218 l       .debug_str	00000000 
00054260 l       .debug_str	00000000 
000542a8 l       .debug_str	00000000 
000542c4 l       .debug_str	00000000 
0005430c l       .debug_str	00000000 
00054383 l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
00054442 l       .debug_str	00000000 
0005448a l       .debug_str	00000000 
00054493 l       .debug_str	00000000 
000544db l       .debug_str	00000000 
00054501 l       .debug_str	00000000 
00054549 l       .debug_str	00000000 
0005457c l       .debug_str	00000000 
000545c4 l       .debug_str	00000000 
000545e1 l       .debug_str	00000000 
00054629 l       .debug_str	00000000 
00054632 l       .debug_str	00000000 
0005467a l       .debug_str	00000000 
000546c2 l       .debug_str	00000000 
000546e6 l       .debug_str	00000000 
000035fc l       .debug_str	00000000 
0005472e l       .debug_str	00000000 
00054776 l       .debug_str	00000000 
000547be l       .debug_str	00000000 
000548b6 l       .debug_str	00000000 
0000817b l       .debug_str	00000000 
000548fe l       .debug_str	00000000 
00054946 l       .debug_str	00000000 
0005498e l       .debug_str	00000000 
000549bb l       .debug_str	00000000 
00015f8f l       .debug_str	00000000 
00054a03 l       .debug_str	00000000 
00054a4b l       .debug_str	00000000 
00054aa8 l       .debug_str	00000000 
00054af0 l       .debug_str	00000000 
00054af9 l       .debug_str	00000000 
00054b41 l       .debug_str	00000000 
00054b5e l       .debug_str	00000000 
00054ba6 l       .debug_str	00000000 
00054bdc l       .debug_str	00000000 
00054c24 l       .debug_str	00000000 
00054c59 l       .debug_str	00000000 
00054ca1 l       .debug_str	00000000 
00054cda l       .debug_str	00000000 
00054d22 l       .debug_str	00000000 
00054d3e l       .debug_str	00000000 
00054d86 l       .debug_str	00000000 
00054d8e l       .debug_str	00000000 
00054dd6 l       .debug_str	00000000 
00054df1 l       .debug_str	00000000 
00054e39 l       .debug_str	00000000 
00054e61 l       .debug_str	00000000 
00054eab l       .debug_str	00000000 
00054ef5 l       .debug_str	00000000 
00054f54 l       .debug_str	00000000 
00054fb1 l       .debug_str	00000000 
0005500a l       .debug_str	00000000 
00055069 l       .debug_str	00000000 
000550c8 l       .debug_str	00000000 
00055129 l       .debug_str	00000000 
0005518c l       .debug_str	00000000 
000551f4 l       .debug_str	00000000 
00055256 l       .debug_str	00000000 
000552bc l       .debug_str	00000000 
0005531e l       .debug_str	00000000 
00055383 l       .debug_str	00000000 
000553e6 l       .debug_str	00000000 
00055442 l       .debug_str	00000000 
00055499 l       .debug_str	00000000 
000554f2 l       .debug_str	00000000 
00055545 l       .debug_str	00000000 
000555a1 l       .debug_str	00000000 
00055607 l       .debug_str	00000000 
0005565d l       .debug_str	00000000 
000556ba l       .debug_str	00000000 
0005571c l       .debug_str	00000000 
00055775 l       .debug_str	00000000 
000557d0 l       .debug_str	00000000 
0005582b l       .debug_str	00000000 
00055886 l       .debug_str	00000000 
000558e3 l       .debug_str	00000000 
00055940 l       .debug_str	00000000 
00055986 l       .debug_str	00000000 
000559d0 l       .debug_str	00000000 
00055a10 l       .debug_str	00000000 
00055a4d l       .debug_str	00000000 
00055a91 l       .debug_str	00000000 
00055acd l       .debug_str	00000000 
00055b11 l       .debug_str	00000000 
00055b5a l       .debug_str	00000000 
00055b63 l       .debug_str	00000000 
00055bac l       .debug_str	00000000 
00055bb5 l       .debug_str	00000000 
00055c1e l       .debug_str	00000000 
00055c7b l       .debug_str	00000000 
00055cde l       .debug_str	00000000 
00055d34 l       .debug_str	00000000 
00055d8a l       .debug_str	00000000 
00055de3 l       .debug_str	00000000 
00055e3b l       .debug_str	00000000 
00055e9f l       .debug_str	00000000 
00055f25 l       .debug_str	00000000 
00055f2b l       .debug_str	00000000 
00055fb1 l       .debug_str	00000000 
00055fb7 l       .debug_str	00000000 
00056039 l       .debug_str	00000000 
000560bb l       .debug_str	00000000 
0005613e l       .debug_str	00000000 
00056145 l       .debug_str	00000000 
000561c8 l       .debug_str	00000000 
000561cf l       .debug_str	00000000 
00056255 l       .debug_str	00000000 
000562db l       .debug_str	00000000 
0005635e l       .debug_str	00000000 
000563e1 l       .debug_str	00000000 
00056463 l       .debug_str	00000000 
000564e9 l       .debug_str	00000000 
0005656f l       .debug_str	00000000 
000565f9 l       .debug_str	00000000 
00056681 l       .debug_str	00000000 
00056709 l       .debug_str	00000000 
00056771 l       .debug_str	00000000 
000567da l       .debug_str	00000000 
00056844 l       .debug_str	00000000 
000568af l       .debug_str	00000000 
0005690d l       .debug_str	00000000 
0005696b l       .debug_str	00000000 
000569c9 l       .debug_str	00000000 
00056a28 l       .debug_str	00000000 
00056a86 l       .debug_str	00000000 
00056ae5 l       .debug_str	00000000 
00056b43 l       .debug_str	00000000 
00056ba2 l       .debug_str	00000000 
00056c01 l       .debug_str	00000000 
00056c60 l       .debug_str	00000000 
00056cbe l       .debug_str	00000000 
00056d1d l       .debug_str	00000000 
00056d7c l       .debug_str	00000000 
00056ddb l       .debug_str	00000000 
00056e3a l       .debug_str	00000000 
00056e99 l       .debug_str	00000000 
00056ef8 l       .debug_str	00000000 
00056f57 l       .debug_str	00000000 
00056fb6 l       .debug_str	00000000 
00057015 l       .debug_str	00000000 
00057074 l       .debug_str	00000000 
000570d3 l       .debug_str	00000000 
00057132 l       .debug_str	00000000 
00057191 l       .debug_str	00000000 
000571f0 l       .debug_str	00000000 
0005724f l       .debug_str	00000000 
000572ae l       .debug_str	00000000 
0005730d l       .debug_str	00000000 
0005736c l       .debug_str	00000000 
000573cb l       .debug_str	00000000 
0005742b l       .debug_str	00000000 
0005748a l       .debug_str	00000000 
000574e9 l       .debug_str	00000000 
00057548 l       .debug_str	00000000 
000575a8 l       .debug_str	00000000 
00057607 l       .debug_str	00000000 
00057666 l       .debug_str	00000000 
000576c5 l       .debug_str	00000000 
00057725 l       .debug_str	00000000 
00016838 l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE
00018858 l     F .text	0000000a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E
00018862 l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E
00016ede l     F .text	000000e4 _ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE
00017f06 l     F .text	0000024c _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE
00016dd8 l     F .text	000000b0 _ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E
00016e88 l     F .text	00000024 _ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE
00017400 l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E
000167e8 l     F .text	00000002 _ZN4core3ptr13drop_in_place17h000c7c147ade2111E
0001684c l     F .text	00000114 _ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E
000207cc l     O .text	0000007b _ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E
00020847 l     O .text	000001f0 _ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E
00020a38 l     O .text	00000458 _ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E
0001fda0 l     O .text	00000010 _ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE
00016eb2 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE
00016eb8 l     F .text	00000026 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE
00016eac l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E
000167ea l     F .text	0000004e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE
00000000 l    df *ABS*	00000000 semihosting_console.c
00018870 l     F .text	00000024 __semihost
00018894 l     F .text	00000010 debugger_connected
000188a4 l     F .text	0000002e semihost_write
00018978 l     F .text	0000001c semihosting_console_write_ch
200016b4 l     O .bss	00000004 semihost_mbuf
20000100 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
200016b8 l     O .bss	00000010 avail_queue
200016c8 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
200016d4 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
00018b48 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_gpio.c
00018b9c l     F .text	00000050 hal_gpio_irq_handler
00018bec l     F .text	0000002c hal_gpio_irq_setup
00018c18 l     F .text	0000001c hal_gpio_find_empty_slot
00018c34 l     F .text	00000038 hal_gpio_find_pin
200016d8 l     O .bss	00000040 hal_gpio_irqs
20001718 l     O .bss	00000001 irq_setup.8906
00000000 l    df *ABS*	00000000 hal_i2c.c
00018dc8 l     F .text	0000007a hal_i2c_delay_us
00018e44 l     F .text	00000024 hal_i2c_resolve
00018e68 l     F .text	0000001c hal_i2c_convert_status
00018e84 l     F .text	00000012 read_gpio_inbuffer
00018e96 l     F .text	000000a2 hal_i2c_clear_bus
00020ea0 l     O .text	00000008 nrf52_hal_i2cs
00000000 l    df *ABS*	00000000 hal_spi.c
00019234 l     F .text	0000006e nrf52_irqm_handler
000192bc l     F .text	00000014 hal_spi_stop_transfer
000192d0 l     F .text	0000004c hal_spi_config_slave
0001931c l     F .text	000000b8 hal_spi_init_master
000193d4 l     F .text	000000e0 hal_spi_config_master
00020ea8 l     O .text	0000000c nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_watchdog.c
000197b8 l     F .text	0000000e nrf52_hal_wdt_default_handler
000197c8 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
000199e0 l     F .text	00000016 os_main
20001820 l     O .bss	00004000 g_os_main_stack
20001720 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
00019cf0 l     F .text	0000005c os_dev_add
00019d4c l     F .text	00000026 os_dev_initialize
00019d72 l     F .text	00000020 os_dev_init
20005820 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20005828 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
0001a29c l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0001a3b0 l     F .text	00000010 os_msys_find_biggest_pool
0001a3c0 l     F .text	0000002c os_msys_find_pool
0001a438 l     F .text	00000044 os_msys_init_once
20005838 l     O .bss	00004900 os_msys_1_data
2000a138 l     O .bss	0000000c os_msys_1_mbuf_pool
2000a144 l     O .bss	0000001c os_msys_1_mempool
2000010c l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
0001a694 l     F .text	00000020 os_sanity_check_list_lock
0001a6b4 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
0001ab28 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0001ac18 l     F .text	0000004c os_deltatime
0001ac64 l     F .text	0000005c os_time_tick
2000a168 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
0001af80 l       .text	00000000 SVC_User
0001af9e l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
0001b040 l       .text	00000000 test1
0001b034 l       .text	00000000 loop1
0001b046 l       .text	00000000 res1
0001b062 l       .text	00000000 test2
0001b06a l       .text	00000000 done
0001b056 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0001b076 l       .text	00000000 test1
0001b072 l       .text	00000000 loop1
0001b084 l       .text	00000000 test2
0001b080 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0001b0ee l     F .text	000000c0 ui2a
0001b1ae l     F .text	00000020 i2a
0001b1ce l     F .text	00000030 a2d
0001b1fe l     F .text	00000036 a2i
0001b234 l     F .text	0000002a putf
0001b260 l     F .text	0000011c putchw
0001b37c l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
0001b700 l     F .text	00000004 stdin_read
0001b704 l     F .text	00000010 stdout_write
20000124 l     O .data	00000004 _stdin
20000128 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001b7b4 l     F .text	00000028 nrf52k_flash_wait_ready
0001b7dc l     F .text	00000054 nrf52k_flash_erase_sector
0001b830 l     F .text	00000004 nrf52k_flash_init
0001b834 l     F .text	00000020 nrf52k_flash_sector_info
0001b854 l     F .text	000000d0 nrf52k_flash_write
0001b924 l     F .text	0000000e nrf52k_flash_read
00021060 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0001b934 l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_timer.c
0001bb40 l     F .text	0000000a nrf_read_timer_cntr
0001bb4c l     F .text	000000b4 nrf_timer_set_ocmp
0001bc00 l     F .text	0000000a nrf_timer_disable_ocmp
0001bc0a l     F .text	0000000a nrf_rtc_disable_ocmp
0001bc14 l     F .text	00000054 hal_timer_read_bsptimer
0001bc68 l     F .text	00000076 hal_timer_chk_queue
0001bcde l     F .text	0000002c hal_timer_irq_handler
0002107c l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 nrf52_periph.c
0001bea4 l     F .text	00000034 nrf52_periph_create_timers
0001bed8 l     F .text	00000020 nrf52_periph_create_i2c
0001bef8 l     F .text	00000020 nrf52_periph_create_spi
00021094 l     O .text	0000000c hal_i2c1_cfg
000210a0 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 sensor.c
0001bf2c l     F .text	00000028 sensor_mgr_remove
0001bf54 l     F .text	00000060 sensor_mgr_insert
0001bfb4 l     F .text	0000000a sensor_type_traits_empty
0001bfc0 l     F .text	0000000c sensor_mgr_evq_set
0001bffa l     F .text	0000005c sensor_read_data_func
0001c058 l     F .text	00000048 sensor_base_ts_update_event
0001c0a0 l     F .text	00000050 sensor_up_timestamp
0001c128 l     F .text	000000a0 sensor_mgr_init
0001c394 l     F .text	0000007c sensor_mgr_wakeup_event
0001c1f2 l     F .text	00000032 sensor_update_nextrun
0001c224 l     F .text	0000001e sensor_calc_nextrun_delta
0001c244 l     F .text	00000024 sensor_find_min_nextrun_sensor
0001c31c l     F .text	0000004a sensor_mgr_poll_bytype
0001c366 l     F .text	0000002e sensor_poll_per_type_trait
2000a19c l     O .bss	00000078 sensor_notify_evt_area
2000a214 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 sensor_coap.c
2000a230 l     O .bss	00000008 oc_sem
2000a238 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
2000a23c l     O .bss	0000000c hw_id
2000a248 l     O .bss	00000004 hw_id_len
2000a250 l     O .bss	00000008 sensor_node_address
2000a258 l     O .bss	00000037 sensor_node_names_buf
20000130 l     O .data	00000014 sensor_node_names
000210b8 l     O .text	0000000c COLLECTOR_NODE_HW_ID
000210c4 l     O .text	0000003c SENSOR_NODE_HW_IDS
00021160 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 creator.c
0001c5b8 l     F .text	00000050 config_device
2000a290 l     O .bss	00000014 adc_1_itf_temp_stub
2000a2a8 l     O .bss	000000c0 temp_stub_dev
00000000 l    df *ABS*	00000000 temp_stub.c
0001c664 l     F .text	00000004 temp_stub_close
0001c668 l     F .text	0000001c temp_stub_sensor_get_config
0001c684 l     F .text	00000026 temp_stub_open
0001c760 l     F .text	0000007c temp_stub_sensor_read
000211a4 l     O .text	00000028 g_temp_stub_sensor_driver
00000000 l    df *ABS*	00000000 oc_buffer.c
0001c804 l     F .text	00000030 oc_buffer_tx
0001c834 l     F .text	0000002c oc_buffer_rx
2000a368 l     O .bss	00000018 oc_inq
2000a380 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_ri.c
2000a398 l     O .bss	000000c8 oc_client_cb_area
2000a460 l     O .bss	0000001c oc_client_cb_pool
00000000 l    df *ABS*	00000000 adaptor.c
2000a47c l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 oc_rep.c
2000a480 l     O .bss	0000001c oc_rep_objects
2000a49c l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 flash_map.c
0001c988 l     F .text	00000078 flash_map_read_mfg
2000a4cc l     O .bss	00000078 mfg_areas.9056
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0001cadc l     F .text	00000094 mfg_seek_next_aux
0001cb70 l     F .text	00000070 mfg_read_mmr
0001cbe0 l     F .text	00000054 mfg_read_next_mmr
0001cc34 l     F .text	0000003c mfg_open_flash_area
0001cc70 l     F .text	00000044 mfg_read_tlv_body
0001cd3c l     F .text	0000004e mfg_read_mmr_refs
2000a544 l     O .bss	00000001 mfg_initialized
2000a548 l     O .bss	00000018 mfg_mmrs
2000a560 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001cda2 l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 nrf52_hw_id.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_memclr.c
00000000 l    df *ABS*	00000000 aeabi_memcpy.c
00000000 l    df *ABS*	00000000 lib_a-aeabi_memset-soft.o
00000000 l    df *ABS*	00000000 libchip8.bde0u64m-cgu.0
00000afc l       .debug_str	00000000 
00007425 l       .debug_str	00000000 
0000747c l       .debug_str	00000000 
00001b56 l       .debug_str	00000000 
000074c8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000074d0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00009934 g     F .text	00000014 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hd317927185b0114cE
000169f0 g     F .text	00000004 _ZN4core5panic8Location4line17h650a566d9637c91dE
00015a12 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE
00008616 g     F .text	000000ba main
0001513e g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE
00009a5c g     F .text	0000001c _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17he627156f6f8a4ed5E
0001147a g     F .text	0000070a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E
00019fc0 g     F .text	00000040 os_eventq_remove
00011c10 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE
0000d9ce g     F .text	0000007a _ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E
00009a1a g     F .text	0000002e .hidden _ZN3app5chip812handle_touch17hb422a4f740ac0e1bE
0001ae0c g     F .text	00000018 os_arch_init
0001b028 g     F .text	00000048 memcmp
0000ea62 g     F .text	00000012 _ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE
00016594 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE
00011d18 g     F .text	00000024 _ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE
00012eae g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E
00014d22 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E
0000edd2 g     F .text	000000ee _ZN3log17__private_api_log17h076f8f4ccc99f19bE
000162d4 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE
0001615c g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E
00010088 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE
0000fc92 g     F .text	00000002 _ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E
00016a20 g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E
00011bf2 g     F .text	0000001e .hidden _ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE
0000f76e g     F .text	00000010 _ZN4core3ptr5write17h7ef3fa6b6f80daebE
00014bee g     F .text	0000005a _ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE
00018680 g     F .text	000000f4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17hc96955e2b836ab47E
2000a680 g     O .bss	0000001c nrf52_hal_timer0
00014f8a g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E
0000f754 g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE
00014e00 g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE
0001c1e8 g     F .text	0000000a sensor_unlock
00012806 g     F .text	00000036 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E
00014f2e g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E
00010d02 g     F .text	00000118 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E
00012f02 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E
00014f12 g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE
00015e2a g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E
0000f5c0 g     F .text	0000006c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E
0001a6e0 g     F .text	00000024 os_sanity_check_register
0001c6b8 g     F .text	0000007c temp_stub_init
0001a780 g     F .text	00000054 os_sched_insert
2000a564 g     O .bss	00000001 g_silence_console
00015458 g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E
000105d6 g     F .text	0000028a _ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E
00015510 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E
000131a6 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
0001ce40 g     F .text	00000034 hal_bsp_hw_id
00008164  w    F .text	00000002 NFCT_IRQHandler
000167ba g     F .text	00000004 .hidden _ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE
0000989a g     F .text	0000008e _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE
00014ce6 g     F .text	00000018 _ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E
00010e8c g     F .text	00000162 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE
00015bd2 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE
0000e00c g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E
00012b3e g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17hac8dfc997b9c24ecE
0000f32c g     F .text	00000012 _ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE
00015898 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE
000182cc g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE
000167cc g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E
000151a2 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE
000155fc g     F .text	00000024 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE
0000e186 g     F .text	00000086 _ZN4core3cmp6max_by17h3c9686db40e0f078E
0000f162 g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E
20000114 g     O .data	00000008 g_os_run_list
000100ba g     F .text	0000004a _ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E
0001c8c4 g     F .text	00000020 oc_send_buffer
0001aeb4 g     F .text	00000030 os_arch_start
00015982 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE
00011c84 g     F .text	0000001a _ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E
0001c4dc g     F .text	0000001a is_standalone_node
00019eac g     F .text	00000010 os_eventq_init
000178de g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E
0001326e g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E
00016fc2 g     F .text	00000022 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E
00012eec g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E
0000f422 g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE
000164a6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE
0001c410 g     F .text	00000028 init_sensor_coap
0001c8e4 g     F .text	0000004c oc_send_multicast_message
00015be2 g     F .text	0000008c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE
00012dba g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17hf6992577e3374dfdE
0000e788 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E
0001789a g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE
2000a6a0 g     O .bss	00000034 sensor_mgr
00018a14 g     F .text	0000002c console_dump
0001a8ac g     F .text	00000078 os_sched_wakeup
00013136 g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E
00018460 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17h6ff113c3a96d4445E
0000f19a g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E
0001cda0 g     F .text	00000002 _fini
00019ce4 g     F .text	0000000a os_cputime_get32
00012fb2 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E
0000fb34 g     F .text	00000132 _ZN6mynewt3hal4GPIO4init17h54c34caf27320956E
2000a565 g     O .bss	00000001 g_console_input_ignore
00009a08 g     F .text	00000008 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha45cfdbdf4731cedE
0001ad9c g     F .text	00000014 os_arch_ctx_sw
0001317c g     F .text	0000001a _ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E
00012c78 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E
000152cc g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE
0001afea g     F .text	0000000c SysTick_Handler
0001c450 g     F .text	00000070 get_hardware_id
00008168 g     F .text	00000010 _sbrkInit
0000eb7e g     F .text	0000003c _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E
00012f18 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE
0000ffdc g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE
0000dbda g     F .text	0000001c _ZN4core4iter6traits8iterator8Iterator7flatten17h790b24ffb57b6bb2E
000131b0 g     F .text	00000012 _ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E
0001b0c2 g     F .text	0000001c strcmp
00015bae g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE
2000a598 g     O .bss	00000050 g_idle_task
00019e9c g     F .text	00000010 os_dev_reset
00016686 g     F .text	00000010 _ZN4core3ptr5write17h147d4643d861e927E
00010104 g     F .text	00000262 _ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E
0001a9fc g     F .text	00000010 os_sem_init
0000de74 g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h7622a2ed78995b61E
000131ee g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE
00018994 g     F .text	00000070 console_printhex
000100b4 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE
00021264 g       .text	00000000 __exidx_start
0001c4c0 g     F .text	0000001c is_collector_node
00010586 g     F .text	00000050 _ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E
0000db12 g     F .text	0000001a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE
0001b08a g     F .text	00000038 memset
00008164  w    F .text	00000002 WDT_IRQHandler
000181b0 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h096b8fea83a9dea7E
0001325e g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E
00018924 g     F .text	00000054 console_buffer
00019ebc g     F .text	0000000a os_eventq_inited
00018b5c g     F .text	0000000c sysinit_end
0001610a g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE
00008020 g       .text	00000000 __isr_vector_start
00008164  w    F .text	00000002 TIMER3_IRQHandler
00008164  w    F .text	00000002 MWU_IRQHandler
00016998 g     F .text	0000004a _ZN4core6result13unwrap_failed17h10957bfda7d5e5f2E
2000a738 g       .bss	00000000 __HeapBase
000154a8 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE
000153f6 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E
0000ff88 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E
00011c56 g     F .text	00000012 _ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E
0000fc66 g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E
00014d6a g     F .text	00000096 _ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E
0001ca40 g     F .text	00000026 flash_area_read
00013166 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E
0001c956 g     F .text	00000002 oc_register_ip4
0000f678 g     F .text	00000046 _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E
0001c958 g     F .text	00000002 oc_register_ip6
0000842c g     F .text	000001d4 SystemInit
00012bca g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h86687d23966cf72aE
0001cdc0 g     F .text	00000028 hal_flash_init
00019e64 g     F .text	00000036 os_dev_close
000211fc g     O .text	00000048 sysflash_map_dflt
00009a78 g     F .text	000000d2 _ZN8libchip814Chip8$LT$T$GT$3new17hd62b2f9fc0ffdda2E
0001b7a8 g     F .text	0000000c hal_bsp_init
0000d8e2 g     F .text	000000ec _ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E
0000f246 g     F .text	00000032 _ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E
00011dc4 g     F .text	000005e0 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE
0000e884 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
00015e58 g     F .text	00000036 _ZN4core3ptr19swap_nonoverlapping17hd7afcc643b1b5b34E
00012c20 g     F .text	00000058 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h6530387af31222c2E
000110a4 g     F .text	0000012c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE
0000e74a g     F .text	00000032 _ZN4core3ptr4read17h2038b0ecb0975c4fE
0001d19c g     F .text	00000004 __aeabi_memcpy4
00015cfe g     F .text	000000c6 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE
00019600 g     F .text	0000002c hal_spi_set_txrx_cb
0001d194 g     F .text	00000006 __aeabi_memclr8
000086d0 g     F .text	00000102 rust_begin_unwind
2000a568 g     O .bss	00000004 console_is_midline
0001d194 g     F .text	00000006 __aeabi_memclr4
000094b4 g     F .text	000000f4 .hidden _ZN3app5chip88on_start17hf865f4cce3d1fe15E
00011c46 g     F .text	00000010 _ZN4core3ptr13drop_in_place17h22ac77b3595708cdE
000080f8 g       .text	00000000 __isr_vector_end
000190f8 g     F .text	0000013c hal_i2c_master_read
00015590 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E
0001b3e0 g     F .text	0000025c tfp_format
00016476 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE
0001c2b4 g     F .text	00000068 sensor_read
00012b82 g     F .text	00000026 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hda13cf3283d09c50E
0000f73a g     F .text	00000010 _ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E
00014f9a g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E
00015b06 g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE
0001d19c g     F .text	00000004 __aeabi_memcpy
0001d19c g     F .text	00000004 __aeabi_memcpy8
2000a6d4 g     O .bss	00000020 st_up_osco
0001aee4 g     F .text	0000005c os_arch_os_start
0001c296 g     F .text	0000001e sensor_init
20000000 g       .bss	00000000 _ram_start
0001ad0c g     F .text	00000026 os_time_delay
00014faa g     F .text	0000002c _ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE
0001c954 g     F .text	00000002 oc_register_gatt
00012dce g     F .text	00000012 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hc518c90d18182e65E
20000a00 g     O .bss	00000004 _ZN3log20MAX_LOG_LEVEL_FILTER17h20753a6176f34564E
0001ce3c g     F .text	00000004 hal_bsp_hw_id_len
00019ca4 g     F .text	00000034 os_callout_wakeup_ticks
00012e62 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h8a25dee97102e103E
0001a01a g     F .text	00000026 os_mqueue_get
00018f38 g     F .text	00000098 hal_i2c_init
0001776c g     F .text	0000012e _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E
000181b0 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E
00008164  w    F .text	00000002 TIMER4_IRQHandler
0001ed98 g     O .text	00000050 _ZN8libchip87CHARBUF17h227c6d0d7e24574cE
0000e308 g     F .text	00000092 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E
00012da6 g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h39af250ef60ec852E
000123a4 g     F .text	00000048 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E
00016446 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E
0001a9ac g     F .text	00000022 os_sched
0000f33e g     F .text	00000020 _ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
0000e20c g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h5567184bcc425327E
0000e8ca g     F .text	00000014 _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE
00011cd4 g     F .text	00000010 _ZN4core3ptr13drop_in_place17hf625580841d3425eE
2000fe50 g       *ABS*	000001b0 __StackLimit
0001bfcc g     F .text	0000002e sensor_mgr_match_bytype
0000e79e g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE
00014eb0 g     F .text	00000032 _ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E
00012988 g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE
0001a4e8 g     F .text	00000014 os_mutex_init
0000f62c g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E
00011436 g     F .text	00000044 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE
2000a570 g     O .bss	00000028 nrf52_hal_spi0
00008614 g     F .text	00000002 _init
00000020 g       *ABS*	00000000 _imghdr_size
00015620 g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E
00008164  w    F .text	00000002 RTC1_IRQHandler
0000e9aa g     F .text	00000008 _ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E
00008164  w    F .text	00000002 PDM_IRQHandler
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
000163b6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE
20000124 g       .data	00000000 __aeabi_unwind_cpp_pr0
0000fe18 g     F .text	0000001a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E
0000ff5e g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE
0000f23e g     F .text	00000008 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E
0001335a g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E
0001a48c g     F .text	00000028 os_msys_get_pkthdr
0001c734 g     F .text	0000002c temp_stub_get_raw_temperature
0001a924 g     F .text	0000003c os_sched_os_timer_exp
00019d94 g     F .text	00000040 os_dev_create
00011c68 g     F .text	0000001c _ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E
00016610 g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
000161fc g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE
0001a6d0 g     F .text	00000010 os_sanity_check_init
00016a82 g     F .text	0000022c _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE
00008164  w    F .text	00000002 SAADC_IRQHandler
00019cd8 g     F .text	0000000c os_cputime_init
00019fa8 g     F .text	00000018 os_eventq_run
0000ed5e g     F .text	0000000c _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE
0001a4b4 g     F .text	00000034 os_msys_init
00015e32 g     F .text	0000000e .hidden _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E
00016180 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE
00015fe0 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E
0001ad92 g     F .text	0000000a timer_handler
0000e110 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE
000167be g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E
0000feee g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E
0000f278 g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E
00014ee2 g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E
000167b6 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E
00016a60 g     F .text	00000022 _ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E
000080f8 g     F .text	0000005c Reset_Handler
00012444 g     F .text	0000002c _ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE
00008020 g       .text	000000d8 __isr_vector
00018460 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17heaf2297ac445d947E
00015084 g     F .text	0000002a .hidden _ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE
0001b63c g     F .text	00000008 vfprintf
00014a78 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E
0000e8f6 g     F .text	0000000a _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E
0001307c g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E
0001a0ba g     F .text	00000036 os_mbuf_get_pkthdr
00008164  w    F .text	00000002 PWM0_IRQHandler
00016416 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E
00000000 g       .svc_table	00000000 SVC_Count
00017c6e g     F .text	00000298 _ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE
00011d3c g     F .text	00000088 _ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE
000169f4 g     F .text	0000002c _ZN4core9panicking5panic17h24d1dd0a9d540834E
0001adc2 g     F .text	0000000a os_arch_in_critical
0000de3a g     F .text	0000003a .hidden _ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E
000154fc g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E
0001a770 g     F .text	00000010 os_sanity_init
00012aa8 g     F .text	00000018 .hidden _ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE
00015e1e g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE
000150ae g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE
00018460 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E
00014f4c g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE
00019884 g     F .text	0000004c __assert_func
000161e8 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E
000157ee g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
000150cc g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE
0001a35a g     F .text	0000001e os_memblock_put_from_cb
0001af44 g     F .text	00000014 os_set_env
2000a65c g     O .bss	00000004 g_os_last_ctx_sw_time
000131c2 g     F .text	0000000a _ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE
00018af4 g     F .text	00000048 console_printf
000131d8 g     F .text	00000016 .hidden _ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E
000128d8 g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE
0000e7ca g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE
00013082 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E
00016356 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E
0001af58 g     F .text	00000006 os_arch_init_task_stack
0001cd2c g     F .text	00000010 mfg_open
00018460 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17hb33f6f1f0114a92bE
00009a10 g     F .text	0000000a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h3c52951efd018dffE
0001c888 g     F .text	00000030 oc_ri_mem_init
00010bf2 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE
0001b798 g     F .text	00000010 hal_bsp_flash_dev
0001ca68 g     F .text	00000070 flash_map_init
2000a670 g     O .bss	00000004 g_os_time
00014e98 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E
00010860 g     F .text	00000392 _ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E
0001aff6 g     F .text	0000001e os_default_irq_asm
000198d0 g     F .text	00000098 os_default_irq
200000e4 g     O .data	00000004 SystemCoreClock
00019538 g     F .text	00000068 hal_spi_disable
00015cd4 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E
0000f70c g     F .text	0000002e _ZN6mynewt3sys7console6buffer17h6e460748855d110aE
0001c95a g     F .text	00000002 oc_register_lora
000182cc g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u16$GT$3fmt17hc265973c39f711faE
0001a13c g     F .text	000000a8 os_mbuf_append
0001c608 g     F .text	0000005c temp_stub_create
0001cde8 g     F .text	00000054 hal_flash_read
000188d4 g     F .text	00000048 console_flush
00016568 g     F .text	00000018 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE
00014efa g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E
00019b24 g     F .text	0000001a os_start
0001bd1c g     F .text	00000060 hal_timer_init
00012f2c g     F .text	00000086 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E
0001b714 g     F .text	00000010 rust_sysinit
0000e088 g     F .text	00000028 _ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE
00008164  w    F .text	00000002 I2S_IRQHandler
00018a04 g     F .text	00000010 console_printint
0001a9d0 g     F .text	0000002c os_sched_resort
0002103c g     O .text	00000008 MemFile_methods
0001b6e8 g     F .text	00000018 fmemopen_w
00013fce g     F .text	00000126 _ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E
000194b4 g     F .text	00000038 hal_spi_config
0001d190  w    F .text	00000002 .hidden __aeabi_ldiv0
0001a3a0 g     F .text	00000010 os_mempool_module_init
0001a9a0 g     F .text	0000000c os_sched_next_task
00015c78 g     F .text	0000001a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E
00011c9e g     F .text	00000010 _ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E
00018cf2 g     F .text	00000034 hal_gpio_read
00019b78 g     F .text	0000001a os_callout_init
0001a47c g     F .text	00000010 os_msys_reset
00009928 g     F .text	0000000c _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc15bb8a8dbf2b592E
0001b644 g     F .text	00000024 printf
00008156  w    F .text	00000002 HardFault_Handler
0001ce94 g     F .text	00000000 .hidden __aeabi_uldivmod
0000dc28 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E
0001ad34 g     F .text	00000038 os_gettimeofday
00018a80 g     F .text	0000001e console_write
00016506 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E
00017736 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE
0000dc54 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hac566d17e493ac47E
00010cee g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE
00019a04 g     F .text	00000070 os_init_idle_task
0001ae24 g     F .text	0000008c os_arch_os_init
00010372 g     F .text	000001b6 _ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE
0000ff26 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E
00019a74 g     F .text	000000b0 os_init
2000a648 g     O .bss	00000008 g_os_mempool_list
00010ce4 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE
00008184 g     F .text	00000010 hal_debugger_connected
00011cae g     F .text	0000001e _ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE
0000e7e0 g     F .text	0000009a _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E
0000dda2 g     F .text	00000038 _ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h9a887926e27564b3E
00018a7c g     F .text	00000004 semihosting_console_init
0001ccc6 g     F .text	0000001a mfg_seek_next_with_type
0001a5b4 g     F .text	000000e0 os_mutex_pend
0001321e g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
00018cd0 g     F .text	00000022 hal_gpio_write
00008600 g     F .text	00000014 _start
0000dc80 g     F .text	00000010 _ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5923d182d43571feE
0000e8c2 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE
0000e92a g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE
0001cd8c g     F .text	00000014 __wrap_coap_receive
00016386 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E
2000a56c g     O .bss	00000001 sysinit_active
0001327e g     F .text	0000006e .hidden _ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E
00014bc4 g     F .text	0000002a _ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE
0001b6b8 g     F .text	0000002e memfile_write
0001d190  w    F .text	00000002 .hidden __aeabi_idiv0
00015df2 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE
000199f8 g     F .text	0000000c os_started
00015a72 g     F .text	0000000a .hidden _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE
0001c860 g     F .text	00000028 oc_buffer_init
0000fc94 g     F .text	00000056 _ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE
0000ff0a g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E
2000a650 g     O .bss	0000000c g_os_sanity_check_mu
0000f77e g     F .text	0000002c .hidden _ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
0000deac g     F .text	0000002a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hd29a6855bf5041fdE
0001d194 g     F .text	00000006 __aeabi_memclr
000087d2 g     F .text	00000270 .hidden _ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E
0001d1a0 g     F .text	0000009a __aeabi_memset4
000133e6 g     F .text	00000a7a _ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E
0001773e g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE
00016580 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E
0000de26 g     F .text	00000014 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0a1a9897cf1e3266E
0001accc g     F .text	00000040 os_time_advance
000194ec g     F .text	0000004c hal_spi_enable
0000e0f2 g     F .text	0000000a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc2b7f3c069a746efE
0001ccf4 g     F .text	00000038 mfg_init
0000f7b4 g     F .text	00000010 _ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E
2000a5e8 g     O .bss	00000050 g_os_main_task
0000db94 g     F .text	00000030 _ZN4core3any6TypeId2of17h8ccdaa41437c3cf9E
0001d1a0 g     F .text	0000009a __aeabi_memset8
0001820e g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hcd88e3dc15351fceE
0000f232 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE
0002127c g       .ARM.exidx	00000000 __exidx_end
00008164  w    F .text	00000002 PWM1_IRQHandler
20000a04 g     O .bss	00000018 _ZN22piet_embedded_graphics7display7DISPLAY17ha0ff10e671b220f2E
00016d80 g     F .text	00000058 _ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE
0000f1c0 g     F .text	0000004e _ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE
00018774 g     F .text	000000e4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17hea84eef47d2fd641E
00018b68 g     F .text	00000034 NVIC_Relocate
00018b50 g     F .text	0000000c sysinit_start
00015dda g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E
00015e0a g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE
00021048 g     O .text	00000018 nrf52k_flash_dev
00015e8e g     F .text	00000058 _ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E
0001bd7c g     F .text	000000f8 hal_timer_config
00014e80 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E
00014c9a g     F .text	0000004c _ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E
0001b6a4 g     F .text	00000014 vprintf
0000f65e g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E
0001891c g     F .text	00000008 disable_buffer
0000db5a g     F .text	0000003a _ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE
2000a638 g     O .bss	00000004 g_os_started
000169e8 g     F .text	00000008 _ZN4core5panic9PanicInfo7payload17h9302c8d957737573E
00014e40 g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E
20000144 g       .bssnz	00000000 __bssnz_end__
00019e00 g     F .text	00000020 os_dev_lookup
000159e2 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E
0000fe0c g     F .text	0000000c _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E
0000df70 g     F .text	0000009c _ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE
00019860 g     F .text	00000010 hal_watchdog_enable
2000a674 g     O .bss	0000000c g_hal_os_tick
0001adbc g     F .text	00000006 os_arch_restore_sr
00019bd0 g     F .text	00000078 os_callout_reset
00010cf8 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE
0001cce0 g     F .text	0000000a mfg_read_tlv_flash_area
0001323a g     F .text	00000024 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E
0000815a  w    F .text	00000002 BusFault_Handler
00016696 g     F .text	0000011c .hidden _ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E
00015dc4 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E
0001a008 g     F .text	00000012 os_mqueue_init
0000e39a g     F .text	00000052 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE
000163e6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E
00012e6a g     F .text	00000012 _ZN4core3mem4swap17h9f9b2c00c891c39bE
000156a8 g     F .text	00000052 _ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E
0000dbc4 g     F .text	00000016 _ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17ha534480b95c4fb6cE
0001c6aa g     F .text	0000000e temp_stub_default_cfg
00008020 g       .imghdr	00000000 __text
00019b94 g     F .text	0000003c os_callout_stop
00015646 g     F .text	00000062 _ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E
000081c0 g     F .text	0000004c hal_system_clock_start
0001a104 g     F .text	00000024 os_mbuf_free_chain
00009948 g     F .text	000000c0 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E
0000f7aa g     F .text	0000000a .hidden _ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E
0001b724 g     F .text	00000030 mem_init_mbuf_pool
0000f324 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E
000131cc g     F .text	0000000c _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E
00018fd0 g     F .text	00000128 hal_i2c_master_write
00015a42 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E
00008164  w    F .text	00000002 QDEC_IRQHandler
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
000133c8 g     F .text	0000001e _ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E
0000e59e g     F .text	0000003a _ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E
0000d706 g     F .text	00000024 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h64cee1a3c11094e6E
00015b70 g     F .text	0000001a _ZN4core5slice14from_raw_parts17h1425df913744b73aE
0001a000 g     F .text	00000008 os_eventq_dflt_get
0001c1d0 g     F .text	00000018 sensor_lock
00012ec4 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE
00012c9a g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E
00018aa8 g     F .text	0000004c console_pkg_init
20000104 g     O .data	00000004 sysinit_panic_cb
0001a128 g     F .text	00000014 os_mbuf_len
0001a0f0 g     F .text	00000014 os_mbuf_free
00010528 g     F .text	0000005e _ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E
00014fd6 g     F .text	000000ae _ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E
0000e7b4 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE
0000ed6a g     F .text	0000000a _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE
00008194 g     F .text	0000002c hal_system_reset
00018a9e g     F .text	00000008 console_blocking_mode
00010366 g     F .text	0000000c _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E
00015e40 g     F .text	00000018 .hidden _ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h751b32771630458fE
00011ce4 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE
000111d0 g     F .text	00000266 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE
00012ed8 g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E
0001bf18 g     F .text	00000010 nrf52_periph_create
00015ac4 g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E
0001a704 g     F .text	0000006c os_sanity_run
00009bf4 g     F .text	00003b12 _ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E
0000dbf6 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h21a9e3dc4962ad94E
0000841c g     F .text	00000010 SystemCoreClockUpdate
00015ee6 g     F .text	00000042 _ZN4core3ptr4read17h10ae8fa070723038E
00014a8c g     F .text	0000007e .hidden _ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE
00014cfe g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E
0001662a g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE
0001a314 g     F .text	00000014 os_mempool_init
00021044 g     O .text	00000004 stdout
00012a38 g     F .text	0000000e .hidden _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE
00019dd4 g     F .text	0000002c os_dev_initialize_all
0000f35e g     F .text	000000b4 _ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E
00014e20 g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E
000161aa g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE
00012a54 g     F .text	00000054 _ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E
00012ba8 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h4a79113dcdba2ecfE
00019968 g     F .text	00000078 os_idle_task
0000f412 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h1982c2483e0a2028E
000162ec g     F .text	0000000a .hidden _ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE
00011c28 g     F .text	0000001e _ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE
00016554 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E
00010fee g     F .text	000000b6 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE
0000d7ea g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE
00017434 g     F .text	00000302 _ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE
0001ca00 g     F .text	00000040 flash_area_open
00015c92 g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E
00015aba g     F .text	0000000a _ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E
00014d46 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE
0000d74e g     F .text	00000076 _ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E
00008164 g     F .text	00000002 Default_Handler
000169e6 g     F .text	00000002 _ZN4core5panic8Location6caller17h4b6b61f9498709a3E
0000fe32 g     F .text	000000bc _ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E
0001a3ec g     F .text	0000004c os_msys_register
00015cba g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE
0000fcea g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E
2000a160 g     O .bss	00000004 g_os_sanity_check_list
0001283c g     F .text	00000066 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E
0000e900 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE
0000dc90 g     F .text	00000112 _ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E
0000e4da g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E
000195a0 g     F .text	00000060 hal_spi_init
00008164  w    F .text	00000002 RNG_IRQHandler
0001c10c g     F .text	00000010 sensor_mgr_unlock
2000a730 g     O .bss	00000004 flash_map_entries
00018152 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17hb1f1dec5462292d8E
0000db2c g     F .text	0000002e _ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E
000162f6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E
00015408 g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE
0001c95c g     F .text	00000002 oc_register_serial
00008178 g     F .text	0000000c hal_system_init
0001616e g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E
00015942 g     F .text	00000010 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E
00012470 g     F .text	00000396 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E
0001009e g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE
000150ea g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E
00008164  w    F .text	00000002 GPIOTE_IRQHandler
0000ea74 g     F .text	000000aa _ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0001ccb4 g     F .text	00000012 mfg_seek_next
0000d840 g     F .text	000000a2 _ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E
000156fa g     F .text	0000004a _ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E
000159b2 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E
0000ed74 g     F .text	00000008 _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE
00015114 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE
2000011c g     O .data	00000008 g_os_sleep_list
000171a4 g     F .text	0000025c _ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E
0001a07e g     F .text	0000000a os_mbuf_pool_init
2000a640 g     O .bss	00000008 g_callout_list
0001a810 g     F .text	0000000c os_sched_set_current_task
00019c48 g     F .text	0000005c os_callout_tick
0000e0fc g     F .text	00000014 _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17habaf51e2b5499869E
0000fd06 g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE
0000e9dc g     F .text	0000007c _ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E
0001653e g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E
000197e8 g     F .text	00000078 hal_watchdog_init
2000a664 g     O .bss	00000001 g_task_id
00018536 g     F .text	0000007a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E
00011ccc g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17hef1277471241eea2E
00019e20 g     F .text	00000044 os_dev_open
2000a660 g     O .bss	00000004 g_current_task
000167b2 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE
20000148 g       .bss	00000000 __bss_start__
00016268 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E
0000f226 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE
0000e0b0 g     F .text	00000042 _ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E
000095b2 g     F .text	00000010 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hb8a7325968dc9595E
000192a4 g     F .text	00000018 nrf52_spi0_irq_handler
0001c1c8 g     F .text	00000008 sensor_pkg_init
0000dc08 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h47809268ca43aa27E
0001c7dc g     F .text	00000028 temp_stub_config
0001a040 g     F .text	0000003e os_mqueue_put
00018774 g     F .text	000000e4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE
0001962c g     F .text	000000ac hal_spi_txrx
00008164  w    F .text	00000002 RTC2_IRQHandler
0001a804 g     F .text	0000000c os_sched_get_current_task
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
0001309e g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E
0001cad8 g     F .text	00000002 modlog_init
00012e04 g     F .text	0000005e .hidden _ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E
00015392 g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E
00015a7c g     F .text	0000003e _ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE
000196d8 g     F .text	000000e0 hal_spi_txrx_noblock
00016960 g     F .text	00000038 _ZN4core6option13expect_failed17had6579abaad447b4E
00017746 g     F .text	00000026 _ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE
0000f74a g     F .text	0000000a _ZN6mynewt3sys7console5flush17h78b2f38352f0d691E
00008164  w    F .text	00000002 TEMP_IRQHandler
0000f59c g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE
0001a7d4 g     F .text	00000030 os_sched_ctx_sw_hook
00009b4a g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E
0001c268 g     F .text	0000002e sensor_mgr_register
00016998 g     F .text	0000004a _ZN4core6option18expect_none_failed17h54d938081af97677E
00012cec g     F .text	000000ba _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E
00016fe4 g     F .text	000001c0 _ZN4core3fmt5write17hd95ac78ed22a2252E
00008154  w    F .text	00000002 NMI_Handler
0000fc7c g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE
0000fd82 g     F .text	0000008a _ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE
00016602 g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E
0000f41a g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E
0000e77c g     F .text	0000000c _ZN4core3ptr5write17h4a80332de2cee3d3E
0001a088 g     F .text	00000032 os_mbuf_get
000095c2 g     F .text	000002d8 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E
2000a668 g     O .bss	00000008 g_os_task_list
0000f016 g     F .text	0000014c _ZN6mynewt4Strn8validate17h1102378208cc75cdE
00016cae g     F .text	000000d2 _ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E
0001b668 g     F .text	0000003a vsnprintf
0000dc1a g     F .text	0000000e _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h150c3e461f16f651E
00013e9a g     F .text	00000090 _ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E
00012ae8 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E
0001a4fc g     F .text	000000b8 os_mutex_release
0000ed7c g     F .text	00000056 _ZN3log6logger17hf609e7cc1c031552E
00012ac0 g     F .text	00000028 .hidden _ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E
0000eb30 g     F .text	0000004e _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E
0001c11c g     F .text	0000000c sensor_mgr_evq_get
00012de0 g     F .text	00000024 .hidden _ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h2d7145d37f608201E
0000d72a g     F .text	00000014 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h2454dbfe6f26a106E
000123ec g     F .text	00000058 _ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E
0000e8de g     F .text	00000018 _ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E
00015524 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE
0000da48 g     F .text	000000ba _ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E
2000a63c g     O .bss	00000004 g_os_idle_ctr
00018c6c g     F .text	0000002c hal_gpio_init_in
0000e87a g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE
00010e1a g     F .text	00000036 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E
00008164  w    F .text	00000002 TIMER1_IRQHandler
0001bf28 g     F .text	00000002 sensor_dev_create
0000e3ec g     F .text	0000008e _ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE
00008164  w    F .text	00000002 TIMER0_IRQHandler
0000efca g     F .text	00000010 _ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE
00018c98 g     F .text	00000038 hal_gpio_init_out
0000f43c g     F .text	00000160 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE
0000e50e g     F .text	00000012 _ZN4core3mem4swap17hc4afbec7b5ffb125E
00016536 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E
00015c6e g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E
00010006 g     F .text	0000003e .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE
200000d8 g       .data	00000000 __data_start__
0001acc0 g     F .text	0000000c os_time_get
000169e8 g     F .text	00000008 _ZN4core5panic8Location4file17h61e77cb122865fdbE
00011b84 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E
0001a378 g     F .text	00000026 os_memblock_put
00013f2a g     F .text	000000a4 _ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE
0001a81c g     F .text	00000090 os_sched_sleep
0000e8b8 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE
0001c0f0 g     F .text	0000001c sensor_mgr_lock
0001cec4 g     F .text	000002cc .hidden __udivmoddi4
00012ee4 g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E
0001baa0 g     F .text	000000a0 os_tick_init
00014c48 g     F .text	00000052 _ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E
000169e2 g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E
00008164  w    F .text	00000002 RTC0_IRQHandler
0000f6be g     F .text	00000044 _ZN6mynewt3sys7console5print17hc13a6743274d87fcE
0001a960 g     F .text	00000040 os_sched_wakeup_ticks
000161d4 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE
0000db02 g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$8shutdown17h04afc1517f23f57eE
0000ff42 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE
0001be74 g     F .text	00000030 hal_timer_read
20000144 g       .data	00000000 __data_end__
00018da0 g     F .text	00000028 hal_gpio_irq_enable
00012e7c g     F .text	00000032 .hidden _ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE
0001c8b8 g     F .text	0000000c oc_evq_set
0001c438 g     F .text	00000018 is_sensor_node
00009ba0 g     F .text	00000052 _ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E
00018152 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE
0001c930 g     F .text	00000024 oc_init
0001838a g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h54b904d9d5d295daE
0001838a g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h85ec06f2c95e1ecaE
00010c28 g     F .text	000000bc _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE
00017922 g     F .text	0000034c _ZN4core3str16slice_error_fail17h232f9181d55b3da9E
00015f52 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE
2000a6f8 g     O .bss	00000018 sensor_base_ts
00018680 g     F .text	000000f4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E
0002127c g       .ARM.exidx	00000000 __etext
00012b60 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17h31de2c523da77629E
0001820e g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E
00018b3c g     F .text	0000000c console_get_ticks
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
0000f702 g     F .text	0000000a _ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E
20000108 g     O .data	00000004 hal_twi_i2c1
00015206 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E
0001ab40 g     F .text	000000d8 os_task_init
00011d0e g     F .text	0000000a _ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E
0000f636 g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E
0000e4c0 g     F .text	0000001a _ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE
0000e8a8 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E
00016644 g     F .text	00000042 _ZN4core3ptr4read17h27a035d1812d8297E
000164d6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E
0000ddda g     F .text	0000004c _ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h67d5d76d62fd1974E
0001aa0c g     F .text	00000064 os_sem_release
0001d1a0 g     F .text	0000009a __aeabi_memset
0001a1e4 g     F .text	000000b8 os_mbuf_dup
0001afa4 g     F .text	00000046 PendSV_Handler
0001af5e g     F .text	00000046 SVC_Handler
0001adb0 g     F .text	0000000c os_arch_save_sr
00014e60 g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E
00008164  w    F .text	00000002 PWM2_IRQHandler
000095a8 g     F .text	0000000a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h6cf7f1058fcc9245E
0000815c  w    F .text	00000002 UsageFault_Handler
0001bd0c g     F .text	00000010 nrf52_timer0_irq_handler
0001adcc g     F .text	00000040 os_arch_task_stack_init
0000d7c4 g     F .text	00000026 _ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE
2000a738 g       .bss	00000000 __bss_end__
0001a328 g     F .text	00000032 os_memblock_get
2000a734 g     O .bss	00000004 flash_map
00008164  w    F .text	00000002 RADIO_IRQHandler
00016044 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E
0000e5d8 g     F .text	00000056 _ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE
00008164  w    F .text	00000002 TIMER2_IRQHandler
00012fb8 g     F .text	000000c4 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E
00019870 g     F .text	00000014 hal_watchdog_tickle
00011c18 g     F .text	00000010 _ZN4core3ptr13drop_in_place17h0697ea54608a328fE
00015952 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE
00019f2e g     F .text	0000007a os_eventq_get
0001ce74 g     F .text	00000020 sprintf
0001ad6c g     F .text	00000026 os_time_ms_to_ticks
0000efda g     F .text	0000003c _ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E
00009a48 g     F .text	00000014 _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h79fbfe346516e383E
0001653a g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E
000128a2 g     F .text	00000036 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE
2000a198 g     O .bss	00000004 os_flags
0001c960 g     F .text	00000028 oc_rep_init
0001b070 g     F .text	0000001a memcpy
0000ded6 g     F .text	0000009a _ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E
0001b754 g     F .text	00000044 sysinit_app
00015ba4 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE
00015f7c g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE
00016326 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E
000185b0 g     F .text	000000d0 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E
0000f7c4 g     F .text	0000036c _ZN6mynewt3hal3SPI4init17h97467ea724680fb5E
00013150 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE
00018a40 g     F .text	0000003c console_out_nolock
2000a710 g     O .bss	00000020 oc_transports
00018d28 g     F .text	00000078 hal_gpio_irq_init
00014f6a g     F .text	00000020 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE
0001b0de g     F .text	00000010 strlen
0001aa70 g     F .text	000000b8 os_sem_pend
0000e12c g     F .text	00000016 _ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE
0001ba08 g     F .text	00000098 os_tick_idle
00013196 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
00000000 g       .svc_table	00000000 SVC_Table
000132ec g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE
00015b8a g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E
2000fe50 g       *ABS*	00000000 __HeapLimit
00019b40 g     F .text	00000038 os_pkg_init
20000144 g       .bssnz	00000000 __bssnz_start__
0000ffb2 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17had883e363867a05eE
0000e47a g     F .text	00000012 _ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E
00011bd8 g     F .text	0000001a .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E
00015744 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE
00008164  w    F .text	00000002 ECB_IRQHandler
0000fb30 g     F .text	00000004 _ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E
00008158  w    F .text	00000002 MemoryManagement_Handler
0001838a g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17hc11e05ad6528dc14E
00014b0a g     F .text	000000ba _ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE
0000d73e g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE
00019ec6 g     F .text	00000068 os_eventq_put
20010000 g       .bss	00000000 __StackTop
000154d2 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E
00010e50 g     F .text	0000003c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E
0000e2f6 g     F .text	00000012 _ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE
000153e4 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE
0001ccea g     F .text	0000000a mfg_read_tlv_mmr_ref
0000f20e g     F .text	00000018 _ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E
00012cbc g     F .text	00000030 .hidden _ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h7cd75c3bdc89aa73E
0001c4f8 g     F .text	000000c0 sensor_network_init
0001838a g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE
00012a46 g     F .text	0000000e .hidden _ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h0a450d9c4f54993fE
00015f28 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE
0000f2ba g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE
00013206 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	0001af5f 	.word	0x0001af5f
	...
    8058:	0001afa5 	.word	0x0001afa5
    805c:	0001afeb 	.word	0x0001afeb
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f826 	bl	8178 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20000148 	.word	0x20000148
    ldr     r3, =__bss_end__
    8134:	2000a738 	.word	0x2000a738
    ldr    r1, =__etext
    8138:	0002127c 	.word	0x0002127c
    ldr    r2, =__data_start__
    813c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
    8140:	20000144 	.word	0x20000144
    LDR     R0, =__HeapBase
    8144:	2000a738 	.word	0x2000a738
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	0000842d 	.word	0x0000842d
    LDR     R0, =_start
    8150:	00008601 	.word	0x00008601

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	200000d8 	.word	0x200000d8

00008178 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    8178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    817c:	2201      	movs	r2, #1
    817e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    8182:	4770      	bx	lr

00008184 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    8184:	4b02      	ldr	r3, [pc, #8]	; (8190 <hal_debugger_connected+0xc>)
    8186:	6818      	ldr	r0, [r3, #0]
}
    8188:	f000 0001 	and.w	r0, r0, #1
    818c:	4770      	bx	lr
    818e:	bf00      	nop
    8190:	e000edf0 	.word	0xe000edf0

00008194 <hal_system_reset>:
{
    8194:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    8196:	f7ff fff5 	bl	8184 <hal_debugger_connected>
    819a:	b100      	cbz	r0, 819e <hal_system_reset+0xa>
            asm("bkpt");
    819c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    819e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81a2:	4905      	ldr	r1, [pc, #20]	; (81b8 <hal_system_reset+0x24>)
    81a4:	68ca      	ldr	r2, [r1, #12]
    81a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81aa:	4b04      	ldr	r3, [pc, #16]	; (81bc <hal_system_reset+0x28>)
    81ac:	4313      	orrs	r3, r2
    81ae:	60cb      	str	r3, [r1, #12]
    81b0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81b4:	bf00      	nop
    81b6:	e7fd      	b.n	81b4 <hal_system_reset+0x20>
    81b8:	e000ed00 	.word	0xe000ed00
    81bc:	05fa0004 	.word	0x05fa0004

000081c0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81c4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81c8:	4b0f      	ldr	r3, [pc, #60]	; (8208 <hal_system_clock_start+0x48>)
    81ca:	4013      	ands	r3, r2
    81cc:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    81d0:	d018      	beq.n	8204 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    81d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81d6:	2201      	movs	r2, #1
    81d8:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    81da:	2100      	movs	r1, #0
    81dc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    81e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    81e4:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    81e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    81ee:	2b00      	cmp	r3, #0
    81f0:	d0f9      	beq.n	81e6 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    81f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81fa:	4b03      	ldr	r3, [pc, #12]	; (8208 <hal_system_clock_start+0x48>)
    81fc:	4013      	ands	r3, r2
    81fe:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    8202:	d1f0      	bne.n	81e6 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8204:	4770      	bx	lr
    8206:	bf00      	nop
    8208:	00010003 	.word	0x00010003

0000820c <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    820c:	4b0b      	ldr	r3, [pc, #44]	; (823c <errata_16+0x30>)
    820e:	781b      	ldrb	r3, [r3, #0]
    8210:	2b06      	cmp	r3, #6
    8212:	d001      	beq.n	8218 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8214:	2000      	movs	r0, #0
    8216:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8218:	4b09      	ldr	r3, [pc, #36]	; (8240 <errata_16+0x34>)
    821a:	681b      	ldr	r3, [r3, #0]
    821c:	f013 0f0f 	tst.w	r3, #15
    8220:	d107      	bne.n	8232 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8222:	4b08      	ldr	r3, [pc, #32]	; (8244 <errata_16+0x38>)
    8224:	681b      	ldr	r3, [r3, #0]
    8226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    822a:	2b30      	cmp	r3, #48	; 0x30
    822c:	d003      	beq.n	8236 <errata_16+0x2a>
    return false;
    822e:	2000      	movs	r0, #0
    8230:	4770      	bx	lr
    8232:	2000      	movs	r0, #0
    8234:	4770      	bx	lr
            return true;
    8236:	2001      	movs	r0, #1
}
    8238:	4770      	bx	lr
    823a:	bf00      	nop
    823c:	f0000fe0 	.word	0xf0000fe0
    8240:	f0000fe4 	.word	0xf0000fe4
    8244:	f0000fe8 	.word	0xf0000fe8

00008248 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	4b0f      	ldr	r3, [pc, #60]	; (8288 <errata_31+0x40>)
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	2b06      	cmp	r3, #6
    824e:	d001      	beq.n	8254 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8250:	2000      	movs	r0, #0
    8252:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8254:	4b0d      	ldr	r3, [pc, #52]	; (828c <errata_31+0x44>)
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	f013 0f0f 	tst.w	r3, #15
    825c:	d10b      	bne.n	8276 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    825e:	4b0c      	ldr	r3, [pc, #48]	; (8290 <errata_31+0x48>)
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8266:	2b30      	cmp	r3, #48	; 0x30
    8268:	d007      	beq.n	827a <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    826a:	2b40      	cmp	r3, #64	; 0x40
    826c:	d007      	beq.n	827e <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    826e:	2b50      	cmp	r3, #80	; 0x50
    8270:	d007      	beq.n	8282 <errata_31+0x3a>
    return false;
    8272:	2000      	movs	r0, #0
    8274:	4770      	bx	lr
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
            return true;
    827a:	2001      	movs	r0, #1
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
    8280:	4770      	bx	lr
            return true;
    8282:	2001      	movs	r0, #1
}
    8284:	4770      	bx	lr
    8286:	bf00      	nop
    8288:	f0000fe0 	.word	0xf0000fe0
    828c:	f0000fe4 	.word	0xf0000fe4
    8290:	f0000fe8 	.word	0xf0000fe8

00008294 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8294:	4b0b      	ldr	r3, [pc, #44]	; (82c4 <errata_32+0x30>)
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	2b06      	cmp	r3, #6
    829a:	d001      	beq.n	82a0 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    829c:	2000      	movs	r0, #0
    829e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82a0:	4b09      	ldr	r3, [pc, #36]	; (82c8 <errata_32+0x34>)
    82a2:	681b      	ldr	r3, [r3, #0]
    82a4:	f013 0f0f 	tst.w	r3, #15
    82a8:	d107      	bne.n	82ba <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82aa:	4b08      	ldr	r3, [pc, #32]	; (82cc <errata_32+0x38>)
    82ac:	681b      	ldr	r3, [r3, #0]
    82ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82b2:	2b30      	cmp	r3, #48	; 0x30
    82b4:	d003      	beq.n	82be <errata_32+0x2a>
    return false;
    82b6:	2000      	movs	r0, #0
    82b8:	4770      	bx	lr
    82ba:	2000      	movs	r0, #0
    82bc:	4770      	bx	lr
            return true;
    82be:	2001      	movs	r0, #1
}
    82c0:	4770      	bx	lr
    82c2:	bf00      	nop
    82c4:	f0000fe0 	.word	0xf0000fe0
    82c8:	f0000fe4 	.word	0xf0000fe4
    82cc:	f0000fe8 	.word	0xf0000fe8

000082d0 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82d0:	4b0f      	ldr	r3, [pc, #60]	; (8310 <errata_36+0x40>)
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	4b0d      	ldr	r3, [pc, #52]	; (8314 <errata_36+0x44>)
    82de:	681b      	ldr	r3, [r3, #0]
    82e0:	f013 0f0f 	tst.w	r3, #15
    82e4:	d10b      	bne.n	82fe <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82e6:	4b0c      	ldr	r3, [pc, #48]	; (8318 <errata_36+0x48>)
    82e8:	681b      	ldr	r3, [r3, #0]
    82ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ee:	2b30      	cmp	r3, #48	; 0x30
    82f0:	d007      	beq.n	8302 <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82f2:	2b40      	cmp	r3, #64	; 0x40
    82f4:	d007      	beq.n	8306 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82f6:	2b50      	cmp	r3, #80	; 0x50
    82f8:	d007      	beq.n	830a <errata_36+0x3a>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
    8304:	4770      	bx	lr
            return true;
    8306:	2001      	movs	r0, #1
    8308:	4770      	bx	lr
            return true;
    830a:	2001      	movs	r0, #1
}
    830c:	4770      	bx	lr
    830e:	bf00      	nop
    8310:	f0000fe0 	.word	0xf0000fe0
    8314:	f0000fe4 	.word	0xf0000fe4
    8318:	f0000fe8 	.word	0xf0000fe8

0000831c <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    831c:	4b0b      	ldr	r3, [pc, #44]	; (834c <errata_37+0x30>)
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	2b06      	cmp	r3, #6
    8322:	d001      	beq.n	8328 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8324:	2000      	movs	r0, #0
    8326:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8328:	4b09      	ldr	r3, [pc, #36]	; (8350 <errata_37+0x34>)
    832a:	681b      	ldr	r3, [r3, #0]
    832c:	f013 0f0f 	tst.w	r3, #15
    8330:	d107      	bne.n	8342 <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8332:	4b08      	ldr	r3, [pc, #32]	; (8354 <errata_37+0x38>)
    8334:	681b      	ldr	r3, [r3, #0]
    8336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    833a:	2b30      	cmp	r3, #48	; 0x30
    833c:	d003      	beq.n	8346 <errata_37+0x2a>
    return false;
    833e:	2000      	movs	r0, #0
    8340:	4770      	bx	lr
    8342:	2000      	movs	r0, #0
    8344:	4770      	bx	lr
            return true;
    8346:	2001      	movs	r0, #1
}
    8348:	4770      	bx	lr
    834a:	bf00      	nop
    834c:	f0000fe0 	.word	0xf0000fe0
    8350:	f0000fe4 	.word	0xf0000fe4
    8354:	f0000fe8 	.word	0xf0000fe8

00008358 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8358:	4b0b      	ldr	r3, [pc, #44]	; (8388 <errata_57+0x30>)
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	2b06      	cmp	r3, #6
    835e:	d001      	beq.n	8364 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8360:	2000      	movs	r0, #0
    8362:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8364:	4b09      	ldr	r3, [pc, #36]	; (838c <errata_57+0x34>)
    8366:	681b      	ldr	r3, [r3, #0]
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d107      	bne.n	837e <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	4b08      	ldr	r3, [pc, #32]	; (8390 <errata_57+0x38>)
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8376:	2b30      	cmp	r3, #48	; 0x30
    8378:	d003      	beq.n	8382 <errata_57+0x2a>
    return false;
    837a:	2000      	movs	r0, #0
    837c:	4770      	bx	lr
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
            return true;
    8382:	2001      	movs	r0, #1
}
    8384:	4770      	bx	lr
    8386:	bf00      	nop
    8388:	f0000fe0 	.word	0xf0000fe0
    838c:	f0000fe4 	.word	0xf0000fe4
    8390:	f0000fe8 	.word	0xf0000fe8

00008394 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8394:	4b0b      	ldr	r3, [pc, #44]	; (83c4 <errata_66+0x30>)
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	2b06      	cmp	r3, #6
    839a:	d001      	beq.n	83a0 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    839c:	2000      	movs	r0, #0
    839e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <errata_66+0x34>)
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	f013 0f0f 	tst.w	r3, #15
    83a8:	d107      	bne.n	83ba <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83aa:	4b08      	ldr	r3, [pc, #32]	; (83cc <errata_66+0x38>)
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b2:	2b50      	cmp	r3, #80	; 0x50
    83b4:	d003      	beq.n	83be <errata_66+0x2a>
    return false;
    83b6:	2000      	movs	r0, #0
    83b8:	4770      	bx	lr
    83ba:	2000      	movs	r0, #0
    83bc:	4770      	bx	lr
            return true;
    83be:	2001      	movs	r0, #1
}
    83c0:	4770      	bx	lr
    83c2:	bf00      	nop
    83c4:	f0000fe0 	.word	0xf0000fe0
    83c8:	f0000fe4 	.word	0xf0000fe4
    83cc:	f0000fe8 	.word	0xf0000fe8

000083d0 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d0:	4b0f      	ldr	r3, [pc, #60]	; (8410 <errata_108+0x40>)
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	2b06      	cmp	r3, #6
    83d6:	d001      	beq.n	83dc <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d8:	2000      	movs	r0, #0
    83da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83dc:	4b0d      	ldr	r3, [pc, #52]	; (8414 <errata_108+0x44>)
    83de:	681b      	ldr	r3, [r3, #0]
    83e0:	f013 0f0f 	tst.w	r3, #15
    83e4:	d10b      	bne.n	83fe <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83e6:	4b0c      	ldr	r3, [pc, #48]	; (8418 <errata_108+0x48>)
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b30      	cmp	r3, #48	; 0x30
    83f0:	d007      	beq.n	8402 <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    83f2:	2b40      	cmp	r3, #64	; 0x40
    83f4:	d007      	beq.n	8406 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83f6:	2b50      	cmp	r3, #80	; 0x50
    83f8:	d007      	beq.n	840a <errata_108+0x3a>
    return false;
    83fa:	2000      	movs	r0, #0
    83fc:	4770      	bx	lr
    83fe:	2000      	movs	r0, #0
    8400:	4770      	bx	lr
            return true;
    8402:	2001      	movs	r0, #1
    8404:	4770      	bx	lr
            return true;
    8406:	2001      	movs	r0, #1
    8408:	4770      	bx	lr
            return true;
    840a:	2001      	movs	r0, #1
}
    840c:	4770      	bx	lr
    840e:	bf00      	nop
    8410:	f0000fe0 	.word	0xf0000fe0
    8414:	f0000fe4 	.word	0xf0000fe4
    8418:	f0000fe8 	.word	0xf0000fe8

0000841c <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    841c:	4b01      	ldr	r3, [pc, #4]	; (8424 <SystemCoreClockUpdate+0x8>)
    841e:	4a02      	ldr	r2, [pc, #8]	; (8428 <SystemCoreClockUpdate+0xc>)
    8420:	601a      	str	r2, [r3, #0]
}
    8422:	4770      	bx	lr
    8424:	200000e4 	.word	0x200000e4
    8428:	03d09000 	.word	0x03d09000

0000842c <SystemInit>:
{
    842c:	b508      	push	{r3, lr}
    if (errata_16()){
    842e:	f7ff feed 	bl	820c <errata_16>
    8432:	b110      	cbz	r0, 843a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8434:	4b65      	ldr	r3, [pc, #404]	; (85cc <SystemInit+0x1a0>)
    8436:	4a66      	ldr	r2, [pc, #408]	; (85d0 <SystemInit+0x1a4>)
    8438:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    843a:	f7ff ff05 	bl	8248 <errata_31>
    843e:	b128      	cbz	r0, 844c <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    8440:	4b64      	ldr	r3, [pc, #400]	; (85d4 <SystemInit+0x1a8>)
    8442:	681b      	ldr	r3, [r3, #0]
    8444:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8448:	4a63      	ldr	r2, [pc, #396]	; (85d8 <SystemInit+0x1ac>)
    844a:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    844c:	f7ff ff22 	bl	8294 <errata_32>
    8450:	b120      	cbz	r0, 845c <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8452:	4a62      	ldr	r2, [pc, #392]	; (85dc <SystemInit+0x1b0>)
    8454:	68d3      	ldr	r3, [r2, #12]
    8456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    845a:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    845c:	f7ff ff38 	bl	82d0 <errata_36>
    8460:	b140      	cbz	r0, 8474 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
    8462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8466:	2200      	movs	r2, #0
    8468:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    846c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    8470:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    8474:	f7ff ff52 	bl	831c <errata_37>
    8478:	b110      	cbz	r0, 8480 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    847a:	4b59      	ldr	r3, [pc, #356]	; (85e0 <SystemInit+0x1b4>)
    847c:	2203      	movs	r2, #3
    847e:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    8480:	f7ff ff6a 	bl	8358 <errata_57>
    8484:	b158      	cbz	r0, 849e <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    8486:	4b57      	ldr	r3, [pc, #348]	; (85e4 <SystemInit+0x1b8>)
    8488:	2205      	movs	r2, #5
    848a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    848c:	3378      	adds	r3, #120	; 0x78
    848e:	2201      	movs	r2, #1
    8490:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    8492:	3b70      	subs	r3, #112	; 0x70
    8494:	2200      	movs	r2, #0
    8496:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    8498:	3b04      	subs	r3, #4
    849a:	223f      	movs	r2, #63	; 0x3f
    849c:	601a      	str	r2, [r3, #0]
    if (errata_66()){
    849e:	f7ff ff79 	bl	8394 <errata_66>
    84a2:	2800      	cmp	r0, #0
    84a4:	d046      	beq.n	8534 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84aa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ae:	4b4e      	ldr	r3, [pc, #312]	; (85e8 <SystemInit+0x1bc>)
    84b0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84b4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84b8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84bc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84c0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    84c4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    84c8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    84cc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    84d0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    84d4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    84d8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    84dc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    84e0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    84e4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    84e8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    84ec:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    84f0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    84f4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    84f8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    84fc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8500:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8504:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8508:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    850c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8510:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8514:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8518:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    851c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8520:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8524:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8528:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    852c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8530:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8534:	f7ff ff4c 	bl	83d0 <errata_108>
    8538:	b128      	cbz	r0, 8546 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    853a:	4b2c      	ldr	r3, [pc, #176]	; (85ec <SystemInit+0x1c0>)
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8542:	4a2b      	ldr	r2, [pc, #172]	; (85f0 <SystemInit+0x1c4>)
    8544:	6013      	str	r3, [r2, #0]
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    8546:	4a2b      	ldr	r2, [pc, #172]	; (85f4 <SystemInit+0x1c8>)
    8548:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    854c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    8554:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8558:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    855c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8560:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    8564:	f013 0f01 	tst.w	r3, #1
    8568:	d104      	bne.n	8574 <SystemInit+0x148>
    SystemCoreClockUpdate();
    856a:	f7ff ff57 	bl	841c <SystemCoreClockUpdate>
    NVIC_Relocate();
    856e:	f010 fafb 	bl	18b68 <NVIC_Relocate>
}
    8572:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    8574:	4b20      	ldr	r3, [pc, #128]	; (85f8 <SystemInit+0x1cc>)
    8576:	2201      	movs	r2, #1
    8578:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    857c:	4b1e      	ldr	r3, [pc, #120]	; (85f8 <SystemInit+0x1cc>)
    857e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8582:	2b00      	cmp	r3, #0
    8584:	d0fa      	beq.n	857c <SystemInit+0x150>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    8586:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    858a:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    858e:	f023 0301 	bic.w	r3, r3, #1
    8592:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8596:	4b18      	ldr	r3, [pc, #96]	; (85f8 <SystemInit+0x1cc>)
    8598:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    859c:	2b00      	cmp	r3, #0
    859e:	d0fa      	beq.n	8596 <SystemInit+0x16a>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85a0:	4b15      	ldr	r3, [pc, #84]	; (85f8 <SystemInit+0x1cc>)
    85a2:	2200      	movs	r2, #0
    85a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85a8:	4b13      	ldr	r3, [pc, #76]	; (85f8 <SystemInit+0x1cc>)
    85aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85ae:	2b00      	cmp	r3, #0
    85b0:	d0fa      	beq.n	85a8 <SystemInit+0x17c>
  __ASM volatile ("dsb 0xF":::"memory");
    85b2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85b6:	490f      	ldr	r1, [pc, #60]	; (85f4 <SystemInit+0x1c8>)
    85b8:	68ca      	ldr	r2, [r1, #12]
    85ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    85be:	4b0f      	ldr	r3, [pc, #60]	; (85fc <SystemInit+0x1d0>)
    85c0:	4313      	orrs	r3, r2
    85c2:	60cb      	str	r3, [r1, #12]
    85c4:	f3bf 8f4f 	dsb	sy
    __NOP();
    85c8:	bf00      	nop
    85ca:	e7fd      	b.n	85c8 <SystemInit+0x19c>
    85cc:	4007c074 	.word	0x4007c074
    85d0:	baadf00d 	.word	0xbaadf00d
    85d4:	10000244 	.word	0x10000244
    85d8:	4000053c 	.word	0x4000053c
    85dc:	e000edf0 	.word	0xe000edf0
    85e0:	400005a0 	.word	0x400005a0
    85e4:	40005610 	.word	0x40005610
    85e8:	4000c000 	.word	0x4000c000
    85ec:	10000258 	.word	0x10000258
    85f0:	40000ee4 	.word	0x40000ee4
    85f4:	e000ed00 	.word	0xe000ed00
    85f8:	4001e000 	.word	0x4001e000
    85fc:	05fa0004 	.word	0x05fa0004

00008600 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8600:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8602:	4803      	ldr	r0, [pc, #12]	; (8610 <_start+0x10>)
    8604:	f011 fa36 	bl	19a74 <os_init>
    os_start();
    8608:	f011 fa8c 	bl	19b24 <os_start>
#endif
}
    860c:	bd08      	pop	{r3, pc}
    860e:	bf00      	nop
    8610:	00008617 	.word	0x00008617

00008614 <_init>:

void
_init(void)
{
}
    8614:	4770      	bx	lr

00008616 <main>:
pub fn handle_touch(_x: u16, _y: u16) { console::print("touch not handled\n"); console::flush(); }  //  Define a touch handler that does nothing

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
    8616:	b088      	sub	sp, #32
    //  Initialise the Mynewt packages and internal temperature sensor driver. Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/nrf52_my_sensor/generated/src/nrf52_my_sensor-sysinit-app.c
    mynewt::sysinit();
    8618:	f006 fcd7 	bl	efca <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>
    861c:	e7ff      	b.n	861e <main+0x8>
    //  extern { fn start_ble() -> i32; }
    //  let rc = unsafe { start_ble() };
    //  assert!(rc == 0, "BLE fail");

    //  Start the display
    druid::start_display()
    861e:	f007 fd71 	bl	10104 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>
    8622:	9005      	str	r0, [sp, #20]
    8624:	e7ff      	b.n	8626 <main+0x10>
    8626:	f24d 213a 	movw	r1, #53818	; 0xd23a
    862a:	f2c0 0101 	movt	r1, #1
    862e:	f24d 2370 	movw	r3, #53872	; 0xd270
    8632:	f2c0 0301 	movt	r3, #1
    8636:	2208      	movs	r2, #8
    8638:	9805      	ldr	r0, [sp, #20]
    863a:	f006 fdc1 	bl	f1c0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    863e:	e7ff      	b.n	8640 <main+0x2a>
    #[cfg(feature = "display_app")]  //  If graphics display app is enabled...
    display::test_display()
        .expect("DSP test fail");

    //  Start the touch sensor
    touch_sensor::start_touch_sensor()
    8640:	f000 f8c7 	bl	87d2 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E>
    8644:	9004      	str	r0, [sp, #16]
    8646:	e7ff      	b.n	8648 <main+0x32>
    8648:	f24d 2142 	movw	r1, #53826	; 0xd242
    864c:	f2c0 0101 	movt	r1, #1
    8650:	f24d 2380 	movw	r3, #53888	; 0xd280
    8654:	f2c0 0301 	movt	r3, #1
    8658:	2208      	movs	r2, #8
    865a:	9804      	ldr	r0, [sp, #16]
    865c:	f006 fdb0 	bl	f1c0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8660:	e7ff      	b.n	8662 <main+0x4c>
    visual::on_start()
        .expect("VIS fail");

    //  Launch the CHIP8 Emulator app
    #[cfg(feature = "chip8_app")]  //  If CHIP8 Emulator app is enabled...
    chip8::on_start()
    8662:	f000 ff27 	bl	94b4 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E>
    8666:	9003      	str	r0, [sp, #12]
    8668:	e7ff      	b.n	866a <main+0x54>
    866a:	f24d 2190 	movw	r1, #53904	; 0xd290
    866e:	f2c0 0101 	movt	r1, #1
    8672:	f24d 239c 	movw	r3, #53916	; 0xd29c
    8676:	f2c0 0301 	movt	r3, #1
    867a:	220a      	movs	r2, #10
    867c:	9803      	ldr	r0, [sp, #12]
    867e:	f006 fd9f 	bl	f1c0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8682:	e7ff      	b.n	8684 <main+0x6e>
        .expect("CHIP8 fail");

    //  Main event loop
    loop {                            //  Loop forever...
    8684:	e7ff      	b.n	8686 <main+0x70>
    8686:	a806      	add	r0, sp, #24
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
    8688:	f006 fe59 	bl	f33e <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    868c:	e7ff      	b.n	868e <main+0x78>
    868e:	f24d 214a 	movw	r1, #53834	; 0xd24a
    8692:	f2c0 0101 	movt	r1, #1
    8696:	f24d 23ac 	movw	r3, #53932	; 0xd2ac
    869a:	f2c0 0301 	movt	r3, #1
    869e:	a806      	add	r0, sp, #24
    86a0:	2208      	movs	r2, #8
    86a2:	f00a f9d7 	bl	12a54 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E>
    86a6:	9002      	str	r0, [sp, #8]
    86a8:	e7ff      	b.n	86aa <main+0x94>
        os::eventq_run(               //  Processing events...
    86aa:	9802      	ldr	r0, [sp, #8]
    86ac:	f006 fe3e 	bl	f32c <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
    86b0:	9001      	str	r0, [sp, #4]
    86b2:	e7ff      	b.n	86b4 <main+0x9e>
    86b4:	f24d 2152 	movw	r1, #53842	; 0xd252
    86b8:	f2c0 0101 	movt	r1, #1
    86bc:	f24d 23bc 	movw	r3, #53948	; 0xd2bc
    86c0:	f2c0 0301 	movt	r3, #1
    86c4:	2208      	movs	r2, #8
    86c6:	9801      	ldr	r0, [sp, #4]
    86c8:	f006 fd7a 	bl	f1c0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    86cc:	e7ff      	b.n	86ce <main+0xb8>
    loop {                            //  Loop forever...
    86ce:	e7da      	b.n	8686 <main+0x70>

000086d0 <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    86d0:	b08e      	sub	sp, #56	; 0x38
    86d2:	900b      	str	r0, [sp, #44]	; 0x2c
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
    86d4:	f24d 21cc 	movw	r1, #53964	; 0xd2cc
    86d8:	f2c0 0101 	movt	r1, #1
    86dc:	2206      	movs	r2, #6
    86de:	9007      	str	r0, [sp, #28]
    86e0:	4608      	mov	r0, r1
    86e2:	4611      	mov	r1, r2
    86e4:	f006 ffeb 	bl	f6be <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    86e8:	e7ff      	b.n	86ea <rust_begin_unwind+0x1a>
    if let Some(location) = info.location() {
    86ea:	9807      	ldr	r0, [sp, #28]
    86ec:	f00e f979 	bl	169e2 <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>
    86f0:	9008      	str	r0, [sp, #32]
    86f2:	e7ff      	b.n	86f4 <rust_begin_unwind+0x24>
    86f4:	9808      	ldr	r0, [sp, #32]
    86f6:	2800      	cmp	r0, #0
    86f8:	d108      	bne.n	870c <rust_begin_unwind+0x3c>
    86fa:	e7ff      	b.n	86fc <rust_begin_unwind+0x2c>
        let line = location.line();
        console::print("at ");       console::buffer(&file);
        console::print(" line ");    console::printint(line as i32);
        console::print("\n");        console::flush();
    } else {
        console::print("no loc\n");  console::flush();
    86fc:	f24d 20d2 	movw	r0, #53970	; 0xd2d2
    8700:	f2c0 0001 	movt	r0, #1
    8704:	2107      	movs	r1, #7
    8706:	f006 ffda 	bl	f6be <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    870a:	e033      	b.n	8774 <rust_begin_unwind+0xa4>
    if let Some(location) = info.location() {
    870c:	9808      	ldr	r0, [sp, #32]
    870e:	900c      	str	r0, [sp, #48]	; 0x30
        let file = location.file();
    8710:	9006      	str	r0, [sp, #24]
    8712:	f00e f969 	bl	169e8 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8716:	910a      	str	r1, [sp, #40]	; 0x28
    8718:	9009      	str	r0, [sp, #36]	; 0x24
    871a:	e7ff      	b.n	871c <rust_begin_unwind+0x4c>
        let line = location.line();
    871c:	9806      	ldr	r0, [sp, #24]
    871e:	f00e f967 	bl	169f0 <_ZN4core5panic8Location4line17h650a566d9637c91dE>
    8722:	4601      	mov	r1, r0
    8724:	900d      	str	r0, [sp, #52]	; 0x34
    8726:	9105      	str	r1, [sp, #20]
    8728:	e7ff      	b.n	872a <rust_begin_unwind+0x5a>
        console::print("at ");       console::buffer(&file);
    872a:	f24d 20d9 	movw	r0, #53977	; 0xd2d9
    872e:	f2c0 0001 	movt	r0, #1
    8732:	2103      	movs	r1, #3
    8734:	f006 ffc3 	bl	f6be <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8738:	e7ff      	b.n	873a <rust_begin_unwind+0x6a>
    873a:	9809      	ldr	r0, [sp, #36]	; 0x24
    873c:	990a      	ldr	r1, [sp, #40]	; 0x28
    873e:	f006 ffe5 	bl	f70c <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>
    8742:	e7ff      	b.n	8744 <rust_begin_unwind+0x74>
        console::print(" line ");    console::printint(line as i32);
    8744:	f24d 20dc 	movw	r0, #53980	; 0xd2dc
    8748:	f2c0 0001 	movt	r0, #1
    874c:	2106      	movs	r1, #6
    874e:	f006 ffb6 	bl	f6be <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8752:	e7ff      	b.n	8754 <rust_begin_unwind+0x84>
    8754:	9805      	ldr	r0, [sp, #20]
    8756:	f006 fff0 	bl	f73a <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    875a:	e7ff      	b.n	875c <rust_begin_unwind+0x8c>
        console::print("\n");        console::flush();
    875c:	f24d 20e2 	movw	r0, #53986	; 0xd2e2
    8760:	f2c0 0001 	movt	r0, #1
    8764:	2101      	movs	r1, #1
    8766:	f006 ffaa 	bl	f6be <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    876a:	e7ff      	b.n	876c <rust_begin_unwind+0x9c>
    876c:	f006 ffed 	bl	f74a <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8770:	e7ff      	b.n	8772 <rust_begin_unwind+0xa2>
    if let Some(location) = info.location() {
    8772:	e003      	b.n	877c <rust_begin_unwind+0xac>
        console::print("no loc\n");  console::flush();
    8774:	f006 ffe9 	bl	f74a <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8778:	e7ff      	b.n	877a <rust_begin_unwind+0xaa>
    if let Some(location) = info.location() {
    877a:	e7ff      	b.n	877c <rust_begin_unwind+0xac>
/// exception.
#[inline(always)]
pub fn bkpt() {
    match () {
        #[cfg(all(cortex_m, feature = "inline-asm"))]
        () => unsafe { asm!("bkpt" :::: "volatile") },
    877c:	be00      	bkpt	0x0000
    }
    //  Pause in the debugger.
    bkpt();
    877e:	e7ff      	b.n	8780 <rust_begin_unwind+0xb0>
    //  Display the payload.
    console::print(info.payload().downcast_ref::<&str>().unwrap());
    8780:	9807      	ldr	r0, [sp, #28]
    8782:	f00e f931 	bl	169e8 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8786:	9004      	str	r0, [sp, #16]
    8788:	9103      	str	r1, [sp, #12]
    878a:	e7ff      	b.n	878c <rust_begin_unwind+0xbc>
    878c:	9804      	ldr	r0, [sp, #16]
    878e:	9903      	ldr	r1, [sp, #12]
    8790:	f005 fa18 	bl	dbc4 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17ha534480b95c4fb6cE>
    8794:	9002      	str	r0, [sp, #8]
    8796:	e7ff      	b.n	8798 <rust_begin_unwind+0xc8>
    8798:	f24d 21e4 	movw	r1, #53988	; 0xd2e4
    879c:	f2c0 0101 	movt	r1, #1
    87a0:	9802      	ldr	r0, [sp, #8]
    87a2:	f005 fc85 	bl	e0b0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E>
    87a6:	9001      	str	r0, [sp, #4]
    87a8:	e7ff      	b.n	87aa <rust_begin_unwind+0xda>
    87aa:	9801      	ldr	r0, [sp, #4]
    87ac:	6800      	ldr	r0, [r0, #0]
    87ae:	9901      	ldr	r1, [sp, #4]
    87b0:	6849      	ldr	r1, [r1, #4]
    87b2:	f006 ff84 	bl	f6be <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87b6:	e7ff      	b.n	87b8 <rust_begin_unwind+0xe8>
    console::print("\n");  console::flush();
    87b8:	f24d 20e2 	movw	r0, #53986	; 0xd2e2
    87bc:	f2c0 0001 	movt	r0, #1
    87c0:	2101      	movs	r1, #1
    87c2:	f006 ff7c 	bl	f6be <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87c6:	e7ff      	b.n	87c8 <rust_begin_unwind+0xf8>
    87c8:	f006 ffbf 	bl	f74a <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    87cc:	e7ff      	b.n	87ce <rust_begin_unwind+0xfe>
    //  Loop forever so that device won't restart.
    loop {}
    87ce:	e7ff      	b.n	87d0 <rust_begin_unwind+0x100>
    87d0:	e7fe      	b.n	87d0 <rust_begin_unwind+0x100>

000087d2 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E>:
/// ```rust
/// let peripherals = nrf52::Peripherals::take().unwrap();
/// let nfcpins = peripherals.UICR.nfcpins.read().bits();
/// console::print("nfcpins = "); console::printhex(nfcpins as u8); console::print("\n");
/// ```
pub fn start_touch_sensor() -> MynewtResult<()> {
    87d2:	b5b0      	push	{r4, r5, r7, lr}
    87d4:	b0be      	sub	sp, #248	; 0xf8
    console::print("Rust touch sensor\n");
    87d6:	f24d 20f4 	movw	r0, #54004	; 0xd2f4
    87da:	f2c0 0001 	movt	r0, #1
    87de:	2112      	movs	r1, #18
    87e0:	f006 ff6d 	bl	f6be <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87e4:	e7ff      	b.n	87e6 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x14>

    //  Init GPIO for the Reset Pin
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    87e6:	f240 1048 	movw	r0, #328	; 0x148
    87ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
    87ee:	210a      	movs	r1, #10
    87f0:	f007 f9a0 	bl	fb34 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    87f4:	9012      	str	r0, [sp, #72]	; 0x48
    87f6:	e7ff      	b.n	87f8 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x26>
    87f8:	9812      	ldr	r0, [sp, #72]	; 0x48
    87fa:	f006 fd20 	bl	f23e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    87fe:	9014      	str	r0, [sp, #80]	; 0x50
    8800:	e7ff      	b.n	8802 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x30>
    8802:	9814      	ldr	r0, [sp, #80]	; 0x50
    8804:	1e41      	subs	r1, r0, #1
    8806:	bf18      	it	ne
    8808:	2101      	movne	r1, #1
    880a:	2801      	cmp	r0, #1
    880c:	d001      	beq.n	8812 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x40>
    880e:	e7ff      	b.n	8810 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x3e>
    8810:	e008      	b.n	8824 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x52>

    //  Reset the touch controller by switching the Reset Pin low then high with pauses. Based on https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L1017-L1167
    unsafe {
        TOUCH_RESET.set_low() ? ;
    8812:	f240 1048 	movw	r0, #328	; 0x148
    8816:	f2c2 0000 	movt	r0, #8192	; 0x2000
    881a:	f007 fa24 	bl	fc66 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    881e:	9011      	str	r0, [sp, #68]	; 0x44
    8820:	e00f      	b.n	8842 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x70>
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    8822:	defe      	udf	#254	; 0xfe
    8824:	9814      	ldr	r0, [sp, #80]	; 0x50
    8826:	9036      	str	r0, [sp, #216]	; 0xd8
    8828:	f006 fd7c 	bl	f324 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    882c:	9010      	str	r0, [sp, #64]	; 0x40
    882e:	e002      	b.n	8836 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x64>
    assert_eq!(rc, 0, "IRQ init fail");

    //  Start monitoring for touch controller interrupts
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    Ok(())
}
    8830:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8832:	b03e      	add	sp, #248	; 0xf8
    8834:	bdb0      	pop	{r4, r5, r7, pc}
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    8836:	9810      	ldr	r0, [sp, #64]	; 0x40
    8838:	f006 fcf5 	bl	f226 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    883c:	9013      	str	r0, [sp, #76]	; 0x4c
    883e:	e7ff      	b.n	8840 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x6e>
    8840:	e7f6      	b.n	8830 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x5e>
        TOUCH_RESET.set_low() ? ;
    8842:	9811      	ldr	r0, [sp, #68]	; 0x44
    8844:	f006 fcfb 	bl	f23e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    8848:	9015      	str	r0, [sp, #84]	; 0x54
    884a:	e7ff      	b.n	884c <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x7a>
    884c:	9815      	ldr	r0, [sp, #84]	; 0x54
    884e:	1e41      	subs	r1, r0, #1
    8850:	bf18      	it	ne
    8852:	2101      	movne	r1, #1
    8854:	2801      	cmp	r0, #1
    8856:	d001      	beq.n	885c <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x8a>
    8858:	e7ff      	b.n	885a <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x88>
    885a:	e008      	b.n	886e <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x9c>
        TOUCH_DELAY.delay_ms(20);
    885c:	f240 104c 	movw	r0, #332	; 0x14c
    8860:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8864:	2114      	movs	r1, #20
    8866:	f007 fa15 	bl	fc94 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    886a:	e00d      	b.n	8888 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xb6>
        TOUCH_RESET.set_low() ? ;
    886c:	defe      	udf	#254	; 0xfe
    886e:	9815      	ldr	r0, [sp, #84]	; 0x54
    8870:	9037      	str	r0, [sp, #220]	; 0xdc
    8872:	f006 fd57 	bl	f324 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    8876:	900f      	str	r0, [sp, #60]	; 0x3c
    8878:	e7ff      	b.n	887a <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xa8>
    887a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    887c:	f006 fcd3 	bl	f226 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    8880:	9013      	str	r0, [sp, #76]	; 0x4c
    8882:	e7ff      	b.n	8884 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xb2>
    8884:	e7ff      	b.n	8886 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xb4>
    8886:	e7d3      	b.n	8830 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x5e>
        TOUCH_RESET.set_high() ? ;
    8888:	f240 1048 	movw	r0, #328	; 0x148
    888c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8890:	f007 f9f4 	bl	fc7c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    8894:	900e      	str	r0, [sp, #56]	; 0x38
    8896:	e7ff      	b.n	8898 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xc6>
    8898:	980e      	ldr	r0, [sp, #56]	; 0x38
    889a:	f006 fcd0 	bl	f23e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    889e:	9016      	str	r0, [sp, #88]	; 0x58
    88a0:	e7ff      	b.n	88a2 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xd0>
    88a2:	9816      	ldr	r0, [sp, #88]	; 0x58
    88a4:	1e41      	subs	r1, r0, #1
    88a6:	bf18      	it	ne
    88a8:	2101      	movne	r1, #1
    88aa:	2801      	cmp	r0, #1
    88ac:	d001      	beq.n	88b2 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xe0>
    88ae:	e7ff      	b.n	88b0 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xde>
    88b0:	e008      	b.n	88c4 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xf2>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    88b2:	f240 104c 	movw	r0, #332	; 0x14c
    88b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    88ba:	21c8      	movs	r1, #200	; 0xc8
    88bc:	f007 f9ea 	bl	fc94 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    88c0:	e00c      	b.n	88dc <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x10a>
        TOUCH_RESET.set_high() ? ;
    88c2:	defe      	udf	#254	; 0xfe
    88c4:	9816      	ldr	r0, [sp, #88]	; 0x58
    88c6:	9038      	str	r0, [sp, #224]	; 0xe0
    88c8:	f006 fd2c 	bl	f324 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    88cc:	900d      	str	r0, [sp, #52]	; 0x34
    88ce:	e7ff      	b.n	88d0 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xfe>
    88d0:	980d      	ldr	r0, [sp, #52]	; 0x34
    88d2:	f006 fca8 	bl	f226 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    88d6:	9013      	str	r0, [sp, #76]	; 0x4c
    88d8:	e7ff      	b.n	88da <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x108>
    88da:	e7d4      	b.n	8886 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xb4>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    88dc:	f240 104c 	movw	r0, #332	; 0x14c
    88e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    88e4:	21c8      	movs	r1, #200	; 0xc8
    88e6:	f007 f9d5 	bl	fc94 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    88ea:	e7ff      	b.n	88ec <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x11a>
    unsafe { TOUCH_EVENT.ev_cb = Some( touch_event_callback ) };
    88ec:	f648 208f 	movw	r0, #35471	; 0x8a8f
    88f0:	f2c0 0000 	movt	r0, #0
    88f4:	9017      	str	r0, [sp, #92]	; 0x5c
    88f6:	9817      	ldr	r0, [sp, #92]	; 0x5c
    88f8:	f240 11e0 	movw	r1, #480	; 0x1e0
    88fc:	f2c2 0100 	movt	r1, #8192	; 0x2000
    8900:	6048      	str	r0, [r1, #4]
        Some( touch_interrupt_handler ),  //  Call `touch_interrupt_handler()` upon detecting interrupt
    8902:	f648 2043 	movw	r0, #35395	; 0x8a43
    8906:	f2c0 0000 	movt	r0, #0
    890a:	9019      	str	r0, [sp, #100]	; 0x64
        core::ptr::null_mut(),            //  No arguments for `touch_interrupt_handler()`
    890c:	e7ff      	b.n	890e <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x13c>
    let rc = unsafe { hal::hal_gpio_irq_init(
    890e:	9919      	ldr	r1, [sp, #100]	; 0x64
    8910:	4668      	mov	r0, sp
    8912:	2201      	movs	r2, #1
    8914:	6002      	str	r2, [r0, #0]
    8916:	201c      	movs	r0, #28
    8918:	2200      	movs	r2, #0
    891a:	2302      	movs	r3, #2
    891c:	f010 fa04 	bl	18d28 <hal_gpio_irq_init>
    8920:	9018      	str	r0, [sp, #96]	; 0x60
    8922:	e7ff      	b.n	8924 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x152>
    assert_eq!(rc, 0, "IRQ init fail");
    8924:	f24d 300c 	movw	r0, #54028	; 0xd30c
    8928:	f2c0 0001 	movt	r0, #1
    892c:	6800      	ldr	r0, [r0, #0]
    892e:	a918      	add	r1, sp, #96	; 0x60
    8930:	911a      	str	r1, [sp, #104]	; 0x68
    8932:	901b      	str	r0, [sp, #108]	; 0x6c
    8934:	981a      	ldr	r0, [sp, #104]	; 0x68
    8936:	9039      	str	r0, [sp, #228]	; 0xe4
    8938:	991b      	ldr	r1, [sp, #108]	; 0x6c
    893a:	913a      	str	r1, [sp, #232]	; 0xe8
    893c:	6802      	ldr	r2, [r0, #0]
    893e:	680b      	ldr	r3, [r1, #0]
    8940:	429a      	cmp	r2, r3
    8942:	900c      	str	r0, [sp, #48]	; 0x30
    8944:	910b      	str	r1, [sp, #44]	; 0x2c
    8946:	d104      	bne.n	8952 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x180>
    8948:	e7ff      	b.n	894a <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x178>
    894a:	201c      	movs	r0, #28
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    894c:	f010 fa28 	bl	18da0 <hal_gpio_irq_enable>
    8950:	e072      	b.n	8a38 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x266>
    assert_eq!(rc, 0, "IRQ init fail");
    8952:	f24d 3064 	movw	r0, #54116	; 0xd364
    8956:	f2c0 0001 	movt	r0, #1
    895a:	6801      	ldr	r1, [r0, #0]
    895c:	980c      	ldr	r0, [sp, #48]	; 0x30
    895e:	902b      	str	r0, [sp, #172]	; 0xac
    8960:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8962:	922c      	str	r2, [sp, #176]	; 0xb0
    8964:	f24d 3380 	movw	r3, #54144	; 0xd380
    8968:	f2c0 0301 	movt	r3, #1
    896c:	681b      	ldr	r3, [r3, #0]
    896e:	f24d 3c84 	movw	ip, #54148	; 0xd384
    8972:	f2c0 0c01 	movt	ip, #1
    8976:	f8dc c000 	ldr.w	ip, [ip]
    897a:	46ee      	mov	lr, sp
    897c:	2400      	movs	r4, #0
    897e:	f8ce 4000 	str.w	r4, [lr]
    8982:	a82d      	add	r0, sp, #180	; 0xb4
    8984:	2201      	movs	r2, #1
    8986:	910a      	str	r1, [sp, #40]	; 0x28
    8988:	4619      	mov	r1, r3
    898a:	4663      	mov	r3, ip
    898c:	f005 fa72 	bl	de74 <_ZN4core3fmt9Arguments6new_v117h7622a2ed78995b61E>
    8990:	e7ff      	b.n	8992 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x1c0>
    8992:	a82b      	add	r0, sp, #172	; 0xac
    8994:	9028      	str	r0, [sp, #160]	; 0xa0
    8996:	a82c      	add	r0, sp, #176	; 0xb0
    8998:	9029      	str	r0, [sp, #164]	; 0xa4
    899a:	a82d      	add	r0, sp, #180	; 0xb4
    899c:	902a      	str	r0, [sp, #168]	; 0xa8
    899e:	9828      	ldr	r0, [sp, #160]	; 0xa0
    89a0:	903b      	str	r0, [sp, #236]	; 0xec
    89a2:	9929      	ldr	r1, [sp, #164]	; 0xa4
    89a4:	913c      	str	r1, [sp, #240]	; 0xf0
    89a6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    89a8:	923d      	str	r2, [sp, #244]	; 0xf4
    89aa:	f24e 1311 	movw	r3, #57617	; 0xe111
    89ae:	f2c0 0300 	movt	r3, #0
    89b2:	9109      	str	r1, [sp, #36]	; 0x24
    89b4:	4619      	mov	r1, r3
    89b6:	9208      	str	r2, [sp, #32]
    89b8:	f007 fad1 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    89bc:	9007      	str	r0, [sp, #28]
    89be:	9106      	str	r1, [sp, #24]
    89c0:	e7ff      	b.n	89c2 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x1f0>
    89c2:	f24e 1111 	movw	r1, #57617	; 0xe111
    89c6:	f2c0 0100 	movt	r1, #0
    89ca:	9809      	ldr	r0, [sp, #36]	; 0x24
    89cc:	f007 fac7 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    89d0:	9005      	str	r0, [sp, #20]
    89d2:	9104      	str	r1, [sp, #16]
    89d4:	e7ff      	b.n	89d6 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x204>
    89d6:	f646 71c3 	movw	r1, #28611	; 0x6fc3
    89da:	f2c0 0101 	movt	r1, #1
    89de:	9808      	ldr	r0, [sp, #32]
    89e0:	f007 fafc 	bl	ffdc <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    89e4:	9003      	str	r0, [sp, #12]
    89e6:	9102      	str	r1, [sp, #8]
    89e8:	e7ff      	b.n	89ea <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x218>
    89ea:	9807      	ldr	r0, [sp, #28]
    89ec:	9022      	str	r0, [sp, #136]	; 0x88
    89ee:	9906      	ldr	r1, [sp, #24]
    89f0:	9123      	str	r1, [sp, #140]	; 0x8c
    89f2:	9a05      	ldr	r2, [sp, #20]
    89f4:	9224      	str	r2, [sp, #144]	; 0x90
    89f6:	9b04      	ldr	r3, [sp, #16]
    89f8:	9325      	str	r3, [sp, #148]	; 0x94
    89fa:	f8dd c00c 	ldr.w	ip, [sp, #12]
    89fe:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
    8a02:	f8dd e008 	ldr.w	lr, [sp, #8]
    8a06:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
    8a0a:	466c      	mov	r4, sp
    8a0c:	2503      	movs	r5, #3
    8a0e:	6025      	str	r5, [r4, #0]
    8a10:	a81c      	add	r0, sp, #112	; 0x70
    8a12:	ab22      	add	r3, sp, #136	; 0x88
    8a14:	990a      	ldr	r1, [sp, #40]	; 0x28
    8a16:	462a      	mov	r2, r5
    8a18:	f005 fa2c 	bl	de74 <_ZN4core3fmt9Arguments6new_v117h7622a2ed78995b61E>
    8a1c:	e7ff      	b.n	8a1e <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x24c>
    8a1e:	f24d 30a4 	movw	r0, #54180	; 0xd3a4
    8a22:	f2c0 0001 	movt	r0, #1
    8a26:	f00d ffde 	bl	169e6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8a2a:	9001      	str	r0, [sp, #4]
    8a2c:	e7ff      	b.n	8a2e <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x25c>
    8a2e:	a81c      	add	r0, sp, #112	; 0x70
    8a30:	9901      	ldr	r1, [sp, #4]
    8a32:	f00e f815 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8a36:	defe      	udf	#254	; 0xfe
    8a38:	2000      	movs	r0, #0
    Ok(())
    8a3a:	9013      	str	r0, [sp, #76]	; 0x4c
    8a3c:	2001      	movs	r0, #1
    8a3e:	9013      	str	r0, [sp, #76]	; 0x4c
}
    8a40:	e6f6      	b.n	8830 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x5e>

00008a42 <_ZN3app12touch_sensor23touch_interrupt_handler17he79adf05b4785acfE>:

/// Interrupt handler for the touch controller, triggered when a touch is detected
extern "C" fn touch_interrupt_handler(arg: *mut core::ffi::c_void) {
    8a42:	b580      	push	{r7, lr}
    8a44:	b086      	sub	sp, #24
    8a46:	9004      	str	r0, [sp, #16]
    //  We forward a touch event to the Default Event Queue for deferred processing.  Don't do any processing here.
    unsafe { TOUCH_EVENT.ev_arg = arg };
    8a48:	f240 11e0 	movw	r1, #480	; 0x1e0
    8a4c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    8a50:	6088      	str	r0, [r1, #8]
    8a52:	a802      	add	r0, sp, #8
    //  Fetch the Default Event Queue. TODO: Use dedicated Event Queue for higher priority processing.
    let queue = os::eventq_dflt_get()
    8a54:	f006 fc73 	bl	f33e <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    8a58:	e7ff      	b.n	8a5a <_ZN3app12touch_sensor23touch_interrupt_handler17he79adf05b4785acfE+0x18>
    8a5a:	f24d 214a 	movw	r1, #53834	; 0xd24a
    8a5e:	f2c0 0101 	movt	r1, #1
    8a62:	f24d 33bc 	movw	r3, #54204	; 0xd3bc
    8a66:	f2c0 0301 	movt	r3, #1
    8a6a:	a802      	add	r0, sp, #8
    8a6c:	2208      	movs	r2, #8
    8a6e:	f009 fff1 	bl	12a54 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E>
    8a72:	4601      	mov	r1, r0
    8a74:	9005      	str	r0, [sp, #20]
    8a76:	9101      	str	r1, [sp, #4]
    8a78:	e7ff      	b.n	8a7a <_ZN3app12touch_sensor23touch_interrupt_handler17he79adf05b4785acfE+0x38>
        .expect("GET fail");
    unsafe { os::os_eventq_put(queue, &mut TOUCH_EVENT) };  //  Trigger the callback function `touch_event_callback()`
    8a7a:	f240 11e0 	movw	r1, #480	; 0x1e0
    8a7e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    8a82:	9801      	ldr	r0, [sp, #4]
    8a84:	f011 fa1f 	bl	19ec6 <os_eventq_put>
    8a88:	e7ff      	b.n	8a8a <_ZN3app12touch_sensor23touch_interrupt_handler17he79adf05b4785acfE+0x48>
    //console::print("touch\n"); ////
}
    8a8a:	b006      	add	sp, #24
    8a8c:	bd80      	pop	{r7, pc}

00008a8e <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E>:

/// Callback for the touch event that is triggered when a touch is detected
extern "C" fn touch_event_callback(_event: *mut os_event) {
    8a8e:	b580      	push	{r7, lr}
    8a90:	b094      	sub	sp, #80	; 0x50
    8a92:	900e      	str	r0, [sp, #56]	; 0x38
    //  console::printhex(unsafe { os::os_time_get() } as u8); console::print(" touch\n");
    unsafe { 
        //  Fetch the touch data from the touch controller
        read_touchdata(&mut TOUCH_DATA)
    8a94:	f240 104c 	movw	r0, #332	; 0x14c
    8a98:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8a9c:	f000 f894 	bl	8bc8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E>
    8aa0:	9006      	str	r0, [sp, #24]
    8aa2:	e7ff      	b.n	8aa4 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x16>
    8aa4:	f24d 31cc 	movw	r1, #54220	; 0xd3cc
    8aa8:	f2c0 0101 	movt	r1, #1
    8aac:	f24d 33dc 	movw	r3, #54236	; 0xd3dc
    8ab0:	f2c0 0301 	movt	r3, #1
    8ab4:	220e      	movs	r2, #14
    8ab6:	9806      	ldr	r0, [sp, #24]
    8ab8:	f006 fb82 	bl	f1c0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8abc:	e7ff      	b.n	8abe <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x30>
            .expect("touchdata fail");
        //  Handle each touch data info
        for i in 0..TOUCH_DATA.count as usize {
    8abe:	f240 104c 	movw	r0, #332	; 0x14c
    8ac2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8ac6:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
    8aca:	2100      	movs	r1, #0
    8acc:	9107      	str	r1, [sp, #28]
    8ace:	9008      	str	r0, [sp, #32]
    8ad0:	9807      	ldr	r0, [sp, #28]
    8ad2:	9908      	ldr	r1, [sp, #32]
    8ad4:	f005 ff0f 	bl	e8f6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    8ad8:	9005      	str	r0, [sp, #20]
    8ada:	9104      	str	r1, [sp, #16]
    8adc:	e7ff      	b.n	8ade <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x50>
    8ade:	9805      	ldr	r0, [sp, #20]
    8ae0:	9009      	str	r0, [sp, #36]	; 0x24
    8ae2:	9904      	ldr	r1, [sp, #16]
    8ae4:	910a      	str	r1, [sp, #40]	; 0x28
    8ae6:	e7ff      	b.n	8ae8 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x5a>
    8ae8:	a809      	add	r0, sp, #36	; 0x24
    8aea:	f005 fe79 	bl	e7e0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    8aee:	910c      	str	r1, [sp, #48]	; 0x30
    8af0:	900b      	str	r0, [sp, #44]	; 0x2c
    8af2:	e7ff      	b.n	8af4 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x66>
    8af4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8af6:	2800      	cmp	r0, #0
    8af8:	d001      	beq.n	8afe <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x70>
    8afa:	e7ff      	b.n	8afc <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x6e>
    8afc:	e002      	b.n	8b04 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x76>
            console::print(", x: "); console::printint(x as i32); 
            console::print(", y: "); console::printint(y as i32); console::print("\n");
        }
        console::flush();   
    } */
}
    8afe:	b014      	add	sp, #80	; 0x50
    8b00:	bd80      	pop	{r7, pc}
        for i in 0..TOUCH_DATA.count as usize {
    8b02:	defe      	udf	#254	; 0xfe
    8b04:	980c      	ldr	r0, [sp, #48]	; 0x30
    8b06:	900f      	str	r0, [sp, #60]	; 0x3c
    8b08:	9010      	str	r0, [sp, #64]	; 0x40
    8b0a:	9011      	str	r0, [sp, #68]	; 0x44
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    8b0c:	2809      	cmp	r0, #9
    8b0e:	9003      	str	r0, [sp, #12]
    8b10:	d851      	bhi.n	8bb6 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x128>
    8b12:	e7ff      	b.n	8b14 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x86>
    8b14:	f240 104c 	movw	r0, #332	; 0x14c
    8b18:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8b1c:	9903      	ldr	r1, [sp, #12]
    8b1e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8b22:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
    8b26:	4603      	mov	r3, r0
    8b28:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
    8b2c:	f8b2 c002 	ldrh.w	ip, [r2, #2]
    8b30:	46e6      	mov	lr, ip
    8b32:	f8ad c04c 	strh.w	ip, [sp, #76]	; 0x4c
    8b36:	7912      	ldrb	r2, [r2, #4]
    8b38:	4694      	mov	ip, r2
    8b3a:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
            if x == 0 && y == 0 { continue; }
    8b3e:	2800      	cmp	r0, #0
    8b40:	9302      	str	r3, [sp, #8]
    8b42:	f8cd e004 	str.w	lr, [sp, #4]
    8b46:	f8cd c000 	str.w	ip, [sp]
    8b4a:	d008      	beq.n	8b5e <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xd0>
    8b4c:	e003      	b.n	8b56 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xc8>
    8b4e:	2001      	movs	r0, #1
    8b50:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    8b54:	e008      	b.n	8b68 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xda>
    8b56:	2000      	movs	r0, #0
    8b58:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    8b5c:	e004      	b.n	8b68 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xda>
    8b5e:	9801      	ldr	r0, [sp, #4]
    8b60:	0401      	lsls	r1, r0, #16
    8b62:	2900      	cmp	r1, #0
    8b64:	d0f3      	beq.n	8b4e <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xc0>
    8b66:	e7f6      	b.n	8b56 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xc8>
    8b68:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    8b6c:	07c0      	lsls	r0, r0, #31
    8b6e:	2800      	cmp	r0, #0
    8b70:	d105      	bne.n	8b7e <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xf0>
    8b72:	e7ff      	b.n	8b74 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xe6>
            if action != 0 && action != 2 { continue; }
    8b74:	9800      	ldr	r0, [sp, #0]
    8b76:	0601      	lsls	r1, r0, #24
    8b78:	2900      	cmp	r1, #0
    8b7a:	d10a      	bne.n	8b92 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x104>
    8b7c:	e005      	b.n	8b8a <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xfc>
            if x == 0 && y == 0 { continue; }
    8b7e:	e7ff      	b.n	8b80 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xf2>
    8b80:	e7b2      	b.n	8ae8 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x5a>
    8b82:	2001      	movs	r0, #1
            if action != 0 && action != 2 { continue; }
    8b84:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    8b88:	e008      	b.n	8b9c <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x10e>
    8b8a:	2000      	movs	r0, #0
    8b8c:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    8b90:	e004      	b.n	8b9c <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x10e>
    8b92:	9800      	ldr	r0, [sp, #0]
    8b94:	b2c1      	uxtb	r1, r0
    8b96:	2902      	cmp	r1, #2
    8b98:	d1f3      	bne.n	8b82 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xf4>
    8b9a:	e7f6      	b.n	8b8a <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xfc>
    8b9c:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
    8ba0:	07c0      	lsls	r0, r0, #31
    8ba2:	2800      	cmp	r0, #0
    8ba4:	d105      	bne.n	8bb2 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x124>
    8ba6:	e7ff      	b.n	8ba8 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x11a>
            super::handle_touch(x, y);
    8ba8:	9802      	ldr	r0, [sp, #8]
    8baa:	9901      	ldr	r1, [sp, #4]
    8bac:	f000 ff35 	bl	9a1a <_ZN3app5chip812handle_touch17hb422a4f740ac0e1bE>
    8bb0:	e000      	b.n	8bb4 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x126>
            if action != 0 && action != 2 { continue; }
    8bb2:	e7e5      	b.n	8b80 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xf2>
        for i in 0..TOUCH_DATA.count as usize {
    8bb4:	e798      	b.n	8ae8 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x5a>
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    8bb6:	f24d 30ec 	movw	r0, #54252	; 0xd3ec
    8bba:	f2c0 0001 	movt	r0, #1
    8bbe:	220a      	movs	r2, #10
    8bc0:	9903      	ldr	r1, [sp, #12]
    8bc2:	f00d ff2d 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    8bc6:	defe      	udf	#254	; 0xfe

00008bc8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E>:
/// Touch data will be populated here
static mut TOUCH_DATA: TouchEventInfo = fill_zero!(TouchEventInfo);

/// Read touch controller data. This only works when the screen has been tapped and the touch controller wakes up.
/// Ported from https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L407-L466
fn read_touchdata(data: &mut TouchEventInfo) -> MynewtResult<()> {
    8bc8:	b580      	push	{r7, lr}
    8bca:	b0de      	sub	sp, #376	; 0x178
    8bcc:	9057      	str	r0, [sp, #348]	; 0x15c
    read_register_range(           //  Read the range of I2C registers...
    8bce:	4669      	mov	r1, sp
    8bd0:	223f      	movs	r2, #63	; 0x3f
    8bd2:	600a      	str	r2, [r1, #0]
    8bd4:	f240 139e 	movw	r3, #414	; 0x19e
    8bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bdc:	2115      	movs	r1, #21
    8bde:	f04f 0c00 	mov.w	ip, #0
    8be2:	9026      	str	r0, [sp, #152]	; 0x98
    8be4:	4608      	mov	r0, r1
    8be6:	4661      	mov	r1, ip
    8be8:	f000 fb97 	bl	931a <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E>
    8bec:	9025      	str	r0, [sp, #148]	; 0x94
    8bee:	e7ff      	b.n	8bf0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x28>
    8bf0:	f24d 31fc 	movw	r1, #54268	; 0xd3fc
    8bf4:	f2c0 0101 	movt	r1, #1
    8bf8:	f24d 4310 	movw	r3, #54288	; 0xd410
    8bfc:	f2c0 0301 	movt	r3, #1
    8c00:	2213      	movs	r2, #19
    8c02:	9825      	ldr	r0, [sp, #148]	; 0x94
    8c04:	f006 fadc 	bl	f1c0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8c08:	e7ff      	b.n	8c0a <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x42>
    8c0a:	f10d 00ee 	add.w	r0, sp, #238	; 0xee
    8c0e:	2152      	movs	r1, #82	; 0x52
        TOUCH_CONTROLLER_ADDRESS,  //  From the touch controller
        0,                         //  Starting from register 0
        POINT_READ_BUF as u8,      //  Number of registers to read
        unsafe { &mut BUF }        //  Save the read data into `buf`
    ).expect("read touchdata fail");
    *data = fill_zero!(TouchEventInfo);
    8c10:	9024      	str	r0, [sp, #144]	; 0x90
    8c12:	9123      	str	r1, [sp, #140]	; 0x8c
    8c14:	f014 fabe 	bl	1d194 <__aeabi_memclr>
    8c18:	a827      	add	r0, sp, #156	; 0x9c
    8c1a:	9924      	ldr	r1, [sp, #144]	; 0x90
    8c1c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    8c1e:	f014 fabd 	bl	1d19c <__aeabi_memcpy>
    8c22:	e7ff      	b.n	8c24 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5c>
    8c24:	a927      	add	r1, sp, #156	; 0x9c
    8c26:	2252      	movs	r2, #82	; 0x52
    8c28:	9826      	ldr	r0, [sp, #152]	; 0x98
    8c2a:	f014 fab7 	bl	1d19c <__aeabi_memcpy>
    data.point_num = unsafe { BUF[FT_TOUCH_POINT_NUM] & 0x0F };
    8c2e:	f240 119e 	movw	r1, #414	; 0x19e
    8c32:	f2c2 0100 	movt	r1, #8192	; 0x2000
    8c36:	7889      	ldrb	r1, [r1, #2]
    8c38:	f001 010f 	and.w	r1, r1, #15
    8c3c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8c3e:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
    8c42:	2100      	movs	r1, #0
    data.count     = 0;
    8c44:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50

    //  Populate the first 5 touch points
    for i in 0..CFG_MAX_TOUCH_POINTS {
    8c48:	9150      	str	r1, [sp, #320]	; 0x140
    8c4a:	2105      	movs	r1, #5
    8c4c:	9151      	str	r1, [sp, #324]	; 0x144
    8c4e:	9950      	ldr	r1, [sp, #320]	; 0x140
    8c50:	9b51      	ldr	r3, [sp, #324]	; 0x144
    8c52:	9022      	str	r0, [sp, #136]	; 0x88
    8c54:	4608      	mov	r0, r1
    8c56:	4619      	mov	r1, r3
    8c58:	f005 fe4d 	bl	e8f6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    8c5c:	9021      	str	r0, [sp, #132]	; 0x84
    8c5e:	9120      	str	r1, [sp, #128]	; 0x80
    8c60:	e7ff      	b.n	8c62 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x9a>
    8c62:	9821      	ldr	r0, [sp, #132]	; 0x84
    8c64:	9052      	str	r0, [sp, #328]	; 0x148
    8c66:	9920      	ldr	r1, [sp, #128]	; 0x80
    8c68:	9153      	str	r1, [sp, #332]	; 0x14c
    8c6a:	e7ff      	b.n	8c6c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xa4>
    8c6c:	a852      	add	r0, sp, #328	; 0x148
    8c6e:	f005 fdb7 	bl	e7e0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    8c72:	9155      	str	r1, [sp, #340]	; 0x154
    8c74:	9054      	str	r0, [sp, #336]	; 0x150
    8c76:	e7ff      	b.n	8c78 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xb0>
    8c78:	9854      	ldr	r0, [sp, #336]	; 0x150
    8c7a:	2800      	cmp	r0, #0
    8c7c:	d001      	beq.n	8c82 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xba>
    8c7e:	e7ff      	b.n	8c80 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xb8>
    8c80:	e001      	b.n	8c86 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xbe>
    8c82:	e00d      	b.n	8ca0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xd8>
    8c84:	defe      	udf	#254	; 0xfe
    8c86:	9855      	ldr	r0, [sp, #340]	; 0x154
    8c88:	9058      	str	r0, [sp, #352]	; 0x160
    8c8a:	9059      	str	r0, [sp, #356]	; 0x164
    8c8c:	905a      	str	r0, [sp, #360]	; 0x168
    8c8e:	2106      	movs	r1, #6
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    8c90:	fba1 1200 	umull	r1, r2, r1, r0
    8c94:	2a00      	cmp	r2, #0
    8c96:	901f      	str	r0, [sp, #124]	; 0x7c
    8c98:	911e      	str	r1, [sp, #120]	; 0x78
    8c9a:	f040 81c1 	bne.w	9020 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x458>
    8c9e:	e002      	b.n	8ca6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xde>
    8ca0:	2001      	movs	r0, #1
            && (data.point_num == 0) {
            break;
        }
    }
    Ok(())
}
    8ca2:	b05e      	add	sp, #376	; 0x178
    8ca4:	bd80      	pop	{r7, pc}
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    8ca6:	981e      	ldr	r0, [sp, #120]	; 0x78
    8ca8:	1d41      	adds	r1, r0, #5
    8caa:	460a      	mov	r2, r1
    8cac:	4281      	cmp	r1, r0
    8cae:	921d      	str	r2, [sp, #116]	; 0x74
    8cb0:	f0c0 81c2 	bcc.w	9038 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x470>
    8cb4:	e7ff      	b.n	8cb6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xee>
    8cb6:	981d      	ldr	r0, [sp, #116]	; 0x74
    8cb8:	283e      	cmp	r0, #62	; 0x3e
    8cba:	f200 81c9 	bhi.w	9050 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x488>
    8cbe:	e7ff      	b.n	8cc0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xf8>
    8cc0:	f240 109e 	movw	r0, #414	; 0x19e
    8cc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8cc8:	991d      	ldr	r1, [sp, #116]	; 0x74
    8cca:	5c40      	ldrb	r0, [r0, r1]
    8ccc:	0900      	lsrs	r0, r0, #4
    8cce:	901c      	str	r0, [sp, #112]	; 0x70
    8cd0:	e7ff      	b.n	8cd2 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x10a>
    8cd2:	981c      	ldr	r0, [sp, #112]	; 0x70
    8cd4:	f88d 016f 	strb.w	r0, [sp, #367]	; 0x16f
    8cd8:	b2c1      	uxtb	r1, r0
        if pointid >= HYN_MAX_ID { break; }
    8cda:	290e      	cmp	r1, #14
    8cdc:	d80b      	bhi.n	8cf6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x12e>
    8cde:	e7ff      	b.n	8ce0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x118>
        data.count += 1;
    8ce0:	9826      	ldr	r0, [sp, #152]	; 0x98
    8ce2:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
    8ce6:	3101      	adds	r1, #1
    8ce8:	b2ca      	uxtb	r2, r1
    8cea:	460b      	mov	r3, r1
    8cec:	428a      	cmp	r2, r1
    8cee:	931b      	str	r3, [sp, #108]	; 0x6c
    8cf0:	f040 81b7 	bne.w	9062 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x49a>
    8cf4:	e001      	b.n	8cfa <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x132>
        if pointid >= HYN_MAX_ID { break; }
    8cf6:	e7ff      	b.n	8cf8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x130>
    8cf8:	e7d2      	b.n	8ca0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xd8>
        data.count += 1;
    8cfa:	981b      	ldr	r0, [sp, #108]	; 0x6c
    8cfc:	9926      	ldr	r1, [sp, #152]	; 0x98
    8cfe:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    8d02:	2206      	movs	r2, #6
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    8d04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8d06:	fba2 2c03 	umull	r2, ip, r2, r3
    8d0a:	f1bc 0f00 	cmp.w	ip, #0
    8d0e:	921a      	str	r2, [sp, #104]	; 0x68
    8d10:	f040 81b3 	bne.w	907a <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x4b2>
    8d14:	e7ff      	b.n	8d16 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x14e>
    8d16:	981a      	ldr	r0, [sp, #104]	; 0x68
    8d18:	1cc1      	adds	r1, r0, #3
    8d1a:	460a      	mov	r2, r1
    8d1c:	4281      	cmp	r1, r0
    8d1e:	9219      	str	r2, [sp, #100]	; 0x64
    8d20:	f0c0 81b7 	bcc.w	9092 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x4ca>
    8d24:	e7ff      	b.n	8d26 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x15e>
    8d26:	9819      	ldr	r0, [sp, #100]	; 0x64
    8d28:	283e      	cmp	r0, #62	; 0x3e
    8d2a:	f200 81be 	bhi.w	90aa <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x4e2>
    8d2e:	e7ff      	b.n	8d30 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x168>
    8d30:	f240 109e 	movw	r0, #414	; 0x19e
    8d34:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8d38:	9919      	ldr	r1, [sp, #100]	; 0x64
    8d3a:	5c40      	ldrb	r0, [r0, r1]
    8d3c:	f000 000f 	and.w	r0, r0, #15
    8d40:	4602      	mov	r2, r0
    8d42:	f8ad 0170 	strh.w	r0, [sp, #368]	; 0x170
    8d46:	2006      	movs	r0, #6
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    8d48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8d4a:	fba0 0c03 	umull	r0, ip, r0, r3
    8d4e:	f1bc 0f00 	cmp.w	ip, #0
    8d52:	9218      	str	r2, [sp, #96]	; 0x60
    8d54:	9017      	str	r0, [sp, #92]	; 0x5c
    8d56:	f040 81b1 	bne.w	90bc <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x4f4>
    8d5a:	e7ff      	b.n	8d5c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x194>
    8d5c:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8d5e:	1d01      	adds	r1, r0, #4
    8d60:	460a      	mov	r2, r1
    8d62:	4281      	cmp	r1, r0
    8d64:	9216      	str	r2, [sp, #88]	; 0x58
    8d66:	f0c0 81b5 	bcc.w	90d4 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x50c>
    8d6a:	e7ff      	b.n	8d6c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x1a4>
    8d6c:	9816      	ldr	r0, [sp, #88]	; 0x58
    8d6e:	283e      	cmp	r0, #62	; 0x3e
    8d70:	f200 81bc 	bhi.w	90ec <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x524>
    8d74:	e7ff      	b.n	8d76 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x1ae>
    8d76:	f240 109e 	movw	r0, #414	; 0x19e
    8d7a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8d7e:	9916      	ldr	r1, [sp, #88]	; 0x58
    8d80:	5c40      	ldrb	r0, [r0, r1]
    8d82:	4602      	mov	r2, r0
    8d84:	f8ad 0172 	strh.w	r0, [sp, #370]	; 0x172
        data.touches[i].x  = (x_high << 8) | x_low;
    8d88:	9818      	ldr	r0, [sp, #96]	; 0x60
    8d8a:	0203      	lsls	r3, r0, #8
    8d8c:	9215      	str	r2, [sp, #84]	; 0x54
    8d8e:	9314      	str	r3, [sp, #80]	; 0x50
    8d90:	e7ff      	b.n	8d92 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x1ca>
    8d92:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8d94:	2809      	cmp	r0, #9
    8d96:	f200 81b2 	bhi.w	90fe <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x536>
    8d9a:	e7ff      	b.n	8d9c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x1d4>
    8d9c:	9814      	ldr	r0, [sp, #80]	; 0x50
    8d9e:	9915      	ldr	r1, [sp, #84]	; 0x54
    8da0:	ea40 0201 	orr.w	r2, r0, r1
    8da4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    8da6:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
    8daa:	f823 203c 	strh.w	r2, [r3, ip, lsl #3]
    8dae:	2206      	movs	r2, #6
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    8db0:	fba2 2e0c 	umull	r2, lr, r2, ip
    8db4:	f1be 0f00 	cmp.w	lr, #0
    8db8:	9213      	str	r2, [sp, #76]	; 0x4c
    8dba:	f040 81a9 	bne.w	9110 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x548>
    8dbe:	e7ff      	b.n	8dc0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x1f8>
    8dc0:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8dc2:	1d41      	adds	r1, r0, #5
    8dc4:	460a      	mov	r2, r1
    8dc6:	4281      	cmp	r1, r0
    8dc8:	9212      	str	r2, [sp, #72]	; 0x48
    8dca:	f0c0 81ad 	bcc.w	9128 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x560>
    8dce:	e7ff      	b.n	8dd0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x208>
    8dd0:	9812      	ldr	r0, [sp, #72]	; 0x48
    8dd2:	283e      	cmp	r0, #62	; 0x3e
    8dd4:	f200 81b4 	bhi.w	9140 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x578>
    8dd8:	e7ff      	b.n	8dda <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x212>
    8dda:	f240 109e 	movw	r0, #414	; 0x19e
    8dde:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8de2:	9912      	ldr	r1, [sp, #72]	; 0x48
    8de4:	5c40      	ldrb	r0, [r0, r1]
    8de6:	f000 000f 	and.w	r0, r0, #15
    8dea:	4602      	mov	r2, r0
    8dec:	f8ad 0174 	strh.w	r0, [sp, #372]	; 0x174
    8df0:	2006      	movs	r0, #6
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    8df2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8df4:	fba0 0c03 	umull	r0, ip, r0, r3
    8df8:	f1bc 0f00 	cmp.w	ip, #0
    8dfc:	9211      	str	r2, [sp, #68]	; 0x44
    8dfe:	9010      	str	r0, [sp, #64]	; 0x40
    8e00:	f040 81a7 	bne.w	9152 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x58a>
    8e04:	e7ff      	b.n	8e06 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x23e>
    8e06:	9810      	ldr	r0, [sp, #64]	; 0x40
    8e08:	1d81      	adds	r1, r0, #6
    8e0a:	460a      	mov	r2, r1
    8e0c:	4281      	cmp	r1, r0
    8e0e:	920f      	str	r2, [sp, #60]	; 0x3c
    8e10:	f0c0 81ab 	bcc.w	916a <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5a2>
    8e14:	e7ff      	b.n	8e16 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x24e>
    8e16:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8e18:	283e      	cmp	r0, #62	; 0x3e
    8e1a:	f200 81b2 	bhi.w	9182 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5ba>
    8e1e:	e7ff      	b.n	8e20 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x258>
    8e20:	f240 109e 	movw	r0, #414	; 0x19e
    8e24:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8e28:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8e2a:	5c40      	ldrb	r0, [r0, r1]
    8e2c:	4602      	mov	r2, r0
    8e2e:	f8ad 0176 	strh.w	r0, [sp, #374]	; 0x176
        data.touches[i].y  = (y_high << 8) | y_low;
    8e32:	9811      	ldr	r0, [sp, #68]	; 0x44
    8e34:	0203      	lsls	r3, r0, #8
    8e36:	920e      	str	r2, [sp, #56]	; 0x38
    8e38:	930d      	str	r3, [sp, #52]	; 0x34
    8e3a:	e7ff      	b.n	8e3c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x274>
    8e3c:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8e3e:	2809      	cmp	r0, #9
    8e40:	f200 81a8 	bhi.w	9194 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5cc>
    8e44:	e7ff      	b.n	8e46 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x27e>
    8e46:	9826      	ldr	r0, [sp, #152]	; 0x98
    8e48:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8e4a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8e4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8e50:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    8e54:	ea43 0e0c 	orr.w	lr, r3, ip
    8e58:	f8a2 e002 	strh.w	lr, [r2, #2]
    8e5c:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    8e5e:	fba2 2e01 	umull	r2, lr, r2, r1
    8e62:	f1be 0f00 	cmp.w	lr, #0
    8e66:	920c      	str	r2, [sp, #48]	; 0x30
    8e68:	f040 819d 	bne.w	91a6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5de>
    8e6c:	e7ff      	b.n	8e6e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2a6>
    8e6e:	980c      	ldr	r0, [sp, #48]	; 0x30
    8e70:	1cc1      	adds	r1, r0, #3
    8e72:	460a      	mov	r2, r1
    8e74:	4281      	cmp	r1, r0
    8e76:	920b      	str	r2, [sp, #44]	; 0x2c
    8e78:	f0c0 81a1 	bcc.w	91be <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5f6>
    8e7c:	e7ff      	b.n	8e7e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2b6>
    8e7e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8e80:	283e      	cmp	r0, #62	; 0x3e
    8e82:	f200 81a8 	bhi.w	91d6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x60e>
    8e86:	e7ff      	b.n	8e88 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2c0>
    8e88:	f240 109e 	movw	r0, #414	; 0x19e
    8e8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8e90:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8e92:	5c40      	ldrb	r0, [r0, r1]
    8e94:	0980      	lsrs	r0, r0, #6
    8e96:	900a      	str	r0, [sp, #40]	; 0x28
    8e98:	e7ff      	b.n	8e9a <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2d2>
        data.touches[i].action =
    8e9a:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8e9c:	2809      	cmp	r0, #9
    8e9e:	f200 81a3 	bhi.w	91e8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x620>
    8ea2:	e7ff      	b.n	8ea4 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2dc>
    8ea4:	9826      	ldr	r0, [sp, #152]	; 0x98
    8ea6:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8ea8:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8eae:	7113      	strb	r3, [r2, #4]
    8eb0:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    8eb2:	fba2 2c01 	umull	r2, ip, r2, r1
    8eb6:	f1bc 0f00 	cmp.w	ip, #0
    8eba:	9209      	str	r2, [sp, #36]	; 0x24
    8ebc:	f040 819d 	bne.w	91fa <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x632>
    8ec0:	e7ff      	b.n	8ec2 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2fa>
    8ec2:	9809      	ldr	r0, [sp, #36]	; 0x24
    8ec4:	1d41      	adds	r1, r0, #5
    8ec6:	460a      	mov	r2, r1
    8ec8:	4281      	cmp	r1, r0
    8eca:	9208      	str	r2, [sp, #32]
    8ecc:	f0c0 81a1 	bcc.w	9212 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x64a>
    8ed0:	e7ff      	b.n	8ed2 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x30a>
    8ed2:	9808      	ldr	r0, [sp, #32]
    8ed4:	283e      	cmp	r0, #62	; 0x3e
    8ed6:	f200 81a8 	bhi.w	922a <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x662>
    8eda:	e7ff      	b.n	8edc <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x314>
    8edc:	f240 109e 	movw	r0, #414	; 0x19e
    8ee0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8ee4:	9908      	ldr	r1, [sp, #32]
    8ee6:	5c40      	ldrb	r0, [r0, r1]
    8ee8:	0900      	lsrs	r0, r0, #4
    8eea:	9007      	str	r0, [sp, #28]
    8eec:	e7ff      	b.n	8eee <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x326>
        data.touches[i].finger =
    8eee:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8ef0:	2809      	cmp	r0, #9
    8ef2:	f200 81a3 	bhi.w	923c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x674>
    8ef6:	e7ff      	b.n	8ef8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x330>
    8ef8:	9826      	ldr	r0, [sp, #152]	; 0x98
    8efa:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8efc:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8f00:	9b07      	ldr	r3, [sp, #28]
    8f02:	7153      	strb	r3, [r2, #5]
    8f04:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    8f06:	fba2 2c01 	umull	r2, ip, r2, r1
    8f0a:	f1bc 0f00 	cmp.w	ip, #0
    8f0e:	9206      	str	r2, [sp, #24]
    8f10:	f040 819d 	bne.w	924e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x686>
    8f14:	e7ff      	b.n	8f16 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x34e>
    8f16:	9806      	ldr	r0, [sp, #24]
    8f18:	1dc1      	adds	r1, r0, #7
    8f1a:	460a      	mov	r2, r1
    8f1c:	4281      	cmp	r1, r0
    8f1e:	9205      	str	r2, [sp, #20]
    8f20:	f0c0 81a1 	bcc.w	9266 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x69e>
    8f24:	e7ff      	b.n	8f26 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x35e>
    8f26:	9805      	ldr	r0, [sp, #20]
    8f28:	283e      	cmp	r0, #62	; 0x3e
    8f2a:	f200 81a8 	bhi.w	927e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x6b6>
    8f2e:	e7ff      	b.n	8f30 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x368>
    8f30:	f240 109e 	movw	r0, #414	; 0x19e
    8f34:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8f38:	9905      	ldr	r1, [sp, #20]
    8f3a:	5c40      	ldrb	r0, [r0, r1]
        data.touches[i].pressure =
    8f3c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    8f3e:	2a09      	cmp	r2, #9
    8f40:	9004      	str	r0, [sp, #16]
    8f42:	f200 81a5 	bhi.w	9290 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x6c8>
    8f46:	e7ff      	b.n	8f48 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x380>
    8f48:	9826      	ldr	r0, [sp, #152]	; 0x98
    8f4a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8f4c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8f50:	9b04      	ldr	r3, [sp, #16]
    8f52:	7193      	strb	r3, [r2, #6]
    8f54:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    8f56:	fba2 2c01 	umull	r2, ip, r2, r1
    8f5a:	f1bc 0f00 	cmp.w	ip, #0
    8f5e:	9203      	str	r2, [sp, #12]
    8f60:	f040 819f 	bne.w	92a2 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x6da>
    8f64:	e7ff      	b.n	8f66 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x39e>
    8f66:	9803      	ldr	r0, [sp, #12]
    8f68:	f100 0108 	add.w	r1, r0, #8
    8f6c:	460a      	mov	r2, r1
    8f6e:	4281      	cmp	r1, r0
    8f70:	9202      	str	r2, [sp, #8]
    8f72:	f0c0 81a2 	bcc.w	92ba <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x6f2>
    8f76:	e7ff      	b.n	8f78 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3b0>
    8f78:	9802      	ldr	r0, [sp, #8]
    8f7a:	283e      	cmp	r0, #62	; 0x3e
    8f7c:	f200 81a9 	bhi.w	92d2 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x70a>
    8f80:	e7ff      	b.n	8f82 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3ba>
    8f82:	f240 109e 	movw	r0, #414	; 0x19e
    8f86:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8f8a:	9902      	ldr	r1, [sp, #8]
    8f8c:	5c40      	ldrb	r0, [r0, r1]
    8f8e:	0900      	lsrs	r0, r0, #4
    8f90:	9001      	str	r0, [sp, #4]
    8f92:	e7ff      	b.n	8f94 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3cc>
        data.touches[i].area =
    8f94:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8f96:	2809      	cmp	r0, #9
    8f98:	f200 81a4 	bhi.w	92e4 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x71c>
    8f9c:	e7ff      	b.n	8f9e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3d6>
    8f9e:	9826      	ldr	r0, [sp, #152]	; 0x98
    8fa0:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8fa2:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8fa6:	9b01      	ldr	r3, [sp, #4]
    8fa8:	71d3      	strb	r3, [r2, #7]
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    8faa:	290a      	cmp	r1, #10
    8fac:	d326      	bcc.n	8ffc <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x434>
    8fae:	e1a2      	b.n	92f6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x72e>
    8fb0:	2001      	movs	r0, #1
    8fb2:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    8fb6:	e009      	b.n	8fcc <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x404>
    8fb8:	2000      	movs	r0, #0
    8fba:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    8fbe:	e005      	b.n	8fcc <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x404>
            && (data.point_num == 0) {
    8fc0:	9826      	ldr	r0, [sp, #152]	; 0x98
    8fc2:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    8fc6:	2900      	cmp	r1, #0
    8fc8:	d0f2      	beq.n	8fb0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3e8>
    8fca:	e7f5      	b.n	8fb8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3f0>
    8fcc:	f89d 015a 	ldrb.w	r0, [sp, #346]	; 0x15a
    8fd0:	07c0      	lsls	r0, r0, #31
    8fd2:	2800      	cmp	r0, #0
    8fd4:	d123      	bne.n	901e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x456>
    8fd6:	e021      	b.n	901c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x454>
    8fd8:	2001      	movs	r0, #1
    8fda:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    8fde:	e007      	b.n	8ff0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x428>
    8fe0:	2000      	movs	r0, #0
    8fe2:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    8fe6:	e003      	b.n	8ff0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x428>
    8fe8:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8fea:	280a      	cmp	r0, #10
    8fec:	d30e      	bcc.n	900c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x444>
    8fee:	e18b      	b.n	9308 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x740>
    8ff0:	f89d 015b 	ldrb.w	r0, [sp, #347]	; 0x15b
    8ff4:	07c0      	lsls	r0, r0, #31
    8ff6:	2800      	cmp	r0, #0
    8ff8:	d1e2      	bne.n	8fc0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3f8>
    8ffa:	e7dd      	b.n	8fb8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3f0>
    8ffc:	9826      	ldr	r0, [sp, #152]	; 0x98
    8ffe:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9000:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    9004:	7912      	ldrb	r2, [r2, #4]
    9006:	2a00      	cmp	r2, #0
    9008:	d0e6      	beq.n	8fd8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x410>
    900a:	e7ed      	b.n	8fe8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x420>
    900c:	9826      	ldr	r0, [sp, #152]	; 0x98
    900e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9010:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    9014:	7912      	ldrb	r2, [r2, #4]
    9016:	2a02      	cmp	r2, #2
    9018:	d0de      	beq.n	8fd8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x410>
    901a:	e7e1      	b.n	8fe0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x418>
    for i in 0..CFG_MAX_TOUCH_POINTS {
    901c:	e626      	b.n	8c6c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xa4>
            break;
    901e:	e66b      	b.n	8cf8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x130>
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    9020:	f24d 4030 	movw	r0, #54320	; 0xd430
    9024:	f2c0 0001 	movt	r0, #1
    9028:	f24d 4220 	movw	r2, #54304	; 0xd420
    902c:	f2c0 0201 	movt	r2, #1
    9030:	2121      	movs	r1, #33	; 0x21
    9032:	f00d fcdf 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9036:	defe      	udf	#254	; 0xfe
    9038:	f24d 4070 	movw	r0, #54384	; 0xd470
    903c:	f2c0 0001 	movt	r0, #1
    9040:	f24d 4254 	movw	r2, #54356	; 0xd454
    9044:	f2c0 0201 	movt	r2, #1
    9048:	211c      	movs	r1, #28
    904a:	f00d fcd3 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    904e:	defe      	udf	#254	; 0xfe
    9050:	f24d 408c 	movw	r0, #54412	; 0xd48c
    9054:	f2c0 0001 	movt	r0, #1
    9058:	223f      	movs	r2, #63	; 0x3f
    905a:	991d      	ldr	r1, [sp, #116]	; 0x74
    905c:	f00d fce0 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9060:	defe      	udf	#254	; 0xfe
        data.count += 1;
    9062:	f24d 4070 	movw	r0, #54384	; 0xd470
    9066:	f2c0 0001 	movt	r0, #1
    906a:	f24d 429c 	movw	r2, #54428	; 0xd49c
    906e:	f2c0 0201 	movt	r2, #1
    9072:	211c      	movs	r1, #28
    9074:	f00d fcbe 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9078:	defe      	udf	#254	; 0xfe
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    907a:	f24d 4030 	movw	r0, #54320	; 0xd430
    907e:	f2c0 0001 	movt	r0, #1
    9082:	f24d 42ac 	movw	r2, #54444	; 0xd4ac
    9086:	f2c0 0201 	movt	r2, #1
    908a:	2121      	movs	r1, #33	; 0x21
    908c:	f00d fcb2 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9090:	defe      	udf	#254	; 0xfe
    9092:	f24d 4070 	movw	r0, #54384	; 0xd470
    9096:	f2c0 0001 	movt	r0, #1
    909a:	f24d 42bc 	movw	r2, #54460	; 0xd4bc
    909e:	f2c0 0201 	movt	r2, #1
    90a2:	211c      	movs	r1, #28
    90a4:	f00d fca6 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    90a8:	defe      	udf	#254	; 0xfe
    90aa:	f24d 40cc 	movw	r0, #54476	; 0xd4cc
    90ae:	f2c0 0001 	movt	r0, #1
    90b2:	223f      	movs	r2, #63	; 0x3f
    90b4:	9919      	ldr	r1, [sp, #100]	; 0x64
    90b6:	f00d fcb3 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    90ba:	defe      	udf	#254	; 0xfe
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    90bc:	f24d 4030 	movw	r0, #54320	; 0xd430
    90c0:	f2c0 0001 	movt	r0, #1
    90c4:	f24d 42dc 	movw	r2, #54492	; 0xd4dc
    90c8:	f2c0 0201 	movt	r2, #1
    90cc:	2121      	movs	r1, #33	; 0x21
    90ce:	f00d fc91 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    90d2:	defe      	udf	#254	; 0xfe
    90d4:	f24d 4070 	movw	r0, #54384	; 0xd470
    90d8:	f2c0 0001 	movt	r0, #1
    90dc:	f24d 42ec 	movw	r2, #54508	; 0xd4ec
    90e0:	f2c0 0201 	movt	r2, #1
    90e4:	211c      	movs	r1, #28
    90e6:	f00d fc85 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    90ea:	defe      	udf	#254	; 0xfe
    90ec:	f24d 40fc 	movw	r0, #54524	; 0xd4fc
    90f0:	f2c0 0001 	movt	r0, #1
    90f4:	223f      	movs	r2, #63	; 0x3f
    90f6:	9916      	ldr	r1, [sp, #88]	; 0x58
    90f8:	f00d fc92 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    90fc:	defe      	udf	#254	; 0xfe
        data.touches[i].x  = (x_high << 8) | x_low;
    90fe:	f24d 500c 	movw	r0, #54540	; 0xd50c
    9102:	f2c0 0001 	movt	r0, #1
    9106:	220a      	movs	r2, #10
    9108:	991f      	ldr	r1, [sp, #124]	; 0x7c
    910a:	f00d fc89 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    910e:	defe      	udf	#254	; 0xfe
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    9110:	f24d 4030 	movw	r0, #54320	; 0xd430
    9114:	f2c0 0001 	movt	r0, #1
    9118:	f24d 521c 	movw	r2, #54556	; 0xd51c
    911c:	f2c0 0201 	movt	r2, #1
    9120:	2121      	movs	r1, #33	; 0x21
    9122:	f00d fc67 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9126:	defe      	udf	#254	; 0xfe
    9128:	f24d 4070 	movw	r0, #54384	; 0xd470
    912c:	f2c0 0001 	movt	r0, #1
    9130:	f24d 522c 	movw	r2, #54572	; 0xd52c
    9134:	f2c0 0201 	movt	r2, #1
    9138:	211c      	movs	r1, #28
    913a:	f00d fc5b 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    913e:	defe      	udf	#254	; 0xfe
    9140:	f24d 503c 	movw	r0, #54588	; 0xd53c
    9144:	f2c0 0001 	movt	r0, #1
    9148:	223f      	movs	r2, #63	; 0x3f
    914a:	9912      	ldr	r1, [sp, #72]	; 0x48
    914c:	f00d fc68 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9150:	defe      	udf	#254	; 0xfe
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    9152:	f24d 4030 	movw	r0, #54320	; 0xd430
    9156:	f2c0 0001 	movt	r0, #1
    915a:	f24d 524c 	movw	r2, #54604	; 0xd54c
    915e:	f2c0 0201 	movt	r2, #1
    9162:	2121      	movs	r1, #33	; 0x21
    9164:	f00d fc46 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9168:	defe      	udf	#254	; 0xfe
    916a:	f24d 4070 	movw	r0, #54384	; 0xd470
    916e:	f2c0 0001 	movt	r0, #1
    9172:	f24d 525c 	movw	r2, #54620	; 0xd55c
    9176:	f2c0 0201 	movt	r2, #1
    917a:	211c      	movs	r1, #28
    917c:	f00d fc3a 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9180:	defe      	udf	#254	; 0xfe
    9182:	f24d 506c 	movw	r0, #54636	; 0xd56c
    9186:	f2c0 0001 	movt	r0, #1
    918a:	223f      	movs	r2, #63	; 0x3f
    918c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    918e:	f00d fc47 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9192:	defe      	udf	#254	; 0xfe
        data.touches[i].y  = (y_high << 8) | y_low;
    9194:	f24d 507c 	movw	r0, #54652	; 0xd57c
    9198:	f2c0 0001 	movt	r0, #1
    919c:	220a      	movs	r2, #10
    919e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    91a0:	f00d fc3e 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    91a4:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    91a6:	f24d 4030 	movw	r0, #54320	; 0xd430
    91aa:	f2c0 0001 	movt	r0, #1
    91ae:	f24d 528c 	movw	r2, #54668	; 0xd58c
    91b2:	f2c0 0201 	movt	r2, #1
    91b6:	2121      	movs	r1, #33	; 0x21
    91b8:	f00d fc1c 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    91bc:	defe      	udf	#254	; 0xfe
    91be:	f24d 4070 	movw	r0, #54384	; 0xd470
    91c2:	f2c0 0001 	movt	r0, #1
    91c6:	f24d 529c 	movw	r2, #54684	; 0xd59c
    91ca:	f2c0 0201 	movt	r2, #1
    91ce:	211c      	movs	r1, #28
    91d0:	f00d fc10 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    91d4:	defe      	udf	#254	; 0xfe
    91d6:	f24d 50ac 	movw	r0, #54700	; 0xd5ac
    91da:	f2c0 0001 	movt	r0, #1
    91de:	223f      	movs	r2, #63	; 0x3f
    91e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    91e2:	f00d fc1d 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    91e6:	defe      	udf	#254	; 0xfe
        data.touches[i].action =
    91e8:	f24d 50bc 	movw	r0, #54716	; 0xd5bc
    91ec:	f2c0 0001 	movt	r0, #1
    91f0:	220a      	movs	r2, #10
    91f2:	991f      	ldr	r1, [sp, #124]	; 0x7c
    91f4:	f00d fc14 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    91f8:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    91fa:	f24d 4030 	movw	r0, #54320	; 0xd430
    91fe:	f2c0 0001 	movt	r0, #1
    9202:	f24d 52cc 	movw	r2, #54732	; 0xd5cc
    9206:	f2c0 0201 	movt	r2, #1
    920a:	2121      	movs	r1, #33	; 0x21
    920c:	f00d fbf2 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9210:	defe      	udf	#254	; 0xfe
    9212:	f24d 4070 	movw	r0, #54384	; 0xd470
    9216:	f2c0 0001 	movt	r0, #1
    921a:	f24d 52dc 	movw	r2, #54748	; 0xd5dc
    921e:	f2c0 0201 	movt	r2, #1
    9222:	211c      	movs	r1, #28
    9224:	f00d fbe6 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9228:	defe      	udf	#254	; 0xfe
    922a:	f24d 50ec 	movw	r0, #54764	; 0xd5ec
    922e:	f2c0 0001 	movt	r0, #1
    9232:	223f      	movs	r2, #63	; 0x3f
    9234:	9908      	ldr	r1, [sp, #32]
    9236:	f00d fbf3 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    923a:	defe      	udf	#254	; 0xfe
        data.touches[i].finger =
    923c:	f24d 50fc 	movw	r0, #54780	; 0xd5fc
    9240:	f2c0 0001 	movt	r0, #1
    9244:	220a      	movs	r2, #10
    9246:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9248:	f00d fbea 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    924c:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    924e:	f24d 4030 	movw	r0, #54320	; 0xd430
    9252:	f2c0 0001 	movt	r0, #1
    9256:	f24d 620c 	movw	r2, #54796	; 0xd60c
    925a:	f2c0 0201 	movt	r2, #1
    925e:	2121      	movs	r1, #33	; 0x21
    9260:	f00d fbc8 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9264:	defe      	udf	#254	; 0xfe
    9266:	f24d 4070 	movw	r0, #54384	; 0xd470
    926a:	f2c0 0001 	movt	r0, #1
    926e:	f24d 621c 	movw	r2, #54812	; 0xd61c
    9272:	f2c0 0201 	movt	r2, #1
    9276:	211c      	movs	r1, #28
    9278:	f00d fbbc 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    927c:	defe      	udf	#254	; 0xfe
    927e:	f24d 602c 	movw	r0, #54828	; 0xd62c
    9282:	f2c0 0001 	movt	r0, #1
    9286:	223f      	movs	r2, #63	; 0x3f
    9288:	9905      	ldr	r1, [sp, #20]
    928a:	f00d fbc9 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    928e:	defe      	udf	#254	; 0xfe
        data.touches[i].pressure =
    9290:	f24d 603c 	movw	r0, #54844	; 0xd63c
    9294:	f2c0 0001 	movt	r0, #1
    9298:	220a      	movs	r2, #10
    929a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    929c:	f00d fbc0 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    92a0:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    92a2:	f24d 4030 	movw	r0, #54320	; 0xd430
    92a6:	f2c0 0001 	movt	r0, #1
    92aa:	f24d 624c 	movw	r2, #54860	; 0xd64c
    92ae:	f2c0 0201 	movt	r2, #1
    92b2:	2121      	movs	r1, #33	; 0x21
    92b4:	f00d fb9e 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    92b8:	defe      	udf	#254	; 0xfe
    92ba:	f24d 4070 	movw	r0, #54384	; 0xd470
    92be:	f2c0 0001 	movt	r0, #1
    92c2:	f24d 625c 	movw	r2, #54876	; 0xd65c
    92c6:	f2c0 0201 	movt	r2, #1
    92ca:	211c      	movs	r1, #28
    92cc:	f00d fb92 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    92d0:	defe      	udf	#254	; 0xfe
    92d2:	f24d 606c 	movw	r0, #54892	; 0xd66c
    92d6:	f2c0 0001 	movt	r0, #1
    92da:	223f      	movs	r2, #63	; 0x3f
    92dc:	9902      	ldr	r1, [sp, #8]
    92de:	f00d fb9f 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    92e2:	defe      	udf	#254	; 0xfe
        data.touches[i].area =
    92e4:	f24d 607c 	movw	r0, #54908	; 0xd67c
    92e8:	f2c0 0001 	movt	r0, #1
    92ec:	220a      	movs	r2, #10
    92ee:	991f      	ldr	r1, [sp, #124]	; 0x7c
    92f0:	f00d fb96 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    92f4:	defe      	udf	#254	; 0xfe
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    92f6:	f24d 608c 	movw	r0, #54924	; 0xd68c
    92fa:	f2c0 0001 	movt	r0, #1
    92fe:	220a      	movs	r2, #10
    9300:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9302:	f00d fb8d 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9306:	defe      	udf	#254	; 0xfe
    9308:	f24d 609c 	movw	r0, #54940	; 0xd69c
    930c:	f2c0 0001 	movt	r0, #1
    9310:	220a      	movs	r2, #10
    9312:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9314:	f00d fb84 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9318:	defe      	udf	#254	; 0xfe

0000931a <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E>:

/// Event that will be forwarded to the Event Queue when a touch interrupt is triggered
static mut TOUCH_EVENT: os_event = fill_zero!(os_event);  //  Init all fields to 0 or NULL

/// Read a range of I2C registers from the I2C address `addr` (7-bit address), starting at `start_register` for count `num_registers`. Save into `buffer`.
fn read_register_range(addr: u8, start_register: u8, num_registers: u8, buffer: &mut[u8]) -> MynewtResult<()> {
    931a:	b5b0      	push	{r4, r5, r7, lr}
    931c:	b094      	sub	sp, #80	; 0x50
    931e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
    9322:	4696      	mov	lr, r2
    9324:	460c      	mov	r4, r1
    9326:	4605      	mov	r5, r0
    9328:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    932c:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
    9330:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
    9334:	9310      	str	r3, [sp, #64]	; 0x40
    9336:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    933a:	4618      	mov	r0, r3
    933c:	4661      	mov	r1, ip
    933e:	930d      	str	r3, [sp, #52]	; 0x34
    9340:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    9344:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    9348:	940a      	str	r4, [sp, #40]	; 0x28
    934a:	9509      	str	r5, [sp, #36]	; 0x24
    934c:	f005 faac 	bl	e8a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    9350:	9008      	str	r0, [sp, #32]
    9352:	e7ff      	b.n	9354 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x3a>
    9354:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9356:	b2c1      	uxtb	r1, r0
    9358:	9a08      	ldr	r2, [sp, #32]
    935a:	428a      	cmp	r2, r1
    935c:	d30d      	bcc.n	937a <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x60>
    935e:	e7ff      	b.n	9360 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x46>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    9360:	980a      	ldr	r0, [sp, #40]	; 0x28
    9362:	b2c1      	uxtb	r1, r0
    9364:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9366:	fa51 f182 	uxtab	r1, r1, r2
    936a:	b2cb      	uxtb	r3, r1
    936c:	468c      	mov	ip, r1
    936e:	428b      	cmp	r3, r1
    9370:	f8cd c01c 	str.w	ip, [sp, #28]
    9374:	f040 8092 	bne.w	949c <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x182>
    9378:	e00b      	b.n	9392 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x78>
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    937a:	f24d 60ac 	movw	r0, #54956	; 0xd6ac
    937e:	f2c0 0001 	movt	r0, #1
    9382:	f24d 62b4 	movw	r2, #54964	; 0xd6b4
    9386:	f2c0 0201 	movt	r2, #1
    938a:	2107      	movs	r1, #7
    938c:	f00d fb32 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9390:	defe      	udf	#254	; 0xfe
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    9392:	9807      	ldr	r0, [sp, #28]
    9394:	b241      	sxtb	r1, r0
    9396:	2900      	cmp	r1, #0
    9398:	d411      	bmi.n	93be <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0xa4>
    939a:	e7ff      	b.n	939c <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x82>
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Write Mode (1 bit, value 0)...
    //    Followed by starting Register Number (8 bits)
    unsafe { 
        I2C_BUFFER[0] = start_register;  //  I2C Packet buffer contains starting Register Number (1 byte)
    939c:	f240 10f8 	movw	r0, #504	; 0x1f8
    93a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    93a4:	990a      	ldr	r1, [sp, #40]	; 0x28
    93a6:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;         //  I2C Packet address (7 bits)
    93a8:	f240 12f0 	movw	r2, #496	; 0x1f0
    93ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    93b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    93b2:	7013      	strb	r3, [r2, #0]
    93b4:	2101      	movs	r1, #1
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    93b6:	f005 fa77 	bl	e8a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    93ba:	9006      	str	r0, [sp, #24]
    93bc:	e00b      	b.n	93d6 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0xbc>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    93be:	f24d 30b4 	movw	r0, #54196	; 0xd3b4
    93c2:	f2c0 0001 	movt	r0, #1
    93c6:	f24d 62d4 	movw	r2, #54996	; 0xd6d4
    93ca:	f2c0 0201 	movt	r2, #1
    93ce:	2108      	movs	r1, #8
    93d0:	f00d fb10 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    93d4:	defe      	udf	#254	; 0xfe
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    93d6:	f240 10f0 	movw	r0, #496	; 0x1f0
    93da:	f2c2 0000 	movt	r0, #8192	; 0x2000
    93de:	9906      	ldr	r1, [sp, #24]
    93e0:	8041      	strh	r1, [r0, #2]
        I2C_DATA.buffer = I2C_BUFFER.as_mut_ptr();  //  I2C Packet data points to packet buffer
    93e2:	f240 10f8 	movw	r0, #504	; 0x1f8
    93e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    93ea:	2101      	movs	r1, #1
    93ec:	f005 fa45 	bl	e87a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    93f0:	9005      	str	r0, [sp, #20]
    93f2:	e7ff      	b.n	93f4 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0xda>
    93f4:	f240 10f0 	movw	r0, #496	; 0x1f0
    93f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    93fc:	9905      	ldr	r1, [sp, #20]
    93fe:	6041      	str	r1, [r0, #4]
    9400:	2201      	movs	r2, #1
    9402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9406:	f04f 0c00 	mov.w	ip, #0
    };
    let _rc1 = unsafe { hal::hal_i2c_master_write(1, &mut I2C_DATA, 1000, 0) };  //  No stop yet, must continue even if we hit an error
    940a:	9004      	str	r0, [sp, #16]
    940c:	4610      	mov	r0, r2
    940e:	9904      	ldr	r1, [sp, #16]
    9410:	461a      	mov	r2, r3
    9412:	4663      	mov	r3, ip
    9414:	f00f fddc 	bl	18fd0 <hal_i2c_master_write>
    9418:	9012      	str	r0, [sp, #72]	; 0x48
    941a:	e7ff      	b.n	941c <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x102>
    //  Step 3: Prepare to receive the stream of I2C Device Register values...
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Read Mode (1 bit, value 1)
    unsafe { 
        I2C_BUFFER[0] = 0x00;     //  I2C Packet buffer should be empty (provided by caller)
    941c:	f240 10f8 	movw	r0, #504	; 0x1f8
    9420:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9424:	2100      	movs	r1, #0
    9426:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;  //  I2C Packet address (7 bits)
    9428:	f240 10f0 	movw	r0, #496	; 0x1f0
    942c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9430:	9909      	ldr	r1, [sp, #36]	; 0x24
    9432:	7001      	strb	r1, [r0, #0]
        I2C_DATA.len = num_registers as u16;    //  I2C Packet data size is number of Registers to read
    9434:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9436:	b2d3      	uxtb	r3, r2
    9438:	8043      	strh	r3, [r0, #2]
        I2C_DATA.buffer = buffer.as_mut_ptr();  //  I2C Packet data points to packet buffer
    943a:	980d      	ldr	r0, [sp, #52]	; 0x34
    943c:	990c      	ldr	r1, [sp, #48]	; 0x30
    943e:	f005 fa1c 	bl	e87a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    9442:	9003      	str	r0, [sp, #12]
    9444:	e7ff      	b.n	9446 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x12c>
    9446:	f240 10f0 	movw	r0, #496	; 0x1f0
    944a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    944e:	9903      	ldr	r1, [sp, #12]
    9450:	6041      	str	r1, [r0, #4]
    9452:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9456:	2301      	movs	r3, #1
    };
    //  Step 4: Receive the requested number of Register values from I2C Device (1 byte per register)
    //  Step 5: Send the Stop Condition (Low to High SDA Transition)
    let rc2 = unsafe { hal::hal_i2c_master_read(1, &mut I2C_DATA, 1000, 1) };
    9458:	9002      	str	r0, [sp, #8]
    945a:	4618      	mov	r0, r3
    945c:	9902      	ldr	r1, [sp, #8]
    945e:	f00f fe4b 	bl	190f8 <hal_i2c_master_read>
    9462:	4601      	mov	r1, r0
    9464:	9013      	str	r0, [sp, #76]	; 0x4c
    9466:	9101      	str	r1, [sp, #4]
    9468:	e7ff      	b.n	946a <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x150>
    if rc2 == hal::HAL_I2C_ERR_ADDR_NACK as i32 {
    946a:	9801      	ldr	r0, [sp, #4]
    946c:	2804      	cmp	r0, #4
    946e:	d005      	beq.n	947c <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x162>
    9470:	e7ff      	b.n	9472 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x158>
    9472:	2000      	movs	r0, #0
        ////assert!(false, "i2c fail");  //  I2C read failed
        console::print("i2c fail\n"); ////
        return Ok(());               //  TODO: Return an error
    }
    Ok(())
    9474:	900e      	str	r0, [sp, #56]	; 0x38
    9476:	2001      	movs	r0, #1
    9478:	900e      	str	r0, [sp, #56]	; 0x38
}
    947a:	e00c      	b.n	9496 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x17c>
        console::print("i2c fail\n"); ////
    947c:	f24d 60e4 	movw	r0, #55012	; 0xd6e4
    9480:	f2c0 0001 	movt	r0, #1
    9484:	2109      	movs	r1, #9
    9486:	f006 f91a 	bl	f6be <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    948a:	e7ff      	b.n	948c <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x172>
    948c:	2000      	movs	r0, #0
        return Ok(());               //  TODO: Return an error
    948e:	900e      	str	r0, [sp, #56]	; 0x38
    9490:	2001      	movs	r0, #1
    9492:	900e      	str	r0, [sp, #56]	; 0x38
    9494:	e7ff      	b.n	9496 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x17c>
}
    9496:	980e      	ldr	r0, [sp, #56]	; 0x38
    9498:	b014      	add	sp, #80	; 0x50
    949a:	bdb0      	pop	{r4, r5, r7, pc}
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    949c:	f24d 4070 	movw	r0, #54384	; 0xd470
    94a0:	f2c0 0001 	movt	r0, #1
    94a4:	f24d 62c4 	movw	r2, #54980	; 0xd6c4
    94a8:	f2c0 0201 	movt	r2, #1
    94ac:	211c      	movs	r1, #28
    94ae:	f00d faa1 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    94b2:	defe      	udf	#254	; 0xfe

000094b4 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E>:
    sys::console,
    kernel::os,
};

/// Render some graphics and text to the PineTime display. `start_display()` must have been called earlier.
pub fn on_start() -> MynewtResult<()> {
    94b4:	b570      	push	{r4, r5, r6, lr}
    94b6:	f5ad 5d04 	sub.w	sp, sp, #8448	; 0x2100
    94ba:	b084      	sub	sp, #16
    console::print("Rust CHIP8\n"); console::flush();
    94bc:	f24d 60ed 	movw	r0, #55021	; 0xd6ed
    94c0:	f2c0 0001 	movt	r0, #1
    94c4:	210b      	movs	r1, #11
    94c6:	f006 f8fa 	bl	f6be <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    94ca:	e7ff      	b.n	94cc <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x18>
    94cc:	f006 f93d 	bl	f74a <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    94d0:	e7ff      	b.n	94d2 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x1e>
    94d2:	2000      	movs	r0, #0
    
    //  Create black background
    let background = Rectangle::<Rgb565>
        ::new( Coord::new( 0, 0 ), Coord::new( 239, 239 ) )   //  Rectangle coordinates
    94d4:	9008      	str	r0, [sp, #32]
    94d6:	9908      	ldr	r1, [sp, #32]
    94d8:	f004 ff0d 	bl	e2f6 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    94dc:	9007      	str	r0, [sp, #28]
    94de:	9106      	str	r1, [sp, #24]
    94e0:	e7ff      	b.n	94e2 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x2e>
    94e2:	20ef      	movs	r0, #239	; 0xef
    94e4:	9005      	str	r0, [sp, #20]
    94e6:	9905      	ldr	r1, [sp, #20]
    94e8:	f004 ff05 	bl	e2f6 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    94ec:	9004      	str	r0, [sp, #16]
    94ee:	9103      	str	r1, [sp, #12]
    94f0:	e7ff      	b.n	94f2 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x3e>
    let background = Rectangle::<Rgb565>
    94f2:	4668      	mov	r0, sp
    94f4:	9903      	ldr	r1, [sp, #12]
    94f6:	6001      	str	r1, [r0, #0]
    94f8:	a810      	add	r0, sp, #64	; 0x40
    94fa:	9907      	ldr	r1, [sp, #28]
    94fc:	9a06      	ldr	r2, [sp, #24]
    94fe:	9b04      	ldr	r3, [sp, #16]
    9500:	f008 ff74 	bl	123ec <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    9504:	e7ff      	b.n	9506 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x52>
    9506:	2000      	movs	r0, #0
        .fill( Some( Rgb565::from(( 0x00, 0x00, 0x00 )) ) );  //  Black
    9508:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    950c:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
    9510:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
    9514:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    9518:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
    951c:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    9520:	f004 ff64 	bl	e3ec <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    9524:	9002      	str	r0, [sp, #8]
    9526:	e7ff      	b.n	9528 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x74>
    9528:	9802      	ldr	r0, [sp, #8]
    952a:	f8ad 005e 	strh.w	r0, [sp, #94]	; 0x5e
    952e:	2101      	movs	r1, #1
    9530:	f8ad 105c 	strh.w	r1, [sp, #92]	; 0x5c
    let background = Rectangle::<Rgb565>
    9534:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    9538:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
    953c:	a809      	add	r0, sp, #36	; 0x24
    953e:	a910      	add	r1, sp, #64	; 0x40
    9540:	f008 fbea 	bl	11d18 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    9544:	e7ff      	b.n	9546 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x92>
    9546:	a809      	add	r0, sp, #36	; 0x24
    9548:	a919      	add	r1, sp, #100	; 0x64


    //  Render background to display
    druid::draw_to_display(background);
    954a:	460a      	mov	r2, r1
    954c:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
    9550:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
    9554:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
    9558:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    955c:	4608      	mov	r0, r1
    955e:	f006 fdac 	bl	100ba <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>
    9562:	e7ff      	b.n	9564 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0xb0>
    9564:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    unsafe { os::os_time_delay(1000) };  ////
    9568:	f011 fbd0 	bl	1ad0c <os_time_delay>
    956c:	e7ff      	b.n	956e <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0xba>
    956e:	a820      	add	r0, sp, #128	; 0x80

    //  Start the emulator
    let chip8 = libchip8::Chip8::new(Hardware);
    9570:	f000 fa82 	bl	9a78 <_ZN8libchip814Chip8$LT$T$GT$3new17hd62b2f9fc0ffdda2E>
    9574:	e7ff      	b.n	9576 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0xc2>
    9576:	f10d 0e08 	add.w	lr, sp, #8
    957a:	f50e 5086 	add.w	r0, lr, #4288	; 0x10c0
    957e:	a920      	add	r1, sp, #128	; 0x80
    9580:	f241 0248 	movw	r2, #4168	; 0x1048
    chip8.run(include_bytes!("../roms/invaders.ch8"));
    9584:	9001      	str	r0, [sp, #4]
    9586:	f013 fe09 	bl	1d19c <__aeabi_memcpy>
    958a:	f24d 61f8 	movw	r1, #55032	; 0xd6f8
    958e:	f2c0 0101 	movt	r1, #1
    9592:	f240 5215 	movw	r2, #1301	; 0x515
    9596:	9801      	ldr	r0, [sp, #4]
    9598:	f000 fb02 	bl	9ba0 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E>
    959c:	e7ff      	b.n	959e <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0xea>
    959e:	2001      	movs	r0, #1

    //  Return success to the caller
    Ok(())
}
    95a0:	f50d 5d04 	add.w	sp, sp, #8448	; 0x2100
    95a4:	b004      	add	sp, #16
    95a6:	bd70      	pop	{r4, r5, r6, pc}

000095a8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h6cf7f1058fcc9245E>:
static mut SCREEN_BUFFER: [u8; SCREEN_WIDTH * SCREEN_HEIGHT] = [0; SCREEN_WIDTH * SCREEN_HEIGHT];

struct Hardware;

impl libchip8::Hardware for Hardware {
    fn rand(&mut self) -> u8 {
    95a8:	b081      	sub	sp, #4
    95aa:	9000      	str	r0, [sp, #0]
    95ac:	207b      	movs	r0, #123	; 0x7b
        //  Return a random value.
        123  //  TODO
        //  self.rng.gen()
    }
    95ae:	b001      	add	sp, #4
    95b0:	4770      	bx	lr

000095b2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hb8a7325968dc9595E>:

    fn key(&mut self, _key: u8) -> bool {
    95b2:	b082      	sub	sp, #8
    95b4:	460a      	mov	r2, r1
    95b6:	9000      	str	r0, [sp, #0]
    95b8:	f88d 1007 	strb.w	r1, [sp, #7]
    95bc:	2000      	movs	r0, #0
        match &self.win {
            Some(win) => win.is_key_down(k),
            None => false,
        }
        */
    }
    95be:	b002      	add	sp, #8
    95c0:	4770      	bx	lr

000095c2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E>:

    fn vram_set(&mut self, x: usize, y: usize, d: bool) {
    95c2:	b510      	push	{r4, lr}
    95c4:	b0b0      	sub	sp, #192	; 0xc0
    95c6:	469c      	mov	ip, r3
    95c8:	9029      	str	r0, [sp, #164]	; 0xa4
    95ca:	912a      	str	r1, [sp, #168]	; 0xa8
    95cc:	922b      	str	r2, [sp, #172]	; 0xac
    95ce:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
        //  Set the state of a pixel in the screen.
        //  true for white, and false for black.
        console::print("set "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
    95d2:	f64d 400d 	movw	r0, #56333	; 0xdc0d
    95d6:	f2c0 0001 	movt	r0, #1
    95da:	2304      	movs	r3, #4
    95dc:	910f      	str	r1, [sp, #60]	; 0x3c
    95de:	4619      	mov	r1, r3
    95e0:	920e      	str	r2, [sp, #56]	; 0x38
    95e2:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    95e6:	f006 f86a 	bl	f6be <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    95ea:	e7ff      	b.n	95ec <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x2a>
    95ec:	980f      	ldr	r0, [sp, #60]	; 0x3c
    95ee:	f006 f8a4 	bl	f73a <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    95f2:	e7ff      	b.n	95f4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x32>
    95f4:	f64d 4011 	movw	r0, #56337	; 0xdc11
    95f8:	f2c0 0001 	movt	r0, #1
    95fc:	2102      	movs	r1, #2
    95fe:	f006 f85e 	bl	f6be <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    9602:	e7ff      	b.n	9604 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x42>
    9604:	980e      	ldr	r0, [sp, #56]	; 0x38
    9606:	f006 f898 	bl	f73a <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    960a:	e7ff      	b.n	960c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x4a>
    960c:	f64d 4013 	movw	r0, #56339	; 0xdc13
    9610:	f2c0 0001 	movt	r0, #1
    9614:	2101      	movs	r1, #1
    9616:	f006 f852 	bl	f6be <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    961a:	e7ff      	b.n	961c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x5a>
    961c:	f006 f895 	bl	f74a <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    9620:	e7ff      	b.n	9622 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x60>
        let i = x + y * SCREEN_WIDTH;
    9622:	980e      	ldr	r0, [sp, #56]	; 0x38
    9624:	0181      	lsls	r1, r0, #6
    9626:	0e82      	lsrs	r2, r0, #26
    9628:	2a00      	cmp	r2, #0
    962a:	910c      	str	r1, [sp, #48]	; 0x30
    962c:	f040 80cb 	bne.w	97c6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x204>
    9630:	e7ff      	b.n	9632 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x70>
    9632:	980f      	ldr	r0, [sp, #60]	; 0x3c
    9634:	990c      	ldr	r1, [sp, #48]	; 0x30
    9636:	1842      	adds	r2, r0, r1
    9638:	4613      	mov	r3, r2
    963a:	4282      	cmp	r2, r0
    963c:	930b      	str	r3, [sp, #44]	; 0x2c
    963e:	f0c0 80ce 	bcc.w	97de <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x21c>
    9642:	e7ff      	b.n	9644 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x82>
    9644:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9646:	902d      	str	r0, [sp, #180]	; 0xb4
        unsafe { SCREEN_BUFFER[i] = if d { 1 } else { 0 } };
    9648:	990d      	ldr	r1, [sp, #52]	; 0x34
    964a:	07ca      	lsls	r2, r1, #31
    964c:	2a00      	cmp	r2, #0
    964e:	d104      	bne.n	965a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x98>
    9650:	e7ff      	b.n	9652 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x90>
    9652:	2000      	movs	r0, #0
    9654:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
    9658:	e003      	b.n	9662 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0xa0>
    965a:	2001      	movs	r0, #1
    965c:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
    9660:	e7ff      	b.n	9662 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0xa0>
    9662:	2000      	movs	r0, #0
    9664:	990b      	ldr	r1, [sp, #44]	; 0x2c
    9666:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
    966a:	f040 80c4 	bne.w	97f6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x234>
    966e:	e7ff      	b.n	9670 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0xae>
    9670:	f240 10f9 	movw	r0, #505	; 0x1f9
    9674:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9678:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
    967c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    967e:	5481      	strb	r1, [r0, r2]
    9680:	2003      	movs	r0, #3
        let x_scaled: i32 = x as i32 * PIXEL_SIZE;
    9682:	990f      	ldr	r1, [sp, #60]	; 0x3c
    9684:	fb81 0300 	smull	r0, r3, r1, r0
    9688:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
    968c:	ebb3 7fe0 	cmp.w	r3, r0, asr #31
    9690:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    9694:	f040 80b9 	bne.w	980a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x248>
    9698:	e7ff      	b.n	969a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0xd8>
    969a:	980a      	ldr	r0, [sp, #40]	; 0x28
    969c:	902e      	str	r0, [sp, #184]	; 0xb8
    969e:	2103      	movs	r1, #3
        let y_scaled: i32 = y as i32 * PIXEL_SIZE; 
    96a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    96a2:	fb82 1301 	smull	r1, r3, r2, r1
    96a6:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
    96aa:	ebb3 7fe1 	cmp.w	r3, r1, asr #31
    96ae:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    96b2:	f040 80b6 	bne.w	9822 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x260>
    96b6:	e7ff      	b.n	96b8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0xf6>
    96b8:	9809      	ldr	r0, [sp, #36]	; 0x24
    96ba:	902f      	str	r0, [sp, #188]	; 0xbc
        let color = if d { Rgb565::from(( 0x00, 0x00, 0xff )) } else { Rgb565::from(( 0x00, 0x00, 0x00 )) };
    96bc:	990d      	ldr	r1, [sp, #52]	; 0x34
    96be:	07ca      	lsls	r2, r1, #31
    96c0:	2a00      	cmp	r2, #0
    96c2:	d112      	bne.n	96ea <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x128>
    96c4:	e7ff      	b.n	96c6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x104>
    96c6:	2000      	movs	r0, #0
    96c8:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
    96cc:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
    96d0:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
    96d4:	f89d 004a 	ldrb.w	r0, [sp, #74]	; 0x4a
    96d8:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
    96dc:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    96e0:	f004 fe84 	bl	e3ec <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    96e4:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    96e8:	e013      	b.n	9712 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x150>
    96ea:	2000      	movs	r0, #0
    96ec:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    96f0:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    96f4:	20ff      	movs	r0, #255	; 0xff
    96f6:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    96fa:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
    96fe:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
    9702:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    9706:	f004 fe71 	bl	e3ec <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    970a:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    970e:	e7ff      	b.n	9710 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x14e>
    9710:	e000      	b.n	9714 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x152>
    9712:	e7ff      	b.n	9714 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x152>
        let pixel = Rectangle::<Rgb565>
            ::new( Coord::new( x_scaled, y_scaled ), Coord::new( x_scaled + PIXEL_SIZE - 1, y_scaled + PIXEL_SIZE - 1 ) ) //  Square coordinates
    9714:	980a      	ldr	r0, [sp, #40]	; 0x28
    9716:	9909      	ldr	r1, [sp, #36]	; 0x24
    9718:	f004 fded 	bl	e2f6 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    971c:	9008      	str	r0, [sp, #32]
    971e:	9107      	str	r1, [sp, #28]
    9720:	e7ff      	b.n	9722 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x160>
    9722:	980a      	ldr	r0, [sp, #40]	; 0x28
    9724:	1cc1      	adds	r1, r0, #3
    9726:	460a      	mov	r2, r1
    9728:	4281      	cmp	r1, r0
    972a:	9206      	str	r2, [sp, #24]
    972c:	f180 8085 	bvs.w	983a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x278>
    9730:	e7ff      	b.n	9732 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x170>
    9732:	9806      	ldr	r0, [sp, #24]
    9734:	1e41      	subs	r1, r0, #1
    9736:	460a      	mov	r2, r1
    9738:	4281      	cmp	r1, r0
    973a:	9205      	str	r2, [sp, #20]
    973c:	f180 8089 	bvs.w	9852 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x290>
    9740:	e7ff      	b.n	9742 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x180>
    9742:	9809      	ldr	r0, [sp, #36]	; 0x24
    9744:	1cc1      	adds	r1, r0, #3
    9746:	460a      	mov	r2, r1
    9748:	4281      	cmp	r1, r0
    974a:	9204      	str	r2, [sp, #16]
    974c:	f180 808d 	bvs.w	986a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x2a8>
    9750:	e7ff      	b.n	9752 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x190>
    9752:	9804      	ldr	r0, [sp, #16]
    9754:	1e41      	subs	r1, r0, #1
    9756:	460a      	mov	r2, r1
    9758:	4281      	cmp	r1, r0
    975a:	9203      	str	r2, [sp, #12]
    975c:	f180 8091 	bvs.w	9882 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x2c0>
    9760:	e7ff      	b.n	9762 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x1a0>
    9762:	9805      	ldr	r0, [sp, #20]
    9764:	9903      	ldr	r1, [sp, #12]
    9766:	f004 fdc6 	bl	e2f6 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    976a:	9002      	str	r0, [sp, #8]
    976c:	9101      	str	r1, [sp, #4]
    976e:	e7ff      	b.n	9770 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x1ae>
        let pixel = Rectangle::<Rgb565>
    9770:	4668      	mov	r0, sp
    9772:	9901      	ldr	r1, [sp, #4]
    9774:	6001      	str	r1, [r0, #0]
    9776:	a81a      	add	r0, sp, #104	; 0x68
    9778:	9908      	ldr	r1, [sp, #32]
    977a:	9a07      	ldr	r2, [sp, #28]
    977c:	9b02      	ldr	r3, [sp, #8]
    977e:	f008 fe35 	bl	123ec <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    9782:	e7ff      	b.n	9784 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x1c2>
            .fill( Some( color ) );
    9784:	f8bd 0042 	ldrh.w	r0, [sp, #66]	; 0x42
    9788:	f8ad 0086 	strh.w	r0, [sp, #134]	; 0x86
    978c:	2001      	movs	r0, #1
    978e:	f8ad 0084 	strh.w	r0, [sp, #132]	; 0x84
        let pixel = Rectangle::<Rgb565>
    9792:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
    9796:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
    979a:	a813      	add	r0, sp, #76	; 0x4c
    979c:	a91a      	add	r1, sp, #104	; 0x68
    979e:	f008 fabb 	bl	11d18 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    97a2:	e7ff      	b.n	97a4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x1e2>
    97a4:	a813      	add	r0, sp, #76	; 0x4c
    97a6:	a922      	add	r1, sp, #136	; 0x88
        druid::draw_to_display(pixel);
    97a8:	460a      	mov	r2, r1
    97aa:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
    97ae:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
    97b2:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
    97b6:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    97ba:	4608      	mov	r0, r1
    97bc:	f006 fc7d 	bl	100ba <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>
    97c0:	e7ff      	b.n	97c2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x200>

        //  trace!("Set pixel ({},{})", x, y);
        //  self.vram[(y * self.vramsz.0) + x] = d;
    }
    97c2:	b030      	add	sp, #192	; 0xc0
    97c4:	bd10      	pop	{r4, pc}
        let i = x + y * SCREEN_WIDTH;
    97c6:	f64d 4040 	movw	r0, #56384	; 0xdc40
    97ca:	f2c0 0001 	movt	r0, #1
    97ce:	f64d 422c 	movw	r2, #56364	; 0xdc2c
    97d2:	f2c0 0201 	movt	r2, #1
    97d6:	2121      	movs	r1, #33	; 0x21
    97d8:	f00d f90c 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    97dc:	defe      	udf	#254	; 0xfe
    97de:	f64d 4080 	movw	r0, #56448	; 0xdc80
    97e2:	f2c0 0001 	movt	r0, #1
    97e6:	f64d 4264 	movw	r2, #56420	; 0xdc64
    97ea:	f2c0 0201 	movt	r2, #1
    97ee:	211c      	movs	r1, #28
    97f0:	f00d f900 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    97f4:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] = if d { 1 } else { 0 } };
    97f6:	f64d 409c 	movw	r0, #56476	; 0xdc9c
    97fa:	f2c0 0001 	movt	r0, #1
    97fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9802:	990b      	ldr	r1, [sp, #44]	; 0x2c
    9804:	f00d f90c 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9808:	defe      	udf	#254	; 0xfe
        let x_scaled: i32 = x as i32 * PIXEL_SIZE;
    980a:	f64d 4040 	movw	r0, #56384	; 0xdc40
    980e:	f2c0 0001 	movt	r0, #1
    9812:	f64d 42ac 	movw	r2, #56492	; 0xdcac
    9816:	f2c0 0201 	movt	r2, #1
    981a:	2121      	movs	r1, #33	; 0x21
    981c:	f00d f8ea 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9820:	defe      	udf	#254	; 0xfe
        let y_scaled: i32 = y as i32 * PIXEL_SIZE; 
    9822:	f64d 4040 	movw	r0, #56384	; 0xdc40
    9826:	f2c0 0001 	movt	r0, #1
    982a:	f64d 42bc 	movw	r2, #56508	; 0xdcbc
    982e:	f2c0 0201 	movt	r2, #1
    9832:	2121      	movs	r1, #33	; 0x21
    9834:	f00d f8de 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9838:	defe      	udf	#254	; 0xfe
            ::new( Coord::new( x_scaled, y_scaled ), Coord::new( x_scaled + PIXEL_SIZE - 1, y_scaled + PIXEL_SIZE - 1 ) ) //  Square coordinates
    983a:	f64d 4080 	movw	r0, #56448	; 0xdc80
    983e:	f2c0 0001 	movt	r0, #1
    9842:	f64d 42cc 	movw	r2, #56524	; 0xdccc
    9846:	f2c0 0201 	movt	r2, #1
    984a:	211c      	movs	r1, #28
    984c:	f00d f8d2 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9850:	defe      	udf	#254	; 0xfe
    9852:	f64d 40e0 	movw	r0, #56544	; 0xdce0
    9856:	f2c0 0001 	movt	r0, #1
    985a:	f64d 42cc 	movw	r2, #56524	; 0xdccc
    985e:	f2c0 0201 	movt	r2, #1
    9862:	2121      	movs	r1, #33	; 0x21
    9864:	f00d f8c6 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9868:	defe      	udf	#254	; 0xfe
    986a:	f64d 4080 	movw	r0, #56448	; 0xdc80
    986e:	f2c0 0001 	movt	r0, #1
    9872:	f64d 5204 	movw	r2, #56580	; 0xdd04
    9876:	f2c0 0201 	movt	r2, #1
    987a:	211c      	movs	r1, #28
    987c:	f00d f8ba 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9880:	defe      	udf	#254	; 0xfe
    9882:	f64d 40e0 	movw	r0, #56544	; 0xdce0
    9886:	f2c0 0001 	movt	r0, #1
    988a:	f64d 5204 	movw	r2, #56580	; 0xdd04
    988e:	f2c0 0201 	movt	r2, #1
    9892:	2121      	movs	r1, #33	; 0x21
    9894:	f00d f8ae 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9898:	defe      	udf	#254	; 0xfe

0000989a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE>:

    fn vram_get(&mut self, x: usize, y: usize) -> bool {
    989a:	b088      	sub	sp, #32
    989c:	9004      	str	r0, [sp, #16]
    989e:	9105      	str	r1, [sp, #20]
    98a0:	9206      	str	r2, [sp, #24]
        //  Get the current state of a pixel in the screen.
        let i = x + y * SCREEN_WIDTH;
    98a2:	0190      	lsls	r0, r2, #6
    98a4:	0e92      	lsrs	r2, r2, #26
    98a6:	2a00      	cmp	r2, #0
    98a8:	9103      	str	r1, [sp, #12]
    98aa:	9002      	str	r0, [sp, #8]
    98ac:	d11a      	bne.n	98e4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x4a>
    98ae:	e7ff      	b.n	98b0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x16>
    98b0:	9803      	ldr	r0, [sp, #12]
    98b2:	9902      	ldr	r1, [sp, #8]
    98b4:	1842      	adds	r2, r0, r1
    98b6:	4613      	mov	r3, r2
    98b8:	4282      	cmp	r2, r0
    98ba:	9301      	str	r3, [sp, #4]
    98bc:	d31e      	bcc.n	98fc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x62>
    98be:	e7ff      	b.n	98c0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x26>
    98c0:	9801      	ldr	r0, [sp, #4]
    98c2:	9007      	str	r0, [sp, #28]
    98c4:	2100      	movs	r1, #0
        unsafe { SCREEN_BUFFER[i] != 0 }
    98c6:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    98ca:	d123      	bne.n	9914 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x7a>
    98cc:	e7ff      	b.n	98ce <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x34>
    98ce:	f240 10f9 	movw	r0, #505	; 0x1f9
    98d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    98d6:	9901      	ldr	r1, [sp, #4]
    98d8:	5c40      	ldrb	r0, [r0, r1]
    98da:	2800      	cmp	r0, #0
    98dc:	bf18      	it	ne
    98de:	2001      	movne	r0, #1
        //  self.vram[(y * self.vramsz.0) + x]
    }
    98e0:	b008      	add	sp, #32
    98e2:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    98e4:	f64d 4040 	movw	r0, #56384	; 0xdc40
    98e8:	f2c0 0001 	movt	r0, #1
    98ec:	f64d 5214 	movw	r2, #56596	; 0xdd14
    98f0:	f2c0 0201 	movt	r2, #1
    98f4:	2121      	movs	r1, #33	; 0x21
    98f6:	f00d f87d 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    98fa:	defe      	udf	#254	; 0xfe
    98fc:	f64d 4080 	movw	r0, #56448	; 0xdc80
    9900:	f2c0 0001 	movt	r0, #1
    9904:	f64d 5224 	movw	r2, #56612	; 0xdd24
    9908:	f2c0 0201 	movt	r2, #1
    990c:	211c      	movs	r1, #28
    990e:	f00d f871 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9912:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] != 0 }
    9914:	f64d 5034 	movw	r0, #56628	; 0xdd34
    9918:	f2c0 0001 	movt	r0, #1
    991c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9920:	9901      	ldr	r1, [sp, #4]
    9922:	f00d f87d 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9926:	defe      	udf	#254	; 0xfe

00009928 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc15bb8a8dbf2b592E>:

    fn vram_setsize(&mut self, _size: (usize, usize)) {
    9928:	b083      	sub	sp, #12
    992a:	9000      	str	r0, [sp, #0]
    992c:	9101      	str	r1, [sp, #4]
    992e:	9202      	str	r2, [sp, #8]
                panic!("Unable to create window {}", err);
            }
        };
        self.win = Some(win);
        */
    }
    9930:	b003      	add	sp, #12
    9932:	4770      	bx	lr

00009934 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hd317927185b0114cE>:

    fn vram_size(&mut self) -> (usize, usize) {
    9934:	b083      	sub	sp, #12
    9936:	9002      	str	r0, [sp, #8]
    9938:	2040      	movs	r0, #64	; 0x40
        //  Get the size of the screen.
        (SCREEN_WIDTH, SCREEN_HEIGHT)
    993a:	9000      	str	r0, [sp, #0]
    993c:	2020      	movs	r0, #32
    993e:	9001      	str	r0, [sp, #4]
        //  self.vramsz
    }
    9940:	9800      	ldr	r0, [sp, #0]
    9942:	9901      	ldr	r1, [sp, #4]
    9944:	b003      	add	sp, #12
    9946:	4770      	bx	lr

00009948 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E>:

    fn clock(&mut self) -> u64 {
    9948:	b5b0      	push	{r4, r5, r7, lr}
    994a:	b086      	sub	sp, #24
    994c:	9005      	str	r0, [sp, #20]
        //  Return the current clock value in nanoseconds.
        os::os_time_get as u64 * 1000_u64 * 1000_u64
    994e:	f64a 40c1 	movw	r0, #44225	; 0xacc1
    9952:	f2c0 0001 	movt	r0, #1
    9956:	2100      	movs	r1, #0
    9958:	fba1 2300 	umull	r2, r3, r1, r0
    995c:	2b00      	cmp	r3, #0
    995e:	bf18      	it	ne
    9960:	2301      	movne	r3, #1
    9962:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    9966:	fba1 e40c 	umull	lr, r4, r1, ip
    996a:	2c00      	cmp	r4, #0
    996c:	bf18      	it	ne
    996e:	2401      	movne	r4, #1
    9970:	ea43 0304 	orr.w	r3, r3, r4
    9974:	4472      	add	r2, lr
    9976:	fba0 0c0c 	umull	r0, ip, r0, ip
    997a:	eb12 020c 	adds.w	r2, r2, ip
    997e:	f141 0100 	adc.w	r1, r1, #0
    9982:	ea41 0103 	orr.w	r1, r1, r3
    9986:	2900      	cmp	r1, #0
    9988:	9004      	str	r0, [sp, #16]
    998a:	9203      	str	r2, [sp, #12]
    998c:	d124      	bne.n	99d8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E+0x90>
    998e:	e7ff      	b.n	9990 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E+0x48>
    9990:	2000      	movs	r0, #0
    9992:	9904      	ldr	r1, [sp, #16]
    9994:	fba0 2301 	umull	r2, r3, r0, r1
    9998:	2b00      	cmp	r3, #0
    999a:	bf18      	it	ne
    999c:	2301      	movne	r3, #1
    999e:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    99a2:	f8dd e00c 	ldr.w	lr, [sp, #12]
    99a6:	fbae 450c 	umull	r4, r5, lr, ip
    99aa:	2d00      	cmp	r5, #0
    99ac:	bf18      	it	ne
    99ae:	2501      	movne	r5, #1
    99b0:	ea43 0305 	orr.w	r3, r3, r5
    99b4:	4422      	add	r2, r4
    99b6:	fba1 c40c 	umull	ip, r4, r1, ip
    99ba:	1912      	adds	r2, r2, r4
    99bc:	f140 0000 	adc.w	r0, r0, #0
    99c0:	ea40 0003 	orr.w	r0, r0, r3
    99c4:	2800      	cmp	r0, #0
    99c6:	f8cd c008 	str.w	ip, [sp, #8]
    99ca:	9201      	str	r2, [sp, #4]
    99cc:	d110      	bne.n	99f0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E+0xa8>
    99ce:	e7ff      	b.n	99d0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E+0x88>
        let d = self.inst.elapsed();
        d.as_secs()
            .wrapping_mul(1000_000_000)
            .wrapping_add(d.subsec_nanos().into())
        */
    }
    99d0:	9802      	ldr	r0, [sp, #8]
    99d2:	9901      	ldr	r1, [sp, #4]
    99d4:	b006      	add	sp, #24
    99d6:	bdb0      	pop	{r4, r5, r7, pc}
        os::os_time_get as u64 * 1000_u64 * 1000_u64
    99d8:	f64d 4040 	movw	r0, #56384	; 0xdc40
    99dc:	f2c0 0001 	movt	r0, #1
    99e0:	f64d 5244 	movw	r2, #56644	; 0xdd44
    99e4:	f2c0 0201 	movt	r2, #1
    99e8:	2121      	movs	r1, #33	; 0x21
    99ea:	f00d f803 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    99ee:	defe      	udf	#254	; 0xfe
    99f0:	f64d 4040 	movw	r0, #56384	; 0xdc40
    99f4:	f2c0 0001 	movt	r0, #1
    99f8:	f64d 5244 	movw	r2, #56644	; 0xdd44
    99fc:	f2c0 0201 	movt	r2, #1
    9a00:	2121      	movs	r1, #33	; 0x21
    9a02:	f00c fff7 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9a06:	defe      	udf	#254	; 0xfe

00009a08 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha45cfdbdf4731cedE>:

    fn beep(&mut self) {
    9a08:	b081      	sub	sp, #4
    9a0a:	9000      	str	r0, [sp, #0]
        //  Play beep sound.
    }
    9a0c:	b001      	add	sp, #4
    9a0e:	4770      	bx	lr

00009a10 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h3c52951efd018dffE>:

    fn sched(&mut self) -> bool {
    9a10:	b081      	sub	sp, #4
    9a12:	9000      	str	r0, [sp, #0]
    9a14:	2000      	movs	r0, #0
                .collect();
            win.update_with_buffer(&vram).unwrap();
        }
        */
        false
    }
    9a16:	b001      	add	sp, #4
    9a18:	4770      	bx	lr

00009a1a <_ZN3app5chip812handle_touch17hb422a4f740ac0e1bE>:
}

pub fn handle_touch(_x: u16, _y: u16) { 
    9a1a:	b580      	push	{r7, lr}
    9a1c:	b084      	sub	sp, #16
    9a1e:	460a      	mov	r2, r1
    9a20:	4603      	mov	r3, r0
    9a22:	f8ad 000c 	strh.w	r0, [sp, #12]
    9a26:	f8ad 100e 	strh.w	r1, [sp, #14]
    console::print("CHIP8 touch not handled\n"); console::flush(); 
    9a2a:	f64d 5054 	movw	r0, #56660	; 0xdd54
    9a2e:	f2c0 0001 	movt	r0, #1
    9a32:	2118      	movs	r1, #24
    9a34:	9202      	str	r2, [sp, #8]
    9a36:	9301      	str	r3, [sp, #4]
    9a38:	f005 fe41 	bl	f6be <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    9a3c:	e7ff      	b.n	9a3e <_ZN3app5chip812handle_touch17hb422a4f740ac0e1bE+0x24>
    9a3e:	f005 fe84 	bl	f74a <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    9a42:	e7ff      	b.n	9a44 <_ZN3app5chip812handle_touch17hb422a4f740ac0e1bE+0x2a>
    9a44:	b004      	add	sp, #16
    9a46:	bd80      	pop	{r7, pc}

00009a48 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h79fbfe346516e383E>:
    9a48:	b580      	push	{r7, lr}
    9a4a:	b082      	sub	sp, #8
    9a4c:	9200      	str	r2, [sp, #0]
    9a4e:	9101      	str	r1, [sp, #4]
    9a50:	9a00      	ldr	r2, [sp, #0]
    9a52:	f003 fe58 	bl	d706 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h64cee1a3c11094e6E>
    9a56:	e7ff      	b.n	9a58 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h79fbfe346516e383E+0x10>
    9a58:	b002      	add	sp, #8
    9a5a:	bd80      	pop	{r7, pc}

00009a5c <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17he627156f6f8a4ed5E>:
    9a5c:	b580      	push	{r7, lr}
    9a5e:	b084      	sub	sp, #16
    9a60:	9102      	str	r1, [sp, #8]
    9a62:	9003      	str	r0, [sp, #12]
    9a64:	9902      	ldr	r1, [sp, #8]
    9a66:	f003 fe60 	bl	d72a <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h2454dbfe6f26a106E>
    9a6a:	9001      	str	r0, [sp, #4]
    9a6c:	9100      	str	r1, [sp, #0]
    9a6e:	e7ff      	b.n	9a70 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17he627156f6f8a4ed5E+0x14>
    9a70:	9801      	ldr	r0, [sp, #4]
    9a72:	9900      	ldr	r1, [sp, #0]
    9a74:	b004      	add	sp, #16
    9a76:	bd80      	pop	{r7, pc}

00009a78 <_ZN8libchip814Chip8$LT$T$GT$3new17hd62b2f9fc0ffdda2E>:
    0xf0, 0x80, 0xf0, 0x80, 0x80, // f
];

impl<T: Hardware> Chip8<T> {
    /// Create an interpreter instance.
    pub fn new(hw: T) -> Self {
    9a78:	b570      	push	{r4, r5, r6, lr}
    9a7a:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
    9a7e:	f10d 0e04 	add.w	lr, sp, #4
    9a82:	f50e 5182 	add.w	r1, lr, #4160	; 0x1040
    9a86:	2200      	movs	r2, #0
        Self {
            v: [0; REGS],
    9a88:	9209      	str	r2, [sp, #36]	; 0x24
    9a8a:	9208      	str	r2, [sp, #32]
    9a8c:	9207      	str	r2, [sp, #28]
    9a8e:	9206      	str	r2, [sp, #24]
    9a90:	ab0a      	add	r3, sp, #40	; 0x28
    9a92:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
            i: 0,
            dt: 0,
            st: 0,
            pc: 0,
            sp: 0,
            mem: [0; MEMS],
    9a96:	9005      	str	r0, [sp, #20]
    9a98:	4618      	mov	r0, r3
    9a9a:	9104      	str	r1, [sp, #16]
    9a9c:	4661      	mov	r1, ip
    9a9e:	9203      	str	r2, [sp, #12]
    9aa0:	9302      	str	r3, [sp, #8]
    9aa2:	f8cd c004 	str.w	ip, [sp, #4]
    9aa6:	f013 fb75 	bl	1d194 <__aeabi_memclr>
            stack: [0; STACKS],
    9aaa:	9803      	ldr	r0, [sp, #12]
    9aac:	9904      	ldr	r1, [sp, #16]
    9aae:	6008      	str	r0, [r1, #0]
    9ab0:	f841 0c04 	str.w	r0, [r1, #-4]
    9ab4:	f841 0c08 	str.w	r0, [r1, #-8]
    9ab8:	f841 0c0c 	str.w	r0, [r1, #-12]
    9abc:	f841 0c10 	str.w	r0, [r1, #-16]
    9ac0:	f841 0c14 	str.w	r0, [r1, #-20]
    9ac4:	f841 0c18 	str.w	r0, [r1, #-24]
    9ac8:	f841 0c1c 	str.w	r0, [r1, #-28]
            time: None,
    9acc:	6088      	str	r0, [r1, #8]
    9ace:	6048      	str	r0, [r1, #4]
        Self {
    9ad0:	9a06      	ldr	r2, [sp, #24]
    9ad2:	9b07      	ldr	r3, [sp, #28]
    9ad4:	f8dd c020 	ldr.w	ip, [sp, #32]
    9ad8:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    9adc:	9c05      	ldr	r4, [sp, #20]
    9ade:	f8c4 e040 	str.w	lr, [r4, #64]	; 0x40
    9ae2:	f8c4 c03c 	str.w	ip, [r4, #60]	; 0x3c
    9ae6:	63a3      	str	r3, [r4, #56]	; 0x38
    9ae8:	6362      	str	r2, [r4, #52]	; 0x34
    9aea:	8220      	strh	r0, [r4, #16]
    9aec:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
    9af0:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
    9af4:	8260      	strh	r0, [r4, #18]
    9af6:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
    9afa:	f104 0047 	add.w	r0, r4, #71	; 0x47
    9afe:	9902      	ldr	r1, [sp, #8]
    9b00:	9a01      	ldr	r2, [sp, #4]
    9b02:	f013 fb4b 	bl	1d19c <__aeabi_memcpy>
    9b06:	9905      	ldr	r1, [sp, #20]
    9b08:	f101 0214 	add.w	r2, r1, #20
    9b0c:	f10d 0e08 	add.w	lr, sp, #8
    9b10:	f50e 5181 	add.w	r1, lr, #4128	; 0x1020
    9b14:	2320      	movs	r3, #32
    9b16:	9000      	str	r0, [sp, #0]
    9b18:	4610      	mov	r0, r2
    9b1a:	461a      	mov	r2, r3
    9b1c:	f013 fb3e 	bl	1d19c <__aeabi_memcpy>
    9b20:	9904      	ldr	r1, [sp, #16]
    9b22:	684a      	ldr	r2, [r1, #4]
    9b24:	688b      	ldr	r3, [r1, #8]
    9b26:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    9b2a:	f8d1 e010 	ldr.w	lr, [r1, #16]
    9b2e:	9c05      	ldr	r4, [sp, #20]
    9b30:	6063      	str	r3, [r4, #4]
    9b32:	6022      	str	r2, [r4, #0]
    9b34:	f8c4 e00c 	str.w	lr, [r4, #12]
    9b38:	f8c4 c008 	str.w	ip, [r4, #8]
    9b3c:	f241 0247 	movw	r2, #4167	; 0x1047
    9b40:	9b03      	ldr	r3, [sp, #12]
    9b42:	54a3      	strb	r3, [r4, r2]
            running: false,
            hw,
        }
    }
    9b44:	f50d 5d83 	add.w	sp, sp, #4192	; 0x1060
    9b48:	bd70      	pop	{r4, r5, r6, pc}

00009b4a <_ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E>:
    fn push(&mut self, item: u16) {
        self.stack[self.sp as usize] = item;
        self.sp = self.sp.wrapping_add(1);
    }

    fn pop(&mut self) -> u16 {
    9b4a:	b580      	push	{r7, lr}
    9b4c:	b086      	sub	sp, #24
    9b4e:	9004      	str	r0, [sp, #16]
        self.sp = self.sp.wrapping_sub(1);
    9b50:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    9b54:	2201      	movs	r2, #1
    9b56:	9003      	str	r0, [sp, #12]
    9b58:	4608      	mov	r0, r1
    9b5a:	4611      	mov	r1, r2
    9b5c:	f009 f824 	bl	12ba8 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h4a79113dcdba2ecfE>
    9b60:	9002      	str	r0, [sp, #8]
    9b62:	e7ff      	b.n	9b64 <_ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E+0x1a>
    9b64:	9802      	ldr	r0, [sp, #8]
    9b66:	9903      	ldr	r1, [sp, #12]
    9b68:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
        let item = self.stack[self.sp as usize];
    9b6c:	f891 2046 	ldrb.w	r2, [r1, #70]	; 0x46
    9b70:	4613      	mov	r3, r2
    9b72:	2a0f      	cmp	r2, #15
    9b74:	9301      	str	r3, [sp, #4]
    9b76:	d80a      	bhi.n	9b8e <_ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E+0x44>
    9b78:	e7ff      	b.n	9b7a <_ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E+0x30>
    9b7a:	9803      	ldr	r0, [sp, #12]
    9b7c:	9901      	ldr	r1, [sp, #4]
    9b7e:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    9b82:	8a92      	ldrh	r2, [r2, #20]
    9b84:	f8ad 2016 	strh.w	r2, [sp, #22]
        item
    }
    9b88:	4610      	mov	r0, r2
    9b8a:	b006      	add	sp, #24
    9b8c:	bd80      	pop	{r7, pc}
        let item = self.stack[self.sp as usize];
    9b8e:	f64d 50c4 	movw	r0, #56772	; 0xddc4
    9b92:	f2c0 0001 	movt	r0, #1
    9b96:	2210      	movs	r2, #16
    9b98:	9901      	ldr	r1, [sp, #4]
    9b9a:	f00c ff41 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9b9e:	defe      	udf	#254	; 0xfe

00009ba0 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E>:
    pub fn run(mut self, rom: &[u8]) {
    9ba0:	b580      	push	{r7, lr}
    9ba2:	b086      	sub	sp, #24
    9ba4:	9104      	str	r1, [sp, #16]
    9ba6:	9205      	str	r2, [sp, #20]
        self.setup();
    9ba8:	9003      	str	r0, [sp, #12]
    9baa:	9202      	str	r2, [sp, #8]
    9bac:	9101      	str	r1, [sp, #4]
    9bae:	f003 ff0e 	bl	d9ce <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E>
    9bb2:	e7ff      	b.n	9bb4 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x14>
        self.load(rom);
    9bb4:	9803      	ldr	r0, [sp, #12]
    9bb6:	9901      	ldr	r1, [sp, #4]
    9bb8:	9a02      	ldr	r2, [sp, #8]
    9bba:	f003 fdc8 	bl	d74e <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E>
    9bbe:	e7ff      	b.n	9bc0 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x20>
        while self.running {
    9bc0:	e7ff      	b.n	9bc2 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x22>
    9bc2:	f241 0047 	movw	r0, #4167	; 0x1047
    9bc6:	9903      	ldr	r1, [sp, #12]
    9bc8:	5c08      	ldrb	r0, [r1, r0]
    9bca:	07c0      	lsls	r0, r0, #31
    9bcc:	2800      	cmp	r0, #0
    9bce:	d101      	bne.n	9bd4 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x34>
    9bd0:	e7ff      	b.n	9bd2 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x32>
    }
    9bd2:	e00c      	b.n	9bee <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x4e>
            self.sched();
    9bd4:	9803      	ldr	r0, [sp, #12]
    9bd6:	f003 fe84 	bl	d8e2 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E>
    9bda:	e7ff      	b.n	9bdc <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x3c>
            self.eval();
    9bdc:	9803      	ldr	r0, [sp, #12]
    9bde:	f000 f809 	bl	9bf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E>
    9be2:	e7ff      	b.n	9be4 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x44>
            self.next();
    9be4:	9803      	ldr	r0, [sp, #12]
    9be6:	f003 fded 	bl	d7c4 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    9bea:	e7ff      	b.n	9bec <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x4c>
        while self.running {
    9bec:	e7e9      	b.n	9bc2 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x22>
    }
    9bee:	b006      	add	sp, #24
    9bf0:	bd80      	pop	{r7, pc}
	...

00009bf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E>:
        }

        return b' ';
    }

    fn eval(&mut self) {
    9bf4:	b570      	push	{r4, r5, r6, lr}
    9bf6:	f5ad 6d6c 	sub.w	sp, sp, #3776	; 0xec0
    9bfa:	f8cd 0c70 	str.w	r0, [sp, #3184]	; 0xc70
        let h = self.mem[self.pc as usize] as u16;
    9bfe:	8a41      	ldrh	r1, [r0, #18]
    9c00:	460a      	mov	r2, r1
    9c02:	2300      	movs	r3, #0
    9c04:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    9c08:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
    9c0c:	f8cd 248c 	str.w	r2, [sp, #1164]	; 0x48c
    9c10:	f043 82a9 	bne.w	d166 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3572>
    9c14:	e7ff      	b.n	9c16 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22>
    9c16:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    9c1a:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    9c1e:	1842      	adds	r2, r0, r1
    9c20:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    9c24:	4613      	mov	r3, r2
    9c26:	f8ad 2c76 	strh.w	r2, [sp, #3190]	; 0xc76
        let l = self.mem[(self.pc + 1) as usize] as u16;
    9c2a:	8a42      	ldrh	r2, [r0, #18]
    9c2c:	3201      	adds	r2, #1
    9c2e:	fa1f fc82 	uxth.w	ip, r2
    9c32:	4696      	mov	lr, r2
    9c34:	4594      	cmp	ip, r2
    9c36:	f8cd 3488 	str.w	r3, [sp, #1160]	; 0x488
    9c3a:	f8cd e484 	str.w	lr, [sp, #1156]	; 0x484
    9c3e:	f043 829d 	bne.w	d17c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3588>
    9c42:	e7ff      	b.n	9c44 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x50>
    9c44:	f8dd 0484 	ldr.w	r0, [sp, #1156]	; 0x484
    9c48:	b281      	uxth	r1, r0
    9c4a:	460a      	mov	r2, r1
    9c4c:	2300      	movs	r3, #0
    9c4e:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    9c52:	f8cd 2480 	str.w	r2, [sp, #1152]	; 0x480
    9c56:	f043 829d 	bne.w	d194 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35a0>
    9c5a:	e7ff      	b.n	9c5c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x68>
    9c5c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    9c60:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    9c64:	1842      	adds	r2, r0, r1
    9c66:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    9c6a:	4613      	mov	r3, r2
    9c6c:	f8ad 2c78 	strh.w	r2, [sp, #3192]	; 0xc78
        let inst = h << 8 | l;
    9c70:	f8dd 2488 	ldr.w	r2, [sp, #1160]	; 0x488
    9c74:	ea4f 2c02 	mov.w	ip, r2, lsl #8
    9c78:	f8cd 347c 	str.w	r3, [sp, #1148]	; 0x47c
    9c7c:	f8cd c478 	str.w	ip, [sp, #1144]	; 0x478
    9c80:	e7ff      	b.n	9c82 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8e>
    9c82:	f8dd 0478 	ldr.w	r0, [sp, #1144]	; 0x478
    9c86:	f8dd 147c 	ldr.w	r1, [sp, #1148]	; 0x47c
    9c8a:	ea40 0201 	orr.w	r2, r0, r1
    9c8e:	f8ad 2496 	strh.w	r2, [sp, #1174]	; 0x496

        let nnn = inst & 0xfff;
    9c92:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    9c96:	f36f 321f 	bfc	r2, #12, #20
    9c9a:	4613      	mov	r3, r2
    9c9c:	f8ad 2c7a 	strh.w	r2, [sp, #3194]	; 0xc7a
        let n = (inst & 0xf) as usize;
    9ca0:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    9ca4:	f002 020f 	and.w	r2, r2, #15
    9ca8:	4694      	mov	ip, r2
    9caa:	f8cd 2c7c 	str.w	r2, [sp, #3196]	; 0xc7c
        let x = ((inst >> 8) & 0xf) as usize;
    9cae:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    9cb2:	f8cd 3474 	str.w	r3, [sp, #1140]	; 0x474
    9cb6:	f8cd c470 	str.w	ip, [sp, #1136]	; 0x470
    9cba:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
    9cbe:	e7ff      	b.n	9cc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcc>
    9cc0:	f8dd 046c 	ldr.w	r0, [sp, #1132]	; 0x46c
    9cc4:	f000 010f 	and.w	r1, r0, #15
    9cc8:	460a      	mov	r2, r1
    9cca:	f8cd 1c80 	str.w	r1, [sp, #3200]	; 0xc80
        let y = ((inst >> 4) & 0xf) as usize;
    9cce:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    9cd2:	0909      	lsrs	r1, r1, #4
    9cd4:	f8cd 2468 	str.w	r2, [sp, #1128]	; 0x468
    9cd8:	f8cd 1464 	str.w	r1, [sp, #1124]	; 0x464
    9cdc:	e7ff      	b.n	9cde <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xea>
    9cde:	f8dd 0464 	ldr.w	r0, [sp, #1124]	; 0x464
    9ce2:	f000 010f 	and.w	r1, r0, #15
    9ce6:	460a      	mov	r2, r1
    9ce8:	f8cd 1c84 	str.w	r1, [sp, #3204]	; 0xc84
        let kk = (inst & 0xff) as u8;
    9cec:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    9cf0:	b2cb      	uxtb	r3, r1
    9cf2:	f88d 1c8b 	strb.w	r1, [sp, #3211]	; 0xc8b

        match (
            (inst >> 12) & 0xf,
    9cf6:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    9cfa:	0b09      	lsrs	r1, r1, #12
    9cfc:	f8cd 2460 	str.w	r2, [sp, #1120]	; 0x460
    9d00:	f8cd 345c 	str.w	r3, [sp, #1116]	; 0x45c
    9d04:	f8cd 1458 	str.w	r1, [sp, #1112]	; 0x458
    9d08:	e7ff      	b.n	9d0a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x116>
    9d0a:	f8dd 0458 	ldr.w	r0, [sp, #1112]	; 0x458
    9d0e:	f000 010f 	and.w	r1, r0, #15
            (inst >> 8) & 0xf,
    9d12:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    9d16:	f8cd 1454 	str.w	r1, [sp, #1108]	; 0x454
    9d1a:	f8cd 2450 	str.w	r2, [sp, #1104]	; 0x450
    9d1e:	e7ff      	b.n	9d20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12c>
    9d20:	f8dd 0450 	ldr.w	r0, [sp, #1104]	; 0x450
    9d24:	f000 010f 	and.w	r1, r0, #15
            (inst >> 4) & 0xf,
    9d28:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    9d2c:	0912      	lsrs	r2, r2, #4
    9d2e:	f8cd 144c 	str.w	r1, [sp, #1100]	; 0x44c
    9d32:	f8cd 2448 	str.w	r2, [sp, #1096]	; 0x448
    9d36:	e7ff      	b.n	9d38 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x144>
    9d38:	f8dd 0448 	ldr.w	r0, [sp, #1096]	; 0x448
    9d3c:	f000 010f 	and.w	r1, r0, #15
            (inst >> 0) & 0xf,
    9d40:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    9d44:	f8cd 1444 	str.w	r1, [sp, #1092]	; 0x444
    9d48:	f8cd 2440 	str.w	r2, [sp, #1088]	; 0x440
    9d4c:	e7ff      	b.n	9d4e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15a>
    9d4e:	f8dd 0440 	ldr.w	r0, [sp, #1088]	; 0x440
    9d52:	f000 010f 	and.w	r1, r0, #15
        match (
    9d56:	f8dd 2454 	ldr.w	r2, [sp, #1108]	; 0x454
    9d5a:	f8ad 2498 	strh.w	r2, [sp, #1176]	; 0x498
    9d5e:	f8dd 344c 	ldr.w	r3, [sp, #1100]	; 0x44c
    9d62:	f8ad 349a 	strh.w	r3, [sp, #1178]	; 0x49a
    9d66:	f8dd c444 	ldr.w	ip, [sp, #1092]	; 0x444
    9d6a:	f8ad c49c 	strh.w	ip, [sp, #1180]	; 0x49c
    9d6e:	f8ad 149e 	strh.w	r1, [sp, #1182]	; 0x49e
        ) {
            (0, 0, 0xe, 0) => {
    9d72:	f8bd 1498 	ldrh.w	r1, [sp, #1176]	; 0x498
    9d76:	468e      	mov	lr, r1
    9d78:	290f      	cmp	r1, #15
    9d7a:	f8cd e43c 	str.w	lr, [sp, #1084]	; 0x43c
    9d7e:	d84f      	bhi.n	9e20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    9d80:	f8dd 143c 	ldr.w	r1, [sp, #1084]	; 0x43c
    9d84:	e8df f011 	tbh	[pc, r1, lsl #1]
    9d88:	03010010 	.word	0x03010010
    9d8c:	042d0394 	.word	0x042d0394
    9d90:	002c04cd 	.word	0x002c04cd
    9d94:	06af061a 	.word	0x06af061a
    9d98:	00750032 	.word	0x00750032
    9d9c:	0edf0e54 	.word	0x0edf0e54
    9da0:	101e0f80 	.word	0x101e0f80
    9da4:	0095007b 	.word	0x0095007b
    9da8:	f8bd 049a 	ldrh.w	r0, [sp, #1178]	; 0x49a
    9dac:	2800      	cmp	r0, #0
    9dae:	f040 825c 	bne.w	a26a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x676>
    9db2:	e7ff      	b.n	9db4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c0>
    9db4:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    9db8:	280e      	cmp	r0, #14
    9dba:	f040 8256 	bne.w	a26a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x676>
    9dbe:	e7ff      	b.n	9dc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1cc>
    9dc0:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9dc4:	4601      	mov	r1, r0
    9dc6:	2800      	cmp	r0, #0
    9dc8:	f8cd 1438 	str.w	r1, [sp, #1080]	; 0x438
    9dcc:	f000 80c0 	beq.w	9f50 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35c>
    9dd0:	e7ff      	b.n	9dd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1de>
    9dd2:	f8dd 0438 	ldr.w	r0, [sp, #1080]	; 0x438
    9dd6:	b281      	uxth	r1, r0
    9dd8:	290e      	cmp	r1, #14
    9dda:	f000 81b1 	beq.w	a140 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x54c>
    9dde:	e244      	b.n	a26a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x676>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
                if self.v[x] != kk {
                    self.next();
                }
            }
            (5, _, _, 0) => {
    9de0:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9de4:	2800      	cmp	r0, #0
    9de6:	f000 853c 	beq.w	a862 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc6e>
    9dea:	e019      	b.n	9e20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            }
            (7, _, _, _) => {
                trace!("[{:04x}] ADD Vx, kk", self.pc);
                self.v[x] = self.v[x].wrapping_add(kk);
            }
            (8, _, _, 0) => {
    9dec:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9df0:	4601      	mov	r1, r0
    9df2:	280e      	cmp	r0, #14
    9df4:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
    9df8:	d812      	bhi.n	9e20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    9dfa:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
    9dfe:	e8df f011 	tbh	[pc, r1, lsl #1]
    9e02:	0719      	.short	0x0719
    9e04:	086207bb 	.word	0x086207bb
    9e08:	09b00909 	.word	0x09b00909
    9e0c:	0b360a72 	.word	0x0b360a72
    9e10:	000f0beb 	.word	0x000f0beb
    9e14:	000f000f 	.word	0x000f000f
    9e18:	000f000f 	.word	0x000f000f
    9e1c:	0caf000f 	.word	0x0caf000f
                let x = x as usize;
                for i in 0..(x + 1) {
                    self.v[i] = self.mem[self.i as usize + i];
                }
            }
            _ => panic!("[{:04x}] Invalid op: {:04x}", self.pc, inst), // Bad ops
    9e20:	f64e 10d8 	movw	r0, #59864	; 0xe9d8
    9e24:	f2c0 0001 	movt	r0, #1
    9e28:	6801      	ldr	r1, [r0, #0]
    9e2a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    9e2e:	f100 0212 	add.w	r2, r0, #18
    9e32:	f8cd 2c68 	str.w	r2, [sp, #3176]	; 0xc68
    9e36:	f20d 4296 	addw	r2, sp, #1174	; 0x496
    9e3a:	f8cd 2c6c 	str.w	r2, [sp, #3180]	; 0xc6c
    9e3e:	f8dd 2c68 	ldr.w	r2, [sp, #3176]	; 0xc68
    9e42:	f8cd 2d60 	str.w	r2, [sp, #3424]	; 0xd60
    9e46:	f8dd 3c6c 	ldr.w	r3, [sp, #3180]	; 0xc6c
    9e4a:	f8cd 3d64 	str.w	r3, [sp, #3428]	; 0xd64
    9e4e:	f248 2c0f 	movw	ip, #33295	; 0x820f
    9e52:	f2c0 0c01 	movt	ip, #1
    9e56:	4610      	mov	r0, r2
    9e58:	f8cd 1434 	str.w	r1, [sp, #1076]	; 0x434
    9e5c:	4661      	mov	r1, ip
    9e5e:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430
    9e62:	f007 ff3f 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    9e66:	f8cd 042c 	str.w	r0, [sp, #1068]	; 0x42c
    9e6a:	f8cd 1428 	str.w	r1, [sp, #1064]	; 0x428
    9e6e:	f003 b938 	b.w	d0e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x34ee>
            (9, _, _, 0) => {
    9e72:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9e76:	2800      	cmp	r0, #0
    9e78:	f001 852d 	beq.w	b8d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1ce2>
    9e7c:	e7d0      	b.n	9e20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xe, _, 9, 0xe) => {
    9e7e:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    9e82:	4601      	mov	r1, r0
    9e84:	2809      	cmp	r0, #9
    9e86:	f8cd 1420 	str.w	r1, [sp, #1056]	; 0x420
    9e8a:	d006      	beq.n	9e9a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a6>
    9e8c:	e7ff      	b.n	9e8e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x29a>
    9e8e:	f8dd 0420 	ldr.w	r0, [sp, #1056]	; 0x420
    9e92:	b281      	uxth	r1, r0
    9e94:	290a      	cmp	r1, #10
    9e96:	d006      	beq.n	9ea6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b2>
    9e98:	e7c2      	b.n	9e20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    9e9a:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9e9e:	280e      	cmp	r0, #14
    9ea0:	f002 814a 	beq.w	c138 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2544>
    9ea4:	e7bc      	b.n	9e20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xe, _, 0xa, 0x1) => {
    9ea6:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9eaa:	2801      	cmp	r0, #1
    9eac:	f002 81ea 	beq.w	c284 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2690>
    9eb0:	e7b6      	b.n	9e20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 0, 7) => {
    9eb2:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    9eb6:	4601      	mov	r1, r0
    9eb8:	2806      	cmp	r0, #6
    9eba:	f8cd 141c 	str.w	r1, [sp, #1052]	; 0x41c
    9ebe:	d8af      	bhi.n	9e20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    9ec0:	f8dd 141c 	ldr.w	r1, [sp, #1052]	; 0x41c
    9ec4:	e8df f001 	tbb	[pc, r1]
    9ec8:	322c1505 	.word	0x322c1505
    9ecc:	003e3804 	.word	0x003e3804
    9ed0:	e7a6      	b.n	9e20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    9ed2:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9ed6:	4601      	mov	r1, r0
    9ed8:	2807      	cmp	r0, #7
    9eda:	f8cd 1418 	str.w	r1, [sp, #1048]	; 0x418
    9ede:	f002 8277 	beq.w	c3d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27dc>
    9ee2:	e7ff      	b.n	9ee4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f0>
    9ee4:	f8dd 0418 	ldr.w	r0, [sp, #1048]	; 0x418
    9ee8:	b281      	uxth	r1, r0
    9eea:	290a      	cmp	r1, #10
    9eec:	f002 8309 	beq.w	c502 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x290e>
    9ef0:	e796      	b.n	9e20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 1, 5) => {
    9ef2:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9ef6:	4601      	mov	r1, r0
    9ef8:	2805      	cmp	r0, #5
    9efa:	f8cd 1414 	str.w	r1, [sp, #1044]	; 0x414
    9efe:	f002 839a 	beq.w	c636 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a42>
    9f02:	e7ff      	b.n	9f04 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x310>
    9f04:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    9f08:	b281      	uxth	r1, r0
    9f0a:	2908      	cmp	r1, #8
    9f0c:	f002 8428 	beq.w	c760 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b6c>
    9f10:	e7ff      	b.n	9f12 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31e>
    9f12:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    9f16:	b281      	uxth	r1, r0
    9f18:	290e      	cmp	r1, #14
    9f1a:	f002 84b6 	beq.w	c88a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c96>
    9f1e:	e77f      	b.n	9e20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 2, 9) => {
    9f20:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9f24:	2809      	cmp	r0, #9
    9f26:	f002 8554 	beq.w	c9d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2dde>
    9f2a:	e779      	b.n	9e20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 3, 3) => {
    9f2c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9f30:	2803      	cmp	r0, #3
    9f32:	f002 85ff 	beq.w	cb34 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f40>
    9f36:	e773      	b.n	9e20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 5, 5) => {
    9f38:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9f3c:	2805      	cmp	r0, #5
    9f3e:	f002 8708 	beq.w	cd52 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x315e>
    9f42:	e76d      	b.n	9e20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 6, 5) => {
    9f44:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9f48:	2805      	cmp	r0, #5
    9f4a:	f002 87e5 	beq.w	cf18 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3324>
    9f4e:	e767      	b.n	9e20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    9f50:	2005      	movs	r0, #5
    9f52:	f8cd 04a0 	str.w	r0, [sp, #1184]	; 0x4a0
    9f56:	f64d 6030 	movw	r0, #56880	; 0xde30
    9f5a:	f2c0 0001 	movt	r0, #1
    9f5e:	6801      	ldr	r1, [r0, #0]
    9f60:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    9f64:	f008 fda0 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    9f68:	f8cd 0410 	str.w	r0, [sp, #1040]	; 0x410
    9f6c:	e01f      	b.n	9fae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3ba>
    9f6e:	2001      	movs	r0, #1
    9f70:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    9f74:	e015      	b.n	9fa2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3ae>
    9f76:	2000      	movs	r0, #0
    9f78:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    9f7c:	e011      	b.n	9fa2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3ae>
    9f7e:	2000      	movs	r0, #0
/// [`debug!`]: macro.debug.html
/// [`trace!`]: macro.trace.html
/// [`set_max_level`]: fn.set_max_level.html
#[inline(always)]
pub fn max_level() -> LevelFilter {
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
    9f80:	f88d 0dab 	strb.w	r0, [sp, #3499]	; 0xdab
    9f84:	f89d 1dab 	ldrb.w	r1, [sp, #3499]	; 0xdab
    9f88:	f640 2000 	movw	r0, #2560	; 0xa00
    9f8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9f90:	f008 fd96 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    9f94:	f8cd 0dac 	str.w	r0, [sp, #3500]	; 0xdac
    9f98:	f8dd 0dac 	ldr.w	r0, [sp, #3500]	; 0xdac
    9f9c:	f8cd 04a8 	str.w	r0, [sp, #1192]	; 0x4a8
    9fa0:	e00b      	b.n	9fba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3c6>
    9fa2:	f89d 04a7 	ldrb.w	r0, [sp, #1191]	; 0x4a7
    9fa6:	07c0      	lsls	r0, r0, #31
    9fa8:	2800      	cmp	r0, #0
    9faa:	d115      	bne.n	9fd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3e4>
    9fac:	e05e      	b.n	a06c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x478>
    9fae:	f8dd 0410 	ldr.w	r0, [sp, #1040]	; 0x410
    9fb2:	07c1      	lsls	r1, r0, #31
    9fb4:	2900      	cmp	r1, #0
    9fb6:	d1e2      	bne.n	9f7e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38a>
    9fb8:	e7dd      	b.n	9f76 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x382>
    9fba:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    9fbe:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
    9fc2:	f008 fd71 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    9fc6:	f8cd 040c 	str.w	r0, [sp, #1036]	; 0x40c
    9fca:	e7ff      	b.n	9fcc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3d8>
    9fcc:	f8dd 040c 	ldr.w	r0, [sp, #1036]	; 0x40c
    9fd0:	07c1      	lsls	r1, r0, #31
    9fd2:	2900      	cmp	r1, #0
    9fd4:	d1cb      	bne.n	9f6e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x37a>
    9fd6:	e7ce      	b.n	9f76 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x382>
                trace!("[{:04x}] CLS", self.pc);
    9fd8:	f64e 4078 	movw	r0, #60536	; 0xec78
    9fdc:	f2c0 0001 	movt	r0, #1
    9fe0:	6801      	ldr	r1, [r0, #0]
    9fe2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    9fe6:	f100 0212 	add.w	r2, r0, #18
    9fea:	f8cd 24cc 	str.w	r2, [sp, #1228]	; 0x4cc
    9fee:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
    9ff2:	f8cd 2d88 	str.w	r2, [sp, #3464]	; 0xd88
    9ff6:	f248 230f 	movw	r3, #33295	; 0x820f
    9ffa:	f2c0 0301 	movt	r3, #1
    9ffe:	4610      	mov	r0, r2
    a000:	f8cd 1408 	str.w	r1, [sp, #1032]	; 0x408
    a004:	4619      	mov	r1, r3
    a006:	f007 fe6d 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a00a:	f8cd 0404 	str.w	r0, [sp, #1028]	; 0x404
    a00e:	f8cd 1400 	str.w	r1, [sp, #1024]	; 0x400
    a012:	e7ff      	b.n	a014 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x420>
    a014:	f8dd 0404 	ldr.w	r0, [sp, #1028]	; 0x404
    a018:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
    a01c:	f8dd 1400 	ldr.w	r1, [sp, #1024]	; 0x400
    a020:	f8cd 14c8 	str.w	r1, [sp, #1224]	; 0x4c8
    a024:	f64d 6278 	movw	r2, #56952	; 0xde78
    a028:	f2c0 0201 	movt	r2, #1
    a02c:	6812      	ldr	r2, [r2, #0]
    a02e:	466b      	mov	r3, sp
    a030:	f04f 0c01 	mov.w	ip, #1
    a034:	f8c3 c008 	str.w	ip, [r3, #8]
    a038:	605a      	str	r2, [r3, #4]
    a03a:	f8c3 c000 	str.w	ip, [r3]
    a03e:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    a042:	2202      	movs	r2, #2
    a044:	f20d 43c4 	addw	r3, sp, #1220	; 0x4c4
    a048:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    a04c:	f003 fef5 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a050:	e7ff      	b.n	a052 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x45e>
    a052:	f8dd 14a0 	ldr.w	r1, [sp, #1184]	; 0x4a0
    a056:	f64e 4098 	movw	r0, #60568	; 0xec98
    a05a:	f2c0 0001 	movt	r0, #1
    a05e:	6802      	ldr	r2, [r0, #0]
    a060:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    a064:	f004 feb5 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a068:	e7ff      	b.n	a06a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x476>
    a06a:	e7ff      	b.n	a06c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x478>
                let (w, h) = self.hw.vram_size();
    a06c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a070:	f7ff fc60 	bl	9934 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hd317927185b0114cE>
    a074:	90ff      	str	r0, [sp, #1020]	; 0x3fc
    a076:	91fe      	str	r1, [sp, #1016]	; 0x3f8
    a078:	e7ff      	b.n	a07a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x486>
    a07a:	98ff      	ldr	r0, [sp, #1020]	; 0x3fc
    a07c:	f8cd 0d8c 	str.w	r0, [sp, #3468]	; 0xd8c
    a080:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
    a082:	f8cd 14d0 	str.w	r1, [sp, #1232]	; 0x4d0
    a086:	2200      	movs	r2, #0
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    a088:	f8cd 2538 	str.w	r2, [sp, #1336]	; 0x538
    a08c:	f8cd 053c 	str.w	r0, [sp, #1340]	; 0x53c
    a090:	f50d 629a 	add.w	r2, sp, #1232	; 0x4d0
    a094:	f8cd 2540 	str.w	r2, [sp, #1344]	; 0x540
    a098:	f8dd 1538 	ldr.w	r1, [sp, #1336]	; 0x538
    a09c:	f8dd 253c 	ldr.w	r2, [sp, #1340]	; 0x53c
    a0a0:	f8dd 3540 	ldr.w	r3, [sp, #1344]	; 0x540
    a0a4:	f20d 502c 	addw	r0, sp, #1324	; 0x52c
    a0a8:	f008 fe7d 	bl	12da6 <_ZN4core4iter6traits8iterator8Iterator3map17h39af250ef60ec852E>
    a0ac:	e7ff      	b.n	a0ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4ba>
    a0ae:	f50d 60a0 	add.w	r0, sp, #1280	; 0x500
    a0b2:	f20d 512c 	addw	r1, sp, #1324	; 0x52c
    a0b6:	f003 fd90 	bl	dbda <_ZN4core4iter6traits8iterator8Iterator7flatten17h790b24ffb57b6bb2E>
    a0ba:	e7ff      	b.n	a0bc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4c8>
    a0bc:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    a0c0:	f50d 61a0 	add.w	r1, sp, #1280	; 0x500
    a0c4:	f003 feaf 	bl	de26 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0a1a9897cf1e3266E>
    a0c8:	e7ff      	b.n	a0ca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4d6>
    a0ca:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    a0ce:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    a0d2:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
    a0d6:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
    a0da:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
    a0de:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
    a0e2:	e7ff      	b.n	a0e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4f0>
    a0e4:	f50d 60ae 	add.w	r0, sp, #1392	; 0x570
    a0e8:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    a0ec:	f003 fdc8 	bl	dc80 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5923d182d43571feE>
    a0f0:	e7ff      	b.n	a0f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4fe>
    a0f2:	f8dd 0570 	ldr.w	r0, [sp, #1392]	; 0x570
    a0f6:	2800      	cmp	r0, #0
    a0f8:	d001      	beq.n	a0fe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x50a>
    a0fa:	e7ff      	b.n	a0fc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x508>
    a0fc:	e002      	b.n	a104 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x510>
        match (
    a0fe:	f003 b82f 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    a102:	defe      	udf	#254	; 0xfe
    a104:	f8dd 0574 	ldr.w	r0, [sp, #1396]	; 0x574
    a108:	f8dd 1578 	ldr.w	r1, [sp, #1400]	; 0x578
    a10c:	f8cd 0d90 	str.w	r0, [sp, #3472]	; 0xd90
    a110:	f8cd 1d94 	str.w	r1, [sp, #3476]	; 0xd94
    a114:	f8cd 0d98 	str.w	r0, [sp, #3480]	; 0xd98
    a118:	f8cd 1d9c 	str.w	r1, [sp, #3484]	; 0xd9c
    a11c:	f8cd 0da0 	str.w	r0, [sp, #3488]	; 0xda0
    a120:	f8cd 1da4 	str.w	r1, [sp, #3492]	; 0xda4
    a124:	2300      	movs	r3, #0
                    self.hw.vram_set(x, y, false);
    a126:	f8dd 2490 	ldr.w	r2, [sp, #1168]	; 0x490
    a12a:	90fd      	str	r0, [sp, #1012]	; 0x3f4
    a12c:	4610      	mov	r0, r2
    a12e:	f8dd c3f4 	ldr.w	ip, [sp, #1012]	; 0x3f4
    a132:	91fc      	str	r1, [sp, #1008]	; 0x3f0
    a134:	4661      	mov	r1, ip
    a136:	9afc      	ldr	r2, [sp, #1008]	; 0x3f0
    a138:	f7ff fa43 	bl	95c2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E>
    a13c:	e7ff      	b.n	a13e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x54a>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    a13e:	e7d1      	b.n	a0e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4f0>
    a140:	2005      	movs	r0, #5
    a142:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
    a146:	f64d 6030 	movw	r0, #56880	; 0xde30
    a14a:	f2c0 0001 	movt	r0, #1
    a14e:	6801      	ldr	r1, [r0, #0]
    a150:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    a154:	f008 fca8 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a158:	90fb      	str	r0, [sp, #1004]	; 0x3ec
    a15a:	e01f      	b.n	a19c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x5a8>
    a15c:	2001      	movs	r0, #1
    a15e:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    a162:	e015      	b.n	a190 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x59c>
    a164:	2000      	movs	r0, #0
    a166:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    a16a:	e011      	b.n	a190 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x59c>
    a16c:	2000      	movs	r0, #0
    a16e:	f88d 0db3 	strb.w	r0, [sp, #3507]	; 0xdb3
    a172:	f89d 1db3 	ldrb.w	r1, [sp, #3507]	; 0xdb3
    a176:	f640 2000 	movw	r0, #2560	; 0xa00
    a17a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a17e:	f008 fc9f 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a182:	f8cd 0db4 	str.w	r0, [sp, #3508]	; 0xdb4
    a186:	f8dd 0db4 	ldr.w	r0, [sp, #3508]	; 0xdb4
    a18a:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
    a18e:	e00a      	b.n	a1a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x5b2>
    a190:	f89d 0583 	ldrb.w	r0, [sp, #1411]	; 0x583
    a194:	07c0      	lsls	r0, r0, #31
    a196:	2800      	cmp	r0, #0
    a198:	d112      	bne.n	a1c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x5cc>
    a19a:	e055      	b.n	a248 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x654>
    a19c:	98fb      	ldr	r0, [sp, #1004]	; 0x3ec
    a19e:	07c1      	lsls	r1, r0, #31
    a1a0:	2900      	cmp	r1, #0
    a1a2:	d1e3      	bne.n	a16c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x578>
    a1a4:	e7de      	b.n	a164 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x570>
    a1a6:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    a1aa:	f20d 5184 	addw	r1, sp, #1412	; 0x584
    a1ae:	f008 fc7b 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a1b2:	90fa      	str	r0, [sp, #1000]	; 0x3e8
    a1b4:	e7ff      	b.n	a1b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x5c2>
    a1b6:	98fa      	ldr	r0, [sp, #1000]	; 0x3e8
    a1b8:	07c1      	lsls	r1, r0, #31
    a1ba:	2900      	cmp	r1, #0
    a1bc:	d1ce      	bne.n	a15c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x568>
    a1be:	e7d1      	b.n	a164 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x570>
                trace!("[{:04x}] RET", self.pc);
    a1c0:	f64e 403c 	movw	r0, #60476	; 0xec3c
    a1c4:	f2c0 0001 	movt	r0, #1
    a1c8:	6801      	ldr	r1, [r0, #0]
    a1ca:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a1ce:	f100 0212 	add.w	r2, r0, #18
    a1d2:	f8cd 25a8 	str.w	r2, [sp, #1448]	; 0x5a8
    a1d6:	f8dd 25a8 	ldr.w	r2, [sp, #1448]	; 0x5a8
    a1da:	f8cd 2d80 	str.w	r2, [sp, #3456]	; 0xd80
    a1de:	f248 230f 	movw	r3, #33295	; 0x820f
    a1e2:	f2c0 0301 	movt	r3, #1
    a1e6:	4610      	mov	r0, r2
    a1e8:	91f9      	str	r1, [sp, #996]	; 0x3e4
    a1ea:	4619      	mov	r1, r3
    a1ec:	f007 fd7a 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a1f0:	90f8      	str	r0, [sp, #992]	; 0x3e0
    a1f2:	91f7      	str	r1, [sp, #988]	; 0x3dc
    a1f4:	e7ff      	b.n	a1f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x602>
    a1f6:	98f8      	ldr	r0, [sp, #992]	; 0x3e0
    a1f8:	f8cd 05a0 	str.w	r0, [sp, #1440]	; 0x5a0
    a1fc:	99f7      	ldr	r1, [sp, #988]	; 0x3dc
    a1fe:	f8cd 15a4 	str.w	r1, [sp, #1444]	; 0x5a4
    a202:	f64d 6278 	movw	r2, #56952	; 0xde78
    a206:	f2c0 0201 	movt	r2, #1
    a20a:	6812      	ldr	r2, [r2, #0]
    a20c:	466b      	mov	r3, sp
    a20e:	f04f 0c01 	mov.w	ip, #1
    a212:	f8c3 c008 	str.w	ip, [r3, #8]
    a216:	605a      	str	r2, [r3, #4]
    a218:	f8c3 c000 	str.w	ip, [r3]
    a21c:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    a220:	2202      	movs	r2, #2
    a222:	f50d 63b4 	add.w	r3, sp, #1440	; 0x5a0
    a226:	99f9      	ldr	r1, [sp, #996]	; 0x3e4
    a228:	f003 fe07 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a22c:	e7ff      	b.n	a22e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x63a>
    a22e:	f8dd 157c 	ldr.w	r1, [sp, #1404]	; 0x57c
    a232:	f64e 405c 	movw	r0, #60508	; 0xec5c
    a236:	f2c0 0001 	movt	r0, #1
    a23a:	6802      	ldr	r2, [r0, #0]
    a23c:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    a240:	f004 fdc7 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a244:	e7ff      	b.n	a246 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x652>
    a246:	e7ff      	b.n	a248 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x654>
                let addr = self.pop();
    a248:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a24c:	f7ff fc7d 	bl	9b4a <_ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E>
    a250:	4601      	mov	r1, r0
    a252:	f8ad 0d86 	strh.w	r0, [sp, #3462]	; 0xd86
    a256:	91f6      	str	r1, [sp, #984]	; 0x3d8
    a258:	e7ff      	b.n	a25a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x666>
                self.jump(addr);
    a25a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a25e:	99f6      	ldr	r1, [sp, #984]	; 0x3d8
    a260:	f003 fa6d 	bl	d73e <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>
    a264:	e7ff      	b.n	a266 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x672>
        match (
    a266:	f002 bf7b 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a26a:	2005      	movs	r0, #5
    a26c:	f8cd 05ac 	str.w	r0, [sp, #1452]	; 0x5ac
    a270:	f64d 6030 	movw	r0, #56880	; 0xde30
    a274:	f2c0 0001 	movt	r0, #1
    a278:	6801      	ldr	r1, [r0, #0]
    a27a:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    a27e:	f008 fc13 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a282:	90f5      	str	r0, [sp, #980]	; 0x3d4
    a284:	e01f      	b.n	a2c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6d2>
    a286:	2001      	movs	r0, #1
    a288:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    a28c:	e015      	b.n	a2ba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6c6>
    a28e:	2000      	movs	r0, #0
    a290:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    a294:	e011      	b.n	a2ba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6c6>
    a296:	2000      	movs	r0, #0
    a298:	f88d 0dbb 	strb.w	r0, [sp, #3515]	; 0xdbb
    a29c:	f89d 1dbb 	ldrb.w	r1, [sp, #3515]	; 0xdbb
    a2a0:	f640 2000 	movw	r0, #2560	; 0xa00
    a2a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a2a8:	f008 fc0a 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a2ac:	f8cd 0dbc 	str.w	r0, [sp, #3516]	; 0xdbc
    a2b0:	f8dd 0dbc 	ldr.w	r0, [sp, #3516]	; 0xdbc
    a2b4:	f8cd 05b4 	str.w	r0, [sp, #1460]	; 0x5b4
    a2b8:	e00a      	b.n	a2d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6dc>
    a2ba:	f89d 05b3 	ldrb.w	r0, [sp, #1459]	; 0x5b3
    a2be:	07c0      	lsls	r0, r0, #31
    a2c0:	2800      	cmp	r0, #0
    a2c2:	d112      	bne.n	a2ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6f6>
    a2c4:	e055      	b.n	a372 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x77e>
    a2c6:	98f5      	ldr	r0, [sp, #980]	; 0x3d4
    a2c8:	07c1      	lsls	r1, r0, #31
    a2ca:	2900      	cmp	r1, #0
    a2cc:	d1e3      	bne.n	a296 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6a2>
    a2ce:	e7de      	b.n	a28e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x69a>
    a2d0:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    a2d4:	f20d 51b4 	addw	r1, sp, #1460	; 0x5b4
    a2d8:	f008 fbe6 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a2dc:	90f4      	str	r0, [sp, #976]	; 0x3d0
    a2de:	e7ff      	b.n	a2e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6ec>
    a2e0:	98f4      	ldr	r0, [sp, #976]	; 0x3d0
    a2e2:	07c1      	lsls	r1, r0, #31
    a2e4:	2900      	cmp	r1, #0
    a2e6:	d1ce      	bne.n	a286 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x692>
    a2e8:	e7d1      	b.n	a28e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x69a>
                trace!("[{:04x}] SYS nnn", self.pc);
    a2ea:	f64e 30e0 	movw	r0, #60384	; 0xebe0
    a2ee:	f2c0 0001 	movt	r0, #1
    a2f2:	6801      	ldr	r1, [r0, #0]
    a2f4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a2f8:	f100 0212 	add.w	r2, r0, #18
    a2fc:	f8cd 25d8 	str.w	r2, [sp, #1496]	; 0x5d8
    a300:	f8dd 25d8 	ldr.w	r2, [sp, #1496]	; 0x5d8
    a304:	f8cd 2d7c 	str.w	r2, [sp, #3452]	; 0xd7c
    a308:	f248 230f 	movw	r3, #33295	; 0x820f
    a30c:	f2c0 0301 	movt	r3, #1
    a310:	4610      	mov	r0, r2
    a312:	91f3      	str	r1, [sp, #972]	; 0x3cc
    a314:	4619      	mov	r1, r3
    a316:	f007 fce5 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a31a:	90f2      	str	r0, [sp, #968]	; 0x3c8
    a31c:	91f1      	str	r1, [sp, #964]	; 0x3c4
    a31e:	e7ff      	b.n	a320 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x72c>
    a320:	98f2      	ldr	r0, [sp, #968]	; 0x3c8
    a322:	f8cd 05d0 	str.w	r0, [sp, #1488]	; 0x5d0
    a326:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
    a328:	f8cd 15d4 	str.w	r1, [sp, #1492]	; 0x5d4
    a32c:	f64d 6278 	movw	r2, #56952	; 0xde78
    a330:	f2c0 0201 	movt	r2, #1
    a334:	6812      	ldr	r2, [r2, #0]
    a336:	466b      	mov	r3, sp
    a338:	f04f 0c01 	mov.w	ip, #1
    a33c:	f8c3 c008 	str.w	ip, [r3, #8]
    a340:	605a      	str	r2, [r3, #4]
    a342:	f8c3 c000 	str.w	ip, [r3]
    a346:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    a34a:	2202      	movs	r2, #2
    a34c:	f50d 63ba 	add.w	r3, sp, #1488	; 0x5d0
    a350:	99f3      	ldr	r1, [sp, #972]	; 0x3cc
    a352:	f003 fd72 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a356:	e7ff      	b.n	a358 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x764>
    a358:	f8dd 15ac 	ldr.w	r1, [sp, #1452]	; 0x5ac
    a35c:	f64e 4000 	movw	r0, #60416	; 0xec00
    a360:	f2c0 0001 	movt	r0, #1
    a364:	6802      	ldr	r2, [r0, #0]
    a366:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    a36a:	f004 fd32 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a36e:	e7ff      	b.n	a370 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x77c>
    a370:	e7ff      	b.n	a372 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x77e>
    a372:	f64e 4004 	movw	r0, #60420	; 0xec04
    a376:	f2c0 0001 	movt	r0, #1
    a37a:	f64e 4214 	movw	r2, #60436	; 0xec14
    a37e:	f2c0 0201 	movt	r2, #1
    a382:	210f      	movs	r1, #15
    a384:	f00c fb36 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    a388:	defe      	udf	#254	; 0xfe
    a38a:	2005      	movs	r0, #5
    a38c:	f8cd 05dc 	str.w	r0, [sp, #1500]	; 0x5dc
    a390:	f64d 6030 	movw	r0, #56880	; 0xde30
    a394:	f2c0 0001 	movt	r0, #1
    a398:	6801      	ldr	r1, [r0, #0]
    a39a:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    a39e:	f008 fb83 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a3a2:	90f0      	str	r0, [sp, #960]	; 0x3c0
    a3a4:	e01f      	b.n	a3e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7f2>
    a3a6:	2001      	movs	r0, #1
    a3a8:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    a3ac:	e015      	b.n	a3da <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7e6>
    a3ae:	2000      	movs	r0, #0
    a3b0:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    a3b4:	e011      	b.n	a3da <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7e6>
    a3b6:	2000      	movs	r0, #0
    a3b8:	f88d 0dc3 	strb.w	r0, [sp, #3523]	; 0xdc3
    a3bc:	f89d 1dc3 	ldrb.w	r1, [sp, #3523]	; 0xdc3
    a3c0:	f640 2000 	movw	r0, #2560	; 0xa00
    a3c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a3c8:	f008 fb7a 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a3cc:	f8cd 0dc4 	str.w	r0, [sp, #3524]	; 0xdc4
    a3d0:	f8dd 0dc4 	ldr.w	r0, [sp, #3524]	; 0xdc4
    a3d4:	f8cd 05e4 	str.w	r0, [sp, #1508]	; 0x5e4
    a3d8:	e00a      	b.n	a3f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7fc>
    a3da:	f89d 05e3 	ldrb.w	r0, [sp, #1507]	; 0x5e3
    a3de:	07c0      	lsls	r0, r0, #31
    a3e0:	2800      	cmp	r0, #0
    a3e2:	d112      	bne.n	a40a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x816>
    a3e4:	e055      	b.n	a492 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x89e>
    a3e6:	98f0      	ldr	r0, [sp, #960]	; 0x3c0
    a3e8:	07c1      	lsls	r1, r0, #31
    a3ea:	2900      	cmp	r1, #0
    a3ec:	d1e3      	bne.n	a3b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7c2>
    a3ee:	e7de      	b.n	a3ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7ba>
    a3f0:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    a3f4:	f20d 51e4 	addw	r1, sp, #1508	; 0x5e4
    a3f8:	f008 fb56 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a3fc:	90ef      	str	r0, [sp, #956]	; 0x3bc
    a3fe:	e7ff      	b.n	a400 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x80c>
    a400:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
    a402:	07c1      	lsls	r1, r0, #31
    a404:	2900      	cmp	r1, #0
    a406:	d1ce      	bne.n	a3a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7b2>
    a408:	e7d1      	b.n	a3ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7ba>
                trace!("[{:04x}] JP nnn", self.pc);
    a40a:	f64e 30a0 	movw	r0, #60320	; 0xeba0
    a40e:	f2c0 0001 	movt	r0, #1
    a412:	6801      	ldr	r1, [r0, #0]
    a414:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a418:	f100 0212 	add.w	r2, r0, #18
    a41c:	f8cd 2608 	str.w	r2, [sp, #1544]	; 0x608
    a420:	f8dd 2608 	ldr.w	r2, [sp, #1544]	; 0x608
    a424:	f8cd 2d78 	str.w	r2, [sp, #3448]	; 0xd78
    a428:	f248 230f 	movw	r3, #33295	; 0x820f
    a42c:	f2c0 0301 	movt	r3, #1
    a430:	4610      	mov	r0, r2
    a432:	91ee      	str	r1, [sp, #952]	; 0x3b8
    a434:	4619      	mov	r1, r3
    a436:	f007 fc55 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a43a:	90ed      	str	r0, [sp, #948]	; 0x3b4
    a43c:	91ec      	str	r1, [sp, #944]	; 0x3b0
    a43e:	e7ff      	b.n	a440 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x84c>
    a440:	98ed      	ldr	r0, [sp, #948]	; 0x3b4
    a442:	f8cd 0600 	str.w	r0, [sp, #1536]	; 0x600
    a446:	99ec      	ldr	r1, [sp, #944]	; 0x3b0
    a448:	f8cd 1604 	str.w	r1, [sp, #1540]	; 0x604
    a44c:	f64d 6278 	movw	r2, #56952	; 0xde78
    a450:	f2c0 0201 	movt	r2, #1
    a454:	6812      	ldr	r2, [r2, #0]
    a456:	466b      	mov	r3, sp
    a458:	f04f 0c01 	mov.w	ip, #1
    a45c:	f8c3 c008 	str.w	ip, [r3, #8]
    a460:	605a      	str	r2, [r3, #4]
    a462:	f8c3 c000 	str.w	ip, [r3]
    a466:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    a46a:	2202      	movs	r2, #2
    a46c:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
    a470:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
    a472:	f003 fce2 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a476:	e7ff      	b.n	a478 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x884>
    a478:	f8dd 15dc 	ldr.w	r1, [sp, #1500]	; 0x5dc
    a47c:	f64e 30c0 	movw	r0, #60352	; 0xebc0
    a480:	f2c0 0001 	movt	r0, #1
    a484:	6802      	ldr	r2, [r0, #0]
    a486:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    a48a:	f004 fca2 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a48e:	e7ff      	b.n	a490 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x89c>
    a490:	e7ff      	b.n	a492 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x89e>
    a492:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    a494:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    a498:	f008 fbff 	bl	12c9a <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E>
    a49c:	90eb      	str	r0, [sp, #940]	; 0x3ac
    a49e:	e7ff      	b.n	a4a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8ac>
    a4a0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a4a4:	99eb      	ldr	r1, [sp, #940]	; 0x3ac
    a4a6:	f003 f94a 	bl	d73e <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>
    a4aa:	e7ff      	b.n	a4ac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8b8>
        match (
    a4ac:	f002 be58 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a4b0:	2005      	movs	r0, #5
    a4b2:	f8cd 060c 	str.w	r0, [sp, #1548]	; 0x60c
    a4b6:	f64d 6030 	movw	r0, #56880	; 0xde30
    a4ba:	f2c0 0001 	movt	r0, #1
    a4be:	6801      	ldr	r1, [r0, #0]
    a4c0:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    a4c4:	f008 faf0 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a4c8:	90ea      	str	r0, [sp, #936]	; 0x3a8
    a4ca:	e01f      	b.n	a50c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x918>
    a4cc:	2001      	movs	r0, #1
    a4ce:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    a4d2:	e015      	b.n	a500 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x90c>
    a4d4:	2000      	movs	r0, #0
    a4d6:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    a4da:	e011      	b.n	a500 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x90c>
    a4dc:	2000      	movs	r0, #0
    a4de:	f88d 0dcb 	strb.w	r0, [sp, #3531]	; 0xdcb
    a4e2:	f89d 1dcb 	ldrb.w	r1, [sp, #3531]	; 0xdcb
    a4e6:	f640 2000 	movw	r0, #2560	; 0xa00
    a4ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a4ee:	f008 fae7 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a4f2:	f8cd 0dcc 	str.w	r0, [sp, #3532]	; 0xdcc
    a4f6:	f8dd 0dcc 	ldr.w	r0, [sp, #3532]	; 0xdcc
    a4fa:	f8cd 0614 	str.w	r0, [sp, #1556]	; 0x614
    a4fe:	e00a      	b.n	a516 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x922>
    a500:	f89d 0613 	ldrb.w	r0, [sp, #1555]	; 0x613
    a504:	07c0      	lsls	r0, r0, #31
    a506:	2800      	cmp	r0, #0
    a508:	d112      	bne.n	a530 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x93c>
    a50a:	e055      	b.n	a5b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9c4>
    a50c:	98ea      	ldr	r0, [sp, #936]	; 0x3a8
    a50e:	07c1      	lsls	r1, r0, #31
    a510:	2900      	cmp	r1, #0
    a512:	d1e3      	bne.n	a4dc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8e8>
    a514:	e7de      	b.n	a4d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8e0>
    a516:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    a51a:	f20d 6114 	addw	r1, sp, #1556	; 0x614
    a51e:	f008 fac3 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a522:	90e9      	str	r0, [sp, #932]	; 0x3a4
    a524:	e7ff      	b.n	a526 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x932>
    a526:	98e9      	ldr	r0, [sp, #932]	; 0x3a4
    a528:	07c1      	lsls	r1, r0, #31
    a52a:	2900      	cmp	r1, #0
    a52c:	d1ce      	bne.n	a4cc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8d8>
    a52e:	e7d1      	b.n	a4d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8e0>
                trace!("[{:04x}] CALL nnn", self.pc);
    a530:	f64e 306c 	movw	r0, #60268	; 0xeb6c
    a534:	f2c0 0001 	movt	r0, #1
    a538:	6801      	ldr	r1, [r0, #0]
    a53a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a53e:	f100 0212 	add.w	r2, r0, #18
    a542:	f8cd 2638 	str.w	r2, [sp, #1592]	; 0x638
    a546:	f8dd 2638 	ldr.w	r2, [sp, #1592]	; 0x638
    a54a:	f8cd 2d74 	str.w	r2, [sp, #3444]	; 0xd74
    a54e:	f248 230f 	movw	r3, #33295	; 0x820f
    a552:	f2c0 0301 	movt	r3, #1
    a556:	4610      	mov	r0, r2
    a558:	91e8      	str	r1, [sp, #928]	; 0x3a0
    a55a:	4619      	mov	r1, r3
    a55c:	f007 fbc2 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a560:	90e7      	str	r0, [sp, #924]	; 0x39c
    a562:	91e6      	str	r1, [sp, #920]	; 0x398
    a564:	e7ff      	b.n	a566 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x972>
    a566:	98e7      	ldr	r0, [sp, #924]	; 0x39c
    a568:	f8cd 0630 	str.w	r0, [sp, #1584]	; 0x630
    a56c:	99e6      	ldr	r1, [sp, #920]	; 0x398
    a56e:	f8cd 1634 	str.w	r1, [sp, #1588]	; 0x634
    a572:	f64d 6278 	movw	r2, #56952	; 0xde78
    a576:	f2c0 0201 	movt	r2, #1
    a57a:	6812      	ldr	r2, [r2, #0]
    a57c:	466b      	mov	r3, sp
    a57e:	f04f 0c01 	mov.w	ip, #1
    a582:	f8c3 c008 	str.w	ip, [r3, #8]
    a586:	605a      	str	r2, [r3, #4]
    a588:	f8c3 c000 	str.w	ip, [r3]
    a58c:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    a590:	2202      	movs	r2, #2
    a592:	f50d 63c6 	add.w	r3, sp, #1584	; 0x630
    a596:	99e8      	ldr	r1, [sp, #928]	; 0x3a0
    a598:	f003 fc4f 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a59c:	e7ff      	b.n	a59e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9aa>
    a59e:	f8dd 160c 	ldr.w	r1, [sp, #1548]	; 0x60c
    a5a2:	f64e 308c 	movw	r0, #60300	; 0xeb8c
    a5a6:	f2c0 0001 	movt	r0, #1
    a5aa:	6802      	ldr	r2, [r0, #0]
    a5ac:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    a5b0:	f004 fc0f 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a5b4:	e7ff      	b.n	a5b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9c2>
    a5b6:	e7ff      	b.n	a5b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9c4>
                self.push(self.pc);
    a5b8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a5bc:	8a41      	ldrh	r1, [r0, #18]
    a5be:	f003 f914 	bl	d7ea <_ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE>
    a5c2:	e7ff      	b.n	a5c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9d0>
    a5c4:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    a5c6:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    a5ca:	f008 fb66 	bl	12c9a <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E>
    a5ce:	90e5      	str	r0, [sp, #916]	; 0x394
    a5d0:	e7ff      	b.n	a5d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9de>
    a5d2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a5d6:	99e5      	ldr	r1, [sp, #916]	; 0x394
    a5d8:	f003 f8b1 	bl	d73e <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>
    a5dc:	e7ff      	b.n	a5de <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9ea>
        match (
    a5de:	f002 bdbf 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a5e2:	2005      	movs	r0, #5
    a5e4:	f8cd 063c 	str.w	r0, [sp, #1596]	; 0x63c
    a5e8:	f64d 6030 	movw	r0, #56880	; 0xde30
    a5ec:	f2c0 0001 	movt	r0, #1
    a5f0:	6801      	ldr	r1, [r0, #0]
    a5f2:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    a5f6:	f008 fa57 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a5fa:	90e4      	str	r0, [sp, #912]	; 0x390
    a5fc:	e01f      	b.n	a63e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa4a>
    a5fe:	2001      	movs	r0, #1
    a600:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    a604:	e015      	b.n	a632 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa3e>
    a606:	2000      	movs	r0, #0
    a608:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    a60c:	e011      	b.n	a632 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa3e>
    a60e:	2000      	movs	r0, #0
    a610:	f88d 0dd3 	strb.w	r0, [sp, #3539]	; 0xdd3
    a614:	f89d 1dd3 	ldrb.w	r1, [sp, #3539]	; 0xdd3
    a618:	f640 2000 	movw	r0, #2560	; 0xa00
    a61c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a620:	f008 fa4e 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a624:	f8cd 0dd4 	str.w	r0, [sp, #3540]	; 0xdd4
    a628:	f8dd 0dd4 	ldr.w	r0, [sp, #3540]	; 0xdd4
    a62c:	f8cd 0644 	str.w	r0, [sp, #1604]	; 0x644
    a630:	e00a      	b.n	a648 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa54>
    a632:	f89d 0643 	ldrb.w	r0, [sp, #1603]	; 0x643
    a636:	07c0      	lsls	r0, r0, #31
    a638:	2800      	cmp	r0, #0
    a63a:	d112      	bne.n	a662 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa6e>
    a63c:	e055      	b.n	a6ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xaf6>
    a63e:	98e4      	ldr	r0, [sp, #912]	; 0x390
    a640:	07c1      	lsls	r1, r0, #31
    a642:	2900      	cmp	r1, #0
    a644:	d1e3      	bne.n	a60e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa1a>
    a646:	e7de      	b.n	a606 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa12>
    a648:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    a64c:	f20d 6144 	addw	r1, sp, #1604	; 0x644
    a650:	f008 fa2a 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a654:	90e3      	str	r0, [sp, #908]	; 0x38c
    a656:	e7ff      	b.n	a658 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa64>
    a658:	98e3      	ldr	r0, [sp, #908]	; 0x38c
    a65a:	07c1      	lsls	r1, r0, #31
    a65c:	2900      	cmp	r1, #0
    a65e:	d1ce      	bne.n	a5fe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa0a>
    a660:	e7d1      	b.n	a606 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa12>
                trace!("[{:04x}] SE Vx kk", self.pc);
    a662:	f64e 301c 	movw	r0, #60188	; 0xeb1c
    a666:	f2c0 0001 	movt	r0, #1
    a66a:	6801      	ldr	r1, [r0, #0]
    a66c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a670:	f100 0212 	add.w	r2, r0, #18
    a674:	f8cd 2668 	str.w	r2, [sp, #1640]	; 0x668
    a678:	f8dd 2668 	ldr.w	r2, [sp, #1640]	; 0x668
    a67c:	f8cd 2d70 	str.w	r2, [sp, #3440]	; 0xd70
    a680:	f248 230f 	movw	r3, #33295	; 0x820f
    a684:	f2c0 0301 	movt	r3, #1
    a688:	4610      	mov	r0, r2
    a68a:	91e2      	str	r1, [sp, #904]	; 0x388
    a68c:	4619      	mov	r1, r3
    a68e:	f007 fb29 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a692:	90e1      	str	r0, [sp, #900]	; 0x384
    a694:	91e0      	str	r1, [sp, #896]	; 0x380
    a696:	e7ff      	b.n	a698 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xaa4>
    a698:	98e1      	ldr	r0, [sp, #900]	; 0x384
    a69a:	f8cd 0660 	str.w	r0, [sp, #1632]	; 0x660
    a69e:	99e0      	ldr	r1, [sp, #896]	; 0x380
    a6a0:	f8cd 1664 	str.w	r1, [sp, #1636]	; 0x664
    a6a4:	f64d 6278 	movw	r2, #56952	; 0xde78
    a6a8:	f2c0 0201 	movt	r2, #1
    a6ac:	6812      	ldr	r2, [r2, #0]
    a6ae:	466b      	mov	r3, sp
    a6b0:	f04f 0c01 	mov.w	ip, #1
    a6b4:	f8c3 c008 	str.w	ip, [r3, #8]
    a6b8:	605a      	str	r2, [r3, #4]
    a6ba:	f8c3 c000 	str.w	ip, [r3]
    a6be:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    a6c2:	2202      	movs	r2, #2
    a6c4:	f50d 63cc 	add.w	r3, sp, #1632	; 0x660
    a6c8:	99e2      	ldr	r1, [sp, #904]	; 0x388
    a6ca:	f003 fbb6 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a6ce:	e7ff      	b.n	a6d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xadc>
    a6d0:	f8dd 163c 	ldr.w	r1, [sp, #1596]	; 0x63c
    a6d4:	f64e 303c 	movw	r0, #60220	; 0xeb3c
    a6d8:	f2c0 0001 	movt	r0, #1
    a6dc:	6802      	ldr	r2, [r0, #0]
    a6de:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    a6e2:	f004 fb76 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a6e6:	e7ff      	b.n	a6e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xaf4>
    a6e8:	e7ff      	b.n	a6ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xaf6>
                if self.v[x] == kk {
    a6ea:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    a6ee:	280f      	cmp	r0, #15
    a6f0:	f202 87ff 	bhi.w	d6f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3afe>
    a6f4:	e7ff      	b.n	a6f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb02>
    a6f6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a6fa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    a6fe:	1842      	adds	r2, r0, r1
    a700:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    a704:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    a708:	fa5f fc83 	uxtb.w	ip, r3
    a70c:	4562      	cmp	r2, ip
    a70e:	d106      	bne.n	a71e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb2a>
    a710:	e7ff      	b.n	a712 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb1e>
                    self.next();
    a712:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a716:	f003 f855 	bl	d7c4 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    a71a:	e7ff      	b.n	a71c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb28>
                if self.v[x] == kk {
    a71c:	e7ff      	b.n	a71e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb2a>
        match (
    a71e:	f002 bd1f 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a722:	2005      	movs	r0, #5
    a724:	f8cd 066c 	str.w	r0, [sp, #1644]	; 0x66c
    a728:	f64d 6030 	movw	r0, #56880	; 0xde30
    a72c:	f2c0 0001 	movt	r0, #1
    a730:	6801      	ldr	r1, [r0, #0]
    a732:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    a736:	f008 f9b7 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a73a:	90df      	str	r0, [sp, #892]	; 0x37c
    a73c:	e01f      	b.n	a77e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb8a>
    a73e:	2001      	movs	r0, #1
    a740:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    a744:	e015      	b.n	a772 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb7e>
    a746:	2000      	movs	r0, #0
    a748:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    a74c:	e011      	b.n	a772 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb7e>
    a74e:	2000      	movs	r0, #0
    a750:	f88d 0ddb 	strb.w	r0, [sp, #3547]	; 0xddb
    a754:	f89d 1ddb 	ldrb.w	r1, [sp, #3547]	; 0xddb
    a758:	f640 2000 	movw	r0, #2560	; 0xa00
    a75c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a760:	f008 f9ae 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a764:	f8cd 0ddc 	str.w	r0, [sp, #3548]	; 0xddc
    a768:	f8dd 0ddc 	ldr.w	r0, [sp, #3548]	; 0xddc
    a76c:	f8cd 0674 	str.w	r0, [sp, #1652]	; 0x674
    a770:	e00a      	b.n	a788 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb94>
    a772:	f89d 0673 	ldrb.w	r0, [sp, #1651]	; 0x673
    a776:	07c0      	lsls	r0, r0, #31
    a778:	2800      	cmp	r0, #0
    a77a:	d112      	bne.n	a7a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xbae>
    a77c:	e055      	b.n	a82a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc36>
    a77e:	98df      	ldr	r0, [sp, #892]	; 0x37c
    a780:	07c1      	lsls	r1, r0, #31
    a782:	2900      	cmp	r1, #0
    a784:	d1e3      	bne.n	a74e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb5a>
    a786:	e7de      	b.n	a746 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb52>
    a788:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    a78c:	f20d 6174 	addw	r1, sp, #1652	; 0x674
    a790:	f008 f98a 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a794:	90de      	str	r0, [sp, #888]	; 0x378
    a796:	e7ff      	b.n	a798 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xba4>
    a798:	98de      	ldr	r0, [sp, #888]	; 0x378
    a79a:	07c1      	lsls	r1, r0, #31
    a79c:	2900      	cmp	r1, #0
    a79e:	d1ce      	bne.n	a73e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb4a>
    a7a0:	e7d1      	b.n	a746 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb52>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
    a7a2:	f64e 20cc 	movw	r0, #60108	; 0xeacc
    a7a6:	f2c0 0001 	movt	r0, #1
    a7aa:	6801      	ldr	r1, [r0, #0]
    a7ac:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a7b0:	f100 0212 	add.w	r2, r0, #18
    a7b4:	f8cd 2698 	str.w	r2, [sp, #1688]	; 0x698
    a7b8:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
    a7bc:	f8cd 2d6c 	str.w	r2, [sp, #3436]	; 0xd6c
    a7c0:	f248 230f 	movw	r3, #33295	; 0x820f
    a7c4:	f2c0 0301 	movt	r3, #1
    a7c8:	4610      	mov	r0, r2
    a7ca:	91dd      	str	r1, [sp, #884]	; 0x374
    a7cc:	4619      	mov	r1, r3
    a7ce:	f007 fa89 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a7d2:	90dc      	str	r0, [sp, #880]	; 0x370
    a7d4:	91db      	str	r1, [sp, #876]	; 0x36c
    a7d6:	e7ff      	b.n	a7d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xbe4>
    a7d8:	98dc      	ldr	r0, [sp, #880]	; 0x370
    a7da:	f8cd 0690 	str.w	r0, [sp, #1680]	; 0x690
    a7de:	99db      	ldr	r1, [sp, #876]	; 0x36c
    a7e0:	f8cd 1694 	str.w	r1, [sp, #1684]	; 0x694
    a7e4:	f64d 6278 	movw	r2, #56952	; 0xde78
    a7e8:	f2c0 0201 	movt	r2, #1
    a7ec:	6812      	ldr	r2, [r2, #0]
    a7ee:	466b      	mov	r3, sp
    a7f0:	f04f 0c01 	mov.w	ip, #1
    a7f4:	f8c3 c008 	str.w	ip, [r3, #8]
    a7f8:	605a      	str	r2, [r3, #4]
    a7fa:	f8c3 c000 	str.w	ip, [r3]
    a7fe:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    a802:	2202      	movs	r2, #2
    a804:	f50d 63d2 	add.w	r3, sp, #1680	; 0x690
    a808:	99dd      	ldr	r1, [sp, #884]	; 0x374
    a80a:	f003 fb16 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a80e:	e7ff      	b.n	a810 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc1c>
    a810:	f8dd 166c 	ldr.w	r1, [sp, #1644]	; 0x66c
    a814:	f64e 20ec 	movw	r0, #60140	; 0xeaec
    a818:	f2c0 0001 	movt	r0, #1
    a81c:	6802      	ldr	r2, [r0, #0]
    a81e:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    a822:	f004 fad6 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a826:	e7ff      	b.n	a828 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc34>
    a828:	e7ff      	b.n	a82a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc36>
                if self.v[x] != kk {
    a82a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    a82e:	280f      	cmp	r0, #15
    a830:	f202 8755 	bhi.w	d6de <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3aea>
    a834:	e7ff      	b.n	a836 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc42>
    a836:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a83a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    a83e:	1842      	adds	r2, r0, r1
    a840:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    a844:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    a848:	fa5f fc83 	uxtb.w	ip, r3
    a84c:	4562      	cmp	r2, ip
    a84e:	d006      	beq.n	a85e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc6a>
    a850:	e7ff      	b.n	a852 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc5e>
                    self.next();
    a852:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a856:	f002 ffb5 	bl	d7c4 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    a85a:	e7ff      	b.n	a85c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc68>
                if self.v[x] != kk {
    a85c:	e7ff      	b.n	a85e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc6a>
        match (
    a85e:	f002 bc7f 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a862:	2005      	movs	r0, #5
    a864:	f8cd 069c 	str.w	r0, [sp, #1692]	; 0x69c
    a868:	f64d 6030 	movw	r0, #56880	; 0xde30
    a86c:	f2c0 0001 	movt	r0, #1
    a870:	6801      	ldr	r1, [r0, #0]
    a872:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    a876:	f008 f917 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a87a:	90da      	str	r0, [sp, #872]	; 0x368
    a87c:	e01f      	b.n	a8be <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcca>
    a87e:	2001      	movs	r0, #1
    a880:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    a884:	e015      	b.n	a8b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcbe>
    a886:	2000      	movs	r0, #0
    a888:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    a88c:	e011      	b.n	a8b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcbe>
    a88e:	2000      	movs	r0, #0
    a890:	f88d 0de3 	strb.w	r0, [sp, #3555]	; 0xde3
    a894:	f89d 1de3 	ldrb.w	r1, [sp, #3555]	; 0xde3
    a898:	f640 2000 	movw	r0, #2560	; 0xa00
    a89c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a8a0:	f008 f90e 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a8a4:	f8cd 0de4 	str.w	r0, [sp, #3556]	; 0xde4
    a8a8:	f8dd 0de4 	ldr.w	r0, [sp, #3556]	; 0xde4
    a8ac:	f8cd 06a4 	str.w	r0, [sp, #1700]	; 0x6a4
    a8b0:	e00a      	b.n	a8c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcd4>
    a8b2:	f89d 06a3 	ldrb.w	r0, [sp, #1699]	; 0x6a3
    a8b6:	07c0      	lsls	r0, r0, #31
    a8b8:	2800      	cmp	r0, #0
    a8ba:	d112      	bne.n	a8e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcee>
    a8bc:	e055      	b.n	a96a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd76>
    a8be:	98da      	ldr	r0, [sp, #872]	; 0x368
    a8c0:	07c1      	lsls	r1, r0, #31
    a8c2:	2900      	cmp	r1, #0
    a8c4:	d1e3      	bne.n	a88e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc9a>
    a8c6:	e7de      	b.n	a886 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc92>
    a8c8:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    a8cc:	f20d 61a4 	addw	r1, sp, #1700	; 0x6a4
    a8d0:	f008 f8ea 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a8d4:	90d9      	str	r0, [sp, #868]	; 0x364
    a8d6:	e7ff      	b.n	a8d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xce4>
    a8d8:	98d9      	ldr	r0, [sp, #868]	; 0x364
    a8da:	07c1      	lsls	r1, r0, #31
    a8dc:	2900      	cmp	r1, #0
    a8de:	d1ce      	bne.n	a87e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc8a>
    a8e0:	e7d1      	b.n	a886 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc92>
                trace!("[{:04x}] SE Vx, Vy", self.pc);
    a8e2:	f64e 206c 	movw	r0, #60012	; 0xea6c
    a8e6:	f2c0 0001 	movt	r0, #1
    a8ea:	6801      	ldr	r1, [r0, #0]
    a8ec:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a8f0:	f100 0212 	add.w	r2, r0, #18
    a8f4:	f8cd 26c8 	str.w	r2, [sp, #1736]	; 0x6c8
    a8f8:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
    a8fc:	f8cd 2d68 	str.w	r2, [sp, #3432]	; 0xd68
    a900:	f248 230f 	movw	r3, #33295	; 0x820f
    a904:	f2c0 0301 	movt	r3, #1
    a908:	4610      	mov	r0, r2
    a90a:	91d8      	str	r1, [sp, #864]	; 0x360
    a90c:	4619      	mov	r1, r3
    a90e:	f007 f9e9 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a912:	90d7      	str	r0, [sp, #860]	; 0x35c
    a914:	91d6      	str	r1, [sp, #856]	; 0x358
    a916:	e7ff      	b.n	a918 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd24>
    a918:	98d7      	ldr	r0, [sp, #860]	; 0x35c
    a91a:	f8cd 06c0 	str.w	r0, [sp, #1728]	; 0x6c0
    a91e:	99d6      	ldr	r1, [sp, #856]	; 0x358
    a920:	f8cd 16c4 	str.w	r1, [sp, #1732]	; 0x6c4
    a924:	f64d 6278 	movw	r2, #56952	; 0xde78
    a928:	f2c0 0201 	movt	r2, #1
    a92c:	6812      	ldr	r2, [r2, #0]
    a92e:	466b      	mov	r3, sp
    a930:	f04f 0c01 	mov.w	ip, #1
    a934:	f8c3 c008 	str.w	ip, [r3, #8]
    a938:	605a      	str	r2, [r3, #4]
    a93a:	f8c3 c000 	str.w	ip, [r3]
    a93e:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    a942:	2202      	movs	r2, #2
    a944:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
    a948:	99d8      	ldr	r1, [sp, #864]	; 0x360
    a94a:	f003 fa76 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a94e:	e7ff      	b.n	a950 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd5c>
    a950:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
    a954:	f64e 208c 	movw	r0, #60044	; 0xea8c
    a958:	f2c0 0001 	movt	r0, #1
    a95c:	6802      	ldr	r2, [r0, #0]
    a95e:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    a962:	f004 fa36 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a966:	e7ff      	b.n	a968 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd74>
    a968:	e7ff      	b.n	a96a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd76>
                if self.v[x] == self.v[y] {
    a96a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    a96e:	280f      	cmp	r0, #15
    a970:	f202 86a1 	bhi.w	d6b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3ac2>
    a974:	e7ff      	b.n	a976 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd82>
    a976:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a97a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    a97e:	1842      	adds	r2, r0, r1
    a980:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    a984:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    a988:	2b0f      	cmp	r3, #15
    a98a:	92d5      	str	r2, [sp, #852]	; 0x354
    a98c:	f202 869d 	bhi.w	d6ca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3ad6>
    a990:	e7ff      	b.n	a992 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd9e>
    a992:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a996:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    a99a:	1842      	adds	r2, r0, r1
    a99c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    a9a0:	9bd5      	ldr	r3, [sp, #852]	; 0x354
    a9a2:	fa5f fc83 	uxtb.w	ip, r3
    a9a6:	4594      	cmp	ip, r2
    a9a8:	d106      	bne.n	a9b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdc4>
    a9aa:	e7ff      	b.n	a9ac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdb8>
                    self.next();
    a9ac:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a9b0:	f002 ff08 	bl	d7c4 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    a9b4:	e7ff      	b.n	a9b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdc2>
                if self.v[x] == self.v[y] {
    a9b6:	e7ff      	b.n	a9b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdc4>
        match (
    a9b8:	f002 bbd2 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a9bc:	2005      	movs	r0, #5
    a9be:	f8cd 06cc 	str.w	r0, [sp, #1740]	; 0x6cc
    a9c2:	f64d 6030 	movw	r0, #56880	; 0xde30
    a9c6:	f2c0 0001 	movt	r0, #1
    a9ca:	6801      	ldr	r1, [r0, #0]
    a9cc:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    a9d0:	f008 f86a 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a9d4:	90d4      	str	r0, [sp, #848]	; 0x350
    a9d6:	e01f      	b.n	aa18 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe24>
    a9d8:	2001      	movs	r0, #1
    a9da:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    a9de:	e015      	b.n	aa0c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe18>
    a9e0:	2000      	movs	r0, #0
    a9e2:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    a9e6:	e011      	b.n	aa0c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe18>
    a9e8:	2000      	movs	r0, #0
    a9ea:	f88d 0deb 	strb.w	r0, [sp, #3563]	; 0xdeb
    a9ee:	f89d 1deb 	ldrb.w	r1, [sp, #3563]	; 0xdeb
    a9f2:	f640 2000 	movw	r0, #2560	; 0xa00
    a9f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a9fa:	f008 f861 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a9fe:	f8cd 0dec 	str.w	r0, [sp, #3564]	; 0xdec
    aa02:	f8dd 0dec 	ldr.w	r0, [sp, #3564]	; 0xdec
    aa06:	f8cd 06d4 	str.w	r0, [sp, #1748]	; 0x6d4
    aa0a:	e00a      	b.n	aa22 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe2e>
    aa0c:	f89d 06d3 	ldrb.w	r0, [sp, #1747]	; 0x6d3
    aa10:	07c0      	lsls	r0, r0, #31
    aa12:	2800      	cmp	r0, #0
    aa14:	d112      	bne.n	aa3c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe48>
    aa16:	e055      	b.n	aac4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xed0>
    aa18:	98d4      	ldr	r0, [sp, #848]	; 0x350
    aa1a:	07c1      	lsls	r1, r0, #31
    aa1c:	2900      	cmp	r1, #0
    aa1e:	d1e3      	bne.n	a9e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdf4>
    aa20:	e7de      	b.n	a9e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdec>
    aa22:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    aa26:	f20d 61d4 	addw	r1, sp, #1748	; 0x6d4
    aa2a:	f008 f83d 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    aa2e:	90d3      	str	r0, [sp, #844]	; 0x34c
    aa30:	e7ff      	b.n	aa32 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe3e>
    aa32:	98d3      	ldr	r0, [sp, #844]	; 0x34c
    aa34:	07c1      	lsls	r1, r0, #31
    aa36:	2900      	cmp	r1, #0
    aa38:	d1ce      	bne.n	a9d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xde4>
    aa3a:	e7d1      	b.n	a9e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdec>
                trace!("[{:04x}] LD Vx, kk", self.pc);
    aa3c:	f64e 1084 	movw	r0, #59780	; 0xe984
    aa40:	f2c0 0001 	movt	r0, #1
    aa44:	6801      	ldr	r1, [r0, #0]
    aa46:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    aa4a:	f100 0212 	add.w	r2, r0, #18
    aa4e:	f8cd 26f8 	str.w	r2, [sp, #1784]	; 0x6f8
    aa52:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
    aa56:	f8cd 2d5c 	str.w	r2, [sp, #3420]	; 0xd5c
    aa5a:	f248 230f 	movw	r3, #33295	; 0x820f
    aa5e:	f2c0 0301 	movt	r3, #1
    aa62:	4610      	mov	r0, r2
    aa64:	91d2      	str	r1, [sp, #840]	; 0x348
    aa66:	4619      	mov	r1, r3
    aa68:	f007 f93c 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    aa6c:	90d1      	str	r0, [sp, #836]	; 0x344
    aa6e:	91d0      	str	r1, [sp, #832]	; 0x340
    aa70:	e7ff      	b.n	aa72 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe7e>
    aa72:	98d1      	ldr	r0, [sp, #836]	; 0x344
    aa74:	f8cd 06f0 	str.w	r0, [sp, #1776]	; 0x6f0
    aa78:	99d0      	ldr	r1, [sp, #832]	; 0x340
    aa7a:	f8cd 16f4 	str.w	r1, [sp, #1780]	; 0x6f4
    aa7e:	f64d 6278 	movw	r2, #56952	; 0xde78
    aa82:	f2c0 0201 	movt	r2, #1
    aa86:	6812      	ldr	r2, [r2, #0]
    aa88:	466b      	mov	r3, sp
    aa8a:	f04f 0c01 	mov.w	ip, #1
    aa8e:	f8c3 c008 	str.w	ip, [r3, #8]
    aa92:	605a      	str	r2, [r3, #4]
    aa94:	f8c3 c000 	str.w	ip, [r3]
    aa98:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    aa9c:	2202      	movs	r2, #2
    aa9e:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
    aaa2:	99d2      	ldr	r1, [sp, #840]	; 0x348
    aaa4:	f003 f9c9 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    aaa8:	e7ff      	b.n	aaaa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xeb6>
    aaaa:	f8dd 16cc 	ldr.w	r1, [sp, #1740]	; 0x6cc
    aaae:	f64e 10a4 	movw	r0, #59812	; 0xe9a4
    aab2:	f2c0 0001 	movt	r0, #1
    aab6:	6802      	ldr	r2, [r0, #0]
    aab8:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    aabc:	f004 f989 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    aac0:	e7ff      	b.n	aac2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xece>
    aac2:	e7ff      	b.n	aac4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xed0>
                self.v[x] = kk;
    aac4:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    aac8:	280f      	cmp	r0, #15
    aaca:	f202 85ea 	bhi.w	d6a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3aae>
    aace:	e7ff      	b.n	aad0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xedc>
    aad0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    aad4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    aad8:	1842      	adds	r2, r0, r1
    aada:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    aade:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    aae2:	f002 bb3d 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    aae6:	2005      	movs	r0, #5
    aae8:	f8cd 06fc 	str.w	r0, [sp, #1788]	; 0x6fc
    aaec:	f64d 6030 	movw	r0, #56880	; 0xde30
    aaf0:	f2c0 0001 	movt	r0, #1
    aaf4:	6801      	ldr	r1, [r0, #0]
    aaf6:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    aafa:	f007 ffd5 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    aafe:	90cf      	str	r0, [sp, #828]	; 0x33c
    ab00:	e01f      	b.n	ab42 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf4e>
    ab02:	2001      	movs	r0, #1
    ab04:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    ab08:	e015      	b.n	ab36 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf42>
    ab0a:	2000      	movs	r0, #0
    ab0c:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    ab10:	e011      	b.n	ab36 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf42>
    ab12:	2000      	movs	r0, #0
    ab14:	f88d 0df3 	strb.w	r0, [sp, #3571]	; 0xdf3
    ab18:	f89d 1df3 	ldrb.w	r1, [sp, #3571]	; 0xdf3
    ab1c:	f640 2000 	movw	r0, #2560	; 0xa00
    ab20:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ab24:	f007 ffcc 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    ab28:	f8cd 0df4 	str.w	r0, [sp, #3572]	; 0xdf4
    ab2c:	f8dd 0df4 	ldr.w	r0, [sp, #3572]	; 0xdf4
    ab30:	f8cd 0704 	str.w	r0, [sp, #1796]	; 0x704
    ab34:	e00a      	b.n	ab4c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf58>
    ab36:	f89d 0703 	ldrb.w	r0, [sp, #1795]	; 0x703
    ab3a:	07c0      	lsls	r0, r0, #31
    ab3c:	2800      	cmp	r0, #0
    ab3e:	d112      	bne.n	ab66 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf72>
    ab40:	e055      	b.n	abee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xffa>
    ab42:	98cf      	ldr	r0, [sp, #828]	; 0x33c
    ab44:	07c1      	lsls	r1, r0, #31
    ab46:	2900      	cmp	r1, #0
    ab48:	d1e3      	bne.n	ab12 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf1e>
    ab4a:	e7de      	b.n	ab0a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf16>
    ab4c:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    ab50:	f20d 7104 	addw	r1, sp, #1796	; 0x704
    ab54:	f007 ffa8 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ab58:	90ce      	str	r0, [sp, #824]	; 0x338
    ab5a:	e7ff      	b.n	ab5c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf68>
    ab5c:	98ce      	ldr	r0, [sp, #824]	; 0x338
    ab5e:	07c1      	lsls	r1, r0, #31
    ab60:	2900      	cmp	r1, #0
    ab62:	d1ce      	bne.n	ab02 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf0e>
    ab64:	e7d1      	b.n	ab0a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf16>
                trace!("[{:04x}] ADD Vx, kk", self.pc);
    ab66:	f64e 1024 	movw	r0, #59684	; 0xe924
    ab6a:	f2c0 0001 	movt	r0, #1
    ab6e:	6801      	ldr	r1, [r0, #0]
    ab70:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ab74:	f100 0212 	add.w	r2, r0, #18
    ab78:	f8cd 2728 	str.w	r2, [sp, #1832]	; 0x728
    ab7c:	f8dd 2728 	ldr.w	r2, [sp, #1832]	; 0x728
    ab80:	f8cd 2d58 	str.w	r2, [sp, #3416]	; 0xd58
    ab84:	f248 230f 	movw	r3, #33295	; 0x820f
    ab88:	f2c0 0301 	movt	r3, #1
    ab8c:	4610      	mov	r0, r2
    ab8e:	91cd      	str	r1, [sp, #820]	; 0x334
    ab90:	4619      	mov	r1, r3
    ab92:	f007 f8a7 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ab96:	90cc      	str	r0, [sp, #816]	; 0x330
    ab98:	91cb      	str	r1, [sp, #812]	; 0x32c
    ab9a:	e7ff      	b.n	ab9c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xfa8>
    ab9c:	98cc      	ldr	r0, [sp, #816]	; 0x330
    ab9e:	f8cd 0720 	str.w	r0, [sp, #1824]	; 0x720
    aba2:	99cb      	ldr	r1, [sp, #812]	; 0x32c
    aba4:	f8cd 1724 	str.w	r1, [sp, #1828]	; 0x724
    aba8:	f64d 6278 	movw	r2, #56952	; 0xde78
    abac:	f2c0 0201 	movt	r2, #1
    abb0:	6812      	ldr	r2, [r2, #0]
    abb2:	466b      	mov	r3, sp
    abb4:	f04f 0c01 	mov.w	ip, #1
    abb8:	f8c3 c008 	str.w	ip, [r3, #8]
    abbc:	605a      	str	r2, [r3, #4]
    abbe:	f8c3 c000 	str.w	ip, [r3]
    abc2:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    abc6:	2202      	movs	r2, #2
    abc8:	f50d 63e4 	add.w	r3, sp, #1824	; 0x720
    abcc:	99cd      	ldr	r1, [sp, #820]	; 0x334
    abce:	f003 f934 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    abd2:	e7ff      	b.n	abd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xfe0>
    abd4:	f8dd 16fc 	ldr.w	r1, [sp, #1788]	; 0x6fc
    abd8:	f64e 1044 	movw	r0, #59716	; 0xe944
    abdc:	f2c0 0001 	movt	r0, #1
    abe0:	6802      	ldr	r2, [r0, #0]
    abe2:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    abe6:	f004 f8f4 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    abea:	e7ff      	b.n	abec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xff8>
    abec:	e7ff      	b.n	abee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xffa>
                self.v[x] = self.v[x].wrapping_add(kk);
    abee:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    abf2:	280f      	cmp	r0, #15
    abf4:	f202 8541 	bhi.w	d67a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a86>
    abf8:	e7ff      	b.n	abfa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1006>
    abfa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    abfe:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ac02:	1842      	adds	r2, r0, r1
    ac04:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    ac08:	f8dd 145c 	ldr.w	r1, [sp, #1116]	; 0x45c
    ac0c:	f007 ff97 	bl	12b3e <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17hac8dfc997b9c24ecE>
    ac10:	90ca      	str	r0, [sp, #808]	; 0x328
    ac12:	e7ff      	b.n	ac14 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1020>
    ac14:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ac18:	280f      	cmp	r0, #15
    ac1a:	f202 8538 	bhi.w	d68e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a9a>
    ac1e:	e7ff      	b.n	ac20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x102c>
    ac20:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ac24:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ac28:	1842      	adds	r2, r0, r1
    ac2a:	9bca      	ldr	r3, [sp, #808]	; 0x328
    ac2c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    ac30:	f002 ba96 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    ac34:	2005      	movs	r0, #5
    ac36:	f8cd 072c 	str.w	r0, [sp, #1836]	; 0x72c
    ac3a:	f64d 6030 	movw	r0, #56880	; 0xde30
    ac3e:	f2c0 0001 	movt	r0, #1
    ac42:	6801      	ldr	r1, [r0, #0]
    ac44:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    ac48:	f007 ff2e 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ac4c:	90c9      	str	r0, [sp, #804]	; 0x324
    ac4e:	e01f      	b.n	ac90 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x109c>
    ac50:	2001      	movs	r0, #1
    ac52:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    ac56:	e015      	b.n	ac84 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1090>
    ac58:	2000      	movs	r0, #0
    ac5a:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    ac5e:	e011      	b.n	ac84 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1090>
    ac60:	2000      	movs	r0, #0
    ac62:	f88d 0dfb 	strb.w	r0, [sp, #3579]	; 0xdfb
    ac66:	f89d 1dfb 	ldrb.w	r1, [sp, #3579]	; 0xdfb
    ac6a:	f640 2000 	movw	r0, #2560	; 0xa00
    ac6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ac72:	f007 ff25 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    ac76:	f8cd 0dfc 	str.w	r0, [sp, #3580]	; 0xdfc
    ac7a:	f8dd 0dfc 	ldr.w	r0, [sp, #3580]	; 0xdfc
    ac7e:	f8cd 0734 	str.w	r0, [sp, #1844]	; 0x734
    ac82:	e00a      	b.n	ac9a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x10a6>
    ac84:	f89d 0733 	ldrb.w	r0, [sp, #1843]	; 0x733
    ac88:	07c0      	lsls	r0, r0, #31
    ac8a:	2800      	cmp	r0, #0
    ac8c:	d112      	bne.n	acb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x10c0>
    ac8e:	e055      	b.n	ad3c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1148>
    ac90:	98c9      	ldr	r0, [sp, #804]	; 0x324
    ac92:	07c1      	lsls	r1, r0, #31
    ac94:	2900      	cmp	r1, #0
    ac96:	d1e3      	bne.n	ac60 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x106c>
    ac98:	e7de      	b.n	ac58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1064>
    ac9a:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    ac9e:	f20d 7134 	addw	r1, sp, #1844	; 0x734
    aca2:	f007 ff01 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    aca6:	90c8      	str	r0, [sp, #800]	; 0x320
    aca8:	e7ff      	b.n	acaa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x10b6>
    acaa:	98c8      	ldr	r0, [sp, #800]	; 0x320
    acac:	07c1      	lsls	r1, r0, #31
    acae:	2900      	cmp	r1, #0
    acb0:	d1ce      	bne.n	ac50 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x105c>
    acb2:	e7d1      	b.n	ac58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1064>
                trace!("[{:04x}] LD Vx, Vy", self.pc);
    acb4:	f64e 00c4 	movw	r0, #59588	; 0xe8c4
    acb8:	f2c0 0001 	movt	r0, #1
    acbc:	6801      	ldr	r1, [r0, #0]
    acbe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    acc2:	f100 0212 	add.w	r2, r0, #18
    acc6:	f8cd 2758 	str.w	r2, [sp, #1880]	; 0x758
    acca:	f8dd 2758 	ldr.w	r2, [sp, #1880]	; 0x758
    acce:	f8cd 2d54 	str.w	r2, [sp, #3412]	; 0xd54
    acd2:	f248 230f 	movw	r3, #33295	; 0x820f
    acd6:	f2c0 0301 	movt	r3, #1
    acda:	4610      	mov	r0, r2
    acdc:	91c7      	str	r1, [sp, #796]	; 0x31c
    acde:	4619      	mov	r1, r3
    ace0:	f007 f800 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ace4:	90c6      	str	r0, [sp, #792]	; 0x318
    ace6:	91c5      	str	r1, [sp, #788]	; 0x314
    ace8:	e7ff      	b.n	acea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x10f6>
    acea:	98c6      	ldr	r0, [sp, #792]	; 0x318
    acec:	f8cd 0750 	str.w	r0, [sp, #1872]	; 0x750
    acf0:	99c5      	ldr	r1, [sp, #788]	; 0x314
    acf2:	f8cd 1754 	str.w	r1, [sp, #1876]	; 0x754
    acf6:	f64d 6278 	movw	r2, #56952	; 0xde78
    acfa:	f2c0 0201 	movt	r2, #1
    acfe:	6812      	ldr	r2, [r2, #0]
    ad00:	466b      	mov	r3, sp
    ad02:	f04f 0c01 	mov.w	ip, #1
    ad06:	f8c3 c008 	str.w	ip, [r3, #8]
    ad0a:	605a      	str	r2, [r3, #4]
    ad0c:	f8c3 c000 	str.w	ip, [r3]
    ad10:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    ad14:	2202      	movs	r2, #2
    ad16:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750
    ad1a:	99c7      	ldr	r1, [sp, #796]	; 0x31c
    ad1c:	f003 f88d 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    ad20:	e7ff      	b.n	ad22 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x112e>
    ad22:	f8dd 172c 	ldr.w	r1, [sp, #1836]	; 0x72c
    ad26:	f64e 00e4 	movw	r0, #59620	; 0xe8e4
    ad2a:	f2c0 0001 	movt	r0, #1
    ad2e:	6802      	ldr	r2, [r0, #0]
    ad30:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    ad34:	f004 f84d 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ad38:	e7ff      	b.n	ad3a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1146>
    ad3a:	e7ff      	b.n	ad3c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1148>
                self.v[x] = self.v[y];
    ad3c:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    ad40:	280f      	cmp	r0, #15
    ad42:	f202 8486 	bhi.w	d652 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a5e>
    ad46:	e7ff      	b.n	ad48 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1154>
    ad48:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ad4c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ad50:	1842      	adds	r2, r0, r1
    ad52:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ad56:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    ad5a:	2b0f      	cmp	r3, #15
    ad5c:	92c4      	str	r2, [sp, #784]	; 0x310
    ad5e:	f202 8482 	bhi.w	d666 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a72>
    ad62:	e7ff      	b.n	ad64 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1170>
    ad64:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ad68:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ad6c:	1842      	adds	r2, r0, r1
    ad6e:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    ad70:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    ad74:	f002 b9f4 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    ad78:	2005      	movs	r0, #5
    ad7a:	f8cd 075c 	str.w	r0, [sp, #1884]	; 0x75c
    ad7e:	f64d 6030 	movw	r0, #56880	; 0xde30
    ad82:	f2c0 0001 	movt	r0, #1
    ad86:	6801      	ldr	r1, [r0, #0]
    ad88:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    ad8c:	f007 fe8c 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ad90:	90c3      	str	r0, [sp, #780]	; 0x30c
    ad92:	e01f      	b.n	add4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11e0>
    ad94:	2001      	movs	r0, #1
    ad96:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    ad9a:	e015      	b.n	adc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11d4>
    ad9c:	2000      	movs	r0, #0
    ad9e:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    ada2:	e011      	b.n	adc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11d4>
    ada4:	2000      	movs	r0, #0
    ada6:	f88d 0e03 	strb.w	r0, [sp, #3587]	; 0xe03
    adaa:	f89d 1e03 	ldrb.w	r1, [sp, #3587]	; 0xe03
    adae:	f640 2000 	movw	r0, #2560	; 0xa00
    adb2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    adb6:	f007 fe83 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    adba:	f8cd 0e04 	str.w	r0, [sp, #3588]	; 0xe04
    adbe:	f8dd 0e04 	ldr.w	r0, [sp, #3588]	; 0xe04
    adc2:	f8cd 0764 	str.w	r0, [sp, #1892]	; 0x764
    adc6:	e00a      	b.n	adde <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11ea>
    adc8:	f89d 0763 	ldrb.w	r0, [sp, #1891]	; 0x763
    adcc:	07c0      	lsls	r0, r0, #31
    adce:	2800      	cmp	r0, #0
    add0:	d112      	bne.n	adf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1204>
    add2:	e055      	b.n	ae80 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x128c>
    add4:	98c3      	ldr	r0, [sp, #780]	; 0x30c
    add6:	07c1      	lsls	r1, r0, #31
    add8:	2900      	cmp	r1, #0
    adda:	d1e3      	bne.n	ada4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11b0>
    addc:	e7de      	b.n	ad9c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11a8>
    adde:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    ade2:	f20d 7164 	addw	r1, sp, #1892	; 0x764
    ade6:	f007 fe5f 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    adea:	90c2      	str	r0, [sp, #776]	; 0x308
    adec:	e7ff      	b.n	adee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11fa>
    adee:	98c2      	ldr	r0, [sp, #776]	; 0x308
    adf0:	07c1      	lsls	r1, r0, #31
    adf2:	2900      	cmp	r1, #0
    adf4:	d1ce      	bne.n	ad94 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11a0>
    adf6:	e7d1      	b.n	ad9c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11a8>
                trace!("[{:04x}] OR Vx, Vy", self.pc);
    adf8:	f64e 0064 	movw	r0, #59492	; 0xe864
    adfc:	f2c0 0001 	movt	r0, #1
    ae00:	6801      	ldr	r1, [r0, #0]
    ae02:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ae06:	f100 0212 	add.w	r2, r0, #18
    ae0a:	f8cd 2788 	str.w	r2, [sp, #1928]	; 0x788
    ae0e:	f8dd 2788 	ldr.w	r2, [sp, #1928]	; 0x788
    ae12:	f8cd 2d50 	str.w	r2, [sp, #3408]	; 0xd50
    ae16:	f248 230f 	movw	r3, #33295	; 0x820f
    ae1a:	f2c0 0301 	movt	r3, #1
    ae1e:	4610      	mov	r0, r2
    ae20:	91c1      	str	r1, [sp, #772]	; 0x304
    ae22:	4619      	mov	r1, r3
    ae24:	f006 ff5e 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ae28:	90c0      	str	r0, [sp, #768]	; 0x300
    ae2a:	91bf      	str	r1, [sp, #764]	; 0x2fc
    ae2c:	e7ff      	b.n	ae2e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x123a>
    ae2e:	98c0      	ldr	r0, [sp, #768]	; 0x300
    ae30:	f8cd 0780 	str.w	r0, [sp, #1920]	; 0x780
    ae34:	99bf      	ldr	r1, [sp, #764]	; 0x2fc
    ae36:	f8cd 1784 	str.w	r1, [sp, #1924]	; 0x784
    ae3a:	f64d 6278 	movw	r2, #56952	; 0xde78
    ae3e:	f2c0 0201 	movt	r2, #1
    ae42:	6812      	ldr	r2, [r2, #0]
    ae44:	466b      	mov	r3, sp
    ae46:	f04f 0c01 	mov.w	ip, #1
    ae4a:	f8c3 c008 	str.w	ip, [r3, #8]
    ae4e:	605a      	str	r2, [r3, #4]
    ae50:	f8c3 c000 	str.w	ip, [r3]
    ae54:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    ae58:	2202      	movs	r2, #2
    ae5a:	f50d 63f0 	add.w	r3, sp, #1920	; 0x780
    ae5e:	99c1      	ldr	r1, [sp, #772]	; 0x304
    ae60:	f002 ffeb 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    ae64:	e7ff      	b.n	ae66 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1272>
    ae66:	f8dd 175c 	ldr.w	r1, [sp, #1884]	; 0x75c
    ae6a:	f64e 0084 	movw	r0, #59524	; 0xe884
    ae6e:	f2c0 0001 	movt	r0, #1
    ae72:	6802      	ldr	r2, [r0, #0]
    ae74:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    ae78:	f003 ffab 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ae7c:	e7ff      	b.n	ae7e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x128a>
    ae7e:	e7ff      	b.n	ae80 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x128c>
                self.v[x] |= self.v[y];
    ae80:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    ae84:	280f      	cmp	r0, #15
    ae86:	f202 83d0 	bhi.w	d62a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a36>
    ae8a:	e7ff      	b.n	ae8c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1298>
    ae8c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ae90:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ae94:	1842      	adds	r2, r0, r1
    ae96:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ae9a:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    ae9e:	2b0f      	cmp	r3, #15
    aea0:	92be      	str	r2, [sp, #760]	; 0x2f8
    aea2:	f202 83cc 	bhi.w	d63e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a4a>
    aea6:	e7ff      	b.n	aea8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12b4>
    aea8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    aeac:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    aeb0:	1842      	adds	r2, r0, r1
    aeb2:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    aeb6:	f8dd c2f8 	ldr.w	ip, [sp, #760]	; 0x2f8
    aeba:	ea43 030c 	orr.w	r3, r3, ip
    aebe:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    aec2:	f002 b94d 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    aec6:	2005      	movs	r0, #5
    aec8:	f8cd 078c 	str.w	r0, [sp, #1932]	; 0x78c
    aecc:	f64d 6030 	movw	r0, #56880	; 0xde30
    aed0:	f2c0 0001 	movt	r0, #1
    aed4:	6801      	ldr	r1, [r0, #0]
    aed6:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    aeda:	f007 fde5 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    aede:	90bd      	str	r0, [sp, #756]	; 0x2f4
    aee0:	e01f      	b.n	af22 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x132e>
    aee2:	2001      	movs	r0, #1
    aee4:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    aee8:	e015      	b.n	af16 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1322>
    aeea:	2000      	movs	r0, #0
    aeec:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    aef0:	e011      	b.n	af16 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1322>
    aef2:	2000      	movs	r0, #0
    aef4:	f88d 0e0b 	strb.w	r0, [sp, #3595]	; 0xe0b
    aef8:	f89d 1e0b 	ldrb.w	r1, [sp, #3595]	; 0xe0b
    aefc:	f640 2000 	movw	r0, #2560	; 0xa00
    af00:	f2c2 0000 	movt	r0, #8192	; 0x2000
    af04:	f007 fddc 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    af08:	f8cd 0e0c 	str.w	r0, [sp, #3596]	; 0xe0c
    af0c:	f8dd 0e0c 	ldr.w	r0, [sp, #3596]	; 0xe0c
    af10:	f8cd 0794 	str.w	r0, [sp, #1940]	; 0x794
    af14:	e00a      	b.n	af2c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1338>
    af16:	f89d 0793 	ldrb.w	r0, [sp, #1939]	; 0x793
    af1a:	07c0      	lsls	r0, r0, #31
    af1c:	2800      	cmp	r0, #0
    af1e:	d112      	bne.n	af46 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1352>
    af20:	e055      	b.n	afce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x13da>
    af22:	98bd      	ldr	r0, [sp, #756]	; 0x2f4
    af24:	07c1      	lsls	r1, r0, #31
    af26:	2900      	cmp	r1, #0
    af28:	d1e3      	bne.n	aef2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12fe>
    af2a:	e7de      	b.n	aeea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12f6>
    af2c:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    af30:	f20d 7194 	addw	r1, sp, #1940	; 0x794
    af34:	f007 fdb8 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    af38:	90bc      	str	r0, [sp, #752]	; 0x2f0
    af3a:	e7ff      	b.n	af3c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1348>
    af3c:	98bc      	ldr	r0, [sp, #752]	; 0x2f0
    af3e:	07c1      	lsls	r1, r0, #31
    af40:	2900      	cmp	r1, #0
    af42:	d1ce      	bne.n	aee2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12ee>
    af44:	e7d1      	b.n	aeea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12f6>
                trace!("[{:04x}] AND Vx, Vy", self.pc);
    af46:	f64e 0004 	movw	r0, #59396	; 0xe804
    af4a:	f2c0 0001 	movt	r0, #1
    af4e:	6801      	ldr	r1, [r0, #0]
    af50:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    af54:	f100 0212 	add.w	r2, r0, #18
    af58:	f8cd 27b8 	str.w	r2, [sp, #1976]	; 0x7b8
    af5c:	f8dd 27b8 	ldr.w	r2, [sp, #1976]	; 0x7b8
    af60:	f8cd 2d4c 	str.w	r2, [sp, #3404]	; 0xd4c
    af64:	f248 230f 	movw	r3, #33295	; 0x820f
    af68:	f2c0 0301 	movt	r3, #1
    af6c:	4610      	mov	r0, r2
    af6e:	91bb      	str	r1, [sp, #748]	; 0x2ec
    af70:	4619      	mov	r1, r3
    af72:	f006 feb7 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    af76:	90ba      	str	r0, [sp, #744]	; 0x2e8
    af78:	91b9      	str	r1, [sp, #740]	; 0x2e4
    af7a:	e7ff      	b.n	af7c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1388>
    af7c:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
    af7e:	f8cd 07b0 	str.w	r0, [sp, #1968]	; 0x7b0
    af82:	99b9      	ldr	r1, [sp, #740]	; 0x2e4
    af84:	f8cd 17b4 	str.w	r1, [sp, #1972]	; 0x7b4
    af88:	f64d 6278 	movw	r2, #56952	; 0xde78
    af8c:	f2c0 0201 	movt	r2, #1
    af90:	6812      	ldr	r2, [r2, #0]
    af92:	466b      	mov	r3, sp
    af94:	f04f 0c01 	mov.w	ip, #1
    af98:	f8c3 c008 	str.w	ip, [r3, #8]
    af9c:	605a      	str	r2, [r3, #4]
    af9e:	f8c3 c000 	str.w	ip, [r3]
    afa2:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    afa6:	2202      	movs	r2, #2
    afa8:	f50d 63f6 	add.w	r3, sp, #1968	; 0x7b0
    afac:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
    afae:	f002 ff44 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    afb2:	e7ff      	b.n	afb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x13c0>
    afb4:	f8dd 178c 	ldr.w	r1, [sp, #1932]	; 0x78c
    afb8:	f64e 0024 	movw	r0, #59428	; 0xe824
    afbc:	f2c0 0001 	movt	r0, #1
    afc0:	6802      	ldr	r2, [r0, #0]
    afc2:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    afc6:	f003 ff04 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    afca:	e7ff      	b.n	afcc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x13d8>
    afcc:	e7ff      	b.n	afce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x13da>
                self.v[x] &= self.v[y];
    afce:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    afd2:	280f      	cmp	r0, #15
    afd4:	f202 8315 	bhi.w	d602 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a0e>
    afd8:	e7ff      	b.n	afda <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x13e6>
    afda:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    afde:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    afe2:	1842      	adds	r2, r0, r1
    afe4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    afe8:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    afec:	2b0f      	cmp	r3, #15
    afee:	92b8      	str	r2, [sp, #736]	; 0x2e0
    aff0:	f202 8311 	bhi.w	d616 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a22>
    aff4:	e7ff      	b.n	aff6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1402>
    aff6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    affa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    affe:	1842      	adds	r2, r0, r1
    b000:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    b004:	f8dd c2e0 	ldr.w	ip, [sp, #736]	; 0x2e0
    b008:	ea03 030c 	and.w	r3, r3, ip
    b00c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    b010:	f002 b8a6 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b014:	2005      	movs	r0, #5
    b016:	f8cd 07bc 	str.w	r0, [sp, #1980]	; 0x7bc
    b01a:	f64d 6030 	movw	r0, #56880	; 0xde30
    b01e:	f2c0 0001 	movt	r0, #1
    b022:	6801      	ldr	r1, [r0, #0]
    b024:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    b028:	f007 fd3e 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b02c:	90b7      	str	r0, [sp, #732]	; 0x2dc
    b02e:	e01f      	b.n	b070 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x147c>
    b030:	2001      	movs	r0, #1
    b032:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    b036:	e015      	b.n	b064 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1470>
    b038:	2000      	movs	r0, #0
    b03a:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    b03e:	e011      	b.n	b064 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1470>
    b040:	2000      	movs	r0, #0
    b042:	f88d 0e13 	strb.w	r0, [sp, #3603]	; 0xe13
    b046:	f89d 1e13 	ldrb.w	r1, [sp, #3603]	; 0xe13
    b04a:	f640 2000 	movw	r0, #2560	; 0xa00
    b04e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b052:	f007 fd35 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b056:	f8cd 0e14 	str.w	r0, [sp, #3604]	; 0xe14
    b05a:	f8dd 0e14 	ldr.w	r0, [sp, #3604]	; 0xe14
    b05e:	f8cd 07c4 	str.w	r0, [sp, #1988]	; 0x7c4
    b062:	e00a      	b.n	b07a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1486>
    b064:	f89d 07c3 	ldrb.w	r0, [sp, #1987]	; 0x7c3
    b068:	07c0      	lsls	r0, r0, #31
    b06a:	2800      	cmp	r0, #0
    b06c:	d112      	bne.n	b094 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x14a0>
    b06e:	e055      	b.n	b11c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1528>
    b070:	98b7      	ldr	r0, [sp, #732]	; 0x2dc
    b072:	07c1      	lsls	r1, r0, #31
    b074:	2900      	cmp	r1, #0
    b076:	d1e3      	bne.n	b040 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x144c>
    b078:	e7de      	b.n	b038 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1444>
    b07a:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    b07e:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
    b082:	f007 fd11 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b086:	90b6      	str	r0, [sp, #728]	; 0x2d8
    b088:	e7ff      	b.n	b08a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1496>
    b08a:	98b6      	ldr	r0, [sp, #728]	; 0x2d8
    b08c:	07c1      	lsls	r1, r0, #31
    b08e:	2900      	cmp	r1, #0
    b090:	d1ce      	bne.n	b030 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x143c>
    b092:	e7d1      	b.n	b038 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1444>
                trace!("[{:04x}] XOR Vx, Vy", self.pc);
    b094:	f24e 70a4 	movw	r0, #59300	; 0xe7a4
    b098:	f2c0 0001 	movt	r0, #1
    b09c:	6801      	ldr	r1, [r0, #0]
    b09e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b0a2:	f100 0212 	add.w	r2, r0, #18
    b0a6:	f8cd 27e8 	str.w	r2, [sp, #2024]	; 0x7e8
    b0aa:	f8dd 27e8 	ldr.w	r2, [sp, #2024]	; 0x7e8
    b0ae:	f8cd 2d48 	str.w	r2, [sp, #3400]	; 0xd48
    b0b2:	f248 230f 	movw	r3, #33295	; 0x820f
    b0b6:	f2c0 0301 	movt	r3, #1
    b0ba:	4610      	mov	r0, r2
    b0bc:	91b5      	str	r1, [sp, #724]	; 0x2d4
    b0be:	4619      	mov	r1, r3
    b0c0:	f006 fe10 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b0c4:	90b4      	str	r0, [sp, #720]	; 0x2d0
    b0c6:	91b3      	str	r1, [sp, #716]	; 0x2cc
    b0c8:	e7ff      	b.n	b0ca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x14d6>
    b0ca:	98b4      	ldr	r0, [sp, #720]	; 0x2d0
    b0cc:	f8cd 07e0 	str.w	r0, [sp, #2016]	; 0x7e0
    b0d0:	99b3      	ldr	r1, [sp, #716]	; 0x2cc
    b0d2:	f8cd 17e4 	str.w	r1, [sp, #2020]	; 0x7e4
    b0d6:	f64d 6278 	movw	r2, #56952	; 0xde78
    b0da:	f2c0 0201 	movt	r2, #1
    b0de:	6812      	ldr	r2, [r2, #0]
    b0e0:	466b      	mov	r3, sp
    b0e2:	f04f 0c01 	mov.w	ip, #1
    b0e6:	f8c3 c008 	str.w	ip, [r3, #8]
    b0ea:	605a      	str	r2, [r3, #4]
    b0ec:	f8c3 c000 	str.w	ip, [r3]
    b0f0:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    b0f4:	2202      	movs	r2, #2
    b0f6:	f50d 63fc 	add.w	r3, sp, #2016	; 0x7e0
    b0fa:	99b5      	ldr	r1, [sp, #724]	; 0x2d4
    b0fc:	f002 fe9d 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b100:	e7ff      	b.n	b102 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x150e>
    b102:	f8dd 17bc 	ldr.w	r1, [sp, #1980]	; 0x7bc
    b106:	f24e 70c4 	movw	r0, #59332	; 0xe7c4
    b10a:	f2c0 0001 	movt	r0, #1
    b10e:	6802      	ldr	r2, [r0, #0]
    b110:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    b114:	f003 fe5d 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b118:	e7ff      	b.n	b11a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1526>
    b11a:	e7ff      	b.n	b11c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1528>
                self.v[x] ^= self.v[y];
    b11c:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    b120:	280f      	cmp	r0, #15
    b122:	f202 825a 	bhi.w	d5da <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x39e6>
    b126:	e7ff      	b.n	b128 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1534>
    b128:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b12c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    b130:	1842      	adds	r2, r0, r1
    b132:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b136:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    b13a:	2b0f      	cmp	r3, #15
    b13c:	92b2      	str	r2, [sp, #712]	; 0x2c8
    b13e:	f202 8256 	bhi.w	d5ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x39fa>
    b142:	e7ff      	b.n	b144 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1550>
    b144:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b148:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b14c:	1842      	adds	r2, r0, r1
    b14e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    b152:	f8dd c2c8 	ldr.w	ip, [sp, #712]	; 0x2c8
    b156:	ea83 030c 	eor.w	r3, r3, ip
    b15a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    b15e:	f001 bfff 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b162:	2005      	movs	r0, #5
    b164:	f8cd 07ec 	str.w	r0, [sp, #2028]	; 0x7ec
    b168:	f64d 6030 	movw	r0, #56880	; 0xde30
    b16c:	f2c0 0001 	movt	r0, #1
    b170:	6801      	ldr	r1, [r0, #0]
    b172:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    b176:	f007 fc97 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b17a:	90b1      	str	r0, [sp, #708]	; 0x2c4
    b17c:	e01f      	b.n	b1be <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15ca>
    b17e:	2001      	movs	r0, #1
    b180:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    b184:	e015      	b.n	b1b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15be>
    b186:	2000      	movs	r0, #0
    b188:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    b18c:	e011      	b.n	b1b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15be>
    b18e:	2000      	movs	r0, #0
    b190:	f88d 0e1b 	strb.w	r0, [sp, #3611]	; 0xe1b
    b194:	f89d 1e1b 	ldrb.w	r1, [sp, #3611]	; 0xe1b
    b198:	f640 2000 	movw	r0, #2560	; 0xa00
    b19c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b1a0:	f007 fc8e 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b1a4:	f8cd 0e1c 	str.w	r0, [sp, #3612]	; 0xe1c
    b1a8:	f8dd 0e1c 	ldr.w	r0, [sp, #3612]	; 0xe1c
    b1ac:	f8cd 07f4 	str.w	r0, [sp, #2036]	; 0x7f4
    b1b0:	e00a      	b.n	b1c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15d4>
    b1b2:	f89d 07f3 	ldrb.w	r0, [sp, #2035]	; 0x7f3
    b1b6:	07c0      	lsls	r0, r0, #31
    b1b8:	2800      	cmp	r0, #0
    b1ba:	d112      	bne.n	b1e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15ee>
    b1bc:	e055      	b.n	b26a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1676>
    b1be:	98b1      	ldr	r0, [sp, #708]	; 0x2c4
    b1c0:	07c1      	lsls	r1, r0, #31
    b1c2:	2900      	cmp	r1, #0
    b1c4:	d1e3      	bne.n	b18e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x159a>
    b1c6:	e7de      	b.n	b186 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1592>
    b1c8:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    b1cc:	f20d 71f4 	addw	r1, sp, #2036	; 0x7f4
    b1d0:	f007 fc6a 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b1d4:	90b0      	str	r0, [sp, #704]	; 0x2c0
    b1d6:	e7ff      	b.n	b1d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15e4>
    b1d8:	98b0      	ldr	r0, [sp, #704]	; 0x2c0
    b1da:	07c1      	lsls	r1, r0, #31
    b1dc:	2900      	cmp	r1, #0
    b1de:	d1ce      	bne.n	b17e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x158a>
    b1e0:	e7d1      	b.n	b186 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1592>
                trace!("[{:04x}] ADD Vx, Vy", self.pc);
    b1e2:	f24e 7034 	movw	r0, #59188	; 0xe734
    b1e6:	f2c0 0001 	movt	r0, #1
    b1ea:	6801      	ldr	r1, [r0, #0]
    b1ec:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b1f0:	f100 0212 	add.w	r2, r0, #18
    b1f4:	f8cd 2818 	str.w	r2, [sp, #2072]	; 0x818
    b1f8:	f8dd 2818 	ldr.w	r2, [sp, #2072]	; 0x818
    b1fc:	f8cd 2d40 	str.w	r2, [sp, #3392]	; 0xd40
    b200:	f248 230f 	movw	r3, #33295	; 0x820f
    b204:	f2c0 0301 	movt	r3, #1
    b208:	4610      	mov	r0, r2
    b20a:	91af      	str	r1, [sp, #700]	; 0x2bc
    b20c:	4619      	mov	r1, r3
    b20e:	f006 fd69 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b212:	90ae      	str	r0, [sp, #696]	; 0x2b8
    b214:	91ad      	str	r1, [sp, #692]	; 0x2b4
    b216:	e7ff      	b.n	b218 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1624>
    b218:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
    b21a:	f8cd 0810 	str.w	r0, [sp, #2064]	; 0x810
    b21e:	99ad      	ldr	r1, [sp, #692]	; 0x2b4
    b220:	f8cd 1814 	str.w	r1, [sp, #2068]	; 0x814
    b224:	f64d 6278 	movw	r2, #56952	; 0xde78
    b228:	f2c0 0201 	movt	r2, #1
    b22c:	6812      	ldr	r2, [r2, #0]
    b22e:	466b      	mov	r3, sp
    b230:	f04f 0c01 	mov.w	ip, #1
    b234:	f8c3 c008 	str.w	ip, [r3, #8]
    b238:	605a      	str	r2, [r3, #4]
    b23a:	f8c3 c000 	str.w	ip, [r3]
    b23e:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    b242:	2202      	movs	r2, #2
    b244:	f50d 6301 	add.w	r3, sp, #2064	; 0x810
    b248:	99af      	ldr	r1, [sp, #700]	; 0x2bc
    b24a:	f002 fdf6 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b24e:	e7ff      	b.n	b250 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x165c>
    b250:	f8dd 17ec 	ldr.w	r1, [sp, #2028]	; 0x7ec
    b254:	f24e 7054 	movw	r0, #59220	; 0xe754
    b258:	f2c0 0001 	movt	r0, #1
    b25c:	6802      	ldr	r2, [r0, #0]
    b25e:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    b262:	f003 fdb6 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b266:	e7ff      	b.n	b268 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1674>
    b268:	e7ff      	b.n	b26a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1676>
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    b26a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b26e:	280f      	cmp	r0, #15
    b270:	f202 8195 	bhi.w	d59e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x39aa>
    b274:	e7ff      	b.n	b276 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1682>
    b276:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b27a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b27e:	1842      	adds	r2, r0, r1
    b280:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b284:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    b288:	2b0f      	cmp	r3, #15
    b28a:	92ac      	str	r2, [sp, #688]	; 0x2b0
    b28c:	f202 8191 	bhi.w	d5b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x39be>
    b290:	e7ff      	b.n	b292 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x169e>
    b292:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b296:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    b29a:	1842      	adds	r2, r0, r1
    b29c:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    b2a0:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
    b2a2:	f007 fc92 	bl	12bca <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h86687d23966cf72aE>
    b2a6:	90ab      	str	r0, [sp, #684]	; 0x2ac
    b2a8:	91aa      	str	r1, [sp, #680]	; 0x2a8
    b2aa:	e7ff      	b.n	b2ac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x16b8>
    b2ac:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
    b2ae:	f88d 0d46 	strb.w	r0, [sp, #3398]	; 0xd46
    b2b2:	99aa      	ldr	r1, [sp, #680]	; 0x2a8
    b2b4:	f001 0201 	and.w	r2, r1, #1
    b2b8:	f88d 2d47 	strb.w	r2, [sp, #3399]	; 0xd47
                self.v[x] = v;
    b2bc:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    b2c0:	2a0f      	cmp	r2, #15
    b2c2:	f202 8180 	bhi.w	d5c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x39d2>
    b2c6:	e7ff      	b.n	b2c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x16d4>
    b2c8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b2cc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b2d0:	1842      	adds	r2, r0, r1
    b2d2:	9bab      	ldr	r3, [sp, #684]	; 0x2ac
    b2d4:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                self.v[0xf] = c as u8;
    b2d8:	9aaa      	ldr	r2, [sp, #680]	; 0x2a8
    b2da:	f002 0c01 	and.w	ip, r2, #1
    b2de:	f880 c043 	strb.w	ip, [r0, #67]	; 0x43
        match (
    b2e2:	f001 bf3d 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b2e6:	2005      	movs	r0, #5
    b2e8:	f8cd 081c 	str.w	r0, [sp, #2076]	; 0x81c
    b2ec:	f64d 6030 	movw	r0, #56880	; 0xde30
    b2f0:	f2c0 0001 	movt	r0, #1
    b2f4:	6801      	ldr	r1, [r0, #0]
    b2f6:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    b2fa:	f007 fbd5 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b2fe:	90a9      	str	r0, [sp, #676]	; 0x2a4
    b300:	e01f      	b.n	b342 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x174e>
    b302:	2001      	movs	r0, #1
    b304:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    b308:	e015      	b.n	b336 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1742>
    b30a:	2000      	movs	r0, #0
    b30c:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    b310:	e011      	b.n	b336 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1742>
    b312:	2000      	movs	r0, #0
    b314:	f88d 0e23 	strb.w	r0, [sp, #3619]	; 0xe23
    b318:	f89d 1e23 	ldrb.w	r1, [sp, #3619]	; 0xe23
    b31c:	f640 2000 	movw	r0, #2560	; 0xa00
    b320:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b324:	f007 fbcc 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b328:	f8cd 0e24 	str.w	r0, [sp, #3620]	; 0xe24
    b32c:	f8dd 0e24 	ldr.w	r0, [sp, #3620]	; 0xe24
    b330:	f8cd 0824 	str.w	r0, [sp, #2084]	; 0x824
    b334:	e00a      	b.n	b34c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1758>
    b336:	f89d 0823 	ldrb.w	r0, [sp, #2083]	; 0x823
    b33a:	07c0      	lsls	r0, r0, #31
    b33c:	2800      	cmp	r0, #0
    b33e:	d112      	bne.n	b366 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1772>
    b340:	e055      	b.n	b3ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x17fa>
    b342:	98a9      	ldr	r0, [sp, #676]	; 0x2a4
    b344:	07c1      	lsls	r1, r0, #31
    b346:	2900      	cmp	r1, #0
    b348:	d1e3      	bne.n	b312 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x171e>
    b34a:	e7de      	b.n	b30a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1716>
    b34c:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    b350:	f60d 0124 	addw	r1, sp, #2084	; 0x824
    b354:	f007 fba8 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b358:	90a8      	str	r0, [sp, #672]	; 0x2a0
    b35a:	e7ff      	b.n	b35c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1768>
    b35c:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
    b35e:	07c1      	lsls	r1, r0, #31
    b360:	2900      	cmp	r1, #0
    b362:	d1ce      	bne.n	b302 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x170e>
    b364:	e7d1      	b.n	b30a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1716>
                trace!("[{:04x}] SUB Vx, Vy", self.pc);
    b366:	f24e 60c4 	movw	r0, #59076	; 0xe6c4
    b36a:	f2c0 0001 	movt	r0, #1
    b36e:	6801      	ldr	r1, [r0, #0]
    b370:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b374:	f100 0212 	add.w	r2, r0, #18
    b378:	f8cd 2848 	str.w	r2, [sp, #2120]	; 0x848
    b37c:	f8dd 2848 	ldr.w	r2, [sp, #2120]	; 0x848
    b380:	f8cd 2d38 	str.w	r2, [sp, #3384]	; 0xd38
    b384:	f248 230f 	movw	r3, #33295	; 0x820f
    b388:	f2c0 0301 	movt	r3, #1
    b38c:	4610      	mov	r0, r2
    b38e:	91a7      	str	r1, [sp, #668]	; 0x29c
    b390:	4619      	mov	r1, r3
    b392:	f006 fca7 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b396:	90a6      	str	r0, [sp, #664]	; 0x298
    b398:	91a5      	str	r1, [sp, #660]	; 0x294
    b39a:	e7ff      	b.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x17a8>
    b39c:	98a6      	ldr	r0, [sp, #664]	; 0x298
    b39e:	f8cd 0840 	str.w	r0, [sp, #2112]	; 0x840
    b3a2:	99a5      	ldr	r1, [sp, #660]	; 0x294
    b3a4:	f8cd 1844 	str.w	r1, [sp, #2116]	; 0x844
    b3a8:	f64d 6278 	movw	r2, #56952	; 0xde78
    b3ac:	f2c0 0201 	movt	r2, #1
    b3b0:	6812      	ldr	r2, [r2, #0]
    b3b2:	466b      	mov	r3, sp
    b3b4:	f04f 0c01 	mov.w	ip, #1
    b3b8:	f8c3 c008 	str.w	ip, [r3, #8]
    b3bc:	605a      	str	r2, [r3, #4]
    b3be:	f8c3 c000 	str.w	ip, [r3]
    b3c2:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    b3c6:	2202      	movs	r2, #2
    b3c8:	f50d 6304 	add.w	r3, sp, #2112	; 0x840
    b3cc:	99a7      	ldr	r1, [sp, #668]	; 0x29c
    b3ce:	f002 fd34 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b3d2:	e7ff      	b.n	b3d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x17e0>
    b3d4:	f8dd 181c 	ldr.w	r1, [sp, #2076]	; 0x81c
    b3d8:	f24e 60e4 	movw	r0, #59108	; 0xe6e4
    b3dc:	f2c0 0001 	movt	r0, #1
    b3e0:	6802      	ldr	r2, [r0, #0]
    b3e2:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    b3e6:	f003 fcf4 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b3ea:	e7ff      	b.n	b3ec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x17f8>
    b3ec:	e7ff      	b.n	b3ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x17fa>
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    b3ee:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b3f2:	280f      	cmp	r0, #15
    b3f4:	f202 80b5 	bhi.w	d562 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x396e>
    b3f8:	e7ff      	b.n	b3fa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1806>
    b3fa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b3fe:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b402:	1842      	adds	r2, r0, r1
    b404:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b408:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    b40c:	2b0f      	cmp	r3, #15
    b40e:	92a4      	str	r2, [sp, #656]	; 0x290
    b410:	f202 80b1 	bhi.w	d576 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3982>
    b414:	e7ff      	b.n	b416 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1822>
    b416:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b41a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    b41e:	1842      	adds	r2, r0, r1
    b420:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    b424:	98a4      	ldr	r0, [sp, #656]	; 0x290
    b426:	f007 fbfb 	bl	12c20 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h6530387af31222c2E>
    b42a:	90a3      	str	r0, [sp, #652]	; 0x28c
    b42c:	91a2      	str	r1, [sp, #648]	; 0x288
    b42e:	e7ff      	b.n	b430 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x183c>
    b430:	98a3      	ldr	r0, [sp, #652]	; 0x28c
    b432:	f88d 0d3e 	strb.w	r0, [sp, #3390]	; 0xd3e
    b436:	99a2      	ldr	r1, [sp, #648]	; 0x288
    b438:	f001 0201 	and.w	r2, r1, #1
    b43c:	f88d 2d3f 	strb.w	r2, [sp, #3391]	; 0xd3f
                self.v[x] = v;
    b440:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    b444:	2a0f      	cmp	r2, #15
    b446:	f202 80a0 	bhi.w	d58a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3996>
    b44a:	e7ff      	b.n	b44c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1858>
    b44c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b450:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b454:	1842      	adds	r2, r0, r1
    b456:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    b458:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    b45c:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    b45e:	f8dd c288 	ldr.w	ip, [sp, #648]	; 0x288
    b462:	ea22 020c 	bic.w	r2, r2, ip
    b466:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    b46a:	f001 be79 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b46e:	2005      	movs	r0, #5
    b470:	f8cd 084c 	str.w	r0, [sp, #2124]	; 0x84c
    b474:	f64d 6030 	movw	r0, #56880	; 0xde30
    b478:	f2c0 0001 	movt	r0, #1
    b47c:	6801      	ldr	r1, [r0, #0]
    b47e:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    b482:	f007 fb11 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b486:	90a1      	str	r0, [sp, #644]	; 0x284
    b488:	e01f      	b.n	b4ca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18d6>
    b48a:	2001      	movs	r0, #1
    b48c:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    b490:	e015      	b.n	b4be <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18ca>
    b492:	2000      	movs	r0, #0
    b494:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    b498:	e011      	b.n	b4be <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18ca>
    b49a:	2000      	movs	r0, #0
    b49c:	f88d 0e2b 	strb.w	r0, [sp, #3627]	; 0xe2b
    b4a0:	f89d 1e2b 	ldrb.w	r1, [sp, #3627]	; 0xe2b
    b4a4:	f640 2000 	movw	r0, #2560	; 0xa00
    b4a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b4ac:	f007 fb08 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b4b0:	f8cd 0e2c 	str.w	r0, [sp, #3628]	; 0xe2c
    b4b4:	f8dd 0e2c 	ldr.w	r0, [sp, #3628]	; 0xe2c
    b4b8:	f8cd 0854 	str.w	r0, [sp, #2132]	; 0x854
    b4bc:	e00a      	b.n	b4d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18e0>
    b4be:	f89d 0853 	ldrb.w	r0, [sp, #2131]	; 0x853
    b4c2:	07c0      	lsls	r0, r0, #31
    b4c4:	2800      	cmp	r0, #0
    b4c6:	d112      	bne.n	b4ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18fa>
    b4c8:	e055      	b.n	b576 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1982>
    b4ca:	98a1      	ldr	r0, [sp, #644]	; 0x284
    b4cc:	07c1      	lsls	r1, r0, #31
    b4ce:	2900      	cmp	r1, #0
    b4d0:	d1e3      	bne.n	b49a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18a6>
    b4d2:	e7de      	b.n	b492 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x189e>
    b4d4:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    b4d8:	f60d 0154 	addw	r1, sp, #2132	; 0x854
    b4dc:	f007 fae4 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b4e0:	90a0      	str	r0, [sp, #640]	; 0x280
    b4e2:	e7ff      	b.n	b4e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18f0>
    b4e4:	98a0      	ldr	r0, [sp, #640]	; 0x280
    b4e6:	07c1      	lsls	r1, r0, #31
    b4e8:	2900      	cmp	r1, #0
    b4ea:	d1ce      	bne.n	b48a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1896>
    b4ec:	e7d1      	b.n	b492 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x189e>
                trace!("[{:04x}] SHR Vx, Vy", self.pc);
    b4ee:	f24e 6054 	movw	r0, #58964	; 0xe654
    b4f2:	f2c0 0001 	movt	r0, #1
    b4f6:	6801      	ldr	r1, [r0, #0]
    b4f8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b4fc:	f100 0212 	add.w	r2, r0, #18
    b500:	f8cd 2878 	str.w	r2, [sp, #2168]	; 0x878
    b504:	f8dd 2878 	ldr.w	r2, [sp, #2168]	; 0x878
    b508:	f8cd 2d34 	str.w	r2, [sp, #3380]	; 0xd34
    b50c:	f248 230f 	movw	r3, #33295	; 0x820f
    b510:	f2c0 0301 	movt	r3, #1
    b514:	4610      	mov	r0, r2
    b516:	919f      	str	r1, [sp, #636]	; 0x27c
    b518:	4619      	mov	r1, r3
    b51a:	f006 fbe3 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b51e:	909e      	str	r0, [sp, #632]	; 0x278
    b520:	919d      	str	r1, [sp, #628]	; 0x274
    b522:	e7ff      	b.n	b524 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1930>
    b524:	989e      	ldr	r0, [sp, #632]	; 0x278
    b526:	f8cd 0870 	str.w	r0, [sp, #2160]	; 0x870
    b52a:	999d      	ldr	r1, [sp, #628]	; 0x274
    b52c:	f8cd 1874 	str.w	r1, [sp, #2164]	; 0x874
    b530:	f64d 6278 	movw	r2, #56952	; 0xde78
    b534:	f2c0 0201 	movt	r2, #1
    b538:	6812      	ldr	r2, [r2, #0]
    b53a:	466b      	mov	r3, sp
    b53c:	f04f 0c01 	mov.w	ip, #1
    b540:	f8c3 c008 	str.w	ip, [r3, #8]
    b544:	605a      	str	r2, [r3, #4]
    b546:	f8c3 c000 	str.w	ip, [r3]
    b54a:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    b54e:	2202      	movs	r2, #2
    b550:	f50d 6307 	add.w	r3, sp, #2160	; 0x870
    b554:	999f      	ldr	r1, [sp, #636]	; 0x27c
    b556:	f002 fc70 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b55a:	e7ff      	b.n	b55c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1968>
    b55c:	f8dd 184c 	ldr.w	r1, [sp, #2124]	; 0x84c
    b560:	f24e 6074 	movw	r0, #58996	; 0xe674
    b564:	f2c0 0001 	movt	r0, #1
    b568:	6802      	ldr	r2, [r0, #0]
    b56a:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    b56e:	f003 fc30 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b572:	e7ff      	b.n	b574 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1980>
    b574:	e7ff      	b.n	b576 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1982>
                self.v[0xf] = self.v[x] & 1;
    b576:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b57a:	280f      	cmp	r0, #15
    b57c:	f201 87d3 	bhi.w	d526 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3932>
    b580:	e7ff      	b.n	b582 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x198e>
    b582:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b586:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b58a:	1842      	adds	r2, r0, r1
    b58c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b590:	f002 0201 	and.w	r2, r2, #1
    b594:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shr(1);
    b598:	290f      	cmp	r1, #15
    b59a:	f201 87ce 	bhi.w	d53a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3946>
    b59e:	e7ff      	b.n	b5a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x19ac>
    b5a0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b5a4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b5a8:	1842      	adds	r2, r0, r1
    b5aa:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    b5ae:	2101      	movs	r1, #1
    b5b0:	f007 fae7 	bl	12b82 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hda13cf3283d09c50E>
    b5b4:	909c      	str	r0, [sp, #624]	; 0x270
    b5b6:	e7ff      	b.n	b5b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x19c4>
    b5b8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b5bc:	280f      	cmp	r0, #15
    b5be:	f201 87c6 	bhi.w	d54e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x395a>
    b5c2:	e7ff      	b.n	b5c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x19d0>
    b5c4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b5c8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b5cc:	1842      	adds	r2, r0, r1
    b5ce:	9b9c      	ldr	r3, [sp, #624]	; 0x270
    b5d0:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    b5d4:	f001 bdc4 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b5d8:	2005      	movs	r0, #5
    b5da:	f8cd 087c 	str.w	r0, [sp, #2172]	; 0x87c
    b5de:	f64d 6030 	movw	r0, #56880	; 0xde30
    b5e2:	f2c0 0001 	movt	r0, #1
    b5e6:	6801      	ldr	r1, [r0, #0]
    b5e8:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    b5ec:	f007 fa5c 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b5f0:	909b      	str	r0, [sp, #620]	; 0x26c
    b5f2:	e01f      	b.n	b634 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a40>
    b5f4:	2001      	movs	r0, #1
    b5f6:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    b5fa:	e015      	b.n	b628 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a34>
    b5fc:	2000      	movs	r0, #0
    b5fe:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    b602:	e011      	b.n	b628 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a34>
    b604:	2000      	movs	r0, #0
    b606:	f88d 0e33 	strb.w	r0, [sp, #3635]	; 0xe33
    b60a:	f89d 1e33 	ldrb.w	r1, [sp, #3635]	; 0xe33
    b60e:	f640 2000 	movw	r0, #2560	; 0xa00
    b612:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b616:	f007 fa53 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b61a:	f8cd 0e34 	str.w	r0, [sp, #3636]	; 0xe34
    b61e:	f8dd 0e34 	ldr.w	r0, [sp, #3636]	; 0xe34
    b622:	f8cd 0884 	str.w	r0, [sp, #2180]	; 0x884
    b626:	e00a      	b.n	b63e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a4a>
    b628:	f89d 0883 	ldrb.w	r0, [sp, #2179]	; 0x883
    b62c:	07c0      	lsls	r0, r0, #31
    b62e:	2800      	cmp	r0, #0
    b630:	d112      	bne.n	b658 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a64>
    b632:	e055      	b.n	b6e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1aec>
    b634:	989b      	ldr	r0, [sp, #620]	; 0x26c
    b636:	07c1      	lsls	r1, r0, #31
    b638:	2900      	cmp	r1, #0
    b63a:	d1e3      	bne.n	b604 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a10>
    b63c:	e7de      	b.n	b5fc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a08>
    b63e:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    b642:	f60d 0184 	addw	r1, sp, #2180	; 0x884
    b646:	f007 fa2f 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b64a:	909a      	str	r0, [sp, #616]	; 0x268
    b64c:	e7ff      	b.n	b64e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a5a>
    b64e:	989a      	ldr	r0, [sp, #616]	; 0x268
    b650:	07c1      	lsls	r1, r0, #31
    b652:	2900      	cmp	r1, #0
    b654:	d1ce      	bne.n	b5f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a00>
    b656:	e7d1      	b.n	b5fc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a08>
                trace!("[{:04x}] SUBN Vx, Vy", self.pc);
    b658:	f24e 50e4 	movw	r0, #58852	; 0xe5e4
    b65c:	f2c0 0001 	movt	r0, #1
    b660:	6801      	ldr	r1, [r0, #0]
    b662:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b666:	f100 0212 	add.w	r2, r0, #18
    b66a:	f8cd 28a8 	str.w	r2, [sp, #2216]	; 0x8a8
    b66e:	f8dd 28a8 	ldr.w	r2, [sp, #2216]	; 0x8a8
    b672:	f8cd 2d2c 	str.w	r2, [sp, #3372]	; 0xd2c
    b676:	f248 230f 	movw	r3, #33295	; 0x820f
    b67a:	f2c0 0301 	movt	r3, #1
    b67e:	4610      	mov	r0, r2
    b680:	9199      	str	r1, [sp, #612]	; 0x264
    b682:	4619      	mov	r1, r3
    b684:	f006 fb2e 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b688:	9098      	str	r0, [sp, #608]	; 0x260
    b68a:	9197      	str	r1, [sp, #604]	; 0x25c
    b68c:	e7ff      	b.n	b68e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a9a>
    b68e:	9898      	ldr	r0, [sp, #608]	; 0x260
    b690:	f8cd 08a0 	str.w	r0, [sp, #2208]	; 0x8a0
    b694:	9997      	ldr	r1, [sp, #604]	; 0x25c
    b696:	f8cd 18a4 	str.w	r1, [sp, #2212]	; 0x8a4
    b69a:	f64d 6278 	movw	r2, #56952	; 0xde78
    b69e:	f2c0 0201 	movt	r2, #1
    b6a2:	6812      	ldr	r2, [r2, #0]
    b6a4:	466b      	mov	r3, sp
    b6a6:	f04f 0c01 	mov.w	ip, #1
    b6aa:	f8c3 c008 	str.w	ip, [r3, #8]
    b6ae:	605a      	str	r2, [r3, #4]
    b6b0:	f8c3 c000 	str.w	ip, [r3]
    b6b4:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    b6b8:	2202      	movs	r2, #2
    b6ba:	f50d 630a 	add.w	r3, sp, #2208	; 0x8a0
    b6be:	9999      	ldr	r1, [sp, #612]	; 0x264
    b6c0:	f002 fbbb 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b6c4:	e7ff      	b.n	b6c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1ad2>
    b6c6:	f8dd 187c 	ldr.w	r1, [sp, #2172]	; 0x87c
    b6ca:	f24e 6004 	movw	r0, #58884	; 0xe604
    b6ce:	f2c0 0001 	movt	r0, #1
    b6d2:	6802      	ldr	r2, [r0, #0]
    b6d4:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    b6d8:	f003 fb7b 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b6dc:	e7ff      	b.n	b6de <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1aea>
    b6de:	e7ff      	b.n	b6e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1aec>
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    b6e0:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    b6e4:	280f      	cmp	r0, #15
    b6e6:	f201 8700 	bhi.w	d4ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38f6>
    b6ea:	e7ff      	b.n	b6ec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1af8>
    b6ec:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b6f0:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    b6f4:	1842      	adds	r2, r0, r1
    b6f6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b6fa:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    b6fe:	2b0f      	cmp	r3, #15
    b700:	9296      	str	r2, [sp, #600]	; 0x258
    b702:	f201 86fc 	bhi.w	d4fe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x390a>
    b706:	e7ff      	b.n	b708 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b14>
    b708:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b70c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b710:	1842      	adds	r2, r0, r1
    b712:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    b716:	9896      	ldr	r0, [sp, #600]	; 0x258
    b718:	f007 fa82 	bl	12c20 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h6530387af31222c2E>
    b71c:	9095      	str	r0, [sp, #596]	; 0x254
    b71e:	9194      	str	r1, [sp, #592]	; 0x250
    b720:	e7ff      	b.n	b722 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b2e>
    b722:	9895      	ldr	r0, [sp, #596]	; 0x254
    b724:	f88d 0d32 	strb.w	r0, [sp, #3378]	; 0xd32
    b728:	9994      	ldr	r1, [sp, #592]	; 0x250
    b72a:	f001 0201 	and.w	r2, r1, #1
    b72e:	f88d 2d33 	strb.w	r2, [sp, #3379]	; 0xd33
                self.v[x] = v;
    b732:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    b736:	2a0f      	cmp	r2, #15
    b738:	f201 86eb 	bhi.w	d512 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x391e>
    b73c:	e7ff      	b.n	b73e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b4a>
    b73e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b742:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b746:	1842      	adds	r2, r0, r1
    b748:	9b95      	ldr	r3, [sp, #596]	; 0x254
    b74a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    b74e:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    b750:	f8dd c250 	ldr.w	ip, [sp, #592]	; 0x250
    b754:	ea22 020c 	bic.w	r2, r2, ip
    b758:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    b75c:	f001 bd00 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b760:	2005      	movs	r0, #5
    b762:	f8cd 08ac 	str.w	r0, [sp, #2220]	; 0x8ac
    b766:	f64d 6030 	movw	r0, #56880	; 0xde30
    b76a:	f2c0 0001 	movt	r0, #1
    b76e:	6801      	ldr	r1, [r0, #0]
    b770:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    b774:	f007 f998 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b778:	9093      	str	r0, [sp, #588]	; 0x24c
    b77a:	e01f      	b.n	b7bc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1bc8>
    b77c:	2001      	movs	r0, #1
    b77e:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    b782:	e015      	b.n	b7b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1bbc>
    b784:	2000      	movs	r0, #0
    b786:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    b78a:	e011      	b.n	b7b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1bbc>
    b78c:	2000      	movs	r0, #0
    b78e:	f88d 0e3b 	strb.w	r0, [sp, #3643]	; 0xe3b
    b792:	f89d 1e3b 	ldrb.w	r1, [sp, #3643]	; 0xe3b
    b796:	f640 2000 	movw	r0, #2560	; 0xa00
    b79a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b79e:	f007 f98f 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b7a2:	f8cd 0e3c 	str.w	r0, [sp, #3644]	; 0xe3c
    b7a6:	f8dd 0e3c 	ldr.w	r0, [sp, #3644]	; 0xe3c
    b7aa:	f8cd 08b4 	str.w	r0, [sp, #2228]	; 0x8b4
    b7ae:	e00a      	b.n	b7c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1bd2>
    b7b0:	f89d 08b3 	ldrb.w	r0, [sp, #2227]	; 0x8b3
    b7b4:	07c0      	lsls	r0, r0, #31
    b7b6:	2800      	cmp	r0, #0
    b7b8:	d112      	bne.n	b7e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1bec>
    b7ba:	e055      	b.n	b868 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c74>
    b7bc:	9893      	ldr	r0, [sp, #588]	; 0x24c
    b7be:	07c1      	lsls	r1, r0, #31
    b7c0:	2900      	cmp	r1, #0
    b7c2:	d1e3      	bne.n	b78c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b98>
    b7c4:	e7de      	b.n	b784 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b90>
    b7c6:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    b7ca:	f60d 01b4 	addw	r1, sp, #2228	; 0x8b4
    b7ce:	f007 f96b 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b7d2:	9092      	str	r0, [sp, #584]	; 0x248
    b7d4:	e7ff      	b.n	b7d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1be2>
    b7d6:	9892      	ldr	r0, [sp, #584]	; 0x248
    b7d8:	07c1      	lsls	r1, r0, #31
    b7da:	2900      	cmp	r1, #0
    b7dc:	d1ce      	bne.n	b77c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b88>
    b7de:	e7d1      	b.n	b784 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b90>
                trace!("[{:04x}] SHL Vx, Vy", self.pc);
    b7e0:	f24e 5070 	movw	r0, #58736	; 0xe570
    b7e4:	f2c0 0001 	movt	r0, #1
    b7e8:	6801      	ldr	r1, [r0, #0]
    b7ea:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b7ee:	f100 0212 	add.w	r2, r0, #18
    b7f2:	f8cd 28d8 	str.w	r2, [sp, #2264]	; 0x8d8
    b7f6:	f8dd 28d8 	ldr.w	r2, [sp, #2264]	; 0x8d8
    b7fa:	f8cd 2d28 	str.w	r2, [sp, #3368]	; 0xd28
    b7fe:	f248 230f 	movw	r3, #33295	; 0x820f
    b802:	f2c0 0301 	movt	r3, #1
    b806:	4610      	mov	r0, r2
    b808:	9191      	str	r1, [sp, #580]	; 0x244
    b80a:	4619      	mov	r1, r3
    b80c:	f006 fa6a 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b810:	9090      	str	r0, [sp, #576]	; 0x240
    b812:	918f      	str	r1, [sp, #572]	; 0x23c
    b814:	e7ff      	b.n	b816 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c22>
    b816:	9890      	ldr	r0, [sp, #576]	; 0x240
    b818:	f8cd 08d0 	str.w	r0, [sp, #2256]	; 0x8d0
    b81c:	998f      	ldr	r1, [sp, #572]	; 0x23c
    b81e:	f8cd 18d4 	str.w	r1, [sp, #2260]	; 0x8d4
    b822:	f64d 6278 	movw	r2, #56952	; 0xde78
    b826:	f2c0 0201 	movt	r2, #1
    b82a:	6812      	ldr	r2, [r2, #0]
    b82c:	466b      	mov	r3, sp
    b82e:	f04f 0c01 	mov.w	ip, #1
    b832:	f8c3 c008 	str.w	ip, [r3, #8]
    b836:	605a      	str	r2, [r3, #4]
    b838:	f8c3 c000 	str.w	ip, [r3]
    b83c:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    b840:	2202      	movs	r2, #2
    b842:	f50d 630d 	add.w	r3, sp, #2256	; 0x8d0
    b846:	9991      	ldr	r1, [sp, #580]	; 0x244
    b848:	f002 faf7 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b84c:	e7ff      	b.n	b84e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c5a>
    b84e:	f8dd 18ac 	ldr.w	r1, [sp, #2220]	; 0x8ac
    b852:	f24e 5090 	movw	r0, #58768	; 0xe590
    b856:	f2c0 0001 	movt	r0, #1
    b85a:	6802      	ldr	r2, [r0, #0]
    b85c:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    b860:	f003 fab7 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b864:	e7ff      	b.n	b866 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c72>
    b866:	e7ff      	b.n	b868 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c74>
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    b868:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b86c:	280f      	cmp	r0, #15
    b86e:	f201 861e 	bhi.w	d4ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38ba>
    b872:	e7ff      	b.n	b874 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c80>
    b874:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b878:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b87c:	1842      	adds	r2, r0, r1
    b87e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b882:	09d2      	lsrs	r2, r2, #7
    b884:	928e      	str	r2, [sp, #568]	; 0x238
    b886:	e7ff      	b.n	b888 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c94>
    b888:	988e      	ldr	r0, [sp, #568]	; 0x238
    b88a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    b88e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shl(1);
    b892:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    b896:	2a0f      	cmp	r2, #15
    b898:	f201 8613 	bhi.w	d4c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38ce>
    b89c:	e7ff      	b.n	b89e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1caa>
    b89e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b8a2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b8a6:	1842      	adds	r2, r0, r1
    b8a8:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    b8ac:	2101      	movs	r1, #1
    b8ae:	f007 f957 	bl	12b60 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17h31de2c523da77629E>
    b8b2:	908d      	str	r0, [sp, #564]	; 0x234
    b8b4:	e7ff      	b.n	b8b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1cc2>
    b8b6:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b8ba:	280f      	cmp	r0, #15
    b8bc:	f201 860b 	bhi.w	d4d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38e2>
    b8c0:	e7ff      	b.n	b8c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1cce>
    b8c2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b8c6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b8ca:	1842      	adds	r2, r0, r1
    b8cc:	9b8d      	ldr	r3, [sp, #564]	; 0x234
    b8ce:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    b8d2:	f001 bc45 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b8d6:	2005      	movs	r0, #5
    b8d8:	f8cd 08dc 	str.w	r0, [sp, #2268]	; 0x8dc
    b8dc:	f64d 6030 	movw	r0, #56880	; 0xde30
    b8e0:	f2c0 0001 	movt	r0, #1
    b8e4:	6801      	ldr	r1, [r0, #0]
    b8e6:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    b8ea:	f007 f8dd 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b8ee:	908c      	str	r0, [sp, #560]	; 0x230
    b8f0:	e01f      	b.n	b932 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d3e>
    b8f2:	2001      	movs	r0, #1
    b8f4:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    b8f8:	e015      	b.n	b926 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d32>
    b8fa:	2000      	movs	r0, #0
    b8fc:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    b900:	e011      	b.n	b926 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d32>
    b902:	2000      	movs	r0, #0
    b904:	f88d 0e43 	strb.w	r0, [sp, #3651]	; 0xe43
    b908:	f89d 1e43 	ldrb.w	r1, [sp, #3651]	; 0xe43
    b90c:	f640 2000 	movw	r0, #2560	; 0xa00
    b910:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b914:	f007 f8d4 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b918:	f8cd 0e44 	str.w	r0, [sp, #3652]	; 0xe44
    b91c:	f8dd 0e44 	ldr.w	r0, [sp, #3652]	; 0xe44
    b920:	f8cd 08e4 	str.w	r0, [sp, #2276]	; 0x8e4
    b924:	e00a      	b.n	b93c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d48>
    b926:	f89d 08e3 	ldrb.w	r0, [sp, #2275]	; 0x8e3
    b92a:	07c0      	lsls	r0, r0, #31
    b92c:	2800      	cmp	r0, #0
    b92e:	d112      	bne.n	b956 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d62>
    b930:	e055      	b.n	b9de <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1dea>
    b932:	988c      	ldr	r0, [sp, #560]	; 0x230
    b934:	07c1      	lsls	r1, r0, #31
    b936:	2900      	cmp	r1, #0
    b938:	d1e3      	bne.n	b902 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d0e>
    b93a:	e7de      	b.n	b8fa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d06>
    b93c:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    b940:	f60d 01e4 	addw	r1, sp, #2276	; 0x8e4
    b944:	f007 f8b0 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b948:	908b      	str	r0, [sp, #556]	; 0x22c
    b94a:	e7ff      	b.n	b94c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d58>
    b94c:	988b      	ldr	r0, [sp, #556]	; 0x22c
    b94e:	07c1      	lsls	r1, r0, #31
    b950:	2900      	cmp	r1, #0
    b952:	d1ce      	bne.n	b8f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1cfe>
    b954:	e7d1      	b.n	b8fa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d06>
                trace!("[{:04x}] SNE Vx, Vy", self.pc);
    b956:	f24e 5010 	movw	r0, #58640	; 0xe510
    b95a:	f2c0 0001 	movt	r0, #1
    b95e:	6801      	ldr	r1, [r0, #0]
    b960:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b964:	f100 0212 	add.w	r2, r0, #18
    b968:	f8cd 2908 	str.w	r2, [sp, #2312]	; 0x908
    b96c:	f8dd 2908 	ldr.w	r2, [sp, #2312]	; 0x908
    b970:	f8cd 2d24 	str.w	r2, [sp, #3364]	; 0xd24
    b974:	f248 230f 	movw	r3, #33295	; 0x820f
    b978:	f2c0 0301 	movt	r3, #1
    b97c:	4610      	mov	r0, r2
    b97e:	918a      	str	r1, [sp, #552]	; 0x228
    b980:	4619      	mov	r1, r3
    b982:	f006 f9af 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b986:	9089      	str	r0, [sp, #548]	; 0x224
    b988:	9188      	str	r1, [sp, #544]	; 0x220
    b98a:	e7ff      	b.n	b98c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d98>
    b98c:	9889      	ldr	r0, [sp, #548]	; 0x224
    b98e:	f8cd 0900 	str.w	r0, [sp, #2304]	; 0x900
    b992:	9988      	ldr	r1, [sp, #544]	; 0x220
    b994:	f8cd 1904 	str.w	r1, [sp, #2308]	; 0x904
    b998:	f64d 6278 	movw	r2, #56952	; 0xde78
    b99c:	f2c0 0201 	movt	r2, #1
    b9a0:	6812      	ldr	r2, [r2, #0]
    b9a2:	466b      	mov	r3, sp
    b9a4:	f04f 0c01 	mov.w	ip, #1
    b9a8:	f8c3 c008 	str.w	ip, [r3, #8]
    b9ac:	605a      	str	r2, [r3, #4]
    b9ae:	f8c3 c000 	str.w	ip, [r3]
    b9b2:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    b9b6:	2202      	movs	r2, #2
    b9b8:	f50d 6310 	add.w	r3, sp, #2304	; 0x900
    b9bc:	998a      	ldr	r1, [sp, #552]	; 0x228
    b9be:	f002 fa3c 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b9c2:	e7ff      	b.n	b9c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1dd0>
    b9c4:	f8dd 18dc 	ldr.w	r1, [sp, #2268]	; 0x8dc
    b9c8:	f24e 5030 	movw	r0, #58672	; 0xe530
    b9cc:	f2c0 0001 	movt	r0, #1
    b9d0:	6802      	ldr	r2, [r0, #0]
    b9d2:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    b9d6:	f003 f9fc 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b9da:	e7ff      	b.n	b9dc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1de8>
    b9dc:	e7ff      	b.n	b9de <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1dea>
                if self.v[x] != self.v[y] {
    b9de:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b9e2:	280f      	cmp	r0, #15
    b9e4:	f201 854f 	bhi.w	d486 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3892>
    b9e8:	e7ff      	b.n	b9ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1df6>
    b9ea:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b9ee:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b9f2:	1842      	adds	r2, r0, r1
    b9f4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b9f8:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    b9fc:	2b0f      	cmp	r3, #15
    b9fe:	9287      	str	r2, [sp, #540]	; 0x21c
    ba00:	f201 854b 	bhi.w	d49a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38a6>
    ba04:	e7ff      	b.n	ba06 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e12>
    ba06:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ba0a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ba0e:	1842      	adds	r2, r0, r1
    ba10:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ba14:	9b87      	ldr	r3, [sp, #540]	; 0x21c
    ba16:	fa5f fc83 	uxtb.w	ip, r3
    ba1a:	4594      	cmp	ip, r2
    ba1c:	d006      	beq.n	ba2c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e38>
    ba1e:	e7ff      	b.n	ba20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e2c>
                    self.next();
    ba20:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ba24:	f001 fece 	bl	d7c4 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    ba28:	e7ff      	b.n	ba2a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e36>
                if self.v[x] != self.v[y] {
    ba2a:	e7ff      	b.n	ba2c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e38>
        match (
    ba2c:	f001 bb98 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    ba30:	2005      	movs	r0, #5
    ba32:	f8cd 090c 	str.w	r0, [sp, #2316]	; 0x90c
    ba36:	f64d 6030 	movw	r0, #56880	; 0xde30
    ba3a:	f2c0 0001 	movt	r0, #1
    ba3e:	6801      	ldr	r1, [r0, #0]
    ba40:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    ba44:	f007 f830 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ba48:	9086      	str	r0, [sp, #536]	; 0x218
    ba4a:	e01f      	b.n	ba8c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e98>
    ba4c:	2001      	movs	r0, #1
    ba4e:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    ba52:	e015      	b.n	ba80 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e8c>
    ba54:	2000      	movs	r0, #0
    ba56:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    ba5a:	e011      	b.n	ba80 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e8c>
    ba5c:	2000      	movs	r0, #0
    ba5e:	f88d 0e4b 	strb.w	r0, [sp, #3659]	; 0xe4b
    ba62:	f89d 1e4b 	ldrb.w	r1, [sp, #3659]	; 0xe4b
    ba66:	f640 2000 	movw	r0, #2560	; 0xa00
    ba6a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba6e:	f007 f827 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    ba72:	f8cd 0e4c 	str.w	r0, [sp, #3660]	; 0xe4c
    ba76:	f8dd 0e4c 	ldr.w	r0, [sp, #3660]	; 0xe4c
    ba7a:	f8cd 0914 	str.w	r0, [sp, #2324]	; 0x914
    ba7e:	e00a      	b.n	ba96 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1ea2>
    ba80:	f89d 0913 	ldrb.w	r0, [sp, #2323]	; 0x913
    ba84:	07c0      	lsls	r0, r0, #31
    ba86:	2800      	cmp	r0, #0
    ba88:	d112      	bne.n	bab0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1ebc>
    ba8a:	e055      	b.n	bb38 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f44>
    ba8c:	9886      	ldr	r0, [sp, #536]	; 0x218
    ba8e:	07c1      	lsls	r1, r0, #31
    ba90:	2900      	cmp	r1, #0
    ba92:	d1e3      	bne.n	ba5c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e68>
    ba94:	e7de      	b.n	ba54 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e60>
    ba96:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    ba9a:	f60d 1114 	addw	r1, sp, #2324	; 0x914
    ba9e:	f007 f803 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    baa2:	9085      	str	r0, [sp, #532]	; 0x214
    baa4:	e7ff      	b.n	baa6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1eb2>
    baa6:	9885      	ldr	r0, [sp, #532]	; 0x214
    baa8:	07c1      	lsls	r1, r0, #31
    baaa:	2900      	cmp	r1, #0
    baac:	d1ce      	bne.n	ba4c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e58>
    baae:	e7d1      	b.n	ba54 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e60>
                trace!("[{:04x}] LD I, nnn", self.pc);
    bab0:	f24e 40d0 	movw	r0, #58576	; 0xe4d0
    bab4:	f2c0 0001 	movt	r0, #1
    bab8:	6801      	ldr	r1, [r0, #0]
    baba:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    babe:	f100 0212 	add.w	r2, r0, #18
    bac2:	f8cd 2938 	str.w	r2, [sp, #2360]	; 0x938
    bac6:	f8dd 2938 	ldr.w	r2, [sp, #2360]	; 0x938
    baca:	f8cd 2d20 	str.w	r2, [sp, #3360]	; 0xd20
    bace:	f248 230f 	movw	r3, #33295	; 0x820f
    bad2:	f2c0 0301 	movt	r3, #1
    bad6:	4610      	mov	r0, r2
    bad8:	9184      	str	r1, [sp, #528]	; 0x210
    bada:	4619      	mov	r1, r3
    badc:	f006 f902 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bae0:	9083      	str	r0, [sp, #524]	; 0x20c
    bae2:	9182      	str	r1, [sp, #520]	; 0x208
    bae4:	e7ff      	b.n	bae6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1ef2>
    bae6:	9883      	ldr	r0, [sp, #524]	; 0x20c
    bae8:	f8cd 0930 	str.w	r0, [sp, #2352]	; 0x930
    baec:	9982      	ldr	r1, [sp, #520]	; 0x208
    baee:	f8cd 1934 	str.w	r1, [sp, #2356]	; 0x934
    baf2:	f64d 6278 	movw	r2, #56952	; 0xde78
    baf6:	f2c0 0201 	movt	r2, #1
    bafa:	6812      	ldr	r2, [r2, #0]
    bafc:	466b      	mov	r3, sp
    bafe:	f04f 0c01 	mov.w	ip, #1
    bb02:	f8c3 c008 	str.w	ip, [r3, #8]
    bb06:	605a      	str	r2, [r3, #4]
    bb08:	f8c3 c000 	str.w	ip, [r3]
    bb0c:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    bb10:	2202      	movs	r2, #2
    bb12:	f50d 6313 	add.w	r3, sp, #2352	; 0x930
    bb16:	9984      	ldr	r1, [sp, #528]	; 0x210
    bb18:	f002 f98f 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    bb1c:	e7ff      	b.n	bb1e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f2a>
    bb1e:	f8dd 190c 	ldr.w	r1, [sp, #2316]	; 0x90c
    bb22:	f24e 40f0 	movw	r0, #58608	; 0xe4f0
    bb26:	f2c0 0001 	movt	r0, #1
    bb2a:	6802      	ldr	r2, [r0, #0]
    bb2c:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    bb30:	f003 f94f 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bb34:	e7ff      	b.n	bb36 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f42>
    bb36:	e7ff      	b.n	bb38 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f44>
                self.i = nnn;
    bb38:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    bb3c:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    bb40:	8208      	strh	r0, [r1, #16]
        match (
    bb42:	f001 bb0d 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    bb46:	2005      	movs	r0, #5
    bb48:	f8cd 093c 	str.w	r0, [sp, #2364]	; 0x93c
    bb4c:	f64d 6030 	movw	r0, #56880	; 0xde30
    bb50:	f2c0 0001 	movt	r0, #1
    bb54:	6801      	ldr	r1, [r0, #0]
    bb56:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    bb5a:	f006 ffa5 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bb5e:	9081      	str	r0, [sp, #516]	; 0x204
    bb60:	e01f      	b.n	bba2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fae>
    bb62:	2001      	movs	r0, #1
    bb64:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    bb68:	e015      	b.n	bb96 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fa2>
    bb6a:	2000      	movs	r0, #0
    bb6c:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    bb70:	e011      	b.n	bb96 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fa2>
    bb72:	2000      	movs	r0, #0
    bb74:	f88d 0e53 	strb.w	r0, [sp, #3667]	; 0xe53
    bb78:	f89d 1e53 	ldrb.w	r1, [sp, #3667]	; 0xe53
    bb7c:	f640 2000 	movw	r0, #2560	; 0xa00
    bb80:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bb84:	f006 ff9c 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    bb88:	f8cd 0e54 	str.w	r0, [sp, #3668]	; 0xe54
    bb8c:	f8dd 0e54 	ldr.w	r0, [sp, #3668]	; 0xe54
    bb90:	f8cd 0944 	str.w	r0, [sp, #2372]	; 0x944
    bb94:	e00a      	b.n	bbac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fb8>
    bb96:	f89d 0943 	ldrb.w	r0, [sp, #2371]	; 0x943
    bb9a:	07c0      	lsls	r0, r0, #31
    bb9c:	2800      	cmp	r0, #0
    bb9e:	d112      	bne.n	bbc6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fd2>
    bba0:	e055      	b.n	bc4e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x205a>
    bba2:	9881      	ldr	r0, [sp, #516]	; 0x204
    bba4:	07c1      	lsls	r1, r0, #31
    bba6:	2900      	cmp	r1, #0
    bba8:	d1e3      	bne.n	bb72 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f7e>
    bbaa:	e7de      	b.n	bb6a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f76>
    bbac:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    bbb0:	f60d 1144 	addw	r1, sp, #2372	; 0x944
    bbb4:	f006 ff78 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bbb8:	9080      	str	r0, [sp, #512]	; 0x200
    bbba:	e7ff      	b.n	bbbc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fc8>
    bbbc:	9880      	ldr	r0, [sp, #512]	; 0x200
    bbbe:	07c1      	lsls	r1, r0, #31
    bbc0:	2900      	cmp	r1, #0
    bbc2:	d1ce      	bne.n	bb62 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f6e>
    bbc4:	e7d1      	b.n	bb6a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f76>
                trace!("[{:04x}] JP V0, nnn", self.pc);
    bbc6:	f24e 4090 	movw	r0, #58512	; 0xe490
    bbca:	f2c0 0001 	movt	r0, #1
    bbce:	6801      	ldr	r1, [r0, #0]
    bbd0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bbd4:	f100 0212 	add.w	r2, r0, #18
    bbd8:	f8cd 2968 	str.w	r2, [sp, #2408]	; 0x968
    bbdc:	f8dd 2968 	ldr.w	r2, [sp, #2408]	; 0x968
    bbe0:	f8cd 2d1c 	str.w	r2, [sp, #3356]	; 0xd1c
    bbe4:	f248 230f 	movw	r3, #33295	; 0x820f
    bbe8:	f2c0 0301 	movt	r3, #1
    bbec:	4610      	mov	r0, r2
    bbee:	917f      	str	r1, [sp, #508]	; 0x1fc
    bbf0:	4619      	mov	r1, r3
    bbf2:	f006 f877 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bbf6:	907e      	str	r0, [sp, #504]	; 0x1f8
    bbf8:	917d      	str	r1, [sp, #500]	; 0x1f4
    bbfa:	e7ff      	b.n	bbfc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2008>
    bbfc:	987e      	ldr	r0, [sp, #504]	; 0x1f8
    bbfe:	f8cd 0960 	str.w	r0, [sp, #2400]	; 0x960
    bc02:	997d      	ldr	r1, [sp, #500]	; 0x1f4
    bc04:	f8cd 1964 	str.w	r1, [sp, #2404]	; 0x964
    bc08:	f64d 6278 	movw	r2, #56952	; 0xde78
    bc0c:	f2c0 0201 	movt	r2, #1
    bc10:	6812      	ldr	r2, [r2, #0]
    bc12:	466b      	mov	r3, sp
    bc14:	f04f 0c01 	mov.w	ip, #1
    bc18:	f8c3 c008 	str.w	ip, [r3, #8]
    bc1c:	605a      	str	r2, [r3, #4]
    bc1e:	f8c3 c000 	str.w	ip, [r3]
    bc22:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    bc26:	2202      	movs	r2, #2
    bc28:	f50d 6316 	add.w	r3, sp, #2400	; 0x960
    bc2c:	997f      	ldr	r1, [sp, #508]	; 0x1fc
    bc2e:	f002 f904 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    bc32:	e7ff      	b.n	bc34 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2040>
    bc34:	f8dd 193c 	ldr.w	r1, [sp, #2364]	; 0x93c
    bc38:	f24e 40b0 	movw	r0, #58544	; 0xe4b0
    bc3c:	f2c0 0001 	movt	r0, #1
    bc40:	6802      	ldr	r2, [r0, #0]
    bc42:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    bc46:	f003 f8c4 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bc4a:	e7ff      	b.n	bc4c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2058>
    bc4c:	e7ff      	b.n	bc4e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x205a>
                self.jump(nnn.wrapping_add(self.v[0].into()).wrapping_sub(2));
    bc4e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bc52:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    bc56:	f001 ff5c 	bl	db12 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE>
    bc5a:	907c      	str	r0, [sp, #496]	; 0x1f0
    bc5c:	e7ff      	b.n	bc5e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x206a>
    bc5e:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    bc62:	997c      	ldr	r1, [sp, #496]	; 0x1f0
    bc64:	f007 f808 	bl	12c78 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E>
    bc68:	907b      	str	r0, [sp, #492]	; 0x1ec
    bc6a:	e7ff      	b.n	bc6c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2078>
    bc6c:	2102      	movs	r1, #2
    bc6e:	987b      	ldr	r0, [sp, #492]	; 0x1ec
    bc70:	f007 f813 	bl	12c9a <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E>
    bc74:	907a      	str	r0, [sp, #488]	; 0x1e8
    bc76:	e7ff      	b.n	bc78 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2084>
    bc78:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bc7c:	997a      	ldr	r1, [sp, #488]	; 0x1e8
    bc7e:	f001 fd5e 	bl	d73e <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>
    bc82:	e7ff      	b.n	bc84 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2090>
        match (
    bc84:	f001 ba6c 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    bc88:	2005      	movs	r0, #5
    bc8a:	f8cd 096c 	str.w	r0, [sp, #2412]	; 0x96c
    bc8e:	f64d 6030 	movw	r0, #56880	; 0xde30
    bc92:	f2c0 0001 	movt	r0, #1
    bc96:	6801      	ldr	r1, [r0, #0]
    bc98:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    bc9c:	f006 ff04 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bca0:	9079      	str	r0, [sp, #484]	; 0x1e4
    bca2:	e01f      	b.n	bce4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20f0>
    bca4:	2001      	movs	r0, #1
    bca6:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    bcaa:	e015      	b.n	bcd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20e4>
    bcac:	2000      	movs	r0, #0
    bcae:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    bcb2:	e011      	b.n	bcd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20e4>
    bcb4:	2000      	movs	r0, #0
    bcb6:	f88d 0e5b 	strb.w	r0, [sp, #3675]	; 0xe5b
    bcba:	f89d 1e5b 	ldrb.w	r1, [sp, #3675]	; 0xe5b
    bcbe:	f640 2000 	movw	r0, #2560	; 0xa00
    bcc2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bcc6:	f006 fefb 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    bcca:	f8cd 0e5c 	str.w	r0, [sp, #3676]	; 0xe5c
    bcce:	f8dd 0e5c 	ldr.w	r0, [sp, #3676]	; 0xe5c
    bcd2:	f8cd 0974 	str.w	r0, [sp, #2420]	; 0x974
    bcd6:	e00a      	b.n	bcee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20fa>
    bcd8:	f89d 0973 	ldrb.w	r0, [sp, #2419]	; 0x973
    bcdc:	07c0      	lsls	r0, r0, #31
    bcde:	2800      	cmp	r0, #0
    bce0:	d112      	bne.n	bd08 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2114>
    bce2:	e055      	b.n	bd90 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x219c>
    bce4:	9879      	ldr	r0, [sp, #484]	; 0x1e4
    bce6:	07c1      	lsls	r1, r0, #31
    bce8:	2900      	cmp	r1, #0
    bcea:	d1e3      	bne.n	bcb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20c0>
    bcec:	e7de      	b.n	bcac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20b8>
    bcee:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    bcf2:	f60d 1174 	addw	r1, sp, #2420	; 0x974
    bcf6:	f006 fed7 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bcfa:	9078      	str	r0, [sp, #480]	; 0x1e0
    bcfc:	e7ff      	b.n	bcfe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x210a>
    bcfe:	9878      	ldr	r0, [sp, #480]	; 0x1e0
    bd00:	07c1      	lsls	r1, r0, #31
    bd02:	2900      	cmp	r1, #0
    bd04:	d1ce      	bne.n	bca4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20b0>
    bd06:	e7d1      	b.n	bcac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20b8>
                trace!("[{:04x}] RND Vx, kk", self.pc);
    bd08:	f24e 4040 	movw	r0, #58432	; 0xe440
    bd0c:	f2c0 0001 	movt	r0, #1
    bd10:	6801      	ldr	r1, [r0, #0]
    bd12:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bd16:	f100 0212 	add.w	r2, r0, #18
    bd1a:	f8cd 2998 	str.w	r2, [sp, #2456]	; 0x998
    bd1e:	f8dd 2998 	ldr.w	r2, [sp, #2456]	; 0x998
    bd22:	f8cd 2d18 	str.w	r2, [sp, #3352]	; 0xd18
    bd26:	f248 230f 	movw	r3, #33295	; 0x820f
    bd2a:	f2c0 0301 	movt	r3, #1
    bd2e:	4610      	mov	r0, r2
    bd30:	9177      	str	r1, [sp, #476]	; 0x1dc
    bd32:	4619      	mov	r1, r3
    bd34:	f005 ffd6 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bd38:	9076      	str	r0, [sp, #472]	; 0x1d8
    bd3a:	9175      	str	r1, [sp, #468]	; 0x1d4
    bd3c:	e7ff      	b.n	bd3e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x214a>
    bd3e:	9876      	ldr	r0, [sp, #472]	; 0x1d8
    bd40:	f8cd 0990 	str.w	r0, [sp, #2448]	; 0x990
    bd44:	9975      	ldr	r1, [sp, #468]	; 0x1d4
    bd46:	f8cd 1994 	str.w	r1, [sp, #2452]	; 0x994
    bd4a:	f64d 6278 	movw	r2, #56952	; 0xde78
    bd4e:	f2c0 0201 	movt	r2, #1
    bd52:	6812      	ldr	r2, [r2, #0]
    bd54:	466b      	mov	r3, sp
    bd56:	f04f 0c01 	mov.w	ip, #1
    bd5a:	f8c3 c008 	str.w	ip, [r3, #8]
    bd5e:	605a      	str	r2, [r3, #4]
    bd60:	f8c3 c000 	str.w	ip, [r3]
    bd64:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    bd68:	2202      	movs	r2, #2
    bd6a:	f50d 6319 	add.w	r3, sp, #2448	; 0x990
    bd6e:	9977      	ldr	r1, [sp, #476]	; 0x1dc
    bd70:	f002 f863 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    bd74:	e7ff      	b.n	bd76 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2182>
    bd76:	f8dd 196c 	ldr.w	r1, [sp, #2412]	; 0x96c
    bd7a:	f24e 4060 	movw	r0, #58464	; 0xe460
    bd7e:	f2c0 0001 	movt	r0, #1
    bd82:	6802      	ldr	r2, [r0, #0]
    bd84:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    bd88:	f003 f823 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bd8c:	e7ff      	b.n	bd8e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x219a>
    bd8e:	e7ff      	b.n	bd90 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x219c>
                self.v[x] = self.hw.rand() & kk;
    bd90:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bd94:	f7fd fc08 	bl	95a8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h6cf7f1058fcc9245E>
    bd98:	9074      	str	r0, [sp, #464]	; 0x1d0
    bd9a:	e7ff      	b.n	bd9c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21a8>
    bd9c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    bda0:	280f      	cmp	r0, #15
    bda2:	f201 8366 	bhi.w	d472 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x387e>
    bda6:	e7ff      	b.n	bda8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21b4>
    bda8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bdac:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    bdb0:	1842      	adds	r2, r0, r1
    bdb2:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
    bdb4:	f8dd c45c 	ldr.w	ip, [sp, #1116]	; 0x45c
    bdb8:	ea03 0e0c 	and.w	lr, r3, ip
    bdbc:	f882 e034 	strb.w	lr, [r2, #52]	; 0x34
        match (
    bdc0:	f001 b9ce 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    bdc4:	2005      	movs	r0, #5
    bdc6:	f8cd 099c 	str.w	r0, [sp, #2460]	; 0x99c
    bdca:	f64d 6030 	movw	r0, #56880	; 0xde30
    bdce:	f2c0 0001 	movt	r0, #1
    bdd2:	6801      	ldr	r1, [r0, #0]
    bdd4:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    bdd8:	f006 fe66 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bddc:	9073      	str	r0, [sp, #460]	; 0x1cc
    bdde:	e01f      	b.n	be20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x222c>
    bde0:	2001      	movs	r0, #1
    bde2:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    bde6:	e015      	b.n	be14 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2220>
    bde8:	2000      	movs	r0, #0
    bdea:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    bdee:	e011      	b.n	be14 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2220>
    bdf0:	2000      	movs	r0, #0
    bdf2:	f88d 0e63 	strb.w	r0, [sp, #3683]	; 0xe63
    bdf6:	f89d 1e63 	ldrb.w	r1, [sp, #3683]	; 0xe63
    bdfa:	f640 2000 	movw	r0, #2560	; 0xa00
    bdfe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    be02:	f006 fe5d 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    be06:	f8cd 0e64 	str.w	r0, [sp, #3684]	; 0xe64
    be0a:	f8dd 0e64 	ldr.w	r0, [sp, #3684]	; 0xe64
    be0e:	f8cd 09a4 	str.w	r0, [sp, #2468]	; 0x9a4
    be12:	e00a      	b.n	be2a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2236>
    be14:	f89d 09a3 	ldrb.w	r0, [sp, #2467]	; 0x9a3
    be18:	07c0      	lsls	r0, r0, #31
    be1a:	2800      	cmp	r0, #0
    be1c:	d112      	bne.n	be44 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2250>
    be1e:	e055      	b.n	becc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22d8>
    be20:	9873      	ldr	r0, [sp, #460]	; 0x1cc
    be22:	07c1      	lsls	r1, r0, #31
    be24:	2900      	cmp	r1, #0
    be26:	d1e3      	bne.n	bdf0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21fc>
    be28:	e7de      	b.n	bde8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21f4>
    be2a:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    be2e:	f60d 11a4 	addw	r1, sp, #2468	; 0x9a4
    be32:	f006 fe39 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    be36:	9072      	str	r0, [sp, #456]	; 0x1c8
    be38:	e7ff      	b.n	be3a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2246>
    be3a:	9872      	ldr	r0, [sp, #456]	; 0x1c8
    be3c:	07c1      	lsls	r1, r0, #31
    be3e:	2900      	cmp	r1, #0
    be40:	d1ce      	bne.n	bde0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21ec>
    be42:	e7d1      	b.n	bde8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21f4>
                trace!("[{:04x}] DRW Vx, Vy, n", self.pc);
    be44:	f24e 20e4 	movw	r0, #58084	; 0xe2e4
    be48:	f2c0 0001 	movt	r0, #1
    be4c:	6801      	ldr	r1, [r0, #0]
    be4e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    be52:	f100 0212 	add.w	r2, r0, #18
    be56:	f8cd 29c8 	str.w	r2, [sp, #2504]	; 0x9c8
    be5a:	f8dd 29c8 	ldr.w	r2, [sp, #2504]	; 0x9c8
    be5e:	f8cd 2cdc 	str.w	r2, [sp, #3292]	; 0xcdc
    be62:	f248 230f 	movw	r3, #33295	; 0x820f
    be66:	f2c0 0301 	movt	r3, #1
    be6a:	4610      	mov	r0, r2
    be6c:	9171      	str	r1, [sp, #452]	; 0x1c4
    be6e:	4619      	mov	r1, r3
    be70:	f005 ff38 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    be74:	9070      	str	r0, [sp, #448]	; 0x1c0
    be76:	916f      	str	r1, [sp, #444]	; 0x1bc
    be78:	e7ff      	b.n	be7a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2286>
    be7a:	9870      	ldr	r0, [sp, #448]	; 0x1c0
    be7c:	f8cd 09c0 	str.w	r0, [sp, #2496]	; 0x9c0
    be80:	996f      	ldr	r1, [sp, #444]	; 0x1bc
    be82:	f8cd 19c4 	str.w	r1, [sp, #2500]	; 0x9c4
    be86:	f64d 6278 	movw	r2, #56952	; 0xde78
    be8a:	f2c0 0201 	movt	r2, #1
    be8e:	6812      	ldr	r2, [r2, #0]
    be90:	466b      	mov	r3, sp
    be92:	f04f 0c01 	mov.w	ip, #1
    be96:	f8c3 c008 	str.w	ip, [r3, #8]
    be9a:	605a      	str	r2, [r3, #4]
    be9c:	f8c3 c000 	str.w	ip, [r3]
    bea0:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    bea4:	2202      	movs	r2, #2
    bea6:	f50d 631c 	add.w	r3, sp, #2496	; 0x9c0
    beaa:	9971      	ldr	r1, [sp, #452]	; 0x1c4
    beac:	f001 ffc5 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    beb0:	e7ff      	b.n	beb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22be>
    beb2:	f8dd 199c 	ldr.w	r1, [sp, #2460]	; 0x99c
    beb6:	f24e 3004 	movw	r0, #58116	; 0xe304
    beba:	f2c0 0001 	movt	r0, #1
    bebe:	6802      	ldr	r2, [r0, #0]
    bec0:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    bec4:	f002 ff85 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bec8:	e7ff      	b.n	beca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22d6>
    beca:	e7ff      	b.n	becc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22d8>
                let basex = self.v[x] as usize;
    becc:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    bed0:	280f      	cmp	r0, #15
    bed2:	f201 825c 	bhi.w	d38e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x379a>
    bed6:	e7ff      	b.n	bed8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22e4>
    bed8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bedc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    bee0:	1842      	adds	r2, r0, r1
    bee2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bee6:	4613      	mov	r3, r2
    bee8:	f8cd 2ce0 	str.w	r2, [sp, #3296]	; 0xce0
                let basey = self.v[y] as usize;
    beec:	f8dd 2460 	ldr.w	r2, [sp, #1120]	; 0x460
    bef0:	2a0f      	cmp	r2, #15
    bef2:	936e      	str	r3, [sp, #440]	; 0x1b8
    bef4:	f201 8255 	bhi.w	d3a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x37ae>
    bef8:	e7ff      	b.n	befa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2306>
    befa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    befe:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    bf02:	1842      	adds	r2, r0, r1
    bf04:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bf08:	4613      	mov	r3, r2
    bf0a:	f8cd 2ce4 	str.w	r2, [sp, #3300]	; 0xce4
                let (w, h) = self.hw.vram_size();
    bf0e:	936d      	str	r3, [sp, #436]	; 0x1b4
    bf10:	f7fd fd10 	bl	9934 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hd317927185b0114cE>
    bf14:	906c      	str	r0, [sp, #432]	; 0x1b0
    bf16:	916b      	str	r1, [sp, #428]	; 0x1ac
    bf18:	e7ff      	b.n	bf1a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2326>
    bf1a:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    bf1c:	f8cd 0ce8 	str.w	r0, [sp, #3304]	; 0xce8
    bf20:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    bf22:	f8cd 1cec 	str.w	r1, [sp, #3308]	; 0xcec
    bf26:	2200      	movs	r2, #0
                self.v[0xf] = 0;
    bf28:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    bf2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                for y in 0..n {
    bf30:	f8cd 29cc 	str.w	r2, [sp, #2508]	; 0x9cc
    bf34:	f8dd 2470 	ldr.w	r2, [sp, #1136]	; 0x470
    bf38:	f8cd 29d0 	str.w	r2, [sp, #2512]	; 0x9d0
    bf3c:	f8dd 09cc 	ldr.w	r0, [sp, #2508]	; 0x9cc
    bf40:	f8dd 19d0 	ldr.w	r1, [sp, #2512]	; 0x9d0
    bf44:	f002 fcd7 	bl	e8f6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    bf48:	906a      	str	r0, [sp, #424]	; 0x1a8
    bf4a:	9169      	str	r1, [sp, #420]	; 0x1a4
    bf4c:	e7ff      	b.n	bf4e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x235a>
    bf4e:	986a      	ldr	r0, [sp, #424]	; 0x1a8
    bf50:	f8cd 09d4 	str.w	r0, [sp, #2516]	; 0x9d4
    bf54:	9969      	ldr	r1, [sp, #420]	; 0x1a4
    bf56:	f8cd 19d8 	str.w	r1, [sp, #2520]	; 0x9d8
    bf5a:	e7ff      	b.n	bf5c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2368>
    bf5c:	f60d 10d4 	addw	r0, sp, #2516	; 0x9d4
    bf60:	f002 fc3e 	bl	e7e0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    bf64:	f8cd 19e0 	str.w	r1, [sp, #2528]	; 0x9e0
    bf68:	f8cd 09dc 	str.w	r0, [sp, #2524]	; 0x9dc
    bf6c:	e7ff      	b.n	bf6e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x237a>
    bf6e:	f8dd 09dc 	ldr.w	r0, [sp, #2524]	; 0x9dc
    bf72:	2800      	cmp	r0, #0
    bf74:	d001      	beq.n	bf7a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2386>
    bf76:	e7ff      	b.n	bf78 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2384>
    bf78:	e002      	b.n	bf80 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x238c>
        match (
    bf7a:	f001 b8f1 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
                for y in 0..n {
    bf7e:	defe      	udf	#254	; 0xfe
    bf80:	f8dd 09e0 	ldr.w	r0, [sp, #2528]	; 0x9e0
    bf84:	f8cd 0cf0 	str.w	r0, [sp, #3312]	; 0xcf0
    bf88:	f8cd 0cf4 	str.w	r0, [sp, #3316]	; 0xcf4
    bf8c:	f8cd 0cf8 	str.w	r0, [sp, #3320]	; 0xcf8
                    let b = self.mem[self.i as usize + y];
    bf90:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    bf94:	8a0a      	ldrh	r2, [r1, #16]
    bf96:	1813      	adds	r3, r2, r0
    bf98:	469c      	mov	ip, r3
    bf9a:	4293      	cmp	r3, r2
    bf9c:	9068      	str	r0, [sp, #416]	; 0x1a0
    bf9e:	f8cd c19c 	str.w	ip, [sp, #412]	; 0x19c
    bfa2:	f0c1 8208 	bcc.w	d3b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x37c2>
    bfa6:	e7ff      	b.n	bfa8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x23b4>
    bfa8:	2000      	movs	r0, #0
    bfaa:	9967      	ldr	r1, [sp, #412]	; 0x19c
    bfac:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    bfb0:	f041 820d 	bne.w	d3ce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x37da>
    bfb4:	e7ff      	b.n	bfb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x23c2>
    bfb6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bfba:	9967      	ldr	r1, [sp, #412]	; 0x19c
    bfbc:	1842      	adds	r2, r0, r1
    bfbe:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    bfc2:	4613      	mov	r3, r2
    bfc4:	f88d 2cff 	strb.w	r2, [sp, #3327]	; 0xcff
                    let vramy = (y + basey) % h;
    bfc8:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
    bfca:	f8dd c1b4 	ldr.w	ip, [sp, #436]	; 0x1b4
    bfce:	eb02 0e0c 	add.w	lr, r2, ip
    bfd2:	4674      	mov	r4, lr
    bfd4:	4596      	cmp	lr, r2
    bfd6:	9366      	str	r3, [sp, #408]	; 0x198
    bfd8:	9465      	str	r4, [sp, #404]	; 0x194
    bfda:	f0c1 8202 	bcc.w	d3e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x37ee>
    bfde:	e7ff      	b.n	bfe0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x23ec>
    bfe0:	986b      	ldr	r0, [sp, #428]	; 0x1ac
    bfe2:	2800      	cmp	r0, #0
    bfe4:	f001 8209 	beq.w	d3fa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3806>
    bfe8:	e7ff      	b.n	bfea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x23f6>
    bfea:	9865      	ldr	r0, [sp, #404]	; 0x194
    bfec:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    bfee:	fbb0 f2f1 	udiv	r2, r0, r1
    bff2:	fb02 0211 	mls	r2, r2, r1, r0
    bff6:	4613      	mov	r3, r2
    bff8:	f8cd 2d00 	str.w	r2, [sp, #3328]	; 0xd00
    bffc:	2200      	movs	r2, #0
                    for x in 0..8 {
    bffe:	f8cd 29e4 	str.w	r2, [sp, #2532]	; 0x9e4
    c002:	2208      	movs	r2, #8
    c004:	f8cd 29e8 	str.w	r2, [sp, #2536]	; 0x9e8
    c008:	f8dd 09e4 	ldr.w	r0, [sp, #2532]	; 0x9e4
    c00c:	f8dd 19e8 	ldr.w	r1, [sp, #2536]	; 0x9e8
    c010:	9364      	str	r3, [sp, #400]	; 0x190
    c012:	f002 fc70 	bl	e8f6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    c016:	9063      	str	r0, [sp, #396]	; 0x18c
    c018:	9162      	str	r1, [sp, #392]	; 0x188
    c01a:	e7ff      	b.n	c01c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2428>
    c01c:	9863      	ldr	r0, [sp, #396]	; 0x18c
    c01e:	f8cd 09ec 	str.w	r0, [sp, #2540]	; 0x9ec
    c022:	9962      	ldr	r1, [sp, #392]	; 0x188
    c024:	f8cd 19f0 	str.w	r1, [sp, #2544]	; 0x9f0
    c028:	e7ff      	b.n	c02a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2436>
    c02a:	f60d 10ec 	addw	r0, sp, #2540	; 0x9ec
    c02e:	f002 fbd7 	bl	e7e0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    c032:	f8cd 19f8 	str.w	r1, [sp, #2552]	; 0x9f8
    c036:	f8cd 09f4 	str.w	r0, [sp, #2548]	; 0x9f4
    c03a:	e7ff      	b.n	c03c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2448>
    c03c:	f8dd 09f4 	ldr.w	r0, [sp, #2548]	; 0x9f4
    c040:	2800      	cmp	r0, #0
    c042:	d001      	beq.n	c048 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2454>
    c044:	e7ff      	b.n	c046 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2452>
    c046:	e001      	b.n	c04c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2458>
                for y in 0..n {
    c048:	e788      	b.n	bf5c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2368>
                    for x in 0..8 {
    c04a:	defe      	udf	#254	; 0xfe
    c04c:	f8dd 09f8 	ldr.w	r0, [sp, #2552]	; 0x9f8
    c050:	f8cd 0d04 	str.w	r0, [sp, #3332]	; 0xd04
    c054:	f8cd 0d08 	str.w	r0, [sp, #3336]	; 0xd08
    c058:	f8cd 0d0c 	str.w	r0, [sp, #3340]	; 0xd0c
                        let vramx = (x + basex) % w;
    c05c:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    c05e:	1842      	adds	r2, r0, r1
    c060:	4613      	mov	r3, r2
    c062:	4282      	cmp	r2, r0
    c064:	9061      	str	r0, [sp, #388]	; 0x184
    c066:	9360      	str	r3, [sp, #384]	; 0x180
    c068:	f0c1 81d3 	bcc.w	d412 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x381e>
    c06c:	e7ff      	b.n	c06e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x247a>
    c06e:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    c070:	2800      	cmp	r0, #0
    c072:	f001 81da 	beq.w	d42a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3836>
    c076:	e7ff      	b.n	c078 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2484>
    c078:	9860      	ldr	r0, [sp, #384]	; 0x180
    c07a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
    c07c:	fbb0 f2f1 	udiv	r2, r0, r1
    c080:	fb02 0211 	mls	r2, r2, r1, r0
    c084:	4613      	mov	r3, r2
    c086:	f8cd 2d10 	str.w	r2, [sp, #3344]	; 0xd10
                        let src = (b & 1 << (7 - x)) > 0;
    c08a:	9a61      	ldr	r2, [sp, #388]	; 0x184
    c08c:	f1c2 0c07 	rsb	ip, r2, #7
    c090:	f04f 0e07 	mov.w	lr, #7
    c094:	4596      	cmp	lr, r2
    c096:	935f      	str	r3, [sp, #380]	; 0x17c
    c098:	f8cd c178 	str.w	ip, [sp, #376]	; 0x178
    c09c:	f0c1 81d1 	bcc.w	d442 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x384e>
    c0a0:	e7ff      	b.n	c0a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x24ae>
    c0a2:	985e      	ldr	r0, [sp, #376]	; 0x178
    c0a4:	f000 0107 	and.w	r1, r0, #7
    c0a8:	2201      	movs	r2, #1
    c0aa:	fa02 f101 	lsl.w	r1, r2, r1
    c0ae:	08c2      	lsrs	r2, r0, #3
    c0b0:	2a00      	cmp	r2, #0
    c0b2:	915d      	str	r1, [sp, #372]	; 0x174
    c0b4:	f041 81d1 	bne.w	d45a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3866>
    c0b8:	e7ff      	b.n	c0ba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x24c6>
    c0ba:	9866      	ldr	r0, [sp, #408]	; 0x198
    c0bc:	995d      	ldr	r1, [sp, #372]	; 0x174
    c0be:	ea00 0201 	and.w	r2, r0, r1
    c0c2:	b2d2      	uxtb	r2, r2
    c0c4:	2a00      	cmp	r2, #0
    c0c6:	bf18      	it	ne
    c0c8:	2201      	movne	r2, #1
    c0ca:	4613      	mov	r3, r2
    c0cc:	f88d 2d16 	strb.w	r2, [sp, #3350]	; 0xd16
                        let dst = self.hw.vram_get(vramx, vramy);
    c0d0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c0d4:	995f      	ldr	r1, [sp, #380]	; 0x17c
    c0d6:	9a64      	ldr	r2, [sp, #400]	; 0x190
    c0d8:	935c      	str	r3, [sp, #368]	; 0x170
    c0da:	f7fd fbde 	bl	989a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE>
    c0de:	4601      	mov	r1, r0
    c0e0:	f88d 0d17 	strb.w	r0, [sp, #3351]	; 0xd17
    c0e4:	915b      	str	r1, [sp, #364]	; 0x16c
    c0e6:	e7ff      	b.n	c0e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x24f4>
                        self.v[0xf] |= (src && dst) as u8;
    c0e8:	985c      	ldr	r0, [sp, #368]	; 0x170
    c0ea:	07c1      	lsls	r1, r0, #31
    c0ec:	2900      	cmp	r1, #0
    c0ee:	d108      	bne.n	c102 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x250e>
    c0f0:	e003      	b.n	c0fa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2506>
    c0f2:	2001      	movs	r0, #1
    c0f4:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    c0f8:	e008      	b.n	c10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2518>
    c0fa:	2000      	movs	r0, #0
    c0fc:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    c100:	e004      	b.n	c10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2518>
    c102:	985b      	ldr	r0, [sp, #364]	; 0x16c
    c104:	07c1      	lsls	r1, r0, #31
    c106:	2900      	cmp	r1, #0
    c108:	d1f3      	bne.n	c0f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x24fe>
    c10a:	e7f6      	b.n	c0fa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2506>
    c10c:	f89d 09ff 	ldrb.w	r0, [sp, #2559]	; 0x9ff
    c110:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    c114:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    c118:	4310      	orrs	r0, r2
    c11a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                        self.hw.vram_set(vramx, vramy, src ^ dst);
    c11e:	985c      	ldr	r0, [sp, #368]	; 0x170
    c120:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
    c122:	ea80 0302 	eor.w	r3, r0, r2
    c126:	f003 0301 	and.w	r3, r3, #1
    c12a:	4608      	mov	r0, r1
    c12c:	995f      	ldr	r1, [sp, #380]	; 0x17c
    c12e:	9a64      	ldr	r2, [sp, #400]	; 0x190
    c130:	f7fd fa47 	bl	95c2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E>
    c134:	e7ff      	b.n	c136 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2542>
                    for x in 0..8 {
    c136:	e778      	b.n	c02a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2436>
    c138:	2005      	movs	r0, #5
    c13a:	f8cd 0a00 	str.w	r0, [sp, #2560]	; 0xa00
    c13e:	f64d 6030 	movw	r0, #56880	; 0xde30
    c142:	f2c0 0001 	movt	r0, #1
    c146:	6801      	ldr	r1, [r0, #0]
    c148:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    c14c:	f006 fcac 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c150:	905a      	str	r0, [sp, #360]	; 0x168
    c152:	e01f      	b.n	c194 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x25a0>
    c154:	2001      	movs	r0, #1
    c156:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    c15a:	e015      	b.n	c188 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2594>
    c15c:	2000      	movs	r0, #0
    c15e:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    c162:	e011      	b.n	c188 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2594>
    c164:	2000      	movs	r0, #0
    c166:	f88d 0e6b 	strb.w	r0, [sp, #3691]	; 0xe6b
    c16a:	f89d 1e6b 	ldrb.w	r1, [sp, #3691]	; 0xe6b
    c16e:	f640 2000 	movw	r0, #2560	; 0xa00
    c172:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c176:	f006 fca3 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c17a:	f8cd 0e6c 	str.w	r0, [sp, #3692]	; 0xe6c
    c17e:	f8dd 0e6c 	ldr.w	r0, [sp, #3692]	; 0xe6c
    c182:	f8cd 0a08 	str.w	r0, [sp, #2568]	; 0xa08
    c186:	e00a      	b.n	c19e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x25aa>
    c188:	f89d 0a07 	ldrb.w	r0, [sp, #2567]	; 0xa07
    c18c:	07c0      	lsls	r0, r0, #31
    c18e:	2800      	cmp	r0, #0
    c190:	d112      	bne.n	c1b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x25c4>
    c192:	e055      	b.n	c240 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x264c>
    c194:	985a      	ldr	r0, [sp, #360]	; 0x168
    c196:	07c1      	lsls	r1, r0, #31
    c198:	2900      	cmp	r1, #0
    c19a:	d1e3      	bne.n	c164 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2570>
    c19c:	e7de      	b.n	c15c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2568>
    c19e:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    c1a2:	f60d 2108 	addw	r1, sp, #2568	; 0xa08
    c1a6:	f006 fc7f 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c1aa:	9059      	str	r0, [sp, #356]	; 0x164
    c1ac:	e7ff      	b.n	c1ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x25ba>
    c1ae:	9859      	ldr	r0, [sp, #356]	; 0x164
    c1b0:	07c1      	lsls	r1, r0, #31
    c1b2:	2900      	cmp	r1, #0
    c1b4:	d1ce      	bne.n	c154 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2560>
    c1b6:	e7d1      	b.n	c15c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2568>
                trace!("[{:04x}] SKP Vx", self.pc);
    c1b8:	f24e 2090 	movw	r0, #58000	; 0xe290
    c1bc:	f2c0 0001 	movt	r0, #1
    c1c0:	6801      	ldr	r1, [r0, #0]
    c1c2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c1c6:	f100 0212 	add.w	r2, r0, #18
    c1ca:	f8cd 2a2c 	str.w	r2, [sp, #2604]	; 0xa2c
    c1ce:	f8dd 2a2c 	ldr.w	r2, [sp, #2604]	; 0xa2c
    c1d2:	f8cd 2cd8 	str.w	r2, [sp, #3288]	; 0xcd8
    c1d6:	f248 230f 	movw	r3, #33295	; 0x820f
    c1da:	f2c0 0301 	movt	r3, #1
    c1de:	4610      	mov	r0, r2
    c1e0:	9158      	str	r1, [sp, #352]	; 0x160
    c1e2:	4619      	mov	r1, r3
    c1e4:	f005 fd7e 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c1e8:	9057      	str	r0, [sp, #348]	; 0x15c
    c1ea:	9156      	str	r1, [sp, #344]	; 0x158
    c1ec:	e7ff      	b.n	c1ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x25fa>
    c1ee:	9857      	ldr	r0, [sp, #348]	; 0x15c
    c1f0:	f8cd 0a24 	str.w	r0, [sp, #2596]	; 0xa24
    c1f4:	9956      	ldr	r1, [sp, #344]	; 0x158
    c1f6:	f8cd 1a28 	str.w	r1, [sp, #2600]	; 0xa28
    c1fa:	f64d 6278 	movw	r2, #56952	; 0xde78
    c1fe:	f2c0 0201 	movt	r2, #1
    c202:	6812      	ldr	r2, [r2, #0]
    c204:	466b      	mov	r3, sp
    c206:	f04f 0c01 	mov.w	ip, #1
    c20a:	f8c3 c008 	str.w	ip, [r3, #8]
    c20e:	605a      	str	r2, [r3, #4]
    c210:	f8c3 c000 	str.w	ip, [r3]
    c214:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    c218:	2202      	movs	r2, #2
    c21a:	f60d 2324 	addw	r3, sp, #2596	; 0xa24
    c21e:	9958      	ldr	r1, [sp, #352]	; 0x160
    c220:	f001 fe0b 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c224:	e7ff      	b.n	c226 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2632>
    c226:	f8dd 1a00 	ldr.w	r1, [sp, #2560]	; 0xa00
    c22a:	f24e 20b0 	movw	r0, #58032	; 0xe2b0
    c22e:	f2c0 0001 	movt	r0, #1
    c232:	6802      	ldr	r2, [r0, #0]
    c234:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    c238:	f002 fdcb 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c23c:	e7ff      	b.n	c23e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x264a>
    c23e:	e7ff      	b.n	c240 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x264c>
                if self.hw.key(self.v[x]) {
    c240:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c244:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c248:	290f      	cmp	r1, #15
    c24a:	9055      	str	r0, [sp, #340]	; 0x154
    c24c:	f201 8095 	bhi.w	d37a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3786>
    c250:	e7ff      	b.n	c252 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x265e>
    c252:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c256:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c25a:	1842      	adds	r2, r0, r1
    c25c:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    c260:	9855      	ldr	r0, [sp, #340]	; 0x154
    c262:	f7fd f9a6 	bl	95b2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hb8a7325968dc9595E>
    c266:	9054      	str	r0, [sp, #336]	; 0x150
    c268:	e7ff      	b.n	c26a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2676>
    c26a:	9854      	ldr	r0, [sp, #336]	; 0x150
    c26c:	07c1      	lsls	r1, r0, #31
    c26e:	2900      	cmp	r1, #0
    c270:	d006      	beq.n	c280 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x268c>
    c272:	e7ff      	b.n	c274 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2680>
                    self.next();
    c274:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c278:	f001 faa4 	bl	d7c4 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    c27c:	e7ff      	b.n	c27e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x268a>
                if self.hw.key(self.v[x]) {
    c27e:	e7ff      	b.n	c280 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x268c>
        match (
    c280:	f000 bf6e 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c284:	2005      	movs	r0, #5
    c286:	f8cd 0a30 	str.w	r0, [sp, #2608]	; 0xa30
    c28a:	f64d 6030 	movw	r0, #56880	; 0xde30
    c28e:	f2c0 0001 	movt	r0, #1
    c292:	6801      	ldr	r1, [r0, #0]
    c294:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    c298:	f006 fc06 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c29c:	9053      	str	r0, [sp, #332]	; 0x14c
    c29e:	e01f      	b.n	c2e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26ec>
    c2a0:	2001      	movs	r0, #1
    c2a2:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    c2a6:	e015      	b.n	c2d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26e0>
    c2a8:	2000      	movs	r0, #0
    c2aa:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    c2ae:	e011      	b.n	c2d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26e0>
    c2b0:	2000      	movs	r0, #0
    c2b2:	f88d 0e73 	strb.w	r0, [sp, #3699]	; 0xe73
    c2b6:	f89d 1e73 	ldrb.w	r1, [sp, #3699]	; 0xe73
    c2ba:	f640 2000 	movw	r0, #2560	; 0xa00
    c2be:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c2c2:	f006 fbfd 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c2c6:	f8cd 0e74 	str.w	r0, [sp, #3700]	; 0xe74
    c2ca:	f8dd 0e74 	ldr.w	r0, [sp, #3700]	; 0xe74
    c2ce:	f8cd 0a38 	str.w	r0, [sp, #2616]	; 0xa38
    c2d2:	e00a      	b.n	c2ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26f6>
    c2d4:	f89d 0a37 	ldrb.w	r0, [sp, #2615]	; 0xa37
    c2d8:	07c0      	lsls	r0, r0, #31
    c2da:	2800      	cmp	r0, #0
    c2dc:	d112      	bne.n	c304 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2710>
    c2de:	e055      	b.n	c38c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2798>
    c2e0:	9853      	ldr	r0, [sp, #332]	; 0x14c
    c2e2:	07c1      	lsls	r1, r0, #31
    c2e4:	2900      	cmp	r1, #0
    c2e6:	d1e3      	bne.n	c2b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26bc>
    c2e8:	e7de      	b.n	c2a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26b4>
    c2ea:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    c2ee:	f60d 2138 	addw	r1, sp, #2616	; 0xa38
    c2f2:	f006 fbd9 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c2f6:	9052      	str	r0, [sp, #328]	; 0x148
    c2f8:	e7ff      	b.n	c2fa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2706>
    c2fa:	9852      	ldr	r0, [sp, #328]	; 0x148
    c2fc:	07c1      	lsls	r1, r0, #31
    c2fe:	2900      	cmp	r1, #0
    c300:	d1ce      	bne.n	c2a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26ac>
    c302:	e7d1      	b.n	c2a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26b4>
                trace!("[{:04x}] SKNP Vx", self.pc);
    c304:	f24e 204c 	movw	r0, #57932	; 0xe24c
    c308:	f2c0 0001 	movt	r0, #1
    c30c:	6801      	ldr	r1, [r0, #0]
    c30e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c312:	f100 0212 	add.w	r2, r0, #18
    c316:	f8cd 2a5c 	str.w	r2, [sp, #2652]	; 0xa5c
    c31a:	f8dd 2a5c 	ldr.w	r2, [sp, #2652]	; 0xa5c
    c31e:	f8cd 2cd4 	str.w	r2, [sp, #3284]	; 0xcd4
    c322:	f248 230f 	movw	r3, #33295	; 0x820f
    c326:	f2c0 0301 	movt	r3, #1
    c32a:	4610      	mov	r0, r2
    c32c:	9151      	str	r1, [sp, #324]	; 0x144
    c32e:	4619      	mov	r1, r3
    c330:	f005 fcd8 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c334:	9050      	str	r0, [sp, #320]	; 0x140
    c336:	914f      	str	r1, [sp, #316]	; 0x13c
    c338:	e7ff      	b.n	c33a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2746>
    c33a:	9850      	ldr	r0, [sp, #320]	; 0x140
    c33c:	f8cd 0a54 	str.w	r0, [sp, #2644]	; 0xa54
    c340:	994f      	ldr	r1, [sp, #316]	; 0x13c
    c342:	f8cd 1a58 	str.w	r1, [sp, #2648]	; 0xa58
    c346:	f64d 6278 	movw	r2, #56952	; 0xde78
    c34a:	f2c0 0201 	movt	r2, #1
    c34e:	6812      	ldr	r2, [r2, #0]
    c350:	466b      	mov	r3, sp
    c352:	f04f 0c01 	mov.w	ip, #1
    c356:	f8c3 c008 	str.w	ip, [r3, #8]
    c35a:	605a      	str	r2, [r3, #4]
    c35c:	f8c3 c000 	str.w	ip, [r3]
    c360:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    c364:	2202      	movs	r2, #2
    c366:	f60d 2354 	addw	r3, sp, #2644	; 0xa54
    c36a:	9951      	ldr	r1, [sp, #324]	; 0x144
    c36c:	f001 fd65 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c370:	e7ff      	b.n	c372 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x277e>
    c372:	f8dd 1a30 	ldr.w	r1, [sp, #2608]	; 0xa30
    c376:	f24e 206c 	movw	r0, #57964	; 0xe26c
    c37a:	f2c0 0001 	movt	r0, #1
    c37e:	6802      	ldr	r2, [r0, #0]
    c380:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    c384:	f002 fd25 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c388:	e7ff      	b.n	c38a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2796>
    c38a:	e7ff      	b.n	c38c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2798>
                if !self.hw.key(self.v[x]) {
    c38c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c390:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c394:	290f      	cmp	r1, #15
    c396:	904e      	str	r0, [sp, #312]	; 0x138
    c398:	f200 87e5 	bhi.w	d366 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3772>
    c39c:	e7ff      	b.n	c39e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27aa>
    c39e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c3a2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c3a6:	1842      	adds	r2, r0, r1
    c3a8:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    c3ac:	984e      	ldr	r0, [sp, #312]	; 0x138
    c3ae:	f7fd f900 	bl	95b2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hb8a7325968dc9595E>
    c3b2:	904d      	str	r0, [sp, #308]	; 0x134
    c3b4:	e7ff      	b.n	c3b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27c2>
    c3b6:	984d      	ldr	r0, [sp, #308]	; 0x134
    c3b8:	07c1      	lsls	r1, r0, #31
    c3ba:	2900      	cmp	r1, #0
    c3bc:	d106      	bne.n	c3cc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27d8>
    c3be:	e7ff      	b.n	c3c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27cc>
                    self.next();
    c3c0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c3c4:	f001 f9fe 	bl	d7c4 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    c3c8:	e7ff      	b.n	c3ca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27d6>
                if !self.hw.key(self.v[x]) {
    c3ca:	e7ff      	b.n	c3cc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27d8>
        match (
    c3cc:	f000 bec8 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c3d0:	2005      	movs	r0, #5
    c3d2:	f8cd 0a60 	str.w	r0, [sp, #2656]	; 0xa60
    c3d6:	f64d 6030 	movw	r0, #56880	; 0xde30
    c3da:	f2c0 0001 	movt	r0, #1
    c3de:	6801      	ldr	r1, [r0, #0]
    c3e0:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    c3e4:	f006 fb60 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c3e8:	904c      	str	r0, [sp, #304]	; 0x130
    c3ea:	e01f      	b.n	c42c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2838>
    c3ec:	2001      	movs	r0, #1
    c3ee:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    c3f2:	e015      	b.n	c420 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x282c>
    c3f4:	2000      	movs	r0, #0
    c3f6:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    c3fa:	e011      	b.n	c420 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x282c>
    c3fc:	2000      	movs	r0, #0
    c3fe:	f88d 0e7b 	strb.w	r0, [sp, #3707]	; 0xe7b
    c402:	f89d 1e7b 	ldrb.w	r1, [sp, #3707]	; 0xe7b
    c406:	f640 2000 	movw	r0, #2560	; 0xa00
    c40a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c40e:	f006 fb57 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c412:	f8cd 0e7c 	str.w	r0, [sp, #3708]	; 0xe7c
    c416:	f8dd 0e7c 	ldr.w	r0, [sp, #3708]	; 0xe7c
    c41a:	f8cd 0a68 	str.w	r0, [sp, #2664]	; 0xa68
    c41e:	e00a      	b.n	c436 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2842>
    c420:	f89d 0a67 	ldrb.w	r0, [sp, #2663]	; 0xa67
    c424:	07c0      	lsls	r0, r0, #31
    c426:	2800      	cmp	r0, #0
    c428:	d112      	bne.n	c450 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x285c>
    c42a:	e055      	b.n	c4d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x28e4>
    c42c:	984c      	ldr	r0, [sp, #304]	; 0x130
    c42e:	07c1      	lsls	r1, r0, #31
    c430:	2900      	cmp	r1, #0
    c432:	d1e3      	bne.n	c3fc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2808>
    c434:	e7de      	b.n	c3f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2800>
    c436:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    c43a:	f60d 2168 	addw	r1, sp, #2664	; 0xa68
    c43e:	f006 fb33 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c442:	904b      	str	r0, [sp, #300]	; 0x12c
    c444:	e7ff      	b.n	c446 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2852>
    c446:	984b      	ldr	r0, [sp, #300]	; 0x12c
    c448:	07c1      	lsls	r1, r0, #31
    c44a:	2900      	cmp	r1, #0
    c44c:	d1ce      	bne.n	c3ec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27f8>
    c44e:	e7d1      	b.n	c3f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2800>
                trace!("[{:04x}] LD Vx, DT", self.pc);
    c450:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
    c454:	f2c0 0001 	movt	r0, #1
    c458:	6801      	ldr	r1, [r0, #0]
    c45a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c45e:	f100 0212 	add.w	r2, r0, #18
    c462:	f8cd 2a8c 	str.w	r2, [sp, #2700]	; 0xa8c
    c466:	f8dd 2a8c 	ldr.w	r2, [sp, #2700]	; 0xa8c
    c46a:	f8cd 2cd0 	str.w	r2, [sp, #3280]	; 0xcd0
    c46e:	f248 230f 	movw	r3, #33295	; 0x820f
    c472:	f2c0 0301 	movt	r3, #1
    c476:	4610      	mov	r0, r2
    c478:	914a      	str	r1, [sp, #296]	; 0x128
    c47a:	4619      	mov	r1, r3
    c47c:	f005 fc32 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c480:	9049      	str	r0, [sp, #292]	; 0x124
    c482:	9148      	str	r1, [sp, #288]	; 0x120
    c484:	e7ff      	b.n	c486 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2892>
    c486:	9849      	ldr	r0, [sp, #292]	; 0x124
    c488:	f8cd 0a84 	str.w	r0, [sp, #2692]	; 0xa84
    c48c:	9948      	ldr	r1, [sp, #288]	; 0x120
    c48e:	f8cd 1a88 	str.w	r1, [sp, #2696]	; 0xa88
    c492:	f64d 6278 	movw	r2, #56952	; 0xde78
    c496:	f2c0 0201 	movt	r2, #1
    c49a:	6812      	ldr	r2, [r2, #0]
    c49c:	466b      	mov	r3, sp
    c49e:	f04f 0c01 	mov.w	ip, #1
    c4a2:	f8c3 c008 	str.w	ip, [r3, #8]
    c4a6:	605a      	str	r2, [r3, #4]
    c4a8:	f8c3 c000 	str.w	ip, [r3]
    c4ac:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    c4b0:	2202      	movs	r2, #2
    c4b2:	f60d 2384 	addw	r3, sp, #2692	; 0xa84
    c4b6:	994a      	ldr	r1, [sp, #296]	; 0x128
    c4b8:	f001 fcbf 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c4bc:	e7ff      	b.n	c4be <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x28ca>
    c4be:	f8dd 1a60 	ldr.w	r1, [sp, #2656]	; 0xa60
    c4c2:	f24e 201c 	movw	r0, #57884	; 0xe21c
    c4c6:	f2c0 0001 	movt	r0, #1
    c4ca:	6802      	ldr	r2, [r0, #0]
    c4cc:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    c4d0:	f002 fc7f 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c4d4:	e7ff      	b.n	c4d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x28e2>
    c4d6:	e7ff      	b.n	c4d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x28e4>
                self.v[x] = self.dt;
    c4d8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c4dc:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    c4e0:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    c4e4:	2a0f      	cmp	r2, #15
    c4e6:	9147      	str	r1, [sp, #284]	; 0x11c
    c4e8:	f200 8733 	bhi.w	d352 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x375e>
    c4ec:	e7ff      	b.n	c4ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x28fa>
    c4ee:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c4f2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c4f6:	1842      	adds	r2, r0, r1
    c4f8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    c4fa:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c4fe:	f000 be2f 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c502:	2005      	movs	r0, #5
    c504:	f8cd 0a90 	str.w	r0, [sp, #2704]	; 0xa90
    c508:	f64d 6030 	movw	r0, #56880	; 0xde30
    c50c:	f2c0 0001 	movt	r0, #1
    c510:	6801      	ldr	r1, [r0, #0]
    c512:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    c516:	f006 fac7 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c51a:	9046      	str	r0, [sp, #280]	; 0x118
    c51c:	e01f      	b.n	c55e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x296a>
    c51e:	2001      	movs	r0, #1
    c520:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    c524:	e015      	b.n	c552 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x295e>
    c526:	2000      	movs	r0, #0
    c528:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    c52c:	e011      	b.n	c552 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x295e>
    c52e:	2000      	movs	r0, #0
    c530:	f88d 0e83 	strb.w	r0, [sp, #3715]	; 0xe83
    c534:	f89d 1e83 	ldrb.w	r1, [sp, #3715]	; 0xe83
    c538:	f640 2000 	movw	r0, #2560	; 0xa00
    c53c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c540:	f006 fabe 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c544:	f8cd 0e84 	str.w	r0, [sp, #3716]	; 0xe84
    c548:	f8dd 0e84 	ldr.w	r0, [sp, #3716]	; 0xe84
    c54c:	f8cd 0a98 	str.w	r0, [sp, #2712]	; 0xa98
    c550:	e00a      	b.n	c568 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2974>
    c552:	f89d 0a97 	ldrb.w	r0, [sp, #2711]	; 0xa97
    c556:	07c0      	lsls	r0, r0, #31
    c558:	2800      	cmp	r0, #0
    c55a:	d112      	bne.n	c582 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x298e>
    c55c:	e055      	b.n	c60a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a16>
    c55e:	9846      	ldr	r0, [sp, #280]	; 0x118
    c560:	07c1      	lsls	r1, r0, #31
    c562:	2900      	cmp	r1, #0
    c564:	d1e3      	bne.n	c52e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x293a>
    c566:	e7de      	b.n	c526 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2932>
    c568:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    c56c:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
    c570:	f006 fa9a 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c574:	9045      	str	r0, [sp, #276]	; 0x114
    c576:	e7ff      	b.n	c578 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2984>
    c578:	9845      	ldr	r0, [sp, #276]	; 0x114
    c57a:	07c1      	lsls	r1, r0, #31
    c57c:	2900      	cmp	r1, #0
    c57e:	d1ce      	bne.n	c51e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x292a>
    c580:	e7d1      	b.n	c526 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2932>
                trace!("[{:04x}] LD Vx, K", self.pc);
    c582:	f24e 10ac 	movw	r0, #57772	; 0xe1ac
    c586:	f2c0 0001 	movt	r0, #1
    c58a:	6801      	ldr	r1, [r0, #0]
    c58c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c590:	f100 0212 	add.w	r2, r0, #18
    c594:	f8cd 2abc 	str.w	r2, [sp, #2748]	; 0xabc
    c598:	f8dd 2abc 	ldr.w	r2, [sp, #2748]	; 0xabc
    c59c:	f8cd 2ccc 	str.w	r2, [sp, #3276]	; 0xccc
    c5a0:	f248 230f 	movw	r3, #33295	; 0x820f
    c5a4:	f2c0 0301 	movt	r3, #1
    c5a8:	4610      	mov	r0, r2
    c5aa:	9144      	str	r1, [sp, #272]	; 0x110
    c5ac:	4619      	mov	r1, r3
    c5ae:	f005 fb99 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c5b2:	9043      	str	r0, [sp, #268]	; 0x10c
    c5b4:	9142      	str	r1, [sp, #264]	; 0x108
    c5b6:	e7ff      	b.n	c5b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x29c4>
    c5b8:	9843      	ldr	r0, [sp, #268]	; 0x10c
    c5ba:	f8cd 0ab4 	str.w	r0, [sp, #2740]	; 0xab4
    c5be:	9942      	ldr	r1, [sp, #264]	; 0x108
    c5c0:	f8cd 1ab8 	str.w	r1, [sp, #2744]	; 0xab8
    c5c4:	f64d 6278 	movw	r2, #56952	; 0xde78
    c5c8:	f2c0 0201 	movt	r2, #1
    c5cc:	6812      	ldr	r2, [r2, #0]
    c5ce:	466b      	mov	r3, sp
    c5d0:	f04f 0c01 	mov.w	ip, #1
    c5d4:	f8c3 c008 	str.w	ip, [r3, #8]
    c5d8:	605a      	str	r2, [r3, #4]
    c5da:	f8c3 c000 	str.w	ip, [r3]
    c5de:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    c5e2:	2202      	movs	r2, #2
    c5e4:	f60d 23b4 	addw	r3, sp, #2740	; 0xab4
    c5e8:	9944      	ldr	r1, [sp, #272]	; 0x110
    c5ea:	f001 fc26 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c5ee:	e7ff      	b.n	c5f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x29fc>
    c5f0:	f8dd 1a90 	ldr.w	r1, [sp, #2704]	; 0xa90
    c5f4:	f24e 10cc 	movw	r0, #57804	; 0xe1cc
    c5f8:	f2c0 0001 	movt	r0, #1
    c5fc:	6802      	ldr	r2, [r0, #0]
    c5fe:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    c602:	f002 fbe6 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c606:	e7ff      	b.n	c608 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a14>
    c608:	e7ff      	b.n	c60a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a16>
                self.v[x] = self.waitkey();
    c60a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c60e:	f001 fa1b 	bl	da48 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E>
    c612:	9041      	str	r0, [sp, #260]	; 0x104
    c614:	e7ff      	b.n	c616 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a22>
    c616:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c61a:	280f      	cmp	r0, #15
    c61c:	f200 868f 	bhi.w	d33e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x374a>
    c620:	e7ff      	b.n	c622 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a2e>
    c622:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c626:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c62a:	1842      	adds	r2, r0, r1
    c62c:	9b41      	ldr	r3, [sp, #260]	; 0x104
    c62e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c632:	f000 bd95 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c636:	2005      	movs	r0, #5
    c638:	f8cd 0ac0 	str.w	r0, [sp, #2752]	; 0xac0
    c63c:	f64d 6030 	movw	r0, #56880	; 0xde30
    c640:	f2c0 0001 	movt	r0, #1
    c644:	6801      	ldr	r1, [r0, #0]
    c646:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    c64a:	f006 fa2d 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c64e:	9040      	str	r0, [sp, #256]	; 0x100
    c650:	e01f      	b.n	c692 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a9e>
    c652:	2001      	movs	r0, #1
    c654:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    c658:	e015      	b.n	c686 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a92>
    c65a:	2000      	movs	r0, #0
    c65c:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    c660:	e011      	b.n	c686 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a92>
    c662:	2000      	movs	r0, #0
    c664:	f88d 0e8b 	strb.w	r0, [sp, #3723]	; 0xe8b
    c668:	f89d 1e8b 	ldrb.w	r1, [sp, #3723]	; 0xe8b
    c66c:	f640 2000 	movw	r0, #2560	; 0xa00
    c670:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c674:	f006 fa24 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c678:	f8cd 0e8c 	str.w	r0, [sp, #3724]	; 0xe8c
    c67c:	f8dd 0e8c 	ldr.w	r0, [sp, #3724]	; 0xe8c
    c680:	f8cd 0ac8 	str.w	r0, [sp, #2760]	; 0xac8
    c684:	e00a      	b.n	c69c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2aa8>
    c686:	f89d 0ac7 	ldrb.w	r0, [sp, #2759]	; 0xac7
    c68a:	07c0      	lsls	r0, r0, #31
    c68c:	2800      	cmp	r0, #0
    c68e:	d112      	bne.n	c6b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ac2>
    c690:	e055      	b.n	c73e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b4a>
    c692:	9840      	ldr	r0, [sp, #256]	; 0x100
    c694:	07c1      	lsls	r1, r0, #31
    c696:	2900      	cmp	r1, #0
    c698:	d1e3      	bne.n	c662 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a6e>
    c69a:	e7de      	b.n	c65a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a66>
    c69c:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    c6a0:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
    c6a4:	f006 fa00 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c6a8:	903f      	str	r0, [sp, #252]	; 0xfc
    c6aa:	e7ff      	b.n	c6ac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ab8>
    c6ac:	983f      	ldr	r0, [sp, #252]	; 0xfc
    c6ae:	07c1      	lsls	r1, r0, #31
    c6b0:	2900      	cmp	r1, #0
    c6b2:	d1ce      	bne.n	c652 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a5e>
    c6b4:	e7d1      	b.n	c65a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a66>
                trace!("[{:04x}] LD DT, Vx", self.pc);
    c6b6:	f24e 105c 	movw	r0, #57692	; 0xe15c
    c6ba:	f2c0 0001 	movt	r0, #1
    c6be:	6801      	ldr	r1, [r0, #0]
    c6c0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c6c4:	f100 0212 	add.w	r2, r0, #18
    c6c8:	f8cd 2aec 	str.w	r2, [sp, #2796]	; 0xaec
    c6cc:	f8dd 2aec 	ldr.w	r2, [sp, #2796]	; 0xaec
    c6d0:	f8cd 2cc8 	str.w	r2, [sp, #3272]	; 0xcc8
    c6d4:	f248 230f 	movw	r3, #33295	; 0x820f
    c6d8:	f2c0 0301 	movt	r3, #1
    c6dc:	4610      	mov	r0, r2
    c6de:	913e      	str	r1, [sp, #248]	; 0xf8
    c6e0:	4619      	mov	r1, r3
    c6e2:	f005 faff 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c6e6:	903d      	str	r0, [sp, #244]	; 0xf4
    c6e8:	913c      	str	r1, [sp, #240]	; 0xf0
    c6ea:	e7ff      	b.n	c6ec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2af8>
    c6ec:	983d      	ldr	r0, [sp, #244]	; 0xf4
    c6ee:	f8cd 0ae4 	str.w	r0, [sp, #2788]	; 0xae4
    c6f2:	993c      	ldr	r1, [sp, #240]	; 0xf0
    c6f4:	f8cd 1ae8 	str.w	r1, [sp, #2792]	; 0xae8
    c6f8:	f64d 6278 	movw	r2, #56952	; 0xde78
    c6fc:	f2c0 0201 	movt	r2, #1
    c700:	6812      	ldr	r2, [r2, #0]
    c702:	466b      	mov	r3, sp
    c704:	f04f 0c01 	mov.w	ip, #1
    c708:	f8c3 c008 	str.w	ip, [r3, #8]
    c70c:	605a      	str	r2, [r3, #4]
    c70e:	f8c3 c000 	str.w	ip, [r3]
    c712:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    c716:	2202      	movs	r2, #2
    c718:	f60d 23e4 	addw	r3, sp, #2788	; 0xae4
    c71c:	993e      	ldr	r1, [sp, #248]	; 0xf8
    c71e:	f001 fb8c 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c722:	e7ff      	b.n	c724 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b30>
    c724:	f8dd 1ac0 	ldr.w	r1, [sp, #2752]	; 0xac0
    c728:	f24e 107c 	movw	r0, #57724	; 0xe17c
    c72c:	f2c0 0001 	movt	r0, #1
    c730:	6802      	ldr	r2, [r0, #0]
    c732:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    c736:	f002 fb4c 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c73a:	e7ff      	b.n	c73c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b48>
    c73c:	e7ff      	b.n	c73e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b4a>
                self.dt = self.v[x];
    c73e:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c742:	280f      	cmp	r0, #15
    c744:	f200 85f1 	bhi.w	d32a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3736>
    c748:	e7ff      	b.n	c74a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b56>
    c74a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c74e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c752:	1842      	adds	r2, r0, r1
    c754:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c758:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
        match (
    c75c:	f000 bd00 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c760:	2005      	movs	r0, #5
    c762:	f8cd 0af0 	str.w	r0, [sp, #2800]	; 0xaf0
    c766:	f64d 6030 	movw	r0, #56880	; 0xde30
    c76a:	f2c0 0001 	movt	r0, #1
    c76e:	6801      	ldr	r1, [r0, #0]
    c770:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    c774:	f006 f998 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c778:	903b      	str	r0, [sp, #236]	; 0xec
    c77a:	e01f      	b.n	c7bc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2bc8>
    c77c:	2001      	movs	r0, #1
    c77e:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    c782:	e015      	b.n	c7b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2bbc>
    c784:	2000      	movs	r0, #0
    c786:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    c78a:	e011      	b.n	c7b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2bbc>
    c78c:	2000      	movs	r0, #0
    c78e:	f88d 0e93 	strb.w	r0, [sp, #3731]	; 0xe93
    c792:	f89d 1e93 	ldrb.w	r1, [sp, #3731]	; 0xe93
    c796:	f640 2000 	movw	r0, #2560	; 0xa00
    c79a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c79e:	f006 f98f 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c7a2:	f8cd 0e94 	str.w	r0, [sp, #3732]	; 0xe94
    c7a6:	f8dd 0e94 	ldr.w	r0, [sp, #3732]	; 0xe94
    c7aa:	f8cd 0af8 	str.w	r0, [sp, #2808]	; 0xaf8
    c7ae:	e00a      	b.n	c7c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2bd2>
    c7b0:	f89d 0af7 	ldrb.w	r0, [sp, #2807]	; 0xaf7
    c7b4:	07c0      	lsls	r0, r0, #31
    c7b6:	2800      	cmp	r0, #0
    c7b8:	d112      	bne.n	c7e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2bec>
    c7ba:	e055      	b.n	c868 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c74>
    c7bc:	983b      	ldr	r0, [sp, #236]	; 0xec
    c7be:	07c1      	lsls	r1, r0, #31
    c7c0:	2900      	cmp	r1, #0
    c7c2:	d1e3      	bne.n	c78c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b98>
    c7c4:	e7de      	b.n	c784 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b90>
    c7c6:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    c7ca:	f60d 21f8 	addw	r1, sp, #2808	; 0xaf8
    c7ce:	f006 f96b 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c7d2:	903a      	str	r0, [sp, #232]	; 0xe8
    c7d4:	e7ff      	b.n	c7d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2be2>
    c7d6:	983a      	ldr	r0, [sp, #232]	; 0xe8
    c7d8:	07c1      	lsls	r1, r0, #31
    c7da:	2900      	cmp	r1, #0
    c7dc:	d1ce      	bne.n	c77c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b88>
    c7de:	e7d1      	b.n	c784 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b90>
                trace!("[{:04x}] LD ST, Vx", self.pc);
    c7e0:	f24e 100c 	movw	r0, #57612	; 0xe10c
    c7e4:	f2c0 0001 	movt	r0, #1
    c7e8:	6801      	ldr	r1, [r0, #0]
    c7ea:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c7ee:	f100 0212 	add.w	r2, r0, #18
    c7f2:	f8cd 2b1c 	str.w	r2, [sp, #2844]	; 0xb1c
    c7f6:	f8dd 2b1c 	ldr.w	r2, [sp, #2844]	; 0xb1c
    c7fa:	f8cd 2cc4 	str.w	r2, [sp, #3268]	; 0xcc4
    c7fe:	f248 230f 	movw	r3, #33295	; 0x820f
    c802:	f2c0 0301 	movt	r3, #1
    c806:	4610      	mov	r0, r2
    c808:	9139      	str	r1, [sp, #228]	; 0xe4
    c80a:	4619      	mov	r1, r3
    c80c:	f005 fa6a 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c810:	9038      	str	r0, [sp, #224]	; 0xe0
    c812:	9137      	str	r1, [sp, #220]	; 0xdc
    c814:	e7ff      	b.n	c816 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c22>
    c816:	9838      	ldr	r0, [sp, #224]	; 0xe0
    c818:	f8cd 0b14 	str.w	r0, [sp, #2836]	; 0xb14
    c81c:	9937      	ldr	r1, [sp, #220]	; 0xdc
    c81e:	f8cd 1b18 	str.w	r1, [sp, #2840]	; 0xb18
    c822:	f64d 6278 	movw	r2, #56952	; 0xde78
    c826:	f2c0 0201 	movt	r2, #1
    c82a:	6812      	ldr	r2, [r2, #0]
    c82c:	466b      	mov	r3, sp
    c82e:	f04f 0c01 	mov.w	ip, #1
    c832:	f8c3 c008 	str.w	ip, [r3, #8]
    c836:	605a      	str	r2, [r3, #4]
    c838:	f8c3 c000 	str.w	ip, [r3]
    c83c:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    c840:	2202      	movs	r2, #2
    c842:	f60d 3314 	addw	r3, sp, #2836	; 0xb14
    c846:	9939      	ldr	r1, [sp, #228]	; 0xe4
    c848:	f001 faf7 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c84c:	e7ff      	b.n	c84e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c5a>
    c84e:	f8dd 1af0 	ldr.w	r1, [sp, #2800]	; 0xaf0
    c852:	f24e 102c 	movw	r0, #57644	; 0xe12c
    c856:	f2c0 0001 	movt	r0, #1
    c85a:	6802      	ldr	r2, [r0, #0]
    c85c:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    c860:	f002 fab7 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c864:	e7ff      	b.n	c866 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c72>
    c866:	e7ff      	b.n	c868 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c74>
                self.st = self.v[x];
    c868:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c86c:	280f      	cmp	r0, #15
    c86e:	f200 8552 	bhi.w	d316 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3722>
    c872:	e7ff      	b.n	c874 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c80>
    c874:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c878:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c87c:	1842      	adds	r2, r0, r1
    c87e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c882:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
        match (
    c886:	f000 bc6b 	b.w	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c88a:	2005      	movs	r0, #5
    c88c:	f8cd 0b20 	str.w	r0, [sp, #2848]	; 0xb20
    c890:	f64d 6030 	movw	r0, #56880	; 0xde30
    c894:	f2c0 0001 	movt	r0, #1
    c898:	6801      	ldr	r1, [r0, #0]
    c89a:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    c89e:	f006 f903 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c8a2:	9036      	str	r0, [sp, #216]	; 0xd8
    c8a4:	e01f      	b.n	c8e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cf2>
    c8a6:	2001      	movs	r0, #1
    c8a8:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    c8ac:	e015      	b.n	c8da <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ce6>
    c8ae:	2000      	movs	r0, #0
    c8b0:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    c8b4:	e011      	b.n	c8da <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ce6>
    c8b6:	2000      	movs	r0, #0
    c8b8:	f88d 0e9b 	strb.w	r0, [sp, #3739]	; 0xe9b
    c8bc:	f89d 1e9b 	ldrb.w	r1, [sp, #3739]	; 0xe9b
    c8c0:	f640 2000 	movw	r0, #2560	; 0xa00
    c8c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c8c8:	f006 f8fa 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c8cc:	f8cd 0e9c 	str.w	r0, [sp, #3740]	; 0xe9c
    c8d0:	f8dd 0e9c 	ldr.w	r0, [sp, #3740]	; 0xe9c
    c8d4:	f8cd 0b28 	str.w	r0, [sp, #2856]	; 0xb28
    c8d8:	e00a      	b.n	c8f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cfc>
    c8da:	f89d 0b27 	ldrb.w	r0, [sp, #2855]	; 0xb27
    c8de:	07c0      	lsls	r0, r0, #31
    c8e0:	2800      	cmp	r0, #0
    c8e2:	d112      	bne.n	c90a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d16>
    c8e4:	e055      	b.n	c992 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d9e>
    c8e6:	9836      	ldr	r0, [sp, #216]	; 0xd8
    c8e8:	07c1      	lsls	r1, r0, #31
    c8ea:	2900      	cmp	r1, #0
    c8ec:	d1e3      	bne.n	c8b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cc2>
    c8ee:	e7de      	b.n	c8ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cba>
    c8f0:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    c8f4:	f60d 3128 	addw	r1, sp, #2856	; 0xb28
    c8f8:	f006 f8d6 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c8fc:	9035      	str	r0, [sp, #212]	; 0xd4
    c8fe:	e7ff      	b.n	c900 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d0c>
    c900:	9835      	ldr	r0, [sp, #212]	; 0xd4
    c902:	07c1      	lsls	r1, r0, #31
    c904:	2900      	cmp	r1, #0
    c906:	d1ce      	bne.n	c8a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cb2>
    c908:	e7d1      	b.n	c8ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cba>
                trace!("[{:04x}] ADD I, Vx", self.pc);
    c90a:	f24e 00bc 	movw	r0, #57532	; 0xe0bc
    c90e:	f2c0 0001 	movt	r0, #1
    c912:	6801      	ldr	r1, [r0, #0]
    c914:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c918:	f100 0212 	add.w	r2, r0, #18
    c91c:	f8cd 2b4c 	str.w	r2, [sp, #2892]	; 0xb4c
    c920:	f8dd 2b4c 	ldr.w	r2, [sp, #2892]	; 0xb4c
    c924:	f8cd 2cc0 	str.w	r2, [sp, #3264]	; 0xcc0
    c928:	f248 230f 	movw	r3, #33295	; 0x820f
    c92c:	f2c0 0301 	movt	r3, #1
    c930:	4610      	mov	r0, r2
    c932:	9134      	str	r1, [sp, #208]	; 0xd0
    c934:	4619      	mov	r1, r3
    c936:	f005 f9d5 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c93a:	9033      	str	r0, [sp, #204]	; 0xcc
    c93c:	9132      	str	r1, [sp, #200]	; 0xc8
    c93e:	e7ff      	b.n	c940 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d4c>
    c940:	9833      	ldr	r0, [sp, #204]	; 0xcc
    c942:	f8cd 0b44 	str.w	r0, [sp, #2884]	; 0xb44
    c946:	9932      	ldr	r1, [sp, #200]	; 0xc8
    c948:	f8cd 1b48 	str.w	r1, [sp, #2888]	; 0xb48
    c94c:	f64d 6278 	movw	r2, #56952	; 0xde78
    c950:	f2c0 0201 	movt	r2, #1
    c954:	6812      	ldr	r2, [r2, #0]
    c956:	466b      	mov	r3, sp
    c958:	f04f 0c01 	mov.w	ip, #1
    c95c:	f8c3 c008 	str.w	ip, [r3, #8]
    c960:	605a      	str	r2, [r3, #4]
    c962:	f8c3 c000 	str.w	ip, [r3]
    c966:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    c96a:	2202      	movs	r2, #2
    c96c:	f60d 3344 	addw	r3, sp, #2884	; 0xb44
    c970:	9934      	ldr	r1, [sp, #208]	; 0xd0
    c972:	f001 fa62 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c976:	e7ff      	b.n	c978 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d84>
    c978:	f8dd 1b20 	ldr.w	r1, [sp, #2848]	; 0xb20
    c97c:	f24e 00dc 	movw	r0, #57564	; 0xe0dc
    c980:	f2c0 0001 	movt	r0, #1
    c984:	6802      	ldr	r2, [r0, #0]
    c986:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    c98a:	f002 fa22 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c98e:	e7ff      	b.n	c990 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d9c>
    c990:	e7ff      	b.n	c992 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d9e>
                self.i = self.i.wrapping_add(self.v[x].into());
    c992:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c996:	8a01      	ldrh	r1, [r0, #16]
    c998:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    c99c:	2a0f      	cmp	r2, #15
    c99e:	9131      	str	r1, [sp, #196]	; 0xc4
    c9a0:	f200 84af 	bhi.w	d302 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x370e>
    c9a4:	e7ff      	b.n	c9a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2db2>
    c9a6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c9aa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c9ae:	1842      	adds	r2, r0, r1
    c9b0:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    c9b4:	f001 f8ad 	bl	db12 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE>
    c9b8:	9030      	str	r0, [sp, #192]	; 0xc0
    c9ba:	e7ff      	b.n	c9bc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2dc8>
    c9bc:	9831      	ldr	r0, [sp, #196]	; 0xc4
    c9be:	9930      	ldr	r1, [sp, #192]	; 0xc0
    c9c0:	f006 f95a 	bl	12c78 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E>
    c9c4:	902f      	str	r0, [sp, #188]	; 0xbc
    c9c6:	e7ff      	b.n	c9c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2dd4>
    c9c8:	982f      	ldr	r0, [sp, #188]	; 0xbc
    c9ca:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    c9ce:	8208      	strh	r0, [r1, #16]
        match (
    c9d0:	e3c6      	b.n	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c9d2:	2005      	movs	r0, #5
    c9d4:	f8cd 0b50 	str.w	r0, [sp, #2896]	; 0xb50
    c9d8:	f64d 6030 	movw	r0, #56880	; 0xde30
    c9dc:	f2c0 0001 	movt	r0, #1
    c9e0:	6801      	ldr	r1, [r0, #0]
    c9e2:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    c9e6:	f006 f85f 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c9ea:	902e      	str	r0, [sp, #184]	; 0xb8
    c9ec:	e01f      	b.n	ca2e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e3a>
    c9ee:	2001      	movs	r0, #1
    c9f0:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    c9f4:	e015      	b.n	ca22 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e2e>
    c9f6:	2000      	movs	r0, #0
    c9f8:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    c9fc:	e011      	b.n	ca22 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e2e>
    c9fe:	2000      	movs	r0, #0
    ca00:	f88d 0ea3 	strb.w	r0, [sp, #3747]	; 0xea3
    ca04:	f89d 1ea3 	ldrb.w	r1, [sp, #3747]	; 0xea3
    ca08:	f640 2000 	movw	r0, #2560	; 0xa00
    ca0c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ca10:	f006 f856 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    ca14:	f8cd 0ea4 	str.w	r0, [sp, #3748]	; 0xea4
    ca18:	f8dd 0ea4 	ldr.w	r0, [sp, #3748]	; 0xea4
    ca1c:	f8cd 0b58 	str.w	r0, [sp, #2904]	; 0xb58
    ca20:	e00a      	b.n	ca38 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e44>
    ca22:	f89d 0b57 	ldrb.w	r0, [sp, #2903]	; 0xb57
    ca26:	07c0      	lsls	r0, r0, #31
    ca28:	2800      	cmp	r0, #0
    ca2a:	d112      	bne.n	ca52 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e5e>
    ca2c:	e055      	b.n	cada <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ee6>
    ca2e:	982e      	ldr	r0, [sp, #184]	; 0xb8
    ca30:	07c1      	lsls	r1, r0, #31
    ca32:	2900      	cmp	r1, #0
    ca34:	d1e3      	bne.n	c9fe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e0a>
    ca36:	e7de      	b.n	c9f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e02>
    ca38:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    ca3c:	f60d 3158 	addw	r1, sp, #2904	; 0xb58
    ca40:	f006 f832 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ca44:	902d      	str	r0, [sp, #180]	; 0xb4
    ca46:	e7ff      	b.n	ca48 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e54>
    ca48:	982d      	ldr	r0, [sp, #180]	; 0xb4
    ca4a:	07c1      	lsls	r1, r0, #31
    ca4c:	2900      	cmp	r1, #0
    ca4e:	d1ce      	bne.n	c9ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2dfa>
    ca50:	e7d1      	b.n	c9f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e02>
                trace!("[{:04x}] LD F, Vx", self.pc);
    ca52:	f24e 0038 	movw	r0, #57400	; 0xe038
    ca56:	f2c0 0001 	movt	r0, #1
    ca5a:	6801      	ldr	r1, [r0, #0]
    ca5c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ca60:	f100 0212 	add.w	r2, r0, #18
    ca64:	f8cd 2b7c 	str.w	r2, [sp, #2940]	; 0xb7c
    ca68:	f8dd 2b7c 	ldr.w	r2, [sp, #2940]	; 0xb7c
    ca6c:	f8cd 2cbc 	str.w	r2, [sp, #3260]	; 0xcbc
    ca70:	f248 230f 	movw	r3, #33295	; 0x820f
    ca74:	f2c0 0301 	movt	r3, #1
    ca78:	4610      	mov	r0, r2
    ca7a:	912c      	str	r1, [sp, #176]	; 0xb0
    ca7c:	4619      	mov	r1, r3
    ca7e:	f005 f931 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ca82:	902b      	str	r0, [sp, #172]	; 0xac
    ca84:	912a      	str	r1, [sp, #168]	; 0xa8
    ca86:	e7ff      	b.n	ca88 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e94>
    ca88:	982b      	ldr	r0, [sp, #172]	; 0xac
    ca8a:	f8cd 0b74 	str.w	r0, [sp, #2932]	; 0xb74
    ca8e:	992a      	ldr	r1, [sp, #168]	; 0xa8
    ca90:	f8cd 1b78 	str.w	r1, [sp, #2936]	; 0xb78
    ca94:	f64d 6278 	movw	r2, #56952	; 0xde78
    ca98:	f2c0 0201 	movt	r2, #1
    ca9c:	6812      	ldr	r2, [r2, #0]
    ca9e:	466b      	mov	r3, sp
    caa0:	f04f 0c01 	mov.w	ip, #1
    caa4:	f8c3 c008 	str.w	ip, [r3, #8]
    caa8:	605a      	str	r2, [r3, #4]
    caaa:	f8c3 c000 	str.w	ip, [r3]
    caae:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    cab2:	2202      	movs	r2, #2
    cab4:	f60d 3374 	addw	r3, sp, #2932	; 0xb74
    cab8:	992c      	ldr	r1, [sp, #176]	; 0xb0
    caba:	f001 f9be 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    cabe:	e7ff      	b.n	cac0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ecc>
    cac0:	f8dd 1b50 	ldr.w	r1, [sp, #2896]	; 0xb50
    cac4:	f24e 0058 	movw	r0, #57432	; 0xe058
    cac8:	f2c0 0001 	movt	r0, #1
    cacc:	6802      	ldr	r2, [r0, #0]
    cace:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    cad2:	f002 f97e 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cad6:	e7ff      	b.n	cad8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ee4>
    cad8:	e7ff      	b.n	cada <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ee6>
                self.i = (self.v[x] * 5).into();
    cada:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    cade:	280f      	cmp	r0, #15
    cae0:	f200 83f9 	bhi.w	d2d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x36e2>
    cae4:	e7ff      	b.n	cae6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ef2>
    cae6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    caea:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    caee:	1842      	adds	r2, r0, r1
    caf0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    caf4:	2305      	movs	r3, #5
    caf6:	fba2 2303 	umull	r2, r3, r2, r3
    cafa:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    cafe:	f04f 0e00 	mov.w	lr, #0
    cb02:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
    cb06:	bf18      	it	ne
    cb08:	f04f 0c01 	movne.w	ip, #1
    cb0c:	2b00      	cmp	r3, #0
    cb0e:	bf18      	it	ne
    cb10:	2301      	movne	r3, #1
    cb12:	ea43 030c 	orr.w	r3, r3, ip
    cb16:	2b00      	cmp	r3, #0
    cb18:	9229      	str	r2, [sp, #164]	; 0xa4
    cb1a:	f040 83e6 	bne.w	d2ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x36f6>
    cb1e:	e7ff      	b.n	cb20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f2c>
    cb20:	9829      	ldr	r0, [sp, #164]	; 0xa4
    cb22:	f000 fff6 	bl	db12 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE>
    cb26:	9028      	str	r0, [sp, #160]	; 0xa0
    cb28:	e7ff      	b.n	cb2a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f36>
    cb2a:	9828      	ldr	r0, [sp, #160]	; 0xa0
    cb2c:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    cb30:	8208      	strh	r0, [r1, #16]
        match (
    cb32:	e315      	b.n	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    cb34:	2005      	movs	r0, #5
    cb36:	f8cd 0b80 	str.w	r0, [sp, #2944]	; 0xb80
    cb3a:	f64d 6030 	movw	r0, #56880	; 0xde30
    cb3e:	f2c0 0001 	movt	r0, #1
    cb42:	6801      	ldr	r1, [r0, #0]
    cb44:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    cb48:	f005 ffae 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    cb4c:	9027      	str	r0, [sp, #156]	; 0x9c
    cb4e:	e01f      	b.n	cb90 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f9c>
    cb50:	2001      	movs	r0, #1
    cb52:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    cb56:	e015      	b.n	cb84 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f90>
    cb58:	2000      	movs	r0, #0
    cb5a:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    cb5e:	e011      	b.n	cb84 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f90>
    cb60:	2000      	movs	r0, #0
    cb62:	f88d 0eab 	strb.w	r0, [sp, #3755]	; 0xeab
    cb66:	f89d 1eab 	ldrb.w	r1, [sp, #3755]	; 0xeab
    cb6a:	f640 2000 	movw	r0, #2560	; 0xa00
    cb6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cb72:	f005 ffa5 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    cb76:	f8cd 0eac 	str.w	r0, [sp, #3756]	; 0xeac
    cb7a:	f8dd 0eac 	ldr.w	r0, [sp, #3756]	; 0xeac
    cb7e:	f8cd 0b88 	str.w	r0, [sp, #2952]	; 0xb88
    cb82:	e00a      	b.n	cb9a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2fa6>
    cb84:	f89d 0b87 	ldrb.w	r0, [sp, #2951]	; 0xb87
    cb88:	07c0      	lsls	r0, r0, #31
    cb8a:	2800      	cmp	r0, #0
    cb8c:	d112      	bne.n	cbb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2fc0>
    cb8e:	e055      	b.n	cc3c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3048>
    cb90:	9827      	ldr	r0, [sp, #156]	; 0x9c
    cb92:	07c1      	lsls	r1, r0, #31
    cb94:	2900      	cmp	r1, #0
    cb96:	d1e3      	bne.n	cb60 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f6c>
    cb98:	e7de      	b.n	cb58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f64>
    cb9a:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    cb9e:	f60d 3188 	addw	r1, sp, #2952	; 0xb88
    cba2:	f005 ff81 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    cba6:	9026      	str	r0, [sp, #152]	; 0x98
    cba8:	e7ff      	b.n	cbaa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2fb6>
    cbaa:	9826      	ldr	r0, [sp, #152]	; 0x98
    cbac:	07c1      	lsls	r1, r0, #31
    cbae:	2900      	cmp	r1, #0
    cbb0:	d1ce      	bne.n	cb50 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f5c>
    cbb2:	e7d1      	b.n	cb58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f64>
                trace!("[{:04x}] LD B, Vx", self.pc);
    cbb4:	f64d 7098 	movw	r0, #57240	; 0xdf98
    cbb8:	f2c0 0001 	movt	r0, #1
    cbbc:	6801      	ldr	r1, [r0, #0]
    cbbe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cbc2:	f100 0212 	add.w	r2, r0, #18
    cbc6:	f8cd 2bac 	str.w	r2, [sp, #2988]	; 0xbac
    cbca:	f8dd 2bac 	ldr.w	r2, [sp, #2988]	; 0xbac
    cbce:	f8cd 2cb4 	str.w	r2, [sp, #3252]	; 0xcb4
    cbd2:	f248 230f 	movw	r3, #33295	; 0x820f
    cbd6:	f2c0 0301 	movt	r3, #1
    cbda:	4610      	mov	r0, r2
    cbdc:	9125      	str	r1, [sp, #148]	; 0x94
    cbde:	4619      	mov	r1, r3
    cbe0:	f005 f880 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cbe4:	9024      	str	r0, [sp, #144]	; 0x90
    cbe6:	9123      	str	r1, [sp, #140]	; 0x8c
    cbe8:	e7ff      	b.n	cbea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ff6>
    cbea:	9824      	ldr	r0, [sp, #144]	; 0x90
    cbec:	f8cd 0ba4 	str.w	r0, [sp, #2980]	; 0xba4
    cbf0:	9923      	ldr	r1, [sp, #140]	; 0x8c
    cbf2:	f8cd 1ba8 	str.w	r1, [sp, #2984]	; 0xba8
    cbf6:	f64d 6278 	movw	r2, #56952	; 0xde78
    cbfa:	f2c0 0201 	movt	r2, #1
    cbfe:	6812      	ldr	r2, [r2, #0]
    cc00:	466b      	mov	r3, sp
    cc02:	f04f 0c01 	mov.w	ip, #1
    cc06:	f8c3 c008 	str.w	ip, [r3, #8]
    cc0a:	605a      	str	r2, [r3, #4]
    cc0c:	f8c3 c000 	str.w	ip, [r3]
    cc10:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    cc14:	2202      	movs	r2, #2
    cc16:	f60d 33a4 	addw	r3, sp, #2980	; 0xba4
    cc1a:	9925      	ldr	r1, [sp, #148]	; 0x94
    cc1c:	f001 f90d 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    cc20:	e7ff      	b.n	cc22 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x302e>
    cc22:	f8dd 1b80 	ldr.w	r1, [sp, #2944]	; 0xb80
    cc26:	f64d 70b8 	movw	r0, #57272	; 0xdfb8
    cc2a:	f2c0 0001 	movt	r0, #1
    cc2e:	6802      	ldr	r2, [r0, #0]
    cc30:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    cc34:	f002 f8cd 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cc38:	e7ff      	b.n	cc3a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3046>
    cc3a:	e7ff      	b.n	cc3c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3048>
                let bcd = self.v[x];
    cc3c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    cc40:	280f      	cmp	r0, #15
    cc42:	f200 8308 	bhi.w	d256 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3662>
    cc46:	e7ff      	b.n	cc48 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3054>
    cc48:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cc4c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cc50:	1842      	adds	r2, r0, r1
    cc52:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cc56:	4613      	mov	r3, r2
    cc58:	f88d 2cbb 	strb.w	r2, [sp, #3259]	; 0xcbb
    cc5c:	f248 5c1f 	movw	ip, #34079	; 0x851f
    cc60:	f2c5 1ceb 	movt	ip, #20971	; 0x51eb
                self.mem[self.i as usize] = (bcd / 100) % 10;
    cc64:	fba2 2c0c 	umull	r2, ip, r2, ip
    cc68:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    cc6c:	f8b0 e010 	ldrh.w	lr, [r0, #16]
    cc70:	4674      	mov	r4, lr
    cc72:	2500      	movs	r5, #0
    cc74:	ebb5 3f1e 	cmp.w	r5, lr, lsr #12
    cc78:	9322      	str	r3, [sp, #136]	; 0x88
    cc7a:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    cc7e:	9420      	str	r4, [sp, #128]	; 0x80
    cc80:	f040 82f3 	bne.w	d26a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3676>
    cc84:	e7ff      	b.n	cc86 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3092>
    cc86:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cc8a:	9920      	ldr	r1, [sp, #128]	; 0x80
    cc8c:	1842      	adds	r2, r0, r1
    cc8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    cc90:	fa5f fc83 	uxtb.w	ip, r3
    cc94:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    cc98:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    cc9c:	fbac 450e 	umull	r4, r5, ip, lr
    cca0:	08ed      	lsrs	r5, r5, #3
    cca2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    cca6:	ebac 0c45 	sub.w	ip, ip, r5, lsl #1
    ccaa:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
    ccae:	9a22      	ldr	r2, [sp, #136]	; 0x88
    ccb0:	fa5f fc82 	uxtb.w	ip, r2
    ccb4:	fbac ce0e 	umull	ip, lr, ip, lr
    ccb8:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    ccbc:	8a05      	ldrh	r5, [r0, #16]
    ccbe:	3501      	adds	r5, #1
    ccc0:	2600      	movs	r6, #0
    ccc2:	2e00      	cmp	r6, #0
    ccc4:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
    ccc8:	951e      	str	r5, [sp, #120]	; 0x78
    ccca:	f040 82d8 	bne.w	d27e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x368a>
    ccce:	e7ff      	b.n	ccd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x30dc>
    ccd0:	2000      	movs	r0, #0
    ccd2:	991e      	ldr	r1, [sp, #120]	; 0x78
    ccd4:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    ccd8:	f040 82dd 	bne.w	d296 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x36a2>
    ccdc:	e7ff      	b.n	ccde <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x30ea>
    ccde:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cce2:	991e      	ldr	r1, [sp, #120]	; 0x78
    cce4:	1842      	adds	r2, r0, r1
    cce6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    cce8:	fa5f fc83 	uxtb.w	ip, r3
    ccec:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    ccf0:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    ccf4:	fbac e40e 	umull	lr, r4, ip, lr
    ccf8:	08e4      	lsrs	r4, r4, #3
    ccfa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    ccfe:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    cd02:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 2] = bcd % 10;
    cd06:	8a02      	ldrh	r2, [r0, #16]
    cd08:	3202      	adds	r2, #2
    cd0a:	f04f 0c00 	mov.w	ip, #0
    cd0e:	f1bc 0f00 	cmp.w	ip, #0
    cd12:	921d      	str	r2, [sp, #116]	; 0x74
    cd14:	f040 82c9 	bne.w	d2aa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x36b6>
    cd18:	e7ff      	b.n	cd1a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3126>
    cd1a:	2000      	movs	r0, #0
    cd1c:	991d      	ldr	r1, [sp, #116]	; 0x74
    cd1e:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    cd22:	f040 82ce 	bne.w	d2c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x36ce>
    cd26:	e7ff      	b.n	cd28 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3134>
    cd28:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cd2c:	991d      	ldr	r1, [sp, #116]	; 0x74
    cd2e:	1842      	adds	r2, r0, r1
    cd30:	9b22      	ldr	r3, [sp, #136]	; 0x88
    cd32:	fa5f fc83 	uxtb.w	ip, r3
    cd36:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    cd3a:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    cd3e:	fbac e40e 	umull	lr, r4, ip, lr
    cd42:	08e4      	lsrs	r4, r4, #3
    cd44:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    cd48:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    cd4c:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
        match (
    cd50:	e206      	b.n	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    cd52:	2005      	movs	r0, #5
    cd54:	f8cd 0bb0 	str.w	r0, [sp, #2992]	; 0xbb0
    cd58:	f64d 6030 	movw	r0, #56880	; 0xde30
    cd5c:	f2c0 0001 	movt	r0, #1
    cd60:	6801      	ldr	r1, [r0, #0]
    cd62:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    cd66:	f005 fe9f 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    cd6a:	901c      	str	r0, [sp, #112]	; 0x70
    cd6c:	e01f      	b.n	cdae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31ba>
    cd6e:	2001      	movs	r0, #1
    cd70:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    cd74:	e015      	b.n	cda2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31ae>
    cd76:	2000      	movs	r0, #0
    cd78:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    cd7c:	e011      	b.n	cda2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31ae>
    cd7e:	2000      	movs	r0, #0
    cd80:	f88d 0eb3 	strb.w	r0, [sp, #3763]	; 0xeb3
    cd84:	f89d 1eb3 	ldrb.w	r1, [sp, #3763]	; 0xeb3
    cd88:	f640 2000 	movw	r0, #2560	; 0xa00
    cd8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cd90:	f005 fe96 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    cd94:	f8cd 0eb4 	str.w	r0, [sp, #3764]	; 0xeb4
    cd98:	f8dd 0eb4 	ldr.w	r0, [sp, #3764]	; 0xeb4
    cd9c:	f8cd 0bb8 	str.w	r0, [sp, #3000]	; 0xbb8
    cda0:	e00a      	b.n	cdb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31c4>
    cda2:	f89d 0bb7 	ldrb.w	r0, [sp, #2999]	; 0xbb7
    cda6:	07c0      	lsls	r0, r0, #31
    cda8:	2800      	cmp	r0, #0
    cdaa:	d112      	bne.n	cdd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31de>
    cdac:	e055      	b.n	ce5a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3266>
    cdae:	981c      	ldr	r0, [sp, #112]	; 0x70
    cdb0:	07c1      	lsls	r1, r0, #31
    cdb2:	2900      	cmp	r1, #0
    cdb4:	d1e3      	bne.n	cd7e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x318a>
    cdb6:	e7de      	b.n	cd76 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3182>
    cdb8:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    cdbc:	f60d 31b8 	addw	r1, sp, #3000	; 0xbb8
    cdc0:	f005 fe72 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    cdc4:	901b      	str	r0, [sp, #108]	; 0x6c
    cdc6:	e7ff      	b.n	cdc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31d4>
    cdc8:	981b      	ldr	r0, [sp, #108]	; 0x6c
    cdca:	07c1      	lsls	r1, r0, #31
    cdcc:	2900      	cmp	r1, #0
    cdce:	d1ce      	bne.n	cd6e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x317a>
    cdd0:	e7d1      	b.n	cd76 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3182>
                trace!("[{:04x}] LD [I], Vx", self.pc);
    cdd2:	f64d 7018 	movw	r0, #57112	; 0xdf18
    cdd6:	f2c0 0001 	movt	r0, #1
    cdda:	6801      	ldr	r1, [r0, #0]
    cddc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cde0:	f100 0212 	add.w	r2, r0, #18
    cde4:	f8cd 2bdc 	str.w	r2, [sp, #3036]	; 0xbdc
    cde8:	f8dd 2bdc 	ldr.w	r2, [sp, #3036]	; 0xbdc
    cdec:	f8cd 2ca0 	str.w	r2, [sp, #3232]	; 0xca0
    cdf0:	f248 230f 	movw	r3, #33295	; 0x820f
    cdf4:	f2c0 0301 	movt	r3, #1
    cdf8:	4610      	mov	r0, r2
    cdfa:	911a      	str	r1, [sp, #104]	; 0x68
    cdfc:	4619      	mov	r1, r3
    cdfe:	f004 ff71 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ce02:	9019      	str	r0, [sp, #100]	; 0x64
    ce04:	9118      	str	r1, [sp, #96]	; 0x60
    ce06:	e7ff      	b.n	ce08 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3214>
    ce08:	9819      	ldr	r0, [sp, #100]	; 0x64
    ce0a:	f8cd 0bd4 	str.w	r0, [sp, #3028]	; 0xbd4
    ce0e:	9918      	ldr	r1, [sp, #96]	; 0x60
    ce10:	f8cd 1bd8 	str.w	r1, [sp, #3032]	; 0xbd8
    ce14:	f64d 6278 	movw	r2, #56952	; 0xde78
    ce18:	f2c0 0201 	movt	r2, #1
    ce1c:	6812      	ldr	r2, [r2, #0]
    ce1e:	466b      	mov	r3, sp
    ce20:	f04f 0c01 	mov.w	ip, #1
    ce24:	f8c3 c008 	str.w	ip, [r3, #8]
    ce28:	605a      	str	r2, [r3, #4]
    ce2a:	f8c3 c000 	str.w	ip, [r3]
    ce2e:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    ce32:	2202      	movs	r2, #2
    ce34:	f60d 33d4 	addw	r3, sp, #3028	; 0xbd4
    ce38:	991a      	ldr	r1, [sp, #104]	; 0x68
    ce3a:	f000 fffe 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    ce3e:	e7ff      	b.n	ce40 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x324c>
    ce40:	f8dd 1bb0 	ldr.w	r1, [sp, #2992]	; 0xbb0
    ce44:	f64d 7038 	movw	r0, #57144	; 0xdf38
    ce48:	f2c0 0001 	movt	r0, #1
    ce4c:	6802      	ldr	r2, [r0, #0]
    ce4e:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    ce52:	f001 ffbe 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ce56:	e7ff      	b.n	ce58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3264>
    ce58:	e7ff      	b.n	ce5a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3266>
                let x = x as usize;
    ce5a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ce5e:	f8cd 0ca4 	str.w	r0, [sp, #3236]	; 0xca4
                for i in 0..(x + 1) {
    ce62:	1c41      	adds	r1, r0, #1
    ce64:	460a      	mov	r2, r1
    ce66:	4281      	cmp	r1, r0
    ce68:	9217      	str	r2, [sp, #92]	; 0x5c
    ce6a:	f0c0 81c9 	bcc.w	d200 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x360c>
    ce6e:	e7ff      	b.n	ce70 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x327c>
    ce70:	2000      	movs	r0, #0
    ce72:	f8cd 0be0 	str.w	r0, [sp, #3040]	; 0xbe0
    ce76:	9817      	ldr	r0, [sp, #92]	; 0x5c
    ce78:	f8cd 0be4 	str.w	r0, [sp, #3044]	; 0xbe4
    ce7c:	f8dd 0be0 	ldr.w	r0, [sp, #3040]	; 0xbe0
    ce80:	f8dd 1be4 	ldr.w	r1, [sp, #3044]	; 0xbe4
    ce84:	f001 fd37 	bl	e8f6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    ce88:	9016      	str	r0, [sp, #88]	; 0x58
    ce8a:	9115      	str	r1, [sp, #84]	; 0x54
    ce8c:	e7ff      	b.n	ce8e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x329a>
    ce8e:	9816      	ldr	r0, [sp, #88]	; 0x58
    ce90:	f8cd 0be8 	str.w	r0, [sp, #3048]	; 0xbe8
    ce94:	9915      	ldr	r1, [sp, #84]	; 0x54
    ce96:	f8cd 1bec 	str.w	r1, [sp, #3052]	; 0xbec
    ce9a:	e7ff      	b.n	ce9c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32a8>
    ce9c:	f60d 30e8 	addw	r0, sp, #3048	; 0xbe8
    cea0:	f001 fc9e 	bl	e7e0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    cea4:	f8cd 1bf4 	str.w	r1, [sp, #3060]	; 0xbf4
    cea8:	f8cd 0bf0 	str.w	r0, [sp, #3056]	; 0xbf0
    ceac:	e7ff      	b.n	ceae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32ba>
    ceae:	f8dd 0bf0 	ldr.w	r0, [sp, #3056]	; 0xbf0
    ceb2:	2800      	cmp	r0, #0
    ceb4:	d001      	beq.n	ceba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32c6>
    ceb6:	e7ff      	b.n	ceb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32c4>
    ceb8:	e001      	b.n	cebe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32ca>
        match (
    ceba:	e151      	b.n	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
                for i in 0..(x + 1) {
    cebc:	defe      	udf	#254	; 0xfe
    cebe:	f8dd 0bf4 	ldr.w	r0, [sp, #3060]	; 0xbf4
    cec2:	f8cd 0ca8 	str.w	r0, [sp, #3240]	; 0xca8
    cec6:	f8cd 0cac 	str.w	r0, [sp, #3244]	; 0xcac
    ceca:	f8cd 0cb0 	str.w	r0, [sp, #3248]	; 0xcb0
                    self.mem[self.i as usize + i] = self.v[i];
    cece:	280f      	cmp	r0, #15
    ced0:	9014      	str	r0, [sp, #80]	; 0x50
    ced2:	f200 81a1 	bhi.w	d218 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3624>
    ced6:	e7ff      	b.n	ced8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32e4>
    ced8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cedc:	9914      	ldr	r1, [sp, #80]	; 0x50
    cede:	1842      	adds	r2, r0, r1
    cee0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cee4:	8a03      	ldrh	r3, [r0, #16]
    cee6:	eb03 0c01 	add.w	ip, r3, r1
    ceea:	46e6      	mov	lr, ip
    ceec:	459c      	cmp	ip, r3
    ceee:	9213      	str	r2, [sp, #76]	; 0x4c
    cef0:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
    cef4:	f0c0 8199 	bcc.w	d22a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3636>
    cef8:	e7ff      	b.n	cefa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3306>
    cefa:	2000      	movs	r0, #0
    cefc:	9912      	ldr	r1, [sp, #72]	; 0x48
    cefe:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    cf02:	f040 819e 	bne.w	d242 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x364e>
    cf06:	e7ff      	b.n	cf08 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3314>
    cf08:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cf0c:	9912      	ldr	r1, [sp, #72]	; 0x48
    cf0e:	1842      	adds	r2, r0, r1
    cf10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cf12:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
                for i in 0..(x + 1) {
    cf16:	e7c1      	b.n	ce9c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32a8>
    cf18:	2005      	movs	r0, #5
    cf1a:	f8cd 0bf8 	str.w	r0, [sp, #3064]	; 0xbf8
    cf1e:	f64d 6030 	movw	r0, #56880	; 0xde30
    cf22:	f2c0 0001 	movt	r0, #1
    cf26:	6801      	ldr	r1, [r0, #0]
    cf28:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
    cf2c:	f005 fdbc 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    cf30:	9011      	str	r0, [sp, #68]	; 0x44
    cf32:	e01f      	b.n	cf74 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3380>
    cf34:	2001      	movs	r0, #1
    cf36:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
    cf3a:	e015      	b.n	cf68 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3374>
    cf3c:	2000      	movs	r0, #0
    cf3e:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
    cf42:	e011      	b.n	cf68 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3374>
    cf44:	2000      	movs	r0, #0
    cf46:	f88d 0ebb 	strb.w	r0, [sp, #3771]	; 0xebb
    cf4a:	f89d 1ebb 	ldrb.w	r1, [sp, #3771]	; 0xebb
    cf4e:	f640 2000 	movw	r0, #2560	; 0xa00
    cf52:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cf56:	f005 fdb3 	bl	12ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    cf5a:	f8cd 0ebc 	str.w	r0, [sp, #3772]	; 0xebc
    cf5e:	f8dd 0ebc 	ldr.w	r0, [sp, #3772]	; 0xebc
    cf62:	f8cd 0c00 	str.w	r0, [sp, #3072]	; 0xc00
    cf66:	e00a      	b.n	cf7e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x338a>
    cf68:	f89d 0bff 	ldrb.w	r0, [sp, #3071]	; 0xbff
    cf6c:	07c0      	lsls	r0, r0, #31
    cf6e:	2800      	cmp	r0, #0
    cf70:	d112      	bne.n	cf98 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x33a4>
    cf72:	e055      	b.n	d020 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x342c>
    cf74:	9811      	ldr	r0, [sp, #68]	; 0x44
    cf76:	07c1      	lsls	r1, r0, #31
    cf78:	2900      	cmp	r1, #0
    cf7a:	d1e3      	bne.n	cf44 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3350>
    cf7c:	e7de      	b.n	cf3c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3348>
    cf7e:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
    cf82:	f50d 6140 	add.w	r1, sp, #3072	; 0xc00
    cf86:	f005 fd8f 	bl	12aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    cf8a:	9010      	str	r0, [sp, #64]	; 0x40
    cf8c:	e7ff      	b.n	cf8e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x339a>
    cf8e:	9810      	ldr	r0, [sp, #64]	; 0x40
    cf90:	07c1      	lsls	r1, r0, #31
    cf92:	2900      	cmp	r1, #0
    cf94:	d1ce      	bne.n	cf34 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3340>
    cf96:	e7d1      	b.n	cf3c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3348>
                trace!("[{:04x}] LD Vx, [I]", self.pc);
    cf98:	f64d 6054 	movw	r0, #56916	; 0xde54
    cf9c:	f2c0 0001 	movt	r0, #1
    cfa0:	6801      	ldr	r1, [r0, #0]
    cfa2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cfa6:	f100 0212 	add.w	r2, r0, #18
    cfaa:	f8cd 2c24 	str.w	r2, [sp, #3108]	; 0xc24
    cfae:	f8dd 2c24 	ldr.w	r2, [sp, #3108]	; 0xc24
    cfb2:	f8cd 2c8c 	str.w	r2, [sp, #3212]	; 0xc8c
    cfb6:	f248 230f 	movw	r3, #33295	; 0x820f
    cfba:	f2c0 0301 	movt	r3, #1
    cfbe:	4610      	mov	r0, r2
    cfc0:	910f      	str	r1, [sp, #60]	; 0x3c
    cfc2:	4619      	mov	r1, r3
    cfc4:	f004 fe8e 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cfc8:	900e      	str	r0, [sp, #56]	; 0x38
    cfca:	910d      	str	r1, [sp, #52]	; 0x34
    cfcc:	e7ff      	b.n	cfce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x33da>
    cfce:	980e      	ldr	r0, [sp, #56]	; 0x38
    cfd0:	f8cd 0c1c 	str.w	r0, [sp, #3100]	; 0xc1c
    cfd4:	990d      	ldr	r1, [sp, #52]	; 0x34
    cfd6:	f8cd 1c20 	str.w	r1, [sp, #3104]	; 0xc20
    cfda:	f64d 6278 	movw	r2, #56952	; 0xde78
    cfde:	f2c0 0201 	movt	r2, #1
    cfe2:	6812      	ldr	r2, [r2, #0]
    cfe4:	466b      	mov	r3, sp
    cfe6:	f04f 0c01 	mov.w	ip, #1
    cfea:	f8c3 c008 	str.w	ip, [r3, #8]
    cfee:	605a      	str	r2, [r3, #4]
    cff0:	f8c3 c000 	str.w	ip, [r3]
    cff4:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
    cff8:	2202      	movs	r2, #2
    cffa:	f60d 431c 	addw	r3, sp, #3100	; 0xc1c
    cffe:	990f      	ldr	r1, [sp, #60]	; 0x3c
    d000:	f000 ff1b 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    d004:	e7ff      	b.n	d006 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3412>
    d006:	f8dd 1bf8 	ldr.w	r1, [sp, #3064]	; 0xbf8
    d00a:	f64d 60b8 	movw	r0, #57016	; 0xdeb8
    d00e:	f2c0 0001 	movt	r0, #1
    d012:	6802      	ldr	r2, [r0, #0]
    d014:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
    d018:	f001 fedb 	bl	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d01c:	e7ff      	b.n	d01e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x342a>
    d01e:	e7ff      	b.n	d020 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x342c>
                let x = x as usize;
    d020:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    d024:	f8cd 0c90 	str.w	r0, [sp, #3216]	; 0xc90
                for i in 0..(x + 1) {
    d028:	1c41      	adds	r1, r0, #1
    d02a:	460a      	mov	r2, r1
    d02c:	4281      	cmp	r1, r0
    d02e:	920c      	str	r2, [sp, #48]	; 0x30
    d030:	f0c0 80bb 	bcc.w	d1aa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35b6>
    d034:	e7ff      	b.n	d036 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3442>
    d036:	2000      	movs	r0, #0
    d038:	f8cd 0c28 	str.w	r0, [sp, #3112]	; 0xc28
    d03c:	980c      	ldr	r0, [sp, #48]	; 0x30
    d03e:	f8cd 0c2c 	str.w	r0, [sp, #3116]	; 0xc2c
    d042:	f8dd 0c28 	ldr.w	r0, [sp, #3112]	; 0xc28
    d046:	f8dd 1c2c 	ldr.w	r1, [sp, #3116]	; 0xc2c
    d04a:	f001 fc54 	bl	e8f6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    d04e:	900b      	str	r0, [sp, #44]	; 0x2c
    d050:	910a      	str	r1, [sp, #40]	; 0x28
    d052:	e7ff      	b.n	d054 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3460>
    d054:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d056:	f8cd 0c30 	str.w	r0, [sp, #3120]	; 0xc30
    d05a:	990a      	ldr	r1, [sp, #40]	; 0x28
    d05c:	f8cd 1c34 	str.w	r1, [sp, #3124]	; 0xc34
    d060:	e7ff      	b.n	d062 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x346e>
    d062:	f50d 6043 	add.w	r0, sp, #3120	; 0xc30
    d066:	f001 fbbb 	bl	e7e0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    d06a:	f8cd 1c3c 	str.w	r1, [sp, #3132]	; 0xc3c
    d06e:	f8cd 0c38 	str.w	r0, [sp, #3128]	; 0xc38
    d072:	e7ff      	b.n	d074 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3480>
    d074:	f8dd 0c38 	ldr.w	r0, [sp, #3128]	; 0xc38
    d078:	2800      	cmp	r0, #0
    d07a:	d001      	beq.n	d080 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x348c>
    d07c:	e7ff      	b.n	d07e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x348a>
    d07e:	e001      	b.n	d084 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3490>
        match (
    d080:	e06e      	b.n	d160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
                for i in 0..(x + 1) {
    d082:	defe      	udf	#254	; 0xfe
    d084:	f8dd 0c3c 	ldr.w	r0, [sp, #3132]	; 0xc3c
    d088:	f8cd 0c94 	str.w	r0, [sp, #3220]	; 0xc94
    d08c:	f8cd 0c98 	str.w	r0, [sp, #3224]	; 0xc98
    d090:	f8cd 0c9c 	str.w	r0, [sp, #3228]	; 0xc9c
                    self.v[i] = self.mem[self.i as usize + i];
    d094:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d098:	8a0a      	ldrh	r2, [r1, #16]
    d09a:	1813      	adds	r3, r2, r0
    d09c:	469c      	mov	ip, r3
    d09e:	4293      	cmp	r3, r2
    d0a0:	9009      	str	r0, [sp, #36]	; 0x24
    d0a2:	f8cd c020 	str.w	ip, [sp, #32]
    d0a6:	f0c0 808c 	bcc.w	d1c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35ce>
    d0aa:	e7ff      	b.n	d0ac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x34b8>
    d0ac:	2000      	movs	r0, #0
    d0ae:	9908      	ldr	r1, [sp, #32]
    d0b0:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    d0b4:	f040 8091 	bne.w	d1da <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35e6>
    d0b8:	e7ff      	b.n	d0ba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x34c6>
    d0ba:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d0be:	9908      	ldr	r1, [sp, #32]
    d0c0:	1842      	adds	r2, r0, r1
    d0c2:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    d0c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d0c8:	2b0f      	cmp	r3, #15
    d0ca:	9207      	str	r2, [sp, #28]
    d0cc:	f200 808f 	bhi.w	d1ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35fa>
    d0d0:	e7ff      	b.n	d0d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x34de>
    d0d2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d0d6:	9909      	ldr	r1, [sp, #36]	; 0x24
    d0d8:	1842      	adds	r2, r0, r1
    d0da:	9b07      	ldr	r3, [sp, #28]
    d0dc:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                for i in 0..(x + 1) {
    d0e0:	e7bf      	b.n	d062 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x346e>
    d0e2:	f248 210f 	movw	r1, #33295	; 0x820f
    d0e6:	f2c0 0101 	movt	r1, #1
    d0ea:	f8dd 0430 	ldr.w	r0, [sp, #1072]	; 0x430
    d0ee:	f004 fdf9 	bl	11ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d0f2:	9006      	str	r0, [sp, #24]
    d0f4:	9105      	str	r1, [sp, #20]
    d0f6:	e7ff      	b.n	d0f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3504>
    d0f8:	f8dd 042c 	ldr.w	r0, [sp, #1068]	; 0x42c
    d0fc:	f8cd 0c58 	str.w	r0, [sp, #3160]	; 0xc58
    d100:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
    d104:	f8cd 1c5c 	str.w	r1, [sp, #3164]	; 0xc5c
    d108:	9a06      	ldr	r2, [sp, #24]
    d10a:	f8cd 2c60 	str.w	r2, [sp, #3168]	; 0xc60
    d10e:	9b05      	ldr	r3, [sp, #20]
    d110:	f8cd 3c64 	str.w	r3, [sp, #3172]	; 0xc64
    d114:	f64e 2c1c 	movw	ip, #59932	; 0xea1c
    d118:	f2c0 0c01 	movt	ip, #1
    d11c:	f8dc c000 	ldr.w	ip, [ip]
    d120:	46ee      	mov	lr, sp
    d122:	2402      	movs	r4, #2
    d124:	f8ce 4008 	str.w	r4, [lr, #8]
    d128:	f8ce c004 	str.w	ip, [lr, #4]
    d12c:	f8ce 4000 	str.w	r4, [lr]
    d130:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
    d134:	f60d 4358 	addw	r3, sp, #3160	; 0xc58
    d138:	f8dd 1434 	ldr.w	r1, [sp, #1076]	; 0x434
    d13c:	4622      	mov	r2, r4
    d13e:	f000 fe7c 	bl	de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    d142:	e7ff      	b.n	d144 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3550>
    d144:	f64e 2040 	movw	r0, #59968	; 0xea40
    d148:	f2c0 0001 	movt	r0, #1
    d14c:	f009 fc4b 	bl	169e6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    d150:	9004      	str	r0, [sp, #16]
    d152:	e7ff      	b.n	d154 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3560>
    d154:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
    d158:	9904      	ldr	r1, [sp, #16]
    d15a:	f009 fc81 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    d15e:	defe      	udf	#254	; 0xfe
        }
    }
    d160:	f50d 6d6c 	add.w	sp, sp, #3776	; 0xec0
    d164:	bd70      	pop	{r4, r5, r6, pc}
        let h = self.mem[self.pc as usize] as u16;
    d166:	f64d 50d4 	movw	r0, #56788	; 0xddd4
    d16a:	f2c0 0001 	movt	r0, #1
    d16e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d172:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    d176:	f009 fc53 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d17a:	defe      	udf	#254	; 0xfe
        let l = self.mem[(self.pc + 1) as usize] as u16;
    d17c:	f64d 6000 	movw	r0, #56832	; 0xde00
    d180:	f2c0 0001 	movt	r0, #1
    d184:	f64d 52e4 	movw	r2, #56804	; 0xdde4
    d188:	f2c0 0201 	movt	r2, #1
    d18c:	211c      	movs	r1, #28
    d18e:	f009 fc31 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d192:	defe      	udf	#254	; 0xfe
    d194:	f64d 601c 	movw	r0, #56860	; 0xde1c
    d198:	f2c0 0001 	movt	r0, #1
    d19c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d1a0:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    d1a4:	f009 fc3c 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d1a8:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
    d1aa:	f64d 6000 	movw	r0, #56832	; 0xde00
    d1ae:	f2c0 0001 	movt	r0, #1
    d1b2:	f64d 62bc 	movw	r2, #57020	; 0xdebc
    d1b6:	f2c0 0201 	movt	r2, #1
    d1ba:	211c      	movs	r1, #28
    d1bc:	f009 fc1a 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d1c0:	defe      	udf	#254	; 0xfe
                    self.v[i] = self.mem[self.i as usize + i];
    d1c2:	f64d 6000 	movw	r0, #56832	; 0xde00
    d1c6:	f2c0 0001 	movt	r0, #1
    d1ca:	f64d 62cc 	movw	r2, #57036	; 0xdecc
    d1ce:	f2c0 0201 	movt	r2, #1
    d1d2:	211c      	movs	r1, #28
    d1d4:	f009 fc0e 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d1d8:	defe      	udf	#254	; 0xfe
    d1da:	f64d 60dc 	movw	r0, #57052	; 0xdedc
    d1de:	f2c0 0001 	movt	r0, #1
    d1e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d1e6:	9908      	ldr	r1, [sp, #32]
    d1e8:	f009 fc1a 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d1ec:	defe      	udf	#254	; 0xfe
    d1ee:	f64d 60ec 	movw	r0, #57068	; 0xdeec
    d1f2:	f2c0 0001 	movt	r0, #1
    d1f6:	2210      	movs	r2, #16
    d1f8:	9909      	ldr	r1, [sp, #36]	; 0x24
    d1fa:	f009 fc11 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d1fe:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
    d200:	f64d 6000 	movw	r0, #56832	; 0xde00
    d204:	f2c0 0001 	movt	r0, #1
    d208:	f64d 723c 	movw	r2, #57148	; 0xdf3c
    d20c:	f2c0 0201 	movt	r2, #1
    d210:	211c      	movs	r1, #28
    d212:	f009 fbef 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d216:	defe      	udf	#254	; 0xfe
                    self.mem[self.i as usize + i] = self.v[i];
    d218:	f64d 704c 	movw	r0, #57164	; 0xdf4c
    d21c:	f2c0 0001 	movt	r0, #1
    d220:	2210      	movs	r2, #16
    d222:	9914      	ldr	r1, [sp, #80]	; 0x50
    d224:	f009 fbfc 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d228:	defe      	udf	#254	; 0xfe
    d22a:	f64d 6000 	movw	r0, #56832	; 0xde00
    d22e:	f2c0 0001 	movt	r0, #1
    d232:	f64d 725c 	movw	r2, #57180	; 0xdf5c
    d236:	f2c0 0201 	movt	r2, #1
    d23a:	211c      	movs	r1, #28
    d23c:	f009 fbda 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d240:	defe      	udf	#254	; 0xfe
    d242:	f64d 706c 	movw	r0, #57196	; 0xdf6c
    d246:	f2c0 0001 	movt	r0, #1
    d24a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d24e:	9912      	ldr	r1, [sp, #72]	; 0x48
    d250:	f009 fbe6 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d254:	defe      	udf	#254	; 0xfe
                let bcd = self.v[x];
    d256:	f64d 70bc 	movw	r0, #57276	; 0xdfbc
    d25a:	f2c0 0001 	movt	r0, #1
    d25e:	2210      	movs	r2, #16
    d260:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d264:	f009 fbdc 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d268:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize] = (bcd / 100) % 10;
    d26a:	f64d 70cc 	movw	r0, #57292	; 0xdfcc
    d26e:	f2c0 0001 	movt	r0, #1
    d272:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d276:	9920      	ldr	r1, [sp, #128]	; 0x80
    d278:	f009 fbd2 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d27c:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
    d27e:	f64d 6000 	movw	r0, #56832	; 0xde00
    d282:	f2c0 0001 	movt	r0, #1
    d286:	f64d 72dc 	movw	r2, #57308	; 0xdfdc
    d28a:	f2c0 0201 	movt	r2, #1
    d28e:	211c      	movs	r1, #28
    d290:	f009 fbb0 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d294:	defe      	udf	#254	; 0xfe
    d296:	f64d 70ec 	movw	r0, #57324	; 0xdfec
    d29a:	f2c0 0001 	movt	r0, #1
    d29e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d2a2:	991e      	ldr	r1, [sp, #120]	; 0x78
    d2a4:	f009 fbbc 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d2a8:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 2] = bcd % 10;
    d2aa:	f64d 6000 	movw	r0, #56832	; 0xde00
    d2ae:	f2c0 0001 	movt	r0, #1
    d2b2:	f64d 72fc 	movw	r2, #57340	; 0xdffc
    d2b6:	f2c0 0201 	movt	r2, #1
    d2ba:	211c      	movs	r1, #28
    d2bc:	f009 fb9a 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d2c0:	defe      	udf	#254	; 0xfe
    d2c2:	f24e 000c 	movw	r0, #57356	; 0xe00c
    d2c6:	f2c0 0001 	movt	r0, #1
    d2ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d2ce:	991d      	ldr	r1, [sp, #116]	; 0x74
    d2d0:	f009 fba6 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d2d4:	defe      	udf	#254	; 0xfe
                self.i = (self.v[x] * 5).into();
    d2d6:	f24e 005c 	movw	r0, #57436	; 0xe05c
    d2da:	f2c0 0001 	movt	r0, #1
    d2de:	2210      	movs	r2, #16
    d2e0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d2e4:	f009 fb9c 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d2e8:	defe      	udf	#254	; 0xfe
    d2ea:	f24e 0080 	movw	r0, #57472	; 0xe080
    d2ee:	f2c0 0001 	movt	r0, #1
    d2f2:	f24e 026c 	movw	r2, #57452	; 0xe06c
    d2f6:	f2c0 0201 	movt	r2, #1
    d2fa:	2121      	movs	r1, #33	; 0x21
    d2fc:	f009 fb7a 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d300:	defe      	udf	#254	; 0xfe
                self.i = self.i.wrapping_add(self.v[x].into());
    d302:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
    d306:	f2c0 0001 	movt	r0, #1
    d30a:	2210      	movs	r2, #16
    d30c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d310:	f009 fb86 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d314:	defe      	udf	#254	; 0xfe
                self.st = self.v[x];
    d316:	f24e 1030 	movw	r0, #57648	; 0xe130
    d31a:	f2c0 0001 	movt	r0, #1
    d31e:	2210      	movs	r2, #16
    d320:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d324:	f009 fb7c 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d328:	defe      	udf	#254	; 0xfe
                self.dt = self.v[x];
    d32a:	f24e 1080 	movw	r0, #57728	; 0xe180
    d32e:	f2c0 0001 	movt	r0, #1
    d332:	2210      	movs	r2, #16
    d334:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d338:	f009 fb72 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d33c:	defe      	udf	#254	; 0xfe
                self.v[x] = self.waitkey();
    d33e:	f24e 10d0 	movw	r0, #57808	; 0xe1d0
    d342:	f2c0 0001 	movt	r0, #1
    d346:	2210      	movs	r2, #16
    d348:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d34c:	f009 fb68 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d350:	defe      	udf	#254	; 0xfe
                self.v[x] = self.dt;
    d352:	f24e 2020 	movw	r0, #57888	; 0xe220
    d356:	f2c0 0001 	movt	r0, #1
    d35a:	2210      	movs	r2, #16
    d35c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d360:	f009 fb5e 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d364:	defe      	udf	#254	; 0xfe
                if !self.hw.key(self.v[x]) {
    d366:	f24e 2070 	movw	r0, #57968	; 0xe270
    d36a:	f2c0 0001 	movt	r0, #1
    d36e:	2210      	movs	r2, #16
    d370:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d374:	f009 fb54 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d378:	defe      	udf	#254	; 0xfe
                if self.hw.key(self.v[x]) {
    d37a:	f24e 20b4 	movw	r0, #58036	; 0xe2b4
    d37e:	f2c0 0001 	movt	r0, #1
    d382:	2210      	movs	r2, #16
    d384:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d388:	f009 fb4a 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d38c:	defe      	udf	#254	; 0xfe
                let basex = self.v[x] as usize;
    d38e:	f24e 3008 	movw	r0, #58120	; 0xe308
    d392:	f2c0 0001 	movt	r0, #1
    d396:	2210      	movs	r2, #16
    d398:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d39c:	f009 fb40 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d3a0:	defe      	udf	#254	; 0xfe
                let basey = self.v[y] as usize;
    d3a2:	f24e 3018 	movw	r0, #58136	; 0xe318
    d3a6:	f2c0 0001 	movt	r0, #1
    d3aa:	2210      	movs	r2, #16
    d3ac:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d3b0:	f009 fb36 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d3b4:	defe      	udf	#254	; 0xfe
                    let b = self.mem[self.i as usize + y];
    d3b6:	f64d 6000 	movw	r0, #56832	; 0xde00
    d3ba:	f2c0 0001 	movt	r0, #1
    d3be:	f24e 3228 	movw	r2, #58152	; 0xe328
    d3c2:	f2c0 0201 	movt	r2, #1
    d3c6:	211c      	movs	r1, #28
    d3c8:	f009 fb14 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d3cc:	defe      	udf	#254	; 0xfe
    d3ce:	f24e 3038 	movw	r0, #58168	; 0xe338
    d3d2:	f2c0 0001 	movt	r0, #1
    d3d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d3da:	9967      	ldr	r1, [sp, #412]	; 0x19c
    d3dc:	f009 fb20 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d3e0:	defe      	udf	#254	; 0xfe
                    let vramy = (y + basey) % h;
    d3e2:	f64d 6000 	movw	r0, #56832	; 0xde00
    d3e6:	f2c0 0001 	movt	r0, #1
    d3ea:	f24e 3248 	movw	r2, #58184	; 0xe348
    d3ee:	f2c0 0201 	movt	r2, #1
    d3f2:	211c      	movs	r1, #28
    d3f4:	f009 fafe 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d3f8:	defe      	udf	#254	; 0xfe
    d3fa:	f24e 3060 	movw	r0, #58208	; 0xe360
    d3fe:	f2c0 0001 	movt	r0, #1
    d402:	f24e 3248 	movw	r2, #58184	; 0xe348
    d406:	f2c0 0201 	movt	r2, #1
    d40a:	2139      	movs	r1, #57	; 0x39
    d40c:	f009 faf2 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d410:	defe      	udf	#254	; 0xfe
                        let vramx = (x + basex) % w;
    d412:	f64d 6000 	movw	r0, #56832	; 0xde00
    d416:	f2c0 0001 	movt	r0, #1
    d41a:	f24e 329c 	movw	r2, #58268	; 0xe39c
    d41e:	f2c0 0201 	movt	r2, #1
    d422:	211c      	movs	r1, #28
    d424:	f009 fae6 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d428:	defe      	udf	#254	; 0xfe
    d42a:	f24e 3060 	movw	r0, #58208	; 0xe360
    d42e:	f2c0 0001 	movt	r0, #1
    d432:	f24e 329c 	movw	r2, #58268	; 0xe39c
    d436:	f2c0 0201 	movt	r2, #1
    d43a:	2139      	movs	r1, #57	; 0x39
    d43c:	f009 fada 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d440:	defe      	udf	#254	; 0xfe
                        let src = (b & 1 << (7 - x)) > 0;
    d442:	f24e 30c0 	movw	r0, #58304	; 0xe3c0
    d446:	f2c0 0001 	movt	r0, #1
    d44a:	f24e 32ac 	movw	r2, #58284	; 0xe3ac
    d44e:	f2c0 0201 	movt	r2, #1
    d452:	2121      	movs	r1, #33	; 0x21
    d454:	f009 face 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d458:	defe      	udf	#254	; 0xfe
    d45a:	f24e 4000 	movw	r0, #58368	; 0xe400
    d45e:	f2c0 0001 	movt	r0, #1
    d462:	f24e 32e4 	movw	r2, #58340	; 0xe3e4
    d466:	f2c0 0201 	movt	r2, #1
    d46a:	2123      	movs	r1, #35	; 0x23
    d46c:	f009 fac2 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d470:	defe      	udf	#254	; 0xfe
                self.v[x] = self.hw.rand() & kk;
    d472:	f24e 4064 	movw	r0, #58468	; 0xe464
    d476:	f2c0 0001 	movt	r0, #1
    d47a:	2210      	movs	r2, #16
    d47c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d480:	f009 face 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d484:	defe      	udf	#254	; 0xfe
                if self.v[x] != self.v[y] {
    d486:	f24e 5034 	movw	r0, #58676	; 0xe534
    d48a:	f2c0 0001 	movt	r0, #1
    d48e:	2210      	movs	r2, #16
    d490:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d494:	f009 fac4 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d498:	defe      	udf	#254	; 0xfe
    d49a:	f24e 5044 	movw	r0, #58692	; 0xe544
    d49e:	f2c0 0001 	movt	r0, #1
    d4a2:	2210      	movs	r2, #16
    d4a4:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d4a8:	f009 faba 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d4ac:	defe      	udf	#254	; 0xfe
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    d4ae:	f24e 5094 	movw	r0, #58772	; 0xe594
    d4b2:	f2c0 0001 	movt	r0, #1
    d4b6:	2210      	movs	r2, #16
    d4b8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d4bc:	f009 fab0 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d4c0:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shl(1);
    d4c2:	f24e 50a4 	movw	r0, #58788	; 0xe5a4
    d4c6:	f2c0 0001 	movt	r0, #1
    d4ca:	2210      	movs	r2, #16
    d4cc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d4d0:	f009 faa6 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d4d4:	defe      	udf	#254	; 0xfe
    d4d6:	f24e 50b4 	movw	r0, #58804	; 0xe5b4
    d4da:	f2c0 0001 	movt	r0, #1
    d4de:	2210      	movs	r2, #16
    d4e0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d4e4:	f009 fa9c 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d4e8:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    d4ea:	f24e 6008 	movw	r0, #58888	; 0xe608
    d4ee:	f2c0 0001 	movt	r0, #1
    d4f2:	2210      	movs	r2, #16
    d4f4:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d4f8:	f009 fa92 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d4fc:	defe      	udf	#254	; 0xfe
    d4fe:	f24e 6018 	movw	r0, #58904	; 0xe618
    d502:	f2c0 0001 	movt	r0, #1
    d506:	2210      	movs	r2, #16
    d508:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d50c:	f009 fa88 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d510:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    d512:	f24e 6028 	movw	r0, #58920	; 0xe628
    d516:	f2c0 0001 	movt	r0, #1
    d51a:	2210      	movs	r2, #16
    d51c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d520:	f009 fa7e 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d524:	defe      	udf	#254	; 0xfe
                self.v[0xf] = self.v[x] & 1;
    d526:	f24e 6078 	movw	r0, #59000	; 0xe678
    d52a:	f2c0 0001 	movt	r0, #1
    d52e:	2210      	movs	r2, #16
    d530:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d534:	f009 fa74 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d538:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shr(1);
    d53a:	f24e 6088 	movw	r0, #59016	; 0xe688
    d53e:	f2c0 0001 	movt	r0, #1
    d542:	2210      	movs	r2, #16
    d544:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d548:	f009 fa6a 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d54c:	defe      	udf	#254	; 0xfe
    d54e:	f24e 6098 	movw	r0, #59032	; 0xe698
    d552:	f2c0 0001 	movt	r0, #1
    d556:	2210      	movs	r2, #16
    d558:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d55c:	f009 fa60 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d560:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    d562:	f24e 60e8 	movw	r0, #59112	; 0xe6e8
    d566:	f2c0 0001 	movt	r0, #1
    d56a:	2210      	movs	r2, #16
    d56c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d570:	f009 fa56 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d574:	defe      	udf	#254	; 0xfe
    d576:	f24e 60f8 	movw	r0, #59128	; 0xe6f8
    d57a:	f2c0 0001 	movt	r0, #1
    d57e:	2210      	movs	r2, #16
    d580:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d584:	f009 fa4c 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d588:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    d58a:	f24e 7008 	movw	r0, #59144	; 0xe708
    d58e:	f2c0 0001 	movt	r0, #1
    d592:	2210      	movs	r2, #16
    d594:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d598:	f009 fa42 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d59c:	defe      	udf	#254	; 0xfe
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    d59e:	f24e 7058 	movw	r0, #59224	; 0xe758
    d5a2:	f2c0 0001 	movt	r0, #1
    d5a6:	2210      	movs	r2, #16
    d5a8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d5ac:	f009 fa38 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d5b0:	defe      	udf	#254	; 0xfe
    d5b2:	f24e 7068 	movw	r0, #59240	; 0xe768
    d5b6:	f2c0 0001 	movt	r0, #1
    d5ba:	2210      	movs	r2, #16
    d5bc:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d5c0:	f009 fa2e 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d5c4:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    d5c6:	f24e 7078 	movw	r0, #59256	; 0xe778
    d5ca:	f2c0 0001 	movt	r0, #1
    d5ce:	2210      	movs	r2, #16
    d5d0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d5d4:	f009 fa24 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d5d8:	defe      	udf	#254	; 0xfe
                self.v[x] ^= self.v[y];
    d5da:	f24e 70c8 	movw	r0, #59336	; 0xe7c8
    d5de:	f2c0 0001 	movt	r0, #1
    d5e2:	2210      	movs	r2, #16
    d5e4:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d5e8:	f009 fa1a 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d5ec:	defe      	udf	#254	; 0xfe
    d5ee:	f24e 70d8 	movw	r0, #59352	; 0xe7d8
    d5f2:	f2c0 0001 	movt	r0, #1
    d5f6:	2210      	movs	r2, #16
    d5f8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d5fc:	f009 fa10 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d600:	defe      	udf	#254	; 0xfe
                self.v[x] &= self.v[y];
    d602:	f64e 0028 	movw	r0, #59432	; 0xe828
    d606:	f2c0 0001 	movt	r0, #1
    d60a:	2210      	movs	r2, #16
    d60c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d610:	f009 fa06 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d614:	defe      	udf	#254	; 0xfe
    d616:	f64e 0038 	movw	r0, #59448	; 0xe838
    d61a:	f2c0 0001 	movt	r0, #1
    d61e:	2210      	movs	r2, #16
    d620:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d624:	f009 f9fc 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d628:	defe      	udf	#254	; 0xfe
                self.v[x] |= self.v[y];
    d62a:	f64e 0088 	movw	r0, #59528	; 0xe888
    d62e:	f2c0 0001 	movt	r0, #1
    d632:	2210      	movs	r2, #16
    d634:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d638:	f009 f9f2 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d63c:	defe      	udf	#254	; 0xfe
    d63e:	f64e 0098 	movw	r0, #59544	; 0xe898
    d642:	f2c0 0001 	movt	r0, #1
    d646:	2210      	movs	r2, #16
    d648:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d64c:	f009 f9e8 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d650:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[y];
    d652:	f64e 00e8 	movw	r0, #59624	; 0xe8e8
    d656:	f2c0 0001 	movt	r0, #1
    d65a:	2210      	movs	r2, #16
    d65c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d660:	f009 f9de 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d664:	defe      	udf	#254	; 0xfe
    d666:	f64e 00f8 	movw	r0, #59640	; 0xe8f8
    d66a:	f2c0 0001 	movt	r0, #1
    d66e:	2210      	movs	r2, #16
    d670:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d674:	f009 f9d4 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d678:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_add(kk);
    d67a:	f64e 1048 	movw	r0, #59720	; 0xe948
    d67e:	f2c0 0001 	movt	r0, #1
    d682:	2210      	movs	r2, #16
    d684:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d688:	f009 f9ca 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d68c:	defe      	udf	#254	; 0xfe
    d68e:	f64e 1058 	movw	r0, #59736	; 0xe958
    d692:	f2c0 0001 	movt	r0, #1
    d696:	2210      	movs	r2, #16
    d698:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d69c:	f009 f9c0 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d6a0:	defe      	udf	#254	; 0xfe
                self.v[x] = kk;
    d6a2:	f64e 10a8 	movw	r0, #59816	; 0xe9a8
    d6a6:	f2c0 0001 	movt	r0, #1
    d6aa:	2210      	movs	r2, #16
    d6ac:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d6b0:	f009 f9b6 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d6b4:	defe      	udf	#254	; 0xfe
                if self.v[x] == self.v[y] {
    d6b6:	f64e 2090 	movw	r0, #60048	; 0xea90
    d6ba:	f2c0 0001 	movt	r0, #1
    d6be:	2210      	movs	r2, #16
    d6c0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d6c4:	f009 f9ac 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d6c8:	defe      	udf	#254	; 0xfe
    d6ca:	f64e 20a0 	movw	r0, #60064	; 0xeaa0
    d6ce:	f2c0 0001 	movt	r0, #1
    d6d2:	2210      	movs	r2, #16
    d6d4:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d6d8:	f009 f9a2 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d6dc:	defe      	udf	#254	; 0xfe
                if self.v[x] != kk {
    d6de:	f64e 20f0 	movw	r0, #60144	; 0xeaf0
    d6e2:	f2c0 0001 	movt	r0, #1
    d6e6:	2210      	movs	r2, #16
    d6e8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d6ec:	f009 f998 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d6f0:	defe      	udf	#254	; 0xfe
                if self.v[x] == kk {
    d6f2:	f64e 3040 	movw	r0, #60224	; 0xeb40
    d6f6:	f2c0 0001 	movt	r0, #1
    d6fa:	2210      	movs	r2, #16
    d6fc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d700:	f009 f98e 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d704:	defe      	udf	#254	; 0xfe

0000d706 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h64cee1a3c11094e6E>:
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d706:	b580      	push	{r7, lr}
    d708:	b086      	sub	sp, #24
    d70a:	9104      	str	r1, [sp, #16]
    d70c:	9205      	str	r2, [sp, #20]
    d70e:	6809      	ldr	r1, [r1, #0]
    d710:	6809      	ldr	r1, [r1, #0]
    d712:	2300      	movs	r3, #0
    d714:	9301      	str	r3, [sp, #4]
    d716:	9102      	str	r1, [sp, #8]
    d718:	9203      	str	r2, [sp, #12]
    d71a:	9901      	ldr	r1, [sp, #4]
    d71c:	9a02      	ldr	r2, [sp, #8]
    d71e:	9b03      	ldr	r3, [sp, #12]
    d720:	f005 fb4b 	bl	12dba <_ZN4core4iter6traits8iterator8Iterator3map17hf6992577e3374dfdE>
    d724:	e7ff      	b.n	d726 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h64cee1a3c11094e6E+0x20>
    d726:	b006      	add	sp, #24
    d728:	bd80      	pop	{r7, pc}

0000d72a <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h2454dbfe6f26a106E>:
    d72a:	b084      	sub	sp, #16
    d72c:	9002      	str	r0, [sp, #8]
    d72e:	9103      	str	r1, [sp, #12]
    d730:	6800      	ldr	r0, [r0, #0]
    d732:	9000      	str	r0, [sp, #0]
    d734:	9101      	str	r1, [sp, #4]
    d736:	9800      	ldr	r0, [sp, #0]
    d738:	9901      	ldr	r1, [sp, #4]
    d73a:	b004      	add	sp, #16
    d73c:	4770      	bx	lr

0000d73e <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>:
    fn jump(&mut self, pc: u16) {
    d73e:	b082      	sub	sp, #8
    d740:	460a      	mov	r2, r1
    d742:	9000      	str	r0, [sp, #0]
    d744:	f8ad 1006 	strh.w	r1, [sp, #6]
        self.pc = pc;
    d748:	8241      	strh	r1, [r0, #18]
    }
    d74a:	b002      	add	sp, #8
    d74c:	4770      	bx	lr

0000d74e <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E>:
    fn load(&mut self, rom: &[u8]) {
    d74e:	b580      	push	{r7, lr}
    d750:	b08a      	sub	sp, #40	; 0x28
    d752:	9105      	str	r1, [sp, #20]
    d754:	9206      	str	r2, [sp, #24]
    d756:	9009      	str	r0, [sp, #36]	; 0x24
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
    d758:	3047      	adds	r0, #71	; 0x47
    d75a:	9905      	ldr	r1, [sp, #20]
    d75c:	9a06      	ldr	r2, [sp, #24]
    d75e:	9004      	str	r0, [sp, #16]
    d760:	4608      	mov	r0, r1
    d762:	4611      	mov	r1, r2
    d764:	f001 f8a0 	bl	e8a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    d768:	9003      	str	r0, [sp, #12]
    d76a:	e7ff      	b.n	d76c <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E+0x1e>
    d76c:	9803      	ldr	r0, [sp, #12]
    d76e:	f500 7100 	add.w	r1, r0, #512	; 0x200
    d772:	460a      	mov	r2, r1
    d774:	4281      	cmp	r1, r0
    d776:	9202      	str	r2, [sp, #8]
    d778:	d318      	bcc.n	d7ac <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E+0x5e>
    d77a:	e7ff      	b.n	d77c <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E+0x2e>
    d77c:	f44f 7000 	mov.w	r0, #512	; 0x200
    d780:	9007      	str	r0, [sp, #28]
    d782:	9802      	ldr	r0, [sp, #8]
    d784:	9008      	str	r0, [sp, #32]
    d786:	9a07      	ldr	r2, [sp, #28]
    d788:	9b08      	ldr	r3, [sp, #32]
    d78a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    d78e:	9804      	ldr	r0, [sp, #16]
    d790:	f000 fb8c 	bl	deac <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hd29a6855bf5041fdE>
    d794:	9001      	str	r0, [sp, #4]
    d796:	9100      	str	r1, [sp, #0]
    d798:	e7ff      	b.n	d79a <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E+0x4c>
    d79a:	9a05      	ldr	r2, [sp, #20]
    d79c:	9b06      	ldr	r3, [sp, #24]
    d79e:	9801      	ldr	r0, [sp, #4]
    d7a0:	9900      	ldr	r1, [sp, #0]
    d7a2:	f001 fe4b 	bl	f43c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
    d7a6:	e7ff      	b.n	d7a8 <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E+0x5a>
    }
    d7a8:	b00a      	add	sp, #40	; 0x28
    d7aa:	bd80      	pop	{r7, pc}
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
    d7ac:	f64d 6000 	movw	r0, #56832	; 0xde00
    d7b0:	f2c0 0001 	movt	r0, #1
    d7b4:	f64e 429c 	movw	r2, #60572	; 0xec9c
    d7b8:	f2c0 0201 	movt	r2, #1
    d7bc:	211c      	movs	r1, #28
    d7be:	f009 f919 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d7c2:	defe      	udf	#254	; 0xfe

0000d7c4 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>:
    fn next(&mut self) {
    d7c4:	b580      	push	{r7, lr}
    d7c6:	b084      	sub	sp, #16
    d7c8:	9003      	str	r0, [sp, #12]
        self.jump(self.pc.wrapping_add(2));
    d7ca:	8a41      	ldrh	r1, [r0, #18]
    d7cc:	2202      	movs	r2, #2
    d7ce:	9002      	str	r0, [sp, #8]
    d7d0:	4608      	mov	r0, r1
    d7d2:	4611      	mov	r1, r2
    d7d4:	f005 fa50 	bl	12c78 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E>
    d7d8:	9001      	str	r0, [sp, #4]
    d7da:	e7ff      	b.n	d7dc <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE+0x18>
    d7dc:	9802      	ldr	r0, [sp, #8]
    d7de:	9901      	ldr	r1, [sp, #4]
    d7e0:	f7ff ffad 	bl	d73e <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>
    d7e4:	e7ff      	b.n	d7e6 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE+0x22>
    }
    d7e6:	b004      	add	sp, #16
    d7e8:	bd80      	pop	{r7, pc}

0000d7ea <_ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE>:
    fn push(&mut self, item: u16) {
    d7ea:	b580      	push	{r7, lr}
    d7ec:	b086      	sub	sp, #24
    d7ee:	460a      	mov	r2, r1
    d7f0:	9004      	str	r0, [sp, #16]
    d7f2:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.stack[self.sp as usize] = item;
    d7f6:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    d7fa:	460b      	mov	r3, r1
    d7fc:	290f      	cmp	r1, #15
    d7fe:	9003      	str	r0, [sp, #12]
    d800:	9202      	str	r2, [sp, #8]
    d802:	9301      	str	r3, [sp, #4]
    d804:	d813      	bhi.n	d82e <_ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE+0x44>
    d806:	e7ff      	b.n	d808 <_ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE+0x1e>
    d808:	9803      	ldr	r0, [sp, #12]
    d80a:	9901      	ldr	r1, [sp, #4]
    d80c:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    d810:	9b02      	ldr	r3, [sp, #8]
    d812:	8293      	strh	r3, [r2, #20]
        self.sp = self.sp.wrapping_add(1);
    d814:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    d818:	2101      	movs	r1, #1
    d81a:	f005 f990 	bl	12b3e <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17hac8dfc997b9c24ecE>
    d81e:	9000      	str	r0, [sp, #0]
    d820:	e7ff      	b.n	d822 <_ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE+0x38>
    d822:	9800      	ldr	r0, [sp, #0]
    d824:	9903      	ldr	r1, [sp, #12]
    d826:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
    }
    d82a:	b006      	add	sp, #24
    d82c:	bd80      	pop	{r7, pc}
        self.stack[self.sp as usize] = item;
    d82e:	f64e 40ac 	movw	r0, #60588	; 0xecac
    d832:	f2c0 0001 	movt	r0, #1
    d836:	2210      	movs	r2, #16
    d838:	9901      	ldr	r1, [sp, #4]
    d83a:	f009 f8f1 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d83e:	defe      	udf	#254	; 0xfe

0000d840 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E>:
    fn tick(&mut self) {
    d840:	b580      	push	{r7, lr}
    d842:	b084      	sub	sp, #16
    d844:	9003      	str	r0, [sp, #12]
        if self.dt > 0 {
    d846:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    d84a:	2900      	cmp	r1, #0
    d84c:	9002      	str	r0, [sp, #8]
    d84e:	d00f      	beq.n	d870 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x30>
    d850:	e7ff      	b.n	d852 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x12>
            self.dt -= 1;
    d852:	9802      	ldr	r0, [sp, #8]
    d854:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    d858:	3901      	subs	r1, #1
    d85a:	b2ca      	uxtb	r2, r1
    d85c:	460b      	mov	r3, r1
    d85e:	428a      	cmp	r2, r1
    d860:	9301      	str	r3, [sp, #4]
    d862:	d126      	bne.n	d8b2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x72>
    d864:	e7ff      	b.n	d866 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x26>
    d866:	9801      	ldr	r0, [sp, #4]
    d868:	9902      	ldr	r1, [sp, #8]
    d86a:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
        if self.dt > 0 {
    d86e:	e7ff      	b.n	d870 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x30>
        if self.st > 0 {
    d870:	9802      	ldr	r0, [sp, #8]
    d872:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
    d876:	2900      	cmp	r1, #0
    d878:	d019      	beq.n	d8ae <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x6e>
    d87a:	e7ff      	b.n	d87c <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x3c>
            self.st -= 1;
    d87c:	9802      	ldr	r0, [sp, #8]
    d87e:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
    d882:	3901      	subs	r1, #1
    d884:	b2ca      	uxtb	r2, r1
    d886:	460b      	mov	r3, r1
    d888:	428a      	cmp	r2, r1
    d88a:	9300      	str	r3, [sp, #0]
    d88c:	d11d      	bne.n	d8ca <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x8a>
    d88e:	e7ff      	b.n	d890 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x50>
    d890:	9800      	ldr	r0, [sp, #0]
    d892:	9902      	ldr	r1, [sp, #8]
    d894:	f881 0045 	strb.w	r0, [r1, #69]	; 0x45
            if self.st == 0 {
    d898:	f891 2045 	ldrb.w	r2, [r1, #69]	; 0x45
    d89c:	2a00      	cmp	r2, #0
    d89e:	d105      	bne.n	d8ac <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x6c>
    d8a0:	e7ff      	b.n	d8a2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x62>
                self.hw.beep();
    d8a2:	9802      	ldr	r0, [sp, #8]
    d8a4:	f7fc f8b0 	bl	9a08 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha45cfdbdf4731cedE>
    d8a8:	e7ff      	b.n	d8aa <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x6a>
            if self.st == 0 {
    d8aa:	e7ff      	b.n	d8ac <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x6c>
        if self.st > 0 {
    d8ac:	e7ff      	b.n	d8ae <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x6e>
    }
    d8ae:	b004      	add	sp, #16
    d8b0:	bd80      	pop	{r7, pc}
            self.dt -= 1;
    d8b2:	f24e 30c0 	movw	r0, #58304	; 0xe3c0
    d8b6:	f2c0 0001 	movt	r0, #1
    d8ba:	f64e 42bc 	movw	r2, #60604	; 0xecbc
    d8be:	f2c0 0201 	movt	r2, #1
    d8c2:	2121      	movs	r1, #33	; 0x21
    d8c4:	f009 f896 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d8c8:	defe      	udf	#254	; 0xfe
            self.st -= 1;
    d8ca:	f24e 30c0 	movw	r0, #58304	; 0xe3c0
    d8ce:	f2c0 0001 	movt	r0, #1
    d8d2:	f64e 42cc 	movw	r2, #60620	; 0xeccc
    d8d6:	f2c0 0201 	movt	r2, #1
    d8da:	2121      	movs	r1, #33	; 0x21
    d8dc:	f009 f88a 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d8e0:	defe      	udf	#254	; 0xfe

0000d8e2 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E>:
    fn sched(&mut self) {
    d8e2:	b510      	push	{r4, lr}
    d8e4:	b098      	sub	sp, #96	; 0x60
    d8e6:	9015      	str	r0, [sp, #84]	; 0x54
        if self.hw.sched() {
    d8e8:	900b      	str	r0, [sp, #44]	; 0x2c
    d8ea:	f7fc f891 	bl	9a10 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h3c52951efd018dffE>
    d8ee:	900a      	str	r0, [sp, #40]	; 0x28
    d8f0:	e7ff      	b.n	d8f2 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x10>
    d8f2:	980a      	ldr	r0, [sp, #40]	; 0x28
    d8f4:	07c1      	lsls	r1, r0, #31
    d8f6:	2900      	cmp	r1, #0
    d8f8:	d005      	beq.n	d906 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x24>
    d8fa:	e7ff      	b.n	d8fc <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x1a>
            self.shutdown();
    d8fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d8fe:	f000 f900 	bl	db02 <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h04afc1517f23f57eE>
    d902:	e7ff      	b.n	d904 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x22>
        if self.hw.sched() {
    d904:	e7ff      	b.n	d906 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x24>
        if let Some(t) = self.time {
    d906:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d908:	6801      	ldr	r1, [r0, #0]
    d90a:	2901      	cmp	r1, #1
    d90c:	d006      	beq.n	d91c <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x3a>
    d90e:	e7ff      	b.n	d910 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x2e>
            self.time = Some(self.hw.clock());
    d910:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d912:	f7fc f819 	bl	9948 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E>
    d916:	9109      	str	r1, [sp, #36]	; 0x24
    d918:	9008      	str	r0, [sp, #32]
    d91a:	e040      	b.n	d99e <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0xbc>
        if let Some(t) = self.time {
    d91c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d91e:	6881      	ldr	r1, [r0, #8]
    d920:	68c2      	ldr	r2, [r0, #12]
    d922:	9217      	str	r2, [sp, #92]	; 0x5c
    d924:	9116      	str	r1, [sp, #88]	; 0x58
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
    d926:	9107      	str	r1, [sp, #28]
    d928:	9206      	str	r2, [sp, #24]
    d92a:	f7fc f80d 	bl	9948 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E>
    d92e:	9105      	str	r1, [sp, #20]
    d930:	9004      	str	r0, [sp, #16]
    d932:	e7ff      	b.n	d934 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x52>
    d934:	9804      	ldr	r0, [sp, #16]
    d936:	9905      	ldr	r1, [sp, #20]
    d938:	9a07      	ldr	r2, [sp, #28]
    d93a:	9b06      	ldr	r3, [sp, #24]
    d93c:	f005 f9be 	bl	12cbc <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h7cd75c3bdc89aa73E>
    d940:	9103      	str	r1, [sp, #12]
    d942:	9002      	str	r0, [sp, #8]
    d944:	e7ff      	b.n	d946 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x64>
    d946:	f245 002b 	movw	r0, #20523	; 0x502b
    d94a:	f2c0 00fe 	movt	r0, #254	; 0xfe
    d94e:	9902      	ldr	r1, [sp, #8]
    d950:	1a08      	subs	r0, r1, r0
    d952:	9a03      	ldr	r2, [sp, #12]
    d954:	f172 0300 	sbcs.w	r3, r2, #0
    d958:	d320      	bcc.n	d99c <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0xba>
    d95a:	e7ff      	b.n	d95c <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x7a>
                self.tick();
    d95c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d95e:	f7ff ff6f 	bl	d840 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E>
    d962:	e7ff      	b.n	d964 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x82>
                self.time = Some(self.hw.clock());
    d964:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d966:	f7fb ffef 	bl	9948 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E>
    d96a:	9101      	str	r1, [sp, #4]
    d96c:	9000      	str	r0, [sp, #0]
    d96e:	e7ff      	b.n	d970 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x8e>
    d970:	9800      	ldr	r0, [sp, #0]
    d972:	900e      	str	r0, [sp, #56]	; 0x38
    d974:	9901      	ldr	r1, [sp, #4]
    d976:	910f      	str	r1, [sp, #60]	; 0x3c
    d978:	2200      	movs	r2, #0
    d97a:	920d      	str	r2, [sp, #52]	; 0x34
    d97c:	2201      	movs	r2, #1
    d97e:	920c      	str	r2, [sp, #48]	; 0x30
    d980:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d984:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    d988:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    d98c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    d98e:	6063      	str	r3, [r4, #4]
    d990:	6022      	str	r2, [r4, #0]
    d992:	f8c4 e00c 	str.w	lr, [r4, #12]
    d996:	f8c4 c008 	str.w	ip, [r4, #8]
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
    d99a:	e7ff      	b.n	d99c <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0xba>
        if let Some(t) = self.time {
    d99c:	e015      	b.n	d9ca <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0xe8>
            self.time = Some(self.hw.clock());
    d99e:	9808      	ldr	r0, [sp, #32]
    d9a0:	9012      	str	r0, [sp, #72]	; 0x48
    d9a2:	9909      	ldr	r1, [sp, #36]	; 0x24
    d9a4:	9113      	str	r1, [sp, #76]	; 0x4c
    d9a6:	2200      	movs	r2, #0
    d9a8:	9211      	str	r2, [sp, #68]	; 0x44
    d9aa:	2201      	movs	r2, #1
    d9ac:	9210      	str	r2, [sp, #64]	; 0x40
    d9ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d9b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d9b2:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    d9b6:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
    d9ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    d9bc:	6063      	str	r3, [r4, #4]
    d9be:	6022      	str	r2, [r4, #0]
    d9c0:	f8c4 e00c 	str.w	lr, [r4, #12]
    d9c4:	f8c4 c008 	str.w	ip, [r4, #8]
        if let Some(t) = self.time {
    d9c8:	e7ff      	b.n	d9ca <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0xe8>
    }
    d9ca:	b018      	add	sp, #96	; 0x60
    d9cc:	bd10      	pop	{r4, pc}

0000d9ce <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E>:
    fn setup(&mut self) {
    d9ce:	b580      	push	{r7, lr}
    d9d0:	b088      	sub	sp, #32
    d9d2:	9007      	str	r0, [sp, #28]
    d9d4:	f44f 7100 	mov.w	r1, #512	; 0x200
        self.pc = ENTRY;
    d9d8:	8241      	strh	r1, [r0, #18]
        self.hw.vram_setsize(DISPS);
    d9da:	f64d 6194 	movw	r1, #56980	; 0xde94
    d9de:	f2c0 0101 	movt	r1, #1
    d9e2:	680a      	ldr	r2, [r1, #0]
    d9e4:	6849      	ldr	r1, [r1, #4]
    d9e6:	9005      	str	r0, [sp, #20]
    d9e8:	9104      	str	r1, [sp, #16]
    d9ea:	4611      	mov	r1, r2
    d9ec:	9a04      	ldr	r2, [sp, #16]
    d9ee:	f7fb ff9b 	bl	9928 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc15bb8a8dbf2b592E>
    d9f2:	e7ff      	b.n	d9f4 <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E+0x26>
        self.mem[..CHARBUF.len()].copy_from_slice(&CHARBUF);
    d9f4:	9805      	ldr	r0, [sp, #20]
    d9f6:	f100 0147 	add.w	r1, r0, #71	; 0x47
    d9fa:	f64e 5098 	movw	r0, #60824	; 0xed98
    d9fe:	f2c0 0001 	movt	r0, #1
    da02:	2250      	movs	r2, #80	; 0x50
    da04:	9103      	str	r1, [sp, #12]
    da06:	4611      	mov	r1, r2
    da08:	f000 ff4e 	bl	e8a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    da0c:	9002      	str	r0, [sp, #8]
    da0e:	e7ff      	b.n	da10 <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E+0x42>
    da10:	9802      	ldr	r0, [sp, #8]
    da12:	9006      	str	r0, [sp, #24]
    da14:	9a06      	ldr	r2, [sp, #24]
    da16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    da1a:	9803      	ldr	r0, [sp, #12]
    da1c:	f001 fe0b 	bl	f636 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>
    da20:	9001      	str	r0, [sp, #4]
    da22:	9100      	str	r1, [sp, #0]
    da24:	e7ff      	b.n	da26 <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E+0x58>
    da26:	f64e 5298 	movw	r2, #60824	; 0xed98
    da2a:	f2c0 0201 	movt	r2, #1
    da2e:	2350      	movs	r3, #80	; 0x50
    da30:	9801      	ldr	r0, [sp, #4]
    da32:	9900      	ldr	r1, [sp, #0]
    da34:	f001 fd02 	bl	f43c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
    da38:	e7ff      	b.n	da3a <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E+0x6c>
    da3a:	f241 0047 	movw	r0, #4167	; 0x1047
    da3e:	2101      	movs	r1, #1
        self.running = true;
    da40:	9a05      	ldr	r2, [sp, #20]
    da42:	5411      	strb	r1, [r2, r0]
    }
    da44:	b008      	add	sp, #32
    da46:	bd80      	pop	{r7, pc}

0000da48 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E>:
    fn waitkey(&mut self) -> u8 {
    da48:	b580      	push	{r7, lr}
    da4a:	b08c      	sub	sp, #48	; 0x30
    da4c:	900a      	str	r0, [sp, #40]	; 0x28
        while self.running {
    da4e:	9005      	str	r0, [sp, #20]
    da50:	e7ff      	b.n	da52 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xa>
    da52:	f241 0047 	movw	r0, #4167	; 0x1047
    da56:	9905      	ldr	r1, [sp, #20]
    da58:	5c08      	ldrb	r0, [r1, r0]
    da5a:	07c0      	lsls	r0, r0, #31
    da5c:	2800      	cmp	r0, #0
    da5e:	d104      	bne.n	da6a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x22>
    da60:	e7ff      	b.n	da62 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x1a>
    da62:	2020      	movs	r0, #32
        return b' ';
    da64:	f88d 001b 	strb.w	r0, [sp, #27]
    da68:	e047      	b.n	dafa <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xb2>
            self.sched();
    da6a:	9805      	ldr	r0, [sp, #20]
    da6c:	f7ff ff39 	bl	d8e2 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E>
    da70:	e7ff      	b.n	da72 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x2a>
    da72:	2000      	movs	r0, #0
            for i in 0..0xf {
    da74:	f88d 001c 	strb.w	r0, [sp, #28]
    da78:	200f      	movs	r0, #15
    da7a:	f88d 001d 	strb.w	r0, [sp, #29]
    da7e:	f89d 001c 	ldrb.w	r0, [sp, #28]
    da82:	f89d 101d 	ldrb.w	r1, [sp, #29]
    da86:	f005 f9a2 	bl	12dce <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hc518c90d18182e65E>
    da8a:	9004      	str	r0, [sp, #16]
    da8c:	9103      	str	r1, [sp, #12]
    da8e:	e7ff      	b.n	da90 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x48>
    da90:	9804      	ldr	r0, [sp, #16]
    da92:	f88d 0020 	strb.w	r0, [sp, #32]
    da96:	9903      	ldr	r1, [sp, #12]
    da98:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
    da9c:	e7ff      	b.n	da9e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x56>
    da9e:	a808      	add	r0, sp, #32
    daa0:	f005 f924 	bl	12cec <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E>
    daa4:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
    daa8:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    daac:	e7ff      	b.n	daae <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x66>
    daae:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    dab2:	07c1      	lsls	r1, r0, #31
    dab4:	2900      	cmp	r1, #0
    dab6:	d001      	beq.n	dabc <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x74>
    dab8:	e7ff      	b.n	daba <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x72>
    daba:	e001      	b.n	dac0 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x78>
        while self.running {
    dabc:	e7c9      	b.n	da52 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xa>
            for i in 0..0xf {
    dabe:	defe      	udf	#254	; 0xfe
    dac0:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
    dac4:	4601      	mov	r1, r0
    dac6:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    daca:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    dace:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if self.hw.key(i) {
    dad2:	9a05      	ldr	r2, [sp, #20]
    dad4:	9002      	str	r0, [sp, #8]
    dad6:	4610      	mov	r0, r2
    dad8:	9b02      	ldr	r3, [sp, #8]
    dada:	9101      	str	r1, [sp, #4]
    dadc:	4619      	mov	r1, r3
    dade:	f7fb fd68 	bl	95b2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hb8a7325968dc9595E>
    dae2:	9000      	str	r0, [sp, #0]
    dae4:	e7ff      	b.n	dae6 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x9e>
    dae6:	9800      	ldr	r0, [sp, #0]
    dae8:	07c1      	lsls	r1, r0, #31
    daea:	2900      	cmp	r1, #0
    daec:	d101      	bne.n	daf2 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xaa>
    daee:	e7ff      	b.n	daf0 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xa8>
            for i in 0..0xf {
    daf0:	e7d5      	b.n	da9e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x56>
                    return i;
    daf2:	9801      	ldr	r0, [sp, #4]
    daf4:	f88d 001b 	strb.w	r0, [sp, #27]
    daf8:	e7ff      	b.n	dafa <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xb2>
    }
    dafa:	f89d 001b 	ldrb.w	r0, [sp, #27]
    dafe:	b00c      	add	sp, #48	; 0x30
    db00:	bd80      	pop	{r7, pc}

0000db02 <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h04afc1517f23f57eE>:
    fn shutdown(&mut self) {
    db02:	b081      	sub	sp, #4
    db04:	9000      	str	r0, [sp, #0]
    db06:	f241 0147 	movw	r1, #4167	; 0x1047
    db0a:	2200      	movs	r2, #0
        self.running = false;
    db0c:	5442      	strb	r2, [r0, r1]
    }
    db0e:	b001      	add	sp, #4
    db10:	4770      	bx	lr

0000db12 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE>:
    db12:	b580      	push	{r7, lr}
    db14:	b084      	sub	sp, #16
    db16:	4601      	mov	r1, r0
    db18:	f88d 000f 	strb.w	r0, [sp, #15]
    db1c:	9102      	str	r1, [sp, #8]
    db1e:	f004 ff92 	bl	12a46 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h0a450d9c4f54993fE>
    db22:	9001      	str	r0, [sp, #4]
    db24:	e7ff      	b.n	db26 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE+0x14>
    db26:	9801      	ldr	r0, [sp, #4]
    db28:	b004      	add	sp, #16
    db2a:	bd80      	pop	{r7, pc}

0000db2c <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E>:
    db2c:	b580      	push	{r7, lr}
    db2e:	b086      	sub	sp, #24
    db30:	9004      	str	r0, [sp, #16]
    db32:	9105      	str	r1, [sp, #20]
    db34:	9002      	str	r0, [sp, #8]
    db36:	f000 f810 	bl	db5a <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE>
    db3a:	9001      	str	r0, [sp, #4]
    db3c:	e7ff      	b.n	db3e <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E+0x12>
    db3e:	9801      	ldr	r0, [sp, #4]
    db40:	07c1      	lsls	r1, r0, #31
    db42:	2900      	cmp	r1, #0
    db44:	d103      	bne.n	db4e <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E+0x22>
    db46:	e7ff      	b.n	db48 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E+0x1c>
    db48:	2000      	movs	r0, #0
    db4a:	9003      	str	r0, [sp, #12]
    db4c:	e002      	b.n	db54 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E+0x28>
    db4e:	9802      	ldr	r0, [sp, #8]
    db50:	9003      	str	r0, [sp, #12]
    db52:	e7ff      	b.n	db54 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E+0x28>
    db54:	9803      	ldr	r0, [sp, #12]
    db56:	b006      	add	sp, #24
    db58:	bd80      	pop	{r7, pc}

0000db5a <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE>:
    db5a:	b580      	push	{r7, lr}
    db5c:	b08a      	sub	sp, #40	; 0x28
    db5e:	9008      	str	r0, [sp, #32]
    db60:	9109      	str	r1, [sp, #36]	; 0x24
    db62:	9103      	str	r1, [sp, #12]
    db64:	9002      	str	r0, [sp, #8]
    db66:	f000 f815 	bl	db94 <_ZN4core3any6TypeId2of17h8ccdaa41437c3cf9E>
    db6a:	9105      	str	r1, [sp, #20]
    db6c:	9004      	str	r0, [sp, #16]
    db6e:	e7ff      	b.n	db70 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE+0x16>
    db70:	9803      	ldr	r0, [sp, #12]
    db72:	68c1      	ldr	r1, [r0, #12]
    db74:	9802      	ldr	r0, [sp, #8]
    db76:	4788      	blx	r1
    db78:	9107      	str	r1, [sp, #28]
    db7a:	9006      	str	r0, [sp, #24]
    db7c:	e7ff      	b.n	db7e <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE+0x24>
    db7e:	a804      	add	r0, sp, #16
    db80:	a906      	add	r1, sp, #24
    db82:	f005 f92d 	bl	12de0 <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h2d7145d37f608201E>
    db86:	9001      	str	r0, [sp, #4]
    db88:	e7ff      	b.n	db8a <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE+0x30>
    db8a:	9801      	ldr	r0, [sp, #4]
    db8c:	f000 0001 	and.w	r0, r0, #1
    db90:	b00a      	add	sp, #40	; 0x28
    db92:	bd80      	pop	{r7, pc}

0000db94 <_ZN4core3any6TypeId2of17h8ccdaa41437c3cf9E>:
    db94:	b086      	sub	sp, #24
    db96:	f249 40d9 	movw	r0, #38105	; 0x94d9
    db9a:	f2c1 1010 	movt	r0, #4368	; 0x1110
    db9e:	9005      	str	r0, [sp, #20]
    dba0:	f249 7064 	movw	r0, #38756	; 0x9764
    dba4:	f2c7 00b0 	movt	r0, #28848	; 0x70b0
    dba8:	9004      	str	r0, [sp, #16]
    dbaa:	9804      	ldr	r0, [sp, #16]
    dbac:	9905      	ldr	r1, [sp, #20]
    dbae:	9001      	str	r0, [sp, #4]
    dbb0:	9100      	str	r1, [sp, #0]
    dbb2:	e7ff      	b.n	dbb4 <_ZN4core3any6TypeId2of17h8ccdaa41437c3cf9E+0x20>
    dbb4:	9801      	ldr	r0, [sp, #4]
    dbb6:	9002      	str	r0, [sp, #8]
    dbb8:	9900      	ldr	r1, [sp, #0]
    dbba:	9103      	str	r1, [sp, #12]
    dbbc:	9802      	ldr	r0, [sp, #8]
    dbbe:	9903      	ldr	r1, [sp, #12]
    dbc0:	b006      	add	sp, #24
    dbc2:	4770      	bx	lr

0000dbc4 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17ha534480b95c4fb6cE>:
    dbc4:	b580      	push	{r7, lr}
    dbc6:	b084      	sub	sp, #16
    dbc8:	9002      	str	r0, [sp, #8]
    dbca:	9103      	str	r1, [sp, #12]
    dbcc:	f7ff ffae 	bl	db2c <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E>
    dbd0:	9001      	str	r0, [sp, #4]
    dbd2:	e7ff      	b.n	dbd4 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17ha534480b95c4fb6cE+0x10>
    dbd4:	9801      	ldr	r0, [sp, #4]
    dbd6:	b004      	add	sp, #16
    dbd8:	bd80      	pop	{r7, pc}

0000dbda <_ZN4core4iter6traits8iterator8Iterator7flatten17h790b24ffb57b6bb2E>:
    dbda:	b580      	push	{r7, lr}
    dbdc:	b084      	sub	sp, #16
    dbde:	680a      	ldr	r2, [r1, #0]
    dbe0:	684b      	ldr	r3, [r1, #4]
    dbe2:	6889      	ldr	r1, [r1, #8]
    dbe4:	9103      	str	r1, [sp, #12]
    dbe6:	9302      	str	r3, [sp, #8]
    dbe8:	9201      	str	r2, [sp, #4]
    dbea:	a901      	add	r1, sp, #4
    dbec:	f000 f8d9 	bl	dda2 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h9a887926e27564b3E>
    dbf0:	e7ff      	b.n	dbf2 <_ZN4core4iter6traits8iterator8Iterator7flatten17h790b24ffb57b6bb2E+0x18>
    dbf2:	b004      	add	sp, #16
    dbf4:	bd80      	pop	{r7, pc}

0000dbf6 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h21a9e3dc4962ad94E>:
    dbf6:	b083      	sub	sp, #12
    dbf8:	9100      	str	r1, [sp, #0]
    dbfa:	9201      	str	r2, [sp, #4]
    dbfc:	9302      	str	r3, [sp, #8]
    dbfe:	6001      	str	r1, [r0, #0]
    dc00:	6042      	str	r2, [r0, #4]
    dc02:	6083      	str	r3, [r0, #8]
    dc04:	b003      	add	sp, #12
    dc06:	4770      	bx	lr

0000dc08 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h47809268ca43aa27E>:
    dc08:	b083      	sub	sp, #12
    dc0a:	9100      	str	r1, [sp, #0]
    dc0c:	9201      	str	r2, [sp, #4]
    dc0e:	9302      	str	r3, [sp, #8]
    dc10:	6001      	str	r1, [r0, #0]
    dc12:	6042      	str	r2, [r0, #4]
    dc14:	6083      	str	r3, [r0, #8]
    dc16:	b003      	add	sp, #12
    dc18:	4770      	bx	lr

0000dc1a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h150c3e461f16f651E>:
    dc1a:	680a      	ldr	r2, [r1, #0]
    dc1c:	684b      	ldr	r3, [r1, #4]
    dc1e:	6889      	ldr	r1, [r1, #8]
    dc20:	6081      	str	r1, [r0, #8]
    dc22:	6043      	str	r3, [r0, #4]
    dc24:	6002      	str	r2, [r0, #0]
    dc26:	4770      	bx	lr

0000dc28 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E>:
    dc28:	b580      	push	{r7, lr}
    dc2a:	b086      	sub	sp, #24
    dc2c:	9105      	str	r1, [sp, #20]
    dc2e:	9004      	str	r0, [sp, #16]
    dc30:	4608      	mov	r0, r1
    dc32:	9103      	str	r1, [sp, #12]
    dc34:	f000 fdd4 	bl	e7e0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    dc38:	9002      	str	r0, [sp, #8]
    dc3a:	9101      	str	r1, [sp, #4]
    dc3c:	e7ff      	b.n	dc3e <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E+0x16>
    dc3e:	9803      	ldr	r0, [sp, #12]
    dc40:	f100 0308 	add.w	r3, r0, #8
    dc44:	9804      	ldr	r0, [sp, #16]
    dc46:	9902      	ldr	r1, [sp, #8]
    dc48:	9a01      	ldr	r2, [sp, #4]
    dc4a:	f000 f944 	bl	ded6 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E>
    dc4e:	e7ff      	b.n	dc50 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E+0x28>
    dc50:	b006      	add	sp, #24
    dc52:	bd80      	pop	{r7, pc}

0000dc54 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hac566d17e493ac47E>:
    dc54:	b580      	push	{r7, lr}
    dc56:	b086      	sub	sp, #24
    dc58:	9105      	str	r1, [sp, #20]
    dc5a:	9004      	str	r0, [sp, #16]
    dc5c:	4608      	mov	r0, r1
    dc5e:	9103      	str	r1, [sp, #12]
    dc60:	f000 fdbe 	bl	e7e0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    dc64:	9002      	str	r0, [sp, #8]
    dc66:	9101      	str	r1, [sp, #4]
    dc68:	e7ff      	b.n	dc6a <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hac566d17e493ac47E+0x16>
    dc6a:	9803      	ldr	r0, [sp, #12]
    dc6c:	f100 0308 	add.w	r3, r0, #8
    dc70:	9804      	ldr	r0, [sp, #16]
    dc72:	9902      	ldr	r1, [sp, #8]
    dc74:	9a01      	ldr	r2, [sp, #4]
    dc76:	f000 f97b 	bl	df70 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE>
    dc7a:	e7ff      	b.n	dc7c <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hac566d17e493ac47E+0x28>
    dc7c:	b006      	add	sp, #24
    dc7e:	bd80      	pop	{r7, pc}

0000dc80 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5923d182d43571feE>:
    dc80:	b580      	push	{r7, lr}
    dc82:	b082      	sub	sp, #8
    dc84:	9101      	str	r1, [sp, #4]
    dc86:	f000 f803 	bl	dc90 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E>
    dc8a:	e7ff      	b.n	dc8c <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5923d182d43571feE+0xc>
    dc8c:	b002      	add	sp, #8
    dc8e:	bd80      	pop	{r7, pc}

0000dc90 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E>:
    dc90:	b580      	push	{r7, lr}
    dc92:	b0a0      	sub	sp, #128	; 0x80
    dc94:	911c      	str	r1, [sp, #112]	; 0x70
    dc96:	9103      	str	r1, [sp, #12]
    dc98:	9002      	str	r0, [sp, #8]
    dc9a:	e7ff      	b.n	dc9c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xc>
    dc9c:	9803      	ldr	r0, [sp, #12]
    dc9e:	68c1      	ldr	r1, [r0, #12]
    dca0:	2901      	cmp	r1, #1
    dca2:	d11e      	bne.n	dce2 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x52>
    dca4:	e7ff      	b.n	dca6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x16>
    dca6:	9803      	ldr	r0, [sp, #12]
    dca8:	f100 0110 	add.w	r1, r0, #16
    dcac:	911e      	str	r1, [sp, #120]	; 0x78
    dcae:	a804      	add	r0, sp, #16
    dcb0:	f7ff ffba 	bl	dc28 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E>
    dcb4:	e7ff      	b.n	dcb6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x26>
    dcb6:	9804      	ldr	r0, [sp, #16]
    dcb8:	2801      	cmp	r0, #1
    dcba:	d001      	beq.n	dcc0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x30>
    dcbc:	e7ff      	b.n	dcbe <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x2e>
    dcbe:	e00f      	b.n	dce0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x50>
    dcc0:	9804      	ldr	r0, [sp, #16]
    dcc2:	9905      	ldr	r1, [sp, #20]
    dcc4:	9a06      	ldr	r2, [sp, #24]
    dcc6:	9209      	str	r2, [sp, #36]	; 0x24
    dcc8:	9108      	str	r1, [sp, #32]
    dcca:	9007      	str	r0, [sp, #28]
    dccc:	9807      	ldr	r0, [sp, #28]
    dcce:	9908      	ldr	r1, [sp, #32]
    dcd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    dcd2:	9b02      	ldr	r3, [sp, #8]
    dcd4:	609a      	str	r2, [r3, #8]
    dcd6:	6059      	str	r1, [r3, #4]
    dcd8:	6018      	str	r0, [r3, #0]
    dcda:	e7ff      	b.n	dcdc <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x4c>
    dcdc:	b020      	add	sp, #128	; 0x80
    dcde:	bd80      	pop	{r7, pc}
    dce0:	e7ff      	b.n	dce2 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x52>
    dce2:	a80a      	add	r0, sp, #40	; 0x28
    dce4:	9903      	ldr	r1, [sp, #12]
    dce6:	f7ff ffb5 	bl	dc54 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hac566d17e493ac47E>
    dcea:	e7ff      	b.n	dcec <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x5c>
    dcec:	980a      	ldr	r0, [sp, #40]	; 0x28
    dcee:	2800      	cmp	r0, #0
    dcf0:	d012      	beq.n	dd18 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x88>
    dcf2:	e7ff      	b.n	dcf4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x64>
    dcf4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    dcf6:	990c      	ldr	r1, [sp, #48]	; 0x30
    dcf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    dcfa:	9211      	str	r2, [sp, #68]	; 0x44
    dcfc:	9110      	str	r1, [sp, #64]	; 0x40
    dcfe:	900f      	str	r0, [sp, #60]	; 0x3c
    dd00:	980f      	ldr	r0, [sp, #60]	; 0x3c
    dd02:	9910      	ldr	r1, [sp, #64]	; 0x40
    dd04:	9a11      	ldr	r2, [sp, #68]	; 0x44
    dd06:	921b      	str	r2, [sp, #108]	; 0x6c
    dd08:	911a      	str	r1, [sp, #104]	; 0x68
    dd0a:	9019      	str	r0, [sp, #100]	; 0x64
    dd0c:	a816      	add	r0, sp, #88	; 0x58
    dd0e:	a919      	add	r1, sp, #100	; 0x64
    dd10:	f7ff ff83 	bl	dc1a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h150c3e461f16f651E>
    dd14:	e028      	b.n	dd68 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd8>
    dd16:	defe      	udf	#254	; 0xfe
    dd18:	9803      	ldr	r0, [sp, #12]
    dd1a:	301c      	adds	r0, #28
    dd1c:	f000 f9b4 	bl	e088 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE>
    dd20:	9001      	str	r0, [sp, #4]
    dd22:	e7ff      	b.n	dd24 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x94>
    dd24:	9801      	ldr	r0, [sp, #4]
    dd26:	f000 f9e9 	bl	e0fc <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17habaf51e2b5499869E>
    dd2a:	900e      	str	r0, [sp, #56]	; 0x38
    dd2c:	e7ff      	b.n	dd2e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x9e>
    dd2e:	980e      	ldr	r0, [sp, #56]	; 0x38
    dd30:	fab0 f180 	clz	r1, r0
    dd34:	0949      	lsrs	r1, r1, #5
    dd36:	2800      	cmp	r0, #0
    dd38:	d101      	bne.n	dd3e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xae>
    dd3a:	e7ff      	b.n	dd3c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xac>
    dd3c:	e009      	b.n	dd52 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xc2>
    dd3e:	980e      	ldr	r0, [sp, #56]	; 0x38
    dd40:	901f      	str	r0, [sp, #124]	; 0x7c
    dd42:	9902      	ldr	r1, [sp, #8]
    dd44:	9000      	str	r0, [sp, #0]
    dd46:	4608      	mov	r0, r1
    dd48:	9900      	ldr	r1, [sp, #0]
    dd4a:	f7ff ff6d 	bl	dc28 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E>
    dd4e:	e00a      	b.n	dd66 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd6>
    dd50:	defe      	udf	#254	; 0xfe
    dd52:	f002 f9af 	bl	100b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>
    dd56:	e7ff      	b.n	dd58 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xc8>
    dd58:	9802      	ldr	r0, [sp, #8]
    dd5a:	f000 f9ca 	bl	e0f2 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc2b7f3c069a746efE>
    dd5e:	e7ff      	b.n	dd60 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd0>
    dd60:	e7ff      	b.n	dd62 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd2>
    dd62:	e7ff      	b.n	dd64 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd4>
    dd64:	e7ba      	b.n	dcdc <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x4c>
    dd66:	e7fc      	b.n	dd62 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd2>
    dd68:	9816      	ldr	r0, [sp, #88]	; 0x58
    dd6a:	9917      	ldr	r1, [sp, #92]	; 0x5c
    dd6c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    dd6e:	9215      	str	r2, [sp, #84]	; 0x54
    dd70:	9114      	str	r1, [sp, #80]	; 0x50
    dd72:	9013      	str	r0, [sp, #76]	; 0x4c
    dd74:	2001      	movs	r0, #1
    dd76:	9012      	str	r0, [sp, #72]	; 0x48
    dd78:	e7ff      	b.n	dd7a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xea>
    dd7a:	9812      	ldr	r0, [sp, #72]	; 0x48
    dd7c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    dd7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    dd80:	9b15      	ldr	r3, [sp, #84]	; 0x54
    dd82:	f8dd c00c 	ldr.w	ip, [sp, #12]
    dd86:	f8cc 3018 	str.w	r3, [ip, #24]
    dd8a:	f8cc 2014 	str.w	r2, [ip, #20]
    dd8e:	f8cc 1010 	str.w	r1, [ip, #16]
    dd92:	f8cc 000c 	str.w	r0, [ip, #12]
    dd96:	980a      	ldr	r0, [sp, #40]	; 0x28
    dd98:	2801      	cmp	r0, #1
    dd9a:	d101      	bne.n	dda0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x110>
    dd9c:	e7ff      	b.n	dd9e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x10e>
    dd9e:	e77d      	b.n	dc9c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xc>
    dda0:	e7fd      	b.n	dd9e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x10e>

0000dda2 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h9a887926e27564b3E>:
    dda2:	b5b0      	push	{r4, r5, r7, lr}
    dda4:	b090      	sub	sp, #64	; 0x40
    dda6:	680a      	ldr	r2, [r1, #0]
    dda8:	684b      	ldr	r3, [r1, #4]
    ddaa:	6889      	ldr	r1, [r1, #8]
    ddac:	910f      	str	r1, [sp, #60]	; 0x3c
    ddae:	930e      	str	r3, [sp, #56]	; 0x38
    ddb0:	920d      	str	r2, [sp, #52]	; 0x34
    ddb2:	a902      	add	r1, sp, #8
    ddb4:	aa0d      	add	r2, sp, #52	; 0x34
    ddb6:	9001      	str	r0, [sp, #4]
    ddb8:	4608      	mov	r0, r1
    ddba:	4611      	mov	r1, r2
    ddbc:	f000 f80d 	bl	ddda <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h67d5d76d62fd1974E>
    ddc0:	e7ff      	b.n	ddc2 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h9a887926e27564b3E+0x20>
    ddc2:	a802      	add	r0, sp, #8
    ddc4:	9901      	ldr	r1, [sp, #4]
    ddc6:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
    ddca:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
    ddce:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
    ddd2:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
    ddd6:	b010      	add	sp, #64	; 0x40
    ddd8:	bdb0      	pop	{r4, r5, r7, pc}

0000ddda <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h67d5d76d62fd1974E>:
    ddda:	b08b      	sub	sp, #44	; 0x2c
    dddc:	680a      	ldr	r2, [r1, #0]
    ddde:	684b      	ldr	r3, [r1, #4]
    dde0:	6889      	ldr	r1, [r1, #8]
    dde2:	9102      	str	r1, [sp, #8]
    dde4:	9301      	str	r3, [sp, #4]
    dde6:	9200      	str	r2, [sp, #0]
    dde8:	2100      	movs	r1, #0
    ddea:	9103      	str	r1, [sp, #12]
    ddec:	9107      	str	r1, [sp, #28]
    ddee:	9900      	ldr	r1, [sp, #0]
    ddf0:	9a01      	ldr	r2, [sp, #4]
    ddf2:	9b02      	ldr	r3, [sp, #8]
    ddf4:	6083      	str	r3, [r0, #8]
    ddf6:	6042      	str	r2, [r0, #4]
    ddf8:	6001      	str	r1, [r0, #0]
    ddfa:	9903      	ldr	r1, [sp, #12]
    ddfc:	9a04      	ldr	r2, [sp, #16]
    ddfe:	9b05      	ldr	r3, [sp, #20]
    de00:	f8dd c018 	ldr.w	ip, [sp, #24]
    de04:	f8c0 c018 	str.w	ip, [r0, #24]
    de08:	6143      	str	r3, [r0, #20]
    de0a:	6102      	str	r2, [r0, #16]
    de0c:	60c1      	str	r1, [r0, #12]
    de0e:	9907      	ldr	r1, [sp, #28]
    de10:	9a08      	ldr	r2, [sp, #32]
    de12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    de14:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    de18:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
    de1c:	6243      	str	r3, [r0, #36]	; 0x24
    de1e:	6202      	str	r2, [r0, #32]
    de20:	61c1      	str	r1, [r0, #28]
    de22:	b00b      	add	sp, #44	; 0x2c
    de24:	4770      	bx	lr

0000de26 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0a1a9897cf1e3266E>:
    de26:	b5b0      	push	{r4, r5, r7, lr}
    de28:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
    de2c:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
    de30:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    de34:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    de38:	bdb0      	pop	{r4, r5, r7, pc}

0000de3a <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>:
    de3a:	b510      	push	{r4, lr}
    de3c:	b088      	sub	sp, #32
    de3e:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    de42:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
    de46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    de48:	9102      	str	r1, [sp, #8]
    de4a:	9203      	str	r2, [sp, #12]
    de4c:	9304      	str	r3, [sp, #16]
    de4e:	9405      	str	r4, [sp, #20]
    de50:	f8cd e018 	str.w	lr, [sp, #24]
    de54:	f8cd c01c 	str.w	ip, [sp, #28]
    de58:	f8cd e000 	str.w	lr, [sp]
    de5c:	f8cd c004 	str.w	ip, [sp, #4]
    de60:	6001      	str	r1, [r0, #0]
    de62:	6042      	str	r2, [r0, #4]
    de64:	9900      	ldr	r1, [sp, #0]
    de66:	9a01      	ldr	r2, [sp, #4]
    de68:	6081      	str	r1, [r0, #8]
    de6a:	60c2      	str	r2, [r0, #12]
    de6c:	6103      	str	r3, [r0, #16]
    de6e:	6144      	str	r4, [r0, #20]
    de70:	b008      	add	sp, #32
    de72:	bd10      	pop	{r4, pc}

0000de74 <_ZN4core3fmt9Arguments6new_v117h7622a2ed78995b61E>:
    de74:	b580      	push	{r7, lr}
    de76:	b086      	sub	sp, #24
    de78:	f8dd c020 	ldr.w	ip, [sp, #32]
    de7c:	9102      	str	r1, [sp, #8]
    de7e:	9203      	str	r2, [sp, #12]
    de80:	9304      	str	r3, [sp, #16]
    de82:	f8cd c014 	str.w	ip, [sp, #20]
    de86:	f04f 0e00 	mov.w	lr, #0
    de8a:	f8cd e004 	str.w	lr, [sp, #4]
    de8e:	f8cd e000 	str.w	lr, [sp]
    de92:	f8cd e000 	str.w	lr, [sp]
    de96:	6001      	str	r1, [r0, #0]
    de98:	6042      	str	r2, [r0, #4]
    de9a:	9900      	ldr	r1, [sp, #0]
    de9c:	9a01      	ldr	r2, [sp, #4]
    de9e:	6081      	str	r1, [r0, #8]
    dea0:	60c2      	str	r2, [r0, #12]
    dea2:	6103      	str	r3, [r0, #16]
    dea4:	f8c0 c014 	str.w	ip, [r0, #20]
    dea8:	b006      	add	sp, #24
    deaa:	bd80      	pop	{r7, pc}

0000deac <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hd29a6855bf5041fdE>:
    deac:	b580      	push	{r7, lr}
    deae:	b088      	sub	sp, #32
    deb0:	9004      	str	r0, [sp, #16]
    deb2:	9105      	str	r1, [sp, #20]
    deb4:	9206      	str	r2, [sp, #24]
    deb6:	9307      	str	r3, [sp, #28]
    deb8:	9003      	str	r0, [sp, #12]
    deba:	4610      	mov	r0, r2
    debc:	9102      	str	r1, [sp, #8]
    debe:	4619      	mov	r1, r3
    dec0:	9a03      	ldr	r2, [sp, #12]
    dec2:	9b02      	ldr	r3, [sp, #8]
    dec4:	f001 f9f9 	bl	f2ba <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    dec8:	9001      	str	r0, [sp, #4]
    deca:	9100      	str	r1, [sp, #0]
    decc:	e7ff      	b.n	dece <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hd29a6855bf5041fdE+0x22>
    dece:	9801      	ldr	r0, [sp, #4]
    ded0:	9900      	ldr	r1, [sp, #0]
    ded2:	b008      	add	sp, #32
    ded4:	bd80      	pop	{r7, pc}

0000ded6 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E>:
    ded6:	b580      	push	{r7, lr}
    ded8:	b08a      	sub	sp, #40	; 0x28
    deda:	9104      	str	r1, [sp, #16]
    dedc:	9205      	str	r2, [sp, #20]
    dede:	9308      	str	r3, [sp, #32]
    dee0:	2100      	movs	r1, #0
    dee2:	f88d 101e 	strb.w	r1, [sp, #30]
    dee6:	f88d 101f 	strb.w	r1, [sp, #31]
    deea:	2101      	movs	r1, #1
    deec:	f88d 101f 	strb.w	r1, [sp, #31]
    def0:	f88d 101e 	strb.w	r1, [sp, #30]
    def4:	9904      	ldr	r1, [sp, #16]
    def6:	2900      	cmp	r1, #0
    def8:	9303      	str	r3, [sp, #12]
    defa:	9002      	str	r0, [sp, #8]
    defc:	d001      	beq.n	df02 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x2c>
    defe:	e7ff      	b.n	df00 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x2a>
    df00:	e004      	b.n	df0c <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x36>
    df02:	2000      	movs	r0, #0
    df04:	9902      	ldr	r1, [sp, #8]
    df06:	6008      	str	r0, [r1, #0]
    df08:	e01f      	b.n	df4a <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x74>
    df0a:	defe      	udf	#254	; 0xfe
    df0c:	2000      	movs	r0, #0
    df0e:	f88d 001f 	strb.w	r0, [sp, #31]
    df12:	9905      	ldr	r1, [sp, #20]
    df14:	9109      	str	r1, [sp, #36]	; 0x24
    df16:	f88d 001e 	strb.w	r0, [sp, #30]
    df1a:	9106      	str	r1, [sp, #24]
    df1c:	9906      	ldr	r1, [sp, #24]
    df1e:	9803      	ldr	r0, [sp, #12]
    df20:	f7fb fd9c 	bl	9a5c <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17he627156f6f8a4ed5E>
    df24:	9001      	str	r0, [sp, #4]
    df26:	9100      	str	r1, [sp, #0]
    df28:	e7ff      	b.n	df2a <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x54>
    df2a:	9801      	ldr	r0, [sp, #4]
    df2c:	9902      	ldr	r1, [sp, #8]
    df2e:	6048      	str	r0, [r1, #4]
    df30:	9a00      	ldr	r2, [sp, #0]
    df32:	608a      	str	r2, [r1, #8]
    df34:	2301      	movs	r3, #1
    df36:	600b      	str	r3, [r1, #0]
    df38:	e007      	b.n	df4a <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x74>
    df3a:	9804      	ldr	r0, [sp, #16]
    df3c:	2801      	cmp	r0, #1
    df3e:	d00c      	beq.n	df5a <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x84>
    df40:	e015      	b.n	df6e <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x98>
    df42:	2000      	movs	r0, #0
    df44:	f88d 001e 	strb.w	r0, [sp, #30]
    df48:	e7f7      	b.n	df3a <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x64>
    df4a:	f89d 001e 	ldrb.w	r0, [sp, #30]
    df4e:	07c0      	lsls	r0, r0, #31
    df50:	2800      	cmp	r0, #0
    df52:	d1f6      	bne.n	df42 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x6c>
    df54:	e7f1      	b.n	df3a <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x64>
    df56:	b00a      	add	sp, #40	; 0x28
    df58:	bd80      	pop	{r7, pc}
    df5a:	f89d 001f 	ldrb.w	r0, [sp, #31]
    df5e:	07c0      	lsls	r0, r0, #31
    df60:	2800      	cmp	r0, #0
    df62:	d0f8      	beq.n	df56 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x80>
    df64:	e7ff      	b.n	df66 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x90>
    df66:	2000      	movs	r0, #0
    df68:	f88d 001f 	strb.w	r0, [sp, #31]
    df6c:	e7f3      	b.n	df56 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x80>
    df6e:	e7f2      	b.n	df56 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x80>

0000df70 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE>:
    df70:	b580      	push	{r7, lr}
    df72:	b08c      	sub	sp, #48	; 0x30
    df74:	9103      	str	r1, [sp, #12]
    df76:	9204      	str	r2, [sp, #16]
    df78:	930a      	str	r3, [sp, #40]	; 0x28
    df7a:	2100      	movs	r1, #0
    df7c:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    df80:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    df84:	2101      	movs	r1, #1
    df86:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    df8a:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    df8e:	9903      	ldr	r1, [sp, #12]
    df90:	2900      	cmp	r1, #0
    df92:	9302      	str	r3, [sp, #8]
    df94:	9001      	str	r0, [sp, #4]
    df96:	d001      	beq.n	df9c <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x2c>
    df98:	e7ff      	b.n	df9a <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x2a>
    df9a:	e004      	b.n	dfa6 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x36>
    df9c:	2000      	movs	r0, #0
    df9e:	9901      	ldr	r1, [sp, #4]
    dfa0:	6008      	str	r0, [r1, #0]
    dfa2:	e020      	b.n	dfe6 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x76>
    dfa4:	defe      	udf	#254	; 0xfe
    dfa6:	2000      	movs	r0, #0
    dfa8:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    dfac:	9904      	ldr	r1, [sp, #16]
    dfae:	910b      	str	r1, [sp, #44]	; 0x2c
    dfb0:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    dfb4:	9108      	str	r1, [sp, #32]
    dfb6:	9a08      	ldr	r2, [sp, #32]
    dfb8:	a805      	add	r0, sp, #20
    dfba:	9902      	ldr	r1, [sp, #8]
    dfbc:	f7fb fd44 	bl	9a48 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h79fbfe346516e383E>
    dfc0:	e7ff      	b.n	dfc2 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x52>
    dfc2:	9805      	ldr	r0, [sp, #20]
    dfc4:	9906      	ldr	r1, [sp, #24]
    dfc6:	9a07      	ldr	r2, [sp, #28]
    dfc8:	9b01      	ldr	r3, [sp, #4]
    dfca:	60da      	str	r2, [r3, #12]
    dfcc:	6099      	str	r1, [r3, #8]
    dfce:	6058      	str	r0, [r3, #4]
    dfd0:	2001      	movs	r0, #1
    dfd2:	6018      	str	r0, [r3, #0]
    dfd4:	e007      	b.n	dfe6 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x76>
    dfd6:	9803      	ldr	r0, [sp, #12]
    dfd8:	2801      	cmp	r0, #1
    dfda:	d00c      	beq.n	dff6 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x86>
    dfdc:	e015      	b.n	e00a <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x9a>
    dfde:	2000      	movs	r0, #0
    dfe0:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    dfe4:	e7f7      	b.n	dfd6 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x66>
    dfe6:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    dfea:	07c0      	lsls	r0, r0, #31
    dfec:	2800      	cmp	r0, #0
    dfee:	d1f6      	bne.n	dfde <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x6e>
    dff0:	e7f1      	b.n	dfd6 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x66>
    dff2:	b00c      	add	sp, #48	; 0x30
    dff4:	bd80      	pop	{r7, pc}
    dff6:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    dffa:	07c0      	lsls	r0, r0, #31
    dffc:	2800      	cmp	r0, #0
    dffe:	d0f8      	beq.n	dff2 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x82>
    e000:	e7ff      	b.n	e002 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x92>
    e002:	2000      	movs	r0, #0
    e004:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    e008:	e7f3      	b.n	dff2 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x82>
    e00a:	e7f2      	b.n	dff2 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x82>

0000e00c <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E>:
    e00c:	b085      	sub	sp, #20
    e00e:	9000      	str	r0, [sp, #0]
    e010:	2000      	movs	r0, #0
    e012:	f88d 000b 	strb.w	r0, [sp, #11]
    e016:	f88d 000a 	strb.w	r0, [sp, #10]
    e01a:	2001      	movs	r0, #1
    e01c:	f88d 000b 	strb.w	r0, [sp, #11]
    e020:	f88d 000a 	strb.w	r0, [sp, #10]
    e024:	9800      	ldr	r0, [sp, #0]
    e026:	2800      	cmp	r0, #0
    e028:	4601      	mov	r1, r0
    e02a:	bf18      	it	ne
    e02c:	2101      	movne	r1, #1
    e02e:	2800      	cmp	r0, #0
    e030:	d001      	beq.n	e036 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x2a>
    e032:	e7ff      	b.n	e034 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x28>
    e034:	e005      	b.n	e042 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x36>
    e036:	2000      	movs	r0, #0
    e038:	f88d 000a 	strb.w	r0, [sp, #10]
    e03c:	9001      	str	r0, [sp, #4]
    e03e:	e007      	b.n	e050 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x44>
    e040:	defe      	udf	#254	; 0xfe
    e042:	2000      	movs	r0, #0
    e044:	f88d 000b 	strb.w	r0, [sp, #11]
    e048:	9800      	ldr	r0, [sp, #0]
    e04a:	9004      	str	r0, [sp, #16]
    e04c:	9001      	str	r0, [sp, #4]
    e04e:	e7ff      	b.n	e050 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x44>
    e050:	f89d 000a 	ldrb.w	r0, [sp, #10]
    e054:	07c0      	lsls	r0, r0, #31
    e056:	2800      	cmp	r0, #0
    e058:	d104      	bne.n	e064 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x58>
    e05a:	e7ff      	b.n	e05c <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x50>
    e05c:	9800      	ldr	r0, [sp, #0]
    e05e:	2800      	cmp	r0, #0
    e060:	d107      	bne.n	e072 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x66>
    e062:	e010      	b.n	e086 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x7a>
    e064:	2000      	movs	r0, #0
    e066:	f88d 000a 	strb.w	r0, [sp, #10]
    e06a:	e7f7      	b.n	e05c <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x50>
    e06c:	9801      	ldr	r0, [sp, #4]
    e06e:	b005      	add	sp, #20
    e070:	4770      	bx	lr
    e072:	f89d 000b 	ldrb.w	r0, [sp, #11]
    e076:	07c0      	lsls	r0, r0, #31
    e078:	2800      	cmp	r0, #0
    e07a:	d0f7      	beq.n	e06c <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x60>
    e07c:	e7ff      	b.n	e07e <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x72>
    e07e:	2000      	movs	r0, #0
    e080:	f88d 000b 	strb.w	r0, [sp, #11]
    e084:	e7f2      	b.n	e06c <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x60>
    e086:	e7f1      	b.n	e06c <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x60>

0000e088 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE>:
    e088:	b084      	sub	sp, #16
    e08a:	9002      	str	r0, [sp, #8]
    e08c:	6801      	ldr	r1, [r0, #0]
    e08e:	2900      	cmp	r1, #0
    e090:	9000      	str	r0, [sp, #0]
    e092:	d001      	beq.n	e098 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE+0x10>
    e094:	e7ff      	b.n	e096 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE+0xe>
    e096:	e003      	b.n	e0a0 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE+0x18>
    e098:	2000      	movs	r0, #0
    e09a:	9001      	str	r0, [sp, #4]
    e09c:	e005      	b.n	e0aa <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE+0x22>
    e09e:	defe      	udf	#254	; 0xfe
    e0a0:	9800      	ldr	r0, [sp, #0]
    e0a2:	1d01      	adds	r1, r0, #4
    e0a4:	9103      	str	r1, [sp, #12]
    e0a6:	9101      	str	r1, [sp, #4]
    e0a8:	e7ff      	b.n	e0aa <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE+0x22>
    e0aa:	9801      	ldr	r0, [sp, #4]
    e0ac:	b004      	add	sp, #16
    e0ae:	4770      	bx	lr

0000e0b0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E>:
    e0b0:	b084      	sub	sp, #16
    e0b2:	9002      	str	r0, [sp, #8]
    e0b4:	9802      	ldr	r0, [sp, #8]
    e0b6:	2800      	cmp	r0, #0
    e0b8:	4602      	mov	r2, r0
    e0ba:	bf18      	it	ne
    e0bc:	2201      	movne	r2, #1
    e0be:	2800      	cmp	r0, #0
    e0c0:	9101      	str	r1, [sp, #4]
    e0c2:	d001      	beq.n	e0c8 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x18>
    e0c4:	e7ff      	b.n	e0c6 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x16>
    e0c6:	e009      	b.n	e0dc <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x2c>
    e0c8:	f64e 40dc 	movw	r0, #60636	; 0xecdc
    e0cc:	f2c0 0001 	movt	r0, #1
    e0d0:	212b      	movs	r1, #43	; 0x2b
    e0d2:	9a01      	ldr	r2, [sp, #4]
    e0d4:	f008 fc8e 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e0d8:	defe      	udf	#254	; 0xfe
    e0da:	defe      	udf	#254	; 0xfe
    e0dc:	9802      	ldr	r0, [sp, #8]
    e0de:	9003      	str	r0, [sp, #12]
    e0e0:	9902      	ldr	r1, [sp, #8]
    e0e2:	2900      	cmp	r1, #0
    e0e4:	9000      	str	r0, [sp, #0]
    e0e6:	d003      	beq.n	e0f0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x40>
    e0e8:	e7ff      	b.n	e0ea <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x3a>
    e0ea:	9800      	ldr	r0, [sp, #0]
    e0ec:	b004      	add	sp, #16
    e0ee:	4770      	bx	lr
    e0f0:	e7fb      	b.n	e0ea <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x3a>

0000e0f2 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc2b7f3c069a746efE>:
    e0f2:	b081      	sub	sp, #4
    e0f4:	2100      	movs	r1, #0
    e0f6:	6001      	str	r1, [r0, #0]
    e0f8:	b001      	add	sp, #4
    e0fa:	4770      	bx	lr

0000e0fc <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17habaf51e2b5499869E>:
    e0fc:	b580      	push	{r7, lr}
    e0fe:	b082      	sub	sp, #8
    e100:	9001      	str	r0, [sp, #4]
    e102:	f7ff ff83 	bl	e00c <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E>
    e106:	9000      	str	r0, [sp, #0]
    e108:	e7ff      	b.n	e10a <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17habaf51e2b5499869E+0xe>
    e10a:	9800      	ldr	r0, [sp, #0]
    e10c:	b002      	add	sp, #8
    e10e:	bd80      	pop	{r7, pc}

0000e110 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE>:
    e110:	b580      	push	{r7, lr}
    e112:	b084      	sub	sp, #16
    e114:	9002      	str	r0, [sp, #8]
    e116:	9103      	str	r1, [sp, #12]
    e118:	6800      	ldr	r0, [r0, #0]
    e11a:	f000 f88c 	bl	e236 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>
    e11e:	9001      	str	r0, [sp, #4]
    e120:	e7ff      	b.n	e122 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE+0x12>
    e122:	9801      	ldr	r0, [sp, #4]
    e124:	f000 0001 	and.w	r0, r0, #1
    e128:	b004      	add	sp, #16
    e12a:	bd80      	pop	{r7, pc}

0000e12c <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>:
    e12c:	b580      	push	{r7, lr}
    e12e:	b084      	sub	sp, #16
    e130:	9002      	str	r0, [sp, #8]
    e132:	9103      	str	r1, [sp, #12]
    e134:	f000 f827 	bl	e186 <_ZN4core3cmp6max_by17h3c9686db40e0f078E>
    e138:	9001      	str	r0, [sp, #4]
    e13a:	e7ff      	b.n	e13c <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE+0x10>
    e13c:	9801      	ldr	r0, [sp, #4]
    e13e:	b004      	add	sp, #16
    e140:	bd80      	pop	{r7, pc}

0000e142 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>:
    e142:	b085      	sub	sp, #20
    e144:	9003      	str	r0, [sp, #12]
    e146:	9104      	str	r1, [sp, #16]
    e148:	6802      	ldr	r2, [r0, #0]
    e14a:	680b      	ldr	r3, [r1, #0]
    e14c:	429a      	cmp	r2, r3
    e14e:	9101      	str	r1, [sp, #4]
    e150:	9000      	str	r0, [sp, #0]
    e152:	db07      	blt.n	e164 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x22>
    e154:	e7ff      	b.n	e156 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x14>
    e156:	9800      	ldr	r0, [sp, #0]
    e158:	6801      	ldr	r1, [r0, #0]
    e15a:	9a01      	ldr	r2, [sp, #4]
    e15c:	6813      	ldr	r3, [r2, #0]
    e15e:	4299      	cmp	r1, r3
    e160:	d008      	beq.n	e174 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x32>
    e162:	e003      	b.n	e16c <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x2a>
    e164:	20ff      	movs	r0, #255	; 0xff
    e166:	f88d 000b 	strb.w	r0, [sp, #11]
    e16a:	e008      	b.n	e17e <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
    e16c:	2001      	movs	r0, #1
    e16e:	f88d 000b 	strb.w	r0, [sp, #11]
    e172:	e003      	b.n	e17c <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
    e174:	2000      	movs	r0, #0
    e176:	f88d 000b 	strb.w	r0, [sp, #11]
    e17a:	e7ff      	b.n	e17c <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
    e17c:	e7ff      	b.n	e17e <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
    e17e:	f89d 000b 	ldrb.w	r0, [sp, #11]
    e182:	b005      	add	sp, #20
    e184:	4770      	bx	lr

0000e186 <_ZN4core3cmp6max_by17h3c9686db40e0f078E>:
    e186:	b580      	push	{r7, lr}
    e188:	b088      	sub	sp, #32
    e18a:	9000      	str	r0, [sp, #0]
    e18c:	9101      	str	r1, [sp, #4]
    e18e:	2000      	movs	r0, #0
    e190:	f88d 001b 	strb.w	r0, [sp, #27]
    e194:	f88d 001a 	strb.w	r0, [sp, #26]
    e198:	2001      	movs	r0, #1
    e19a:	f88d 001b 	strb.w	r0, [sp, #27]
    e19e:	f88d 001a 	strb.w	r0, [sp, #26]
    e1a2:	4668      	mov	r0, sp
    e1a4:	9004      	str	r0, [sp, #16]
    e1a6:	a801      	add	r0, sp, #4
    e1a8:	9005      	str	r0, [sp, #20]
    e1aa:	9804      	ldr	r0, [sp, #16]
    e1ac:	9905      	ldr	r1, [sp, #20]
    e1ae:	f000 f895 	bl	e2dc <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>
    e1b2:	f88d 000f 	strb.w	r0, [sp, #15]
    e1b6:	e7ff      	b.n	e1b8 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x32>
    e1b8:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    e1bc:	1c41      	adds	r1, r0, #1
    e1be:	2902      	cmp	r1, #2
    e1c0:	d307      	bcc.n	e1d2 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x4c>
    e1c2:	e7ff      	b.n	e1c4 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x3e>
    e1c4:	2000      	movs	r0, #0
    e1c6:	f88d 001b 	strb.w	r0, [sp, #27]
    e1ca:	9800      	ldr	r0, [sp, #0]
    e1cc:	9002      	str	r0, [sp, #8]
    e1ce:	e006      	b.n	e1de <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
    e1d0:	defe      	udf	#254	; 0xfe
    e1d2:	2000      	movs	r0, #0
    e1d4:	f88d 001a 	strb.w	r0, [sp, #26]
    e1d8:	9801      	ldr	r0, [sp, #4]
    e1da:	9002      	str	r0, [sp, #8]
    e1dc:	e7ff      	b.n	e1de <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
    e1de:	f89d 001a 	ldrb.w	r0, [sp, #26]
    e1e2:	07c0      	lsls	r0, r0, #31
    e1e4:	2800      	cmp	r0, #0
    e1e6:	d109      	bne.n	e1fc <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x76>
    e1e8:	e7ff      	b.n	e1ea <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
    e1ea:	f89d 001b 	ldrb.w	r0, [sp, #27]
    e1ee:	07c0      	lsls	r0, r0, #31
    e1f0:	2800      	cmp	r0, #0
    e1f2:	d107      	bne.n	e204 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x7e>
    e1f4:	e7ff      	b.n	e1f6 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>
    e1f6:	9802      	ldr	r0, [sp, #8]
    e1f8:	b008      	add	sp, #32
    e1fa:	bd80      	pop	{r7, pc}
    e1fc:	2000      	movs	r0, #0
    e1fe:	f88d 001a 	strb.w	r0, [sp, #26]
    e202:	e7f2      	b.n	e1ea <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
    e204:	2000      	movs	r0, #0
    e206:	f88d 001b 	strb.w	r0, [sp, #27]
    e20a:	e7f4      	b.n	e1f6 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>

0000e20c <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>:
    e20c:	b089      	sub	sp, #36	; 0x24
    e20e:	9005      	str	r0, [sp, #20]
    e210:	9106      	str	r1, [sp, #24]
    e212:	9107      	str	r1, [sp, #28]
    e214:	9907      	ldr	r1, [sp, #28]
    e216:	9002      	str	r0, [sp, #8]
    e218:	9101      	str	r1, [sp, #4]
    e21a:	e7ff      	b.n	e21c <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x10>
    e21c:	9802      	ldr	r0, [sp, #8]
    e21e:	9008      	str	r0, [sp, #32]
    e220:	9908      	ldr	r1, [sp, #32]
    e222:	9100      	str	r1, [sp, #0]
    e224:	e7ff      	b.n	e226 <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x1a>
    e226:	9800      	ldr	r0, [sp, #0]
    e228:	9003      	str	r0, [sp, #12]
    e22a:	9901      	ldr	r1, [sp, #4]
    e22c:	9104      	str	r1, [sp, #16]
    e22e:	9803      	ldr	r0, [sp, #12]
    e230:	9904      	ldr	r1, [sp, #16]
    e232:	b009      	add	sp, #36	; 0x24
    e234:	4770      	bx	lr

0000e236 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>:
    e236:	b580      	push	{r7, lr}
    e238:	b088      	sub	sp, #32
    e23a:	9006      	str	r0, [sp, #24]
    e23c:	9107      	str	r1, [sp, #28]
    e23e:	9004      	str	r0, [sp, #16]
    e240:	4608      	mov	r0, r1
    e242:	9103      	str	r1, [sp, #12]
    e244:	f009 fa77 	bl	17736 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
    e248:	9002      	str	r0, [sp, #8]
    e24a:	e7ff      	b.n	e24c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x16>
    e24c:	9802      	ldr	r0, [sp, #8]
    e24e:	07c1      	lsls	r1, r0, #31
    e250:	2900      	cmp	r1, #0
    e252:	d105      	bne.n	e260 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x2a>
    e254:	e7ff      	b.n	e256 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x20>
    e256:	9803      	ldr	r0, [sp, #12]
    e258:	f009 fa71 	bl	1773e <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
    e25c:	9001      	str	r0, [sp, #4]
    e25e:	e007      	b.n	e270 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x3a>
    e260:	9804      	ldr	r0, [sp, #16]
    e262:	9903      	ldr	r1, [sp, #12]
    e264:	f00a f891 	bl	1838a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
    e268:	f88d 0017 	strb.w	r0, [sp, #23]
    e26c:	e7ff      	b.n	e26e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x38>
    e26e:	e015      	b.n	e29c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
    e270:	9801      	ldr	r0, [sp, #4]
    e272:	07c1      	lsls	r1, r0, #31
    e274:	2900      	cmp	r1, #0
    e276:	d107      	bne.n	e288 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x52>
    e278:	e7ff      	b.n	e27a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x44>
    e27a:	9804      	ldr	r0, [sp, #16]
    e27c:	9903      	ldr	r1, [sp, #12]
    e27e:	f00a f9ff 	bl	18680 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
    e282:	f88d 0017 	strb.w	r0, [sp, #23]
    e286:	e007      	b.n	e298 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x62>
    e288:	9804      	ldr	r0, [sp, #16]
    e28a:	9903      	ldr	r1, [sp, #12]
    e28c:	f00a f8e8 	bl	18460 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
    e290:	f88d 0017 	strb.w	r0, [sp, #23]
    e294:	e7ff      	b.n	e296 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x60>
    e296:	e000      	b.n	e29a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
    e298:	e7ff      	b.n	e29a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
    e29a:	e7ff      	b.n	e29c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
    e29c:	f89d 0017 	ldrb.w	r0, [sp, #23]
    e2a0:	b008      	add	sp, #32
    e2a2:	bd80      	pop	{r7, pc}

0000e2a4 <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>:
    e2a4:	b580      	push	{r7, lr}
    e2a6:	b086      	sub	sp, #24
    e2a8:	f8dd c020 	ldr.w	ip, [sp, #32]
    e2ac:	9102      	str	r1, [sp, #8]
    e2ae:	9203      	str	r2, [sp, #12]
    e2b0:	9304      	str	r3, [sp, #16]
    e2b2:	f8cd c014 	str.w	ip, [sp, #20]
    e2b6:	f04f 0e00 	mov.w	lr, #0
    e2ba:	f8cd e004 	str.w	lr, [sp, #4]
    e2be:	f8cd e000 	str.w	lr, [sp]
    e2c2:	f8cd e000 	str.w	lr, [sp]
    e2c6:	6001      	str	r1, [r0, #0]
    e2c8:	6042      	str	r2, [r0, #4]
    e2ca:	9900      	ldr	r1, [sp, #0]
    e2cc:	9a01      	ldr	r2, [sp, #4]
    e2ce:	6081      	str	r1, [r0, #8]
    e2d0:	60c2      	str	r2, [r0, #12]
    e2d2:	6103      	str	r3, [r0, #16]
    e2d4:	f8c0 c014 	str.w	ip, [r0, #20]
    e2d8:	b006      	add	sp, #24
    e2da:	bd80      	pop	{r7, pc}

0000e2dc <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>:
    e2dc:	b580      	push	{r7, lr}
    e2de:	b084      	sub	sp, #16
    e2e0:	9001      	str	r0, [sp, #4]
    e2e2:	9102      	str	r1, [sp, #8]
    e2e4:	9801      	ldr	r0, [sp, #4]
    e2e6:	9902      	ldr	r1, [sp, #8]
    e2e8:	f7ff ff2b 	bl	e142 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>
    e2ec:	9000      	str	r0, [sp, #0]
    e2ee:	e7ff      	b.n	e2f0 <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E+0x14>
    e2f0:	9800      	ldr	r0, [sp, #0]
    e2f2:	b004      	add	sp, #16
    e2f4:	bd80      	pop	{r7, pc}

0000e2f6 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct Coord(pub CoordPart, pub CoordPart);

    impl Coord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: CoordPart, y: CoordPart) -> Self {
    e2f6:	b084      	sub	sp, #16
    e2f8:	9002      	str	r0, [sp, #8]
    e2fa:	9103      	str	r1, [sp, #12]
            Coord(x, y)
    e2fc:	9000      	str	r0, [sp, #0]
    e2fe:	9101      	str	r1, [sp, #4]
        }
    e300:	9800      	ldr	r0, [sp, #0]
    e302:	9901      	ldr	r1, [sp, #4]
    e304:	b004      	add	sp, #16
    e306:	4770      	bx	lr

0000e308 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>:
    }

    impl Index<usize> for Coord {
        type Output = CoordPart;

        fn index(&self, idx: usize) -> &CoordPart {
    e308:	b580      	push	{r7, lr}
    e30a:	b096      	sub	sp, #88	; 0x58
    e30c:	9109      	str	r1, [sp, #36]	; 0x24
    e30e:	9014      	str	r0, [sp, #80]	; 0x50
            match idx {
                0 => &self.0,
    e310:	9909      	ldr	r1, [sp, #36]	; 0x24
    e312:	2900      	cmp	r1, #0
    e314:	9008      	str	r0, [sp, #32]
    e316:	9107      	str	r1, [sp, #28]
    e318:	d018      	beq.n	e34c <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x44>
    e31a:	e7ff      	b.n	e31c <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x14>
    e31c:	9807      	ldr	r0, [sp, #28]
    e31e:	2801      	cmp	r0, #1
    e320:	d017      	beq.n	e352 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x4a>
    e322:	e7ff      	b.n	e324 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x1c>
                1 => &self.1,
                _ => panic!("Unreachable index {}", idx),
    e324:	f64e 5084 	movw	r0, #60804	; 0xed84
    e328:	f2c0 0001 	movt	r0, #1
    e32c:	6801      	ldr	r1, [r0, #0]
    e32e:	a809      	add	r0, sp, #36	; 0x24
    e330:	9013      	str	r0, [sp, #76]	; 0x4c
    e332:	9813      	ldr	r0, [sp, #76]	; 0x4c
    e334:	9015      	str	r0, [sp, #84]	; 0x54
    e336:	f248 7275 	movw	r2, #34677	; 0x8775
    e33a:	f2c0 0201 	movt	r2, #1
    e33e:	9106      	str	r1, [sp, #24]
    e340:	4611      	mov	r1, r2
    e342:	f7ff ff63 	bl	e20c <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>
    e346:	9005      	str	r0, [sp, #20]
    e348:	9104      	str	r1, [sp, #16]
    e34a:	e006      	b.n	e35a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x52>
                0 => &self.0,
    e34c:	9808      	ldr	r0, [sp, #32]
    e34e:	900a      	str	r0, [sp, #40]	; 0x28
            match idx {
    e350:	e020      	b.n	e394 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                1 => &self.1,
    e352:	9808      	ldr	r0, [sp, #32]
    e354:	1d01      	adds	r1, r0, #4
    e356:	910a      	str	r1, [sp, #40]	; 0x28
            match idx {
    e358:	e01c      	b.n	e394 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                _ => panic!("Unreachable index {}", idx),
    e35a:	9805      	ldr	r0, [sp, #20]
    e35c:	9011      	str	r0, [sp, #68]	; 0x44
    e35e:	9904      	ldr	r1, [sp, #16]
    e360:	9112      	str	r1, [sp, #72]	; 0x48
    e362:	466a      	mov	r2, sp
    e364:	2301      	movs	r3, #1
    e366:	6013      	str	r3, [r2, #0]
    e368:	a80b      	add	r0, sp, #44	; 0x2c
    e36a:	aa11      	add	r2, sp, #68	; 0x44
    e36c:	9906      	ldr	r1, [sp, #24]
    e36e:	9203      	str	r2, [sp, #12]
    e370:	461a      	mov	r2, r3
    e372:	9b03      	ldr	r3, [sp, #12]
    e374:	f7ff ff96 	bl	e2a4 <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>
    e378:	e7ff      	b.n	e37a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x72>
    e37a:	f64e 5088 	movw	r0, #60808	; 0xed88
    e37e:	f2c0 0001 	movt	r0, #1
    e382:	f008 fb30 	bl	169e6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    e386:	9002      	str	r0, [sp, #8]
    e388:	e7ff      	b.n	e38a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x82>
    e38a:	a80b      	add	r0, sp, #44	; 0x2c
    e38c:	9902      	ldr	r1, [sp, #8]
    e38e:	f008 fb67 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    e392:	defe      	udf	#254	; 0xfe
            match idx {
    e394:	980a      	ldr	r0, [sp, #40]	; 0x28
            }
        }
    e396:	b016      	add	sp, #88	; 0x58
    e398:	bd80      	pop	{r7, pc}

0000e39a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>:
    /// #
    /// let coord = Coord::new(-5, 10);
    ///
    /// assert_eq!(coord.to_unsigned(), UnsignedCoord::new(0, 10));
    /// ```
    fn to_unsigned(self) -> UnsignedCoord {
    e39a:	b580      	push	{r7, lr}
    e39c:	b088      	sub	sp, #32
    e39e:	9006      	str	r0, [sp, #24]
    e3a0:	9107      	str	r1, [sp, #28]
    e3a2:	a806      	add	r0, sp, #24
    e3a4:	2100      	movs	r1, #0
        UnsignedCoord::new(self[0].max(0) as u32, self[1].max(0) as u32)
    e3a6:	f7ff ffaf 	bl	e308 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
    e3aa:	9005      	str	r0, [sp, #20]
    e3ac:	e7ff      	b.n	e3ae <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x14>
    e3ae:	9805      	ldr	r0, [sp, #20]
    e3b0:	6800      	ldr	r0, [r0, #0]
    e3b2:	2100      	movs	r1, #0
    e3b4:	f7ff feba 	bl	e12c <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
    e3b8:	9004      	str	r0, [sp, #16]
    e3ba:	e7ff      	b.n	e3bc <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x22>
    e3bc:	a806      	add	r0, sp, #24
    e3be:	2101      	movs	r1, #1
    e3c0:	f7ff ffa2 	bl	e308 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
    e3c4:	9003      	str	r0, [sp, #12]
    e3c6:	e7ff      	b.n	e3c8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x2e>
    e3c8:	9803      	ldr	r0, [sp, #12]
    e3ca:	6800      	ldr	r0, [r0, #0]
    e3cc:	2100      	movs	r1, #0
    e3ce:	f7ff fead 	bl	e12c <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
    e3d2:	9002      	str	r0, [sp, #8]
    e3d4:	e7ff      	b.n	e3d6 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x3c>
    e3d6:	9804      	ldr	r0, [sp, #16]
    e3d8:	9902      	ldr	r1, [sp, #8]
    e3da:	f000 f84e 	bl	e47a <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>
    e3de:	9001      	str	r0, [sp, #4]
    e3e0:	9100      	str	r1, [sp, #0]
    e3e2:	e7ff      	b.n	e3e4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x4a>
    }
    e3e4:	9801      	ldr	r0, [sp, #4]
    e3e6:	9900      	ldr	r1, [sp, #0]
    e3e8:	b008      	add	sp, #32
    e3ea:	bd80      	pop	{r7, pc}

0000e3ec <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>:
/// Take a tuple of 8 bit `(red, green, blue)` color values and convert them to a single 16 bit
/// color
///
/// The 2 or 3 (for the green channel) least significant bits are discarded
impl From<(u8, u8, u8)> for Rgb565 {
    fn from((r, g, b): (u8, u8, u8)) -> Self {
    e3ec:	b08b      	sub	sp, #44	; 0x2c
    e3ee:	4601      	mov	r1, r0
    e3f0:	f8ad 0020 	strh.w	r0, [sp, #32]
    e3f4:	0c00      	lsrs	r0, r0, #16
    e3f6:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    e3fa:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
    e3fe:	f88d 001e 	strb.w	r0, [sp, #30]
    e402:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    e406:	f8ad 001c 	strh.w	r0, [sp, #28]
    e40a:	f89d 001c 	ldrb.w	r0, [sp, #28]
    e40e:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    e412:	f89d 201d 	ldrb.w	r2, [sp, #29]
    e416:	4613      	mov	r3, r2
    e418:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
    e41c:	f89d 201e 	ldrb.w	r2, [sp, #30]
    e420:	4694      	mov	ip, r2
    e422:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
        let value =
        // Red
        (((r as u16) << 8) & RED_MASK)
    e426:	0200      	lsls	r0, r0, #8
    e428:	9306      	str	r3, [sp, #24]
    e42a:	f8cd c014 	str.w	ip, [sp, #20]
    e42e:	9004      	str	r0, [sp, #16]
    e430:	e7ff      	b.n	e432 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x46>
    e432:	9804      	ldr	r0, [sp, #16]
    e434:	f400 4178 	and.w	r1, r0, #63488	; 0xf800
        // Green
        | (((g as u16) << 3) & GREEN_MASK)
    e438:	9a06      	ldr	r2, [sp, #24]
    e43a:	b2d3      	uxtb	r3, r2
    e43c:	00db      	lsls	r3, r3, #3
    e43e:	9103      	str	r1, [sp, #12]
    e440:	9302      	str	r3, [sp, #8]
    e442:	e7ff      	b.n	e444 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x58>
    e444:	9802      	ldr	r0, [sp, #8]
    e446:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
        (((r as u16) << 8) & RED_MASK)
    e44a:	9a03      	ldr	r2, [sp, #12]
    e44c:	4311      	orrs	r1, r2
        // Blue
        | ((b as u16) >> 3 & BLUE_MASK);
    e44e:	9b05      	ldr	r3, [sp, #20]
    e450:	fa5f fc83 	uxtb.w	ip, r3
    e454:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
    e458:	9101      	str	r1, [sp, #4]
    e45a:	f8cd c000 	str.w	ip, [sp]
    e45e:	e7ff      	b.n	e460 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x74>
    e460:	9800      	ldr	r0, [sp, #0]
    e462:	f000 011f 	and.w	r1, r0, #31
        (((r as u16) << 8) & RED_MASK)
    e466:	9a01      	ldr	r2, [sp, #4]
    e468:	4311      	orrs	r1, r2
    e46a:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a

        Self(value)
    e46e:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    }
    e472:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
    e476:	b00b      	add	sp, #44	; 0x2c
    e478:	4770      	bx	lr

0000e47a <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct UnsignedCoord(pub UnsignedCoordPart, pub UnsignedCoordPart);

    impl UnsignedCoord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: UnsignedCoordPart, y: UnsignedCoordPart) -> Self {
    e47a:	b084      	sub	sp, #16
    e47c:	9002      	str	r0, [sp, #8]
    e47e:	9103      	str	r1, [sp, #12]
            UnsignedCoord(x, y)
    e480:	9000      	str	r0, [sp, #0]
    e482:	9101      	str	r1, [sp, #4]
        }
    e484:	9800      	ldr	r0, [sp, #0]
    e486:	9901      	ldr	r1, [sp, #4]
    e488:	b004      	add	sp, #16
    e48a:	4770      	bx	lr

0000e48c <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>:
    e48c:	b580      	push	{r7, lr}
    e48e:	b088      	sub	sp, #32
    e490:	9005      	str	r0, [sp, #20]
    e492:	9106      	str	r1, [sp, #24]
    e494:	9003      	str	r0, [sp, #12]
    e496:	4608      	mov	r0, r1
    e498:	f000 fa21 	bl	e8de <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>
    e49c:	9004      	str	r0, [sp, #16]
    e49e:	e7ff      	b.n	e4a0 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x14>
    e4a0:	9804      	ldr	r0, [sp, #16]
    e4a2:	9007      	str	r0, [sp, #28]
    e4a4:	9903      	ldr	r1, [sp, #12]
    e4a6:	680a      	ldr	r2, [r1, #0]
    e4a8:	9002      	str	r0, [sp, #8]
    e4aa:	4610      	mov	r0, r2
    e4ac:	9902      	ldr	r1, [sp, #8]
    e4ae:	f000 f837 	bl	e520 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>
    e4b2:	9001      	str	r0, [sp, #4]
    e4b4:	9100      	str	r1, [sp, #0]
    e4b6:	e7ff      	b.n	e4b8 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x2c>
    e4b8:	9801      	ldr	r0, [sp, #4]
    e4ba:	9900      	ldr	r1, [sp, #0]
    e4bc:	b008      	add	sp, #32
    e4be:	bd80      	pop	{r7, pc}

0000e4c0 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>:
    e4c0:	b580      	push	{r7, lr}
    e4c2:	b084      	sub	sp, #16
    e4c4:	9001      	str	r0, [sp, #4]
    e4c6:	9102      	str	r1, [sp, #8]
    e4c8:	9203      	str	r2, [sp, #12]
    e4ca:	9000      	str	r0, [sp, #0]
    e4cc:	4608      	mov	r0, r1
    e4ce:	9900      	ldr	r1, [sp, #0]
    e4d0:	f00e fe64 	bl	1d19c <__aeabi_memcpy>
    e4d4:	e7ff      	b.n	e4d6 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE+0x16>
    e4d6:	b004      	add	sp, #16
    e4d8:	bd80      	pop	{r7, pc}

0000e4da <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>:
    e4da:	b580      	push	{r7, lr}
    e4dc:	b084      	sub	sp, #16
    e4de:	9001      	str	r0, [sp, #4]
    e4e0:	9102      	str	r1, [sp, #8]
    e4e2:	9203      	str	r2, [sp, #12]
    e4e4:	0092      	lsls	r2, r2, #2
    e4e6:	9000      	str	r0, [sp, #0]
    e4e8:	4608      	mov	r0, r1
    e4ea:	9900      	ldr	r1, [sp, #0]
    e4ec:	f00e fe56 	bl	1d19c <__aeabi_memcpy>
    e4f0:	e7ff      	b.n	e4f2 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E+0x18>
    e4f2:	b004      	add	sp, #16
    e4f4:	bd80      	pop	{r7, pc}

0000e4f6 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>:
    e4f6:	b082      	sub	sp, #8
    e4f8:	9000      	str	r0, [sp, #0]
    e4fa:	9101      	str	r1, [sp, #4]
    e4fc:	6800      	ldr	r0, [r0, #0]
    e4fe:	6809      	ldr	r1, [r1, #0]
    e500:	2200      	movs	r2, #0
    e502:	4288      	cmp	r0, r1
    e504:	bf38      	it	cc
    e506:	2201      	movcc	r2, #1
    e508:	4610      	mov	r0, r2
    e50a:	b002      	add	sp, #8
    e50c:	4770      	bx	lr

0000e50e <_ZN4core3mem4swap17hc4afbec7b5ffb125E>:
    e50e:	b580      	push	{r7, lr}
    e510:	b082      	sub	sp, #8
    e512:	9000      	str	r0, [sp, #0]
    e514:	9101      	str	r1, [sp, #4]
    e516:	f000 f85f 	bl	e5d8 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>
    e51a:	e7ff      	b.n	e51c <_ZN4core3mem4swap17hc4afbec7b5ffb125E+0xe>
    e51c:	b002      	add	sp, #8
    e51e:	bd80      	pop	{r7, pc}

0000e520 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>:
    e520:	b580      	push	{r7, lr}
    e522:	b088      	sub	sp, #32
    e524:	9004      	str	r0, [sp, #16]
    e526:	9105      	str	r1, [sp, #20]
    e528:	f000 f819 	bl	e55e <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>
    e52c:	9001      	str	r0, [sp, #4]
    e52e:	9100      	str	r1, [sp, #0]
    e530:	e7ff      	b.n	e532 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x12>
    e532:	9801      	ldr	r0, [sp, #4]
    e534:	9006      	str	r0, [sp, #24]
    e536:	9900      	ldr	r1, [sp, #0]
    e538:	f001 0201 	and.w	r2, r1, #1
    e53c:	f88d 201f 	strb.w	r2, [sp, #31]
    e540:	2a00      	cmp	r2, #0
    e542:	d105      	bne.n	e550 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x30>
    e544:	e7ff      	b.n	e546 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x26>
    e546:	9801      	ldr	r0, [sp, #4]
    e548:	9003      	str	r0, [sp, #12]
    e54a:	2101      	movs	r1, #1
    e54c:	9102      	str	r1, [sp, #8]
    e54e:	e002      	b.n	e556 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
    e550:	2000      	movs	r0, #0
    e552:	9002      	str	r0, [sp, #8]
    e554:	e7ff      	b.n	e556 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
    e556:	9802      	ldr	r0, [sp, #8]
    e558:	9903      	ldr	r1, [sp, #12]
    e55a:	b008      	add	sp, #32
    e55c:	bd80      	pop	{r7, pc}

0000e55e <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>:
    e55e:	b08a      	sub	sp, #40	; 0x28
    e560:	9004      	str	r0, [sp, #16]
    e562:	9105      	str	r1, [sp, #20]
    e564:	1840      	adds	r0, r0, r1
    e566:	f04f 0100 	mov.w	r1, #0
    e56a:	f141 0100 	adc.w	r1, r1, #0
    e56e:	9006      	str	r0, [sp, #24]
    e570:	f88d 101c 	strb.w	r1, [sp, #28]
    e574:	9806      	ldr	r0, [sp, #24]
    e576:	f89d 101c 	ldrb.w	r1, [sp, #28]
    e57a:	9001      	str	r0, [sp, #4]
    e57c:	9100      	str	r1, [sp, #0]
    e57e:	e7ff      	b.n	e580 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE+0x22>
    e580:	9801      	ldr	r0, [sp, #4]
    e582:	9008      	str	r0, [sp, #32]
    e584:	9900      	ldr	r1, [sp, #0]
    e586:	f001 0201 	and.w	r2, r1, #1
    e58a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    e58e:	9002      	str	r0, [sp, #8]
    e590:	f88d 200c 	strb.w	r2, [sp, #12]
    e594:	9802      	ldr	r0, [sp, #8]
    e596:	f89d 100c 	ldrb.w	r1, [sp, #12]
    e59a:	b00a      	add	sp, #40	; 0x28
    e59c:	4770      	bx	lr

0000e59e <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>:
    e59e:	b580      	push	{r7, lr}
    e5a0:	b08c      	sub	sp, #48	; 0x30
    e5a2:	9005      	str	r0, [sp, #20]
    e5a4:	9106      	str	r1, [sp, #24]
    e5a6:	9207      	str	r2, [sp, #28]
    e5a8:	4603      	mov	r3, r0
    e5aa:	9008      	str	r0, [sp, #32]
    e5ac:	4608      	mov	r0, r1
    e5ae:	9109      	str	r1, [sp, #36]	; 0x24
    e5b0:	2104      	movs	r1, #4
    e5b2:	910b      	str	r1, [sp, #44]	; 0x2c
    e5b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e5b6:	9204      	str	r2, [sp, #16]
    e5b8:	9303      	str	r3, [sp, #12]
    e5ba:	9002      	str	r0, [sp, #8]
    e5bc:	9101      	str	r1, [sp, #4]
    e5be:	e7ff      	b.n	e5c0 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x22>
    e5c0:	9801      	ldr	r0, [sp, #4]
    e5c2:	9904      	ldr	r1, [sp, #16]
    e5c4:	fb00 f201 	mul.w	r2, r0, r1
    e5c8:	920a      	str	r2, [sp, #40]	; 0x28
    e5ca:	9803      	ldr	r0, [sp, #12]
    e5cc:	9902      	ldr	r1, [sp, #8]
    e5ce:	f000 f82e 	bl	e62e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>
    e5d2:	e7ff      	b.n	e5d4 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x36>
    e5d4:	b00c      	add	sp, #48	; 0x30
    e5d6:	bd80      	pop	{r7, pc}

0000e5d8 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>:
    e5d8:	b580      	push	{r7, lr}
    e5da:	b088      	sub	sp, #32
    e5dc:	9004      	str	r0, [sp, #16]
    e5de:	9105      	str	r1, [sp, #20]
    e5e0:	2204      	movs	r2, #4
    e5e2:	9207      	str	r2, [sp, #28]
    e5e4:	9a07      	ldr	r2, [sp, #28]
    e5e6:	9103      	str	r1, [sp, #12]
    e5e8:	9002      	str	r0, [sp, #8]
    e5ea:	9201      	str	r2, [sp, #4]
    e5ec:	e7ff      	b.n	e5ee <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x16>
    e5ee:	9801      	ldr	r0, [sp, #4]
    e5f0:	2820      	cmp	r0, #32
    e5f2:	d306      	bcc.n	e602 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x2a>
    e5f4:	e7ff      	b.n	e5f6 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x1e>
    e5f6:	2201      	movs	r2, #1
    e5f8:	9802      	ldr	r0, [sp, #8]
    e5fa:	9903      	ldr	r1, [sp, #12]
    e5fc:	f7ff ffcf 	bl	e59e <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>
    e600:	e012      	b.n	e628 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x50>
    e602:	9802      	ldr	r0, [sp, #8]
    e604:	f000 f8a1 	bl	e74a <_ZN4core3ptr4read17h2038b0ecb0975c4fE>
    e608:	4601      	mov	r1, r0
    e60a:	9006      	str	r0, [sp, #24]
    e60c:	9100      	str	r1, [sp, #0]
    e60e:	e7ff      	b.n	e610 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x38>
    e610:	2201      	movs	r2, #1
    e612:	9803      	ldr	r0, [sp, #12]
    e614:	9902      	ldr	r1, [sp, #8]
    e616:	f7ff ff60 	bl	e4da <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
    e61a:	e7ff      	b.n	e61c <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x44>
    e61c:	9803      	ldr	r0, [sp, #12]
    e61e:	9900      	ldr	r1, [sp, #0]
    e620:	f000 f8ac 	bl	e77c <_ZN4core3ptr5write17h4a80332de2cee3d3E>
    e624:	e7ff      	b.n	e626 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x4e>
    e626:	e000      	b.n	e62a <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
    e628:	e7ff      	b.n	e62a <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
    e62a:	b008      	add	sp, #32
    e62c:	bd80      	pop	{r7, pc}

0000e62e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>:
    e62e:	b5d0      	push	{r4, r6, r7, lr}
    e630:	af02      	add	r7, sp, #8
    e632:	b0b4      	sub	sp, #208	; 0xd0
    e634:	466c      	mov	r4, sp
    e636:	f36f 0404 	bfc	r4, #0, #5
    e63a:	46a5      	mov	sp, r4
    e63c:	9024      	str	r0, [sp, #144]	; 0x90
    e63e:	9125      	str	r1, [sp, #148]	; 0x94
    e640:	9226      	str	r2, [sp, #152]	; 0x98
    e642:	2320      	movs	r3, #32
    e644:	932f      	str	r3, [sp, #188]	; 0xbc
    e646:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    e648:	9327      	str	r3, [sp, #156]	; 0x9c
    e64a:	920e      	str	r2, [sp, #56]	; 0x38
    e64c:	910d      	str	r1, [sp, #52]	; 0x34
    e64e:	900c      	str	r0, [sp, #48]	; 0x30
    e650:	930b      	str	r3, [sp, #44]	; 0x2c
    e652:	e7ff      	b.n	e654 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x26>
    e654:	2000      	movs	r0, #0
    e656:	900f      	str	r0, [sp, #60]	; 0x3c
    e658:	e7ff      	b.n	e65a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
    e65a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e65c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e65e:	4408      	add	r0, r1
    e660:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e662:	4290      	cmp	r0, r2
    e664:	d905      	bls.n	e672 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x44>
    e666:	e7ff      	b.n	e668 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x3a>
    e668:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e66a:	990e      	ldr	r1, [sp, #56]	; 0x38
    e66c:	4288      	cmp	r0, r1
    e66e:	d334      	bcc.n	e6da <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xac>
    e670:	e067      	b.n	e742 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
    e672:	e7ff      	b.n	e674 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x46>
    e674:	a810      	add	r0, sp, #64	; 0x40
    e676:	9030      	str	r0, [sp, #192]	; 0xc0
    e678:	9031      	str	r0, [sp, #196]	; 0xc4
    e67a:	e7ff      	b.n	e67c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x4e>
    e67c:	a810      	add	r0, sp, #64	; 0x40
    e67e:	4601      	mov	r1, r0
    e680:	9028      	str	r0, [sp, #160]	; 0xa0
    e682:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e684:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e686:	900a      	str	r0, [sp, #40]	; 0x28
    e688:	4610      	mov	r0, r2
    e68a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e68c:	9109      	str	r1, [sp, #36]	; 0x24
    e68e:	4619      	mov	r1, r3
    e690:	f000 f87a 	bl	e788 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    e694:	4601      	mov	r1, r0
    e696:	9029      	str	r0, [sp, #164]	; 0xa4
    e698:	9108      	str	r1, [sp, #32]
    e69a:	e7ff      	b.n	e69c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x6e>
    e69c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e69e:	980d      	ldr	r0, [sp, #52]	; 0x34
    e6a0:	f000 f872 	bl	e788 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    e6a4:	4601      	mov	r1, r0
    e6a6:	902a      	str	r0, [sp, #168]	; 0xa8
    e6a8:	9107      	str	r1, [sp, #28]
    e6aa:	e7ff      	b.n	e6ac <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x7e>
    e6ac:	9808      	ldr	r0, [sp, #32]
    e6ae:	9909      	ldr	r1, [sp, #36]	; 0x24
    e6b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e6b2:	f7ff ff05 	bl	e4c0 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e6b6:	e7ff      	b.n	e6b8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x8a>
    e6b8:	9807      	ldr	r0, [sp, #28]
    e6ba:	9908      	ldr	r1, [sp, #32]
    e6bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e6be:	f7ff feff 	bl	e4c0 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e6c2:	e7ff      	b.n	e6c4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x96>
    e6c4:	9809      	ldr	r0, [sp, #36]	; 0x24
    e6c6:	9907      	ldr	r1, [sp, #28]
    e6c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e6ca:	f7ff fef9 	bl	e4c0 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e6ce:	e7ff      	b.n	e6d0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xa2>
    e6d0:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e6d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e6d4:	4408      	add	r0, r1
    e6d6:	900f      	str	r0, [sp, #60]	; 0x3c
    e6d8:	e7bf      	b.n	e65a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
    e6da:	e7ff      	b.n	e6dc <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xae>
    e6dc:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e6de:	990e      	ldr	r1, [sp, #56]	; 0x38
    e6e0:	1a08      	subs	r0, r1, r0
    e6e2:	4602      	mov	r2, r0
    e6e4:	902b      	str	r0, [sp, #172]	; 0xac
    e6e6:	a81c      	add	r0, sp, #112	; 0x70
    e6e8:	9032      	str	r0, [sp, #200]	; 0xc8
    e6ea:	9033      	str	r0, [sp, #204]	; 0xcc
    e6ec:	9206      	str	r2, [sp, #24]
    e6ee:	9005      	str	r0, [sp, #20]
    e6f0:	e7ff      	b.n	e6f2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xc4>
    e6f2:	9805      	ldr	r0, [sp, #20]
    e6f4:	9905      	ldr	r1, [sp, #20]
    e6f6:	912c      	str	r1, [sp, #176]	; 0xb0
    e6f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e6fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e6fc:	9004      	str	r0, [sp, #16]
    e6fe:	4610      	mov	r0, r2
    e700:	f000 f842 	bl	e788 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    e704:	4601      	mov	r1, r0
    e706:	902d      	str	r0, [sp, #180]	; 0xb4
    e708:	9103      	str	r1, [sp, #12]
    e70a:	e7ff      	b.n	e70c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xde>
    e70c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e70e:	980d      	ldr	r0, [sp, #52]	; 0x34
    e710:	f000 f83a 	bl	e788 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    e714:	4601      	mov	r1, r0
    e716:	902e      	str	r0, [sp, #184]	; 0xb8
    e718:	9102      	str	r1, [sp, #8]
    e71a:	e7ff      	b.n	e71c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xee>
    e71c:	9803      	ldr	r0, [sp, #12]
    e71e:	9904      	ldr	r1, [sp, #16]
    e720:	9a06      	ldr	r2, [sp, #24]
    e722:	f7ff fecd 	bl	e4c0 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e726:	e7ff      	b.n	e728 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xfa>
    e728:	9802      	ldr	r0, [sp, #8]
    e72a:	9903      	ldr	r1, [sp, #12]
    e72c:	9a06      	ldr	r2, [sp, #24]
    e72e:	f7ff fec7 	bl	e4c0 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e732:	e7ff      	b.n	e734 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x106>
    e734:	9804      	ldr	r0, [sp, #16]
    e736:	9902      	ldr	r1, [sp, #8]
    e738:	9a06      	ldr	r2, [sp, #24]
    e73a:	f7ff fec1 	bl	e4c0 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e73e:	e7ff      	b.n	e740 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x112>
    e740:	e7ff      	b.n	e742 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
    e742:	f1a7 0408 	sub.w	r4, r7, #8
    e746:	46a5      	mov	sp, r4
    e748:	bdd0      	pop	{r4, r6, r7, pc}

0000e74a <_ZN4core3ptr4read17h2038b0ecb0975c4fE>:
    e74a:	b580      	push	{r7, lr}
    e74c:	b08a      	sub	sp, #40	; 0x28
    e74e:	9004      	str	r0, [sp, #16]
    e750:	9905      	ldr	r1, [sp, #20]
    e752:	9103      	str	r1, [sp, #12]
    e754:	9002      	str	r0, [sp, #8]
    e756:	e7ff      	b.n	e758 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0xe>
    e758:	a803      	add	r0, sp, #12
    e75a:	9008      	str	r0, [sp, #32]
    e75c:	9009      	str	r0, [sp, #36]	; 0x24
    e75e:	e7ff      	b.n	e760 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x16>
    e760:	a903      	add	r1, sp, #12
    e762:	2201      	movs	r2, #1
    e764:	9802      	ldr	r0, [sp, #8]
    e766:	f7ff feb8 	bl	e4da <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
    e76a:	e7ff      	b.n	e76c <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x22>
    e76c:	9803      	ldr	r0, [sp, #12]
    e76e:	9006      	str	r0, [sp, #24]
    e770:	9007      	str	r0, [sp, #28]
    e772:	9001      	str	r0, [sp, #4]
    e774:	e7ff      	b.n	e776 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x2c>
    e776:	9801      	ldr	r0, [sp, #4]
    e778:	b00a      	add	sp, #40	; 0x28
    e77a:	bd80      	pop	{r7, pc}

0000e77c <_ZN4core3ptr5write17h4a80332de2cee3d3E>:
    e77c:	b082      	sub	sp, #8
    e77e:	9000      	str	r0, [sp, #0]
    e780:	9101      	str	r1, [sp, #4]
    e782:	6001      	str	r1, [r0, #0]
    e784:	b002      	add	sp, #8
    e786:	4770      	bx	lr

0000e788 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>:
    e788:	b580      	push	{r7, lr}
    e78a:	b084      	sub	sp, #16
    e78c:	9002      	str	r0, [sp, #8]
    e78e:	9103      	str	r1, [sp, #12]
    e790:	f000 f805 	bl	e79e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>
    e794:	9001      	str	r0, [sp, #4]
    e796:	e7ff      	b.n	e798 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E+0x10>
    e798:	9801      	ldr	r0, [sp, #4]
    e79a:	b004      	add	sp, #16
    e79c:	bd80      	pop	{r7, pc}

0000e79e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>:
    e79e:	b084      	sub	sp, #16
    e7a0:	9001      	str	r0, [sp, #4]
    e7a2:	9102      	str	r1, [sp, #8]
    e7a4:	4408      	add	r0, r1
    e7a6:	9003      	str	r0, [sp, #12]
    e7a8:	9803      	ldr	r0, [sp, #12]
    e7aa:	9000      	str	r0, [sp, #0]
    e7ac:	e7ff      	b.n	e7ae <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE+0x10>
    e7ae:	9800      	ldr	r0, [sp, #0]
    e7b0:	b004      	add	sp, #16
    e7b2:	4770      	bx	lr

0000e7b4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>:
    e7b4:	b580      	push	{r7, lr}
    e7b6:	b084      	sub	sp, #16
    e7b8:	9002      	str	r0, [sp, #8]
    e7ba:	9103      	str	r1, [sp, #12]
    e7bc:	f000 f805 	bl	e7ca <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>
    e7c0:	9001      	str	r0, [sp, #4]
    e7c2:	e7ff      	b.n	e7c4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE+0x10>
    e7c4:	9801      	ldr	r0, [sp, #4]
    e7c6:	b004      	add	sp, #16
    e7c8:	bd80      	pop	{r7, pc}

0000e7ca <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>:
    e7ca:	b084      	sub	sp, #16
    e7cc:	9001      	str	r0, [sp, #4]
    e7ce:	9102      	str	r1, [sp, #8]
    e7d0:	4408      	add	r0, r1
    e7d2:	9003      	str	r0, [sp, #12]
    e7d4:	9803      	ldr	r0, [sp, #12]
    e7d6:	9000      	str	r0, [sp, #0]
    e7d8:	e7ff      	b.n	e7da <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE+0x10>
    e7da:	9800      	ldr	r0, [sp, #0]
    e7dc:	b004      	add	sp, #16
    e7de:	4770      	bx	lr

0000e7e0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>:
    e7e0:	b580      	push	{r7, lr}
    e7e2:	b08a      	sub	sp, #40	; 0x28
    e7e4:	9009      	str	r0, [sp, #36]	; 0x24
    e7e6:	2100      	movs	r1, #0
    e7e8:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
    e7ec:	1d01      	adds	r1, r0, #4
    e7ee:	9002      	str	r0, [sp, #8]
    e7f0:	f7ff fe81 	bl	e4f6 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>
    e7f4:	9001      	str	r0, [sp, #4]
    e7f6:	e7ff      	b.n	e7f8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x18>
    e7f8:	9801      	ldr	r0, [sp, #4]
    e7fa:	07c1      	lsls	r1, r0, #31
    e7fc:	2900      	cmp	r1, #0
    e7fe:	d103      	bne.n	e808 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x28>
    e800:	e7ff      	b.n	e802 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x22>
    e802:	2000      	movs	r0, #0
    e804:	9003      	str	r0, [sp, #12]
    e806:	e021      	b.n	e84c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
    e808:	2001      	movs	r0, #1
    e80a:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    e80e:	9902      	ldr	r1, [sp, #8]
    e810:	9000      	str	r0, [sp, #0]
    e812:	4608      	mov	r0, r1
    e814:	9900      	ldr	r1, [sp, #0]
    e816:	f7ff fe39 	bl	e48c <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>
    e81a:	9106      	str	r1, [sp, #24]
    e81c:	9005      	str	r0, [sp, #20]
    e81e:	e7ff      	b.n	e820 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x40>
    e820:	9805      	ldr	r0, [sp, #20]
    e822:	2801      	cmp	r0, #1
    e824:	d003      	beq.n	e82e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x4e>
    e826:	e7ff      	b.n	e828 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x48>
    e828:	2000      	movs	r0, #0
    e82a:	9003      	str	r0, [sp, #12]
    e82c:	e021      	b.n	e872 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
    e82e:	2000      	movs	r0, #0
    e830:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    e834:	9806      	ldr	r0, [sp, #24]
    e836:	9007      	str	r0, [sp, #28]
    e838:	a807      	add	r0, sp, #28
    e83a:	9902      	ldr	r1, [sp, #8]
    e83c:	f7ff fe67 	bl	e50e <_ZN4core3mem4swap17hc4afbec7b5ffb125E>
    e840:	e7ff      	b.n	e842 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x62>
    e842:	9807      	ldr	r0, [sp, #28]
    e844:	9004      	str	r0, [sp, #16]
    e846:	2001      	movs	r0, #1
    e848:	9003      	str	r0, [sp, #12]
    e84a:	e012      	b.n	e872 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
    e84c:	9803      	ldr	r0, [sp, #12]
    e84e:	9904      	ldr	r1, [sp, #16]
    e850:	b00a      	add	sp, #40	; 0x28
    e852:	bd80      	pop	{r7, pc}
    e854:	2000      	movs	r0, #0
    e856:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    e85a:	e7f7      	b.n	e84c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
    e85c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    e860:	07c0      	lsls	r0, r0, #31
    e862:	2800      	cmp	r0, #0
    e864:	d0f6      	beq.n	e854 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
    e866:	e7ff      	b.n	e868 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x88>
    e868:	2000      	movs	r0, #0
    e86a:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    e86e:	e7f1      	b.n	e854 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
    e870:	e7f0      	b.n	e854 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
    e872:	9805      	ldr	r0, [sp, #20]
    e874:	2801      	cmp	r0, #1
    e876:	d0f1      	beq.n	e85c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x7c>
    e878:	e7fa      	b.n	e870 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x90>

0000e87a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>:
    e87a:	b082      	sub	sp, #8
    e87c:	9000      	str	r0, [sp, #0]
    e87e:	9101      	str	r1, [sp, #4]
    e880:	b002      	add	sp, #8
    e882:	4770      	bx	lr

0000e884 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>:
    e884:	b580      	push	{r7, lr}
    e886:	b086      	sub	sp, #24
    e888:	9003      	str	r0, [sp, #12]
    e88a:	9104      	str	r1, [sp, #16]
    e88c:	9205      	str	r2, [sp, #20]
    e88e:	9002      	str	r0, [sp, #8]
    e890:	4610      	mov	r0, r2
    e892:	9a02      	ldr	r2, [sp, #8]
    e894:	9101      	str	r1, [sp, #4]
    e896:	4611      	mov	r1, r2
    e898:	9a01      	ldr	r2, [sp, #4]
    e89a:	f000 f846 	bl	e92a <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>
    e89e:	9000      	str	r0, [sp, #0]
    e8a0:	e7ff      	b.n	e8a2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E+0x1e>
    e8a2:	9800      	ldr	r0, [sp, #0]
    e8a4:	b006      	add	sp, #24
    e8a6:	bd80      	pop	{r7, pc}

0000e8a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>:
    e8a8:	b084      	sub	sp, #16
    e8aa:	9002      	str	r0, [sp, #8]
    e8ac:	9103      	str	r1, [sp, #12]
    e8ae:	9000      	str	r0, [sp, #0]
    e8b0:	9101      	str	r1, [sp, #4]
    e8b2:	9801      	ldr	r0, [sp, #4]
    e8b4:	b004      	add	sp, #16
    e8b6:	4770      	bx	lr

0000e8b8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>:
    e8b8:	b082      	sub	sp, #8
    e8ba:	9000      	str	r0, [sp, #0]
    e8bc:	9101      	str	r1, [sp, #4]
    e8be:	b002      	add	sp, #8
    e8c0:	4770      	bx	lr

0000e8c2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>:
    e8c2:	b081      	sub	sp, #4
    e8c4:	9000      	str	r0, [sp, #0]
    e8c6:	b001      	add	sp, #4
    e8c8:	4770      	bx	lr

0000e8ca <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>:
    e8ca:	b580      	push	{r7, lr}
    e8cc:	b082      	sub	sp, #8
    e8ce:	9001      	str	r0, [sp, #4]
    e8d0:	f7ff fff7 	bl	e8c2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>
    e8d4:	9000      	str	r0, [sp, #0]
    e8d6:	e7ff      	b.n	e8d8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE+0xe>
    e8d8:	9800      	ldr	r0, [sp, #0]
    e8da:	b002      	add	sp, #8
    e8dc:	bd80      	pop	{r7, pc}

0000e8de <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>:
    e8de:	b580      	push	{r7, lr}
    e8e0:	b084      	sub	sp, #16
    e8e2:	9003      	str	r0, [sp, #12]
    e8e4:	f7ff fff1 	bl	e8ca <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>
    e8e8:	9001      	str	r0, [sp, #4]
    e8ea:	e7ff      	b.n	e8ec <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E+0xe>
    e8ec:	9801      	ldr	r0, [sp, #4]
    e8ee:	9002      	str	r0, [sp, #8]
    e8f0:	9802      	ldr	r0, [sp, #8]
    e8f2:	b004      	add	sp, #16
    e8f4:	bd80      	pop	{r7, pc}

0000e8f6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>:
    e8f6:	b082      	sub	sp, #8
    e8f8:	9000      	str	r0, [sp, #0]
    e8fa:	9101      	str	r1, [sp, #4]
    e8fc:	b002      	add	sp, #8
    e8fe:	4770      	bx	lr

0000e900 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>:
    e900:	b580      	push	{r7, lr}
    e902:	b086      	sub	sp, #24
    e904:	9003      	str	r0, [sp, #12]
    e906:	9104      	str	r1, [sp, #16]
    e908:	9205      	str	r2, [sp, #20]
    e90a:	9002      	str	r0, [sp, #8]
    e90c:	4608      	mov	r0, r1
    e90e:	4611      	mov	r1, r2
    e910:	f7ff ffd2 	bl	e8b8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    e914:	9001      	str	r0, [sp, #4]
    e916:	e7ff      	b.n	e918 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x18>
    e918:	9801      	ldr	r0, [sp, #4]
    e91a:	9902      	ldr	r1, [sp, #8]
    e91c:	f7ff ff4a 	bl	e7b4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>
    e920:	9000      	str	r0, [sp, #0]
    e922:	e7ff      	b.n	e924 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x24>
    e924:	9800      	ldr	r0, [sp, #0]
    e926:	b006      	add	sp, #24
    e928:	bd80      	pop	{r7, pc}

0000e92a <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>:
    e92a:	b580      	push	{r7, lr}
    e92c:	b086      	sub	sp, #24
    e92e:	9003      	str	r0, [sp, #12]
    e930:	9104      	str	r1, [sp, #16]
    e932:	9205      	str	r2, [sp, #20]
    e934:	9002      	str	r0, [sp, #8]
    e936:	4608      	mov	r0, r1
    e938:	4611      	mov	r1, r2
    e93a:	f7ff ff9e 	bl	e87a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    e93e:	9001      	str	r0, [sp, #4]
    e940:	e7ff      	b.n	e942 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x18>
    e942:	9801      	ldr	r0, [sp, #4]
    e944:	9902      	ldr	r1, [sp, #8]
    e946:	f7ff ff1f 	bl	e788 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    e94a:	9000      	str	r0, [sp, #0]
    e94c:	e7ff      	b.n	e94e <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x24>
    e94e:	9800      	ldr	r0, [sp, #0]
    e950:	b006      	add	sp, #24
    e952:	bd80      	pop	{r7, pc}

0000e954 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>:
    e954:	b580      	push	{r7, lr}
    e956:	b086      	sub	sp, #24
    e958:	f8dd c020 	ldr.w	ip, [sp, #32]
    e95c:	9102      	str	r1, [sp, #8]
    e95e:	9203      	str	r2, [sp, #12]
    e960:	9304      	str	r3, [sp, #16]
    e962:	f8cd c014 	str.w	ip, [sp, #20]
    e966:	f04f 0e00 	mov.w	lr, #0
    e96a:	f8cd e004 	str.w	lr, [sp, #4]
    e96e:	f8cd e000 	str.w	lr, [sp]
    e972:	f8cd e000 	str.w	lr, [sp]
    e976:	6001      	str	r1, [r0, #0]
    e978:	6042      	str	r2, [r0, #4]
    e97a:	9900      	ldr	r1, [sp, #0]
    e97c:	9a01      	ldr	r2, [sp, #4]
    e97e:	6081      	str	r1, [r0, #8]
    e980:	60c2      	str	r2, [r0, #12]
    e982:	6103      	str	r3, [r0, #16]
    e984:	f8c0 c014 	str.w	ip, [r0, #20]
    e988:	b006      	add	sp, #24
    e98a:	bd80      	pop	{r7, pc}

0000e98c <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>:
    e98c:	b580      	push	{r7, lr}
    e98e:	b084      	sub	sp, #16
    e990:	9101      	str	r1, [sp, #4]
    e992:	9202      	str	r2, [sp, #8]
    e994:	9901      	ldr	r1, [sp, #4]
    e996:	9a02      	ldr	r2, [sp, #8]
    e998:	f000 fa92 	bl	eec0 <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>
    e99c:	e7ff      	b.n	e99e <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE+0x12>
    e99e:	b004      	add	sp, #16
    e9a0:	bd80      	pop	{r7, pc}

0000e9a2 <_ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE>:
    e9a2:	b081      	sub	sp, #4
    e9a4:	9000      	str	r0, [sp, #0]
    e9a6:	b001      	add	sp, #4
    e9a8:	4770      	bx	lr

0000e9aa <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>:
    e9aa:	b081      	sub	sp, #4
    e9ac:	9000      	str	r0, [sp, #0]
    e9ae:	b001      	add	sp, #4
    e9b0:	4770      	bx	lr

0000e9b2 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>:
    e9b2:	b580      	push	{r7, lr}
    e9b4:	b086      	sub	sp, #24
    e9b6:	460a      	mov	r2, r1
    e9b8:	9004      	str	r0, [sp, #16]
    e9ba:	f88d 1017 	strb.w	r1, [sp, #23]
    e9be:	9203      	str	r2, [sp, #12]
    e9c0:	f7ff fff3 	bl	e9aa <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
    e9c4:	9002      	str	r0, [sp, #8]
    e9c6:	e7ff      	b.n	e9c8 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x16>
    e9c8:	9802      	ldr	r0, [sp, #8]
    e9ca:	9903      	ldr	r1, [sp, #12]
    e9cc:	f000 f806 	bl	e9dc <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
    e9d0:	9001      	str	r0, [sp, #4]
    e9d2:	e7ff      	b.n	e9d4 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x22>
    e9d4:	9801      	ldr	r0, [sp, #4]
    e9d6:	b006      	add	sp, #24
    e9d8:	bd80      	pop	{r7, pc}
	...

0000e9dc <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>:
    e9dc:	b086      	sub	sp, #24
    e9de:	460a      	mov	r2, r1
    e9e0:	f88d 100f 	strb.w	r1, [sp, #15]
    e9e4:	9005      	str	r0, [sp, #20]
    e9e6:	f89d 100f 	ldrb.w	r1, [sp, #15]
    e9ea:	9002      	str	r0, [sp, #8]
    e9ec:	9101      	str	r1, [sp, #4]
    e9ee:	9901      	ldr	r1, [sp, #4]
    e9f0:	e8df f001 	tbb	[pc, r1]
    e9f4:	03102317 	.word	0x03102317
    e9f8:	001c      	.short	0x001c
    e9fa:	f64e 50e8 	movw	r0, #60904	; 0xede8
    e9fe:	f2c0 0001 	movt	r0, #1
    ea02:	f64e 6264 	movw	r2, #61028	; 0xee64
    ea06:	f2c0 0201 	movt	r2, #1
    ea0a:	2131      	movs	r1, #49	; 0x31
    ea0c:	f007 fff2 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ea10:	defe      	udf	#254	; 0xfe
    ea12:	defe      	udf	#254	; 0xfe
    ea14:	9802      	ldr	r0, [sp, #8]
    ea16:	6801      	ldr	r1, [r0, #0]
    ea18:	f3bf 8f5f 	dmb	sy
    ea1c:	9104      	str	r1, [sp, #16]
    ea1e:	e7ff      	b.n	ea20 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x44>
    ea20:	e017      	b.n	ea52 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
    ea22:	9802      	ldr	r0, [sp, #8]
    ea24:	6801      	ldr	r1, [r0, #0]
    ea26:	9104      	str	r1, [sp, #16]
    ea28:	e7ff      	b.n	ea2a <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x4e>
    ea2a:	e012      	b.n	ea52 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
    ea2c:	9802      	ldr	r0, [sp, #8]
    ea2e:	6801      	ldr	r1, [r0, #0]
    ea30:	f3bf 8f5f 	dmb	sy
    ea34:	9104      	str	r1, [sp, #16]
    ea36:	e7ff      	b.n	ea38 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x5c>
    ea38:	e00b      	b.n	ea52 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
    ea3a:	f64e 6074 	movw	r0, #61044	; 0xee74
    ea3e:	f2c0 0001 	movt	r0, #1
    ea42:	f64e 6264 	movw	r2, #61028	; 0xee64
    ea46:	f2c0 0201 	movt	r2, #1
    ea4a:	2128      	movs	r1, #40	; 0x28
    ea4c:	f007 ffd2 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ea50:	defe      	udf	#254	; 0xfe
    ea52:	9804      	ldr	r0, [sp, #16]
    ea54:	b006      	add	sp, #24
    ea56:	4770      	bx	lr

0000ea58 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>:
    ea58:	b081      	sub	sp, #4
    ea5a:	9000      	str	r0, [sp, #0]
    ea5c:	6800      	ldr	r0, [r0, #0]
    ea5e:	b001      	add	sp, #4
    ea60:	4770      	bx	lr

0000ea62 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>:
    ea62:	b082      	sub	sp, #8
    ea64:	9001      	str	r0, [sp, #4]
    ea66:	6801      	ldr	r1, [r0, #0]
    ea68:	6840      	ldr	r0, [r0, #4]
    ea6a:	9000      	str	r0, [sp, #0]
    ea6c:	4608      	mov	r0, r1
    ea6e:	9900      	ldr	r1, [sp, #0]
    ea70:	b002      	add	sp, #8
    ea72:	4770      	bx	lr

0000ea74 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>:
    ea74:	b580      	push	{r7, lr}
    ea76:	b08c      	sub	sp, #48	; 0x30
    ea78:	9101      	str	r1, [sp, #4]
    ea7a:	9202      	str	r2, [sp, #8]
    ea7c:	2100      	movs	r1, #0
    ea7e:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
    ea82:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
    ea86:	2101      	movs	r1, #1
    ea88:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
    ea8c:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
    ea90:	9901      	ldr	r1, [sp, #4]
    ea92:	2900      	cmp	r1, #0
    ea94:	460a      	mov	r2, r1
    ea96:	bf18      	it	ne
    ea98:	2201      	movne	r2, #1
    ea9a:	2900      	cmp	r1, #0
    ea9c:	9000      	str	r0, [sp, #0]
    ea9e:	d001      	beq.n	eaa4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x30>
    eaa0:	e7ff      	b.n	eaa2 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x2e>
    eaa2:	e008      	b.n	eab6 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x42>
    eaa4:	2000      	movs	r0, #0
    eaa6:	9900      	ldr	r1, [sp, #0]
    eaa8:	6088      	str	r0, [r1, #8]
    eaaa:	6048      	str	r0, [r1, #4]
    eaac:	6008      	str	r0, [r1, #0]
    eaae:	2002      	movs	r0, #2
    eab0:	6008      	str	r0, [r1, #0]
    eab2:	e021      	b.n	eaf8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
    eab4:	defe      	udf	#254	; 0xfe
    eab6:	2000      	movs	r0, #0
    eab8:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    eabc:	9901      	ldr	r1, [sp, #4]
    eabe:	9a02      	ldr	r2, [sp, #8]
    eac0:	910a      	str	r1, [sp, #40]	; 0x28
    eac2:	920b      	str	r2, [sp, #44]	; 0x2c
    eac4:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    eac8:	9106      	str	r1, [sp, #24]
    eaca:	9207      	str	r2, [sp, #28]
    eacc:	9906      	ldr	r1, [sp, #24]
    eace:	9a07      	ldr	r2, [sp, #28]
    ead0:	a803      	add	r0, sp, #12
    ead2:	f7ff ff5b 	bl	e98c <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>
    ead6:	e7ff      	b.n	ead8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x64>
    ead8:	9803      	ldr	r0, [sp, #12]
    eada:	9904      	ldr	r1, [sp, #16]
    eadc:	9a05      	ldr	r2, [sp, #20]
    eade:	9b00      	ldr	r3, [sp, #0]
    eae0:	609a      	str	r2, [r3, #8]
    eae2:	6059      	str	r1, [r3, #4]
    eae4:	6018      	str	r0, [r3, #0]
    eae6:	e007      	b.n	eaf8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
    eae8:	9801      	ldr	r0, [sp, #4]
    eaea:	2800      	cmp	r0, #0
    eaec:	d10c      	bne.n	eb08 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x94>
    eaee:	e015      	b.n	eb1c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa8>
    eaf0:	2000      	movs	r0, #0
    eaf2:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    eaf6:	e7f7      	b.n	eae8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
    eaf8:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
    eafc:	07c0      	lsls	r0, r0, #31
    eafe:	2800      	cmp	r0, #0
    eb00:	d1f6      	bne.n	eaf0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x7c>
    eb02:	e7f1      	b.n	eae8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
    eb04:	b00c      	add	sp, #48	; 0x30
    eb06:	bd80      	pop	{r7, pc}
    eb08:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    eb0c:	07c0      	lsls	r0, r0, #31
    eb0e:	2800      	cmp	r0, #0
    eb10:	d0f8      	beq.n	eb04 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
    eb12:	e7ff      	b.n	eb14 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa0>
    eb14:	2000      	movs	r0, #0
    eb16:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    eb1a:	e7f3      	b.n	eb04 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
    eb1c:	e7f2      	b.n	eb04 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>

0000eb1e <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>:
    eb1e:	b5b0      	push	{r4, r5, r7, lr}
    eb20:	b081      	sub	sp, #4
    eb22:	9100      	str	r1, [sp, #0]
    eb24:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    eb28:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    eb2c:	b001      	add	sp, #4
    eb2e:	bdb0      	pop	{r4, r5, r7, pc}

0000eb30 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>:
    eb30:	b580      	push	{r7, lr}
    eb32:	b088      	sub	sp, #32
    eb34:	9106      	str	r1, [sp, #24]
    eb36:	680a      	ldr	r2, [r1, #0]
    eb38:	1e93      	subs	r3, r2, #2
    eb3a:	bf18      	it	ne
    eb3c:	2301      	movne	r3, #1
    eb3e:	2a02      	cmp	r2, #2
    eb40:	9102      	str	r1, [sp, #8]
    eb42:	9001      	str	r0, [sp, #4]
    eb44:	d001      	beq.n	eb4a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x1a>
    eb46:	e7ff      	b.n	eb48 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x18>
    eb48:	e008      	b.n	eb5c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x2c>
    eb4a:	2000      	movs	r0, #0
    eb4c:	9901      	ldr	r1, [sp, #4]
    eb4e:	6088      	str	r0, [r1, #8]
    eb50:	6048      	str	r0, [r1, #4]
    eb52:	6008      	str	r0, [r1, #0]
    eb54:	2002      	movs	r0, #2
    eb56:	6008      	str	r0, [r1, #0]
    eb58:	e00f      	b.n	eb7a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
    eb5a:	defe      	udf	#254	; 0xfe
    eb5c:	9802      	ldr	r0, [sp, #8]
    eb5e:	9007      	str	r0, [sp, #28]
    eb60:	a803      	add	r0, sp, #12
    eb62:	9902      	ldr	r1, [sp, #8]
    eb64:	f000 f9b5 	bl	eed2 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>
    eb68:	e7ff      	b.n	eb6a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x3a>
    eb6a:	9803      	ldr	r0, [sp, #12]
    eb6c:	9904      	ldr	r1, [sp, #16]
    eb6e:	9a05      	ldr	r2, [sp, #20]
    eb70:	9b01      	ldr	r3, [sp, #4]
    eb72:	609a      	str	r2, [r3, #8]
    eb74:	6059      	str	r1, [r3, #4]
    eb76:	6018      	str	r0, [r3, #0]
    eb78:	e7ff      	b.n	eb7a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
    eb7a:	b008      	add	sp, #32
    eb7c:	bd80      	pop	{r7, pc}

0000eb7e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>:
    eb7e:	b580      	push	{r7, lr}
    eb80:	b086      	sub	sp, #24
    eb82:	9004      	str	r0, [sp, #16]
    eb84:	6801      	ldr	r1, [r0, #0]
    eb86:	2900      	cmp	r1, #0
    eb88:	9001      	str	r0, [sp, #4]
    eb8a:	d001      	beq.n	eb90 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x12>
    eb8c:	e7ff      	b.n	eb8e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x10>
    eb8e:	e003      	b.n	eb98 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x1a>
    eb90:	2000      	movs	r0, #0
    eb92:	9002      	str	r0, [sp, #8]
    eb94:	e00d      	b.n	ebb2 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
    eb96:	defe      	udf	#254	; 0xfe
    eb98:	9801      	ldr	r0, [sp, #4]
    eb9a:	1d01      	adds	r1, r0, #4
    eb9c:	9105      	str	r1, [sp, #20]
    eb9e:	4608      	mov	r0, r1
    eba0:	f7ff ff5a 	bl	ea58 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>
    eba4:	9000      	str	r0, [sp, #0]
    eba6:	e7ff      	b.n	eba8 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x2a>
    eba8:	9800      	ldr	r0, [sp, #0]
    ebaa:	9003      	str	r0, [sp, #12]
    ebac:	2101      	movs	r1, #1
    ebae:	9102      	str	r1, [sp, #8]
    ebb0:	e7ff      	b.n	ebb2 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
    ebb2:	9802      	ldr	r0, [sp, #8]
    ebb4:	9903      	ldr	r1, [sp, #12]
    ebb6:	b006      	add	sp, #24
    ebb8:	bd80      	pop	{r7, pc}

0000ebba <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>:
    fn clone(&self) -> Level {
    ebba:	b081      	sub	sp, #4
    ebbc:	9000      	str	r0, [sp, #0]
        *self
    ebbe:	6800      	ldr	r0, [r0, #0]
    }
    ebc0:	b001      	add	sp, #4
    ebc2:	4770      	bx	lr

0000ebc4 <_ZN3log6Record7builder17hde62ab0132265febE>:
    pub fn builder() -> RecordBuilder<'a> {
    ebc4:	b580      	push	{r7, lr}
        RecordBuilder::new()
    ebc6:	f000 f802 	bl	ebce <_ZN3log13RecordBuilder3new17haca8312579858419E>
    ebca:	e7ff      	b.n	ebcc <_ZN3log6Record7builder17hde62ab0132265febE+0x8>
    }
    ebcc:	bd80      	pop	{r7, pc}

0000ebce <_ZN3log13RecordBuilder3new17haca8312579858419E>:
    pub fn new() -> RecordBuilder<'a> {
    ebce:	b570      	push	{r4, r5, r6, lr}
    ebd0:	b0aa      	sub	sp, #168	; 0xa8
                args: format_args!(""),
    ebd2:	f64e 61b4 	movw	r1, #61108	; 0xeeb4
    ebd6:	f2c0 0101 	movt	r1, #1
    ebda:	6809      	ldr	r1, [r1, #0]
    ebdc:	466a      	mov	r2, sp
    ebde:	2300      	movs	r3, #0
    ebe0:	6013      	str	r3, [r2, #0]
    ebe2:	aa16      	add	r2, sp, #88	; 0x58
    ebe4:	9004      	str	r0, [sp, #16]
    ebe6:	4610      	mov	r0, r2
    ebe8:	9103      	str	r1, [sp, #12]
    ebea:	461a      	mov	r2, r3
    ebec:	9b03      	ldr	r3, [sp, #12]
    ebee:	f7ff feb1 	bl	e954 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>
    ebf2:	e7ff      	b.n	ebf4 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x26>
    ebf4:	a81f      	add	r0, sp, #124	; 0x7c
                metadata: Metadata::builder().build(),
    ebf6:	f000 f891 	bl	ed1c <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>
    ebfa:	e7ff      	b.n	ebfc <_ZN3log13RecordBuilder3new17haca8312579858419E+0x2e>
    ebfc:	a81c      	add	r0, sp, #112	; 0x70
    ebfe:	a91f      	add	r1, sp, #124	; 0x7c
    ec00:	f000 f8a5 	bl	ed4e <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>
    ec04:	e7ff      	b.n	ec06 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x38>
    ec06:	2000      	movs	r0, #0
                module_path: None,
    ec08:	9024      	str	r0, [sp, #144]	; 0x90
    ec0a:	9023      	str	r0, [sp, #140]	; 0x8c
    ec0c:	9022      	str	r0, [sp, #136]	; 0x88
    ec0e:	2102      	movs	r1, #2
    ec10:	9122      	str	r1, [sp, #136]	; 0x88
                file: None,
    ec12:	9027      	str	r0, [sp, #156]	; 0x9c
    ec14:	9026      	str	r0, [sp, #152]	; 0x98
    ec16:	9025      	str	r0, [sp, #148]	; 0x94
    ec18:	9125      	str	r1, [sp, #148]	; 0x94
                line: None,
    ec1a:	9028      	str	r0, [sp, #160]	; 0xa0
            record: Record {
    ec1c:	981c      	ldr	r0, [sp, #112]	; 0x70
    ec1e:	991d      	ldr	r1, [sp, #116]	; 0x74
    ec20:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    ec22:	9207      	str	r2, [sp, #28]
    ec24:	9106      	str	r1, [sp, #24]
    ec26:	9005      	str	r0, [sp, #20]
    ec28:	a805      	add	r0, sp, #20
    ec2a:	f100 010c 	add.w	r1, r0, #12
    ec2e:	aa16      	add	r2, sp, #88	; 0x58
    ec30:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
    ec34:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    ec38:	9922      	ldr	r1, [sp, #136]	; 0x88
    ec3a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    ec3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
    ec3e:	9310      	str	r3, [sp, #64]	; 0x40
    ec40:	920f      	str	r2, [sp, #60]	; 0x3c
    ec42:	910e      	str	r1, [sp, #56]	; 0x38
    ec44:	9925      	ldr	r1, [sp, #148]	; 0x94
    ec46:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ec48:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    ec4a:	9313      	str	r3, [sp, #76]	; 0x4c
    ec4c:	9212      	str	r2, [sp, #72]	; 0x48
    ec4e:	9111      	str	r1, [sp, #68]	; 0x44
    ec50:	9928      	ldr	r1, [sp, #160]	; 0xa0
    ec52:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    ec54:	9114      	str	r1, [sp, #80]	; 0x50
    ec56:	9215      	str	r2, [sp, #84]	; 0x54
    ec58:	2244      	movs	r2, #68	; 0x44
        return RecordBuilder {
    ec5a:	9904      	ldr	r1, [sp, #16]
    ec5c:	9002      	str	r0, [sp, #8]
    ec5e:	4608      	mov	r0, r1
    ec60:	9902      	ldr	r1, [sp, #8]
    ec62:	f00e fa9b 	bl	1d19c <__aeabi_memcpy>
    }
    ec66:	b02a      	add	sp, #168	; 0xa8
    ec68:	bd70      	pop	{r4, r5, r6, pc}

0000ec6a <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>:
    pub fn args(&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a> {
    ec6a:	b5f0      	push	{r4, r5, r6, r7, lr}
    ec6c:	b087      	sub	sp, #28
    ec6e:	9006      	str	r0, [sp, #24]
    ec70:	466a      	mov	r2, sp
        self.record.args = args;
    ec72:	4613      	mov	r3, r2
    ec74:	e891 50f0 	ldmia.w	r1, {r4, r5, r6, r7, ip, lr}
    ec78:	e883 50f0 	stmia.w	r3, {r4, r5, r6, r7, ip, lr}
    ec7c:	f100 010c 	add.w	r1, r0, #12
    ec80:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
    ec84:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    }
    ec88:	b007      	add	sp, #28
    ec8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ec8c <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>:
    pub fn level(&mut self, level: Level) -> &mut RecordBuilder<'a> {
    ec8c:	b082      	sub	sp, #8
    ec8e:	9000      	str	r0, [sp, #0]
    ec90:	9101      	str	r1, [sp, #4]
        self.record.metadata.level = level;
    ec92:	6001      	str	r1, [r0, #0]
    }
    ec94:	b002      	add	sp, #8
    ec96:	4770      	bx	lr

0000ec98 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>:
    pub fn target(&mut self, target: &'a str) -> &mut RecordBuilder<'a> {
    ec98:	b083      	sub	sp, #12
    ec9a:	9000      	str	r0, [sp, #0]
    ec9c:	9101      	str	r1, [sp, #4]
    ec9e:	9202      	str	r2, [sp, #8]
        self.record.metadata.target = target;
    eca0:	6041      	str	r1, [r0, #4]
    eca2:	6082      	str	r2, [r0, #8]
    }
    eca4:	b003      	add	sp, #12
    eca6:	4770      	bx	lr

0000eca8 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>:
    pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {
    eca8:	b580      	push	{r7, lr}
    ecaa:	b088      	sub	sp, #32
    ecac:	9005      	str	r0, [sp, #20]
    ecae:	9106      	str	r1, [sp, #24]
    ecb0:	9207      	str	r2, [sp, #28]
    ecb2:	ab02      	add	r3, sp, #8
        self.record.module_path = path.map(MaybeStaticStr::Static);
    ecb4:	9001      	str	r0, [sp, #4]
    ecb6:	4618      	mov	r0, r3
    ecb8:	f7ff fedc 	bl	ea74 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
    ecbc:	e7ff      	b.n	ecbe <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE+0x16>
    ecbe:	9802      	ldr	r0, [sp, #8]
    ecc0:	9903      	ldr	r1, [sp, #12]
    ecc2:	9a04      	ldr	r2, [sp, #16]
    ecc4:	9b01      	ldr	r3, [sp, #4]
    ecc6:	62da      	str	r2, [r3, #44]	; 0x2c
    ecc8:	6299      	str	r1, [r3, #40]	; 0x28
    ecca:	6258      	str	r0, [r3, #36]	; 0x24
    }
    eccc:	4618      	mov	r0, r3
    ecce:	b008      	add	sp, #32
    ecd0:	bd80      	pop	{r7, pc}

0000ecd2 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>:
    pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {
    ecd2:	b580      	push	{r7, lr}
    ecd4:	b088      	sub	sp, #32
    ecd6:	9005      	str	r0, [sp, #20]
    ecd8:	9106      	str	r1, [sp, #24]
    ecda:	9207      	str	r2, [sp, #28]
    ecdc:	ab02      	add	r3, sp, #8
        self.record.file = file.map(MaybeStaticStr::Static);
    ecde:	9001      	str	r0, [sp, #4]
    ece0:	4618      	mov	r0, r3
    ece2:	f7ff fec7 	bl	ea74 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
    ece6:	e7ff      	b.n	ece8 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E+0x16>
    ece8:	9802      	ldr	r0, [sp, #8]
    ecea:	9903      	ldr	r1, [sp, #12]
    ecec:	9a04      	ldr	r2, [sp, #16]
    ecee:	9b01      	ldr	r3, [sp, #4]
    ecf0:	639a      	str	r2, [r3, #56]	; 0x38
    ecf2:	6359      	str	r1, [r3, #52]	; 0x34
    ecf4:	6318      	str	r0, [r3, #48]	; 0x30
    }
    ecf6:	4618      	mov	r0, r3
    ecf8:	b008      	add	sp, #32
    ecfa:	bd80      	pop	{r7, pc}

0000ecfc <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>:
    pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {
    ecfc:	b083      	sub	sp, #12
    ecfe:	9000      	str	r0, [sp, #0]
    ed00:	9101      	str	r1, [sp, #4]
    ed02:	9202      	str	r2, [sp, #8]
        self.record.line = line;
    ed04:	63c1      	str	r1, [r0, #60]	; 0x3c
    ed06:	6402      	str	r2, [r0, #64]	; 0x40
    }
    ed08:	b003      	add	sp, #12
    ed0a:	4770      	bx	lr

0000ed0c <_ZN3log13RecordBuilder5build17h83529556a009112eE>:
    pub fn build(&self) -> Record<'a> {
    ed0c:	b580      	push	{r7, lr}
    ed0e:	b082      	sub	sp, #8
    ed10:	9101      	str	r1, [sp, #4]
        self.record.clone()
    ed12:	f000 f8e8 	bl	eee6 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>
    ed16:	e7ff      	b.n	ed18 <_ZN3log13RecordBuilder5build17h83529556a009112eE+0xc>
    }
    ed18:	b002      	add	sp, #8
    ed1a:	bd80      	pop	{r7, pc}

0000ed1c <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>:
    pub fn builder() -> MetadataBuilder<'a> {
    ed1c:	b580      	push	{r7, lr}
        MetadataBuilder::new()
    ed1e:	f000 f802 	bl	ed26 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>
    ed22:	e7ff      	b.n	ed24 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE+0x8>
    }
    ed24:	bd80      	pop	{r7, pc}

0000ed26 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>:
    pub fn new() -> MetadataBuilder<'a> {
    ed26:	b084      	sub	sp, #16
    ed28:	2103      	movs	r1, #3
                level: Level::Info,
    ed2a:	9103      	str	r1, [sp, #12]
            metadata: Metadata {
    ed2c:	9903      	ldr	r1, [sp, #12]
    ed2e:	9100      	str	r1, [sp, #0]
    ed30:	f64e 619c 	movw	r1, #61084	; 0xee9c
    ed34:	f2c0 0101 	movt	r1, #1
    ed38:	9101      	str	r1, [sp, #4]
    ed3a:	2100      	movs	r1, #0
    ed3c:	9102      	str	r1, [sp, #8]
        MetadataBuilder {
    ed3e:	9900      	ldr	r1, [sp, #0]
    ed40:	9a01      	ldr	r2, [sp, #4]
    ed42:	9b02      	ldr	r3, [sp, #8]
    ed44:	6083      	str	r3, [r0, #8]
    ed46:	6042      	str	r2, [r0, #4]
    ed48:	6001      	str	r1, [r0, #0]
    }
    ed4a:	b004      	add	sp, #16
    ed4c:	4770      	bx	lr

0000ed4e <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>:
    pub fn build(&self) -> Metadata<'a> {
    ed4e:	b580      	push	{r7, lr}
    ed50:	b082      	sub	sp, #8
    ed52:	9101      	str	r1, [sp, #4]
        self.metadata.clone()
    ed54:	f000 f91c 	bl	ef90 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
    ed58:	e7ff      	b.n	ed5a <_ZN3log15MetadataBuilder5build17h2478972692162fc0E+0xc>
    }
    ed5a:	b002      	add	sp, #8
    ed5c:	bd80      	pop	{r7, pc}

0000ed5e <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE>:
    fn enabled(&self, _: &Metadata) -> bool {
    ed5e:	b082      	sub	sp, #8
    ed60:	9000      	str	r0, [sp, #0]
    ed62:	9101      	str	r1, [sp, #4]
    ed64:	2000      	movs	r0, #0
    }
    ed66:	b002      	add	sp, #8
    ed68:	4770      	bx	lr

0000ed6a <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE>:
    fn log(&self, _: &Record) {}
    ed6a:	b082      	sub	sp, #8
    ed6c:	9000      	str	r0, [sp, #0]
    ed6e:	9101      	str	r1, [sp, #4]
    ed70:	b002      	add	sp, #8
    ed72:	4770      	bx	lr

0000ed74 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE>:
    fn flush(&self) {}
    ed74:	b081      	sub	sp, #4
    ed76:	9000      	str	r0, [sp, #0]
    ed78:	b001      	add	sp, #4
    ed7a:	4770      	bx	lr

0000ed7c <_ZN3log6logger17hf609e7cc1c031552E>:
}

/// Returns a reference to the logger.
///
/// If a logger has not been set, a no-op implementation is returned.
pub fn logger() -> &'static Log {
    ed7c:	b580      	push	{r7, lr}
    ed7e:	b084      	sub	sp, #16
    ed80:	2004      	movs	r0, #4
    unsafe {
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
    ed82:	f88d 000f 	strb.w	r0, [sp, #15]
    ed86:	f89d 100f 	ldrb.w	r1, [sp, #15]
    ed8a:	f640 10fc 	movw	r0, #2556	; 0x9fc
    ed8e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ed92:	f7ff fe0e 	bl	e9b2 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>
    ed96:	9000      	str	r0, [sp, #0]
    ed98:	e7ff      	b.n	ed9a <_ZN3log6logger17hf609e7cc1c031552E+0x1e>
    ed9a:	9800      	ldr	r0, [sp, #0]
    ed9c:	2802      	cmp	r0, #2
    ed9e:	d109      	bne.n	edb4 <_ZN3log6logger17hf609e7cc1c031552E+0x38>
    eda0:	e7ff      	b.n	eda2 <_ZN3log6logger17hf609e7cc1c031552E+0x26>
            static NOP: NopLogger = NopLogger;
            &NOP
        } else {
            LOGGER
    eda2:	f240 00e8 	movw	r0, #232	; 0xe8
    eda6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    edaa:	6801      	ldr	r1, [r0, #0]
    edac:	6840      	ldr	r0, [r0, #4]
    edae:	9101      	str	r1, [sp, #4]
    edb0:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
    edb2:	e00a      	b.n	edca <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
            &NOP
    edb4:	f64e 60d0 	movw	r0, #61136	; 0xeed0
    edb8:	f2c0 0001 	movt	r0, #1
    edbc:	9001      	str	r0, [sp, #4]
    edbe:	f64e 60b8 	movw	r0, #61112	; 0xeeb8
    edc2:	f2c0 0001 	movt	r0, #1
    edc6:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
    edc8:	e7ff      	b.n	edca <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
    edca:	9801      	ldr	r0, [sp, #4]
    edcc:	9902      	ldr	r1, [sp, #8]
        }
    }
}
    edce:	b004      	add	sp, #16
    edd0:	bd80      	pop	{r7, pc}

0000edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>:

// WARNING: this is not part of the crate's public API and is subject to change at any time
#[doc(hidden)]
pub fn __private_api_log(
    edd2:	b570      	push	{r4, r5, r6, lr}
    edd4:	b0ca      	sub	sp, #296	; 0x128
    edd6:	9141      	str	r1, [sp, #260]	; 0x104
    edd8:	9242      	str	r2, [sp, #264]	; 0x108
    args: fmt::Arguments,
    level: Level,
    &(target, module_path, file, line): &(&str, &'static str, &'static str, u32),
    edda:	6813      	ldr	r3, [r2, #0]
    eddc:	f8d2 c004 	ldr.w	ip, [r2, #4]
    ede0:	9343      	str	r3, [sp, #268]	; 0x10c
    ede2:	f8cd c110 	str.w	ip, [sp, #272]	; 0x110
    ede6:	f8d2 e008 	ldr.w	lr, [r2, #8]
    edea:	68d4      	ldr	r4, [r2, #12]
    edec:	f8cd e114 	str.w	lr, [sp, #276]	; 0x114
    edf0:	9446      	str	r4, [sp, #280]	; 0x118
    edf2:	6915      	ldr	r5, [r2, #16]
    edf4:	6956      	ldr	r6, [r2, #20]
    edf6:	9547      	str	r5, [sp, #284]	; 0x11c
    edf8:	9648      	str	r6, [sp, #288]	; 0x120
    edfa:	6992      	ldr	r2, [r2, #24]
    edfc:	9249      	str	r2, [sp, #292]	; 0x124
) {
    logger().log(
    edfe:	9112      	str	r1, [sp, #72]	; 0x48
    ee00:	9011      	str	r0, [sp, #68]	; 0x44
    ee02:	9310      	str	r3, [sp, #64]	; 0x40
    ee04:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    ee08:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    ee0c:	940d      	str	r4, [sp, #52]	; 0x34
    ee0e:	950c      	str	r5, [sp, #48]	; 0x30
    ee10:	960b      	str	r6, [sp, #44]	; 0x2c
    ee12:	920a      	str	r2, [sp, #40]	; 0x28
    ee14:	f7ff ffb2 	bl	ed7c <_ZN3log6logger17hf609e7cc1c031552E>
    ee18:	9009      	str	r0, [sp, #36]	; 0x24
    ee1a:	9108      	str	r1, [sp, #32]
    ee1c:	e7ff      	b.n	ee1e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x4c>
    ee1e:	a824      	add	r0, sp, #144	; 0x90
        &Record::builder()
    ee20:	f7ff fed0 	bl	ebc4 <_ZN3log6Record7builder17hde62ab0132265febE>
    ee24:	e7ff      	b.n	ee26 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x54>
    ee26:	a835      	add	r0, sp, #212	; 0xd4
            .args(args)
    ee28:	4601      	mov	r1, r0
    ee2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ee2c:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
    ee30:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    ee34:	a924      	add	r1, sp, #144	; 0x90
        &Record::builder()
    ee36:	9007      	str	r0, [sp, #28]
    ee38:	4608      	mov	r0, r1
    ee3a:	9907      	ldr	r1, [sp, #28]
    ee3c:	f7ff ff15 	bl	ec6a <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>
    ee40:	9006      	str	r0, [sp, #24]
    ee42:	e7ff      	b.n	ee44 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x72>
    ee44:	9806      	ldr	r0, [sp, #24]
    ee46:	9912      	ldr	r1, [sp, #72]	; 0x48
    ee48:	f7ff ff20 	bl	ec8c <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>
    ee4c:	9005      	str	r0, [sp, #20]
    ee4e:	e7ff      	b.n	ee50 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x7e>
    ee50:	9805      	ldr	r0, [sp, #20]
    ee52:	9910      	ldr	r1, [sp, #64]	; 0x40
    ee54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ee56:	f7ff ff1f 	bl	ec98 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>
    ee5a:	9004      	str	r0, [sp, #16]
    ee5c:	e7ff      	b.n	ee5e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x8c>
            .level(level)
            .target(target)
            .module_path_static(Some(module_path))
    ee5e:	980e      	ldr	r0, [sp, #56]	; 0x38
    ee60:	903b      	str	r0, [sp, #236]	; 0xec
    ee62:	990d      	ldr	r1, [sp, #52]	; 0x34
    ee64:	913c      	str	r1, [sp, #240]	; 0xf0
        &Record::builder()
    ee66:	993b      	ldr	r1, [sp, #236]	; 0xec
    ee68:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    ee6a:	9804      	ldr	r0, [sp, #16]
    ee6c:	f7ff ff1c 	bl	eca8 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>
    ee70:	9003      	str	r0, [sp, #12]
    ee72:	e7ff      	b.n	ee74 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xa2>
            .file_static(Some(file))
    ee74:	980c      	ldr	r0, [sp, #48]	; 0x30
    ee76:	903d      	str	r0, [sp, #244]	; 0xf4
    ee78:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ee7a:	913e      	str	r1, [sp, #248]	; 0xf8
        &Record::builder()
    ee7c:	993d      	ldr	r1, [sp, #244]	; 0xf4
    ee7e:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    ee80:	9803      	ldr	r0, [sp, #12]
    ee82:	f7ff ff26 	bl	ecd2 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>
    ee86:	9002      	str	r0, [sp, #8]
    ee88:	e7ff      	b.n	ee8a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xb8>
            .line(Some(line))
    ee8a:	980a      	ldr	r0, [sp, #40]	; 0x28
    ee8c:	9040      	str	r0, [sp, #256]	; 0x100
    ee8e:	2101      	movs	r1, #1
    ee90:	913f      	str	r1, [sp, #252]	; 0xfc
        &Record::builder()
    ee92:	993f      	ldr	r1, [sp, #252]	; 0xfc
    ee94:	9a40      	ldr	r2, [sp, #256]	; 0x100
    ee96:	9802      	ldr	r0, [sp, #8]
    ee98:	f7ff ff30 	bl	ecfc <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>
    ee9c:	9001      	str	r0, [sp, #4]
    ee9e:	e7ff      	b.n	eea0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xce>
    eea0:	a813      	add	r0, sp, #76	; 0x4c
    eea2:	9901      	ldr	r1, [sp, #4]
    eea4:	f7ff ff32 	bl	ed0c <_ZN3log13RecordBuilder5build17h83529556a009112eE>
    eea8:	e7ff      	b.n	eeaa <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xd8>
    logger().log(
    eeaa:	9808      	ldr	r0, [sp, #32]
    eeac:	6901      	ldr	r1, [r0, #16]
    eeae:	aa13      	add	r2, sp, #76	; 0x4c
    eeb0:	9809      	ldr	r0, [sp, #36]	; 0x24
    eeb2:	9100      	str	r1, [sp, #0]
    eeb4:	4611      	mov	r1, r2
    eeb6:	9a00      	ldr	r2, [sp, #0]
    eeb8:	4790      	blx	r2
    eeba:	e7ff      	b.n	eebc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xea>
            .build(),
    );
}
    eebc:	b04a      	add	sp, #296	; 0x128
    eebe:	bd70      	pop	{r4, r5, r6, pc}

0000eec0 <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>:
    Static(&'static str),
    eec0:	b082      	sub	sp, #8
    eec2:	9100      	str	r1, [sp, #0]
    eec4:	9201      	str	r2, [sp, #4]
    eec6:	6041      	str	r1, [r0, #4]
    eec8:	6082      	str	r2, [r0, #8]
    eeca:	2100      	movs	r1, #0
    eecc:	6001      	str	r1, [r0, #0]
    eece:	b002      	add	sp, #8
    eed0:	4770      	bx	lr

0000eed2 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>:
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
    eed2:	b081      	sub	sp, #4
    eed4:	9100      	str	r1, [sp, #0]
    eed6:	680a      	ldr	r2, [r1, #0]
    eed8:	684b      	ldr	r3, [r1, #4]
    eeda:	6889      	ldr	r1, [r1, #8]
    eedc:	6081      	str	r1, [r0, #8]
    eede:	6043      	str	r3, [r0, #4]
    eee0:	6002      	str	r2, [r0, #0]
    eee2:	b001      	add	sp, #4
    eee4:	4770      	bx	lr

0000eee6 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>:
#[derive(Clone, Debug)]
    eee6:	b570      	push	{r4, r5, r6, lr}
    eee8:	b09c      	sub	sp, #112	; 0x70
    eeea:	9116      	str	r1, [sp, #88]	; 0x58
    metadata: Metadata<'a>,
    eeec:	9117      	str	r1, [sp, #92]	; 0x5c
    args: fmt::Arguments<'a>,
    eeee:	f101 020c 	add.w	r2, r1, #12
    eef2:	4613      	mov	r3, r2
    eef4:	9218      	str	r2, [sp, #96]	; 0x60
    module_path: Option<MaybeStaticStr<'a>>,
    eef6:	f101 0224 	add.w	r2, r1, #36	; 0x24
    eefa:	4694      	mov	ip, r2
    eefc:	9219      	str	r2, [sp, #100]	; 0x64
    file: Option<MaybeStaticStr<'a>>,
    eefe:	f101 0230 	add.w	r2, r1, #48	; 0x30
    ef02:	4696      	mov	lr, r2
    ef04:	921a      	str	r2, [sp, #104]	; 0x68
    line: Option<u32>,
    ef06:	f101 023c 	add.w	r2, r1, #60	; 0x3c
    ef0a:	4614      	mov	r4, r2
    ef0c:	921b      	str	r2, [sp, #108]	; 0x6c
    ef0e:	aa07      	add	r2, sp, #28
    metadata: Metadata<'a>,
    ef10:	9006      	str	r0, [sp, #24]
    ef12:	4610      	mov	r0, r2
    ef14:	9305      	str	r3, [sp, #20]
    ef16:	f8cd c010 	str.w	ip, [sp, #16]
    ef1a:	f8cd e00c 	str.w	lr, [sp, #12]
    ef1e:	9402      	str	r4, [sp, #8]
    ef20:	f000 f836 	bl	ef90 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
    ef24:	e7ff      	b.n	ef26 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x40>
    ef26:	a80a      	add	r0, sp, #40	; 0x28
    args: fmt::Arguments<'a>,
    ef28:	9905      	ldr	r1, [sp, #20]
    ef2a:	f7ff fdf8 	bl	eb1e <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>
    ef2e:	e7ff      	b.n	ef30 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x4a>
    ef30:	a810      	add	r0, sp, #64	; 0x40
    module_path: Option<MaybeStaticStr<'a>>,
    ef32:	9904      	ldr	r1, [sp, #16]
    ef34:	f7ff fdfc 	bl	eb30 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
    ef38:	e7ff      	b.n	ef3a <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x54>
    ef3a:	a813      	add	r0, sp, #76	; 0x4c
    file: Option<MaybeStaticStr<'a>>,
    ef3c:	9903      	ldr	r1, [sp, #12]
    ef3e:	f7ff fdf7 	bl	eb30 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
    ef42:	e7ff      	b.n	ef44 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x5e>
    line: Option<u32>,
    ef44:	9802      	ldr	r0, [sp, #8]
    ef46:	f7ff fe1a 	bl	eb7e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>
    ef4a:	9001      	str	r0, [sp, #4]
    ef4c:	9100      	str	r1, [sp, #0]
    ef4e:	e7ff      	b.n	ef50 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x6a>
#[derive(Clone, Debug)]
    ef50:	9807      	ldr	r0, [sp, #28]
    ef52:	9908      	ldr	r1, [sp, #32]
    ef54:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ef56:	9b06      	ldr	r3, [sp, #24]
    ef58:	609a      	str	r2, [r3, #8]
    ef5a:	6059      	str	r1, [r3, #4]
    ef5c:	6018      	str	r0, [r3, #0]
    ef5e:	f103 000c 	add.w	r0, r3, #12
    ef62:	a90a      	add	r1, sp, #40	; 0x28
    ef64:	e891 5074 	ldmia.w	r1, {r2, r4, r5, r6, ip, lr}
    ef68:	e880 5074 	stmia.w	r0, {r2, r4, r5, r6, ip, lr}
    ef6c:	9810      	ldr	r0, [sp, #64]	; 0x40
    ef6e:	9911      	ldr	r1, [sp, #68]	; 0x44
    ef70:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ef72:	62da      	str	r2, [r3, #44]	; 0x2c
    ef74:	6299      	str	r1, [r3, #40]	; 0x28
    ef76:	6258      	str	r0, [r3, #36]	; 0x24
    ef78:	9813      	ldr	r0, [sp, #76]	; 0x4c
    ef7a:	9914      	ldr	r1, [sp, #80]	; 0x50
    ef7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ef7e:	639a      	str	r2, [r3, #56]	; 0x38
    ef80:	6359      	str	r1, [r3, #52]	; 0x34
    ef82:	6318      	str	r0, [r3, #48]	; 0x30
    ef84:	9801      	ldr	r0, [sp, #4]
    ef86:	63d8      	str	r0, [r3, #60]	; 0x3c
    ef88:	9900      	ldr	r1, [sp, #0]
    ef8a:	6419      	str	r1, [r3, #64]	; 0x40
    ef8c:	b01c      	add	sp, #112	; 0x70
    ef8e:	bd70      	pop	{r4, r5, r6, pc}

0000ef90 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>:
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
    ef90:	b580      	push	{r7, lr}
    ef92:	b088      	sub	sp, #32
    ef94:	9105      	str	r1, [sp, #20]
    level: Level,
    ef96:	9106      	str	r1, [sp, #24]
    target: &'a str,
    ef98:	1d0a      	adds	r2, r1, #4
    ef9a:	4613      	mov	r3, r2
    ef9c:	9207      	str	r2, [sp, #28]
    level: Level,
    ef9e:	9004      	str	r0, [sp, #16]
    efa0:	4608      	mov	r0, r1
    efa2:	9303      	str	r3, [sp, #12]
    efa4:	f7ff fe09 	bl	ebba <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>
    efa8:	9002      	str	r0, [sp, #8]
    efaa:	e7ff      	b.n	efac <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x1c>
    target: &'a str,
    efac:	9803      	ldr	r0, [sp, #12]
    efae:	f7ff fd58 	bl	ea62 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>
    efb2:	9001      	str	r0, [sp, #4]
    efb4:	9100      	str	r1, [sp, #0]
    efb6:	e7ff      	b.n	efb8 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x28>
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
    efb8:	9802      	ldr	r0, [sp, #8]
    efba:	9904      	ldr	r1, [sp, #16]
    efbc:	6008      	str	r0, [r1, #0]
    efbe:	9a01      	ldr	r2, [sp, #4]
    efc0:	604a      	str	r2, [r1, #4]
    efc2:	9b00      	ldr	r3, [sp, #0]
    efc4:	608b      	str	r3, [r1, #8]
    efc6:	b008      	add	sp, #32
    efc8:	bd80      	pop	{r7, pc}

0000efca <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>:
pub use hal::{ Delay, GPIO, SPI };  //  Export `hal` types GPIO and SPI

pub mod spi;  //  Export Non-Blocking SPI API

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
pub fn sysinit() {
    efca:	b580      	push	{r7, lr}
    unsafe { rust_sysinit(); }
    efcc:	f00c fba2 	bl	1b714 <rust_sysinit>
    efd0:	e7ff      	b.n	efd2 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0x8>
    sys::console::flush();
    efd2:	f000 fbba 	bl	f74a <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    efd6:	e7ff      	b.n	efd8 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0xe>
}
    efd8:	bd80      	pop	{r7, pc}

0000efda <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>:
            rep: StrnRep::CStr(cstr)
        }
    }

    /// Return a pointer to the string
    pub fn as_ptr(&self) -> *const u8 {
    efda:	b580      	push	{r7, lr}
    efdc:	b086      	sub	sp, #24
    efde:	9002      	str	r0, [sp, #8]
        match self.rep {
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    efe0:	7801      	ldrb	r1, [r0, #0]
    efe2:	07ca      	lsls	r2, r1, #31
    efe4:	2a00      	cmp	r2, #0
    efe6:	9000      	str	r0, [sp, #0]
    efe8:	d006      	beq.n	eff8 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x1e>
    efea:	e7ff      	b.n	efec <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x12>
            StrnRep::CStr(cstr)  => { cstr }
    efec:	9800      	ldr	r0, [sp, #0]
    efee:	6841      	ldr	r1, [r0, #4]
    eff0:	9103      	str	r1, [sp, #12]
    eff2:	9101      	str	r1, [sp, #4]
        match self.rep {
    eff4:	e00c      	b.n	f010 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
    eff6:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    eff8:	9800      	ldr	r0, [sp, #0]
    effa:	6841      	ldr	r1, [r0, #4]
    effc:	6882      	ldr	r2, [r0, #8]
    effe:	9104      	str	r1, [sp, #16]
    f000:	9205      	str	r2, [sp, #20]
    f002:	4608      	mov	r0, r1
    f004:	4611      	mov	r1, r2
    f006:	f7ff fc57 	bl	e8b8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    f00a:	9001      	str	r0, [sp, #4]
    f00c:	e7ff      	b.n	f00e <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x34>
        match self.rep {
    f00e:	e7ff      	b.n	f010 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
        }
    }
    f010:	9801      	ldr	r0, [sp, #4]
    f012:	b006      	add	sp, #24
    f014:	bd80      	pop	{r7, pc}

0000f016 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>:
            }
        }
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
    f016:	b5b0      	push	{r4, r5, r7, lr}
    f018:	b0b2      	sub	sp, #200	; 0xc8
    f01a:	9029      	str	r0, [sp, #164]	; 0xa4
        match self.rep {
            StrnRep::ByteStr(bs) => {         
    f01c:	7801      	ldrb	r1, [r0, #0]
    f01e:	07ca      	lsls	r2, r1, #31
    f020:	2a00      	cmp	r2, #0
    f022:	900e      	str	r0, [sp, #56]	; 0x38
    f024:	d005      	beq.n	f032 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x1c>
    f026:	e7ff      	b.n	f028 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
            }
            StrnRep::CStr(_cstr)  => {}
    f028:	980e      	ldr	r0, [sp, #56]	; 0x38
    f02a:	6841      	ldr	r1, [r0, #4]
    f02c:	912a      	str	r1, [sp, #168]	; 0xa8
        match self.rep {
    f02e:	e096      	b.n	f15e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
    f030:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => {         
    f032:	980e      	ldr	r0, [sp, #56]	; 0x38
    f034:	6841      	ldr	r1, [r0, #4]
    f036:	6882      	ldr	r2, [r0, #8]
    f038:	912b      	str	r1, [sp, #172]	; 0xac
    f03a:	922c      	str	r2, [sp, #176]	; 0xb0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    f03c:	4608      	mov	r0, r1
    f03e:	4611      	mov	r1, r2
    f040:	f000 fabe 	bl	f5c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>
    f044:	9011      	str	r0, [sp, #68]	; 0x44
    f046:	e7ff      	b.n	f048 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x32>
    f048:	f64e 60d8 	movw	r0, #61144	; 0xeed8
    f04c:	f2c0 0001 	movt	r0, #1
    f050:	6800      	ldr	r0, [r0, #0]
    f052:	a911      	add	r1, sp, #68	; 0x44
    f054:	910f      	str	r1, [sp, #60]	; 0x3c
    f056:	9010      	str	r0, [sp, #64]	; 0x40
    f058:	980f      	ldr	r0, [sp, #60]	; 0x3c
    f05a:	902d      	str	r0, [sp, #180]	; 0xb4
    f05c:	9910      	ldr	r1, [sp, #64]	; 0x40
    f05e:	912e      	str	r1, [sp, #184]	; 0xb8
    f060:	900d      	str	r0, [sp, #52]	; 0x34
    f062:	910c      	str	r1, [sp, #48]	; 0x30
    f064:	f000 fee5 	bl	fe32 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>
    f068:	900b      	str	r0, [sp, #44]	; 0x2c
    f06a:	e7ff      	b.n	f06c <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x56>
    f06c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f06e:	07c1      	lsls	r1, r0, #31
    f070:	2900      	cmp	r1, #0
    f072:	d001      	beq.n	f078 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x62>
    f074:	e7ff      	b.n	f076 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x60>
        }
    }
    f076:	e072      	b.n	f15e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    f078:	f64e 7030 	movw	r0, #61232	; 0xef30
    f07c:	f2c0 0001 	movt	r0, #1
    f080:	6801      	ldr	r1, [r0, #0]
    f082:	980d      	ldr	r0, [sp, #52]	; 0x34
    f084:	9021      	str	r0, [sp, #132]	; 0x84
    f086:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f088:	9222      	str	r2, [sp, #136]	; 0x88
    f08a:	f64e 7344 	movw	r3, #61252	; 0xef44
    f08e:	f2c0 0301 	movt	r3, #1
    f092:	681b      	ldr	r3, [r3, #0]
    f094:	f64e 7c48 	movw	ip, #61256	; 0xef48
    f098:	f2c0 0c01 	movt	ip, #1
    f09c:	f8dc c000 	ldr.w	ip, [ip]
    f0a0:	46ee      	mov	lr, sp
    f0a2:	2400      	movs	r4, #0
    f0a4:	f8ce 4000 	str.w	r4, [lr]
    f0a8:	a823      	add	r0, sp, #140	; 0x8c
    f0aa:	2201      	movs	r2, #1
    f0ac:	910a      	str	r1, [sp, #40]	; 0x28
    f0ae:	4619      	mov	r1, r3
    f0b0:	4663      	mov	r3, ip
    f0b2:	f000 f856 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f0b6:	e7ff      	b.n	f0b8 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xa2>
    f0b8:	a821      	add	r0, sp, #132	; 0x84
    f0ba:	901e      	str	r0, [sp, #120]	; 0x78
    f0bc:	a822      	add	r0, sp, #136	; 0x88
    f0be:	901f      	str	r0, [sp, #124]	; 0x7c
    f0c0:	a823      	add	r0, sp, #140	; 0x8c
    f0c2:	9020      	str	r0, [sp, #128]	; 0x80
    f0c4:	981e      	ldr	r0, [sp, #120]	; 0x78
    f0c6:	902f      	str	r0, [sp, #188]	; 0xbc
    f0c8:	991f      	ldr	r1, [sp, #124]	; 0x7c
    f0ca:	9130      	str	r1, [sp, #192]	; 0xc0
    f0cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
    f0ce:	9231      	str	r2, [sp, #196]	; 0xc4
    f0d0:	f64f 43eb 	movw	r3, #64747	; 0xfceb
    f0d4:	f2c0 0300 	movt	r3, #0
    f0d8:	9109      	str	r1, [sp, #36]	; 0x24
    f0da:	4619      	mov	r1, r3
    f0dc:	9208      	str	r2, [sp, #32]
    f0de:	f000 ff53 	bl	ff88 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    f0e2:	9007      	str	r0, [sp, #28]
    f0e4:	9106      	str	r1, [sp, #24]
    f0e6:	e7ff      	b.n	f0e8 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xd2>
    f0e8:	f64f 41eb 	movw	r1, #64747	; 0xfceb
    f0ec:	f2c0 0100 	movt	r1, #0
    f0f0:	9809      	ldr	r0, [sp, #36]	; 0x24
    f0f2:	f000 ff49 	bl	ff88 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    f0f6:	9005      	str	r0, [sp, #20]
    f0f8:	9104      	str	r1, [sp, #16]
    f0fa:	e7ff      	b.n	f0fc <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xe6>
    f0fc:	f646 71c3 	movw	r1, #28611	; 0x6fc3
    f100:	f2c0 0101 	movt	r1, #1
    f104:	9808      	ldr	r0, [sp, #32]
    f106:	f000 ff69 	bl	ffdc <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    f10a:	9003      	str	r0, [sp, #12]
    f10c:	9102      	str	r1, [sp, #8]
    f10e:	e7ff      	b.n	f110 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xfa>
    f110:	9807      	ldr	r0, [sp, #28]
    f112:	9018      	str	r0, [sp, #96]	; 0x60
    f114:	9906      	ldr	r1, [sp, #24]
    f116:	9119      	str	r1, [sp, #100]	; 0x64
    f118:	9a05      	ldr	r2, [sp, #20]
    f11a:	921a      	str	r2, [sp, #104]	; 0x68
    f11c:	9b04      	ldr	r3, [sp, #16]
    f11e:	931b      	str	r3, [sp, #108]	; 0x6c
    f120:	f8dd c00c 	ldr.w	ip, [sp, #12]
    f124:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    f128:	f8dd e008 	ldr.w	lr, [sp, #8]
    f12c:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    f130:	466c      	mov	r4, sp
    f132:	2503      	movs	r5, #3
    f134:	6025      	str	r5, [r4, #0]
    f136:	a812      	add	r0, sp, #72	; 0x48
    f138:	ab18      	add	r3, sp, #96	; 0x60
    f13a:	990a      	ldr	r1, [sp, #40]	; 0x28
    f13c:	462a      	mov	r2, r5
    f13e:	f000 f810 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f142:	e7ff      	b.n	f144 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12e>
    f144:	f64e 7064 	movw	r0, #61284	; 0xef64
    f148:	f2c0 0001 	movt	r0, #1
    f14c:	f007 fc4b 	bl	169e6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    f150:	9001      	str	r0, [sp, #4]
    f152:	e7ff      	b.n	f154 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x13e>
    f154:	a812      	add	r0, sp, #72	; 0x48
    f156:	9901      	ldr	r1, [sp, #4]
    f158:	f007 fc82 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    f15c:	defe      	udf	#254	; 0xfe
    }
    f15e:	b032      	add	sp, #200	; 0xc8
    f160:	bdb0      	pop	{r4, r5, r7, pc}

0000f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>:
    f162:	b580      	push	{r7, lr}
    f164:	b086      	sub	sp, #24
    f166:	f8dd c020 	ldr.w	ip, [sp, #32]
    f16a:	9102      	str	r1, [sp, #8]
    f16c:	9203      	str	r2, [sp, #12]
    f16e:	9304      	str	r3, [sp, #16]
    f170:	f8cd c014 	str.w	ip, [sp, #20]
    f174:	f04f 0e00 	mov.w	lr, #0
    f178:	f8cd e004 	str.w	lr, [sp, #4]
    f17c:	f8cd e000 	str.w	lr, [sp]
    f180:	f8cd e000 	str.w	lr, [sp]
    f184:	6001      	str	r1, [r0, #0]
    f186:	6042      	str	r2, [r0, #4]
    f188:	9900      	ldr	r1, [sp, #0]
    f18a:	9a01      	ldr	r2, [sp, #4]
    f18c:	6081      	str	r1, [r0, #8]
    f18e:	60c2      	str	r2, [r0, #12]
    f190:	6103      	str	r3, [r0, #16]
    f192:	f8c0 c014 	str.w	ip, [r0, #20]
    f196:	b006      	add	sp, #24
    f198:	bd80      	pop	{r7, pc}

0000f19a <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>:
    f19a:	b082      	sub	sp, #8
    f19c:	9001      	str	r0, [sp, #4]
    f19e:	7800      	ldrb	r0, [r0, #0]
    f1a0:	07c0      	lsls	r0, r0, #31
    f1a2:	2800      	cmp	r0, #0
    f1a4:	d004      	beq.n	f1b0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x16>
    f1a6:	e7ff      	b.n	f1a8 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0xe>
    f1a8:	2000      	movs	r0, #0
    f1aa:	f88d 0003 	strb.w	r0, [sp, #3]
    f1ae:	e003      	b.n	f1b8 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    f1b0:	2001      	movs	r0, #1
    f1b2:	f88d 0003 	strb.w	r0, [sp, #3]
    f1b6:	e7ff      	b.n	f1b8 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    f1b8:	f89d 0003 	ldrb.w	r0, [sp, #3]
    f1bc:	b002      	add	sp, #8
    f1be:	4770      	bx	lr

0000f1c0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>:
    f1c0:	b08a      	sub	sp, #40	; 0x28
    f1c2:	9005      	str	r0, [sp, #20]
    f1c4:	9107      	str	r1, [sp, #28]
    f1c6:	9208      	str	r2, [sp, #32]
    f1c8:	9805      	ldr	r0, [sp, #20]
    f1ca:	f1b0 0c01 	subs.w	ip, r0, #1
    f1ce:	bf18      	it	ne
    f1d0:	f04f 0c01 	movne.w	ip, #1
    f1d4:	2801      	cmp	r0, #1
    f1d6:	9304      	str	r3, [sp, #16]
    f1d8:	9203      	str	r2, [sp, #12]
    f1da:	9102      	str	r1, [sp, #8]
    f1dc:	d010      	beq.n	f200 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x40>
    f1de:	e7ff      	b.n	f1e0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x20>
    f1e0:	9805      	ldr	r0, [sp, #20]
    f1e2:	9006      	str	r0, [sp, #24]
    f1e4:	4668      	mov	r0, sp
    f1e6:	9904      	ldr	r1, [sp, #16]
    f1e8:	6001      	str	r1, [r0, #0]
    f1ea:	f64e 7374 	movw	r3, #61300	; 0xef74
    f1ee:	f2c0 0301 	movt	r3, #1
    f1f2:	aa06      	add	r2, sp, #24
    f1f4:	9802      	ldr	r0, [sp, #8]
    f1f6:	9903      	ldr	r1, [sp, #12]
    f1f8:	f007 fbce 	bl	16998 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    f1fc:	defe      	udf	#254	; 0xfe
    f1fe:	defe      	udf	#254	; 0xfe
    f200:	9805      	ldr	r0, [sp, #20]
    f202:	2801      	cmp	r0, #1
    f204:	d102      	bne.n	f20c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x4c>
    f206:	e7ff      	b.n	f208 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>
    f208:	b00a      	add	sp, #40	; 0x28
    f20a:	4770      	bx	lr
    f20c:	e7fc      	b.n	f208 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>

0000f20e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>:
    f20e:	b580      	push	{r7, lr}
    f210:	b082      	sub	sp, #8
    f212:	9001      	str	r0, [sp, #4]
    f214:	f7ff ffc1 	bl	f19a <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>
    f218:	9000      	str	r0, [sp, #0]
    f21a:	e7ff      	b.n	f21c <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E+0xe>
    f21c:	2001      	movs	r0, #1
    f21e:	9900      	ldr	r1, [sp, #0]
    f220:	4388      	bics	r0, r1
    f222:	b002      	add	sp, #8
    f224:	bd80      	pop	{r7, pc}

0000f226 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>:
    f226:	b082      	sub	sp, #8
    f228:	9001      	str	r0, [sp, #4]
    f22a:	9000      	str	r0, [sp, #0]
    f22c:	9800      	ldr	r0, [sp, #0]
    f22e:	b002      	add	sp, #8
    f230:	4770      	bx	lr

0000f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>:
    f232:	b081      	sub	sp, #4
    f234:	4601      	mov	r1, r0
    f236:	f88d 0003 	strb.w	r0, [sp, #3]
    f23a:	b001      	add	sp, #4
    f23c:	4770      	bx	lr

0000f23e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>:
    f23e:	b081      	sub	sp, #4
    f240:	9000      	str	r0, [sp, #0]
    f242:	b001      	add	sp, #4
    f244:	4770      	bx	lr

0000f246 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>:
    f246:	b580      	push	{r7, lr}
    f248:	b08a      	sub	sp, #40	; 0x28
    f24a:	9007      	str	r0, [sp, #28]
    f24c:	9108      	str	r1, [sp, #32]
    f24e:	9209      	str	r2, [sp, #36]	; 0x24
    f250:	2300      	movs	r3, #0
    f252:	9305      	str	r3, [sp, #20]
    f254:	9006      	str	r0, [sp, #24]
    f256:	9805      	ldr	r0, [sp, #20]
    f258:	9b06      	ldr	r3, [sp, #24]
    f25a:	9104      	str	r1, [sp, #16]
    f25c:	4619      	mov	r1, r3
    f25e:	9b04      	ldr	r3, [sp, #16]
    f260:	9203      	str	r2, [sp, #12]
    f262:	461a      	mov	r2, r3
    f264:	9b03      	ldr	r3, [sp, #12]
    f266:	f000 f828 	bl	f2ba <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    f26a:	9002      	str	r0, [sp, #8]
    f26c:	9101      	str	r1, [sp, #4]
    f26e:	e7ff      	b.n	f270 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E+0x2a>
    f270:	9802      	ldr	r0, [sp, #8]
    f272:	9901      	ldr	r1, [sp, #4]
    f274:	b00a      	add	sp, #40	; 0x28
    f276:	bd80      	pop	{r7, pc}

0000f278 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>:
    f278:	b580      	push	{r7, lr}
    f27a:	b08a      	sub	sp, #40	; 0x28
    f27c:	9006      	str	r0, [sp, #24]
    f27e:	9107      	str	r1, [sp, #28]
    f280:	9208      	str	r2, [sp, #32]
    f282:	9309      	str	r3, [sp, #36]	; 0x24
    f284:	9005      	str	r0, [sp, #20]
    f286:	4610      	mov	r0, r2
    f288:	9104      	str	r1, [sp, #16]
    f28a:	4619      	mov	r1, r3
    f28c:	f7ff faf5 	bl	e87a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    f290:	9003      	str	r0, [sp, #12]
    f292:	e7ff      	b.n	f294 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x1c>
    f294:	9803      	ldr	r0, [sp, #12]
    f296:	9905      	ldr	r1, [sp, #20]
    f298:	f7ff fa76 	bl	e788 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    f29c:	9002      	str	r0, [sp, #8]
    f29e:	e7ff      	b.n	f2a0 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x28>
    f2a0:	9804      	ldr	r0, [sp, #16]
    f2a2:	9905      	ldr	r1, [sp, #20]
    f2a4:	1a41      	subs	r1, r0, r1
    f2a6:	9802      	ldr	r0, [sp, #8]
    f2a8:	f000 f8bb 	bl	f422 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
    f2ac:	9001      	str	r0, [sp, #4]
    f2ae:	9100      	str	r1, [sp, #0]
    f2b0:	e7ff      	b.n	f2b2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x3a>
    f2b2:	9801      	ldr	r0, [sp, #4]
    f2b4:	9900      	ldr	r1, [sp, #0]
    f2b6:	b00a      	add	sp, #40	; 0x28
    f2b8:	bd80      	pop	{r7, pc}

0000f2ba <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>:
    f2ba:	b580      	push	{r7, lr}
    f2bc:	b08c      	sub	sp, #48	; 0x30
    f2be:	9008      	str	r0, [sp, #32]
    f2c0:	9109      	str	r1, [sp, #36]	; 0x24
    f2c2:	920a      	str	r2, [sp, #40]	; 0x28
    f2c4:	930b      	str	r3, [sp, #44]	; 0x2c
    f2c6:	4288      	cmp	r0, r1
    f2c8:	9307      	str	r3, [sp, #28]
    f2ca:	9206      	str	r2, [sp, #24]
    f2cc:	9105      	str	r1, [sp, #20]
    f2ce:	9004      	str	r0, [sp, #16]
    f2d0:	d806      	bhi.n	f2e0 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x26>
    f2d2:	e7ff      	b.n	f2d4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x1a>
    f2d4:	9806      	ldr	r0, [sp, #24]
    f2d6:	9907      	ldr	r1, [sp, #28]
    f2d8:	f7ff fae6 	bl	e8a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f2dc:	9003      	str	r0, [sp, #12]
    f2de:	e004      	b.n	f2ea <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x30>
    f2e0:	9804      	ldr	r0, [sp, #16]
    f2e2:	9905      	ldr	r1, [sp, #20]
    f2e4:	f008 fafb 	bl	178de <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
    f2e8:	defe      	udf	#254	; 0xfe
    f2ea:	9805      	ldr	r0, [sp, #20]
    f2ec:	9903      	ldr	r1, [sp, #12]
    f2ee:	4288      	cmp	r0, r1
    f2f0:	d809      	bhi.n	f306 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x4c>
    f2f2:	e7ff      	b.n	f2f4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x3a>
    f2f4:	9804      	ldr	r0, [sp, #16]
    f2f6:	9905      	ldr	r1, [sp, #20]
    f2f8:	9a06      	ldr	r2, [sp, #24]
    f2fa:	9b07      	ldr	r3, [sp, #28]
    f2fc:	f7ff ffbc 	bl	f278 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>
    f300:	9002      	str	r0, [sp, #8]
    f302:	9101      	str	r1, [sp, #4]
    f304:	e00a      	b.n	f31c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x62>
    f306:	9806      	ldr	r0, [sp, #24]
    f308:	9907      	ldr	r1, [sp, #28]
    f30a:	f7ff facd 	bl	e8a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f30e:	9000      	str	r0, [sp, #0]
    f310:	e7ff      	b.n	f312 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x58>
    f312:	9805      	ldr	r0, [sp, #20]
    f314:	9900      	ldr	r1, [sp, #0]
    f316:	f008 fac0 	bl	1789a <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
    f31a:	defe      	udf	#254	; 0xfe
    f31c:	9802      	ldr	r0, [sp, #8]
    f31e:	9901      	ldr	r1, [sp, #4]
    f320:	b00c      	add	sp, #48	; 0x30
    f322:	bd80      	pop	{r7, pc}

0000f324 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>:
    f324:	b081      	sub	sp, #4
    f326:	9000      	str	r0, [sp, #0]
    f328:	b001      	add	sp, #4
    f32a:	4770      	bx	lr

0000f32c <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    f32c:	b580      	push	{r7, lr}
    f32e:	b082      	sub	sp, #8
    f330:	9001      	str	r0, [sp, #4]
    f332:	f00a fe39 	bl	19fa8 <os_eventq_run>
    f336:	e7ff      	b.n	f338 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE+0xc>
    f338:	2001      	movs	r0, #1
    f33a:	b002      	add	sp, #8
    f33c:	bd80      	pop	{r7, pc}

0000f33e <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    f33e:	b580      	push	{r7, lr}
    f340:	b084      	sub	sp, #16
    f342:	9002      	str	r0, [sp, #8]
    f344:	f00a fe5c 	bl	1a000 <os_eventq_dflt_get>
    f348:	4601      	mov	r1, r0
    f34a:	9003      	str	r0, [sp, #12]
    f34c:	9101      	str	r1, [sp, #4]
    f34e:	e7ff      	b.n	f350 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE+0x12>
    f350:	9801      	ldr	r0, [sp, #4]
    f352:	9902      	ldr	r1, [sp, #8]
    f354:	6048      	str	r0, [r1, #4]
    f356:	2200      	movs	r2, #0
    f358:	600a      	str	r2, [r1, #0]
    f35a:	b004      	add	sp, #16
    f35c:	bd80      	pop	{r7, pc}

0000f35e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>:
impl Default for os_task_stailq {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    f35e:	b570      	push	{r4, r5, r6, lr}
    f360:	b09c      	sub	sp, #112	; 0x70
    f362:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
    f366:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
    f36a:	9c22      	ldr	r4, [sp, #136]	; 0x88
    f36c:	9d21      	ldr	r5, [sp, #132]	; 0x84
    f36e:	9e20      	ldr	r6, [sp, #128]	; 0x80
    f370:	9013      	str	r0, [sp, #76]	; 0x4c
    f372:	9114      	str	r1, [sp, #80]	; 0x50
    f374:	9215      	str	r2, [sp, #84]	; 0x54
    f376:	9316      	str	r3, [sp, #88]	; 0x58
    f378:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
    f37c:	9418      	str	r4, [sp, #96]	; 0x60
    f37e:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
    f382:	f8ad c06a 	strh.w	ip, [sp, #106]	; 0x6a
    f386:	9011      	str	r0, [sp, #68]	; 0x44
    f388:	4608      	mov	r0, r1
    f38a:	9310      	str	r3, [sp, #64]	; 0x40
    f38c:	920f      	str	r2, [sp, #60]	; 0x3c
    f38e:	910e      	str	r1, [sp, #56]	; 0x38
    f390:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    f394:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    f398:	940b      	str	r4, [sp, #44]	; 0x2c
    f39a:	950a      	str	r5, [sp, #40]	; 0x28
    f39c:	9609      	str	r6, [sp, #36]	; 0x24
    f39e:	f7ff fe3a 	bl	f016 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>
    f3a2:	e7ff      	b.n	f3a4 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x46>
    f3a4:	980e      	ldr	r0, [sp, #56]	; 0x38
    f3a6:	f7ff fe18 	bl	efda <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>
    f3aa:	9008      	str	r0, [sp, #32]
    f3ac:	e7ff      	b.n	f3ae <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x50>
    f3ae:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f3b0:	990c      	ldr	r1, [sp, #48]	; 0x30
    f3b2:	f000 f93b 	bl	f62c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>
    f3b6:	9007      	str	r0, [sp, #28]
    f3b8:	e7ff      	b.n	f3ba <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x5c>
    f3ba:	980d      	ldr	r0, [sp, #52]	; 0x34
    f3bc:	b281      	uxth	r1, r0
    f3be:	466a      	mov	r2, sp
    f3c0:	60d1      	str	r1, [r2, #12]
    f3c2:	9907      	ldr	r1, [sp, #28]
    f3c4:	6091      	str	r1, [r2, #8]
    f3c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f3c8:	6053      	str	r3, [r2, #4]
    f3ca:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    f3ce:	fa5f fe8c 	uxtb.w	lr, ip
    f3d2:	f8c2 e000 	str.w	lr, [r2]
    f3d6:	9811      	ldr	r0, [sp, #68]	; 0x44
    f3d8:	9908      	ldr	r1, [sp, #32]
    f3da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f3dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f3de:	f00b fbaf 	bl	1ab40 <os_task_init>
    f3e2:	4601      	mov	r1, r0
    f3e4:	901b      	str	r0, [sp, #108]	; 0x6c
    f3e6:	9106      	str	r1, [sp, #24]
    f3e8:	e7ff      	b.n	f3ea <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x8c>
    f3ea:	9806      	ldr	r0, [sp, #24]
    f3ec:	2800      	cmp	r0, #0
    f3ee:	d005      	beq.n	f3fc <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x9e>
    f3f0:	e7ff      	b.n	f3f2 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x94>
    f3f2:	9806      	ldr	r0, [sp, #24]
    f3f4:	f003 fedc 	bl	131b0 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>
    f3f8:	9005      	str	r0, [sp, #20]
    f3fa:	e004      	b.n	f406 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xa8>
    f3fc:	2000      	movs	r0, #0
    f3fe:	9012      	str	r0, [sp, #72]	; 0x48
    f400:	2001      	movs	r0, #1
    f402:	9012      	str	r0, [sp, #72]	; 0x48
    f404:	e002      	b.n	f40c <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    f406:	9805      	ldr	r0, [sp, #20]
    f408:	9012      	str	r0, [sp, #72]	; 0x48
    f40a:	e7ff      	b.n	f40c <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    f40c:	9812      	ldr	r0, [sp, #72]	; 0x48
    f40e:	b01c      	add	sp, #112	; 0x70
    f410:	bd70      	pop	{r4, r5, r6, pc}

0000f412 <_ZN4core3ptr13drop_in_place17h1982c2483e0a2028E>:
    f412:	b081      	sub	sp, #4
    f414:	9000      	str	r0, [sp, #0]
    f416:	b001      	add	sp, #4
    f418:	4770      	bx	lr

0000f41a <_ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E>:
    f41a:	b081      	sub	sp, #4
    f41c:	9000      	str	r0, [sp, #0]
    f41e:	b001      	add	sp, #4
    f420:	4770      	bx	lr

0000f422 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>:
    f422:	b580      	push	{r7, lr}
    f424:	b084      	sub	sp, #16
    f426:	9002      	str	r0, [sp, #8]
    f428:	9103      	str	r1, [sp, #12]
    f42a:	f000 f993 	bl	f754 <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>
    f42e:	9001      	str	r0, [sp, #4]
    f430:	9100      	str	r1, [sp, #0]
    f432:	e7ff      	b.n	f434 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE+0x12>
    f434:	9801      	ldr	r0, [sp, #4]
    f436:	9900      	ldr	r1, [sp, #0]
    f438:	b004      	add	sp, #16
    f43a:	bd80      	pop	{r7, pc}

0000f43c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>:
    f43c:	b5b0      	push	{r4, r5, r7, lr}
    f43e:	b0b8      	sub	sp, #224	; 0xe0
    f440:	902f      	str	r0, [sp, #188]	; 0xbc
    f442:	9130      	str	r1, [sp, #192]	; 0xc0
    f444:	9231      	str	r2, [sp, #196]	; 0xc4
    f446:	9332      	str	r3, [sp, #200]	; 0xc8
    f448:	9013      	str	r0, [sp, #76]	; 0x4c
    f44a:	9112      	str	r1, [sp, #72]	; 0x48
    f44c:	9311      	str	r3, [sp, #68]	; 0x44
    f44e:	9210      	str	r2, [sp, #64]	; 0x40
    f450:	f7ff fa2a 	bl	e8a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f454:	9016      	str	r0, [sp, #88]	; 0x58
    f456:	e7ff      	b.n	f458 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x1c>
    f458:	9810      	ldr	r0, [sp, #64]	; 0x40
    f45a:	9911      	ldr	r1, [sp, #68]	; 0x44
    f45c:	f7ff fa24 	bl	e8a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f460:	9017      	str	r0, [sp, #92]	; 0x5c
    f462:	e7ff      	b.n	f464 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x28>
    f464:	a816      	add	r0, sp, #88	; 0x58
    f466:	9014      	str	r0, [sp, #80]	; 0x50
    f468:	a817      	add	r0, sp, #92	; 0x5c
    f46a:	9015      	str	r0, [sp, #84]	; 0x54
    f46c:	9814      	ldr	r0, [sp, #80]	; 0x50
    f46e:	9033      	str	r0, [sp, #204]	; 0xcc
    f470:	9915      	ldr	r1, [sp, #84]	; 0x54
    f472:	9134      	str	r1, [sp, #208]	; 0xd0
    f474:	6802      	ldr	r2, [r0, #0]
    f476:	680b      	ldr	r3, [r1, #0]
    f478:	429a      	cmp	r2, r3
    f47a:	900f      	str	r0, [sp, #60]	; 0x3c
    f47c:	910e      	str	r1, [sp, #56]	; 0x38
    f47e:	d106      	bne.n	f48e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x52>
    f480:	e7ff      	b.n	f482 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x46>
    f482:	9810      	ldr	r0, [sp, #64]	; 0x40
    f484:	9911      	ldr	r1, [sp, #68]	; 0x44
    f486:	f7ff fa17 	bl	e8b8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    f48a:	900d      	str	r0, [sp, #52]	; 0x34
    f48c:	e072      	b.n	f574 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x138>
    f48e:	f64e 70d8 	movw	r0, #61400	; 0xefd8
    f492:	f2c0 0001 	movt	r0, #1
    f496:	6801      	ldr	r1, [r0, #0]
    f498:	980f      	ldr	r0, [sp, #60]	; 0x3c
    f49a:	9027      	str	r0, [sp, #156]	; 0x9c
    f49c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f49e:	9228      	str	r2, [sp, #160]	; 0xa0
    f4a0:	f24f 0318 	movw	r3, #61464	; 0xf018
    f4a4:	f2c0 0301 	movt	r3, #1
    f4a8:	681b      	ldr	r3, [r3, #0]
    f4aa:	f24f 0c1c 	movw	ip, #61468	; 0xf01c
    f4ae:	f2c0 0c01 	movt	ip, #1
    f4b2:	f8dc c000 	ldr.w	ip, [ip]
    f4b6:	46ee      	mov	lr, sp
    f4b8:	2400      	movs	r4, #0
    f4ba:	f8ce 4000 	str.w	r4, [lr]
    f4be:	a829      	add	r0, sp, #164	; 0xa4
    f4c0:	2201      	movs	r2, #1
    f4c2:	910c      	str	r1, [sp, #48]	; 0x30
    f4c4:	4619      	mov	r1, r3
    f4c6:	4663      	mov	r3, ip
    f4c8:	f7ff fe4b 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f4cc:	e7ff      	b.n	f4ce <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x92>
    f4ce:	a827      	add	r0, sp, #156	; 0x9c
    f4d0:	9024      	str	r0, [sp, #144]	; 0x90
    f4d2:	a828      	add	r0, sp, #160	; 0xa0
    f4d4:	9025      	str	r0, [sp, #148]	; 0x94
    f4d6:	a829      	add	r0, sp, #164	; 0xa4
    f4d8:	9026      	str	r0, [sp, #152]	; 0x98
    f4da:	9824      	ldr	r0, [sp, #144]	; 0x90
    f4dc:	9035      	str	r0, [sp, #212]	; 0xd4
    f4de:	9925      	ldr	r1, [sp, #148]	; 0x94
    f4e0:	9136      	str	r1, [sp, #216]	; 0xd8
    f4e2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f4e4:	9237      	str	r2, [sp, #220]	; 0xdc
    f4e6:	f243 0383 	movw	r3, #12419	; 0x3083
    f4ea:	f2c0 0301 	movt	r3, #1
    f4ee:	910b      	str	r1, [sp, #44]	; 0x2c
    f4f0:	4619      	mov	r1, r3
    f4f2:	920a      	str	r2, [sp, #40]	; 0x28
    f4f4:	f003 fdd3 	bl	1309e <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    f4f8:	9009      	str	r0, [sp, #36]	; 0x24
    f4fa:	9108      	str	r1, [sp, #32]
    f4fc:	e7ff      	b.n	f4fe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xc2>
    f4fe:	f243 0183 	movw	r1, #12419	; 0x3083
    f502:	f2c0 0101 	movt	r1, #1
    f506:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f508:	f003 fdc9 	bl	1309e <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    f50c:	9007      	str	r0, [sp, #28]
    f50e:	9106      	str	r1, [sp, #24]
    f510:	e7ff      	b.n	f512 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xd6>
    f512:	f646 71c3 	movw	r1, #28611	; 0x6fc3
    f516:	f2c0 0101 	movt	r1, #1
    f51a:	980a      	ldr	r0, [sp, #40]	; 0x28
    f51c:	f000 fd5e 	bl	ffdc <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    f520:	9005      	str	r0, [sp, #20]
    f522:	9104      	str	r1, [sp, #16]
    f524:	e7ff      	b.n	f526 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xea>
    f526:	9809      	ldr	r0, [sp, #36]	; 0x24
    f528:	901e      	str	r0, [sp, #120]	; 0x78
    f52a:	9908      	ldr	r1, [sp, #32]
    f52c:	911f      	str	r1, [sp, #124]	; 0x7c
    f52e:	9a07      	ldr	r2, [sp, #28]
    f530:	9220      	str	r2, [sp, #128]	; 0x80
    f532:	9b06      	ldr	r3, [sp, #24]
    f534:	9321      	str	r3, [sp, #132]	; 0x84
    f536:	f8dd c014 	ldr.w	ip, [sp, #20]
    f53a:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    f53e:	f8dd e010 	ldr.w	lr, [sp, #16]
    f542:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
    f546:	466c      	mov	r4, sp
    f548:	2503      	movs	r5, #3
    f54a:	6025      	str	r5, [r4, #0]
    f54c:	a818      	add	r0, sp, #96	; 0x60
    f54e:	ab1e      	add	r3, sp, #120	; 0x78
    f550:	990c      	ldr	r1, [sp, #48]	; 0x30
    f552:	462a      	mov	r2, r5
    f554:	f7ff fe05 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f558:	e7ff      	b.n	f55a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x11e>
    f55a:	f24f 006c 	movw	r0, #61548	; 0xf06c
    f55e:	f2c0 0001 	movt	r0, #1
    f562:	f007 fa40 	bl	169e6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    f566:	9003      	str	r0, [sp, #12]
    f568:	e7ff      	b.n	f56a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x12e>
    f56a:	a818      	add	r0, sp, #96	; 0x60
    f56c:	9903      	ldr	r1, [sp, #12]
    f56e:	f007 fa77 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    f572:	defe      	udf	#254	; 0xfe
    f574:	9813      	ldr	r0, [sp, #76]	; 0x4c
    f576:	9912      	ldr	r1, [sp, #72]	; 0x48
    f578:	f7ff f97f 	bl	e87a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    f57c:	9002      	str	r0, [sp, #8]
    f57e:	e7ff      	b.n	f580 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x144>
    f580:	9813      	ldr	r0, [sp, #76]	; 0x4c
    f582:	9912      	ldr	r1, [sp, #72]	; 0x48
    f584:	f7ff f990 	bl	e8a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f588:	9001      	str	r0, [sp, #4]
    f58a:	e7ff      	b.n	f58c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x150>
    f58c:	980d      	ldr	r0, [sp, #52]	; 0x34
    f58e:	9902      	ldr	r1, [sp, #8]
    f590:	9a01      	ldr	r2, [sp, #4]
    f592:	f7fe ff95 	bl	e4c0 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    f596:	e7ff      	b.n	f598 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x15c>
    f598:	b038      	add	sp, #224	; 0xe0
    f59a:	bdb0      	pop	{r4, r5, r7, pc}

0000f59c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>:
    f59c:	b580      	push	{r7, lr}
    f59e:	b086      	sub	sp, #24
    f5a0:	9003      	str	r0, [sp, #12]
    f5a2:	9104      	str	r1, [sp, #16]
    f5a4:	9205      	str	r2, [sp, #20]
    f5a6:	9002      	str	r0, [sp, #8]
    f5a8:	4610      	mov	r0, r2
    f5aa:	9a02      	ldr	r2, [sp, #8]
    f5ac:	9101      	str	r1, [sp, #4]
    f5ae:	4611      	mov	r1, r2
    f5b0:	9a01      	ldr	r2, [sp, #4]
    f5b2:	f000 f861 	bl	f678 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>
    f5b6:	9000      	str	r0, [sp, #0]
    f5b8:	e7ff      	b.n	f5ba <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE+0x1e>
    f5ba:	9800      	ldr	r0, [sp, #0]
    f5bc:	b006      	add	sp, #24
    f5be:	bd80      	pop	{r7, pc}

0000f5c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>:
    f5c0:	b580      	push	{r7, lr}
    f5c2:	b08e      	sub	sp, #56	; 0x38
    f5c4:	9009      	str	r0, [sp, #36]	; 0x24
    f5c6:	910a      	str	r1, [sp, #40]	; 0x28
    f5c8:	9005      	str	r0, [sp, #20]
    f5ca:	9104      	str	r1, [sp, #16]
    f5cc:	f7ff f96c 	bl	e8a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f5d0:	9003      	str	r0, [sp, #12]
    f5d2:	e7ff      	b.n	f5d4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x14>
    f5d4:	2101      	movs	r1, #1
    f5d6:	9803      	ldr	r0, [sp, #12]
    f5d8:	f000 fd15 	bl	10006 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>
    f5dc:	9002      	str	r0, [sp, #8]
    f5de:	9101      	str	r1, [sp, #4]
    f5e0:	e7ff      	b.n	f5e2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x22>
    f5e2:	9802      	ldr	r0, [sp, #8]
    f5e4:	9901      	ldr	r1, [sp, #4]
    f5e6:	f000 fc17 	bl	fe18 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>
    f5ea:	9108      	str	r1, [sp, #32]
    f5ec:	9007      	str	r0, [sp, #28]
    f5ee:	e7ff      	b.n	f5f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x30>
    f5f0:	9807      	ldr	r0, [sp, #28]
    f5f2:	2800      	cmp	r0, #0
    f5f4:	d001      	beq.n	f5fa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x3a>
    f5f6:	e7ff      	b.n	f5f8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x38>
    f5f8:	e00c      	b.n	f614 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x54>
    f5fa:	9808      	ldr	r0, [sp, #32]
    f5fc:	900c      	str	r0, [sp, #48]	; 0x30
    f5fe:	900d      	str	r0, [sp, #52]	; 0x34
    f600:	9905      	ldr	r1, [sp, #20]
    f602:	9000      	str	r0, [sp, #0]
    f604:	4608      	mov	r0, r1
    f606:	9904      	ldr	r1, [sp, #16]
    f608:	9a00      	ldr	r2, [sp, #0]
    f60a:	f7ff ffc7 	bl	f59c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>
    f60e:	9006      	str	r0, [sp, #24]
    f610:	e00b      	b.n	f62a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x6a>
    f612:	defe      	udf	#254	; 0xfe
    f614:	f003 fccd 	bl	12fb2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>
    f618:	e002      	b.n	f620 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x60>
    f61a:	9806      	ldr	r0, [sp, #24]
    f61c:	b00e      	add	sp, #56	; 0x38
    f61e:	bd80      	pop	{r7, pc}
    f620:	f000 fbf4 	bl	fe0c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>
    f624:	9006      	str	r0, [sp, #24]
    f626:	e7ff      	b.n	f628 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x68>
    f628:	e7f7      	b.n	f61a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>
    f62a:	e7f6      	b.n	f61a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>

0000f62c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>:
    f62c:	b082      	sub	sp, #8
    f62e:	9000      	str	r0, [sp, #0]
    f630:	9101      	str	r1, [sp, #4]
    f632:	b002      	add	sp, #8
    f634:	4770      	bx	lr

0000f636 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>:
    f636:	b580      	push	{r7, lr}
    f638:	b088      	sub	sp, #32
    f63a:	9005      	str	r0, [sp, #20]
    f63c:	9106      	str	r1, [sp, #24]
    f63e:	9207      	str	r2, [sp, #28]
    f640:	9004      	str	r0, [sp, #16]
    f642:	4610      	mov	r0, r2
    f644:	9a04      	ldr	r2, [sp, #16]
    f646:	9103      	str	r1, [sp, #12]
    f648:	4611      	mov	r1, r2
    f64a:	9a03      	ldr	r2, [sp, #12]
    f64c:	f7ff fdfb 	bl	f246 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>
    f650:	9002      	str	r0, [sp, #8]
    f652:	9101      	str	r1, [sp, #4]
    f654:	e7ff      	b.n	f656 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E+0x20>
    f656:	9802      	ldr	r0, [sp, #8]
    f658:	9901      	ldr	r1, [sp, #4]
    f65a:	b008      	add	sp, #32
    f65c:	bd80      	pop	{r7, pc}

0000f65e <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>:
    f65e:	b580      	push	{r7, lr}
    f660:	b084      	sub	sp, #16
    f662:	9002      	str	r0, [sp, #8]
    f664:	9103      	str	r1, [sp, #12]
    f666:	f003 fc61 	bl	12f2c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>
    f66a:	9001      	str	r0, [sp, #4]
    f66c:	9100      	str	r1, [sp, #0]
    f66e:	e7ff      	b.n	f670 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E+0x12>
    f670:	9801      	ldr	r0, [sp, #4]
    f672:	9900      	ldr	r1, [sp, #0]
    f674:	b004      	add	sp, #16
    f676:	bd80      	pop	{r7, pc}

0000f678 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>:
    f678:	b580      	push	{r7, lr}
    f67a:	b08a      	sub	sp, #40	; 0x28
    f67c:	9007      	str	r0, [sp, #28]
    f67e:	9108      	str	r1, [sp, #32]
    f680:	9209      	str	r2, [sp, #36]	; 0x24
    f682:	9005      	str	r0, [sp, #20]
    f684:	4608      	mov	r0, r1
    f686:	9104      	str	r1, [sp, #16]
    f688:	4611      	mov	r1, r2
    f68a:	9203      	str	r2, [sp, #12]
    f68c:	f7ff f90c 	bl	e8a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f690:	9002      	str	r0, [sp, #8]
    f692:	e7ff      	b.n	f694 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x1c>
    f694:	9805      	ldr	r0, [sp, #20]
    f696:	9902      	ldr	r1, [sp, #8]
    f698:	4288      	cmp	r0, r1
    f69a:	d303      	bcc.n	f6a4 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x2c>
    f69c:	e7ff      	b.n	f69e <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x26>
    f69e:	2000      	movs	r0, #0
    f6a0:	9006      	str	r0, [sp, #24]
    f6a2:	e009      	b.n	f6b8 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    f6a4:	9805      	ldr	r0, [sp, #20]
    f6a6:	9904      	ldr	r1, [sp, #16]
    f6a8:	9a03      	ldr	r2, [sp, #12]
    f6aa:	f7ff f929 	bl	e900 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>
    f6ae:	9001      	str	r0, [sp, #4]
    f6b0:	e7ff      	b.n	f6b2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x3a>
    f6b2:	9801      	ldr	r0, [sp, #4]
    f6b4:	9006      	str	r0, [sp, #24]
    f6b6:	e7ff      	b.n	f6b8 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    f6b8:	9806      	ldr	r0, [sp, #24]
    f6ba:	b00a      	add	sp, #40	; 0x28
    f6bc:	bd80      	pop	{r7, pc}

0000f6be <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn print(msg: &str) {
    f6be:	b580      	push	{r7, lr}
    f6c0:	b08a      	sub	sp, #40	; 0x28
    f6c2:	9004      	str	r0, [sp, #16]
    f6c4:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    let buf = msg.as_ptr();
    f6c6:	9003      	str	r0, [sp, #12]
    f6c8:	9102      	str	r1, [sp, #8]
    f6ca:	f000 f86e 	bl	f7aa <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    f6ce:	4601      	mov	r1, r0
    f6d0:	9006      	str	r0, [sp, #24]
    f6d2:	9101      	str	r1, [sp, #4]
    f6d4:	e7ff      	b.n	f6d6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x18>
    let len = msg.len() as u32;
    f6d6:	9803      	ldr	r0, [sp, #12]
    f6d8:	9902      	ldr	r1, [sp, #8]
    f6da:	f000 f850 	bl	f77e <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    f6de:	9000      	str	r0, [sp, #0]
    f6e0:	e7ff      	b.n	f6e2 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x24>
    f6e2:	9800      	ldr	r0, [sp, #0]
    f6e4:	9007      	str	r0, [sp, #28]
    f6e6:	2100      	movs	r1, #0

    //  TODO: Dispatch the Mynewt C function `console_buffer`.
    //  TODO: Use a procedural macro to compute the hash of function name `console_buffer`.
    let hash = 0;  //  TODO
    f6e8:	9108      	str	r1, [sp, #32]
    //  TODO: Lookup the dispatch address of `console_buffer`.
    let _addr = get_dispatch_address(hash);
    f6ea:	4608      	mov	r0, r1
    f6ec:	f000 f809 	bl	f702 <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>
    f6f0:	9009      	str	r0, [sp, #36]	; 0x24
    f6f2:	e7ff      	b.n	f6f4 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x36>
    //  TODO: Call the `console_buffer` function using the dispatch address.
    unsafe { console_buffer(buf, len); }
    f6f4:	9801      	ldr	r0, [sp, #4]
    f6f6:	9900      	ldr	r1, [sp, #0]
    f6f8:	f009 f914 	bl	18924 <console_buffer>
    f6fc:	e7ff      	b.n	f6fe <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x40>
}
    f6fe:	b00a      	add	sp, #40	; 0x28
    f700:	bd80      	pop	{r7, pc}

0000f702 <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>:

/// Return the Dispatch Address for the OS function whose function name hashed is `hash`
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn get_dispatch_address(_hash: u32) -> u32 {
    f702:	b081      	sub	sp, #4
    f704:	9000      	str	r0, [sp, #0]
    f706:	2000      	movs	r0, #0
    //  TODO: Lookup the Dispatch Table for the hash of function name
    0
}
    f708:	b001      	add	sp, #4
    f70a:	4770      	bx	lr

0000f70c <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>:
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
}

///  Add the string to the output buffer.
pub fn buffer(msg: &str) {
    f70c:	b580      	push	{r7, lr}
    f70e:	b086      	sub	sp, #24
    f710:	9004      	str	r0, [sp, #16]
    f712:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
    f714:	9003      	str	r0, [sp, #12]
    f716:	9102      	str	r1, [sp, #8]
    f718:	f000 f847 	bl	f7aa <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    f71c:	9001      	str	r0, [sp, #4]
    f71e:	e7ff      	b.n	f720 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x14>
    f720:	9803      	ldr	r0, [sp, #12]
    f722:	9902      	ldr	r1, [sp, #8]
    f724:	f000 f82b 	bl	f77e <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    f728:	9000      	str	r0, [sp, #0]
    f72a:	e7ff      	b.n	f72c <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x20>
    f72c:	9801      	ldr	r0, [sp, #4]
    f72e:	9900      	ldr	r1, [sp, #0]
    f730:	f009 f8f8 	bl	18924 <console_buffer>
    f734:	e7ff      	b.n	f736 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x2a>
}
    f736:	b006      	add	sp, #24
    f738:	bd80      	pop	{r7, pc}

0000f73a <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>:
    unsafe { console_printhex(v); }
}

///  Write an int to the output buffer.
///  C API: `void console_printint(int i)`
pub fn printint(v: i32) {
    f73a:	b580      	push	{r7, lr}
    f73c:	b082      	sub	sp, #8
    f73e:	9001      	str	r0, [sp, #4]
    unsafe { console_printint(v); }
    f740:	f009 f960 	bl	18a04 <console_printint>
    f744:	e7ff      	b.n	f746 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E+0xc>
}
    f746:	b002      	add	sp, #8
    f748:	bd80      	pop	{r7, pc}

0000f74a <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>:
pub fn dump(buffer: *const u8, len: u32) {
    unsafe { console_dump(buffer, len); }
}

///  Flush the output buffer to the console.
pub fn flush() {
    f74a:	b580      	push	{r7, lr}
    unsafe { console_flush(); }
    f74c:	f009 f8c2 	bl	188d4 <console_flush>
    f750:	e7ff      	b.n	f752 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E+0x8>
}
    f752:	bd80      	pop	{r7, pc}

0000f754 <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>:
    f754:	b086      	sub	sp, #24
    f756:	9004      	str	r0, [sp, #16]
    f758:	9105      	str	r1, [sp, #20]
    f75a:	9002      	str	r0, [sp, #8]
    f75c:	9103      	str	r1, [sp, #12]
    f75e:	9802      	ldr	r0, [sp, #8]
    f760:	9903      	ldr	r1, [sp, #12]
    f762:	9000      	str	r0, [sp, #0]
    f764:	9101      	str	r1, [sp, #4]
    f766:	9800      	ldr	r0, [sp, #0]
    f768:	9901      	ldr	r1, [sp, #4]
    f76a:	b006      	add	sp, #24
    f76c:	4770      	bx	lr

0000f76e <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>:
    f76e:	b082      	sub	sp, #8
    f770:	460a      	mov	r2, r1
    f772:	9000      	str	r0, [sp, #0]
    f774:	f88d 1007 	strb.w	r1, [sp, #7]
    f778:	7001      	strb	r1, [r0, #0]
    f77a:	b002      	add	sp, #8
    f77c:	4770      	bx	lr

0000f77e <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>:
    f77e:	b580      	push	{r7, lr}
    f780:	b08a      	sub	sp, #40	; 0x28
    f782:	9004      	str	r0, [sp, #16]
    f784:	9105      	str	r1, [sp, #20]
    f786:	9008      	str	r0, [sp, #32]
    f788:	9109      	str	r1, [sp, #36]	; 0x24
    f78a:	9006      	str	r0, [sp, #24]
    f78c:	9107      	str	r1, [sp, #28]
    f78e:	9806      	ldr	r0, [sp, #24]
    f790:	9907      	ldr	r1, [sp, #28]
    f792:	9003      	str	r0, [sp, #12]
    f794:	9102      	str	r1, [sp, #8]
    f796:	e7ff      	b.n	f798 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x1a>
    f798:	9803      	ldr	r0, [sp, #12]
    f79a:	9902      	ldr	r1, [sp, #8]
    f79c:	f7ff f884 	bl	e8a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f7a0:	9001      	str	r0, [sp, #4]
    f7a2:	e7ff      	b.n	f7a4 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x26>
    f7a4:	9801      	ldr	r0, [sp, #4]
    f7a6:	b00a      	add	sp, #40	; 0x28
    f7a8:	bd80      	pop	{r7, pc}

0000f7aa <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>:
    f7aa:	b082      	sub	sp, #8
    f7ac:	9000      	str	r0, [sp, #0]
    f7ae:	9101      	str	r1, [sp, #4]
    f7b0:	b002      	add	sp, #8
    f7b2:	4770      	bx	lr

0000f7b4 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>:
};

/// Rust Embedded HAL interface for Mynewt SPI
impl SPI {
    /// Create a new SPI port
    pub fn new() -> Self {
    f7b4:	b082      	sub	sp, #8
    f7b6:	2000      	movs	r0, #0
        SPI {
    f7b8:	9000      	str	r0, [sp, #0]
    f7ba:	9001      	str	r0, [sp, #4]
            spi_num: 0,
            cs_pin:  0,
        }
    }
    f7bc:	9800      	ldr	r0, [sp, #0]
    f7be:	9901      	ldr	r1, [sp, #4]
    f7c0:	b002      	add	sp, #8
    f7c2:	4770      	bx	lr

0000f7c4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>:

    /// Initiaise the SPI port
    pub fn init(&mut self, spi_num: i32, cs_pin: i32, spi_settings: *mut hal::hal_spi_settings) 
    f7c4:	b5b0      	push	{r4, r5, r7, lr}
    f7c6:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
    f7ca:	9077      	str	r0, [sp, #476]	; 0x1dc
    f7cc:	9178      	str	r1, [sp, #480]	; 0x1e0
    f7ce:	9279      	str	r2, [sp, #484]	; 0x1e4
    f7d0:	937a      	str	r3, [sp, #488]	; 0x1e8
        -> MynewtResult<()> {
        let rc = unsafe { hal::hal_spi_config(spi_num, spi_settings) };
    f7d2:	9028      	str	r0, [sp, #160]	; 0xa0
    f7d4:	4608      	mov	r0, r1
    f7d6:	9127      	str	r1, [sp, #156]	; 0x9c
    f7d8:	4619      	mov	r1, r3
    f7da:	9226      	str	r2, [sp, #152]	; 0x98
    f7dc:	f009 fe6a 	bl	194b4 <hal_spi_config>
    f7e0:	9029      	str	r0, [sp, #164]	; 0xa4
    f7e2:	e7ff      	b.n	f7e4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x20>
        assert_eq!(rc, 0, "spi config fail");
    f7e4:	f24f 007c 	movw	r0, #61564	; 0xf07c
    f7e8:	f2c0 0001 	movt	r0, #1
    f7ec:	6800      	ldr	r0, [r0, #0]
    f7ee:	a929      	add	r1, sp, #164	; 0xa4
    f7f0:	912a      	str	r1, [sp, #168]	; 0xa8
    f7f2:	902b      	str	r0, [sp, #172]	; 0xac
    f7f4:	982a      	ldr	r0, [sp, #168]	; 0xa8
    f7f6:	907b      	str	r0, [sp, #492]	; 0x1ec
    f7f8:	992b      	ldr	r1, [sp, #172]	; 0xac
    f7fa:	917c      	str	r1, [sp, #496]	; 0x1f0
    f7fc:	6802      	ldr	r2, [r0, #0]
    f7fe:	680b      	ldr	r3, [r1, #0]
    f800:	429a      	cmp	r2, r3
    f802:	9025      	str	r0, [sp, #148]	; 0x94
    f804:	9124      	str	r1, [sp, #144]	; 0x90
    f806:	d105      	bne.n	f814 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x50>
    f808:	e7ff      	b.n	f80a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x46>

        let rc = unsafe { hal::hal_spi_enable(spi_num) };
    f80a:	9827      	ldr	r0, [sp, #156]	; 0x9c
    f80c:	f009 fe6e 	bl	194ec <hal_spi_enable>
    f810:	9043      	str	r0, [sp, #268]	; 0x10c
    f812:	e072      	b.n	f8fa <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x136>
        assert_eq!(rc, 0, "spi config fail");
    f814:	f24f 00d4 	movw	r0, #61652	; 0xf0d4
    f818:	f2c0 0001 	movt	r0, #1
    f81c:	6801      	ldr	r1, [r0, #0]
    f81e:	9825      	ldr	r0, [sp, #148]	; 0x94
    f820:	903b      	str	r0, [sp, #236]	; 0xec
    f822:	9a24      	ldr	r2, [sp, #144]	; 0x90
    f824:	923c      	str	r2, [sp, #240]	; 0xf0
    f826:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
    f82a:	f2c0 0301 	movt	r3, #1
    f82e:	681b      	ldr	r3, [r3, #0]
    f830:	f24f 0cf4 	movw	ip, #61684	; 0xf0f4
    f834:	f2c0 0c01 	movt	ip, #1
    f838:	f8dc c000 	ldr.w	ip, [ip]
    f83c:	46ee      	mov	lr, sp
    f83e:	2400      	movs	r4, #0
    f840:	f8ce 4000 	str.w	r4, [lr]
    f844:	a83d      	add	r0, sp, #244	; 0xf4
    f846:	2201      	movs	r2, #1
    f848:	9123      	str	r1, [sp, #140]	; 0x8c
    f84a:	4619      	mov	r1, r3
    f84c:	4663      	mov	r3, ip
    f84e:	f7ff fc88 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f852:	e7ff      	b.n	f854 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x90>
    f854:	a83b      	add	r0, sp, #236	; 0xec
    f856:	9038      	str	r0, [sp, #224]	; 0xe0
    f858:	a83c      	add	r0, sp, #240	; 0xf0
    f85a:	9039      	str	r0, [sp, #228]	; 0xe4
    f85c:	a83d      	add	r0, sp, #244	; 0xf4
    f85e:	903a      	str	r0, [sp, #232]	; 0xe8
    f860:	9838      	ldr	r0, [sp, #224]	; 0xe0
    f862:	907d      	str	r0, [sp, #500]	; 0x1f4
    f864:	9939      	ldr	r1, [sp, #228]	; 0xe4
    f866:	917e      	str	r1, [sp, #504]	; 0x1f8
    f868:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    f86a:	927f      	str	r2, [sp, #508]	; 0x1fc
    f86c:	f64f 63ef 	movw	r3, #65263	; 0xfeef
    f870:	f2c0 0300 	movt	r3, #0
    f874:	9122      	str	r1, [sp, #136]	; 0x88
    f876:	4619      	mov	r1, r3
    f878:	9221      	str	r2, [sp, #132]	; 0x84
    f87a:	f000 fb70 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    f87e:	9020      	str	r0, [sp, #128]	; 0x80
    f880:	911f      	str	r1, [sp, #124]	; 0x7c
    f882:	e7ff      	b.n	f884 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xc0>
    f884:	f64f 61ef 	movw	r1, #65263	; 0xfeef
    f888:	f2c0 0100 	movt	r1, #0
    f88c:	9822      	ldr	r0, [sp, #136]	; 0x88
    f88e:	f000 fb66 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    f892:	901e      	str	r0, [sp, #120]	; 0x78
    f894:	911d      	str	r1, [sp, #116]	; 0x74
    f896:	e7ff      	b.n	f898 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xd4>
    f898:	f646 71c3 	movw	r1, #28611	; 0x6fc3
    f89c:	f2c0 0101 	movt	r1, #1
    f8a0:	9821      	ldr	r0, [sp, #132]	; 0x84
    f8a2:	f000 fb9b 	bl	ffdc <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    f8a6:	901c      	str	r0, [sp, #112]	; 0x70
    f8a8:	911b      	str	r1, [sp, #108]	; 0x6c
    f8aa:	e7ff      	b.n	f8ac <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xe8>
    f8ac:	9820      	ldr	r0, [sp, #128]	; 0x80
    f8ae:	9032      	str	r0, [sp, #200]	; 0xc8
    f8b0:	991f      	ldr	r1, [sp, #124]	; 0x7c
    f8b2:	9133      	str	r1, [sp, #204]	; 0xcc
    f8b4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    f8b6:	9234      	str	r2, [sp, #208]	; 0xd0
    f8b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    f8ba:	9335      	str	r3, [sp, #212]	; 0xd4
    f8bc:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
    f8c0:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
    f8c4:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
    f8c8:	f8cd e0dc 	str.w	lr, [sp, #220]	; 0xdc
    f8cc:	466c      	mov	r4, sp
    f8ce:	2503      	movs	r5, #3
    f8d0:	6025      	str	r5, [r4, #0]
    f8d2:	a82c      	add	r0, sp, #176	; 0xb0
    f8d4:	ab32      	add	r3, sp, #200	; 0xc8
    f8d6:	9923      	ldr	r1, [sp, #140]	; 0x8c
    f8d8:	462a      	mov	r2, r5
    f8da:	f7ff fc42 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f8de:	e7ff      	b.n	f8e0 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x11c>
    f8e0:	f24f 1010 	movw	r0, #61712	; 0xf110
    f8e4:	f2c0 0001 	movt	r0, #1
    f8e8:	f007 f87d 	bl	169e6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    f8ec:	901a      	str	r0, [sp, #104]	; 0x68
    f8ee:	e7ff      	b.n	f8f0 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x12c>
    f8f0:	a82c      	add	r0, sp, #176	; 0xb0
    f8f2:	991a      	ldr	r1, [sp, #104]	; 0x68
    f8f4:	f007 f8b4 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    f8f8:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi enable fail");
    f8fa:	f24f 007c 	movw	r0, #61564	; 0xf07c
    f8fe:	f2c0 0001 	movt	r0, #1
    f902:	6800      	ldr	r0, [r0, #0]
    f904:	a943      	add	r1, sp, #268	; 0x10c
    f906:	9144      	str	r1, [sp, #272]	; 0x110
    f908:	9045      	str	r0, [sp, #276]	; 0x114
    f90a:	9844      	ldr	r0, [sp, #272]	; 0x110
    f90c:	9080      	str	r0, [sp, #512]	; 0x200
    f90e:	9945      	ldr	r1, [sp, #276]	; 0x114
    f910:	9181      	str	r1, [sp, #516]	; 0x204
    f912:	6802      	ldr	r2, [r0, #0]
    f914:	680b      	ldr	r3, [r1, #0]
    f916:	429a      	cmp	r2, r3
    f918:	9019      	str	r0, [sp, #100]	; 0x64
    f91a:	9118      	str	r1, [sp, #96]	; 0x60
    f91c:	d106      	bne.n	f92c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x168>
    f91e:	e7ff      	b.n	f920 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x15c>
    f920:	2101      	movs	r1, #1

        let rc = unsafe { hal::hal_gpio_init_out(cs_pin, 1) };
    f922:	9826      	ldr	r0, [sp, #152]	; 0x98
    f924:	f009 f9b8 	bl	18c98 <hal_gpio_init_out>
    f928:	905d      	str	r0, [sp, #372]	; 0x174
    f92a:	e072      	b.n	fa12 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x24e>
        assert_eq!(rc, 0, "spi enable fail");
    f92c:	f24f 00d4 	movw	r0, #61652	; 0xf0d4
    f930:	f2c0 0001 	movt	r0, #1
    f934:	6801      	ldr	r1, [r0, #0]
    f936:	9819      	ldr	r0, [sp, #100]	; 0x64
    f938:	9055      	str	r0, [sp, #340]	; 0x154
    f93a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    f93c:	9256      	str	r2, [sp, #344]	; 0x158
    f93e:	f24f 1338 	movw	r3, #61752	; 0xf138
    f942:	f2c0 0301 	movt	r3, #1
    f946:	681b      	ldr	r3, [r3, #0]
    f948:	f24f 0cf4 	movw	ip, #61684	; 0xf0f4
    f94c:	f2c0 0c01 	movt	ip, #1
    f950:	f8dc c000 	ldr.w	ip, [ip]
    f954:	46ee      	mov	lr, sp
    f956:	2400      	movs	r4, #0
    f958:	f8ce 4000 	str.w	r4, [lr]
    f95c:	a857      	add	r0, sp, #348	; 0x15c
    f95e:	2201      	movs	r2, #1
    f960:	9117      	str	r1, [sp, #92]	; 0x5c
    f962:	4619      	mov	r1, r3
    f964:	4663      	mov	r3, ip
    f966:	f7ff fbfc 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f96a:	e7ff      	b.n	f96c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1a8>
    f96c:	a855      	add	r0, sp, #340	; 0x154
    f96e:	9052      	str	r0, [sp, #328]	; 0x148
    f970:	a856      	add	r0, sp, #344	; 0x158
    f972:	9053      	str	r0, [sp, #332]	; 0x14c
    f974:	a857      	add	r0, sp, #348	; 0x15c
    f976:	9054      	str	r0, [sp, #336]	; 0x150
    f978:	9852      	ldr	r0, [sp, #328]	; 0x148
    f97a:	9082      	str	r0, [sp, #520]	; 0x208
    f97c:	9953      	ldr	r1, [sp, #332]	; 0x14c
    f97e:	9183      	str	r1, [sp, #524]	; 0x20c
    f980:	9a54      	ldr	r2, [sp, #336]	; 0x150
    f982:	9284      	str	r2, [sp, #528]	; 0x210
    f984:	f64f 63ef 	movw	r3, #65263	; 0xfeef
    f988:	f2c0 0300 	movt	r3, #0
    f98c:	9116      	str	r1, [sp, #88]	; 0x58
    f98e:	4619      	mov	r1, r3
    f990:	9215      	str	r2, [sp, #84]	; 0x54
    f992:	f000 fae4 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    f996:	9014      	str	r0, [sp, #80]	; 0x50
    f998:	9113      	str	r1, [sp, #76]	; 0x4c
    f99a:	e7ff      	b.n	f99c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1d8>
    f99c:	f64f 61ef 	movw	r1, #65263	; 0xfeef
    f9a0:	f2c0 0100 	movt	r1, #0
    f9a4:	9816      	ldr	r0, [sp, #88]	; 0x58
    f9a6:	f000 fada 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    f9aa:	9012      	str	r0, [sp, #72]	; 0x48
    f9ac:	9111      	str	r1, [sp, #68]	; 0x44
    f9ae:	e7ff      	b.n	f9b0 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1ec>
    f9b0:	f646 71c3 	movw	r1, #28611	; 0x6fc3
    f9b4:	f2c0 0101 	movt	r1, #1
    f9b8:	9815      	ldr	r0, [sp, #84]	; 0x54
    f9ba:	f000 fb0f 	bl	ffdc <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    f9be:	9010      	str	r0, [sp, #64]	; 0x40
    f9c0:	910f      	str	r1, [sp, #60]	; 0x3c
    f9c2:	e7ff      	b.n	f9c4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x200>
    f9c4:	9814      	ldr	r0, [sp, #80]	; 0x50
    f9c6:	904c      	str	r0, [sp, #304]	; 0x130
    f9c8:	9913      	ldr	r1, [sp, #76]	; 0x4c
    f9ca:	914d      	str	r1, [sp, #308]	; 0x134
    f9cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    f9ce:	924e      	str	r2, [sp, #312]	; 0x138
    f9d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f9d2:	934f      	str	r3, [sp, #316]	; 0x13c
    f9d4:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    f9d8:	f8cd c140 	str.w	ip, [sp, #320]	; 0x140
    f9dc:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    f9e0:	f8cd e144 	str.w	lr, [sp, #324]	; 0x144
    f9e4:	466c      	mov	r4, sp
    f9e6:	2503      	movs	r5, #3
    f9e8:	6025      	str	r5, [r4, #0]
    f9ea:	a846      	add	r0, sp, #280	; 0x118
    f9ec:	ab4c      	add	r3, sp, #304	; 0x130
    f9ee:	9917      	ldr	r1, [sp, #92]	; 0x5c
    f9f0:	462a      	mov	r2, r5
    f9f2:	f7ff fbb6 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f9f6:	e7ff      	b.n	f9f8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x234>
    f9f8:	f24f 103c 	movw	r0, #61756	; 0xf13c
    f9fc:	f2c0 0001 	movt	r0, #1
    fa00:	f006 fff1 	bl	169e6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    fa04:	900e      	str	r0, [sp, #56]	; 0x38
    fa06:	e7ff      	b.n	fa08 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x244>
    fa08:	a846      	add	r0, sp, #280	; 0x118
    fa0a:	990e      	ldr	r1, [sp, #56]	; 0x38
    fa0c:	f007 f828 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    fa10:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi init fail");
    fa12:	f24f 007c 	movw	r0, #61564	; 0xf07c
    fa16:	f2c0 0001 	movt	r0, #1
    fa1a:	6800      	ldr	r0, [r0, #0]
    fa1c:	a95d      	add	r1, sp, #372	; 0x174
    fa1e:	915e      	str	r1, [sp, #376]	; 0x178
    fa20:	905f      	str	r0, [sp, #380]	; 0x17c
    fa22:	985e      	ldr	r0, [sp, #376]	; 0x178
    fa24:	9085      	str	r0, [sp, #532]	; 0x214
    fa26:	995f      	ldr	r1, [sp, #380]	; 0x17c
    fa28:	9186      	str	r1, [sp, #536]	; 0x218
    fa2a:	6802      	ldr	r2, [r0, #0]
    fa2c:	680b      	ldr	r3, [r1, #0]
    fa2e:	429a      	cmp	r2, r3
    fa30:	900d      	str	r0, [sp, #52]	; 0x34
    fa32:	910c      	str	r1, [sp, #48]	; 0x30
    fa34:	d109      	bne.n	fa4a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x286>
    fa36:	e7ff      	b.n	fa38 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x274>
        self.spi_num = spi_num;
    fa38:	9827      	ldr	r0, [sp, #156]	; 0x9c
    fa3a:	9928      	ldr	r1, [sp, #160]	; 0xa0
    fa3c:	6008      	str	r0, [r1, #0]
        self.cs_pin  = cs_pin;
    fa3e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fa40:	604a      	str	r2, [r1, #4]
    fa42:	2001      	movs	r0, #1
        Ok(())
    }
    fa44:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
    fa48:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "spi init fail");
    fa4a:	f24f 00d4 	movw	r0, #61652	; 0xf0d4
    fa4e:	f2c0 0001 	movt	r0, #1
    fa52:	6801      	ldr	r1, [r0, #0]
    fa54:	980d      	ldr	r0, [sp, #52]	; 0x34
    fa56:	906f      	str	r0, [sp, #444]	; 0x1bc
    fa58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fa5a:	9270      	str	r2, [sp, #448]	; 0x1c0
    fa5c:	f24f 1364 	movw	r3, #61796	; 0xf164
    fa60:	f2c0 0301 	movt	r3, #1
    fa64:	681b      	ldr	r3, [r3, #0]
    fa66:	f24f 0cf4 	movw	ip, #61684	; 0xf0f4
    fa6a:	f2c0 0c01 	movt	ip, #1
    fa6e:	f8dc c000 	ldr.w	ip, [ip]
    fa72:	46ee      	mov	lr, sp
    fa74:	2400      	movs	r4, #0
    fa76:	f8ce 4000 	str.w	r4, [lr]
    fa7a:	a871      	add	r0, sp, #452	; 0x1c4
    fa7c:	2201      	movs	r2, #1
    fa7e:	910b      	str	r1, [sp, #44]	; 0x2c
    fa80:	4619      	mov	r1, r3
    fa82:	4663      	mov	r3, ip
    fa84:	f7ff fb6d 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    fa88:	e7ff      	b.n	fa8a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2c6>
    fa8a:	a86f      	add	r0, sp, #444	; 0x1bc
    fa8c:	906c      	str	r0, [sp, #432]	; 0x1b0
    fa8e:	a870      	add	r0, sp, #448	; 0x1c0
    fa90:	906d      	str	r0, [sp, #436]	; 0x1b4
    fa92:	a871      	add	r0, sp, #452	; 0x1c4
    fa94:	906e      	str	r0, [sp, #440]	; 0x1b8
    fa96:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    fa98:	9087      	str	r0, [sp, #540]	; 0x21c
    fa9a:	996d      	ldr	r1, [sp, #436]	; 0x1b4
    fa9c:	9188      	str	r1, [sp, #544]	; 0x220
    fa9e:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
    faa0:	9289      	str	r2, [sp, #548]	; 0x224
    faa2:	f64f 63ef 	movw	r3, #65263	; 0xfeef
    faa6:	f2c0 0300 	movt	r3, #0
    faaa:	910a      	str	r1, [sp, #40]	; 0x28
    faac:	4619      	mov	r1, r3
    faae:	9209      	str	r2, [sp, #36]	; 0x24
    fab0:	f000 fa55 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    fab4:	9008      	str	r0, [sp, #32]
    fab6:	9107      	str	r1, [sp, #28]
    fab8:	e7ff      	b.n	faba <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2f6>
    faba:	f64f 61ef 	movw	r1, #65263	; 0xfeef
    fabe:	f2c0 0100 	movt	r1, #0
    fac2:	980a      	ldr	r0, [sp, #40]	; 0x28
    fac4:	f000 fa4b 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    fac8:	9006      	str	r0, [sp, #24]
    faca:	9105      	str	r1, [sp, #20]
    facc:	e7ff      	b.n	face <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x30a>
    face:	f646 71c3 	movw	r1, #28611	; 0x6fc3
    fad2:	f2c0 0101 	movt	r1, #1
    fad6:	9809      	ldr	r0, [sp, #36]	; 0x24
    fad8:	f000 fa80 	bl	ffdc <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    fadc:	9004      	str	r0, [sp, #16]
    fade:	9103      	str	r1, [sp, #12]
    fae0:	e7ff      	b.n	fae2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x31e>
    fae2:	9808      	ldr	r0, [sp, #32]
    fae4:	9066      	str	r0, [sp, #408]	; 0x198
    fae6:	9907      	ldr	r1, [sp, #28]
    fae8:	9167      	str	r1, [sp, #412]	; 0x19c
    faea:	9a06      	ldr	r2, [sp, #24]
    faec:	9268      	str	r2, [sp, #416]	; 0x1a0
    faee:	9b05      	ldr	r3, [sp, #20]
    faf0:	9369      	str	r3, [sp, #420]	; 0x1a4
    faf2:	f8dd c010 	ldr.w	ip, [sp, #16]
    faf6:	f8cd c1a8 	str.w	ip, [sp, #424]	; 0x1a8
    fafa:	f8dd e00c 	ldr.w	lr, [sp, #12]
    fafe:	f8cd e1ac 	str.w	lr, [sp, #428]	; 0x1ac
    fb02:	466c      	mov	r4, sp
    fb04:	2503      	movs	r5, #3
    fb06:	6025      	str	r5, [r4, #0]
    fb08:	a860      	add	r0, sp, #384	; 0x180
    fb0a:	ab66      	add	r3, sp, #408	; 0x198
    fb0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    fb0e:	462a      	mov	r2, r5
    fb10:	f7ff fb27 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    fb14:	e7ff      	b.n	fb16 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x352>
    fb16:	f24f 1068 	movw	r0, #61800	; 0xf168
    fb1a:	f2c0 0001 	movt	r0, #1
    fb1e:	f006 ff62 	bl	169e6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    fb22:	9002      	str	r0, [sp, #8]
    fb24:	e7ff      	b.n	fb26 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x362>
    fb26:	a860      	add	r0, sp, #384	; 0x180
    fb28:	9902      	ldr	r1, [sp, #8]
    fb2a:	f006 ff99 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    fb2e:	defe      	udf	#254	; 0xfe

0000fb30 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl GPIO {
    /// Create a new output GPIO pin
    pub fn new() -> Self {
    fb30:	2000      	movs	r0, #0
        GPIO {
            pin: 0,
        }
    }
    fb32:	4770      	bx	lr

0000fb34 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>:

    /// Initialise the output GPIO pin
    pub fn init(&mut self, pin: i32) -> MynewtResult<()> {
    fb34:	b5b0      	push	{r4, r5, r7, lr}
    fb36:	b0b0      	sub	sp, #192	; 0xc0
    fb38:	9029      	str	r0, [sp, #164]	; 0xa4
    fb3a:	912a      	str	r1, [sp, #168]	; 0xa8
    fb3c:	2200      	movs	r2, #0
        //  TODO: let dc = pins.d0.into_push_pull_output(&mut pins.port);
        //  TODO: let rst = pins.d1.into_push_pull_output(&mut pins.port);
        let rc = unsafe { hal::hal_gpio_init_out(pin, 0) };
    fb3e:	900e      	str	r0, [sp, #56]	; 0x38
    fb40:	4608      	mov	r0, r1
    fb42:	910d      	str	r1, [sp, #52]	; 0x34
    fb44:	4611      	mov	r1, r2
    fb46:	f009 f8a7 	bl	18c98 <hal_gpio_init_out>
    fb4a:	900f      	str	r0, [sp, #60]	; 0x3c
    fb4c:	e7ff      	b.n	fb4e <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x1a>
        assert_eq!(rc, 0, "gpio fail");
    fb4e:	f24f 007c 	movw	r0, #61564	; 0xf07c
    fb52:	f2c0 0001 	movt	r0, #1
    fb56:	6800      	ldr	r0, [r0, #0]
    fb58:	a90f      	add	r1, sp, #60	; 0x3c
    fb5a:	9110      	str	r1, [sp, #64]	; 0x40
    fb5c:	9011      	str	r0, [sp, #68]	; 0x44
    fb5e:	9810      	ldr	r0, [sp, #64]	; 0x40
    fb60:	902b      	str	r0, [sp, #172]	; 0xac
    fb62:	9911      	ldr	r1, [sp, #68]	; 0x44
    fb64:	912c      	str	r1, [sp, #176]	; 0xb0
    fb66:	6802      	ldr	r2, [r0, #0]
    fb68:	680b      	ldr	r3, [r1, #0]
    fb6a:	429a      	cmp	r2, r3
    fb6c:	900c      	str	r0, [sp, #48]	; 0x30
    fb6e:	910b      	str	r1, [sp, #44]	; 0x2c
    fb70:	d106      	bne.n	fb80 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x4c>
    fb72:	e7ff      	b.n	fb74 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x40>
        self.pin = pin;
    fb74:	980d      	ldr	r0, [sp, #52]	; 0x34
    fb76:	990e      	ldr	r1, [sp, #56]	; 0x38
    fb78:	6008      	str	r0, [r1, #0]
    fb7a:	2001      	movs	r0, #1
        Ok(())
    }
    fb7c:	b030      	add	sp, #192	; 0xc0
    fb7e:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "gpio fail");
    fb80:	f24f 00d4 	movw	r0, #61652	; 0xf0d4
    fb84:	f2c0 0001 	movt	r0, #1
    fb88:	6801      	ldr	r1, [r0, #0]
    fb8a:	980c      	ldr	r0, [sp, #48]	; 0x30
    fb8c:	9021      	str	r0, [sp, #132]	; 0x84
    fb8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fb90:	9222      	str	r2, [sp, #136]	; 0x88
    fb92:	f24f 138c 	movw	r3, #61836	; 0xf18c
    fb96:	f2c0 0301 	movt	r3, #1
    fb9a:	681b      	ldr	r3, [r3, #0]
    fb9c:	f24f 0cf4 	movw	ip, #61684	; 0xf0f4
    fba0:	f2c0 0c01 	movt	ip, #1
    fba4:	f8dc c000 	ldr.w	ip, [ip]
    fba8:	46ee      	mov	lr, sp
    fbaa:	2400      	movs	r4, #0
    fbac:	f8ce 4000 	str.w	r4, [lr]
    fbb0:	a823      	add	r0, sp, #140	; 0x8c
    fbb2:	2201      	movs	r2, #1
    fbb4:	910a      	str	r1, [sp, #40]	; 0x28
    fbb6:	4619      	mov	r1, r3
    fbb8:	4663      	mov	r3, ip
    fbba:	f7ff fad2 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    fbbe:	e7ff      	b.n	fbc0 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x8c>
    fbc0:	a821      	add	r0, sp, #132	; 0x84
    fbc2:	901e      	str	r0, [sp, #120]	; 0x78
    fbc4:	a822      	add	r0, sp, #136	; 0x88
    fbc6:	901f      	str	r0, [sp, #124]	; 0x7c
    fbc8:	a823      	add	r0, sp, #140	; 0x8c
    fbca:	9020      	str	r0, [sp, #128]	; 0x80
    fbcc:	981e      	ldr	r0, [sp, #120]	; 0x78
    fbce:	902d      	str	r0, [sp, #180]	; 0xb4
    fbd0:	991f      	ldr	r1, [sp, #124]	; 0x7c
    fbd2:	912e      	str	r1, [sp, #184]	; 0xb8
    fbd4:	9a20      	ldr	r2, [sp, #128]	; 0x80
    fbd6:	922f      	str	r2, [sp, #188]	; 0xbc
    fbd8:	f64f 63ef 	movw	r3, #65263	; 0xfeef
    fbdc:	f2c0 0300 	movt	r3, #0
    fbe0:	9109      	str	r1, [sp, #36]	; 0x24
    fbe2:	4619      	mov	r1, r3
    fbe4:	9208      	str	r2, [sp, #32]
    fbe6:	f000 f9ba 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    fbea:	9007      	str	r0, [sp, #28]
    fbec:	9106      	str	r1, [sp, #24]
    fbee:	e7ff      	b.n	fbf0 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xbc>
    fbf0:	f64f 61ef 	movw	r1, #65263	; 0xfeef
    fbf4:	f2c0 0100 	movt	r1, #0
    fbf8:	9809      	ldr	r0, [sp, #36]	; 0x24
    fbfa:	f000 f9b0 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    fbfe:	9005      	str	r0, [sp, #20]
    fc00:	9104      	str	r1, [sp, #16]
    fc02:	e7ff      	b.n	fc04 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xd0>
    fc04:	f646 71c3 	movw	r1, #28611	; 0x6fc3
    fc08:	f2c0 0101 	movt	r1, #1
    fc0c:	9808      	ldr	r0, [sp, #32]
    fc0e:	f000 f9e5 	bl	ffdc <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    fc12:	9003      	str	r0, [sp, #12]
    fc14:	9102      	str	r1, [sp, #8]
    fc16:	e7ff      	b.n	fc18 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xe4>
    fc18:	9807      	ldr	r0, [sp, #28]
    fc1a:	9018      	str	r0, [sp, #96]	; 0x60
    fc1c:	9906      	ldr	r1, [sp, #24]
    fc1e:	9119      	str	r1, [sp, #100]	; 0x64
    fc20:	9a05      	ldr	r2, [sp, #20]
    fc22:	921a      	str	r2, [sp, #104]	; 0x68
    fc24:	9b04      	ldr	r3, [sp, #16]
    fc26:	931b      	str	r3, [sp, #108]	; 0x6c
    fc28:	f8dd c00c 	ldr.w	ip, [sp, #12]
    fc2c:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    fc30:	f8dd e008 	ldr.w	lr, [sp, #8]
    fc34:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    fc38:	466c      	mov	r4, sp
    fc3a:	2503      	movs	r5, #3
    fc3c:	6025      	str	r5, [r4, #0]
    fc3e:	a812      	add	r0, sp, #72	; 0x48
    fc40:	ab18      	add	r3, sp, #96	; 0x60
    fc42:	990a      	ldr	r1, [sp, #40]	; 0x28
    fc44:	462a      	mov	r2, r5
    fc46:	f7ff fa8c 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    fc4a:	e7ff      	b.n	fc4c <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x118>
    fc4c:	f24f 1090 	movw	r0, #61840	; 0xf190
    fc50:	f2c0 0001 	movt	r0, #1
    fc54:	f006 fec7 	bl	169e6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    fc58:	9001      	str	r0, [sp, #4]
    fc5a:	e7ff      	b.n	fc5c <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x128>
    fc5c:	a812      	add	r0, sp, #72	; 0x48
    fc5e:	9901      	ldr	r1, [sp, #4]
    fc60:	f006 fefe 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    fc64:	defe      	udf	#254	; 0xfe

0000fc66 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl embedded_hal::digital::v2::OutputPin for GPIO {
    /// Set the GPIO pin to low
    fn set_low(&mut self) -> Result<(), Self::Error> {
    fc66:	b580      	push	{r7, lr}
    fc68:	b082      	sub	sp, #8
    fc6a:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 0) };
    fc6c:	6800      	ldr	r0, [r0, #0]
    fc6e:	2100      	movs	r1, #0
    fc70:	f009 f82e 	bl	18cd0 <hal_gpio_write>
    fc74:	e7ff      	b.n	fc76 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E+0x10>
    fc76:	2001      	movs	r0, #1
        Ok(())
    }
    fc78:	b002      	add	sp, #8
    fc7a:	bd80      	pop	{r7, pc}

0000fc7c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>:

    /// Set the GPIO pin to high
    fn set_high(&mut self) -> Result<(), Self::Error> {
    fc7c:	b580      	push	{r7, lr}
    fc7e:	b082      	sub	sp, #8
    fc80:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 1) };
    fc82:	6800      	ldr	r0, [r0, #0]
    fc84:	2101      	movs	r1, #1
    fc86:	f009 f823 	bl	18cd0 <hal_gpio_write>
    fc8a:	e7ff      	b.n	fc8c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE+0x10>
    fc8c:	2001      	movs	r0, #1
        Ok(())
    }
    fc8e:	b002      	add	sp, #8
    fc90:	bd80      	pop	{r7, pc}

0000fc92 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>:
impl Delay {
    /// Create a new delay
    pub fn new() -> Self {
        Delay {
        }
    }
    fc92:	4770      	bx	lr

0000fc94 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>:
}

/// Rust Embedded HAL interface for Mynewt Delay
impl embedded_hal::blocking::delay::DelayMs<u8> for Delay {
    /// Sleep for the specified number of milliseconds
    fn delay_ms(&mut self, ms: u8) {
    fc94:	b580      	push	{r7, lr}
    fc96:	b086      	sub	sp, #24
    fc98:	460a      	mov	r2, r1
    fc9a:	9003      	str	r0, [sp, #12]
    fc9c:	f88d 1013 	strb.w	r1, [sp, #19]
        //  TODO: Get this constant from Mynewt
        const OS_TICKS_PER_SEC: u32 = 1000;
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
    fca0:	b2c8      	uxtb	r0, r1
    fca2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fca6:	fba0 0101 	umull	r0, r1, r0, r1
    fcaa:	2900      	cmp	r1, #0
    fcac:	9002      	str	r0, [sp, #8]
    fcae:	d110      	bne.n	fcd2 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3e>
    fcb0:	e7ff      	b.n	fcb2 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x1e>
    fcb2:	f644 50d3 	movw	r0, #19923	; 0x4dd3
    fcb6:	f2c1 0062 	movt	r0, #4194	; 0x1062
    fcba:	9902      	ldr	r1, [sp, #8]
    fcbc:	fba1 0200 	umull	r0, r2, r1, r0
    fcc0:	0992      	lsrs	r2, r2, #6
    fcc2:	9205      	str	r2, [sp, #20]
        unsafe { os::os_time_delay(delay_ticks) };
    fcc4:	9001      	str	r0, [sp, #4]
    fcc6:	4610      	mov	r0, r2
    fcc8:	f00b f820 	bl	1ad0c <os_time_delay>
    fccc:	e7ff      	b.n	fcce <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3a>
    }
    fcce:	b006      	add	sp, #24
    fcd0:	bd80      	pop	{r7, pc}
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
    fcd2:	f24f 10b0 	movw	r0, #61872	; 0xf1b0
    fcd6:	f2c0 0001 	movt	r0, #1
    fcda:	f24f 12a0 	movw	r2, #61856	; 0xf1a0
    fcde:	f2c0 0201 	movt	r2, #1
    fce2:	2121      	movs	r1, #33	; 0x21
    fce4:	f006 fe86 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fce8:	defe      	udf	#254	; 0xfe

0000fcea <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E>:
    fcea:	b580      	push	{r7, lr}
    fcec:	b084      	sub	sp, #16
    fcee:	9002      	str	r0, [sp, #8]
    fcf0:	9103      	str	r1, [sp, #12]
    fcf2:	6800      	ldr	r0, [r0, #0]
    fcf4:	f000 f845 	bl	fd82 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>
    fcf8:	9001      	str	r0, [sp, #4]
    fcfa:	e7ff      	b.n	fcfc <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E+0x12>
    fcfc:	9801      	ldr	r0, [sp, #4]
    fcfe:	f000 0001 	and.w	r0, r0, #1
    fd02:	b004      	add	sp, #16
    fd04:	bd80      	pop	{r7, pc}

0000fd06 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>:
    fd06:	b087      	sub	sp, #28
    fd08:	9000      	str	r0, [sp, #0]
    fd0a:	9101      	str	r1, [sp, #4]
    fd0c:	2000      	movs	r0, #0
    fd0e:	f88d 0013 	strb.w	r0, [sp, #19]
    fd12:	f88d 0012 	strb.w	r0, [sp, #18]
    fd16:	2001      	movs	r0, #1
    fd18:	f88d 0013 	strb.w	r0, [sp, #19]
    fd1c:	f88d 0012 	strb.w	r0, [sp, #18]
    fd20:	9800      	ldr	r0, [sp, #0]
    fd22:	2800      	cmp	r0, #0
    fd24:	d001      	beq.n	fd2a <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x24>
    fd26:	e7ff      	b.n	fd28 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x22>
    fd28:	e006      	b.n	fd38 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x32>
    fd2a:	2000      	movs	r0, #0
    fd2c:	f88d 0012 	strb.w	r0, [sp, #18]
    fd30:	2001      	movs	r0, #1
    fd32:	9002      	str	r0, [sp, #8]
    fd34:	e008      	b.n	fd48 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    fd36:	defe      	udf	#254	; 0xfe
    fd38:	2000      	movs	r0, #0
    fd3a:	f88d 0013 	strb.w	r0, [sp, #19]
    fd3e:	9901      	ldr	r1, [sp, #4]
    fd40:	9106      	str	r1, [sp, #24]
    fd42:	9103      	str	r1, [sp, #12]
    fd44:	9002      	str	r0, [sp, #8]
    fd46:	e7ff      	b.n	fd48 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    fd48:	f89d 0012 	ldrb.w	r0, [sp, #18]
    fd4c:	07c0      	lsls	r0, r0, #31
    fd4e:	2800      	cmp	r0, #0
    fd50:	d104      	bne.n	fd5c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x56>
    fd52:	e7ff      	b.n	fd54 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    fd54:	9800      	ldr	r0, [sp, #0]
    fd56:	2801      	cmp	r0, #1
    fd58:	d008      	beq.n	fd6c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x66>
    fd5a:	e011      	b.n	fd80 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x7a>
    fd5c:	2000      	movs	r0, #0
    fd5e:	f88d 0012 	strb.w	r0, [sp, #18]
    fd62:	e7f7      	b.n	fd54 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    fd64:	9802      	ldr	r0, [sp, #8]
    fd66:	9903      	ldr	r1, [sp, #12]
    fd68:	b007      	add	sp, #28
    fd6a:	4770      	bx	lr
    fd6c:	f89d 0013 	ldrb.w	r0, [sp, #19]
    fd70:	07c0      	lsls	r0, r0, #31
    fd72:	2800      	cmp	r0, #0
    fd74:	d0f6      	beq.n	fd64 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    fd76:	e7ff      	b.n	fd78 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x72>
    fd78:	2000      	movs	r0, #0
    fd7a:	f88d 0013 	strb.w	r0, [sp, #19]
    fd7e:	e7f1      	b.n	fd64 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    fd80:	e7f0      	b.n	fd64 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>

0000fd82 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>:
    fd82:	b580      	push	{r7, lr}
    fd84:	b08e      	sub	sp, #56	; 0x38
    fd86:	900b      	str	r0, [sp, #44]	; 0x2c
    fd88:	910c      	str	r1, [sp, #48]	; 0x30
    fd8a:	9003      	str	r0, [sp, #12]
    fd8c:	9803      	ldr	r0, [sp, #12]
    fd8e:	6800      	ldr	r0, [r0, #0]
    fd90:	2800      	cmp	r0, #0
    fd92:	4602      	mov	r2, r0
    fd94:	bf18      	it	ne
    fd96:	2201      	movne	r2, #1
    fd98:	2800      	cmp	r0, #0
    fd9a:	9101      	str	r1, [sp, #4]
    fd9c:	d00f      	beq.n	fdbe <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x3c>
    fd9e:	e7ff      	b.n	fda0 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x1e>
    fda0:	9803      	ldr	r0, [sp, #12]
    fda2:	900d      	str	r0, [sp, #52]	; 0x34
    fda4:	f24f 12d1 	movw	r2, #61905	; 0xf1d1
    fda8:	f2c0 0201 	movt	r2, #1
    fdac:	a907      	add	r1, sp, #28
    fdae:	2304      	movs	r3, #4
    fdb0:	9000      	str	r0, [sp, #0]
    fdb2:	4608      	mov	r0, r1
    fdb4:	9901      	ldr	r1, [sp, #4]
    fdb6:	f007 fcc6 	bl	17746 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    fdba:	e011      	b.n	fde0 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5e>
    fdbc:	defe      	udf	#254	; 0xfe
    fdbe:	f24f 12d5 	movw	r2, #61909	; 0xf1d5
    fdc2:	f2c0 0201 	movt	r2, #1
    fdc6:	a804      	add	r0, sp, #16
    fdc8:	2304      	movs	r3, #4
    fdca:	9901      	ldr	r1, [sp, #4]
    fdcc:	f007 fcbb 	bl	17746 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    fdd0:	e7ff      	b.n	fdd2 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x50>
    fdd2:	a804      	add	r0, sp, #16
    fdd4:	f006 ffd4 	bl	16d80 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    fdd8:	f88d 000b 	strb.w	r0, [sp, #11]
    fddc:	e7ff      	b.n	fdde <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5c>
    fdde:	e011      	b.n	fe04 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    fde0:	9800      	ldr	r0, [sp, #0]
    fde2:	900a      	str	r0, [sp, #40]	; 0x28
    fde4:	f24f 12dc 	movw	r2, #61916	; 0xf1dc
    fde8:	f2c0 0201 	movt	r2, #1
    fdec:	a807      	add	r0, sp, #28
    fdee:	a90a      	add	r1, sp, #40	; 0x28
    fdf0:	f006 ff5d 	bl	16cae <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>
    fdf4:	e7ff      	b.n	fdf6 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x74>
    fdf6:	a807      	add	r0, sp, #28
    fdf8:	f006 ffc2 	bl	16d80 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    fdfc:	f88d 000b 	strb.w	r0, [sp, #11]
    fe00:	e7ff      	b.n	fe02 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x80>
    fe02:	e7ff      	b.n	fe04 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    fe04:	f89d 000b 	ldrb.w	r0, [sp, #11]
    fe08:	b00e      	add	sp, #56	; 0x38
    fe0a:	bd80      	pop	{r7, pc}

0000fe0c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>:
    fe0c:	b082      	sub	sp, #8
    fe0e:	2000      	movs	r0, #0
    fe10:	9000      	str	r0, [sp, #0]
    fe12:	9800      	ldr	r0, [sp, #0]
    fe14:	b002      	add	sp, #8
    fe16:	4770      	bx	lr

0000fe18 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>:
    fe18:	b580      	push	{r7, lr}
    fe1a:	b084      	sub	sp, #16
    fe1c:	9002      	str	r0, [sp, #8]
    fe1e:	9103      	str	r1, [sp, #12]
    fe20:	f7ff ff71 	bl	fd06 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>
    fe24:	9001      	str	r0, [sp, #4]
    fe26:	9100      	str	r1, [sp, #0]
    fe28:	e7ff      	b.n	fe2a <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E+0x12>
    fe2a:	9801      	ldr	r0, [sp, #4]
    fe2c:	9900      	ldr	r1, [sp, #0]
    fe2e:	b004      	add	sp, #16
    fe30:	bd80      	pop	{r7, pc}

0000fe32 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>:
    fe32:	b580      	push	{r7, lr}
    fe34:	b094      	sub	sp, #80	; 0x50
    fe36:	9008      	str	r0, [sp, #32]
    fe38:	9109      	str	r1, [sp, #36]	; 0x24
    fe3a:	6802      	ldr	r2, [r0, #0]
    fe3c:	2a00      	cmp	r2, #0
    fe3e:	bf18      	it	ne
    fe40:	2201      	movne	r2, #1
    fe42:	f04f 0300 	mov.w	r3, #0
    fe46:	930b      	str	r3, [sp, #44]	; 0x2c
    fe48:	920a      	str	r2, [sp, #40]	; 0x28
    fe4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fe4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fe4e:	9104      	str	r1, [sp, #16]
    fe50:	9003      	str	r0, [sp, #12]
    fe52:	9202      	str	r2, [sp, #8]
    fe54:	e7ff      	b.n	fe56 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x24>
    fe56:	9802      	ldr	r0, [sp, #8]
    fe58:	9902      	ldr	r1, [sp, #8]
    fe5a:	910d      	str	r1, [sp, #52]	; 0x34
    fe5c:	9a04      	ldr	r2, [sp, #16]
    fe5e:	6813      	ldr	r3, [r2, #0]
    fe60:	2b00      	cmp	r3, #0
    fe62:	bf18      	it	ne
    fe64:	2301      	movne	r3, #1
    fe66:	f04f 0c00 	mov.w	ip, #0
    fe6a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    fe6e:	930e      	str	r3, [sp, #56]	; 0x38
    fe70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fe72:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    fe76:	9001      	str	r0, [sp, #4]
    fe78:	9300      	str	r3, [sp, #0]
    fe7a:	e7ff      	b.n	fe7c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x4a>
    fe7c:	9800      	ldr	r0, [sp, #0]
    fe7e:	9011      	str	r0, [sp, #68]	; 0x44
    fe80:	9901      	ldr	r1, [sp, #4]
    fe82:	4281      	cmp	r1, r0
    fe84:	d104      	bne.n	fe90 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x5e>
    fe86:	e7ff      	b.n	fe88 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x56>
    fe88:	2001      	movs	r0, #1
    fe8a:	f88d 0017 	strb.w	r0, [sp, #23]
    fe8e:	e003      	b.n	fe98 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    fe90:	2000      	movs	r0, #0
    fe92:	f88d 0017 	strb.w	r0, [sp, #23]
    fe96:	e7ff      	b.n	fe98 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    fe98:	f89d 0017 	ldrb.w	r0, [sp, #23]
    fe9c:	07c0      	lsls	r0, r0, #31
    fe9e:	2800      	cmp	r0, #0
    fea0:	d104      	bne.n	feac <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x7a>
    fea2:	e7ff      	b.n	fea4 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x72>
    fea4:	2000      	movs	r0, #0
    fea6:	f88d 0016 	strb.w	r0, [sp, #22]
    feaa:	e01c      	b.n	fee6 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    feac:	9803      	ldr	r0, [sp, #12]
    feae:	9006      	str	r0, [sp, #24]
    feb0:	9904      	ldr	r1, [sp, #16]
    feb2:	9107      	str	r1, [sp, #28]
    feb4:	9a06      	ldr	r2, [sp, #24]
    feb6:	6812      	ldr	r2, [r2, #0]
    feb8:	2a00      	cmp	r2, #0
    feba:	d104      	bne.n	fec6 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x94>
    febc:	e7ff      	b.n	febe <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    febe:	2001      	movs	r0, #1
    fec0:	f88d 0016 	strb.w	r0, [sp, #22]
    fec4:	e00e      	b.n	fee4 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    fec6:	9807      	ldr	r0, [sp, #28]
    fec8:	6800      	ldr	r0, [r0, #0]
    feca:	2800      	cmp	r0, #0
    fecc:	d0f7      	beq.n	febe <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    fece:	e7ff      	b.n	fed0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x9e>
    fed0:	9806      	ldr	r0, [sp, #24]
    fed2:	9012      	str	r0, [sp, #72]	; 0x48
    fed4:	9907      	ldr	r1, [sp, #28]
    fed6:	9113      	str	r1, [sp, #76]	; 0x4c
    fed8:	f003 fa76 	bl	133c8 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>
    fedc:	f88d 0016 	strb.w	r0, [sp, #22]
    fee0:	e7ff      	b.n	fee2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb0>
    fee2:	e7ff      	b.n	fee4 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    fee4:	e7ff      	b.n	fee6 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    fee6:	f89d 0016 	ldrb.w	r0, [sp, #22]
    feea:	b014      	add	sp, #80	; 0x50
    feec:	bd80      	pop	{r7, pc}

0000feee <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E>:
    feee:	b580      	push	{r7, lr}
    fef0:	b084      	sub	sp, #16
    fef2:	9002      	str	r0, [sp, #8]
    fef4:	9103      	str	r1, [sp, #12]
    fef6:	6800      	ldr	r0, [r0, #0]
    fef8:	f003 f9f8 	bl	132ec <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>
    fefc:	9001      	str	r0, [sp, #4]
    fefe:	e7ff      	b.n	ff00 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E+0x12>
    ff00:	9801      	ldr	r0, [sp, #4]
    ff02:	f000 0001 	and.w	r0, r0, #1
    ff06:	b004      	add	sp, #16
    ff08:	bd80      	pop	{r7, pc}

0000ff0a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>:
    ff0a:	b580      	push	{r7, lr}
    ff0c:	b084      	sub	sp, #16
    ff0e:	9002      	str	r0, [sp, #8]
    ff10:	9103      	str	r1, [sp, #12]
    ff12:	6800      	ldr	r0, [r0, #0]
    ff14:	f003 f9b3 	bl	1327e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>
    ff18:	9001      	str	r0, [sp, #4]
    ff1a:	e7ff      	b.n	ff1c <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E+0x12>
    ff1c:	9801      	ldr	r0, [sp, #4]
    ff1e:	f000 0001 	and.w	r0, r0, #1
    ff22:	b004      	add	sp, #16
    ff24:	bd80      	pop	{r7, pc}

0000ff26 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E>:
    ff26:	b580      	push	{r7, lr}
    ff28:	b084      	sub	sp, #16
    ff2a:	9002      	str	r0, [sp, #8]
    ff2c:	9103      	str	r1, [sp, #12]
    ff2e:	6800      	ldr	r0, [r0, #0]
    ff30:	f7ff ffeb 	bl	ff0a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>
    ff34:	9001      	str	r0, [sp, #4]
    ff36:	e7ff      	b.n	ff38 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E+0x12>
    ff38:	9801      	ldr	r0, [sp, #4]
    ff3a:	f000 0001 	and.w	r0, r0, #1
    ff3e:	b004      	add	sp, #16
    ff40:	bd80      	pop	{r7, pc}

0000ff42 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE>:
    ff42:	b580      	push	{r7, lr}
    ff44:	b084      	sub	sp, #16
    ff46:	9002      	str	r0, [sp, #8]
    ff48:	9103      	str	r1, [sp, #12]
    ff4a:	6800      	ldr	r0, [r0, #0]
    ff4c:	f003 fa05 	bl	1335a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>
    ff50:	9001      	str	r0, [sp, #4]
    ff52:	e7ff      	b.n	ff54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE+0x12>
    ff54:	9801      	ldr	r0, [sp, #4]
    ff56:	f000 0001 	and.w	r0, r0, #1
    ff5a:	b004      	add	sp, #16
    ff5c:	bd80      	pop	{r7, pc}

0000ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>:
    ff5e:	b089      	sub	sp, #36	; 0x24
    ff60:	9005      	str	r0, [sp, #20]
    ff62:	9106      	str	r1, [sp, #24]
    ff64:	9107      	str	r1, [sp, #28]
    ff66:	9907      	ldr	r1, [sp, #28]
    ff68:	9002      	str	r0, [sp, #8]
    ff6a:	9101      	str	r1, [sp, #4]
    ff6c:	e7ff      	b.n	ff6e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x10>
    ff6e:	9802      	ldr	r0, [sp, #8]
    ff70:	9008      	str	r0, [sp, #32]
    ff72:	9908      	ldr	r1, [sp, #32]
    ff74:	9100      	str	r1, [sp, #0]
    ff76:	e7ff      	b.n	ff78 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x1a>
    ff78:	9800      	ldr	r0, [sp, #0]
    ff7a:	9003      	str	r0, [sp, #12]
    ff7c:	9901      	ldr	r1, [sp, #4]
    ff7e:	9104      	str	r1, [sp, #16]
    ff80:	9803      	ldr	r0, [sp, #12]
    ff82:	9904      	ldr	r1, [sp, #16]
    ff84:	b009      	add	sp, #36	; 0x24
    ff86:	4770      	bx	lr

0000ff88 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>:
    ff88:	b089      	sub	sp, #36	; 0x24
    ff8a:	9005      	str	r0, [sp, #20]
    ff8c:	9106      	str	r1, [sp, #24]
    ff8e:	9107      	str	r1, [sp, #28]
    ff90:	9907      	ldr	r1, [sp, #28]
    ff92:	9002      	str	r0, [sp, #8]
    ff94:	9101      	str	r1, [sp, #4]
    ff96:	e7ff      	b.n	ff98 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x10>
    ff98:	9802      	ldr	r0, [sp, #8]
    ff9a:	9008      	str	r0, [sp, #32]
    ff9c:	9908      	ldr	r1, [sp, #32]
    ff9e:	9100      	str	r1, [sp, #0]
    ffa0:	e7ff      	b.n	ffa2 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x1a>
    ffa2:	9800      	ldr	r0, [sp, #0]
    ffa4:	9003      	str	r0, [sp, #12]
    ffa6:	9901      	ldr	r1, [sp, #4]
    ffa8:	9104      	str	r1, [sp, #16]
    ffaa:	9803      	ldr	r0, [sp, #12]
    ffac:	9904      	ldr	r1, [sp, #16]
    ffae:	b009      	add	sp, #36	; 0x24
    ffb0:	4770      	bx	lr

0000ffb2 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>:
    ffb2:	b089      	sub	sp, #36	; 0x24
    ffb4:	9005      	str	r0, [sp, #20]
    ffb6:	9106      	str	r1, [sp, #24]
    ffb8:	9107      	str	r1, [sp, #28]
    ffba:	9907      	ldr	r1, [sp, #28]
    ffbc:	9002      	str	r0, [sp, #8]
    ffbe:	9101      	str	r1, [sp, #4]
    ffc0:	e7ff      	b.n	ffc2 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x10>
    ffc2:	9802      	ldr	r0, [sp, #8]
    ffc4:	9008      	str	r0, [sp, #32]
    ffc6:	9908      	ldr	r1, [sp, #32]
    ffc8:	9100      	str	r1, [sp, #0]
    ffca:	e7ff      	b.n	ffcc <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x1a>
    ffcc:	9800      	ldr	r0, [sp, #0]
    ffce:	9003      	str	r0, [sp, #12]
    ffd0:	9901      	ldr	r1, [sp, #4]
    ffd2:	9104      	str	r1, [sp, #16]
    ffd4:	9803      	ldr	r0, [sp, #12]
    ffd6:	9904      	ldr	r1, [sp, #16]
    ffd8:	b009      	add	sp, #36	; 0x24
    ffda:	4770      	bx	lr

0000ffdc <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>:
    ffdc:	b089      	sub	sp, #36	; 0x24
    ffde:	9005      	str	r0, [sp, #20]
    ffe0:	9106      	str	r1, [sp, #24]
    ffe2:	9107      	str	r1, [sp, #28]
    ffe4:	9907      	ldr	r1, [sp, #28]
    ffe6:	9002      	str	r0, [sp, #8]
    ffe8:	9101      	str	r1, [sp, #4]
    ffea:	e7ff      	b.n	ffec <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x10>
    ffec:	9802      	ldr	r0, [sp, #8]
    ffee:	9008      	str	r0, [sp, #32]
    fff0:	9908      	ldr	r1, [sp, #32]
    fff2:	9100      	str	r1, [sp, #0]
    fff4:	e7ff      	b.n	fff6 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x1a>
    fff6:	9800      	ldr	r0, [sp, #0]
    fff8:	9003      	str	r0, [sp, #12]
    fffa:	9901      	ldr	r1, [sp, #4]
    fffc:	9104      	str	r1, [sp, #16]
    fffe:	9803      	ldr	r0, [sp, #12]
   10000:	9904      	ldr	r1, [sp, #16]
   10002:	b009      	add	sp, #36	; 0x24
   10004:	4770      	bx	lr

00010006 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>:
   10006:	b580      	push	{r7, lr}
   10008:	b088      	sub	sp, #32
   1000a:	9004      	str	r0, [sp, #16]
   1000c:	9105      	str	r1, [sp, #20]
   1000e:	f000 f819 	bl	10044 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>
   10012:	9001      	str	r0, [sp, #4]
   10014:	9100      	str	r1, [sp, #0]
   10016:	e7ff      	b.n	10018 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x12>
   10018:	9801      	ldr	r0, [sp, #4]
   1001a:	9006      	str	r0, [sp, #24]
   1001c:	9900      	ldr	r1, [sp, #0]
   1001e:	f001 0201 	and.w	r2, r1, #1
   10022:	f88d 201f 	strb.w	r2, [sp, #31]
   10026:	2a00      	cmp	r2, #0
   10028:	d105      	bne.n	10036 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x30>
   1002a:	e7ff      	b.n	1002c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x26>
   1002c:	9801      	ldr	r0, [sp, #4]
   1002e:	9003      	str	r0, [sp, #12]
   10030:	2101      	movs	r1, #1
   10032:	9102      	str	r1, [sp, #8]
   10034:	e002      	b.n	1003c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
   10036:	2000      	movs	r0, #0
   10038:	9002      	str	r0, [sp, #8]
   1003a:	e7ff      	b.n	1003c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
   1003c:	9802      	ldr	r0, [sp, #8]
   1003e:	9903      	ldr	r1, [sp, #12]
   10040:	b008      	add	sp, #32
   10042:	bd80      	pop	{r7, pc}

00010044 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>:
   10044:	b08a      	sub	sp, #40	; 0x28
   10046:	9004      	str	r0, [sp, #16]
   10048:	9105      	str	r1, [sp, #20]
   1004a:	1a40      	subs	r0, r0, r1
   1004c:	f04f 0100 	mov.w	r1, #0
   10050:	f141 0100 	adc.w	r1, r1, #0
   10054:	f1c1 0101 	rsb	r1, r1, #1
   10058:	9006      	str	r0, [sp, #24]
   1005a:	f88d 101c 	strb.w	r1, [sp, #28]
   1005e:	9806      	ldr	r0, [sp, #24]
   10060:	f89d 101c 	ldrb.w	r1, [sp, #28]
   10064:	9001      	str	r0, [sp, #4]
   10066:	9100      	str	r1, [sp, #0]
   10068:	e7ff      	b.n	1006a <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E+0x26>
   1006a:	9801      	ldr	r0, [sp, #4]
   1006c:	9008      	str	r0, [sp, #32]
   1006e:	9900      	ldr	r1, [sp, #0]
   10070:	f001 0201 	and.w	r2, r1, #1
   10074:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   10078:	9002      	str	r0, [sp, #8]
   1007a:	f88d 200c 	strb.w	r2, [sp, #12]
   1007e:	9802      	ldr	r0, [sp, #8]
   10080:	f89d 100c 	ldrb.w	r1, [sp, #12]
   10084:	b00a      	add	sp, #40	; 0x28
   10086:	4770      	bx	lr

00010088 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>:
   10088:	b580      	push	{r7, lr}
   1008a:	b084      	sub	sp, #16
   1008c:	9002      	str	r0, [sp, #8]
   1008e:	9103      	str	r1, [sp, #12]
   10090:	f000 f805 	bl	1009e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
   10094:	9001      	str	r0, [sp, #4]
   10096:	e7ff      	b.n	10098 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE+0x10>
   10098:	9801      	ldr	r0, [sp, #4]
   1009a:	b004      	add	sp, #16
   1009c:	bd80      	pop	{r7, pc}

0001009e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>:
   1009e:	b084      	sub	sp, #16
   100a0:	9001      	str	r0, [sp, #4]
   100a2:	9102      	str	r1, [sp, #8]
   100a4:	4408      	add	r0, r1
   100a6:	9003      	str	r0, [sp, #12]
   100a8:	9803      	ldr	r0, [sp, #12]
   100aa:	9000      	str	r0, [sp, #0]
   100ac:	e7ff      	b.n	100ae <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE+0x10>
   100ae:	9800      	ldr	r0, [sp, #0]
   100b0:	b004      	add	sp, #16
   100b2:	4770      	bx	lr

000100b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>:
   100b4:	b081      	sub	sp, #4
   100b6:	b001      	add	sp, #4
   100b8:	4770      	bx	lr

000100ba <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>:
    }
    Ok(())
}

/// Draw the item to the display
pub fn draw_to_display<T>(item: T)
   100ba:	b510      	push	{r4, lr}
   100bc:	b088      	sub	sp, #32
   100be:	a901      	add	r1, sp, #4
    unsafe { DISPLAY.draw(item) };        //  Draw text or graphics the usual slow way

    #[cfg(feature = "noblock_spi")]       //  If batching is enabled...
    super::batch::draw_blocks(            //  Draw text or graphics the new faster way, as pixel blocks
        unsafe { &mut DISPLAY },
        item
   100c0:	460a      	mov	r2, r1
   100c2:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
   100c6:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
   100ca:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
   100ce:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    super::batch::draw_blocks(            //  Draw text or graphics the new faster way, as pixel blocks
   100d2:	f640 2004 	movw	r0, #2564	; 0xa04
   100d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   100da:	f000 f94a 	bl	10372 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>
   100de:	9000      	str	r0, [sp, #0]
   100e0:	e7ff      	b.n	100e2 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x28>
   100e2:	9800      	ldr	r0, [sp, #0]
   100e4:	f000 0001 	and.w	r0, r0, #1
   100e8:	f24f 11ec 	movw	r1, #61932	; 0xf1ec
   100ec:	f2c0 0101 	movt	r1, #1
   100f0:	f24f 2334 	movw	r3, #62004	; 0xf234
   100f4:	f2c0 0301 	movt	r3, #1
   100f8:	2210      	movs	r2, #16
   100fa:	f005 fad5 	bl	156a8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   100fe:	e7ff      	b.n	10100 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x46>
    ).expect("draw blocks fail");
}
   10100:	b008      	add	sp, #32
   10102:	bd10      	pop	{r4, pc}

00010104 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>:
pub fn start_display() -> MynewtResult<()> {
   10104:	b5b0      	push	{r4, r5, r7, lr}
   10106:	b0b2      	sub	sp, #200	; 0xc8
    let mut spi_port = mynewt::SPI::new();
   10108:	f7ff fb54 	bl	f7b4 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>
   1010c:	9115      	str	r1, [sp, #84]	; 0x54
   1010e:	9014      	str	r0, [sp, #80]	; 0x50
   10110:	e7ff      	b.n	10112 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe>
    let mut dc_gpio =  mynewt::GPIO::new();
   10112:	f7ff fd0d 	bl	fb30 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
   10116:	9016      	str	r0, [sp, #88]	; 0x58
   10118:	e7ff      	b.n	1011a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16>
    let mut rst_gpio = mynewt::GPIO::new();
   1011a:	f7ff fd09 	bl	fb30 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
   1011e:	9017      	str	r0, [sp, #92]	; 0x5c
   10120:	e7ff      	b.n	10122 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e>
    spi_port.init(
   10122:	f240 03f0 	movw	r3, #240	; 0xf0
   10126:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1012a:	a814      	add	r0, sp, #80	; 0x50
   1012c:	2100      	movs	r1, #0
   1012e:	2219      	movs	r2, #25
   10130:	f7ff fb48 	bl	f7c4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>
   10134:	9012      	str	r0, [sp, #72]	; 0x48
   10136:	e7ff      	b.n	10138 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x34>
   10138:	9812      	ldr	r0, [sp, #72]	; 0x48
   1013a:	f7ff f880 	bl	f23e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   1013e:	9018      	str	r0, [sp, #96]	; 0x60
   10140:	e7ff      	b.n	10142 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x3e>
    ) ? ;
   10142:	9818      	ldr	r0, [sp, #96]	; 0x60
   10144:	1e41      	subs	r1, r0, #1
   10146:	bf18      	it	ne
   10148:	2101      	movne	r1, #1
   1014a:	2801      	cmp	r0, #1
   1014c:	d001      	beq.n	10152 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4e>
   1014e:	e7ff      	b.n	10150 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4c>
   10150:	e006      	b.n	10160 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x5c>
   10152:	a816      	add	r0, sp, #88	; 0x58
   10154:	2112      	movs	r1, #18
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
   10156:	f7ff fced 	bl	fb34 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
   1015a:	9011      	str	r0, [sp, #68]	; 0x44
   1015c:	e010      	b.n	10180 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7c>
    spi_port.init(
   1015e:	defe      	udf	#254	; 0xfe
    ) ? ;
   10160:	9818      	ldr	r0, [sp, #96]	; 0x60
   10162:	902d      	str	r0, [sp, #180]	; 0xb4
   10164:	f7ff f8de 	bl	f324 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   10168:	9010      	str	r0, [sp, #64]	; 0x40
   1016a:	e002      	b.n	10172 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x6e>
}
   1016c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1016e:	b032      	add	sp, #200	; 0xc8
   10170:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;
   10172:	9810      	ldr	r0, [sp, #64]	; 0x40
   10174:	f7ff f857 	bl	f226 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   10178:	9013      	str	r0, [sp, #76]	; 0x4c
   1017a:	e7ff      	b.n	1017c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x78>
   1017c:	e7ff      	b.n	1017e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
   1017e:	e7f5      	b.n	1016c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
   10180:	9811      	ldr	r0, [sp, #68]	; 0x44
   10182:	f7ff f85c 	bl	f23e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   10186:	9019      	str	r0, [sp, #100]	; 0x64
   10188:	e7ff      	b.n	1018a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x86>
   1018a:	9819      	ldr	r0, [sp, #100]	; 0x64
   1018c:	1e41      	subs	r1, r0, #1
   1018e:	bf18      	it	ne
   10190:	2101      	movne	r1, #1
   10192:	2801      	cmp	r0, #1
   10194:	d001      	beq.n	1019a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x96>
   10196:	e7ff      	b.n	10198 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x94>
   10198:	e006      	b.n	101a8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xa4>
   1019a:	a817      	add	r0, sp, #92	; 0x5c
   1019c:	211a      	movs	r1, #26
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
   1019e:	f7ff fcc9 	bl	fb34 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
   101a2:	900f      	str	r0, [sp, #60]	; 0x3c
   101a4:	e00c      	b.n	101c0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xbc>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
   101a6:	defe      	udf	#254	; 0xfe
   101a8:	9819      	ldr	r0, [sp, #100]	; 0x64
   101aa:	902e      	str	r0, [sp, #184]	; 0xb8
   101ac:	f7ff f8ba 	bl	f324 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   101b0:	900e      	str	r0, [sp, #56]	; 0x38
   101b2:	e7ff      	b.n	101b4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xb0>
   101b4:	980e      	ldr	r0, [sp, #56]	; 0x38
   101b6:	f7ff f836 	bl	f226 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   101ba:	9013      	str	r0, [sp, #76]	; 0x4c
   101bc:	e7ff      	b.n	101be <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xba>
   101be:	e7de      	b.n	1017e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
   101c0:	980f      	ldr	r0, [sp, #60]	; 0x3c
   101c2:	f7ff f83c 	bl	f23e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   101c6:	901a      	str	r0, [sp, #104]	; 0x68
   101c8:	e7ff      	b.n	101ca <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xc6>
   101ca:	981a      	ldr	r0, [sp, #104]	; 0x68
   101cc:	1e41      	subs	r1, r0, #1
   101ce:	bf18      	it	ne
   101d0:	2101      	movne	r1, #1
   101d2:	2801      	cmp	r0, #1
   101d4:	d001      	beq.n	101da <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd6>
   101d6:	e7ff      	b.n	101d8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd4>
   101d8:	e004      	b.n	101e4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe0>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
   101da:	f7ff fca9 	bl	fb30 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
   101de:	900d      	str	r0, [sp, #52]	; 0x34
   101e0:	e00c      	b.n	101fc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf8>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
   101e2:	defe      	udf	#254	; 0xfe
   101e4:	981a      	ldr	r0, [sp, #104]	; 0x68
   101e6:	902f      	str	r0, [sp, #188]	; 0xbc
   101e8:	f7ff f89c 	bl	f324 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   101ec:	900c      	str	r0, [sp, #48]	; 0x30
   101ee:	e7ff      	b.n	101f0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xec>
   101f0:	980c      	ldr	r0, [sp, #48]	; 0x30
   101f2:	f7ff f818 	bl	f226 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   101f6:	9013      	str	r0, [sp, #76]	; 0x4c
   101f8:	e7ff      	b.n	101fa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf6>
   101fa:	e7c0      	b.n	1017e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
   101fc:	f640 201c 	movw	r0, #2588	; 0xa1c
   10200:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10204:	990d      	ldr	r1, [sp, #52]	; 0x34
   10206:	6001      	str	r1, [r0, #0]
   10208:	2117      	movs	r1, #23
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
   1020a:	f7ff fc93 	bl	fb34 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
   1020e:	900b      	str	r0, [sp, #44]	; 0x2c
   10210:	e7ff      	b.n	10212 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x10e>
   10212:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10214:	f7ff f813 	bl	f23e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   10218:	901b      	str	r0, [sp, #108]	; 0x6c
   1021a:	e7ff      	b.n	1021c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x118>
   1021c:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1021e:	1e41      	subs	r1, r0, #1
   10220:	bf18      	it	ne
   10222:	2101      	movne	r1, #1
   10224:	2801      	cmp	r0, #1
   10226:	d001      	beq.n	1022c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x128>
   10228:	e7ff      	b.n	1022a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x126>
   1022a:	e008      	b.n	1023e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x13a>
        BACKLIGHT_HIGH.set_low() ? ;    
   1022c:	f640 201c 	movw	r0, #2588	; 0xa1c
   10230:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10234:	f7ff fd17 	bl	fc66 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
   10238:	900a      	str	r0, [sp, #40]	; 0x28
   1023a:	e00d      	b.n	10258 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x154>
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
   1023c:	defe      	udf	#254	; 0xfe
   1023e:	981b      	ldr	r0, [sp, #108]	; 0x6c
   10240:	9030      	str	r0, [sp, #192]	; 0xc0
   10242:	f7ff f86f 	bl	f324 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   10246:	9009      	str	r0, [sp, #36]	; 0x24
   10248:	e7ff      	b.n	1024a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x146>
   1024a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1024c:	f7fe ffeb 	bl	f226 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   10250:	9013      	str	r0, [sp, #76]	; 0x4c
   10252:	e7ff      	b.n	10254 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x150>
   10254:	e7ff      	b.n	10256 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
   10256:	e792      	b.n	1017e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH.set_low() ? ;    
   10258:	980a      	ldr	r0, [sp, #40]	; 0x28
   1025a:	f7fe fff0 	bl	f23e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   1025e:	901c      	str	r0, [sp, #112]	; 0x70
   10260:	e7ff      	b.n	10262 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x15e>
   10262:	981c      	ldr	r0, [sp, #112]	; 0x70
   10264:	1e41      	subs	r1, r0, #1
   10266:	bf18      	it	ne
   10268:	2101      	movne	r1, #1
   1026a:	2801      	cmp	r0, #1
   1026c:	d001      	beq.n	10272 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16e>
   1026e:	e7ff      	b.n	10270 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16c>
   10270:	e011      	b.n	10296 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x192>
        spi_port,    //  SPI Port
   10272:	9914      	ldr	r1, [sp, #80]	; 0x50
   10274:	9a15      	ldr	r2, [sp, #84]	; 0x54
        dc_gpio,     //  GPIO Pin for DC
   10276:	9b16      	ldr	r3, [sp, #88]	; 0x58
        rst_gpio,    //  GPIO Pin for RST
   10278:	9817      	ldr	r0, [sp, #92]	; 0x5c
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
   1027a:	46ec      	mov	ip, sp
   1027c:	f04f 0e01 	mov.w	lr, #1
   10280:	f8cc e008 	str.w	lr, [ip, #8]
   10284:	f8cc e004 	str.w	lr, [ip, #4]
   10288:	f8cc 0000 	str.w	r0, [ip]
   1028c:	a81d      	add	r0, sp, #116	; 0x74
   1028e:	f001 f8d2 	bl	11436 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>
   10292:	e00c      	b.n	102ae <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1aa>
        BACKLIGHT_HIGH.set_low() ? ;    
   10294:	defe      	udf	#254	; 0xfe
   10296:	981c      	ldr	r0, [sp, #112]	; 0x70
   10298:	9031      	str	r0, [sp, #196]	; 0xc4
   1029a:	f7ff f843 	bl	f324 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   1029e:	9008      	str	r0, [sp, #32]
   102a0:	e7ff      	b.n	102a2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x19e>
   102a2:	9808      	ldr	r0, [sp, #32]
   102a4:	f7fe ffbf 	bl	f226 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   102a8:	9013      	str	r0, [sp, #76]	; 0x4c
   102aa:	e7ff      	b.n	102ac <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1a8>
   102ac:	e7d3      	b.n	10256 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
   102ae:	f640 2004 	movw	r0, #2564	; 0xa04
   102b2:	f2c2 0000 	movt	r0, #8192	; 0x2000
   102b6:	a91d      	add	r1, sp, #116	; 0x74
   102b8:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   102bc:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    let mut delay = mynewt::Delay::new();
   102c0:	f7ff fce7 	bl	fc92 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>
   102c4:	e7ff      	b.n	102c6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1c2>
        DISPLAY.init(&mut delay) ? ;
   102c6:	f640 2004 	movw	r0, #2564	; 0xa04
   102ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
   102ce:	a923      	add	r1, sp, #140	; 0x8c
   102d0:	f001 f8d3 	bl	1147a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>
   102d4:	9007      	str	r0, [sp, #28]
   102d6:	e7ff      	b.n	102d8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1d4>
   102d8:	9807      	ldr	r0, [sp, #28]
   102da:	f000 0001 	and.w	r0, r0, #1
   102de:	f7fe ffa8 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   102e2:	f88d 008e 	strb.w	r0, [sp, #142]	; 0x8e
   102e6:	e7ff      	b.n	102e8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e4>
   102e8:	f89d 008e 	ldrb.w	r0, [sp, #142]	; 0x8e
   102ec:	07c1      	lsls	r1, r0, #31
   102ee:	2900      	cmp	r1, #0
   102f0:	d001      	beq.n	102f6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f2>
   102f2:	e7ff      	b.n	102f4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f0>
   102f4:	e00d      	b.n	10312 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x20e>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
   102f6:	f24f 2048 	movw	r0, #62024	; 0xf248
   102fa:	f2c0 0001 	movt	r0, #1
   102fe:	6801      	ldr	r1, [r0, #0]
   10300:	f640 2004 	movw	r0, #2564	; 0xa04
   10304:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10308:	f000 fecc 	bl	110a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>
   1030c:	9006      	str	r0, [sp, #24]
   1030e:	e00b      	b.n	10328 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x224>
        DISPLAY.init(&mut delay) ? ;
   10310:	defe      	udf	#254	; 0xfe
   10312:	f002 ff56 	bl	131c2 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   10316:	9005      	str	r0, [sp, #20]
   10318:	e7ff      	b.n	1031a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x216>
   1031a:	9805      	ldr	r0, [sp, #20]
   1031c:	f7fe ff83 	bl	f226 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   10320:	9013      	str	r0, [sp, #76]	; 0x4c
   10322:	e7ff      	b.n	10324 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x220>
   10324:	e7ff      	b.n	10326 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>
   10326:	e72a      	b.n	1017e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
   10328:	9806      	ldr	r0, [sp, #24]
   1032a:	f000 0001 	and.w	r0, r0, #1
   1032e:	f7fe ff80 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10332:	f88d 008f 	strb.w	r0, [sp, #143]	; 0x8f
   10336:	e7ff      	b.n	10338 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x234>
   10338:	f89d 008f 	ldrb.w	r0, [sp, #143]	; 0x8f
   1033c:	07c1      	lsls	r1, r0, #31
   1033e:	2900      	cmp	r1, #0
   10340:	d001      	beq.n	10346 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x242>
   10342:	e7ff      	b.n	10344 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x240>
   10344:	e005      	b.n	10352 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x24e>
   10346:	2000      	movs	r0, #0
    Ok(())
   10348:	9013      	str	r0, [sp, #76]	; 0x4c
   1034a:	2001      	movs	r0, #1
   1034c:	9013      	str	r0, [sp, #76]	; 0x4c
}
   1034e:	e70d      	b.n	1016c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
   10350:	defe      	udf	#254	; 0xfe
   10352:	f002 ff36 	bl	131c2 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   10356:	9004      	str	r0, [sp, #16]
   10358:	e7ff      	b.n	1035a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x256>
   1035a:	9804      	ldr	r0, [sp, #16]
   1035c:	f7fe ff63 	bl	f226 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   10360:	9013      	str	r0, [sp, #76]	; 0x4c
   10362:	e7ff      	b.n	10364 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x260>
   10364:	e7df      	b.n	10326 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>

00010366 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>:
   10366:	b580      	push	{r7, lr}
   10368:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   1036c:	f00c ff16 	bl	1d19c <__aeabi_memcpy>
   10370:	bd80      	pop	{r7, pc}

00010372 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>:
    pub colors:   BlockColors,
}

/// Draw the pixels in the item as Pixel Blocks of contiguous Pixel Rows. The pixels are grouped by row then by block.
#[allow(dead_code)]
pub fn draw_blocks<SPI, DC, RST, T>(display: &mut ST7735<SPI, DC, RST>, item_pixels: T) -> Result<(),()>
   10372:	b5b0      	push	{r4, r5, r7, lr}
   10374:	f5ad 6d48 	sub.w	sp, sp, #3200	; 0xc80
   10378:	f8cd 0c6c 	str.w	r0, [sp, #3180]	; 0xc6c
   1037c:	aa19      	add	r2, sp, #100	; 0x64
    SPI: spi::Write<u8>,
    DC: OutputPin,
    RST: OutputPin,
    T: IntoIterator<Item = Pixel<Rgb565>>, {
    //  Get the pixels for the item to be rendered.
    let pixels = item_pixels.into_iter();
   1037e:	4613      	mov	r3, r2
   10380:	e8b1 5010 	ldmia.w	r1!, {r4, ip, lr}
   10384:	e8a3 5010 	stmia.w	r3!, {r4, ip, lr}
   10388:	e891 5030 	ldmia.w	r1, {r4, r5, ip, lr}
   1038c:	e883 5030 	stmia.w	r3, {r4, r5, ip, lr}
   10390:	a910      	add	r1, sp, #64	; 0x40
   10392:	900e      	str	r0, [sp, #56]	; 0x38
   10394:	4608      	mov	r0, r1
   10396:	4611      	mov	r1, r2
   10398:	f001 fcb9 	bl	11d0e <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>
   1039c:	e7ff      	b.n	1039e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x2c>
   1039e:	a810      	add	r0, sp, #64	; 0x40
   103a0:	a945      	add	r1, sp, #276	; 0x114
    //  Batch the pixels into Pixel Rows.
    let rows = to_rows(pixels);
   103a2:	460a      	mov	r2, r1
   103a4:	e8b0 5018 	ldmia.w	r0!, {r3, r4, ip, lr}
   103a8:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   103ac:	e890 5038 	ldmia.w	r0, {r3, r4, r5, ip, lr}
   103b0:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   103b4:	a820      	add	r0, sp, #128	; 0x80
   103b6:	f000 f8b7 	bl	10528 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>
   103ba:	e7ff      	b.n	103bc <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x4a>
   103bc:	a8a9      	add	r0, sp, #676	; 0x2a4
   103be:	a920      	add	r1, sp, #128	; 0x80
   103c0:	2294      	movs	r2, #148	; 0x94
    //  Batch the Pixel Rows into Pixel Blocks.
    let blocks = to_blocks(rows);
   103c2:	900d      	str	r0, [sp, #52]	; 0x34
   103c4:	f00c feea 	bl	1d19c <__aeabi_memcpy>
   103c8:	a84e      	add	r0, sp, #312	; 0x138
   103ca:	990d      	ldr	r1, [sp, #52]	; 0x34
   103cc:	f000 f8db 	bl	10586 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>
   103d0:	e7ff      	b.n	103d2 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x60>
   103d2:	f20d 40a4 	addw	r0, sp, #1188	; 0x4a4
   103d6:	a94e      	add	r1, sp, #312	; 0x138
   103d8:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    //  For each Pixel Block...
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   103dc:	900c      	str	r0, [sp, #48]	; 0x30
   103de:	f00c fedd 	bl	1d19c <__aeabi_memcpy>
   103e2:	a8ce      	add	r0, sp, #824	; 0x338
   103e4:	990c      	ldr	r1, [sp, #48]	; 0x30
   103e6:	f7ff ffbe 	bl	10366 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>
   103ea:	e7ff      	b.n	103ec <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x7a>
   103ec:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
   103f0:	a9ce      	add	r1, sp, #824	; 0x338
   103f2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   103f6:	f00c fed1 	bl	1d19c <__aeabi_memcpy>
   103fa:	e7ff      	b.n	103fc <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8a>
   103fc:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   10400:	f50d 61c2 	add.w	r1, sp, #1552	; 0x610
   10404:	f000 fa2c 	bl	10860 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>
   10408:	e7ff      	b.n	1040a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x98>
   1040a:	f8dd 0850 	ldr.w	r0, [sp, #2128]	; 0x850
   1040e:	2800      	cmp	r0, #0
   10410:	d001      	beq.n	10416 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa4>
   10412:	e7ff      	b.n	10414 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa2>
   10414:	e005      	b.n	10422 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xb0>
   10416:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   1041a:	f001 fc48 	bl	11cae <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   1041e:	e01c      	b.n	1045a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xe8>
   10420:	defe      	udf	#254	; 0xfe
   10422:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   10426:	1d01      	adds	r1, r0, #4
   10428:	f60d 1028 	addw	r0, sp, #2344	; 0x928
   1042c:	22d4      	movs	r2, #212	; 0xd4
   1042e:	900b      	str	r0, [sp, #44]	; 0x2c
   10430:	920a      	str	r2, [sp, #40]	; 0x28
   10432:	f00c feb3 	bl	1d19c <__aeabi_memcpy>
   10436:	f60d 10fc 	addw	r0, sp, #2556	; 0x9fc
   1043a:	9009      	str	r0, [sp, #36]	; 0x24
   1043c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1043e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10440:	f00c feac 	bl	1d19c <__aeabi_memcpy>
   10444:	f20d 707c 	addw	r0, sp, #1916	; 0x77c
   10448:	9909      	ldr	r1, [sp, #36]	; 0x24
   1044a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1044c:	f00c fea6 	bl	1d19c <__aeabi_memcpy>
   10450:	f8dd 0850 	ldr.w	r0, [sp, #2128]	; 0x850
   10454:	2801      	cmp	r0, #1
   10456:	d02c      	beq.n	104b2 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x140>
   10458:	e061      	b.n	1051e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x1ac>
   1045a:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
        //  Dump out the Pixel Blocks for the square in test_display()
        /* if x_left >= 60 && x_left <= 150 && x_right >= 60 && x_right <= 150 && y_top >= 60 && y_top <= 150 && y_bottom >= 60 && y_bottom <= 150 {
            console::print("pixel block ("); console::printint(x_left as i32); console::print(", "); console::printint(y_top as i32); ////
            console::print("), ("); console::printint(x_right as i32); console::print(", "); console::printint(y_bottom as i32); console::print(")\n"); ////    
        } */
    }
   1045e:	f001 fc03 	bl	11c68 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   10462:	e022      	b.n	104aa <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x138>
        display.set_pixels(
   10464:	f89d 0b9f 	ldrb.w	r0, [sp, #2975]	; 0xb9f
   10468:	f7fe fee3 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1046c:	f88d 0b9e 	strb.w	r0, [sp, #2974]	; 0xb9e
   10470:	e7ff      	b.n	10472 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x100>
            colors) ? ;
   10472:	f89d 0b9e 	ldrb.w	r0, [sp, #2974]	; 0xb9e
   10476:	07c1      	lsls	r1, r0, #31
   10478:	2900      	cmp	r1, #0
   1047a:	d001      	beq.n	10480 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x10e>
   1047c:	e7ff      	b.n	1047e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x10c>
   1047e:	e001      	b.n	10484 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x112>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   10480:	e7bc      	b.n	103fc <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8a>
        display.set_pixels(
   10482:	defe      	udf	#254	; 0xfe
            colors) ? ;
   10484:	f002 fdfa 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10488:	e004      	b.n	10494 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x122>
    Ok(())
}
   1048a:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
   1048e:	f50d 6d48 	add.w	sp, sp, #3200	; 0xc80
   10492:	bdb0      	pop	{r4, r5, r7, pc}
            colors) ? ;
   10494:	f005 fa55 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10498:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   1049c:	e7ff      	b.n	1049e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x12c>
   1049e:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
    }
   104a2:	f001 fbe1 	bl	11c68 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   104a6:	e7ff      	b.n	104a8 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x136>
}
   104a8:	e7ef      	b.n	1048a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x118>
   104aa:	2000      	movs	r0, #0
    Ok(())
   104ac:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
}
   104b0:	e7eb      	b.n	1048a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x118>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   104b2:	f8bd 0848 	ldrh.w	r0, [sp, #2120]	; 0x848
   104b6:	f8ad 0c78 	strh.w	r0, [sp, #3192]	; 0xc78
   104ba:	f8bd 184a 	ldrh.w	r1, [sp, #2122]	; 0x84a
   104be:	f8ad 1c7a 	strh.w	r1, [sp, #3194]	; 0xc7a
   104c2:	f8bd 284c 	ldrh.w	r2, [sp, #2124]	; 0x84c
   104c6:	f8ad 2c7c 	strh.w	r2, [sp, #3196]	; 0xc7c
   104ca:	f8bd 384e 	ldrh.w	r3, [sp, #2126]	; 0x84e
   104ce:	f8ad 3c7e 	strh.w	r3, [sp, #3198]	; 0xc7e
   104d2:	f50d 6c2d 	add.w	ip, sp, #2768	; 0xad0
   104d6:	f20d 7e7c 	addw	lr, sp, #1916	; 0x77c
   104da:	24cc      	movs	r4, #204	; 0xcc
   104dc:	9008      	str	r0, [sp, #32]
   104de:	4660      	mov	r0, ip
   104e0:	9107      	str	r1, [sp, #28]
   104e2:	4671      	mov	r1, lr
   104e4:	9206      	str	r2, [sp, #24]
   104e6:	4622      	mov	r2, r4
   104e8:	9305      	str	r3, [sp, #20]
   104ea:	f8cd c010 	str.w	ip, [sp, #16]
   104ee:	9403      	str	r4, [sp, #12]
   104f0:	f00c fe54 	bl	1d19c <__aeabi_memcpy>
   104f4:	f50d 603a 	add.w	r0, sp, #2976	; 0xba0
            colors) ? ;
   104f8:	9002      	str	r0, [sp, #8]
   104fa:	9904      	ldr	r1, [sp, #16]
   104fc:	9a03      	ldr	r2, [sp, #12]
   104fe:	f00c fe4d 	bl	1d19c <__aeabi_memcpy>
        display.set_pixels(
   10502:	4668      	mov	r0, sp
   10504:	9902      	ldr	r1, [sp, #8]
   10506:	6041      	str	r1, [r0, #4]
   10508:	9a05      	ldr	r2, [sp, #20]
   1050a:	6002      	str	r2, [r0, #0]
   1050c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1050e:	9908      	ldr	r1, [sp, #32]
   10510:	9a06      	ldr	r2, [sp, #24]
   10512:	9b07      	ldr	r3, [sp, #28]
   10514:	f000 fbf5 	bl	10d02 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>
   10518:	f88d 0b9f 	strb.w	r0, [sp, #2975]	; 0xb9f
   1051c:	e7a2      	b.n	10464 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xf2>
   1051e:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   10522:	f001 fbc4 	bl	11cae <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   10526:	e7c4      	b.n	104b2 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x140>

00010528 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>:

/// Batch the pixels into Pixel Rows, which are contiguous pixels on the same row.
/// P can be any Pixel Iterator (e.g. a rectangle).
fn to_rows<P>(pixels: P) -> RowIterator<P>
   10528:	b5b0      	push	{r4, r5, r7, lr}
   1052a:	b0a4      	sub	sp, #144	; 0x90
   1052c:	aa01      	add	r2, sp, #4
where
    P: Iterator<Item = Pixel<Rgb565>>, {
    RowIterator::<P> {
        pixels,
   1052e:	e8b1 5018 	ldmia.w	r1!, {r3, r4, ip, lr}
   10532:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   10536:	e891 5038 	ldmia.w	r1, {r3, r4, r5, ip, lr}
   1053a:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   1053e:	a90a      	add	r1, sp, #40	; 0x28
        x_left: 0,
        x_right: 0,
        y: 0,
        colors: RowColors::new(),
   10540:	9000      	str	r0, [sp, #0]
   10542:	4608      	mov	r0, r1
   10544:	f004 fcf3 	bl	14f2e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>
   10548:	e7ff      	b.n	1054a <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E+0x22>
   1054a:	a801      	add	r0, sp, #4
    RowIterator::<P> {
   1054c:	9900      	ldr	r1, [sp, #0]
   1054e:	e8b0 500c 	ldmia.w	r0!, {r2, r3, ip, lr}
   10552:	e8a1 500c 	stmia.w	r1!, {r2, r3, ip, lr}
   10556:	e890 501c 	ldmia.w	r0, {r2, r3, r4, ip, lr}
   1055a:	e881 501c 	stmia.w	r1, {r2, r3, r4, ip, lr}
   1055e:	2000      	movs	r0, #0
   10560:	9900      	ldr	r1, [sp, #0]
   10562:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
   10566:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
   1056a:	f8a1 0090 	strh.w	r0, [r1, #144]	; 0x90
   1056e:	f101 0024 	add.w	r0, r1, #36	; 0x24
   10572:	a90a      	add	r1, sp, #40	; 0x28
   10574:	2268      	movs	r2, #104	; 0x68
   10576:	f00c fe11 	bl	1d19c <__aeabi_memcpy>
   1057a:	2001      	movs	r0, #1
   1057c:	9900      	ldr	r1, [sp, #0]
   1057e:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
        first_pixel: true,
    }
}
   10582:	b024      	add	sp, #144	; 0x90
   10584:	bdb0      	pop	{r4, r5, r7, pc}

00010586 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>:

/// Batch the Pixel Rows into Pixel Blocks, which are contiguous Pixel Rows with the same start and end column number
/// R can be any Pixel Row Iterator.
fn to_blocks<R>(rows: R) -> BlockIterator<R>
   10586:	b580      	push	{r7, lr}
   10588:	b0da      	sub	sp, #360	; 0x168
   1058a:	aa02      	add	r2, sp, #8
   1058c:	2394      	movs	r3, #148	; 0x94
where
    R: Iterator<Item = PixelRow>, {
    BlockIterator::<R> {
        rows,
   1058e:	9001      	str	r0, [sp, #4]
   10590:	4610      	mov	r0, r2
   10592:	461a      	mov	r2, r3
   10594:	f00c fe02 	bl	1d19c <__aeabi_memcpy>
   10598:	a827      	add	r0, sp, #156	; 0x9c
        x_left: 0,
        x_right: 0,
        y_top: 0,
        y_bottom: 0,
        colors: BlockColors::new(),
   1059a:	f004 fcd7 	bl	14f4c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>
   1059e:	e7ff      	b.n	105a0 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E+0x1a>
   105a0:	a902      	add	r1, sp, #8
   105a2:	2294      	movs	r2, #148	; 0x94
    BlockIterator::<R> {
   105a4:	9801      	ldr	r0, [sp, #4]
   105a6:	f00c fdf9 	bl	1d19c <__aeabi_memcpy>
   105aa:	2000      	movs	r0, #0
   105ac:	9901      	ldr	r1, [sp, #4]
   105ae:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
   105b2:	f8a1 0162 	strh.w	r0, [r1, #354]	; 0x162
   105b6:	f8a1 0164 	strh.w	r0, [r1, #356]	; 0x164
   105ba:	f8a1 0166 	strh.w	r0, [r1, #358]	; 0x166
   105be:	f101 0094 	add.w	r0, r1, #148	; 0x94
   105c2:	a927      	add	r1, sp, #156	; 0x9c
   105c4:	22cc      	movs	r2, #204	; 0xcc
   105c6:	f00c fde9 	bl	1d19c <__aeabi_memcpy>
   105ca:	2001      	movs	r0, #1
   105cc:	9901      	ldr	r1, [sp, #4]
   105ce:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
        first_row: true,
    }
}    
   105d2:	b05a      	add	sp, #360	; 0x168
   105d4:	bd80      	pop	{r7, pc}

000105d6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>:
impl<P: Iterator<Item = Pixel<Rgb565>>> Iterator for RowIterator<P> {
    /// This Iterator returns Pixel Rows
    type Item = PixelRow;

    /// Return the next Pixel Row of contiguous pixels on the same row
    fn next(&mut self) -> Option<Self::Item> {
   105d6:	b580      	push	{r7, lr}
   105d8:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
   105dc:	91c1      	str	r1, [sp, #772]	; 0x304
        //  Loop over all pixels until we have composed a Pixel Row, or we have run out of pixels.
        loop {
   105de:	9116      	str	r1, [sp, #88]	; 0x58
   105e0:	9015      	str	r0, [sp, #84]	; 0x54
   105e2:	e7ff      	b.n	105e4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   105e4:	a817      	add	r0, sp, #92	; 0x5c
            //  Get the next pixel.
            let next_pixel = self.pixels.next();
   105e6:	9916      	ldr	r1, [sp, #88]	; 0x58
   105e8:	f001 fbec 	bl	11dc4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>
   105ec:	e7ff      	b.n	105ee <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x18>
            match next_pixel {
                None => {  //  If no more pixels...
   105ee:	9817      	ldr	r0, [sp, #92]	; 0x5c
   105f0:	2800      	cmp	r0, #0
   105f2:	d01c      	beq.n	1062e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x58>
   105f4:	e7ff      	b.n	105f6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x20>
                    };
                    self.colors.clear();
                    self.first_pixel = true;
                    return Some(row);
                }
                Some(Pixel(coord, color)) => {  //  If there is a pixel...
   105f6:	9818      	ldr	r0, [sp, #96]	; 0x60
   105f8:	9919      	ldr	r1, [sp, #100]	; 0x64
   105fa:	90c2      	str	r0, [sp, #776]	; 0x308
   105fc:	91c3      	str	r1, [sp, #780]	; 0x30c
   105fe:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   10602:	4613      	mov	r3, r2
   10604:	f8ad 2310 	strh.w	r2, [sp, #784]	; 0x310
                    let x = coord.0 as u16;
   10608:	f8ad 0312 	strh.w	r0, [sp, #786]	; 0x312
                    let y = coord.1 as u16;
   1060c:	f8ad 1314 	strh.w	r1, [sp, #788]	; 0x314
                    let color = color.0;
   10610:	f8ad 2316 	strh.w	r2, [sp, #790]	; 0x316
                    //  Save the first pixel as the row start and handle next pixel.
                    if self.first_pixel {
   10614:	9a16      	ldr	r2, [sp, #88]	; 0x58
   10616:	f892 c092 	ldrb.w	ip, [r2, #146]	; 0x92
   1061a:	ea4f 7ccc 	mov.w	ip, ip, lsl #31
   1061e:	f1bc 0f00 	cmp.w	ip, #0
   10622:	9014      	str	r0, [sp, #80]	; 0x50
   10624:	9113      	str	r1, [sp, #76]	; 0x4c
   10626:	9312      	str	r3, [sp, #72]	; 0x48
   10628:	d156      	bne.n	106d8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x102>
   1062a:	e04a      	b.n	106c2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xec>
            match next_pixel {
   1062c:	defe      	udf	#254	; 0xfe
                    if self.first_pixel {
   1062e:	9816      	ldr	r0, [sp, #88]	; 0x58
   10630:	f890 1092 	ldrb.w	r1, [r0, #146]	; 0x92
   10634:	07c9      	lsls	r1, r1, #31
   10636:	2900      	cmp	r1, #0
   10638:	d111      	bne.n	1065e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x88>
   1063a:	e7ff      	b.n	1063c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x66>
                        x_left: self.x_left,
   1063c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1063e:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   10642:	f8b0 208e 	ldrh.w	r2, [r0, #142]	; 0x8e
                        y: self.y,
   10646:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
                        colors: self.colors.clone(),
   1064a:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   1064e:	a837      	add	r0, sp, #220	; 0xdc
   10650:	9111      	str	r1, [sp, #68]	; 0x44
   10652:	4661      	mov	r1, ip
   10654:	9210      	str	r2, [sp, #64]	; 0x40
   10656:	930f      	str	r3, [sp, #60]	; 0x3c
   10658:	f004 fbd2 	bl	14e00 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   1065c:	e006      	b.n	1066c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x96>
   1065e:	2000      	movs	r0, #0
                        return None;  //  No pixels to group
   10660:	9915      	ldr	r1, [sp, #84]	; 0x54
   10662:	6008      	str	r0, [r1, #0]
   10664:	e7ff      	b.n	10666 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                        .expect("never");
                    return Some(row);
                }
            }
        }
    }
   10666:	f50d 7d46 	add.w	sp, sp, #792	; 0x318
   1066a:	bd80      	pop	{r7, pc}
                    let row = PixelRow {
   1066c:	9811      	ldr	r0, [sp, #68]	; 0x44
   1066e:	f8ad 00d4 	strh.w	r0, [sp, #212]	; 0xd4
   10672:	9910      	ldr	r1, [sp, #64]	; 0x40
   10674:	f8ad 10d6 	strh.w	r1, [sp, #214]	; 0xd6
   10678:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1067a:	f8ad 20d8 	strh.w	r2, [sp, #216]	; 0xd8
   1067e:	a81b      	add	r0, sp, #108	; 0x6c
   10680:	a937      	add	r1, sp, #220	; 0xdc
   10682:	2268      	movs	r2, #104	; 0x68
   10684:	f00c fd8a 	bl	1d19c <__aeabi_memcpy>
                    self.colors.clear();
   10688:	9816      	ldr	r0, [sp, #88]	; 0x58
   1068a:	3024      	adds	r0, #36	; 0x24
   1068c:	f004 fc7d 	bl	14f8a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   10690:	e7ff      	b.n	10692 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xbc>
   10692:	2001      	movs	r0, #1
                    self.first_pixel = true;
   10694:	9916      	ldr	r1, [sp, #88]	; 0x58
   10696:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
   1069a:	aa51      	add	r2, sp, #324	; 0x144
   1069c:	a91b      	add	r1, sp, #108	; 0x6c
   1069e:	2370      	movs	r3, #112	; 0x70
                    return Some(row);
   106a0:	900e      	str	r0, [sp, #56]	; 0x38
   106a2:	4610      	mov	r0, r2
   106a4:	920d      	str	r2, [sp, #52]	; 0x34
   106a6:	461a      	mov	r2, r3
   106a8:	930c      	str	r3, [sp, #48]	; 0x30
   106aa:	f00c fd77 	bl	1d19c <__aeabi_memcpy>
   106ae:	9815      	ldr	r0, [sp, #84]	; 0x54
   106b0:	3004      	adds	r0, #4
   106b2:	990d      	ldr	r1, [sp, #52]	; 0x34
   106b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   106b6:	f00c fd71 	bl	1d19c <__aeabi_memcpy>
   106ba:	980e      	ldr	r0, [sp, #56]	; 0x38
   106bc:	9915      	ldr	r1, [sp, #84]	; 0x54
   106be:	6008      	str	r0, [r1, #0]
   106c0:	e7d1      	b.n	10666 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   106c2:	9816      	ldr	r0, [sp, #88]	; 0x58
   106c4:	f8b0 108e 	ldrh.w	r1, [r0, #142]	; 0x8e
   106c8:	3101      	adds	r1, #1
   106ca:	b28a      	uxth	r2, r1
   106cc:	460b      	mov	r3, r1
   106ce:	428a      	cmp	r2, r1
   106d0:	930b      	str	r3, [sp, #44]	; 0x2c
   106d2:	f040 80b9 	bne.w	10848 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x272>
   106d6:	e040      	b.n	1075a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x184>
   106d8:	2000      	movs	r0, #0
                        self.first_pixel = false;
   106da:	9916      	ldr	r1, [sp, #88]	; 0x58
   106dc:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
                        self.x_left = x;
   106e0:	9814      	ldr	r0, [sp, #80]	; 0x50
   106e2:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
                        self.x_right = x;
   106e6:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                        self.y = y;
   106ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   106ec:	f8a1 2090 	strh.w	r2, [r1, #144]	; 0x90
                        self.colors.clear();
   106f0:	f101 0024 	add.w	r0, r1, #36	; 0x24
   106f4:	f004 fc49 	bl	14f8a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   106f8:	e7ff      	b.n	106fa <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x124>
                        self.colors.push(color)
   106fa:	9816      	ldr	r0, [sp, #88]	; 0x58
   106fc:	3024      	adds	r0, #36	; 0x24
   106fe:	9912      	ldr	r1, [sp, #72]	; 0x48
   10700:	f004 fc33 	bl	14f6a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   10704:	900a      	str	r0, [sp, #40]	; 0x28
   10706:	9109      	str	r1, [sp, #36]	; 0x24
   10708:	e7ff      	b.n	1070a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x134>
   1070a:	f24f 2088 	movw	r0, #62088	; 0xf288
   1070e:	f2c0 0001 	movt	r0, #1
   10712:	4669      	mov	r1, sp
   10714:	6008      	str	r0, [r1, #0]
   10716:	f24f 224c 	movw	r2, #62028	; 0xf24c
   1071a:	f2c0 0201 	movt	r2, #1
   1071e:	2305      	movs	r3, #5
   10720:	980a      	ldr	r0, [sp, #40]	; 0x28
   10722:	9909      	ldr	r1, [sp, #36]	; 0x24
   10724:	f004 ff8f 	bl	15646 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   10728:	e7ff      	b.n	1072a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x154>
                        continue;
   1072a:	e7ff      	b.n	1072c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
   1072c:	e75a      	b.n	105e4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   1072e:	2001      	movs	r0, #1
                    if x == self.x_right + 1 && y == self.y {
   10730:	f88d 01b7 	strb.w	r0, [sp, #439]	; 0x1b7
   10734:	e00b      	b.n	1074e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   10736:	2000      	movs	r0, #0
   10738:	f88d 01b7 	strb.w	r0, [sp, #439]	; 0x1b7
   1073c:	e007      	b.n	1074e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   1073e:	9816      	ldr	r0, [sp, #88]	; 0x58
   10740:	f8b0 1090 	ldrh.w	r1, [r0, #144]	; 0x90
   10744:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10746:	b293      	uxth	r3, r2
   10748:	428b      	cmp	r3, r1
   1074a:	d0f0      	beq.n	1072e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x158>
   1074c:	e7f3      	b.n	10736 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
   1074e:	f89d 01b7 	ldrb.w	r0, [sp, #439]	; 0x1b7
   10752:	07c0      	lsls	r0, r0, #31
   10754:	2800      	cmp	r0, #0
   10756:	d107      	bne.n	10768 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x192>
   10758:	e020      	b.n	1079c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
   1075a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1075c:	b281      	uxth	r1, r0
   1075e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   10760:	b293      	uxth	r3, r2
   10762:	428b      	cmp	r3, r1
   10764:	d0eb      	beq.n	1073e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x168>
   10766:	e7e6      	b.n	10736 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
                        if self.colors.push(color).is_ok() {
   10768:	9816      	ldr	r0, [sp, #88]	; 0x58
   1076a:	3024      	adds	r0, #36	; 0x24
   1076c:	9912      	ldr	r1, [sp, #72]	; 0x48
   1076e:	f004 fbfc 	bl	14f6a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   10772:	f8ad 11ba 	strh.w	r1, [sp, #442]	; 0x1ba
   10776:	f8ad 01b8 	strh.w	r0, [sp, #440]	; 0x1b8
   1077a:	e7ff      	b.n	1077c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1a6>
   1077c:	a86e      	add	r0, sp, #440	; 0x1b8
   1077e:	f004 ff3d 	bl	155fc <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>
   10782:	9008      	str	r0, [sp, #32]
   10784:	e7ff      	b.n	10786 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1b0>
   10786:	9808      	ldr	r0, [sp, #32]
   10788:	07c1      	lsls	r1, r0, #31
   1078a:	2900      	cmp	r1, #0
   1078c:	d101      	bne.n	10792 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1bc>
   1078e:	e7ff      	b.n	10790 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1ba>
                    if x == self.x_right + 1 && y == self.y {
   10790:	e004      	b.n	1079c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
                            self.x_right = x;
   10792:	9814      	ldr	r0, [sp, #80]	; 0x50
   10794:	9916      	ldr	r1, [sp, #88]	; 0x58
   10796:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                            continue;
   1079a:	e7c7      	b.n	1072c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
                        x_left: self.x_left,
   1079c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1079e:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   107a2:	f8b0 208e 	ldrh.w	r2, [r0, #142]	; 0x8e
                        y: self.y,
   107a6:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
                        colors: self.colors.clone(),
   107aa:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   107ae:	a88b      	add	r0, sp, #556	; 0x22c
   107b0:	9107      	str	r1, [sp, #28]
   107b2:	4661      	mov	r1, ip
   107b4:	9206      	str	r2, [sp, #24]
   107b6:	9305      	str	r3, [sp, #20]
   107b8:	f004 fb22 	bl	14e00 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   107bc:	e7ff      	b.n	107be <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1e8>
                    let row = PixelRow {
   107be:	9807      	ldr	r0, [sp, #28]
   107c0:	f8ad 0224 	strh.w	r0, [sp, #548]	; 0x224
   107c4:	9906      	ldr	r1, [sp, #24]
   107c6:	f8ad 1226 	strh.w	r1, [sp, #550]	; 0x226
   107ca:	9a05      	ldr	r2, [sp, #20]
   107cc:	f8ad 2228 	strh.w	r2, [sp, #552]	; 0x228
   107d0:	a86f      	add	r0, sp, #444	; 0x1bc
   107d2:	a98b      	add	r1, sp, #556	; 0x22c
   107d4:	2268      	movs	r2, #104	; 0x68
   107d6:	f00c fce1 	bl	1d19c <__aeabi_memcpy>
                    self.x_left = x;
   107da:	9814      	ldr	r0, [sp, #80]	; 0x50
   107dc:	9916      	ldr	r1, [sp, #88]	; 0x58
   107de:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
                    self.x_right = x;
   107e2:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                    self.y = y;
   107e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   107e8:	f8a1 2090 	strh.w	r2, [r1, #144]	; 0x90
                    self.colors.clear();
   107ec:	f101 0024 	add.w	r0, r1, #36	; 0x24
   107f0:	f004 fbcb 	bl	14f8a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   107f4:	e7ff      	b.n	107f6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x220>
                    self.colors.push(color)
   107f6:	9816      	ldr	r0, [sp, #88]	; 0x58
   107f8:	3024      	adds	r0, #36	; 0x24
   107fa:	9912      	ldr	r1, [sp, #72]	; 0x48
   107fc:	f004 fbb5 	bl	14f6a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   10800:	9004      	str	r0, [sp, #16]
   10802:	9103      	str	r1, [sp, #12]
   10804:	e7ff      	b.n	10806 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x230>
   10806:	f24f 20cc 	movw	r0, #62156	; 0xf2cc
   1080a:	f2c0 0001 	movt	r0, #1
   1080e:	4669      	mov	r1, sp
   10810:	6008      	str	r0, [r1, #0]
   10812:	f24f 224c 	movw	r2, #62028	; 0xf24c
   10816:	f2c0 0201 	movt	r2, #1
   1081a:	2305      	movs	r3, #5
   1081c:	9804      	ldr	r0, [sp, #16]
   1081e:	9903      	ldr	r1, [sp, #12]
   10820:	f004 ff11 	bl	15646 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   10824:	e7ff      	b.n	10826 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x250>
   10826:	a8a5      	add	r0, sp, #660	; 0x294
   10828:	a96f      	add	r1, sp, #444	; 0x1bc
   1082a:	2270      	movs	r2, #112	; 0x70
                    return Some(row);
   1082c:	9002      	str	r0, [sp, #8]
   1082e:	9201      	str	r2, [sp, #4]
   10830:	f00c fcb4 	bl	1d19c <__aeabi_memcpy>
   10834:	9815      	ldr	r0, [sp, #84]	; 0x54
   10836:	3004      	adds	r0, #4
   10838:	9902      	ldr	r1, [sp, #8]
   1083a:	9a01      	ldr	r2, [sp, #4]
   1083c:	f00c fcae 	bl	1d19c <__aeabi_memcpy>
   10840:	2001      	movs	r0, #1
   10842:	9915      	ldr	r1, [sp, #84]	; 0x54
   10844:	6008      	str	r0, [r1, #0]
   10846:	e70e      	b.n	10666 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   10848:	f24f 20b0 	movw	r0, #62128	; 0xf2b0
   1084c:	f2c0 0001 	movt	r0, #1
   10850:	f24f 2298 	movw	r2, #62104	; 0xf298
   10854:	f2c0 0201 	movt	r2, #1
   10858:	211c      	movs	r1, #28
   1085a:	f006 f8cb 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1085e:	defe      	udf	#254	; 0xfe

00010860 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>:
impl<R: Iterator<Item = PixelRow>> Iterator for BlockIterator<R> {
    /// This Iterator returns Pixel Blocks
    type Item = PixelBlock;

    /// Return the next Pixel Block of contiguous Pixel Rows with the same start and end column number
    fn next(&mut self) -> Option<Self::Item> {
   10860:	b580      	push	{r7, lr}
   10862:	f5ad 6dcb 	sub.w	sp, sp, #1624	; 0x658
   10866:	f8cd 164c 	str.w	r1, [sp, #1612]	; 0x64c
   1086a:	2200      	movs	r2, #0
        //  Loop over all Pixel Rows until we have composed a Pixel Block, or we have run out of Pixel Rows.
        loop {
   1086c:	f88d 264b 	strb.w	r2, [sp, #1611]	; 0x64b
   10870:	911f      	str	r1, [sp, #124]	; 0x7c
   10872:	901e      	str	r0, [sp, #120]	; 0x78
   10874:	e7ff      	b.n	10876 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   10876:	2001      	movs	r0, #1
            //  Get the next Pixel Row.
            let next_row = self.rows.next();
   10878:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   1087c:	a820      	add	r0, sp, #128	; 0x80
   1087e:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10880:	f7ff fea9 	bl	105d6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>
   10884:	e7ff      	b.n	10886 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x26>
            match next_row {
                None => {  //  If no more Pixel Rows...
   10886:	9820      	ldr	r0, [sp, #128]	; 0x80
   10888:	2800      	cmp	r0, #0
   1088a:	d026      	beq.n	108da <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x7a>
   1088c:	e7ff      	b.n	1088e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e>
   1088e:	a820      	add	r0, sp, #128	; 0x80
                    };
                    self.colors.clear();
                    self.first_row = true;
                    return Some(row);
                }
                Some(PixelRow { x_left, x_right, y, colors, .. }) => {  //  If there is a Pixel Row...
   10890:	1d01      	adds	r1, r0, #4
   10892:	f8bd 00ec 	ldrh.w	r0, [sp, #236]	; 0xec
   10896:	4602      	mov	r2, r0
   10898:	f8ad 0652 	strh.w	r0, [sp, #1618]	; 0x652
   1089c:	f8bd 00ee 	ldrh.w	r0, [sp, #238]	; 0xee
   108a0:	4603      	mov	r3, r0
   108a2:	f8ad 0654 	strh.w	r0, [sp, #1620]	; 0x654
   108a6:	f8bd 00f0 	ldrh.w	r0, [sp, #240]	; 0xf0
   108aa:	4684      	mov	ip, r0
   108ac:	f8ad 0656 	strh.w	r0, [sp, #1622]	; 0x656
   108b0:	2000      	movs	r0, #0
   108b2:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   108b6:	a8da      	add	r0, sp, #872	; 0x368
   108b8:	f04f 0e68 	mov.w	lr, #104	; 0x68
   108bc:	921d      	str	r2, [sp, #116]	; 0x74
   108be:	4672      	mov	r2, lr
   108c0:	931c      	str	r3, [sp, #112]	; 0x70
   108c2:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
   108c6:	f00c fc69 	bl	1d19c <__aeabi_memcpy>
                    //  Save the first row as the block start and handle next block.
                    if self.first_row {
   108ca:	981f      	ldr	r0, [sp, #124]	; 0x7c
   108cc:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   108d0:	07c9      	lsls	r1, r1, #31
   108d2:	2900      	cmp	r1, #0
   108d4:	d15a      	bne.n	1098c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x12c>
   108d6:	e04e      	b.n	10976 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x116>
            match next_row {
   108d8:	defe      	udf	#254	; 0xfe
                    if self.first_row {
   108da:	981f      	ldr	r0, [sp, #124]	; 0x7c
   108dc:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   108e0:	07c9      	lsls	r1, r1, #31
   108e2:	2900      	cmp	r1, #0
   108e4:	d115      	bne.n	10912 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xb2>
   108e6:	e7ff      	b.n	108e8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x88>
                        x_left: self.x_left,
   108e8:	981f      	ldr	r0, [sp, #124]	; 0x7c
   108ea:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
                        x_right: self.x_right,
   108ee:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
                        y_top: self.y_top,
   108f2:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
                        y_bottom: self.y_bottom,
   108f6:	f8b0 c166 	ldrh.w	ip, [r0, #358]	; 0x166
                        colors: self.colors.clone(),
   108fa:	f100 0e94 	add.w	lr, r0, #148	; 0x94
   108fe:	a872      	add	r0, sp, #456	; 0x1c8
   10900:	911a      	str	r1, [sp, #104]	; 0x68
   10902:	4671      	mov	r1, lr
   10904:	9219      	str	r2, [sp, #100]	; 0x64
   10906:	9318      	str	r3, [sp, #96]	; 0x60
   10908:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
   1090c:	f004 fa88 	bl	14e20 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   10910:	e003      	b.n	1091a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xba>
   10912:	2000      	movs	r0, #0
                        return None;  //  No rows to group
   10914:	991e      	ldr	r1, [sp, #120]	; 0x78
   10916:	6008      	str	r0, [r1, #0]
   10918:	e153      	b.n	10bc2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                    let row = PixelBlock {
   1091a:	981a      	ldr	r0, [sp, #104]	; 0x68
   1091c:	f8ad 01c0 	strh.w	r0, [sp, #448]	; 0x1c0
   10920:	9919      	ldr	r1, [sp, #100]	; 0x64
   10922:	f8ad 11c2 	strh.w	r1, [sp, #450]	; 0x1c2
   10926:	9a18      	ldr	r2, [sp, #96]	; 0x60
   10928:	f8ad 21c4 	strh.w	r2, [sp, #452]	; 0x1c4
   1092c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1092e:	f8ad 31c6 	strh.w	r3, [sp, #454]	; 0x1c6
   10932:	a83d      	add	r0, sp, #244	; 0xf4
   10934:	a972      	add	r1, sp, #456	; 0x1c8
   10936:	22cc      	movs	r2, #204	; 0xcc
   10938:	f00c fc30 	bl	1d19c <__aeabi_memcpy>
                    self.colors.clear();
   1093c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1093e:	3094      	adds	r0, #148	; 0x94
   10940:	f004 fb2b 	bl	14f9a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   10944:	e7ff      	b.n	10946 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xe6>
   10946:	2001      	movs	r0, #1
                    self.first_row = true;
   10948:	991f      	ldr	r1, [sp, #124]	; 0x7c
   1094a:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
   1094e:	aaa5      	add	r2, sp, #660	; 0x294
   10950:	a93d      	add	r1, sp, #244	; 0xf4
   10952:	23d4      	movs	r3, #212	; 0xd4
                    return Some(row);
   10954:	9016      	str	r0, [sp, #88]	; 0x58
   10956:	4610      	mov	r0, r2
   10958:	9215      	str	r2, [sp, #84]	; 0x54
   1095a:	461a      	mov	r2, r3
   1095c:	9314      	str	r3, [sp, #80]	; 0x50
   1095e:	f00c fc1d 	bl	1d19c <__aeabi_memcpy>
   10962:	981e      	ldr	r0, [sp, #120]	; 0x78
   10964:	3004      	adds	r0, #4
   10966:	9915      	ldr	r1, [sp, #84]	; 0x54
   10968:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1096a:	f00c fc17 	bl	1d19c <__aeabi_memcpy>
   1096e:	9816      	ldr	r0, [sp, #88]	; 0x58
   10970:	991e      	ldr	r1, [sp, #120]	; 0x78
   10972:	6008      	str	r0, [r1, #0]
   10974:	e125      	b.n	10bc2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                        self.colors.extend_from_slice(&colors)
                            .expect("never");
                        continue;
                    }
                    //  If this row is adjacent to the previous row and same size, add to the block.
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   10976:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10978:	f8b0 1166 	ldrh.w	r1, [r0, #358]	; 0x166
   1097c:	3101      	adds	r1, #1
   1097e:	b28a      	uxth	r2, r1
   10980:	460b      	mov	r3, r1
   10982:	428a      	cmp	r2, r1
   10984:	9313      	str	r3, [sp, #76]	; 0x4c
   10986:	f040 8128 	bne.w	10bda <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x37a>
   1098a:	e069      	b.n	10a60 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x200>
   1098c:	2000      	movs	r0, #0
                        self.first_row = false;
   1098e:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10990:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
                        self.x_left = x_left;
   10994:	981d      	ldr	r0, [sp, #116]	; 0x74
   10996:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
                        self.x_right = x_right;
   1099a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1099c:	f8a1 2162 	strh.w	r2, [r1, #354]	; 0x162
                        self.y_top = y;
   109a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   109a2:	f8a1 3164 	strh.w	r3, [r1, #356]	; 0x164
                        self.y_bottom = y;
   109a6:	f8a1 3166 	strh.w	r3, [r1, #358]	; 0x166
                        self.colors.clear();
   109aa:	f101 0094 	add.w	r0, r1, #148	; 0x94
   109ae:	f004 faf4 	bl	14f9a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   109b2:	e7ff      	b.n	109b4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x154>
                        self.colors.extend_from_slice(&colors)
   109b4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   109b6:	f100 0194 	add.w	r1, r0, #148	; 0x94
   109ba:	a8da      	add	r0, sp, #872	; 0x368
   109bc:	9112      	str	r1, [sp, #72]	; 0x48
   109be:	f004 fa5f 	bl	14e80 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   109c2:	9011      	str	r0, [sp, #68]	; 0x44
   109c4:	9110      	str	r1, [sp, #64]	; 0x40
   109c6:	e7ff      	b.n	109c8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x168>
   109c8:	9812      	ldr	r0, [sp, #72]	; 0x48
   109ca:	9911      	ldr	r1, [sp, #68]	; 0x44
   109cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   109ce:	f004 faa0 	bl	14f12 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   109d2:	900f      	str	r0, [sp, #60]	; 0x3c
   109d4:	e7ff      	b.n	109d6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x176>
   109d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
   109d8:	f000 0001 	and.w	r0, r0, #1
   109dc:	f24f 214c 	movw	r1, #62028	; 0xf24c
   109e0:	f2c0 0101 	movt	r1, #1
   109e4:	f24f 23dc 	movw	r3, #62172	; 0xf2dc
   109e8:	f2c0 0301 	movt	r3, #1
   109ec:	2205      	movs	r2, #5
   109ee:	f004 fe5b 	bl	156a8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   109f2:	e7ff      	b.n	109f4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x194>
                        continue;
   109f4:	e7ff      	b.n	109f6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
   109f6:	a8da      	add	r0, sp, #872	; 0x368
                    self.colors.clear();
                    self.colors.extend_from_slice(&colors)
                        .expect("never");
                    return Some(row);
                }
            }
   109f8:	f001 f951 	bl	11c9e <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   109fc:	e7ff      	b.n	109fe <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x19e>
        }
   109fe:	9820      	ldr	r0, [sp, #128]	; 0x80
   10a00:	2801      	cmp	r0, #1
   10a02:	f000 80e2 	beq.w	10bca <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
   10a06:	e0e4      	b.n	10bd2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x372>
   10a08:	2001      	movs	r0, #1
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   10a0a:	f88d 03d1 	strb.w	r0, [sp, #977]	; 0x3d1
   10a0e:	e00b      	b.n	10a28 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   10a10:	2000      	movs	r0, #0
   10a12:	f88d 03d1 	strb.w	r0, [sp, #977]	; 0x3d1
   10a16:	e007      	b.n	10a28 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   10a18:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10a1a:	f8b0 1162 	ldrh.w	r1, [r0, #354]	; 0x162
   10a1e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10a20:	b293      	uxth	r3, r2
   10a22:	428b      	cmp	r3, r1
   10a24:	d0f0      	beq.n	10a08 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1a8>
   10a26:	e7f3      	b.n	10a10 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   10a28:	f89d 03d1 	ldrb.w	r0, [sp, #977]	; 0x3d1
   10a2c:	07c0      	lsls	r0, r0, #31
   10a2e:	2800      	cmp	r0, #0
   10a30:	d11d      	bne.n	10a6e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x20e>
   10a32:	e03f      	b.n	10ab4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
   10a34:	2001      	movs	r0, #1
   10a36:	f88d 03d2 	strb.w	r0, [sp, #978]	; 0x3d2
   10a3a:	e00b      	b.n	10a54 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   10a3c:	2000      	movs	r0, #0
   10a3e:	f88d 03d2 	strb.w	r0, [sp, #978]	; 0x3d2
   10a42:	e007      	b.n	10a54 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   10a44:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10a46:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
   10a4a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   10a4c:	b293      	uxth	r3, r2
   10a4e:	428b      	cmp	r3, r1
   10a50:	d0f0      	beq.n	10a34 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1d4>
   10a52:	e7f3      	b.n	10a3c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
   10a54:	f89d 03d2 	ldrb.w	r0, [sp, #978]	; 0x3d2
   10a58:	07c0      	lsls	r0, r0, #31
   10a5a:	2800      	cmp	r0, #0
   10a5c:	d1dc      	bne.n	10a18 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b8>
   10a5e:	e7d7      	b.n	10a10 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   10a60:	9813      	ldr	r0, [sp, #76]	; 0x4c
   10a62:	b281      	uxth	r1, r0
   10a64:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   10a66:	b293      	uxth	r3, r2
   10a68:	428b      	cmp	r3, r1
   10a6a:	d0eb      	beq.n	10a44 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1e4>
   10a6c:	e7e6      	b.n	10a3c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
                        if self.colors.extend_from_slice(&colors).is_ok() {
   10a6e:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10a70:	f100 0194 	add.w	r1, r0, #148	; 0x94
   10a74:	a8da      	add	r0, sp, #872	; 0x368
   10a76:	910e      	str	r1, [sp, #56]	; 0x38
   10a78:	f004 fa02 	bl	14e80 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   10a7c:	900d      	str	r0, [sp, #52]	; 0x34
   10a7e:	910c      	str	r1, [sp, #48]	; 0x30
   10a80:	e7ff      	b.n	10a82 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x222>
   10a82:	980e      	ldr	r0, [sp, #56]	; 0x38
   10a84:	990d      	ldr	r1, [sp, #52]	; 0x34
   10a86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10a88:	f004 fa43 	bl	14f12 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   10a8c:	f88d 03d3 	strb.w	r0, [sp, #979]	; 0x3d3
   10a90:	e7ff      	b.n	10a92 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x232>
   10a92:	f20d 30d3 	addw	r0, sp, #979	; 0x3d3
   10a96:	f004 fdc3 	bl	15620 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>
   10a9a:	900b      	str	r0, [sp, #44]	; 0x2c
   10a9c:	e7ff      	b.n	10a9e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x23e>
   10a9e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10aa0:	07c1      	lsls	r1, r0, #31
   10aa2:	2900      	cmp	r1, #0
   10aa4:	d101      	bne.n	10aaa <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x24a>
   10aa6:	e7ff      	b.n	10aa8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x248>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   10aa8:	e004      	b.n	10ab4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
                            self.y_bottom = y;
   10aaa:	981b      	ldr	r0, [sp, #108]	; 0x6c
   10aac:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10aae:	f8a1 0166 	strh.w	r0, [r1, #358]	; 0x166
                            continue;    
   10ab2:	e7a0      	b.n	109f6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
                        x_left: self.x_left,
   10ab4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10ab6:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
                        x_right: self.x_right,
   10aba:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
                        y_top: self.y_top,
   10abe:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
                        y_bottom: self.y_bottom,
   10ac2:	f8b0 c166 	ldrh.w	ip, [r0, #358]	; 0x166
                        colors: self.colors.clone(),
   10ac6:	f100 0e94 	add.w	lr, r0, #148	; 0x94
   10aca:	f50d 6095 	add.w	r0, sp, #1192	; 0x4a8
   10ace:	910a      	str	r1, [sp, #40]	; 0x28
   10ad0:	4671      	mov	r1, lr
   10ad2:	9209      	str	r2, [sp, #36]	; 0x24
   10ad4:	9308      	str	r3, [sp, #32]
   10ad6:	f8cd c01c 	str.w	ip, [sp, #28]
   10ada:	f004 f9a1 	bl	14e20 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   10ade:	e7ff      	b.n	10ae0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x280>
                    let row = PixelBlock {
   10ae0:	980a      	ldr	r0, [sp, #40]	; 0x28
   10ae2:	f8ad 04a0 	strh.w	r0, [sp, #1184]	; 0x4a0
   10ae6:	9909      	ldr	r1, [sp, #36]	; 0x24
   10ae8:	f8ad 14a2 	strh.w	r1, [sp, #1186]	; 0x4a2
   10aec:	9a08      	ldr	r2, [sp, #32]
   10aee:	f8ad 24a4 	strh.w	r2, [sp, #1188]	; 0x4a4
   10af2:	9b07      	ldr	r3, [sp, #28]
   10af4:	f8ad 34a6 	strh.w	r3, [sp, #1190]	; 0x4a6
   10af8:	a8f5      	add	r0, sp, #980	; 0x3d4
   10afa:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
   10afe:	22cc      	movs	r2, #204	; 0xcc
   10b00:	f00c fb4c 	bl	1d19c <__aeabi_memcpy>
                    self.x_left = x_left;
   10b04:	981d      	ldr	r0, [sp, #116]	; 0x74
   10b06:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10b08:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
                    self.x_right = x_right;
   10b0c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10b0e:	f8a1 2162 	strh.w	r2, [r1, #354]	; 0x162
                    self.y_top = y;
   10b12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10b14:	f8a1 3164 	strh.w	r3, [r1, #356]	; 0x164
                    self.y_bottom = y;
   10b18:	f8a1 3166 	strh.w	r3, [r1, #358]	; 0x166
                    self.colors.clear();
   10b1c:	f101 0094 	add.w	r0, r1, #148	; 0x94
   10b20:	f004 fa3b 	bl	14f9a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   10b24:	e7ff      	b.n	10b26 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2c6>
                    self.colors.extend_from_slice(&colors)
   10b26:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10b28:	f100 0194 	add.w	r1, r0, #148	; 0x94
   10b2c:	a8da      	add	r0, sp, #872	; 0x368
   10b2e:	9106      	str	r1, [sp, #24]
   10b30:	f004 f9a6 	bl	14e80 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   10b34:	9005      	str	r0, [sp, #20]
   10b36:	9104      	str	r1, [sp, #16]
   10b38:	e7ff      	b.n	10b3a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2da>
   10b3a:	9806      	ldr	r0, [sp, #24]
   10b3c:	9905      	ldr	r1, [sp, #20]
   10b3e:	9a04      	ldr	r2, [sp, #16]
   10b40:	f004 f9e7 	bl	14f12 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   10b44:	9003      	str	r0, [sp, #12]
   10b46:	e7ff      	b.n	10b48 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e8>
   10b48:	9803      	ldr	r0, [sp, #12]
   10b4a:	f000 0001 	and.w	r0, r0, #1
   10b4e:	f24f 214c 	movw	r1, #62028	; 0xf24c
   10b52:	f2c0 0101 	movt	r1, #1
   10b56:	f24f 23fc 	movw	r3, #62204	; 0xf2fc
   10b5a:	f2c0 0301 	movt	r3, #1
   10b5e:	2205      	movs	r2, #5
   10b60:	f004 fda2 	bl	156a8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   10b64:	e7ff      	b.n	10b66 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x306>
   10b66:	f20d 5074 	addw	r0, sp, #1396	; 0x574
   10b6a:	a9f5      	add	r1, sp, #980	; 0x3d4
   10b6c:	22d4      	movs	r2, #212	; 0xd4
                    return Some(row);
   10b6e:	9002      	str	r0, [sp, #8]
   10b70:	9201      	str	r2, [sp, #4]
   10b72:	f00c fb13 	bl	1d19c <__aeabi_memcpy>
   10b76:	981e      	ldr	r0, [sp, #120]	; 0x78
   10b78:	3004      	adds	r0, #4
   10b7a:	9902      	ldr	r1, [sp, #8]
   10b7c:	9a01      	ldr	r2, [sp, #4]
   10b7e:	f00c fb0d 	bl	1d19c <__aeabi_memcpy>
   10b82:	2001      	movs	r0, #1
   10b84:	991e      	ldr	r1, [sp, #120]	; 0x78
   10b86:	6008      	str	r0, [r1, #0]
   10b88:	a8da      	add	r0, sp, #872	; 0x368
            }
   10b8a:	f001 f888 	bl	11c9e <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   10b8e:	e7ff      	b.n	10b90 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x330>
                    return Some(row);
   10b90:	e017      	b.n	10bc2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
   10b92:	2000      	movs	r0, #0
        }
   10b94:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
    }
   10b98:	f50d 6dcb 	add.w	sp, sp, #1624	; 0x658
   10b9c:	bd80      	pop	{r7, pc}
        }
   10b9e:	f89d 064b 	ldrb.w	r0, [sp, #1611]	; 0x64b
   10ba2:	07c0      	lsls	r0, r0, #31
   10ba4:	2800      	cmp	r0, #0
   10ba6:	d0f4      	beq.n	10b92 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   10ba8:	e7ff      	b.n	10baa <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x34a>
   10baa:	2000      	movs	r0, #0
   10bac:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   10bb0:	a820      	add	r0, sp, #128	; 0x80
   10bb2:	3004      	adds	r0, #4
   10bb4:	f001 f873 	bl	11c9e <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   10bb8:	e7eb      	b.n	10b92 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   10bba:	a820      	add	r0, sp, #128	; 0x80
   10bbc:	f001 f834 	bl	11c28 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   10bc0:	e7e7      	b.n	10b92 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   10bc2:	9820      	ldr	r0, [sp, #128]	; 0x80
   10bc4:	2801      	cmp	r0, #1
   10bc6:	d0ea      	beq.n	10b9e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x33e>
   10bc8:	e7f7      	b.n	10bba <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x35a>
   10bca:	2000      	movs	r0, #0
   10bcc:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
                        continue;
   10bd0:	e651      	b.n	10876 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   10bd2:	a820      	add	r0, sp, #128	; 0x80
        }
   10bd4:	f001 f828 	bl	11c28 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   10bd8:	e7f7      	b.n	10bca <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   10bda:	f24f 20b0 	movw	r0, #62128	; 0xf2b0
   10bde:	f2c0 0001 	movt	r0, #1
   10be2:	f24f 22ec 	movw	r2, #62188	; 0xf2ec
   10be6:	f2c0 0201 	movt	r2, #1
   10bea:	211c      	movs	r1, #28
   10bec:	f005 ff02 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10bf0:	defe      	udf	#254	; 0xfe

00010bf2 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>:
    }

    /// Converts the value of `self` to a `u8`. If the value cannot be
    /// represented by a `u8`, then `None` is returned.
    #[inline]
    fn to_u8(&self) -> Option<u8> {
   10bf2:	b580      	push	{r7, lr}
   10bf4:	b08a      	sub	sp, #40	; 0x28
   10bf6:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
   10bf8:	f001 fe53 	bl	128a2 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>
   10bfc:	9307      	str	r3, [sp, #28]
   10bfe:	9206      	str	r2, [sp, #24]
   10c00:	9105      	str	r1, [sp, #20]
   10c02:	9004      	str	r0, [sp, #16]
   10c04:	e7ff      	b.n	10c06 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x14>
   10c06:	a804      	add	r0, sp, #16
   10c08:	f003 ffdc 	bl	14bc4 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
   10c0c:	9003      	str	r0, [sp, #12]
   10c0e:	e7ff      	b.n	10c10 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x1e>
   10c10:	9803      	ldr	r0, [sp, #12]
   10c12:	f004 f8aa 	bl	14d6a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
   10c16:	9002      	str	r0, [sp, #8]
   10c18:	9101      	str	r1, [sp, #4]
   10c1a:	e7ff      	b.n	10c1c <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x2a>
    }
   10c1c:	9802      	ldr	r0, [sp, #8]
   10c1e:	f000 0001 	and.w	r0, r0, #1
   10c22:	9901      	ldr	r1, [sp, #4]
   10c24:	b00a      	add	sp, #40	; 0x28
   10c26:	bd80      	pop	{r7, pc}

00010c28 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>:
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }

    pub fn hard_reset(&mut self) -> Result<(), ()>
   10c28:	b580      	push	{r7, lr}
   10c2a:	b090      	sub	sp, #64	; 0x40
   10c2c:	900b      	str	r0, [sp, #44]	; 0x2c
    {
        self.rst.set_high().map_err(|_| ())?;
   10c2e:	f100 010c 	add.w	r1, r0, #12
   10c32:	9006      	str	r0, [sp, #24]
   10c34:	4608      	mov	r0, r1
   10c36:	f7ff f821 	bl	fc7c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
   10c3a:	9005      	str	r0, [sp, #20]
   10c3c:	e7ff      	b.n	10c3e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x16>
   10c3e:	9805      	ldr	r0, [sp, #20]
   10c40:	f004 fe2a 	bl	15898 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>
   10c44:	9004      	str	r0, [sp, #16]
   10c46:	e7ff      	b.n	10c48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x20>
   10c48:	9804      	ldr	r0, [sp, #16]
   10c4a:	f000 0001 	and.w	r0, r0, #1
   10c4e:	f7fe faf0 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10c52:	f88d 001f 	strb.w	r0, [sp, #31]
   10c56:	e7ff      	b.n	10c58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x30>
   10c58:	f89d 001f 	ldrb.w	r0, [sp, #31]
   10c5c:	07c1      	lsls	r1, r0, #31
   10c5e:	2900      	cmp	r1, #0
   10c60:	d001      	beq.n	10c66 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3e>
   10c62:	e7ff      	b.n	10c64 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3c>
   10c64:	e006      	b.n	10c74 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x4c>
        self.rst.set_low().map_err(|_| ())?;
   10c66:	9806      	ldr	r0, [sp, #24]
   10c68:	300c      	adds	r0, #12
   10c6a:	f7fe fffc 	bl	fc66 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
   10c6e:	9003      	str	r0, [sp, #12]
   10c70:	e00d      	b.n	10c8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x66>
        self.rst.set_high().map_err(|_| ())?;
   10c72:	defe      	udf	#254	; 0xfe
   10c74:	f002 fa02 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10c78:	e003      	b.n	10c82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x5a>
        self.rst.set_high().map_err(|_| ())
    }
   10c7a:	f89d 001e 	ldrb.w	r0, [sp, #30]
   10c7e:	b010      	add	sp, #64	; 0x40
   10c80:	bd80      	pop	{r7, pc}
        self.rst.set_high().map_err(|_| ())?;
   10c82:	f004 fe5e 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10c86:	f88d 001e 	strb.w	r0, [sp, #30]
   10c8a:	e7ff      	b.n	10c8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x64>
   10c8c:	e7f5      	b.n	10c7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_low().map_err(|_| ())?;
   10c8e:	9803      	ldr	r0, [sp, #12]
   10c90:	f004 fdad 	bl	157ee <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>
   10c94:	9002      	str	r0, [sp, #8]
   10c96:	e7ff      	b.n	10c98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x70>
   10c98:	9802      	ldr	r0, [sp, #8]
   10c9a:	f000 0001 	and.w	r0, r0, #1
   10c9e:	f7fe fac8 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10ca2:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   10ca6:	e7ff      	b.n	10ca8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x80>
   10ca8:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   10cac:	07c1      	lsls	r1, r0, #31
   10cae:	2900      	cmp	r1, #0
   10cb0:	d001      	beq.n	10cb6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8e>
   10cb2:	e7ff      	b.n	10cb4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8c>
   10cb4:	e006      	b.n	10cc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x9c>
        self.rst.set_high().map_err(|_| ())
   10cb6:	9806      	ldr	r0, [sp, #24]
   10cb8:	300c      	adds	r0, #12
   10cba:	f7fe ffdf 	bl	fc7c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
   10cbe:	9001      	str	r0, [sp, #4]
   10cc0:	e009      	b.n	10cd6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xae>
        self.rst.set_low().map_err(|_| ())?;
   10cc2:	defe      	udf	#254	; 0xfe
   10cc4:	f002 f9da 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10cc8:	e7ff      	b.n	10cca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xa2>
   10cca:	f004 fe3a 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10cce:	f88d 001e 	strb.w	r0, [sp, #30]
   10cd2:	e7ff      	b.n	10cd4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xac>
   10cd4:	e7d1      	b.n	10c7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_high().map_err(|_| ())
   10cd6:	9801      	ldr	r0, [sp, #4]
   10cd8:	f004 fd34 	bl	15744 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>
   10cdc:	f88d 001e 	strb.w	r0, [sp, #30]
   10ce0:	e7ff      	b.n	10ce2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xba>
    }
   10ce2:	e7ca      	b.n	10c7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>

00010ce4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>:
        self.rst.set_low().map_err(|_| ())?;
   10ce4:	b082      	sub	sp, #8
   10ce6:	9001      	str	r0, [sp, #4]
   10ce8:	e7ff      	b.n	10cea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE+0x6>
   10cea:	b002      	add	sp, #8
   10cec:	4770      	bx	lr

00010cee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>:
        self.rst.set_high().map_err(|_| ())?;
   10cee:	b082      	sub	sp, #8
   10cf0:	9001      	str	r0, [sp, #4]
   10cf2:	e7ff      	b.n	10cf4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE+0x6>
   10cf4:	b002      	add	sp, #8
   10cf6:	4770      	bx	lr

00010cf8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>:
        self.rst.set_high().map_err(|_| ())
   10cf8:	b082      	sub	sp, #8
   10cfa:	9001      	str	r0, [sp, #4]
   10cfc:	e7ff      	b.n	10cfe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE+0x6>
   10cfe:	b002      	add	sp, #8
   10d00:	4770      	bx	lr

00010d02 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>:
            .expect("spi flush fail");
        Ok(())
    }

    /// Sets pixel colors at the given drawing window
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
   10d02:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d04:	b0c7      	sub	sp, #284	; 0x11c
   10d06:	f8dd c134 	ldr.w	ip, [sp, #308]	; 0x134
   10d0a:	f8dd e130 	ldr.w	lr, [sp, #304]	; 0x130
   10d0e:	461c      	mov	r4, r3
   10d10:	4615      	mov	r5, r2
   10d12:	460e      	mov	r6, r1
   10d14:	9040      	str	r0, [sp, #256]	; 0x100
   10d16:	f8ad 1104 	strh.w	r1, [sp, #260]	; 0x104
   10d1a:	f8ad 2106 	strh.w	r2, [sp, #262]	; 0x106
   10d1e:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
   10d22:	f8ad e10a 	strh.w	lr, [sp, #266]	; 0x10a
   10d26:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
   10d28:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
   10d2c:	2701      	movs	r7, #1
   10d2e:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
   10d32:	466f      	mov	r7, sp
   10d34:	f8c7 e000 	str.w	lr, [r7]
   10d38:	900a      	str	r0, [sp, #40]	; 0x28
   10d3a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   10d3e:	9408      	str	r4, [sp, #32]
   10d40:	9507      	str	r5, [sp, #28]
   10d42:	9606      	str	r6, [sp, #24]
   10d44:	f000 fa44 	bl	111d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
   10d48:	9005      	str	r0, [sp, #20]
   10d4a:	e7ff      	b.n	10d4c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x4a>
   10d4c:	9805      	ldr	r0, [sp, #20]
   10d4e:	f000 0001 	and.w	r0, r0, #1
   10d52:	f7fe fa6e 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10d56:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
   10d5a:	e7ff      	b.n	10d5c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x5a>
   10d5c:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   10d60:	07c1      	lsls	r1, r0, #31
   10d62:	2900      	cmp	r1, #0
   10d64:	d001      	beq.n	10d6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x68>
   10d66:	e7ff      	b.n	10d68 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x66>
   10d68:	e00f      	b.n	10d8a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x88>
   10d6a:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
   10d6c:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
   10d70:	a80c      	add	r0, sp, #48	; 0x30
   10d72:	22cc      	movs	r2, #204	; 0xcc
   10d74:	9004      	str	r0, [sp, #16]
   10d76:	9909      	ldr	r1, [sp, #36]	; 0x24
   10d78:	f00c fa10 	bl	1d19c <__aeabi_memcpy>
   10d7c:	980a      	ldr	r0, [sp, #40]	; 0x28
   10d7e:	9904      	ldr	r1, [sp, #16]
   10d80:	f000 f884 	bl	10e8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>
   10d84:	9003      	str	r0, [sp, #12]
   10d86:	e00d      	b.n	10da4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa2>
        self.set_address_window(sx, sy, ex, ey)?;
   10d88:	defe      	udf	#254	; 0xfe
   10d8a:	f002 f977 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10d8e:	e003      	b.n	10d98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x96>

        #[cfg(feature = "noblock_spi")]         //  If non-blocking SPI is enabled...
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }
   10d90:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
   10d94:	b047      	add	sp, #284	; 0x11c
   10d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
   10d98:	f004 fdd3 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10d9c:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   10da0:	e7ff      	b.n	10da2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa0>
   10da2:	e034      	b.n	10e0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        self.write_pixels(colors) ? ;
   10da4:	9803      	ldr	r0, [sp, #12]
   10da6:	f000 0001 	and.w	r0, r0, #1
   10daa:	f7fe fa42 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10dae:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   10db2:	e7ff      	b.n	10db4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xb2>
   10db4:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   10db8:	07c1      	lsls	r1, r0, #31
   10dba:	2900      	cmp	r1, #0
   10dbc:	d001      	beq.n	10dc2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xc0>
   10dbe:	e7ff      	b.n	10dc0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xbe>
   10dc0:	e004      	b.n	10dcc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xca>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   10dc2:	f003 f904 	bl	13fce <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   10dc6:	9002      	str	r0, [sp, #8]
   10dc8:	e009      	b.n	10dde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xdc>
        self.write_pixels(colors) ? ;
   10dca:	defe      	udf	#254	; 0xfe
   10dcc:	f002 f956 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10dd0:	e7ff      	b.n	10dd2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xd0>
   10dd2:	f004 fdb6 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10dd6:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   10dda:	e7ff      	b.n	10ddc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xda>
   10ddc:	e017      	b.n	10e0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   10dde:	f24f 310c 	movw	r1, #62220	; 0xf30c
   10de2:	f2c0 0101 	movt	r1, #1
   10de6:	f24f 3368 	movw	r3, #62312	; 0xf368
   10dea:	f2c0 0301 	movt	r3, #1
   10dee:	220e      	movs	r2, #14
   10df0:	9802      	ldr	r0, [sp, #8]
   10df2:	f7fe f9e5 	bl	f1c0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   10df6:	e7ff      	b.n	10df8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xf6>
   10df8:	2000      	movs	r0, #0
        Ok(())
   10dfa:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
   10dfe:	e7c7      	b.n	10d90 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
   10e00:	2000      	movs	r0, #0
   10e02:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
   10e06:	9809      	ldr	r0, [sp, #36]	; 0x24
   10e08:	f000 ff1d 	bl	11c46 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
   10e0c:	e7c0      	b.n	10d90 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
   10e0e:	f89d 00ff 	ldrb.w	r0, [sp, #255]	; 0xff
   10e12:	07c0      	lsls	r0, r0, #31
   10e14:	2800      	cmp	r0, #0
   10e16:	d1f3      	bne.n	10e00 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xfe>
   10e18:	e7ba      	b.n	10d90 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>

00010e1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>:
    fn write_data(&mut self, data: &[u8]) -> Result<(), ()> {
   10e1a:	b580      	push	{r7, lr}
   10e1c:	b084      	sub	sp, #16
   10e1e:	9001      	str	r0, [sp, #4]
   10e20:	9102      	str	r1, [sp, #8]
   10e22:	9203      	str	r2, [sp, #12]
        mynewt::spi::spi_noblock_write_data(
   10e24:	4608      	mov	r0, r1
   10e26:	4611      	mov	r1, r2
   10e28:	f003 f87f 	bl	13f2a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
   10e2c:	9000      	str	r0, [sp, #0]
   10e2e:	e7ff      	b.n	10e30 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x16>
   10e30:	f24f 3178 	movw	r1, #62328	; 0xf378
   10e34:	f2c0 0101 	movt	r1, #1
   10e38:	f24f 3388 	movw	r3, #62344	; 0xf388
   10e3c:	f2c0 0301 	movt	r3, #1
   10e40:	220d      	movs	r2, #13
   10e42:	9800      	ldr	r0, [sp, #0]
   10e44:	f7fe f9bc 	bl	f1c0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   10e48:	e7ff      	b.n	10e4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x30>
   10e4a:	2000      	movs	r0, #0
    }
   10e4c:	b004      	add	sp, #16
   10e4e:	bd80      	pop	{r7, pc}

00010e50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>:
    fn write_word(&mut self, value: u16) -> Result<(), ()> {
   10e50:	b580      	push	{r7, lr}
   10e52:	b088      	sub	sp, #32
   10e54:	460a      	mov	r2, r1
   10e56:	9006      	str	r0, [sp, #24]
   10e58:	f8ad 101e 	strh.w	r1, [sp, #30]
        let bytes: [u8; 2] = unsafe { transmute(value.to_be()) };
   10e5c:	9004      	str	r0, [sp, #16]
   10e5e:	4608      	mov	r0, r1
   10e60:	9203      	str	r2, [sp, #12]
   10e62:	f000 feb9 	bl	11bd8 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>
   10e66:	9002      	str	r0, [sp, #8]
   10e68:	e7ff      	b.n	10e6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x1a>
   10e6a:	9802      	ldr	r0, [sp, #8]
   10e6c:	f8ad 0016 	strh.w	r0, [sp, #22]
   10e70:	e7ff      	b.n	10e72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x22>
   10e72:	f10d 0116 	add.w	r1, sp, #22
   10e76:	2202      	movs	r2, #2
        self.write_data(&bytes)
   10e78:	9804      	ldr	r0, [sp, #16]
   10e7a:	f7ff ffce 	bl	10e1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>
   10e7e:	9001      	str	r0, [sp, #4]
   10e80:	e7ff      	b.n	10e82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x32>
    }
   10e82:	9801      	ldr	r0, [sp, #4]
   10e84:	f000 0001 	and.w	r0, r0, #1
   10e88:	b008      	add	sp, #32
   10e8a:	bd80      	pop	{r7, pc}

00010e8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
   10e8c:	b580      	push	{r7, lr}
   10e8e:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
   10e92:	90a8      	str	r0, [sp, #672]	; 0x2a0
   10e94:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
   10e96:	f88d 229f 	strb.w	r2, [sp, #671]	; 0x29f
   10e9a:	2301      	movs	r3, #1
   10e9c:	f88d 329f 	strb.w	r3, [sp, #671]	; 0x29f
   10ea0:	232c      	movs	r3, #44	; 0x2c
   10ea2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   10ea6:	920a      	str	r2, [sp, #40]	; 0x28
   10ea8:	9209      	str	r2, [sp, #36]	; 0x24
   10eaa:	9209      	str	r2, [sp, #36]	; 0x24
   10eac:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10eb0:	f89d c023 	ldrb.w	ip, [sp, #35]	; 0x23
   10eb4:	9007      	str	r0, [sp, #28]
   10eb6:	9106      	str	r1, [sp, #24]
   10eb8:	4661      	mov	r1, ip
   10eba:	f000 f898 	bl	10fee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   10ebe:	9005      	str	r0, [sp, #20]
   10ec0:	e7ff      	b.n	10ec2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x36>
   10ec2:	9805      	ldr	r0, [sp, #20]
   10ec4:	f000 0001 	and.w	r0, r0, #1
   10ec8:	f7fe f9b3 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10ecc:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   10ed0:	e7ff      	b.n	10ed2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x46>
   10ed2:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   10ed6:	07c1      	lsls	r1, r0, #31
   10ed8:	2900      	cmp	r1, #0
   10eda:	d001      	beq.n	10ee0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x54>
   10edc:	e7ff      	b.n	10ede <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x52>
   10ede:	e00e      	b.n	10efe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x72>
   10ee0:	2000      	movs	r0, #0
        for color in colors {
   10ee2:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
   10ee6:	a83f      	add	r0, sp, #252	; 0xfc
   10ee8:	22cc      	movs	r2, #204	; 0xcc
   10eea:	9004      	str	r0, [sp, #16]
   10eec:	9906      	ldr	r1, [sp, #24]
   10eee:	f00c f955 	bl	1d19c <__aeabi_memcpy>
   10ef2:	a80b      	add	r0, sp, #44	; 0x2c
   10ef4:	9904      	ldr	r1, [sp, #16]
   10ef6:	f004 f858 	bl	14faa <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>
   10efa:	e00e      	b.n	10f1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8e>
        self.write_command(Instruction::RAMWR, None)?;
   10efc:	defe      	udf	#254	; 0xfe
   10efe:	f002 f8bd 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10f02:	e004      	b.n	10f0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x82>
    }
   10f04:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
   10f08:	f50d 7d2e 	add.w	sp, sp, #696	; 0x2b8
   10f0c:	bd80      	pop	{r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
   10f0e:	f004 fd18 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10f12:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
   10f16:	e7ff      	b.n	10f18 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8c>
   10f18:	e063      	b.n	10fe2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
   10f1a:	a872      	add	r0, sp, #456	; 0x1c8
   10f1c:	a90b      	add	r1, sp, #44	; 0x2c
   10f1e:	22d0      	movs	r2, #208	; 0xd0
        for color in colors {
   10f20:	f00c f93c 	bl	1d19c <__aeabi_memcpy>
   10f24:	e7ff      	b.n	10f26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
   10f26:	a872      	add	r0, sp, #456	; 0x1c8
   10f28:	f004 f855 	bl	14fd6 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>
   10f2c:	f8ad 129a 	strh.w	r1, [sp, #666]	; 0x29a
   10f30:	f8ad 0298 	strh.w	r0, [sp, #664]	; 0x298
   10f34:	e7ff      	b.n	10f36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xaa>
   10f36:	f8bd 0298 	ldrh.w	r0, [sp, #664]	; 0x298
   10f3a:	4601      	mov	r1, r0
   10f3c:	2800      	cmp	r0, #0
   10f3e:	d001      	beq.n	10f44 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb8>
   10f40:	e7ff      	b.n	10f42 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb6>
   10f42:	e004      	b.n	10f4e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xc2>
   10f44:	a872      	add	r0, sp, #456	; 0x1c8
        }
   10f46:	f000 fe9d 	bl	11c84 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
   10f4a:	e02e      	b.n	10faa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11e>
        for color in colors {
   10f4c:	defe      	udf	#254	; 0xfe
   10f4e:	f8bd 029a 	ldrh.w	r0, [sp, #666]	; 0x29a
   10f52:	f8ad 02b2 	strh.w	r0, [sp, #690]	; 0x2b2
   10f56:	f8ad 02b4 	strh.w	r0, [sp, #692]	; 0x2b4
   10f5a:	f8ad 02b6 	strh.w	r0, [sp, #694]	; 0x2b6
            self.write_word(color)?;
   10f5e:	9907      	ldr	r1, [sp, #28]
   10f60:	9003      	str	r0, [sp, #12]
   10f62:	4608      	mov	r0, r1
   10f64:	9903      	ldr	r1, [sp, #12]
   10f66:	f7ff ff73 	bl	10e50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   10f6a:	9002      	str	r0, [sp, #8]
   10f6c:	e7ff      	b.n	10f6e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xe2>
   10f6e:	9802      	ldr	r0, [sp, #8]
   10f70:	f000 0001 	and.w	r0, r0, #1
   10f74:	f7fe f95d 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10f78:	f88d 029e 	strb.w	r0, [sp, #670]	; 0x29e
   10f7c:	e7ff      	b.n	10f7e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xf2>
   10f7e:	f89d 029e 	ldrb.w	r0, [sp, #670]	; 0x29e
   10f82:	07c1      	lsls	r1, r0, #31
   10f84:	2900      	cmp	r1, #0
   10f86:	d001      	beq.n	10f8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x100>
   10f88:	e7ff      	b.n	10f8a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xfe>
   10f8a:	e001      	b.n	10f90 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x104>
        for color in colors {
   10f8c:	e7cb      	b.n	10f26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
            self.write_word(color)?;
   10f8e:	defe      	udf	#254	; 0xfe
   10f90:	f002 f874 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10f94:	e7ff      	b.n	10f96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x10a>
   10f96:	f004 fcd4 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10f9a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
   10f9e:	e7ff      	b.n	10fa0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x114>
   10fa0:	a872      	add	r0, sp, #456	; 0x1c8
        }
   10fa2:	f000 fe6f 	bl	11c84 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
   10fa6:	e7ff      	b.n	10fa8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11c>
    }
   10fa8:	e01b      	b.n	10fe2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   10faa:	f003 f810 	bl	13fce <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   10fae:	9001      	str	r0, [sp, #4]
   10fb0:	e7ff      	b.n	10fb2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x126>
   10fb2:	f24f 310c 	movw	r1, #62220	; 0xf30c
   10fb6:	f2c0 0101 	movt	r1, #1
   10fba:	f24f 3398 	movw	r3, #62360	; 0xf398
   10fbe:	f2c0 0301 	movt	r3, #1
   10fc2:	220e      	movs	r2, #14
   10fc4:	9801      	ldr	r0, [sp, #4]
   10fc6:	f7fe f8fb 	bl	f1c0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   10fca:	e7ff      	b.n	10fcc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x140>
   10fcc:	2000      	movs	r0, #0
        Ok(())
   10fce:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    }
   10fd2:	e797      	b.n	10f04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
   10fd4:	2000      	movs	r0, #0
   10fd6:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
   10fda:	9806      	ldr	r0, [sp, #24]
   10fdc:	f000 fe33 	bl	11c46 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
   10fe0:	e790      	b.n	10f04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
   10fe2:	f89d 029f 	ldrb.w	r0, [sp, #671]	; 0x29f
   10fe6:	07c0      	lsls	r0, r0, #31
   10fe8:	2800      	cmp	r0, #0
   10fea:	d1f3      	bne.n	10fd4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x148>
   10fec:	e78a      	b.n	10f04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>

00010fee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>:
    fn write_command(&mut self, command: Instruction, params: Option<&[u8]>) -> Result<(), ()> {
   10fee:	b580      	push	{r7, lr}
   10ff0:	b08e      	sub	sp, #56	; 0x38
   10ff2:	468c      	mov	ip, r1
   10ff4:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
   10ff8:	920b      	str	r2, [sp, #44]	; 0x2c
   10ffa:	930c      	str	r3, [sp, #48]	; 0x30
   10ffc:	900d      	str	r0, [sp, #52]	; 0x34
   10ffe:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
            command.to_u8().unwrap()
   11002:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   11006:	f000 fdbd 	bl	11b84 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>
   1100a:	9008      	str	r0, [sp, #32]
   1100c:	9107      	str	r1, [sp, #28]
   1100e:	e7ff      	b.n	11010 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x22>
   11010:	9808      	ldr	r0, [sp, #32]
   11012:	f000 0001 	and.w	r0, r0, #1
   11016:	f24f 32a8 	movw	r2, #62376	; 0xf3a8
   1101a:	f2c0 0201 	movt	r2, #1
   1101e:	9907      	ldr	r1, [sp, #28]
   11020:	f003 fe12 	bl	14c48 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
   11024:	9006      	str	r0, [sp, #24]
   11026:	e7ff      	b.n	11028 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x3a>
        mynewt::spi::spi_noblock_write_command(
   11028:	9806      	ldr	r0, [sp, #24]
   1102a:	f002 ff36 	bl	13e9a <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>
   1102e:	9005      	str	r0, [sp, #20]
   11030:	e7ff      	b.n	11032 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x44>
   11032:	f24f 31b8 	movw	r1, #62392	; 0xf3b8
   11036:	f2c0 0101 	movt	r1, #1
   1103a:	f24f 33c4 	movw	r3, #62404	; 0xf3c4
   1103e:	f2c0 0301 	movt	r3, #1
   11042:	220c      	movs	r2, #12
   11044:	9805      	ldr	r0, [sp, #20]
   11046:	f7fe f8bb 	bl	f1c0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   1104a:	e7ff      	b.n	1104c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x5e>
   1104c:	a80b      	add	r0, sp, #44	; 0x2c
        if params.is_some() {
   1104e:	f003 fe56 	bl	14cfe <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>
   11052:	9004      	str	r0, [sp, #16]
   11054:	e7ff      	b.n	11056 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x68>
   11056:	9804      	ldr	r0, [sp, #16]
   11058:	07c1      	lsls	r1, r0, #31
   1105a:	2900      	cmp	r1, #0
   1105c:	d01f      	beq.n	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
   1105e:	e7ff      	b.n	11060 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x72>
                params.unwrap()
   11060:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11062:	990c      	ldr	r1, [sp, #48]	; 0x30
   11064:	f24f 32d4 	movw	r2, #62420	; 0xf3d4
   11068:	f2c0 0201 	movt	r2, #1
   1106c:	f003 fe15 	bl	14c9a <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>
   11070:	9003      	str	r0, [sp, #12]
   11072:	9102      	str	r1, [sp, #8]
   11074:	e7ff      	b.n	11076 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x88>
            mynewt::spi::spi_noblock_write_data(
   11076:	9803      	ldr	r0, [sp, #12]
   11078:	9902      	ldr	r1, [sp, #8]
   1107a:	f002 ff56 	bl	13f2a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
   1107e:	9001      	str	r0, [sp, #4]
   11080:	e7ff      	b.n	11082 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x94>
   11082:	f24f 3178 	movw	r1, #62328	; 0xf378
   11086:	f2c0 0101 	movt	r1, #1
   1108a:	f24f 33e4 	movw	r3, #62436	; 0xf3e4
   1108e:	f2c0 0301 	movt	r3, #1
   11092:	220d      	movs	r2, #13
   11094:	9801      	ldr	r0, [sp, #4]
   11096:	f7fe f893 	bl	f1c0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   1109a:	e7ff      	b.n	1109c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xae>
        if params.is_some() {
   1109c:	e7ff      	b.n	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
   1109e:	2000      	movs	r0, #0
    }
   110a0:	b00e      	add	sp, #56	; 0x38
   110a2:	bd80      	pop	{r7, pc}

000110a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>:
    pub fn set_orientation(&mut self, orientation: &Orientation) -> Result<(), ()> {
   110a4:	b580      	push	{r7, lr}
   110a6:	b098      	sub	sp, #96	; 0x60
   110a8:	9012      	str	r0, [sp, #72]	; 0x48
   110aa:	9113      	str	r1, [sp, #76]	; 0x4c
        if self.rgb {
   110ac:	7d02      	ldrb	r2, [r0, #20]
   110ae:	07d2      	lsls	r2, r2, #31
   110b0:	2a00      	cmp	r2, #0
   110b2:	910a      	str	r1, [sp, #40]	; 0x28
   110b4:	9009      	str	r0, [sp, #36]	; 0x24
   110b6:	d109      	bne.n	110cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x28>
   110b8:	e7ff      	b.n	110ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x16>
   110ba:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
   110bc:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   110c0:	980a      	ldr	r0, [sp, #40]	; 0x28
   110c2:	f7ff fd96 	bl	10bf2 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
   110c6:	9008      	str	r0, [sp, #32]
   110c8:	9107      	str	r1, [sp, #28]
   110ca:	e044      	b.n	11156 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb2>
   110cc:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
   110ce:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   110d2:	980a      	ldr	r0, [sp, #40]	; 0x28
   110d4:	f7ff fd8d 	bl	10bf2 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
   110d8:	9006      	str	r0, [sp, #24]
   110da:	9105      	str	r1, [sp, #20]
   110dc:	e7ff      	b.n	110de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x3a>
   110de:	9806      	ldr	r0, [sp, #24]
   110e0:	f000 0001 	and.w	r0, r0, #1
   110e4:	f24f 32f4 	movw	r2, #62452	; 0xf3f4
   110e8:	f2c0 0201 	movt	r2, #1
   110ec:	9905      	ldr	r1, [sp, #20]
   110ee:	f003 fdab 	bl	14c48 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
   110f2:	9004      	str	r0, [sp, #16]
   110f4:	e7ff      	b.n	110f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x52>
   110f6:	9804      	ldr	r0, [sp, #16]
   110f8:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   110fc:	f10d 0139 	add.w	r1, sp, #57	; 0x39
   11100:	910c      	str	r1, [sp, #48]	; 0x30
   11102:	2101      	movs	r1, #1
   11104:	910d      	str	r1, [sp, #52]	; 0x34
            self.write_command(
   11106:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11108:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1110a:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
   1110e:	9809      	ldr	r0, [sp, #36]	; 0x24
   11110:	f7ff ff6d 	bl	10fee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11114:	9003      	str	r0, [sp, #12]
   11116:	e7ff      	b.n	11118 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x74>
   11118:	9803      	ldr	r0, [sp, #12]
   1111a:	f000 0001 	and.w	r0, r0, #1
   1111e:	f7fe f888 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11122:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
   11126:	e7ff      	b.n	11128 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x84>
            ))?;
   11128:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1112c:	07c1      	lsls	r1, r0, #31
   1112e:	2900      	cmp	r1, #0
   11130:	d001      	beq.n	11136 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x92>
   11132:	e7ff      	b.n	11134 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x90>
   11134:	e001      	b.n	1113a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x96>
        if self.rgb {
   11136:	e047      	b.n	111c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
   11138:	defe      	udf	#254	; 0xfe
            ))?;
   1113a:	f001 ff9f 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1113e:	e003      	b.n	11148 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xa4>
    }
   11140:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
   11144:	b018      	add	sp, #96	; 0x60
   11146:	bd80      	pop	{r7, pc}
            ))?;
   11148:	f004 fbfb 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1114c:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   11150:	e7ff      	b.n	11152 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xae>
   11152:	e7ff      	b.n	11154 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
   11154:	e7f4      	b.n	11140 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
   11156:	9808      	ldr	r0, [sp, #32]
   11158:	f000 0001 	and.w	r0, r0, #1
   1115c:	f24f 4204 	movw	r2, #62468	; 0xf404
   11160:	f2c0 0201 	movt	r2, #1
   11164:	9907      	ldr	r1, [sp, #28]
   11166:	f003 fd6f 	bl	14c48 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
   1116a:	9002      	str	r0, [sp, #8]
   1116c:	e7ff      	b.n	1116e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xca>
   1116e:	9802      	ldr	r0, [sp, #8]
   11170:	f040 0108 	orr.w	r1, r0, #8
   11174:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   11178:	f10d 0147 	add.w	r1, sp, #71	; 0x47
   1117c:	910f      	str	r1, [sp, #60]	; 0x3c
   1117e:	2101      	movs	r1, #1
   11180:	9110      	str	r1, [sp, #64]	; 0x40
            self.write_command(
   11182:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   11184:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11186:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
   1118a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1118c:	f7ff ff2f 	bl	10fee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11190:	9001      	str	r0, [sp, #4]
   11192:	e7ff      	b.n	11194 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xf0>
   11194:	9801      	ldr	r0, [sp, #4]
   11196:	f000 0001 	and.w	r0, r0, #1
   1119a:	f7fe f84a 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1119e:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   111a2:	e7ff      	b.n	111a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x100>
            ))?;
   111a4:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   111a8:	07c1      	lsls	r1, r0, #31
   111aa:	2900      	cmp	r1, #0
   111ac:	d001      	beq.n	111b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10e>
   111ae:	e7ff      	b.n	111b0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10c>
   111b0:	e001      	b.n	111b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x112>
        if self.rgb {
   111b2:	e009      	b.n	111c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
   111b4:	defe      	udf	#254	; 0xfe
            ))?;
   111b6:	f001 ff61 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   111ba:	e7ff      	b.n	111bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x118>
   111bc:	f004 fbc1 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   111c0:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   111c4:	e7ff      	b.n	111c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x122>
   111c6:	e7c5      	b.n	11154 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
   111c8:	2000      	movs	r0, #0
        Ok(())
   111ca:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
   111ce:	e7b7      	b.n	11140 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>

000111d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>:
    fn set_address_window(&mut self, sx: u16, sy: u16, ex: u16, ey: u16) -> Result<(), ()> {
   111d0:	b5b0      	push	{r4, r5, r7, lr}
   111d2:	b0a2      	sub	sp, #136	; 0x88
   111d4:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
   111d8:	469e      	mov	lr, r3
   111da:	4614      	mov	r4, r2
   111dc:	460d      	mov	r5, r1
   111de:	9015      	str	r0, [sp, #84]	; 0x54
   111e0:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
   111e4:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
   111e8:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
   111ec:	f8ad c05e 	strh.w	ip, [sp, #94]	; 0x5e
   111f0:	212a      	movs	r1, #42	; 0x2a
        self.write_command(Instruction::CASET, None)?;
   111f2:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
   111f6:	2100      	movs	r1, #0
   111f8:	9110      	str	r1, [sp, #64]	; 0x40
   111fa:	910f      	str	r1, [sp, #60]	; 0x3c
   111fc:	910f      	str	r1, [sp, #60]	; 0x3c
   111fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   11200:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11202:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
   11206:	900d      	str	r0, [sp, #52]	; 0x34
   11208:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
   1120c:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   11210:	940a      	str	r4, [sp, #40]	; 0x28
   11212:	9509      	str	r5, [sp, #36]	; 0x24
   11214:	f7ff feeb 	bl	10fee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11218:	9008      	str	r0, [sp, #32]
   1121a:	e7ff      	b.n	1121c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x4c>
   1121c:	9808      	ldr	r0, [sp, #32]
   1121e:	f000 0001 	and.w	r0, r0, #1
   11222:	f7fe f806 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11226:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   1122a:	e7ff      	b.n	1122c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x5c>
   1122c:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   11230:	07c1      	lsls	r1, r0, #31
   11232:	2900      	cmp	r1, #0
   11234:	d001      	beq.n	1123a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x6a>
   11236:	e7ff      	b.n	11238 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x68>
   11238:	e00d      	b.n	11256 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x86>
        self.write_word(sx + self.dx)?;
   1123a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1123c:	8a01      	ldrh	r1, [r0, #16]
   1123e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11240:	fa11 f182 	uxtah	r1, r1, r2
   11244:	b28b      	uxth	r3, r1
   11246:	468c      	mov	ip, r1
   11248:	428b      	cmp	r3, r1
   1124a:	f8cd c01c 	str.w	ip, [sp, #28]
   1124e:	f040 80c2 	bne.w	113d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x206>
   11252:	e00d      	b.n	11270 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xa0>
        self.write_command(Instruction::CASET, None)?;
   11254:	defe      	udf	#254	; 0xfe
   11256:	f001 ff11 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1125a:	e003      	b.n	11264 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x94>
    }
   1125c:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
   11260:	b022      	add	sp, #136	; 0x88
   11262:	bdb0      	pop	{r4, r5, r7, pc}
        self.write_command(Instruction::CASET, None)?;
   11264:	f004 fb6d 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11268:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   1126c:	e7ff      	b.n	1126e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x9e>
   1126e:	e7f5      	b.n	1125c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
   11270:	980d      	ldr	r0, [sp, #52]	; 0x34
   11272:	9907      	ldr	r1, [sp, #28]
   11274:	f7ff fdec 	bl	10e50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   11278:	9006      	str	r0, [sp, #24]
   1127a:	e7ff      	b.n	1127c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xac>
   1127c:	9806      	ldr	r0, [sp, #24]
   1127e:	f000 0001 	and.w	r0, r0, #1
   11282:	f7fd ffd6 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11286:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
   1128a:	e7ff      	b.n	1128c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xbc>
   1128c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   11290:	07c1      	lsls	r1, r0, #31
   11292:	2900      	cmp	r1, #0
   11294:	d001      	beq.n	1129a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xca>
   11296:	e7ff      	b.n	11298 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xc8>
   11298:	e00d      	b.n	112b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xe6>
        self.write_word(ex + self.dx)?;
   1129a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1129c:	8a01      	ldrh	r1, [r0, #16]
   1129e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   112a0:	fa11 f182 	uxtah	r1, r1, r2
   112a4:	b28b      	uxth	r3, r1
   112a6:	468c      	mov	ip, r1
   112a8:	428b      	cmp	r3, r1
   112aa:	f8cd c014 	str.w	ip, [sp, #20]
   112ae:	f040 809e 	bne.w	113ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x21e>
   112b2:	e009      	b.n	112c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf8>
        self.write_word(sx + self.dx)?;
   112b4:	defe      	udf	#254	; 0xfe
   112b6:	f001 fee1 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   112ba:	e7ff      	b.n	112bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xec>
   112bc:	f004 fb41 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   112c0:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   112c4:	e7ff      	b.n	112c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf6>
   112c6:	e7c9      	b.n	1125c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ex + self.dx)?;
   112c8:	980d      	ldr	r0, [sp, #52]	; 0x34
   112ca:	9905      	ldr	r1, [sp, #20]
   112cc:	f7ff fdc0 	bl	10e50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   112d0:	9004      	str	r0, [sp, #16]
   112d2:	e7ff      	b.n	112d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x104>
   112d4:	9804      	ldr	r0, [sp, #16]
   112d6:	f000 0001 	and.w	r0, r0, #1
   112da:	f7fd ffaa 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   112de:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
   112e2:	e7ff      	b.n	112e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x114>
   112e4:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
   112e8:	07c1      	lsls	r1, r0, #31
   112ea:	2900      	cmp	r1, #0
   112ec:	d001      	beq.n	112f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x122>
   112ee:	e7ff      	b.n	112f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x120>
   112f0:	e010      	b.n	11314 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x144>
   112f2:	202b      	movs	r0, #43	; 0x2b
        self.write_command(Instruction::RASET, None)?;
   112f4:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   112f8:	2000      	movs	r0, #0
   112fa:	9013      	str	r0, [sp, #76]	; 0x4c
   112fc:	9012      	str	r0, [sp, #72]	; 0x48
   112fe:	9012      	str	r0, [sp, #72]	; 0x48
   11300:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11302:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11304:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
   11308:	980d      	ldr	r0, [sp, #52]	; 0x34
   1130a:	f7ff fe70 	bl	10fee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   1130e:	9003      	str	r0, [sp, #12]
   11310:	e009      	b.n	11326 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x156>
        self.write_word(ex + self.dx)?;
   11312:	defe      	udf	#254	; 0xfe
   11314:	f001 feb2 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11318:	e7ff      	b.n	1131a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x14a>
   1131a:	f004 fb12 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1131e:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   11322:	e7ff      	b.n	11324 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x154>
   11324:	e79a      	b.n	1125c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_command(Instruction::RASET, None)?;
   11326:	9803      	ldr	r0, [sp, #12]
   11328:	f000 0001 	and.w	r0, r0, #1
   1132c:	f7fd ff81 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11330:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
   11334:	e7ff      	b.n	11336 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x166>
   11336:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
   1133a:	07c1      	lsls	r1, r0, #31
   1133c:	2900      	cmp	r1, #0
   1133e:	d001      	beq.n	11344 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x174>
   11340:	e7ff      	b.n	11342 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x172>
   11342:	e00c      	b.n	1135e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x18e>
        self.write_word(sy + self.dy)?;
   11344:	980d      	ldr	r0, [sp, #52]	; 0x34
   11346:	8a41      	ldrh	r1, [r0, #18]
   11348:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1134a:	fa11 f182 	uxtah	r1, r1, r2
   1134e:	b28b      	uxth	r3, r1
   11350:	468c      	mov	ip, r1
   11352:	428b      	cmp	r3, r1
   11354:	f8cd c008 	str.w	ip, [sp, #8]
   11358:	d155      	bne.n	11406 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x236>
   1135a:	e009      	b.n	11370 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1a0>
        self.write_command(Instruction::RASET, None)?;
   1135c:	defe      	udf	#254	; 0xfe
   1135e:	f001 fe8d 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11362:	e7ff      	b.n	11364 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x194>
   11364:	f004 faed 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11368:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   1136c:	e7ff      	b.n	1136e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x19e>
   1136e:	e775      	b.n	1125c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sy + self.dy)?;
   11370:	980d      	ldr	r0, [sp, #52]	; 0x34
   11372:	9902      	ldr	r1, [sp, #8]
   11374:	f7ff fd6c 	bl	10e50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   11378:	9001      	str	r0, [sp, #4]
   1137a:	e7ff      	b.n	1137c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ac>
   1137c:	9801      	ldr	r0, [sp, #4]
   1137e:	f000 0001 	and.w	r0, r0, #1
   11382:	f7fd ff56 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11386:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
   1138a:	e7ff      	b.n	1138c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1bc>
   1138c:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
   11390:	07c1      	lsls	r1, r0, #31
   11392:	2900      	cmp	r1, #0
   11394:	d001      	beq.n	1139a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ca>
   11396:	e7ff      	b.n	11398 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1c8>
   11398:	e00c      	b.n	113b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1e4>
        self.write_word(ey + self.dy)
   1139a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1139c:	8a41      	ldrh	r1, [r0, #18]
   1139e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   113a0:	fa11 f182 	uxtah	r1, r1, r2
   113a4:	b28b      	uxth	r3, r1
   113a6:	468c      	mov	ip, r1
   113a8:	428b      	cmp	r3, r1
   113aa:	f8cd c000 	str.w	ip, [sp]
   113ae:	d136      	bne.n	1141e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x24e>
   113b0:	e009      	b.n	113c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f6>
        self.write_word(sy + self.dy)?;
   113b2:	defe      	udf	#254	; 0xfe
   113b4:	f001 fe62 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   113b8:	e7ff      	b.n	113ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ea>
   113ba:	f004 fac2 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   113be:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   113c2:	e7ff      	b.n	113c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f4>
   113c4:	e74a      	b.n	1125c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ey + self.dy)
   113c6:	980d      	ldr	r0, [sp, #52]	; 0x34
   113c8:	9900      	ldr	r1, [sp, #0]
   113ca:	f7ff fd41 	bl	10e50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   113ce:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   113d2:	e7ff      	b.n	113d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x204>
    }
   113d4:	e742      	b.n	1125c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
   113d6:	f24f 4030 	movw	r0, #62512	; 0xf430
   113da:	f2c0 0001 	movt	r0, #1
   113de:	f24f 4214 	movw	r2, #62484	; 0xf414
   113e2:	f2c0 0201 	movt	r2, #1
   113e6:	211c      	movs	r1, #28
   113e8:	f005 fb04 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   113ec:	defe      	udf	#254	; 0xfe
        self.write_word(ex + self.dx)?;
   113ee:	f24f 4030 	movw	r0, #62512	; 0xf430
   113f2:	f2c0 0001 	movt	r0, #1
   113f6:	f24f 424c 	movw	r2, #62540	; 0xf44c
   113fa:	f2c0 0201 	movt	r2, #1
   113fe:	211c      	movs	r1, #28
   11400:	f005 faf8 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11404:	defe      	udf	#254	; 0xfe
        self.write_word(sy + self.dy)?;
   11406:	f24f 4030 	movw	r0, #62512	; 0xf430
   1140a:	f2c0 0001 	movt	r0, #1
   1140e:	f24f 425c 	movw	r2, #62556	; 0xf45c
   11412:	f2c0 0201 	movt	r2, #1
   11416:	211c      	movs	r1, #28
   11418:	f005 faec 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1141c:	defe      	udf	#254	; 0xfe
        self.write_word(ey + self.dy)
   1141e:	f24f 4030 	movw	r0, #62512	; 0xf430
   11422:	f2c0 0001 	movt	r0, #1
   11426:	f24f 426c 	movw	r2, #62572	; 0xf46c
   1142a:	f2c0 0201 	movt	r2, #1
   1142e:	211c      	movs	r1, #28
   11430:	f005 fae0 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11434:	defe      	udf	#254	; 0xfe

00011436 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>:
    pub fn new(
   11436:	b5b0      	push	{r4, r5, r7, lr}
   11438:	b08a      	sub	sp, #40	; 0x28
   1143a:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   1143e:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   11442:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   11444:	9106      	str	r1, [sp, #24]
   11446:	9207      	str	r2, [sp, #28]
   11448:	9308      	str	r3, [sp, #32]
   1144a:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
   1144e:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
        let display = ST7735 {
   11452:	9100      	str	r1, [sp, #0]
   11454:	9201      	str	r2, [sp, #4]
   11456:	9302      	str	r3, [sp, #8]
   11458:	9403      	str	r4, [sp, #12]
   1145a:	f88d e014 	strb.w	lr, [sp, #20]
   1145e:	f88d c015 	strb.w	ip, [sp, #21]
   11462:	2100      	movs	r1, #0
   11464:	f8ad 1010 	strh.w	r1, [sp, #16]
   11468:	f8ad 1012 	strh.w	r1, [sp, #18]
   1146c:	4669      	mov	r1, sp
        display
   1146e:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   11472:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    }
   11476:	b00a      	add	sp, #40	; 0x28
   11478:	bdb0      	pop	{r4, r5, r7, pc}

0001147a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>:
    pub fn init<DELAY>(&mut self, delay: &mut DELAY) -> Result<(), ()>
   1147a:	b580      	push	{r7, lr}
   1147c:	b0f6      	sub	sp, #472	; 0x1d8
   1147e:	904e      	str	r0, [sp, #312]	; 0x138
   11480:	914f      	str	r1, [sp, #316]	; 0x13c
        mynewt::spi::spi_noblock_init()  //  Init the SPI queue
   11482:	9117      	str	r1, [sp, #92]	; 0x5c
   11484:	9016      	str	r0, [sp, #88]	; 0x58
   11486:	f001 ffae 	bl	133e6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>
   1148a:	9015      	str	r0, [sp, #84]	; 0x54
   1148c:	e7ff      	b.n	1148e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x14>
   1148e:	f24f 417c 	movw	r1, #62588	; 0xf47c
   11492:	f2c0 0101 	movt	r1, #1
   11496:	f24f 438c 	movw	r3, #62604	; 0xf48c
   1149a:	f2c0 0301 	movt	r3, #1
   1149e:	220d      	movs	r2, #13
   114a0:	9815      	ldr	r0, [sp, #84]	; 0x54
   114a2:	f7fd fe8d 	bl	f1c0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   114a6:	e7ff      	b.n	114a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2e>
        self.hard_reset()?;
   114a8:	9816      	ldr	r0, [sp, #88]	; 0x58
   114aa:	f7ff fbbd 	bl	10c28 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>
   114ae:	9014      	str	r0, [sp, #80]	; 0x50
   114b0:	e7ff      	b.n	114b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38>
   114b2:	9814      	ldr	r0, [sp, #80]	; 0x50
   114b4:	f000 0001 	and.w	r0, r0, #1
   114b8:	f7fd febb 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   114bc:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
   114c0:	e7ff      	b.n	114c2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48>
   114c2:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
   114c6:	07c1      	lsls	r1, r0, #31
   114c8:	2900      	cmp	r1, #0
   114ca:	d001      	beq.n	114d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x56>
   114cc:	e7ff      	b.n	114ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54>
   114ce:	e010      	b.n	114f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x78>
   114d0:	2001      	movs	r0, #1
        self.write_command(Instruction::SWRESET, None)?;
   114d2:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
   114d6:	2000      	movs	r0, #0
   114d8:	901a      	str	r0, [sp, #104]	; 0x68
   114da:	9019      	str	r0, [sp, #100]	; 0x64
   114dc:	9019      	str	r0, [sp, #100]	; 0x64
   114de:	9a19      	ldr	r2, [sp, #100]	; 0x64
   114e0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   114e2:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
   114e6:	9816      	ldr	r0, [sp, #88]	; 0x58
   114e8:	f7ff fd81 	bl	10fee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   114ec:	9013      	str	r0, [sp, #76]	; 0x4c
   114ee:	e00d      	b.n	1150c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x92>
        self.hard_reset()?;
   114f0:	defe      	udf	#254	; 0xfe
   114f2:	f001 fdc3 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   114f6:	e003      	b.n	11500 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x86>
    }
   114f8:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   114fc:	b076      	add	sp, #472	; 0x1d8
   114fe:	bd80      	pop	{r7, pc}
        self.hard_reset()?;
   11500:	f004 fa1f 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11504:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11508:	e7ff      	b.n	1150a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x90>
   1150a:	e7f5      	b.n	114f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::SWRESET, None)?;
   1150c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1150e:	f000 0001 	and.w	r0, r0, #1
   11512:	f7fd fe8e 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11516:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
   1151a:	e7ff      	b.n	1151c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xa2>
   1151c:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
   11520:	07c1      	lsls	r1, r0, #31
   11522:	2900      	cmp	r1, #0
   11524:	d001      	beq.n	1152a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xb0>
   11526:	e7ff      	b.n	11528 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xae>
   11528:	e005      	b.n	11536 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xbc>
   1152a:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
   1152c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1152e:	f7fe fbb1 	bl	fc94 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   11532:	e009      	b.n	11548 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xce>
        self.write_command(Instruction::SWRESET, None)?;
   11534:	defe      	udf	#254	; 0xfe
   11536:	f001 fda1 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1153a:	e7ff      	b.n	1153c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xc2>
   1153c:	f004 fa01 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11540:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11544:	e7ff      	b.n	11546 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xcc>
   11546:	e7d7      	b.n	114f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
   11548:	2011      	movs	r0, #17
        self.write_command(Instruction::SLPOUT, None)?;
   1154a:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
   1154e:	2000      	movs	r0, #0
   11550:	901d      	str	r0, [sp, #116]	; 0x74
   11552:	901c      	str	r0, [sp, #112]	; 0x70
   11554:	901c      	str	r0, [sp, #112]	; 0x70
   11556:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   11558:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1155a:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
   1155e:	9816      	ldr	r0, [sp, #88]	; 0x58
   11560:	f7ff fd45 	bl	10fee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11564:	9012      	str	r0, [sp, #72]	; 0x48
   11566:	e7ff      	b.n	11568 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xee>
   11568:	9812      	ldr	r0, [sp, #72]	; 0x48
   1156a:	f000 0001 	and.w	r0, r0, #1
   1156e:	f7fd fe60 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11572:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
   11576:	e7ff      	b.n	11578 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xfe>
   11578:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
   1157c:	07c1      	lsls	r1, r0, #31
   1157e:	2900      	cmp	r1, #0
   11580:	d001      	beq.n	11586 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10c>
   11582:	e7ff      	b.n	11584 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10a>
   11584:	e005      	b.n	11592 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x118>
   11586:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
   11588:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1158a:	f7fe fb83 	bl	fc94 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   1158e:	e009      	b.n	115a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x12a>
        self.write_command(Instruction::SLPOUT, None)?;
   11590:	defe      	udf	#254	; 0xfe
   11592:	f001 fd73 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11596:	e7ff      	b.n	11598 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x11e>
   11598:	f004 f9d3 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1159c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   115a0:	e7ff      	b.n	115a2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x128>
   115a2:	e7a9      	b.n	114f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
   115a4:	20b1      	movs	r0, #177	; 0xb1
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
   115a6:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
   115aa:	f24f 40a0 	movw	r0, #62624	; 0xf4a0
   115ae:	f2c0 0001 	movt	r0, #1
   115b2:	6800      	ldr	r0, [r0, #0]
   115b4:	901f      	str	r0, [sp, #124]	; 0x7c
   115b6:	2003      	movs	r0, #3
   115b8:	9020      	str	r0, [sp, #128]	; 0x80
   115ba:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   115bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
   115be:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
   115c2:	9816      	ldr	r0, [sp, #88]	; 0x58
   115c4:	f7ff fd13 	bl	10fee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   115c8:	9011      	str	r0, [sp, #68]	; 0x44
   115ca:	e7ff      	b.n	115cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x152>
   115cc:	9811      	ldr	r0, [sp, #68]	; 0x44
   115ce:	f000 0001 	and.w	r0, r0, #1
   115d2:	f7fd fe2e 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   115d6:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
   115da:	e7ff      	b.n	115dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x162>
   115dc:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
   115e0:	07c1      	lsls	r1, r0, #31
   115e2:	2900      	cmp	r1, #0
   115e4:	d001      	beq.n	115ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x170>
   115e6:	e7ff      	b.n	115e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x16e>
   115e8:	e014      	b.n	11614 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x19a>
   115ea:	20b2      	movs	r0, #178	; 0xb2
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
   115ec:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   115f0:	f24f 40a0 	movw	r0, #62624	; 0xf4a0
   115f4:	f2c0 0001 	movt	r0, #1
   115f8:	6800      	ldr	r0, [r0, #0]
   115fa:	9022      	str	r0, [sp, #136]	; 0x88
   115fc:	2003      	movs	r0, #3
   115fe:	9023      	str	r0, [sp, #140]	; 0x8c
   11600:	9a22      	ldr	r2, [sp, #136]	; 0x88
   11602:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11604:	f89d 1087 	ldrb.w	r1, [sp, #135]	; 0x87
   11608:	9816      	ldr	r0, [sp, #88]	; 0x58
   1160a:	f7ff fcf0 	bl	10fee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   1160e:	9010      	str	r0, [sp, #64]	; 0x40
   11610:	e009      	b.n	11626 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ac>
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
   11612:	defe      	udf	#254	; 0xfe
   11614:	f001 fd32 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11618:	e7ff      	b.n	1161a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1a0>
   1161a:	f004 f992 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1161e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11622:	e7ff      	b.n	11624 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1aa>
   11624:	e768      	b.n	114f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
   11626:	9810      	ldr	r0, [sp, #64]	; 0x40
   11628:	f000 0001 	and.w	r0, r0, #1
   1162c:	f7fd fe01 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11630:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
   11634:	e7ff      	b.n	11636 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1bc>
   11636:	f89d 0086 	ldrb.w	r0, [sp, #134]	; 0x86
   1163a:	07c1      	lsls	r1, r0, #31
   1163c:	2900      	cmp	r1, #0
   1163e:	d001      	beq.n	11644 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ca>
   11640:	e7ff      	b.n	11642 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1c8>
   11642:	e014      	b.n	1166e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1f4>
   11644:	20b3      	movs	r0, #179	; 0xb3
        self.write_command(Instruction::FRMCTR3,
   11646:	f88d 0093 	strb.w	r0, [sp, #147]	; 0x93
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
   1164a:	f24f 40ac 	movw	r0, #62636	; 0xf4ac
   1164e:	f2c0 0001 	movt	r0, #1
   11652:	6800      	ldr	r0, [r0, #0]
   11654:	9025      	str	r0, [sp, #148]	; 0x94
   11656:	2006      	movs	r0, #6
   11658:	9026      	str	r0, [sp, #152]	; 0x98
        self.write_command(Instruction::FRMCTR3,
   1165a:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1165c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1165e:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
   11662:	9816      	ldr	r0, [sp, #88]	; 0x58
   11664:	f7ff fcc3 	bl	10fee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11668:	900f      	str	r0, [sp, #60]	; 0x3c
   1166a:	e009      	b.n	11680 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x206>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
   1166c:	defe      	udf	#254	; 0xfe
   1166e:	f001 fd05 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11672:	e7ff      	b.n	11674 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1fa>
   11674:	f004 f965 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11678:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   1167c:	e7ff      	b.n	1167e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x204>
   1167e:	e73b      	b.n	114f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR3,
   11680:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11682:	f000 0001 	and.w	r0, r0, #1
   11686:	f7fd fdd4 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1168a:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
   1168e:	e7ff      	b.n	11690 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x216>
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
   11690:	f89d 0092 	ldrb.w	r0, [sp, #146]	; 0x92
   11694:	07c1      	lsls	r1, r0, #31
   11696:	2900      	cmp	r1, #0
   11698:	d001      	beq.n	1169e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x224>
   1169a:	e7ff      	b.n	1169c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x222>
   1169c:	e014      	b.n	116c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x24e>
   1169e:	20b4      	movs	r0, #180	; 0xb4
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
   116a0:	f88d 009f 	strb.w	r0, [sp, #159]	; 0x9f
   116a4:	f24f 40b4 	movw	r0, #62644	; 0xf4b4
   116a8:	f2c0 0001 	movt	r0, #1
   116ac:	6800      	ldr	r0, [r0, #0]
   116ae:	9028      	str	r0, [sp, #160]	; 0xa0
   116b0:	2001      	movs	r0, #1
   116b2:	9029      	str	r0, [sp, #164]	; 0xa4
   116b4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   116b6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   116b8:	f89d 109f 	ldrb.w	r1, [sp, #159]	; 0x9f
   116bc:	9816      	ldr	r0, [sp, #88]	; 0x58
   116be:	f7ff fc96 	bl	10fee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   116c2:	900e      	str	r0, [sp, #56]	; 0x38
   116c4:	e009      	b.n	116da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x260>
        self.write_command(Instruction::FRMCTR3,
   116c6:	defe      	udf	#254	; 0xfe
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
   116c8:	f001 fcd8 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   116cc:	e7ff      	b.n	116ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x254>
   116ce:	f004 f938 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   116d2:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   116d6:	e7ff      	b.n	116d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x25e>
   116d8:	e70e      	b.n	114f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
   116da:	980e      	ldr	r0, [sp, #56]	; 0x38
   116dc:	f000 0001 	and.w	r0, r0, #1
   116e0:	f7fd fda7 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   116e4:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
   116e8:	e7ff      	b.n	116ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x270>
   116ea:	f89d 009e 	ldrb.w	r0, [sp, #158]	; 0x9e
   116ee:	07c1      	lsls	r1, r0, #31
   116f0:	2900      	cmp	r1, #0
   116f2:	d001      	beq.n	116f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27e>
   116f4:	e7ff      	b.n	116f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27c>
   116f6:	e014      	b.n	11722 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2a8>
   116f8:	20c0      	movs	r0, #192	; 0xc0
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
   116fa:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
   116fe:	f24f 40bc 	movw	r0, #62652	; 0xf4bc
   11702:	f2c0 0001 	movt	r0, #1
   11706:	6800      	ldr	r0, [r0, #0]
   11708:	902b      	str	r0, [sp, #172]	; 0xac
   1170a:	2003      	movs	r0, #3
   1170c:	902c      	str	r0, [sp, #176]	; 0xb0
   1170e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   11710:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   11712:	f89d 10ab 	ldrb.w	r1, [sp, #171]	; 0xab
   11716:	9816      	ldr	r0, [sp, #88]	; 0x58
   11718:	f7ff fc69 	bl	10fee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   1171c:	900d      	str	r0, [sp, #52]	; 0x34
   1171e:	e009      	b.n	11734 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ba>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
   11720:	defe      	udf	#254	; 0xfe
   11722:	f001 fcab 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11726:	e7ff      	b.n	11728 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ae>
   11728:	f004 f90b 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1172c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11730:	e7ff      	b.n	11732 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2b8>
   11732:	e6e1      	b.n	114f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
   11734:	980d      	ldr	r0, [sp, #52]	; 0x34
   11736:	f000 0001 	and.w	r0, r0, #1
   1173a:	f7fd fd7a 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1173e:	f88d 00aa 	strb.w	r0, [sp, #170]	; 0xaa
   11742:	e7ff      	b.n	11744 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ca>
   11744:	f89d 00aa 	ldrb.w	r0, [sp, #170]	; 0xaa
   11748:	07c1      	lsls	r1, r0, #31
   1174a:	2900      	cmp	r1, #0
   1174c:	d001      	beq.n	11752 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d8>
   1174e:	e7ff      	b.n	11750 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d6>
   11750:	e014      	b.n	1177c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x302>
   11752:	20c1      	movs	r0, #193	; 0xc1
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
   11754:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
   11758:	f24f 40c4 	movw	r0, #62660	; 0xf4c4
   1175c:	f2c0 0001 	movt	r0, #1
   11760:	6800      	ldr	r0, [r0, #0]
   11762:	902e      	str	r0, [sp, #184]	; 0xb8
   11764:	2001      	movs	r0, #1
   11766:	902f      	str	r0, [sp, #188]	; 0xbc
   11768:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   1176a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   1176c:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
   11770:	9816      	ldr	r0, [sp, #88]	; 0x58
   11772:	f7ff fc3c 	bl	10fee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11776:	900c      	str	r0, [sp, #48]	; 0x30
   11778:	e009      	b.n	1178e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x314>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
   1177a:	defe      	udf	#254	; 0xfe
   1177c:	f001 fc7e 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11780:	e7ff      	b.n	11782 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x308>
   11782:	f004 f8de 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11786:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   1178a:	e7ff      	b.n	1178c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x312>
   1178c:	e6b4      	b.n	114f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
   1178e:	980c      	ldr	r0, [sp, #48]	; 0x30
   11790:	f000 0001 	and.w	r0, r0, #1
   11794:	f7fd fd4d 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11798:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
   1179c:	e7ff      	b.n	1179e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x324>
   1179e:	f89d 00b6 	ldrb.w	r0, [sp, #182]	; 0xb6
   117a2:	07c1      	lsls	r1, r0, #31
   117a4:	2900      	cmp	r1, #0
   117a6:	d001      	beq.n	117ac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x332>
   117a8:	e7ff      	b.n	117aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x330>
   117aa:	e014      	b.n	117d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x35c>
   117ac:	20c2      	movs	r0, #194	; 0xc2
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
   117ae:	f88d 00c3 	strb.w	r0, [sp, #195]	; 0xc3
   117b2:	f24f 40cc 	movw	r0, #62668	; 0xf4cc
   117b6:	f2c0 0001 	movt	r0, #1
   117ba:	6800      	ldr	r0, [r0, #0]
   117bc:	9031      	str	r0, [sp, #196]	; 0xc4
   117be:	2002      	movs	r0, #2
   117c0:	9032      	str	r0, [sp, #200]	; 0xc8
   117c2:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   117c4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
   117c6:	f89d 10c3 	ldrb.w	r1, [sp, #195]	; 0xc3
   117ca:	9816      	ldr	r0, [sp, #88]	; 0x58
   117cc:	f7ff fc0f 	bl	10fee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   117d0:	900b      	str	r0, [sp, #44]	; 0x2c
   117d2:	e009      	b.n	117e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
   117d4:	defe      	udf	#254	; 0xfe
   117d6:	f001 fc51 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   117da:	e7ff      	b.n	117dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x362>
   117dc:	f004 f8b1 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   117e0:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   117e4:	e7ff      	b.n	117e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36c>
   117e6:	e687      	b.n	114f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
   117e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   117ea:	f000 0001 	and.w	r0, r0, #1
   117ee:	f7fd fd20 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   117f2:	f88d 00c2 	strb.w	r0, [sp, #194]	; 0xc2
   117f6:	e7ff      	b.n	117f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x37e>
   117f8:	f89d 00c2 	ldrb.w	r0, [sp, #194]	; 0xc2
   117fc:	07c1      	lsls	r1, r0, #31
   117fe:	2900      	cmp	r1, #0
   11800:	d001      	beq.n	11806 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38c>
   11802:	e7ff      	b.n	11804 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38a>
   11804:	e014      	b.n	11830 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3b6>
   11806:	20c3      	movs	r0, #195	; 0xc3
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
   11808:	f88d 00cf 	strb.w	r0, [sp, #207]	; 0xcf
   1180c:	f24f 40d4 	movw	r0, #62676	; 0xf4d4
   11810:	f2c0 0001 	movt	r0, #1
   11814:	6800      	ldr	r0, [r0, #0]
   11816:	9034      	str	r0, [sp, #208]	; 0xd0
   11818:	2002      	movs	r0, #2
   1181a:	9035      	str	r0, [sp, #212]	; 0xd4
   1181c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
   1181e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   11820:	f89d 10cf 	ldrb.w	r1, [sp, #207]	; 0xcf
   11824:	9816      	ldr	r0, [sp, #88]	; 0x58
   11826:	f7ff fbe2 	bl	10fee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   1182a:	900a      	str	r0, [sp, #40]	; 0x28
   1182c:	e009      	b.n	11842 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c8>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
   1182e:	defe      	udf	#254	; 0xfe
   11830:	f001 fc24 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11834:	e7ff      	b.n	11836 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3bc>
   11836:	f004 f884 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1183a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   1183e:	e7ff      	b.n	11840 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c6>
   11840:	e65a      	b.n	114f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
   11842:	980a      	ldr	r0, [sp, #40]	; 0x28
   11844:	f000 0001 	and.w	r0, r0, #1
   11848:	f7fd fcf3 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1184c:	f88d 00ce 	strb.w	r0, [sp, #206]	; 0xce
   11850:	e7ff      	b.n	11852 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3d8>
   11852:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
   11856:	07c1      	lsls	r1, r0, #31
   11858:	2900      	cmp	r1, #0
   1185a:	d001      	beq.n	11860 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e6>
   1185c:	e7ff      	b.n	1185e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e4>
   1185e:	e014      	b.n	1188a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x410>
   11860:	20c4      	movs	r0, #196	; 0xc4
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
   11862:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
   11866:	f24f 40dc 	movw	r0, #62684	; 0xf4dc
   1186a:	f2c0 0001 	movt	r0, #1
   1186e:	6800      	ldr	r0, [r0, #0]
   11870:	9037      	str	r0, [sp, #220]	; 0xdc
   11872:	2002      	movs	r0, #2
   11874:	9038      	str	r0, [sp, #224]	; 0xe0
   11876:	9a37      	ldr	r2, [sp, #220]	; 0xdc
   11878:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   1187a:	f89d 10db 	ldrb.w	r1, [sp, #219]	; 0xdb
   1187e:	9816      	ldr	r0, [sp, #88]	; 0x58
   11880:	f7ff fbb5 	bl	10fee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11884:	9009      	str	r0, [sp, #36]	; 0x24
   11886:	e009      	b.n	1189c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x422>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
   11888:	defe      	udf	#254	; 0xfe
   1188a:	f001 fbf7 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1188e:	e7ff      	b.n	11890 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x416>
   11890:	f004 f857 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11894:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11898:	e7ff      	b.n	1189a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x420>
   1189a:	e62d      	b.n	114f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
   1189c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1189e:	f000 0001 	and.w	r0, r0, #1
   118a2:	f7fd fcc6 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   118a6:	f88d 00da 	strb.w	r0, [sp, #218]	; 0xda
   118aa:	e7ff      	b.n	118ac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x432>
   118ac:	f89d 00da 	ldrb.w	r0, [sp, #218]	; 0xda
   118b0:	07c1      	lsls	r1, r0, #31
   118b2:	2900      	cmp	r1, #0
   118b4:	d001      	beq.n	118ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x440>
   118b6:	e7ff      	b.n	118b8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x43e>
   118b8:	e014      	b.n	118e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x46a>
   118ba:	20c5      	movs	r0, #197	; 0xc5
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
   118bc:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   118c0:	f24f 40e4 	movw	r0, #62692	; 0xf4e4
   118c4:	f2c0 0001 	movt	r0, #1
   118c8:	6800      	ldr	r0, [r0, #0]
   118ca:	903a      	str	r0, [sp, #232]	; 0xe8
   118cc:	2001      	movs	r0, #1
   118ce:	903b      	str	r0, [sp, #236]	; 0xec
   118d0:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
   118d2:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   118d4:	f89d 10e7 	ldrb.w	r1, [sp, #231]	; 0xe7
   118d8:	9816      	ldr	r0, [sp, #88]	; 0x58
   118da:	f7ff fb88 	bl	10fee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   118de:	9008      	str	r0, [sp, #32]
   118e0:	e009      	b.n	118f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47c>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
   118e2:	defe      	udf	#254	; 0xfe
   118e4:	f001 fbca 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   118e8:	e7ff      	b.n	118ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x470>
   118ea:	f004 f82a 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   118ee:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   118f2:	e7ff      	b.n	118f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47a>
   118f4:	e600      	b.n	114f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
   118f6:	9808      	ldr	r0, [sp, #32]
   118f8:	f000 0001 	and.w	r0, r0, #1
   118fc:	f7fd fc99 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11900:	f88d 00e6 	strb.w	r0, [sp, #230]	; 0xe6
   11904:	e7ff      	b.n	11906 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48c>
   11906:	f89d 00e6 	ldrb.w	r0, [sp, #230]	; 0xe6
   1190a:	07c1      	lsls	r1, r0, #31
   1190c:	2900      	cmp	r1, #0
   1190e:	d001      	beq.n	11914 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x49a>
   11910:	e7ff      	b.n	11912 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x498>
   11912:	e006      	b.n	11922 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4a8>
        if self.inverted {
   11914:	9816      	ldr	r0, [sp, #88]	; 0x58
   11916:	7d41      	ldrb	r1, [r0, #21]
   11918:	07c9      	lsls	r1, r1, #31
   1191a:	2900      	cmp	r1, #0
   1191c:	d11a      	bne.n	11954 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4da>
   1191e:	e009      	b.n	11934 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ba>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
   11920:	defe      	udf	#254	; 0xfe
   11922:	f001 fbab 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11926:	e7ff      	b.n	11928 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ae>
   11928:	f004 f80b 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1192c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11930:	e7ff      	b.n	11932 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4b8>
   11932:	e5e1      	b.n	114f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
   11934:	2020      	movs	r0, #32
            self.write_command(Instruction::INVOFF, None)?;
   11936:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
   1193a:	2000      	movs	r0, #0
   1193c:	9041      	str	r0, [sp, #260]	; 0x104
   1193e:	9040      	str	r0, [sp, #256]	; 0x100
   11940:	9040      	str	r0, [sp, #256]	; 0x100
   11942:	9a40      	ldr	r2, [sp, #256]	; 0x100
   11944:	9b41      	ldr	r3, [sp, #260]	; 0x104
   11946:	f89d 10ff 	ldrb.w	r1, [sp, #255]	; 0xff
   1194a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1194c:	f7ff fb4f 	bl	10fee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11950:	9007      	str	r0, [sp, #28]
   11952:	e02a      	b.n	119aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x530>
   11954:	2021      	movs	r0, #33	; 0x21
            self.write_command(Instruction::INVON, None)?;
   11956:	f88d 00f3 	strb.w	r0, [sp, #243]	; 0xf3
   1195a:	2000      	movs	r0, #0
   1195c:	903e      	str	r0, [sp, #248]	; 0xf8
   1195e:	903d      	str	r0, [sp, #244]	; 0xf4
   11960:	903d      	str	r0, [sp, #244]	; 0xf4
   11962:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
   11964:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   11966:	f89d 10f3 	ldrb.w	r1, [sp, #243]	; 0xf3
   1196a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1196c:	f7ff fb3f 	bl	10fee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11970:	9006      	str	r0, [sp, #24]
   11972:	e7ff      	b.n	11974 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4fa>
   11974:	9806      	ldr	r0, [sp, #24]
   11976:	f000 0001 	and.w	r0, r0, #1
   1197a:	f7fd fc5a 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1197e:	f88d 00f2 	strb.w	r0, [sp, #242]	; 0xf2
   11982:	e7ff      	b.n	11984 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x50a>
   11984:	f89d 00f2 	ldrb.w	r0, [sp, #242]	; 0xf2
   11988:	07c1      	lsls	r1, r0, #31
   1198a:	2900      	cmp	r1, #0
   1198c:	d001      	beq.n	11992 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x518>
   1198e:	e7ff      	b.n	11990 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x516>
   11990:	e001      	b.n	11996 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x51c>
        if self.inverted {
   11992:	e024      	b.n	119de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVON, None)?;
   11994:	defe      	udf	#254	; 0xfe
   11996:	f001 fb71 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1199a:	e7ff      	b.n	1199c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x522>
   1199c:	f003 ffd1 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   119a0:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   119a4:	e7ff      	b.n	119a6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52c>
   119a6:	e7ff      	b.n	119a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
   119a8:	e5a6      	b.n	114f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::INVOFF, None)?;
   119aa:	9807      	ldr	r0, [sp, #28]
   119ac:	f000 0001 	and.w	r0, r0, #1
   119b0:	f7fd fc3f 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   119b4:	f88d 00fe 	strb.w	r0, [sp, #254]	; 0xfe
   119b8:	e7ff      	b.n	119ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x540>
   119ba:	f89d 00fe 	ldrb.w	r0, [sp, #254]	; 0xfe
   119be:	07c1      	lsls	r1, r0, #31
   119c0:	2900      	cmp	r1, #0
   119c2:	d001      	beq.n	119c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54e>
   119c4:	e7ff      	b.n	119c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54c>
   119c6:	e001      	b.n	119cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x552>
        if self.inverted {
   119c8:	e009      	b.n	119de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVOFF, None)?;
   119ca:	defe      	udf	#254	; 0xfe
   119cc:	f001 fb56 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   119d0:	e7ff      	b.n	119d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x558>
   119d2:	f003 ffb6 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   119d6:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   119da:	e7ff      	b.n	119dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x562>
   119dc:	e7e4      	b.n	119a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
        if self.rgb {
   119de:	9816      	ldr	r0, [sp, #88]	; 0x58
   119e0:	7d01      	ldrb	r1, [r0, #20]
   119e2:	07c9      	lsls	r1, r1, #31
   119e4:	2900      	cmp	r1, #0
   119e6:	d114      	bne.n	11a12 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x598>
   119e8:	e7ff      	b.n	119ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x570>
   119ea:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
   119ec:	f88d 0117 	strb.w	r0, [sp, #279]	; 0x117
   119f0:	f24f 40f4 	movw	r0, #62708	; 0xf4f4
   119f4:	f2c0 0001 	movt	r0, #1
   119f8:	6800      	ldr	r0, [r0, #0]
   119fa:	9046      	str	r0, [sp, #280]	; 0x118
   119fc:	2001      	movs	r0, #1
   119fe:	9047      	str	r0, [sp, #284]	; 0x11c
   11a00:	9a46      	ldr	r2, [sp, #280]	; 0x118
   11a02:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   11a04:	f89d 1117 	ldrb.w	r1, [sp, #279]	; 0x117
   11a08:	9816      	ldr	r0, [sp, #88]	; 0x58
   11a0a:	f7ff faf0 	bl	10fee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11a0e:	9005      	str	r0, [sp, #20]
   11a10:	e02e      	b.n	11a70 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f6>
   11a12:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
   11a14:	f88d 010b 	strb.w	r0, [sp, #267]	; 0x10b
   11a18:	f24f 40ec 	movw	r0, #62700	; 0xf4ec
   11a1c:	f2c0 0001 	movt	r0, #1
   11a20:	6800      	ldr	r0, [r0, #0]
   11a22:	9043      	str	r0, [sp, #268]	; 0x10c
   11a24:	2001      	movs	r0, #1
   11a26:	9044      	str	r0, [sp, #272]	; 0x110
   11a28:	9a43      	ldr	r2, [sp, #268]	; 0x10c
   11a2a:	9b44      	ldr	r3, [sp, #272]	; 0x110
   11a2c:	f89d 110b 	ldrb.w	r1, [sp, #267]	; 0x10b
   11a30:	9816      	ldr	r0, [sp, #88]	; 0x58
   11a32:	f7ff fadc 	bl	10fee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11a36:	9004      	str	r0, [sp, #16]
   11a38:	e7ff      	b.n	11a3a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5c0>
   11a3a:	9804      	ldr	r0, [sp, #16]
   11a3c:	f000 0001 	and.w	r0, r0, #1
   11a40:	f7fd fbf7 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11a44:	f88d 010a 	strb.w	r0, [sp, #266]	; 0x10a
   11a48:	e7ff      	b.n	11a4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5d0>
   11a4a:	f89d 010a 	ldrb.w	r0, [sp, #266]	; 0x10a
   11a4e:	07c1      	lsls	r1, r0, #31
   11a50:	2900      	cmp	r1, #0
   11a52:	d001      	beq.n	11a58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5de>
   11a54:	e7ff      	b.n	11a56 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5dc>
   11a56:	e001      	b.n	11a5c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e2>
        if self.rgb {
   11a58:	e024      	b.n	11aa4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
   11a5a:	defe      	udf	#254	; 0xfe
   11a5c:	f001 fb0e 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11a60:	e7ff      	b.n	11a62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e8>
   11a62:	f003 ff6e 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11a66:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11a6a:	e7ff      	b.n	11a6c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f2>
   11a6c:	e7ff      	b.n	11a6e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
   11a6e:	e543      	b.n	114f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
   11a70:	9805      	ldr	r0, [sp, #20]
   11a72:	f000 0001 	and.w	r0, r0, #1
   11a76:	f7fd fbdc 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11a7a:	f88d 0116 	strb.w	r0, [sp, #278]	; 0x116
   11a7e:	e7ff      	b.n	11a80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x606>
   11a80:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
   11a84:	07c1      	lsls	r1, r0, #31
   11a86:	2900      	cmp	r1, #0
   11a88:	d001      	beq.n	11a8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x614>
   11a8a:	e7ff      	b.n	11a8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x612>
   11a8c:	e001      	b.n	11a92 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x618>
        if self.rgb {
   11a8e:	e009      	b.n	11aa4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
   11a90:	defe      	udf	#254	; 0xfe
   11a92:	f001 faf3 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11a96:	e7ff      	b.n	11a98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x61e>
   11a98:	f003 ff53 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11a9c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11aa0:	e7ff      	b.n	11aa2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x628>
   11aa2:	e7e4      	b.n	11a6e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
   11aa4:	203a      	movs	r0, #58	; 0x3a
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
   11aa6:	f88d 0123 	strb.w	r0, [sp, #291]	; 0x123
   11aaa:	f24f 40fc 	movw	r0, #62716	; 0xf4fc
   11aae:	f2c0 0001 	movt	r0, #1
   11ab2:	6800      	ldr	r0, [r0, #0]
   11ab4:	9049      	str	r0, [sp, #292]	; 0x124
   11ab6:	2001      	movs	r0, #1
   11ab8:	904a      	str	r0, [sp, #296]	; 0x128
   11aba:	9a49      	ldr	r2, [sp, #292]	; 0x124
   11abc:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   11abe:	f89d 1123 	ldrb.w	r1, [sp, #291]	; 0x123
   11ac2:	9816      	ldr	r0, [sp, #88]	; 0x58
   11ac4:	f7ff fa93 	bl	10fee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11ac8:	9003      	str	r0, [sp, #12]
   11aca:	e7ff      	b.n	11acc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x652>
   11acc:	9803      	ldr	r0, [sp, #12]
   11ace:	f000 0001 	and.w	r0, r0, #1
   11ad2:	f7fd fbae 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11ad6:	f88d 0122 	strb.w	r0, [sp, #290]	; 0x122
   11ada:	e7ff      	b.n	11adc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x662>
   11adc:	f89d 0122 	ldrb.w	r0, [sp, #290]	; 0x122
   11ae0:	07c1      	lsls	r1, r0, #31
   11ae2:	2900      	cmp	r1, #0
   11ae4:	d001      	beq.n	11aea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x670>
   11ae6:	e7ff      	b.n	11ae8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x66e>
   11ae8:	e010      	b.n	11b0c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x692>
   11aea:	2029      	movs	r0, #41	; 0x29
        self.write_command(Instruction::DISPON, None)?;
   11aec:	f88d 012f 	strb.w	r0, [sp, #303]	; 0x12f
   11af0:	2000      	movs	r0, #0
   11af2:	904d      	str	r0, [sp, #308]	; 0x134
   11af4:	904c      	str	r0, [sp, #304]	; 0x130
   11af6:	904c      	str	r0, [sp, #304]	; 0x130
   11af8:	9a4c      	ldr	r2, [sp, #304]	; 0x130
   11afa:	9b4d      	ldr	r3, [sp, #308]	; 0x134
   11afc:	f89d 112f 	ldrb.w	r1, [sp, #303]	; 0x12f
   11b00:	9816      	ldr	r0, [sp, #88]	; 0x58
   11b02:	f7ff fa74 	bl	10fee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11b06:	9002      	str	r0, [sp, #8]
   11b08:	e009      	b.n	11b1e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a4>
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
   11b0a:	defe      	udf	#254	; 0xfe
   11b0c:	f001 fab6 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11b10:	e7ff      	b.n	11b12 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x698>
   11b12:	f003 ff16 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11b16:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11b1a:	e7ff      	b.n	11b1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a2>
   11b1c:	e4ec      	b.n	114f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::DISPON, None)?;
   11b1e:	9802      	ldr	r0, [sp, #8]
   11b20:	f000 0001 	and.w	r0, r0, #1
   11b24:	f7fd fb85 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11b28:	f88d 012e 	strb.w	r0, [sp, #302]	; 0x12e
   11b2c:	e7ff      	b.n	11b2e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6b4>
   11b2e:	f89d 012e 	ldrb.w	r0, [sp, #302]	; 0x12e
   11b32:	07c1      	lsls	r1, r0, #31
   11b34:	2900      	cmp	r1, #0
   11b36:	d001      	beq.n	11b3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c2>
   11b38:	e7ff      	b.n	11b3a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c0>
   11b3a:	e005      	b.n	11b48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6ce>
   11b3c:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
   11b3e:	9817      	ldr	r0, [sp, #92]	; 0x5c
   11b40:	f7fe f8a8 	bl	fc94 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   11b44:	e009      	b.n	11b5a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e0>
        self.write_command(Instruction::DISPON, None)?;
   11b46:	defe      	udf	#254	; 0xfe
   11b48:	f001 fa98 	bl	1307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11b4c:	e7ff      	b.n	11b4e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6d4>
   11b4e:	f003 fef8 	bl	15942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11b52:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11b56:	e7ff      	b.n	11b58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6de>
   11b58:	e4ce      	b.n	114f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   11b5a:	f002 fa38 	bl	13fce <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   11b5e:	9001      	str	r0, [sp, #4]
   11b60:	e7ff      	b.n	11b62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e8>
   11b62:	f24f 310c 	movw	r1, #62220	; 0xf30c
   11b66:	f2c0 0101 	movt	r1, #1
   11b6a:	f24f 5300 	movw	r3, #62720	; 0xf500
   11b6e:	f2c0 0301 	movt	r3, #1
   11b72:	220e      	movs	r2, #14
   11b74:	9801      	ldr	r0, [sp, #4]
   11b76:	f7fd fb23 	bl	f1c0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   11b7a:	e7ff      	b.n	11b7c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x702>
   11b7c:	2000      	movs	r0, #0
        Ok(())
   11b7e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    }
   11b82:	e4b9      	b.n	114f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>

00011b84 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>:
    fn to_u8(&self) -> Option<u8> {
   11b84:	b580      	push	{r7, lr}
   11b86:	b08a      	sub	sp, #40	; 0x28
   11b88:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
   11b8a:	f000 fe3c 	bl	12806 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>
   11b8e:	9307      	str	r3, [sp, #28]
   11b90:	9206      	str	r2, [sp, #24]
   11b92:	9105      	str	r1, [sp, #20]
   11b94:	9004      	str	r0, [sp, #16]
   11b96:	e7ff      	b.n	11b98 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x14>
   11b98:	a804      	add	r0, sp, #16
   11b9a:	f003 f813 	bl	14bc4 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
   11b9e:	9003      	str	r0, [sp, #12]
   11ba0:	e7ff      	b.n	11ba2 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x1e>
   11ba2:	9803      	ldr	r0, [sp, #12]
   11ba4:	f003 f8e1 	bl	14d6a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
   11ba8:	9002      	str	r0, [sp, #8]
   11baa:	9101      	str	r1, [sp, #4]
   11bac:	e7ff      	b.n	11bae <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x2a>
    }
   11bae:	9802      	ldr	r0, [sp, #8]
   11bb0:	f000 0001 	and.w	r0, r0, #1
   11bb4:	9901      	ldr	r1, [sp, #4]
   11bb6:	b00a      	add	sp, #40	; 0x28
   11bb8:	bd80      	pop	{r7, pc}

00011bba <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>:
   11bba:	b082      	sub	sp, #8
   11bbc:	4601      	mov	r1, r0
   11bbe:	f8ad 0004 	strh.w	r0, [sp, #4]
   11bc2:	ba00      	rev	r0, r0
   11bc4:	0c00      	lsrs	r0, r0, #16
   11bc6:	f8ad 0006 	strh.w	r0, [sp, #6]
   11bca:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   11bce:	9000      	str	r0, [sp, #0]
   11bd0:	e7ff      	b.n	11bd2 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E+0x18>
   11bd2:	9800      	ldr	r0, [sp, #0]
   11bd4:	b002      	add	sp, #8
   11bd6:	4770      	bx	lr

00011bd8 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>:
   11bd8:	b580      	push	{r7, lr}
   11bda:	b084      	sub	sp, #16
   11bdc:	4601      	mov	r1, r0
   11bde:	f8ad 000e 	strh.w	r0, [sp, #14]
   11be2:	9102      	str	r1, [sp, #8]
   11be4:	f7ff ffe9 	bl	11bba <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>
   11be8:	9001      	str	r0, [sp, #4]
   11bea:	e7ff      	b.n	11bec <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E+0x14>
   11bec:	9801      	ldr	r0, [sp, #4]
   11bee:	b004      	add	sp, #16
   11bf0:	bd80      	pop	{r7, pc}

00011bf2 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>:
   11bf2:	b580      	push	{r7, lr}
   11bf4:	b084      	sub	sp, #16
   11bf6:	9002      	str	r0, [sp, #8]
   11bf8:	9802      	ldr	r0, [sp, #8]
   11bfa:	f002 ff47 	bl	14a8c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>
   11bfe:	9001      	str	r0, [sp, #4]
   11c00:	9100      	str	r1, [sp, #0]
   11c02:	e7ff      	b.n	11c04 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE+0x12>
   11c04:	9801      	ldr	r0, [sp, #4]
   11c06:	f000 0001 	and.w	r0, r0, #1
   11c0a:	9900      	ldr	r1, [sp, #0]
   11c0c:	b004      	add	sp, #16
   11c0e:	bd80      	pop	{r7, pc}

00011c10 <_ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE>:
   11c10:	b081      	sub	sp, #4
   11c12:	9000      	str	r0, [sp, #0]
   11c14:	b001      	add	sp, #4
   11c16:	4770      	bx	lr

00011c18 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>:
   11c18:	b580      	push	{r7, lr}
   11c1a:	b082      	sub	sp, #8
   11c1c:	9001      	str	r0, [sp, #4]
   11c1e:	f000 f83e 	bl	11c9e <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   11c22:	e7ff      	b.n	11c24 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE+0xc>
   11c24:	b002      	add	sp, #8
   11c26:	bd80      	pop	{r7, pc}

00011c28 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>:
   11c28:	b580      	push	{r7, lr}
   11c2a:	b082      	sub	sp, #8
   11c2c:	9001      	str	r0, [sp, #4]
   11c2e:	6801      	ldr	r1, [r0, #0]
   11c30:	2900      	cmp	r1, #0
   11c32:	9000      	str	r0, [sp, #0]
   11c34:	d102      	bne.n	11c3c <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x14>
   11c36:	e7ff      	b.n	11c38 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>
   11c38:	b002      	add	sp, #8
   11c3a:	bd80      	pop	{r7, pc}
   11c3c:	9800      	ldr	r0, [sp, #0]
   11c3e:	3004      	adds	r0, #4
   11c40:	f7ff ffea 	bl	11c18 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>
   11c44:	e7f8      	b.n	11c38 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>

00011c46 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>:
   11c46:	b580      	push	{r7, lr}
   11c48:	b082      	sub	sp, #8
   11c4a:	9001      	str	r0, [sp, #4]
   11c4c:	f003 f908 	bl	14e60 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>
   11c50:	e7ff      	b.n	11c52 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE+0xc>
   11c52:	b002      	add	sp, #8
   11c54:	bd80      	pop	{r7, pc}

00011c56 <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>:
   11c56:	b580      	push	{r7, lr}
   11c58:	b082      	sub	sp, #8
   11c5a:	9001      	str	r0, [sp, #4]
   11c5c:	3024      	adds	r0, #36	; 0x24
   11c5e:	f000 f81e 	bl	11c9e <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   11c62:	e7ff      	b.n	11c64 <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E+0xe>
   11c64:	b002      	add	sp, #8
   11c66:	bd80      	pop	{r7, pc}

00011c68 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>:
   11c68:	b580      	push	{r7, lr}
   11c6a:	b082      	sub	sp, #8
   11c6c:	9001      	str	r0, [sp, #4]
   11c6e:	9000      	str	r0, [sp, #0]
   11c70:	f7ff fff1 	bl	11c56 <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>
   11c74:	e001      	b.n	11c7a <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0x12>
   11c76:	b002      	add	sp, #8
   11c78:	bd80      	pop	{r7, pc}
   11c7a:	9800      	ldr	r0, [sp, #0]
   11c7c:	3094      	adds	r0, #148	; 0x94
   11c7e:	f7ff ffe2 	bl	11c46 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
   11c82:	e7f8      	b.n	11c76 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0xe>

00011c84 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>:
   11c84:	b580      	push	{r7, lr}
   11c86:	b082      	sub	sp, #8
   11c88:	9001      	str	r0, [sp, #4]
   11c8a:	9000      	str	r0, [sp, #0]
   11c8c:	f003 f910 	bl	14eb0 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>
   11c90:	e001      	b.n	11c96 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0x12>
   11c92:	b002      	add	sp, #8
   11c94:	bd80      	pop	{r7, pc}
   11c96:	9800      	ldr	r0, [sp, #0]
   11c98:	f7ff ffd5 	bl	11c46 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
   11c9c:	e7f9      	b.n	11c92 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0xe>

00011c9e <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>:
   11c9e:	b580      	push	{r7, lr}
   11ca0:	b082      	sub	sp, #8
   11ca2:	9001      	str	r0, [sp, #4]
   11ca4:	f003 f8cc 	bl	14e40 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>
   11ca8:	e7ff      	b.n	11caa <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E+0xc>
   11caa:	b002      	add	sp, #8
   11cac:	bd80      	pop	{r7, pc}

00011cae <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>:
   11cae:	b580      	push	{r7, lr}
   11cb0:	b082      	sub	sp, #8
   11cb2:	9001      	str	r0, [sp, #4]
   11cb4:	6801      	ldr	r1, [r0, #0]
   11cb6:	2900      	cmp	r1, #0
   11cb8:	9000      	str	r0, [sp, #0]
   11cba:	d102      	bne.n	11cc2 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x14>
   11cbc:	e7ff      	b.n	11cbe <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>
   11cbe:	b002      	add	sp, #8
   11cc0:	bd80      	pop	{r7, pc}
   11cc2:	9800      	ldr	r0, [sp, #0]
   11cc4:	3004      	adds	r0, #4
   11cc6:	f000 f805 	bl	11cd4 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>
   11cca:	e7f8      	b.n	11cbe <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>

00011ccc <_ZN4core3ptr13drop_in_place17hef1277471241eea2E>:
   11ccc:	b081      	sub	sp, #4
   11cce:	9000      	str	r0, [sp, #0]
   11cd0:	b001      	add	sp, #4
   11cd2:	4770      	bx	lr

00011cd4 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>:
   11cd4:	b580      	push	{r7, lr}
   11cd6:	b082      	sub	sp, #8
   11cd8:	9001      	str	r0, [sp, #4]
   11cda:	f7ff ffb4 	bl	11c46 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
   11cde:	e7ff      	b.n	11ce0 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE+0xc>
   11ce0:	b002      	add	sp, #8
   11ce2:	bd80      	pop	{r7, pc}

00011ce4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>:
   11ce4:	b089      	sub	sp, #36	; 0x24
   11ce6:	9005      	str	r0, [sp, #20]
   11ce8:	9106      	str	r1, [sp, #24]
   11cea:	9107      	str	r1, [sp, #28]
   11cec:	9907      	ldr	r1, [sp, #28]
   11cee:	9002      	str	r0, [sp, #8]
   11cf0:	9101      	str	r1, [sp, #4]
   11cf2:	e7ff      	b.n	11cf4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x10>
   11cf4:	9802      	ldr	r0, [sp, #8]
   11cf6:	9008      	str	r0, [sp, #32]
   11cf8:	9908      	ldr	r1, [sp, #32]
   11cfa:	9100      	str	r1, [sp, #0]
   11cfc:	e7ff      	b.n	11cfe <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x1a>
   11cfe:	9800      	ldr	r0, [sp, #0]
   11d00:	9003      	str	r0, [sp, #12]
   11d02:	9901      	ldr	r1, [sp, #4]
   11d04:	9104      	str	r1, [sp, #16]
   11d06:	9803      	ldr	r0, [sp, #12]
   11d08:	9904      	ldr	r1, [sp, #16]
   11d0a:	b009      	add	sp, #36	; 0x24
   11d0c:	4770      	bx	lr

00011d0e <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   11d0e:	b580      	push	{r7, lr}
        (&self).into_iter()
   11d10:	f000 f814 	bl	11d3c <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>
   11d14:	e7ff      	b.n	11d16 <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E+0x8>
    }
   11d16:	bd80      	pop	{r7, pc}

00011d18 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>:
    fn fill(mut self, color: Option<C>) -> Self {
   11d18:	b5b0      	push	{r4, r5, r7, lr}
   11d1a:	b081      	sub	sp, #4
   11d1c:	469c      	mov	ip, r3
   11d1e:	4696      	mov	lr, r2
   11d20:	f8ad 2000 	strh.w	r2, [sp]
   11d24:	f8ad 3002 	strh.w	r3, [sp, #2]
        self.style.fill_color = color;
   11d28:	820a      	strh	r2, [r1, #16]
   11d2a:	824b      	strh	r3, [r1, #18]
        self
   11d2c:	c91c      	ldmia	r1!, {r2, r3, r4}
   11d2e:	c01c      	stmia	r0!, {r2, r3, r4}
   11d30:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
   11d34:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
    }
   11d38:	b001      	add	sp, #4
   11d3a:	bdb0      	pop	{r4, r5, r7, pc}

00011d3c <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   11d3c:	b570      	push	{r4, r5, r6, lr}
   11d3e:	b08e      	sub	sp, #56	; 0x38
   11d40:	910d      	str	r1, [sp, #52]	; 0x34
        RectangleIterator {
            top_left: self.top_left,
   11d42:	680a      	ldr	r2, [r1, #0]
   11d44:	684b      	ldr	r3, [r1, #4]
            bottom_right: self.bottom_right,
   11d46:	f8d1 c008 	ldr.w	ip, [r1, #8]
   11d4a:	f8d1 e00c 	ldr.w	lr, [r1, #12]
            style: self.style,
   11d4e:	8b0c      	ldrh	r4, [r1, #24]
   11d50:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
   11d54:	690c      	ldr	r4, [r1, #16]
   11d56:	694d      	ldr	r5, [r1, #20]
   11d58:	950b      	str	r5, [sp, #44]	; 0x2c
   11d5a:	940a      	str	r4, [sp, #40]	; 0x28
   11d5c:	2400      	movs	r4, #0
            x: self.top_left[0],
   11d5e:	9009      	str	r0, [sp, #36]	; 0x24
   11d60:	4608      	mov	r0, r1
   11d62:	9108      	str	r1, [sp, #32]
   11d64:	4621      	mov	r1, r4
   11d66:	9207      	str	r2, [sp, #28]
   11d68:	9306      	str	r3, [sp, #24]
   11d6a:	f8cd c014 	str.w	ip, [sp, #20]
   11d6e:	f8cd e010 	str.w	lr, [sp, #16]
   11d72:	f7fc fac9 	bl	e308 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11d76:	9003      	str	r0, [sp, #12]
   11d78:	e7ff      	b.n	11d7a <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x3e>
   11d7a:	9803      	ldr	r0, [sp, #12]
   11d7c:	6801      	ldr	r1, [r0, #0]
   11d7e:	2201      	movs	r2, #1
            y: self.top_left[1],
   11d80:	9808      	ldr	r0, [sp, #32]
   11d82:	9102      	str	r1, [sp, #8]
   11d84:	4611      	mov	r1, r2
   11d86:	f7fc fabf 	bl	e308 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11d8a:	9001      	str	r0, [sp, #4]
   11d8c:	e7ff      	b.n	11d8e <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x52>
   11d8e:	9801      	ldr	r0, [sp, #4]
   11d90:	6801      	ldr	r1, [r0, #0]
        RectangleIterator {
   11d92:	9a07      	ldr	r2, [sp, #28]
   11d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11d96:	601a      	str	r2, [r3, #0]
   11d98:	f8dd c018 	ldr.w	ip, [sp, #24]
   11d9c:	f8c3 c004 	str.w	ip, [r3, #4]
   11da0:	f8dd e014 	ldr.w	lr, [sp, #20]
   11da4:	f8c3 e008 	str.w	lr, [r3, #8]
   11da8:	9c04      	ldr	r4, [sp, #16]
   11daa:	60dc      	str	r4, [r3, #12]
   11dac:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   11db0:	841d      	strh	r5, [r3, #32]
   11db2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   11db4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   11db6:	61de      	str	r6, [r3, #28]
   11db8:	619d      	str	r5, [r3, #24]
   11dba:	9d02      	ldr	r5, [sp, #8]
   11dbc:	611d      	str	r5, [r3, #16]
   11dbe:	6159      	str	r1, [r3, #20]
        }
    }
   11dc0:	b00e      	add	sp, #56	; 0x38
   11dc2:	bd70      	pop	{r4, r5, r6, pc}

00011dc4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>:
where
    C: PixelColor,
{
    type Item = Pixel<C>;

    fn next(&mut self) -> Option<Self::Item> {
   11dc4:	b510      	push	{r4, lr}
   11dc6:	b0d2      	sub	sp, #328	; 0x148
   11dc8:	914f      	str	r1, [sp, #316]	; 0x13c
   11dca:	2200      	movs	r2, #0
        // If entire object is off the top left of the screen or has no border or fill colour,
        // don't render anything
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   11dcc:	902a      	str	r0, [sp, #168]	; 0xa8
   11dce:	4608      	mov	r0, r1
   11dd0:	9129      	str	r1, [sp, #164]	; 0xa4
   11dd2:	4611      	mov	r1, r2
   11dd4:	f7fc fa98 	bl	e308 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11dd8:	9028      	str	r0, [sp, #160]	; 0xa0
   11dda:	e03c      	b.n	11e56 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x92>
   11ddc:	2001      	movs	r0, #1
   11dde:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   11de2:	e009      	b.n	11df8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
   11de4:	2000      	movs	r0, #0
   11de6:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   11dea:	e005      	b.n	11df8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   11dec:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11dee:	301c      	adds	r0, #28
   11df0:	f002 ff79 	bl	14ce6 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   11df4:	9027      	str	r0, [sp, #156]	; 0x9c
   11df6:	e06c      	b.n	11ed2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x10e>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   11df8:	f89d 00af 	ldrb.w	r0, [sp, #175]	; 0xaf
   11dfc:	07c0      	lsls	r0, r0, #31
   11dfe:	2800      	cmp	r0, #0
   11e00:	d172      	bne.n	11ee8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x124>
   11e02:	e070      	b.n	11ee6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x122>
   11e04:	2001      	movs	r0, #1
   11e06:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   11e0a:	e00a      	b.n	11e22 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
   11e0c:	2000      	movs	r0, #0
   11e0e:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   11e12:	e006      	b.n	11e22 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   11e14:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11e16:	3008      	adds	r0, #8
   11e18:	2100      	movs	r1, #0
   11e1a:	f7fc fa75 	bl	e308 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11e1e:	9026      	str	r0, [sp, #152]	; 0x98
   11e20:	e038      	b.n	11e94 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xd0>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   11e22:	f89d 00b0 	ldrb.w	r0, [sp, #176]	; 0xb0
   11e26:	07c0      	lsls	r0, r0, #31
   11e28:	2800      	cmp	r0, #0
   11e2a:	d1d7      	bne.n	11ddc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   11e2c:	e7de      	b.n	11dec <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x28>
   11e2e:	2001      	movs	r0, #1
   11e30:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   11e34:	e009      	b.n	11e4a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   11e36:	2000      	movs	r0, #0
   11e38:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   11e3c:	e005      	b.n	11e4a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   11e3e:	2101      	movs	r1, #1
   11e40:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11e42:	f7fc fa61 	bl	e308 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11e46:	9025      	str	r0, [sp, #148]	; 0x94
   11e48:	e00a      	b.n	11e60 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x9c>
   11e4a:	f89d 00b1 	ldrb.w	r0, [sp, #177]	; 0xb1
   11e4e:	07c0      	lsls	r0, r0, #31
   11e50:	2800      	cmp	r0, #0
   11e52:	d1df      	bne.n	11e14 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x50>
   11e54:	e7da      	b.n	11e0c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
   11e56:	9828      	ldr	r0, [sp, #160]	; 0xa0
   11e58:	6801      	ldr	r1, [r0, #0]
   11e5a:	2900      	cmp	r1, #0
   11e5c:	d4e7      	bmi.n	11e2e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   11e5e:	e7ee      	b.n	11e3e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x7a>
   11e60:	9825      	ldr	r0, [sp, #148]	; 0x94
   11e62:	6801      	ldr	r1, [r0, #0]
   11e64:	2900      	cmp	r1, #0
   11e66:	d4e2      	bmi.n	11e2e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   11e68:	e7e5      	b.n	11e36 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x72>
   11e6a:	2001      	movs	r0, #1
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   11e6c:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   11e70:	e00a      	b.n	11e88 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   11e72:	2000      	movs	r0, #0
   11e74:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   11e78:	e006      	b.n	11e88 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   11e7a:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11e7c:	3008      	adds	r0, #8
   11e7e:	2101      	movs	r1, #1
   11e80:	f7fc fa42 	bl	e308 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11e84:	9024      	str	r0, [sp, #144]	; 0x90
   11e86:	e00a      	b.n	11e9e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xda>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   11e88:	f89d 00b2 	ldrb.w	r0, [sp, #178]	; 0xb2
   11e8c:	07c0      	lsls	r0, r0, #31
   11e8e:	2800      	cmp	r0, #0
   11e90:	d1b8      	bne.n	11e04 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40>
   11e92:	e7bb      	b.n	11e0c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   11e94:	9826      	ldr	r0, [sp, #152]	; 0x98
   11e96:	6801      	ldr	r1, [r0, #0]
   11e98:	2900      	cmp	r1, #0
   11e9a:	d4e6      	bmi.n	11e6a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   11e9c:	e7ed      	b.n	11e7a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xb6>
   11e9e:	9824      	ldr	r0, [sp, #144]	; 0x90
   11ea0:	6801      	ldr	r1, [r0, #0]
   11ea2:	2900      	cmp	r1, #0
   11ea4:	d4e1      	bmi.n	11e6a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   11ea6:	e7e4      	b.n	11e72 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xae>
   11ea8:	2001      	movs	r0, #1
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   11eaa:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   11eae:	e009      	b.n	11ec4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   11eb0:	2000      	movs	r0, #0
   11eb2:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   11eb6:	e005      	b.n	11ec4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   11eb8:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11eba:	3018      	adds	r0, #24
   11ebc:	f002 ff13 	bl	14ce6 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   11ec0:	9023      	str	r0, [sp, #140]	; 0x8c
   11ec2:	e00b      	b.n	11edc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x118>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   11ec4:	f89d 00b3 	ldrb.w	r0, [sp, #179]	; 0xb3
   11ec8:	07c0      	lsls	r0, r0, #31
   11eca:	2800      	cmp	r0, #0
   11ecc:	f47f af86 	bne.w	11ddc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   11ed0:	e788      	b.n	11de4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20>
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   11ed2:	9827      	ldr	r0, [sp, #156]	; 0x9c
   11ed4:	07c1      	lsls	r1, r0, #31
   11ed6:	2900      	cmp	r1, #0
   11ed8:	d1ee      	bne.n	11eb8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xf4>
   11eda:	e7e9      	b.n	11eb0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
   11edc:	9823      	ldr	r0, [sp, #140]	; 0x8c
   11ede:	07c1      	lsls	r1, r0, #31
   11ee0:	2900      	cmp	r1, #0
   11ee2:	d1e1      	bne.n	11ea8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xe4>
   11ee4:	e7e4      	b.n	11eb0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
        {
            return None;
        }

        let pixel = loop {
   11ee6:	e012      	b.n	11f0e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
   11ee8:	2000      	movs	r0, #0
            return None;
   11eea:	992a      	ldr	r1, [sp, #168]	; 0xa8
   11eec:	6008      	str	r0, [r1, #0]
   11eee:	e7ff      	b.n	11ef0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                break out;
            }
        };

        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
    }
   11ef0:	b052      	add	sp, #328	; 0x148
   11ef2:	bd10      	pop	{r4, pc}
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   11ef4:	982d      	ldr	r0, [sp, #180]	; 0xb4
   11ef6:	992e      	ldr	r1, [sp, #184]	; 0xb8
   11ef8:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   11efa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   11efc:	934d      	str	r3, [sp, #308]	; 0x134
   11efe:	924c      	str	r2, [sp, #304]	; 0x130
   11f00:	914b      	str	r1, [sp, #300]	; 0x12c
   11f02:	904a      	str	r0, [sp, #296]	; 0x128
   11f04:	a94a      	add	r1, sp, #296	; 0x128
   11f06:	982a      	ldr	r0, [sp, #168]	; 0xa8
   11f08:	f002 fdff 	bl	14b0a <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>
   11f0c:	e201      	b.n	12312 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x54e>
   11f0e:	2000      	movs	r0, #0
            let mut out = None;
   11f10:	9031      	str	r0, [sp, #196]	; 0xc4
            if self.y > self.bottom_right[1] {
   11f12:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11f14:	6941      	ldr	r1, [r0, #20]
   11f16:	3008      	adds	r0, #8
   11f18:	2201      	movs	r2, #1
   11f1a:	9122      	str	r1, [sp, #136]	; 0x88
   11f1c:	4611      	mov	r1, r2
   11f1e:	f7fc f9f3 	bl	e308 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11f22:	9021      	str	r0, [sp, #132]	; 0x84
   11f24:	e7ff      	b.n	11f26 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x162>
   11f26:	9821      	ldr	r0, [sp, #132]	; 0x84
   11f28:	6801      	ldr	r1, [r0, #0]
   11f2a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   11f2c:	428a      	cmp	r2, r1
   11f2e:	dc13      	bgt.n	11f58 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x194>
   11f30:	e7ff      	b.n	11f32 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x16e>
            let border_width = self.style.stroke_width as i32;
   11f32:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11f34:	f890 1020 	ldrb.w	r1, [r0, #32]
   11f38:	460a      	mov	r2, r1
   11f3a:	9150      	str	r1, [sp, #320]	; 0x140
            let tl = self.top_left;
   11f3c:	6801      	ldr	r1, [r0, #0]
   11f3e:	6843      	ldr	r3, [r0, #4]
   11f40:	9135      	str	r1, [sp, #212]	; 0xd4
   11f42:	9336      	str	r3, [sp, #216]	; 0xd8
            let br = self.bottom_right;
   11f44:	6881      	ldr	r1, [r0, #8]
   11f46:	68c3      	ldr	r3, [r0, #12]
   11f48:	9137      	str	r1, [sp, #220]	; 0xdc
   11f4a:	9338      	str	r3, [sp, #224]	; 0xe0
            if self.x >= 0 && self.y >= 0 {
   11f4c:	6901      	ldr	r1, [r0, #16]
   11f4e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   11f52:	9220      	str	r2, [sp, #128]	; 0x80
   11f54:	dc0b      	bgt.n	11f6e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1aa>
   11f56:	e006      	b.n	11f66 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   11f58:	2000      	movs	r0, #0
                break None;
   11f5a:	902d      	str	r0, [sp, #180]	; 0xb4
   11f5c:	e7ca      	b.n	11ef4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
   11f5e:	2001      	movs	r0, #1
            if self.x >= 0 && self.y >= 0 {
   11f60:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   11f64:	e009      	b.n	11f7a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   11f66:	2000      	movs	r0, #0
   11f68:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   11f6c:	e005      	b.n	11f7a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   11f6e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11f70:	6941      	ldr	r1, [r0, #20]
   11f72:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   11f76:	dcf2      	bgt.n	11f5e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x19a>
   11f78:	e7f5      	b.n	11f66 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   11f7a:	f89d 00e7 	ldrb.w	r0, [sp, #231]	; 0xe7
   11f7e:	07c0      	lsls	r0, r0, #31
   11f80:	2800      	cmp	r0, #0
   11f82:	f000 8182 	beq.w	1228a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
   11f86:	e7ff      	b.n	11f88 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1c4>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   11f88:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11f8a:	6941      	ldr	r1, [r0, #20]
   11f8c:	a835      	add	r0, sp, #212	; 0xd4
   11f8e:	2201      	movs	r2, #1
   11f90:	911f      	str	r1, [sp, #124]	; 0x7c
   11f92:	4611      	mov	r1, r2
   11f94:	f7fc f9b8 	bl	e308 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11f98:	901e      	str	r0, [sp, #120]	; 0x78
   11f9a:	e074      	b.n	12086 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2c2>
   11f9c:	2001      	movs	r0, #1
                if (
   11f9e:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   11fa2:	e009      	b.n	11fb8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
   11fa4:	2000      	movs	r0, #0
   11fa6:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   11faa:	e005      	b.n	11fb8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
                ) && self.style.stroke_color.is_some()
   11fac:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11fae:	301c      	adds	r0, #28
   11fb0:	f002 fec9 	bl	14d46 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   11fb4:	901d      	str	r0, [sp, #116]	; 0x74
   11fb6:	e104      	b.n	121c2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3fe>
                if (
   11fb8:	f89d 00e8 	ldrb.w	r0, [sp, #232]	; 0xe8
   11fbc:	07c0      	lsls	r0, r0, #31
   11fbe:	2800      	cmp	r0, #0
   11fc0:	f040 810a 	bne.w	121d8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x414>
   11fc4:	e103      	b.n	121ce <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40a>
   11fc6:	2001      	movs	r0, #1
   11fc8:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   11fcc:	e00d      	b.n	11fea <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
   11fce:	2000      	movs	r0, #0
   11fd0:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   11fd4:	e009      	b.n	11fea <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   11fd6:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11fd8:	6901      	ldr	r1, [r0, #16]
   11fda:	a837      	add	r0, sp, #220	; 0xdc
   11fdc:	2200      	movs	r2, #0
   11fde:	911c      	str	r1, [sp, #112]	; 0x70
   11fe0:	4611      	mov	r1, r2
   11fe2:	f7fc f991 	bl	e308 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11fe6:	901b      	str	r0, [sp, #108]	; 0x6c
   11fe8:	e0d7      	b.n	1219a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3d6>
                if (
   11fea:	f89d 00e9 	ldrb.w	r0, [sp, #233]	; 0xe9
   11fee:	07c0      	lsls	r0, r0, #31
   11ff0:	2800      	cmp	r0, #0
   11ff2:	d1db      	bne.n	11fac <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e8>
   11ff4:	e7d6      	b.n	11fa4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
   11ff6:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   11ff8:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   11ffc:	e00d      	b.n	1201a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
   11ffe:	2000      	movs	r0, #0
   12000:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   12004:	e009      	b.n	1201a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   12006:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12008:	6901      	ldr	r1, [r0, #16]
   1200a:	a835      	add	r0, sp, #212	; 0xd4
   1200c:	2200      	movs	r2, #0
   1200e:	911a      	str	r1, [sp, #104]	; 0x68
   12010:	4611      	mov	r1, r2
   12012:	f7fc f979 	bl	e308 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   12016:	9019      	str	r0, [sp, #100]	; 0x64
   12018:	e090      	b.n	1213c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x378>
                if (
   1201a:	f89d 00ea 	ldrb.w	r0, [sp, #234]	; 0xea
   1201e:	07c0      	lsls	r0, r0, #31
   12020:	2800      	cmp	r0, #0
   12022:	d1d0      	bne.n	11fc6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   12024:	e7d7      	b.n	11fd6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x212>
   12026:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   12028:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   1202c:	e00d      	b.n	1204a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
   1202e:	2000      	movs	r0, #0
   12030:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   12034:	e009      	b.n	1204a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   12036:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12038:	6941      	ldr	r1, [r0, #20]
   1203a:	a837      	add	r0, sp, #220	; 0xdc
   1203c:	2201      	movs	r2, #1
   1203e:	9118      	str	r1, [sp, #96]	; 0x60
   12040:	4611      	mov	r1, r2
   12042:	f7fc f961 	bl	e308 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   12046:	9017      	str	r0, [sp, #92]	; 0x5c
   12048:	e04b      	b.n	120e2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x31e>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   1204a:	f89d 00eb 	ldrb.w	r0, [sp, #235]	; 0xeb
   1204e:	07c0      	lsls	r0, r0, #31
   12050:	2800      	cmp	r0, #0
   12052:	d1d0      	bne.n	11ff6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   12054:	e7d7      	b.n	12006 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x242>
   12056:	2001      	movs	r0, #1
   12058:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   1205c:	e00d      	b.n	1207a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   1205e:	2000      	movs	r0, #0
   12060:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   12064:	e009      	b.n	1207a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   12066:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12068:	6941      	ldr	r1, [r0, #20]
   1206a:	a835      	add	r0, sp, #212	; 0xd4
   1206c:	2201      	movs	r2, #1
   1206e:	9116      	str	r1, [sp, #88]	; 0x58
   12070:	4611      	mov	r1, r2
   12072:	f7fc f949 	bl	e308 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   12076:	9015      	str	r0, [sp, #84]	; 0x54
   12078:	e00b      	b.n	12092 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ce>
   1207a:	f89d 00ec 	ldrb.w	r0, [sp, #236]	; 0xec
   1207e:	07c0      	lsls	r0, r0, #31
   12080:	2800      	cmp	r0, #0
   12082:	d1d0      	bne.n	12026 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   12084:	e7d7      	b.n	12036 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x272>
   12086:	981e      	ldr	r0, [sp, #120]	; 0x78
   12088:	6801      	ldr	r1, [r0, #0]
   1208a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1208c:	428a      	cmp	r2, r1
   1208e:	daea      	bge.n	12066 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2a2>
   12090:	e7e5      	b.n	1205e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   12092:	9815      	ldr	r0, [sp, #84]	; 0x54
   12094:	6801      	ldr	r1, [r0, #0]
   12096:	9a20      	ldr	r2, [sp, #128]	; 0x80
   12098:	188b      	adds	r3, r1, r2
   1209a:	469c      	mov	ip, r3
   1209c:	428b      	cmp	r3, r1
   1209e:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
   120a2:	f180 8137 	bvs.w	12314 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x550>
   120a6:	e7ff      	b.n	120a8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2e4>
   120a8:	9816      	ldr	r0, [sp, #88]	; 0x58
   120aa:	9914      	ldr	r1, [sp, #80]	; 0x50
   120ac:	4288      	cmp	r0, r1
   120ae:	dbd2      	blt.n	12056 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x292>
   120b0:	e7d5      	b.n	1205e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   120b2:	2001      	movs	r0, #1
                || (self.y <= br[1] && self.y > br[1] - border_width)
   120b4:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   120b8:	e00d      	b.n	120d6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   120ba:	2000      	movs	r0, #0
   120bc:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   120c0:	e009      	b.n	120d6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   120c2:	9829      	ldr	r0, [sp, #164]	; 0xa4
   120c4:	6941      	ldr	r1, [r0, #20]
   120c6:	a837      	add	r0, sp, #220	; 0xdc
   120c8:	2201      	movs	r2, #1
   120ca:	9113      	str	r1, [sp, #76]	; 0x4c
   120cc:	4611      	mov	r1, r2
   120ce:	f7fc f91b 	bl	e308 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   120d2:	9012      	str	r0, [sp, #72]	; 0x48
   120d4:	e00b      	b.n	120ee <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x32a>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   120d6:	f89d 00ed 	ldrb.w	r0, [sp, #237]	; 0xed
   120da:	07c0      	lsls	r0, r0, #31
   120dc:	2800      	cmp	r0, #0
   120de:	d1a2      	bne.n	12026 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   120e0:	e7a5      	b.n	1202e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x26a>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   120e2:	9817      	ldr	r0, [sp, #92]	; 0x5c
   120e4:	6801      	ldr	r1, [r0, #0]
   120e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
   120e8:	428a      	cmp	r2, r1
   120ea:	ddea      	ble.n	120c2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2fe>
   120ec:	e7e5      	b.n	120ba <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   120ee:	9812      	ldr	r0, [sp, #72]	; 0x48
   120f0:	6801      	ldr	r1, [r0, #0]
   120f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   120f4:	1a8b      	subs	r3, r1, r2
   120f6:	4291      	cmp	r1, r2
   120f8:	9311      	str	r3, [sp, #68]	; 0x44
   120fa:	f180 8117 	bvs.w	1232c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x568>
   120fe:	e7ff      	b.n	12100 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x33c>
   12100:	9813      	ldr	r0, [sp, #76]	; 0x4c
   12102:	9911      	ldr	r1, [sp, #68]	; 0x44
   12104:	4288      	cmp	r0, r1
   12106:	dcd4      	bgt.n	120b2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ee>
   12108:	e7d7      	b.n	120ba <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   1210a:	2001      	movs	r0, #1
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   1210c:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   12110:	e00d      	b.n	1212e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   12112:	2000      	movs	r0, #0
   12114:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   12118:	e009      	b.n	1212e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   1211a:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1211c:	6901      	ldr	r1, [r0, #16]
   1211e:	a835      	add	r0, sp, #212	; 0xd4
   12120:	2200      	movs	r2, #0
   12122:	9110      	str	r1, [sp, #64]	; 0x40
   12124:	4611      	mov	r1, r2
   12126:	f7fc f8ef 	bl	e308 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1212a:	900f      	str	r0, [sp, #60]	; 0x3c
   1212c:	e00c      	b.n	12148 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x384>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   1212e:	f89d 00ee 	ldrb.w	r0, [sp, #238]	; 0xee
   12132:	07c0      	lsls	r0, r0, #31
   12134:	2800      	cmp	r0, #0
   12136:	f47f af5e 	bne.w	11ff6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   1213a:	e760      	b.n	11ffe <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x23a>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   1213c:	9819      	ldr	r0, [sp, #100]	; 0x64
   1213e:	6801      	ldr	r1, [r0, #0]
   12140:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   12142:	428a      	cmp	r2, r1
   12144:	dae9      	bge.n	1211a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x356>
   12146:	e7e4      	b.n	12112 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   12148:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1214a:	6801      	ldr	r1, [r0, #0]
   1214c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1214e:	188b      	adds	r3, r1, r2
   12150:	469c      	mov	ip, r3
   12152:	428b      	cmp	r3, r1
   12154:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   12158:	f180 80f4 	bvs.w	12344 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x580>
   1215c:	e7ff      	b.n	1215e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x39a>
   1215e:	9810      	ldr	r0, [sp, #64]	; 0x40
   12160:	990e      	ldr	r1, [sp, #56]	; 0x38
   12162:	4288      	cmp	r0, r1
   12164:	dbd1      	blt.n	1210a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x346>
   12166:	e7d4      	b.n	12112 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   12168:	2001      	movs	r0, #1
                || (self.x <= br[0] && self.x > br[0] - border_width)
   1216a:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   1216e:	e00d      	b.n	1218c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   12170:	2000      	movs	r0, #0
   12172:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   12176:	e009      	b.n	1218c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   12178:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1217a:	6901      	ldr	r1, [r0, #16]
   1217c:	a837      	add	r0, sp, #220	; 0xdc
   1217e:	2200      	movs	r2, #0
   12180:	910d      	str	r1, [sp, #52]	; 0x34
   12182:	4611      	mov	r1, r2
   12184:	f7fc f8c0 	bl	e308 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   12188:	900c      	str	r0, [sp, #48]	; 0x30
   1218a:	e00c      	b.n	121a6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3e2>
                if (
   1218c:	f89d 00ef 	ldrb.w	r0, [sp, #239]	; 0xef
   12190:	07c0      	lsls	r0, r0, #31
   12192:	2800      	cmp	r0, #0
   12194:	f47f af17 	bne.w	11fc6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   12198:	e719      	b.n	11fce <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20a>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   1219a:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1219c:	6801      	ldr	r1, [r0, #0]
   1219e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   121a0:	428a      	cmp	r2, r1
   121a2:	dde9      	ble.n	12178 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3b4>
   121a4:	e7e4      	b.n	12170 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
   121a6:	980c      	ldr	r0, [sp, #48]	; 0x30
   121a8:	6801      	ldr	r1, [r0, #0]
   121aa:	9a20      	ldr	r2, [sp, #128]	; 0x80
   121ac:	1a8b      	subs	r3, r1, r2
   121ae:	4291      	cmp	r1, r2
   121b0:	930b      	str	r3, [sp, #44]	; 0x2c
   121b2:	f180 80d3 	bvs.w	1235c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x598>
   121b6:	e7ff      	b.n	121b8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3f4>
   121b8:	980d      	ldr	r0, [sp, #52]	; 0x34
   121ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
   121bc:	4288      	cmp	r0, r1
   121be:	dcd3      	bgt.n	12168 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3a4>
   121c0:	e7d6      	b.n	12170 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
                if (
   121c2:	981d      	ldr	r0, [sp, #116]	; 0x74
   121c4:	07c1      	lsls	r1, r0, #31
   121c6:	2900      	cmp	r1, #0
   121c8:	f47f aee8 	bne.w	11f9c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1d8>
   121cc:	e6ea      	b.n	11fa4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
                else if let Some(fill) = self.style.fill_color {
   121ce:	9829      	ldr	r0, [sp, #164]	; 0xa4
   121d0:	8b01      	ldrh	r1, [r0, #24]
   121d2:	2901      	cmp	r1, #1
   121d4:	d03b      	beq.n	1224e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48a>
   121d6:	e057      	b.n	12288 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                        self.x,
   121d8:	9829      	ldr	r0, [sp, #164]	; 0xa4
   121da:	6901      	ldr	r1, [r0, #16]
                        self.y,
   121dc:	6942      	ldr	r2, [r0, #20]
                        self.style.stroke_color.expect("Expected stroke"),
   121de:	8bc3      	ldrh	r3, [r0, #30]
   121e0:	8b80      	ldrh	r0, [r0, #28]
   121e2:	f24f 6c14 	movw	ip, #62996	; 0xf614
   121e6:	f2c0 0c01 	movt	ip, #1
   121ea:	46ee      	mov	lr, sp
   121ec:	f8ce c000 	str.w	ip, [lr]
   121f0:	f24f 6c04 	movw	ip, #62980	; 0xf604
   121f4:	f2c0 0c01 	movt	ip, #1
   121f8:	f04f 0e0f 	mov.w	lr, #15
   121fc:	910a      	str	r1, [sp, #40]	; 0x28
   121fe:	4619      	mov	r1, r3
   12200:	9209      	str	r2, [sp, #36]	; 0x24
   12202:	4662      	mov	r2, ip
   12204:	4673      	mov	r3, lr
   12206:	f002 fcf2 	bl	14bee <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>
   1220a:	9008      	str	r0, [sp, #32]
   1220c:	e7ff      	b.n	1220e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x44a>
                    out = Some((
   1220e:	980a      	ldr	r0, [sp, #40]	; 0x28
   12210:	9040      	str	r0, [sp, #256]	; 0x100
   12212:	9909      	ldr	r1, [sp, #36]	; 0x24
   12214:	9141      	str	r1, [sp, #260]	; 0x104
   12216:	9a08      	ldr	r2, [sp, #32]
   12218:	f8ad 2108 	strh.w	r2, [sp, #264]	; 0x108
   1221c:	9b40      	ldr	r3, [sp, #256]	; 0x100
   1221e:	f8dd c104 	ldr.w	ip, [sp, #260]	; 0x104
   12222:	f8dd e108 	ldr.w	lr, [sp, #264]	; 0x108
   12226:	f8cd e0fc 	str.w	lr, [sp, #252]	; 0xfc
   1222a:	f8cd c0f8 	str.w	ip, [sp, #248]	; 0xf8
   1222e:	933d      	str	r3, [sp, #244]	; 0xf4
   12230:	2301      	movs	r3, #1
   12232:	933c      	str	r3, [sp, #240]	; 0xf0
   12234:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
   12236:	f8dd c0f4 	ldr.w	ip, [sp, #244]	; 0xf4
   1223a:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
   1223e:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
   12240:	9434      	str	r4, [sp, #208]	; 0xd0
   12242:	f8cd e0cc 	str.w	lr, [sp, #204]	; 0xcc
   12246:	f8cd c0c8 	str.w	ip, [sp, #200]	; 0xc8
   1224a:	9331      	str	r3, [sp, #196]	; 0xc4
                if (
   1224c:	e01c      	b.n	12288 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                else if let Some(fill) = self.style.fill_color {
   1224e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12250:	8b41      	ldrh	r1, [r0, #26]
   12252:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
                    out = Some((self.x, self.y, fill));
   12256:	6902      	ldr	r2, [r0, #16]
   12258:	6943      	ldr	r3, [r0, #20]
   1225a:	9247      	str	r2, [sp, #284]	; 0x11c
   1225c:	9348      	str	r3, [sp, #288]	; 0x120
   1225e:	f8ad 1124 	strh.w	r1, [sp, #292]	; 0x124
   12262:	9947      	ldr	r1, [sp, #284]	; 0x11c
   12264:	9a48      	ldr	r2, [sp, #288]	; 0x120
   12266:	9b49      	ldr	r3, [sp, #292]	; 0x124
   12268:	9346      	str	r3, [sp, #280]	; 0x118
   1226a:	9245      	str	r2, [sp, #276]	; 0x114
   1226c:	9144      	str	r1, [sp, #272]	; 0x110
   1226e:	2101      	movs	r1, #1
   12270:	9143      	str	r1, [sp, #268]	; 0x10c
   12272:	9943      	ldr	r1, [sp, #268]	; 0x10c
   12274:	9a44      	ldr	r2, [sp, #272]	; 0x110
   12276:	9b45      	ldr	r3, [sp, #276]	; 0x114
   12278:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   1227c:	f8cd c0d0 	str.w	ip, [sp, #208]	; 0xd0
   12280:	9333      	str	r3, [sp, #204]	; 0xcc
   12282:	9232      	str	r2, [sp, #200]	; 0xc8
   12284:	9131      	str	r1, [sp, #196]	; 0xc4
                else if let Some(fill) = self.style.fill_color {
   12286:	e7ff      	b.n	12288 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
            if self.x >= 0 && self.y >= 0 {
   12288:	e7ff      	b.n	1228a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
            self.x += 1;
   1228a:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1228c:	6901      	ldr	r1, [r0, #16]
   1228e:	1c4a      	adds	r2, r1, #1
   12290:	4613      	mov	r3, r2
   12292:	428a      	cmp	r2, r1
   12294:	9307      	str	r3, [sp, #28]
   12296:	d66d      	bvs.n	12374 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5b0>
   12298:	e7ff      	b.n	1229a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4d6>
   1229a:	9807      	ldr	r0, [sp, #28]
   1229c:	9929      	ldr	r1, [sp, #164]	; 0xa4
   1229e:	6108      	str	r0, [r1, #16]
            if self.x > self.bottom_right[0] {
   122a0:	690a      	ldr	r2, [r1, #16]
   122a2:	f101 0008 	add.w	r0, r1, #8
   122a6:	2100      	movs	r1, #0
   122a8:	9206      	str	r2, [sp, #24]
   122aa:	f7fc f82d 	bl	e308 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   122ae:	9005      	str	r0, [sp, #20]
   122b0:	e7ff      	b.n	122b2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4ee>
   122b2:	9805      	ldr	r0, [sp, #20]
   122b4:	6801      	ldr	r1, [r0, #0]
   122b6:	9a06      	ldr	r2, [sp, #24]
   122b8:	428a      	cmp	r2, r1
   122ba:	dd16      	ble.n	122ea <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   122bc:	e7ff      	b.n	122be <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4fa>
   122be:	2100      	movs	r1, #0
                self.x = self.top_left[0];
   122c0:	9829      	ldr	r0, [sp, #164]	; 0xa4
   122c2:	f7fc f821 	bl	e308 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   122c6:	9004      	str	r0, [sp, #16]
   122c8:	e7ff      	b.n	122ca <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x506>
   122ca:	9804      	ldr	r0, [sp, #16]
   122cc:	6801      	ldr	r1, [r0, #0]
   122ce:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   122d0:	6111      	str	r1, [r2, #16]
                self.y += 1;
   122d2:	6951      	ldr	r1, [r2, #20]
   122d4:	1c4b      	adds	r3, r1, #1
   122d6:	469c      	mov	ip, r3
   122d8:	428b      	cmp	r3, r1
   122da:	f8cd c00c 	str.w	ip, [sp, #12]
   122de:	d655      	bvs.n	1238c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5c8>
   122e0:	e7ff      	b.n	122e2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x51e>
   122e2:	9803      	ldr	r0, [sp, #12]
   122e4:	9929      	ldr	r1, [sp, #164]	; 0xa4
   122e6:	6148      	str	r0, [r1, #20]
            if self.x > self.bottom_right[0] {
   122e8:	e7ff      	b.n	122ea <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   122ea:	a831      	add	r0, sp, #196	; 0xc4
            if out.is_some() {
   122ec:	f002 fd19 	bl	14d22 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>
   122f0:	9002      	str	r0, [sp, #8]
   122f2:	e7ff      	b.n	122f4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x530>
   122f4:	9802      	ldr	r0, [sp, #8]
   122f6:	07c1      	lsls	r1, r0, #31
   122f8:	2900      	cmp	r1, #0
   122fa:	d101      	bne.n	12300 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53c>
   122fc:	e7ff      	b.n	122fe <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53a>
        let pixel = loop {
   122fe:	e606      	b.n	11f0e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
                break out;
   12300:	9831      	ldr	r0, [sp, #196]	; 0xc4
   12302:	9932      	ldr	r1, [sp, #200]	; 0xc8
   12304:	9a33      	ldr	r2, [sp, #204]	; 0xcc
   12306:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   12308:	9330      	str	r3, [sp, #192]	; 0xc0
   1230a:	922f      	str	r2, [sp, #188]	; 0xbc
   1230c:	912e      	str	r1, [sp, #184]	; 0xb8
   1230e:	902d      	str	r0, [sp, #180]	; 0xb4
   12310:	e5f0      	b.n	11ef4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
    }
   12312:	e5ed      	b.n	11ef0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   12314:	f24f 5090 	movw	r0, #62864	; 0xf590
   12318:	f2c0 0001 	movt	r0, #1
   1231c:	f24f 5280 	movw	r2, #62848	; 0xf580
   12320:	f2c0 0201 	movt	r2, #1
   12324:	211c      	movs	r1, #28
   12326:	f004 fb65 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1232a:	defe      	udf	#254	; 0xfe
                || (self.y <= br[1] && self.y > br[1] - border_width)
   1232c:	f24f 50c0 	movw	r0, #62912	; 0xf5c0
   12330:	f2c0 0001 	movt	r0, #1
   12334:	f24f 52ac 	movw	r2, #62892	; 0xf5ac
   12338:	f2c0 0201 	movt	r2, #1
   1233c:	2121      	movs	r1, #33	; 0x21
   1233e:	f004 fb59 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12342:	defe      	udf	#254	; 0xfe
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   12344:	f24f 5090 	movw	r0, #62864	; 0xf590
   12348:	f2c0 0001 	movt	r0, #1
   1234c:	f24f 52e4 	movw	r2, #62948	; 0xf5e4
   12350:	f2c0 0201 	movt	r2, #1
   12354:	211c      	movs	r1, #28
   12356:	f004 fb4d 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1235a:	defe      	udf	#254	; 0xfe
                || (self.x <= br[0] && self.x > br[0] - border_width)
   1235c:	f24f 50c0 	movw	r0, #62912	; 0xf5c0
   12360:	f2c0 0001 	movt	r0, #1
   12364:	f24f 52f4 	movw	r2, #62964	; 0xf5f4
   12368:	f2c0 0201 	movt	r2, #1
   1236c:	2121      	movs	r1, #33	; 0x21
   1236e:	f004 fb41 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12372:	defe      	udf	#254	; 0xfe
            self.x += 1;
   12374:	f24f 5090 	movw	r0, #62864	; 0xf590
   12378:	f2c0 0001 	movt	r0, #1
   1237c:	f24f 6224 	movw	r2, #63012	; 0xf624
   12380:	f2c0 0201 	movt	r2, #1
   12384:	211c      	movs	r1, #28
   12386:	f004 fb35 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1238a:	defe      	udf	#254	; 0xfe
                self.y += 1;
   1238c:	f24f 5090 	movw	r0, #62864	; 0xf590
   12390:	f2c0 0001 	movt	r0, #1
   12394:	f24f 6234 	movw	r2, #63028	; 0xf634
   12398:	f2c0 0201 	movt	r2, #1
   1239c:	211c      	movs	r1, #28
   1239e:	f004 fb29 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   123a2:	defe      	udf	#254	; 0xfe

000123a4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>:
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   123a4:	b580      	push	{r7, lr}
   123a6:	b08a      	sub	sp, #40	; 0x28
   123a8:	680a      	ldr	r2, [r1, #0]
   123aa:	9207      	str	r2, [sp, #28]
   123ac:	684b      	ldr	r3, [r1, #4]
   123ae:	9308      	str	r3, [sp, #32]
   123b0:	8909      	ldrh	r1, [r1, #8]
   123b2:	468c      	mov	ip, r1
   123b4:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
   123b8:	9005      	str	r0, [sp, #20]
   123ba:	4610      	mov	r0, r2
   123bc:	4619      	mov	r1, r3
   123be:	f8cd c010 	str.w	ip, [sp, #16]
   123c2:	f7fb ff98 	bl	e2f6 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
   123c6:	9003      	str	r0, [sp, #12]
   123c8:	9102      	str	r1, [sp, #8]
   123ca:	e7ff      	b.n	123cc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x28>
   123cc:	9803      	ldr	r0, [sp, #12]
   123ce:	9902      	ldr	r1, [sp, #8]
   123d0:	f7fb ffe3 	bl	e39a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>
   123d4:	9001      	str	r0, [sp, #4]
   123d6:	9100      	str	r1, [sp, #0]
   123d8:	e7ff      	b.n	123da <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x36>
   123da:	9801      	ldr	r0, [sp, #4]
   123dc:	9905      	ldr	r1, [sp, #20]
   123de:	6008      	str	r0, [r1, #0]
   123e0:	9a00      	ldr	r2, [sp, #0]
   123e2:	604a      	str	r2, [r1, #4]
   123e4:	9b04      	ldr	r3, [sp, #16]
   123e6:	810b      	strh	r3, [r1, #8]
   123e8:	b00a      	add	sp, #40	; 0x28
   123ea:	bd80      	pop	{r7, pc}

000123ec <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>:
    pub fn new(top_left: Coord, bottom_right: Coord) -> Self {
   123ec:	b510      	push	{r4, lr}
   123ee:	b08c      	sub	sp, #48	; 0x30
   123f0:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   123f4:	9108      	str	r1, [sp, #32]
   123f6:	9209      	str	r2, [sp, #36]	; 0x24
   123f8:	930a      	str	r3, [sp, #40]	; 0x28
   123fa:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   123fe:	f10d 0e14 	add.w	lr, sp, #20
            style: Style::default(),
   12402:	9004      	str	r0, [sp, #16]
   12404:	4670      	mov	r0, lr
   12406:	9303      	str	r3, [sp, #12]
   12408:	9202      	str	r2, [sp, #8]
   1240a:	9101      	str	r1, [sp, #4]
   1240c:	f8cd c000 	str.w	ip, [sp]
   12410:	f000 f818 	bl	12444 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>
   12414:	e7ff      	b.n	12416 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E+0x2a>
        Rectangle {
   12416:	9801      	ldr	r0, [sp, #4]
   12418:	9904      	ldr	r1, [sp, #16]
   1241a:	6008      	str	r0, [r1, #0]
   1241c:	9a02      	ldr	r2, [sp, #8]
   1241e:	604a      	str	r2, [r1, #4]
   12420:	9b03      	ldr	r3, [sp, #12]
   12422:	608b      	str	r3, [r1, #8]
   12424:	f8dd c000 	ldr.w	ip, [sp]
   12428:	f8c1 c00c 	str.w	ip, [r1, #12]
   1242c:	f8bd e01c 	ldrh.w	lr, [sp, #28]
   12430:	f8a1 e018 	strh.w	lr, [r1, #24]
   12434:	f8dd e014 	ldr.w	lr, [sp, #20]
   12438:	9c06      	ldr	r4, [sp, #24]
   1243a:	614c      	str	r4, [r1, #20]
   1243c:	f8c1 e010 	str.w	lr, [r1, #16]
    }
   12440:	b00c      	add	sp, #48	; 0x30
   12442:	bd10      	pop	{r4, pc}

00012444 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>:

impl<P> Default for Style<P>
where
    P: PixelColor,
{
    fn default() -> Self {
   12444:	b082      	sub	sp, #8
   12446:	2100      	movs	r1, #0
        Self {
            fill_color: None,
   12448:	f8ad 1000 	strh.w	r1, [sp]
            stroke_color: None,
   1244c:	f8ad 1004 	strh.w	r1, [sp, #4]
        Self {
   12450:	f8bd 1000 	ldrh.w	r1, [sp]
   12454:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   12458:	8001      	strh	r1, [r0, #0]
   1245a:	8042      	strh	r2, [r0, #2]
   1245c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   12460:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   12464:	8081      	strh	r1, [r0, #4]
   12466:	80c2      	strh	r2, [r0, #6]
   12468:	2101      	movs	r1, #1
   1246a:	7201      	strb	r1, [r0, #8]
            stroke_width: 1,
        }
    }
   1246c:	b002      	add	sp, #8
   1246e:	4770      	bx	lr

00012470 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>:
use num_derive::ToPrimitive;

/// ST7735 instructions.
#[derive(ToPrimitive)]
   12470:	b08a      	sub	sp, #40	; 0x28
   12472:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Instruction {
   12474:	7800      	ldrb	r0, [r0, #0]
   12476:	9001      	str	r0, [sp, #4]
   12478:	9901      	ldr	r1, [sp, #4]
   1247a:	e8df f011 	tbh	[pc, r1, lsl #1]
   1247e:	0103      	.short	0x0103
   12480:	01020107 	.word	0x01020107
   12484:	010c0102 	.word	0x010c0102
   12488:	01020102 	.word	0x01020102
   1248c:	01020102 	.word	0x01020102
   12490:	01020111 	.word	0x01020111
   12494:	01020102 	.word	0x01020102
   12498:	01020102 	.word	0x01020102
   1249c:	01160102 	.word	0x01160102
   124a0:	0120011b 	.word	0x0120011b
   124a4:	01020125 	.word	0x01020125
   124a8:	01020102 	.word	0x01020102
   124ac:	01020102 	.word	0x01020102
   124b0:	01020102 	.word	0x01020102
   124b4:	01020102 	.word	0x01020102
   124b8:	01020102 	.word	0x01020102
   124bc:	012a0102 	.word	0x012a0102
   124c0:	0102012f 	.word	0x0102012f
   124c4:	01020102 	.word	0x01020102
   124c8:	01020102 	.word	0x01020102
   124cc:	01340102 	.word	0x01340102
   124d0:	013e0139 	.word	0x013e0139
   124d4:	01480143 	.word	0x01480143
   124d8:	014d0102 	.word	0x014d0102
   124dc:	01520102 	.word	0x01520102
   124e0:	01020102 	.word	0x01020102
   124e4:	01020102 	.word	0x01020102
   124e8:	015c0102 	.word	0x015c0102
   124ec:	01020102 	.word	0x01020102
   124f0:	01570102 	.word	0x01570102
   124f4:	01020102 	.word	0x01020102
   124f8:	01020102 	.word	0x01020102
   124fc:	01020102 	.word	0x01020102
   12500:	01020102 	.word	0x01020102
   12504:	01020102 	.word	0x01020102
   12508:	01020102 	.word	0x01020102
   1250c:	01020102 	.word	0x01020102
   12510:	01020102 	.word	0x01020102
   12514:	01020102 	.word	0x01020102
   12518:	01020102 	.word	0x01020102
   1251c:	01020102 	.word	0x01020102
   12520:	01020102 	.word	0x01020102
   12524:	01020102 	.word	0x01020102
   12528:	01020102 	.word	0x01020102
   1252c:	01020102 	.word	0x01020102
   12530:	01020102 	.word	0x01020102
   12534:	01020102 	.word	0x01020102
   12538:	01020102 	.word	0x01020102
   1253c:	01020102 	.word	0x01020102
   12540:	01020102 	.word	0x01020102
   12544:	01020102 	.word	0x01020102
   12548:	01020102 	.word	0x01020102
   1254c:	01020102 	.word	0x01020102
   12550:	01020102 	.word	0x01020102
   12554:	01020102 	.word	0x01020102
   12558:	01020102 	.word	0x01020102
   1255c:	01020102 	.word	0x01020102
   12560:	01020102 	.word	0x01020102
   12564:	01020102 	.word	0x01020102
   12568:	01020102 	.word	0x01020102
   1256c:	01020102 	.word	0x01020102
   12570:	01020102 	.word	0x01020102
   12574:	01020102 	.word	0x01020102
   12578:	01020102 	.word	0x01020102
   1257c:	01020102 	.word	0x01020102
   12580:	01020102 	.word	0x01020102
   12584:	01020102 	.word	0x01020102
   12588:	01020102 	.word	0x01020102
   1258c:	01020102 	.word	0x01020102
   12590:	01020102 	.word	0x01020102
   12594:	01020102 	.word	0x01020102
   12598:	01020102 	.word	0x01020102
   1259c:	01020102 	.word	0x01020102
   125a0:	01020102 	.word	0x01020102
   125a4:	01020102 	.word	0x01020102
   125a8:	01020102 	.word	0x01020102
   125ac:	01020102 	.word	0x01020102
   125b0:	01020102 	.word	0x01020102
   125b4:	01020102 	.word	0x01020102
   125b8:	01020102 	.word	0x01020102
   125bc:	01020102 	.word	0x01020102
   125c0:	01020102 	.word	0x01020102
   125c4:	01020102 	.word	0x01020102
   125c8:	01020102 	.word	0x01020102
   125cc:	01020102 	.word	0x01020102
   125d0:	01020102 	.word	0x01020102
   125d4:	01020102 	.word	0x01020102
   125d8:	01020102 	.word	0x01020102
   125dc:	01020102 	.word	0x01020102
   125e0:	01660161 	.word	0x01660161
   125e4:	0170016b 	.word	0x0170016b
   125e8:	01750102 	.word	0x01750102
   125ec:	01020102 	.word	0x01020102
   125f0:	01020102 	.word	0x01020102
   125f4:	01020102 	.word	0x01020102
   125f8:	01020102 	.word	0x01020102
   125fc:	017a0102 	.word	0x017a0102
   12600:	0184017f 	.word	0x0184017f
   12604:	018e0189 	.word	0x018e0189
   12608:	01020193 	.word	0x01020193
   1260c:	01020102 	.word	0x01020102
   12610:	01020102 	.word	0x01020102
   12614:	01020102 	.word	0x01020102
   12618:	01020102 	.word	0x01020102
   1261c:	01020102 	.word	0x01020102
   12620:	01020102 	.word	0x01020102
   12624:	01020102 	.word	0x01020102
   12628:	01020102 	.word	0x01020102
   1262c:	01020102 	.word	0x01020102
   12630:	01980102 	.word	0x01980102
   12634:	01a2019d 	.word	0x01a2019d
   12638:	010201a7 	.word	0x010201a7
   1263c:	01b10102 	.word	0x01b10102
   12640:	010200fd 	.word	0x010200fd
   12644:	01020102 	.word	0x01020102
   12648:	01020102 	.word	0x01020102
   1264c:	01020102 	.word	0x01020102
   12650:	01020102 	.word	0x01020102
   12654:	01020102 	.word	0x01020102
   12658:	01020102 	.word	0x01020102
   1265c:	01020102 	.word	0x01020102
   12660:	01020102 	.word	0x01020102
   12664:	01020102 	.word	0x01020102
   12668:	01020102 	.word	0x01020102
   1266c:	01020102 	.word	0x01020102
   12670:	01020102 	.word	0x01020102
   12674:	01ac0102 	.word	0x01ac0102
   12678:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
   1267a:	9007      	str	r0, [sp, #28]
   1267c:	20e1      	movs	r0, #225	; 0xe1
   1267e:	9006      	str	r0, [sp, #24]
   12680:	e0b3      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12682:	defe      	udf	#254	; 0xfe
   12684:	2000      	movs	r0, #0
   12686:	9007      	str	r0, [sp, #28]
   12688:	9006      	str	r0, [sp, #24]
   1268a:	e0ae      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1268c:	2000      	movs	r0, #0
   1268e:	9007      	str	r0, [sp, #28]
   12690:	2001      	movs	r0, #1
   12692:	9006      	str	r0, [sp, #24]
   12694:	e0a9      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12696:	2000      	movs	r0, #0
   12698:	9007      	str	r0, [sp, #28]
   1269a:	2004      	movs	r0, #4
   1269c:	9006      	str	r0, [sp, #24]
   1269e:	e0a4      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126a0:	2000      	movs	r0, #0
   126a2:	9007      	str	r0, [sp, #28]
   126a4:	2009      	movs	r0, #9
   126a6:	9006      	str	r0, [sp, #24]
   126a8:	e09f      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126aa:	2000      	movs	r0, #0
   126ac:	9007      	str	r0, [sp, #28]
   126ae:	2010      	movs	r0, #16
   126b0:	9006      	str	r0, [sp, #24]
   126b2:	e09a      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126b4:	2000      	movs	r0, #0
   126b6:	9007      	str	r0, [sp, #28]
   126b8:	2011      	movs	r0, #17
   126ba:	9006      	str	r0, [sp, #24]
   126bc:	e095      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126be:	2000      	movs	r0, #0
   126c0:	9007      	str	r0, [sp, #28]
   126c2:	2012      	movs	r0, #18
   126c4:	9006      	str	r0, [sp, #24]
   126c6:	e090      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126c8:	2000      	movs	r0, #0
   126ca:	9007      	str	r0, [sp, #28]
   126cc:	2013      	movs	r0, #19
   126ce:	9006      	str	r0, [sp, #24]
   126d0:	e08b      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126d2:	2000      	movs	r0, #0
   126d4:	9007      	str	r0, [sp, #28]
   126d6:	2020      	movs	r0, #32
   126d8:	9006      	str	r0, [sp, #24]
   126da:	e086      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126dc:	2000      	movs	r0, #0
   126de:	9007      	str	r0, [sp, #28]
   126e0:	2021      	movs	r0, #33	; 0x21
   126e2:	9006      	str	r0, [sp, #24]
   126e4:	e081      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126e6:	2000      	movs	r0, #0
   126e8:	9007      	str	r0, [sp, #28]
   126ea:	2028      	movs	r0, #40	; 0x28
   126ec:	9006      	str	r0, [sp, #24]
   126ee:	e07c      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126f0:	2000      	movs	r0, #0
   126f2:	9007      	str	r0, [sp, #28]
   126f4:	2029      	movs	r0, #41	; 0x29
   126f6:	9006      	str	r0, [sp, #24]
   126f8:	e077      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126fa:	2000      	movs	r0, #0
   126fc:	9007      	str	r0, [sp, #28]
   126fe:	202a      	movs	r0, #42	; 0x2a
   12700:	9006      	str	r0, [sp, #24]
   12702:	e072      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12704:	2000      	movs	r0, #0
   12706:	9007      	str	r0, [sp, #28]
   12708:	202b      	movs	r0, #43	; 0x2b
   1270a:	9006      	str	r0, [sp, #24]
   1270c:	e06d      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1270e:	2000      	movs	r0, #0
   12710:	9007      	str	r0, [sp, #28]
   12712:	202c      	movs	r0, #44	; 0x2c
   12714:	9006      	str	r0, [sp, #24]
   12716:	e068      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12718:	2000      	movs	r0, #0
   1271a:	9007      	str	r0, [sp, #28]
   1271c:	202e      	movs	r0, #46	; 0x2e
   1271e:	9006      	str	r0, [sp, #24]
   12720:	e063      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12722:	2000      	movs	r0, #0
   12724:	9007      	str	r0, [sp, #28]
   12726:	2030      	movs	r0, #48	; 0x30
   12728:	9006      	str	r0, [sp, #24]
   1272a:	e05e      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1272c:	2000      	movs	r0, #0
   1272e:	9007      	str	r0, [sp, #28]
   12730:	203a      	movs	r0, #58	; 0x3a
   12732:	9006      	str	r0, [sp, #24]
   12734:	e059      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12736:	2000      	movs	r0, #0
   12738:	9007      	str	r0, [sp, #28]
   1273a:	2036      	movs	r0, #54	; 0x36
   1273c:	9006      	str	r0, [sp, #24]
   1273e:	e054      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12740:	2000      	movs	r0, #0
   12742:	9007      	str	r0, [sp, #28]
   12744:	20b1      	movs	r0, #177	; 0xb1
   12746:	9006      	str	r0, [sp, #24]
   12748:	e04f      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1274a:	2000      	movs	r0, #0
   1274c:	9007      	str	r0, [sp, #28]
   1274e:	20b2      	movs	r0, #178	; 0xb2
   12750:	9006      	str	r0, [sp, #24]
   12752:	e04a      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12754:	2000      	movs	r0, #0
   12756:	9007      	str	r0, [sp, #28]
   12758:	20b3      	movs	r0, #179	; 0xb3
   1275a:	9006      	str	r0, [sp, #24]
   1275c:	e045      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1275e:	2000      	movs	r0, #0
   12760:	9007      	str	r0, [sp, #28]
   12762:	20b4      	movs	r0, #180	; 0xb4
   12764:	9006      	str	r0, [sp, #24]
   12766:	e040      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12768:	2000      	movs	r0, #0
   1276a:	9007      	str	r0, [sp, #28]
   1276c:	20b6      	movs	r0, #182	; 0xb6
   1276e:	9006      	str	r0, [sp, #24]
   12770:	e03b      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12772:	2000      	movs	r0, #0
   12774:	9007      	str	r0, [sp, #28]
   12776:	20c0      	movs	r0, #192	; 0xc0
   12778:	9006      	str	r0, [sp, #24]
   1277a:	e036      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1277c:	2000      	movs	r0, #0
   1277e:	9007      	str	r0, [sp, #28]
   12780:	20c1      	movs	r0, #193	; 0xc1
   12782:	9006      	str	r0, [sp, #24]
   12784:	e031      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12786:	2000      	movs	r0, #0
   12788:	9007      	str	r0, [sp, #28]
   1278a:	20c2      	movs	r0, #194	; 0xc2
   1278c:	9006      	str	r0, [sp, #24]
   1278e:	e02c      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12790:	2000      	movs	r0, #0
   12792:	9007      	str	r0, [sp, #28]
   12794:	20c3      	movs	r0, #195	; 0xc3
   12796:	9006      	str	r0, [sp, #24]
   12798:	e027      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1279a:	2000      	movs	r0, #0
   1279c:	9007      	str	r0, [sp, #28]
   1279e:	20c4      	movs	r0, #196	; 0xc4
   127a0:	9006      	str	r0, [sp, #24]
   127a2:	e022      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127a4:	2000      	movs	r0, #0
   127a6:	9007      	str	r0, [sp, #28]
   127a8:	20c5      	movs	r0, #197	; 0xc5
   127aa:	9006      	str	r0, [sp, #24]
   127ac:	e01d      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127ae:	2000      	movs	r0, #0
   127b0:	9007      	str	r0, [sp, #28]
   127b2:	20da      	movs	r0, #218	; 0xda
   127b4:	9006      	str	r0, [sp, #24]
   127b6:	e018      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127b8:	2000      	movs	r0, #0
   127ba:	9007      	str	r0, [sp, #28]
   127bc:	20db      	movs	r0, #219	; 0xdb
   127be:	9006      	str	r0, [sp, #24]
   127c0:	e013      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127c2:	2000      	movs	r0, #0
   127c4:	9007      	str	r0, [sp, #28]
   127c6:	20dc      	movs	r0, #220	; 0xdc
   127c8:	9006      	str	r0, [sp, #24]
   127ca:	e00e      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127cc:	2000      	movs	r0, #0
   127ce:	9007      	str	r0, [sp, #28]
   127d0:	20dd      	movs	r0, #221	; 0xdd
   127d2:	9006      	str	r0, [sp, #24]
   127d4:	e009      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127d6:	2000      	movs	r0, #0
   127d8:	9007      	str	r0, [sp, #28]
   127da:	20fc      	movs	r0, #252	; 0xfc
   127dc:	9006      	str	r0, [sp, #24]
   127de:	e004      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127e0:	2000      	movs	r0, #0
   127e2:	9007      	str	r0, [sp, #28]
   127e4:	20e0      	movs	r0, #224	; 0xe0
   127e6:	9006      	str	r0, [sp, #24]
   127e8:	e7ff      	b.n	127ea <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127ea:	9806      	ldr	r0, [sp, #24]
   127ec:	9907      	ldr	r1, [sp, #28]
   127ee:	9105      	str	r1, [sp, #20]
   127f0:	9004      	str	r0, [sp, #16]
   127f2:	2000      	movs	r0, #0
   127f4:	9003      	str	r0, [sp, #12]
   127f6:	2001      	movs	r0, #1
   127f8:	9002      	str	r0, [sp, #8]
   127fa:	9802      	ldr	r0, [sp, #8]
   127fc:	9903      	ldr	r1, [sp, #12]
   127fe:	9a04      	ldr	r2, [sp, #16]
   12800:	9b05      	ldr	r3, [sp, #20]
   12802:	b00a      	add	sp, #40	; 0x28
   12804:	4770      	bx	lr

00012806 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>:
   12806:	b580      	push	{r7, lr}
   12808:	b08a      	sub	sp, #40	; 0x28
   1280a:	9009      	str	r0, [sp, #36]	; 0x24
   1280c:	f7ff fe30 	bl	12470 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>
   12810:	9108      	str	r1, [sp, #32]
   12812:	9007      	str	r0, [sp, #28]
   12814:	9306      	str	r3, [sp, #24]
   12816:	9205      	str	r2, [sp, #20]
   12818:	e7ff      	b.n	1281a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x14>
   1281a:	9807      	ldr	r0, [sp, #28]
   1281c:	9908      	ldr	r1, [sp, #32]
   1281e:	9a05      	ldr	r2, [sp, #20]
   12820:	9b06      	ldr	r3, [sp, #24]
   12822:	f000 f859 	bl	128d8 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>
   12826:	9104      	str	r1, [sp, #16]
   12828:	9003      	str	r0, [sp, #12]
   1282a:	9302      	str	r3, [sp, #8]
   1282c:	9201      	str	r2, [sp, #4]
   1282e:	e7ff      	b.n	12830 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x2a>
   12830:	9803      	ldr	r0, [sp, #12]
   12832:	9904      	ldr	r1, [sp, #16]
   12834:	9a01      	ldr	r2, [sp, #4]
   12836:	9b02      	ldr	r3, [sp, #8]
   12838:	b00a      	add	sp, #40	; 0x28
   1283a:	bd80      	pop	{r7, pc}

0001283c <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>:
#[derive(ToPrimitive)]
   1283c:	b08a      	sub	sp, #40	; 0x28
   1283e:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Orientation {
   12840:	7800      	ldrb	r0, [r0, #0]
   12842:	4601      	mov	r1, r0
   12844:	2800      	cmp	r0, #0
   12846:	9101      	str	r1, [sp, #4]
   12848:	d00f      	beq.n	1286a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x2e>
   1284a:	e7ff      	b.n	1284c <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x10>
   1284c:	9801      	ldr	r0, [sp, #4]
   1284e:	2860      	cmp	r0, #96	; 0x60
   12850:	d00f      	beq.n	12872 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x36>
   12852:	e7ff      	b.n	12854 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x18>
   12854:	9801      	ldr	r0, [sp, #4]
   12856:	28a0      	cmp	r0, #160	; 0xa0
   12858:	d001      	beq.n	1285e <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x22>
   1285a:	e7ff      	b.n	1285c <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x20>
   1285c:	e00e      	b.n	1287c <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x40>
   1285e:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
   12860:	9007      	str	r0, [sp, #28]
   12862:	20a0      	movs	r0, #160	; 0xa0
   12864:	9006      	str	r0, [sp, #24]
   12866:	e00e      	b.n	12886 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
   12868:	defe      	udf	#254	; 0xfe
   1286a:	2000      	movs	r0, #0
   1286c:	9007      	str	r0, [sp, #28]
   1286e:	9006      	str	r0, [sp, #24]
   12870:	e009      	b.n	12886 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
   12872:	2000      	movs	r0, #0
   12874:	9007      	str	r0, [sp, #28]
   12876:	2060      	movs	r0, #96	; 0x60
   12878:	9006      	str	r0, [sp, #24]
   1287a:	e004      	b.n	12886 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
   1287c:	2000      	movs	r0, #0
   1287e:	9007      	str	r0, [sp, #28]
   12880:	20c0      	movs	r0, #192	; 0xc0
   12882:	9006      	str	r0, [sp, #24]
   12884:	e7ff      	b.n	12886 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
   12886:	9806      	ldr	r0, [sp, #24]
   12888:	9907      	ldr	r1, [sp, #28]
   1288a:	9105      	str	r1, [sp, #20]
   1288c:	9004      	str	r0, [sp, #16]
   1288e:	2000      	movs	r0, #0
   12890:	9003      	str	r0, [sp, #12]
   12892:	2001      	movs	r0, #1
   12894:	9002      	str	r0, [sp, #8]
   12896:	9802      	ldr	r0, [sp, #8]
   12898:	9903      	ldr	r1, [sp, #12]
   1289a:	9a04      	ldr	r2, [sp, #16]
   1289c:	9b05      	ldr	r3, [sp, #20]
   1289e:	b00a      	add	sp, #40	; 0x28
   128a0:	4770      	bx	lr

000128a2 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>:
   128a2:	b580      	push	{r7, lr}
   128a4:	b08a      	sub	sp, #40	; 0x28
   128a6:	9009      	str	r0, [sp, #36]	; 0x24
   128a8:	f7ff ffc8 	bl	1283c <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>
   128ac:	9108      	str	r1, [sp, #32]
   128ae:	9007      	str	r0, [sp, #28]
   128b0:	9306      	str	r3, [sp, #24]
   128b2:	9205      	str	r2, [sp, #20]
   128b4:	e7ff      	b.n	128b6 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x14>
   128b6:	9807      	ldr	r0, [sp, #28]
   128b8:	9908      	ldr	r1, [sp, #32]
   128ba:	9a05      	ldr	r2, [sp, #20]
   128bc:	9b06      	ldr	r3, [sp, #24]
   128be:	f000 f863 	bl	12988 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>
   128c2:	9104      	str	r1, [sp, #16]
   128c4:	9003      	str	r0, [sp, #12]
   128c6:	9302      	str	r3, [sp, #8]
   128c8:	9201      	str	r2, [sp, #4]
   128ca:	e7ff      	b.n	128cc <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x2a>
   128cc:	9803      	ldr	r0, [sp, #12]
   128ce:	9904      	ldr	r1, [sp, #16]
   128d0:	9a01      	ldr	r2, [sp, #4]
   128d2:	9b02      	ldr	r3, [sp, #8]
   128d4:	b00a      	add	sp, #40	; 0x28
   128d6:	bd80      	pop	{r7, pc}

000128d8 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>:
   128d8:	b5b0      	push	{r4, r5, r7, lr}
   128da:	b090      	sub	sp, #64	; 0x40
   128dc:	469c      	mov	ip, r3
   128de:	4696      	mov	lr, r2
   128e0:	460c      	mov	r4, r1
   128e2:	4605      	mov	r5, r0
   128e4:	9103      	str	r1, [sp, #12]
   128e6:	9002      	str	r0, [sp, #8]
   128e8:	9305      	str	r3, [sp, #20]
   128ea:	9204      	str	r2, [sp, #16]
   128ec:	2000      	movs	r0, #0
   128ee:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   128f2:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   128f6:	2001      	movs	r0, #1
   128f8:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   128fc:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   12900:	9802      	ldr	r0, [sp, #8]
   12902:	2800      	cmp	r0, #0
   12904:	d001      	beq.n	1290a <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x32>
   12906:	e7ff      	b.n	12908 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x30>
   12908:	e004      	b.n	12914 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x3c>
   1290a:	2000      	movs	r0, #0
   1290c:	9007      	str	r0, [sp, #28]
   1290e:	9006      	str	r0, [sp, #24]
   12910:	e023      	b.n	1295a <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
   12912:	defe      	udf	#254	; 0xfe
   12914:	2000      	movs	r0, #0
   12916:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   1291a:	9904      	ldr	r1, [sp, #16]
   1291c:	9a05      	ldr	r2, [sp, #20]
   1291e:	920f      	str	r2, [sp, #60]	; 0x3c
   12920:	910e      	str	r1, [sp, #56]	; 0x38
   12922:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   12926:	920b      	str	r2, [sp, #44]	; 0x2c
   12928:	910a      	str	r1, [sp, #40]	; 0x28
   1292a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1292c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1292e:	f000 f883 	bl	12a38 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>
   12932:	9101      	str	r1, [sp, #4]
   12934:	9000      	str	r0, [sp, #0]
   12936:	e7ff      	b.n	12938 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x60>
   12938:	9800      	ldr	r0, [sp, #0]
   1293a:	9008      	str	r0, [sp, #32]
   1293c:	9901      	ldr	r1, [sp, #4]
   1293e:	9109      	str	r1, [sp, #36]	; 0x24
   12940:	2200      	movs	r2, #0
   12942:	9207      	str	r2, [sp, #28]
   12944:	2201      	movs	r2, #1
   12946:	9206      	str	r2, [sp, #24]
   12948:	e007      	b.n	1295a <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
   1294a:	9802      	ldr	r0, [sp, #8]
   1294c:	2801      	cmp	r0, #1
   1294e:	d010      	beq.n	12972 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x9a>
   12950:	e019      	b.n	12986 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xae>
   12952:	2000      	movs	r0, #0
   12954:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   12958:	e7f7      	b.n	1294a <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
   1295a:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
   1295e:	07c0      	lsls	r0, r0, #31
   12960:	2800      	cmp	r0, #0
   12962:	d1f6      	bne.n	12952 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x7a>
   12964:	e7f1      	b.n	1294a <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
   12966:	9806      	ldr	r0, [sp, #24]
   12968:	9907      	ldr	r1, [sp, #28]
   1296a:	9a08      	ldr	r2, [sp, #32]
   1296c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1296e:	b010      	add	sp, #64	; 0x40
   12970:	bdb0      	pop	{r4, r5, r7, pc}
   12972:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   12976:	07c0      	lsls	r0, r0, #31
   12978:	2800      	cmp	r0, #0
   1297a:	d0f4      	beq.n	12966 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
   1297c:	e7ff      	b.n	1297e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xa6>
   1297e:	2000      	movs	r0, #0
   12980:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   12984:	e7ef      	b.n	12966 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
   12986:	e7ee      	b.n	12966 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>

00012988 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>:
   12988:	b5b0      	push	{r4, r5, r7, lr}
   1298a:	b090      	sub	sp, #64	; 0x40
   1298c:	469c      	mov	ip, r3
   1298e:	4696      	mov	lr, r2
   12990:	460c      	mov	r4, r1
   12992:	4605      	mov	r5, r0
   12994:	9103      	str	r1, [sp, #12]
   12996:	9002      	str	r0, [sp, #8]
   12998:	9305      	str	r3, [sp, #20]
   1299a:	9204      	str	r2, [sp, #16]
   1299c:	2000      	movs	r0, #0
   1299e:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   129a2:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   129a6:	2001      	movs	r0, #1
   129a8:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   129ac:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   129b0:	9802      	ldr	r0, [sp, #8]
   129b2:	2800      	cmp	r0, #0
   129b4:	d001      	beq.n	129ba <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x32>
   129b6:	e7ff      	b.n	129b8 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x30>
   129b8:	e004      	b.n	129c4 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x3c>
   129ba:	2000      	movs	r0, #0
   129bc:	9007      	str	r0, [sp, #28]
   129be:	9006      	str	r0, [sp, #24]
   129c0:	e023      	b.n	12a0a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
   129c2:	defe      	udf	#254	; 0xfe
   129c4:	2000      	movs	r0, #0
   129c6:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   129ca:	9904      	ldr	r1, [sp, #16]
   129cc:	9a05      	ldr	r2, [sp, #20]
   129ce:	920f      	str	r2, [sp, #60]	; 0x3c
   129d0:	910e      	str	r1, [sp, #56]	; 0x38
   129d2:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   129d6:	920b      	str	r2, [sp, #44]	; 0x2c
   129d8:	910a      	str	r1, [sp, #40]	; 0x28
   129da:	980a      	ldr	r0, [sp, #40]	; 0x28
   129dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   129de:	f003 fa28 	bl	15e32 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>
   129e2:	9101      	str	r1, [sp, #4]
   129e4:	9000      	str	r0, [sp, #0]
   129e6:	e7ff      	b.n	129e8 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x60>
   129e8:	9800      	ldr	r0, [sp, #0]
   129ea:	9008      	str	r0, [sp, #32]
   129ec:	9901      	ldr	r1, [sp, #4]
   129ee:	9109      	str	r1, [sp, #36]	; 0x24
   129f0:	2200      	movs	r2, #0
   129f2:	9207      	str	r2, [sp, #28]
   129f4:	2201      	movs	r2, #1
   129f6:	9206      	str	r2, [sp, #24]
   129f8:	e007      	b.n	12a0a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
   129fa:	9802      	ldr	r0, [sp, #8]
   129fc:	2801      	cmp	r0, #1
   129fe:	d010      	beq.n	12a22 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x9a>
   12a00:	e019      	b.n	12a36 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xae>
   12a02:	2000      	movs	r0, #0
   12a04:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   12a08:	e7f7      	b.n	129fa <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
   12a0a:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
   12a0e:	07c0      	lsls	r0, r0, #31
   12a10:	2800      	cmp	r0, #0
   12a12:	d1f6      	bne.n	12a02 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x7a>
   12a14:	e7f1      	b.n	129fa <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
   12a16:	9806      	ldr	r0, [sp, #24]
   12a18:	9907      	ldr	r1, [sp, #28]
   12a1a:	9a08      	ldr	r2, [sp, #32]
   12a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12a1e:	b010      	add	sp, #64	; 0x40
   12a20:	bdb0      	pop	{r4, r5, r7, pc}
   12a22:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   12a26:	07c0      	lsls	r0, r0, #31
   12a28:	2800      	cmp	r0, #0
   12a2a:	d0f4      	beq.n	12a16 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
   12a2c:	e7ff      	b.n	12a2e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xa6>
   12a2e:	2000      	movs	r0, #0
   12a30:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   12a34:	e7ef      	b.n	12a16 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
   12a36:	e7ee      	b.n	12a16 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>

00012a38 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>:
   12a38:	b084      	sub	sp, #16
   12a3a:	460a      	mov	r2, r1
   12a3c:	4603      	mov	r3, r0
   12a3e:	9103      	str	r1, [sp, #12]
   12a40:	9002      	str	r0, [sp, #8]
   12a42:	b004      	add	sp, #16
   12a44:	4770      	bx	lr

00012a46 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h0a450d9c4f54993fE>:
   12a46:	b081      	sub	sp, #4
   12a48:	4601      	mov	r1, r0
   12a4a:	f88d 0003 	strb.w	r0, [sp, #3]
   12a4e:	b2c0      	uxtb	r0, r0
   12a50:	b001      	add	sp, #4
   12a52:	4770      	bx	lr

00012a54 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E>:
   12a54:	b08a      	sub	sp, #40	; 0x28
   12a56:	9107      	str	r1, [sp, #28]
   12a58:	9208      	str	r2, [sp, #32]
   12a5a:	f8d0 c000 	ldr.w	ip, [r0]
   12a5e:	f1bc 0f00 	cmp.w	ip, #0
   12a62:	9305      	str	r3, [sp, #20]
   12a64:	9204      	str	r2, [sp, #16]
   12a66:	9103      	str	r1, [sp, #12]
   12a68:	9002      	str	r0, [sp, #8]
   12a6a:	d011      	beq.n	12a90 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E+0x3c>
   12a6c:	e7ff      	b.n	12a6e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E+0x1a>
   12a6e:	9802      	ldr	r0, [sp, #8]
   12a70:	6841      	ldr	r1, [r0, #4]
   12a72:	9106      	str	r1, [sp, #24]
   12a74:	4669      	mov	r1, sp
   12a76:	9a05      	ldr	r2, [sp, #20]
   12a78:	600a      	str	r2, [r1, #0]
   12a7a:	f24f 6344 	movw	r3, #63044	; 0xf644
   12a7e:	f2c0 0301 	movt	r3, #1
   12a82:	aa06      	add	r2, sp, #24
   12a84:	9803      	ldr	r0, [sp, #12]
   12a86:	9904      	ldr	r1, [sp, #16]
   12a88:	f003 ff86 	bl	16998 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   12a8c:	defe      	udf	#254	; 0xfe
   12a8e:	defe      	udf	#254	; 0xfe
   12a90:	9802      	ldr	r0, [sp, #8]
   12a92:	6841      	ldr	r1, [r0, #4]
   12a94:	9109      	str	r1, [sp, #36]	; 0x24
   12a96:	6802      	ldr	r2, [r0, #0]
   12a98:	2a00      	cmp	r2, #0
   12a9a:	9101      	str	r1, [sp, #4]
   12a9c:	d103      	bne.n	12aa6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E+0x52>
   12a9e:	e7ff      	b.n	12aa0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E+0x4c>
   12aa0:	9801      	ldr	r0, [sp, #4]
   12aa2:	b00a      	add	sp, #40	; 0x28
   12aa4:	4770      	bx	lr
   12aa6:	e7fb      	b.n	12aa0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E+0x4c>

00012aa8 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>:
    fn le(&self, other: &LevelFilter) -> bool {
   12aa8:	b082      	sub	sp, #8
   12aaa:	9000      	str	r0, [sp, #0]
   12aac:	9101      	str	r1, [sp, #4]
        *self as usize <= *other as usize
   12aae:	6800      	ldr	r0, [r0, #0]
   12ab0:	6809      	ldr	r1, [r1, #0]
   12ab2:	2200      	movs	r2, #0
   12ab4:	4288      	cmp	r0, r1
   12ab6:	bf98      	it	ls
   12ab8:	2201      	movls	r2, #1
    }
   12aba:	4610      	mov	r0, r2
   12abc:	b002      	add	sp, #8
   12abe:	4770      	bx	lr

00012ac0 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>:
   12ac0:	b580      	push	{r7, lr}
   12ac2:	b086      	sub	sp, #24
   12ac4:	460a      	mov	r2, r1
   12ac6:	9004      	str	r0, [sp, #16]
   12ac8:	f88d 1017 	strb.w	r1, [sp, #23]
   12acc:	9203      	str	r2, [sp, #12]
   12ace:	f7fb ff6c 	bl	e9aa <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   12ad2:	9002      	str	r0, [sp, #8]
   12ad4:	e7ff      	b.n	12ad6 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E+0x16>
   12ad6:	9802      	ldr	r0, [sp, #8]
   12ad8:	9903      	ldr	r1, [sp, #12]
   12ada:	f7fb ff7f 	bl	e9dc <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   12ade:	9001      	str	r0, [sp, #4]
   12ae0:	e7ff      	b.n	12ae2 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E+0x22>
   12ae2:	9801      	ldr	r0, [sp, #4]
   12ae4:	b006      	add	sp, #24
   12ae6:	bd80      	pop	{r7, pc}

00012ae8 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E>:
   12ae8:	b580      	push	{r7, lr}
   12aea:	b086      	sub	sp, #24
   12aec:	460a      	mov	r2, r1
   12aee:	4603      	mov	r3, r0
   12af0:	f88d 0014 	strb.w	r0, [sp, #20]
   12af4:	f88d 1015 	strb.w	r1, [sp, #21]
   12af8:	9203      	str	r2, [sp, #12]
   12afa:	9302      	str	r3, [sp, #8]
   12afc:	f000 f865 	bl	12bca <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h86687d23966cf72aE>
   12b00:	9001      	str	r0, [sp, #4]
   12b02:	9100      	str	r1, [sp, #0]
   12b04:	e7ff      	b.n	12b06 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E+0x1e>
   12b06:	9801      	ldr	r0, [sp, #4]
   12b08:	f88d 0016 	strb.w	r0, [sp, #22]
   12b0c:	9900      	ldr	r1, [sp, #0]
   12b0e:	f001 0201 	and.w	r2, r1, #1
   12b12:	f88d 2017 	strb.w	r2, [sp, #23]
   12b16:	2a00      	cmp	r2, #0
   12b18:	d107      	bne.n	12b2a <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E+0x42>
   12b1a:	e7ff      	b.n	12b1c <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E+0x34>
   12b1c:	9801      	ldr	r0, [sp, #4]
   12b1e:	f88d 0011 	strb.w	r0, [sp, #17]
   12b22:	2101      	movs	r1, #1
   12b24:	f88d 1010 	strb.w	r1, [sp, #16]
   12b28:	e003      	b.n	12b32 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E+0x4a>
   12b2a:	2000      	movs	r0, #0
   12b2c:	f88d 0010 	strb.w	r0, [sp, #16]
   12b30:	e7ff      	b.n	12b32 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E+0x4a>
   12b32:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12b36:	f89d 1011 	ldrb.w	r1, [sp, #17]
   12b3a:	b006      	add	sp, #24
   12b3c:	bd80      	pop	{r7, pc}

00012b3e <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17hac8dfc997b9c24ecE>:
   12b3e:	b082      	sub	sp, #8
   12b40:	460a      	mov	r2, r1
   12b42:	4603      	mov	r3, r0
   12b44:	f88d 0005 	strb.w	r0, [sp, #5]
   12b48:	f88d 1006 	strb.w	r1, [sp, #6]
   12b4c:	4408      	add	r0, r1
   12b4e:	f88d 0007 	strb.w	r0, [sp, #7]
   12b52:	f89d 0007 	ldrb.w	r0, [sp, #7]
   12b56:	9000      	str	r0, [sp, #0]
   12b58:	e7ff      	b.n	12b5a <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17hac8dfc997b9c24ecE+0x1c>
   12b5a:	9800      	ldr	r0, [sp, #0]
   12b5c:	b002      	add	sp, #8
   12b5e:	4770      	bx	lr

00012b60 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17h31de2c523da77629E>:
   12b60:	b084      	sub	sp, #16
   12b62:	4602      	mov	r2, r0
   12b64:	f88d 0007 	strb.w	r0, [sp, #7]
   12b68:	9102      	str	r1, [sp, #8]
   12b6a:	f001 0107 	and.w	r1, r1, #7
   12b6e:	4088      	lsls	r0, r1
   12b70:	f88d 000f 	strb.w	r0, [sp, #15]
   12b74:	f89d 000f 	ldrb.w	r0, [sp, #15]
   12b78:	9000      	str	r0, [sp, #0]
   12b7a:	e7ff      	b.n	12b7c <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17h31de2c523da77629E+0x1c>
   12b7c:	9800      	ldr	r0, [sp, #0]
   12b7e:	b004      	add	sp, #16
   12b80:	4770      	bx	lr

00012b82 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hda13cf3283d09c50E>:
   12b82:	b084      	sub	sp, #16
   12b84:	b2c2      	uxtb	r2, r0
   12b86:	4603      	mov	r3, r0
   12b88:	f88d 0007 	strb.w	r0, [sp, #7]
   12b8c:	9102      	str	r1, [sp, #8]
   12b8e:	f001 0007 	and.w	r0, r1, #7
   12b92:	fa22 f000 	lsr.w	r0, r2, r0
   12b96:	f88d 000f 	strb.w	r0, [sp, #15]
   12b9a:	f89d 000f 	ldrb.w	r0, [sp, #15]
   12b9e:	9000      	str	r0, [sp, #0]
   12ba0:	e7ff      	b.n	12ba2 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hda13cf3283d09c50E+0x20>
   12ba2:	9800      	ldr	r0, [sp, #0]
   12ba4:	b004      	add	sp, #16
   12ba6:	4770      	bx	lr

00012ba8 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h4a79113dcdba2ecfE>:
   12ba8:	b082      	sub	sp, #8
   12baa:	460a      	mov	r2, r1
   12bac:	4603      	mov	r3, r0
   12bae:	f88d 0005 	strb.w	r0, [sp, #5]
   12bb2:	f88d 1006 	strb.w	r1, [sp, #6]
   12bb6:	1a40      	subs	r0, r0, r1
   12bb8:	f88d 0007 	strb.w	r0, [sp, #7]
   12bbc:	f89d 0007 	ldrb.w	r0, [sp, #7]
   12bc0:	9000      	str	r0, [sp, #0]
   12bc2:	e7ff      	b.n	12bc4 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h4a79113dcdba2ecfE+0x1c>
   12bc4:	9800      	ldr	r0, [sp, #0]
   12bc6:	b002      	add	sp, #8
   12bc8:	4770      	bx	lr

00012bca <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h86687d23966cf72aE>:
   12bca:	b084      	sub	sp, #16
   12bcc:	b2c2      	uxtb	r2, r0
   12bce:	460b      	mov	r3, r1
   12bd0:	4684      	mov	ip, r0
   12bd2:	f88d 000a 	strb.w	r0, [sp, #10]
   12bd6:	f88d 100b 	strb.w	r1, [sp, #11]
   12bda:	fa52 f081 	uxtab	r0, r2, r1
   12bde:	b2c1      	uxtb	r1, r0
   12be0:	1a09      	subs	r1, r1, r0
   12be2:	bf18      	it	ne
   12be4:	2101      	movne	r1, #1
   12be6:	f88d 000c 	strb.w	r0, [sp, #12]
   12bea:	f88d 100d 	strb.w	r1, [sp, #13]
   12bee:	f89d 000c 	ldrb.w	r0, [sp, #12]
   12bf2:	f89d 100d 	ldrb.w	r1, [sp, #13]
   12bf6:	9001      	str	r0, [sp, #4]
   12bf8:	9100      	str	r1, [sp, #0]
   12bfa:	e7ff      	b.n	12bfc <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h86687d23966cf72aE+0x32>
   12bfc:	9801      	ldr	r0, [sp, #4]
   12bfe:	f88d 000e 	strb.w	r0, [sp, #14]
   12c02:	9900      	ldr	r1, [sp, #0]
   12c04:	f001 0201 	and.w	r2, r1, #1
   12c08:	f88d 200f 	strb.w	r2, [sp, #15]
   12c0c:	f88d 0008 	strb.w	r0, [sp, #8]
   12c10:	f88d 2009 	strb.w	r2, [sp, #9]
   12c14:	f89d 0008 	ldrb.w	r0, [sp, #8]
   12c18:	f89d 1009 	ldrb.w	r1, [sp, #9]
   12c1c:	b004      	add	sp, #16
   12c1e:	4770      	bx	lr

00012c20 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h6530387af31222c2E>:
   12c20:	b580      	push	{r7, lr}
   12c22:	b084      	sub	sp, #16
   12c24:	b2ca      	uxtb	r2, r1
   12c26:	b2c3      	uxtb	r3, r0
   12c28:	468c      	mov	ip, r1
   12c2a:	4686      	mov	lr, r0
   12c2c:	f88d 000a 	strb.w	r0, [sp, #10]
   12c30:	f88d 100b 	strb.w	r1, [sp, #11]
   12c34:	1a98      	subs	r0, r3, r2
   12c36:	b2c1      	uxtb	r1, r0
   12c38:	1a09      	subs	r1, r1, r0
   12c3a:	bf18      	it	ne
   12c3c:	2101      	movne	r1, #1
   12c3e:	f88d 000c 	strb.w	r0, [sp, #12]
   12c42:	f88d 100d 	strb.w	r1, [sp, #13]
   12c46:	f89d 000c 	ldrb.w	r0, [sp, #12]
   12c4a:	f89d 100d 	ldrb.w	r1, [sp, #13]
   12c4e:	9001      	str	r0, [sp, #4]
   12c50:	9100      	str	r1, [sp, #0]
   12c52:	e7ff      	b.n	12c54 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h6530387af31222c2E+0x34>
   12c54:	9801      	ldr	r0, [sp, #4]
   12c56:	f88d 000e 	strb.w	r0, [sp, #14]
   12c5a:	9900      	ldr	r1, [sp, #0]
   12c5c:	f001 0201 	and.w	r2, r1, #1
   12c60:	f88d 200f 	strb.w	r2, [sp, #15]
   12c64:	f88d 0008 	strb.w	r0, [sp, #8]
   12c68:	f88d 2009 	strb.w	r2, [sp, #9]
   12c6c:	f89d 0008 	ldrb.w	r0, [sp, #8]
   12c70:	f89d 1009 	ldrb.w	r1, [sp, #9]
   12c74:	b004      	add	sp, #16
   12c76:	bd80      	pop	{r7, pc}

00012c78 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E>:
   12c78:	b083      	sub	sp, #12
   12c7a:	460a      	mov	r2, r1
   12c7c:	4603      	mov	r3, r0
   12c7e:	f8ad 0006 	strh.w	r0, [sp, #6]
   12c82:	f8ad 1008 	strh.w	r1, [sp, #8]
   12c86:	4408      	add	r0, r1
   12c88:	f8ad 000a 	strh.w	r0, [sp, #10]
   12c8c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   12c90:	9000      	str	r0, [sp, #0]
   12c92:	e7ff      	b.n	12c94 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E+0x1c>
   12c94:	9800      	ldr	r0, [sp, #0]
   12c96:	b003      	add	sp, #12
   12c98:	4770      	bx	lr

00012c9a <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E>:
   12c9a:	b083      	sub	sp, #12
   12c9c:	460a      	mov	r2, r1
   12c9e:	4603      	mov	r3, r0
   12ca0:	f8ad 0006 	strh.w	r0, [sp, #6]
   12ca4:	f8ad 1008 	strh.w	r1, [sp, #8]
   12ca8:	1a40      	subs	r0, r0, r1
   12caa:	f8ad 000a 	strh.w	r0, [sp, #10]
   12cae:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   12cb2:	9000      	str	r0, [sp, #0]
   12cb4:	e7ff      	b.n	12cb6 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E+0x1c>
   12cb6:	9800      	ldr	r0, [sp, #0]
   12cb8:	b003      	add	sp, #12
   12cba:	4770      	bx	lr

00012cbc <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h7cd75c3bdc89aa73E>:
   12cbc:	b5b0      	push	{r4, r5, r7, lr}
   12cbe:	b088      	sub	sp, #32
   12cc0:	469c      	mov	ip, r3
   12cc2:	4696      	mov	lr, r2
   12cc4:	460c      	mov	r4, r1
   12cc6:	4605      	mov	r5, r0
   12cc8:	9103      	str	r1, [sp, #12]
   12cca:	9002      	str	r0, [sp, #8]
   12ccc:	9305      	str	r3, [sp, #20]
   12cce:	9204      	str	r2, [sp, #16]
   12cd0:	1a80      	subs	r0, r0, r2
   12cd2:	eb61 0103 	sbc.w	r1, r1, r3
   12cd6:	9107      	str	r1, [sp, #28]
   12cd8:	9006      	str	r0, [sp, #24]
   12cda:	9806      	ldr	r0, [sp, #24]
   12cdc:	9907      	ldr	r1, [sp, #28]
   12cde:	9001      	str	r0, [sp, #4]
   12ce0:	9100      	str	r1, [sp, #0]
   12ce2:	e7ff      	b.n	12ce4 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h7cd75c3bdc89aa73E+0x28>
   12ce4:	9801      	ldr	r0, [sp, #4]
   12ce6:	9900      	ldr	r1, [sp, #0]
   12ce8:	b008      	add	sp, #32
   12cea:	bdb0      	pop	{r4, r5, r7, pc}

00012cec <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E>:
   12cec:	b580      	push	{r7, lr}
   12cee:	b086      	sub	sp, #24
   12cf0:	9005      	str	r0, [sp, #20]
   12cf2:	2100      	movs	r1, #0
   12cf4:	f88d 1013 	strb.w	r1, [sp, #19]
   12cf8:	1c41      	adds	r1, r0, #1
   12cfa:	9002      	str	r0, [sp, #8]
   12cfc:	f003 f8a0 	bl	15e40 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h751b32771630458fE>
   12d00:	9001      	str	r0, [sp, #4]
   12d02:	e7ff      	b.n	12d04 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x18>
   12d04:	9801      	ldr	r0, [sp, #4]
   12d06:	07c1      	lsls	r1, r0, #31
   12d08:	2900      	cmp	r1, #0
   12d0a:	d104      	bne.n	12d16 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x2a>
   12d0c:	e7ff      	b.n	12d0e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x22>
   12d0e:	2000      	movs	r0, #0
   12d10:	f88d 000c 	strb.w	r0, [sp, #12]
   12d14:	e02c      	b.n	12d70 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x84>
   12d16:	2001      	movs	r0, #1
   12d18:	f88d 0013 	strb.w	r0, [sp, #19]
   12d1c:	9902      	ldr	r1, [sp, #8]
   12d1e:	9000      	str	r0, [sp, #0]
   12d20:	4608      	mov	r0, r1
   12d22:	9900      	ldr	r1, [sp, #0]
   12d24:	f000 f86e 	bl	12e04 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E>
   12d28:	f88d 1011 	strb.w	r1, [sp, #17]
   12d2c:	f88d 0010 	strb.w	r0, [sp, #16]
   12d30:	e7ff      	b.n	12d32 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x46>
   12d32:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12d36:	07c0      	lsls	r0, r0, #31
   12d38:	2800      	cmp	r0, #0
   12d3a:	d104      	bne.n	12d46 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x5a>
   12d3c:	e7ff      	b.n	12d3e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x52>
   12d3e:	2000      	movs	r0, #0
   12d40:	f88d 000c 	strb.w	r0, [sp, #12]
   12d44:	e029      	b.n	12d9a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0xae>
   12d46:	2000      	movs	r0, #0
   12d48:	f88d 0013 	strb.w	r0, [sp, #19]
   12d4c:	f89d 0011 	ldrb.w	r0, [sp, #17]
   12d50:	f88d 0012 	strb.w	r0, [sp, #18]
   12d54:	f10d 0012 	add.w	r0, sp, #18
   12d58:	9902      	ldr	r1, [sp, #8]
   12d5a:	f000 f886 	bl	12e6a <_ZN4core3mem4swap17h9f9b2c00c891c39bE>
   12d5e:	e7ff      	b.n	12d60 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x74>
   12d60:	f89d 0012 	ldrb.w	r0, [sp, #18]
   12d64:	f88d 000d 	strb.w	r0, [sp, #13]
   12d68:	2001      	movs	r0, #1
   12d6a:	f88d 000c 	strb.w	r0, [sp, #12]
   12d6e:	e014      	b.n	12d9a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0xae>
   12d70:	f89d 000c 	ldrb.w	r0, [sp, #12]
   12d74:	f89d 100d 	ldrb.w	r1, [sp, #13]
   12d78:	b006      	add	sp, #24
   12d7a:	bd80      	pop	{r7, pc}
   12d7c:	2000      	movs	r0, #0
   12d7e:	f88d 0013 	strb.w	r0, [sp, #19]
   12d82:	e7f5      	b.n	12d70 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x84>
   12d84:	f89d 0013 	ldrb.w	r0, [sp, #19]
   12d88:	07c0      	lsls	r0, r0, #31
   12d8a:	2800      	cmp	r0, #0
   12d8c:	d0f6      	beq.n	12d7c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x90>
   12d8e:	e7ff      	b.n	12d90 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0xa4>
   12d90:	2000      	movs	r0, #0
   12d92:	f88d 0013 	strb.w	r0, [sp, #19]
   12d96:	e7f1      	b.n	12d7c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x90>
   12d98:	e7f0      	b.n	12d7c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x90>
   12d9a:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12d9e:	07c0      	lsls	r0, r0, #31
   12da0:	2800      	cmp	r0, #0
   12da2:	d1ef      	bne.n	12d84 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x98>
   12da4:	e7f8      	b.n	12d98 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0xac>

00012da6 <_ZN4core4iter6traits8iterator8Iterator3map17h39af250ef60ec852E>:
   12da6:	b580      	push	{r7, lr}
   12da8:	b084      	sub	sp, #16
   12daa:	9101      	str	r1, [sp, #4]
   12dac:	9202      	str	r2, [sp, #8]
   12dae:	9303      	str	r3, [sp, #12]
   12db0:	f7fa ff2a 	bl	dc08 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h47809268ca43aa27E>
   12db4:	e7ff      	b.n	12db6 <_ZN4core4iter6traits8iterator8Iterator3map17h39af250ef60ec852E+0x10>
   12db6:	b004      	add	sp, #16
   12db8:	bd80      	pop	{r7, pc}

00012dba <_ZN4core4iter6traits8iterator8Iterator3map17hf6992577e3374dfdE>:
   12dba:	b580      	push	{r7, lr}
   12dbc:	b084      	sub	sp, #16
   12dbe:	9101      	str	r1, [sp, #4]
   12dc0:	9202      	str	r2, [sp, #8]
   12dc2:	9303      	str	r3, [sp, #12]
   12dc4:	f7fa ff17 	bl	dbf6 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h21a9e3dc4962ad94E>
   12dc8:	e7ff      	b.n	12dca <_ZN4core4iter6traits8iterator8Iterator3map17hf6992577e3374dfdE+0x10>
   12dca:	b004      	add	sp, #16
   12dcc:	bd80      	pop	{r7, pc}

00012dce <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hc518c90d18182e65E>:
   12dce:	b081      	sub	sp, #4
   12dd0:	460a      	mov	r2, r1
   12dd2:	4603      	mov	r3, r0
   12dd4:	f88d 0000 	strb.w	r0, [sp]
   12dd8:	f88d 1001 	strb.w	r1, [sp, #1]
   12ddc:	b001      	add	sp, #4
   12dde:	4770      	bx	lr

00012de0 <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h2d7145d37f608201E>:
   12de0:	b084      	sub	sp, #16
   12de2:	9000      	str	r0, [sp, #0]
   12de4:	9101      	str	r1, [sp, #4]
   12de6:	9102      	str	r1, [sp, #8]
   12de8:	9003      	str	r0, [sp, #12]
   12dea:	6802      	ldr	r2, [r0, #0]
   12dec:	6840      	ldr	r0, [r0, #4]
   12dee:	680b      	ldr	r3, [r1, #0]
   12df0:	6849      	ldr	r1, [r1, #4]
   12df2:	4048      	eors	r0, r1
   12df4:	ea82 0103 	eor.w	r1, r2, r3
   12df8:	4308      	orrs	r0, r1
   12dfa:	fab0 f080 	clz	r0, r0
   12dfe:	0940      	lsrs	r0, r0, #5
   12e00:	b004      	add	sp, #16
   12e02:	4770      	bx	lr

00012e04 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E>:
   12e04:	b580      	push	{r7, lr}
   12e06:	b088      	sub	sp, #32
   12e08:	9005      	str	r0, [sp, #20]
   12e0a:	9106      	str	r1, [sp, #24]
   12e0c:	9002      	str	r0, [sp, #8]
   12e0e:	4608      	mov	r0, r1
   12e10:	f000 f834 	bl	12e7c <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE>
   12e14:	f88d 1011 	strb.w	r1, [sp, #17]
   12e18:	f88d 0010 	strb.w	r0, [sp, #16]
   12e1c:	e7ff      	b.n	12e1e <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x1a>
   12e1e:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12e22:	07c1      	lsls	r1, r0, #31
   12e24:	2900      	cmp	r1, #0
   12e26:	d005      	beq.n	12e34 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x30>
   12e28:	e7ff      	b.n	12e2a <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x26>
   12e2a:	2000      	movs	r0, #0
   12e2c:	f88d 000c 	strb.w	r0, [sp, #12]
   12e30:	e011      	b.n	12e56 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x52>
   12e32:	defe      	udf	#254	; 0xfe
   12e34:	f89d 0011 	ldrb.w	r0, [sp, #17]
   12e38:	f88d 001f 	strb.w	r0, [sp, #31]
   12e3c:	9902      	ldr	r1, [sp, #8]
   12e3e:	780a      	ldrb	r2, [r1, #0]
   12e40:	9001      	str	r0, [sp, #4]
   12e42:	4610      	mov	r0, r2
   12e44:	9901      	ldr	r1, [sp, #4]
   12e46:	f7ff fe4f 	bl	12ae8 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E>
   12e4a:	f88d 100d 	strb.w	r1, [sp, #13]
   12e4e:	f88d 000c 	strb.w	r0, [sp, #12]
   12e52:	e7ff      	b.n	12e54 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x50>
   12e54:	e7ff      	b.n	12e56 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x52>
   12e56:	f89d 000c 	ldrb.w	r0, [sp, #12]
   12e5a:	f89d 100d 	ldrb.w	r1, [sp, #13]
   12e5e:	b008      	add	sp, #32
   12e60:	bd80      	pop	{r7, pc}

00012e62 <_ZN4core3ptr13drop_in_place17h8a25dee97102e103E>:
   12e62:	b081      	sub	sp, #4
   12e64:	9000      	str	r0, [sp, #0]
   12e66:	b001      	add	sp, #4
   12e68:	4770      	bx	lr

00012e6a <_ZN4core3mem4swap17h9f9b2c00c891c39bE>:
   12e6a:	b580      	push	{r7, lr}
   12e6c:	b082      	sub	sp, #8
   12e6e:	9000      	str	r0, [sp, #0]
   12e70:	9101      	str	r1, [sp, #4]
   12e72:	f003 f80c 	bl	15e8e <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E>
   12e76:	e7ff      	b.n	12e78 <_ZN4core3mem4swap17h9f9b2c00c891c39bE+0xe>
   12e78:	b002      	add	sp, #8
   12e7a:	bd80      	pop	{r7, pc}

00012e7c <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE>:
   12e7c:	b083      	sub	sp, #12
   12e7e:	9002      	str	r0, [sp, #8]
   12e80:	9000      	str	r0, [sp, #0]
   12e82:	e7ff      	b.n	12e84 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE+0x8>
   12e84:	9800      	ldr	r0, [sp, #0]
   12e86:	28ff      	cmp	r0, #255	; 0xff
   12e88:	d807      	bhi.n	12e9a <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE+0x1e>
   12e8a:	e7ff      	b.n	12e8c <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE+0x10>
   12e8c:	9800      	ldr	r0, [sp, #0]
   12e8e:	f88d 0005 	strb.w	r0, [sp, #5]
   12e92:	2100      	movs	r1, #0
   12e94:	f88d 1004 	strb.w	r1, [sp, #4]
   12e98:	e003      	b.n	12ea2 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE+0x26>
   12e9a:	2001      	movs	r0, #1
   12e9c:	f88d 0004 	strb.w	r0, [sp, #4]
   12ea0:	e7ff      	b.n	12ea2 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE+0x26>
   12ea2:	f89d 0004 	ldrb.w	r0, [sp, #4]
   12ea6:	f89d 1005 	ldrb.w	r1, [sp, #5]
   12eaa:	b003      	add	sp, #12
   12eac:	4770      	bx	lr

00012eae <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>:
   12eae:	b084      	sub	sp, #16
   12eb0:	9001      	str	r0, [sp, #4]
   12eb2:	9102      	str	r1, [sp, #8]
   12eb4:	4408      	add	r0, r1
   12eb6:	9003      	str	r0, [sp, #12]
   12eb8:	9803      	ldr	r0, [sp, #12]
   12eba:	9000      	str	r0, [sp, #0]
   12ebc:	e7ff      	b.n	12ebe <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E+0x10>
   12ebe:	9800      	ldr	r0, [sp, #0]
   12ec0:	b004      	add	sp, #16
   12ec2:	4770      	bx	lr

00012ec4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>:
   12ec4:	b082      	sub	sp, #8
   12ec6:	9001      	str	r0, [sp, #4]
   12ec8:	9000      	str	r0, [sp, #0]
   12eca:	e7ff      	b.n	12ecc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE+0x8>
   12ecc:	9800      	ldr	r0, [sp, #0]
   12ece:	fab0 f180 	clz	r1, r0
   12ed2:	0948      	lsrs	r0, r1, #5
   12ed4:	b002      	add	sp, #8
   12ed6:	4770      	bx	lr

00012ed8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>:
   12ed8:	b082      	sub	sp, #8
   12eda:	9001      	str	r0, [sp, #4]
   12edc:	9000      	str	r0, [sp, #0]
   12ede:	9800      	ldr	r0, [sp, #0]
   12ee0:	b002      	add	sp, #8
   12ee2:	4770      	bx	lr

00012ee4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>:
   12ee4:	b081      	sub	sp, #4
   12ee6:	9000      	str	r0, [sp, #0]
   12ee8:	b001      	add	sp, #4
   12eea:	4770      	bx	lr

00012eec <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>:
   12eec:	b580      	push	{r7, lr}
   12eee:	b084      	sub	sp, #16
   12ef0:	9002      	str	r0, [sp, #8]
   12ef2:	9103      	str	r1, [sp, #12]
   12ef4:	f000 f805 	bl	12f02 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   12ef8:	9001      	str	r0, [sp, #4]
   12efa:	e7ff      	b.n	12efc <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E+0x10>
   12efc:	9801      	ldr	r0, [sp, #4]
   12efe:	b004      	add	sp, #16
   12f00:	bd80      	pop	{r7, pc}

00012f02 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>:
   12f02:	b084      	sub	sp, #16
   12f04:	9001      	str	r0, [sp, #4]
   12f06:	9102      	str	r1, [sp, #8]
   12f08:	4408      	add	r0, r1
   12f0a:	9003      	str	r0, [sp, #12]
   12f0c:	9803      	ldr	r0, [sp, #12]
   12f0e:	9000      	str	r0, [sp, #0]
   12f10:	e7ff      	b.n	12f12 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E+0x10>
   12f12:	9800      	ldr	r0, [sp, #0]
   12f14:	b004      	add	sp, #16
   12f16:	4770      	bx	lr

00012f18 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>:
   12f18:	b082      	sub	sp, #8
   12f1a:	9001      	str	r0, [sp, #4]
   12f1c:	9000      	str	r0, [sp, #0]
   12f1e:	e7ff      	b.n	12f20 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE+0x8>
   12f20:	9800      	ldr	r0, [sp, #0]
   12f22:	fab0 f180 	clz	r1, r0
   12f26:	0948      	lsrs	r0, r1, #5
   12f28:	b002      	add	sp, #8
   12f2a:	4770      	bx	lr

00012f2c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>:
   12f2c:	b580      	push	{r7, lr}
   12f2e:	b090      	sub	sp, #64	; 0x40
   12f30:	900c      	str	r0, [sp, #48]	; 0x30
   12f32:	910d      	str	r1, [sp, #52]	; 0x34
   12f34:	9007      	str	r0, [sp, #28]
   12f36:	9106      	str	r1, [sp, #24]
   12f38:	f000 f935 	bl	131a6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>
   12f3c:	4601      	mov	r1, r0
   12f3e:	900e      	str	r0, [sp, #56]	; 0x38
   12f40:	9105      	str	r1, [sp, #20]
   12f42:	e7ff      	b.n	12f44 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x18>
   12f44:	9805      	ldr	r0, [sp, #20]
   12f46:	f7ff ffe7 	bl	12f18 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   12f4a:	e7ff      	b.n	12f4c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x20>
   12f4c:	e7ff      	b.n	12f4e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x22>
   12f4e:	2001      	movs	r0, #1
   12f50:	900f      	str	r0, [sp, #60]	; 0x3c
   12f52:	980f      	ldr	r0, [sp, #60]	; 0x3c
   12f54:	9004      	str	r0, [sp, #16]
   12f56:	e7ff      	b.n	12f58 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x2c>
   12f58:	9804      	ldr	r0, [sp, #16]
   12f5a:	2800      	cmp	r0, #0
   12f5c:	d006      	beq.n	12f6c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x40>
   12f5e:	e7ff      	b.n	12f60 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x34>
   12f60:	9807      	ldr	r0, [sp, #28]
   12f62:	9906      	ldr	r1, [sp, #24]
   12f64:	f000 f917 	bl	13196 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   12f68:	9003      	str	r0, [sp, #12]
   12f6a:	e00e      	b.n	12f8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x5e>
   12f6c:	9807      	ldr	r0, [sp, #28]
   12f6e:	9906      	ldr	r1, [sp, #24]
   12f70:	f000 f911 	bl	13196 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   12f74:	9002      	str	r0, [sp, #8]
   12f76:	e7ff      	b.n	12f78 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x4c>
   12f78:	9805      	ldr	r0, [sp, #20]
   12f7a:	9902      	ldr	r1, [sp, #8]
   12f7c:	f7ff ffb6 	bl	12eec <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>
   12f80:	9001      	str	r0, [sp, #4]
   12f82:	e7ff      	b.n	12f84 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x58>
   12f84:	9801      	ldr	r0, [sp, #4]
   12f86:	900a      	str	r0, [sp, #40]	; 0x28
   12f88:	e006      	b.n	12f98 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   12f8a:	9805      	ldr	r0, [sp, #20]
   12f8c:	9903      	ldr	r1, [sp, #12]
   12f8e:	f000 f8df 	bl	13150 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>
   12f92:	900a      	str	r0, [sp, #40]	; 0x28
   12f94:	e7ff      	b.n	12f96 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6a>
   12f96:	e7ff      	b.n	12f98 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   12f98:	9805      	ldr	r0, [sp, #20]
   12f9a:	f7ff ff9d 	bl	12ed8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   12f9e:	9000      	str	r0, [sp, #0]
   12fa0:	e7ff      	b.n	12fa2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x76>
   12fa2:	980a      	ldr	r0, [sp, #40]	; 0x28
   12fa4:	9900      	ldr	r1, [sp, #0]
   12fa6:	9108      	str	r1, [sp, #32]
   12fa8:	9009      	str	r0, [sp, #36]	; 0x24
   12faa:	9808      	ldr	r0, [sp, #32]
   12fac:	9909      	ldr	r1, [sp, #36]	; 0x24
   12fae:	b010      	add	sp, #64	; 0x40
   12fb0:	bd80      	pop	{r7, pc}

00012fb2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>:
   12fb2:	b081      	sub	sp, #4
   12fb4:	b001      	add	sp, #4
   12fb6:	4770      	bx	lr

00012fb8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>:
   12fb8:	b580      	push	{r7, lr}
   12fba:	b08e      	sub	sp, #56	; 0x38
   12fbc:	9007      	str	r0, [sp, #28]
   12fbe:	6801      	ldr	r1, [r0, #0]
   12fc0:	9005      	str	r0, [sp, #20]
   12fc2:	4608      	mov	r0, r1
   12fc4:	f7ff ff8e 	bl	12ee4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   12fc8:	9004      	str	r0, [sp, #16]
   12fca:	e7ff      	b.n	12fcc <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x14>
   12fcc:	9804      	ldr	r0, [sp, #16]
   12fce:	f7ff ff79 	bl	12ec4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>
   12fd2:	e7ff      	b.n	12fd4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1c>
   12fd4:	e7ff      	b.n	12fd6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1e>
   12fd6:	2001      	movs	r0, #1
   12fd8:	9008      	str	r0, [sp, #32]
   12fda:	9808      	ldr	r0, [sp, #32]
   12fdc:	9003      	str	r0, [sp, #12]
   12fde:	e7ff      	b.n	12fe0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x28>
   12fe0:	9803      	ldr	r0, [sp, #12]
   12fe2:	2800      	cmp	r0, #0
   12fe4:	d007      	beq.n	12ff6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   12fe6:	e7ff      	b.n	12fe8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x30>
   12fe8:	9805      	ldr	r0, [sp, #20]
   12fea:	6840      	ldr	r0, [r0, #4]
   12fec:	f7ff ff94 	bl	12f18 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   12ff0:	e7ff      	b.n	12ff2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3a>
   12ff2:	e7ff      	b.n	12ff4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3c>
   12ff4:	e7ff      	b.n	12ff6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   12ff6:	9805      	ldr	r0, [sp, #20]
   12ff8:	6800      	ldr	r0, [r0, #0]
   12ffa:	f7ff ff73 	bl	12ee4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   12ffe:	9002      	str	r0, [sp, #8]
   13000:	e7ff      	b.n	13002 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x4a>
   13002:	9805      	ldr	r0, [sp, #20]
   13004:	6841      	ldr	r1, [r0, #4]
   13006:	9a02      	ldr	r2, [sp, #8]
   13008:	428a      	cmp	r2, r1
   1300a:	d02e      	beq.n	1306a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb2>
   1300c:	e7ff      	b.n	1300e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x56>
   1300e:	9805      	ldr	r0, [sp, #20]
   13010:	900a      	str	r0, [sp, #40]	; 0x28
   13012:	2101      	movs	r1, #1
   13014:	910b      	str	r1, [sp, #44]	; 0x2c
   13016:	910d      	str	r1, [sp, #52]	; 0x34
   13018:	990d      	ldr	r1, [sp, #52]	; 0x34
   1301a:	2900      	cmp	r1, #0
   1301c:	d015      	beq.n	1304a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x92>
   1301e:	e7ff      	b.n	13020 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x68>
   13020:	9805      	ldr	r0, [sp, #20]
   13022:	6800      	ldr	r0, [r0, #0]
   13024:	f7ff ff5e 	bl	12ee4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   13028:	900c      	str	r0, [sp, #48]	; 0x30
   1302a:	9905      	ldr	r1, [sp, #20]
   1302c:	680a      	ldr	r2, [r1, #0]
   1302e:	9001      	str	r0, [sp, #4]
   13030:	4610      	mov	r0, r2
   13032:	f7ff ff57 	bl	12ee4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   13036:	2101      	movs	r1, #1
   13038:	f7ff ff39 	bl	12eae <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>
   1303c:	f7ff ff4c 	bl	12ed8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   13040:	9905      	ldr	r1, [sp, #20]
   13042:	6008      	str	r0, [r1, #0]
   13044:	9801      	ldr	r0, [sp, #4]
   13046:	9009      	str	r0, [sp, #36]	; 0x24
   13048:	e00c      	b.n	13064 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   1304a:	9805      	ldr	r0, [sp, #20]
   1304c:	6840      	ldr	r0, [r0, #4]
   1304e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13052:	f7ff ff56 	bl	12f02 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   13056:	9905      	ldr	r1, [sp, #20]
   13058:	6048      	str	r0, [r1, #4]
   1305a:	6808      	ldr	r0, [r1, #0]
   1305c:	f7ff ff42 	bl	12ee4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   13060:	9009      	str	r0, [sp, #36]	; 0x24
   13062:	e7ff      	b.n	13064 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   13064:	9809      	ldr	r0, [sp, #36]	; 0x24
   13066:	9000      	str	r0, [sp, #0]
   13068:	e002      	b.n	13070 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb8>
   1306a:	2000      	movs	r0, #0
   1306c:	9006      	str	r0, [sp, #24]
   1306e:	e002      	b.n	13076 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   13070:	9800      	ldr	r0, [sp, #0]
   13072:	9006      	str	r0, [sp, #24]
   13074:	e7ff      	b.n	13076 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   13076:	9806      	ldr	r0, [sp, #24]
   13078:	b00e      	add	sp, #56	; 0x38
   1307a:	bd80      	pop	{r7, pc}

0001307c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>:
   1307c:	b081      	sub	sp, #4
   1307e:	b001      	add	sp, #4
   13080:	4770      	bx	lr

00013082 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E>:
   13082:	b580      	push	{r7, lr}
   13084:	b084      	sub	sp, #16
   13086:	9002      	str	r0, [sp, #8]
   13088:	9103      	str	r1, [sp, #12]
   1308a:	6800      	ldr	r0, [r0, #0]
   1308c:	f000 f81c 	bl	130c8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>
   13090:	9001      	str	r0, [sp, #4]
   13092:	e7ff      	b.n	13094 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E+0x12>
   13094:	9801      	ldr	r0, [sp, #4]
   13096:	f000 0001 	and.w	r0, r0, #1
   1309a:	b004      	add	sp, #16
   1309c:	bd80      	pop	{r7, pc}

0001309e <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>:
   1309e:	b089      	sub	sp, #36	; 0x24
   130a0:	9005      	str	r0, [sp, #20]
   130a2:	9106      	str	r1, [sp, #24]
   130a4:	9107      	str	r1, [sp, #28]
   130a6:	9907      	ldr	r1, [sp, #28]
   130a8:	9002      	str	r0, [sp, #8]
   130aa:	9101      	str	r1, [sp, #4]
   130ac:	e7ff      	b.n	130ae <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x10>
   130ae:	9802      	ldr	r0, [sp, #8]
   130b0:	9008      	str	r0, [sp, #32]
   130b2:	9908      	ldr	r1, [sp, #32]
   130b4:	9100      	str	r1, [sp, #0]
   130b6:	e7ff      	b.n	130b8 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x1a>
   130b8:	9800      	ldr	r0, [sp, #0]
   130ba:	9003      	str	r0, [sp, #12]
   130bc:	9901      	ldr	r1, [sp, #4]
   130be:	9104      	str	r1, [sp, #16]
   130c0:	9803      	ldr	r0, [sp, #12]
   130c2:	9904      	ldr	r1, [sp, #16]
   130c4:	b009      	add	sp, #36	; 0x24
   130c6:	4770      	bx	lr

000130c8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>:
   130c8:	b580      	push	{r7, lr}
   130ca:	b088      	sub	sp, #32
   130cc:	9006      	str	r0, [sp, #24]
   130ce:	9107      	str	r1, [sp, #28]
   130d0:	9004      	str	r0, [sp, #16]
   130d2:	4608      	mov	r0, r1
   130d4:	9103      	str	r1, [sp, #12]
   130d6:	f004 fb2e 	bl	17736 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   130da:	9002      	str	r0, [sp, #8]
   130dc:	e7ff      	b.n	130de <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x16>
   130de:	9802      	ldr	r0, [sp, #8]
   130e0:	07c1      	lsls	r1, r0, #31
   130e2:	2900      	cmp	r1, #0
   130e4:	d105      	bne.n	130f2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x2a>
   130e6:	e7ff      	b.n	130e8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x20>
   130e8:	9803      	ldr	r0, [sp, #12]
   130ea:	f004 fb28 	bl	1773e <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   130ee:	9001      	str	r0, [sp, #4]
   130f0:	e007      	b.n	13102 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x3a>
   130f2:	9804      	ldr	r0, [sp, #16]
   130f4:	9903      	ldr	r1, [sp, #12]
   130f6:	f005 f948 	bl	1838a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   130fa:	f88d 0017 	strb.w	r0, [sp, #23]
   130fe:	e7ff      	b.n	13100 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x38>
   13100:	e015      	b.n	1312e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   13102:	9801      	ldr	r0, [sp, #4]
   13104:	07c1      	lsls	r1, r0, #31
   13106:	2900      	cmp	r1, #0
   13108:	d107      	bne.n	1311a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x52>
   1310a:	e7ff      	b.n	1310c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x44>
   1310c:	9804      	ldr	r0, [sp, #16]
   1310e:	9903      	ldr	r1, [sp, #12]
   13110:	f005 fb30 	bl	18774 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   13114:	f88d 0017 	strb.w	r0, [sp, #23]
   13118:	e007      	b.n	1312a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x62>
   1311a:	9804      	ldr	r0, [sp, #16]
   1311c:	9903      	ldr	r1, [sp, #12]
   1311e:	f005 f99f 	bl	18460 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   13122:	f88d 0017 	strb.w	r0, [sp, #23]
   13126:	e7ff      	b.n	13128 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x60>
   13128:	e000      	b.n	1312c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   1312a:	e7ff      	b.n	1312c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   1312c:	e7ff      	b.n	1312e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   1312e:	f89d 0017 	ldrb.w	r0, [sp, #23]
   13132:	b008      	add	sp, #32
   13134:	bd80      	pop	{r7, pc}

00013136 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>:
   13136:	b086      	sub	sp, #24
   13138:	9004      	str	r0, [sp, #16]
   1313a:	9105      	str	r1, [sp, #20]
   1313c:	9002      	str	r0, [sp, #8]
   1313e:	9103      	str	r1, [sp, #12]
   13140:	9802      	ldr	r0, [sp, #8]
   13142:	9903      	ldr	r1, [sp, #12]
   13144:	9000      	str	r0, [sp, #0]
   13146:	9101      	str	r1, [sp, #4]
   13148:	9800      	ldr	r0, [sp, #0]
   1314a:	9901      	ldr	r1, [sp, #4]
   1314c:	b006      	add	sp, #24
   1314e:	4770      	bx	lr

00013150 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>:
   13150:	b580      	push	{r7, lr}
   13152:	b084      	sub	sp, #16
   13154:	9002      	str	r0, [sp, #8]
   13156:	9103      	str	r1, [sp, #12]
   13158:	f000 f805 	bl	13166 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>
   1315c:	9001      	str	r0, [sp, #4]
   1315e:	e7ff      	b.n	13160 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE+0x10>
   13160:	9801      	ldr	r0, [sp, #4]
   13162:	b004      	add	sp, #16
   13164:	bd80      	pop	{r7, pc}

00013166 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>:
   13166:	b084      	sub	sp, #16
   13168:	9001      	str	r0, [sp, #4]
   1316a:	9102      	str	r1, [sp, #8]
   1316c:	4408      	add	r0, r1
   1316e:	9003      	str	r0, [sp, #12]
   13170:	9803      	ldr	r0, [sp, #12]
   13172:	9000      	str	r0, [sp, #0]
   13174:	e7ff      	b.n	13176 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E+0x10>
   13176:	9800      	ldr	r0, [sp, #0]
   13178:	b004      	add	sp, #16
   1317a:	4770      	bx	lr

0001317c <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>:
   1317c:	b580      	push	{r7, lr}
   1317e:	b084      	sub	sp, #16
   13180:	9002      	str	r0, [sp, #8]
   13182:	9103      	str	r1, [sp, #12]
   13184:	f7ff ffd7 	bl	13136 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>
   13188:	9001      	str	r0, [sp, #4]
   1318a:	9100      	str	r1, [sp, #0]
   1318c:	e7ff      	b.n	1318e <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E+0x12>
   1318e:	9801      	ldr	r0, [sp, #4]
   13190:	9900      	ldr	r1, [sp, #0]
   13192:	b004      	add	sp, #16
   13194:	bd80      	pop	{r7, pc}

00013196 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>:
   13196:	b084      	sub	sp, #16
   13198:	9002      	str	r0, [sp, #8]
   1319a:	9103      	str	r1, [sp, #12]
   1319c:	9000      	str	r0, [sp, #0]
   1319e:	9101      	str	r1, [sp, #4]
   131a0:	9801      	ldr	r0, [sp, #4]
   131a2:	b004      	add	sp, #16
   131a4:	4770      	bx	lr

000131a6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>:
   131a6:	b082      	sub	sp, #8
   131a8:	9000      	str	r0, [sp, #0]
   131aa:	9101      	str	r1, [sp, #4]
   131ac:	b002      	add	sp, #8
   131ae:	4770      	bx	lr

000131b0 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>:
        fn from(num: i32) -> Self {
   131b0:	b083      	sub	sp, #12
   131b2:	9001      	str	r0, [sp, #4]
                ::core::mem::transmute::
   131b4:	9002      	str	r0, [sp, #8]
   131b6:	9802      	ldr	r0, [sp, #8]
   131b8:	9000      	str	r0, [sp, #0]
   131ba:	e7ff      	b.n	131bc <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E+0xc>
        }
   131bc:	9800      	ldr	r0, [sp, #0]
   131be:	b003      	add	sp, #12
   131c0:	4770      	bx	lr

000131c2 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>:
        fn from(_: ()) -> Self {
   131c2:	b081      	sub	sp, #4
   131c4:	f06f 000c 	mvn.w	r0, #12
        }
   131c8:	b001      	add	sp, #4
   131ca:	4770      	bx	lr

000131cc <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E>:
        fn fmt(&self, _fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
   131cc:	b082      	sub	sp, #8
   131ce:	9000      	str	r0, [sp, #0]
   131d0:	9101      	str	r1, [sp, #4]
   131d2:	2000      	movs	r0, #0
        }
   131d4:	b002      	add	sp, #8
   131d6:	4770      	bx	lr

000131d8 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>:
   131d8:	b082      	sub	sp, #8
   131da:	9000      	str	r0, [sp, #0]
   131dc:	9101      	str	r1, [sp, #4]
   131de:	7800      	ldrb	r0, [r0, #0]
   131e0:	7809      	ldrb	r1, [r1, #0]
   131e2:	1a40      	subs	r0, r0, r1
   131e4:	fab0 f080 	clz	r0, r0
   131e8:	0940      	lsrs	r0, r0, #5
   131ea:	b002      	add	sp, #8
   131ec:	4770      	bx	lr

000131ee <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE>:
where
    N: ArrayLength<T>,
{
    type Target = [T];

    fn deref(&self) -> &[T] {
   131ee:	b580      	push	{r7, lr}
   131f0:	b084      	sub	sp, #16
   131f2:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   131f4:	f002 ffc4 	bl	16180 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE>
   131f8:	9002      	str	r0, [sp, #8]
   131fa:	9101      	str	r1, [sp, #4]
   131fc:	e7ff      	b.n	131fe <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE+0x10>
    }
   131fe:	9802      	ldr	r0, [sp, #8]
   13200:	9901      	ldr	r1, [sp, #4]
   13202:	b004      	add	sp, #16
   13204:	bd80      	pop	{r7, pc}

00013206 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>:
    fn deref(&self) -> &[T] {
   13206:	b580      	push	{r7, lr}
   13208:	b084      	sub	sp, #16
   1320a:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   1320c:	f002 ffcd 	bl	161aa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>
   13210:	9002      	str	r0, [sp, #8]
   13212:	9101      	str	r1, [sp, #4]
   13214:	e7ff      	b.n	13216 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE+0x10>
    }
   13216:	9802      	ldr	r0, [sp, #8]
   13218:	9901      	ldr	r1, [sp, #4]
   1321a:	b004      	add	sp, #16
   1321c:	bd80      	pop	{r7, pc}

0001321e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   1321e:	b580      	push	{r7, lr}
   13220:	b084      	sub	sp, #16
   13222:	9001      	str	r0, [sp, #4]
   13224:	9102      	str	r1, [sp, #8]
   13226:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   13228:	f002 ff0c 	bl	16044 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E>
   1322c:	9000      	str	r0, [sp, #0]
   1322e:	e7ff      	b.n	13230 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E+0x12>
    }
   13230:	9800      	ldr	r0, [sp, #0]
   13232:	f000 0001 	and.w	r0, r0, #1
   13236:	b004      	add	sp, #16
   13238:	bd80      	pop	{r7, pc}

0001323a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   1323a:	b580      	push	{r7, lr}
   1323c:	b086      	sub	sp, #24
   1323e:	460a      	mov	r2, r1
   13240:	9004      	str	r0, [sp, #16]
   13242:	f88d 1017 	strb.w	r1, [sp, #23]
        self.0.push(item)
   13246:	9203      	str	r2, [sp, #12]
   13248:	f002 ff5f 	bl	1610a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>
   1324c:	9002      	str	r0, [sp, #8]
   1324e:	9101      	str	r1, [sp, #4]
   13250:	e7ff      	b.n	13252 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E+0x18>
    }
   13252:	9802      	ldr	r0, [sp, #8]
   13254:	f000 0001 	and.w	r0, r0, #1
   13258:	9901      	ldr	r1, [sp, #4]
   1325a:	b006      	add	sp, #24
   1325c:	bd80      	pop	{r7, pc}

0001325e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E>:
    pub fn clear(&mut self) {
   1325e:	b580      	push	{r7, lr}
   13260:	b082      	sub	sp, #8
   13262:	9001      	str	r0, [sp, #4]
        self.0.clear()
   13264:	f002 ff83 	bl	1616e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E>
   13268:	e7ff      	b.n	1326a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E+0xc>
    }
   1326a:	b002      	add	sp, #8
   1326c:	bd80      	pop	{r7, pc}

0001326e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>:
    pub fn clear(&mut self) {
   1326e:	b580      	push	{r7, lr}
   13270:	b082      	sub	sp, #8
   13272:	9001      	str	r0, [sp, #4]
        self.0.clear()
   13274:	f002 ff72 	bl	1615c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>
   13278:	e7ff      	b.n	1327a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E+0xc>
    }
   1327a:	b002      	add	sp, #8
   1327c:	bd80      	pop	{r7, pc}

0001327e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>:
   1327e:	b580      	push	{r7, lr}
   13280:	b088      	sub	sp, #32
   13282:	9006      	str	r0, [sp, #24]
   13284:	9107      	str	r1, [sp, #28]
   13286:	9004      	str	r0, [sp, #16]
   13288:	4608      	mov	r0, r1
   1328a:	9103      	str	r1, [sp, #12]
   1328c:	f004 fa53 	bl	17736 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   13290:	9002      	str	r0, [sp, #8]
   13292:	e7ff      	b.n	13294 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x16>
   13294:	9802      	ldr	r0, [sp, #8]
   13296:	07c1      	lsls	r1, r0, #31
   13298:	2900      	cmp	r1, #0
   1329a:	d105      	bne.n	132a8 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x2a>
   1329c:	e7ff      	b.n	1329e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x20>
   1329e:	9803      	ldr	r0, [sp, #12]
   132a0:	f004 fa4d 	bl	1773e <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   132a4:	9001      	str	r0, [sp, #4]
   132a6:	e007      	b.n	132b8 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x3a>
   132a8:	9804      	ldr	r0, [sp, #16]
   132aa:	9903      	ldr	r1, [sp, #12]
   132ac:	f004 ff51 	bl	18152 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>
   132b0:	f88d 0017 	strb.w	r0, [sp, #23]
   132b4:	e7ff      	b.n	132b6 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x38>
   132b6:	e015      	b.n	132e4 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   132b8:	9801      	ldr	r0, [sp, #4]
   132ba:	07c1      	lsls	r1, r0, #31
   132bc:	2900      	cmp	r1, #0
   132be:	d107      	bne.n	132d0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x52>
   132c0:	e7ff      	b.n	132c2 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x44>
   132c2:	9804      	ldr	r0, [sp, #16]
   132c4:	9903      	ldr	r1, [sp, #12]
   132c6:	f005 f936 	bl	18536 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>
   132ca:	f88d 0017 	strb.w	r0, [sp, #23]
   132ce:	e007      	b.n	132e0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x62>
   132d0:	9804      	ldr	r0, [sp, #16]
   132d2:	9903      	ldr	r1, [sp, #12]
   132d4:	f004 ff6c 	bl	181b0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>
   132d8:	f88d 0017 	strb.w	r0, [sp, #23]
   132dc:	e7ff      	b.n	132de <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x60>
   132de:	e000      	b.n	132e2 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   132e0:	e7ff      	b.n	132e2 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   132e2:	e7ff      	b.n	132e4 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   132e4:	f89d 0017 	ldrb.w	r0, [sp, #23]
   132e8:	b008      	add	sp, #32
   132ea:	bd80      	pop	{r7, pc}

000132ec <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>:
   132ec:	b580      	push	{r7, lr}
   132ee:	b088      	sub	sp, #32
   132f0:	9006      	str	r0, [sp, #24]
   132f2:	9107      	str	r1, [sp, #28]
   132f4:	9004      	str	r0, [sp, #16]
   132f6:	4608      	mov	r0, r1
   132f8:	9103      	str	r1, [sp, #12]
   132fa:	f004 fa1c 	bl	17736 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   132fe:	9002      	str	r0, [sp, #8]
   13300:	e7ff      	b.n	13302 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x16>
   13302:	9802      	ldr	r0, [sp, #8]
   13304:	07c1      	lsls	r1, r0, #31
   13306:	2900      	cmp	r1, #0
   13308:	d105      	bne.n	13316 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x2a>
   1330a:	e7ff      	b.n	1330c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x20>
   1330c:	9803      	ldr	r0, [sp, #12]
   1330e:	f004 fa16 	bl	1773e <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   13312:	9001      	str	r0, [sp, #4]
   13314:	e007      	b.n	13326 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x3a>
   13316:	9804      	ldr	r0, [sp, #16]
   13318:	9903      	ldr	r1, [sp, #12]
   1331a:	f005 f836 	bl	1838a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   1331e:	f88d 0017 	strb.w	r0, [sp, #23]
   13322:	e7ff      	b.n	13324 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x38>
   13324:	e015      	b.n	13352 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   13326:	9801      	ldr	r0, [sp, #4]
   13328:	07c1      	lsls	r1, r0, #31
   1332a:	2900      	cmp	r1, #0
   1332c:	d107      	bne.n	1333e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x52>
   1332e:	e7ff      	b.n	13330 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x44>
   13330:	9804      	ldr	r0, [sp, #16]
   13332:	9903      	ldr	r1, [sp, #12]
   13334:	f005 f9a4 	bl	18680 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   13338:	f88d 0017 	strb.w	r0, [sp, #23]
   1333c:	e007      	b.n	1334e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x62>
   1333e:	9804      	ldr	r0, [sp, #16]
   13340:	9903      	ldr	r1, [sp, #12]
   13342:	f005 f88d 	bl	18460 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   13346:	f88d 0017 	strb.w	r0, [sp, #23]
   1334a:	e7ff      	b.n	1334c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x60>
   1334c:	e000      	b.n	13350 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   1334e:	e7ff      	b.n	13350 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   13350:	e7ff      	b.n	13352 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   13352:	f89d 0017 	ldrb.w	r0, [sp, #23]
   13356:	b008      	add	sp, #32
   13358:	bd80      	pop	{r7, pc}

0001335a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>:
   1335a:	b580      	push	{r7, lr}
   1335c:	b088      	sub	sp, #32
   1335e:	9006      	str	r0, [sp, #24]
   13360:	9107      	str	r1, [sp, #28]
   13362:	9004      	str	r0, [sp, #16]
   13364:	4608      	mov	r0, r1
   13366:	9103      	str	r1, [sp, #12]
   13368:	f004 f9e5 	bl	17736 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   1336c:	9002      	str	r0, [sp, #8]
   1336e:	e7ff      	b.n	13370 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x16>
   13370:	9802      	ldr	r0, [sp, #8]
   13372:	07c1      	lsls	r1, r0, #31
   13374:	2900      	cmp	r1, #0
   13376:	d105      	bne.n	13384 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x2a>
   13378:	e7ff      	b.n	1337a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x20>
   1337a:	9803      	ldr	r0, [sp, #12]
   1337c:	f004 f9df 	bl	1773e <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   13380:	9001      	str	r0, [sp, #4]
   13382:	e007      	b.n	13394 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x3a>
   13384:	9804      	ldr	r0, [sp, #16]
   13386:	9903      	ldr	r1, [sp, #12]
   13388:	f004 ffff 	bl	1838a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   1338c:	f88d 0017 	strb.w	r0, [sp, #23]
   13390:	e7ff      	b.n	13392 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x38>
   13392:	e015      	b.n	133c0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   13394:	9801      	ldr	r0, [sp, #4]
   13396:	07c1      	lsls	r1, r0, #31
   13398:	2900      	cmp	r1, #0
   1339a:	d107      	bne.n	133ac <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x52>
   1339c:	e7ff      	b.n	1339e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x44>
   1339e:	9804      	ldr	r0, [sp, #16]
   133a0:	9903      	ldr	r1, [sp, #12]
   133a2:	f005 f9e7 	bl	18774 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   133a6:	f88d 0017 	strb.w	r0, [sp, #23]
   133aa:	e007      	b.n	133bc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x62>
   133ac:	9804      	ldr	r0, [sp, #16]
   133ae:	9903      	ldr	r1, [sp, #12]
   133b0:	f005 f856 	bl	18460 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   133b4:	f88d 0017 	strb.w	r0, [sp, #23]
   133b8:	e7ff      	b.n	133ba <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x60>
   133ba:	e000      	b.n	133be <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   133bc:	e7ff      	b.n	133be <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   133be:	e7ff      	b.n	133c0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   133c0:	f89d 0017 	ldrb.w	r0, [sp, #23]
   133c4:	b008      	add	sp, #32
   133c6:	bd80      	pop	{r7, pc}

000133c8 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>:
   133c8:	b580      	push	{r7, lr}
   133ca:	b084      	sub	sp, #16
   133cc:	9002      	str	r0, [sp, #8]
   133ce:	9103      	str	r1, [sp, #12]
   133d0:	6800      	ldr	r0, [r0, #0]
   133d2:	6809      	ldr	r1, [r1, #0]
   133d4:	f7ff ff00 	bl	131d8 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>
   133d8:	9001      	str	r0, [sp, #4]
   133da:	e7ff      	b.n	133dc <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E+0x14>
   133dc:	9801      	ldr	r0, [sp, #4]
   133de:	f000 0001 	and.w	r0, r0, #1
   133e2:	b004      	add	sp, #16
   133e4:	bd80      	pop	{r7, pc}

000133e6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>:

/// Non-blocking SPI transfer callback values (not used)
static mut SPI_CALLBACK: SpiCallback = SpiCallback {};

/// Init non-blocking SPI transfer
pub fn spi_noblock_init() -> MynewtResult<()> {
   133e6:	b5b0      	push	{r4, r5, r7, lr}
   133e8:	f5ad 6db5 	sub.w	sp, sp, #1448	; 0x5a8
   133ec:	2000      	movs	r0, #0
    //  Disable SPI port
    unsafe { hal::hal_spi_disable(SPI_NUM) };
   133ee:	f006 f8a3 	bl	19538 <hal_spi_disable>
   133f2:	e7ff      	b.n	133f4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xe>

    //  Configure SPI port for non-blocking SPI
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   133f4:	f240 01f8 	movw	r1, #248	; 0xf8
   133f8:	f2c2 0100 	movt	r1, #8192	; 0x2000
   133fc:	2000      	movs	r0, #0
   133fe:	f006 f859 	bl	194b4 <hal_spi_config>
   13402:	906a      	str	r0, [sp, #424]	; 0x1a8
   13404:	e7ff      	b.n	13406 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x20>
   13406:	f24f 6058 	movw	r0, #63064	; 0xf658
   1340a:	f2c0 0001 	movt	r0, #1
   1340e:	6800      	ldr	r0, [r0, #0]
   13410:	a96a      	add	r1, sp, #424	; 0x1a8
   13412:	916b      	str	r1, [sp, #428]	; 0x1ac
   13414:	906c      	str	r0, [sp, #432]	; 0x1b0
   13416:	986b      	ldr	r0, [sp, #428]	; 0x1ac
   13418:	f8cd 04fc 	str.w	r0, [sp, #1276]	; 0x4fc
   1341c:	996c      	ldr	r1, [sp, #432]	; 0x1b0
   1341e:	f8cd 1500 	str.w	r1, [sp, #1280]	; 0x500
   13422:	6802      	ldr	r2, [r0, #0]
   13424:	680b      	ldr	r3, [r1, #0]
   13426:	429a      	cmp	r2, r3
   13428:	9068      	str	r0, [sp, #416]	; 0x1a0
   1342a:	9167      	str	r1, [sp, #412]	; 0x19c
   1342c:	d10c      	bne.n	13448 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x62>
   1342e:	e7ff      	b.n	13430 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4a>
    let arg = unsafe { core::mem::transmute(&mut SPI_CALLBACK) };
   13430:	f241 60b4 	movw	r0, #5812	; 0x16b4
   13434:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13438:	f8cd 0510 	str.w	r0, [sp, #1296]	; 0x510
   1343c:	f8dd 0510 	ldr.w	r0, [sp, #1296]	; 0x510
   13440:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
   13444:	9066      	str	r0, [sp, #408]	; 0x198
   13446:	e075      	b.n	13534 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x14e>
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   13448:	f24f 60b0 	movw	r0, #63152	; 0xf6b0
   1344c:	f2c0 0001 	movt	r0, #1
   13450:	6801      	ldr	r1, [r0, #0]
   13452:	9868      	ldr	r0, [sp, #416]	; 0x1a0
   13454:	907c      	str	r0, [sp, #496]	; 0x1f0
   13456:	9a67      	ldr	r2, [sp, #412]	; 0x19c
   13458:	927d      	str	r2, [sp, #500]	; 0x1f4
   1345a:	f24f 63cc 	movw	r3, #63180	; 0xf6cc
   1345e:	f2c0 0301 	movt	r3, #1
   13462:	681b      	ldr	r3, [r3, #0]
   13464:	f24f 6cd0 	movw	ip, #63184	; 0xf6d0
   13468:	f2c0 0c01 	movt	ip, #1
   1346c:	f8dc c000 	ldr.w	ip, [ip]
   13470:	46ee      	mov	lr, sp
   13472:	2400      	movs	r4, #0
   13474:	f8ce 4000 	str.w	r4, [lr]
   13478:	a87e      	add	r0, sp, #504	; 0x1f8
   1347a:	2201      	movs	r2, #1
   1347c:	9165      	str	r1, [sp, #404]	; 0x194
   1347e:	4619      	mov	r1, r3
   13480:	4663      	mov	r3, ip
   13482:	f7fb fe6e 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13486:	e7ff      	b.n	13488 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2>
   13488:	a87c      	add	r0, sp, #496	; 0x1f0
   1348a:	9079      	str	r0, [sp, #484]	; 0x1e4
   1348c:	a87d      	add	r0, sp, #500	; 0x1f4
   1348e:	907a      	str	r0, [sp, #488]	; 0x1e8
   13490:	a87e      	add	r0, sp, #504	; 0x1f8
   13492:	907b      	str	r0, [sp, #492]	; 0x1ec
   13494:	9879      	ldr	r0, [sp, #484]	; 0x1e4
   13496:	f8cd 0504 	str.w	r0, [sp, #1284]	; 0x504
   1349a:	997a      	ldr	r1, [sp, #488]	; 0x1e8
   1349c:	f8cd 1508 	str.w	r1, [sp, #1288]	; 0x508
   134a0:	9a7b      	ldr	r2, [sp, #492]	; 0x1ec
   134a2:	f8cd 250c 	str.w	r2, [sp, #1292]	; 0x50c
   134a6:	f64f 63ef 	movw	r3, #65263	; 0xfeef
   134aa:	f2c0 0300 	movt	r3, #0
   134ae:	9164      	str	r1, [sp, #400]	; 0x190
   134b0:	4619      	mov	r1, r3
   134b2:	9263      	str	r2, [sp, #396]	; 0x18c
   134b4:	f7fc fd53 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   134b8:	9062      	str	r0, [sp, #392]	; 0x188
   134ba:	9161      	str	r1, [sp, #388]	; 0x184
   134bc:	e7ff      	b.n	134be <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xd8>
   134be:	f64f 61ef 	movw	r1, #65263	; 0xfeef
   134c2:	f2c0 0100 	movt	r1, #0
   134c6:	9864      	ldr	r0, [sp, #400]	; 0x190
   134c8:	f7fc fd49 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   134cc:	9060      	str	r0, [sp, #384]	; 0x180
   134ce:	915f      	str	r1, [sp, #380]	; 0x17c
   134d0:	e7ff      	b.n	134d2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xec>
   134d2:	f646 71c3 	movw	r1, #28611	; 0x6fc3
   134d6:	f2c0 0101 	movt	r1, #1
   134da:	9863      	ldr	r0, [sp, #396]	; 0x18c
   134dc:	f7fc fd7e 	bl	ffdc <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   134e0:	905e      	str	r0, [sp, #376]	; 0x178
   134e2:	915d      	str	r1, [sp, #372]	; 0x174
   134e4:	e7ff      	b.n	134e6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x100>
   134e6:	9862      	ldr	r0, [sp, #392]	; 0x188
   134e8:	9073      	str	r0, [sp, #460]	; 0x1cc
   134ea:	9961      	ldr	r1, [sp, #388]	; 0x184
   134ec:	9174      	str	r1, [sp, #464]	; 0x1d0
   134ee:	9a60      	ldr	r2, [sp, #384]	; 0x180
   134f0:	9275      	str	r2, [sp, #468]	; 0x1d4
   134f2:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
   134f4:	9376      	str	r3, [sp, #472]	; 0x1d8
   134f6:	f8dd c178 	ldr.w	ip, [sp, #376]	; 0x178
   134fa:	f8cd c1dc 	str.w	ip, [sp, #476]	; 0x1dc
   134fe:	f8dd e174 	ldr.w	lr, [sp, #372]	; 0x174
   13502:	f8cd e1e0 	str.w	lr, [sp, #480]	; 0x1e0
   13506:	466c      	mov	r4, sp
   13508:	2503      	movs	r5, #3
   1350a:	6025      	str	r5, [r4, #0]
   1350c:	a86d      	add	r0, sp, #436	; 0x1b4
   1350e:	ab73      	add	r3, sp, #460	; 0x1cc
   13510:	9965      	ldr	r1, [sp, #404]	; 0x194
   13512:	462a      	mov	r2, r5
   13514:	f7fb fe25 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13518:	e7ff      	b.n	1351a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x134>
   1351a:	f24f 60ec 	movw	r0, #63212	; 0xf6ec
   1351e:	f2c0 0001 	movt	r0, #1
   13522:	f003 fa60 	bl	169e6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13526:	905c      	str	r0, [sp, #368]	; 0x170
   13528:	e7ff      	b.n	1352a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x144>
   1352a:	a86d      	add	r0, sp, #436	; 0x1b4
   1352c:	995c      	ldr	r1, [sp, #368]	; 0x170
   1352e:	f003 fa97 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13532:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
        SPI_NUM, 
        Some(spi_noblock_handler), 
   13534:	f644 00fd 	movw	r0, #18685	; 0x48fd
   13538:	f2c0 0001 	movt	r0, #1
   1353c:	9085      	str	r0, [sp, #532]	; 0x214
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
   1353e:	9985      	ldr	r1, [sp, #532]	; 0x214
   13540:	2000      	movs	r0, #0
   13542:	9a66      	ldr	r2, [sp, #408]	; 0x198
   13544:	f006 f85c 	bl	19600 <hal_spi_set_txrx_cb>
   13548:	9084      	str	r0, [sp, #528]	; 0x210
   1354a:	e7ff      	b.n	1354c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x166>
        arg
    ) };
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   1354c:	f24f 6058 	movw	r0, #63064	; 0xf658
   13550:	f2c0 0001 	movt	r0, #1
   13554:	6800      	ldr	r0, [r0, #0]
   13556:	a984      	add	r1, sp, #528	; 0x210
   13558:	9186      	str	r1, [sp, #536]	; 0x218
   1355a:	9087      	str	r0, [sp, #540]	; 0x21c
   1355c:	9886      	ldr	r0, [sp, #536]	; 0x218
   1355e:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
   13562:	9987      	ldr	r1, [sp, #540]	; 0x21c
   13564:	f8cd 151c 	str.w	r1, [sp, #1308]	; 0x51c
   13568:	6802      	ldr	r2, [r0, #0]
   1356a:	680b      	ldr	r3, [r1, #0]
   1356c:	429a      	cmp	r2, r3
   1356e:	905b      	str	r0, [sp, #364]	; 0x16c
   13570:	915a      	str	r1, [sp, #360]	; 0x168
   13572:	d105      	bne.n	13580 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x19a>
   13574:	e7ff      	b.n	13576 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x190>
   13576:	2000      	movs	r0, #0

    //  Enable SPI port and set SS to high to disable SPI device
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   13578:	f005 ffb8 	bl	194ec <hal_spi_enable>
   1357c:	909f      	str	r0, [sp, #636]	; 0x27c
   1357e:	e075      	b.n	1366c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x286>
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   13580:	f24f 60b0 	movw	r0, #63152	; 0xf6b0
   13584:	f2c0 0001 	movt	r0, #1
   13588:	6801      	ldr	r1, [r0, #0]
   1358a:	985b      	ldr	r0, [sp, #364]	; 0x16c
   1358c:	9097      	str	r0, [sp, #604]	; 0x25c
   1358e:	9a5a      	ldr	r2, [sp, #360]	; 0x168
   13590:	9298      	str	r2, [sp, #608]	; 0x260
   13592:	f24f 7310 	movw	r3, #63248	; 0xf710
   13596:	f2c0 0301 	movt	r3, #1
   1359a:	681b      	ldr	r3, [r3, #0]
   1359c:	f24f 6cd0 	movw	ip, #63184	; 0xf6d0
   135a0:	f2c0 0c01 	movt	ip, #1
   135a4:	f8dc c000 	ldr.w	ip, [ip]
   135a8:	46ee      	mov	lr, sp
   135aa:	2400      	movs	r4, #0
   135ac:	f8ce 4000 	str.w	r4, [lr]
   135b0:	a899      	add	r0, sp, #612	; 0x264
   135b2:	2201      	movs	r2, #1
   135b4:	9159      	str	r1, [sp, #356]	; 0x164
   135b6:	4619      	mov	r1, r3
   135b8:	4663      	mov	r3, ip
   135ba:	f7fb fdd2 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   135be:	e7ff      	b.n	135c0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x1da>
   135c0:	a897      	add	r0, sp, #604	; 0x25c
   135c2:	9094      	str	r0, [sp, #592]	; 0x250
   135c4:	a898      	add	r0, sp, #608	; 0x260
   135c6:	9095      	str	r0, [sp, #596]	; 0x254
   135c8:	a899      	add	r0, sp, #612	; 0x264
   135ca:	9096      	str	r0, [sp, #600]	; 0x258
   135cc:	9894      	ldr	r0, [sp, #592]	; 0x250
   135ce:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
   135d2:	9995      	ldr	r1, [sp, #596]	; 0x254
   135d4:	f8cd 1524 	str.w	r1, [sp, #1316]	; 0x524
   135d8:	9a96      	ldr	r2, [sp, #600]	; 0x258
   135da:	f8cd 2528 	str.w	r2, [sp, #1320]	; 0x528
   135de:	f64f 63ef 	movw	r3, #65263	; 0xfeef
   135e2:	f2c0 0300 	movt	r3, #0
   135e6:	9158      	str	r1, [sp, #352]	; 0x160
   135e8:	4619      	mov	r1, r3
   135ea:	9257      	str	r2, [sp, #348]	; 0x15c
   135ec:	f7fc fcb7 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   135f0:	9056      	str	r0, [sp, #344]	; 0x158
   135f2:	9155      	str	r1, [sp, #340]	; 0x154
   135f4:	e7ff      	b.n	135f6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x210>
   135f6:	f64f 61ef 	movw	r1, #65263	; 0xfeef
   135fa:	f2c0 0100 	movt	r1, #0
   135fe:	9858      	ldr	r0, [sp, #352]	; 0x160
   13600:	f7fc fcad 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13604:	9054      	str	r0, [sp, #336]	; 0x150
   13606:	9153      	str	r1, [sp, #332]	; 0x14c
   13608:	e7ff      	b.n	1360a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x224>
   1360a:	f646 71c3 	movw	r1, #28611	; 0x6fc3
   1360e:	f2c0 0101 	movt	r1, #1
   13612:	9857      	ldr	r0, [sp, #348]	; 0x15c
   13614:	f7fc fce2 	bl	ffdc <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13618:	9052      	str	r0, [sp, #328]	; 0x148
   1361a:	9151      	str	r1, [sp, #324]	; 0x144
   1361c:	e7ff      	b.n	1361e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x238>
   1361e:	9856      	ldr	r0, [sp, #344]	; 0x158
   13620:	908e      	str	r0, [sp, #568]	; 0x238
   13622:	9955      	ldr	r1, [sp, #340]	; 0x154
   13624:	918f      	str	r1, [sp, #572]	; 0x23c
   13626:	9a54      	ldr	r2, [sp, #336]	; 0x150
   13628:	9290      	str	r2, [sp, #576]	; 0x240
   1362a:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   1362c:	9391      	str	r3, [sp, #580]	; 0x244
   1362e:	f8dd c148 	ldr.w	ip, [sp, #328]	; 0x148
   13632:	f8cd c248 	str.w	ip, [sp, #584]	; 0x248
   13636:	f8dd e144 	ldr.w	lr, [sp, #324]	; 0x144
   1363a:	f8cd e24c 	str.w	lr, [sp, #588]	; 0x24c
   1363e:	466c      	mov	r4, sp
   13640:	2503      	movs	r5, #3
   13642:	6025      	str	r5, [r4, #0]
   13644:	a888      	add	r0, sp, #544	; 0x220
   13646:	ab8e      	add	r3, sp, #568	; 0x238
   13648:	9959      	ldr	r1, [sp, #356]	; 0x164
   1364a:	462a      	mov	r2, r5
   1364c:	f7fb fd89 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13650:	e7ff      	b.n	13652 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x26c>
   13652:	f24f 7014 	movw	r0, #63252	; 0xf714
   13656:	f2c0 0001 	movt	r0, #1
   1365a:	f003 f9c4 	bl	169e6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1365e:	9050      	str	r0, [sp, #320]	; 0x140
   13660:	e7ff      	b.n	13662 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x27c>
   13662:	a888      	add	r0, sp, #544	; 0x220
   13664:	9950      	ldr	r1, [sp, #320]	; 0x140
   13666:	f003 f9fb 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1366a:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   1366c:	f24f 6058 	movw	r0, #63064	; 0xf658
   13670:	f2c0 0001 	movt	r0, #1
   13674:	6800      	ldr	r0, [r0, #0]
   13676:	a99f      	add	r1, sp, #636	; 0x27c
   13678:	91a0      	str	r1, [sp, #640]	; 0x280
   1367a:	90a1      	str	r0, [sp, #644]	; 0x284
   1367c:	98a0      	ldr	r0, [sp, #640]	; 0x280
   1367e:	f8cd 052c 	str.w	r0, [sp, #1324]	; 0x52c
   13682:	99a1      	ldr	r1, [sp, #644]	; 0x284
   13684:	f8cd 1530 	str.w	r1, [sp, #1328]	; 0x530
   13688:	6802      	ldr	r2, [r0, #0]
   1368a:	680b      	ldr	r3, [r1, #0]
   1368c:	429a      	cmp	r2, r3
   1368e:	904f      	str	r0, [sp, #316]	; 0x13c
   13690:	914e      	str	r1, [sp, #312]	; 0x138
   13692:	d106      	bne.n	136a2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2bc>
   13694:	e7ff      	b.n	13696 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2b0>
   13696:	2019      	movs	r0, #25
   13698:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   1369a:	f005 fafd 	bl	18c98 <hal_gpio_init_out>
   1369e:	90b9      	str	r0, [sp, #740]	; 0x2e4
   136a0:	e075      	b.n	1378e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3a8>
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   136a2:	f24f 60b0 	movw	r0, #63152	; 0xf6b0
   136a6:	f2c0 0001 	movt	r0, #1
   136aa:	6801      	ldr	r1, [r0, #0]
   136ac:	984f      	ldr	r0, [sp, #316]	; 0x13c
   136ae:	90b1      	str	r0, [sp, #708]	; 0x2c4
   136b0:	9a4e      	ldr	r2, [sp, #312]	; 0x138
   136b2:	92b2      	str	r2, [sp, #712]	; 0x2c8
   136b4:	f24f 733c 	movw	r3, #63292	; 0xf73c
   136b8:	f2c0 0301 	movt	r3, #1
   136bc:	681b      	ldr	r3, [r3, #0]
   136be:	f24f 6cd0 	movw	ip, #63184	; 0xf6d0
   136c2:	f2c0 0c01 	movt	ip, #1
   136c6:	f8dc c000 	ldr.w	ip, [ip]
   136ca:	46ee      	mov	lr, sp
   136cc:	2400      	movs	r4, #0
   136ce:	f8ce 4000 	str.w	r4, [lr]
   136d2:	a8b3      	add	r0, sp, #716	; 0x2cc
   136d4:	2201      	movs	r2, #1
   136d6:	914d      	str	r1, [sp, #308]	; 0x134
   136d8:	4619      	mov	r1, r3
   136da:	4663      	mov	r3, ip
   136dc:	f7fb fd41 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   136e0:	e7ff      	b.n	136e2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2fc>
   136e2:	a8b1      	add	r0, sp, #708	; 0x2c4
   136e4:	90ae      	str	r0, [sp, #696]	; 0x2b8
   136e6:	a8b2      	add	r0, sp, #712	; 0x2c8
   136e8:	90af      	str	r0, [sp, #700]	; 0x2bc
   136ea:	a8b3      	add	r0, sp, #716	; 0x2cc
   136ec:	90b0      	str	r0, [sp, #704]	; 0x2c0
   136ee:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
   136f0:	f8cd 0534 	str.w	r0, [sp, #1332]	; 0x534
   136f4:	99af      	ldr	r1, [sp, #700]	; 0x2bc
   136f6:	f8cd 1538 	str.w	r1, [sp, #1336]	; 0x538
   136fa:	9ab0      	ldr	r2, [sp, #704]	; 0x2c0
   136fc:	f8cd 253c 	str.w	r2, [sp, #1340]	; 0x53c
   13700:	f64f 63ef 	movw	r3, #65263	; 0xfeef
   13704:	f2c0 0300 	movt	r3, #0
   13708:	914c      	str	r1, [sp, #304]	; 0x130
   1370a:	4619      	mov	r1, r3
   1370c:	924b      	str	r2, [sp, #300]	; 0x12c
   1370e:	f7fc fc26 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13712:	904a      	str	r0, [sp, #296]	; 0x128
   13714:	9149      	str	r1, [sp, #292]	; 0x124
   13716:	e7ff      	b.n	13718 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x332>
   13718:	f64f 61ef 	movw	r1, #65263	; 0xfeef
   1371c:	f2c0 0100 	movt	r1, #0
   13720:	984c      	ldr	r0, [sp, #304]	; 0x130
   13722:	f7fc fc1c 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13726:	9048      	str	r0, [sp, #288]	; 0x120
   13728:	9147      	str	r1, [sp, #284]	; 0x11c
   1372a:	e7ff      	b.n	1372c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x346>
   1372c:	f646 71c3 	movw	r1, #28611	; 0x6fc3
   13730:	f2c0 0101 	movt	r1, #1
   13734:	984b      	ldr	r0, [sp, #300]	; 0x12c
   13736:	f7fc fc51 	bl	ffdc <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1373a:	9046      	str	r0, [sp, #280]	; 0x118
   1373c:	9145      	str	r1, [sp, #276]	; 0x114
   1373e:	e7ff      	b.n	13740 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x35a>
   13740:	984a      	ldr	r0, [sp, #296]	; 0x128
   13742:	90a8      	str	r0, [sp, #672]	; 0x2a0
   13744:	9949      	ldr	r1, [sp, #292]	; 0x124
   13746:	91a9      	str	r1, [sp, #676]	; 0x2a4
   13748:	9a48      	ldr	r2, [sp, #288]	; 0x120
   1374a:	92aa      	str	r2, [sp, #680]	; 0x2a8
   1374c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   1374e:	93ab      	str	r3, [sp, #684]	; 0x2ac
   13750:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   13754:	f8cd c2b0 	str.w	ip, [sp, #688]	; 0x2b0
   13758:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
   1375c:	f8cd e2b4 	str.w	lr, [sp, #692]	; 0x2b4
   13760:	466c      	mov	r4, sp
   13762:	2503      	movs	r5, #3
   13764:	6025      	str	r5, [r4, #0]
   13766:	a8a2      	add	r0, sp, #648	; 0x288
   13768:	aba8      	add	r3, sp, #672	; 0x2a0
   1376a:	994d      	ldr	r1, [sp, #308]	; 0x134
   1376c:	462a      	mov	r2, r5
   1376e:	f7fb fcf8 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13772:	e7ff      	b.n	13774 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x38e>
   13774:	f24f 7040 	movw	r0, #63296	; 0xf740
   13778:	f2c0 0001 	movt	r0, #1
   1377c:	f003 f933 	bl	169e6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13780:	9044      	str	r0, [sp, #272]	; 0x110
   13782:	e7ff      	b.n	13784 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x39e>
   13784:	a8a2      	add	r0, sp, #648	; 0x288
   13786:	9944      	ldr	r1, [sp, #272]	; 0x110
   13788:	f003 f96a 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1378c:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   1378e:	f24f 6058 	movw	r0, #63064	; 0xf658
   13792:	f2c0 0001 	movt	r0, #1
   13796:	6800      	ldr	r0, [r0, #0]
   13798:	a9b9      	add	r1, sp, #740	; 0x2e4
   1379a:	91ba      	str	r1, [sp, #744]	; 0x2e8
   1379c:	90bb      	str	r0, [sp, #748]	; 0x2ec
   1379e:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
   137a0:	f8cd 0540 	str.w	r0, [sp, #1344]	; 0x540
   137a4:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
   137a6:	f8cd 1544 	str.w	r1, [sp, #1348]	; 0x544
   137aa:	6802      	ldr	r2, [r0, #0]
   137ac:	680b      	ldr	r3, [r1, #0]
   137ae:	429a      	cmp	r2, r3
   137b0:	9043      	str	r0, [sp, #268]	; 0x10c
   137b2:	9142      	str	r1, [sp, #264]	; 0x108
   137b4:	d106      	bne.n	137c4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3de>
   137b6:	e7ff      	b.n	137b8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3d2>
   137b8:	2012      	movs	r0, #18
   137ba:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   137bc:	f005 fa6c 	bl	18c98 <hal_gpio_init_out>
   137c0:	90d3      	str	r0, [sp, #844]	; 0x34c
   137c2:	e075      	b.n	138b0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4ca>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   137c4:	f24f 60b0 	movw	r0, #63152	; 0xf6b0
   137c8:	f2c0 0001 	movt	r0, #1
   137cc:	6801      	ldr	r1, [r0, #0]
   137ce:	9843      	ldr	r0, [sp, #268]	; 0x10c
   137d0:	90cb      	str	r0, [sp, #812]	; 0x32c
   137d2:	9a42      	ldr	r2, [sp, #264]	; 0x108
   137d4:	92cc      	str	r2, [sp, #816]	; 0x330
   137d6:	f24f 7364 	movw	r3, #63332	; 0xf764
   137da:	f2c0 0301 	movt	r3, #1
   137de:	681b      	ldr	r3, [r3, #0]
   137e0:	f24f 6cd0 	movw	ip, #63184	; 0xf6d0
   137e4:	f2c0 0c01 	movt	ip, #1
   137e8:	f8dc c000 	ldr.w	ip, [ip]
   137ec:	46ee      	mov	lr, sp
   137ee:	2400      	movs	r4, #0
   137f0:	f8ce 4000 	str.w	r4, [lr]
   137f4:	a8cd      	add	r0, sp, #820	; 0x334
   137f6:	2201      	movs	r2, #1
   137f8:	9141      	str	r1, [sp, #260]	; 0x104
   137fa:	4619      	mov	r1, r3
   137fc:	4663      	mov	r3, ip
   137fe:	f7fb fcb0 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13802:	e7ff      	b.n	13804 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x41e>
   13804:	a8cb      	add	r0, sp, #812	; 0x32c
   13806:	90c8      	str	r0, [sp, #800]	; 0x320
   13808:	a8cc      	add	r0, sp, #816	; 0x330
   1380a:	90c9      	str	r0, [sp, #804]	; 0x324
   1380c:	a8cd      	add	r0, sp, #820	; 0x334
   1380e:	90ca      	str	r0, [sp, #808]	; 0x328
   13810:	98c8      	ldr	r0, [sp, #800]	; 0x320
   13812:	f8cd 0548 	str.w	r0, [sp, #1352]	; 0x548
   13816:	99c9      	ldr	r1, [sp, #804]	; 0x324
   13818:	f8cd 154c 	str.w	r1, [sp, #1356]	; 0x54c
   1381c:	9aca      	ldr	r2, [sp, #808]	; 0x328
   1381e:	f8cd 2550 	str.w	r2, [sp, #1360]	; 0x550
   13822:	f64f 63ef 	movw	r3, #65263	; 0xfeef
   13826:	f2c0 0300 	movt	r3, #0
   1382a:	9140      	str	r1, [sp, #256]	; 0x100
   1382c:	4619      	mov	r1, r3
   1382e:	923f      	str	r2, [sp, #252]	; 0xfc
   13830:	f7fc fb95 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13834:	903e      	str	r0, [sp, #248]	; 0xf8
   13836:	913d      	str	r1, [sp, #244]	; 0xf4
   13838:	e7ff      	b.n	1383a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x454>
   1383a:	f64f 61ef 	movw	r1, #65263	; 0xfeef
   1383e:	f2c0 0100 	movt	r1, #0
   13842:	9840      	ldr	r0, [sp, #256]	; 0x100
   13844:	f7fc fb8b 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13848:	903c      	str	r0, [sp, #240]	; 0xf0
   1384a:	913b      	str	r1, [sp, #236]	; 0xec
   1384c:	e7ff      	b.n	1384e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x468>
   1384e:	f646 71c3 	movw	r1, #28611	; 0x6fc3
   13852:	f2c0 0101 	movt	r1, #1
   13856:	983f      	ldr	r0, [sp, #252]	; 0xfc
   13858:	f7fc fbc0 	bl	ffdc <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1385c:	903a      	str	r0, [sp, #232]	; 0xe8
   1385e:	9139      	str	r1, [sp, #228]	; 0xe4
   13860:	e7ff      	b.n	13862 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x47c>
   13862:	983e      	ldr	r0, [sp, #248]	; 0xf8
   13864:	90c2      	str	r0, [sp, #776]	; 0x308
   13866:	993d      	ldr	r1, [sp, #244]	; 0xf4
   13868:	91c3      	str	r1, [sp, #780]	; 0x30c
   1386a:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   1386c:	92c4      	str	r2, [sp, #784]	; 0x310
   1386e:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   13870:	93c5      	str	r3, [sp, #788]	; 0x314
   13872:	f8dd c0e8 	ldr.w	ip, [sp, #232]	; 0xe8
   13876:	f8cd c318 	str.w	ip, [sp, #792]	; 0x318
   1387a:	f8dd e0e4 	ldr.w	lr, [sp, #228]	; 0xe4
   1387e:	f8cd e31c 	str.w	lr, [sp, #796]	; 0x31c
   13882:	466c      	mov	r4, sp
   13884:	2503      	movs	r5, #3
   13886:	6025      	str	r5, [r4, #0]
   13888:	a8bc      	add	r0, sp, #752	; 0x2f0
   1388a:	abc2      	add	r3, sp, #776	; 0x308
   1388c:	9941      	ldr	r1, [sp, #260]	; 0x104
   1388e:	462a      	mov	r2, r5
   13890:	f7fb fc67 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13894:	e7ff      	b.n	13896 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4b0>
   13896:	f24f 7068 	movw	r0, #63336	; 0xf768
   1389a:	f2c0 0001 	movt	r0, #1
   1389e:	f003 f8a2 	bl	169e6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   138a2:	9038      	str	r0, [sp, #224]	; 0xe0
   138a4:	e7ff      	b.n	138a6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4c0>
   138a6:	a8bc      	add	r0, sp, #752	; 0x2f0
   138a8:	9938      	ldr	r1, [sp, #224]	; 0xe0
   138aa:	f003 f8d9 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   138ae:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   138b0:	f24f 6058 	movw	r0, #63064	; 0xf658
   138b4:	f2c0 0001 	movt	r0, #1
   138b8:	6800      	ldr	r0, [r0, #0]
   138ba:	a9d3      	add	r1, sp, #844	; 0x34c
   138bc:	91d4      	str	r1, [sp, #848]	; 0x350
   138be:	90d5      	str	r0, [sp, #852]	; 0x354
   138c0:	98d4      	ldr	r0, [sp, #848]	; 0x350
   138c2:	f8cd 0554 	str.w	r0, [sp, #1364]	; 0x554
   138c6:	99d5      	ldr	r1, [sp, #852]	; 0x354
   138c8:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
   138cc:	6802      	ldr	r2, [r0, #0]
   138ce:	680b      	ldr	r3, [r1, #0]
   138d0:	429a      	cmp	r2, r3
   138d2:	9037      	str	r0, [sp, #220]	; 0xdc
   138d4:	9136      	str	r1, [sp, #216]	; 0xd8
   138d6:	d107      	bne.n	138e8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x502>
   138d8:	e7ff      	b.n	138da <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4f4>

    //  Create Event Queue and Mbuf (Data) Queue that will store the SPI requests
    unsafe { os::os_eventq_init(&mut SPI_EVENT_QUEUE) };
   138da:	f241 2054 	movw	r0, #4692	; 0x1254
   138de:	f2c2 0000 	movt	r0, #8192	; 0x2000
   138e2:	f006 fae3 	bl	19eac <os_eventq_init>
   138e6:	e075      	b.n	139d4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5ee>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   138e8:	f24f 60b0 	movw	r0, #63152	; 0xf6b0
   138ec:	f2c0 0001 	movt	r0, #1
   138f0:	6801      	ldr	r1, [r0, #0]
   138f2:	9837      	ldr	r0, [sp, #220]	; 0xdc
   138f4:	90e5      	str	r0, [sp, #916]	; 0x394
   138f6:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   138f8:	92e6      	str	r2, [sp, #920]	; 0x398
   138fa:	f24f 7364 	movw	r3, #63332	; 0xf764
   138fe:	f2c0 0301 	movt	r3, #1
   13902:	681b      	ldr	r3, [r3, #0]
   13904:	f24f 6cd0 	movw	ip, #63184	; 0xf6d0
   13908:	f2c0 0c01 	movt	ip, #1
   1390c:	f8dc c000 	ldr.w	ip, [ip]
   13910:	46ee      	mov	lr, sp
   13912:	2400      	movs	r4, #0
   13914:	f8ce 4000 	str.w	r4, [lr]
   13918:	a8e7      	add	r0, sp, #924	; 0x39c
   1391a:	2201      	movs	r2, #1
   1391c:	9135      	str	r1, [sp, #212]	; 0xd4
   1391e:	4619      	mov	r1, r3
   13920:	4663      	mov	r3, ip
   13922:	f7fb fc1e 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13926:	e7ff      	b.n	13928 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x542>
   13928:	a8e5      	add	r0, sp, #916	; 0x394
   1392a:	90e2      	str	r0, [sp, #904]	; 0x388
   1392c:	a8e6      	add	r0, sp, #920	; 0x398
   1392e:	90e3      	str	r0, [sp, #908]	; 0x38c
   13930:	a8e7      	add	r0, sp, #924	; 0x39c
   13932:	90e4      	str	r0, [sp, #912]	; 0x390
   13934:	98e2      	ldr	r0, [sp, #904]	; 0x388
   13936:	f8cd 055c 	str.w	r0, [sp, #1372]	; 0x55c
   1393a:	99e3      	ldr	r1, [sp, #908]	; 0x38c
   1393c:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560
   13940:	9ae4      	ldr	r2, [sp, #912]	; 0x390
   13942:	f8cd 2564 	str.w	r2, [sp, #1380]	; 0x564
   13946:	f64f 63ef 	movw	r3, #65263	; 0xfeef
   1394a:	f2c0 0300 	movt	r3, #0
   1394e:	9134      	str	r1, [sp, #208]	; 0xd0
   13950:	4619      	mov	r1, r3
   13952:	9233      	str	r2, [sp, #204]	; 0xcc
   13954:	f7fc fb03 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13958:	9032      	str	r0, [sp, #200]	; 0xc8
   1395a:	9131      	str	r1, [sp, #196]	; 0xc4
   1395c:	e7ff      	b.n	1395e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x578>
   1395e:	f64f 61ef 	movw	r1, #65263	; 0xfeef
   13962:	f2c0 0100 	movt	r1, #0
   13966:	9834      	ldr	r0, [sp, #208]	; 0xd0
   13968:	f7fc faf9 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1396c:	9030      	str	r0, [sp, #192]	; 0xc0
   1396e:	912f      	str	r1, [sp, #188]	; 0xbc
   13970:	e7ff      	b.n	13972 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x58c>
   13972:	f646 71c3 	movw	r1, #28611	; 0x6fc3
   13976:	f2c0 0101 	movt	r1, #1
   1397a:	9833      	ldr	r0, [sp, #204]	; 0xcc
   1397c:	f7fc fb2e 	bl	ffdc <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13980:	902e      	str	r0, [sp, #184]	; 0xb8
   13982:	912d      	str	r1, [sp, #180]	; 0xb4
   13984:	e7ff      	b.n	13986 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5a0>
   13986:	9832      	ldr	r0, [sp, #200]	; 0xc8
   13988:	90dc      	str	r0, [sp, #880]	; 0x370
   1398a:	9931      	ldr	r1, [sp, #196]	; 0xc4
   1398c:	91dd      	str	r1, [sp, #884]	; 0x374
   1398e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   13990:	92de      	str	r2, [sp, #888]	; 0x378
   13992:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   13994:	93df      	str	r3, [sp, #892]	; 0x37c
   13996:	f8dd c0b8 	ldr.w	ip, [sp, #184]	; 0xb8
   1399a:	f8cd c380 	str.w	ip, [sp, #896]	; 0x380
   1399e:	f8dd e0b4 	ldr.w	lr, [sp, #180]	; 0xb4
   139a2:	f8cd e384 	str.w	lr, [sp, #900]	; 0x384
   139a6:	466c      	mov	r4, sp
   139a8:	2503      	movs	r5, #3
   139aa:	6025      	str	r5, [r4, #0]
   139ac:	a8d6      	add	r0, sp, #856	; 0x358
   139ae:	abdc      	add	r3, sp, #880	; 0x370
   139b0:	9935      	ldr	r1, [sp, #212]	; 0xd4
   139b2:	462a      	mov	r2, r5
   139b4:	f7fb fbd5 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   139b8:	e7ff      	b.n	139ba <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5d4>
   139ba:	f24f 7078 	movw	r0, #63352	; 0xf778
   139be:	f2c0 0001 	movt	r0, #1
   139c2:	f003 f810 	bl	169e6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   139c6:	902c      	str	r0, [sp, #176]	; 0xb0
   139c8:	e7ff      	b.n	139ca <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5e4>
   139ca:	a8d6      	add	r0, sp, #856	; 0x358
   139cc:	992c      	ldr	r1, [sp, #176]	; 0xb0
   139ce:	f003 f847 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   139d2:	defe      	udf	#254	; 0xfe
    let rc = unsafe { os::os_mqueue_init(
        &mut SPI_DATA_QUEUE, 
        Some(spi_event_callback), 
   139d4:	f244 20df 	movw	r0, #17119	; 0x42df
   139d8:	f2c0 0001 	movt	r0, #1
   139dc:	90ee      	str	r0, [sp, #952]	; 0x3b8
    let rc = unsafe { os::os_mqueue_init(
   139de:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
   139e0:	f241 203c 	movw	r0, #4668	; 0x123c
   139e4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   139e8:	2200      	movs	r2, #0
   139ea:	f006 fb0d 	bl	1a008 <os_mqueue_init>
   139ee:	90ed      	str	r0, [sp, #948]	; 0x3b4
   139f0:	e7ff      	b.n	139f2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x60c>
        NULL
    ) };
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   139f2:	f24f 6058 	movw	r0, #63064	; 0xf658
   139f6:	f2c0 0001 	movt	r0, #1
   139fa:	6800      	ldr	r0, [r0, #0]
   139fc:	a9ed      	add	r1, sp, #948	; 0x3b4
   139fe:	91ef      	str	r1, [sp, #956]	; 0x3bc
   13a00:	90f0      	str	r0, [sp, #960]	; 0x3c0
   13a02:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
   13a04:	f8cd 0568 	str.w	r0, [sp, #1384]	; 0x568
   13a08:	99f0      	ldr	r1, [sp, #960]	; 0x3c0
   13a0a:	f8cd 156c 	str.w	r1, [sp, #1388]	; 0x56c
   13a0e:	6802      	ldr	r2, [r0, #0]
   13a10:	680b      	ldr	r3, [r1, #0]
   13a12:	429a      	cmp	r2, r3
   13a14:	902b      	str	r0, [sp, #172]	; 0xac
   13a16:	912a      	str	r1, [sp, #168]	; 0xa8
   13a18:	d10a      	bne.n	13a30 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x64a>
   13a1a:	e7ff      	b.n	13a1c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x636>

    //  Create the Semaphore that will signal whether the SPI request has completed
    let rc = unsafe { os::os_sem_init(&mut SPI_SEM, 0) };  //  Init to 0 tokens, so caller will block until SPI request is completed.
   13a1c:	f241 202c 	movw	r0, #4652	; 0x122c
   13a20:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13a24:	2100      	movs	r1, #0
   13a26:	f006 ffe9 	bl	1a9fc <os_sem_init>
   13a2a:	f8cd 0420 	str.w	r0, [sp, #1056]	; 0x420
   13a2e:	e07b      	b.n	13b28 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x742>
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   13a30:	f24f 60b0 	movw	r0, #63152	; 0xf6b0
   13a34:	f2c0 0001 	movt	r0, #1
   13a38:	6801      	ldr	r1, [r0, #0]
   13a3a:	982b      	ldr	r0, [sp, #172]	; 0xac
   13a3c:	f8cd 0400 	str.w	r0, [sp, #1024]	; 0x400
   13a40:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   13a42:	f8cd 2404 	str.w	r2, [sp, #1028]	; 0x404
   13a46:	f24f 739c 	movw	r3, #63388	; 0xf79c
   13a4a:	f2c0 0301 	movt	r3, #1
   13a4e:	681b      	ldr	r3, [r3, #0]
   13a50:	f24f 6cd0 	movw	ip, #63184	; 0xf6d0
   13a54:	f2c0 0c01 	movt	ip, #1
   13a58:	f8dc c000 	ldr.w	ip, [ip]
   13a5c:	46ee      	mov	lr, sp
   13a5e:	2400      	movs	r4, #0
   13a60:	f8ce 4000 	str.w	r4, [lr]
   13a64:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   13a68:	2201      	movs	r2, #1
   13a6a:	9129      	str	r1, [sp, #164]	; 0xa4
   13a6c:	4619      	mov	r1, r3
   13a6e:	4663      	mov	r3, ip
   13a70:	f7fb fb77 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13a74:	e7ff      	b.n	13a76 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x690>
   13a76:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
   13a7a:	90fd      	str	r0, [sp, #1012]	; 0x3f4
   13a7c:	f20d 4004 	addw	r0, sp, #1028	; 0x404
   13a80:	90fe      	str	r0, [sp, #1016]	; 0x3f8
   13a82:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   13a86:	90ff      	str	r0, [sp, #1020]	; 0x3fc
   13a88:	98fd      	ldr	r0, [sp, #1012]	; 0x3f4
   13a8a:	f8cd 0570 	str.w	r0, [sp, #1392]	; 0x570
   13a8e:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
   13a90:	f8cd 1574 	str.w	r1, [sp, #1396]	; 0x574
   13a94:	9aff      	ldr	r2, [sp, #1020]	; 0x3fc
   13a96:	f8cd 2578 	str.w	r2, [sp, #1400]	; 0x578
   13a9a:	f64f 63ef 	movw	r3, #65263	; 0xfeef
   13a9e:	f2c0 0300 	movt	r3, #0
   13aa2:	9128      	str	r1, [sp, #160]	; 0xa0
   13aa4:	4619      	mov	r1, r3
   13aa6:	9227      	str	r2, [sp, #156]	; 0x9c
   13aa8:	f7fc fa59 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13aac:	9026      	str	r0, [sp, #152]	; 0x98
   13aae:	9125      	str	r1, [sp, #148]	; 0x94
   13ab0:	e7ff      	b.n	13ab2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6cc>
   13ab2:	f64f 61ef 	movw	r1, #65263	; 0xfeef
   13ab6:	f2c0 0100 	movt	r1, #0
   13aba:	9828      	ldr	r0, [sp, #160]	; 0xa0
   13abc:	f7fc fa4f 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13ac0:	9024      	str	r0, [sp, #144]	; 0x90
   13ac2:	9123      	str	r1, [sp, #140]	; 0x8c
   13ac4:	e7ff      	b.n	13ac6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6e0>
   13ac6:	f646 71c3 	movw	r1, #28611	; 0x6fc3
   13aca:	f2c0 0101 	movt	r1, #1
   13ace:	9827      	ldr	r0, [sp, #156]	; 0x9c
   13ad0:	f7fc fa84 	bl	ffdc <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13ad4:	9022      	str	r0, [sp, #136]	; 0x88
   13ad6:	9121      	str	r1, [sp, #132]	; 0x84
   13ad8:	e7ff      	b.n	13ada <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6f4>
   13ada:	9826      	ldr	r0, [sp, #152]	; 0x98
   13adc:	90f7      	str	r0, [sp, #988]	; 0x3dc
   13ade:	9925      	ldr	r1, [sp, #148]	; 0x94
   13ae0:	91f8      	str	r1, [sp, #992]	; 0x3e0
   13ae2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   13ae4:	92f9      	str	r2, [sp, #996]	; 0x3e4
   13ae6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   13ae8:	93fa      	str	r3, [sp, #1000]	; 0x3e8
   13aea:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
   13aee:	f8cd c3ec 	str.w	ip, [sp, #1004]	; 0x3ec
   13af2:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
   13af6:	f8cd e3f0 	str.w	lr, [sp, #1008]	; 0x3f0
   13afa:	466c      	mov	r4, sp
   13afc:	2503      	movs	r5, #3
   13afe:	6025      	str	r5, [r4, #0]
   13b00:	a8f1      	add	r0, sp, #964	; 0x3c4
   13b02:	abf7      	add	r3, sp, #988	; 0x3dc
   13b04:	9929      	ldr	r1, [sp, #164]	; 0xa4
   13b06:	462a      	mov	r2, r5
   13b08:	f7fb fb2b 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13b0c:	e7ff      	b.n	13b0e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x728>
   13b0e:	f24f 70a0 	movw	r0, #63392	; 0xf7a0
   13b12:	f2c0 0001 	movt	r0, #1
   13b16:	f002 ff66 	bl	169e6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13b1a:	9020      	str	r0, [sp, #128]	; 0x80
   13b1c:	e7ff      	b.n	13b1e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x738>
   13b1e:	a8f1      	add	r0, sp, #964	; 0x3c4
   13b20:	9920      	ldr	r1, [sp, #128]	; 0x80
   13b22:	f002 ff9d 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13b26:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13b28:	f24f 6058 	movw	r0, #63064	; 0xf658
   13b2c:	f2c0 0001 	movt	r0, #1
   13b30:	6800      	ldr	r0, [r0, #0]
   13b32:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
   13b36:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
   13b3a:	f8cd 0428 	str.w	r0, [sp, #1064]	; 0x428
   13b3e:	f8dd 0424 	ldr.w	r0, [sp, #1060]	; 0x424
   13b42:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
   13b46:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   13b4a:	f8cd 1580 	str.w	r1, [sp, #1408]	; 0x580
   13b4e:	6802      	ldr	r2, [r0, #0]
   13b50:	680b      	ldr	r3, [r1, #0]
   13b52:	429a      	cmp	r2, r3
   13b54:	901f      	str	r0, [sp, #124]	; 0x7c
   13b56:	911e      	str	r1, [sp, #120]	; 0x78
   13b58:	d10a      	bne.n	13b70 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x78a>
   13b5a:	e7ff      	b.n	13b5c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x776>

    //  Create the Semaphore that will throttle the number of queued SPI requests
    let rc = unsafe { os::os_sem_init(&mut SPI_THROTTLE_SEM, 2) };  //  Only max 2 requests queued, the next request will block
   13b5c:	f241 2034 	movw	r0, #4660	; 0x1234
   13b60:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13b64:	2102      	movs	r1, #2
   13b66:	f006 ff49 	bl	1a9fc <os_sem_init>
   13b6a:	f8cd 0488 	str.w	r0, [sp, #1160]	; 0x488
   13b6e:	e088      	b.n	13c82 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x89c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13b70:	f24f 60b0 	movw	r0, #63152	; 0xf6b0
   13b74:	f2c0 0001 	movt	r0, #1
   13b78:	6801      	ldr	r1, [r0, #0]
   13b7a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13b7c:	f8cd 0468 	str.w	r0, [sp, #1128]	; 0x468
   13b80:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13b82:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
   13b86:	f24f 73c8 	movw	r3, #63432	; 0xf7c8
   13b8a:	f2c0 0301 	movt	r3, #1
   13b8e:	681b      	ldr	r3, [r3, #0]
   13b90:	f24f 6cd0 	movw	ip, #63184	; 0xf6d0
   13b94:	f2c0 0c01 	movt	ip, #1
   13b98:	f8dc c000 	ldr.w	ip, [ip]
   13b9c:	46ee      	mov	lr, sp
   13b9e:	2400      	movs	r4, #0
   13ba0:	f8ce 4000 	str.w	r4, [lr]
   13ba4:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   13ba8:	2201      	movs	r2, #1
   13baa:	911d      	str	r1, [sp, #116]	; 0x74
   13bac:	4619      	mov	r1, r3
   13bae:	4663      	mov	r3, ip
   13bb0:	f7fb fad7 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13bb4:	e7ff      	b.n	13bb6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x7d0>
   13bb6:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
   13bba:	f8cd 045c 	str.w	r0, [sp, #1116]	; 0x45c
   13bbe:	f20d 406c 	addw	r0, sp, #1132	; 0x46c
   13bc2:	f8cd 0460 	str.w	r0, [sp, #1120]	; 0x460
   13bc6:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   13bca:	f8cd 0464 	str.w	r0, [sp, #1124]	; 0x464
   13bce:	f8dd 045c 	ldr.w	r0, [sp, #1116]	; 0x45c
   13bd2:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
   13bd6:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   13bda:	f8cd 1588 	str.w	r1, [sp, #1416]	; 0x588
   13bde:	f8dd 2464 	ldr.w	r2, [sp, #1124]	; 0x464
   13be2:	f8cd 258c 	str.w	r2, [sp, #1420]	; 0x58c
   13be6:	f64f 7343 	movw	r3, #65347	; 0xff43
   13bea:	f2c0 0300 	movt	r3, #0
   13bee:	911c      	str	r1, [sp, #112]	; 0x70
   13bf0:	4619      	mov	r1, r3
   13bf2:	921b      	str	r2, [sp, #108]	; 0x6c
   13bf4:	f7fc f9dd 	bl	ffb2 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13bf8:	901a      	str	r0, [sp, #104]	; 0x68
   13bfa:	9119      	str	r1, [sp, #100]	; 0x64
   13bfc:	e7ff      	b.n	13bfe <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x818>
   13bfe:	f64f 7143 	movw	r1, #65347	; 0xff43
   13c02:	f2c0 0100 	movt	r1, #0
   13c06:	981c      	ldr	r0, [sp, #112]	; 0x70
   13c08:	f7fc f9d3 	bl	ffb2 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13c0c:	9018      	str	r0, [sp, #96]	; 0x60
   13c0e:	9117      	str	r1, [sp, #92]	; 0x5c
   13c10:	e7ff      	b.n	13c12 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x82c>
   13c12:	f646 71c3 	movw	r1, #28611	; 0x6fc3
   13c16:	f2c0 0101 	movt	r1, #1
   13c1a:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13c1c:	f7fc f9de 	bl	ffdc <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13c20:	9016      	str	r0, [sp, #88]	; 0x58
   13c22:	9115      	str	r1, [sp, #84]	; 0x54
   13c24:	e7ff      	b.n	13c26 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x840>
   13c26:	981a      	ldr	r0, [sp, #104]	; 0x68
   13c28:	f8cd 0444 	str.w	r0, [sp, #1092]	; 0x444
   13c2c:	9919      	ldr	r1, [sp, #100]	; 0x64
   13c2e:	f8cd 1448 	str.w	r1, [sp, #1096]	; 0x448
   13c32:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13c34:	f8cd 244c 	str.w	r2, [sp, #1100]	; 0x44c
   13c38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   13c3a:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
   13c3e:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
   13c42:	f8cd c454 	str.w	ip, [sp, #1108]	; 0x454
   13c46:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
   13c4a:	f8cd e458 	str.w	lr, [sp, #1112]	; 0x458
   13c4e:	466c      	mov	r4, sp
   13c50:	2503      	movs	r5, #3
   13c52:	6025      	str	r5, [r4, #0]
   13c54:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   13c58:	f20d 4344 	addw	r3, sp, #1092	; 0x444
   13c5c:	991d      	ldr	r1, [sp, #116]	; 0x74
   13c5e:	462a      	mov	r2, r5
   13c60:	f7fb fa7f 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13c64:	e7ff      	b.n	13c66 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x880>
   13c66:	f24f 70cc 	movw	r0, #63436	; 0xf7cc
   13c6a:	f2c0 0001 	movt	r0, #1
   13c6e:	f002 feba 	bl	169e6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13c72:	9014      	str	r0, [sp, #80]	; 0x50
   13c74:	e7ff      	b.n	13c76 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x890>
   13c76:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   13c7a:	9914      	ldr	r1, [sp, #80]	; 0x50
   13c7c:	f002 fef0 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13c80:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13c82:	f24f 6058 	movw	r0, #63064	; 0xf658
   13c86:	f2c0 0001 	movt	r0, #1
   13c8a:	6800      	ldr	r0, [r0, #0]
   13c8c:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
   13c90:	f8cd 148c 	str.w	r1, [sp, #1164]	; 0x48c
   13c94:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
   13c98:	f8dd 048c 	ldr.w	r0, [sp, #1164]	; 0x48c
   13c9c:	f8cd 0590 	str.w	r0, [sp, #1424]	; 0x590
   13ca0:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   13ca4:	f8cd 1594 	str.w	r1, [sp, #1428]	; 0x594
   13ca8:	6802      	ldr	r2, [r0, #0]
   13caa:	680b      	ldr	r3, [r1, #0]
   13cac:	429a      	cmp	r2, r3
   13cae:	9013      	str	r0, [sp, #76]	; 0x4c
   13cb0:	9112      	str	r1, [sp, #72]	; 0x48
   13cb2:	d125      	bne.n	13d00 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x91a>
   13cb4:	e7ff      	b.n	13cb6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x8d0>
    
    //  Create a task to send SPI requests sequentially from the SPI Event Queue and Mbuf Queue
    os::task_init(                //  Create a new task and start it...
        unsafe { &mut SPI_TASK }, //  Task object will be saved here
        &init_strn!( "spi" ),     //  Name of task
   13cb6:	f24f 70f8 	movw	r0, #63480	; 0xf7f8
   13cba:	f2c0 0001 	movt	r0, #1
   13cbe:	6801      	ldr	r1, [r0, #0]
        Some( spi_task_func ),    //  Function to execute when task starts
   13cc0:	f643 6061 	movw	r0, #15969	; 0x3e61
   13cc4:	f2c0 0001 	movt	r0, #1
   13cc8:	f8cd 04f4 	str.w	r0, [sp, #1268]	; 0x4f4
    os::task_init(                //  Create a new task and start it...
   13ccc:	f8dd 24f4 	ldr.w	r2, [sp, #1268]	; 0x4f4
   13cd0:	4668      	mov	r0, sp
   13cd2:	f44f 7380 	mov.w	r3, #256	; 0x100
   13cd6:	6103      	str	r3, [r0, #16]
   13cd8:	60c3      	str	r3, [r0, #12]
   13cda:	f241 23b4 	movw	r3, #4788	; 0x12b4
   13cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ce2:	6083      	str	r3, [r0, #8]
   13ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13ce8:	6043      	str	r3, [r0, #4]
   13cea:	230a      	movs	r3, #10
   13cec:	6003      	str	r3, [r0, #0]
   13cee:	f241 2064 	movw	r0, #4708	; 0x1264
   13cf2:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13cf6:	2300      	movs	r3, #0
   13cf8:	f7fb fb31 	bl	f35e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
   13cfc:	9011      	str	r0, [sp, #68]	; 0x44
   13cfe:	e088      	b.n	13e12 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13d00:	f24f 60b0 	movw	r0, #63152	; 0xf6b0
   13d04:	f2c0 0001 	movt	r0, #1
   13d08:	6801      	ldr	r1, [r0, #0]
   13d0a:	9813      	ldr	r0, [sp, #76]	; 0x4c
   13d0c:	f8cd 04d0 	str.w	r0, [sp, #1232]	; 0x4d0
   13d10:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13d12:	f8cd 24d4 	str.w	r2, [sp, #1236]	; 0x4d4
   13d16:	f24f 73c8 	movw	r3, #63432	; 0xf7c8
   13d1a:	f2c0 0301 	movt	r3, #1
   13d1e:	681b      	ldr	r3, [r3, #0]
   13d20:	f24f 6cd0 	movw	ip, #63184	; 0xf6d0
   13d24:	f2c0 0c01 	movt	ip, #1
   13d28:	f8dc c000 	ldr.w	ip, [ip]
   13d2c:	46ee      	mov	lr, sp
   13d2e:	2400      	movs	r4, #0
   13d30:	f8ce 4000 	str.w	r4, [lr]
   13d34:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   13d38:	2201      	movs	r2, #1
   13d3a:	9110      	str	r1, [sp, #64]	; 0x40
   13d3c:	4619      	mov	r1, r3
   13d3e:	4663      	mov	r3, ip
   13d40:	f7fb fa0f 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13d44:	e7ff      	b.n	13d46 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x960>
   13d46:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
   13d4a:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
   13d4e:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
   13d52:	f8cd 04c8 	str.w	r0, [sp, #1224]	; 0x4c8
   13d56:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   13d5a:	f8cd 04cc 	str.w	r0, [sp, #1228]	; 0x4cc
   13d5e:	f8dd 04c4 	ldr.w	r0, [sp, #1220]	; 0x4c4
   13d62:	f8cd 0598 	str.w	r0, [sp, #1432]	; 0x598
   13d66:	f8dd 14c8 	ldr.w	r1, [sp, #1224]	; 0x4c8
   13d6a:	f8cd 159c 	str.w	r1, [sp, #1436]	; 0x59c
   13d6e:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
   13d72:	f8cd 25a0 	str.w	r2, [sp, #1440]	; 0x5a0
   13d76:	f64f 7343 	movw	r3, #65347	; 0xff43
   13d7a:	f2c0 0300 	movt	r3, #0
   13d7e:	910f      	str	r1, [sp, #60]	; 0x3c
   13d80:	4619      	mov	r1, r3
   13d82:	920e      	str	r2, [sp, #56]	; 0x38
   13d84:	f7fc f915 	bl	ffb2 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13d88:	900d      	str	r0, [sp, #52]	; 0x34
   13d8a:	910c      	str	r1, [sp, #48]	; 0x30
   13d8c:	e7ff      	b.n	13d8e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9a8>
   13d8e:	f64f 7143 	movw	r1, #65347	; 0xff43
   13d92:	f2c0 0100 	movt	r1, #0
   13d96:	980f      	ldr	r0, [sp, #60]	; 0x3c
   13d98:	f7fc f90b 	bl	ffb2 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13d9c:	900b      	str	r0, [sp, #44]	; 0x2c
   13d9e:	910a      	str	r1, [sp, #40]	; 0x28
   13da0:	e7ff      	b.n	13da2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9bc>
   13da2:	f646 71c3 	movw	r1, #28611	; 0x6fc3
   13da6:	f2c0 0101 	movt	r1, #1
   13daa:	980e      	ldr	r0, [sp, #56]	; 0x38
   13dac:	f7fc f916 	bl	ffdc <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13db0:	9009      	str	r0, [sp, #36]	; 0x24
   13db2:	9108      	str	r1, [sp, #32]
   13db4:	e7ff      	b.n	13db6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9d0>
   13db6:	980d      	ldr	r0, [sp, #52]	; 0x34
   13db8:	f8cd 04ac 	str.w	r0, [sp, #1196]	; 0x4ac
   13dbc:	990c      	ldr	r1, [sp, #48]	; 0x30
   13dbe:	f8cd 14b0 	str.w	r1, [sp, #1200]	; 0x4b0
   13dc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13dc4:	f8cd 24b4 	str.w	r2, [sp, #1204]	; 0x4b4
   13dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13dca:	f8cd 34b8 	str.w	r3, [sp, #1208]	; 0x4b8
   13dce:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   13dd2:	f8cd c4bc 	str.w	ip, [sp, #1212]	; 0x4bc
   13dd6:	f8dd e020 	ldr.w	lr, [sp, #32]
   13dda:	f8cd e4c0 	str.w	lr, [sp, #1216]	; 0x4c0
   13dde:	466c      	mov	r4, sp
   13de0:	2503      	movs	r5, #3
   13de2:	6025      	str	r5, [r4, #0]
   13de4:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   13de8:	f20d 43ac 	addw	r3, sp, #1196	; 0x4ac
   13dec:	9910      	ldr	r1, [sp, #64]	; 0x40
   13dee:	462a      	mov	r2, r5
   13df0:	f7fb f9b7 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13df4:	e7ff      	b.n	13df6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa10>
   13df6:	f24f 70dc 	movw	r0, #63452	; 0xf7dc
   13dfa:	f2c0 0001 	movt	r0, #1
   13dfe:	f002 fdf2 	bl	169e6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13e02:	9007      	str	r0, [sp, #28]
   13e04:	e7ff      	b.n	13e06 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa20>
   13e06:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   13e0a:	9907      	ldr	r1, [sp, #28]
   13e0c:	f002 fe28 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13e10:	defe      	udf	#254	; 0xfe
    os::task_init(                //  Create a new task and start it...
   13e12:	9811      	ldr	r0, [sp, #68]	; 0x44
   13e14:	f7fb fa13 	bl	f23e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   13e18:	f8cd 04f0 	str.w	r0, [sp, #1264]	; 0x4f0
   13e1c:	e7ff      	b.n	13e1e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa38>
        NULL,  //  Argument to be passed to above function
        10,    //  Task priority: highest is 0, lowest is 255 (main task is 127)
        os::OS_WAIT_FOREVER as u32,     //  Don't do sanity / watchdog checking
        unsafe { &mut SPI_TASK_STACK }, //  Stack space for the task
        SPI_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                               //  `?` means check for error
   13e1e:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   13e22:	1e41      	subs	r1, r0, #1
   13e24:	bf18      	it	ne
   13e26:	2101      	movne	r1, #1
   13e28:	2801      	cmp	r0, #1
   13e2a:	d001      	beq.n	13e30 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa4a>
   13e2c:	e7ff      	b.n	13e2e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa48>
   13e2e:	e005      	b.n	13e3c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa56>
   13e30:	2000      	movs	r0, #0
    Ok(())
   13e32:	9069      	str	r0, [sp, #420]	; 0x1a4
   13e34:	2001      	movs	r0, #1
   13e36:	9069      	str	r0, [sp, #420]	; 0x1a4
}
   13e38:	e008      	b.n	13e4c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>
    os::task_init(                //  Create a new task and start it...
   13e3a:	defe      	udf	#254	; 0xfe
    ) ? ;                               //  `?` means check for error
   13e3c:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   13e40:	f8cd 05a4 	str.w	r0, [sp, #1444]	; 0x5a4
   13e44:	f7fb fa6e 	bl	f324 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   13e48:	9006      	str	r0, [sp, #24]
   13e4a:	e003      	b.n	13e54 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa6e>
}
   13e4c:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   13e4e:	f50d 6db5 	add.w	sp, sp, #1448	; 0x5a8
   13e52:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;                               //  `?` means check for error
   13e54:	9806      	ldr	r0, [sp, #24]
   13e56:	f7fb f9e6 	bl	f226 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   13e5a:	9069      	str	r0, [sp, #420]	; 0x1a4
   13e5c:	e7ff      	b.n	13e5e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa78>
   13e5e:	e7f5      	b.n	13e4c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>

00013e60 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E>:

/// SPI Task Function.  Execute sequentially each SPI request posted to our Event Queue.  When there are no requests to process, block until one arrives.
extern "C" fn spi_task_func(_arg: Ptr) {
   13e60:	b580      	push	{r7, lr}
   13e62:	b082      	sub	sp, #8
   13e64:	9001      	str	r0, [sp, #4]
    loop {
   13e66:	e7ff      	b.n	13e68 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>
        //  Forever read SPI requests and execute them. Will call spi_event_callback().
        os::eventq_run(
   13e68:	f241 2054 	movw	r0, #4692	; 0x1254
   13e6c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13e70:	f7fb fa5c 	bl	f32c <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
   13e74:	9000      	str	r0, [sp, #0]
   13e76:	e7ff      	b.n	13e78 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x18>
   13e78:	f24f 71fc 	movw	r1, #63484	; 0xf7fc
   13e7c:	f2c0 0101 	movt	r1, #1
   13e80:	f64f 0308 	movw	r3, #63496	; 0xf808
   13e84:	f2c0 0301 	movt	r3, #1
   13e88:	220b      	movs	r2, #11
   13e8a:	9800      	ldr	r0, [sp, #0]
   13e8c:	f7fb f998 	bl	f1c0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   13e90:	e7ff      	b.n	13e92 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x32>
            unsafe { &mut SPI_EVENT_QUEUE }
        ).expect("eventq fail");

        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
   13e92:	f005 fced 	bl	19870 <hal_watchdog_tickle>
   13e96:	e7ff      	b.n	13e98 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x38>
    loop {
   13e98:	e7e6      	b.n	13e68 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>

00013e9a <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>:
    }
}

/// Set pending request for non-blocking SPI write for Command Byte. Returns without waiting for write to complete.
pub fn spi_noblock_write_command(cmd: u8) -> MynewtResult<()> {
   13e9a:	b580      	push	{r7, lr}
   13e9c:	b08c      	sub	sp, #48	; 0x30
   13e9e:	4601      	mov	r1, r0
   13ea0:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    //  If there is a pending Command Byte, enqueue it.
    spi_noblock_write_flush() ? ;
   13ea4:	9104      	str	r1, [sp, #16]
   13ea6:	f000 f892 	bl	13fce <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   13eaa:	9003      	str	r0, [sp, #12]
   13eac:	e7ff      	b.n	13eae <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x14>
   13eae:	9803      	ldr	r0, [sp, #12]
   13eb0:	f7fb f9c5 	bl	f23e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   13eb4:	9006      	str	r0, [sp, #24]
   13eb6:	e7ff      	b.n	13eb8 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x1e>
   13eb8:	9806      	ldr	r0, [sp, #24]
   13eba:	1e41      	subs	r1, r0, #1
   13ebc:	bf18      	it	ne
   13ebe:	2101      	movne	r1, #1
   13ec0:	2801      	cmp	r0, #1
   13ec2:	d001      	beq.n	13ec8 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2e>
   13ec4:	e7ff      	b.n	13ec6 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2c>
   13ec6:	e00c      	b.n	13ee2 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x48>
    //  Set the pending Command Byte.
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   13ec8:	f640 2020 	movw	r0, #2592	; 0xa20
   13ecc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13ed0:	9904      	ldr	r1, [sp, #16]
   13ed2:	f7ff f9b2 	bl	1323a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>
   13ed6:	f88d 101d 	strb.w	r1, [sp, #29]
   13eda:	f88d 001c 	strb.w	r0, [sp, #28]
   13ede:	e00f      	b.n	13f00 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x66>
    spi_noblock_write_flush() ? ;
   13ee0:	defe      	udf	#254	; 0xfe
   13ee2:	9806      	ldr	r0, [sp, #24]
   13ee4:	900b      	str	r0, [sp, #44]	; 0x2c
   13ee6:	f7fb fa1d 	bl	f324 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   13eea:	9002      	str	r0, [sp, #8]
   13eec:	e002      	b.n	13ef4 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x5a>
        return Err(MynewtError::SYS_EINVAL);
    }
    Ok(())
}
   13eee:	9805      	ldr	r0, [sp, #20]
   13ef0:	b00c      	add	sp, #48	; 0x30
   13ef2:	bd80      	pop	{r7, pc}
    spi_noblock_write_flush() ? ;
   13ef4:	9802      	ldr	r0, [sp, #8]
   13ef6:	f7fb f996 	bl	f226 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   13efa:	9005      	str	r0, [sp, #20]
   13efc:	e7ff      	b.n	13efe <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x64>
   13efe:	e7f6      	b.n	13eee <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   13f00:	a807      	add	r0, sp, #28
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   13f02:	f7fb f984 	bl	f20e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>
   13f06:	9001      	str	r0, [sp, #4]
   13f08:	e7ff      	b.n	13f0a <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x70>
   13f0a:	9801      	ldr	r0, [sp, #4]
   13f0c:	07c1      	lsls	r1, r0, #31
   13f0e:	2900      	cmp	r1, #0
   13f10:	d105      	bne.n	13f1e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x84>
   13f12:	e7ff      	b.n	13f14 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x7a>
   13f14:	2000      	movs	r0, #0
    Ok(())
   13f16:	9005      	str	r0, [sp, #20]
   13f18:	2001      	movs	r0, #1
   13f1a:	9005      	str	r0, [sp, #20]
}
   13f1c:	e7e7      	b.n	13eee <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   13f1e:	f06f 0001 	mvn.w	r0, #1
        return Err(MynewtError::SYS_EINVAL);
   13f22:	9008      	str	r0, [sp, #32]
   13f24:	9808      	ldr	r0, [sp, #32]
   13f26:	9005      	str	r0, [sp, #20]
   13f28:	e7e1      	b.n	13eee <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>

00013f2a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>:

/// Set pending request for non-blocking SPI write for Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_data(data: &[u8]) -> MynewtResult<()> {
   13f2a:	b580      	push	{r7, lr}
   13f2c:	b08e      	sub	sp, #56	; 0x38
   13f2e:	900a      	str	r0, [sp, #40]	; 0x28
   13f30:	910b      	str	r1, [sp, #44]	; 0x2c
    assert!(unsafe { PENDING_CMD.len() } > 0);  //  Must have Command Byte before Data Bytes
   13f32:	f640 2220 	movw	r2, #2592	; 0xa20
   13f36:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13f3a:	9007      	str	r0, [sp, #28]
   13f3c:	4610      	mov	r0, r2
   13f3e:	9106      	str	r1, [sp, #24]
   13f40:	f7ff f961 	bl	13206 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   13f44:	9005      	str	r0, [sp, #20]
   13f46:	9104      	str	r1, [sp, #16]
   13f48:	e7ff      	b.n	13f4a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x20>
   13f4a:	9805      	ldr	r0, [sp, #20]
   13f4c:	9904      	ldr	r1, [sp, #16]
   13f4e:	f7fa fcab 	bl	e8a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13f52:	9003      	str	r0, [sp, #12]
   13f54:	e7ff      	b.n	13f56 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x2c>
   13f56:	9803      	ldr	r0, [sp, #12]
   13f58:	2800      	cmp	r0, #0
   13f5a:	d00a      	beq.n	13f72 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x48>
   13f5c:	e7ff      	b.n	13f5e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x34>
    //  Append Data Bytes to Pending Data Bytes.
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13f5e:	f640 2028 	movw	r0, #2600	; 0xa28
   13f62:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13f66:	9907      	ldr	r1, [sp, #28]
   13f68:	9a06      	ldr	r2, [sp, #24]
   13f6a:	f7ff f958 	bl	1321e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E>
   13f6e:	9002      	str	r0, [sp, #8]
   13f70:	e00b      	b.n	13f8a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x60>
    assert!(unsafe { PENDING_CMD.len() } > 0);  //  Must have Command Byte before Data Bytes
   13f72:	f64f 0018 	movw	r0, #63512	; 0xf818
   13f76:	f2c0 0001 	movt	r0, #1
   13f7a:	f64f 024c 	movw	r2, #63564	; 0xf84c
   13f7e:	f2c0 0201 	movt	r2, #1
   13f82:	2132      	movs	r1, #50	; 0x32
   13f84:	f002 fd36 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13f88:	defe      	udf	#254	; 0xfe
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13f8a:	9802      	ldr	r0, [sp, #8]
   13f8c:	f000 0001 	and.w	r0, r0, #1
   13f90:	f7fb f94f 	bl	f232 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   13f94:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   13f98:	e7ff      	b.n	13f9a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x70>
   13f9a:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   13f9e:	07c1      	lsls	r1, r0, #31
   13fa0:	2900      	cmp	r1, #0
   13fa2:	d001      	beq.n	13fa8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x7e>
   13fa4:	e7ff      	b.n	13fa6 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x7c>
   13fa6:	e005      	b.n	13fb4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x8a>
   13fa8:	2000      	movs	r0, #0
    Ok(())
   13faa:	9008      	str	r0, [sp, #32]
   13fac:	2001      	movs	r0, #1
   13fae:	9008      	str	r0, [sp, #32]
}
   13fb0:	e004      	b.n	13fbc <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x92>
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13fb2:	defe      	udf	#254	; 0xfe
   13fb4:	f7ff f905 	bl	131c2 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   13fb8:	9001      	str	r0, [sp, #4]
   13fba:	e002      	b.n	13fc2 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x98>
}
   13fbc:	9808      	ldr	r0, [sp, #32]
   13fbe:	b00e      	add	sp, #56	; 0x38
   13fc0:	bd80      	pop	{r7, pc}
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13fc2:	9801      	ldr	r0, [sp, #4]
   13fc4:	f7fb f92f 	bl	f226 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   13fc8:	9008      	str	r0, [sp, #32]
   13fca:	e7ff      	b.n	13fcc <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xa2>
   13fcc:	e7f6      	b.n	13fbc <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x92>

00013fce <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>:

/// Enqueue any pending request for non-blocking SPI write for Command Byte and Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_flush() -> MynewtResult<()> {
   13fce:	b580      	push	{r7, lr}
   13fd0:	b090      	sub	sp, #64	; 0x40
    //  If no pending request, quit.
    if unsafe { PENDING_CMD.len() } == 0 &&
   13fd2:	f640 2020 	movw	r0, #2592	; 0xa20
   13fd6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13fda:	f7ff f914 	bl	13206 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   13fde:	900b      	str	r0, [sp, #44]	; 0x2c
   13fe0:	910a      	str	r1, [sp, #40]	; 0x28
   13fe2:	e016      	b.n	14012 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x44>
   13fe4:	2001      	movs	r0, #1
   13fe6:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   13fea:	e00c      	b.n	14006 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
   13fec:	2000      	movs	r0, #0
   13fee:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   13ff2:	e008      	b.n	14006 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
        unsafe { PENDING_DATA.len() } == 0 {
   13ff4:	f640 2028 	movw	r0, #2600	; 0xa28
   13ff8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13ffc:	f7ff f8f7 	bl	131ee <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE>
   14000:	9009      	str	r0, [sp, #36]	; 0x24
   14002:	9108      	str	r1, [sp, #32]
   14004:	e00f      	b.n	14026 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x58>
    if unsafe { PENDING_CMD.len() } == 0 &&
   14006:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   1400a:	07c0      	lsls	r0, r0, #31
   1400c:	2800      	cmp	r0, #0
   1400e:	d11d      	bne.n	1404c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x7e>
   14010:	e013      	b.n	1403a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x6c>
   14012:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14014:	990a      	ldr	r1, [sp, #40]	; 0x28
   14016:	f7fa fc47 	bl	e8a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1401a:	9007      	str	r0, [sp, #28]
   1401c:	e7ff      	b.n	1401e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x50>
   1401e:	9807      	ldr	r0, [sp, #28]
   14020:	2800      	cmp	r0, #0
   14022:	d0e7      	beq.n	13ff4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x26>
   14024:	e7e2      	b.n	13fec <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        unsafe { PENDING_DATA.len() } == 0 {
   14026:	9809      	ldr	r0, [sp, #36]	; 0x24
   14028:	9908      	ldr	r1, [sp, #32]
   1402a:	f7fa fc3d 	bl	e8a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1402e:	9006      	str	r0, [sp, #24]
   14030:	e7ff      	b.n	14032 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x64>
    if unsafe { PENDING_CMD.len() } == 0 &&
   14032:	9806      	ldr	r0, [sp, #24]
   14034:	2800      	cmp	r0, #0
   14036:	d0d5      	beq.n	13fe4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x16>
   14038:	e7d8      	b.n	13fec <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        return Ok(());
    }
    //  Enqueue the pending SPI request into the Mbuf Queue
    if let Err(e) = spi_noblock_write(
        unsafe { PENDING_CMD[0] },  //  Command Byte
   1403a:	f640 2020 	movw	r0, #2592	; 0xa20
   1403e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14042:	f7ff f8e0 	bl	13206 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   14046:	9005      	str	r0, [sp, #20]
   14048:	9104      	str	r1, [sp, #16]
   1404a:	e007      	b.n	1405c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x8e>
   1404c:	2000      	movs	r0, #0
        return Ok(());
   1404e:	900c      	str	r0, [sp, #48]	; 0x30
   14050:	2001      	movs	r0, #1
   14052:	900c      	str	r0, [sp, #48]	; 0x30
   14054:	e7ff      	b.n	14056 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    }
    //  Else clear the pending request and return Ok.
    unsafe { PENDING_CMD.clear() };
    unsafe { PENDING_DATA.clear() };
    Ok(())
}
   14056:	980c      	ldr	r0, [sp, #48]	; 0x30
   14058:	b010      	add	sp, #64	; 0x40
   1405a:	bd80      	pop	{r7, pc}
        unsafe { PENDING_CMD[0] },  //  Command Byte
   1405c:	9804      	ldr	r0, [sp, #16]
   1405e:	2800      	cmp	r0, #0
   14060:	d03f      	beq.n	140e2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x114>
   14062:	e7ff      	b.n	14064 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x96>
   14064:	9805      	ldr	r0, [sp, #20]
   14066:	7801      	ldrb	r1, [r0, #0]
        unsafe { &PENDING_DATA }    //  Data Bytes
   14068:	f640 2028 	movw	r0, #2600	; 0xa28
   1406c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14070:	9103      	str	r1, [sp, #12]
   14072:	f7ff f8bc 	bl	131ee <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE>
   14076:	9002      	str	r0, [sp, #8]
   14078:	9101      	str	r1, [sp, #4]
   1407a:	e7ff      	b.n	1407c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xae>
    if let Err(e) = spi_noblock_write(
   1407c:	9803      	ldr	r0, [sp, #12]
   1407e:	9902      	ldr	r1, [sp, #8]
   14080:	9a01      	ldr	r2, [sp, #4]
   14082:	f000 f837 	bl	140f4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>
   14086:	900e      	str	r0, [sp, #56]	; 0x38
   14088:	e7ff      	b.n	1408a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xbc>
   1408a:	980e      	ldr	r0, [sp, #56]	; 0x38
   1408c:	2801      	cmp	r0, #1
   1408e:	d107      	bne.n	140a0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xd2>
   14090:	e7ff      	b.n	14092 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xc4>
    unsafe { PENDING_CMD.clear() };
   14092:	f640 2020 	movw	r0, #2592	; 0xa20
   14096:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1409a:	f7ff f8e8 	bl	1326e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   1409e:	e014      	b.n	140ca <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xfc>
    if let Err(e) = spi_noblock_write(
   140a0:	980e      	ldr	r0, [sp, #56]	; 0x38
   140a2:	900f      	str	r0, [sp, #60]	; 0x3c
        unsafe { PENDING_CMD.clear() };
   140a4:	f640 2120 	movw	r1, #2592	; 0xa20
   140a8:	f2c2 0100 	movt	r1, #8192	; 0x2000
   140ac:	9000      	str	r0, [sp, #0]
   140ae:	4608      	mov	r0, r1
   140b0:	f7ff f8dd 	bl	1326e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   140b4:	e7ff      	b.n	140b6 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xe8>
        unsafe { PENDING_DATA.clear() };    
   140b6:	f640 2028 	movw	r0, #2600	; 0xa28
   140ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
   140be:	f7ff f8ce 	bl	1325e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E>
   140c2:	e7ff      	b.n	140c4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xf6>
        return Err(e);
   140c4:	9800      	ldr	r0, [sp, #0]
   140c6:	900c      	str	r0, [sp, #48]	; 0x30
   140c8:	e7c5      	b.n	14056 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    unsafe { PENDING_DATA.clear() };
   140ca:	f640 2028 	movw	r0, #2600	; 0xa28
   140ce:	f2c2 0000 	movt	r0, #8192	; 0x2000
   140d2:	f7ff f8c4 	bl	1325e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E>
   140d6:	e7ff      	b.n	140d8 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x10a>
   140d8:	2000      	movs	r0, #0
    Ok(())
   140da:	900c      	str	r0, [sp, #48]	; 0x30
   140dc:	2001      	movs	r0, #1
   140de:	900c      	str	r0, [sp, #48]	; 0x30
}
   140e0:	e7b9      	b.n	14056 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
        unsafe { PENDING_CMD[0] },  //  Command Byte
   140e2:	f64f 005c 	movw	r0, #63580	; 0xf85c
   140e6:	f2c0 0001 	movt	r0, #1
   140ea:	2100      	movs	r1, #0
   140ec:	9a04      	ldr	r2, [sp, #16]
   140ee:	f002 fc97 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   140f2:	defe      	udf	#254	; 0xfe

000140f4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>:

/// Enqueue request for non-blocking SPI write. Returns without waiting for write to complete.
/// Request must have a Command Byte, followed by optional Data Bytes.
fn spi_noblock_write(cmd: u8, data: &[u8]) -> MynewtResult<()> {
   140f4:	b580      	push	{r7, lr}
   140f6:	b0a0      	sub	sp, #128	; 0x80
   140f8:	4603      	mov	r3, r0
   140fa:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   140fe:	9116      	str	r1, [sp, #88]	; 0x58
   14100:	9217      	str	r2, [sp, #92]	; 0x5c
   14102:	f247 5030 	movw	r0, #30000	; 0x7530
    console::print("spi data "); ////
    console::dump(data.as_ptr(), data.len() as u32); console::print("\n"); ////
    console::flush(); */

    //  Throttle the number of queued SPI requests.
    let timeout = 30_000;
   14106:	9018      	str	r0, [sp, #96]	; 0x60
   14108:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   1410c:	fba0 0c0c 	umull	r0, ip, r0, ip
   14110:	f1bc 0f00 	cmp.w	ip, #0
   14114:	920f      	str	r2, [sp, #60]	; 0x3c
   14116:	910e      	str	r1, [sp, #56]	; 0x38
   14118:	900d      	str	r0, [sp, #52]	; 0x34
   1411a:	f040 80c8 	bne.w	142ae <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ba>
   1411e:	e7ff      	b.n	14120 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x2c>
   14120:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   14124:	f2c1 0062 	movt	r0, #4194	; 0x1062
   14128:	990d      	ldr	r1, [sp, #52]	; 0x34
   1412a:	fba1 0200 	umull	r0, r2, r1, r0
   1412e:	0991      	lsrs	r1, r2, #6
   14130:	f241 2234 	movw	r2, #4660	; 0x1234
   14134:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14138:	900c      	str	r0, [sp, #48]	; 0x30
   1413a:	4610      	mov	r0, r2
   1413c:	f006 fc98 	bl	1aa70 <os_sem_pend>
   14140:	e7ff      	b.n	14142 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x4e>

    //  Allocate a new mbuf chain to copy the data to be sent.
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   14142:	980e      	ldr	r0, [sp, #56]	; 0x38
   14144:	990f      	ldr	r1, [sp, #60]	; 0x3c
   14146:	f7fa fbaf 	bl	e8a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1414a:	900b      	str	r0, [sp, #44]	; 0x2c
   1414c:	e7ff      	b.n	1414e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x5a>
   1414e:	2001      	movs	r0, #1
   14150:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14152:	fa10 f081 	uxtah	r0, r0, r1
   14156:	b282      	uxth	r2, r0
   14158:	4603      	mov	r3, r0
   1415a:	4282      	cmp	r2, r0
   1415c:	930a      	str	r3, [sp, #40]	; 0x28
   1415e:	f040 80b2 	bne.w	142c6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1d2>
   14162:	e7ff      	b.n	14164 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x70>
   14164:	980a      	ldr	r0, [sp, #40]	; 0x28
   14166:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
    let mbuf = unsafe { os::os_msys_get_pkthdr(len, 0) };
   1416a:	b280      	uxth	r0, r0
   1416c:	2100      	movs	r1, #0
   1416e:	f006 f98d 	bl	1a48c <os_msys_get_pkthdr>
   14172:	4601      	mov	r1, r0
   14174:	901a      	str	r0, [sp, #104]	; 0x68
   14176:	9109      	str	r1, [sp, #36]	; 0x24
   14178:	e7ff      	b.n	1417a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x86>
    if mbuf.is_null() {  //  If out of memory, quit.
   1417a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1417c:	f000 fc7c 	bl	14a78 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   14180:	9008      	str	r0, [sp, #32]
   14182:	e7ff      	b.n	14184 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x90>
   14184:	9808      	ldr	r0, [sp, #32]
   14186:	07c1      	lsls	r1, r0, #31
   14188:	2900      	cmp	r1, #0
   1418a:	d106      	bne.n	1419a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xa6>
   1418c:	e7ff      	b.n	1418e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x9a>
   1418e:	f10d 0043 	add.w	r0, sp, #67	; 0x43
    }

    //  Append the Command Byte to the mbuf chain.
    let rc = unsafe { os::os_mbuf_append(
        mbuf, 
        core::mem::transmute(&cmd), 
   14192:	901b      	str	r0, [sp, #108]	; 0x6c
   14194:	991b      	ldr	r1, [sp, #108]	; 0x6c
   14196:	9107      	str	r1, [sp, #28]
   14198:	e010      	b.n	141bc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc8>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   1419a:	f241 2034 	movw	r0, #4660	; 0x1234
   1419e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   141a2:	f006 fc33 	bl	1aa0c <os_sem_release>
   141a6:	e7ff      	b.n	141a8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xb4>
   141a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   141ac:	9012      	str	r0, [sp, #72]	; 0x48
   141ae:	9812      	ldr	r0, [sp, #72]	; 0x48
   141b0:	9011      	str	r0, [sp, #68]	; 0x44
   141b2:	e002      	b.n	141ba <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
        return Err(MynewtError::SYS_EUNKNOWN); 
    }
    Ok(())
}
   141b4:	9811      	ldr	r0, [sp, #68]	; 0x44
   141b6:	b020      	add	sp, #128	; 0x80
   141b8:	bd80      	pop	{r7, pc}
        return Err(MynewtError::SYS_ENOMEM); 
   141ba:	e7fb      	b.n	141b4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
   141bc:	2201      	movs	r2, #1
    let rc = unsafe { os::os_mbuf_append(
   141be:	9809      	ldr	r0, [sp, #36]	; 0x24
   141c0:	9907      	ldr	r1, [sp, #28]
   141c2:	f005 ffbb 	bl	1a13c <os_mbuf_append>
   141c6:	4601      	mov	r1, r0
   141c8:	901c      	str	r0, [sp, #112]	; 0x70
   141ca:	9106      	str	r1, [sp, #24]
   141cc:	e7ff      	b.n	141ce <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xda>
    if rc != 0 {  //  If out of memory, quit.
   141ce:	9806      	ldr	r0, [sp, #24]
   141d0:	2800      	cmp	r0, #0
   141d2:	d106      	bne.n	141e2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xee>
   141d4:	e7ff      	b.n	141d6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xe2>
        core::mem::transmute(data.as_ptr()), 
   141d6:	980e      	ldr	r0, [sp, #56]	; 0x38
   141d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   141da:	f7fa fb6d 	bl	e8b8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   141de:	9005      	str	r0, [sp, #20]
   141e0:	e011      	b.n	14206 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x112>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   141e2:	9809      	ldr	r0, [sp, #36]	; 0x24
   141e4:	f005 ff8e 	bl	1a104 <os_mbuf_free_chain>
   141e8:	e7ff      	b.n	141ea <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xf6>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   141ea:	f241 2034 	movw	r0, #4660	; 0x1234
   141ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
   141f2:	f006 fc0b 	bl	1aa0c <os_sem_release>
   141f6:	e7ff      	b.n	141f8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x104>
   141f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   141fc:	9013      	str	r0, [sp, #76]	; 0x4c
   141fe:	9813      	ldr	r0, [sp, #76]	; 0x4c
   14200:	9011      	str	r0, [sp, #68]	; 0x44
   14202:	e7ff      	b.n	14204 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
   14204:	e7d9      	b.n	141ba <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        core::mem::transmute(data.as_ptr()), 
   14206:	9805      	ldr	r0, [sp, #20]
   14208:	901d      	str	r0, [sp, #116]	; 0x74
   1420a:	991d      	ldr	r1, [sp, #116]	; 0x74
   1420c:	9104      	str	r1, [sp, #16]
   1420e:	e7ff      	b.n	14210 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x11c>
        data.len() as u16
   14210:	980e      	ldr	r0, [sp, #56]	; 0x38
   14212:	990f      	ldr	r1, [sp, #60]	; 0x3c
   14214:	f7fa fb48 	bl	e8a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   14218:	9003      	str	r0, [sp, #12]
   1421a:	e7ff      	b.n	1421c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x128>
    let rc = unsafe { os::os_mbuf_append(
   1421c:	9803      	ldr	r0, [sp, #12]
   1421e:	b282      	uxth	r2, r0
   14220:	9809      	ldr	r0, [sp, #36]	; 0x24
   14222:	9904      	ldr	r1, [sp, #16]
   14224:	f005 ff8a 	bl	1a13c <os_mbuf_append>
   14228:	4601      	mov	r1, r0
   1422a:	901e      	str	r0, [sp, #120]	; 0x78
   1422c:	9102      	str	r1, [sp, #8]
   1422e:	e7ff      	b.n	14230 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x13c>
    if rc != 0 {  //  If out of memory, quit.
   14230:	9802      	ldr	r0, [sp, #8]
   14232:	2800      	cmp	r0, #0
   14234:	d10f      	bne.n	14256 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x162>
   14236:	e7ff      	b.n	14238 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x144>
    let rc = unsafe { os::os_mqueue_put(
   14238:	f241 203c 	movw	r0, #4668	; 0x123c
   1423c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14240:	f241 2154 	movw	r1, #4692	; 0x1254
   14244:	f2c2 0100 	movt	r1, #8192	; 0x2000
   14248:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1424a:	f005 fef9 	bl	1a040 <os_mqueue_put>
   1424e:	4601      	mov	r1, r0
   14250:	901f      	str	r0, [sp, #124]	; 0x7c
   14252:	9101      	str	r1, [sp, #4]
   14254:	e011      	b.n	1427a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x186>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   14256:	9809      	ldr	r0, [sp, #36]	; 0x24
   14258:	f005 ff54 	bl	1a104 <os_mbuf_free_chain>
   1425c:	e7ff      	b.n	1425e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x16a>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   1425e:	f241 2034 	movw	r0, #4660	; 0x1234
   14262:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14266:	f006 fbd1 	bl	1aa0c <os_sem_release>
   1426a:	e7ff      	b.n	1426c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x178>
   1426c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   14270:	9014      	str	r0, [sp, #80]	; 0x50
   14272:	9814      	ldr	r0, [sp, #80]	; 0x50
   14274:	9011      	str	r0, [sp, #68]	; 0x44
   14276:	e7ff      	b.n	14278 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
   14278:	e7c4      	b.n	14204 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
    if rc != 0 {  //  If out of memory, quit.
   1427a:	9801      	ldr	r0, [sp, #4]
   1427c:	2800      	cmp	r0, #0
   1427e:	d105      	bne.n	1428c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x198>
   14280:	e7ff      	b.n	14282 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x18e>
   14282:	2000      	movs	r0, #0
    Ok(())
   14284:	9011      	str	r0, [sp, #68]	; 0x44
   14286:	2001      	movs	r0, #1
   14288:	9011      	str	r0, [sp, #68]	; 0x44
}
   1428a:	e793      	b.n	141b4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   1428c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1428e:	f005 ff39 	bl	1a104 <os_mbuf_free_chain>
   14292:	e7ff      	b.n	14294 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1a0>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   14294:	f241 2034 	movw	r0, #4660	; 0x1234
   14298:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1429c:	f006 fbb6 	bl	1aa0c <os_sem_release>
   142a0:	e7ff      	b.n	142a2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ae>
   142a2:	f06f 000c 	mvn.w	r0, #12
        return Err(MynewtError::SYS_EUNKNOWN); 
   142a6:	9015      	str	r0, [sp, #84]	; 0x54
   142a8:	9815      	ldr	r0, [sp, #84]	; 0x54
   142aa:	9011      	str	r0, [sp, #68]	; 0x44
   142ac:	e7e4      	b.n	14278 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   142ae:	f64f 0080 	movw	r0, #63616	; 0xf880
   142b2:	f2c0 0001 	movt	r0, #1
   142b6:	f64f 026c 	movw	r2, #63596	; 0xf86c
   142ba:	f2c0 0201 	movt	r2, #1
   142be:	2121      	movs	r1, #33	; 0x21
   142c0:	f002 fb98 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   142c4:	defe      	udf	#254	; 0xfe
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   142c6:	f64f 00c0 	movw	r0, #63680	; 0xf8c0
   142ca:	f2c0 0001 	movt	r0, #1
   142ce:	f64f 02a4 	movw	r2, #63652	; 0xf8a4
   142d2:	f2c0 0201 	movt	r2, #1
   142d6:	211c      	movs	r1, #28
   142d8:	f002 fb8c 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   142dc:	defe      	udf	#254	; 0xfe

000142de <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E>:

/// Callback for the event that is triggered when an SPI request is added to the queue.
extern "C" fn spi_event_callback(_event: *mut os::os_event) {    
   142de:	b5b0      	push	{r4, r5, r7, lr}
   142e0:	b0c4      	sub	sp, #272	; 0x110
   142e2:	9038      	str	r0, [sp, #224]	; 0xe0
   142e4:	e7ff      	b.n	142e6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
    loop {  //  For each mbuf chain found...
        //  Get the next SPI request, stored as an mbuf chain.
        let om = unsafe { os::os_mqueue_get(&mut SPI_DATA_QUEUE) };
   142e6:	f241 203c 	movw	r0, #4668	; 0x123c
   142ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
   142ee:	f005 fe94 	bl	1a01a <os_mqueue_get>
   142f2:	4601      	mov	r1, r0
   142f4:	9039      	str	r0, [sp, #228]	; 0xe4
   142f6:	911b      	str	r1, [sp, #108]	; 0x6c
   142f8:	e7ff      	b.n	142fa <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c>
        if om.is_null() { break; }
   142fa:	981b      	ldr	r0, [sp, #108]	; 0x6c
   142fc:	f000 fbbc 	bl	14a78 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   14300:	901a      	str	r0, [sp, #104]	; 0x68
   14302:	e7ff      	b.n	14304 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26>
   14304:	981a      	ldr	r0, [sp, #104]	; 0x68
   14306:	07c1      	lsls	r1, r0, #31
   14308:	2900      	cmp	r1, #0
   1430a:	d106      	bne.n	1431a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x3c>
   1430c:	e7ff      	b.n	1430e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x30>

        //  Send the mbuf chain.
        let mut m = om;
   1430e:	981b      	ldr	r0, [sp, #108]	; 0x6c
   14310:	901c      	str	r0, [sp, #112]	; 0x70
   14312:	2101      	movs	r1, #1
        let mut first_byte = true;
   14314:	f88d 1075 	strb.w	r1, [sp, #117]	; 0x75
        while !m.is_null() {  //  For each mbuf in the chain...
   14318:	e001      	b.n	1431e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>

        //  Release the throttle semaphore to allow next request to be queued.
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
        assert_eq!(rc, 0, "sem fail");    
    }
}
   1431a:	b044      	add	sp, #272	; 0x110
   1431c:	bdb0      	pop	{r4, r5, r7, pc}
        while !m.is_null() {  //  For each mbuf in the chain...
   1431e:	981c      	ldr	r0, [sp, #112]	; 0x70
   14320:	f000 fbaa 	bl	14a78 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   14324:	9019      	str	r0, [sp, #100]	; 0x64
   14326:	e7ff      	b.n	14328 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x4a>
   14328:	9819      	ldr	r0, [sp, #100]	; 0x64
   1432a:	07c1      	lsls	r1, r0, #31
   1432c:	2900      	cmp	r1, #0
   1432e:	d004      	beq.n	1433a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x5c>
   14330:	e7ff      	b.n	14332 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x54>
        unsafe { os::os_mbuf_free_chain(om) };
   14332:	981b      	ldr	r0, [sp, #108]	; 0x6c
   14334:	f005 fee6 	bl	1a104 <os_mbuf_free_chain>
   14338:	e0aa      	b.n	14490 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1b2>
            let data = unsafe { (*m).om_data };  //  Fetch the data
   1433a:	981c      	ldr	r0, [sp, #112]	; 0x70
   1433c:	6800      	ldr	r0, [r0, #0]
   1433e:	903a      	str	r0, [sp, #232]	; 0xe8
            let len = unsafe { (*m).om_len };    //  Fetch the length
   14340:	991c      	ldr	r1, [sp, #112]	; 0x70
   14342:	88c9      	ldrh	r1, [r1, #6]
   14344:	460a      	mov	r2, r1
   14346:	f8ad 10ee 	strh.w	r1, [sp, #238]	; 0xee
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   1434a:	f89d 1075 	ldrb.w	r1, [sp, #117]	; 0x75
   1434e:	07c9      	lsls	r1, r1, #31
   14350:	2900      	cmp	r1, #0
   14352:	9018      	str	r0, [sp, #96]	; 0x60
   14354:	9217      	str	r2, [sp, #92]	; 0x5c
   14356:	d105      	bne.n	14364 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x86>
   14358:	e7ff      	b.n	1435a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x7c>
                    unsafe { core::mem::transmute(data) }, 
   1435a:	9818      	ldr	r0, [sp, #96]	; 0x60
   1435c:	903e      	str	r0, [sp, #248]	; 0xf8
   1435e:	983e      	ldr	r0, [sp, #248]	; 0xf8
   14360:	9016      	str	r0, [sp, #88]	; 0x58
   14362:	e07b      	b.n	1445c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17e>
   14364:	2000      	movs	r0, #0
                first_byte = false;
   14366:	f88d 0075 	strb.w	r0, [sp, #117]	; 0x75
                    unsafe { core::mem::transmute(data) }, 
   1436a:	9818      	ldr	r0, [sp, #96]	; 0x60
   1436c:	903c      	str	r0, [sp, #240]	; 0xf0
   1436e:	983c      	ldr	r0, [sp, #240]	; 0xf0
   14370:	9015      	str	r0, [sp, #84]	; 0x54
   14372:	e7ff      	b.n	14374 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x96>
   14374:	2001      	movs	r0, #1
                internal_spi_noblock_write(
   14376:	9915      	ldr	r1, [sp, #84]	; 0x54
   14378:	9014      	str	r0, [sp, #80]	; 0x50
   1437a:	4608      	mov	r0, r1
   1437c:	9914      	ldr	r1, [sp, #80]	; 0x50
   1437e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14380:	f000 f921 	bl	145c6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   14384:	9013      	str	r0, [sp, #76]	; 0x4c
   14386:	e7ff      	b.n	14388 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xaa>
   14388:	f64f 01dc 	movw	r1, #63708	; 0xf8dc
   1438c:	f2c0 0101 	movt	r1, #1
   14390:	f64f 03e8 	movw	r3, #63720	; 0xf8e8
   14394:	f2c0 0301 	movt	r3, #1
   14398:	220c      	movs	r2, #12
   1439a:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1439c:	f7fa ff10 	bl	f1c0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   143a0:	e7ff      	b.n	143a2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xc4>
                if  unsafe { *data } == 0x01 || //  SWRESET
   143a2:	9818      	ldr	r0, [sp, #96]	; 0x60
   143a4:	7801      	ldrb	r1, [r0, #0]
   143a6:	2901      	cmp	r1, #1
   143a8:	d013      	beq.n	143d2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   143aa:	e01a      	b.n	143e2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x104>
   143ac:	2001      	movs	r0, #1
   143ae:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   143b2:	e008      	b.n	143c6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
   143b4:	2000      	movs	r0, #0
   143b6:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   143ba:	e004      	b.n	143c6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
                    unsafe { *data } == 0x29 {  //  DISPON
   143bc:	9818      	ldr	r0, [sp, #96]	; 0x60
   143be:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   143c0:	2929      	cmp	r1, #41	; 0x29
   143c2:	d0f3      	beq.n	143ac <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   143c4:	e7f6      	b.n	143b4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xd6>
   143c6:	f89d 0076 	ldrb.w	r0, [sp, #118]	; 0x76
   143ca:	07c0      	lsls	r0, r0, #31
   143cc:	2800      	cmp	r0, #0
   143ce:	d113      	bne.n	143f8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x11a>
   143d0:	e017      	b.n	14402 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   143d2:	2001      	movs	r0, #1
   143d4:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   143d8:	e008      	b.n	143ec <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
   143da:	2000      	movs	r0, #0
   143dc:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   143e0:	e004      	b.n	143ec <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
                    unsafe { *data } == 0x11 || //  SLPOUT
   143e2:	9818      	ldr	r0, [sp, #96]	; 0x60
   143e4:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   143e6:	2911      	cmp	r1, #17
   143e8:	d0f3      	beq.n	143d2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   143ea:	e7f6      	b.n	143da <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xfc>
   143ec:	f89d 0077 	ldrb.w	r0, [sp, #119]	; 0x77
   143f0:	07c0      	lsls	r0, r0, #31
   143f2:	2800      	cmp	r0, #0
   143f4:	d1da      	bne.n	143ac <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   143f6:	e7e1      	b.n	143bc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xde>
   143f8:	20c8      	movs	r0, #200	; 0xc8
                    delay_ms(200);
   143fa:	f000 fb13 	bl	14a24 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>
   143fe:	e7ff      	b.n	14400 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x122>
                if  unsafe { *data } == 0x01 || //  SWRESET
   14400:	e7ff      	b.n	14402 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   14402:	2101      	movs	r1, #1
                    unsafe { core::mem::transmute(data.add(1)) }, 
   14404:	9818      	ldr	r0, [sp, #96]	; 0x60
   14406:	f7fa f9bf 	bl	e788 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1440a:	9012      	str	r0, [sp, #72]	; 0x48
   1440c:	e7ff      	b.n	1440e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x130>
   1440e:	9812      	ldr	r0, [sp, #72]	; 0x48
   14410:	903d      	str	r0, [sp, #244]	; 0xf4
   14412:	983d      	ldr	r0, [sp, #244]	; 0xf4
   14414:	9011      	str	r0, [sp, #68]	; 0x44
   14416:	e7ff      	b.n	14418 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x13a>
   14418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   1441c:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1441e:	fa10 f081 	uxtah	r0, r0, r1
   14422:	b282      	uxth	r2, r0
   14424:	4603      	mov	r3, r0
   14426:	4282      	cmp	r2, r0
   14428:	9310      	str	r3, [sp, #64]	; 0x40
   1442a:	f040 80c0 	bne.w	145ae <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2d0>
   1442e:	e7ff      	b.n	14430 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x152>
   14430:	9810      	ldr	r0, [sp, #64]	; 0x40
   14432:	b281      	uxth	r1, r0
   14434:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   14436:	9811      	ldr	r0, [sp, #68]	; 0x44
   14438:	f000 f8c5 	bl	145c6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   1443c:	900f      	str	r0, [sp, #60]	; 0x3c
   1443e:	e7ff      	b.n	14440 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x162>
   14440:	f64f 01dc 	movw	r1, #63708	; 0xf8dc
   14444:	f2c0 0101 	movt	r1, #1
   14448:	f64f 1334 	movw	r3, #63796	; 0xf934
   1444c:	f2c0 0301 	movt	r3, #1
   14450:	220c      	movs	r2, #12
   14452:	980f      	ldr	r0, [sp, #60]	; 0x3c
   14454:	f7fa feb4 	bl	f1c0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   14458:	e7ff      	b.n	1445a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17c>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   1445a:	e015      	b.n	14488 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
                    len as i32,  //  Write all Data Bytes
   1445c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1445e:	b281      	uxth	r1, r0
   14460:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   14462:	9816      	ldr	r0, [sp, #88]	; 0x58
   14464:	f000 f8af 	bl	145c6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   14468:	900e      	str	r0, [sp, #56]	; 0x38
   1446a:	e7ff      	b.n	1446c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x18e>
   1446c:	f64f 01dc 	movw	r1, #63708	; 0xf8dc
   14470:	f2c0 0101 	movt	r1, #1
   14474:	f64f 1344 	movw	r3, #63812	; 0xf944
   14478:	f2c0 0301 	movt	r3, #1
   1447c:	220c      	movs	r2, #12
   1447e:	980e      	ldr	r0, [sp, #56]	; 0x38
   14480:	f7fa fe9e 	bl	f1c0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   14484:	e7ff      	b.n	14486 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1a8>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   14486:	e7ff      	b.n	14488 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
            m = unsafe { (*m).om_next.sle_next };  //  Fetch next mbuf in the chain.
   14488:	981c      	ldr	r0, [sp, #112]	; 0x70
   1448a:	68c0      	ldr	r0, [r0, #12]
   1448c:	901c      	str	r0, [sp, #112]	; 0x70
        while !m.is_null() {  //  For each mbuf in the chain...
   1448e:	e746      	b.n	1431e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
   14490:	f241 2034 	movw	r0, #4660	; 0x1234
   14494:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14498:	f006 fab8 	bl	1aa0c <os_sem_release>
   1449c:	901e      	str	r0, [sp, #120]	; 0x78
   1449e:	e7ff      	b.n	144a0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c2>
        assert_eq!(rc, 0, "sem fail");    
   144a0:	f24f 6058 	movw	r0, #63064	; 0xf658
   144a4:	f2c0 0001 	movt	r0, #1
   144a8:	6800      	ldr	r0, [r0, #0]
   144aa:	a91e      	add	r1, sp, #120	; 0x78
   144ac:	911f      	str	r1, [sp, #124]	; 0x7c
   144ae:	9020      	str	r0, [sp, #128]	; 0x80
   144b0:	981f      	ldr	r0, [sp, #124]	; 0x7c
   144b2:	903f      	str	r0, [sp, #252]	; 0xfc
   144b4:	9920      	ldr	r1, [sp, #128]	; 0x80
   144b6:	9140      	str	r1, [sp, #256]	; 0x100
   144b8:	6802      	ldr	r2, [r0, #0]
   144ba:	680b      	ldr	r3, [r1, #0]
   144bc:	429a      	cmp	r2, r3
   144be:	900d      	str	r0, [sp, #52]	; 0x34
   144c0:	910c      	str	r1, [sp, #48]	; 0x30
   144c2:	d101      	bne.n	144c8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1ea>
   144c4:	e7ff      	b.n	144c6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1e8>
    loop {  //  For each mbuf chain found...
   144c6:	e70e      	b.n	142e6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
        assert_eq!(rc, 0, "sem fail");    
   144c8:	f24f 60b0 	movw	r0, #63152	; 0xf6b0
   144cc:	f2c0 0001 	movt	r0, #1
   144d0:	6801      	ldr	r1, [r0, #0]
   144d2:	980d      	ldr	r0, [sp, #52]	; 0x34
   144d4:	9030      	str	r0, [sp, #192]	; 0xc0
   144d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   144d8:	9231      	str	r2, [sp, #196]	; 0xc4
   144da:	f24f 73c8 	movw	r3, #63432	; 0xf7c8
   144de:	f2c0 0301 	movt	r3, #1
   144e2:	681b      	ldr	r3, [r3, #0]
   144e4:	f24f 6cd0 	movw	ip, #63184	; 0xf6d0
   144e8:	f2c0 0c01 	movt	ip, #1
   144ec:	f8dc c000 	ldr.w	ip, [ip]
   144f0:	46ee      	mov	lr, sp
   144f2:	2400      	movs	r4, #0
   144f4:	f8ce 4000 	str.w	r4, [lr]
   144f8:	a832      	add	r0, sp, #200	; 0xc8
   144fa:	2201      	movs	r2, #1
   144fc:	910b      	str	r1, [sp, #44]	; 0x2c
   144fe:	4619      	mov	r1, r3
   14500:	4663      	mov	r3, ip
   14502:	f7fa fe2e 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14506:	e7ff      	b.n	14508 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x22a>
   14508:	a830      	add	r0, sp, #192	; 0xc0
   1450a:	902d      	str	r0, [sp, #180]	; 0xb4
   1450c:	a831      	add	r0, sp, #196	; 0xc4
   1450e:	902e      	str	r0, [sp, #184]	; 0xb8
   14510:	a832      	add	r0, sp, #200	; 0xc8
   14512:	902f      	str	r0, [sp, #188]	; 0xbc
   14514:	982d      	ldr	r0, [sp, #180]	; 0xb4
   14516:	9041      	str	r0, [sp, #260]	; 0x104
   14518:	992e      	ldr	r1, [sp, #184]	; 0xb8
   1451a:	9142      	str	r1, [sp, #264]	; 0x108
   1451c:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   1451e:	9243      	str	r2, [sp, #268]	; 0x10c
   14520:	f64f 7343 	movw	r3, #65347	; 0xff43
   14524:	f2c0 0300 	movt	r3, #0
   14528:	910a      	str	r1, [sp, #40]	; 0x28
   1452a:	4619      	mov	r1, r3
   1452c:	9209      	str	r2, [sp, #36]	; 0x24
   1452e:	f7fb fd40 	bl	ffb2 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   14532:	9008      	str	r0, [sp, #32]
   14534:	9107      	str	r1, [sp, #28]
   14536:	e7ff      	b.n	14538 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x25a>
   14538:	f64f 7143 	movw	r1, #65347	; 0xff43
   1453c:	f2c0 0100 	movt	r1, #0
   14540:	980a      	ldr	r0, [sp, #40]	; 0x28
   14542:	f7fb fd36 	bl	ffb2 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   14546:	9006      	str	r0, [sp, #24]
   14548:	9105      	str	r1, [sp, #20]
   1454a:	e7ff      	b.n	1454c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26e>
   1454c:	f646 71c3 	movw	r1, #28611	; 0x6fc3
   14550:	f2c0 0101 	movt	r1, #1
   14554:	9809      	ldr	r0, [sp, #36]	; 0x24
   14556:	f7fb fd41 	bl	ffdc <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1455a:	9004      	str	r0, [sp, #16]
   1455c:	9103      	str	r1, [sp, #12]
   1455e:	e7ff      	b.n	14560 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x282>
   14560:	9808      	ldr	r0, [sp, #32]
   14562:	9027      	str	r0, [sp, #156]	; 0x9c
   14564:	9907      	ldr	r1, [sp, #28]
   14566:	9128      	str	r1, [sp, #160]	; 0xa0
   14568:	9a06      	ldr	r2, [sp, #24]
   1456a:	9229      	str	r2, [sp, #164]	; 0xa4
   1456c:	9b05      	ldr	r3, [sp, #20]
   1456e:	932a      	str	r3, [sp, #168]	; 0xa8
   14570:	f8dd c010 	ldr.w	ip, [sp, #16]
   14574:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
   14578:	f8dd e00c 	ldr.w	lr, [sp, #12]
   1457c:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
   14580:	466c      	mov	r4, sp
   14582:	2503      	movs	r5, #3
   14584:	6025      	str	r5, [r4, #0]
   14586:	a821      	add	r0, sp, #132	; 0x84
   14588:	ab27      	add	r3, sp, #156	; 0x9c
   1458a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1458c:	462a      	mov	r2, r5
   1458e:	f7fa fde8 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14592:	e7ff      	b.n	14594 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2b6>
   14594:	f64f 1054 	movw	r0, #63828	; 0xf954
   14598:	f2c0 0001 	movt	r0, #1
   1459c:	f002 fa23 	bl	169e6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   145a0:	9002      	str	r0, [sp, #8]
   145a2:	e7ff      	b.n	145a4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2c6>
   145a4:	a821      	add	r0, sp, #132	; 0x84
   145a6:	9902      	ldr	r1, [sp, #8]
   145a8:	f002 fa5a 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   145ac:	defe      	udf	#254	; 0xfe
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   145ae:	f64f 1010 	movw	r0, #63760	; 0xf910
   145b2:	f2c0 0001 	movt	r0, #1
   145b6:	f64f 02f8 	movw	r2, #63736	; 0xf8f8
   145ba:	f2c0 0201 	movt	r2, #1
   145be:	2121      	movs	r1, #33	; 0x21
   145c0:	f002 fa18 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   145c4:	defe      	udf	#254	; 0xfe

000145c6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>:

/// Perform non-blocking SPI write in Mynewt OS.  Blocks until SPI write completes.
fn internal_spi_noblock_write(buf: &'static u8, len: i32, is_command: bool) -> MynewtResult<()> {
   145c6:	b5b0      	push	{r4, r5, r7, lr}
   145c8:	b0e8      	sub	sp, #416	; 0x1a0
   145ca:	4613      	mov	r3, r2
   145cc:	9058      	str	r0, [sp, #352]	; 0x160
   145ce:	9159      	str	r1, [sp, #356]	; 0x164
   145d0:	f88d 216b 	strb.w	r2, [sp, #363]	; 0x16b
    if len == 0 { return Ok(()); }
   145d4:	2900      	cmp	r1, #0
   145d6:	9121      	str	r1, [sp, #132]	; 0x84
   145d8:	9020      	str	r0, [sp, #128]	; 0x80
   145da:	931f      	str	r3, [sp, #124]	; 0x7c
   145dc:	d004      	beq.n	145e8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x22>
   145de:	e7ff      	b.n	145e0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a>
    assert!(len > 0, "bad spi len");
   145e0:	9821      	ldr	r0, [sp, #132]	; 0x84
   145e2:	2801      	cmp	r0, #1
   145e4:	db0d      	blt.n	14602 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x3c>
   145e6:	e007      	b.n	145f8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x32>
   145e8:	2000      	movs	r0, #0
    if len == 0 { return Ok(()); }
   145ea:	9022      	str	r0, [sp, #136]	; 0x88
   145ec:	2001      	movs	r0, #1
   145ee:	9022      	str	r0, [sp, #136]	; 0x88
   145f0:	e7ff      	b.n	145f2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
    }

    //  Set SS Pin to high to stop the transfer.
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
    Ok(())
}
   145f2:	9822      	ldr	r0, [sp, #136]	; 0x88
   145f4:	b068      	add	sp, #416	; 0x1a0
   145f6:	bdb0      	pop	{r4, r5, r7, pc}
        if is_command { 0 }
   145f8:	981f      	ldr	r0, [sp, #124]	; 0x7c
   145fa:	07c1      	lsls	r1, r0, #31
   145fc:	2900      	cmp	r1, #0
   145fe:	d10f      	bne.n	14620 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x5a>
   14600:	e00b      	b.n	1461a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x54>
    assert!(len > 0, "bad spi len");
   14602:	f64f 1064 	movw	r0, #63844	; 0xf964
   14606:	f2c0 0001 	movt	r0, #1
   1460a:	f64f 1270 	movw	r2, #63856	; 0xf970
   1460e:	f2c0 0201 	movt	r2, #1
   14612:	210b      	movs	r1, #11
   14614:	f002 f9ee 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14618:	defe      	udf	#254	; 0xfe
   1461a:	2001      	movs	r0, #1
        else { 1 }
   1461c:	9023      	str	r0, [sp, #140]	; 0x8c
        if is_command { 0 }
   1461e:	e002      	b.n	14626 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
   14620:	2000      	movs	r0, #0
   14622:	9023      	str	r0, [sp, #140]	; 0x8c
   14624:	e7ff      	b.n	14626 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
    unsafe { hal::hal_gpio_write(
   14626:	9923      	ldr	r1, [sp, #140]	; 0x8c
   14628:	2012      	movs	r0, #18
   1462a:	f004 fb51 	bl	18cd0 <hal_gpio_write>
   1462e:	e7ff      	b.n	14630 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x6a>
   14630:	2019      	movs	r0, #25
   14632:	2100      	movs	r1, #0
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 0) };
   14634:	f004 fb4c 	bl	18cd0 <hal_gpio_write>
   14638:	e7ff      	b.n	1463a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x74>
    if len == 1 {  //  If writing only 1 byte...
   1463a:	9821      	ldr	r0, [sp, #132]	; 0x84
   1463c:	2801      	cmp	r0, #1
   1463e:	d005      	beq.n	1464c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x86>
   14640:	e7ff      	b.n	14642 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x7c>
            core::mem::transmute(buf), //  TX Buffer
   14642:	9820      	ldr	r0, [sp, #128]	; 0x80
   14644:	9061      	str	r0, [sp, #388]	; 0x184
   14646:	9961      	ldr	r1, [sp, #388]	; 0x184
   14648:	911e      	str	r1, [sp, #120]	; 0x78
   1464a:	e094      	b.n	14776 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1b0>
            core::mem::transmute(buf), //  TX Buffer
   1464c:	9820      	ldr	r0, [sp, #128]	; 0x80
   1464e:	905b      	str	r0, [sp, #364]	; 0x16c
   14650:	995b      	ldr	r1, [sp, #364]	; 0x16c
   14652:	911d      	str	r1, [sp, #116]	; 0x74
   14654:	e7ff      	b.n	14656 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x90>
   14656:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx(
   14658:	901c      	str	r0, [sp, #112]	; 0x70
   1465a:	991d      	ldr	r1, [sp, #116]	; 0x74
   1465c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1465e:	9b21      	ldr	r3, [sp, #132]	; 0x84
   14660:	f004 ffe4 	bl	1962c <hal_spi_txrx>
   14664:	9024      	str	r0, [sp, #144]	; 0x90
   14666:	e7ff      	b.n	14668 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xa2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   14668:	f24f 6058 	movw	r0, #63064	; 0xf658
   1466c:	f2c0 0001 	movt	r0, #1
   14670:	6800      	ldr	r0, [r0, #0]
   14672:	a924      	add	r1, sp, #144	; 0x90
   14674:	9125      	str	r1, [sp, #148]	; 0x94
   14676:	9026      	str	r0, [sp, #152]	; 0x98
   14678:	9825      	ldr	r0, [sp, #148]	; 0x94
   1467a:	905c      	str	r0, [sp, #368]	; 0x170
   1467c:	9926      	ldr	r1, [sp, #152]	; 0x98
   1467e:	915d      	str	r1, [sp, #372]	; 0x174
   14680:	6802      	ldr	r2, [r0, #0]
   14682:	680b      	ldr	r3, [r1, #0]
   14684:	429a      	cmp	r2, r3
   14686:	901b      	str	r0, [sp, #108]	; 0x6c
   14688:	911a      	str	r1, [sp, #104]	; 0x68
   1468a:	d101      	bne.n	14690 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xca>
   1468c:	e7ff      	b.n	1468e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xc8>
    if len == 1 {  //  If writing only 1 byte...
   1468e:	e11f      	b.n	148d0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   14690:	f24f 60b0 	movw	r0, #63152	; 0xf6b0
   14694:	f2c0 0001 	movt	r0, #1
   14698:	6801      	ldr	r1, [r0, #0]
   1469a:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1469c:	9036      	str	r0, [sp, #216]	; 0xd8
   1469e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   146a0:	9237      	str	r2, [sp, #220]	; 0xdc
   146a2:	f64f 1388 	movw	r3, #63880	; 0xf988
   146a6:	f2c0 0301 	movt	r3, #1
   146aa:	681b      	ldr	r3, [r3, #0]
   146ac:	f24f 6cd0 	movw	ip, #63184	; 0xf6d0
   146b0:	f2c0 0c01 	movt	ip, #1
   146b4:	f8dc c000 	ldr.w	ip, [ip]
   146b8:	46ee      	mov	lr, sp
   146ba:	2400      	movs	r4, #0
   146bc:	f8ce 4000 	str.w	r4, [lr]
   146c0:	a838      	add	r0, sp, #224	; 0xe0
   146c2:	2201      	movs	r2, #1
   146c4:	9119      	str	r1, [sp, #100]	; 0x64
   146c6:	4619      	mov	r1, r3
   146c8:	4663      	mov	r3, ip
   146ca:	f7fa fd4a 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   146ce:	e7ff      	b.n	146d0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x10a>
   146d0:	a836      	add	r0, sp, #216	; 0xd8
   146d2:	9033      	str	r0, [sp, #204]	; 0xcc
   146d4:	a837      	add	r0, sp, #220	; 0xdc
   146d6:	9034      	str	r0, [sp, #208]	; 0xd0
   146d8:	a838      	add	r0, sp, #224	; 0xe0
   146da:	9035      	str	r0, [sp, #212]	; 0xd4
   146dc:	9833      	ldr	r0, [sp, #204]	; 0xcc
   146de:	905e      	str	r0, [sp, #376]	; 0x178
   146e0:	9934      	ldr	r1, [sp, #208]	; 0xd0
   146e2:	915f      	str	r1, [sp, #380]	; 0x17c
   146e4:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   146e6:	9260      	str	r2, [sp, #384]	; 0x180
   146e8:	f64f 63ef 	movw	r3, #65263	; 0xfeef
   146ec:	f2c0 0300 	movt	r3, #0
   146f0:	9118      	str	r1, [sp, #96]	; 0x60
   146f2:	4619      	mov	r1, r3
   146f4:	9217      	str	r2, [sp, #92]	; 0x5c
   146f6:	f7fb fc32 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   146fa:	9016      	str	r0, [sp, #88]	; 0x58
   146fc:	9115      	str	r1, [sp, #84]	; 0x54
   146fe:	e7ff      	b.n	14700 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x13a>
   14700:	f64f 61ef 	movw	r1, #65263	; 0xfeef
   14704:	f2c0 0100 	movt	r1, #0
   14708:	9818      	ldr	r0, [sp, #96]	; 0x60
   1470a:	f7fb fc28 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1470e:	9014      	str	r0, [sp, #80]	; 0x50
   14710:	9113      	str	r1, [sp, #76]	; 0x4c
   14712:	e7ff      	b.n	14714 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x14e>
   14714:	f646 71c3 	movw	r1, #28611	; 0x6fc3
   14718:	f2c0 0101 	movt	r1, #1
   1471c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1471e:	f7fb fc5d 	bl	ffdc <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14722:	9012      	str	r0, [sp, #72]	; 0x48
   14724:	9111      	str	r1, [sp, #68]	; 0x44
   14726:	e7ff      	b.n	14728 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x162>
   14728:	9816      	ldr	r0, [sp, #88]	; 0x58
   1472a:	902d      	str	r0, [sp, #180]	; 0xb4
   1472c:	9915      	ldr	r1, [sp, #84]	; 0x54
   1472e:	912e      	str	r1, [sp, #184]	; 0xb8
   14730:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14732:	922f      	str	r2, [sp, #188]	; 0xbc
   14734:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   14736:	9330      	str	r3, [sp, #192]	; 0xc0
   14738:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   1473c:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
   14740:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
   14744:	f8cd e0c8 	str.w	lr, [sp, #200]	; 0xc8
   14748:	466c      	mov	r4, sp
   1474a:	2503      	movs	r5, #3
   1474c:	6025      	str	r5, [r4, #0]
   1474e:	a827      	add	r0, sp, #156	; 0x9c
   14750:	ab2d      	add	r3, sp, #180	; 0xb4
   14752:	9919      	ldr	r1, [sp, #100]	; 0x64
   14754:	462a      	mov	r2, r5
   14756:	f7fa fd04 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1475a:	e7ff      	b.n	1475c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x196>
   1475c:	f64f 108c 	movw	r0, #63884	; 0xf98c
   14760:	f2c0 0001 	movt	r0, #1
   14764:	f002 f93f 	bl	169e6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14768:	9010      	str	r0, [sp, #64]	; 0x40
   1476a:	e7ff      	b.n	1476c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a6>
   1476c:	a827      	add	r0, sp, #156	; 0x9c
   1476e:	9910      	ldr	r1, [sp, #64]	; 0x40
   14770:	f002 f976 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14774:	defe      	udf	#254	; 0xfe
   14776:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx_noblock(
   14778:	900f      	str	r0, [sp, #60]	; 0x3c
   1477a:	991e      	ldr	r1, [sp, #120]	; 0x78
   1477c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1477e:	9b21      	ldr	r3, [sp, #132]	; 0x84
   14780:	f004 ffaa 	bl	196d8 <hal_spi_txrx_noblock>
   14784:	903e      	str	r0, [sp, #248]	; 0xf8
   14786:	e7ff      	b.n	14788 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1c2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   14788:	f24f 6058 	movw	r0, #63064	; 0xf658
   1478c:	f2c0 0001 	movt	r0, #1
   14790:	6800      	ldr	r0, [r0, #0]
   14792:	a93e      	add	r1, sp, #248	; 0xf8
   14794:	913f      	str	r1, [sp, #252]	; 0xfc
   14796:	9040      	str	r0, [sp, #256]	; 0x100
   14798:	983f      	ldr	r0, [sp, #252]	; 0xfc
   1479a:	9062      	str	r0, [sp, #392]	; 0x188
   1479c:	9940      	ldr	r1, [sp, #256]	; 0x100
   1479e:	9163      	str	r1, [sp, #396]	; 0x18c
   147a0:	6802      	ldr	r2, [r0, #0]
   147a2:	680b      	ldr	r3, [r1, #0]
   147a4:	429a      	cmp	r2, r3
   147a6:	900e      	str	r0, [sp, #56]	; 0x38
   147a8:	910d      	str	r1, [sp, #52]	; 0x34
   147aa:	d10c      	bne.n	147c6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x200>
   147ac:	e7ff      	b.n	147ae <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1e8>
   147ae:	f247 5030 	movw	r0, #30000	; 0x7530
        let timeout = 30_000;
   147b2:	9067      	str	r0, [sp, #412]	; 0x19c
   147b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   147b8:	fba0 0101 	umull	r0, r1, r0, r1
   147bc:	2900      	cmp	r1, #0
   147be:	900c      	str	r0, [sp, #48]	; 0x30
   147c0:	f040 8090 	bne.w	148e4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x31e>
   147c4:	e072      	b.n	148ac <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2e6>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   147c6:	f24f 60b0 	movw	r0, #63152	; 0xf6b0
   147ca:	f2c0 0001 	movt	r0, #1
   147ce:	6801      	ldr	r1, [r0, #0]
   147d0:	980e      	ldr	r0, [sp, #56]	; 0x38
   147d2:	9050      	str	r0, [sp, #320]	; 0x140
   147d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   147d6:	9251      	str	r2, [sp, #324]	; 0x144
   147d8:	f64f 1388 	movw	r3, #63880	; 0xf988
   147dc:	f2c0 0301 	movt	r3, #1
   147e0:	681b      	ldr	r3, [r3, #0]
   147e2:	f24f 6cd0 	movw	ip, #63184	; 0xf6d0
   147e6:	f2c0 0c01 	movt	ip, #1
   147ea:	f8dc c000 	ldr.w	ip, [ip]
   147ee:	46ee      	mov	lr, sp
   147f0:	2400      	movs	r4, #0
   147f2:	f8ce 4000 	str.w	r4, [lr]
   147f6:	a852      	add	r0, sp, #328	; 0x148
   147f8:	2201      	movs	r2, #1
   147fa:	910b      	str	r1, [sp, #44]	; 0x2c
   147fc:	4619      	mov	r1, r3
   147fe:	4663      	mov	r3, ip
   14800:	f7fa fcaf 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14804:	e7ff      	b.n	14806 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x240>
   14806:	a850      	add	r0, sp, #320	; 0x140
   14808:	904d      	str	r0, [sp, #308]	; 0x134
   1480a:	a851      	add	r0, sp, #324	; 0x144
   1480c:	904e      	str	r0, [sp, #312]	; 0x138
   1480e:	a852      	add	r0, sp, #328	; 0x148
   14810:	904f      	str	r0, [sp, #316]	; 0x13c
   14812:	984d      	ldr	r0, [sp, #308]	; 0x134
   14814:	9064      	str	r0, [sp, #400]	; 0x190
   14816:	994e      	ldr	r1, [sp, #312]	; 0x138
   14818:	9165      	str	r1, [sp, #404]	; 0x194
   1481a:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
   1481c:	9266      	str	r2, [sp, #408]	; 0x198
   1481e:	f64f 63ef 	movw	r3, #65263	; 0xfeef
   14822:	f2c0 0300 	movt	r3, #0
   14826:	910a      	str	r1, [sp, #40]	; 0x28
   14828:	4619      	mov	r1, r3
   1482a:	9209      	str	r2, [sp, #36]	; 0x24
   1482c:	f7fb fb97 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14830:	9008      	str	r0, [sp, #32]
   14832:	9107      	str	r1, [sp, #28]
   14834:	e7ff      	b.n	14836 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x270>
   14836:	f64f 61ef 	movw	r1, #65263	; 0xfeef
   1483a:	f2c0 0100 	movt	r1, #0
   1483e:	980a      	ldr	r0, [sp, #40]	; 0x28
   14840:	f7fb fb8d 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14844:	9006      	str	r0, [sp, #24]
   14846:	9105      	str	r1, [sp, #20]
   14848:	e7ff      	b.n	1484a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x284>
   1484a:	f646 71c3 	movw	r1, #28611	; 0x6fc3
   1484e:	f2c0 0101 	movt	r1, #1
   14852:	9809      	ldr	r0, [sp, #36]	; 0x24
   14854:	f7fb fbc2 	bl	ffdc <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14858:	9004      	str	r0, [sp, #16]
   1485a:	9103      	str	r1, [sp, #12]
   1485c:	e7ff      	b.n	1485e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x298>
   1485e:	9808      	ldr	r0, [sp, #32]
   14860:	9047      	str	r0, [sp, #284]	; 0x11c
   14862:	9907      	ldr	r1, [sp, #28]
   14864:	9148      	str	r1, [sp, #288]	; 0x120
   14866:	9a06      	ldr	r2, [sp, #24]
   14868:	9249      	str	r2, [sp, #292]	; 0x124
   1486a:	9b05      	ldr	r3, [sp, #20]
   1486c:	934a      	str	r3, [sp, #296]	; 0x128
   1486e:	f8dd c010 	ldr.w	ip, [sp, #16]
   14872:	f8cd c12c 	str.w	ip, [sp, #300]	; 0x12c
   14876:	f8dd e00c 	ldr.w	lr, [sp, #12]
   1487a:	f8cd e130 	str.w	lr, [sp, #304]	; 0x130
   1487e:	466c      	mov	r4, sp
   14880:	2503      	movs	r5, #3
   14882:	6025      	str	r5, [r4, #0]
   14884:	a841      	add	r0, sp, #260	; 0x104
   14886:	ab47      	add	r3, sp, #284	; 0x11c
   14888:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1488a:	462a      	mov	r2, r5
   1488c:	f7fa fc69 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14890:	e7ff      	b.n	14892 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2cc>
   14892:	f64f 109c 	movw	r0, #63900	; 0xf99c
   14896:	f2c0 0001 	movt	r0, #1
   1489a:	f002 f8a4 	bl	169e6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1489e:	9002      	str	r0, [sp, #8]
   148a0:	e7ff      	b.n	148a2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2dc>
   148a2:	a841      	add	r0, sp, #260	; 0x104
   148a4:	9902      	ldr	r1, [sp, #8]
   148a6:	f002 f8db 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   148aa:	defe      	udf	#254	; 0xfe
   148ac:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   148b0:	f2c1 0062 	movt	r0, #4194	; 0x1062
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   148b4:	990c      	ldr	r1, [sp, #48]	; 0x30
   148b6:	fba1 0200 	umull	r0, r2, r1, r0
   148ba:	0991      	lsrs	r1, r2, #6
   148bc:	f241 222c 	movw	r2, #4652	; 0x122c
   148c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   148c4:	9001      	str	r0, [sp, #4]
   148c6:	4610      	mov	r0, r2
   148c8:	f006 f8d2 	bl	1aa70 <os_sem_pend>
   148cc:	e7ff      	b.n	148ce <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x308>
    if len == 1 {  //  If writing only 1 byte...
   148ce:	e7ff      	b.n	148d0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
   148d0:	2019      	movs	r0, #25
   148d2:	2101      	movs	r1, #1
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
   148d4:	f004 f9fc 	bl	18cd0 <hal_gpio_write>
   148d8:	e7ff      	b.n	148da <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x314>
   148da:	2000      	movs	r0, #0
    Ok(())
   148dc:	9022      	str	r0, [sp, #136]	; 0x88
   148de:	2001      	movs	r0, #1
   148e0:	9022      	str	r0, [sp, #136]	; 0x88
}
   148e2:	e686      	b.n	145f2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   148e4:	f64f 0080 	movw	r0, #63616	; 0xf880
   148e8:	f2c0 0001 	movt	r0, #1
   148ec:	f64f 12ac 	movw	r2, #63916	; 0xf9ac
   148f0:	f2c0 0201 	movt	r2, #1
   148f4:	2121      	movs	r1, #33	; 0x21
   148f6:	f002 f87d 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   148fa:	defe      	udf	#254	; 0xfe

000148fc <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E>:

/// Called by interrupt handler after Non-blocking SPI transfer has completed
extern "C" fn spi_noblock_handler(_arg: Ptr, _len: i32) {
   148fc:	b5b0      	push	{r4, r5, r7, lr}
   148fe:	b0ae      	sub	sp, #184	; 0xb8
   14900:	9027      	str	r0, [sp, #156]	; 0x9c
   14902:	9128      	str	r1, [sp, #160]	; 0xa0
    //  Signal to internal_spi_noblock_write() that SPI request has been completed.
    let rc = unsafe { os::os_sem_release(&mut SPI_SEM) };
   14904:	f241 202c 	movw	r0, #4652	; 0x122c
   14908:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1490c:	f006 f87e 	bl	1aa0c <os_sem_release>
   14910:	900d      	str	r0, [sp, #52]	; 0x34
   14912:	e7ff      	b.n	14914 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x18>
    assert_eq!(rc, 0, "sem fail");
   14914:	f24f 6058 	movw	r0, #63064	; 0xf658
   14918:	f2c0 0001 	movt	r0, #1
   1491c:	6800      	ldr	r0, [r0, #0]
   1491e:	a90d      	add	r1, sp, #52	; 0x34
   14920:	910e      	str	r1, [sp, #56]	; 0x38
   14922:	900f      	str	r0, [sp, #60]	; 0x3c
   14924:	980e      	ldr	r0, [sp, #56]	; 0x38
   14926:	9029      	str	r0, [sp, #164]	; 0xa4
   14928:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1492a:	912a      	str	r1, [sp, #168]	; 0xa8
   1492c:	6802      	ldr	r2, [r0, #0]
   1492e:	680b      	ldr	r3, [r1, #0]
   14930:	429a      	cmp	r2, r3
   14932:	900c      	str	r0, [sp, #48]	; 0x30
   14934:	910b      	str	r1, [sp, #44]	; 0x2c
   14936:	d102      	bne.n	1493e <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x42>
   14938:	e7ff      	b.n	1493a <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x3e>
}
   1493a:	b02e      	add	sp, #184	; 0xb8
   1493c:	bdb0      	pop	{r4, r5, r7, pc}
    assert_eq!(rc, 0, "sem fail");
   1493e:	f24f 60b0 	movw	r0, #63152	; 0xf6b0
   14942:	f2c0 0001 	movt	r0, #1
   14946:	6801      	ldr	r1, [r0, #0]
   14948:	980c      	ldr	r0, [sp, #48]	; 0x30
   1494a:	901f      	str	r0, [sp, #124]	; 0x7c
   1494c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1494e:	9220      	str	r2, [sp, #128]	; 0x80
   14950:	f24f 73c8 	movw	r3, #63432	; 0xf7c8
   14954:	f2c0 0301 	movt	r3, #1
   14958:	681b      	ldr	r3, [r3, #0]
   1495a:	f24f 6cd0 	movw	ip, #63184	; 0xf6d0
   1495e:	f2c0 0c01 	movt	ip, #1
   14962:	f8dc c000 	ldr.w	ip, [ip]
   14966:	46ee      	mov	lr, sp
   14968:	2400      	movs	r4, #0
   1496a:	f8ce 4000 	str.w	r4, [lr]
   1496e:	a821      	add	r0, sp, #132	; 0x84
   14970:	2201      	movs	r2, #1
   14972:	910a      	str	r1, [sp, #40]	; 0x28
   14974:	4619      	mov	r1, r3
   14976:	4663      	mov	r3, ip
   14978:	f7fa fbf3 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1497c:	e7ff      	b.n	1497e <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x82>
   1497e:	a81f      	add	r0, sp, #124	; 0x7c
   14980:	901c      	str	r0, [sp, #112]	; 0x70
   14982:	a820      	add	r0, sp, #128	; 0x80
   14984:	901d      	str	r0, [sp, #116]	; 0x74
   14986:	a821      	add	r0, sp, #132	; 0x84
   14988:	901e      	str	r0, [sp, #120]	; 0x78
   1498a:	981c      	ldr	r0, [sp, #112]	; 0x70
   1498c:	902b      	str	r0, [sp, #172]	; 0xac
   1498e:	991d      	ldr	r1, [sp, #116]	; 0x74
   14990:	912c      	str	r1, [sp, #176]	; 0xb0
   14992:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14994:	922d      	str	r2, [sp, #180]	; 0xb4
   14996:	f64f 7343 	movw	r3, #65347	; 0xff43
   1499a:	f2c0 0300 	movt	r3, #0
   1499e:	9109      	str	r1, [sp, #36]	; 0x24
   149a0:	4619      	mov	r1, r3
   149a2:	9208      	str	r2, [sp, #32]
   149a4:	f7fb fb05 	bl	ffb2 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   149a8:	9007      	str	r0, [sp, #28]
   149aa:	9106      	str	r1, [sp, #24]
   149ac:	e7ff      	b.n	149ae <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xb2>
   149ae:	f64f 7143 	movw	r1, #65347	; 0xff43
   149b2:	f2c0 0100 	movt	r1, #0
   149b6:	9809      	ldr	r0, [sp, #36]	; 0x24
   149b8:	f7fb fafb 	bl	ffb2 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   149bc:	9005      	str	r0, [sp, #20]
   149be:	9104      	str	r1, [sp, #16]
   149c0:	e7ff      	b.n	149c2 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xc6>
   149c2:	f646 71c3 	movw	r1, #28611	; 0x6fc3
   149c6:	f2c0 0101 	movt	r1, #1
   149ca:	9808      	ldr	r0, [sp, #32]
   149cc:	f7fb fb06 	bl	ffdc <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   149d0:	9003      	str	r0, [sp, #12]
   149d2:	9102      	str	r1, [sp, #8]
   149d4:	e7ff      	b.n	149d6 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xda>
   149d6:	9807      	ldr	r0, [sp, #28]
   149d8:	9016      	str	r0, [sp, #88]	; 0x58
   149da:	9906      	ldr	r1, [sp, #24]
   149dc:	9117      	str	r1, [sp, #92]	; 0x5c
   149de:	9a05      	ldr	r2, [sp, #20]
   149e0:	9218      	str	r2, [sp, #96]	; 0x60
   149e2:	9b04      	ldr	r3, [sp, #16]
   149e4:	9319      	str	r3, [sp, #100]	; 0x64
   149e6:	f8dd c00c 	ldr.w	ip, [sp, #12]
   149ea:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
   149ee:	f8dd e008 	ldr.w	lr, [sp, #8]
   149f2:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
   149f6:	466c      	mov	r4, sp
   149f8:	2503      	movs	r5, #3
   149fa:	6025      	str	r5, [r4, #0]
   149fc:	a810      	add	r0, sp, #64	; 0x40
   149fe:	ab16      	add	r3, sp, #88	; 0x58
   14a00:	990a      	ldr	r1, [sp, #40]	; 0x28
   14a02:	462a      	mov	r2, r5
   14a04:	f7fa fbad 	bl	f162 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14a08:	e7ff      	b.n	14a0a <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x10e>
   14a0a:	f64f 10bc 	movw	r0, #63932	; 0xf9bc
   14a0e:	f2c0 0001 	movt	r0, #1
   14a12:	f001 ffe8 	bl	169e6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14a16:	9001      	str	r0, [sp, #4]
   14a18:	e7ff      	b.n	14a1a <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x11e>
   14a1a:	a810      	add	r0, sp, #64	; 0x40
   14a1c:	9901      	ldr	r1, [sp, #4]
   14a1e:	f002 f81f 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14a22:	defe      	udf	#254	; 0xfe

00014a24 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>:

/// Sleep for the specified number of milliseconds
fn delay_ms(ms: u8) {
   14a24:	b580      	push	{r7, lr}
   14a26:	b084      	sub	sp, #16
   14a28:	4601      	mov	r1, r0
   14a2a:	f88d 000b 	strb.w	r0, [sp, #11]
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   14a2e:	b2c0      	uxtb	r0, r0
   14a30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14a34:	fba0 0202 	umull	r0, r2, r0, r2
   14a38:	2a00      	cmp	r2, #0
   14a3a:	9001      	str	r0, [sp, #4]
   14a3c:	d110      	bne.n	14a60 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x3c>
   14a3e:	e7ff      	b.n	14a40 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x1c>
   14a40:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   14a44:	f2c1 0062 	movt	r0, #4194	; 0x1062
   14a48:	9901      	ldr	r1, [sp, #4]
   14a4a:	fba1 0200 	umull	r0, r2, r1, r0
   14a4e:	0992      	lsrs	r2, r2, #6
   14a50:	9203      	str	r2, [sp, #12]
    unsafe { os::os_time_delay(delay_ticks) };
   14a52:	9000      	str	r0, [sp, #0]
   14a54:	4610      	mov	r0, r2
   14a56:	f006 f959 	bl	1ad0c <os_time_delay>
   14a5a:	e7ff      	b.n	14a5c <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x38>
}
   14a5c:	b004      	add	sp, #16
   14a5e:	bd80      	pop	{r7, pc}
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   14a60:	f64f 0080 	movw	r0, #63616	; 0xf880
   14a64:	f2c0 0001 	movt	r0, #1
   14a68:	f64f 12cc 	movw	r2, #63948	; 0xf9cc
   14a6c:	f2c0 0201 	movt	r2, #1
   14a70:	2121      	movs	r1, #33	; 0x21
   14a72:	f001 ffbf 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14a76:	defe      	udf	#254	; 0xfe

00014a78 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>:
   14a78:	b082      	sub	sp, #8
   14a7a:	9001      	str	r0, [sp, #4]
   14a7c:	9000      	str	r0, [sp, #0]
   14a7e:	e7ff      	b.n	14a80 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E+0x8>
   14a80:	9800      	ldr	r0, [sp, #0]
   14a82:	fab0 f180 	clz	r1, r0
   14a86:	0948      	lsrs	r0, r1, #5
   14a88:	b002      	add	sp, #8
   14a8a:	4770      	bx	lr

00014a8c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>:

macro_rules! impl_to_primitive_uint_to_uint {
    ($SrcT:ident : $( $(#[$cfg:meta])* fn $method:ident -> $DstT:ident ; )*) => {$(
        #[inline]
        $(#[$cfg])*
        fn $method(&self) -> Option<$DstT> {
   14a8c:	b08a      	sub	sp, #40	; 0x28
   14a8e:	9005      	str	r0, [sp, #20]
   14a90:	2100      	movs	r1, #0
            let max = $DstT::MAX as $SrcT;
   14a92:	9107      	str	r1, [sp, #28]
   14a94:	21ff      	movs	r1, #255	; 0xff
   14a96:	9106      	str	r1, [sp, #24]
   14a98:	2108      	movs	r1, #8
   14a9a:	9108      	str	r1, [sp, #32]
   14a9c:	9908      	ldr	r1, [sp, #32]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14a9e:	9003      	str	r0, [sp, #12]
   14aa0:	9102      	str	r1, [sp, #8]
   14aa2:	e016      	b.n	14ad2 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x46>
   14aa4:	2001      	movs	r0, #1
   14aa6:	f88d 0013 	strb.w	r0, [sp, #19]
   14aaa:	e00c      	b.n	14ac6 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   14aac:	2000      	movs	r0, #0
   14aae:	f88d 0013 	strb.w	r0, [sp, #19]
   14ab2:	e008      	b.n	14ac6 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   14ab4:	9803      	ldr	r0, [sp, #12]
   14ab6:	6801      	ldr	r1, [r0, #0]
   14ab8:	6842      	ldr	r2, [r0, #4]
   14aba:	f5b1 7180 	subs.w	r1, r1, #256	; 0x100
   14abe:	f172 0200 	sbcs.w	r2, r2, #0
   14ac2:	d3ef      	bcc.n	14aa4 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   14ac4:	e7f2      	b.n	14aac <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x20>
   14ac6:	f89d 0013 	ldrb.w	r0, [sp, #19]
   14aca:	07c0      	lsls	r0, r0, #31
   14acc:	2800      	cmp	r0, #0
   14ace:	d10e      	bne.n	14aee <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x62>
   14ad0:	e009      	b.n	14ae6 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x5a>
   14ad2:	2001      	movs	r0, #1
   14ad4:	9009      	str	r0, [sp, #36]	; 0x24
   14ad6:	9809      	ldr	r0, [sp, #36]	; 0x24
   14ad8:	9001      	str	r0, [sp, #4]
   14ada:	e7ff      	b.n	14adc <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x50>
   14adc:	9802      	ldr	r0, [sp, #8]
   14ade:	9901      	ldr	r1, [sp, #4]
   14ae0:	4288      	cmp	r0, r1
   14ae2:	d9df      	bls.n	14aa4 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   14ae4:	e7e6      	b.n	14ab4 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x28>
   14ae6:	2000      	movs	r0, #0
                Some(*self as $DstT)
            } else {
                None
   14ae8:	f88d 0010 	strb.w	r0, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14aec:	e007      	b.n	14afe <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
                Some(*self as $DstT)
   14aee:	9803      	ldr	r0, [sp, #12]
   14af0:	7801      	ldrb	r1, [r0, #0]
   14af2:	f88d 1011 	strb.w	r1, [sp, #17]
   14af6:	2101      	movs	r1, #1
   14af8:	f88d 1010 	strb.w	r1, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14afc:	e7ff      	b.n	14afe <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
            }
        }
   14afe:	f89d 0010 	ldrb.w	r0, [sp, #16]
   14b02:	f89d 1011 	ldrb.w	r1, [sp, #17]
   14b06:	b00a      	add	sp, #40	; 0x28
   14b08:	4770      	bx	lr

00014b0a <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>:
   14b0a:	b580      	push	{r7, lr}
   14b0c:	b090      	sub	sp, #64	; 0x40
   14b0e:	2200      	movs	r2, #0
   14b10:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   14b14:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   14b18:	2201      	movs	r2, #1
   14b1a:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   14b1e:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   14b22:	680a      	ldr	r2, [r1, #0]
   14b24:	2a00      	cmp	r2, #0
   14b26:	9101      	str	r1, [sp, #4]
   14b28:	9000      	str	r0, [sp, #0]
   14b2a:	d001      	beq.n	14b30 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x26>
   14b2c:	e7ff      	b.n	14b2e <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x24>
   14b2e:	e004      	b.n	14b3a <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x30>
   14b30:	2000      	movs	r0, #0
   14b32:	9900      	ldr	r1, [sp, #0]
   14b34:	6008      	str	r0, [r1, #0]
   14b36:	e032      	b.n	14b9e <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
   14b38:	defe      	udf	#254	; 0xfe
   14b3a:	2000      	movs	r0, #0
   14b3c:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   14b40:	9901      	ldr	r1, [sp, #4]
   14b42:	684a      	ldr	r2, [r1, #4]
   14b44:	688b      	ldr	r3, [r1, #8]
   14b46:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   14b4a:	f8cd c010 	str.w	ip, [sp, #16]
   14b4e:	9303      	str	r3, [sp, #12]
   14b50:	9202      	str	r2, [sp, #8]
   14b52:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   14b56:	9802      	ldr	r0, [sp, #8]
   14b58:	9a03      	ldr	r2, [sp, #12]
   14b5a:	9b04      	ldr	r3, [sp, #16]
   14b5c:	930d      	str	r3, [sp, #52]	; 0x34
   14b5e:	920c      	str	r2, [sp, #48]	; 0x30
   14b60:	900b      	str	r0, [sp, #44]	; 0x2c
   14b62:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14b64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14b68:	930a      	str	r3, [sp, #40]	; 0x28
   14b6a:	9209      	str	r2, [sp, #36]	; 0x24
   14b6c:	9008      	str	r0, [sp, #32]
   14b6e:	a805      	add	r0, sp, #20
   14b70:	a908      	add	r1, sp, #32
   14b72:	f7fd fc17 	bl	123a4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>
   14b76:	e7ff      	b.n	14b78 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x6e>
   14b78:	9805      	ldr	r0, [sp, #20]
   14b7a:	9906      	ldr	r1, [sp, #24]
   14b7c:	9a07      	ldr	r2, [sp, #28]
   14b7e:	9b00      	ldr	r3, [sp, #0]
   14b80:	60da      	str	r2, [r3, #12]
   14b82:	6099      	str	r1, [r3, #8]
   14b84:	6058      	str	r0, [r3, #4]
   14b86:	2001      	movs	r0, #1
   14b88:	6018      	str	r0, [r3, #0]
   14b8a:	e008      	b.n	14b9e <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
   14b8c:	9801      	ldr	r0, [sp, #4]
   14b8e:	6801      	ldr	r1, [r0, #0]
   14b90:	2901      	cmp	r1, #1
   14b92:	d00c      	beq.n	14bae <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa4>
   14b94:	e015      	b.n	14bc2 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb8>
   14b96:	2000      	movs	r0, #0
   14b98:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   14b9c:	e7f6      	b.n	14b8c <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
   14b9e:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   14ba2:	07c0      	lsls	r0, r0, #31
   14ba4:	2800      	cmp	r0, #0
   14ba6:	d1f6      	bne.n	14b96 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x8c>
   14ba8:	e7f0      	b.n	14b8c <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
   14baa:	b010      	add	sp, #64	; 0x40
   14bac:	bd80      	pop	{r7, pc}
   14bae:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   14bb2:	07c0      	lsls	r0, r0, #31
   14bb4:	2800      	cmp	r0, #0
   14bb6:	d0f8      	beq.n	14baa <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
   14bb8:	e7ff      	b.n	14bba <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb0>
   14bba:	2000      	movs	r0, #0
   14bbc:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   14bc0:	e7f3      	b.n	14baa <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
   14bc2:	e7f2      	b.n	14baa <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>

00014bc4 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>:
   14bc4:	b084      	sub	sp, #16
   14bc6:	9002      	str	r0, [sp, #8]
   14bc8:	6801      	ldr	r1, [r0, #0]
   14bca:	2900      	cmp	r1, #0
   14bcc:	9000      	str	r0, [sp, #0]
   14bce:	d001      	beq.n	14bd4 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x10>
   14bd0:	e7ff      	b.n	14bd2 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0xe>
   14bd2:	e003      	b.n	14bdc <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x18>
   14bd4:	2000      	movs	r0, #0
   14bd6:	9001      	str	r0, [sp, #4]
   14bd8:	e006      	b.n	14be8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   14bda:	defe      	udf	#254	; 0xfe
   14bdc:	9800      	ldr	r0, [sp, #0]
   14bde:	f100 0108 	add.w	r1, r0, #8
   14be2:	9103      	str	r1, [sp, #12]
   14be4:	9101      	str	r1, [sp, #4]
   14be6:	e7ff      	b.n	14be8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   14be8:	9801      	ldr	r0, [sp, #4]
   14bea:	b004      	add	sp, #16
   14bec:	4770      	bx	lr

00014bee <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>:
   14bee:	b510      	push	{r4, lr}
   14bf0:	b088      	sub	sp, #32
   14bf2:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   14bf6:	468e      	mov	lr, r1
   14bf8:	4604      	mov	r4, r0
   14bfa:	f8ad 0010 	strh.w	r0, [sp, #16]
   14bfe:	f8ad 1012 	strh.w	r1, [sp, #18]
   14c02:	9205      	str	r2, [sp, #20]
   14c04:	9306      	str	r3, [sp, #24]
   14c06:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   14c0a:	4601      	mov	r1, r0
   14c0c:	2800      	cmp	r0, #0
   14c0e:	9303      	str	r3, [sp, #12]
   14c10:	9202      	str	r2, [sp, #8]
   14c12:	f8cd c004 	str.w	ip, [sp, #4]
   14c16:	d001      	beq.n	14c1c <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2e>
   14c18:	e7ff      	b.n	14c1a <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2c>
   14c1a:	e006      	b.n	14c2a <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x3c>
   14c1c:	9802      	ldr	r0, [sp, #8]
   14c1e:	9903      	ldr	r1, [sp, #12]
   14c20:	9a01      	ldr	r2, [sp, #4]
   14c22:	f001 fe9d 	bl	16960 <_ZN4core6option13expect_failed17had6579abaad447b4E>
   14c26:	defe      	udf	#254	; 0xfe
   14c28:	defe      	udf	#254	; 0xfe
   14c2a:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   14c2e:	4601      	mov	r1, r0
   14c30:	f8ad 001e 	strh.w	r0, [sp, #30]
   14c34:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   14c38:	2801      	cmp	r0, #1
   14c3a:	9100      	str	r1, [sp, #0]
   14c3c:	d103      	bne.n	14c46 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x58>
   14c3e:	e7ff      	b.n	14c40 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>
   14c40:	9800      	ldr	r0, [sp, #0]
   14c42:	b008      	add	sp, #32
   14c44:	bd10      	pop	{r4, pc}
   14c46:	e7fb      	b.n	14c40 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>

00014c48 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>:
   14c48:	b084      	sub	sp, #16
   14c4a:	460b      	mov	r3, r1
   14c4c:	4684      	mov	ip, r0
   14c4e:	f88d 000c 	strb.w	r0, [sp, #12]
   14c52:	f88d 100d 	strb.w	r1, [sp, #13]
   14c56:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14c5a:	07c1      	lsls	r1, r0, #31
   14c5c:	2900      	cmp	r1, #0
   14c5e:	9202      	str	r2, [sp, #8]
   14c60:	d001      	beq.n	14c66 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1e>
   14c62:	e7ff      	b.n	14c64 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1c>
   14c64:	e009      	b.n	14c7a <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x32>
   14c66:	f64f 10dc 	movw	r0, #63964	; 0xf9dc
   14c6a:	f2c0 0001 	movt	r0, #1
   14c6e:	212b      	movs	r1, #43	; 0x2b
   14c70:	9a02      	ldr	r2, [sp, #8]
   14c72:	f001 febf 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14c76:	defe      	udf	#254	; 0xfe
   14c78:	defe      	udf	#254	; 0xfe
   14c7a:	f89d 000d 	ldrb.w	r0, [sp, #13]
   14c7e:	4601      	mov	r1, r0
   14c80:	f88d 000f 	strb.w	r0, [sp, #15]
   14c84:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14c88:	07c0      	lsls	r0, r0, #31
   14c8a:	2800      	cmp	r0, #0
   14c8c:	9101      	str	r1, [sp, #4]
   14c8e:	d003      	beq.n	14c98 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x50>
   14c90:	e7ff      	b.n	14c92 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>
   14c92:	9801      	ldr	r0, [sp, #4]
   14c94:	b004      	add	sp, #16
   14c96:	4770      	bx	lr
   14c98:	e7fb      	b.n	14c92 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>

00014c9a <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>:
   14c9a:	b088      	sub	sp, #32
   14c9c:	9004      	str	r0, [sp, #16]
   14c9e:	9105      	str	r1, [sp, #20]
   14ca0:	9804      	ldr	r0, [sp, #16]
   14ca2:	2800      	cmp	r0, #0
   14ca4:	4601      	mov	r1, r0
   14ca6:	bf18      	it	ne
   14ca8:	2101      	movne	r1, #1
   14caa:	2800      	cmp	r0, #0
   14cac:	9203      	str	r2, [sp, #12]
   14cae:	d001      	beq.n	14cb4 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x1a>
   14cb0:	e7ff      	b.n	14cb2 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x18>
   14cb2:	e009      	b.n	14cc8 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x2e>
   14cb4:	f64f 10dc 	movw	r0, #63964	; 0xf9dc
   14cb8:	f2c0 0001 	movt	r0, #1
   14cbc:	212b      	movs	r1, #43	; 0x2b
   14cbe:	9a03      	ldr	r2, [sp, #12]
   14cc0:	f001 fe98 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14cc4:	defe      	udf	#254	; 0xfe
   14cc6:	defe      	udf	#254	; 0xfe
   14cc8:	9804      	ldr	r0, [sp, #16]
   14cca:	9905      	ldr	r1, [sp, #20]
   14ccc:	9006      	str	r0, [sp, #24]
   14cce:	9107      	str	r1, [sp, #28]
   14cd0:	9a04      	ldr	r2, [sp, #16]
   14cd2:	2a00      	cmp	r2, #0
   14cd4:	9002      	str	r0, [sp, #8]
   14cd6:	9101      	str	r1, [sp, #4]
   14cd8:	d004      	beq.n	14ce4 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x4a>
   14cda:	e7ff      	b.n	14cdc <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>
   14cdc:	9802      	ldr	r0, [sp, #8]
   14cde:	9901      	ldr	r1, [sp, #4]
   14ce0:	b008      	add	sp, #32
   14ce2:	4770      	bx	lr
   14ce4:	e7fa      	b.n	14cdc <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>

00014ce6 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>:
   14ce6:	b580      	push	{r7, lr}
   14ce8:	b082      	sub	sp, #8
   14cea:	9001      	str	r0, [sp, #4]
   14cec:	f000 f82b 	bl	14d46 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   14cf0:	9000      	str	r0, [sp, #0]
   14cf2:	e7ff      	b.n	14cf4 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E+0xe>
   14cf4:	2001      	movs	r0, #1
   14cf6:	9900      	ldr	r1, [sp, #0]
   14cf8:	4388      	bics	r0, r1
   14cfa:	b002      	add	sp, #8
   14cfc:	bd80      	pop	{r7, pc}

00014cfe <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>:
   14cfe:	b082      	sub	sp, #8
   14d00:	9001      	str	r0, [sp, #4]
   14d02:	6800      	ldr	r0, [r0, #0]
   14d04:	2800      	cmp	r0, #0
   14d06:	d104      	bne.n	14d12 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x14>
   14d08:	e7ff      	b.n	14d0a <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0xc>
   14d0a:	2000      	movs	r0, #0
   14d0c:	f88d 0003 	strb.w	r0, [sp, #3]
   14d10:	e003      	b.n	14d1a <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   14d12:	2001      	movs	r0, #1
   14d14:	f88d 0003 	strb.w	r0, [sp, #3]
   14d18:	e7ff      	b.n	14d1a <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   14d1a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14d1e:	b002      	add	sp, #8
   14d20:	4770      	bx	lr

00014d22 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>:
   14d22:	b082      	sub	sp, #8
   14d24:	9001      	str	r0, [sp, #4]
   14d26:	6800      	ldr	r0, [r0, #0]
   14d28:	2801      	cmp	r0, #1
   14d2a:	d004      	beq.n	14d36 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x14>
   14d2c:	e7ff      	b.n	14d2e <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0xc>
   14d2e:	2000      	movs	r0, #0
   14d30:	f88d 0003 	strb.w	r0, [sp, #3]
   14d34:	e003      	b.n	14d3e <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
   14d36:	2001      	movs	r0, #1
   14d38:	f88d 0003 	strb.w	r0, [sp, #3]
   14d3c:	e7ff      	b.n	14d3e <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
   14d3e:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14d42:	b002      	add	sp, #8
   14d44:	4770      	bx	lr

00014d46 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>:
   14d46:	b082      	sub	sp, #8
   14d48:	9001      	str	r0, [sp, #4]
   14d4a:	8800      	ldrh	r0, [r0, #0]
   14d4c:	2801      	cmp	r0, #1
   14d4e:	d004      	beq.n	14d5a <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x14>
   14d50:	e7ff      	b.n	14d52 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0xc>
   14d52:	2000      	movs	r0, #0
   14d54:	f88d 0003 	strb.w	r0, [sp, #3]
   14d58:	e003      	b.n	14d62 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
   14d5a:	2001      	movs	r0, #1
   14d5c:	f88d 0003 	strb.w	r0, [sp, #3]
   14d60:	e7ff      	b.n	14d62 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
   14d62:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14d66:	b002      	add	sp, #8
   14d68:	4770      	bx	lr

00014d6a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>:
   14d6a:	b580      	push	{r7, lr}
   14d6c:	b086      	sub	sp, #24
   14d6e:	9000      	str	r0, [sp, #0]
   14d70:	2000      	movs	r0, #0
   14d72:	f88d 000f 	strb.w	r0, [sp, #15]
   14d76:	f88d 000e 	strb.w	r0, [sp, #14]
   14d7a:	2001      	movs	r0, #1
   14d7c:	f88d 000f 	strb.w	r0, [sp, #15]
   14d80:	f88d 000e 	strb.w	r0, [sp, #14]
   14d84:	9800      	ldr	r0, [sp, #0]
   14d86:	2800      	cmp	r0, #0
   14d88:	4601      	mov	r1, r0
   14d8a:	bf18      	it	ne
   14d8c:	2101      	movne	r1, #1
   14d8e:	2800      	cmp	r0, #0
   14d90:	d001      	beq.n	14d96 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2c>
   14d92:	e7ff      	b.n	14d94 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2a>
   14d94:	e004      	b.n	14da0 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x36>
   14d96:	2000      	movs	r0, #0
   14d98:	f88d 0004 	strb.w	r0, [sp, #4]
   14d9c:	e019      	b.n	14dd2 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   14d9e:	defe      	udf	#254	; 0xfe
   14da0:	2000      	movs	r0, #0
   14da2:	f88d 000f 	strb.w	r0, [sp, #15]
   14da6:	9900      	ldr	r1, [sp, #0]
   14da8:	9105      	str	r1, [sp, #20]
   14daa:	f88d 000e 	strb.w	r0, [sp, #14]
   14dae:	9102      	str	r1, [sp, #8]
   14db0:	9802      	ldr	r0, [sp, #8]
   14db2:	f7fc ff1e 	bl	11bf2 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>
   14db6:	f88d 1005 	strb.w	r1, [sp, #5]
   14dba:	f88d 0004 	strb.w	r0, [sp, #4]
   14dbe:	e7ff      	b.n	14dc0 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x56>
   14dc0:	e007      	b.n	14dd2 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   14dc2:	9800      	ldr	r0, [sp, #0]
   14dc4:	2800      	cmp	r0, #0
   14dc6:	d110      	bne.n	14dea <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x80>
   14dc8:	e019      	b.n	14dfe <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x94>
   14dca:	2000      	movs	r0, #0
   14dcc:	f88d 000e 	strb.w	r0, [sp, #14]
   14dd0:	e7f7      	b.n	14dc2 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   14dd2:	f89d 000e 	ldrb.w	r0, [sp, #14]
   14dd6:	07c0      	lsls	r0, r0, #31
   14dd8:	2800      	cmp	r0, #0
   14dda:	d1f6      	bne.n	14dca <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x60>
   14ddc:	e7f1      	b.n	14dc2 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   14dde:	f89d 0004 	ldrb.w	r0, [sp, #4]
   14de2:	f89d 1005 	ldrb.w	r1, [sp, #5]
   14de6:	b006      	add	sp, #24
   14de8:	bd80      	pop	{r7, pc}
   14dea:	f89d 000f 	ldrb.w	r0, [sp, #15]
   14dee:	07c0      	lsls	r0, r0, #31
   14df0:	2800      	cmp	r0, #0
   14df2:	d0f4      	beq.n	14dde <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   14df4:	e7ff      	b.n	14df6 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x8c>
   14df6:	2000      	movs	r0, #0
   14df8:	f88d 000f 	strb.w	r0, [sp, #15]
   14dfc:	e7ef      	b.n	14dde <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   14dfe:	e7ee      	b.n	14dde <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>

00014e00 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>:
    fn clone(&self) -> Self {
   14e00:	b580      	push	{r7, lr}
   14e02:	b09c      	sub	sp, #112	; 0x70
   14e04:	911b      	str	r1, [sp, #108]	; 0x6c
   14e06:	aa01      	add	r2, sp, #4
        Vec(self.0.clone())
   14e08:	9000      	str	r0, [sp, #0]
   14e0a:	4610      	mov	r0, r2
   14e0c:	f000 fafc 	bl	15408 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>
   14e10:	e7ff      	b.n	14e12 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE+0x12>
   14e12:	a901      	add	r1, sp, #4
   14e14:	2268      	movs	r2, #104	; 0x68
   14e16:	9800      	ldr	r0, [sp, #0]
   14e18:	f008 f9c0 	bl	1d19c <__aeabi_memcpy>
    }
   14e1c:	b01c      	add	sp, #112	; 0x70
   14e1e:	bd80      	pop	{r7, pc}

00014e20 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>:
    fn clone(&self) -> Self {
   14e20:	b580      	push	{r7, lr}
   14e22:	b0b6      	sub	sp, #216	; 0xd8
   14e24:	9135      	str	r1, [sp, #212]	; 0xd4
   14e26:	aa02      	add	r2, sp, #8
        Vec(self.0.clone())
   14e28:	9001      	str	r0, [sp, #4]
   14e2a:	4610      	mov	r0, r2
   14e2c:	f000 fb14 	bl	15458 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>
   14e30:	e7ff      	b.n	14e32 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E+0x12>
   14e32:	a902      	add	r1, sp, #8
   14e34:	22cc      	movs	r2, #204	; 0xcc
   14e36:	9801      	ldr	r0, [sp, #4]
   14e38:	f008 f9b0 	bl	1d19c <__aeabi_memcpy>
    }
   14e3c:	b036      	add	sp, #216	; 0xd8
   14e3e:	bd80      	pop	{r7, pc}

00014e40 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>:
    fn drop(&mut self) {
   14e40:	b580      	push	{r7, lr}
   14e42:	b084      	sub	sp, #16
   14e44:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
   14e46:	f000 f84c 	bl	14ee2 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>
   14e4a:	9002      	str	r0, [sp, #8]
   14e4c:	9101      	str	r1, [sp, #4]
   14e4e:	e7ff      	b.n	14e50 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x10>
   14e50:	9802      	ldr	r0, [sp, #8]
   14e52:	9901      	ldr	r1, [sp, #4]
   14e54:	f000 ff10 	bl	15c78 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
   14e58:	e7ff      	b.n	14e5a <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1a>
   14e5a:	e7ff      	b.n	14e5c <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1c>
    }
   14e5c:	b004      	add	sp, #16
   14e5e:	bd80      	pop	{r7, pc}

00014e60 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>:
    fn drop(&mut self) {
   14e60:	b580      	push	{r7, lr}
   14e62:	b084      	sub	sp, #16
   14e64:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
   14e66:	f000 f848 	bl	14efa <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
   14e6a:	9002      	str	r0, [sp, #8]
   14e6c:	9101      	str	r1, [sp, #4]
   14e6e:	e7ff      	b.n	14e70 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x10>
   14e70:	9802      	ldr	r0, [sp, #8]
   14e72:	9901      	ldr	r1, [sp, #4]
   14e74:	f000 ff00 	bl	15c78 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
   14e78:	e7ff      	b.n	14e7a <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1a>
   14e7a:	e7ff      	b.n	14e7c <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1c>
    }
   14e7c:	b004      	add	sp, #16
   14e7e:	bd80      	pop	{r7, pc}

00014e80 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>:
    fn deref(&self) -> &[T] {
   14e80:	b580      	push	{r7, lr}
   14e82:	b084      	sub	sp, #16
   14e84:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   14e86:	f000 fb0f 	bl	154a8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
   14e8a:	9002      	str	r0, [sp, #8]
   14e8c:	9101      	str	r1, [sp, #4]
   14e8e:	e7ff      	b.n	14e90 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E+0x10>
    }
   14e90:	9802      	ldr	r0, [sp, #8]
   14e92:	9901      	ldr	r1, [sp, #4]
   14e94:	b004      	add	sp, #16
   14e96:	bd80      	pop	{r7, pc}

00014e98 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>:
    fn deref(&self) -> &[T] {
   14e98:	b580      	push	{r7, lr}
   14e9a:	b084      	sub	sp, #16
   14e9c:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   14e9e:	f000 fb18 	bl	154d2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
   14ea2:	9002      	str	r0, [sp, #8]
   14ea4:	9101      	str	r1, [sp, #4]
   14ea6:	e7ff      	b.n	14ea8 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E+0x10>
    }
   14ea8:	9802      	ldr	r0, [sp, #8]
   14eaa:	9901      	ldr	r1, [sp, #4]
   14eac:	b004      	add	sp, #16
   14eae:	bd80      	pop	{r7, pc}

00014eb0 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>:
    fn drop(&mut self) {
   14eb0:	b580      	push	{r7, lr}
   14eb2:	b086      	sub	sp, #24
   14eb4:	9005      	str	r0, [sp, #20]
            ptr::drop_in_place(&mut self.vec[self.next..]);
   14eb6:	9003      	str	r0, [sp, #12]
   14eb8:	f000 f81f 	bl	14efa <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
   14ebc:	9002      	str	r0, [sp, #8]
   14ebe:	9101      	str	r1, [sp, #4]
   14ec0:	e7ff      	b.n	14ec2 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x12>
   14ec2:	9803      	ldr	r0, [sp, #12]
   14ec4:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   14ec8:	9104      	str	r1, [sp, #16]
   14eca:	9a04      	ldr	r2, [sp, #16]
   14ecc:	9802      	ldr	r0, [sp, #8]
   14ece:	9901      	ldr	r1, [sp, #4]
   14ed0:	f000 fedf 	bl	15c92 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>
   14ed4:	e7ff      	b.n	14ed6 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x26>
   14ed6:	e7ff      	b.n	14ed8 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x28>
   14ed8:	2000      	movs	r0, #0
            self.vec.0.len = 0;
   14eda:	9903      	ldr	r1, [sp, #12]
   14edc:	6008      	str	r0, [r1, #0]
    }
   14ede:	b006      	add	sp, #24
   14ee0:	bd80      	pop	{r7, pc}

00014ee2 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>:

impl<T, N> ops::DerefMut for Vec<T, N>
where
    N: ArrayLength<T>,
{
    fn deref_mut(&mut self) -> &mut [T] {
   14ee2:	b580      	push	{r7, lr}
   14ee4:	b084      	sub	sp, #16
   14ee6:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
   14ee8:	f000 f8ff 	bl	150ea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
   14eec:	9002      	str	r0, [sp, #8]
   14eee:	9101      	str	r1, [sp, #4]
   14ef0:	e7ff      	b.n	14ef2 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E+0x10>
    }
   14ef2:	9802      	ldr	r0, [sp, #8]
   14ef4:	9901      	ldr	r1, [sp, #4]
   14ef6:	b004      	add	sp, #16
   14ef8:	bd80      	pop	{r7, pc}

00014efa <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>:
    fn deref_mut(&mut self) -> &mut [T] {
   14efa:	b580      	push	{r7, lr}
   14efc:	b084      	sub	sp, #16
   14efe:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
   14f00:	f000 f908 	bl	15114 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
   14f04:	9002      	str	r0, [sp, #8]
   14f06:	9101      	str	r1, [sp, #4]
   14f08:	e7ff      	b.n	14f0a <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E+0x10>
    }
   14f0a:	9802      	ldr	r0, [sp, #8]
   14f0c:	9901      	ldr	r1, [sp, #4]
   14f0e:	b004      	add	sp, #16
   14f10:	bd80      	pop	{r7, pc}

00014f12 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   14f12:	b580      	push	{r7, lr}
   14f14:	b084      	sub	sp, #16
   14f16:	9001      	str	r0, [sp, #4]
   14f18:	9102      	str	r1, [sp, #8]
   14f1a:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   14f1c:	f000 f973 	bl	15206 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
   14f20:	9000      	str	r0, [sp, #0]
   14f22:	e7ff      	b.n	14f24 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE+0x12>
    }
   14f24:	9800      	ldr	r0, [sp, #0]
   14f26:	f000 0001 	and.w	r0, r0, #1
   14f2a:	b004      	add	sp, #16
   14f2c:	bd80      	pop	{r7, pc}

00014f2e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>:
    pub fn new() -> Self {
   14f2e:	b580      	push	{r7, lr}
   14f30:	b09c      	sub	sp, #112	; 0x70
   14f32:	a902      	add	r1, sp, #8
        Vec(crate::i::Vec::new())
   14f34:	9001      	str	r0, [sp, #4]
   14f36:	4608      	mov	r0, r1
   14f38:	f000 f8c8 	bl	150cc <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
   14f3c:	e7ff      	b.n	14f3e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E+0x10>
   14f3e:	a902      	add	r1, sp, #8
   14f40:	2268      	movs	r2, #104	; 0x68
   14f42:	9801      	ldr	r0, [sp, #4]
   14f44:	f008 f92a 	bl	1d19c <__aeabi_memcpy>
    }
   14f48:	b01c      	add	sp, #112	; 0x70
   14f4a:	bd80      	pop	{r7, pc}

00014f4c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>:
    pub fn new() -> Self {
   14f4c:	b580      	push	{r7, lr}
   14f4e:	b0b4      	sub	sp, #208	; 0xd0
   14f50:	a901      	add	r1, sp, #4
        Vec(crate::i::Vec::new())
   14f52:	9000      	str	r0, [sp, #0]
   14f54:	4608      	mov	r0, r1
   14f56:	f000 f8aa 	bl	150ae <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
   14f5a:	e7ff      	b.n	14f5c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE+0x10>
   14f5c:	a901      	add	r1, sp, #4
   14f5e:	22cc      	movs	r2, #204	; 0xcc
   14f60:	9800      	ldr	r0, [sp, #0]
   14f62:	f008 f91b 	bl	1d19c <__aeabi_memcpy>
    }
   14f66:	b034      	add	sp, #208	; 0xd0
   14f68:	bd80      	pop	{r7, pc}

00014f6a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   14f6a:	b580      	push	{r7, lr}
   14f6c:	b086      	sub	sp, #24
   14f6e:	460a      	mov	r2, r1
   14f70:	9004      	str	r0, [sp, #16]
   14f72:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.0.push(item)
   14f76:	9203      	str	r2, [sp, #12]
   14f78:	f000 fa0b 	bl	15392 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>
   14f7c:	9002      	str	r0, [sp, #8]
   14f7e:	9101      	str	r1, [sp, #4]
   14f80:	e7ff      	b.n	14f82 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE+0x18>
    }
   14f82:	9802      	ldr	r0, [sp, #8]
   14f84:	9901      	ldr	r1, [sp, #4]
   14f86:	b006      	add	sp, #24
   14f88:	bd80      	pop	{r7, pc}

00014f8a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>:
    pub fn clear(&mut self) {
   14f8a:	b580      	push	{r7, lr}
   14f8c:	b082      	sub	sp, #8
   14f8e:	9001      	str	r0, [sp, #4]
        self.0.clear()
   14f90:	f000 fa28 	bl	153e4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>
   14f94:	e7ff      	b.n	14f96 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E+0xc>
    }
   14f96:	b002      	add	sp, #8
   14f98:	bd80      	pop	{r7, pc}

00014f9a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>:
    pub fn clear(&mut self) {
   14f9a:	b580      	push	{r7, lr}
   14f9c:	b082      	sub	sp, #8
   14f9e:	9001      	str	r0, [sp, #4]
        self.0.clear()
   14fa0:	f000 fa29 	bl	153f6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>
   14fa4:	e7ff      	b.n	14fa6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E+0xc>
    }
   14fa6:	b002      	add	sp, #8
   14fa8:	bd80      	pop	{r7, pc}

00014faa <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>:
    fn into_iter(self) -> Self::IntoIter {
   14faa:	b580      	push	{r7, lr}
   14fac:	b0b6      	sub	sp, #216	; 0xd8
   14fae:	aa03      	add	r2, sp, #12
   14fb0:	23cc      	movs	r3, #204	; 0xcc
        IntoIter { vec: self, next: 0 }
   14fb2:	9002      	str	r0, [sp, #8]
   14fb4:	4610      	mov	r0, r2
   14fb6:	9201      	str	r2, [sp, #4]
   14fb8:	461a      	mov	r2, r3
   14fba:	9300      	str	r3, [sp, #0]
   14fbc:	f008 f8ee 	bl	1d19c <__aeabi_memcpy>
   14fc0:	9802      	ldr	r0, [sp, #8]
   14fc2:	9901      	ldr	r1, [sp, #4]
   14fc4:	9a00      	ldr	r2, [sp, #0]
   14fc6:	f008 f8e9 	bl	1d19c <__aeabi_memcpy>
   14fca:	2000      	movs	r0, #0
   14fcc:	9902      	ldr	r1, [sp, #8]
   14fce:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
    }
   14fd2:	b036      	add	sp, #216	; 0xd8
   14fd4:	bd80      	pop	{r7, pc}

00014fd6 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>:
    fn next(&mut self) -> Option<Self::Item> {
   14fd6:	b580      	push	{r7, lr}
   14fd8:	b08e      	sub	sp, #56	; 0x38
   14fda:	900a      	str	r0, [sp, #40]	; 0x28
        if self.next < self.vec.len() {
   14fdc:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   14fe0:	9008      	str	r0, [sp, #32]
   14fe2:	9107      	str	r1, [sp, #28]
   14fe4:	f7ff ff58 	bl	14e98 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>
   14fe8:	9006      	str	r0, [sp, #24]
   14fea:	9105      	str	r1, [sp, #20]
   14fec:	e7ff      	b.n	14fee <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x18>
   14fee:	9806      	ldr	r0, [sp, #24]
   14ff0:	9905      	ldr	r1, [sp, #20]
   14ff2:	f000 fdee 	bl	15bd2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   14ff6:	9004      	str	r0, [sp, #16]
   14ff8:	e7ff      	b.n	14ffa <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x24>
   14ffa:	9807      	ldr	r0, [sp, #28]
   14ffc:	9904      	ldr	r1, [sp, #16]
   14ffe:	4288      	cmp	r0, r1
   15000:	d304      	bcc.n	1500c <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x36>
   15002:	e7ff      	b.n	15004 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x2e>
   15004:	2000      	movs	r0, #0
            None
   15006:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
   1500a:	e029      	b.n	15060 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
                (self.vec.0.buffer.as_ptr() as *const T)
   1500c:	9808      	ldr	r0, [sp, #32]
   1500e:	1d01      	adds	r1, r0, #4
   15010:	910c      	str	r1, [sp, #48]	; 0x30
   15012:	910d      	str	r1, [sp, #52]	; 0x34
   15014:	9103      	str	r1, [sp, #12]
   15016:	e7ff      	b.n	15018 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x42>
                    .add(self.next)
   15018:	9808      	ldr	r0, [sp, #32]
   1501a:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
                (self.vec.0.buffer.as_ptr() as *const T)
   1501e:	9803      	ldr	r0, [sp, #12]
   15020:	f001 fa8d 	bl	1653e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
   15024:	9002      	str	r0, [sp, #8]
   15026:	e7ff      	b.n	15028 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x52>
   15028:	9802      	ldr	r0, [sp, #8]
   1502a:	f001 fa93 	bl	16554 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>
   1502e:	4601      	mov	r1, r0
   15030:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
   15034:	9101      	str	r1, [sp, #4]
   15036:	e7ff      	b.n	15038 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x62>
            self.next += 1;
   15038:	9808      	ldr	r0, [sp, #32]
   1503a:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   1503e:	1c4a      	adds	r2, r1, #1
   15040:	4613      	mov	r3, r2
   15042:	428a      	cmp	r2, r1
   15044:	9300      	str	r3, [sp, #0]
   15046:	d311      	bcc.n	1506c <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x96>
   15048:	e7ff      	b.n	1504a <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x74>
   1504a:	9800      	ldr	r0, [sp, #0]
   1504c:	9908      	ldr	r1, [sp, #32]
   1504e:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
            Some(item)
   15052:	9a01      	ldr	r2, [sp, #4]
   15054:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
   15058:	2301      	movs	r3, #1
   1505a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
   1505e:	e7ff      	b.n	15060 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
    }
   15060:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   15064:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   15068:	b00e      	add	sp, #56	; 0x38
   1506a:	bd80      	pop	{r7, pc}
            self.next += 1;
   1506c:	f64f 2070 	movw	r0, #64112	; 0xfa70
   15070:	f2c0 0001 	movt	r0, #1
   15074:	f64f 2260 	movw	r2, #64096	; 0xfa60
   15078:	f2c0 0201 	movt	r2, #1
   1507c:	211c      	movs	r1, #28
   1507e:	f001 fcb9 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15082:	defe      	udf	#254	; 0xfe

00015084 <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE>:
   15084:	b580      	push	{r7, lr}
   15086:	b084      	sub	sp, #16
   15088:	9002      	str	r0, [sp, #8]
   1508a:	9103      	str	r1, [sp, #12]
   1508c:	f64f 208c 	movw	r0, #64140	; 0xfa8c
   15090:	f2c0 0001 	movt	r0, #1
   15094:	2202      	movs	r2, #2
   15096:	9001      	str	r0, [sp, #4]
   15098:	4608      	mov	r0, r1
   1509a:	9901      	ldr	r1, [sp, #4]
   1509c:	f002 f9ca 	bl	17434 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
   150a0:	9000      	str	r0, [sp, #0]
   150a2:	e7ff      	b.n	150a4 <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE+0x20>
   150a4:	9800      	ldr	r0, [sp, #0]
   150a6:	f000 0001 	and.w	r0, r0, #1
   150aa:	b004      	add	sp, #16
   150ac:	bd80      	pop	{r7, pc}

000150ae <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>:
    pub const fn new() -> Self {
   150ae:	b580      	push	{r7, lr}
   150b0:	b0b4      	sub	sp, #208	; 0xd0
            buffer: MaybeUninit::uninit(),
   150b2:	9001      	str	r0, [sp, #4]
   150b4:	e7ff      	b.n	150b6 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE+0x8>
        Self {
   150b6:	9801      	ldr	r0, [sp, #4]
   150b8:	3004      	adds	r0, #4
   150ba:	a902      	add	r1, sp, #8
   150bc:	22c8      	movs	r2, #200	; 0xc8
   150be:	f008 f86d 	bl	1d19c <__aeabi_memcpy>
   150c2:	2100      	movs	r1, #0
   150c4:	9a01      	ldr	r2, [sp, #4]
   150c6:	6011      	str	r1, [r2, #0]
    }
   150c8:	b034      	add	sp, #208	; 0xd0
   150ca:	bd80      	pop	{r7, pc}

000150cc <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>:
    pub const fn new() -> Self {
   150cc:	b580      	push	{r7, lr}
   150ce:	b09a      	sub	sp, #104	; 0x68
            buffer: MaybeUninit::uninit(),
   150d0:	9000      	str	r0, [sp, #0]
   150d2:	e7ff      	b.n	150d4 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE+0x8>
        Self {
   150d4:	9800      	ldr	r0, [sp, #0]
   150d6:	3004      	adds	r0, #4
   150d8:	a901      	add	r1, sp, #4
   150da:	2264      	movs	r2, #100	; 0x64
   150dc:	f008 f85e 	bl	1d19c <__aeabi_memcpy>
   150e0:	2100      	movs	r1, #0
   150e2:	9a00      	ldr	r2, [sp, #0]
   150e4:	6011      	str	r1, [r2, #0]
    }
   150e6:	b01a      	add	sp, #104	; 0x68
   150e8:	bd80      	pop	{r7, pc}

000150ea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   150ea:	b580      	push	{r7, lr}
   150ec:	b088      	sub	sp, #32
   150ee:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   150f0:	1d01      	adds	r1, r0, #4
   150f2:	9106      	str	r1, [sp, #24]
   150f4:	9107      	str	r1, [sp, #28]
   150f6:	9004      	str	r0, [sp, #16]
   150f8:	9103      	str	r1, [sp, #12]
   150fa:	e7ff      	b.n	150fc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x12>
   150fc:	9804      	ldr	r0, [sp, #16]
   150fe:	6801      	ldr	r1, [r0, #0]
   15100:	9803      	ldr	r0, [sp, #12]
   15102:	f000 fd42 	bl	15b8a <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   15106:	9002      	str	r0, [sp, #8]
   15108:	9101      	str	r1, [sp, #4]
   1510a:	e7ff      	b.n	1510c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x22>
    }
   1510c:	9802      	ldr	r0, [sp, #8]
   1510e:	9901      	ldr	r1, [sp, #4]
   15110:	b008      	add	sp, #32
   15112:	bd80      	pop	{r7, pc}

00015114 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   15114:	b580      	push	{r7, lr}
   15116:	b088      	sub	sp, #32
   15118:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   1511a:	1d01      	adds	r1, r0, #4
   1511c:	9106      	str	r1, [sp, #24]
   1511e:	9107      	str	r1, [sp, #28]
   15120:	9004      	str	r0, [sp, #16]
   15122:	9103      	str	r1, [sp, #12]
   15124:	e7ff      	b.n	15126 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x12>
   15126:	9804      	ldr	r0, [sp, #16]
   15128:	6801      	ldr	r1, [r0, #0]
   1512a:	9803      	ldr	r0, [sp, #12]
   1512c:	f000 fd2d 	bl	15b8a <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   15130:	9002      	str	r0, [sp, #8]
   15132:	9101      	str	r1, [sp, #4]
   15134:	e7ff      	b.n	15136 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x22>
    }
   15136:	9802      	ldr	r0, [sp, #8]
   15138:	9901      	ldr	r1, [sp, #4]
   1513a:	b008      	add	sp, #32
   1513c:	bd80      	pop	{r7, pc}

0001513e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   1513e:	b580      	push	{r7, lr}
   15140:	b08a      	sub	sp, #40	; 0x28
   15142:	460a      	mov	r2, r1
   15144:	9006      	str	r0, [sp, #24]
   15146:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
   1514a:	1d01      	adds	r1, r0, #4
   1514c:	9108      	str	r1, [sp, #32]
   1514e:	9109      	str	r1, [sp, #36]	; 0x24
   15150:	9005      	str	r0, [sp, #20]
   15152:	9204      	str	r2, [sp, #16]
   15154:	9103      	str	r1, [sp, #12]
   15156:	e7ff      	b.n	15158 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x1a>
            .add(self.len)
   15158:	9805      	ldr	r0, [sp, #20]
   1515a:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   1515c:	9803      	ldr	r0, [sp, #12]
   1515e:	f000 fe31 	bl	15dc4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   15162:	9002      	str	r0, [sp, #8]
   15164:	e7ff      	b.n	15166 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x28>
   15166:	9802      	ldr	r0, [sp, #8]
   15168:	9904      	ldr	r1, [sp, #16]
   1516a:	f000 fe36 	bl	15dda <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
   1516e:	e7ff      	b.n	15170 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x32>
        self.len += 1;
   15170:	9805      	ldr	r0, [sp, #20]
   15172:	6801      	ldr	r1, [r0, #0]
   15174:	1c4a      	adds	r2, r1, #1
   15176:	4613      	mov	r3, r2
   15178:	428a      	cmp	r2, r1
   1517a:	9301      	str	r3, [sp, #4]
   1517c:	d305      	bcc.n	1518a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x4c>
   1517e:	e7ff      	b.n	15180 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x42>
   15180:	9801      	ldr	r0, [sp, #4]
   15182:	9905      	ldr	r1, [sp, #20]
   15184:	6008      	str	r0, [r1, #0]
    }
   15186:	b00a      	add	sp, #40	; 0x28
   15188:	bd80      	pop	{r7, pc}
        self.len += 1;
   1518a:	f64f 3030 	movw	r0, #64304	; 0xfb30
   1518e:	f2c0 0001 	movt	r0, #1
   15192:	f64f 3214 	movw	r2, #64276	; 0xfb14
   15196:	f2c0 0201 	movt	r2, #1
   1519a:	211c      	movs	r1, #28
   1519c:	f001 fc2a 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   151a0:	defe      	udf	#254	; 0xfe

000151a2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   151a2:	b580      	push	{r7, lr}
   151a4:	b08a      	sub	sp, #40	; 0x28
   151a6:	460a      	mov	r2, r1
   151a8:	9006      	str	r0, [sp, #24]
   151aa:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
   151ae:	1d01      	adds	r1, r0, #4
   151b0:	9108      	str	r1, [sp, #32]
   151b2:	9109      	str	r1, [sp, #36]	; 0x24
   151b4:	9005      	str	r0, [sp, #20]
   151b6:	9204      	str	r2, [sp, #16]
   151b8:	9103      	str	r1, [sp, #12]
   151ba:	e7ff      	b.n	151bc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x1a>
            .add(self.len)
   151bc:	9805      	ldr	r0, [sp, #20]
   151be:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   151c0:	9803      	ldr	r0, [sp, #12]
   151c2:	f000 fdff 	bl	15dc4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   151c6:	9002      	str	r0, [sp, #8]
   151c8:	e7ff      	b.n	151ca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x28>
   151ca:	9802      	ldr	r0, [sp, #8]
   151cc:	9904      	ldr	r1, [sp, #16]
   151ce:	f000 fe04 	bl	15dda <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
   151d2:	e7ff      	b.n	151d4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x32>
        self.len += 1;
   151d4:	9805      	ldr	r0, [sp, #20]
   151d6:	6801      	ldr	r1, [r0, #0]
   151d8:	1c4a      	adds	r2, r1, #1
   151da:	4613      	mov	r3, r2
   151dc:	428a      	cmp	r2, r1
   151de:	9301      	str	r3, [sp, #4]
   151e0:	d305      	bcc.n	151ee <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x4c>
   151e2:	e7ff      	b.n	151e4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x42>
   151e4:	9801      	ldr	r0, [sp, #4]
   151e6:	9905      	ldr	r1, [sp, #20]
   151e8:	6008      	str	r0, [r1, #0]
    }
   151ea:	b00a      	add	sp, #40	; 0x28
   151ec:	bd80      	pop	{r7, pc}
        self.len += 1;
   151ee:	f64f 3030 	movw	r0, #64304	; 0xfb30
   151f2:	f2c0 0001 	movt	r0, #1
   151f6:	f64f 3214 	movw	r2, #64276	; 0xfb14
   151fa:	f2c0 0201 	movt	r2, #1
   151fe:	211c      	movs	r1, #28
   15200:	f001 fbf8 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15204:	defe      	udf	#254	; 0xfe

00015206 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   15206:	b580      	push	{r7, lr}
   15208:	b094      	sub	sp, #80	; 0x50
   1520a:	900e      	str	r0, [sp, #56]	; 0x38
   1520c:	910f      	str	r1, [sp, #60]	; 0x3c
   1520e:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   15210:	6803      	ldr	r3, [r0, #0]
   15212:	9009      	str	r0, [sp, #36]	; 0x24
   15214:	4608      	mov	r0, r1
   15216:	9108      	str	r1, [sp, #32]
   15218:	4611      	mov	r1, r2
   1521a:	9207      	str	r2, [sp, #28]
   1521c:	9306      	str	r3, [sp, #24]
   1521e:	f000 fcd8 	bl	15bd2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15222:	9005      	str	r0, [sp, #20]
   15224:	e7ff      	b.n	15226 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x20>
   15226:	9806      	ldr	r0, [sp, #24]
   15228:	9905      	ldr	r1, [sp, #20]
   1522a:	1842      	adds	r2, r0, r1
   1522c:	4613      	mov	r3, r2
   1522e:	4282      	cmp	r2, r0
   15230:	9304      	str	r3, [sp, #16]
   15232:	d33f      	bcc.n	152b4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xae>
   15234:	e7ff      	b.n	15236 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x30>
   15236:	9809      	ldr	r0, [sp, #36]	; 0x24
   15238:	f000 f96a 	bl	15510 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>
   1523c:	9003      	str	r0, [sp, #12]
   1523e:	e7ff      	b.n	15240 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x3a>
   15240:	9804      	ldr	r0, [sp, #16]
   15242:	9903      	ldr	r1, [sp, #12]
   15244:	4288      	cmp	r0, r1
   15246:	d807      	bhi.n	15258 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x52>
   15248:	e7ff      	b.n	1524a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x44>
            for elem in other {
   1524a:	9808      	ldr	r0, [sp, #32]
   1524c:	9907      	ldr	r1, [sp, #28]
   1524e:	f000 fd34 	bl	15cba <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
   15252:	9002      	str	r0, [sp, #8]
   15254:	9101      	str	r1, [sp, #4]
   15256:	e003      	b.n	15260 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x5a>
   15258:	2001      	movs	r0, #1
            Err(())
   1525a:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   1525e:	e025      	b.n	152ac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
   15260:	9802      	ldr	r0, [sp, #8]
   15262:	900b      	str	r0, [sp, #44]	; 0x2c
   15264:	9901      	ldr	r1, [sp, #4]
   15266:	910c      	str	r1, [sp, #48]	; 0x30
   15268:	e7ff      	b.n	1526a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
   1526a:	a80b      	add	r0, sp, #44	; 0x2c
   1526c:	f000 fd47 	bl	15cfe <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
   15270:	900d      	str	r0, [sp, #52]	; 0x34
   15272:	e7ff      	b.n	15274 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x6e>
   15274:	980d      	ldr	r0, [sp, #52]	; 0x34
   15276:	2800      	cmp	r0, #0
   15278:	4601      	mov	r1, r0
   1527a:	bf18      	it	ne
   1527c:	2101      	movne	r1, #1
   1527e:	2800      	cmp	r0, #0
   15280:	d001      	beq.n	15286 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x80>
   15282:	e7ff      	b.n	15284 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x7e>
   15284:	e004      	b.n	15290 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x8a>
   15286:	2000      	movs	r0, #0
            Ok(())
   15288:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   1528c:	e00e      	b.n	152ac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
   1528e:	defe      	udf	#254	; 0xfe
   15290:	980d      	ldr	r0, [sp, #52]	; 0x34
   15292:	9011      	str	r0, [sp, #68]	; 0x44
   15294:	9012      	str	r0, [sp, #72]	; 0x48
   15296:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   15298:	f000 fbeb 	bl	15a72 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
   1529c:	9000      	str	r0, [sp, #0]
   1529e:	e7ff      	b.n	152a0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x9a>
   152a0:	9809      	ldr	r0, [sp, #36]	; 0x24
   152a2:	9900      	ldr	r1, [sp, #0]
   152a4:	f7ff ff4b 	bl	1513e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>
   152a8:	e7ff      	b.n	152aa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa4>
            for elem in other {
   152aa:	e7de      	b.n	1526a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
    }
   152ac:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   152b0:	b014      	add	sp, #80	; 0x50
   152b2:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   152b4:	f64f 3030 	movw	r0, #64304	; 0xfb30
   152b8:	f2c0 0001 	movt	r0, #1
   152bc:	f64f 324c 	movw	r2, #64332	; 0xfb4c
   152c0:	f2c0 0201 	movt	r2, #1
   152c4:	211c      	movs	r1, #28
   152c6:	f001 fb95 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   152ca:	defe      	udf	#254	; 0xfe

000152cc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   152cc:	b580      	push	{r7, lr}
   152ce:	b094      	sub	sp, #80	; 0x50
   152d0:	900e      	str	r0, [sp, #56]	; 0x38
   152d2:	910f      	str	r1, [sp, #60]	; 0x3c
   152d4:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   152d6:	6803      	ldr	r3, [r0, #0]
   152d8:	9009      	str	r0, [sp, #36]	; 0x24
   152da:	4608      	mov	r0, r1
   152dc:	9108      	str	r1, [sp, #32]
   152de:	4611      	mov	r1, r2
   152e0:	9207      	str	r2, [sp, #28]
   152e2:	9306      	str	r3, [sp, #24]
   152e4:	f000 fc75 	bl	15bd2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   152e8:	9005      	str	r0, [sp, #20]
   152ea:	e7ff      	b.n	152ec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x20>
   152ec:	9806      	ldr	r0, [sp, #24]
   152ee:	9905      	ldr	r1, [sp, #20]
   152f0:	1842      	adds	r2, r0, r1
   152f2:	4613      	mov	r3, r2
   152f4:	4282      	cmp	r2, r0
   152f6:	9304      	str	r3, [sp, #16]
   152f8:	d33f      	bcc.n	1537a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xae>
   152fa:	e7ff      	b.n	152fc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x30>
   152fc:	9809      	ldr	r0, [sp, #36]	; 0x24
   152fe:	f000 f8fd 	bl	154fc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
   15302:	9003      	str	r0, [sp, #12]
   15304:	e7ff      	b.n	15306 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x3a>
   15306:	9804      	ldr	r0, [sp, #16]
   15308:	9903      	ldr	r1, [sp, #12]
   1530a:	4288      	cmp	r0, r1
   1530c:	d807      	bhi.n	1531e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x52>
   1530e:	e7ff      	b.n	15310 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x44>
            for elem in other {
   15310:	9808      	ldr	r0, [sp, #32]
   15312:	9907      	ldr	r1, [sp, #28]
   15314:	f000 fcd1 	bl	15cba <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
   15318:	9002      	str	r0, [sp, #8]
   1531a:	9101      	str	r1, [sp, #4]
   1531c:	e003      	b.n	15326 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x5a>
   1531e:	2001      	movs	r0, #1
            Err(())
   15320:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   15324:	e025      	b.n	15372 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
   15326:	9802      	ldr	r0, [sp, #8]
   15328:	900b      	str	r0, [sp, #44]	; 0x2c
   1532a:	9901      	ldr	r1, [sp, #4]
   1532c:	910c      	str	r1, [sp, #48]	; 0x30
   1532e:	e7ff      	b.n	15330 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
   15330:	a80b      	add	r0, sp, #44	; 0x2c
   15332:	f000 fce4 	bl	15cfe <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
   15336:	900d      	str	r0, [sp, #52]	; 0x34
   15338:	e7ff      	b.n	1533a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x6e>
   1533a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1533c:	2800      	cmp	r0, #0
   1533e:	4601      	mov	r1, r0
   15340:	bf18      	it	ne
   15342:	2101      	movne	r1, #1
   15344:	2800      	cmp	r0, #0
   15346:	d001      	beq.n	1534c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x80>
   15348:	e7ff      	b.n	1534a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x7e>
   1534a:	e004      	b.n	15356 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x8a>
   1534c:	2000      	movs	r0, #0
            Ok(())
   1534e:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   15352:	e00e      	b.n	15372 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
   15354:	defe      	udf	#254	; 0xfe
   15356:	980d      	ldr	r0, [sp, #52]	; 0x34
   15358:	9011      	str	r0, [sp, #68]	; 0x44
   1535a:	9012      	str	r0, [sp, #72]	; 0x48
   1535c:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   1535e:	f000 fb88 	bl	15a72 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
   15362:	9000      	str	r0, [sp, #0]
   15364:	e7ff      	b.n	15366 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x9a>
   15366:	9809      	ldr	r0, [sp, #36]	; 0x24
   15368:	9900      	ldr	r1, [sp, #0]
   1536a:	f7ff ff1a 	bl	151a2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
   1536e:	e7ff      	b.n	15370 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa4>
            for elem in other {
   15370:	e7de      	b.n	15330 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
    }
   15372:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   15376:	b014      	add	sp, #80	; 0x50
   15378:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   1537a:	f64f 3030 	movw	r0, #64304	; 0xfb30
   1537e:	f2c0 0001 	movt	r0, #1
   15382:	f64f 324c 	movw	r2, #64332	; 0xfb4c
   15386:	f2c0 0201 	movt	r2, #1
   1538a:	211c      	movs	r1, #28
   1538c:	f001 fb32 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15390:	defe      	udf	#254	; 0xfe

00015392 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   15392:	b580      	push	{r7, lr}
   15394:	b088      	sub	sp, #32
   15396:	460a      	mov	r2, r1
   15398:	9006      	str	r0, [sp, #24]
   1539a:	f8ad 101e 	strh.w	r1, [sp, #30]
        if self.len < self.capacity() {
   1539e:	6801      	ldr	r1, [r0, #0]
   153a0:	9004      	str	r0, [sp, #16]
   153a2:	9203      	str	r2, [sp, #12]
   153a4:	9102      	str	r1, [sp, #8]
   153a6:	f000 f8a9 	bl	154fc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
   153aa:	9001      	str	r0, [sp, #4]
   153ac:	e7ff      	b.n	153ae <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x1c>
   153ae:	9802      	ldr	r0, [sp, #8]
   153b0:	9901      	ldr	r1, [sp, #4]
   153b2:	4288      	cmp	r0, r1
   153b4:	d307      	bcc.n	153c6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x34>
   153b6:	e7ff      	b.n	153b8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x26>
            Err(item)
   153b8:	9803      	ldr	r0, [sp, #12]
   153ba:	f8ad 0016 	strh.w	r0, [sp, #22]
   153be:	2101      	movs	r1, #1
   153c0:	f8ad 1014 	strh.w	r1, [sp, #20]
        if self.len < self.capacity() {
   153c4:	e008      	b.n	153d8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
            unsafe { self.push_unchecked(item) }
   153c6:	9804      	ldr	r0, [sp, #16]
   153c8:	9903      	ldr	r1, [sp, #12]
   153ca:	f7ff feea 	bl	151a2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
   153ce:	e7ff      	b.n	153d0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x3e>
   153d0:	2000      	movs	r0, #0
            Ok(())
   153d2:	f8ad 0014 	strh.w	r0, [sp, #20]
        if self.len < self.capacity() {
   153d6:	e7ff      	b.n	153d8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
    }
   153d8:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   153dc:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   153e0:	b008      	add	sp, #32
   153e2:	bd80      	pop	{r7, pc}

000153e4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>:
    pub(crate) fn clear(&mut self) {
   153e4:	b580      	push	{r7, lr}
   153e6:	b082      	sub	sp, #8
   153e8:	9001      	str	r0, [sp, #4]
   153ea:	2100      	movs	r1, #0
        self.truncate(0);
   153ec:	f000 f8d0 	bl	15590 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>
   153f0:	e7ff      	b.n	153f2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE+0xe>
    }
   153f2:	b002      	add	sp, #8
   153f4:	bd80      	pop	{r7, pc}

000153f6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>:
    pub(crate) fn clear(&mut self) {
   153f6:	b580      	push	{r7, lr}
   153f8:	b082      	sub	sp, #8
   153fa:	9001      	str	r0, [sp, #4]
   153fc:	2100      	movs	r1, #0
        self.truncate(0);
   153fe:	f000 f891 	bl	15524 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>
   15402:	e7ff      	b.n	15404 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E+0xe>
    }
   15404:	b002      	add	sp, #8
   15406:	bd80      	pop	{r7, pc}

00015408 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>:
    pub(crate) fn clone(&self) -> Self
   15408:	b580      	push	{r7, lr}
   1540a:	b0a0      	sub	sp, #128	; 0x80
   1540c:	911f      	str	r1, [sp, #124]	; 0x7c
   1540e:	aa05      	add	r2, sp, #20
        let mut new = Self::new();
   15410:	9004      	str	r0, [sp, #16]
   15412:	4610      	mov	r0, r2
   15414:	9103      	str	r1, [sp, #12]
   15416:	f7ff fe59 	bl	150cc <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
   1541a:	e7ff      	b.n	1541c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
   1541c:	9803      	ldr	r0, [sp, #12]
   1541e:	f000 f843 	bl	154a8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
   15422:	9002      	str	r0, [sp, #8]
   15424:	9101      	str	r1, [sp, #4]
   15426:	e7ff      	b.n	15428 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x20>
   15428:	a805      	add	r0, sp, #20
   1542a:	9902      	ldr	r1, [sp, #8]
   1542c:	9a01      	ldr	r2, [sp, #4]
   1542e:	f7ff ff4d 	bl	152cc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>
   15432:	9000      	str	r0, [sp, #0]
   15434:	e7ff      	b.n	15436 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x2e>
   15436:	9800      	ldr	r0, [sp, #0]
   15438:	f000 0001 	and.w	r0, r0, #1
   1543c:	f64f 315c 	movw	r1, #64348	; 0xfb5c
   15440:	f2c0 0101 	movt	r1, #1
   15444:	f000 f959 	bl	156fa <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
   15448:	e7ff      	b.n	1544a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x42>
   1544a:	a905      	add	r1, sp, #20
   1544c:	2268      	movs	r2, #104	; 0x68
        new
   1544e:	9804      	ldr	r0, [sp, #16]
   15450:	f007 fea4 	bl	1d19c <__aeabi_memcpy>
    }
   15454:	b020      	add	sp, #128	; 0x80
   15456:	bd80      	pop	{r7, pc}

00015458 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>:
    pub(crate) fn clone(&self) -> Self
   15458:	b580      	push	{r7, lr}
   1545a:	b0ba      	sub	sp, #232	; 0xe8
   1545c:	9139      	str	r1, [sp, #228]	; 0xe4
   1545e:	aa06      	add	r2, sp, #24
        let mut new = Self::new();
   15460:	9005      	str	r0, [sp, #20]
   15462:	4610      	mov	r0, r2
   15464:	9104      	str	r1, [sp, #16]
   15466:	f7ff fe22 	bl	150ae <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
   1546a:	e7ff      	b.n	1546c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
   1546c:	9804      	ldr	r0, [sp, #16]
   1546e:	f000 f830 	bl	154d2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
   15472:	9003      	str	r0, [sp, #12]
   15474:	9102      	str	r1, [sp, #8]
   15476:	e7ff      	b.n	15478 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x20>
   15478:	a806      	add	r0, sp, #24
   1547a:	9903      	ldr	r1, [sp, #12]
   1547c:	9a02      	ldr	r2, [sp, #8]
   1547e:	f7ff fec2 	bl	15206 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
   15482:	9001      	str	r0, [sp, #4]
   15484:	e7ff      	b.n	15486 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x2e>
   15486:	9801      	ldr	r0, [sp, #4]
   15488:	f000 0001 	and.w	r0, r0, #1
   1548c:	f64f 315c 	movw	r1, #64348	; 0xfb5c
   15490:	f2c0 0101 	movt	r1, #1
   15494:	f000 f931 	bl	156fa <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
   15498:	e7ff      	b.n	1549a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x42>
   1549a:	a906      	add	r1, sp, #24
   1549c:	22cc      	movs	r2, #204	; 0xcc
        new
   1549e:	9805      	ldr	r0, [sp, #20]
   154a0:	f007 fe7c 	bl	1d19c <__aeabi_memcpy>
    }
   154a4:	b03a      	add	sp, #232	; 0xe8
   154a6:	bd80      	pop	{r7, pc}

000154a8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   154a8:	b580      	push	{r7, lr}
   154aa:	b088      	sub	sp, #32
   154ac:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   154ae:	1d01      	adds	r1, r0, #4
   154b0:	9106      	str	r1, [sp, #24]
   154b2:	9107      	str	r1, [sp, #28]
   154b4:	9004      	str	r0, [sp, #16]
   154b6:	9103      	str	r1, [sp, #12]
   154b8:	e7ff      	b.n	154ba <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x12>
   154ba:	9804      	ldr	r0, [sp, #16]
   154bc:	6801      	ldr	r1, [r0, #0]
   154be:	9803      	ldr	r0, [sp, #12]
   154c0:	f000 fb56 	bl	15b70 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
   154c4:	9002      	str	r0, [sp, #8]
   154c6:	9101      	str	r1, [sp, #4]
   154c8:	e7ff      	b.n	154ca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x22>
    }
   154ca:	9802      	ldr	r0, [sp, #8]
   154cc:	9901      	ldr	r1, [sp, #4]
   154ce:	b008      	add	sp, #32
   154d0:	bd80      	pop	{r7, pc}

000154d2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>:
    pub(crate) fn as_slice(&self) -> &[T] {
   154d2:	b580      	push	{r7, lr}
   154d4:	b088      	sub	sp, #32
   154d6:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   154d8:	1d01      	adds	r1, r0, #4
   154da:	9106      	str	r1, [sp, #24]
   154dc:	9107      	str	r1, [sp, #28]
   154de:	9004      	str	r0, [sp, #16]
   154e0:	9103      	str	r1, [sp, #12]
   154e2:	e7ff      	b.n	154e4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x12>
   154e4:	9804      	ldr	r0, [sp, #16]
   154e6:	6801      	ldr	r1, [r0, #0]
   154e8:	9803      	ldr	r0, [sp, #12]
   154ea:	f000 fb41 	bl	15b70 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
   154ee:	9002      	str	r0, [sp, #8]
   154f0:	9101      	str	r1, [sp, #4]
   154f2:	e7ff      	b.n	154f4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x22>
    }
   154f4:	9802      	ldr	r0, [sp, #8]
   154f6:	9901      	ldr	r1, [sp, #4]
   154f8:	b008      	add	sp, #32
   154fa:	bd80      	pop	{r7, pc}

000154fc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>:
    pub(crate) fn capacity(&self) -> usize {
   154fc:	b580      	push	{r7, lr}
   154fe:	b082      	sub	sp, #8
   15500:	9001      	str	r0, [sp, #4]
        N::to_usize()
   15502:	f000 fa26 	bl	15952 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
   15506:	9000      	str	r0, [sp, #0]
   15508:	e7ff      	b.n	1550a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E+0xe>
    }
   1550a:	9800      	ldr	r0, [sp, #0]
   1550c:	b002      	add	sp, #8
   1550e:	bd80      	pop	{r7, pc}

00015510 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>:
    pub(crate) fn capacity(&self) -> usize {
   15510:	b580      	push	{r7, lr}
   15512:	b082      	sub	sp, #8
   15514:	9001      	str	r0, [sp, #4]
        N::to_usize()
   15516:	f000 fa34 	bl	15982 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>
   1551a:	9000      	str	r0, [sp, #0]
   1551c:	e7ff      	b.n	1551e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E+0xe>
    }
   1551e:	9800      	ldr	r0, [sp, #0]
   15520:	b002      	add	sp, #8
   15522:	bd80      	pop	{r7, pc}

00015524 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>:
    pub(crate) fn truncate(&mut self, len: usize) {
   15524:	b580      	push	{r7, lr}
   15526:	b08a      	sub	sp, #40	; 0x28
   15528:	9007      	str	r0, [sp, #28]
   1552a:	9108      	str	r1, [sp, #32]
   1552c:	9106      	str	r1, [sp, #24]
   1552e:	9005      	str	r0, [sp, #20]
   15530:	e7ff      	b.n	15532 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
            while len < self.len {
   15532:	9805      	ldr	r0, [sp, #20]
   15534:	6801      	ldr	r1, [r0, #0]
   15536:	9a06      	ldr	r2, [sp, #24]
   15538:	428a      	cmp	r2, r1
   1553a:	d302      	bcc.n	15542 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1e>
   1553c:	e7ff      	b.n	1553e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1a>
    }
   1553e:	b00a      	add	sp, #40	; 0x28
   15540:	bd80      	pop	{r7, pc}
                self.len -= 1;
   15542:	9805      	ldr	r0, [sp, #20]
   15544:	6801      	ldr	r1, [r0, #0]
   15546:	1e4a      	subs	r2, r1, #1
   15548:	2901      	cmp	r1, #1
   1554a:	9204      	str	r2, [sp, #16]
   1554c:	d314      	bcc.n	15578 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x54>
   1554e:	e7ff      	b.n	15550 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x2c>
   15550:	9804      	ldr	r0, [sp, #16]
   15552:	9905      	ldr	r1, [sp, #20]
   15554:	6008      	str	r0, [r1, #0]
                let len = self.len;
   15556:	680a      	ldr	r2, [r1, #0]
   15558:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   1555a:	4608      	mov	r0, r1
   1555c:	9203      	str	r2, [sp, #12]
   1555e:	f7ff fdd9 	bl	15114 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
   15562:	9002      	str	r0, [sp, #8]
   15564:	9101      	str	r1, [sp, #4]
   15566:	e7ff      	b.n	15568 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x44>
   15568:	9802      	ldr	r0, [sp, #8]
   1556a:	9901      	ldr	r1, [sp, #4]
   1556c:	9a03      	ldr	r2, [sp, #12]
   1556e:	f000 fb1e 	bl	15bae <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
   15572:	e7ff      	b.n	15574 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x50>
   15574:	e7ff      	b.n	15576 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x52>
            while len < self.len {
   15576:	e7dc      	b.n	15532 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
                self.len -= 1;
   15578:	f64f 20f0 	movw	r0, #64240	; 0xfaf0
   1557c:	f2c0 0001 	movt	r0, #1
   15580:	f64f 326c 	movw	r2, #64364	; 0xfb6c
   15584:	f2c0 0201 	movt	r2, #1
   15588:	2121      	movs	r1, #33	; 0x21
   1558a:	f001 fa33 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1558e:	defe      	udf	#254	; 0xfe

00015590 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   15590:	b580      	push	{r7, lr}
   15592:	b08a      	sub	sp, #40	; 0x28
   15594:	9007      	str	r0, [sp, #28]
   15596:	9108      	str	r1, [sp, #32]
   15598:	9106      	str	r1, [sp, #24]
   1559a:	9005      	str	r0, [sp, #20]
   1559c:	e7ff      	b.n	1559e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
            while len < self.len {
   1559e:	9805      	ldr	r0, [sp, #20]
   155a0:	6801      	ldr	r1, [r0, #0]
   155a2:	9a06      	ldr	r2, [sp, #24]
   155a4:	428a      	cmp	r2, r1
   155a6:	d302      	bcc.n	155ae <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1e>
   155a8:	e7ff      	b.n	155aa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1a>
    }
   155aa:	b00a      	add	sp, #40	; 0x28
   155ac:	bd80      	pop	{r7, pc}
                self.len -= 1;
   155ae:	9805      	ldr	r0, [sp, #20]
   155b0:	6801      	ldr	r1, [r0, #0]
   155b2:	1e4a      	subs	r2, r1, #1
   155b4:	2901      	cmp	r1, #1
   155b6:	9204      	str	r2, [sp, #16]
   155b8:	d314      	bcc.n	155e4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x54>
   155ba:	e7ff      	b.n	155bc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x2c>
   155bc:	9804      	ldr	r0, [sp, #16]
   155be:	9905      	ldr	r1, [sp, #20]
   155c0:	6008      	str	r0, [r1, #0]
                let len = self.len;
   155c2:	680a      	ldr	r2, [r1, #0]
   155c4:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   155c6:	4608      	mov	r0, r1
   155c8:	9203      	str	r2, [sp, #12]
   155ca:	f7ff fd8e 	bl	150ea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
   155ce:	9002      	str	r0, [sp, #8]
   155d0:	9101      	str	r1, [sp, #4]
   155d2:	e7ff      	b.n	155d4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x44>
   155d4:	9802      	ldr	r0, [sp, #8]
   155d6:	9901      	ldr	r1, [sp, #4]
   155d8:	9a03      	ldr	r2, [sp, #12]
   155da:	f000 fae8 	bl	15bae <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
   155de:	e7ff      	b.n	155e0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x50>
   155e0:	e7ff      	b.n	155e2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x52>
            while len < self.len {
   155e2:	e7dc      	b.n	1559e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
                self.len -= 1;
   155e4:	f64f 20f0 	movw	r0, #64240	; 0xfaf0
   155e8:	f2c0 0001 	movt	r0, #1
   155ec:	f64f 326c 	movw	r2, #64364	; 0xfb6c
   155f0:	f2c0 0201 	movt	r2, #1
   155f4:	2121      	movs	r1, #33	; 0x21
   155f6:	f001 f9fd 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   155fa:	defe      	udf	#254	; 0xfe

000155fc <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>:
   155fc:	b082      	sub	sp, #8
   155fe:	9001      	str	r0, [sp, #4]
   15600:	8800      	ldrh	r0, [r0, #0]
   15602:	2800      	cmp	r0, #0
   15604:	d004      	beq.n	15610 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x14>
   15606:	e7ff      	b.n	15608 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0xc>
   15608:	2000      	movs	r0, #0
   1560a:	f88d 0003 	strb.w	r0, [sp, #3]
   1560e:	e003      	b.n	15618 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   15610:	2001      	movs	r0, #1
   15612:	f88d 0003 	strb.w	r0, [sp, #3]
   15616:	e7ff      	b.n	15618 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   15618:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1561c:	b002      	add	sp, #8
   1561e:	4770      	bx	lr

00015620 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>:
   15620:	b082      	sub	sp, #8
   15622:	9001      	str	r0, [sp, #4]
   15624:	7800      	ldrb	r0, [r0, #0]
   15626:	07c0      	lsls	r0, r0, #31
   15628:	2800      	cmp	r0, #0
   1562a:	d004      	beq.n	15636 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x16>
   1562c:	e7ff      	b.n	1562e <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0xe>
   1562e:	2000      	movs	r0, #0
   15630:	f88d 0003 	strb.w	r0, [sp, #3]
   15634:	e003      	b.n	1563e <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   15636:	2001      	movs	r0, #1
   15638:	f88d 0003 	strb.w	r0, [sp, #3]
   1563c:	e7ff      	b.n	1563e <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   1563e:	f89d 0003 	ldrb.w	r0, [sp, #3]
   15642:	b002      	add	sp, #8
   15644:	4770      	bx	lr

00015646 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>:
   15646:	b510      	push	{r4, lr}
   15648:	b08a      	sub	sp, #40	; 0x28
   1564a:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   1564e:	468e      	mov	lr, r1
   15650:	4604      	mov	r4, r0
   15652:	f8ad 0014 	strh.w	r0, [sp, #20]
   15656:	f8ad 1016 	strh.w	r1, [sp, #22]
   1565a:	9207      	str	r2, [sp, #28]
   1565c:	9308      	str	r3, [sp, #32]
   1565e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   15662:	4601      	mov	r1, r0
   15664:	2800      	cmp	r0, #0
   15666:	9304      	str	r3, [sp, #16]
   15668:	9203      	str	r2, [sp, #12]
   1566a:	f8cd c008 	str.w	ip, [sp, #8]
   1566e:	d013      	beq.n	15698 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x52>
   15670:	e7ff      	b.n	15672 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x2c>
   15672:	f8bd 0016 	ldrh.w	r0, [sp, #22]
   15676:	f8ad 001a 	strh.w	r0, [sp, #26]
   1567a:	4668      	mov	r0, sp
   1567c:	9902      	ldr	r1, [sp, #8]
   1567e:	6001      	str	r1, [r0, #0]
   15680:	f64f 338c 	movw	r3, #64396	; 0xfb8c
   15684:	f2c0 0301 	movt	r3, #1
   15688:	f10d 021a 	add.w	r2, sp, #26
   1568c:	9803      	ldr	r0, [sp, #12]
   1568e:	9904      	ldr	r1, [sp, #16]
   15690:	f001 f982 	bl	16998 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   15694:	defe      	udf	#254	; 0xfe
   15696:	defe      	udf	#254	; 0xfe
   15698:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   1569c:	2800      	cmp	r0, #0
   1569e:	d102      	bne.n	156a6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x60>
   156a0:	e7ff      	b.n	156a2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>
   156a2:	b00a      	add	sp, #40	; 0x28
   156a4:	bd10      	pop	{r4, pc}
   156a6:	e7fc      	b.n	156a2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>

000156a8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>:
   156a8:	b580      	push	{r7, lr}
   156aa:	b08a      	sub	sp, #40	; 0x28
   156ac:	4684      	mov	ip, r0
   156ae:	f88d 0017 	strb.w	r0, [sp, #23]
   156b2:	9107      	str	r1, [sp, #28]
   156b4:	9208      	str	r2, [sp, #32]
   156b6:	f89d 0017 	ldrb.w	r0, [sp, #23]
   156ba:	ea4f 7ec0 	mov.w	lr, r0, lsl #31
   156be:	f1be 0f00 	cmp.w	lr, #0
   156c2:	9304      	str	r3, [sp, #16]
   156c4:	9203      	str	r2, [sp, #12]
   156c6:	9102      	str	r1, [sp, #8]
   156c8:	d00e      	beq.n	156e8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x40>
   156ca:	e7ff      	b.n	156cc <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x24>
   156cc:	4668      	mov	r0, sp
   156ce:	9904      	ldr	r1, [sp, #16]
   156d0:	6001      	str	r1, [r0, #0]
   156d2:	f64f 337c 	movw	r3, #64380	; 0xfb7c
   156d6:	f2c0 0301 	movt	r3, #1
   156da:	aa06      	add	r2, sp, #24
   156dc:	9802      	ldr	r0, [sp, #8]
   156de:	9903      	ldr	r1, [sp, #12]
   156e0:	f001 f95a 	bl	16998 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   156e4:	defe      	udf	#254	; 0xfe
   156e6:	defe      	udf	#254	; 0xfe
   156e8:	f89d 0017 	ldrb.w	r0, [sp, #23]
   156ec:	07c0      	lsls	r0, r0, #31
   156ee:	2800      	cmp	r0, #0
   156f0:	d102      	bne.n	156f8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x50>
   156f2:	e7ff      	b.n	156f4 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>
   156f4:	b00a      	add	sp, #40	; 0x28
   156f6:	bd80      	pop	{r7, pc}
   156f8:	e7fc      	b.n	156f4 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>

000156fa <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>:
   156fa:	b086      	sub	sp, #24
   156fc:	4602      	mov	r2, r0
   156fe:	f88d 000f 	strb.w	r0, [sp, #15]
   15702:	f89d 000f 	ldrb.w	r0, [sp, #15]
   15706:	07c3      	lsls	r3, r0, #31
   15708:	2b00      	cmp	r3, #0
   1570a:	9102      	str	r1, [sp, #8]
   1570c:	d011      	beq.n	15732 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x38>
   1570e:	e7ff      	b.n	15710 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x16>
   15710:	4668      	mov	r0, sp
   15712:	9902      	ldr	r1, [sp, #8]
   15714:	6001      	str	r1, [r0, #0]
   15716:	f64f 309c 	movw	r0, #64412	; 0xfb9c
   1571a:	f2c0 0001 	movt	r0, #1
   1571e:	f64f 337c 	movw	r3, #64380	; 0xfb7c
   15722:	f2c0 0301 	movt	r3, #1
   15726:	212b      	movs	r1, #43	; 0x2b
   15728:	aa04      	add	r2, sp, #16
   1572a:	f001 f935 	bl	16998 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   1572e:	defe      	udf	#254	; 0xfe
   15730:	defe      	udf	#254	; 0xfe
   15732:	f89d 000f 	ldrb.w	r0, [sp, #15]
   15736:	07c0      	lsls	r0, r0, #31
   15738:	2800      	cmp	r0, #0
   1573a:	d102      	bne.n	15742 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x48>
   1573c:	e7ff      	b.n	1573e <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>
   1573e:	b006      	add	sp, #24
   15740:	4770      	bx	lr
   15742:	e7fc      	b.n	1573e <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>

00015744 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>:
   15744:	b580      	push	{r7, lr}
   15746:	b088      	sub	sp, #32
   15748:	9001      	str	r0, [sp, #4]
   1574a:	2000      	movs	r0, #0
   1574c:	f88d 0013 	strb.w	r0, [sp, #19]
   15750:	f88d 0011 	strb.w	r0, [sp, #17]
   15754:	f88d 0012 	strb.w	r0, [sp, #18]
   15758:	2001      	movs	r0, #1
   1575a:	f88d 0012 	strb.w	r0, [sp, #18]
   1575e:	f88d 0013 	strb.w	r0, [sp, #19]
   15762:	f88d 0011 	strb.w	r0, [sp, #17]
   15766:	9801      	ldr	r0, [sp, #4]
   15768:	1e41      	subs	r1, r0, #1
   1576a:	bf18      	it	ne
   1576c:	2101      	movne	r1, #1
   1576e:	2801      	cmp	r0, #1
   15770:	d00d      	beq.n	1578e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x4a>
   15772:	e7ff      	b.n	15774 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x30>
   15774:	2000      	movs	r0, #0
   15776:	f88d 0013 	strb.w	r0, [sp, #19]
   1577a:	9901      	ldr	r1, [sp, #4]
   1577c:	9107      	str	r1, [sp, #28]
   1577e:	f88d 0011 	strb.w	r0, [sp, #17]
   15782:	9103      	str	r1, [sp, #12]
   15784:	9803      	ldr	r0, [sp, #12]
   15786:	f7fb fab7 	bl	10cf8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>
   1578a:	e006      	b.n	1579a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x56>
   1578c:	defe      	udf	#254	; 0xfe
   1578e:	2000      	movs	r0, #0
   15790:	f88d 0012 	strb.w	r0, [sp, #18]
   15794:	f88d 000b 	strb.w	r0, [sp, #11]
   15798:	e003      	b.n	157a2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   1579a:	2001      	movs	r0, #1
   1579c:	f88d 000b 	strb.w	r0, [sp, #11]
   157a0:	e7ff      	b.n	157a2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   157a2:	f89d 0011 	ldrb.w	r0, [sp, #17]
   157a6:	07c0      	lsls	r0, r0, #31
   157a8:	2800      	cmp	r0, #0
   157aa:	d104      	bne.n	157b6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x72>
   157ac:	e7ff      	b.n	157ae <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   157ae:	9801      	ldr	r0, [sp, #4]
   157b0:	2801      	cmp	r0, #1
   157b2:	d008      	beq.n	157c6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x82>
   157b4:	e011      	b.n	157da <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x96>
   157b6:	2000      	movs	r0, #0
   157b8:	f88d 0011 	strb.w	r0, [sp, #17]
   157bc:	e7f7      	b.n	157ae <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   157be:	f89d 000b 	ldrb.w	r0, [sp, #11]
   157c2:	b008      	add	sp, #32
   157c4:	bd80      	pop	{r7, pc}
   157c6:	f89d 0012 	ldrb.w	r0, [sp, #18]
   157ca:	07c0      	lsls	r0, r0, #31
   157cc:	2800      	cmp	r0, #0
   157ce:	d0f6      	beq.n	157be <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   157d0:	e7ff      	b.n	157d2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x8e>
   157d2:	2000      	movs	r0, #0
   157d4:	f88d 0012 	strb.w	r0, [sp, #18]
   157d8:	e7f1      	b.n	157be <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   157da:	f89d 0013 	ldrb.w	r0, [sp, #19]
   157de:	07c0      	lsls	r0, r0, #31
   157e0:	2800      	cmp	r0, #0
   157e2:	d0ec      	beq.n	157be <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   157e4:	e7ff      	b.n	157e6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0xa2>
   157e6:	2000      	movs	r0, #0
   157e8:	f88d 0013 	strb.w	r0, [sp, #19]
   157ec:	e7e7      	b.n	157be <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>

000157ee <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>:
   157ee:	b580      	push	{r7, lr}
   157f0:	b088      	sub	sp, #32
   157f2:	9001      	str	r0, [sp, #4]
   157f4:	2000      	movs	r0, #0
   157f6:	f88d 0013 	strb.w	r0, [sp, #19]
   157fa:	f88d 0011 	strb.w	r0, [sp, #17]
   157fe:	f88d 0012 	strb.w	r0, [sp, #18]
   15802:	2001      	movs	r0, #1
   15804:	f88d 0012 	strb.w	r0, [sp, #18]
   15808:	f88d 0013 	strb.w	r0, [sp, #19]
   1580c:	f88d 0011 	strb.w	r0, [sp, #17]
   15810:	9801      	ldr	r0, [sp, #4]
   15812:	1e41      	subs	r1, r0, #1
   15814:	bf18      	it	ne
   15816:	2101      	movne	r1, #1
   15818:	2801      	cmp	r0, #1
   1581a:	d00d      	beq.n	15838 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x4a>
   1581c:	e7ff      	b.n	1581e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x30>
   1581e:	2000      	movs	r0, #0
   15820:	f88d 0013 	strb.w	r0, [sp, #19]
   15824:	9901      	ldr	r1, [sp, #4]
   15826:	9107      	str	r1, [sp, #28]
   15828:	f88d 0011 	strb.w	r0, [sp, #17]
   1582c:	9103      	str	r1, [sp, #12]
   1582e:	9803      	ldr	r0, [sp, #12]
   15830:	f7fb fa58 	bl	10ce4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>
   15834:	e006      	b.n	15844 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x56>
   15836:	defe      	udf	#254	; 0xfe
   15838:	2000      	movs	r0, #0
   1583a:	f88d 0012 	strb.w	r0, [sp, #18]
   1583e:	f88d 000b 	strb.w	r0, [sp, #11]
   15842:	e003      	b.n	1584c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   15844:	2001      	movs	r0, #1
   15846:	f88d 000b 	strb.w	r0, [sp, #11]
   1584a:	e7ff      	b.n	1584c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   1584c:	f89d 0011 	ldrb.w	r0, [sp, #17]
   15850:	07c0      	lsls	r0, r0, #31
   15852:	2800      	cmp	r0, #0
   15854:	d104      	bne.n	15860 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x72>
   15856:	e7ff      	b.n	15858 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   15858:	9801      	ldr	r0, [sp, #4]
   1585a:	2801      	cmp	r0, #1
   1585c:	d008      	beq.n	15870 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x82>
   1585e:	e011      	b.n	15884 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x96>
   15860:	2000      	movs	r0, #0
   15862:	f88d 0011 	strb.w	r0, [sp, #17]
   15866:	e7f7      	b.n	15858 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   15868:	f89d 000b 	ldrb.w	r0, [sp, #11]
   1586c:	b008      	add	sp, #32
   1586e:	bd80      	pop	{r7, pc}
   15870:	f89d 0012 	ldrb.w	r0, [sp, #18]
   15874:	07c0      	lsls	r0, r0, #31
   15876:	2800      	cmp	r0, #0
   15878:	d0f6      	beq.n	15868 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   1587a:	e7ff      	b.n	1587c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x8e>
   1587c:	2000      	movs	r0, #0
   1587e:	f88d 0012 	strb.w	r0, [sp, #18]
   15882:	e7f1      	b.n	15868 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   15884:	f89d 0013 	ldrb.w	r0, [sp, #19]
   15888:	07c0      	lsls	r0, r0, #31
   1588a:	2800      	cmp	r0, #0
   1588c:	d0ec      	beq.n	15868 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   1588e:	e7ff      	b.n	15890 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0xa2>
   15890:	2000      	movs	r0, #0
   15892:	f88d 0013 	strb.w	r0, [sp, #19]
   15896:	e7e7      	b.n	15868 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>

00015898 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>:
   15898:	b580      	push	{r7, lr}
   1589a:	b088      	sub	sp, #32
   1589c:	9001      	str	r0, [sp, #4]
   1589e:	2000      	movs	r0, #0
   158a0:	f88d 0013 	strb.w	r0, [sp, #19]
   158a4:	f88d 0011 	strb.w	r0, [sp, #17]
   158a8:	f88d 0012 	strb.w	r0, [sp, #18]
   158ac:	2001      	movs	r0, #1
   158ae:	f88d 0012 	strb.w	r0, [sp, #18]
   158b2:	f88d 0013 	strb.w	r0, [sp, #19]
   158b6:	f88d 0011 	strb.w	r0, [sp, #17]
   158ba:	9801      	ldr	r0, [sp, #4]
   158bc:	1e41      	subs	r1, r0, #1
   158be:	bf18      	it	ne
   158c0:	2101      	movne	r1, #1
   158c2:	2801      	cmp	r0, #1
   158c4:	d00d      	beq.n	158e2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x4a>
   158c6:	e7ff      	b.n	158c8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x30>
   158c8:	2000      	movs	r0, #0
   158ca:	f88d 0013 	strb.w	r0, [sp, #19]
   158ce:	9901      	ldr	r1, [sp, #4]
   158d0:	9107      	str	r1, [sp, #28]
   158d2:	f88d 0011 	strb.w	r0, [sp, #17]
   158d6:	9103      	str	r1, [sp, #12]
   158d8:	9803      	ldr	r0, [sp, #12]
   158da:	f7fb fa08 	bl	10cee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>
   158de:	e006      	b.n	158ee <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x56>
   158e0:	defe      	udf	#254	; 0xfe
   158e2:	2000      	movs	r0, #0
   158e4:	f88d 0012 	strb.w	r0, [sp, #18]
   158e8:	f88d 000b 	strb.w	r0, [sp, #11]
   158ec:	e003      	b.n	158f6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   158ee:	2001      	movs	r0, #1
   158f0:	f88d 000b 	strb.w	r0, [sp, #11]
   158f4:	e7ff      	b.n	158f6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   158f6:	f89d 0011 	ldrb.w	r0, [sp, #17]
   158fa:	07c0      	lsls	r0, r0, #31
   158fc:	2800      	cmp	r0, #0
   158fe:	d104      	bne.n	1590a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x72>
   15900:	e7ff      	b.n	15902 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   15902:	9801      	ldr	r0, [sp, #4]
   15904:	2801      	cmp	r0, #1
   15906:	d008      	beq.n	1591a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x82>
   15908:	e011      	b.n	1592e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x96>
   1590a:	2000      	movs	r0, #0
   1590c:	f88d 0011 	strb.w	r0, [sp, #17]
   15910:	e7f7      	b.n	15902 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   15912:	f89d 000b 	ldrb.w	r0, [sp, #11]
   15916:	b008      	add	sp, #32
   15918:	bd80      	pop	{r7, pc}
   1591a:	f89d 0012 	ldrb.w	r0, [sp, #18]
   1591e:	07c0      	lsls	r0, r0, #31
   15920:	2800      	cmp	r0, #0
   15922:	d0f6      	beq.n	15912 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   15924:	e7ff      	b.n	15926 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x8e>
   15926:	2000      	movs	r0, #0
   15928:	f88d 0012 	strb.w	r0, [sp, #18]
   1592c:	e7f1      	b.n	15912 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   1592e:	f89d 0013 	ldrb.w	r0, [sp, #19]
   15932:	07c0      	lsls	r0, r0, #31
   15934:	2800      	cmp	r0, #0
   15936:	d0ec      	beq.n	15912 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   15938:	e7ff      	b.n	1593a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0xa2>
   1593a:	2000      	movs	r0, #0
   1593c:	f88d 0013 	strb.w	r0, [sp, #19]
   15940:	e7e7      	b.n	15912 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>

00015942 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>:
   15942:	b082      	sub	sp, #8
   15944:	2001      	movs	r0, #1
   15946:	f88d 0003 	strb.w	r0, [sp, #3]
   1594a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1594e:	b002      	add	sp, #8
   15950:	4770      	bx	lr

00015952 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>:
    #[inline]
    fn to_u128() -> u128 {
        u128::from(B::to_u8()) | U::to_u128() << 1
    }
    #[inline]
    fn to_usize() -> usize {
   15952:	b580      	push	{r7, lr}
   15954:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15956:	f000 fdee 	bl	16536 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   1595a:	9003      	str	r0, [sp, #12]
   1595c:	e7ff      	b.n	1595e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0xc>
   1595e:	9803      	ldr	r0, [sp, #12]
   15960:	f000 fe4f 	bl	16602 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15964:	9002      	str	r0, [sp, #8]
   15966:	e7ff      	b.n	15968 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x16>
   15968:	f000 f823 	bl	159b2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>
   1596c:	9001      	str	r0, [sp, #4]
   1596e:	e7ff      	b.n	15970 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x1e>
   15970:	9801      	ldr	r0, [sp, #4]
   15972:	0041      	lsls	r1, r0, #1
   15974:	9100      	str	r1, [sp, #0]
   15976:	e7ff      	b.n	15978 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x26>
   15978:	9802      	ldr	r0, [sp, #8]
   1597a:	9900      	ldr	r1, [sp, #0]
   1597c:	4308      	orrs	r0, r1
    }
   1597e:	b004      	add	sp, #16
   15980:	bd80      	pop	{r7, pc}

00015982 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>:
    fn to_usize() -> usize {
   15982:	b580      	push	{r7, lr}
   15984:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15986:	f000 fdd6 	bl	16536 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   1598a:	9003      	str	r0, [sp, #12]
   1598c:	e7ff      	b.n	1598e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0xc>
   1598e:	9803      	ldr	r0, [sp, #12]
   15990:	f000 fe37 	bl	16602 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15994:	9002      	str	r0, [sp, #8]
   15996:	e7ff      	b.n	15998 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x16>
   15998:	f7ff ffdb 	bl	15952 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
   1599c:	9001      	str	r0, [sp, #4]
   1599e:	e7ff      	b.n	159a0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x1e>
   159a0:	9801      	ldr	r0, [sp, #4]
   159a2:	0041      	lsls	r1, r0, #1
   159a4:	9100      	str	r1, [sp, #0]
   159a6:	e7ff      	b.n	159a8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x26>
   159a8:	9802      	ldr	r0, [sp, #8]
   159aa:	9900      	ldr	r1, [sp, #0]
   159ac:	4308      	orrs	r0, r1
    }
   159ae:	b004      	add	sp, #16
   159b0:	bd80      	pop	{r7, pc}

000159b2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>:
    fn to_usize() -> usize {
   159b2:	b580      	push	{r7, lr}
   159b4:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   159b6:	f000 fdc0 	bl	1653a <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   159ba:	9003      	str	r0, [sp, #12]
   159bc:	e7ff      	b.n	159be <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0xc>
   159be:	9803      	ldr	r0, [sp, #12]
   159c0:	f000 fe1f 	bl	16602 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   159c4:	9002      	str	r0, [sp, #8]
   159c6:	e7ff      	b.n	159c8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x16>
   159c8:	f000 f83b 	bl	15a42 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>
   159cc:	9001      	str	r0, [sp, #4]
   159ce:	e7ff      	b.n	159d0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x1e>
   159d0:	9801      	ldr	r0, [sp, #4]
   159d2:	0041      	lsls	r1, r0, #1
   159d4:	9100      	str	r1, [sp, #0]
   159d6:	e7ff      	b.n	159d8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x26>
   159d8:	9802      	ldr	r0, [sp, #8]
   159da:	9900      	ldr	r1, [sp, #0]
   159dc:	4308      	orrs	r0, r1
    }
   159de:	b004      	add	sp, #16
   159e0:	bd80      	pop	{r7, pc}

000159e2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>:
    fn to_usize() -> usize {
   159e2:	b580      	push	{r7, lr}
   159e4:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   159e6:	f000 fda6 	bl	16536 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   159ea:	9003      	str	r0, [sp, #12]
   159ec:	e7ff      	b.n	159ee <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0xc>
   159ee:	9803      	ldr	r0, [sp, #12]
   159f0:	f000 fe07 	bl	16602 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   159f4:	9002      	str	r0, [sp, #8]
   159f6:	e7ff      	b.n	159f8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x16>
   159f8:	f000 f80b 	bl	15a12 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>
   159fc:	9001      	str	r0, [sp, #4]
   159fe:	e7ff      	b.n	15a00 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x1e>
   15a00:	9801      	ldr	r0, [sp, #4]
   15a02:	0041      	lsls	r1, r0, #1
   15a04:	9100      	str	r1, [sp, #0]
   15a06:	e7ff      	b.n	15a08 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x26>
   15a08:	9802      	ldr	r0, [sp, #8]
   15a0a:	9900      	ldr	r1, [sp, #0]
   15a0c:	4308      	orrs	r0, r1
    }
   15a0e:	b004      	add	sp, #16
   15a10:	bd80      	pop	{r7, pc}

00015a12 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>:
    fn to_usize() -> usize {
   15a12:	b580      	push	{r7, lr}
   15a14:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15a16:	f000 fd90 	bl	1653a <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   15a1a:	9003      	str	r0, [sp, #12]
   15a1c:	e7ff      	b.n	15a1e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0xc>
   15a1e:	9803      	ldr	r0, [sp, #12]
   15a20:	f000 fdef 	bl	16602 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15a24:	9002      	str	r0, [sp, #8]
   15a26:	e7ff      	b.n	15a28 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x16>
   15a28:	f000 fd25 	bl	16476 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   15a2c:	9001      	str	r0, [sp, #4]
   15a2e:	e7ff      	b.n	15a30 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x1e>
   15a30:	9801      	ldr	r0, [sp, #4]
   15a32:	0041      	lsls	r1, r0, #1
   15a34:	9100      	str	r1, [sp, #0]
   15a36:	e7ff      	b.n	15a38 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x26>
   15a38:	9802      	ldr	r0, [sp, #8]
   15a3a:	9900      	ldr	r1, [sp, #0]
   15a3c:	4308      	orrs	r0, r1
    }
   15a3e:	b004      	add	sp, #16
   15a40:	bd80      	pop	{r7, pc}

00015a42 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>:
    fn to_usize() -> usize {
   15a42:	b580      	push	{r7, lr}
   15a44:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15a46:	f000 fd76 	bl	16536 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   15a4a:	9003      	str	r0, [sp, #12]
   15a4c:	e7ff      	b.n	15a4e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0xc>
   15a4e:	9803      	ldr	r0, [sp, #12]
   15a50:	f000 fdd7 	bl	16602 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15a54:	9002      	str	r0, [sp, #8]
   15a56:	e7ff      	b.n	15a58 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x16>
   15a58:	f7ff ffc3 	bl	159e2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>
   15a5c:	9001      	str	r0, [sp, #4]
   15a5e:	e7ff      	b.n	15a60 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x1e>
   15a60:	9801      	ldr	r0, [sp, #4]
   15a62:	0041      	lsls	r1, r0, #1
   15a64:	9100      	str	r1, [sp, #0]
   15a66:	e7ff      	b.n	15a68 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x26>
   15a68:	9802      	ldr	r0, [sp, #8]
   15a6a:	9900      	ldr	r1, [sp, #0]
   15a6c:	4308      	orrs	r0, r1
    }
   15a6e:	b004      	add	sp, #16
   15a70:	bd80      	pop	{r7, pc}

00015a72 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>:
   15a72:	b081      	sub	sp, #4
   15a74:	9000      	str	r0, [sp, #0]
   15a76:	8800      	ldrh	r0, [r0, #0]
   15a78:	b001      	add	sp, #4
   15a7a:	4770      	bx	lr

00015a7c <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>:
   15a7c:	b580      	push	{r7, lr}
   15a7e:	b08c      	sub	sp, #48	; 0x30
   15a80:	9009      	str	r0, [sp, #36]	; 0x24
   15a82:	910a      	str	r1, [sp, #40]	; 0x28
   15a84:	920b      	str	r2, [sp, #44]	; 0x2c
   15a86:	9006      	str	r0, [sp, #24]
   15a88:	4608      	mov	r0, r1
   15a8a:	9105      	str	r1, [sp, #20]
   15a8c:	4611      	mov	r1, r2
   15a8e:	9204      	str	r2, [sp, #16]
   15a90:	f000 f89f 	bl	15bd2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15a94:	9003      	str	r0, [sp, #12]
   15a96:	e7ff      	b.n	15a98 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x1c>
   15a98:	9806      	ldr	r0, [sp, #24]
   15a9a:	9007      	str	r0, [sp, #28]
   15a9c:	9903      	ldr	r1, [sp, #12]
   15a9e:	9108      	str	r1, [sp, #32]
   15aa0:	9807      	ldr	r0, [sp, #28]
   15aa2:	9908      	ldr	r1, [sp, #32]
   15aa4:	9a05      	ldr	r2, [sp, #20]
   15aa6:	9b04      	ldr	r3, [sp, #16]
   15aa8:	f000 f82d 	bl	15b06 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>
   15aac:	9002      	str	r0, [sp, #8]
   15aae:	9101      	str	r1, [sp, #4]
   15ab0:	e7ff      	b.n	15ab2 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x36>
   15ab2:	9802      	ldr	r0, [sp, #8]
   15ab4:	9901      	ldr	r1, [sp, #4]
   15ab6:	b00c      	add	sp, #48	; 0x30
   15ab8:	bd80      	pop	{r7, pc}

00015aba <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>:
   15aba:	b083      	sub	sp, #12
   15abc:	9001      	str	r0, [sp, #4]
   15abe:	9102      	str	r1, [sp, #8]
   15ac0:	b003      	add	sp, #12
   15ac2:	4770      	bx	lr

00015ac4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>:
   15ac4:	b580      	push	{r7, lr}
   15ac6:	b08a      	sub	sp, #40	; 0x28
   15ac8:	9006      	str	r0, [sp, #24]
   15aca:	9107      	str	r1, [sp, #28]
   15acc:	9208      	str	r2, [sp, #32]
   15ace:	9309      	str	r3, [sp, #36]	; 0x24
   15ad0:	9005      	str	r0, [sp, #20]
   15ad2:	4610      	mov	r0, r2
   15ad4:	9104      	str	r1, [sp, #16]
   15ad6:	4619      	mov	r1, r3
   15ad8:	f000 f864 	bl	15ba4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   15adc:	9003      	str	r0, [sp, #12]
   15ade:	e7ff      	b.n	15ae0 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x1c>
   15ae0:	9803      	ldr	r0, [sp, #12]
   15ae2:	9905      	ldr	r1, [sp, #20]
   15ae4:	f000 f96e 	bl	15dc4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   15ae8:	9002      	str	r0, [sp, #8]
   15aea:	e7ff      	b.n	15aec <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x28>
   15aec:	9804      	ldr	r0, [sp, #16]
   15aee:	9905      	ldr	r1, [sp, #20]
   15af0:	1a41      	subs	r1, r0, r1
   15af2:	9802      	ldr	r0, [sp, #8]
   15af4:	f000 f849 	bl	15b8a <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   15af8:	9001      	str	r0, [sp, #4]
   15afa:	9100      	str	r1, [sp, #0]
   15afc:	e7ff      	b.n	15afe <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x3a>
   15afe:	9801      	ldr	r0, [sp, #4]
   15b00:	9900      	ldr	r1, [sp, #0]
   15b02:	b00a      	add	sp, #40	; 0x28
   15b04:	bd80      	pop	{r7, pc}

00015b06 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>:
   15b06:	b580      	push	{r7, lr}
   15b08:	b08c      	sub	sp, #48	; 0x30
   15b0a:	9008      	str	r0, [sp, #32]
   15b0c:	9109      	str	r1, [sp, #36]	; 0x24
   15b0e:	920a      	str	r2, [sp, #40]	; 0x28
   15b10:	930b      	str	r3, [sp, #44]	; 0x2c
   15b12:	4288      	cmp	r0, r1
   15b14:	9307      	str	r3, [sp, #28]
   15b16:	9206      	str	r2, [sp, #24]
   15b18:	9105      	str	r1, [sp, #20]
   15b1a:	9004      	str	r0, [sp, #16]
   15b1c:	d806      	bhi.n	15b2c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x26>
   15b1e:	e7ff      	b.n	15b20 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x1a>
   15b20:	9806      	ldr	r0, [sp, #24]
   15b22:	9907      	ldr	r1, [sp, #28]
   15b24:	f000 f855 	bl	15bd2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15b28:	9003      	str	r0, [sp, #12]
   15b2a:	e004      	b.n	15b36 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x30>
   15b2c:	9804      	ldr	r0, [sp, #16]
   15b2e:	9905      	ldr	r1, [sp, #20]
   15b30:	f001 fed5 	bl	178de <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   15b34:	defe      	udf	#254	; 0xfe
   15b36:	9805      	ldr	r0, [sp, #20]
   15b38:	9903      	ldr	r1, [sp, #12]
   15b3a:	4288      	cmp	r0, r1
   15b3c:	d809      	bhi.n	15b52 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x4c>
   15b3e:	e7ff      	b.n	15b40 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x3a>
   15b40:	9804      	ldr	r0, [sp, #16]
   15b42:	9905      	ldr	r1, [sp, #20]
   15b44:	9a06      	ldr	r2, [sp, #24]
   15b46:	9b07      	ldr	r3, [sp, #28]
   15b48:	f7ff ffbc 	bl	15ac4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>
   15b4c:	9002      	str	r0, [sp, #8]
   15b4e:	9101      	str	r1, [sp, #4]
   15b50:	e00a      	b.n	15b68 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x62>
   15b52:	9806      	ldr	r0, [sp, #24]
   15b54:	9907      	ldr	r1, [sp, #28]
   15b56:	f000 f83c 	bl	15bd2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15b5a:	9000      	str	r0, [sp, #0]
   15b5c:	e7ff      	b.n	15b5e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x58>
   15b5e:	9805      	ldr	r0, [sp, #20]
   15b60:	9900      	ldr	r1, [sp, #0]
   15b62:	f001 fe9a 	bl	1789a <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   15b66:	defe      	udf	#254	; 0xfe
   15b68:	9802      	ldr	r0, [sp, #8]
   15b6a:	9901      	ldr	r1, [sp, #4]
   15b6c:	b00c      	add	sp, #48	; 0x30
   15b6e:	bd80      	pop	{r7, pc}

00015b70 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>:
   15b70:	b580      	push	{r7, lr}
   15b72:	b084      	sub	sp, #16
   15b74:	9002      	str	r0, [sp, #8]
   15b76:	9103      	str	r1, [sp, #12]
   15b78:	f000 fd4a 	bl	16610 <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>
   15b7c:	9001      	str	r0, [sp, #4]
   15b7e:	9100      	str	r1, [sp, #0]
   15b80:	e7ff      	b.n	15b82 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE+0x12>
   15b82:	9801      	ldr	r0, [sp, #4]
   15b84:	9900      	ldr	r1, [sp, #0]
   15b86:	b004      	add	sp, #16
   15b88:	bd80      	pop	{r7, pc}

00015b8a <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>:
   15b8a:	b580      	push	{r7, lr}
   15b8c:	b084      	sub	sp, #16
   15b8e:	9002      	str	r0, [sp, #8]
   15b90:	9103      	str	r1, [sp, #12]
   15b92:	f000 fd4a 	bl	1662a <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>
   15b96:	9001      	str	r0, [sp, #4]
   15b98:	9100      	str	r1, [sp, #0]
   15b9a:	e7ff      	b.n	15b9c <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E+0x12>
   15b9c:	9801      	ldr	r0, [sp, #4]
   15b9e:	9900      	ldr	r1, [sp, #0]
   15ba0:	b004      	add	sp, #16
   15ba2:	bd80      	pop	{r7, pc}

00015ba4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>:
   15ba4:	b082      	sub	sp, #8
   15ba6:	9000      	str	r0, [sp, #0]
   15ba8:	9101      	str	r1, [sp, #4]
   15baa:	b002      	add	sp, #8
   15bac:	4770      	bx	lr

00015bae <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>:
   15bae:	b580      	push	{r7, lr}
   15bb0:	b086      	sub	sp, #24
   15bb2:	9003      	str	r0, [sp, #12]
   15bb4:	9104      	str	r1, [sp, #16]
   15bb6:	9205      	str	r2, [sp, #20]
   15bb8:	9002      	str	r0, [sp, #8]
   15bba:	4610      	mov	r0, r2
   15bbc:	9a02      	ldr	r2, [sp, #8]
   15bbe:	9101      	str	r1, [sp, #4]
   15bc0:	4611      	mov	r1, r2
   15bc2:	9a01      	ldr	r2, [sp, #4]
   15bc4:	f000 f886 	bl	15cd4 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>
   15bc8:	9000      	str	r0, [sp, #0]
   15bca:	e7ff      	b.n	15bcc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE+0x1e>
   15bcc:	9800      	ldr	r0, [sp, #0]
   15bce:	b006      	add	sp, #24
   15bd0:	bd80      	pop	{r7, pc}

00015bd2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>:
   15bd2:	b084      	sub	sp, #16
   15bd4:	9002      	str	r0, [sp, #8]
   15bd6:	9103      	str	r1, [sp, #12]
   15bd8:	9000      	str	r0, [sp, #0]
   15bda:	9101      	str	r1, [sp, #4]
   15bdc:	9801      	ldr	r0, [sp, #4]
   15bde:	b004      	add	sp, #16
   15be0:	4770      	bx	lr

00015be2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>:
   15be2:	b580      	push	{r7, lr}
   15be4:	b092      	sub	sp, #72	; 0x48
   15be6:	900e      	str	r0, [sp, #56]	; 0x38
   15be8:	910f      	str	r1, [sp, #60]	; 0x3c
   15bea:	9009      	str	r0, [sp, #36]	; 0x24
   15bec:	9108      	str	r1, [sp, #32]
   15bee:	f000 f83e 	bl	15c6e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>
   15bf2:	4601      	mov	r1, r0
   15bf4:	9010      	str	r0, [sp, #64]	; 0x40
   15bf6:	9107      	str	r1, [sp, #28]
   15bf8:	e7ff      	b.n	15bfa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x18>
   15bfa:	9807      	ldr	r0, [sp, #28]
   15bfc:	f000 fcc0 	bl	16580 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
   15c00:	e7ff      	b.n	15c02 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x20>
   15c02:	e7ff      	b.n	15c04 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x22>
   15c04:	2002      	movs	r0, #2
   15c06:	9011      	str	r0, [sp, #68]	; 0x44
   15c08:	9811      	ldr	r0, [sp, #68]	; 0x44
   15c0a:	9006      	str	r0, [sp, #24]
   15c0c:	e7ff      	b.n	15c0e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x2c>
   15c0e:	9806      	ldr	r0, [sp, #24]
   15c10:	2800      	cmp	r0, #0
   15c12:	d006      	beq.n	15c22 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x40>
   15c14:	e7ff      	b.n	15c16 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x34>
   15c16:	9809      	ldr	r0, [sp, #36]	; 0x24
   15c18:	9908      	ldr	r1, [sp, #32]
   15c1a:	f7ff ffda 	bl	15bd2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15c1e:	9005      	str	r0, [sp, #20]
   15c20:	e011      	b.n	15c46 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x64>
   15c22:	9807      	ldr	r0, [sp, #28]
   15c24:	9909      	ldr	r1, [sp, #36]	; 0x24
   15c26:	9004      	str	r0, [sp, #16]
   15c28:	4608      	mov	r0, r1
   15c2a:	9908      	ldr	r1, [sp, #32]
   15c2c:	f7ff ffd1 	bl	15bd2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15c30:	9003      	str	r0, [sp, #12]
   15c32:	e7ff      	b.n	15c34 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x52>
   15c34:	9804      	ldr	r0, [sp, #16]
   15c36:	9903      	ldr	r1, [sp, #12]
   15c38:	f7fa fa26 	bl	10088 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>
   15c3c:	9002      	str	r0, [sp, #8]
   15c3e:	e7ff      	b.n	15c40 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x5e>
   15c40:	9802      	ldr	r0, [sp, #8]
   15c42:	900c      	str	r0, [sp, #48]	; 0x30
   15c44:	e006      	b.n	15c54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
   15c46:	9807      	ldr	r0, [sp, #28]
   15c48:	9905      	ldr	r1, [sp, #20]
   15c4a:	f000 fc78 	bl	1653e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
   15c4e:	900c      	str	r0, [sp, #48]	; 0x30
   15c50:	e7ff      	b.n	15c52 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x70>
   15c52:	e7ff      	b.n	15c54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
   15c54:	9807      	ldr	r0, [sp, #28]
   15c56:	f000 f8e2 	bl	15e1e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
   15c5a:	9001      	str	r0, [sp, #4]
   15c5c:	e7ff      	b.n	15c5e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x7c>
   15c5e:	980c      	ldr	r0, [sp, #48]	; 0x30
   15c60:	9901      	ldr	r1, [sp, #4]
   15c62:	910a      	str	r1, [sp, #40]	; 0x28
   15c64:	900b      	str	r0, [sp, #44]	; 0x2c
   15c66:	980a      	ldr	r0, [sp, #40]	; 0x28
   15c68:	990b      	ldr	r1, [sp, #44]	; 0x2c
   15c6a:	b012      	add	sp, #72	; 0x48
   15c6c:	bd80      	pop	{r7, pc}

00015c6e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>:
   15c6e:	b082      	sub	sp, #8
   15c70:	9000      	str	r0, [sp, #0]
   15c72:	9101      	str	r1, [sp, #4]
   15c74:	b002      	add	sp, #8
   15c76:	4770      	bx	lr

00015c78 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>:
   15c78:	b580      	push	{r7, lr}
   15c7a:	b086      	sub	sp, #24
   15c7c:	9003      	str	r0, [sp, #12]
   15c7e:	9104      	str	r1, [sp, #16]
   15c80:	f7ff ff1b 	bl	15aba <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>
   15c84:	9002      	str	r0, [sp, #8]
   15c86:	9101      	str	r1, [sp, #4]
   15c88:	e7ff      	b.n	15c8a <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E+0x12>
   15c8a:	9802      	ldr	r0, [sp, #8]
   15c8c:	9901      	ldr	r1, [sp, #4]
   15c8e:	b006      	add	sp, #24
   15c90:	bd80      	pop	{r7, pc}

00015c92 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>:
   15c92:	b580      	push	{r7, lr}
   15c94:	b088      	sub	sp, #32
   15c96:	9005      	str	r0, [sp, #20]
   15c98:	9106      	str	r1, [sp, #24]
   15c9a:	9207      	str	r2, [sp, #28]
   15c9c:	9004      	str	r0, [sp, #16]
   15c9e:	4610      	mov	r0, r2
   15ca0:	9a04      	ldr	r2, [sp, #16]
   15ca2:	9103      	str	r1, [sp, #12]
   15ca4:	4611      	mov	r1, r2
   15ca6:	9a03      	ldr	r2, [sp, #12]
   15ca8:	f7ff fee8 	bl	15a7c <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>
   15cac:	9002      	str	r0, [sp, #8]
   15cae:	9101      	str	r1, [sp, #4]
   15cb0:	e7ff      	b.n	15cb2 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E+0x20>
   15cb2:	9802      	ldr	r0, [sp, #8]
   15cb4:	9901      	ldr	r1, [sp, #4]
   15cb6:	b008      	add	sp, #32
   15cb8:	bd80      	pop	{r7, pc}

00015cba <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>:
   15cba:	b580      	push	{r7, lr}
   15cbc:	b084      	sub	sp, #16
   15cbe:	9002      	str	r0, [sp, #8]
   15cc0:	9103      	str	r1, [sp, #12]
   15cc2:	f7ff ff8e 	bl	15be2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>
   15cc6:	9001      	str	r0, [sp, #4]
   15cc8:	9100      	str	r1, [sp, #0]
   15cca:	e7ff      	b.n	15ccc <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE+0x12>
   15ccc:	9801      	ldr	r0, [sp, #4]
   15cce:	9900      	ldr	r1, [sp, #0]
   15cd0:	b004      	add	sp, #16
   15cd2:	bd80      	pop	{r7, pc}

00015cd4 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>:
   15cd4:	b580      	push	{r7, lr}
   15cd6:	b086      	sub	sp, #24
   15cd8:	9003      	str	r0, [sp, #12]
   15cda:	9104      	str	r1, [sp, #16]
   15cdc:	9205      	str	r2, [sp, #20]
   15cde:	9002      	str	r0, [sp, #8]
   15ce0:	4608      	mov	r0, r1
   15ce2:	4611      	mov	r1, r2
   15ce4:	f7ff ff5e 	bl	15ba4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   15ce8:	9001      	str	r0, [sp, #4]
   15cea:	e7ff      	b.n	15cec <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x18>
   15cec:	9801      	ldr	r0, [sp, #4]
   15cee:	9902      	ldr	r1, [sp, #8]
   15cf0:	f000 f868 	bl	15dc4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   15cf4:	9000      	str	r0, [sp, #0]
   15cf6:	e7ff      	b.n	15cf8 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x24>
   15cf8:	9800      	ldr	r0, [sp, #0]
   15cfa:	b006      	add	sp, #24
   15cfc:	bd80      	pop	{r7, pc}

00015cfe <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>:
   15cfe:	b580      	push	{r7, lr}
   15d00:	b08e      	sub	sp, #56	; 0x38
   15d02:	9007      	str	r0, [sp, #28]
   15d04:	6801      	ldr	r1, [r0, #0]
   15d06:	9005      	str	r0, [sp, #20]
   15d08:	4608      	mov	r0, r1
   15d0a:	f000 f88e 	bl	15e2a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   15d0e:	9004      	str	r0, [sp, #16]
   15d10:	e7ff      	b.n	15d12 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x14>
   15d12:	9804      	ldr	r0, [sp, #16]
   15d14:	f000 f879 	bl	15e0a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>
   15d18:	e7ff      	b.n	15d1a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1c>
   15d1a:	e7ff      	b.n	15d1c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1e>
   15d1c:	2002      	movs	r0, #2
   15d1e:	9008      	str	r0, [sp, #32]
   15d20:	9808      	ldr	r0, [sp, #32]
   15d22:	9003      	str	r0, [sp, #12]
   15d24:	e7ff      	b.n	15d26 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x28>
   15d26:	9803      	ldr	r0, [sp, #12]
   15d28:	2800      	cmp	r0, #0
   15d2a:	d007      	beq.n	15d3c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
   15d2c:	e7ff      	b.n	15d2e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x30>
   15d2e:	9805      	ldr	r0, [sp, #20]
   15d30:	6840      	ldr	r0, [r0, #4]
   15d32:	f000 fc25 	bl	16580 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
   15d36:	e7ff      	b.n	15d38 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3a>
   15d38:	e7ff      	b.n	15d3a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3c>
   15d3a:	e7ff      	b.n	15d3c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
   15d3c:	9805      	ldr	r0, [sp, #20]
   15d3e:	6800      	ldr	r0, [r0, #0]
   15d40:	f000 f873 	bl	15e2a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   15d44:	9002      	str	r0, [sp, #8]
   15d46:	e7ff      	b.n	15d48 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x4a>
   15d48:	9805      	ldr	r0, [sp, #20]
   15d4a:	6841      	ldr	r1, [r0, #4]
   15d4c:	9a02      	ldr	r2, [sp, #8]
   15d4e:	428a      	cmp	r2, r1
   15d50:	d02f      	beq.n	15db2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xb4>
   15d52:	e7ff      	b.n	15d54 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x56>
   15d54:	9805      	ldr	r0, [sp, #20]
   15d56:	900a      	str	r0, [sp, #40]	; 0x28
   15d58:	2101      	movs	r1, #1
   15d5a:	910b      	str	r1, [sp, #44]	; 0x2c
   15d5c:	2102      	movs	r1, #2
   15d5e:	910d      	str	r1, [sp, #52]	; 0x34
   15d60:	990d      	ldr	r1, [sp, #52]	; 0x34
   15d62:	2900      	cmp	r1, #0
   15d64:	d015      	beq.n	15d92 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x94>
   15d66:	e7ff      	b.n	15d68 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x6a>
   15d68:	9805      	ldr	r0, [sp, #20]
   15d6a:	6800      	ldr	r0, [r0, #0]
   15d6c:	f000 f85d 	bl	15e2a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   15d70:	900c      	str	r0, [sp, #48]	; 0x30
   15d72:	9905      	ldr	r1, [sp, #20]
   15d74:	680a      	ldr	r2, [r1, #0]
   15d76:	9001      	str	r0, [sp, #4]
   15d78:	4610      	mov	r0, r2
   15d7a:	f000 f856 	bl	15e2a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   15d7e:	2101      	movs	r1, #1
   15d80:	f000 f837 	bl	15df2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
   15d84:	f000 f84b 	bl	15e1e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
   15d88:	9905      	ldr	r1, [sp, #20]
   15d8a:	6008      	str	r0, [r1, #0]
   15d8c:	9801      	ldr	r0, [sp, #4]
   15d8e:	9009      	str	r0, [sp, #36]	; 0x24
   15d90:	e00c      	b.n	15dac <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
   15d92:	9805      	ldr	r0, [sp, #20]
   15d94:	6840      	ldr	r0, [r0, #4]
   15d96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15d9a:	f7fa f980 	bl	1009e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
   15d9e:	9905      	ldr	r1, [sp, #20]
   15da0:	6048      	str	r0, [r1, #4]
   15da2:	6808      	ldr	r0, [r1, #0]
   15da4:	f000 f841 	bl	15e2a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   15da8:	9009      	str	r0, [sp, #36]	; 0x24
   15daa:	e7ff      	b.n	15dac <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
   15dac:	9809      	ldr	r0, [sp, #36]	; 0x24
   15dae:	9000      	str	r0, [sp, #0]
   15db0:	e002      	b.n	15db8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xba>
   15db2:	2000      	movs	r0, #0
   15db4:	9006      	str	r0, [sp, #24]
   15db6:	e002      	b.n	15dbe <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
   15db8:	9800      	ldr	r0, [sp, #0]
   15dba:	9006      	str	r0, [sp, #24]
   15dbc:	e7ff      	b.n	15dbe <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
   15dbe:	9806      	ldr	r0, [sp, #24]
   15dc0:	b00e      	add	sp, #56	; 0x38
   15dc2:	bd80      	pop	{r7, pc}

00015dc4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>:
   15dc4:	b580      	push	{r7, lr}
   15dc6:	b084      	sub	sp, #16
   15dc8:	9002      	str	r0, [sp, #8]
   15dca:	9103      	str	r1, [sp, #12]
   15dcc:	f000 f811 	bl	15df2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
   15dd0:	9001      	str	r0, [sp, #4]
   15dd2:	e7ff      	b.n	15dd4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E+0x10>
   15dd4:	9801      	ldr	r0, [sp, #4]
   15dd6:	b004      	add	sp, #16
   15dd8:	bd80      	pop	{r7, pc}

00015dda <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>:
   15dda:	b580      	push	{r7, lr}
   15ddc:	b084      	sub	sp, #16
   15dde:	460a      	mov	r2, r1
   15de0:	9002      	str	r0, [sp, #8]
   15de2:	f8ad 100e 	strh.w	r1, [sp, #14]
   15de6:	9201      	str	r2, [sp, #4]
   15de8:	f000 fc4d 	bl	16686 <_ZN4core3ptr5write17h147d4643d861e927E>
   15dec:	e7ff      	b.n	15dee <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E+0x14>
   15dee:	b004      	add	sp, #16
   15df0:	bd80      	pop	{r7, pc}

00015df2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>:
   15df2:	b084      	sub	sp, #16
   15df4:	9001      	str	r0, [sp, #4]
   15df6:	9102      	str	r1, [sp, #8]
   15df8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   15dfc:	9003      	str	r0, [sp, #12]
   15dfe:	9803      	ldr	r0, [sp, #12]
   15e00:	9000      	str	r0, [sp, #0]
   15e02:	e7ff      	b.n	15e04 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE+0x12>
   15e04:	9800      	ldr	r0, [sp, #0]
   15e06:	b004      	add	sp, #16
   15e08:	4770      	bx	lr

00015e0a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>:
   15e0a:	b082      	sub	sp, #8
   15e0c:	9001      	str	r0, [sp, #4]
   15e0e:	9000      	str	r0, [sp, #0]
   15e10:	e7ff      	b.n	15e12 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE+0x8>
   15e12:	9800      	ldr	r0, [sp, #0]
   15e14:	fab0 f180 	clz	r1, r0
   15e18:	0948      	lsrs	r0, r1, #5
   15e1a:	b002      	add	sp, #8
   15e1c:	4770      	bx	lr

00015e1e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>:
   15e1e:	b082      	sub	sp, #8
   15e20:	9001      	str	r0, [sp, #4]
   15e22:	9000      	str	r0, [sp, #0]
   15e24:	9800      	ldr	r0, [sp, #0]
   15e26:	b002      	add	sp, #8
   15e28:	4770      	bx	lr

00015e2a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>:
   15e2a:	b081      	sub	sp, #4
   15e2c:	9000      	str	r0, [sp, #0]
   15e2e:	b001      	add	sp, #4
   15e30:	4770      	bx	lr

00015e32 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>:
   15e32:	b084      	sub	sp, #16
   15e34:	460a      	mov	r2, r1
   15e36:	4603      	mov	r3, r0
   15e38:	9103      	str	r1, [sp, #12]
   15e3a:	9002      	str	r0, [sp, #8]
   15e3c:	b004      	add	sp, #16
   15e3e:	4770      	bx	lr

00015e40 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h751b32771630458fE>:
   15e40:	b082      	sub	sp, #8
   15e42:	9000      	str	r0, [sp, #0]
   15e44:	9101      	str	r1, [sp, #4]
   15e46:	7800      	ldrb	r0, [r0, #0]
   15e48:	7809      	ldrb	r1, [r1, #0]
   15e4a:	2200      	movs	r2, #0
   15e4c:	4288      	cmp	r0, r1
   15e4e:	bf38      	it	cc
   15e50:	2201      	movcc	r2, #1
   15e52:	4610      	mov	r0, r2
   15e54:	b002      	add	sp, #8
   15e56:	4770      	bx	lr

00015e58 <_ZN4core3ptr19swap_nonoverlapping17hd7afcc643b1b5b34E>:
   15e58:	b580      	push	{r7, lr}
   15e5a:	b08c      	sub	sp, #48	; 0x30
   15e5c:	9005      	str	r0, [sp, #20]
   15e5e:	9106      	str	r1, [sp, #24]
   15e60:	9207      	str	r2, [sp, #28]
   15e62:	9008      	str	r0, [sp, #32]
   15e64:	9109      	str	r1, [sp, #36]	; 0x24
   15e66:	2301      	movs	r3, #1
   15e68:	930b      	str	r3, [sp, #44]	; 0x2c
   15e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15e6c:	9204      	str	r2, [sp, #16]
   15e6e:	9103      	str	r1, [sp, #12]
   15e70:	9002      	str	r0, [sp, #8]
   15e72:	9301      	str	r3, [sp, #4]
   15e74:	e7ff      	b.n	15e76 <_ZN4core3ptr19swap_nonoverlapping17hd7afcc643b1b5b34E+0x1e>
   15e76:	9801      	ldr	r0, [sp, #4]
   15e78:	9904      	ldr	r1, [sp, #16]
   15e7a:	fb00 f201 	mul.w	r2, r0, r1
   15e7e:	920a      	str	r2, [sp, #40]	; 0x28
   15e80:	9802      	ldr	r0, [sp, #8]
   15e82:	9903      	ldr	r1, [sp, #12]
   15e84:	f000 fc07 	bl	16696 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E>
   15e88:	e7ff      	b.n	15e8a <_ZN4core3ptr19swap_nonoverlapping17hd7afcc643b1b5b34E+0x32>
   15e8a:	b00c      	add	sp, #48	; 0x30
   15e8c:	bd80      	pop	{r7, pc}

00015e8e <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E>:
   15e8e:	b580      	push	{r7, lr}
   15e90:	b088      	sub	sp, #32
   15e92:	9004      	str	r0, [sp, #16]
   15e94:	9105      	str	r1, [sp, #20]
   15e96:	2201      	movs	r2, #1
   15e98:	9207      	str	r2, [sp, #28]
   15e9a:	9a07      	ldr	r2, [sp, #28]
   15e9c:	9103      	str	r1, [sp, #12]
   15e9e:	9002      	str	r0, [sp, #8]
   15ea0:	9201      	str	r2, [sp, #4]
   15ea2:	e7ff      	b.n	15ea4 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x16>
   15ea4:	9801      	ldr	r0, [sp, #4]
   15ea6:	2820      	cmp	r0, #32
   15ea8:	d306      	bcc.n	15eb8 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x2a>
   15eaa:	e7ff      	b.n	15eac <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x1e>
   15eac:	2201      	movs	r2, #1
   15eae:	9802      	ldr	r0, [sp, #8]
   15eb0:	9903      	ldr	r1, [sp, #12]
   15eb2:	f7ff ffd1 	bl	15e58 <_ZN4core3ptr19swap_nonoverlapping17hd7afcc643b1b5b34E>
   15eb6:	e013      	b.n	15ee0 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x52>
   15eb8:	9802      	ldr	r0, [sp, #8]
   15eba:	f000 f814 	bl	15ee6 <_ZN4core3ptr4read17h10ae8fa070723038E>
   15ebe:	4601      	mov	r1, r0
   15ec0:	f88d 001b 	strb.w	r0, [sp, #27]
   15ec4:	9100      	str	r1, [sp, #0]
   15ec6:	e7ff      	b.n	15ec8 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x3a>
   15ec8:	2201      	movs	r2, #1
   15eca:	9803      	ldr	r0, [sp, #12]
   15ecc:	9902      	ldr	r1, [sp, #8]
   15ece:	f7f8 faf7 	bl	e4c0 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   15ed2:	e7ff      	b.n	15ed4 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x46>
   15ed4:	9803      	ldr	r0, [sp, #12]
   15ed6:	9900      	ldr	r1, [sp, #0]
   15ed8:	f7f9 fc49 	bl	f76e <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   15edc:	e7ff      	b.n	15ede <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x50>
   15ede:	e000      	b.n	15ee2 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x54>
   15ee0:	e7ff      	b.n	15ee2 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x54>
   15ee2:	b008      	add	sp, #32
   15ee4:	bd80      	pop	{r7, pc}

00015ee6 <_ZN4core3ptr4read17h10ae8fa070723038E>:
   15ee6:	b580      	push	{r7, lr}
   15ee8:	b088      	sub	sp, #32
   15eea:	9004      	str	r0, [sp, #16]
   15eec:	f89d 1015 	ldrb.w	r1, [sp, #21]
   15ef0:	f88d 100f 	strb.w	r1, [sp, #15]
   15ef4:	9002      	str	r0, [sp, #8]
   15ef6:	e7ff      	b.n	15ef8 <_ZN4core3ptr4read17h10ae8fa070723038E+0x12>
   15ef8:	f10d 000f 	add.w	r0, sp, #15
   15efc:	9006      	str	r0, [sp, #24]
   15efe:	9007      	str	r0, [sp, #28]
   15f00:	e7ff      	b.n	15f02 <_ZN4core3ptr4read17h10ae8fa070723038E+0x1c>
   15f02:	f10d 010f 	add.w	r1, sp, #15
   15f06:	2201      	movs	r2, #1
   15f08:	9802      	ldr	r0, [sp, #8]
   15f0a:	f7f8 fad9 	bl	e4c0 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   15f0e:	e7ff      	b.n	15f10 <_ZN4core3ptr4read17h10ae8fa070723038E+0x2a>
   15f10:	f89d 000f 	ldrb.w	r0, [sp, #15]
   15f14:	4601      	mov	r1, r0
   15f16:	f88d 0016 	strb.w	r0, [sp, #22]
   15f1a:	f88d 0017 	strb.w	r0, [sp, #23]
   15f1e:	9101      	str	r1, [sp, #4]
   15f20:	e7ff      	b.n	15f22 <_ZN4core3ptr4read17h10ae8fa070723038E+0x3c>
   15f22:	9801      	ldr	r0, [sp, #4]
   15f24:	b008      	add	sp, #32
   15f26:	bd80      	pop	{r7, pc}

00015f28 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   15f28:	b580      	push	{r7, lr}
   15f2a:	b088      	sub	sp, #32
   15f2c:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   15f2e:	1d01      	adds	r1, r0, #4
   15f30:	9106      	str	r1, [sp, #24]
   15f32:	9107      	str	r1, [sp, #28]
   15f34:	9004      	str	r0, [sp, #16]
   15f36:	9103      	str	r1, [sp, #12]
   15f38:	e7ff      	b.n	15f3a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x12>
   15f3a:	9804      	ldr	r0, [sp, #16]
   15f3c:	6801      	ldr	r1, [r0, #0]
   15f3e:	9803      	ldr	r0, [sp, #12]
   15f40:	f7f9 fa6f 	bl	f422 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   15f44:	9002      	str	r0, [sp, #8]
   15f46:	9101      	str	r1, [sp, #4]
   15f48:	e7ff      	b.n	15f4a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x22>
    }
   15f4a:	9802      	ldr	r0, [sp, #8]
   15f4c:	9901      	ldr	r1, [sp, #4]
   15f4e:	b008      	add	sp, #32
   15f50:	bd80      	pop	{r7, pc}

00015f52 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   15f52:	b580      	push	{r7, lr}
   15f54:	b088      	sub	sp, #32
   15f56:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   15f58:	1d01      	adds	r1, r0, #4
   15f5a:	9106      	str	r1, [sp, #24]
   15f5c:	9107      	str	r1, [sp, #28]
   15f5e:	9004      	str	r0, [sp, #16]
   15f60:	9103      	str	r1, [sp, #12]
   15f62:	e7ff      	b.n	15f64 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE+0x12>
   15f64:	9804      	ldr	r0, [sp, #16]
   15f66:	6801      	ldr	r1, [r0, #0]
   15f68:	9803      	ldr	r0, [sp, #12]
   15f6a:	f7f9 fa5a 	bl	f422 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   15f6e:	9002      	str	r0, [sp, #8]
   15f70:	9101      	str	r1, [sp, #4]
   15f72:	e7ff      	b.n	15f74 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE+0x22>
    }
   15f74:	9802      	ldr	r0, [sp, #8]
   15f76:	9901      	ldr	r1, [sp, #4]
   15f78:	b008      	add	sp, #32
   15f7a:	bd80      	pop	{r7, pc}

00015f7c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   15f7c:	b580      	push	{r7, lr}
   15f7e:	b08a      	sub	sp, #40	; 0x28
   15f80:	460a      	mov	r2, r1
   15f82:	9006      	str	r0, [sp, #24]
   15f84:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   15f88:	1d01      	adds	r1, r0, #4
   15f8a:	9108      	str	r1, [sp, #32]
   15f8c:	9109      	str	r1, [sp, #36]	; 0x24
   15f8e:	9005      	str	r0, [sp, #20]
   15f90:	9204      	str	r2, [sp, #16]
   15f92:	9103      	str	r1, [sp, #12]
   15f94:	e7ff      	b.n	15f96 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x1a>
            .add(self.len)
   15f96:	9805      	ldr	r0, [sp, #20]
   15f98:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   15f9a:	9803      	ldr	r0, [sp, #12]
   15f9c:	f7f8 fbf4 	bl	e788 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   15fa0:	9002      	str	r0, [sp, #8]
   15fa2:	e7ff      	b.n	15fa4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x28>
   15fa4:	9802      	ldr	r0, [sp, #8]
   15fa6:	9904      	ldr	r1, [sp, #16]
   15fa8:	f000 f994 	bl	162d4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   15fac:	e7ff      	b.n	15fae <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x32>
        self.len += 1;
   15fae:	9805      	ldr	r0, [sp, #20]
   15fb0:	6801      	ldr	r1, [r0, #0]
   15fb2:	1c4a      	adds	r2, r1, #1
   15fb4:	4613      	mov	r3, r2
   15fb6:	428a      	cmp	r2, r1
   15fb8:	9301      	str	r3, [sp, #4]
   15fba:	d305      	bcc.n	15fc8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x4c>
   15fbc:	e7ff      	b.n	15fbe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x42>
   15fbe:	9801      	ldr	r0, [sp, #4]
   15fc0:	9905      	ldr	r1, [sp, #20]
   15fc2:	6008      	str	r0, [r1, #0]
    }
   15fc4:	b00a      	add	sp, #40	; 0x28
   15fc6:	bd80      	pop	{r7, pc}
        self.len += 1;
   15fc8:	f64f 4030 	movw	r0, #64560	; 0xfc30
   15fcc:	f2c0 0001 	movt	r0, #1
   15fd0:	f64f 4220 	movw	r2, #64544	; 0xfc20
   15fd4:	f2c0 0201 	movt	r2, #1
   15fd8:	211c      	movs	r1, #28
   15fda:	f000 fd0b 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15fde:	defe      	udf	#254	; 0xfe

00015fe0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   15fe0:	b580      	push	{r7, lr}
   15fe2:	b08a      	sub	sp, #40	; 0x28
   15fe4:	460a      	mov	r2, r1
   15fe6:	9006      	str	r0, [sp, #24]
   15fe8:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   15fec:	1d01      	adds	r1, r0, #4
   15fee:	9108      	str	r1, [sp, #32]
   15ff0:	9109      	str	r1, [sp, #36]	; 0x24
   15ff2:	9005      	str	r0, [sp, #20]
   15ff4:	9204      	str	r2, [sp, #16]
   15ff6:	9103      	str	r1, [sp, #12]
   15ff8:	e7ff      	b.n	15ffa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x1a>
            .add(self.len)
   15ffa:	9805      	ldr	r0, [sp, #20]
   15ffc:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   15ffe:	9803      	ldr	r0, [sp, #12]
   16000:	f7f8 fbc2 	bl	e788 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   16004:	9002      	str	r0, [sp, #8]
   16006:	e7ff      	b.n	16008 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x28>
   16008:	9802      	ldr	r0, [sp, #8]
   1600a:	9904      	ldr	r1, [sp, #16]
   1600c:	f000 f962 	bl	162d4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   16010:	e7ff      	b.n	16012 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x32>
        self.len += 1;
   16012:	9805      	ldr	r0, [sp, #20]
   16014:	6801      	ldr	r1, [r0, #0]
   16016:	1c4a      	adds	r2, r1, #1
   16018:	4613      	mov	r3, r2
   1601a:	428a      	cmp	r2, r1
   1601c:	9301      	str	r3, [sp, #4]
   1601e:	d305      	bcc.n	1602c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x4c>
   16020:	e7ff      	b.n	16022 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x42>
   16022:	9801      	ldr	r0, [sp, #4]
   16024:	9905      	ldr	r1, [sp, #20]
   16026:	6008      	str	r0, [r1, #0]
    }
   16028:	b00a      	add	sp, #40	; 0x28
   1602a:	bd80      	pop	{r7, pc}
        self.len += 1;
   1602c:	f64f 4030 	movw	r0, #64560	; 0xfc30
   16030:	f2c0 0001 	movt	r0, #1
   16034:	f64f 4220 	movw	r2, #64544	; 0xfc20
   16038:	f2c0 0201 	movt	r2, #1
   1603c:	211c      	movs	r1, #28
   1603e:	f000 fcd9 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16042:	defe      	udf	#254	; 0xfe

00016044 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   16044:	b580      	push	{r7, lr}
   16046:	b094      	sub	sp, #80	; 0x50
   16048:	900e      	str	r0, [sp, #56]	; 0x38
   1604a:	910f      	str	r1, [sp, #60]	; 0x3c
   1604c:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   1604e:	6803      	ldr	r3, [r0, #0]
   16050:	9009      	str	r0, [sp, #36]	; 0x24
   16052:	4608      	mov	r0, r1
   16054:	9108      	str	r1, [sp, #32]
   16056:	4611      	mov	r1, r2
   16058:	9207      	str	r2, [sp, #28]
   1605a:	9306      	str	r3, [sp, #24]
   1605c:	f7f8 fc24 	bl	e8a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   16060:	9005      	str	r0, [sp, #20]
   16062:	e7ff      	b.n	16064 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x20>
   16064:	9806      	ldr	r0, [sp, #24]
   16066:	9905      	ldr	r1, [sp, #20]
   16068:	1842      	adds	r2, r0, r1
   1606a:	4613      	mov	r3, r2
   1606c:	4282      	cmp	r2, r0
   1606e:	9304      	str	r3, [sp, #16]
   16070:	d33f      	bcc.n	160f2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xae>
   16072:	e7ff      	b.n	16074 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x30>
   16074:	9809      	ldr	r0, [sp, #36]	; 0x24
   16076:	f000 f8ad 	bl	161d4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE>
   1607a:	9003      	str	r0, [sp, #12]
   1607c:	e7ff      	b.n	1607e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x3a>
   1607e:	9804      	ldr	r0, [sp, #16]
   16080:	9903      	ldr	r1, [sp, #12]
   16082:	4288      	cmp	r0, r1
   16084:	d807      	bhi.n	16096 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x52>
   16086:	e7ff      	b.n	16088 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x44>
            for elem in other {
   16088:	9808      	ldr	r0, [sp, #32]
   1608a:	9907      	ldr	r1, [sp, #28]
   1608c:	f7f9 fae7 	bl	f65e <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>
   16090:	9002      	str	r0, [sp, #8]
   16092:	9101      	str	r1, [sp, #4]
   16094:	e003      	b.n	1609e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x5a>
   16096:	2001      	movs	r0, #1
            Err(())
   16098:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   1609c:	e025      	b.n	160ea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xa6>
            for elem in other {
   1609e:	9802      	ldr	r0, [sp, #8]
   160a0:	900b      	str	r0, [sp, #44]	; 0x2c
   160a2:	9901      	ldr	r1, [sp, #4]
   160a4:	910c      	str	r1, [sp, #48]	; 0x30
   160a6:	e7ff      	b.n	160a8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x64>
   160a8:	a80b      	add	r0, sp, #44	; 0x2c
   160aa:	f7fc ff85 	bl	12fb8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>
   160ae:	900d      	str	r0, [sp, #52]	; 0x34
   160b0:	e7ff      	b.n	160b2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x6e>
   160b2:	980d      	ldr	r0, [sp, #52]	; 0x34
   160b4:	2800      	cmp	r0, #0
   160b6:	4601      	mov	r1, r0
   160b8:	bf18      	it	ne
   160ba:	2101      	movne	r1, #1
   160bc:	2800      	cmp	r0, #0
   160be:	d001      	beq.n	160c4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x80>
   160c0:	e7ff      	b.n	160c2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x7e>
   160c2:	e004      	b.n	160ce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x8a>
   160c4:	2000      	movs	r0, #0
            Ok(())
   160c6:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   160ca:	e00e      	b.n	160ea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xa6>
            for elem in other {
   160cc:	defe      	udf	#254	; 0xfe
   160ce:	980d      	ldr	r0, [sp, #52]	; 0x34
   160d0:	9011      	str	r0, [sp, #68]	; 0x44
   160d2:	9012      	str	r0, [sp, #72]	; 0x48
   160d4:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   160d6:	f000 f909 	bl	162ec <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>
   160da:	9000      	str	r0, [sp, #0]
   160dc:	e7ff      	b.n	160de <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x9a>
   160de:	9809      	ldr	r0, [sp, #36]	; 0x24
   160e0:	9900      	ldr	r1, [sp, #0]
   160e2:	f7ff ff4b 	bl	15f7c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE>
   160e6:	e7ff      	b.n	160e8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xa4>
            for elem in other {
   160e8:	e7de      	b.n	160a8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x64>
    }
   160ea:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   160ee:	b014      	add	sp, #80	; 0x50
   160f0:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   160f2:	f64f 4030 	movw	r0, #64560	; 0xfc30
   160f6:	f2c0 0001 	movt	r0, #1
   160fa:	f64f 424c 	movw	r2, #64588	; 0xfc4c
   160fe:	f2c0 0201 	movt	r2, #1
   16102:	211c      	movs	r1, #28
   16104:	f000 fc76 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16108:	defe      	udf	#254	; 0xfe

0001610a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   1610a:	b580      	push	{r7, lr}
   1610c:	b088      	sub	sp, #32
   1610e:	460a      	mov	r2, r1
   16110:	9006      	str	r0, [sp, #24]
   16112:	f88d 101f 	strb.w	r1, [sp, #31]
        if self.len < self.capacity() {
   16116:	6801      	ldr	r1, [r0, #0]
   16118:	9004      	str	r0, [sp, #16]
   1611a:	9203      	str	r2, [sp, #12]
   1611c:	9102      	str	r1, [sp, #8]
   1611e:	f000 f863 	bl	161e8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>
   16122:	9001      	str	r0, [sp, #4]
   16124:	e7ff      	b.n	16126 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x1c>
   16126:	9802      	ldr	r0, [sp, #8]
   16128:	9901      	ldr	r1, [sp, #4]
   1612a:	4288      	cmp	r0, r1
   1612c:	d307      	bcc.n	1613e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x34>
   1612e:	e7ff      	b.n	16130 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x26>
            Err(item)
   16130:	9803      	ldr	r0, [sp, #12]
   16132:	f88d 0015 	strb.w	r0, [sp, #21]
   16136:	2101      	movs	r1, #1
   16138:	f88d 1014 	strb.w	r1, [sp, #20]
        if self.len < self.capacity() {
   1613c:	e008      	b.n	16150 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
            unsafe { self.push_unchecked(item) }
   1613e:	9804      	ldr	r0, [sp, #16]
   16140:	9903      	ldr	r1, [sp, #12]
   16142:	f7ff ff4d 	bl	15fe0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>
   16146:	e7ff      	b.n	16148 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x3e>
   16148:	2000      	movs	r0, #0
            Ok(())
   1614a:	f88d 0014 	strb.w	r0, [sp, #20]
        if self.len < self.capacity() {
   1614e:	e7ff      	b.n	16150 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
    }
   16150:	f89d 0014 	ldrb.w	r0, [sp, #20]
   16154:	f89d 1015 	ldrb.w	r1, [sp, #21]
   16158:	b008      	add	sp, #32
   1615a:	bd80      	pop	{r7, pc}

0001615c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>:
    pub(crate) fn clear(&mut self) {
   1615c:	b580      	push	{r7, lr}
   1615e:	b082      	sub	sp, #8
   16160:	9001      	str	r0, [sp, #4]
   16162:	2100      	movs	r1, #0
        self.truncate(0);
   16164:	f000 f880 	bl	16268 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>
   16168:	e7ff      	b.n	1616a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E+0xe>
    }
   1616a:	b002      	add	sp, #8
   1616c:	bd80      	pop	{r7, pc}

0001616e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E>:
    pub(crate) fn clear(&mut self) {
   1616e:	b580      	push	{r7, lr}
   16170:	b082      	sub	sp, #8
   16172:	9001      	str	r0, [sp, #4]
   16174:	2100      	movs	r1, #0
        self.truncate(0);
   16176:	f000 f841 	bl	161fc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE>
   1617a:	e7ff      	b.n	1617c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E+0xe>
    }
   1617c:	b002      	add	sp, #8
   1617e:	bd80      	pop	{r7, pc}

00016180 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   16180:	b580      	push	{r7, lr}
   16182:	b088      	sub	sp, #32
   16184:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   16186:	1d01      	adds	r1, r0, #4
   16188:	9106      	str	r1, [sp, #24]
   1618a:	9107      	str	r1, [sp, #28]
   1618c:	9004      	str	r0, [sp, #16]
   1618e:	9103      	str	r1, [sp, #12]
   16190:	e7ff      	b.n	16192 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE+0x12>
   16192:	9804      	ldr	r0, [sp, #16]
   16194:	6801      	ldr	r1, [r0, #0]
   16196:	9803      	ldr	r0, [sp, #12]
   16198:	f7fc fff0 	bl	1317c <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   1619c:	9002      	str	r0, [sp, #8]
   1619e:	9101      	str	r1, [sp, #4]
   161a0:	e7ff      	b.n	161a2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE+0x22>
    }
   161a2:	9802      	ldr	r0, [sp, #8]
   161a4:	9901      	ldr	r1, [sp, #4]
   161a6:	b008      	add	sp, #32
   161a8:	bd80      	pop	{r7, pc}

000161aa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   161aa:	b580      	push	{r7, lr}
   161ac:	b088      	sub	sp, #32
   161ae:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   161b0:	1d01      	adds	r1, r0, #4
   161b2:	9106      	str	r1, [sp, #24]
   161b4:	9107      	str	r1, [sp, #28]
   161b6:	9004      	str	r0, [sp, #16]
   161b8:	9103      	str	r1, [sp, #12]
   161ba:	e7ff      	b.n	161bc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x12>
   161bc:	9804      	ldr	r0, [sp, #16]
   161be:	6801      	ldr	r1, [r0, #0]
   161c0:	9803      	ldr	r0, [sp, #12]
   161c2:	f7fc ffdb 	bl	1317c <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   161c6:	9002      	str	r0, [sp, #8]
   161c8:	9101      	str	r1, [sp, #4]
   161ca:	e7ff      	b.n	161cc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x22>
    }
   161cc:	9802      	ldr	r0, [sp, #8]
   161ce:	9901      	ldr	r1, [sp, #4]
   161d0:	b008      	add	sp, #32
   161d2:	bd80      	pop	{r7, pc}

000161d4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE>:
    pub(crate) fn capacity(&self) -> usize {
   161d4:	b580      	push	{r7, lr}
   161d6:	b082      	sub	sp, #8
   161d8:	9001      	str	r0, [sp, #4]
        N::to_usize()
   161da:	f000 f91c 	bl	16416 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>
   161de:	9000      	str	r0, [sp, #0]
   161e0:	e7ff      	b.n	161e2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE+0xe>
    }
   161e2:	9800      	ldr	r0, [sp, #0]
   161e4:	b002      	add	sp, #8
   161e6:	bd80      	pop	{r7, pc}

000161e8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>:
    pub(crate) fn capacity(&self) -> usize {
   161e8:	b580      	push	{r7, lr}
   161ea:	b082      	sub	sp, #8
   161ec:	9001      	str	r0, [sp, #4]
        N::to_usize()
   161ee:	f000 f942 	bl	16476 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   161f2:	9000      	str	r0, [sp, #0]
   161f4:	e7ff      	b.n	161f6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E+0xe>
    }
   161f6:	9800      	ldr	r0, [sp, #0]
   161f8:	b002      	add	sp, #8
   161fa:	bd80      	pop	{r7, pc}

000161fc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE>:
    pub(crate) fn truncate(&mut self, len: usize) {
   161fc:	b580      	push	{r7, lr}
   161fe:	b08a      	sub	sp, #40	; 0x28
   16200:	9007      	str	r0, [sp, #28]
   16202:	9108      	str	r1, [sp, #32]
   16204:	9106      	str	r1, [sp, #24]
   16206:	9005      	str	r0, [sp, #20]
   16208:	e7ff      	b.n	1620a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0xe>
            while len < self.len {
   1620a:	9805      	ldr	r0, [sp, #20]
   1620c:	6801      	ldr	r1, [r0, #0]
   1620e:	9a06      	ldr	r2, [sp, #24]
   16210:	428a      	cmp	r2, r1
   16212:	d302      	bcc.n	1621a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x1e>
   16214:	e7ff      	b.n	16216 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x1a>
    }
   16216:	b00a      	add	sp, #40	; 0x28
   16218:	bd80      	pop	{r7, pc}
                self.len -= 1;
   1621a:	9805      	ldr	r0, [sp, #20]
   1621c:	6801      	ldr	r1, [r0, #0]
   1621e:	1e4a      	subs	r2, r1, #1
   16220:	2901      	cmp	r1, #1
   16222:	9204      	str	r2, [sp, #16]
   16224:	d314      	bcc.n	16250 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x54>
   16226:	e7ff      	b.n	16228 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x2c>
   16228:	9804      	ldr	r0, [sp, #16]
   1622a:	9905      	ldr	r1, [sp, #20]
   1622c:	6008      	str	r0, [r1, #0]
                let len = self.len;
   1622e:	680a      	ldr	r2, [r1, #0]
   16230:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   16232:	4608      	mov	r0, r1
   16234:	9203      	str	r2, [sp, #12]
   16236:	f7ff fe8c 	bl	15f52 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE>
   1623a:	9002      	str	r0, [sp, #8]
   1623c:	9101      	str	r1, [sp, #4]
   1623e:	e7ff      	b.n	16240 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x44>
   16240:	9802      	ldr	r0, [sp, #8]
   16242:	9901      	ldr	r1, [sp, #4]
   16244:	9a03      	ldr	r2, [sp, #12]
   16246:	f7f8 fb1d 	bl	e884 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   1624a:	e7ff      	b.n	1624c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x50>
   1624c:	e7ff      	b.n	1624e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x52>
            while len < self.len {
   1624e:	e7dc      	b.n	1620a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0xe>
                self.len -= 1;
   16250:	f64f 4070 	movw	r0, #64624	; 0xfc70
   16254:	f2c0 0001 	movt	r0, #1
   16258:	f64f 425c 	movw	r2, #64604	; 0xfc5c
   1625c:	f2c0 0201 	movt	r2, #1
   16260:	2121      	movs	r1, #33	; 0x21
   16262:	f000 fbc7 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16266:	defe      	udf	#254	; 0xfe

00016268 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   16268:	b580      	push	{r7, lr}
   1626a:	b08a      	sub	sp, #40	; 0x28
   1626c:	9007      	str	r0, [sp, #28]
   1626e:	9108      	str	r1, [sp, #32]
   16270:	9106      	str	r1, [sp, #24]
   16272:	9005      	str	r0, [sp, #20]
   16274:	e7ff      	b.n	16276 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
            while len < self.len {
   16276:	9805      	ldr	r0, [sp, #20]
   16278:	6801      	ldr	r1, [r0, #0]
   1627a:	9a06      	ldr	r2, [sp, #24]
   1627c:	428a      	cmp	r2, r1
   1627e:	d302      	bcc.n	16286 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1e>
   16280:	e7ff      	b.n	16282 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1a>
    }
   16282:	b00a      	add	sp, #40	; 0x28
   16284:	bd80      	pop	{r7, pc}
                self.len -= 1;
   16286:	9805      	ldr	r0, [sp, #20]
   16288:	6801      	ldr	r1, [r0, #0]
   1628a:	1e4a      	subs	r2, r1, #1
   1628c:	2901      	cmp	r1, #1
   1628e:	9204      	str	r2, [sp, #16]
   16290:	d314      	bcc.n	162bc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x54>
   16292:	e7ff      	b.n	16294 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x2c>
   16294:	9804      	ldr	r0, [sp, #16]
   16296:	9905      	ldr	r1, [sp, #20]
   16298:	6008      	str	r0, [r1, #0]
                let len = self.len;
   1629a:	680a      	ldr	r2, [r1, #0]
   1629c:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   1629e:	4608      	mov	r0, r1
   162a0:	9203      	str	r2, [sp, #12]
   162a2:	f7ff fe41 	bl	15f28 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>
   162a6:	9002      	str	r0, [sp, #8]
   162a8:	9101      	str	r1, [sp, #4]
   162aa:	e7ff      	b.n	162ac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x44>
   162ac:	9802      	ldr	r0, [sp, #8]
   162ae:	9901      	ldr	r1, [sp, #4]
   162b0:	9a03      	ldr	r2, [sp, #12]
   162b2:	f7f8 fae7 	bl	e884 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   162b6:	e7ff      	b.n	162b8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x50>
   162b8:	e7ff      	b.n	162ba <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x52>
            while len < self.len {
   162ba:	e7dc      	b.n	16276 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
                self.len -= 1;
   162bc:	f64f 4070 	movw	r0, #64624	; 0xfc70
   162c0:	f2c0 0001 	movt	r0, #1
   162c4:	f64f 425c 	movw	r2, #64604	; 0xfc5c
   162c8:	f2c0 0201 	movt	r2, #1
   162cc:	2121      	movs	r1, #33	; 0x21
   162ce:	f000 fb91 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   162d2:	defe      	udf	#254	; 0xfe

000162d4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>:
   162d4:	b580      	push	{r7, lr}
   162d6:	b084      	sub	sp, #16
   162d8:	460a      	mov	r2, r1
   162da:	9002      	str	r0, [sp, #8]
   162dc:	f88d 100f 	strb.w	r1, [sp, #15]
   162e0:	9201      	str	r2, [sp, #4]
   162e2:	f7f9 fa44 	bl	f76e <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   162e6:	e7ff      	b.n	162e8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE+0x14>
   162e8:	b004      	add	sp, #16
   162ea:	bd80      	pop	{r7, pc}

000162ec <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>:
   162ec:	b081      	sub	sp, #4
   162ee:	9000      	str	r0, [sp, #0]
   162f0:	7800      	ldrb	r0, [r0, #0]
   162f2:	b001      	add	sp, #4
   162f4:	4770      	bx	lr

000162f6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>:
    fn to_usize() -> usize {
   162f6:	b580      	push	{r7, lr}
   162f8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   162fa:	f000 fa5a 	bl	167b2 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   162fe:	9003      	str	r0, [sp, #12]
   16300:	e7ff      	b.n	16302 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0xc>
   16302:	9803      	ldr	r0, [sp, #12]
   16304:	f000 fa5b 	bl	167be <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16308:	9002      	str	r0, [sp, #8]
   1630a:	e7ff      	b.n	1630c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x16>
   1630c:	f000 f8b3 	bl	16476 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   16310:	9001      	str	r0, [sp, #4]
   16312:	e7ff      	b.n	16314 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x1e>
   16314:	9801      	ldr	r0, [sp, #4]
   16316:	0041      	lsls	r1, r0, #1
   16318:	9100      	str	r1, [sp, #0]
   1631a:	e7ff      	b.n	1631c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x26>
   1631c:	9802      	ldr	r0, [sp, #8]
   1631e:	9900      	ldr	r1, [sp, #0]
   16320:	4308      	orrs	r0, r1
    }
   16322:	b004      	add	sp, #16
   16324:	bd80      	pop	{r7, pc}

00016326 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>:
    fn to_usize() -> usize {
   16326:	b580      	push	{r7, lr}
   16328:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1632a:	f000 fa42 	bl	167b2 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1632e:	9003      	str	r0, [sp, #12]
   16330:	e7ff      	b.n	16332 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0xc>
   16332:	9803      	ldr	r0, [sp, #12]
   16334:	f000 fa43 	bl	167be <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16338:	9002      	str	r0, [sp, #8]
   1633a:	e7ff      	b.n	1633c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x16>
   1633c:	f000 f853 	bl	163e6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>
   16340:	9001      	str	r0, [sp, #4]
   16342:	e7ff      	b.n	16344 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x1e>
   16344:	9801      	ldr	r0, [sp, #4]
   16346:	0041      	lsls	r1, r0, #1
   16348:	9100      	str	r1, [sp, #0]
   1634a:	e7ff      	b.n	1634c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x26>
   1634c:	9802      	ldr	r0, [sp, #8]
   1634e:	9900      	ldr	r1, [sp, #0]
   16350:	4308      	orrs	r0, r1
    }
   16352:	b004      	add	sp, #16
   16354:	bd80      	pop	{r7, pc}

00016356 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>:
    fn to_usize() -> usize {
   16356:	b580      	push	{r7, lr}
   16358:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1635a:	f000 fa2a 	bl	167b2 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1635e:	9003      	str	r0, [sp, #12]
   16360:	e7ff      	b.n	16362 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0xc>
   16362:	9803      	ldr	r0, [sp, #12]
   16364:	f000 fa2b 	bl	167be <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16368:	9002      	str	r0, [sp, #8]
   1636a:	e7ff      	b.n	1636c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x16>
   1636c:	f000 f80b 	bl	16386 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>
   16370:	9001      	str	r0, [sp, #4]
   16372:	e7ff      	b.n	16374 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x1e>
   16374:	9801      	ldr	r0, [sp, #4]
   16376:	0041      	lsls	r1, r0, #1
   16378:	9100      	str	r1, [sp, #0]
   1637a:	e7ff      	b.n	1637c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x26>
   1637c:	9802      	ldr	r0, [sp, #8]
   1637e:	9900      	ldr	r1, [sp, #0]
   16380:	4308      	orrs	r0, r1
    }
   16382:	b004      	add	sp, #16
   16384:	bd80      	pop	{r7, pc}

00016386 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>:
    fn to_usize() -> usize {
   16386:	b580      	push	{r7, lr}
   16388:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1638a:	f000 fa12 	bl	167b2 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1638e:	9003      	str	r0, [sp, #12]
   16390:	e7ff      	b.n	16392 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0xc>
   16392:	9803      	ldr	r0, [sp, #12]
   16394:	f000 fa13 	bl	167be <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16398:	9002      	str	r0, [sp, #8]
   1639a:	e7ff      	b.n	1639c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x16>
   1639c:	f000 f89b 	bl	164d6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>
   163a0:	9001      	str	r0, [sp, #4]
   163a2:	e7ff      	b.n	163a4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x1e>
   163a4:	9801      	ldr	r0, [sp, #4]
   163a6:	0041      	lsls	r1, r0, #1
   163a8:	9100      	str	r1, [sp, #0]
   163aa:	e7ff      	b.n	163ac <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x26>
   163ac:	9802      	ldr	r0, [sp, #8]
   163ae:	9900      	ldr	r1, [sp, #0]
   163b0:	4308      	orrs	r0, r1
    }
   163b2:	b004      	add	sp, #16
   163b4:	bd80      	pop	{r7, pc}

000163b6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>:
    fn to_usize() -> usize {
   163b6:	b580      	push	{r7, lr}
   163b8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   163ba:	f000 f9fa 	bl	167b2 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   163be:	9003      	str	r0, [sp, #12]
   163c0:	e7ff      	b.n	163c2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0xc>
   163c2:	9803      	ldr	r0, [sp, #12]
   163c4:	f000 f9fb 	bl	167be <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   163c8:	9002      	str	r0, [sp, #8]
   163ca:	e7ff      	b.n	163cc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x16>
   163cc:	f7ff ff93 	bl	162f6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>
   163d0:	9001      	str	r0, [sp, #4]
   163d2:	e7ff      	b.n	163d4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x1e>
   163d4:	9801      	ldr	r0, [sp, #4]
   163d6:	0041      	lsls	r1, r0, #1
   163d8:	9100      	str	r1, [sp, #0]
   163da:	e7ff      	b.n	163dc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x26>
   163dc:	9802      	ldr	r0, [sp, #8]
   163de:	9900      	ldr	r1, [sp, #0]
   163e0:	4308      	orrs	r0, r1
    }
   163e2:	b004      	add	sp, #16
   163e4:	bd80      	pop	{r7, pc}

000163e6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>:
    fn to_usize() -> usize {
   163e6:	b580      	push	{r7, lr}
   163e8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   163ea:	f000 f9e2 	bl	167b2 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   163ee:	9003      	str	r0, [sp, #12]
   163f0:	e7ff      	b.n	163f2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0xc>
   163f2:	9803      	ldr	r0, [sp, #12]
   163f4:	f000 f9e3 	bl	167be <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   163f8:	9002      	str	r0, [sp, #8]
   163fa:	e7ff      	b.n	163fc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x16>
   163fc:	f000 f823 	bl	16446 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>
   16400:	9001      	str	r0, [sp, #4]
   16402:	e7ff      	b.n	16404 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x1e>
   16404:	9801      	ldr	r0, [sp, #4]
   16406:	0041      	lsls	r1, r0, #1
   16408:	9100      	str	r1, [sp, #0]
   1640a:	e7ff      	b.n	1640c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x26>
   1640c:	9802      	ldr	r0, [sp, #8]
   1640e:	9900      	ldr	r1, [sp, #0]
   16410:	4308      	orrs	r0, r1
    }
   16412:	b004      	add	sp, #16
   16414:	bd80      	pop	{r7, pc}

00016416 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>:
    fn to_usize() -> usize {
   16416:	b580      	push	{r7, lr}
   16418:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1641a:	f000 f9ca 	bl	167b2 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1641e:	9003      	str	r0, [sp, #12]
   16420:	e7ff      	b.n	16422 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0xc>
   16422:	9803      	ldr	r0, [sp, #12]
   16424:	f000 f9cb 	bl	167be <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16428:	9002      	str	r0, [sp, #8]
   1642a:	e7ff      	b.n	1642c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x16>
   1642c:	f000 f86b 	bl	16506 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>
   16430:	9001      	str	r0, [sp, #4]
   16432:	e7ff      	b.n	16434 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x1e>
   16434:	9801      	ldr	r0, [sp, #4]
   16436:	0041      	lsls	r1, r0, #1
   16438:	9100      	str	r1, [sp, #0]
   1643a:	e7ff      	b.n	1643c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x26>
   1643c:	9802      	ldr	r0, [sp, #8]
   1643e:	9900      	ldr	r1, [sp, #0]
   16440:	4308      	orrs	r0, r1
    }
   16442:	b004      	add	sp, #16
   16444:	bd80      	pop	{r7, pc}

00016446 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>:
    fn to_usize() -> usize {
   16446:	b580      	push	{r7, lr}
   16448:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1644a:	f000 f9b2 	bl	167b2 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1644e:	9003      	str	r0, [sp, #12]
   16450:	e7ff      	b.n	16452 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0xc>
   16452:	9803      	ldr	r0, [sp, #12]
   16454:	f000 f9b3 	bl	167be <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16458:	9002      	str	r0, [sp, #8]
   1645a:	e7ff      	b.n	1645c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x16>
   1645c:	f000 f823 	bl	164a6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>
   16460:	9001      	str	r0, [sp, #4]
   16462:	e7ff      	b.n	16464 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x1e>
   16464:	9801      	ldr	r0, [sp, #4]
   16466:	0041      	lsls	r1, r0, #1
   16468:	9100      	str	r1, [sp, #0]
   1646a:	e7ff      	b.n	1646c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x26>
   1646c:	9802      	ldr	r0, [sp, #8]
   1646e:	9900      	ldr	r1, [sp, #0]
   16470:	4308      	orrs	r0, r1
    }
   16472:	b004      	add	sp, #16
   16474:	bd80      	pop	{r7, pc}

00016476 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>:
    fn to_usize() -> usize {
   16476:	b580      	push	{r7, lr}
   16478:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1647a:	f000 f99c 	bl	167b6 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>
   1647e:	9003      	str	r0, [sp, #12]
   16480:	e7ff      	b.n	16482 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0xc>
   16482:	9803      	ldr	r0, [sp, #12]
   16484:	f000 f99b 	bl	167be <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16488:	9002      	str	r0, [sp, #8]
   1648a:	e7ff      	b.n	1648c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x16>
   1648c:	f000 f995 	bl	167ba <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>
   16490:	9001      	str	r0, [sp, #4]
   16492:	e7ff      	b.n	16494 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x1e>
   16494:	9801      	ldr	r0, [sp, #4]
   16496:	0041      	lsls	r1, r0, #1
   16498:	9100      	str	r1, [sp, #0]
   1649a:	e7ff      	b.n	1649c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x26>
   1649c:	9802      	ldr	r0, [sp, #8]
   1649e:	9900      	ldr	r1, [sp, #0]
   164a0:	4308      	orrs	r0, r1
    }
   164a2:	b004      	add	sp, #16
   164a4:	bd80      	pop	{r7, pc}

000164a6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>:
    fn to_usize() -> usize {
   164a6:	b580      	push	{r7, lr}
   164a8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   164aa:	f000 f982 	bl	167b2 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   164ae:	9003      	str	r0, [sp, #12]
   164b0:	e7ff      	b.n	164b2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0xc>
   164b2:	9803      	ldr	r0, [sp, #12]
   164b4:	f000 f983 	bl	167be <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   164b8:	9002      	str	r0, [sp, #8]
   164ba:	e7ff      	b.n	164bc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x16>
   164bc:	f7ff ff7b 	bl	163b6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>
   164c0:	9001      	str	r0, [sp, #4]
   164c2:	e7ff      	b.n	164c4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x1e>
   164c4:	9801      	ldr	r0, [sp, #4]
   164c6:	0041      	lsls	r1, r0, #1
   164c8:	9100      	str	r1, [sp, #0]
   164ca:	e7ff      	b.n	164cc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x26>
   164cc:	9802      	ldr	r0, [sp, #8]
   164ce:	9900      	ldr	r1, [sp, #0]
   164d0:	4308      	orrs	r0, r1
    }
   164d2:	b004      	add	sp, #16
   164d4:	bd80      	pop	{r7, pc}

000164d6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>:
    fn to_usize() -> usize {
   164d6:	b580      	push	{r7, lr}
   164d8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   164da:	f000 f96a 	bl	167b2 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   164de:	9003      	str	r0, [sp, #12]
   164e0:	e7ff      	b.n	164e2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0xc>
   164e2:	9803      	ldr	r0, [sp, #12]
   164e4:	f000 f96b 	bl	167be <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   164e8:	9002      	str	r0, [sp, #8]
   164ea:	e7ff      	b.n	164ec <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x16>
   164ec:	f7ff ff1b 	bl	16326 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>
   164f0:	9001      	str	r0, [sp, #4]
   164f2:	e7ff      	b.n	164f4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x1e>
   164f4:	9801      	ldr	r0, [sp, #4]
   164f6:	0041      	lsls	r1, r0, #1
   164f8:	9100      	str	r1, [sp, #0]
   164fa:	e7ff      	b.n	164fc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x26>
   164fc:	9802      	ldr	r0, [sp, #8]
   164fe:	9900      	ldr	r1, [sp, #0]
   16500:	4308      	orrs	r0, r1
    }
   16502:	b004      	add	sp, #16
   16504:	bd80      	pop	{r7, pc}

00016506 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>:
    fn to_usize() -> usize {
   16506:	b580      	push	{r7, lr}
   16508:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1650a:	f000 f952 	bl	167b2 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1650e:	9003      	str	r0, [sp, #12]
   16510:	e7ff      	b.n	16512 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0xc>
   16512:	9803      	ldr	r0, [sp, #12]
   16514:	f000 f953 	bl	167be <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16518:	9002      	str	r0, [sp, #8]
   1651a:	e7ff      	b.n	1651c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x16>
   1651c:	f7ff ff1b 	bl	16356 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>
   16520:	9001      	str	r0, [sp, #4]
   16522:	e7ff      	b.n	16524 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x1e>
   16524:	9801      	ldr	r0, [sp, #4]
   16526:	0041      	lsls	r1, r0, #1
   16528:	9100      	str	r1, [sp, #0]
   1652a:	e7ff      	b.n	1652c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x26>
   1652c:	9802      	ldr	r0, [sp, #8]
   1652e:	9900      	ldr	r1, [sp, #0]
   16530:	4308      	orrs	r0, r1
    }
   16532:	b004      	add	sp, #16
   16534:	bd80      	pop	{r7, pc}

00016536 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>:
impl Bit for B0 {
    const U8: u8 = 0;
    const BOOL: bool = false;

    #[inline]
    fn to_u8() -> u8 {
   16536:	2000      	movs	r0, #0
        0
    }
   16538:	4770      	bx	lr

0001653a <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>:
impl Bit for B1 {
    const U8: u8 = 1;
    const BOOL: bool = true;

    #[inline]
    fn to_u8() -> u8 {
   1653a:	2001      	movs	r0, #1
        1
    }
   1653c:	4770      	bx	lr

0001653e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>:
   1653e:	b580      	push	{r7, lr}
   16540:	b084      	sub	sp, #16
   16542:	9002      	str	r0, [sp, #8]
   16544:	9103      	str	r1, [sp, #12]
   16546:	f000 f80f 	bl	16568 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>
   1654a:	9001      	str	r0, [sp, #4]
   1654c:	e7ff      	b.n	1654e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E+0x10>
   1654e:	9801      	ldr	r0, [sp, #4]
   16550:	b004      	add	sp, #16
   16552:	bd80      	pop	{r7, pc}

00016554 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>:
   16554:	b580      	push	{r7, lr}
   16556:	b082      	sub	sp, #8
   16558:	9001      	str	r0, [sp, #4]
   1655a:	f000 f873 	bl	16644 <_ZN4core3ptr4read17h27a035d1812d8297E>
   1655e:	9000      	str	r0, [sp, #0]
   16560:	e7ff      	b.n	16562 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E+0xe>
   16562:	9800      	ldr	r0, [sp, #0]
   16564:	b002      	add	sp, #8
   16566:	bd80      	pop	{r7, pc}

00016568 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>:
   16568:	b084      	sub	sp, #16
   1656a:	9001      	str	r0, [sp, #4]
   1656c:	9102      	str	r1, [sp, #8]
   1656e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   16572:	9003      	str	r0, [sp, #12]
   16574:	9803      	ldr	r0, [sp, #12]
   16576:	9000      	str	r0, [sp, #0]
   16578:	e7ff      	b.n	1657a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE+0x12>
   1657a:	9800      	ldr	r0, [sp, #0]
   1657c:	b004      	add	sp, #16
   1657e:	4770      	bx	lr

00016580 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>:
   16580:	b082      	sub	sp, #8
   16582:	9001      	str	r0, [sp, #4]
   16584:	9000      	str	r0, [sp, #0]
   16586:	e7ff      	b.n	16588 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E+0x8>
   16588:	9800      	ldr	r0, [sp, #0]
   1658a:	fab0 f180 	clz	r1, r0
   1658e:	0948      	lsrs	r0, r1, #5
   16590:	b002      	add	sp, #8
   16592:	4770      	bx	lr

00016594 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE>:
   16594:	b580      	push	{r7, lr}
   16596:	b088      	sub	sp, #32
   16598:	9006      	str	r0, [sp, #24]
   1659a:	9107      	str	r1, [sp, #28]
   1659c:	9004      	str	r0, [sp, #16]
   1659e:	4608      	mov	r0, r1
   165a0:	9103      	str	r1, [sp, #12]
   165a2:	f001 f8c8 	bl	17736 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   165a6:	9002      	str	r0, [sp, #8]
   165a8:	e7ff      	b.n	165aa <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x16>
   165aa:	9802      	ldr	r0, [sp, #8]
   165ac:	07c1      	lsls	r1, r0, #31
   165ae:	2900      	cmp	r1, #0
   165b0:	d105      	bne.n	165be <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x2a>
   165b2:	e7ff      	b.n	165b4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x20>
   165b4:	9803      	ldr	r0, [sp, #12]
   165b6:	f001 f8c2 	bl	1773e <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   165ba:	9001      	str	r0, [sp, #4]
   165bc:	e007      	b.n	165ce <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x3a>
   165be:	9804      	ldr	r0, [sp, #16]
   165c0:	9903      	ldr	r1, [sp, #12]
   165c2:	f001 fe24 	bl	1820e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>
   165c6:	f88d 0017 	strb.w	r0, [sp, #23]
   165ca:	e7ff      	b.n	165cc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x38>
   165cc:	e015      	b.n	165fa <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   165ce:	9801      	ldr	r0, [sp, #4]
   165d0:	07c1      	lsls	r1, r0, #31
   165d2:	2900      	cmp	r1, #0
   165d4:	d107      	bne.n	165e6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x52>
   165d6:	e7ff      	b.n	165d8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x44>
   165d8:	9804      	ldr	r0, [sp, #16]
   165da:	9903      	ldr	r1, [sp, #12]
   165dc:	f001 ffe8 	bl	185b0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>
   165e0:	f88d 0017 	strb.w	r0, [sp, #23]
   165e4:	e007      	b.n	165f6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x62>
   165e6:	9804      	ldr	r0, [sp, #16]
   165e8:	9903      	ldr	r1, [sp, #12]
   165ea:	f001 fe6f 	bl	182cc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>
   165ee:	f88d 0017 	strb.w	r0, [sp, #23]
   165f2:	e7ff      	b.n	165f4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x60>
   165f4:	e000      	b.n	165f8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   165f6:	e7ff      	b.n	165f8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   165f8:	e7ff      	b.n	165fa <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   165fa:	f89d 0017 	ldrb.w	r0, [sp, #23]
   165fe:	b008      	add	sp, #32
   16600:	bd80      	pop	{r7, pc}

00016602 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>:
   16602:	b081      	sub	sp, #4
   16604:	4601      	mov	r1, r0
   16606:	f88d 0003 	strb.w	r0, [sp, #3]
   1660a:	b2c0      	uxtb	r0, r0
   1660c:	b001      	add	sp, #4
   1660e:	4770      	bx	lr

00016610 <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>:
   16610:	b086      	sub	sp, #24
   16612:	9004      	str	r0, [sp, #16]
   16614:	9105      	str	r1, [sp, #20]
   16616:	9002      	str	r0, [sp, #8]
   16618:	9103      	str	r1, [sp, #12]
   1661a:	9802      	ldr	r0, [sp, #8]
   1661c:	9903      	ldr	r1, [sp, #12]
   1661e:	9000      	str	r0, [sp, #0]
   16620:	9101      	str	r1, [sp, #4]
   16622:	9800      	ldr	r0, [sp, #0]
   16624:	9901      	ldr	r1, [sp, #4]
   16626:	b006      	add	sp, #24
   16628:	4770      	bx	lr

0001662a <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>:
   1662a:	b086      	sub	sp, #24
   1662c:	9004      	str	r0, [sp, #16]
   1662e:	9105      	str	r1, [sp, #20]
   16630:	9002      	str	r0, [sp, #8]
   16632:	9103      	str	r1, [sp, #12]
   16634:	9802      	ldr	r0, [sp, #8]
   16636:	9903      	ldr	r1, [sp, #12]
   16638:	9000      	str	r0, [sp, #0]
   1663a:	9101      	str	r1, [sp, #4]
   1663c:	9800      	ldr	r0, [sp, #0]
   1663e:	9901      	ldr	r1, [sp, #4]
   16640:	b006      	add	sp, #24
   16642:	4770      	bx	lr

00016644 <_ZN4core3ptr4read17h27a035d1812d8297E>:
   16644:	b580      	push	{r7, lr}
   16646:	b088      	sub	sp, #32
   16648:	9003      	str	r0, [sp, #12]
   1664a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   1664e:	f8ad 100a 	strh.w	r1, [sp, #10]
   16652:	9001      	str	r0, [sp, #4]
   16654:	e7ff      	b.n	16656 <_ZN4core3ptr4read17h27a035d1812d8297E+0x12>
   16656:	f10d 000a 	add.w	r0, sp, #10
   1665a:	9006      	str	r0, [sp, #24]
   1665c:	9007      	str	r0, [sp, #28]
   1665e:	e7ff      	b.n	16660 <_ZN4core3ptr4read17h27a035d1812d8297E+0x1c>
   16660:	f10d 010a 	add.w	r1, sp, #10
   16664:	2201      	movs	r2, #1
   16666:	9801      	ldr	r0, [sp, #4]
   16668:	f000 f8b0 	bl	167cc <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>
   1666c:	e7ff      	b.n	1666e <_ZN4core3ptr4read17h27a035d1812d8297E+0x2a>
   1666e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   16672:	4601      	mov	r1, r0
   16674:	f8ad 0014 	strh.w	r0, [sp, #20]
   16678:	f8ad 0016 	strh.w	r0, [sp, #22]
   1667c:	9100      	str	r1, [sp, #0]
   1667e:	e7ff      	b.n	16680 <_ZN4core3ptr4read17h27a035d1812d8297E+0x3c>
   16680:	9800      	ldr	r0, [sp, #0]
   16682:	b008      	add	sp, #32
   16684:	bd80      	pop	{r7, pc}

00016686 <_ZN4core3ptr5write17h147d4643d861e927E>:
   16686:	b082      	sub	sp, #8
   16688:	460a      	mov	r2, r1
   1668a:	9000      	str	r0, [sp, #0]
   1668c:	f8ad 1006 	strh.w	r1, [sp, #6]
   16690:	8001      	strh	r1, [r0, #0]
   16692:	b002      	add	sp, #8
   16694:	4770      	bx	lr

00016696 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E>:
   16696:	b5d0      	push	{r4, r6, r7, lr}
   16698:	af02      	add	r7, sp, #8
   1669a:	b0b4      	sub	sp, #208	; 0xd0
   1669c:	466c      	mov	r4, sp
   1669e:	f36f 0404 	bfc	r4, #0, #5
   166a2:	46a5      	mov	sp, r4
   166a4:	9024      	str	r0, [sp, #144]	; 0x90
   166a6:	9125      	str	r1, [sp, #148]	; 0x94
   166a8:	9226      	str	r2, [sp, #152]	; 0x98
   166aa:	2320      	movs	r3, #32
   166ac:	932f      	str	r3, [sp, #188]	; 0xbc
   166ae:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   166b0:	9327      	str	r3, [sp, #156]	; 0x9c
   166b2:	920e      	str	r2, [sp, #56]	; 0x38
   166b4:	910d      	str	r1, [sp, #52]	; 0x34
   166b6:	900c      	str	r0, [sp, #48]	; 0x30
   166b8:	930b      	str	r3, [sp, #44]	; 0x2c
   166ba:	e7ff      	b.n	166bc <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x26>
   166bc:	2000      	movs	r0, #0
   166be:	900f      	str	r0, [sp, #60]	; 0x3c
   166c0:	e7ff      	b.n	166c2 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x2c>
   166c2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   166c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   166c6:	4408      	add	r0, r1
   166c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   166ca:	4290      	cmp	r0, r2
   166cc:	d905      	bls.n	166da <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x44>
   166ce:	e7ff      	b.n	166d0 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x3a>
   166d0:	980f      	ldr	r0, [sp, #60]	; 0x3c
   166d2:	990e      	ldr	r1, [sp, #56]	; 0x38
   166d4:	4288      	cmp	r0, r1
   166d6:	d334      	bcc.n	16742 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xac>
   166d8:	e067      	b.n	167aa <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x114>
   166da:	e7ff      	b.n	166dc <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x46>
   166dc:	a810      	add	r0, sp, #64	; 0x40
   166de:	9032      	str	r0, [sp, #200]	; 0xc8
   166e0:	9033      	str	r0, [sp, #204]	; 0xcc
   166e2:	e7ff      	b.n	166e4 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x4e>
   166e4:	a810      	add	r0, sp, #64	; 0x40
   166e6:	4601      	mov	r1, r0
   166e8:	9028      	str	r0, [sp, #160]	; 0xa0
   166ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
   166ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   166ee:	900a      	str	r0, [sp, #40]	; 0x28
   166f0:	4610      	mov	r0, r2
   166f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   166f4:	9109      	str	r1, [sp, #36]	; 0x24
   166f6:	4619      	mov	r1, r3
   166f8:	f7f8 f846 	bl	e788 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   166fc:	4601      	mov	r1, r0
   166fe:	9029      	str	r0, [sp, #164]	; 0xa4
   16700:	9108      	str	r1, [sp, #32]
   16702:	e7ff      	b.n	16704 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x6e>
   16704:	990f      	ldr	r1, [sp, #60]	; 0x3c
   16706:	980d      	ldr	r0, [sp, #52]	; 0x34
   16708:	f7f8 f83e 	bl	e788 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1670c:	4601      	mov	r1, r0
   1670e:	902a      	str	r0, [sp, #168]	; 0xa8
   16710:	9107      	str	r1, [sp, #28]
   16712:	e7ff      	b.n	16714 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x7e>
   16714:	9808      	ldr	r0, [sp, #32]
   16716:	9909      	ldr	r1, [sp, #36]	; 0x24
   16718:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1671a:	f7f7 fed1 	bl	e4c0 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1671e:	e7ff      	b.n	16720 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x8a>
   16720:	9807      	ldr	r0, [sp, #28]
   16722:	9908      	ldr	r1, [sp, #32]
   16724:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   16726:	f7f7 fecb 	bl	e4c0 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1672a:	e7ff      	b.n	1672c <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x96>
   1672c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1672e:	9907      	ldr	r1, [sp, #28]
   16730:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   16732:	f7f7 fec5 	bl	e4c0 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   16736:	e7ff      	b.n	16738 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xa2>
   16738:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1673a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1673c:	4408      	add	r0, r1
   1673e:	900f      	str	r0, [sp, #60]	; 0x3c
   16740:	e7bf      	b.n	166c2 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x2c>
   16742:	e7ff      	b.n	16744 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xae>
   16744:	980f      	ldr	r0, [sp, #60]	; 0x3c
   16746:	990e      	ldr	r1, [sp, #56]	; 0x38
   16748:	1a08      	subs	r0, r1, r0
   1674a:	4602      	mov	r2, r0
   1674c:	902b      	str	r0, [sp, #172]	; 0xac
   1674e:	a81c      	add	r0, sp, #112	; 0x70
   16750:	9030      	str	r0, [sp, #192]	; 0xc0
   16752:	9031      	str	r0, [sp, #196]	; 0xc4
   16754:	9206      	str	r2, [sp, #24]
   16756:	9005      	str	r0, [sp, #20]
   16758:	e7ff      	b.n	1675a <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xc4>
   1675a:	9805      	ldr	r0, [sp, #20]
   1675c:	9905      	ldr	r1, [sp, #20]
   1675e:	912c      	str	r1, [sp, #176]	; 0xb0
   16760:	990f      	ldr	r1, [sp, #60]	; 0x3c
   16762:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16764:	9004      	str	r0, [sp, #16]
   16766:	4610      	mov	r0, r2
   16768:	f7f8 f80e 	bl	e788 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1676c:	4601      	mov	r1, r0
   1676e:	902d      	str	r0, [sp, #180]	; 0xb4
   16770:	9103      	str	r1, [sp, #12]
   16772:	e7ff      	b.n	16774 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xde>
   16774:	990f      	ldr	r1, [sp, #60]	; 0x3c
   16776:	980d      	ldr	r0, [sp, #52]	; 0x34
   16778:	f7f8 f806 	bl	e788 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1677c:	4601      	mov	r1, r0
   1677e:	902e      	str	r0, [sp, #184]	; 0xb8
   16780:	9102      	str	r1, [sp, #8]
   16782:	e7ff      	b.n	16784 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xee>
   16784:	9803      	ldr	r0, [sp, #12]
   16786:	9904      	ldr	r1, [sp, #16]
   16788:	9a06      	ldr	r2, [sp, #24]
   1678a:	f7f7 fe99 	bl	e4c0 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1678e:	e7ff      	b.n	16790 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xfa>
   16790:	9802      	ldr	r0, [sp, #8]
   16792:	9903      	ldr	r1, [sp, #12]
   16794:	9a06      	ldr	r2, [sp, #24]
   16796:	f7f7 fe93 	bl	e4c0 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1679a:	e7ff      	b.n	1679c <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x106>
   1679c:	9804      	ldr	r0, [sp, #16]
   1679e:	9902      	ldr	r1, [sp, #8]
   167a0:	9a06      	ldr	r2, [sp, #24]
   167a2:	f7f7 fe8d 	bl	e4c0 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   167a6:	e7ff      	b.n	167a8 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x112>
   167a8:	e7ff      	b.n	167aa <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x114>
   167aa:	f1a7 0408 	sub.w	r4, r7, #8
   167ae:	46a5      	mov	sp, r4
   167b0:	bdd0      	pop	{r4, r6, r7, pc}

000167b2 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>:
    fn to_u8() -> u8 {
   167b2:	2000      	movs	r0, #0
    }
   167b4:	4770      	bx	lr

000167b6 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>:
    fn to_u8() -> u8 {
   167b6:	2001      	movs	r0, #1
    }
   167b8:	4770      	bx	lr

000167ba <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>:
    fn to_usize() -> usize {
   167ba:	2000      	movs	r0, #0
    }
   167bc:	4770      	bx	lr

000167be <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>:
   167be:	b081      	sub	sp, #4
   167c0:	4601      	mov	r1, r0
   167c2:	f88d 0003 	strb.w	r0, [sp, #3]
   167c6:	b2c0      	uxtb	r0, r0
   167c8:	b001      	add	sp, #4
   167ca:	4770      	bx	lr

000167cc <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>:
   167cc:	b580      	push	{r7, lr}
   167ce:	b084      	sub	sp, #16
   167d0:	9001      	str	r0, [sp, #4]
   167d2:	9102      	str	r1, [sp, #8]
   167d4:	9203      	str	r2, [sp, #12]
   167d6:	0052      	lsls	r2, r2, #1
   167d8:	9000      	str	r0, [sp, #0]
   167da:	4608      	mov	r0, r1
   167dc:	9900      	ldr	r1, [sp, #0]
   167de:	f006 fcdd 	bl	1d19c <__aeabi_memcpy>
   167e2:	e7ff      	b.n	167e4 <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E+0x18>
   167e4:	b004      	add	sp, #16
   167e6:	bd80      	pop	{r7, pc}

000167e8 <_ZN4core3ptr13drop_in_place17h000c7c147ade2111E>:
   167e8:	4770      	bx	lr

000167ea <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE>:
   167ea:	b5b0      	push	{r4, r5, r7, lr}
   167ec:	b086      	sub	sp, #24
   167ee:	460c      	mov	r4, r1
   167f0:	4605      	mov	r5, r0
   167f2:	f001 fb88 	bl	17f06 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>
   167f6:	b9a8      	cbnz	r0, 16824 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x3a>
   167f8:	f64f 4394 	movw	r3, #64660	; 0xfc94
   167fc:	2200      	movs	r2, #0
   167fe:	f2c0 0301 	movt	r3, #1
   16802:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   16806:	9205      	str	r2, [sp, #20]
   16808:	9304      	str	r3, [sp, #16]
   1680a:	e9cd 2202 	strd	r2, r2, [sp, #8]
   1680e:	2201      	movs	r2, #1
   16810:	9201      	str	r2, [sp, #4]
   16812:	f64f 5258 	movw	r2, #64856	; 0xfd58
   16816:	f2c0 0201 	movt	r2, #1
   1681a:	9200      	str	r2, [sp, #0]
   1681c:	466a      	mov	r2, sp
   1681e:	f000 fbe1 	bl	16fe4 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   16822:	b110      	cbz	r0, 1682a <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x40>
   16824:	2001      	movs	r0, #1
   16826:	b006      	add	sp, #24
   16828:	bdb0      	pop	{r4, r5, r7, pc}
   1682a:	1d28      	adds	r0, r5, #4
   1682c:	4621      	mov	r1, r4
   1682e:	b006      	add	sp, #24
   16830:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
   16834:	f001 bb67 	b.w	17f06 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>

00016838 <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE>:
   16838:	f642 20e1 	movw	r0, #10977	; 0x2ae1
   1683c:	f243 6134 	movw	r1, #13876	; 0x3634
   16840:	f6c9 405d 	movt	r0, #40029	; 0x9c5d
   16844:	f6cd 0131 	movt	r1, #55345	; 0xd831
   16848:	4770      	bx	lr
	...

0001684c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>:
   1684c:	b570      	push	{r4, r5, r6, lr}
   1684e:	460e      	mov	r6, r1
   16850:	3909      	subs	r1, #9
   16852:	4604      	mov	r4, r0
   16854:	291e      	cmp	r1, #30
   16856:	d818      	bhi.n	1688a <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x3e>
   16858:	2002      	movs	r0, #2
   1685a:	2574      	movs	r5, #116	; 0x74
   1685c:	e8df f001 	tbb	[pc, r1]
   16860:	1c1c1019 	.word	0x1c1c1019
   16864:	1c1c1c29 	.word	0x1c1c1c29
   16868:	1c1c1c1c 	.word	0x1c1c1c1c
   1686c:	1c1c1c1c 	.word	0x1c1c1c1c
   16870:	1c1c1c1c 	.word	0x1c1c1c1c
   16874:	1c1c1c1c 	.word	0x1c1c1c1c
   16878:	1c1c171c 	.word	0x1c1c171c
   1687c:	00171c1c 	.word	0x00171c1c
   16880:	2002      	movs	r0, #2
   16882:	256e      	movs	r5, #110	; 0x6e
   16884:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   16888:	bd70      	pop	{r4, r5, r6, pc}
   1688a:	2e5c      	cmp	r6, #92	; 0x5c
   1688c:	d104      	bne.n	16898 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x4c>
   1688e:	2002      	movs	r0, #2
   16890:	4635      	mov	r5, r6
   16892:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   16896:	bd70      	pop	{r4, r5, r6, pc}
   16898:	2a00      	cmp	r2, #0
   1689a:	d040      	beq.n	1691e <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   1689c:	f3c6 1083 	ubfx	r0, r6, #6, #4
   168a0:	0ab1      	lsrs	r1, r6, #10
   168a2:	f5b6 3ff6 	cmp.w	r6, #125952	; 0x1ec00
   168a6:	d309      	bcc.n	168bc <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x70>
   168a8:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
   168ac:	d137      	bne.n	1691e <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   168ae:	211e      	movs	r1, #30
   168b0:	e00b      	b.n	168ca <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x7e>
   168b2:	2002      	movs	r0, #2
   168b4:	2572      	movs	r5, #114	; 0x72
   168b6:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   168ba:	bd70      	pop	{r4, r5, r6, pc}
   168bc:	f240 72cc 	movw	r2, #1996	; 0x7cc
   168c0:	f2c0 0202 	movt	r2, #2
   168c4:	5c51      	ldrb	r1, [r2, r1]
   168c6:	291e      	cmp	r1, #30
   168c8:	d842      	bhi.n	16950 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x104>
   168ca:	f640 0247 	movw	r2, #2119	; 0x847
   168ce:	f2c0 0202 	movt	r2, #2
   168d2:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   168d6:	5c09      	ldrb	r1, [r1, r0]
   168d8:	298b      	cmp	r1, #139	; 0x8b
   168da:	d231      	bcs.n	16940 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xf4>
   168dc:	f640 2038 	movw	r0, #2616	; 0xa38
   168e0:	2301      	movs	r3, #1
   168e2:	f2c0 0002 	movt	r0, #2
   168e6:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   168ea:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
   168ee:	f006 013f 	and.w	r1, r6, #63	; 0x3f
   168f2:	f8d2 c004 	ldr.w	ip, [r2, #4]
   168f6:	fa03 f501 	lsl.w	r5, r3, r1
   168fa:	f1b1 0220 	subs.w	r2, r1, #32
   168fe:	f1c1 0120 	rsb	r1, r1, #32
   16902:	bf58      	it	pl
   16904:	2500      	movpl	r5, #0
   16906:	2a00      	cmp	r2, #0
   16908:	ea00 0005 	and.w	r0, r0, r5
   1690c:	fa23 f101 	lsr.w	r1, r3, r1
   16910:	bf58      	it	pl
   16912:	fa03 f102 	lslpl.w	r1, r3, r2
   16916:	ea01 010c 	and.w	r1, r1, ip
   1691a:	4308      	orrs	r0, r1
   1691c:	d105      	bne.n	1692a <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   1691e:	4630      	mov	r0, r6
   16920:	f001 f9a5 	bl	17c6e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>
   16924:	b108      	cbz	r0, 1692a <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   16926:	2001      	movs	r0, #1
   16928:	e7b2      	b.n	16890 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   1692a:	f046 0001 	orr.w	r0, r6, #1
   1692e:	2107      	movs	r1, #7
   16930:	fab0 f080 	clz	r0, r0
   16934:	f04f 0e05 	mov.w	lr, #5
   16938:	ea81 0c90 	eor.w	ip, r1, r0, lsr #2
   1693c:	2003      	movs	r0, #3
   1693e:	e7a7      	b.n	16890 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   16940:	f240 70bc 	movw	r0, #1980	; 0x7bc
   16944:	228b      	movs	r2, #139	; 0x8b
   16946:	f2c0 0002 	movt	r0, #2
   1694a:	f000 f869 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1694e:	defe      	udf	#254	; 0xfe
   16950:	f240 70ac 	movw	r0, #1964	; 0x7ac
   16954:	221f      	movs	r2, #31
   16956:	f2c0 0002 	movt	r0, #2
   1695a:	f000 f861 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1695e:	defe      	udf	#254	; 0xfe

00016960 <_ZN4core6option13expect_failed17had6579abaad447b4E>:
   16960:	b08a      	sub	sp, #40	; 0x28
   16962:	e9cd 0100 	strd	r0, r1, [sp]
   16966:	2001      	movs	r0, #1
   16968:	a908      	add	r1, sp, #32
   1696a:	9007      	str	r0, [sp, #28]
   1696c:	9106      	str	r1, [sp, #24]
   1696e:	2100      	movs	r1, #0
   16970:	9105      	str	r1, [sp, #20]
   16972:	e9cd 0103 	strd	r0, r1, [sp, #12]
   16976:	f64f 605c 	movw	r0, #65116	; 0xfe5c
   1697a:	f2c0 0001 	movt	r0, #1
   1697e:	4611      	mov	r1, r2
   16980:	9002      	str	r0, [sp, #8]
   16982:	f648 0063 	movw	r0, #34915	; 0x8863
   16986:	f2c0 0001 	movt	r0, #1
   1698a:	9009      	str	r0, [sp, #36]	; 0x24
   1698c:	4668      	mov	r0, sp
   1698e:	9008      	str	r0, [sp, #32]
   16990:	a802      	add	r0, sp, #8
   16992:	f000 f865 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16996:	defe      	udf	#254	; 0xfe

00016998 <_ZN4core6option18expect_none_failed17h54d938081af97677E>:
   16998:	b08e      	sub	sp, #56	; 0x38
   1699a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   1699e:	2002      	movs	r0, #2
   169a0:	a90a      	add	r1, sp, #40	; 0x28
   169a2:	9009      	str	r0, [sp, #36]	; 0x24
   169a4:	9108      	str	r1, [sp, #32]
   169a6:	2100      	movs	r1, #0
   169a8:	9107      	str	r1, [sp, #28]
   169aa:	e9cd 0105 	strd	r0, r1, [sp, #20]
   169ae:	f64f 6068 	movw	r0, #65128	; 0xfe68
   169b2:	f2c0 0001 	movt	r0, #1
   169b6:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   169ba:	9004      	str	r0, [sp, #16]
   169bc:	f648 0059 	movw	r0, #34905	; 0x8859
   169c0:	f2c0 0001 	movt	r0, #1
   169c4:	900d      	str	r0, [sp, #52]	; 0x34
   169c6:	a802      	add	r0, sp, #8
   169c8:	900c      	str	r0, [sp, #48]	; 0x30
   169ca:	f648 0063 	movw	r0, #34915	; 0x8863
   169ce:	f2c0 0001 	movt	r0, #1
   169d2:	4661      	mov	r1, ip
   169d4:	900b      	str	r0, [sp, #44]	; 0x2c
   169d6:	4668      	mov	r0, sp
   169d8:	900a      	str	r0, [sp, #40]	; 0x28
   169da:	a804      	add	r0, sp, #16
   169dc:	f000 f840 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   169e0:	defe      	udf	#254	; 0xfe

000169e2 <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>:
   169e2:	68c0      	ldr	r0, [r0, #12]
   169e4:	4770      	bx	lr

000169e6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>:
   169e6:	4770      	bx	lr

000169e8 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>:
   169e8:	e9d0 2100 	ldrd	r2, r1, [r0]
   169ec:	4610      	mov	r0, r2
   169ee:	4770      	bx	lr

000169f0 <_ZN4core5panic8Location4line17h650a566d9637c91dE>:
   169f0:	6880      	ldr	r0, [r0, #8]
   169f2:	4770      	bx	lr

000169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>:
   169f4:	b088      	sub	sp, #32
   169f6:	4694      	mov	ip, r2
   169f8:	f64f 4294 	movw	r2, #64660	; 0xfc94
   169fc:	2300      	movs	r3, #0
   169fe:	f2c0 0201 	movt	r2, #1
   16a02:	e9cd 0106 	strd	r0, r1, [sp, #24]
   16a06:	4668      	mov	r0, sp
   16a08:	9305      	str	r3, [sp, #20]
   16a0a:	4661      	mov	r1, ip
   16a0c:	9204      	str	r2, [sp, #16]
   16a0e:	2201      	movs	r2, #1
   16a10:	e9cd 3302 	strd	r3, r3, [sp, #8]
   16a14:	9201      	str	r2, [sp, #4]
   16a16:	aa06      	add	r2, sp, #24
   16a18:	9200      	str	r2, [sp, #0]
   16a1a:	f000 f821 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16a1e:	defe      	udf	#254	; 0xfe

00016a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>:
   16a20:	b08c      	sub	sp, #48	; 0x30
   16a22:	4603      	mov	r3, r0
   16a24:	e9cd 1200 	strd	r1, r2, [sp]
   16a28:	2002      	movs	r0, #2
   16a2a:	a908      	add	r1, sp, #32
   16a2c:	9007      	str	r0, [sp, #28]
   16a2e:	9106      	str	r1, [sp, #24]
   16a30:	2100      	movs	r1, #0
   16a32:	9105      	str	r1, [sp, #20]
   16a34:	e9cd 0103 	strd	r0, r1, [sp, #12]
   16a38:	f64f 609c 	movw	r0, #65180	; 0xfe9c
   16a3c:	f2c0 0001 	movt	r0, #1
   16a40:	4669      	mov	r1, sp
   16a42:	9002      	str	r0, [sp, #8]
   16a44:	f248 7075 	movw	r0, #34677	; 0x8775
   16a48:	f2c0 0001 	movt	r0, #1
   16a4c:	900b      	str	r0, [sp, #44]	; 0x2c
   16a4e:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   16a52:	a801      	add	r0, sp, #4
   16a54:	9008      	str	r0, [sp, #32]
   16a56:	a802      	add	r0, sp, #8
   16a58:	4619      	mov	r1, r3
   16a5a:	f000 f801 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16a5e:	defe      	udf	#254	; 0xfe

00016a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>:
   16a60:	b084      	sub	sp, #16
   16a62:	e9cd 0102 	strd	r0, r1, [sp, #8]
   16a66:	f64f 6078 	movw	r0, #65144	; 0xfe78
   16a6a:	f2c0 0001 	movt	r0, #1
   16a6e:	9001      	str	r0, [sp, #4]
   16a70:	f64f 4094 	movw	r0, #64660	; 0xfc94
   16a74:	f2c0 0001 	movt	r0, #1
   16a78:	9000      	str	r0, [sp, #0]
   16a7a:	4668      	mov	r0, sp
   16a7c:	f7f1 fe28 	bl	86d0 <rust_begin_unwind>
   16a80:	defe      	udf	#254	; 0xfe

00016a82 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>:
   16a82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a86:	b081      	sub	sp, #4
   16a88:	2a00      	cmp	r2, #0
   16a8a:	f000 80fe 	beq.w	16c8a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   16a8e:	4690      	mov	r8, r2
   16a90:	468a      	mov	sl, r1
   16a92:	4681      	mov	r9, r0
   16a94:	f8d9 0008 	ldr.w	r0, [r9, #8]
   16a98:	7800      	ldrb	r0, [r0, #0]
   16a9a:	b948      	cbnz	r0, 16ab0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x2e>
   16a9c:	e014      	b.n	16ac8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   16a9e:	44da      	add	sl, fp
   16aa0:	2c00      	cmp	r4, #0
   16aa2:	46a0      	mov	r8, r4
   16aa4:	f000 80f1 	beq.w	16c8a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   16aa8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   16aac:	7800      	ldrb	r0, [r0, #0]
   16aae:	b158      	cbz	r0, 16ac8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   16ab0:	e9d9 0100 	ldrd	r0, r1, [r9]
   16ab4:	2204      	movs	r2, #4
   16ab6:	68cb      	ldr	r3, [r1, #12]
   16ab8:	f64f 51b4 	movw	r1, #64948	; 0xfdb4
   16abc:	f2c0 0101 	movt	r1, #1
   16ac0:	4798      	blx	r3
   16ac2:	2800      	cmp	r0, #0
   16ac4:	f040 80e5 	bne.w	16c92 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   16ac8:	f04f 0b00 	mov.w	fp, #0
   16acc:	4641      	mov	r1, r8
   16ace:	e008      	b.n	16ae2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x60>
   16ad0:	ebb8 010b 	subs.w	r1, r8, fp
   16ad4:	f04f 0000 	mov.w	r0, #0
   16ad8:	bf38      	it	cc
   16ada:	4601      	movcc	r1, r0
   16adc:	45c3      	cmp	fp, r8
   16ade:	f200 80a5 	bhi.w	16c2c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1aa>
   16ae2:	eb0a 0e0b 	add.w	lr, sl, fp
   16ae6:	2000      	movs	r0, #0
   16ae8:	f01e 0203 	ands.w	r2, lr, #3
   16aec:	bf18      	it	ne
   16aee:	f1d2 0c04 	rsbsne	ip, r2, #4
   16af2:	d120      	bne.n	16b36 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xb4>
   16af4:	2908      	cmp	r1, #8
   16af6:	d357      	bcc.n	16ba8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   16af8:	f1a1 0208 	sub.w	r2, r1, #8
   16afc:	4290      	cmp	r0, r2
   16afe:	d853      	bhi.n	16ba8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   16b00:	f85e 3000 	ldr.w	r3, [lr, r0]
   16b04:	eb0e 0700 	add.w	r7, lr, r0
   16b08:	687f      	ldr	r7, [r7, #4]
   16b0a:	f083 360a 	eor.w	r6, r3, #168430090	; 0xa0a0a0a
   16b0e:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   16b12:	ea26 0303 	bic.w	r3, r6, r3
   16b16:	f087 360a 	eor.w	r6, r7, #168430090	; 0xa0a0a0a
   16b1a:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   16b1e:	ea26 0707 	bic.w	r7, r6, r7
   16b22:	433b      	orrs	r3, r7
   16b24:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   16b28:	d102      	bne.n	16b30 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xae>
   16b2a:	3008      	adds	r0, #8
   16b2c:	4290      	cmp	r0, r2
   16b2e:	d9e7      	bls.n	16b00 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x7e>
   16b30:	4288      	cmp	r0, r1
   16b32:	d939      	bls.n	16ba8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   16b34:	e0b1      	b.n	16c9a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x218>
   16b36:	458c      	cmp	ip, r1
   16b38:	bf88      	it	hi
   16b3a:	468c      	movhi	ip, r1
   16b3c:	eb0e 060c 	add.w	r6, lr, ip
   16b40:	2000      	movs	r0, #0
   16b42:	4663      	mov	r3, ip
   16b44:	4677      	mov	r7, lr
   16b46:	b363      	cbz	r3, 16ba2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   16b48:	463a      	mov	r2, r7
   16b4a:	f812 4b01 	ldrb.w	r4, [r2], #1
   16b4e:	f1b4 050a 	subs.w	r5, r4, #10
   16b52:	bf18      	it	ne
   16b54:	2501      	movne	r5, #1
   16b56:	4428      	add	r0, r5
   16b58:	2c0a      	cmp	r4, #10
   16b5a:	d059      	beq.n	16c10 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   16b5c:	42b2      	cmp	r2, r6
   16b5e:	d020      	beq.n	16ba2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   16b60:	787a      	ldrb	r2, [r7, #1]
   16b62:	f1b2 040a 	subs.w	r4, r2, #10
   16b66:	bf18      	it	ne
   16b68:	2401      	movne	r4, #1
   16b6a:	4420      	add	r0, r4
   16b6c:	2a0a      	cmp	r2, #10
   16b6e:	d04f      	beq.n	16c10 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   16b70:	1cba      	adds	r2, r7, #2
   16b72:	42b2      	cmp	r2, r6
   16b74:	d015      	beq.n	16ba2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   16b76:	78ba      	ldrb	r2, [r7, #2]
   16b78:	f1b2 040a 	subs.w	r4, r2, #10
   16b7c:	bf18      	it	ne
   16b7e:	2401      	movne	r4, #1
   16b80:	4420      	add	r0, r4
   16b82:	2a0a      	cmp	r2, #10
   16b84:	d044      	beq.n	16c10 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   16b86:	1cfa      	adds	r2, r7, #3
   16b88:	42b2      	cmp	r2, r6
   16b8a:	d00a      	beq.n	16ba2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   16b8c:	78fa      	ldrb	r2, [r7, #3]
   16b8e:	3b04      	subs	r3, #4
   16b90:	3704      	adds	r7, #4
   16b92:	f1b2 040a 	subs.w	r4, r2, #10
   16b96:	bf18      	it	ne
   16b98:	2401      	movne	r4, #1
   16b9a:	4420      	add	r0, r4
   16b9c:	2a0a      	cmp	r2, #10
   16b9e:	d1d2      	bne.n	16b46 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xc4>
   16ba0:	e036      	b.n	16c10 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   16ba2:	4660      	mov	r0, ip
   16ba4:	2908      	cmp	r1, #8
   16ba6:	d2a7      	bcs.n	16af8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x76>
   16ba8:	eb0e 0700 	add.w	r7, lr, r0
   16bac:	eb0e 0201 	add.w	r2, lr, r1
   16bb0:	1a0e      	subs	r6, r1, r0
   16bb2:	2100      	movs	r1, #0
   16bb4:	b3ce      	cbz	r6, 16c2a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   16bb6:	463b      	mov	r3, r7
   16bb8:	f813 5b01 	ldrb.w	r5, [r3], #1
   16bbc:	f1b5 040a 	subs.w	r4, r5, #10
   16bc0:	bf18      	it	ne
   16bc2:	2401      	movne	r4, #1
   16bc4:	4421      	add	r1, r4
   16bc6:	2d0a      	cmp	r5, #10
   16bc8:	d021      	beq.n	16c0e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   16bca:	4293      	cmp	r3, r2
   16bcc:	d02d      	beq.n	16c2a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   16bce:	787b      	ldrb	r3, [r7, #1]
   16bd0:	f1b3 050a 	subs.w	r5, r3, #10
   16bd4:	bf18      	it	ne
   16bd6:	2501      	movne	r5, #1
   16bd8:	4429      	add	r1, r5
   16bda:	2b0a      	cmp	r3, #10
   16bdc:	d017      	beq.n	16c0e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   16bde:	1cbb      	adds	r3, r7, #2
   16be0:	4293      	cmp	r3, r2
   16be2:	d022      	beq.n	16c2a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   16be4:	78bb      	ldrb	r3, [r7, #2]
   16be6:	f1b3 050a 	subs.w	r5, r3, #10
   16bea:	bf18      	it	ne
   16bec:	2501      	movne	r5, #1
   16bee:	4429      	add	r1, r5
   16bf0:	2b0a      	cmp	r3, #10
   16bf2:	d00c      	beq.n	16c0e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   16bf4:	1cfb      	adds	r3, r7, #3
   16bf6:	4293      	cmp	r3, r2
   16bf8:	d017      	beq.n	16c2a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   16bfa:	78fb      	ldrb	r3, [r7, #3]
   16bfc:	3e04      	subs	r6, #4
   16bfe:	3704      	adds	r7, #4
   16c00:	f1b3 050a 	subs.w	r5, r3, #10
   16c04:	bf18      	it	ne
   16c06:	2501      	movne	r5, #1
   16c08:	4429      	add	r1, r5
   16c0a:	2b0a      	cmp	r3, #10
   16c0c:	d1d2      	bne.n	16bb4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x132>
   16c0e:	4408      	add	r0, r1
   16c10:	4458      	add	r0, fp
   16c12:	f100 0b01 	add.w	fp, r0, #1
   16c16:	4540      	cmp	r0, r8
   16c18:	f4bf af5a 	bcs.w	16ad0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   16c1c:	f81a 0000 	ldrb.w	r0, [sl, r0]
   16c20:	280a      	cmp	r0, #10
   16c22:	f47f af55 	bne.w	16ad0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   16c26:	2001      	movs	r0, #1
   16c28:	e001      	b.n	16c2e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1ac>
   16c2a:	2000      	movs	r0, #0
   16c2c:	46c3      	mov	fp, r8
   16c2e:	f8d9 1008 	ldr.w	r1, [r9, #8]
   16c32:	eba8 040b 	sub.w	r4, r8, fp
   16c36:	7008      	strb	r0, [r1, #0]
   16c38:	fab4 f084 	clz	r0, r4
   16c3c:	0942      	lsrs	r2, r0, #5
   16c3e:	fabb f08b 	clz	r0, fp
   16c42:	0943      	lsrs	r3, r0, #5
   16c44:	e9d9 0100 	ldrd	r0, r1, [r9]
   16c48:	ea53 0602 	orrs.w	r6, r3, r2
   16c4c:	d106      	bne.n	16c5c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1da>
   16c4e:	45d8      	cmp	r8, fp
   16c50:	d926      	bls.n	16ca0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   16c52:	f91a 200b 	ldrsb.w	r2, [sl, fp]
   16c56:	f112 0f41 	cmn.w	r2, #65	; 0x41
   16c5a:	dd21      	ble.n	16ca0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   16c5c:	68cb      	ldr	r3, [r1, #12]
   16c5e:	4651      	mov	r1, sl
   16c60:	465a      	mov	r2, fp
   16c62:	4798      	blx	r3
   16c64:	b9a8      	cbnz	r0, 16c92 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   16c66:	2e00      	cmp	r6, #0
   16c68:	f47f af19 	bne.w	16a9e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   16c6c:	45d8      	cmp	r8, fp
   16c6e:	d905      	bls.n	16c7c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1fa>
   16c70:	f91a 000b 	ldrsb.w	r0, [sl, fp]
   16c74:	f110 0f41 	cmn.w	r0, #65	; 0x41
   16c78:	f73f af11 	bgt.w	16a9e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   16c7c:	4650      	mov	r0, sl
   16c7e:	4641      	mov	r1, r8
   16c80:	465a      	mov	r2, fp
   16c82:	4643      	mov	r3, r8
   16c84:	f000 fe4d 	bl	17922 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   16c88:	defe      	udf	#254	; 0xfe
   16c8a:	2000      	movs	r0, #0
   16c8c:	b001      	add	sp, #4
   16c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c92:	2001      	movs	r0, #1
   16c94:	b001      	add	sp, #4
   16c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c9a:	f000 fe20 	bl	178de <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16c9e:	defe      	udf	#254	; 0xfe
   16ca0:	4650      	mov	r0, sl
   16ca2:	4641      	mov	r1, r8
   16ca4:	2200      	movs	r2, #0
   16ca6:	465b      	mov	r3, fp
   16ca8:	f000 fe3b 	bl	17922 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   16cac:	defe      	udf	#254	; 0xfe

00016cae <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>:
   16cae:	b5f0      	push	{r4, r5, r6, r7, lr}
   16cb0:	b08d      	sub	sp, #52	; 0x34
   16cb2:	4604      	mov	r4, r0
   16cb4:	7a00      	ldrb	r0, [r0, #8]
   16cb6:	b138      	cbz	r0, 16cc8 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x1a>
   16cb8:	2001      	movs	r0, #1
   16cba:	6861      	ldr	r1, [r4, #4]
   16cbc:	7220      	strb	r0, [r4, #8]
   16cbe:	1c48      	adds	r0, r1, #1
   16cc0:	6060      	str	r0, [r4, #4]
   16cc2:	4620      	mov	r0, r4
   16cc4:	b00d      	add	sp, #52	; 0x34
   16cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16cc8:	4616      	mov	r6, r2
   16cca:	460d      	mov	r5, r1
   16ccc:	e9d4 1200 	ldrd	r1, r2, [r4]
   16cd0:	7808      	ldrb	r0, [r1, #0]
   16cd2:	0740      	lsls	r0, r0, #29
   16cd4:	d419      	bmi.n	16d0a <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x5c>
   16cd6:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
   16cda:	f64f 61c6 	movw	r1, #65222	; 0xfec6
   16cde:	f64f 6cca 	movw	ip, #65226	; 0xfeca
   16ce2:	f2c0 0101 	movt	r1, #1
   16ce6:	2a00      	cmp	r2, #0
   16ce8:	f2c0 0c01 	movt	ip, #1
   16cec:	bf08      	it	eq
   16cee:	4661      	moveq	r1, ip
   16cf0:	68db      	ldr	r3, [r3, #12]
   16cf2:	f04f 0202 	mov.w	r2, #2
   16cf6:	bf08      	it	eq
   16cf8:	2201      	moveq	r2, #1
   16cfa:	4798      	blx	r3
   16cfc:	2800      	cmp	r0, #0
   16cfe:	d1db      	bne.n	16cb8 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   16d00:	68f2      	ldr	r2, [r6, #12]
   16d02:	4628      	mov	r0, r5
   16d04:	6821      	ldr	r1, [r4, #0]
   16d06:	4790      	blx	r2
   16d08:	e7d7      	b.n	16cba <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>
   16d0a:	b95a      	cbnz	r2, 16d24 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x76>
   16d0c:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   16d10:	2202      	movs	r2, #2
   16d12:	68cb      	ldr	r3, [r1, #12]
   16d14:	f64f 61c8 	movw	r1, #65224	; 0xfec8
   16d18:	f2c0 0101 	movt	r1, #1
   16d1c:	4798      	blx	r3
   16d1e:	2800      	cmp	r0, #0
   16d20:	d1ca      	bne.n	16cb8 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   16d22:	6821      	ldr	r1, [r4, #0]
   16d24:	2001      	movs	r0, #1
   16d26:	f10d 030f 	add.w	r3, sp, #15
   16d2a:	f88d 000f 	strb.w	r0, [sp, #15]
   16d2e:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
   16d32:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
   16d36:	e891 5005 	ldmia.w	r1, {r0, r2, ip, lr}
   16d3a:	e9d1 3704 	ldrd	r3, r7, [r1, #16]
   16d3e:	f891 1020 	ldrb.w	r1, [r1, #32]
   16d42:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   16d46:	a904      	add	r1, sp, #16
   16d48:	e9cd 0204 	strd	r0, r2, [sp, #16]
   16d4c:	f64f 60ac 	movw	r0, #65196	; 0xfeac
   16d50:	f2c0 0001 	movt	r0, #1
   16d54:	68f2      	ldr	r2, [r6, #12]
   16d56:	900b      	str	r0, [sp, #44]	; 0x2c
   16d58:	4668      	mov	r0, sp
   16d5a:	900a      	str	r0, [sp, #40]	; 0x28
   16d5c:	4628      	mov	r0, r5
   16d5e:	e9cd 3708 	strd	r3, r7, [sp, #32]
   16d62:	e9cd ce06 	strd	ip, lr, [sp, #24]
   16d66:	4790      	blx	r2
   16d68:	2800      	cmp	r0, #0
   16d6a:	d1a5      	bne.n	16cb8 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   16d6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   16d70:	2202      	movs	r2, #2
   16d72:	68cb      	ldr	r3, [r1, #12]
   16d74:	f64f 61c4 	movw	r1, #65220	; 0xfec4
   16d78:	f2c0 0101 	movt	r1, #1
   16d7c:	4798      	blx	r3
   16d7e:	e79c      	b.n	16cba <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>

00016d80 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>:
   16d80:	b5b0      	push	{r4, r5, r7, lr}
   16d82:	4604      	mov	r4, r0
   16d84:	7a05      	ldrb	r5, [r0, #8]
   16d86:	6840      	ldr	r0, [r0, #4]
   16d88:	b308      	cbz	r0, 16dce <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4e>
   16d8a:	b10d      	cbz	r5, 16d90 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x10>
   16d8c:	2501      	movs	r5, #1
   16d8e:	e01d      	b.n	16dcc <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   16d90:	2801      	cmp	r0, #1
   16d92:	d110      	bne.n	16db6 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   16d94:	7a60      	ldrb	r0, [r4, #9]
   16d96:	b170      	cbz	r0, 16db6 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   16d98:	6821      	ldr	r1, [r4, #0]
   16d9a:	7808      	ldrb	r0, [r1, #0]
   16d9c:	0740      	lsls	r0, r0, #29
   16d9e:	d40a      	bmi.n	16db6 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   16da0:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   16da4:	2201      	movs	r2, #1
   16da6:	68cb      	ldr	r3, [r1, #12]
   16da8:	f64f 61cb 	movw	r1, #65227	; 0xfecb
   16dac:	f2c0 0101 	movt	r1, #1
   16db0:	2501      	movs	r5, #1
   16db2:	4798      	blx	r3
   16db4:	b950      	cbnz	r0, 16dcc <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   16db6:	6821      	ldr	r1, [r4, #0]
   16db8:	2201      	movs	r2, #1
   16dba:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   16dbe:	68cb      	ldr	r3, [r1, #12]
   16dc0:	f64f 61cc 	movw	r1, #65228	; 0xfecc
   16dc4:	f2c0 0101 	movt	r1, #1
   16dc8:	4798      	blx	r3
   16dca:	4605      	mov	r5, r0
   16dcc:	7225      	strb	r5, [r4, #8]
   16dce:	2d00      	cmp	r5, #0
   16dd0:	bf18      	it	ne
   16dd2:	2501      	movne	r5, #1
   16dd4:	4628      	mov	r0, r5
   16dd6:	bdb0      	pop	{r4, r5, r7, pc}

00016dd8 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>:
   16dd8:	b580      	push	{r7, lr}
   16dda:	b082      	sub	sp, #8
   16ddc:	468c      	mov	ip, r1
   16dde:	2100      	movs	r1, #0
   16de0:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   16de4:	9101      	str	r1, [sp, #4]
   16de6:	d207      	bcs.n	16df8 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x20>
   16de8:	f88d c004 	strb.w	ip, [sp, #4]
   16dec:	a901      	add	r1, sp, #4
   16dee:	2201      	movs	r2, #1
   16df0:	f7ff fe47 	bl	16a82 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   16df4:	b002      	add	sp, #8
   16df6:	bd80      	pop	{r7, pc}
   16df8:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
   16dfc:	d210      	bcs.n	16e20 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x48>
   16dfe:	ea4f 119c 	mov.w	r1, ip, lsr #6
   16e02:	2306      	movs	r3, #6
   16e04:	2202      	movs	r2, #2
   16e06:	f363 115f 	bfi	r1, r3, #5, #27
   16e0a:	f362 1c9f 	bfi	ip, r2, #6, #26
   16e0e:	f88d c005 	strb.w	ip, [sp, #5]
   16e12:	f88d 1004 	strb.w	r1, [sp, #4]
   16e16:	a901      	add	r1, sp, #4
   16e18:	f7ff fe33 	bl	16a82 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   16e1c:	b002      	add	sp, #8
   16e1e:	bd80      	pop	{r7, pc}
   16e20:	2202      	movs	r2, #2
   16e22:	4663      	mov	r3, ip
   16e24:	a901      	add	r1, sp, #4
   16e26:	f362 139f 	bfi	r3, r2, #6, #26
   16e2a:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   16e2e:	d213      	bcs.n	16e58 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x80>
   16e30:	f88d 3006 	strb.w	r3, [sp, #6]
   16e34:	ea4f 139c 	mov.w	r3, ip, lsr #6
   16e38:	f362 139f 	bfi	r3, r2, #6, #26
   16e3c:	f88d 3005 	strb.w	r3, [sp, #5]
   16e40:	ea4f 321c 	mov.w	r2, ip, lsr #12
   16e44:	230e      	movs	r3, #14
   16e46:	f363 121f 	bfi	r2, r3, #4, #28
   16e4a:	f88d 2004 	strb.w	r2, [sp, #4]
   16e4e:	2203      	movs	r2, #3
   16e50:	f7ff fe17 	bl	16a82 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   16e54:	b002      	add	sp, #8
   16e56:	bd80      	pop	{r7, pc}
   16e58:	f88d 3007 	strb.w	r3, [sp, #7]
   16e5c:	ea4f 139c 	mov.w	r3, ip, lsr #6
   16e60:	f362 139f 	bfi	r3, r2, #6, #26
   16e64:	f88d 3006 	strb.w	r3, [sp, #6]
   16e68:	ea4f 331c 	mov.w	r3, ip, lsr #12
   16e6c:	f362 139f 	bfi	r3, r2, #6, #26
   16e70:	22f0      	movs	r2, #240	; 0xf0
   16e72:	ea42 429c 	orr.w	r2, r2, ip, lsr #18
   16e76:	f88d 3005 	strb.w	r3, [sp, #5]
   16e7a:	f88d 2004 	strb.w	r2, [sp, #4]
   16e7e:	2204      	movs	r2, #4
   16e80:	f7ff fdff 	bl	16a82 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   16e84:	b002      	add	sp, #8
   16e86:	bd80      	pop	{r7, pc}

00016e88 <_ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE>:
   16e88:	b570      	push	{r4, r5, r6, lr}
   16e8a:	b088      	sub	sp, #32
   16e8c:	9001      	str	r0, [sp, #4]
   16e8e:	aa02      	add	r2, sp, #8
   16e90:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   16e94:	f64f 7198 	movw	r1, #65432	; 0xff98
   16e98:	4610      	mov	r0, r2
   16e9a:	f2c0 0101 	movt	r1, #1
   16e9e:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   16ea2:	a801      	add	r0, sp, #4
   16ea4:	f000 f89e 	bl	16fe4 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   16ea8:	b008      	add	sp, #32
   16eaa:	bd70      	pop	{r4, r5, r6, pc}

00016eac <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E>:
   16eac:	6800      	ldr	r0, [r0, #0]
   16eae:	f7ff bde8 	b.w	16a82 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>

00016eb2 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE>:
   16eb2:	6800      	ldr	r0, [r0, #0]
   16eb4:	f7ff bf90 	b.w	16dd8 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>

00016eb8 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE>:
   16eb8:	b570      	push	{r4, r5, r6, lr}
   16eba:	b088      	sub	sp, #32
   16ebc:	6800      	ldr	r0, [r0, #0]
   16ebe:	aa02      	add	r2, sp, #8
   16ec0:	9001      	str	r0, [sp, #4]
   16ec2:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   16ec6:	4610      	mov	r0, r2
   16ec8:	f64f 7198 	movw	r1, #65432	; 0xff98
   16ecc:	f2c0 0101 	movt	r1, #1
   16ed0:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   16ed4:	a801      	add	r0, sp, #4
   16ed6:	f000 f885 	bl	16fe4 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   16eda:	b008      	add	sp, #32
   16edc:	bd70      	pop	{r4, r5, r6, pc}

00016ede <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE>:
   16ede:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ee2:	b08d      	sub	sp, #52	; 0x34
   16ee4:	468c      	mov	ip, r1
   16ee6:	6801      	ldr	r1, [r0, #0]
   16ee8:	f248 5e1f 	movw	lr, #34079	; 0x851f
   16eec:	f64f 60cf 	movw	r0, #65231	; 0xfecf
   16ef0:	f242 7810 	movw	r8, #10000	; 0x2710
   16ef4:	4541      	cmp	r1, r8
   16ef6:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   16efa:	f2c0 0001 	movt	r0, #1
   16efe:	d337      	bcc.n	16f70 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x92>
   16f00:	f241 7959 	movw	r9, #5977	; 0x1759
   16f04:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   16f08:	f10d 0b0c 	add.w	fp, sp, #12
   16f0c:	2300      	movs	r3, #0
   16f0e:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   16f12:	f04f 0a64 	mov.w	sl, #100	; 0x64
   16f16:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   16f1a:	fba1 2409 	umull	r2, r4, r1, r9
   16f1e:	42b9      	cmp	r1, r7
   16f20:	ea4f 3254 	mov.w	r2, r4, lsr #13
   16f24:	fb02 1418 	mls	r4, r2, r8, r1
   16f28:	4611      	mov	r1, r2
   16f2a:	b2a5      	uxth	r5, r4
   16f2c:	fba5 560e 	umull	r5, r6, r5, lr
   16f30:	ea4f 1556 	mov.w	r5, r6, lsr #5
   16f34:	eb0b 0603 	add.w	r6, fp, r3
   16f38:	fb05 441a 	mls	r4, r5, sl, r4
   16f3c:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   16f40:	f1a3 0304 	sub.w	r3, r3, #4
   16f44:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   16f48:	b2a4      	uxth	r4, r4
   16f4a:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   16f4e:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   16f52:	d8e2      	bhi.n	16f1a <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x3c>
   16f54:	f103 0427 	add.w	r4, r3, #39	; 0x27
   16f58:	4611      	mov	r1, r2
   16f5a:	2963      	cmp	r1, #99	; 0x63
   16f5c:	dc0b      	bgt.n	16f76 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x98>
   16f5e:	460b      	mov	r3, r1
   16f60:	2b0a      	cmp	r3, #10
   16f62:	db17      	blt.n	16f94 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xb6>
   16f64:	1ea1      	subs	r1, r4, #2
   16f66:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   16f6a:	aa03      	add	r2, sp, #12
   16f6c:	5250      	strh	r0, [r2, r1]
   16f6e:	e016      	b.n	16f9e <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xc0>
   16f70:	2427      	movs	r4, #39	; 0x27
   16f72:	2963      	cmp	r1, #99	; 0x63
   16f74:	ddf3      	ble.n	16f5e <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x80>
   16f76:	b28a      	uxth	r2, r1
   16f78:	3c02      	subs	r4, #2
   16f7a:	fba2 230e 	umull	r2, r3, r2, lr
   16f7e:	2264      	movs	r2, #100	; 0x64
   16f80:	095b      	lsrs	r3, r3, #5
   16f82:	fb03 1112 	mls	r1, r3, r2, r1
   16f86:	aa03      	add	r2, sp, #12
   16f88:	b289      	uxth	r1, r1
   16f8a:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   16f8e:	5311      	strh	r1, [r2, r4]
   16f90:	2b0a      	cmp	r3, #10
   16f92:	dae7      	bge.n	16f64 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x86>
   16f94:	1e61      	subs	r1, r4, #1
   16f96:	aa03      	add	r2, sp, #12
   16f98:	f103 0030 	add.w	r0, r3, #48	; 0x30
   16f9c:	5450      	strb	r0, [r2, r1]
   16f9e:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   16fa2:	aa03      	add	r2, sp, #12
   16fa4:	4411      	add	r1, r2
   16fa6:	f64f 4294 	movw	r2, #64660	; 0xfc94
   16faa:	e9cd 1000 	strd	r1, r0, [sp]
   16fae:	f2c0 0201 	movt	r2, #1
   16fb2:	4660      	mov	r0, ip
   16fb4:	2101      	movs	r1, #1
   16fb6:	2300      	movs	r3, #0
   16fb8:	f000 f8f4 	bl	171a4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16fbc:	b00d      	add	sp, #52	; 0x34
   16fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016fc2 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E>:
   16fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16fc6:	b086      	sub	sp, #24
   16fc8:	e9d1 c106 	ldrd	ip, r1, [r1, #24]
   16fcc:	466a      	mov	r2, sp
   16fce:	e890 41f0 	ldmia.w	r0, {r4, r5, r6, r7, r8, lr}
   16fd2:	4613      	mov	r3, r2
   16fd4:	4660      	mov	r0, ip
   16fd6:	e883 41f0 	stmia.w	r3, {r4, r5, r6, r7, r8, lr}
   16fda:	f000 f803 	bl	16fe4 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   16fde:	b006      	add	sp, #24
   16fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016fe4 <_ZN4core3fmt5write17hd95ac78ed22a2252E>:
   16fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fe8:	b08b      	sub	sp, #44	; 0x2c
   16fea:	2303      	movs	r3, #3
   16fec:	6897      	ldr	r7, [r2, #8]
   16fee:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   16ff2:	2320      	movs	r3, #32
   16ff4:	9303      	str	r3, [sp, #12]
   16ff6:	2300      	movs	r3, #0
   16ff8:	2f00      	cmp	r7, #0
   16ffa:	9302      	str	r3, [sp, #8]
   16ffc:	e9cd 0108 	strd	r0, r1, [sp, #32]
   17000:	9306      	str	r3, [sp, #24]
   17002:	9304      	str	r3, [sp, #16]
   17004:	d07c      	beq.n	17100 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x11c>
   17006:	f8d2 b00c 	ldr.w	fp, [r2, #12]
   1700a:	e9d2 9400 	ldrd	r9, r4, [r2]
   1700e:	45a3      	cmp	fp, r4
   17010:	bf88      	it	hi
   17012:	46a3      	movhi	fp, r4
   17014:	f1bb 0f00 	cmp.w	fp, #0
   17018:	f000 809b 	beq.w	17152 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   1701c:	e9d2 6204 	ldrd	r6, r2, [r2, #16]
   17020:	68cd      	ldr	r5, [r1, #12]
   17022:	9201      	str	r2, [sp, #4]
   17024:	e9d9 3200 	ldrd	r3, r2, [r9]
   17028:	4619      	mov	r1, r3
   1702a:	47a8      	blx	r5
   1702c:	2800      	cmp	r0, #0
   1702e:	f040 809e 	bne.w	1716e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   17032:	464d      	mov	r5, r9
   17034:	f04f 0a01 	mov.w	sl, #1
   17038:	f04f 0800 	mov.w	r8, #0
   1703c:	f04f 0910 	mov.w	r9, #16
   17040:	eb07 0088 	add.w	r0, r7, r8, lsl #2
   17044:	6841      	ldr	r1, [r0, #4]
   17046:	9103      	str	r1, [sp, #12]
   17048:	7f01      	ldrb	r1, [r0, #28]
   1704a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1704e:	6881      	ldr	r1, [r0, #8]
   17050:	9102      	str	r1, [sp, #8]
   17052:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   17056:	b18a      	cbz	r2, 1707c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x98>
   17058:	2a02      	cmp	r2, #2
   1705a:	d011      	beq.n	17080 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   1705c:	9a01      	ldr	r2, [sp, #4]
   1705e:	4291      	cmp	r1, r2
   17060:	f080 8098 	bcs.w	17194 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   17064:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
   17068:	f646 63df 	movw	r3, #28383	; 0x6edf
   1706c:	f2c0 0301 	movt	r3, #1
   17070:	6852      	ldr	r2, [r2, #4]
   17072:	429a      	cmp	r2, r3
   17074:	d104      	bne.n	17080 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   17076:	f856 1031 	ldr.w	r1, [r6, r1, lsl #3]
   1707a:	6809      	ldr	r1, [r1, #0]
   1707c:	2201      	movs	r2, #1
   1707e:	e000      	b.n	17082 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9e>
   17080:	2200      	movs	r2, #0
   17082:	e9cd 2104 	strd	r2, r1, [sp, #16]
   17086:	f857 1009 	ldr.w	r1, [r7, r9]
   1708a:	68c0      	ldr	r0, [r0, #12]
   1708c:	b180      	cbz	r0, 170b0 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xcc>
   1708e:	2802      	cmp	r0, #2
   17090:	d010      	beq.n	170b4 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   17092:	9801      	ldr	r0, [sp, #4]
   17094:	4281      	cmp	r1, r0
   17096:	d27d      	bcs.n	17194 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   17098:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   1709c:	f646 62df 	movw	r2, #28383	; 0x6edf
   170a0:	f2c0 0201 	movt	r2, #1
   170a4:	6840      	ldr	r0, [r0, #4]
   170a6:	4290      	cmp	r0, r2
   170a8:	d104      	bne.n	170b4 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   170aa:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   170ae:	6801      	ldr	r1, [r0, #0]
   170b0:	2001      	movs	r0, #1
   170b2:	e000      	b.n	170b6 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd2>
   170b4:	2000      	movs	r0, #0
   170b6:	eb07 0209 	add.w	r2, r7, r9
   170ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
   170be:	9801      	ldr	r0, [sp, #4]
   170c0:	f852 1c10 	ldr.w	r1, [r2, #-16]
   170c4:	4281      	cmp	r1, r0
   170c6:	d25d      	bcs.n	17184 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1a0>
   170c8:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   170cc:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   170d0:	684a      	ldr	r2, [r1, #4]
   170d2:	a902      	add	r1, sp, #8
   170d4:	4790      	blx	r2
   170d6:	2800      	cmp	r0, #0
   170d8:	d149      	bne.n	1716e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   170da:	45da      	cmp	sl, fp
   170dc:	d24b      	bcs.n	17176 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x192>
   170de:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   170e2:	eb05 0208 	add.w	r2, r5, r8
   170e6:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   170ea:	68db      	ldr	r3, [r3, #12]
   170ec:	4798      	blx	r3
   170ee:	f109 0920 	add.w	r9, r9, #32
   170f2:	f108 0808 	add.w	r8, r8, #8
   170f6:	f10a 0a01 	add.w	sl, sl, #1
   170fa:	2800      	cmp	r0, #0
   170fc:	d0a0      	beq.n	17040 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x5c>
   170fe:	e036      	b.n	1716e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   17100:	6956      	ldr	r6, [r2, #20]
   17102:	e9d2 9400 	ldrd	r9, r4, [r2]
   17106:	42a6      	cmp	r6, r4
   17108:	bf88      	it	hi
   1710a:	4626      	movhi	r6, r4
   1710c:	b30e      	cbz	r6, 17152 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   1710e:	6917      	ldr	r7, [r2, #16]
   17110:	e9d9 3200 	ldrd	r3, r2, [r9]
   17114:	68cd      	ldr	r5, [r1, #12]
   17116:	4619      	mov	r1, r3
   17118:	47a8      	blx	r5
   1711a:	bb40      	cbnz	r0, 1716e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   1711c:	f10d 0808 	add.w	r8, sp, #8
   17120:	2500      	movs	r5, #0
   17122:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
   17126:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   1712a:	684a      	ldr	r2, [r1, #4]
   1712c:	4641      	mov	r1, r8
   1712e:	4790      	blx	r2
   17130:	b9e8      	cbnz	r0, 1716e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   17132:	f105 0a01 	add.w	sl, r5, #1
   17136:	45b2      	cmp	sl, r6
   17138:	d20d      	bcs.n	17156 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x172>
   1713a:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   1713e:	eb09 02c5 	add.w	r2, r9, r5, lsl #3
   17142:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   17146:	68db      	ldr	r3, [r3, #12]
   17148:	4798      	blx	r3
   1714a:	2800      	cmp	r0, #0
   1714c:	4655      	mov	r5, sl
   1714e:	d0e8      	beq.n	17122 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x13e>
   17150:	e00d      	b.n	1716e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   17152:	f04f 0a00 	mov.w	sl, #0
   17156:	4554      	cmp	r4, sl
   17158:	d910      	bls.n	1717c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   1715a:	eb09 02ca 	add.w	r2, r9, sl, lsl #3
   1715e:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   17162:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
   17166:	6852      	ldr	r2, [r2, #4]
   17168:	68db      	ldr	r3, [r3, #12]
   1716a:	4798      	blx	r3
   1716c:	b130      	cbz	r0, 1717c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   1716e:	2001      	movs	r0, #1
   17170:	b00b      	add	sp, #44	; 0x2c
   17172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17176:	46a9      	mov	r9, r5
   17178:	4554      	cmp	r4, sl
   1717a:	d8ee      	bhi.n	1715a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x176>
   1717c:	2000      	movs	r0, #0
   1717e:	b00b      	add	sp, #44	; 0x2c
   17180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17184:	f64f 70c8 	movw	r0, #65480	; 0xffc8
   17188:	f2c0 0001 	movt	r0, #1
   1718c:	9a01      	ldr	r2, [sp, #4]
   1718e:	f7ff fc47 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   17192:	defe      	udf	#254	; 0xfe
   17194:	f64f 70d8 	movw	r0, #65496	; 0xffd8
   17198:	f2c0 0001 	movt	r0, #1
   1719c:	9a01      	ldr	r2, [sp, #4]
   1719e:	f7ff fc3f 	bl	16a20 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   171a2:	defe      	udf	#254	; 0xfe

000171a4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>:
   171a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171a8:	b083      	sub	sp, #12
   171aa:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
   171ae:	469a      	mov	sl, r3
   171b0:	4604      	mov	r4, r0
   171b2:	b1e1      	cbz	r1, 171ee <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x4a>
   171b4:	f8d4 e000 	ldr.w	lr, [r4]
   171b8:	f04f 082b 	mov.w	r8, #43	; 0x2b
   171bc:	f01e 0101 	ands.w	r1, lr, #1
   171c0:	bf08      	it	eq
   171c2:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
   171c6:	eb01 0907 	add.w	r9, r1, r7
   171ca:	ea5f 714e 	movs.w	r1, lr, lsl #29
   171ce:	d517      	bpl.n	17200 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x5c>
   171d0:	f1ba 0f00 	cmp.w	sl, #0
   171d4:	d033      	beq.n	1723e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9a>
   171d6:	f1aa 0101 	sub.w	r1, sl, #1
   171da:	f00a 0c03 	and.w	ip, sl, #3
   171de:	2903      	cmp	r1, #3
   171e0:	d22f      	bcs.n	17242 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9e>
   171e2:	2100      	movs	r1, #0
   171e4:	4613      	mov	r3, r2
   171e6:	f1bc 0f00 	cmp.w	ip, #0
   171ea:	d152      	bne.n	17292 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xee>
   171ec:	e069      	b.n	172c2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   171ee:	f8d4 e000 	ldr.w	lr, [r4]
   171f2:	f107 0901 	add.w	r9, r7, #1
   171f6:	f04f 082d 	mov.w	r8, #45	; 0x2d
   171fa:	ea5f 714e 	movs.w	r1, lr, lsl #29
   171fe:	d4e7      	bmi.n	171d0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x2c>
   17200:	f04f 0a00 	mov.w	sl, #0
   17204:	2200      	movs	r2, #0
   17206:	68a0      	ldr	r0, [r4, #8]
   17208:	2801      	cmp	r0, #1
   1720a:	d161      	bne.n	172d0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   1720c:	f8d4 b00c 	ldr.w	fp, [r4, #12]
   17210:	45cb      	cmp	fp, r9
   17212:	d95d      	bls.n	172d0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   17214:	ea5f 700e 	movs.w	r0, lr, lsl #28
   17218:	d46e      	bmi.n	172f8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x154>
   1721a:	9202      	str	r2, [sp, #8]
   1721c:	ebab 0109 	sub.w	r1, fp, r9
   17220:	f894 2020 	ldrb.w	r2, [r4, #32]
   17224:	2000      	movs	r0, #0
   17226:	46a9      	mov	r9, r5
   17228:	460e      	mov	r6, r1
   1722a:	2a03      	cmp	r2, #3
   1722c:	bf08      	it	eq
   1722e:	2201      	moveq	r2, #1
   17230:	e8df f002 	tbb	[pc, r2]
   17234:	02840287 	.word	0x02840287
   17238:	2600      	movs	r6, #0
   1723a:	4608      	mov	r0, r1
   1723c:	e081      	b.n	17342 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x19e>
   1723e:	2100      	movs	r1, #0
   17240:	e03f      	b.n	172c2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   17242:	ebac 060a 	sub.w	r6, ip, sl
   17246:	2100      	movs	r1, #0
   17248:	4693      	mov	fp, r2
   1724a:	4613      	mov	r3, r2
   1724c:	e9cd 7501 	strd	r7, r5, [sp, #4]
   17250:	781a      	ldrb	r2, [r3, #0]
   17252:	785d      	ldrb	r5, [r3, #1]
   17254:	7898      	ldrb	r0, [r3, #2]
   17256:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1725a:	78df      	ldrb	r7, [r3, #3]
   1725c:	2a80      	cmp	r2, #128	; 0x80
   1725e:	f005 02c0 	and.w	r2, r5, #192	; 0xc0
   17262:	bf08      	it	eq
   17264:	3101      	addeq	r1, #1
   17266:	2a80      	cmp	r2, #128	; 0x80
   17268:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   1726c:	bf08      	it	eq
   1726e:	3101      	addeq	r1, #1
   17270:	2880      	cmp	r0, #128	; 0x80
   17272:	f007 00c0 	and.w	r0, r7, #192	; 0xc0
   17276:	bf08      	it	eq
   17278:	3101      	addeq	r1, #1
   1727a:	2880      	cmp	r0, #128	; 0x80
   1727c:	bf08      	it	eq
   1727e:	3101      	addeq	r1, #1
   17280:	3304      	adds	r3, #4
   17282:	3604      	adds	r6, #4
   17284:	d1e4      	bne.n	17250 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xac>
   17286:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   1728a:	465a      	mov	r2, fp
   1728c:	f1bc 0f00 	cmp.w	ip, #0
   17290:	d017      	beq.n	172c2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   17292:	7818      	ldrb	r0, [r3, #0]
   17294:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   17298:	2880      	cmp	r0, #128	; 0x80
   1729a:	bf08      	it	eq
   1729c:	3101      	addeq	r1, #1
   1729e:	f1bc 0f01 	cmp.w	ip, #1
   172a2:	d00e      	beq.n	172c2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   172a4:	7858      	ldrb	r0, [r3, #1]
   172a6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   172aa:	2880      	cmp	r0, #128	; 0x80
   172ac:	bf08      	it	eq
   172ae:	3101      	addeq	r1, #1
   172b0:	f1bc 0f02 	cmp.w	ip, #2
   172b4:	d005      	beq.n	172c2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   172b6:	7898      	ldrb	r0, [r3, #2]
   172b8:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   172bc:	2880      	cmp	r0, #128	; 0x80
   172be:	bf08      	it	eq
   172c0:	3101      	addeq	r1, #1
   172c2:	eb09 000a 	add.w	r0, r9, sl
   172c6:	eba0 0901 	sub.w	r9, r0, r1
   172ca:	68a0      	ldr	r0, [r4, #8]
   172cc:	2801      	cmp	r0, #1
   172ce:	d09d      	beq.n	1720c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x68>
   172d0:	4620      	mov	r0, r4
   172d2:	4641      	mov	r1, r8
   172d4:	4653      	mov	r3, sl
   172d6:	f000 f893 	bl	17400 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   172da:	b120      	cbz	r0, 172e6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x142>
   172dc:	2601      	movs	r6, #1
   172de:	4630      	mov	r0, r6
   172e0:	b003      	add	sp, #12
   172e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172e6:	69e1      	ldr	r1, [r4, #28]
   172e8:	463a      	mov	r2, r7
   172ea:	69a0      	ldr	r0, [r4, #24]
   172ec:	68cb      	ldr	r3, [r1, #12]
   172ee:	4629      	mov	r1, r5
   172f0:	b003      	add	sp, #12
   172f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172f6:	4718      	bx	r3
   172f8:	6860      	ldr	r0, [r4, #4]
   172fa:	2601      	movs	r6, #1
   172fc:	9002      	str	r0, [sp, #8]
   172fe:	2030      	movs	r0, #48	; 0x30
   17300:	f894 1020 	ldrb.w	r1, [r4, #32]
   17304:	4653      	mov	r3, sl
   17306:	6060      	str	r0, [r4, #4]
   17308:	4620      	mov	r0, r4
   1730a:	9101      	str	r1, [sp, #4]
   1730c:	4641      	mov	r1, r8
   1730e:	f884 6020 	strb.w	r6, [r4, #32]
   17312:	f000 f875 	bl	17400 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   17316:	2800      	cmp	r0, #0
   17318:	d1e1      	bne.n	172de <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   1731a:	f894 2020 	ldrb.w	r2, [r4, #32]
   1731e:	ebab 0109 	sub.w	r1, fp, r9
   17322:	2000      	movs	r0, #0
   17324:	46a9      	mov	r9, r5
   17326:	2a03      	cmp	r2, #3
   17328:	bf08      	it	eq
   1732a:	2201      	moveq	r2, #1
   1732c:	460e      	mov	r6, r1
   1732e:	e8df f002 	tbb	[pc, r2]
   17332:	0235      	.short	0x0235
   17334:	0232      	.short	0x0232
   17336:	2600      	movs	r6, #0
   17338:	4608      	mov	r0, r1
   1733a:	e02f      	b.n	1739c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1f8>
   1733c:	0848      	lsrs	r0, r1, #1
   1733e:	3101      	adds	r1, #1
   17340:	084e      	lsrs	r6, r1, #1
   17342:	1c45      	adds	r5, r0, #1
   17344:	3d01      	subs	r5, #1
   17346:	d007      	beq.n	17358 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1b4>
   17348:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   1734c:	6861      	ldr	r1, [r4, #4]
   1734e:	6912      	ldr	r2, [r2, #16]
   17350:	4790      	blx	r2
   17352:	2800      	cmp	r0, #0
   17354:	d0f6      	beq.n	17344 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1a0>
   17356:	e7c1      	b.n	172dc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   17358:	9a02      	ldr	r2, [sp, #8]
   1735a:	4620      	mov	r0, r4
   1735c:	4641      	mov	r1, r8
   1735e:	4653      	mov	r3, sl
   17360:	f8d4 b004 	ldr.w	fp, [r4, #4]
   17364:	f000 f84c 	bl	17400 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   17368:	2800      	cmp	r0, #0
   1736a:	d1b7      	bne.n	172dc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   1736c:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   17370:	463a      	mov	r2, r7
   17372:	68cb      	ldr	r3, [r1, #12]
   17374:	4649      	mov	r1, r9
   17376:	4798      	blx	r3
   17378:	2800      	cmp	r0, #0
   1737a:	d1af      	bne.n	172dc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   1737c:	e9d4 5406 	ldrd	r5, r4, [r4, #24]
   17380:	1c77      	adds	r7, r6, #1
   17382:	2601      	movs	r6, #1
   17384:	3f01      	subs	r7, #1
   17386:	d02c      	beq.n	173e2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x23e>
   17388:	6922      	ldr	r2, [r4, #16]
   1738a:	4628      	mov	r0, r5
   1738c:	4659      	mov	r1, fp
   1738e:	4790      	blx	r2
   17390:	2800      	cmp	r0, #0
   17392:	d0f7      	beq.n	17384 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1e0>
   17394:	e7a3      	b.n	172de <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   17396:	0848      	lsrs	r0, r1, #1
   17398:	3101      	adds	r1, #1
   1739a:	084e      	lsrs	r6, r1, #1
   1739c:	1c45      	adds	r5, r0, #1
   1739e:	3d01      	subs	r5, #1
   173a0:	d007      	beq.n	173b2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x20e>
   173a2:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   173a6:	6861      	ldr	r1, [r4, #4]
   173a8:	6912      	ldr	r2, [r2, #16]
   173aa:	4790      	blx	r2
   173ac:	2800      	cmp	r0, #0
   173ae:	d0f6      	beq.n	1739e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1fa>
   173b0:	e794      	b.n	172dc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   173b2:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   173b6:	463a      	mov	r2, r7
   173b8:	68cb      	ldr	r3, [r1, #12]
   173ba:	4649      	mov	r1, r9
   173bc:	f8d4 8004 	ldr.w	r8, [r4, #4]
   173c0:	4798      	blx	r3
   173c2:	2800      	cmp	r0, #0
   173c4:	f47f af8a 	bne.w	172dc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   173c8:	e9d4 9506 	ldrd	r9, r5, [r4, #24]
   173cc:	1c77      	adds	r7, r6, #1
   173ce:	2601      	movs	r6, #1
   173d0:	3f01      	subs	r7, #1
   173d2:	d00b      	beq.n	173ec <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x248>
   173d4:	692a      	ldr	r2, [r5, #16]
   173d6:	4648      	mov	r0, r9
   173d8:	4641      	mov	r1, r8
   173da:	4790      	blx	r2
   173dc:	2800      	cmp	r0, #0
   173de:	d0f7      	beq.n	173d0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x22c>
   173e0:	e77d      	b.n	172de <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   173e2:	2600      	movs	r6, #0
   173e4:	4630      	mov	r0, r6
   173e6:	b003      	add	sp, #12
   173e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173ec:	9801      	ldr	r0, [sp, #4]
   173ee:	2600      	movs	r6, #0
   173f0:	f884 0020 	strb.w	r0, [r4, #32]
   173f4:	9802      	ldr	r0, [sp, #8]
   173f6:	6060      	str	r0, [r4, #4]
   173f8:	4630      	mov	r0, r6
   173fa:	b003      	add	sp, #12
   173fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017400 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>:
   17400:	b570      	push	{r4, r5, r6, lr}
   17402:	461c      	mov	r4, r3
   17404:	4615      	mov	r5, r2
   17406:	4606      	mov	r6, r0
   17408:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
   1740c:	d006      	beq.n	1741c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   1740e:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
   17412:	6912      	ldr	r2, [r2, #16]
   17414:	4790      	blx	r2
   17416:	b108      	cbz	r0, 1741c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   17418:	2001      	movs	r0, #1
   1741a:	bd70      	pop	{r4, r5, r6, pc}
   1741c:	b13d      	cbz	r5, 1742e <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x2e>
   1741e:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
   17422:	4622      	mov	r2, r4
   17424:	68cb      	ldr	r3, [r1, #12]
   17426:	4629      	mov	r1, r5
   17428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1742c:	4718      	bx	r3
   1742e:	2000      	movs	r0, #0
   17430:	bd70      	pop	{r4, r5, r6, pc}
	...

00017434 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>:
   17434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17438:	b081      	sub	sp, #4
   1743a:	f8d0 e008 	ldr.w	lr, [r0, #8]
   1743e:	4682      	mov	sl, r0
   17440:	6900      	ldr	r0, [r0, #16]
   17442:	4691      	mov	r9, r2
   17444:	4688      	mov	r8, r1
   17446:	f1be 0f01 	cmp.w	lr, #1
   1744a:	d111      	bne.n	17470 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x3c>
   1744c:	2801      	cmp	r0, #1
   1744e:	d012      	beq.n	17476 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x42>
   17450:	f1b9 0f00 	cmp.w	r9, #0
   17454:	f000 80c5 	beq.w	175e2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1ae>
   17458:	f1a9 0101 	sub.w	r1, r9, #1
   1745c:	f009 0003 	and.w	r0, r9, #3
   17460:	2903      	cmp	r1, #3
   17462:	d267      	bcs.n	17534 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x100>
   17464:	2100      	movs	r1, #0
   17466:	4642      	mov	r2, r8
   17468:	2800      	cmp	r0, #0
   1746a:	f040 8083 	bne.w	17574 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x140>
   1746e:	e097      	b.n	175a0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   17470:	2801      	cmp	r0, #1
   17472:	f040 80bd 	bne.w	175f0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   17476:	f1b9 0f00 	cmp.w	r9, #0
   1747a:	d054      	beq.n	17526 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xf2>
   1747c:	f8da 0014 	ldr.w	r0, [sl, #20]
   17480:	eb08 0109 	add.w	r1, r8, r9
   17484:	2200      	movs	r2, #0
   17486:	4647      	mov	r7, r8
   17488:	1c43      	adds	r3, r0, #1
   1748a:	4646      	mov	r6, r8
   1748c:	463c      	mov	r4, r7
   1748e:	f914 5b01 	ldrsb.w	r5, [r4], #1
   17492:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   17496:	b2e8      	uxtb	r0, r5
   17498:	dc2e      	bgt.n	174f8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   1749a:	428c      	cmp	r4, r1
   1749c:	d01a      	beq.n	174d4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xa0>
   1749e:	787d      	ldrb	r5, [r7, #1]
   174a0:	1cbc      	adds	r4, r7, #2
   174a2:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   174a6:	4627      	mov	r7, r4
   174a8:	f000 0b1f 	and.w	fp, r0, #31
   174ac:	28df      	cmp	r0, #223	; 0xdf
   174ae:	d917      	bls.n	174e0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xac>
   174b0:	428f      	cmp	r7, r1
   174b2:	d018      	beq.n	174e6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xb2>
   174b4:	f817 4b01 	ldrb.w	r4, [r7], #1
   174b8:	f004 0c3f 	and.w	ip, r4, #63	; 0x3f
   174bc:	463c      	mov	r4, r7
   174be:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   174c2:	28f0      	cmp	r0, #240	; 0xf0
   174c4:	d316      	bcc.n	174f4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc0>
   174c6:	428f      	cmp	r7, r1
   174c8:	d020      	beq.n	1750c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xd8>
   174ca:	f817 0b01 	ldrb.w	r0, [r7], #1
   174ce:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   174d2:	e01d      	b.n	17510 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xdc>
   174d4:	2500      	movs	r5, #0
   174d6:	460f      	mov	r7, r1
   174d8:	f000 0b1f 	and.w	fp, r0, #31
   174dc:	28df      	cmp	r0, #223	; 0xdf
   174de:	d8e7      	bhi.n	174b0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x7c>
   174e0:	ea45 108b 	orr.w	r0, r5, fp, lsl #6
   174e4:	e008      	b.n	174f8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   174e6:	f04f 0c00 	mov.w	ip, #0
   174ea:	460f      	mov	r7, r1
   174ec:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   174f0:	28f0      	cmp	r0, #240	; 0xf0
   174f2:	d2e8      	bcs.n	174c6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x92>
   174f4:	ea45 300b 	orr.w	r0, r5, fp, lsl #12
   174f8:	4627      	mov	r7, r4
   174fa:	3b01      	subs	r3, #1
   174fc:	d065      	beq.n	175ca <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x196>
   174fe:	1b90      	subs	r0, r2, r6
   17500:	42b9      	cmp	r1, r7
   17502:	eb00 0207 	add.w	r2, r0, r7
   17506:	463e      	mov	r6, r7
   17508:	d1c0      	bne.n	1748c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x58>
   1750a:	e061      	b.n	175d0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   1750c:	2000      	movs	r0, #0
   1750e:	4627      	mov	r7, r4
   17510:	f44f 14e0 	mov.w	r4, #1835008	; 0x1c0000
   17514:	ea04 448b 	and.w	r4, r4, fp, lsl #18
   17518:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   1751c:	4428      	add	r0, r5
   1751e:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   17522:	d1ea      	bne.n	174fa <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc6>
   17524:	e054      	b.n	175d0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   17526:	2200      	movs	r2, #0
   17528:	f1be 0f01 	cmp.w	lr, #1
   1752c:	d054      	beq.n	175d8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   1752e:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   17532:	e062      	b.n	175fa <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1c6>
   17534:	eba0 0309 	sub.w	r3, r0, r9
   17538:	2100      	movs	r1, #0
   1753a:	4642      	mov	r2, r8
   1753c:	7817      	ldrb	r7, [r2, #0]
   1753e:	7856      	ldrb	r6, [r2, #1]
   17540:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
   17544:	7895      	ldrb	r5, [r2, #2]
   17546:	78d4      	ldrb	r4, [r2, #3]
   17548:	2f80      	cmp	r7, #128	; 0x80
   1754a:	f006 07c0 	and.w	r7, r6, #192	; 0xc0
   1754e:	bf08      	it	eq
   17550:	3101      	addeq	r1, #1
   17552:	2f80      	cmp	r7, #128	; 0x80
   17554:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
   17558:	bf08      	it	eq
   1755a:	3101      	addeq	r1, #1
   1755c:	2f80      	cmp	r7, #128	; 0x80
   1755e:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   17562:	bf08      	it	eq
   17564:	3101      	addeq	r1, #1
   17566:	2f80      	cmp	r7, #128	; 0x80
   17568:	bf08      	it	eq
   1756a:	3101      	addeq	r1, #1
   1756c:	3204      	adds	r2, #4
   1756e:	3304      	adds	r3, #4
   17570:	d1e4      	bne.n	1753c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x108>
   17572:	b1a8      	cbz	r0, 175a0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   17574:	7813      	ldrb	r3, [r2, #0]
   17576:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1757a:	2b80      	cmp	r3, #128	; 0x80
   1757c:	bf08      	it	eq
   1757e:	3101      	addeq	r1, #1
   17580:	2801      	cmp	r0, #1
   17582:	d00d      	beq.n	175a0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   17584:	7853      	ldrb	r3, [r2, #1]
   17586:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1758a:	2b80      	cmp	r3, #128	; 0x80
   1758c:	bf08      	it	eq
   1758e:	3101      	addeq	r1, #1
   17590:	2802      	cmp	r0, #2
   17592:	d005      	beq.n	175a0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   17594:	7890      	ldrb	r0, [r2, #2]
   17596:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   1759a:	2880      	cmp	r0, #128	; 0x80
   1759c:	bf08      	it	eq
   1759e:	3101      	addeq	r1, #1
   175a0:	f8da 000c 	ldr.w	r0, [sl, #12]
   175a4:	eba9 0101 	sub.w	r1, r9, r1
   175a8:	4281      	cmp	r1, r0
   175aa:	d221      	bcs.n	175f0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   175ac:	f1b9 0f00 	cmp.w	r9, #0
   175b0:	d029      	beq.n	17606 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d2>
   175b2:	f1a9 0101 	sub.w	r1, r9, #1
   175b6:	f009 0c03 	and.w	ip, r9, #3
   175ba:	2903      	cmp	r1, #3
   175bc:	d225      	bcs.n	1760a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d6>
   175be:	2100      	movs	r1, #0
   175c0:	4643      	mov	r3, r8
   175c2:	f1bc 0f00 	cmp.w	ip, #0
   175c6:	d142      	bne.n	1764e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x21a>
   175c8:	e059      	b.n	1767e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   175ca:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   175ce:	d167      	bne.n	176a0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x26c>
   175d0:	464a      	mov	r2, r9
   175d2:	f1be 0f01 	cmp.w	lr, #1
   175d6:	d1aa      	bne.n	1752e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   175d8:	4691      	mov	r9, r2
   175da:	f1b9 0f00 	cmp.w	r9, #0
   175de:	f47f af3b 	bne.w	17458 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24>
   175e2:	2100      	movs	r1, #0
   175e4:	f8da 000c 	ldr.w	r0, [sl, #12]
   175e8:	eba9 0101 	sub.w	r1, r9, r1
   175ec:	4281      	cmp	r1, r0
   175ee:	d3dd      	bcc.n	175ac <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x178>
   175f0:	f8da 101c 	ldr.w	r1, [sl, #28]
   175f4:	464a      	mov	r2, r9
   175f6:	f8da 0018 	ldr.w	r0, [sl, #24]
   175fa:	68cb      	ldr	r3, [r1, #12]
   175fc:	4641      	mov	r1, r8
   175fe:	b001      	add	sp, #4
   17600:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17604:	4718      	bx	r3
   17606:	2100      	movs	r1, #0
   17608:	e039      	b.n	1767e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   1760a:	ebac 0709 	sub.w	r7, ip, r9
   1760e:	2100      	movs	r1, #0
   17610:	4643      	mov	r3, r8
   17612:	781e      	ldrb	r6, [r3, #0]
   17614:	785d      	ldrb	r5, [r3, #1]
   17616:	f006 06c0 	and.w	r6, r6, #192	; 0xc0
   1761a:	789c      	ldrb	r4, [r3, #2]
   1761c:	78da      	ldrb	r2, [r3, #3]
   1761e:	2e80      	cmp	r6, #128	; 0x80
   17620:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   17624:	bf08      	it	eq
   17626:	3101      	addeq	r1, #1
   17628:	2e80      	cmp	r6, #128	; 0x80
   1762a:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
   1762e:	bf08      	it	eq
   17630:	3101      	addeq	r1, #1
   17632:	2e80      	cmp	r6, #128	; 0x80
   17634:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   17638:	bf08      	it	eq
   1763a:	3101      	addeq	r1, #1
   1763c:	2a80      	cmp	r2, #128	; 0x80
   1763e:	bf08      	it	eq
   17640:	3101      	addeq	r1, #1
   17642:	3304      	adds	r3, #4
   17644:	3704      	adds	r7, #4
   17646:	d1e4      	bne.n	17612 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1de>
   17648:	f1bc 0f00 	cmp.w	ip, #0
   1764c:	d017      	beq.n	1767e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   1764e:	781a      	ldrb	r2, [r3, #0]
   17650:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   17654:	2a80      	cmp	r2, #128	; 0x80
   17656:	bf08      	it	eq
   17658:	3101      	addeq	r1, #1
   1765a:	f1bc 0f01 	cmp.w	ip, #1
   1765e:	d00e      	beq.n	1767e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   17660:	785a      	ldrb	r2, [r3, #1]
   17662:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   17666:	2a80      	cmp	r2, #128	; 0x80
   17668:	bf08      	it	eq
   1766a:	3101      	addeq	r1, #1
   1766c:	f1bc 0f02 	cmp.w	ip, #2
   17670:	d005      	beq.n	1767e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   17672:	789a      	ldrb	r2, [r3, #2]
   17674:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   17678:	2a80      	cmp	r2, #128	; 0x80
   1767a:	bf08      	it	eq
   1767c:	3101      	addeq	r1, #1
   1767e:	f89a 3020 	ldrb.w	r3, [sl, #32]
   17682:	eba1 0109 	sub.w	r1, r1, r9
   17686:	4401      	add	r1, r0
   17688:	2000      	movs	r0, #0
   1768a:	1eda      	subs	r2, r3, #3
   1768c:	bf18      	it	ne
   1768e:	461a      	movne	r2, r3
   17690:	460e      	mov	r6, r1
   17692:	e8df f002 	tbb	[pc, r2]
   17696:	0216      	.short	0x0216
   17698:	0213      	.short	0x0213
   1769a:	2600      	movs	r6, #0
   1769c:	4608      	mov	r0, r1
   1769e:	e010      	b.n	176c2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x28e>
   176a0:	2a00      	cmp	r2, #0
   176a2:	bf18      	it	ne
   176a4:	454a      	cmpne	r2, r9
   176a6:	d134      	bne.n	17712 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2de>
   176a8:	4640      	mov	r0, r8
   176aa:	2800      	cmp	r0, #0
   176ac:	bf0c      	ite	eq
   176ae:	464a      	moveq	r2, r9
   176b0:	4680      	movne	r8, r0
   176b2:	f1be 0f01 	cmp.w	lr, #1
   176b6:	f43f af8f 	beq.w	175d8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   176ba:	e738      	b.n	1752e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   176bc:	0848      	lsrs	r0, r1, #1
   176be:	3101      	adds	r1, #1
   176c0:	084e      	lsrs	r6, r1, #1
   176c2:	1c44      	adds	r4, r0, #1
   176c4:	3c01      	subs	r4, #1
   176c6:	d008      	beq.n	176da <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2a6>
   176c8:	e9da 0206 	ldrd	r0, r2, [sl, #24]
   176cc:	f8da 1004 	ldr.w	r1, [sl, #4]
   176d0:	6912      	ldr	r2, [r2, #16]
   176d2:	4790      	blx	r2
   176d4:	2800      	cmp	r0, #0
   176d6:	d0f5      	beq.n	176c4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x290>
   176d8:	e013      	b.n	17702 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   176da:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   176de:	464a      	mov	r2, r9
   176e0:	68cb      	ldr	r3, [r1, #12]
   176e2:	4641      	mov	r1, r8
   176e4:	f8da 7004 	ldr.w	r7, [sl, #4]
   176e8:	4798      	blx	r3
   176ea:	b950      	cbnz	r0, 17702 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   176ec:	e9da 4506 	ldrd	r4, r5, [sl, #24]
   176f0:	3601      	adds	r6, #1
   176f2:	3e01      	subs	r6, #1
   176f4:	d009      	beq.n	1770a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2d6>
   176f6:	692a      	ldr	r2, [r5, #16]
   176f8:	4620      	mov	r0, r4
   176fa:	4639      	mov	r1, r7
   176fc:	4790      	blx	r2
   176fe:	2800      	cmp	r0, #0
   17700:	d0f7      	beq.n	176f2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2be>
   17702:	2001      	movs	r0, #1
   17704:	b001      	add	sp, #4
   17706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1770a:	2000      	movs	r0, #0
   1770c:	b001      	add	sp, #4
   1770e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17712:	454a      	cmp	r2, r9
   17714:	d204      	bcs.n	17720 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ec>
   17716:	f918 0002 	ldrsb.w	r0, [r8, r2]
   1771a:	f110 0f40 	cmn.w	r0, #64	; 0x40
   1771e:	dac3      	bge.n	176a8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x274>
   17720:	2000      	movs	r0, #0
   17722:	2200      	movs	r2, #0
   17724:	2800      	cmp	r0, #0
   17726:	bf0c      	ite	eq
   17728:	464a      	moveq	r2, r9
   1772a:	4680      	movne	r8, r0
   1772c:	f1be 0f01 	cmp.w	lr, #1
   17730:	f43f af52 	beq.w	175d8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   17734:	e6fb      	b.n	1752e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>

00017736 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>:
   17736:	7800      	ldrb	r0, [r0, #0]
   17738:	f3c0 1000 	ubfx	r0, r0, #4, #1
   1773c:	4770      	bx	lr

0001773e <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>:
   1773e:	7800      	ldrb	r0, [r0, #0]
   17740:	f3c0 1040 	ubfx	r0, r0, #5, #1
   17744:	4770      	bx	lr

00017746 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>:
   17746:	b570      	push	{r4, r5, r6, lr}
   17748:	460d      	mov	r5, r1
   1774a:	4606      	mov	r6, r0
   1774c:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   17750:	461c      	mov	r4, r3
   17752:	68cb      	ldr	r3, [r1, #12]
   17754:	4611      	mov	r1, r2
   17756:	4622      	mov	r2, r4
   17758:	4798      	blx	r3
   1775a:	7230      	strb	r0, [r6, #8]
   1775c:	fab4 f084 	clz	r0, r4
   17760:	0940      	lsrs	r0, r0, #5
   17762:	7270      	strb	r0, [r6, #9]
   17764:	2000      	movs	r0, #0
   17766:	e9c6 5000 	strd	r5, r0, [r6]
   1776a:	bd70      	pop	{r4, r5, r6, pc}

0001776c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E>:
   1776c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17770:	b085      	sub	sp, #20
   17772:	460c      	mov	r4, r1
   17774:	4605      	mov	r5, r0
   17776:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   1777a:	690a      	ldr	r2, [r1, #16]
   1777c:	2127      	movs	r1, #39	; 0x27
   1777e:	4790      	blx	r2
   17780:	b118      	cbz	r0, 1778a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x1e>
   17782:	2001      	movs	r0, #1
   17784:	b005      	add	sp, #20
   17786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1778a:	6829      	ldr	r1, [r5, #0]
   1778c:	a801      	add	r0, sp, #4
   1778e:	2201      	movs	r2, #1
   17790:	f7ff f85c 	bl	1684c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>
   17794:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   17798:	f04f 091c 	mov.w	r9, #28
   1779c:	f8dd 800c 	ldr.w	r8, [sp, #12]
   177a0:	f5b5 1f88 	cmp.w	r5, #1114112	; 0x110000
   177a4:	f89d 6010 	ldrb.w	r6, [sp, #16]
   177a8:	d139      	bne.n	1781e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xb2>
   177aa:	f44f 1588 	mov.w	r5, #1114112	; 0x110000
   177ae:	2f02      	cmp	r7, #2
   177b0:	f0c0 806b 	bcc.w	1788a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x11e>
   177b4:	d00c      	beq.n	177d0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x64>
   177b6:	b2f0      	uxtb	r0, r6
   177b8:	2604      	movs	r6, #4
   177ba:	2703      	movs	r7, #3
   177bc:	215c      	movs	r1, #92	; 0x5c
   177be:	e8df f000 	tbb	[pc, r0]
   177c2:	0364      	.short	0x0364
   177c4:	09242010 	.word	0x09242010
   177c8:	2600      	movs	r6, #0
   177ca:	2703      	movs	r7, #3
   177cc:	217d      	movs	r1, #125	; 0x7d
   177ce:	e001      	b.n	177d4 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   177d0:	2701      	movs	r7, #1
   177d2:	215c      	movs	r1, #92	; 0x5c
   177d4:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   177d8:	6912      	ldr	r2, [r2, #16]
   177da:	4790      	blx	r2
   177dc:	2800      	cmp	r0, #0
   177de:	d0e6      	beq.n	177ae <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x42>
   177e0:	e7cf      	b.n	17782 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   177e2:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   177e6:	2602      	movs	r6, #2
   177e8:	2703      	movs	r7, #3
   177ea:	f1b8 0f00 	cmp.w	r8, #0
   177ee:	fa25 f100 	lsr.w	r1, r5, r0
   177f2:	bf08      	it	eq
   177f4:	2601      	moveq	r6, #1
   177f6:	bf18      	it	ne
   177f8:	f1a8 0801 	subne.w	r8, r8, #1
   177fc:	f367 111f 	bfi	r1, r7, #4, #28
   17800:	e7e8      	b.n	177d4 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   17802:	2602      	movs	r6, #2
   17804:	2703      	movs	r7, #3
   17806:	217b      	movs	r1, #123	; 0x7b
   17808:	e7e4      	b.n	177d4 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   1780a:	2703      	movs	r7, #3
   1780c:	2175      	movs	r1, #117	; 0x75
   1780e:	2603      	movs	r6, #3
   17810:	e7e0      	b.n	177d4 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   17812:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   17816:	6912      	ldr	r2, [r2, #16]
   17818:	4790      	blx	r2
   1781a:	2800      	cmp	r0, #0
   1781c:	d1b1      	bne.n	17782 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   1781e:	4638      	mov	r0, r7
   17820:	2701      	movs	r7, #1
   17822:	215c      	movs	r1, #92	; 0x5c
   17824:	e8df f000 	tbb	[pc, r0]
   17828:	06020331 	.word	0x06020331
   1782c:	e7f1      	b.n	17812 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1782e:	2700      	movs	r7, #0
   17830:	4629      	mov	r1, r5
   17832:	e7ee      	b.n	17812 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   17834:	b2f0      	uxtb	r0, r6
   17836:	2604      	movs	r6, #4
   17838:	2703      	movs	r7, #3
   1783a:	215c      	movs	r1, #92	; 0x5c
   1783c:	e8df f000 	tbb	[pc, r0]
   17840:	1d080425 	.word	0x1d080425
   17844:	0321      	.short	0x0321
   17846:	e7e4      	b.n	17812 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   17848:	2600      	movs	r6, #0
   1784a:	2703      	movs	r7, #3
   1784c:	217d      	movs	r1, #125	; 0x7d
   1784e:	e7e0      	b.n	17812 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   17850:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   17854:	2602      	movs	r6, #2
   17856:	2703      	movs	r7, #3
   17858:	fa25 f000 	lsr.w	r0, r5, r0
   1785c:	f000 000f 	and.w	r0, r0, #15
   17860:	f100 0157 	add.w	r1, r0, #87	; 0x57
   17864:	280a      	cmp	r0, #10
   17866:	bf38      	it	cc
   17868:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   1786c:	f1b8 0f00 	cmp.w	r8, #0
   17870:	bf0c      	ite	eq
   17872:	2601      	moveq	r6, #1
   17874:	f1a8 0801 	subne.w	r8, r8, #1
   17878:	e7cb      	b.n	17812 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1787a:	2602      	movs	r6, #2
   1787c:	2703      	movs	r7, #3
   1787e:	217b      	movs	r1, #123	; 0x7b
   17880:	e7c7      	b.n	17812 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   17882:	2703      	movs	r7, #3
   17884:	2175      	movs	r1, #117	; 0x75
   17886:	2603      	movs	r6, #3
   17888:	e7c3      	b.n	17812 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1788a:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   1788e:	690a      	ldr	r2, [r1, #16]
   17890:	2127      	movs	r1, #39	; 0x27
   17892:	b005      	add	sp, #20
   17894:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17898:	4710      	bx	r2

0001789a <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>:
   1789a:	b08c      	sub	sp, #48	; 0x30
   1789c:	e9cd 0100 	strd	r0, r1, [sp]
   178a0:	2002      	movs	r0, #2
   178a2:	a908      	add	r1, sp, #32
   178a4:	9007      	str	r0, [sp, #28]
   178a6:	9106      	str	r1, [sp, #24]
   178a8:	2100      	movs	r1, #0
   178aa:	9105      	str	r1, [sp, #20]
   178ac:	e9cd 0103 	strd	r0, r1, [sp, #12]
   178b0:	f240 0028 	movw	r0, #40	; 0x28
   178b4:	f2c0 0002 	movt	r0, #2
   178b8:	a901      	add	r1, sp, #4
   178ba:	9002      	str	r0, [sp, #8]
   178bc:	f248 7075 	movw	r0, #34677	; 0x8775
   178c0:	f2c0 0001 	movt	r0, #1
   178c4:	900b      	str	r0, [sp, #44]	; 0x2c
   178c6:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   178ca:	4668      	mov	r0, sp
   178cc:	f240 0138 	movw	r1, #56	; 0x38
   178d0:	9008      	str	r0, [sp, #32]
   178d2:	a802      	add	r0, sp, #8
   178d4:	f2c0 0102 	movt	r1, #2
   178d8:	f7ff f8c2 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   178dc:	defe      	udf	#254	; 0xfe

000178de <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>:
   178de:	b08c      	sub	sp, #48	; 0x30
   178e0:	e9cd 0100 	strd	r0, r1, [sp]
   178e4:	2002      	movs	r0, #2
   178e6:	a908      	add	r1, sp, #32
   178e8:	9007      	str	r0, [sp, #28]
   178ea:	9106      	str	r1, [sp, #24]
   178ec:	2100      	movs	r1, #0
   178ee:	9105      	str	r1, [sp, #20]
   178f0:	e9cd 0103 	strd	r0, r1, [sp, #12]
   178f4:	f240 006c 	movw	r0, #108	; 0x6c
   178f8:	f2c0 0002 	movt	r0, #2
   178fc:	a901      	add	r1, sp, #4
   178fe:	9002      	str	r0, [sp, #8]
   17900:	f248 7075 	movw	r0, #34677	; 0x8775
   17904:	f2c0 0001 	movt	r0, #1
   17908:	900b      	str	r0, [sp, #44]	; 0x2c
   1790a:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   1790e:	4668      	mov	r0, sp
   17910:	f240 017c 	movw	r1, #124	; 0x7c
   17914:	9008      	str	r0, [sp, #32]
   17916:	a802      	add	r0, sp, #8
   17918:	f2c0 0102 	movt	r1, #2
   1791c:	f7ff f8a0 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17920:	defe      	udf	#254	; 0xfe

00017922 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>:
   17922:	b09a      	sub	sp, #104	; 0x68
   17924:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   17928:	e9cd 2300 	strd	r2, r3, [sp]
   1792c:	d802      	bhi.n	17934 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12>
   1792e:	2501      	movs	r5, #1
   17930:	468c      	mov	ip, r1
   17932:	e03e      	b.n	179b2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   17934:	f1c1 0e00 	rsb	lr, r1, #0
   17938:	f44f 7c80 	mov.w	ip, #256	; 0x100
   1793c:	458c      	cmp	ip, r1
   1793e:	d205      	bcs.n	1794c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2a>
   17940:	f910 400c 	ldrsb.w	r4, [r0, ip]
   17944:	f114 0f41 	cmn.w	r4, #65	; 0x41
   17948:	f300 8108 	bgt.w	17b5c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23a>
   1794c:	eb0e 040c 	add.w	r4, lr, ip
   17950:	f1ac 0601 	sub.w	r6, ip, #1
   17954:	2c01      	cmp	r4, #1
   17956:	d02a      	beq.n	179ae <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   17958:	428e      	cmp	r6, r1
   1795a:	d206      	bcs.n	1796a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x48>
   1795c:	eb00 050c 	add.w	r5, r0, ip
   17960:	f915 5c01 	ldrsb.w	r5, [r5, #-1]
   17964:	f115 0f41 	cmn.w	r5, #65	; 0x41
   17968:	dc21      	bgt.n	179ae <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   1796a:	f1ac 0602 	sub.w	r6, ip, #2
   1796e:	2c02      	cmp	r4, #2
   17970:	d01d      	beq.n	179ae <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   17972:	428e      	cmp	r6, r1
   17974:	d206      	bcs.n	17984 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x62>
   17976:	eb00 050c 	add.w	r5, r0, ip
   1797a:	f915 5c02 	ldrsb.w	r5, [r5, #-2]
   1797e:	f115 0f41 	cmn.w	r5, #65	; 0x41
   17982:	dc14      	bgt.n	179ae <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   17984:	f1ac 0603 	sub.w	r6, ip, #3
   17988:	2c03      	cmp	r4, #3
   1798a:	d010      	beq.n	179ae <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   1798c:	428e      	cmp	r6, r1
   1798e:	d206      	bcs.n	1799e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x7c>
   17990:	eb00 050c 	add.w	r5, r0, ip
   17994:	f915 5c03 	ldrsb.w	r5, [r5, #-3]
   17998:	f115 0f41 	cmn.w	r5, #65	; 0x41
   1799c:	dc07      	bgt.n	179ae <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   1799e:	f1bc 0c04 	subs.w	ip, ip, #4
   179a2:	f04f 0500 	mov.w	r5, #0
   179a6:	d004      	beq.n	179b2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   179a8:	2c04      	cmp	r4, #4
   179aa:	d1c7      	bne.n	1793c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1a>
   179ac:	e001      	b.n	179b2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   179ae:	2500      	movs	r5, #0
   179b0:	46b4      	mov	ip, r6
   179b2:	2605      	movs	r6, #5
   179b4:	2d00      	cmp	r5, #0
   179b6:	f240 154a 	movw	r5, #330	; 0x14a
   179ba:	e9cd 0c02 	strd	r0, ip, [sp, #8]
   179be:	bf18      	it	ne
   179c0:	2600      	movne	r6, #0
   179c2:	9605      	str	r6, [sp, #20]
   179c4:	f64f 4694 	movw	r6, #64660	; 0xfc94
   179c8:	f2c0 0502 	movt	r5, #2
   179cc:	f2c0 0601 	movt	r6, #1
   179d0:	bf18      	it	ne
   179d2:	4635      	movne	r5, r6
   179d4:	428a      	cmp	r2, r1
   179d6:	9504      	str	r5, [sp, #16]
   179d8:	bf98      	it	ls
   179da:	428b      	cmpls	r3, r1
   179dc:	d92a      	bls.n	17a34 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x112>
   179de:	428a      	cmp	r2, r1
   179e0:	f04f 0003 	mov.w	r0, #3
   179e4:	a910      	add	r1, sp, #64	; 0x40
   179e6:	bf88      	it	hi
   179e8:	4613      	movhi	r3, r2
   179ea:	900f      	str	r0, [sp, #60]	; 0x3c
   179ec:	910e      	str	r1, [sp, #56]	; 0x38
   179ee:	2100      	movs	r1, #0
   179f0:	910d      	str	r1, [sp, #52]	; 0x34
   179f2:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   179f6:	f240 1070 	movw	r0, #368	; 0x170
   179fa:	f2c0 0002 	movt	r0, #2
   179fe:	a904      	add	r1, sp, #16
   17a00:	900a      	str	r0, [sp, #40]	; 0x28
   17a02:	f648 0063 	movw	r0, #34915	; 0x8863
   17a06:	f2c0 0001 	movt	r0, #1
   17a0a:	9308      	str	r3, [sp, #32]
   17a0c:	9015      	str	r0, [sp, #84]	; 0x54
   17a0e:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
   17a12:	a802      	add	r0, sp, #8
   17a14:	f240 1188 	movw	r1, #392	; 0x188
   17a18:	9012      	str	r0, [sp, #72]	; 0x48
   17a1a:	f248 7075 	movw	r0, #34677	; 0x8775
   17a1e:	f2c0 0102 	movt	r1, #2
   17a22:	f2c0 0001 	movt	r0, #1
   17a26:	9011      	str	r0, [sp, #68]	; 0x44
   17a28:	a808      	add	r0, sp, #32
   17a2a:	9010      	str	r0, [sp, #64]	; 0x40
   17a2c:	a80a      	add	r0, sp, #40	; 0x28
   17a2e:	f7ff f817 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17a32:	defe      	udf	#254	; 0xfe
   17a34:	429a      	cmp	r2, r3
   17a36:	f200 80f1 	bhi.w	17c1c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2fa>
   17a3a:	2a00      	cmp	r2, #0
   17a3c:	bf18      	it	ne
   17a3e:	4291      	cmpne	r1, r2
   17a40:	d109      	bne.n	17a56 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x134>
   17a42:	461a      	mov	r2, r3
   17a44:	2a00      	cmp	r2, #0
   17a46:	9206      	str	r2, [sp, #24]
   17a48:	bf18      	it	ne
   17a4a:	428a      	cmpne	r2, r1
   17a4c:	d10e      	bne.n	17a6c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x14a>
   17a4e:	4613      	mov	r3, r2
   17a50:	428b      	cmp	r3, r1
   17a52:	d047      	beq.n	17ae4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   17a54:	e052      	b.n	17afc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   17a56:	d9f5      	bls.n	17a44 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x122>
   17a58:	5686      	ldrsb	r6, [r0, r2]
   17a5a:	f116 0f40 	cmn.w	r6, #64	; 0x40
   17a5e:	bfa8      	it	ge
   17a60:	461a      	movge	r2, r3
   17a62:	2a00      	cmp	r2, #0
   17a64:	9206      	str	r2, [sp, #24]
   17a66:	bf18      	it	ne
   17a68:	428a      	cmpne	r2, r1
   17a6a:	d0f0      	beq.n	17a4e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   17a6c:	f1a0 0c01 	sub.w	ip, r0, #1
   17a70:	f101 0e02 	add.w	lr, r1, #2
   17a74:	1ccc      	adds	r4, r1, #3
   17a76:	1c4d      	adds	r5, r1, #1
   17a78:	1d0e      	adds	r6, r1, #4
   17a7a:	428a      	cmp	r2, r1
   17a7c:	d206      	bcs.n	17a8c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x16a>
   17a7e:	eb0c 0302 	add.w	r3, ip, r2
   17a82:	f993 3001 	ldrsb.w	r3, [r3, #1]
   17a86:	f113 0f41 	cmn.w	r3, #65	; 0x41
   17a8a:	dce0      	bgt.n	17a4e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   17a8c:	1e53      	subs	r3, r2, #1
   17a8e:	bf18      	it	ne
   17a90:	4295      	cmpne	r5, r2
   17a92:	d025      	beq.n	17ae0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17a94:	428b      	cmp	r3, r1
   17a96:	d204      	bcs.n	17aa2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x180>
   17a98:	f91c 7002 	ldrsb.w	r7, [ip, r2]
   17a9c:	f117 0f41 	cmn.w	r7, #65	; 0x41
   17aa0:	dc1e      	bgt.n	17ae0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17aa2:	1e93      	subs	r3, r2, #2
   17aa4:	bf18      	it	ne
   17aa6:	4596      	cmpne	lr, r2
   17aa8:	d01a      	beq.n	17ae0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17aaa:	428b      	cmp	r3, r1
   17aac:	d206      	bcs.n	17abc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x19a>
   17aae:	eb0c 0702 	add.w	r7, ip, r2
   17ab2:	f917 7c01 	ldrsb.w	r7, [r7, #-1]
   17ab6:	f117 0f41 	cmn.w	r7, #65	; 0x41
   17aba:	dc11      	bgt.n	17ae0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17abc:	1ed3      	subs	r3, r2, #3
   17abe:	bf18      	it	ne
   17ac0:	4294      	cmpne	r4, r2
   17ac2:	d00d      	beq.n	17ae0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17ac4:	428b      	cmp	r3, r1
   17ac6:	d206      	bcs.n	17ad6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1b4>
   17ac8:	eb0c 0702 	add.w	r7, ip, r2
   17acc:	f917 7c02 	ldrsb.w	r7, [r7, #-2]
   17ad0:	f117 0f41 	cmn.w	r7, #65	; 0x41
   17ad4:	dc04      	bgt.n	17ae0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17ad6:	1f13      	subs	r3, r2, #4
   17ad8:	d002      	beq.n	17ae0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17ada:	4296      	cmp	r6, r2
   17adc:	461a      	mov	r2, r3
   17ade:	d1cc      	bne.n	17a7a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x158>
   17ae0:	428b      	cmp	r3, r1
   17ae2:	d10b      	bne.n	17afc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   17ae4:	f64f 6030 	movw	r0, #65072	; 0xfe30
   17ae8:	f240 12d8 	movw	r2, #472	; 0x1d8
   17aec:	f2c0 0001 	movt	r0, #1
   17af0:	f2c0 0202 	movt	r2, #2
   17af4:	212b      	movs	r1, #43	; 0x2b
   17af6:	f7fe ff7d 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17afa:	defe      	udf	#254	; 0xfe
   17afc:	18c5      	adds	r5, r0, r3
   17afe:	462e      	mov	r6, r5
   17b00:	f916 4b01 	ldrsb.w	r4, [r6], #1
   17b04:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   17b08:	b2e2      	uxtb	r2, r4
   17b0a:	dd02      	ble.n	17b12 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1f0>
   17b0c:	9207      	str	r2, [sp, #28]
   17b0e:	2101      	movs	r1, #1
   17b10:	e04d      	b.n	17bae <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   17b12:	4408      	add	r0, r1
   17b14:	4286      	cmp	r6, r0
   17b16:	d10b      	bne.n	17b30 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x20e>
   17b18:	2500      	movs	r5, #0
   17b1a:	4606      	mov	r6, r0
   17b1c:	f002 011f 	and.w	r1, r2, #31
   17b20:	2adf      	cmp	r2, #223	; 0xdf
   17b22:	d80d      	bhi.n	17b40 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x21e>
   17b24:	ea45 1081 	orr.w	r0, r5, r1, lsl #6
   17b28:	2880      	cmp	r0, #128	; 0x80
   17b2a:	9007      	str	r0, [sp, #28]
   17b2c:	d333      	bcc.n	17b96 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   17b2e:	e034      	b.n	17b9a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   17b30:	7869      	ldrb	r1, [r5, #1]
   17b32:	1cae      	adds	r6, r5, #2
   17b34:	f001 053f 	and.w	r5, r1, #63	; 0x3f
   17b38:	f002 011f 	and.w	r1, r2, #31
   17b3c:	2adf      	cmp	r2, #223	; 0xdf
   17b3e:	d9f1      	bls.n	17b24 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x202>
   17b40:	4286      	cmp	r6, r0
   17b42:	d10d      	bne.n	17b60 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23e>
   17b44:	2400      	movs	r4, #0
   17b46:	4606      	mov	r6, r0
   17b48:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   17b4c:	2af0      	cmp	r2, #240	; 0xf0
   17b4e:	d20f      	bcs.n	17b70 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x24e>
   17b50:	ea45 3001 	orr.w	r0, r5, r1, lsl #12
   17b54:	2880      	cmp	r0, #128	; 0x80
   17b56:	9007      	str	r0, [sp, #28]
   17b58:	d31d      	bcc.n	17b96 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   17b5a:	e01e      	b.n	17b9a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   17b5c:	2500      	movs	r5, #0
   17b5e:	e728      	b.n	179b2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   17b60:	f816 4b01 	ldrb.w	r4, [r6], #1
   17b64:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   17b68:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   17b6c:	2af0      	cmp	r2, #240	; 0xf0
   17b6e:	d3ef      	bcc.n	17b50 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x22e>
   17b70:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   17b74:	ea02 4181 	and.w	r1, r2, r1, lsl #18
   17b78:	4286      	cmp	r6, r0
   17b7a:	bf1a      	itte	ne
   17b7c:	7830      	ldrbne	r0, [r6, #0]
   17b7e:	f000 003f 	andne.w	r0, r0, #63	; 0x3f
   17b82:	2000      	moveq	r0, #0
   17b84:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
   17b88:	4408      	add	r0, r1
   17b8a:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   17b8e:	d0a9      	beq.n	17ae4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   17b90:	2880      	cmp	r0, #128	; 0x80
   17b92:	9007      	str	r0, [sp, #28]
   17b94:	d201      	bcs.n	17b9a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   17b96:	2101      	movs	r1, #1
   17b98:	e009      	b.n	17bae <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   17b9a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   17b9e:	d201      	bcs.n	17ba4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x282>
   17ba0:	2102      	movs	r1, #2
   17ba2:	e004      	b.n	17bae <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   17ba4:	2104      	movs	r1, #4
   17ba6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   17baa:	bf38      	it	cc
   17bac:	2103      	movcc	r1, #3
   17bae:	4419      	add	r1, r3
   17bb0:	aa10      	add	r2, sp, #64	; 0x40
   17bb2:	a808      	add	r0, sp, #32
   17bb4:	e9cd 3108 	strd	r3, r1, [sp, #32]
   17bb8:	2105      	movs	r1, #5
   17bba:	910f      	str	r1, [sp, #60]	; 0x3c
   17bbc:	920e      	str	r2, [sp, #56]	; 0x38
   17bbe:	2200      	movs	r2, #0
   17bc0:	920d      	str	r2, [sp, #52]	; 0x34
   17bc2:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
   17bc6:	f240 2114 	movw	r1, #532	; 0x214
   17bca:	f2c0 0102 	movt	r1, #2
   17bce:	aa04      	add	r2, sp, #16
   17bd0:	910a      	str	r1, [sp, #40]	; 0x28
   17bd2:	f648 0163 	movw	r1, #34915	; 0x8863
   17bd6:	f2c0 0101 	movt	r1, #1
   17bda:	9119      	str	r1, [sp, #100]	; 0x64
   17bdc:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
   17be0:	a902      	add	r1, sp, #8
   17be2:	9116      	str	r1, [sp, #88]	; 0x58
   17be4:	f246 71eb 	movw	r1, #26603	; 0x67eb
   17be8:	f2c0 0101 	movt	r1, #1
   17bec:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   17bf0:	f247 706d 	movw	r0, #30573	; 0x776d
   17bf4:	f2c0 0001 	movt	r0, #1
   17bf8:	f240 213c 	movw	r1, #572	; 0x23c
   17bfc:	9013      	str	r0, [sp, #76]	; 0x4c
   17bfe:	a807      	add	r0, sp, #28
   17c00:	9012      	str	r0, [sp, #72]	; 0x48
   17c02:	f248 7075 	movw	r0, #34677	; 0x8775
   17c06:	f2c0 0001 	movt	r0, #1
   17c0a:	f2c0 0102 	movt	r1, #2
   17c0e:	9011      	str	r0, [sp, #68]	; 0x44
   17c10:	a806      	add	r0, sp, #24
   17c12:	9010      	str	r0, [sp, #64]	; 0x40
   17c14:	a80a      	add	r0, sp, #40	; 0x28
   17c16:	f7fe ff23 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17c1a:	defe      	udf	#254	; 0xfe
   17c1c:	2004      	movs	r0, #4
   17c1e:	a910      	add	r1, sp, #64	; 0x40
   17c20:	900f      	str	r0, [sp, #60]	; 0x3c
   17c22:	910e      	str	r1, [sp, #56]	; 0x38
   17c24:	2100      	movs	r1, #0
   17c26:	910d      	str	r1, [sp, #52]	; 0x34
   17c28:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   17c2c:	f240 10a8 	movw	r0, #424	; 0x1a8
   17c30:	f2c0 0002 	movt	r0, #2
   17c34:	a904      	add	r1, sp, #16
   17c36:	900a      	str	r0, [sp, #40]	; 0x28
   17c38:	f648 0063 	movw	r0, #34915	; 0x8863
   17c3c:	f2c0 0001 	movt	r0, #1
   17c40:	9017      	str	r0, [sp, #92]	; 0x5c
   17c42:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
   17c46:	a802      	add	r0, sp, #8
   17c48:	9014      	str	r0, [sp, #80]	; 0x50
   17c4a:	f248 7075 	movw	r0, #34677	; 0x8775
   17c4e:	a901      	add	r1, sp, #4
   17c50:	f2c0 0001 	movt	r0, #1
   17c54:	9013      	str	r0, [sp, #76]	; 0x4c
   17c56:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
   17c5a:	f240 11c8 	movw	r1, #456	; 0x1c8
   17c5e:	4668      	mov	r0, sp
   17c60:	f2c0 0102 	movt	r1, #2
   17c64:	9010      	str	r0, [sp, #64]	; 0x40
   17c66:	a80a      	add	r0, sp, #40	; 0x28
   17c68:	f7fe fefa 	bl	16a60 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17c6c:	defe      	udf	#254	; 0xfe

00017c6e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>:
   17c6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17c72:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   17c76:	d270      	bcs.n	17d5a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xec>
   17c78:	f240 2e5c 	movw	lr, #604	; 0x25c
   17c7c:	f240 28ae 	movw	r8, #686	; 0x2ae
   17c80:	fa1f f980 	uxth.w	r9, r0
   17c84:	f2c0 0e02 	movt	lr, #2
   17c88:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   17c8c:	f04f 0a00 	mov.w	sl, #0
   17c90:	f2c0 0802 	movt	r8, #2
   17c94:	4675      	mov	r5, lr
   17c96:	786e      	ldrb	r6, [r5, #1]
   17c98:	4652      	mov	r2, sl
   17c9a:	782b      	ldrb	r3, [r5, #0]
   17c9c:	3502      	adds	r5, #2
   17c9e:	44b2      	add	sl, r6
   17ca0:	4563      	cmp	r3, ip
   17ca2:	d129      	bne.n	17cf8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x8a>
   17ca4:	4592      	cmp	sl, r2
   17ca6:	f0c0 8112 	bcc.w	17ece <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   17caa:	ea4f 035a 	mov.w	r3, sl, lsr #1
   17cae:	2b92      	cmp	r3, #146	; 0x92
   17cb0:	f200 8112 	bhi.w	17ed8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x26a>
   17cb4:	eb08 0302 	add.w	r3, r8, r2
   17cb8:	199a      	adds	r2, r3, r6
   17cba:	b31e      	cbz	r6, 17d04 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   17cbc:	461f      	mov	r7, r3
   17cbe:	b2c4      	uxtb	r4, r0
   17cc0:	f817 1b01 	ldrb.w	r1, [r7], #1
   17cc4:	42a1      	cmp	r1, r4
   17cc6:	f000 80b6 	beq.w	17e36 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17cca:	4297      	cmp	r7, r2
   17ccc:	d01a      	beq.n	17d04 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   17cce:	7859      	ldrb	r1, [r3, #1]
   17cd0:	42a1      	cmp	r1, r4
   17cd2:	f000 80b0 	beq.w	17e36 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17cd6:	1c99      	adds	r1, r3, #2
   17cd8:	4291      	cmp	r1, r2
   17cda:	d013      	beq.n	17d04 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   17cdc:	7899      	ldrb	r1, [r3, #2]
   17cde:	42a1      	cmp	r1, r4
   17ce0:	f000 80a9 	beq.w	17e36 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17ce4:	1cd9      	adds	r1, r3, #3
   17ce6:	4291      	cmp	r1, r2
   17ce8:	d00c      	beq.n	17d04 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   17cea:	1d19      	adds	r1, r3, #4
   17cec:	78db      	ldrb	r3, [r3, #3]
   17cee:	3e04      	subs	r6, #4
   17cf0:	42a3      	cmp	r3, r4
   17cf2:	460b      	mov	r3, r1
   17cf4:	d1e1      	bne.n	17cba <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x4c>
   17cf6:	e09e      	b.n	17e36 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17cf8:	d808      	bhi.n	17d0c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   17cfa:	f10e 0252 	add.w	r2, lr, #82	; 0x52
   17cfe:	4295      	cmp	r5, r2
   17d00:	d1c9      	bne.n	17c96 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   17d02:	e003      	b.n	17d0c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   17d04:	f10e 0152 	add.w	r1, lr, #82	; 0x52
   17d08:	428d      	cmp	r5, r1
   17d0a:	d1c4      	bne.n	17c96 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   17d0c:	f240 35d3 	movw	r5, #979	; 0x3d3
   17d10:	2101      	movs	r1, #1
   17d12:	f2c0 0502 	movt	r5, #2
   17d16:	4628      	mov	r0, r5
   17d18:	4602      	mov	r2, r0
   17d1a:	f812 7b01 	ldrb.w	r7, [r2], #1
   17d1e:	b27e      	sxtb	r6, r7
   17d20:	2e00      	cmp	r6, #0
   17d22:	d404      	bmi.n	17d2e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xc0>
   17d24:	4610      	mov	r0, r2
   17d26:	ebb9 0907 	subs.w	r9, r9, r7
   17d2a:	d50f      	bpl.n	17d4c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xde>
   17d2c:	e0bd      	b.n	17eaa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17d2e:	f505 739d 	add.w	r3, r5, #314	; 0x13a
   17d32:	429a      	cmp	r2, r3
   17d34:	f000 80db 	beq.w	17eee <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   17d38:	7842      	ldrb	r2, [r0, #1]
   17d3a:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   17d3e:	3002      	adds	r0, #2
   17d40:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   17d44:	ebb9 0907 	subs.w	r9, r9, r7
   17d48:	f100 80af 	bmi.w	17eaa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17d4c:	f505 729d 	add.w	r2, r5, #314	; 0x13a
   17d50:	f081 0101 	eor.w	r1, r1, #1
   17d54:	4290      	cmp	r0, r2
   17d56:	d1df      	bne.n	17d18 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xaa>
   17d58:	e0a7      	b.n	17eaa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17d5a:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
   17d5e:	d26f      	bcs.n	17e40 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1d2>
   17d60:	f240 5e0d 	movw	lr, #1293	; 0x50d
   17d64:	f240 5853 	movw	r8, #1363	; 0x553
   17d68:	fa1f f980 	uxth.w	r9, r0
   17d6c:	f2c0 0e02 	movt	lr, #2
   17d70:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   17d74:	f04f 0a00 	mov.w	sl, #0
   17d78:	f2c0 0802 	movt	r8, #2
   17d7c:	4675      	mov	r5, lr
   17d7e:	786e      	ldrb	r6, [r5, #1]
   17d80:	4652      	mov	r2, sl
   17d82:	782b      	ldrb	r3, [r5, #0]
   17d84:	3502      	adds	r5, #2
   17d86:	44b2      	add	sl, r6
   17d88:	4563      	cmp	r3, ip
   17d8a:	d125      	bne.n	17dd8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x16a>
   17d8c:	4592      	cmp	sl, r2
   17d8e:	f0c0 809e 	bcc.w	17ece <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   17d92:	f1ba 0fa6 	cmp.w	sl, #166	; 0xa6
   17d96:	f200 80a5 	bhi.w	17ee4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x276>
   17d9a:	eb08 0302 	add.w	r3, r8, r2
   17d9e:	199a      	adds	r2, r3, r6
   17da0:	b306      	cbz	r6, 17de4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   17da2:	461f      	mov	r7, r3
   17da4:	b2c4      	uxtb	r4, r0
   17da6:	f817 1b01 	ldrb.w	r1, [r7], #1
   17daa:	42a1      	cmp	r1, r4
   17dac:	d043      	beq.n	17e36 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17dae:	4297      	cmp	r7, r2
   17db0:	d018      	beq.n	17de4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   17db2:	7859      	ldrb	r1, [r3, #1]
   17db4:	42a1      	cmp	r1, r4
   17db6:	d03e      	beq.n	17e36 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17db8:	1c99      	adds	r1, r3, #2
   17dba:	4291      	cmp	r1, r2
   17dbc:	d012      	beq.n	17de4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   17dbe:	7899      	ldrb	r1, [r3, #2]
   17dc0:	42a1      	cmp	r1, r4
   17dc2:	d038      	beq.n	17e36 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17dc4:	1cd9      	adds	r1, r3, #3
   17dc6:	4291      	cmp	r1, r2
   17dc8:	d00c      	beq.n	17de4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   17dca:	1d19      	adds	r1, r3, #4
   17dcc:	78db      	ldrb	r3, [r3, #3]
   17dce:	3e04      	subs	r6, #4
   17dd0:	42a3      	cmp	r3, r4
   17dd2:	460b      	mov	r3, r1
   17dd4:	d1e4      	bne.n	17da0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x132>
   17dd6:	e02e      	b.n	17e36 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17dd8:	d808      	bhi.n	17dec <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   17dda:	f10e 0246 	add.w	r2, lr, #70	; 0x46
   17dde:	4295      	cmp	r5, r2
   17de0:	d1cd      	bne.n	17d7e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   17de2:	e003      	b.n	17dec <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   17de4:	f10e 0146 	add.w	r1, lr, #70	; 0x46
   17de8:	428d      	cmp	r5, r1
   17dea:	d1c8      	bne.n	17d7e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   17dec:	f240 55f9 	movw	r5, #1529	; 0x5f9
   17df0:	2101      	movs	r1, #1
   17df2:	f2c0 0502 	movt	r5, #2
   17df6:	4628      	mov	r0, r5
   17df8:	4602      	mov	r2, r0
   17dfa:	f812 7b01 	ldrb.w	r7, [r2], #1
   17dfe:	b27e      	sxtb	r6, r7
   17e00:	2e00      	cmp	r6, #0
   17e02:	d40a      	bmi.n	17e1a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1ac>
   17e04:	4610      	mov	r0, r2
   17e06:	ebb9 0907 	subs.w	r9, r9, r7
   17e0a:	d44e      	bmi.n	17eaa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17e0c:	f505 72cc 	add.w	r2, r5, #408	; 0x198
   17e10:	f081 0101 	eor.w	r1, r1, #1
   17e14:	4290      	cmp	r0, r2
   17e16:	d1ef      	bne.n	17df8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x18a>
   17e18:	e047      	b.n	17eaa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17e1a:	f505 73cc 	add.w	r3, r5, #408	; 0x198
   17e1e:	429a      	cmp	r2, r3
   17e20:	d065      	beq.n	17eee <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   17e22:	7842      	ldrb	r2, [r0, #1]
   17e24:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   17e28:	3002      	adds	r0, #2
   17e2a:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   17e2e:	ebb9 0907 	subs.w	r9, r9, r7
   17e32:	d5eb      	bpl.n	17e0c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x19e>
   17e34:	e039      	b.n	17eaa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17e36:	2100      	movs	r1, #0
   17e38:	f001 0001 	and.w	r0, r1, #1
   17e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17e40:	f240 51e2 	movw	r1, #1506	; 0x5e2
   17e44:	f240 63e2 	movw	r3, #1762	; 0x6e2
   17e48:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
   17e4c:	1842      	adds	r2, r0, r1
   17e4e:	f2c0 030b 	movt	r3, #11
   17e52:	2100      	movs	r1, #0
   17e54:	429a      	cmp	r2, r3
   17e56:	d328      	bcc.n	17eaa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17e58:	f241 421f 	movw	r2, #5151	; 0x141f
   17e5c:	f640 431f 	movw	r3, #3103	; 0xc1f
   17e60:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   17e64:	4402      	add	r2, r0
   17e66:	429a      	cmp	r2, r3
   17e68:	bf21      	itttt	cs
   17e6a:	f243 125e 	movwcs	r2, #12638	; 0x315e
   17e6e:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   17e72:	4402      	addcs	r2, r0
   17e74:	2a0e      	cmpcs	r2, #14
   17e76:	d318      	bcc.n	17eaa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17e78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   17e7c:	f64b 031e 	movw	r3, #47134	; 0xb81e
   17e80:	f2c0 021f 	movt	r2, #31
   17e84:	f2c0 0302 	movt	r3, #2
   17e88:	4002      	ands	r2, r0
   17e8a:	429a      	cmp	r2, r3
   17e8c:	d00d      	beq.n	17eaa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17e8e:	f645 1229 	movw	r2, #22825	; 0x5929
   17e92:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   17e96:	4402      	add	r2, r0
   17e98:	2a29      	cmp	r2, #41	; 0x29
   17e9a:	bf21      	itttt	cs
   17e9c:	f644 02cb 	movwcs	r2, #18635	; 0x48cb
   17ea0:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   17ea4:	4402      	addcs	r2, r0
   17ea6:	2a0b      	cmpcs	r2, #11
   17ea8:	d203      	bcs.n	17eb2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x244>
   17eaa:	f001 0001 	and.w	r0, r1, #1
   17eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17eb2:	f5a0 2060 	sub.w	r0, r0, #917504	; 0xe0000
   17eb6:	f64f 620f 	movw	r2, #65039	; 0xfe0f
   17eba:	f5a0 71f8 	sub.w	r1, r0, #496	; 0x1f0
   17ebe:	2000      	movs	r0, #0
   17ec0:	f2c0 0202 	movt	r2, #2
   17ec4:	4291      	cmp	r1, r2
   17ec6:	bf88      	it	hi
   17ec8:	2001      	movhi	r0, #1
   17eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17ece:	4610      	mov	r0, r2
   17ed0:	4651      	mov	r1, sl
   17ed2:	f7ff fd04 	bl	178de <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   17ed6:	defe      	udf	#254	; 0xfe
   17ed8:	4650      	mov	r0, sl
   17eda:	f240 1125 	movw	r1, #293	; 0x125
   17ede:	f7ff fcdc 	bl	1789a <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   17ee2:	defe      	udf	#254	; 0xfe
   17ee4:	4650      	mov	r0, sl
   17ee6:	21a6      	movs	r1, #166	; 0xa6
   17ee8:	f7ff fcd7 	bl	1789a <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   17eec:	defe      	udf	#254	; 0xfe
   17eee:	f64f 6030 	movw	r0, #65072	; 0xfe30
   17ef2:	f240 224c 	movw	r2, #588	; 0x24c
   17ef6:	f2c0 0001 	movt	r0, #1
   17efa:	f2c0 0202 	movt	r2, #2
   17efe:	212b      	movs	r1, #43	; 0x2b
   17f00:	f7fe fd78 	bl	169f4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17f04:	defe      	udf	#254	; 0xfe

00017f06 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>:
   17f06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f0a:	b0a3      	sub	sp, #140	; 0x8c
   17f0c:	468c      	mov	ip, r1
   17f0e:	6809      	ldr	r1, [r1, #0]
   17f10:	06ca      	lsls	r2, r1, #27
   17f12:	d44a      	bmi.n	17faa <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xa4>
   17f14:	6804      	ldr	r4, [r0, #0]
   17f16:	0688      	lsls	r0, r1, #26
   17f18:	f100 8089 	bmi.w	1802e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x128>
   17f1c:	f248 5e1f 	movw	lr, #34079	; 0x851f
   17f20:	f64f 62cf 	movw	r2, #65231	; 0xfecf
   17f24:	f242 7810 	movw	r8, #10000	; 0x2710
   17f28:	4544      	cmp	r4, r8
   17f2a:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   17f2e:	f2c0 0201 	movt	r2, #1
   17f32:	f0c0 80e3 	bcc.w	180fc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1f6>
   17f36:	f241 7959 	movw	r9, #5977	; 0x1759
   17f3a:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   17f3e:	f10d 0b0c 	add.w	fp, sp, #12
   17f42:	2300      	movs	r3, #0
   17f44:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   17f48:	f04f 0a64 	mov.w	sl, #100	; 0x64
   17f4c:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   17f50:	fba4 0109 	umull	r0, r1, r4, r9
   17f54:	42bc      	cmp	r4, r7
   17f56:	ea4f 3051 	mov.w	r0, r1, lsr #13
   17f5a:	fb00 4118 	mls	r1, r0, r8, r4
   17f5e:	4604      	mov	r4, r0
   17f60:	b28d      	uxth	r5, r1
   17f62:	fba5 560e 	umull	r5, r6, r5, lr
   17f66:	ea4f 1556 	mov.w	r5, r6, lsr #5
   17f6a:	eb0b 0603 	add.w	r6, fp, r3
   17f6e:	fb05 111a 	mls	r1, r5, sl, r1
   17f72:	f832 5015 	ldrh.w	r5, [r2, r5, lsl #1]
   17f76:	f1a3 0304 	sub.w	r3, r3, #4
   17f7a:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   17f7e:	b289      	uxth	r1, r1
   17f80:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   17f84:	f8a6 1025 	strh.w	r1, [r6, #37]	; 0x25
   17f88:	d8e2      	bhi.n	17f50 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x4a>
   17f8a:	f103 0127 	add.w	r1, r3, #39	; 0x27
   17f8e:	4604      	mov	r4, r0
   17f90:	2c63      	cmp	r4, #99	; 0x63
   17f92:	f300 80b7 	bgt.w	18104 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1fe>
   17f96:	4623      	mov	r3, r4
   17f98:	2b0a      	cmp	r3, #10
   17f9a:	f2c0 80c3 	blt.w	18124 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x21e>
   17f9e:	1e88      	subs	r0, r1, #2
   17fa0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   17fa4:	aa03      	add	r2, sp, #12
   17fa6:	5211      	strh	r1, [r2, r0]
   17fa8:	e0c1      	b.n	1812e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x228>
   17faa:	6800      	ldr	r0, [r0, #0]
   17fac:	f10d 0e0c 	add.w	lr, sp, #12
   17fb0:	2381      	movs	r3, #129	; 0x81
   17fb2:	2100      	movs	r1, #0
   17fb4:	f000 020f 	and.w	r2, r0, #15
   17fb8:	f102 0457 	add.w	r4, r2, #87	; 0x57
   17fbc:	2a0a      	cmp	r2, #10
   17fbe:	bf38      	it	cc
   17fc0:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   17fc4:	eb0e 0203 	add.w	r2, lr, r3
   17fc8:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   17fcc:	f802 4c02 	strb.w	r4, [r2, #-2]
   17fd0:	d071      	beq.n	180b6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   17fd2:	0904      	lsrs	r4, r0, #4
   17fd4:	f004 040f 	and.w	r4, r4, #15
   17fd8:	f104 0557 	add.w	r5, r4, #87	; 0x57
   17fdc:	2c0a      	cmp	r4, #10
   17fde:	bf38      	it	cc
   17fe0:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   17fe4:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   17fe8:	f802 5c03 	strb.w	r5, [r2, #-3]
   17fec:	d079      	beq.n	180e2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   17fee:	0a04      	lsrs	r4, r0, #8
   17ff0:	f004 040f 	and.w	r4, r4, #15
   17ff4:	f104 0557 	add.w	r5, r4, #87	; 0x57
   17ff8:	2c0a      	cmp	r4, #10
   17ffa:	bf38      	it	cc
   17ffc:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18000:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   18004:	f802 5c04 	strb.w	r5, [r2, #-4]
   18008:	d073      	beq.n	180f2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   1800a:	0b04      	lsrs	r4, r0, #12
   1800c:	3b04      	subs	r3, #4
   1800e:	f004 040f 	and.w	r4, r4, #15
   18012:	f104 0557 	add.w	r5, r4, #87	; 0x57
   18016:	2c0a      	cmp	r4, #10
   18018:	bf38      	it	cc
   1801a:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1801e:	f802 5c05 	strb.w	r5, [r2, #-5]
   18022:	0c02      	lsrs	r2, r0, #16
   18024:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   18028:	4610      	mov	r0, r2
   1802a:	d1c3      	bne.n	17fb4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xae>
   1802c:	e03f      	b.n	180ae <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1a8>
   1802e:	f10d 0e0c 	add.w	lr, sp, #12
   18032:	2381      	movs	r3, #129	; 0x81
   18034:	2100      	movs	r1, #0
   18036:	f004 000f 	and.w	r0, r4, #15
   1803a:	eb0e 0203 	add.w	r2, lr, r3
   1803e:	f100 0537 	add.w	r5, r0, #55	; 0x37
   18042:	280a      	cmp	r0, #10
   18044:	bf38      	it	cc
   18046:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   1804a:	ebb1 1f14 	cmp.w	r1, r4, lsr #4
   1804e:	f802 5c02 	strb.w	r5, [r2, #-2]
   18052:	d030      	beq.n	180b6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   18054:	0920      	lsrs	r0, r4, #4
   18056:	f000 000f 	and.w	r0, r0, #15
   1805a:	f100 0537 	add.w	r5, r0, #55	; 0x37
   1805e:	280a      	cmp	r0, #10
   18060:	bf38      	it	cc
   18062:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   18066:	ebb1 2f14 	cmp.w	r1, r4, lsr #8
   1806a:	f802 5c03 	strb.w	r5, [r2, #-3]
   1806e:	d038      	beq.n	180e2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   18070:	0a20      	lsrs	r0, r4, #8
   18072:	f000 000f 	and.w	r0, r0, #15
   18076:	f100 0537 	add.w	r5, r0, #55	; 0x37
   1807a:	280a      	cmp	r0, #10
   1807c:	bf38      	it	cc
   1807e:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   18082:	ebb1 3f14 	cmp.w	r1, r4, lsr #12
   18086:	f802 5c04 	strb.w	r5, [r2, #-4]
   1808a:	d032      	beq.n	180f2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   1808c:	0b20      	lsrs	r0, r4, #12
   1808e:	3b04      	subs	r3, #4
   18090:	f000 000f 	and.w	r0, r0, #15
   18094:	f100 0537 	add.w	r5, r0, #55	; 0x37
   18098:	280a      	cmp	r0, #10
   1809a:	bf38      	it	cc
   1809c:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   180a0:	0c20      	lsrs	r0, r4, #16
   180a2:	ebb1 4f14 	cmp.w	r1, r4, lsr #16
   180a6:	4604      	mov	r4, r0
   180a8:	f802 5c05 	strb.w	r5, [r2, #-5]
   180ac:	d1c3      	bne.n	18036 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x130>
   180ae:	1e58      	subs	r0, r3, #1
   180b0:	2881      	cmp	r0, #129	; 0x81
   180b2:	d305      	bcc.n	180c0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   180b4:	e019      	b.n	180ea <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   180b6:	1e59      	subs	r1, r3, #1
   180b8:	1e98      	subs	r0, r3, #2
   180ba:	460b      	mov	r3, r1
   180bc:	2881      	cmp	r0, #129	; 0x81
   180be:	d214      	bcs.n	180ea <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   180c0:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   180c4:	f64f 62cd 	movw	r2, #65229	; 0xfecd
   180c8:	4470      	add	r0, lr
   180ca:	f2c0 0201 	movt	r2, #1
   180ce:	e9cd 0100 	strd	r0, r1, [sp]
   180d2:	4660      	mov	r0, ip
   180d4:	2101      	movs	r1, #1
   180d6:	2302      	movs	r3, #2
   180d8:	f7ff f864 	bl	171a4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   180dc:	b023      	add	sp, #140	; 0x8c
   180de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180e2:	1ed8      	subs	r0, r3, #3
   180e4:	3b02      	subs	r3, #2
   180e6:	2881      	cmp	r0, #129	; 0x81
   180e8:	d3ea      	bcc.n	180c0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   180ea:	2180      	movs	r1, #128	; 0x80
   180ec:	f7ff fbf7 	bl	178de <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   180f0:	defe      	udf	#254	; 0xfe
   180f2:	1f18      	subs	r0, r3, #4
   180f4:	3b03      	subs	r3, #3
   180f6:	2881      	cmp	r0, #129	; 0x81
   180f8:	d3e2      	bcc.n	180c0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   180fa:	e7f6      	b.n	180ea <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   180fc:	2127      	movs	r1, #39	; 0x27
   180fe:	2c63      	cmp	r4, #99	; 0x63
   18100:	f77f af49 	ble.w	17f96 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x90>
   18104:	b2a0      	uxth	r0, r4
   18106:	3902      	subs	r1, #2
   18108:	fba0 030e 	umull	r0, r3, r0, lr
   1810c:	af03      	add	r7, sp, #12
   1810e:	2064      	movs	r0, #100	; 0x64
   18110:	095b      	lsrs	r3, r3, #5
   18112:	fb03 4010 	mls	r0, r3, r0, r4
   18116:	b280      	uxth	r0, r0
   18118:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   1811c:	5278      	strh	r0, [r7, r1]
   1811e:	2b0a      	cmp	r3, #10
   18120:	f6bf af3d 	bge.w	17f9e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x98>
   18124:	1e48      	subs	r0, r1, #1
   18126:	aa03      	add	r2, sp, #12
   18128:	f103 0130 	add.w	r1, r3, #48	; 0x30
   1812c:	5411      	strb	r1, [r2, r0]
   1812e:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   18132:	aa03      	add	r2, sp, #12
   18134:	4410      	add	r0, r2
   18136:	f64f 4294 	movw	r2, #64660	; 0xfc94
   1813a:	e9cd 0100 	strd	r0, r1, [sp]
   1813e:	f2c0 0201 	movt	r2, #1
   18142:	4660      	mov	r0, ip
   18144:	2101      	movs	r1, #1
   18146:	2300      	movs	r3, #0
   18148:	f7ff f82c 	bl	171a4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1814c:	b023      	add	sp, #140	; 0x8c
   1814e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018152 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>:
   18152:	b580      	push	{r7, lr}
   18154:	b0a2      	sub	sp, #136	; 0x88
   18156:	7802      	ldrb	r2, [r0, #0]
   18158:	468c      	mov	ip, r1
   1815a:	f002 030f 	and.w	r3, r2, #15
   1815e:	f103 0057 	add.w	r0, r3, #87	; 0x57
   18162:	2b0a      	cmp	r3, #10
   18164:	bf38      	it	cc
   18166:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   1816a:	2300      	movs	r3, #0
   1816c:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   18170:	d00b      	beq.n	1818a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x38>
   18172:	0913      	lsrs	r3, r2, #4
   18174:	f103 0157 	add.w	r1, r3, #87	; 0x57
   18178:	2aa0      	cmp	r2, #160	; 0xa0
   1817a:	bf38      	it	cc
   1817c:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   18180:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   18184:	227e      	movs	r2, #126	; 0x7e
   18186:	2302      	movs	r3, #2
   18188:	e001      	b.n	1818e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x3c>
   1818a:	227f      	movs	r2, #127	; 0x7f
   1818c:	2301      	movs	r3, #1
   1818e:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   18192:	a802      	add	r0, sp, #8
   18194:	4410      	add	r0, r2
   18196:	f64f 62cd 	movw	r2, #65229	; 0xfecd
   1819a:	e9cd 0300 	strd	r0, r3, [sp]
   1819e:	f2c0 0201 	movt	r2, #1
   181a2:	4660      	mov	r0, ip
   181a4:	2101      	movs	r1, #1
   181a6:	2302      	movs	r3, #2
   181a8:	f7fe fffc 	bl	171a4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   181ac:	b022      	add	sp, #136	; 0x88
   181ae:	bd80      	pop	{r7, pc}

000181b0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>:
   181b0:	b580      	push	{r7, lr}
   181b2:	b0a2      	sub	sp, #136	; 0x88
   181b4:	7802      	ldrb	r2, [r0, #0]
   181b6:	468c      	mov	ip, r1
   181b8:	f002 030f 	and.w	r3, r2, #15
   181bc:	f103 0037 	add.w	r0, r3, #55	; 0x37
   181c0:	2b0a      	cmp	r3, #10
   181c2:	bf38      	it	cc
   181c4:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   181c8:	2300      	movs	r3, #0
   181ca:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   181ce:	d00b      	beq.n	181e8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x38>
   181d0:	0913      	lsrs	r3, r2, #4
   181d2:	f103 0137 	add.w	r1, r3, #55	; 0x37
   181d6:	2aa0      	cmp	r2, #160	; 0xa0
   181d8:	bf38      	it	cc
   181da:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   181de:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   181e2:	227e      	movs	r2, #126	; 0x7e
   181e4:	2302      	movs	r3, #2
   181e6:	e001      	b.n	181ec <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x3c>
   181e8:	227f      	movs	r2, #127	; 0x7f
   181ea:	2301      	movs	r3, #1
   181ec:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   181f0:	a802      	add	r0, sp, #8
   181f2:	4410      	add	r0, r2
   181f4:	f64f 62cd 	movw	r2, #65229	; 0xfecd
   181f8:	e9cd 0300 	strd	r0, r3, [sp]
   181fc:	f2c0 0201 	movt	r2, #1
   18200:	4660      	mov	r0, ip
   18202:	2101      	movs	r1, #1
   18204:	2302      	movs	r3, #2
   18206:	f7fe ffcd 	bl	171a4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1820a:	b022      	add	sp, #136	; 0x88
   1820c:	bd80      	pop	{r7, pc}

0001820e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>:
   1820e:	b580      	push	{r7, lr}
   18210:	b0a2      	sub	sp, #136	; 0x88
   18212:	8800      	ldrh	r0, [r0, #0]
   18214:	468c      	mov	ip, r1
   18216:	f000 020f 	and.w	r2, r0, #15
   1821a:	f102 0357 	add.w	r3, r2, #87	; 0x57
   1821e:	2a0a      	cmp	r2, #10
   18220:	bf38      	it	cc
   18222:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   18226:	2200      	movs	r2, #0
   18228:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   1822c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   18230:	d02a      	beq.n	18288 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x7a>
   18232:	0903      	lsrs	r3, r0, #4
   18234:	f003 030f 	and.w	r3, r3, #15
   18238:	f103 0157 	add.w	r1, r3, #87	; 0x57
   1823c:	2b0a      	cmp	r3, #10
   1823e:	bf38      	it	cc
   18240:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   18244:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   18248:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   1824c:	d031      	beq.n	182b2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xa4>
   1824e:	0a01      	lsrs	r1, r0, #8
   18250:	f001 010f 	and.w	r1, r1, #15
   18254:	f101 0257 	add.w	r2, r1, #87	; 0x57
   18258:	290a      	cmp	r1, #10
   1825a:	bf38      	it	cc
   1825c:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   18260:	2100      	movs	r1, #0
   18262:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   18266:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   1826a:	d027      	beq.n	182bc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xae>
   1826c:	0b00      	lsrs	r0, r0, #12
   1826e:	f100 0157 	add.w	r1, r0, #87	; 0x57
   18272:	280a      	cmp	r0, #10
   18274:	bf38      	it	cc
   18276:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   1827a:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   1827e:	227d      	movs	r2, #125	; 0x7d
   18280:	207c      	movs	r0, #124	; 0x7c
   18282:	2881      	cmp	r0, #129	; 0x81
   18284:	d304      	bcc.n	18290 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   18286:	e01d      	b.n	182c4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   18288:	2280      	movs	r2, #128	; 0x80
   1828a:	207f      	movs	r0, #127	; 0x7f
   1828c:	2881      	cmp	r0, #129	; 0x81
   1828e:	d219      	bcs.n	182c4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   18290:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   18294:	ab02      	add	r3, sp, #8
   18296:	4418      	add	r0, r3
   18298:	2101      	movs	r1, #1
   1829a:	e9cd 0200 	strd	r0, r2, [sp]
   1829e:	f64f 62cd 	movw	r2, #65229	; 0xfecd
   182a2:	f2c0 0201 	movt	r2, #1
   182a6:	4660      	mov	r0, ip
   182a8:	2302      	movs	r3, #2
   182aa:	f7fe ff7b 	bl	171a4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   182ae:	b022      	add	sp, #136	; 0x88
   182b0:	bd80      	pop	{r7, pc}
   182b2:	207e      	movs	r0, #126	; 0x7e
   182b4:	227f      	movs	r2, #127	; 0x7f
   182b6:	2881      	cmp	r0, #129	; 0x81
   182b8:	d3ea      	bcc.n	18290 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   182ba:	e003      	b.n	182c4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   182bc:	207d      	movs	r0, #125	; 0x7d
   182be:	227e      	movs	r2, #126	; 0x7e
   182c0:	2881      	cmp	r0, #129	; 0x81
   182c2:	d3e5      	bcc.n	18290 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   182c4:	2180      	movs	r1, #128	; 0x80
   182c6:	f7ff fb0a 	bl	178de <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   182ca:	defe      	udf	#254	; 0xfe

000182cc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>:
   182cc:	b580      	push	{r7, lr}
   182ce:	b0a2      	sub	sp, #136	; 0x88
   182d0:	8800      	ldrh	r0, [r0, #0]
   182d2:	468c      	mov	ip, r1
   182d4:	f000 020f 	and.w	r2, r0, #15
   182d8:	f102 0337 	add.w	r3, r2, #55	; 0x37
   182dc:	2a0a      	cmp	r2, #10
   182de:	bf38      	it	cc
   182e0:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   182e4:	2200      	movs	r2, #0
   182e6:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   182ea:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   182ee:	d02a      	beq.n	18346 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x7a>
   182f0:	0903      	lsrs	r3, r0, #4
   182f2:	f003 030f 	and.w	r3, r3, #15
   182f6:	f103 0137 	add.w	r1, r3, #55	; 0x37
   182fa:	2b0a      	cmp	r3, #10
   182fc:	bf38      	it	cc
   182fe:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   18302:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   18306:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   1830a:	d031      	beq.n	18370 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xa4>
   1830c:	0a01      	lsrs	r1, r0, #8
   1830e:	f001 010f 	and.w	r1, r1, #15
   18312:	f101 0237 	add.w	r2, r1, #55	; 0x37
   18316:	290a      	cmp	r1, #10
   18318:	bf38      	it	cc
   1831a:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   1831e:	2100      	movs	r1, #0
   18320:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   18324:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   18328:	d027      	beq.n	1837a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xae>
   1832a:	0b00      	lsrs	r0, r0, #12
   1832c:	f100 0137 	add.w	r1, r0, #55	; 0x37
   18330:	280a      	cmp	r0, #10
   18332:	bf38      	it	cc
   18334:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   18338:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   1833c:	227d      	movs	r2, #125	; 0x7d
   1833e:	207c      	movs	r0, #124	; 0x7c
   18340:	2881      	cmp	r0, #129	; 0x81
   18342:	d304      	bcc.n	1834e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   18344:	e01d      	b.n	18382 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   18346:	2280      	movs	r2, #128	; 0x80
   18348:	207f      	movs	r0, #127	; 0x7f
   1834a:	2881      	cmp	r0, #129	; 0x81
   1834c:	d219      	bcs.n	18382 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   1834e:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   18352:	ab02      	add	r3, sp, #8
   18354:	4418      	add	r0, r3
   18356:	2101      	movs	r1, #1
   18358:	e9cd 0200 	strd	r0, r2, [sp]
   1835c:	f64f 62cd 	movw	r2, #65229	; 0xfecd
   18360:	f2c0 0201 	movt	r2, #1
   18364:	4660      	mov	r0, ip
   18366:	2302      	movs	r3, #2
   18368:	f7fe ff1c 	bl	171a4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1836c:	b022      	add	sp, #136	; 0x88
   1836e:	bd80      	pop	{r7, pc}
   18370:	207e      	movs	r0, #126	; 0x7e
   18372:	227f      	movs	r2, #127	; 0x7f
   18374:	2881      	cmp	r0, #129	; 0x81
   18376:	d3ea      	bcc.n	1834e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   18378:	e003      	b.n	18382 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   1837a:	207d      	movs	r0, #125	; 0x7d
   1837c:	227e      	movs	r2, #126	; 0x7e
   1837e:	2881      	cmp	r0, #129	; 0x81
   18380:	d3e5      	bcc.n	1834e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   18382:	2180      	movs	r1, #128	; 0x80
   18384:	f7ff faab 	bl	178de <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   18388:	defe      	udf	#254	; 0xfe

0001838a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>:
   1838a:	b5b0      	push	{r4, r5, r7, lr}
   1838c:	b0a2      	sub	sp, #136	; 0x88
   1838e:	6800      	ldr	r0, [r0, #0]
   18390:	f10d 0e08 	add.w	lr, sp, #8
   18394:	468c      	mov	ip, r1
   18396:	2381      	movs	r3, #129	; 0x81
   18398:	2100      	movs	r1, #0
   1839a:	f000 020f 	and.w	r2, r0, #15
   1839e:	f102 0457 	add.w	r4, r2, #87	; 0x57
   183a2:	2a0a      	cmp	r2, #10
   183a4:	bf38      	it	cc
   183a6:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   183aa:	eb0e 0203 	add.w	r2, lr, r3
   183ae:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   183b2:	f802 4c02 	strb.w	r4, [r2, #-2]
   183b6:	d030      	beq.n	1841a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x90>
   183b8:	0904      	lsrs	r4, r0, #4
   183ba:	f004 040f 	and.w	r4, r4, #15
   183be:	f104 0557 	add.w	r5, r4, #87	; 0x57
   183c2:	2c0a      	cmp	r4, #10
   183c4:	bf38      	it	cc
   183c6:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   183ca:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   183ce:	f802 5c03 	strb.w	r5, [r2, #-3]
   183d2:	d028      	beq.n	18426 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x9c>
   183d4:	0a04      	lsrs	r4, r0, #8
   183d6:	f004 040f 	and.w	r4, r4, #15
   183da:	f104 0557 	add.w	r5, r4, #87	; 0x57
   183de:	2c0a      	cmp	r4, #10
   183e0:	bf38      	it	cc
   183e2:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   183e6:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   183ea:	f802 5c04 	strb.w	r5, [r2, #-4]
   183ee:	d01f      	beq.n	18430 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xa6>
   183f0:	0b04      	lsrs	r4, r0, #12
   183f2:	3b04      	subs	r3, #4
   183f4:	f004 040f 	and.w	r4, r4, #15
   183f8:	f104 0557 	add.w	r5, r4, #87	; 0x57
   183fc:	2c0a      	cmp	r4, #10
   183fe:	bf38      	it	cc
   18400:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18404:	f802 5c05 	strb.w	r5, [r2, #-5]
   18408:	0c02      	lsrs	r2, r0, #16
   1840a:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   1840e:	4610      	mov	r0, r2
   18410:	d1c3      	bne.n	1839a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x10>
   18412:	1e58      	subs	r0, r3, #1
   18414:	2881      	cmp	r0, #129	; 0x81
   18416:	d30f      	bcc.n	18438 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   18418:	e01e      	b.n	18458 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   1841a:	1e59      	subs	r1, r3, #1
   1841c:	1e98      	subs	r0, r3, #2
   1841e:	460b      	mov	r3, r1
   18420:	2881      	cmp	r0, #129	; 0x81
   18422:	d309      	bcc.n	18438 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   18424:	e018      	b.n	18458 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   18426:	1ed8      	subs	r0, r3, #3
   18428:	3b02      	subs	r3, #2
   1842a:	2881      	cmp	r0, #129	; 0x81
   1842c:	d304      	bcc.n	18438 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   1842e:	e013      	b.n	18458 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   18430:	1f18      	subs	r0, r3, #4
   18432:	3b03      	subs	r3, #3
   18434:	2881      	cmp	r0, #129	; 0x81
   18436:	d20f      	bcs.n	18458 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   18438:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   1843c:	f64f 62cd 	movw	r2, #65229	; 0xfecd
   18440:	4470      	add	r0, lr
   18442:	f2c0 0201 	movt	r2, #1
   18446:	e9cd 0100 	strd	r0, r1, [sp]
   1844a:	4660      	mov	r0, ip
   1844c:	2101      	movs	r1, #1
   1844e:	2302      	movs	r3, #2
   18450:	f7fe fea8 	bl	171a4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18454:	b022      	add	sp, #136	; 0x88
   18456:	bdb0      	pop	{r4, r5, r7, pc}
   18458:	2180      	movs	r1, #128	; 0x80
   1845a:	f7ff fa40 	bl	178de <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1845e:	defe      	udf	#254	; 0xfe

00018460 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>:
   18460:	b5b0      	push	{r4, r5, r7, lr}
   18462:	b0a2      	sub	sp, #136	; 0x88
   18464:	6800      	ldr	r0, [r0, #0]
   18466:	f10d 0e08 	add.w	lr, sp, #8
   1846a:	468c      	mov	ip, r1
   1846c:	2381      	movs	r3, #129	; 0x81
   1846e:	2100      	movs	r1, #0
   18470:	f000 020f 	and.w	r2, r0, #15
   18474:	f102 0437 	add.w	r4, r2, #55	; 0x37
   18478:	2a0a      	cmp	r2, #10
   1847a:	bf38      	it	cc
   1847c:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   18480:	eb0e 0203 	add.w	r2, lr, r3
   18484:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   18488:	f802 4c02 	strb.w	r4, [r2, #-2]
   1848c:	d030      	beq.n	184f0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x90>
   1848e:	0904      	lsrs	r4, r0, #4
   18490:	f004 040f 	and.w	r4, r4, #15
   18494:	f104 0537 	add.w	r5, r4, #55	; 0x37
   18498:	2c0a      	cmp	r4, #10
   1849a:	bf38      	it	cc
   1849c:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   184a0:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   184a4:	f802 5c03 	strb.w	r5, [r2, #-3]
   184a8:	d028      	beq.n	184fc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x9c>
   184aa:	0a04      	lsrs	r4, r0, #8
   184ac:	f004 040f 	and.w	r4, r4, #15
   184b0:	f104 0537 	add.w	r5, r4, #55	; 0x37
   184b4:	2c0a      	cmp	r4, #10
   184b6:	bf38      	it	cc
   184b8:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   184bc:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   184c0:	f802 5c04 	strb.w	r5, [r2, #-4]
   184c4:	d01f      	beq.n	18506 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xa6>
   184c6:	0b04      	lsrs	r4, r0, #12
   184c8:	3b04      	subs	r3, #4
   184ca:	f004 040f 	and.w	r4, r4, #15
   184ce:	f104 0537 	add.w	r5, r4, #55	; 0x37
   184d2:	2c0a      	cmp	r4, #10
   184d4:	bf38      	it	cc
   184d6:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   184da:	f802 5c05 	strb.w	r5, [r2, #-5]
   184de:	0c02      	lsrs	r2, r0, #16
   184e0:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   184e4:	4610      	mov	r0, r2
   184e6:	d1c3      	bne.n	18470 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x10>
   184e8:	1e58      	subs	r0, r3, #1
   184ea:	2881      	cmp	r0, #129	; 0x81
   184ec:	d30f      	bcc.n	1850e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   184ee:	e01e      	b.n	1852e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   184f0:	1e59      	subs	r1, r3, #1
   184f2:	1e98      	subs	r0, r3, #2
   184f4:	460b      	mov	r3, r1
   184f6:	2881      	cmp	r0, #129	; 0x81
   184f8:	d309      	bcc.n	1850e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   184fa:	e018      	b.n	1852e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   184fc:	1ed8      	subs	r0, r3, #3
   184fe:	3b02      	subs	r3, #2
   18500:	2881      	cmp	r0, #129	; 0x81
   18502:	d304      	bcc.n	1850e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   18504:	e013      	b.n	1852e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   18506:	1f18      	subs	r0, r3, #4
   18508:	3b03      	subs	r3, #3
   1850a:	2881      	cmp	r0, #129	; 0x81
   1850c:	d20f      	bcs.n	1852e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   1850e:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   18512:	f64f 62cd 	movw	r2, #65229	; 0xfecd
   18516:	4470      	add	r0, lr
   18518:	f2c0 0201 	movt	r2, #1
   1851c:	e9cd 0100 	strd	r0, r1, [sp]
   18520:	4660      	mov	r0, ip
   18522:	2101      	movs	r1, #1
   18524:	2302      	movs	r3, #2
   18526:	f7fe fe3d 	bl	171a4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1852a:	b022      	add	sp, #136	; 0x88
   1852c:	bdb0      	pop	{r4, r5, r7, pc}
   1852e:	2180      	movs	r1, #128	; 0x80
   18530:	f7ff f9d5 	bl	178de <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   18534:	defe      	udf	#254	; 0xfe

00018536 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>:
   18536:	b580      	push	{r7, lr}
   18538:	b08c      	sub	sp, #48	; 0x30
   1853a:	7802      	ldrb	r2, [r0, #0]
   1853c:	2a64      	cmp	r2, #100	; 0x64
   1853e:	d314      	bcc.n	1856a <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x34>
   18540:	f248 501f 	movw	r0, #34079	; 0x851f
   18544:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
   18548:	fba2 0300 	umull	r0, r3, r2, r0
   1854c:	2064      	movs	r0, #100	; 0x64
   1854e:	095b      	lsrs	r3, r3, #5
   18550:	fb03 2010 	mls	r0, r3, r0, r2
   18554:	f64f 62cf 	movw	r2, #65231	; 0xfecf
   18558:	f2c0 0201 	movt	r2, #1
   1855c:	b2c0      	uxtb	r0, r0
   1855e:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   18562:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   18566:	2024      	movs	r0, #36	; 0x24
   18568:	e003      	b.n	18572 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x3c>
   1856a:	2a0a      	cmp	r2, #10
   1856c:	d206      	bcs.n	1857c <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x46>
   1856e:	2026      	movs	r0, #38	; 0x26
   18570:	4613      	mov	r3, r2
   18572:	f103 0230 	add.w	r2, r3, #48	; 0x30
   18576:	ab02      	add	r3, sp, #8
   18578:	541a      	strb	r2, [r3, r0]
   1857a:	e008      	b.n	1858e <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x58>
   1857c:	f64f 60cf 	movw	r0, #65231	; 0xfecf
   18580:	f2c0 0001 	movt	r0, #1
   18584:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   18588:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   1858c:	2025      	movs	r0, #37	; 0x25
   1858e:	f1c0 0227 	rsb	r2, r0, #39	; 0x27
   18592:	ab02      	add	r3, sp, #8
   18594:	4418      	add	r0, r3
   18596:	2300      	movs	r3, #0
   18598:	e9cd 0200 	strd	r0, r2, [sp]
   1859c:	f64f 4294 	movw	r2, #64660	; 0xfc94
   185a0:	4608      	mov	r0, r1
   185a2:	f2c0 0201 	movt	r2, #1
   185a6:	2101      	movs	r1, #1
   185a8:	f7fe fdfc 	bl	171a4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   185ac:	b00c      	add	sp, #48	; 0x30
   185ae:	bd80      	pop	{r7, pc}

000185b0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>:
   185b0:	b580      	push	{r7, lr}
   185b2:	b08c      	sub	sp, #48	; 0x30
   185b4:	8800      	ldrh	r0, [r0, #0]
   185b6:	f242 720f 	movw	r2, #9999	; 0x270f
   185ba:	468e      	mov	lr, r1
   185bc:	4290      	cmp	r0, r2
   185be:	d924      	bls.n	1860a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x5a>
   185c0:	f241 7259 	movw	r2, #5977	; 0x1759
   185c4:	f248 511f 	movw	r1, #34079	; 0x851f
   185c8:	f2cd 12b7 	movt	r2, #53687	; 0xd1b7
   185cc:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   185d0:	fba0 2302 	umull	r2, r3, r0, r2
   185d4:	0b5a      	lsrs	r2, r3, #13
   185d6:	f242 7310 	movw	r3, #10000	; 0x2710
   185da:	fb02 0013 	mls	r0, r2, r3, r0
   185de:	b283      	uxth	r3, r0
   185e0:	fba3 1301 	umull	r1, r3, r3, r1
   185e4:	0959      	lsrs	r1, r3, #5
   185e6:	2364      	movs	r3, #100	; 0x64
   185e8:	fb01 0013 	mls	r0, r1, r3, r0
   185ec:	f64f 63cf 	movw	r3, #65231	; 0xfecf
   185f0:	f2c0 0301 	movt	r3, #1
   185f4:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   185f8:	f8ad 102b 	strh.w	r1, [sp, #43]	; 0x2b
   185fc:	b280      	uxth	r0, r0
   185fe:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   18602:	2323      	movs	r3, #35	; 0x23
   18604:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   18608:	e024      	b.n	18654 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa4>
   1860a:	f64f 6ccf 	movw	ip, #65231	; 0xfecf
   1860e:	2863      	cmp	r0, #99	; 0x63
   18610:	f2c0 0c01 	movt	ip, #1
   18614:	d919      	bls.n	1864a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x9a>
   18616:	f248 511f 	movw	r1, #34079	; 0x851f
   1861a:	2325      	movs	r3, #37	; 0x25
   1861c:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   18620:	fba0 1201 	umull	r1, r2, r0, r1
   18624:	0951      	lsrs	r1, r2, #5
   18626:	2264      	movs	r2, #100	; 0x64
   18628:	fb01 0012 	mls	r0, r1, r2, r0
   1862c:	b280      	uxth	r0, r0
   1862e:	f83c 0010 	ldrh.w	r0, [ip, r0, lsl #1]
   18632:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   18636:	4608      	mov	r0, r1
   18638:	b282      	uxth	r2, r0
   1863a:	2a0a      	cmp	r2, #10
   1863c:	d309      	bcc.n	18652 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa2>
   1863e:	f83c 1012 	ldrh.w	r1, [ip, r2, lsl #1]
   18642:	1e98      	subs	r0, r3, #2
   18644:	aa02      	add	r2, sp, #8
   18646:	5211      	strh	r1, [r2, r0]
   18648:	e009      	b.n	1865e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xae>
   1864a:	2327      	movs	r3, #39	; 0x27
   1864c:	b282      	uxth	r2, r0
   1864e:	2a0a      	cmp	r2, #10
   18650:	d2f5      	bcs.n	1863e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x8e>
   18652:	4602      	mov	r2, r0
   18654:	1e58      	subs	r0, r3, #1
   18656:	f102 0130 	add.w	r1, r2, #48	; 0x30
   1865a:	aa02      	add	r2, sp, #8
   1865c:	5411      	strb	r1, [r2, r0]
   1865e:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   18662:	aa02      	add	r2, sp, #8
   18664:	4410      	add	r0, r2
   18666:	f64f 4294 	movw	r2, #64660	; 0xfc94
   1866a:	e9cd 0100 	strd	r0, r1, [sp]
   1866e:	f2c0 0201 	movt	r2, #1
   18672:	4670      	mov	r0, lr
   18674:	2101      	movs	r1, #1
   18676:	2300      	movs	r3, #0
   18678:	f7fe fd94 	bl	171a4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1867c:	b00c      	add	sp, #48	; 0x30
   1867e:	bd80      	pop	{r7, pc}

00018680 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>:
   18680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18684:	b08f      	sub	sp, #60	; 0x3c
   18686:	6805      	ldr	r5, [r0, #0]
   18688:	f248 581f 	movw	r8, #34079	; 0x851f
   1868c:	460e      	mov	r6, r1
   1868e:	f64f 61cf 	movw	r1, #65231	; 0xfecf
   18692:	2d00      	cmp	r5, #0
   18694:	f242 7910 	movw	r9, #10000	; 0x2710
   18698:	462b      	mov	r3, r5
   1869a:	f2c5 18eb 	movt	r8, #20971	; 0x51eb
   1869e:	bf48      	it	mi
   186a0:	426b      	negmi	r3, r5
   186a2:	454b      	cmp	r3, r9
   186a4:	f2c0 0101 	movt	r1, #1
   186a8:	d33a      	bcc.n	18720 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa0>
   186aa:	f241 7a59 	movw	sl, #5977	; 0x1759
   186ae:	f24e 00ff 	movw	r0, #57599	; 0xe0ff
   186b2:	f10d 0e14 	add.w	lr, sp, #20
   186b6:	2400      	movs	r4, #0
   186b8:	f2cd 1ab7 	movt	sl, #53687	; 0xd1b7
   186bc:	f04f 0b64 	mov.w	fp, #100	; 0x64
   186c0:	f2c0 50f5 	movt	r0, #1525	; 0x5f5
   186c4:	e9cd 5603 	strd	r5, r6, [sp, #12]
   186c8:	fba3 250a 	umull	r2, r5, r3, sl
   186cc:	eb0e 0704 	add.w	r7, lr, r4
   186d0:	3c04      	subs	r4, #4
   186d2:	4283      	cmp	r3, r0
   186d4:	ea4f 3255 	mov.w	r2, r5, lsr #13
   186d8:	fb02 3519 	mls	r5, r2, r9, r3
   186dc:	4613      	mov	r3, r2
   186de:	b2ae      	uxth	r6, r5
   186e0:	fba6 6c08 	umull	r6, ip, r6, r8
   186e4:	ea4f 165c 	mov.w	r6, ip, lsr #5
   186e8:	fb06 551b 	mls	r5, r6, fp, r5
   186ec:	f831 6016 	ldrh.w	r6, [r1, r6, lsl #1]
   186f0:	f8a7 6023 	strh.w	r6, [r7, #35]	; 0x23
   186f4:	b2ad      	uxth	r5, r5
   186f6:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
   186fa:	f8a7 5025 	strh.w	r5, [r7, #37]	; 0x25
   186fe:	d8e3      	bhi.n	186c8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x48>
   18700:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
   18704:	f104 0027 	add.w	r0, r4, #39	; 0x27
   18708:	4613      	mov	r3, r2
   1870a:	2b63      	cmp	r3, #99	; 0x63
   1870c:	dc0b      	bgt.n	18726 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa6>
   1870e:	461a      	mov	r2, r3
   18710:	2a0a      	cmp	r2, #10
   18712:	db17      	blt.n	18744 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xc4>
   18714:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
   18718:	3802      	subs	r0, #2
   1871a:	aa05      	add	r2, sp, #20
   1871c:	5211      	strh	r1, [r2, r0]
   1871e:	e016      	b.n	1874e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xce>
   18720:	2027      	movs	r0, #39	; 0x27
   18722:	2b63      	cmp	r3, #99	; 0x63
   18724:	ddf3      	ble.n	1870e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x8e>
   18726:	b29a      	uxth	r2, r3
   18728:	3802      	subs	r0, #2
   1872a:	fba2 2708 	umull	r2, r7, r2, r8
   1872e:	097a      	lsrs	r2, r7, #5
   18730:	2764      	movs	r7, #100	; 0x64
   18732:	fb02 3317 	mls	r3, r2, r7, r3
   18736:	af05      	add	r7, sp, #20
   18738:	b29b      	uxth	r3, r3
   1873a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   1873e:	523b      	strh	r3, [r7, r0]
   18740:	2a0a      	cmp	r2, #10
   18742:	dae7      	bge.n	18714 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x94>
   18744:	3801      	subs	r0, #1
   18746:	f102 0130 	add.w	r1, r2, #48	; 0x30
   1874a:	aa05      	add	r2, sp, #20
   1874c:	5411      	strb	r1, [r2, r0]
   1874e:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   18752:	aa05      	add	r2, sp, #20
   18754:	4410      	add	r0, r2
   18756:	f64f 4294 	movw	r2, #64660	; 0xfc94
   1875a:	e9cd 0100 	strd	r0, r1, [sp]
   1875e:	43e8      	mvns	r0, r5
   18760:	0fc1      	lsrs	r1, r0, #31
   18762:	f2c0 0201 	movt	r2, #1
   18766:	4630      	mov	r0, r6
   18768:	2300      	movs	r3, #0
   1876a:	f7fe fd1b 	bl	171a4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1876e:	b00f      	add	sp, #60	; 0x3c
   18770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018774 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>:
   18774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18778:	b08d      	sub	sp, #52	; 0x34
   1877a:	468c      	mov	ip, r1
   1877c:	6801      	ldr	r1, [r0, #0]
   1877e:	f248 5e1f 	movw	lr, #34079	; 0x851f
   18782:	f64f 60cf 	movw	r0, #65231	; 0xfecf
   18786:	f242 7810 	movw	r8, #10000	; 0x2710
   1878a:	4541      	cmp	r1, r8
   1878c:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   18790:	f2c0 0001 	movt	r0, #1
   18794:	d337      	bcc.n	18806 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x92>
   18796:	f241 7959 	movw	r9, #5977	; 0x1759
   1879a:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   1879e:	f10d 0b0c 	add.w	fp, sp, #12
   187a2:	2300      	movs	r3, #0
   187a4:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   187a8:	f04f 0a64 	mov.w	sl, #100	; 0x64
   187ac:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   187b0:	fba1 2409 	umull	r2, r4, r1, r9
   187b4:	42b9      	cmp	r1, r7
   187b6:	ea4f 3254 	mov.w	r2, r4, lsr #13
   187ba:	fb02 1418 	mls	r4, r2, r8, r1
   187be:	4611      	mov	r1, r2
   187c0:	b2a5      	uxth	r5, r4
   187c2:	fba5 560e 	umull	r5, r6, r5, lr
   187c6:	ea4f 1556 	mov.w	r5, r6, lsr #5
   187ca:	eb0b 0603 	add.w	r6, fp, r3
   187ce:	fb05 441a 	mls	r4, r5, sl, r4
   187d2:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   187d6:	f1a3 0304 	sub.w	r3, r3, #4
   187da:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   187de:	b2a4      	uxth	r4, r4
   187e0:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   187e4:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   187e8:	d8e2      	bhi.n	187b0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x3c>
   187ea:	f103 0427 	add.w	r4, r3, #39	; 0x27
   187ee:	4611      	mov	r1, r2
   187f0:	2963      	cmp	r1, #99	; 0x63
   187f2:	dc0b      	bgt.n	1880c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x98>
   187f4:	460b      	mov	r3, r1
   187f6:	2b0a      	cmp	r3, #10
   187f8:	db17      	blt.n	1882a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xb6>
   187fa:	1ea1      	subs	r1, r4, #2
   187fc:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   18800:	aa03      	add	r2, sp, #12
   18802:	5250      	strh	r0, [r2, r1]
   18804:	e016      	b.n	18834 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xc0>
   18806:	2427      	movs	r4, #39	; 0x27
   18808:	2963      	cmp	r1, #99	; 0x63
   1880a:	ddf3      	ble.n	187f4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x80>
   1880c:	b28a      	uxth	r2, r1
   1880e:	3c02      	subs	r4, #2
   18810:	fba2 230e 	umull	r2, r3, r2, lr
   18814:	2264      	movs	r2, #100	; 0x64
   18816:	095b      	lsrs	r3, r3, #5
   18818:	fb03 1112 	mls	r1, r3, r2, r1
   1881c:	aa03      	add	r2, sp, #12
   1881e:	b289      	uxth	r1, r1
   18820:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   18824:	5311      	strh	r1, [r2, r4]
   18826:	2b0a      	cmp	r3, #10
   18828:	dae7      	bge.n	187fa <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x86>
   1882a:	1e61      	subs	r1, r4, #1
   1882c:	aa03      	add	r2, sp, #12
   1882e:	f103 0030 	add.w	r0, r3, #48	; 0x30
   18832:	5450      	strb	r0, [r2, r1]
   18834:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   18838:	aa03      	add	r2, sp, #12
   1883a:	4411      	add	r1, r2
   1883c:	f64f 4294 	movw	r2, #64660	; 0xfc94
   18840:	e9cd 1000 	strd	r1, r0, [sp]
   18844:	f2c0 0201 	movt	r2, #1
   18848:	4660      	mov	r0, ip
   1884a:	2101      	movs	r1, #1
   1884c:	2300      	movs	r3, #0
   1884e:	f7fe fca9 	bl	171a4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18852:	b00d      	add	sp, #52	; 0x34
   18854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018858 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E>:
   18858:	e9d0 2000 	ldrd	r2, r0, [r0]
   1885c:	68c3      	ldr	r3, [r0, #12]
   1885e:	4610      	mov	r0, r2
   18860:	4718      	bx	r3

00018862 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E>:
   18862:	460b      	mov	r3, r1
   18864:	e9d0 1200 	ldrd	r1, r2, [r0]
   18868:	4618      	mov	r0, r3
   1886a:	f7fe bde3 	b.w	17434 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
	...

00018870 <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
   18870:	4b07      	ldr	r3, [pc, #28]	; (18890 <__semihost+0x20>)
   18872:	781b      	ldrb	r3, [r3, #0]
   18874:	b14b      	cbz	r3, 1888a <__semihost+0x1a>
static int __semihost(int command, void* message) {
   18876:	b410      	push	{r4}
   18878:	4602      	mov	r2, r0
   1887a:	460c      	mov	r4, r1
    __asm( 
   1887c:	4610      	mov	r0, r2
   1887e:	4621      	mov	r1, r4
   18880:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
   18882:	2000      	movs	r0, #0
}
   18884:	f85d 4b04 	ldr.w	r4, [sp], #4
   18888:	4770      	bx	lr
    if (!log_enabled) return -1;
   1888a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1888e:	4770      	bx	lr
   18890:	20000100 	.word	0x20000100

00018894 <debugger_connected>:
// #define SYS_RENAME (0xf)
// #define SYS_EXIT   (0x18)

static int debugger_connected(void) {
    //  Return non-zero if debugger is connected. From repos/apache-mynewt-core/hw/mcu/ambiq/apollo2/src/hal_system.c
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   18894:	4b02      	ldr	r3, [pc, #8]	; (188a0 <debugger_connected+0xc>)
   18896:	6818      	ldr	r0, [r3, #0]
}
   18898:	f000 0001 	and.w	r0, r0, #1
   1889c:	4770      	bx	lr
   1889e:	bf00      	nop
   188a0:	e000edf0 	.word	0xe000edf0

000188a4 <semihost_write>:
#endif  //  !DISABLE_SEMIHOSTING

// We normally set the file handle to 2 to write to the debugger's stderr output.
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
   188a4:	b570      	push	{r4, r5, r6, lr}
   188a6:	b084      	sub	sp, #16
   188a8:	4606      	mov	r6, r0
   188aa:	460d      	mov	r5, r1
   188ac:	4614      	mov	r4, r2
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return 0;               //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
   188ae:	f7ff fff1 	bl	18894 <debugger_connected>
   188b2:	4603      	mov	r3, r0
   188b4:	b108      	cbz	r0, 188ba <semihost_write+0x16>
    if (length == 0) { return 0; }
   188b6:	b91c      	cbnz	r4, 188c0 <semihost_write+0x1c>
   188b8:	2300      	movs	r3, #0
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
#endif  //  DISABLE_SEMIHOSTING
}
   188ba:	4618      	mov	r0, r3
   188bc:	b004      	add	sp, #16
   188be:	bd70      	pop	{r4, r5, r6, pc}
    args[0] = (uint32_t)fh;
   188c0:	9601      	str	r6, [sp, #4]
    args[1] = (uint32_t)buffer;
   188c2:	9502      	str	r5, [sp, #8]
    args[2] = (uint32_t)length;
   188c4:	9403      	str	r4, [sp, #12]
    return __semihost(SYS_WRITE, args);
   188c6:	a901      	add	r1, sp, #4
   188c8:	2005      	movs	r0, #5
   188ca:	f7ff ffd1 	bl	18870 <__semihost>
   188ce:	4603      	mov	r3, r0
   188d0:	e7f3      	b.n	188ba <semihost_write+0x16>
	...

000188d4 <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
   188d4:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
   188d6:	4b0e      	ldr	r3, [pc, #56]	; (18910 <console_flush+0x3c>)
   188d8:	781b      	ldrb	r3, [r3, #0]
   188da:	b1bb      	cbz	r3, 1890c <console_flush+0x38>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
   188dc:	4b0d      	ldr	r3, [pc, #52]	; (18914 <console_flush+0x40>)
   188de:	681d      	ldr	r5, [r3, #0]
   188e0:	b1a5      	cbz	r5, 1890c <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   188e2:	4b0d      	ldr	r3, [pc, #52]	; (18918 <console_flush+0x44>)
   188e4:	685b      	ldr	r3, [r3, #4]
   188e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
   188ea:	b97b      	cbnz	r3, 1890c <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
   188ec:	4b09      	ldr	r3, [pc, #36]	; (18914 <console_flush+0x40>)
   188ee:	2200      	movs	r2, #0
   188f0:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
   188f2:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
   188f4:	e005      	b.n	18902 <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
   188f6:	88e2      	ldrh	r2, [r4, #6]
   188f8:	6821      	ldr	r1, [r4, #0]
   188fa:	2002      	movs	r0, #2
   188fc:	f7ff ffd2 	bl	188a4 <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
   18900:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
   18902:	2c00      	cmp	r4, #0
   18904:	d1f7      	bne.n	188f6 <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
   18906:	4628      	mov	r0, r5
   18908:	f001 fbfc 	bl	1a104 <os_mbuf_free_chain>
}
   1890c:	bd38      	pop	{r3, r4, r5, pc}
   1890e:	bf00      	nop
   18910:	20000100 	.word	0x20000100
   18914:	200016b4 	.word	0x200016b4
   18918:	e000ed00 	.word	0xe000ed00

0001891c <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
   1891c:	b508      	push	{r3, lr}
   1891e:	f7ff ffd9 	bl	188d4 <console_flush>
   18922:	bd08      	pop	{r3, pc}

00018924 <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
   18924:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return;                 //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
   18926:	4b12      	ldr	r3, [pc, #72]	; (18970 <console_buffer+0x4c>)
   18928:	781b      	ldrb	r3, [r3, #0]
   1892a:	b903      	cbnz	r3, 1892e <console_buffer+0xa>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
   1892c:	bd38      	pop	{r3, r4, r5, pc}
   1892e:	460d      	mov	r5, r1
   18930:	4604      	mov	r4, r0
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
   18932:	f7ff ffaf 	bl	18894 <debugger_connected>
   18936:	2800      	cmp	r0, #0
   18938:	d0f8      	beq.n	1892c <console_buffer+0x8>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
   1893a:	4b0e      	ldr	r3, [pc, #56]	; (18974 <console_buffer+0x50>)
   1893c:	681b      	ldr	r3, [r3, #0]
   1893e:	b173      	cbz	r3, 1895e <console_buffer+0x3a>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
   18940:	4b0c      	ldr	r3, [pc, #48]	; (18974 <console_buffer+0x50>)
   18942:	6818      	ldr	r0, [r3, #0]
   18944:	f001 fbf0 	bl	1a128 <os_mbuf_len>
   18948:	4428      	add	r0, r5
   1894a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   1894e:	d2ed      	bcs.n	1892c <console_buffer+0x8>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
   18950:	b2aa      	uxth	r2, r5
   18952:	4621      	mov	r1, r4
   18954:	4b07      	ldr	r3, [pc, #28]	; (18974 <console_buffer+0x50>)
   18956:	6818      	ldr	r0, [r3, #0]
   18958:	f001 fbf0 	bl	1a13c <os_mbuf_append>
   1895c:	e7e6      	b.n	1892c <console_buffer+0x8>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
   1895e:	2100      	movs	r1, #0
   18960:	b2a8      	uxth	r0, r5
   18962:	f001 fd93 	bl	1a48c <os_msys_get_pkthdr>
   18966:	4b03      	ldr	r3, [pc, #12]	; (18974 <console_buffer+0x50>)
   18968:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
   1896a:	2800      	cmp	r0, #0
   1896c:	d1e8      	bne.n	18940 <console_buffer+0x1c>
   1896e:	e7dd      	b.n	1892c <console_buffer+0x8>
   18970:	20000100 	.word	0x20000100
   18974:	200016b4 	.word	0x200016b4

00018978 <semihosting_console_write_ch>:
    float f_abs = *neg ? -f : f;          //  Absolute value of f
    *i = (int) f_abs;                     //  Integer part
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  6 decimal places
}

static void semihosting_console_write_ch(char c) {
   18978:	b500      	push	{lr}
   1897a:	b083      	sub	sp, #12
   1897c:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
   18980:	280d      	cmp	r0, #13
   18982:	d004      	beq.n	1898e <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
   18984:	2101      	movs	r1, #1
   18986:	f10d 0007 	add.w	r0, sp, #7
   1898a:	f7ff ffcb 	bl	18924 <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
   1898e:	b003      	add	sp, #12
   18990:	f85d fb04 	ldr.w	pc, [sp], #4

00018994 <console_printhex>:
void console_printhex(uint8_t v) {
   18994:	b510      	push	{r4, lr}
   18996:	b082      	sub	sp, #8
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   18998:	2310      	movs	r3, #16
    int length = 0;
   1899a:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   1899c:	e005      	b.n	189aa <console_printhex+0x16>
        v = v % divisor;
   1899e:	fbb0 f1f3 	udiv	r1, r0, r3
   189a2:	fb03 0011 	mls	r0, r3, r1, r0
   189a6:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   189a8:	091b      	lsrs	r3, r3, #4
   189aa:	b18b      	cbz	r3, 189d0 <console_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
   189ac:	fbb0 f4f3 	udiv	r4, r0, r3
   189b0:	f104 0130 	add.w	r1, r4, #48	; 0x30
   189b4:	b2c9      	uxtb	r1, r1
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
   189b6:	2939      	cmp	r1, #57	; 0x39
   189b8:	d902      	bls.n	189c0 <console_printhex+0x2c>
   189ba:	f104 0157 	add.w	r1, r4, #87	; 0x57
   189be:	b2c9      	uxtb	r1, r1
            if (length < size) {
   189c0:	2a02      	cmp	r2, #2
   189c2:	dcec      	bgt.n	1899e <console_printhex+0xa>
                buffer[length++] = digit;
   189c4:	ac02      	add	r4, sp, #8
   189c6:	4414      	add	r4, r2
   189c8:	f804 1c04 	strb.w	r1, [r4, #-4]
   189cc:	3201      	adds	r2, #1
   189ce:	e7e6      	b.n	1899e <console_printhex+0xa>
    if (length == 0) { buffer[length++] = '0'; };
   189d0:	b92a      	cbnz	r2, 189de <console_printhex+0x4a>
   189d2:	ab02      	add	r3, sp, #8
   189d4:	4413      	add	r3, r2
   189d6:	2130      	movs	r1, #48	; 0x30
   189d8:	f803 1c04 	strb.w	r1, [r3, #-4]
   189dc:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
   189de:	2a02      	cmp	r2, #2
   189e0:	dc04      	bgt.n	189ec <console_printhex+0x58>
   189e2:	ab02      	add	r3, sp, #8
   189e4:	441a      	add	r2, r3
   189e6:	2300      	movs	r3, #0
   189e8:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
   189ec:	2300      	movs	r3, #0
   189ee:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
   189f2:	a801      	add	r0, sp, #4
   189f4:	f002 fb73 	bl	1b0de <strlen>
   189f8:	4601      	mov	r1, r0
   189fa:	a801      	add	r0, sp, #4
   189fc:	f7ff ff92 	bl	18924 <console_buffer>
}
   18a00:	b002      	add	sp, #8
   18a02:	bd10      	pop	{r4, pc}

00018a04 <console_printint>:
void console_printint(int i) {
   18a04:	b508      	push	{r3, lr}
    console_printf("%d", i);
   18a06:	4601      	mov	r1, r0
   18a08:	4801      	ldr	r0, [pc, #4]	; (18a10 <console_printint+0xc>)
   18a0a:	f000 f873 	bl	18af4 <console_printf>
}
   18a0e:	bd08      	pop	{r3, pc}
   18a10:	00020e94 	.word	0x00020e94

00018a14 <console_dump>:
    if (buffer == NULL || len == 0) { return; }
   18a14:	b180      	cbz	r0, 18a38 <console_dump+0x24>
void console_dump(const uint8_t *buffer, unsigned int len) {
   18a16:	b570      	push	{r4, r5, r6, lr}
   18a18:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
   18a1a:	b161      	cbz	r1, 18a36 <console_dump+0x22>
   18a1c:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
   18a1e:	2400      	movs	r4, #0
   18a20:	e007      	b.n	18a32 <console_dump+0x1e>
   18a22:	5d30      	ldrb	r0, [r6, r4]
   18a24:	f7ff ffb6 	bl	18994 <console_printhex>
   18a28:	2101      	movs	r1, #1
   18a2a:	4804      	ldr	r0, [pc, #16]	; (18a3c <console_dump+0x28>)
   18a2c:	f7ff ff7a 	bl	18924 <console_buffer>
   18a30:	3401      	adds	r4, #1
   18a32:	42ac      	cmp	r4, r5
   18a34:	d3f5      	bcc.n	18a22 <console_dump+0xe>
}
   18a36:	bd70      	pop	{r4, r5, r6, pc}
   18a38:	4770      	bx	lr
   18a3a:	bf00      	nop
   18a3c:	00020e90 	.word	0x00020e90

00018a40 <console_out_nolock>:

int console_out_nolock(int character) {
   18a40:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
   18a42:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
   18a44:	4b0b      	ldr	r3, [pc, #44]	; (18a74 <console_out_nolock+0x34>)
   18a46:	781b      	ldrb	r3, [r3, #0]
   18a48:	b953      	cbnz	r3, 18a60 <console_out_nolock+0x20>
   18a4a:	4604      	mov	r4, r0
    if ('\n' == c) {
   18a4c:	2d0a      	cmp	r5, #10
   18a4e:	d009      	beq.n	18a64 <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
   18a50:	4b09      	ldr	r3, [pc, #36]	; (18a78 <console_out_nolock+0x38>)
   18a52:	2201      	movs	r2, #1
   18a54:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
   18a56:	4628      	mov	r0, r5
   18a58:	f7ff ff8e 	bl	18978 <semihosting_console_write_ch>
    return character;
   18a5c:	4620      	mov	r0, r4
}
   18a5e:	bd38      	pop	{r3, r4, r5, pc}
   18a60:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
   18a62:	e7fc      	b.n	18a5e <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
   18a64:	200d      	movs	r0, #13
   18a66:	f7ff ff87 	bl	18978 <semihosting_console_write_ch>
        console_is_midline = 0;
   18a6a:	4b03      	ldr	r3, [pc, #12]	; (18a78 <console_out_nolock+0x38>)
   18a6c:	2200      	movs	r2, #0
   18a6e:	601a      	str	r2, [r3, #0]
   18a70:	e7f1      	b.n	18a56 <console_out_nolock+0x16>
   18a72:	bf00      	nop
   18a74:	2000a564 	.word	0x2000a564
   18a78:	2000a568 	.word	0x2000a568

00018a7c <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
   18a7c:	2000      	movs	r0, #0
   18a7e:	4770      	bx	lr

00018a80 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
   18a80:	b570      	push	{r4, r5, r6, lr}
   18a82:	4606      	mov	r6, r0
   18a84:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
   18a86:	2400      	movs	r4, #0
   18a88:	42ac      	cmp	r4, r5
   18a8a:	da07      	bge.n	18a9c <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
   18a8c:	5d30      	ldrb	r0, [r6, r4]
   18a8e:	f7ff ffd7 	bl	18a40 <console_out_nolock>
   18a92:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   18a96:	d001      	beq.n	18a9c <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
   18a98:	3401      	adds	r4, #1
   18a9a:	e7f5      	b.n	18a88 <console_write+0x8>
    }
}
   18a9c:	bd70      	pop	{r4, r5, r6, pc}

00018a9e <console_blocking_mode>:

void console_blocking_mode(void) {
   18a9e:	b508      	push	{r3, lr}
    disable_buffer();
   18aa0:	f7ff ff3c 	bl	1891c <disable_buffer>
}
   18aa4:	bd08      	pop	{r3, pc}
	...

00018aa8 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
   18aa8:	b510      	push	{r4, lr}
   18aaa:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   18aac:	4b0d      	ldr	r3, [pc, #52]	; (18ae4 <console_pkg_init+0x3c>)
   18aae:	781b      	ldrb	r3, [r3, #0]
   18ab0:	b193      	cbz	r3, 18ad8 <console_pkg_init+0x30>

    os_eventq_init(&avail_queue);
   18ab2:	480d      	ldr	r0, [pc, #52]	; (18ae8 <console_pkg_init+0x40>)
   18ab4:	f001 f9fa 	bl	19eac <os_eventq_init>
    os_mutex_init(&console_write_lock);
   18ab8:	480c      	ldr	r0, [pc, #48]	; (18aec <console_pkg_init+0x44>)
   18aba:	f001 fd15 	bl	1a4e8 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
   18abe:	f7ff ffdd 	bl	18a7c <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   18ac2:	b138      	cbz	r0, 18ad4 <console_pkg_init+0x2c>
   18ac4:	2000      	movs	r0, #0
   18ac6:	9000      	str	r0, [sp, #0]
   18ac8:	4b09      	ldr	r3, [pc, #36]	; (18af0 <console_pkg_init+0x48>)
   18aca:	681c      	ldr	r4, [r3, #0]
   18acc:	4603      	mov	r3, r0
   18ace:	4602      	mov	r2, r0
   18ad0:	4601      	mov	r1, r0
   18ad2:	47a0      	blx	r4
}
   18ad4:	b002      	add	sp, #8
   18ad6:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   18ad8:	461a      	mov	r2, r3
   18ada:	4619      	mov	r1, r3
   18adc:	4618      	mov	r0, r3
   18ade:	f000 fed1 	bl	19884 <__assert_func>
   18ae2:	bf00      	nop
   18ae4:	2000a56c 	.word	0x2000a56c
   18ae8:	200016b8 	.word	0x200016b8
   18aec:	200016c8 	.word	0x200016c8
   18af0:	20000104 	.word	0x20000104

00018af4 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   18af4:	b40f      	push	{r0, r1, r2, r3}
   18af6:	b510      	push	{r4, lr}
   18af8:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   18afa:	f000 f81f 	bl	18b3c <console_get_ticks>
   18afe:	b160      	cbz	r0, 18b1a <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   18b00:	4b0c      	ldr	r3, [pc, #48]	; (18b34 <console_printf+0x40>)
   18b02:	681b      	ldr	r3, [r3, #0]
   18b04:	b10b      	cbz	r3, 18b0a <console_printf+0x16>
    num_chars = 0;
   18b06:	2400      	movs	r4, #0
   18b08:	e008      	b.n	18b1c <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   18b0a:	f002 f8d9 	bl	1acc0 <os_time_get>
   18b0e:	4601      	mov	r1, r0
   18b10:	4809      	ldr	r0, [pc, #36]	; (18b38 <console_printf+0x44>)
   18b12:	f002 fd97 	bl	1b644 <printf>
   18b16:	4604      	mov	r4, r0
   18b18:	e000      	b.n	18b1c <console_printf+0x28>
    num_chars = 0;
   18b1a:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
   18b1c:	a905      	add	r1, sp, #20
   18b1e:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
   18b20:	9804      	ldr	r0, [sp, #16]
   18b22:	f002 fdbf 	bl	1b6a4 <vprintf>
    va_end(args);

    return num_chars;
}
   18b26:	4420      	add	r0, r4
   18b28:	b002      	add	sp, #8
   18b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18b2e:	b004      	add	sp, #16
   18b30:	4770      	bx	lr
   18b32:	bf00      	nop
   18b34:	2000a568 	.word	0x2000a568
   18b38:	00020e98 	.word	0x00020e98

00018b3c <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   18b3c:	4b01      	ldr	r3, [pc, #4]	; (18b44 <console_get_ticks+0x8>)
   18b3e:	7818      	ldrb	r0, [r3, #0]
   18b40:	4770      	bx	lr
   18b42:	bf00      	nop
   18b44:	200016d4 	.word	0x200016d4

00018b48 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   18b48:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   18b4a:	f000 fe9b 	bl	19884 <__assert_func>
	...

00018b50 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   18b50:	4b01      	ldr	r3, [pc, #4]	; (18b58 <sysinit_start+0x8>)
   18b52:	2201      	movs	r2, #1
   18b54:	701a      	strb	r2, [r3, #0]
}
   18b56:	4770      	bx	lr
   18b58:	2000a56c 	.word	0x2000a56c

00018b5c <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   18b5c:	4b01      	ldr	r3, [pc, #4]	; (18b64 <sysinit_end+0x8>)
   18b5e:	2200      	movs	r2, #0
   18b60:	701a      	strb	r2, [r3, #0]
}
   18b62:	4770      	bx	lr
   18b64:	2000a56c 	.word	0x2000a56c

00018b68 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   18b68:	4a09      	ldr	r2, [pc, #36]	; (18b90 <NVIC_Relocate+0x28>)
   18b6a:	4b0a      	ldr	r3, [pc, #40]	; (18b94 <NVIC_Relocate+0x2c>)
   18b6c:	429a      	cmp	r2, r3
   18b6e:	d00a      	beq.n	18b86 <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   18b70:	2300      	movs	r3, #0
   18b72:	e006      	b.n	18b82 <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
   18b74:	4a07      	ldr	r2, [pc, #28]	; (18b94 <NVIC_Relocate+0x2c>)
   18b76:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   18b7a:	4a05      	ldr	r2, [pc, #20]	; (18b90 <NVIC_Relocate+0x28>)
   18b7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   18b80:	3301      	adds	r3, #1
   18b82:	2b35      	cmp	r3, #53	; 0x35
   18b84:	ddf6      	ble.n	18b74 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   18b86:	4a02      	ldr	r2, [pc, #8]	; (18b90 <NVIC_Relocate+0x28>)
   18b88:	4b03      	ldr	r3, [pc, #12]	; (18b98 <NVIC_Relocate+0x30>)
   18b8a:	609a      	str	r2, [r3, #8]
#endif
}
   18b8c:	4770      	bx	lr
   18b8e:	bf00      	nop
   18b90:	20000000 	.word	0x20000000
   18b94:	00008020 	.word	0x00008020
   18b98:	e000ed00 	.word	0xe000ed00

00018b9c <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
   18b9c:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   18b9e:	2400      	movs	r4, #0
   18ba0:	e000      	b.n	18ba4 <hal_gpio_irq_handler+0x8>
   18ba2:	3401      	adds	r4, #1
   18ba4:	2c07      	cmp	r4, #7
   18ba6:	dc1c      	bgt.n	18be2 <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
   18ba8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   18bac:	4a0d      	ldr	r2, [pc, #52]	; (18be4 <hal_gpio_irq_handler+0x48>)
   18bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18bb2:	2b00      	cmp	r3, #0
   18bb4:	d0f5      	beq.n	18ba2 <hal_gpio_irq_handler+0x6>
   18bb6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   18bba:	2301      	movs	r3, #1
   18bbc:	40a3      	lsls	r3, r4
   18bbe:	421a      	tst	r2, r3
   18bc0:	d0ef      	beq.n	18ba2 <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
   18bc2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   18bc6:	4a07      	ldr	r2, [pc, #28]	; (18be4 <hal_gpio_irq_handler+0x48>)
   18bc8:	2100      	movs	r1, #0
   18bca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
   18bce:	4b06      	ldr	r3, [pc, #24]	; (18be8 <hal_gpio_irq_handler+0x4c>)
   18bd0:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   18bd4:	2a00      	cmp	r2, #0
   18bd6:	d0e4      	beq.n	18ba2 <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
   18bd8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   18bdc:	6858      	ldr	r0, [r3, #4]
   18bde:	4790      	blx	r2
   18be0:	e7df      	b.n	18ba2 <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
   18be2:	bd10      	pop	{r4, pc}
   18be4:	40006000 	.word	0x40006000
   18be8:	200016d8 	.word	0x200016d8

00018bec <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
   18bec:	4b06      	ldr	r3, [pc, #24]	; (18c08 <hal_gpio_irq_setup+0x1c>)
   18bee:	781b      	ldrb	r3, [r3, #0]
   18bf0:	b94b      	cbnz	r3, 18c06 <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   18bf2:	4b06      	ldr	r3, [pc, #24]	; (18c0c <hal_gpio_irq_setup+0x20>)
   18bf4:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   18bf6:	4a06      	ldr	r2, [pc, #24]	; (18c10 <hal_gpio_irq_setup+0x24>)
   18bf8:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18bfa:	4b06      	ldr	r3, [pc, #24]	; (18c14 <hal_gpio_irq_setup+0x28>)
   18bfc:	2240      	movs	r2, #64	; 0x40
   18bfe:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
   18c00:	4b01      	ldr	r3, [pc, #4]	; (18c08 <hal_gpio_irq_setup+0x1c>)
   18c02:	2201      	movs	r2, #1
   18c04:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
   18c06:	4770      	bx	lr
   18c08:	20001718 	.word	0x20001718
   18c0c:	e000ed00 	.word	0xe000ed00
   18c10:	00018b9d 	.word	0x00018b9d
   18c14:	e000e100 	.word	0xe000e100

00018c18 <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   18c18:	2000      	movs	r0, #0
   18c1a:	2807      	cmp	r0, #7
   18c1c:	dc05      	bgt.n	18c2a <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
   18c1e:	4b04      	ldr	r3, [pc, #16]	; (18c30 <hal_gpio_find_empty_slot+0x18>)
   18c20:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   18c24:	b11b      	cbz	r3, 18c2e <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   18c26:	3001      	adds	r0, #1
   18c28:	e7f7      	b.n	18c1a <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
   18c2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   18c2e:	4770      	bx	lr
   18c30:	200016d8 	.word	0x200016d8

00018c34 <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
   18c34:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   18c36:	2000      	movs	r0, #0
   18c38:	e000      	b.n	18c3c <hal_gpio_find_pin+0x8>
   18c3a:	3001      	adds	r0, #1
   18c3c:	2807      	cmp	r0, #7
   18c3e:	dc0e      	bgt.n	18c5e <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
   18c40:	4b08      	ldr	r3, [pc, #32]	; (18c64 <hal_gpio_find_pin+0x30>)
   18c42:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   18c46:	2b00      	cmp	r3, #0
   18c48:	d0f7      	beq.n	18c3a <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
   18c4a:	f500 73a2 	add.w	r3, r0, #324	; 0x144
   18c4e:	4a06      	ldr	r2, [pc, #24]	; (18c68 <hal_gpio_find_pin+0x34>)
   18c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18c54:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
   18c58:	428b      	cmp	r3, r1
   18c5a:	d1ee      	bne.n	18c3a <hal_gpio_find_pin+0x6>
   18c5c:	e001      	b.n	18c62 <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
   18c5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   18c62:	4770      	bx	lr
   18c64:	200016d8 	.word	0x200016d8
   18c68:	40006000 	.word	0x40006000

00018c6c <hal_gpio_init_in>:
    switch (pull) {
   18c6c:	2901      	cmp	r1, #1
   18c6e:	d003      	beq.n	18c78 <hal_gpio_init_in+0xc>
   18c70:	2902      	cmp	r1, #2
   18c72:	d00f      	beq.n	18c94 <hal_gpio_init_in+0x28>
        conf = 0;
   18c74:	2100      	movs	r1, #0
        break;
   18c76:	e000      	b.n	18c7a <hal_gpio_init_in+0xe>
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
   18c78:	210c      	movs	r1, #12
    port->PIN_CNF[pin_index] = conf;
   18c7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18c7e:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   18c82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
   18c86:	2301      	movs	r3, #1
   18c88:	fa03 f000 	lsl.w	r0, r3, r0
   18c8c:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
   18c90:	2000      	movs	r0, #0
   18c92:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
   18c94:	2104      	movs	r1, #4
   18c96:	e7f0      	b.n	18c7a <hal_gpio_init_in+0xe>

00018c98 <hal_gpio_init_out>:
    if (val) {
   18c98:	b999      	cbnz	r1, 18cc2 <hal_gpio_init_out+0x2a>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   18c9a:	2301      	movs	r3, #1
   18c9c:	4083      	lsls	r3, r0
   18c9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18ca2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
   18ca6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18caa:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   18cae:	2103      	movs	r1, #3
   18cb0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
   18cb4:	2301      	movs	r3, #1
   18cb6:	fa03 f000 	lsl.w	r0, r3, r0
   18cba:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
   18cbe:	2000      	movs	r0, #0
   18cc0:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   18cc2:	2301      	movs	r3, #1
   18cc4:	4083      	lsls	r3, r0
   18cc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18cca:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   18cce:	e7ea      	b.n	18ca6 <hal_gpio_init_out+0xe>

00018cd0 <hal_gpio_write>:
    if (val) {
   18cd0:	b939      	cbnz	r1, 18ce2 <hal_gpio_write+0x12>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   18cd2:	2301      	movs	r3, #1
   18cd4:	fa03 f000 	lsl.w	r0, r3, r0
   18cd8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18cdc:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   18ce0:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   18ce2:	2301      	movs	r3, #1
   18ce4:	fa03 f000 	lsl.w	r0, r3, r0
   18ce8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18cec:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   18cf0:	4770      	bx	lr

00018cf2 <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
   18cf2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18cf6:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
   18cfa:	2301      	movs	r3, #1
   18cfc:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   18cfe:	421a      	tst	r2, r3
   18d00:	d108      	bne.n	18d14 <hal_gpio_read+0x22>
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   18d02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18d06:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   18d0a:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   18d0e:	f000 0001 	and.w	r0, r0, #1
}
   18d12:	4770      	bx	lr
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   18d14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18d18:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   18d1c:	fa23 f000 	lsr.w	r0, r3, r0
   18d20:	f000 0001 	and.w	r0, r0, #1
   18d24:	4770      	bx	lr
	...

00018d28 <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
   18d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18d2c:	4680      	mov	r8, r0
   18d2e:	460f      	mov	r7, r1
   18d30:	4616      	mov	r6, r2
   18d32:	461c      	mov	r4, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
   18d34:	f7ff ff5a 	bl	18bec <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
   18d38:	f7ff ff6e 	bl	18c18 <hal_gpio_find_empty_slot>
    if (i < 0) {
   18d3c:	1e05      	subs	r5, r0, #0
   18d3e:	db27      	blt.n	18d90 <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
   18d40:	f89d 1018 	ldrb.w	r1, [sp, #24]
   18d44:	4640      	mov	r0, r8
   18d46:	f7ff ff91 	bl	18c6c <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
   18d4a:	2c02      	cmp	r4, #2
   18d4c:	d01d      	beq.n	18d8a <hal_gpio_irq_init+0x62>
   18d4e:	2c03      	cmp	r4, #3
   18d50:	d018      	beq.n	18d84 <hal_gpio_irq_init+0x5c>
   18d52:	2c01      	cmp	r4, #1
   18d54:	d002      	beq.n	18d5c <hal_gpio_irq_init+0x34>
        break;
    case HAL_GPIO_TRIG_BOTH:
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
        break;
    default:
        return -1;
   18d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18d5a:	e011      	b.n	18d80 <hal_gpio_irq_init+0x58>
        conf = GPIOTE_CONFIG_POLARITY_LoToHi << GPIOTE_CONFIG_POLARITY_Pos;
   18d5c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
   18d60:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
   18d64:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
   18d68:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   18d6c:	4b0a      	ldr	r3, [pc, #40]	; (18d98 <hal_gpio_irq_init+0x70>)
   18d6e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
   18d72:	4b0a      	ldr	r3, [pc, #40]	; (18d9c <hal_gpio_irq_init+0x74>)
   18d74:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
    hal_gpio_irqs[i].arg = arg;
   18d78:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   18d7c:	605e      	str	r6, [r3, #4]

    return 0;
   18d7e:	2000      	movs	r0, #0
}
   18d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
   18d84:	f44f 3040 	mov.w	r0, #196608	; 0x30000
        break;
   18d88:	e7ea      	b.n	18d60 <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
   18d8a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   18d8e:	e7e7      	b.n	18d60 <hal_gpio_irq_init+0x38>
        return -1;
   18d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18d94:	e7f4      	b.n	18d80 <hal_gpio_irq_init+0x58>
   18d96:	bf00      	nop
   18d98:	40006000 	.word	0x40006000
   18d9c:	200016d8 	.word	0x200016d8

00018da0 <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
   18da0:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
   18da2:	f7ff ff47 	bl	18c34 <hal_gpio_find_pin>
    if (i < 0) {
   18da6:	2800      	cmp	r0, #0
   18da8:	db0a      	blt.n	18dc0 <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
   18daa:	4a06      	ldr	r2, [pc, #24]	; (18dc4 <hal_gpio_irq_enable+0x24>)
   18dac:	f100 0340 	add.w	r3, r0, #64	; 0x40
   18db0:	2100      	movs	r1, #0
   18db2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
   18db6:	2301      	movs	r3, #1
   18db8:	fa03 f000 	lsl.w	r0, r3, r0
   18dbc:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
   18dc0:	bd08      	pop	{r3, pc}
   18dc2:	bf00      	nop
   18dc4:	40006000 	.word	0x40006000

00018dc8 <hal_i2c_delay_us>:

static void
hal_i2c_delay_us(uint32_t number_of_us)
{
register uint32_t delay __ASM ("r0") = number_of_us;
__ASM volatile (
   18dc8:	3801      	subs	r0, #1
   18dca:	bf00      	nop
   18dcc:	bf00      	nop
   18dce:	bf00      	nop
   18dd0:	bf00      	nop
   18dd2:	bf00      	nop
   18dd4:	bf00      	nop
   18dd6:	bf00      	nop
   18dd8:	bf00      	nop
   18dda:	bf00      	nop
   18ddc:	bf00      	nop
   18dde:	bf00      	nop
   18de0:	bf00      	nop
   18de2:	bf00      	nop
   18de4:	bf00      	nop
   18de6:	bf00      	nop
   18de8:	bf00      	nop
   18dea:	bf00      	nop
   18dec:	bf00      	nop
   18dee:	bf00      	nop
   18df0:	bf00      	nop
   18df2:	bf00      	nop
   18df4:	bf00      	nop
   18df6:	bf00      	nop
   18df8:	bf00      	nop
   18dfa:	bf00      	nop
   18dfc:	bf00      	nop
   18dfe:	bf00      	nop
   18e00:	bf00      	nop
   18e02:	bf00      	nop
   18e04:	bf00      	nop
   18e06:	bf00      	nop
   18e08:	bf00      	nop
   18e0a:	bf00      	nop
   18e0c:	bf00      	nop
   18e0e:	bf00      	nop
   18e10:	bf00      	nop
   18e12:	bf00      	nop
   18e14:	bf00      	nop
   18e16:	bf00      	nop
   18e18:	bf00      	nop
   18e1a:	bf00      	nop
   18e1c:	bf00      	nop
   18e1e:	bf00      	nop
   18e20:	bf00      	nop
   18e22:	bf00      	nop
   18e24:	bf00      	nop
   18e26:	bf00      	nop
   18e28:	bf00      	nop
   18e2a:	bf00      	nop
   18e2c:	bf00      	nop
   18e2e:	bf00      	nop
   18e30:	bf00      	nop
   18e32:	bf00      	nop
   18e34:	bf00      	nop
   18e36:	bf00      	nop
   18e38:	bf00      	nop
   18e3a:	bf00      	nop
   18e3c:	bf00      	nop
   18e3e:	d1c3      	bne.n	18dc8 <hal_i2c_delay_us>
    " BNE 1b\n"
#ifdef NRF51
    ".syntax divided\n"
#endif
    : "+r" (delay));
}
   18e40:	4770      	bx	lr
	...

00018e44 <hal_i2c_resolve>:

static int
hal_i2c_resolve(uint8_t i2c_num, struct nrf52_hal_i2c **out_i2c)
{
    if (i2c_num >= NRF52_HAL_I2C_MAX) {
   18e44:	2801      	cmp	r0, #1
   18e46:	d806      	bhi.n	18e56 <hal_i2c_resolve+0x12>
        *out_i2c = NULL;
        return HAL_I2C_ERR_INVAL;
    }

    *out_i2c = nrf52_hal_i2cs[i2c_num];
   18e48:	4b06      	ldr	r3, [pc, #24]	; (18e64 <hal_i2c_resolve+0x20>)
   18e4a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   18e4e:	600b      	str	r3, [r1, #0]
    if (*out_i2c == NULL) {
   18e50:	b12b      	cbz	r3, 18e5e <hal_i2c_resolve+0x1a>
        return HAL_I2C_ERR_INVAL;
    }

    return 0;
   18e52:	2000      	movs	r0, #0
}
   18e54:	4770      	bx	lr
        *out_i2c = NULL;
   18e56:	2300      	movs	r3, #0
   18e58:	600b      	str	r3, [r1, #0]
        return HAL_I2C_ERR_INVAL;
   18e5a:	2002      	movs	r0, #2
   18e5c:	4770      	bx	lr
        return HAL_I2C_ERR_INVAL;
   18e5e:	2002      	movs	r0, #2
   18e60:	4770      	bx	lr
   18e62:	bf00      	nop
   18e64:	00020ea0 	.word	0x00020ea0

00018e68 <hal_i2c_convert_status>:
 * Converts an nRF SDK I2C status to a HAL I2C error code.
 */
static int
hal_i2c_convert_status(int nrf_status)
{
    if (nrf_status == 0) {
   18e68:	b148      	cbz	r0, 18e7e <hal_i2c_convert_status+0x16>
        return 0;
    } else if (nrf_status & NRF_TWIM_ERROR_DATA_NACK) {
   18e6a:	f010 0f04 	tst.w	r0, #4
   18e6e:	d107      	bne.n	18e80 <hal_i2c_convert_status+0x18>
        return HAL_I2C_ERR_DATA_NACK;
    } else if (nrf_status & NRF_TWIM_ERROR_ADDRESS_NACK) {
   18e70:	f010 0f02 	tst.w	r0, #2
   18e74:	d101      	bne.n	18e7a <hal_i2c_convert_status+0x12>
        return HAL_I2C_ERR_ADDR_NACK;
    } else {
        return HAL_I2C_ERR_UNKNOWN;
   18e76:	2001      	movs	r0, #1
    }
}
   18e78:	4770      	bx	lr
        return HAL_I2C_ERR_ADDR_NACK;
   18e7a:	2004      	movs	r0, #4
   18e7c:	4770      	bx	lr
   18e7e:	4770      	bx	lr
        return HAL_I2C_ERR_DATA_NACK;
   18e80:	2005      	movs	r0, #5
   18e82:	4770      	bx	lr

00018e84 <read_gpio_inbuffer>:
read_gpio_inbuffer(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   18e84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18e88:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   18e8c:	fa23 f000 	lsr.w	r0, r3, r0
}
   18e90:	f000 0001 	and.w	r0, r0, #1
   18e94:	4770      	bx	lr

00018e96 <hal_i2c_clear_bus>:
 * Clear the bus after reset by clocking 9 bits manually.
 * This should reset state from (most of) the devices on the other end.
 */
static void
hal_i2c_clear_bus(int scl_pin, int sda_pin)
{
   18e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18e9a:	4605      	mov	r5, r0
   18e9c:	460e      	mov	r6, r1
    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(scl_pin);
    sda_port = HAL_GPIO_PORT(sda_pin);

    /* Input connected, standard-low disconnected-high, pull-ups */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   18e9e:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   18ea2:	f500 78e0 	add.w	r8, r0, #448	; 0x1c0
   18ea6:	f240 630c 	movw	r3, #1548	; 0x60c
   18eaa:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   18eae:	f501 77e0 	add.w	r7, r1, #448	; 0x1c0
   18eb2:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_gpio_write(scl_pin, 1);
   18eb6:	2101      	movs	r1, #1
   18eb8:	f7ff ff0a 	bl	18cd0 <hal_gpio_write>
    hal_gpio_write(sda_pin, 1);
   18ebc:	2101      	movs	r1, #1
   18ebe:	4630      	mov	r0, r6
   18ec0:	f7ff ff06 	bl	18cd0 <hal_gpio_write>

    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF_CLR;
   18ec4:	f240 630d 	movw	r3, #1549	; 0x60d
   18ec8:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF_CLR;
   18ecc:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_i2c_delay_us(4);
   18ed0:	2004      	movs	r0, #4
   18ed2:	f7ff ff79 	bl	18dc8 <hal_i2c_delay_us>

    for (i = 0; i < 9; i++) {
   18ed6:	2400      	movs	r4, #0
   18ed8:	2c08      	cmp	r4, #8
   18eda:	dc14      	bgt.n	18f06 <hal_i2c_clear_bus+0x70>
        if (read_gpio_inbuffer(sda_pin)) {
   18edc:	4630      	mov	r0, r6
   18ede:	f7ff ffd1 	bl	18e84 <read_gpio_inbuffer>
   18ee2:	b978      	cbnz	r0, 18f04 <hal_i2c_clear_bus+0x6e>
                goto ret;
            } else {
                break;
            }
        }
        hal_gpio_write(scl_pin, 0);
   18ee4:	2100      	movs	r1, #0
   18ee6:	4628      	mov	r0, r5
   18ee8:	f7ff fef2 	bl	18cd0 <hal_gpio_write>
        hal_i2c_delay_us(4);
   18eec:	2004      	movs	r0, #4
   18eee:	f7ff ff6b 	bl	18dc8 <hal_i2c_delay_us>
        hal_gpio_write(scl_pin, 1);
   18ef2:	2101      	movs	r1, #1
   18ef4:	4628      	mov	r0, r5
   18ef6:	f7ff feeb 	bl	18cd0 <hal_gpio_write>
        hal_i2c_delay_us(4);
   18efa:	2004      	movs	r0, #4
   18efc:	f7ff ff64 	bl	18dc8 <hal_i2c_delay_us>
    for (i = 0; i < 9; i++) {
   18f00:	3401      	adds	r4, #1
   18f02:	e7e9      	b.n	18ed8 <hal_i2c_clear_bus+0x42>
            if (i == 0) {
   18f04:	b154      	cbz	r4, 18f1c <hal_i2c_clear_bus+0x86>
    }

    /*
     * Send STOP.
     */
    hal_gpio_write(sda_pin, 0);
   18f06:	2100      	movs	r1, #0
   18f08:	4630      	mov	r0, r6
   18f0a:	f7ff fee1 	bl	18cd0 <hal_gpio_write>
    hal_i2c_delay_us(4);
   18f0e:	2004      	movs	r0, #4
   18f10:	f7ff ff5a 	bl	18dc8 <hal_i2c_delay_us>
    hal_gpio_write(sda_pin, 1);
   18f14:	2101      	movs	r1, #1
   18f16:	4630      	mov	r0, r6
   18f18:	f7ff feda 	bl	18cd0 <hal_gpio_write>

ret:
    /* Restore GPIO config */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   18f1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18f20:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   18f24:	f240 620c 	movw	r2, #1548	; 0x60c
   18f28:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   18f2c:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   18f30:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   18f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018f38 <hal_i2c_init>:

int
hal_i2c_init(uint8_t i2c_num, void *usercfg)
{
   18f38:	b5f0      	push	{r4, r5, r6, r7, lr}
   18f3a:	b083      	sub	sp, #12
    struct nrf52_hal_i2c_cfg *cfg;
    uint32_t freq;
    int rc;
    NRF_GPIO_Type *scl_port, *sda_port;

    assert(usercfg != NULL);
   18f3c:	b1a1      	cbz	r1, 18f68 <hal_i2c_init+0x30>
   18f3e:	460c      	mov	r4, r1

    rc = hal_i2c_resolve(i2c_num, &i2c);
   18f40:	a901      	add	r1, sp, #4
   18f42:	f7ff ff7f 	bl	18e44 <hal_i2c_resolve>
    if (rc != 0) {
   18f46:	4606      	mov	r6, r0
   18f48:	bba8      	cbnz	r0, 18fb6 <hal_i2c_init+0x7e>
        goto err;
    }

    cfg = (struct nrf52_hal_i2c_cfg *) usercfg;
    regs = i2c->nhi_regs;
   18f4a:	9b01      	ldr	r3, [sp, #4]
   18f4c:	681d      	ldr	r5, [r3, #0]

    switch (cfg->i2c_frequency) {
   18f4e:	68a3      	ldr	r3, [r4, #8]
   18f50:	2bfa      	cmp	r3, #250	; 0xfa
   18f52:	d035      	beq.n	18fc0 <hal_i2c_init+0x88>
   18f54:	d90e      	bls.n	18f74 <hal_i2c_init+0x3c>
   18f56:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
   18f5a:	d02f      	beq.n	18fbc <hal_i2c_init+0x84>
   18f5c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   18f60:	d131      	bne.n	18fc6 <hal_i2c_init+0x8e>
        break;
    case 380:
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
        break;
    case 400:
        freq = TWI_FREQUENCY_FREQUENCY_K400;
   18f62:	f04f 67cd 	mov.w	r7, #107479040	; 0x6680000
        break;
   18f66:	e009      	b.n	18f7c <hal_i2c_init+0x44>
    assert(usercfg != NULL);
   18f68:	2300      	movs	r3, #0
   18f6a:	461a      	mov	r2, r3
   18f6c:	4619      	mov	r1, r3
   18f6e:	4618      	mov	r0, r3
   18f70:	f000 fc88 	bl	19884 <__assert_func>
    switch (cfg->i2c_frequency) {
   18f74:	2b64      	cmp	r3, #100	; 0x64
   18f76:	d126      	bne.n	18fc6 <hal_i2c_init+0x8e>
        freq = TWI_FREQUENCY_FREQUENCY_K100;
   18f78:	f04f 77cc 	mov.w	r7, #26738688	; 0x1980000
    default:
        rc = HAL_I2C_ERR_INVAL;
        goto err;
    }

    hal_i2c_clear_bus(cfg->scl_pin, cfg->sda_pin);
   18f7c:	6861      	ldr	r1, [r4, #4]
   18f7e:	6820      	ldr	r0, [r4, #0]
   18f80:	f7ff ff89 	bl	18e96 <hal_i2c_clear_bus>

    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(cfg->scl_pin);
    sda_port = HAL_GPIO_PORT(cfg->sda_pin);

    scl_port->PIN_CNF[HAL_GPIO_INDEX(cfg->scl_pin)] = NRF52_SCL_PIN_CONF;
   18f84:	6823      	ldr	r3, [r4, #0]
   18f86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18f8a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   18f8e:	f240 610c 	movw	r1, #1548	; 0x60c
   18f92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    sda_port->PIN_CNF[HAL_GPIO_INDEX(cfg->sda_pin)] = NRF52_SDA_PIN_CONF;
   18f96:	6863      	ldr	r3, [r4, #4]
   18f98:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   18f9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    regs->PSELSCL = cfg->scl_pin;
   18fa0:	6823      	ldr	r3, [r4, #0]
   18fa2:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    regs->PSELSDA = cfg->sda_pin;
   18fa6:	6863      	ldr	r3, [r4, #4]
   18fa8:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    regs->FREQUENCY = freq;
   18fac:	f8c5 7524 	str.w	r7, [r5, #1316]	; 0x524
    regs->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   18fb0:	2305      	movs	r3, #5
   18fb2:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    return (0);
err:
    return (rc);
}
   18fb6:	4630      	mov	r0, r6
   18fb8:	b003      	add	sp, #12
   18fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
   18fbc:	4f03      	ldr	r7, [pc, #12]	; (18fcc <hal_i2c_init+0x94>)
        break;
   18fbe:	e7dd      	b.n	18f7c <hal_i2c_init+0x44>
        freq = TWI_FREQUENCY_FREQUENCY_K250;
   18fc0:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
   18fc4:	e7da      	b.n	18f7c <hal_i2c_init+0x44>
        rc = HAL_I2C_ERR_INVAL;
   18fc6:	2602      	movs	r6, #2
   18fc8:	e7f5      	b.n	18fb6 <hal_i2c_init+0x7e>
   18fca:	bf00      	nop
   18fcc:	06147ae9 	.word	0x06147ae9

00018fd0 <hal_i2c_master_write>:
}

int
hal_i2c_master_write(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                     uint32_t timo, uint8_t last_op)
{
   18fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fd4:	b083      	sub	sp, #12
   18fd6:	4688      	mov	r8, r1
   18fd8:	4615      	mov	r5, r2
   18fda:	469a      	mov	sl, r3
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   18fdc:	a901      	add	r1, sp, #4
   18fde:	f7ff ff31 	bl	18e44 <hal_i2c_resolve>
    if (rc != 0) {
   18fe2:	4681      	mov	r9, r0
   18fe4:	b118      	cbz	r0, 18fee <hal_i2c_master_write+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   18fe6:	4648      	mov	r0, r9
   18fe8:	b003      	add	sp, #12
   18fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   18fee:	9b01      	ldr	r3, [sp, #4]
   18ff0:	681c      	ldr	r4, [r3, #0]
    regs->ADDRESS = pdata->address;
   18ff2:	f898 3000 	ldrb.w	r3, [r8]
   18ff6:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    regs->EVENTS_ERROR = 0;
   18ffa:	2300      	movs	r3, #0
   18ffc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   19000:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   19004:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->SHORTS = 0;
   19008:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTTX);
   1900c:	f104 0708 	add.w	r7, r4, #8
    int retry = 2;
   19010:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   19014:	2300      	movs	r3, #0
   19016:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   1901a:	2301      	movs	r3, #1
   1901c:	603b      	str	r3, [r7, #0]
        end_ticks = os_cputime_get32() +
   1901e:	f000 fe61 	bl	19ce4 <os_cputime_get32>
   19022:	f100 0664 	add.w	r6, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   19026:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1902a:	f7ff fe62 	bl	18cf2 <hal_gpio_read>
   1902e:	b1b0      	cbz	r0, 1905e <hal_i2c_master_write+0x8e>
   19030:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   19034:	b99b      	cbnz	r3, 1905e <hal_i2c_master_write+0x8e>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   19036:	f000 fe55 	bl	19ce4 <os_cputime_get32>
   1903a:	1b80      	subs	r0, r0, r6
   1903c:	2800      	cmp	r0, #0
   1903e:	dbf2      	blt.n	19026 <hal_i2c_master_write+0x56>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   19040:	2300      	movs	r3, #0
   19042:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   19046:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1904a:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   1904e:	f7ff ff22 	bl	18e96 <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   19052:	2305      	movs	r3, #5
   19054:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   19058:	f1bb 0b01 	subs.w	fp, fp, #1
   1905c:	d1da      	bne.n	19014 <hal_i2c_master_write+0x44>
    start = os_time_get();
   1905e:	f001 fe2f 	bl	1acc0 <os_time_get>
   19062:	4606      	mov	r6, r0
    for (i = 0; i < pdata->len; i++) {
   19064:	464f      	mov	r7, r9
   19066:	e003      	b.n	19070 <hal_i2c_master_write+0xa0>
        if (regs->EVENTS_ERROR) {
   19068:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1906c:	b9db      	cbnz	r3, 190a6 <hal_i2c_master_write+0xd6>
    for (i = 0; i < pdata->len; i++) {
   1906e:	3701      	adds	r7, #1
   19070:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   19074:	42bb      	cmp	r3, r7
   19076:	dd24      	ble.n	190c2 <hal_i2c_master_write+0xf2>
        regs->EVENTS_TXDSENT = 0;
   19078:	2300      	movs	r3, #0
   1907a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        regs->TXD = pdata->buffer[i];
   1907e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   19082:	5ddb      	ldrb	r3, [r3, r7]
   19084:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
        while (!regs->EVENTS_TXDSENT && !regs->EVENTS_ERROR) {
   19088:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1908c:	2b00      	cmp	r3, #0
   1908e:	d1eb      	bne.n	19068 <hal_i2c_master_write+0x98>
   19090:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19094:	2b00      	cmp	r3, #0
   19096:	d1e7      	bne.n	19068 <hal_i2c_master_write+0x98>
            if (os_time_get() - start > timo) {
   19098:	f001 fe12 	bl	1acc0 <os_time_get>
   1909c:	1b80      	subs	r0, r0, r6
   1909e:	42a8      	cmp	r0, r5
   190a0:	d9f2      	bls.n	19088 <hal_i2c_master_write+0xb8>
                rc = HAL_I2C_ERR_TIMEOUT;
   190a2:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   190a6:	2301      	movs	r3, #1
   190a8:	6163      	str	r3, [r4, #20]
    if (regs->EVENTS_ERROR) {
   190aa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   190ae:	2b00      	cmp	r3, #0
   190b0:	d099      	beq.n	18fe6 <hal_i2c_master_write+0x16>
        nrf_status = regs->ERRORSRC;
   190b2:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   190b6:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   190ba:	f7ff fed5 	bl	18e68 <hal_i2c_convert_status>
   190be:	4681      	mov	r9, r0
   190c0:	e791      	b.n	18fe6 <hal_i2c_master_write+0x16>
    if (last_op) {
   190c2:	f1ba 0f00 	cmp.w	sl, #0
   190c6:	d08e      	beq.n	18fe6 <hal_i2c_master_write+0x16>
        regs->EVENTS_STOPPED = 0;
   190c8:	2300      	movs	r3, #0
   190ca:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        regs->TASKS_STOP = 1;
   190ce:	2301      	movs	r3, #1
   190d0:	6163      	str	r3, [r4, #20]
        while (!regs->EVENTS_STOPPED && !regs->EVENTS_ERROR) {
   190d2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   190d6:	b953      	cbnz	r3, 190ee <hal_i2c_master_write+0x11e>
   190d8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   190dc:	b93b      	cbnz	r3, 190ee <hal_i2c_master_write+0x11e>
            if (os_time_get() - start > timo) {
   190de:	f001 fdef 	bl	1acc0 <os_time_get>
   190e2:	1b80      	subs	r0, r0, r6
   190e4:	42a8      	cmp	r0, r5
   190e6:	d9f4      	bls.n	190d2 <hal_i2c_master_write+0x102>
                rc = HAL_I2C_ERR_TIMEOUT;
   190e8:	f04f 0903 	mov.w	r9, #3
   190ec:	e7db      	b.n	190a6 <hal_i2c_master_write+0xd6>
        if (regs->EVENTS_ERROR) {
   190ee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   190f2:	2b00      	cmp	r3, #0
   190f4:	d1d7      	bne.n	190a6 <hal_i2c_master_write+0xd6>
   190f6:	e776      	b.n	18fe6 <hal_i2c_master_write+0x16>

000190f8 <hal_i2c_master_read>:

int
hal_i2c_master_read(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                    uint32_t timo, uint8_t last_op)
{
   190f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190fc:	b085      	sub	sp, #20
   190fe:	460f      	mov	r7, r1
   19100:	4615      	mov	r5, r2
   19102:	9301      	str	r3, [sp, #4]
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   19104:	a903      	add	r1, sp, #12
   19106:	f7ff fe9d 	bl	18e44 <hal_i2c_resolve>
    if (rc != 0) {
   1910a:	4681      	mov	r9, r0
   1910c:	b118      	cbz	r0, 19116 <hal_i2c_master_read+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   1910e:	4648      	mov	r0, r9
   19110:	b005      	add	sp, #20
   19112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   19116:	9b03      	ldr	r3, [sp, #12]
   19118:	681c      	ldr	r4, [r3, #0]
    start = os_time_get();
   1911a:	f001 fdd1 	bl	1acc0 <os_time_get>
   1911e:	4606      	mov	r6, r0
    if (regs->EVENTS_RXDREADY) {
   19120:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19124:	b11b      	cbz	r3, 1912e <hal_i2c_master_read+0x36>
        (void)regs->RXD;
   19126:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
        (void)regs->RXD;
   1912a:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    regs->EVENTS_ERROR = 0;
   1912e:	2300      	movs	r3, #0
   19130:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   19134:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   19138:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->EVENTS_RXDREADY = 0;
   1913c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    regs->ADDRESS = pdata->address;
   19140:	783b      	ldrb	r3, [r7, #0]
   19142:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (pdata->len == 1 && last_op) {
   19146:	887b      	ldrh	r3, [r7, #2]
   19148:	2b01      	cmp	r3, #1
   1914a:	d02e      	beq.n	191aa <hal_i2c_master_read+0xb2>
        regs->SHORTS = TWI_SHORTS_BB_SUSPEND_Msk;
   1914c:	2301      	movs	r3, #1
   1914e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTRX);
   19152:	46a2      	mov	sl, r4
    int retry = 2;
   19154:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   19158:	2300      	movs	r3, #0
   1915a:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   1915e:	2301      	movs	r3, #1
   19160:	f8ca 3000 	str.w	r3, [sl]
        end_ticks = os_cputime_get32() +
   19164:	f000 fdbe 	bl	19ce4 <os_cputime_get32>
   19168:	f100 0864 	add.w	r8, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   1916c:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   19170:	f7ff fdbf 	bl	18cf2 <hal_gpio_read>
   19174:	b1b8      	cbz	r0, 191a6 <hal_i2c_master_read+0xae>
   19176:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   1917a:	b9a3      	cbnz	r3, 191a6 <hal_i2c_master_read+0xae>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   1917c:	f000 fdb2 	bl	19ce4 <os_cputime_get32>
   19180:	eba0 0008 	sub.w	r0, r0, r8
   19184:	2800      	cmp	r0, #0
   19186:	dbf1      	blt.n	1916c <hal_i2c_master_read+0x74>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   19188:	2300      	movs	r3, #0
   1918a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   1918e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   19192:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   19196:	f7ff fe7e 	bl	18e96 <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   1919a:	2305      	movs	r3, #5
   1919c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   191a0:	f1bb 0b01 	subs.w	fp, fp, #1
   191a4:	d1d8      	bne.n	19158 <hal_i2c_master_read+0x60>
    int retry = 2;
   191a6:	46c8      	mov	r8, r9
   191a8:	e017      	b.n	191da <hal_i2c_master_read+0xe2>
    if (pdata->len == 1 && last_op) {
   191aa:	9b01      	ldr	r3, [sp, #4]
   191ac:	2b00      	cmp	r3, #0
   191ae:	d0cd      	beq.n	1914c <hal_i2c_master_read+0x54>
        regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   191b0:	2302      	movs	r3, #2
   191b2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   191b6:	e7cc      	b.n	19152 <hal_i2c_master_read+0x5a>
        if (regs->EVENTS_ERROR) {
   191b8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   191bc:	bb0b      	cbnz	r3, 19202 <hal_i2c_master_read+0x10a>
        pdata->buffer[i] = regs->RXD;
   191be:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
   191c2:	687b      	ldr	r3, [r7, #4]
   191c4:	f803 2008 	strb.w	r2, [r3, r8]
        if (i == pdata->len - 2) {
   191c8:	887b      	ldrh	r3, [r7, #2]
   191ca:	3b02      	subs	r3, #2
   191cc:	4543      	cmp	r3, r8
   191ce:	d02a      	beq.n	19226 <hal_i2c_master_read+0x12e>
        regs->EVENTS_RXDREADY = 0;
   191d0:	2300      	movs	r3, #0
   191d2:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    for (i = 0; i < pdata->len; i++) {
   191d6:	f108 0801 	add.w	r8, r8, #1
   191da:	887b      	ldrh	r3, [r7, #2]
   191dc:	4543      	cmp	r3, r8
   191de:	dd96      	ble.n	1910e <hal_i2c_master_read+0x16>
        regs->TASKS_RESUME = 1;
   191e0:	2301      	movs	r3, #1
   191e2:	6223      	str	r3, [r4, #32]
        while (!regs->EVENTS_RXDREADY && !regs->EVENTS_ERROR) {
   191e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   191e8:	2b00      	cmp	r3, #0
   191ea:	d1e5      	bne.n	191b8 <hal_i2c_master_read+0xc0>
   191ec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   191f0:	2b00      	cmp	r3, #0
   191f2:	d1e1      	bne.n	191b8 <hal_i2c_master_read+0xc0>
            if (os_time_get() - start > timo) {
   191f4:	f001 fd64 	bl	1acc0 <os_time_get>
   191f8:	1b80      	subs	r0, r0, r6
   191fa:	42a8      	cmp	r0, r5
   191fc:	d9f2      	bls.n	191e4 <hal_i2c_master_read+0xec>
                rc = HAL_I2C_ERR_TIMEOUT;
   191fe:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   19202:	2301      	movs	r3, #1
   19204:	6163      	str	r3, [r4, #20]
    regs->SHORTS = 0;
   19206:	2300      	movs	r3, #0
   19208:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (regs->EVENTS_ERROR) {
   1920c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19210:	2b00      	cmp	r3, #0
   19212:	f43f af7c 	beq.w	1910e <hal_i2c_master_read+0x16>
        nrf_status = regs->ERRORSRC;
   19216:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   1921a:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   1921e:	f7ff fe23 	bl	18e68 <hal_i2c_convert_status>
   19222:	4681      	mov	r9, r0
   19224:	e773      	b.n	1910e <hal_i2c_master_read+0x16>
            if (last_op) {
   19226:	9b01      	ldr	r3, [sp, #4]
   19228:	2b00      	cmp	r3, #0
   1922a:	d0d1      	beq.n	191d0 <hal_i2c_master_read+0xd8>
                regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   1922c:	2302      	movs	r3, #2
   1922e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   19232:	e7cd      	b.n	191d0 <hal_i2c_master_read+0xd8>

00019234 <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   19234:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   19236:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   19238:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   1923c:	b32b      	cbz	r3, 1928a <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
   1923e:	2300      	movs	r3, #0
   19240:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   19244:	7843      	ldrb	r3, [r0, #1]
   19246:	b303      	cbz	r3, 1928a <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   19248:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   1924c:	88c3      	ldrh	r3, [r0, #6]
   1924e:	fa13 f382 	uxtah	r3, r3, r2
   19252:	b29b      	uxth	r3, r3
   19254:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   19256:	8881      	ldrh	r1, [r0, #4]
   19258:	428b      	cmp	r3, r1
   1925a:	d217      	bcs.n	1928c <nrf52_irqm_handler+0x58>
   1925c:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
   1925e:	6984      	ldr	r4, [r0, #24]
   19260:	4414      	add	r4, r2
   19262:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   19264:	1acb      	subs	r3, r1, r3
   19266:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   19268:	2bff      	cmp	r3, #255	; 0xff
   1926a:	bf28      	it	cs
   1926c:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   1926e:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   19272:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   19276:	69c1      	ldr	r1, [r0, #28]
   19278:	b129      	cbz	r1, 19286 <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
   1927a:	440a      	add	r2, r1
   1927c:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   1927e:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   19282:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   19286:	2301      	movs	r3, #1
   19288:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   1928a:	bd38      	pop	{r3, r4, r5, pc}
   1928c:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
   1928e:	6a03      	ldr	r3, [r0, #32]
   19290:	b10b      	cbz	r3, 19296 <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   19292:	6a40      	ldr	r0, [r0, #36]	; 0x24
   19294:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   19296:	2300      	movs	r3, #0
   19298:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   1929a:	2340      	movs	r3, #64	; 0x40
   1929c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   192a0:	e7f3      	b.n	1928a <nrf52_irqm_handler+0x56>
	...

000192a4 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   192a4:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   192a6:	4b04      	ldr	r3, [pc, #16]	; (192b8 <nrf52_spi0_irq_handler+0x14>)
   192a8:	781b      	ldrb	r3, [r3, #0]
   192aa:	b103      	cbz	r3, 192ae <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   192ac:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   192ae:	4802      	ldr	r0, [pc, #8]	; (192b8 <nrf52_spi0_irq_handler+0x14>)
   192b0:	f7ff ffc0 	bl	19234 <nrf52_irqm_handler>
}
   192b4:	e7fa      	b.n	192ac <nrf52_spi0_irq_handler+0x8>
   192b6:	bf00      	nop
   192b8:	2000a570 	.word	0x2000a570

000192bc <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   192bc:	2301      	movs	r3, #1
   192be:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   192c0:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   192c4:	2b00      	cmp	r3, #0
   192c6:	d0fb      	beq.n	192c0 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   192c8:	2300      	movs	r3, #0
   192ca:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   192ce:	4770      	bx	lr

000192d0 <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
   192d0:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   192d2:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   192d4:	780b      	ldrb	r3, [r1, #0]
   192d6:	2b03      	cmp	r3, #3
   192d8:	d80c      	bhi.n	192f4 <hal_spi_config_slave+0x24>
   192da:	e8df f003 	tbb	[pc, r3]
   192de:	0e02      	.short	0x0e02
   192e0:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   192e2:	2300      	movs	r3, #0
    rc = 0;
   192e4:	4618      	mov	r0, r3
   192e6:	e00a      	b.n	192fe <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   192e8:	2304      	movs	r3, #4
    rc = 0;
   192ea:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
   192ec:	e007      	b.n	192fe <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   192ee:	2306      	movs	r3, #6
    rc = 0;
   192f0:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
   192f2:	e004      	b.n	192fe <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
   192f4:	2300      	movs	r3, #0
            rc = EINVAL;
   192f6:	2016      	movs	r0, #22
            break;
   192f8:	e001      	b.n	192fe <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   192fa:	2302      	movs	r3, #2
    rc = 0;
   192fc:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   192fe:	784c      	ldrb	r4, [r1, #1]
   19300:	2c01      	cmp	r4, #1
   19302:	d006      	beq.n	19312 <hal_spi_config_slave+0x42>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   19304:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   19308:	788b      	ldrb	r3, [r1, #2]
   1930a:	b92b      	cbnz	r3, 19318 <hal_spi_config_slave+0x48>
            rc = EINVAL;
            break;
    }

    return rc;
}
   1930c:	f85d 4b04 	ldr.w	r4, [sp], #4
   19310:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   19312:	f043 0301 	orr.w	r3, r3, #1
   19316:	e7f5      	b.n	19304 <hal_spi_config_slave+0x34>
            rc = EINVAL;
   19318:	2016      	movs	r0, #22
    return rc;
   1931a:	e7f7      	b.n	1930c <hal_spi_config_slave+0x3c>

0001931c <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   1931c:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   1931e:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   19320:	2501      	movs	r5, #1
   19322:	409d      	lsls	r5, r3
   19324:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   19328:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   1932c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19330:	2503      	movs	r5, #3
   19332:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   19336:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   19338:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1933c:	2500      	movs	r5, #0
   1933e:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   19342:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   19344:	780c      	ldrb	r4, [r1, #0]
   19346:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   1934a:	784c      	ldrb	r4, [r1, #1]
   1934c:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   19350:	7889      	ldrb	r1, [r1, #2]
   19352:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   19356:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1935a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   1935e:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   19362:	4919      	ldr	r1, [pc, #100]	; (193c8 <hal_spi_init_master+0xac>)
   19364:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   19366:	3310      	adds	r3, #16
   19368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   1936c:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   19370:	42ab      	cmp	r3, r5
   19372:	db22      	blt.n	193ba <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19374:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   19378:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   1937c:	22e0      	movs	r2, #224	; 0xe0
   1937e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   19382:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   19386:	2b00      	cmp	r3, #0
   19388:	db08      	blt.n	1939c <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1938a:	f003 011f 	and.w	r1, r3, #31
   1938e:	095b      	lsrs	r3, r3, #5
   19390:	2201      	movs	r2, #1
   19392:	408a      	lsls	r2, r1
   19394:	3360      	adds	r3, #96	; 0x60
   19396:	490d      	ldr	r1, [pc, #52]	; (193cc <hal_spi_init_master+0xb0>)
   19398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   1939c:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   193a0:	2b00      	cmp	r3, #0
   193a2:	db07      	blt.n	193b4 <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   193a4:	f003 011f 	and.w	r1, r3, #31
   193a8:	095b      	lsrs	r3, r3, #5
   193aa:	2201      	movs	r2, #1
   193ac:	408a      	lsls	r2, r1
   193ae:	4907      	ldr	r1, [pc, #28]	; (193cc <hal_spi_init_master+0xb0>)
   193b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   193b4:	2000      	movs	r0, #0
   193b6:	bc30      	pop	{r4, r5}
   193b8:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   193ba:	f003 030f 	and.w	r3, r3, #15
   193be:	4a04      	ldr	r2, [pc, #16]	; (193d0 <hal_spi_init_master+0xb4>)
   193c0:	441a      	add	r2, r3
   193c2:	23e0      	movs	r3, #224	; 0xe0
   193c4:	7613      	strb	r3, [r2, #24]
   193c6:	e7dc      	b.n	19382 <hal_spi_init_master+0x66>
   193c8:	e000ed00 	.word	0xe000ed00
   193cc:	e000e100 	.word	0xe000e100
   193d0:	e000ecfc 	.word	0xe000ecfc

000193d4 <hal_spi_config_master>:
{
   193d4:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   193d6:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   193d8:	680c      	ldr	r4, [r1, #0]
   193da:	684b      	ldr	r3, [r1, #4]
   193dc:	6084      	str	r4, [r0, #8]
   193de:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   193e0:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   193e4:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   193e8:	7808      	ldrb	r0, [r1, #0]
   193ea:	2801      	cmp	r0, #1
   193ec:	d916      	bls.n	1941c <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   193ee:	2001      	movs	r0, #1
   193f0:	4098      	lsls	r0, r3
   193f2:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   193f6:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   193fa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   193fe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   19402:	2403      	movs	r4, #3
   19404:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   19408:	788b      	ldrb	r3, [r1, #2]
   1940a:	b973      	cbnz	r3, 1942a <hal_spi_config_master+0x56>
    rc = 0;
   1940c:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   1940e:	780b      	ldrb	r3, [r1, #0]
   19410:	2b03      	cmp	r3, #3
   19412:	d812      	bhi.n	1943a <hal_spi_config_master+0x66>
   19414:	e8df f003 	tbb	[pc, r3]
   19418:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
   1941c:	2001      	movs	r0, #1
   1941e:	4098      	lsls	r0, r3
   19420:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   19424:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   19428:	e7e7      	b.n	193fa <hal_spi_config_master+0x26>
            rc = EINVAL;
   1942a:	2016      	movs	r0, #22
   1942c:	e7ef      	b.n	1940e <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1942e:	2300      	movs	r3, #0
   19430:	e007      	b.n	19442 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   19432:	2304      	movs	r3, #4
            break;
   19434:	e005      	b.n	19442 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   19436:	2306      	movs	r3, #6
            break;
   19438:	e003      	b.n	19442 <hal_spi_config_master+0x6e>
            nrf_config = 0;
   1943a:	2300      	movs	r3, #0
            rc = EINVAL;
   1943c:	2016      	movs	r0, #22
            break;
   1943e:	e000      	b.n	19442 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   19440:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   19442:	784c      	ldrb	r4, [r1, #1]
   19444:	2c01      	cmp	r4, #1
   19446:	d010      	beq.n	1946a <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   19448:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   1944c:	684b      	ldr	r3, [r1, #4]
   1944e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   19452:	d023      	beq.n	1949c <hal_spi_config_master+0xc8>
   19454:	d80c      	bhi.n	19470 <hal_spi_config_master+0x9c>
   19456:	2bfa      	cmp	r3, #250	; 0xfa
   19458:	d029      	beq.n	194ae <hal_spi_config_master+0xda>
   1945a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1945e:	d01a      	beq.n	19496 <hal_spi_config_master+0xc2>
   19460:	2b7d      	cmp	r3, #125	; 0x7d
   19462:	d011      	beq.n	19488 <hal_spi_config_master+0xb4>
            frequency = 0;
   19464:	2300      	movs	r3, #0
            rc = EINVAL;
   19466:	2016      	movs	r0, #22
            break;
   19468:	e010      	b.n	1948c <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   1946a:	f043 0301 	orr.w	r3, r3, #1
   1946e:	e7eb      	b.n	19448 <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
   19470:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   19474:	d015      	beq.n	194a2 <hal_spi_config_master+0xce>
   19476:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   1947a:	d015      	beq.n	194a8 <hal_spi_config_master+0xd4>
   1947c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   19480:	d1f0      	bne.n	19464 <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   19482:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
   19486:	e001      	b.n	1948c <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
   19488:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   1948c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   19490:	f85d 4b04 	ldr.w	r4, [sp], #4
   19494:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   19496:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
   1949a:	e7f7      	b.n	1948c <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   1949c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
   194a0:	e7f4      	b.n	1948c <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   194a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
   194a6:	e7f1      	b.n	1948c <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   194a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
   194ac:	e7ee      	b.n	1948c <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   194ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   194b2:	e7eb      	b.n	1948c <hal_spi_config_master+0xb8>

000194b4 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   194b4:	2802      	cmp	r0, #2
   194b6:	dc10      	bgt.n	194da <hal_spi_config+0x26>
{
   194b8:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   194ba:	4b0b      	ldr	r3, [pc, #44]	; (194e8 <hal_spi_config+0x34>)
   194bc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   194c0:	b168      	cbz	r0, 194de <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   194c2:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   194c4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   194c8:	b95b      	cbnz	r3, 194e2 <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   194ca:	7803      	ldrb	r3, [r0, #0]
   194cc:	b113      	cbz	r3, 194d4 <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
   194ce:	f7ff feff 	bl	192d0 <hal_spi_config_slave>
    }

err:
    return (rc);
}
   194d2:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
   194d4:	f7ff ff7e 	bl	193d4 <hal_spi_config_master>
   194d8:	e7fb      	b.n	194d2 <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   194da:	2016      	movs	r0, #22
}
   194dc:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   194de:	2016      	movs	r0, #22
   194e0:	e7f7      	b.n	194d2 <hal_spi_config+0x1e>
        return -1;
   194e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   194e6:	e7f4      	b.n	194d2 <hal_spi_config+0x1e>
   194e8:	00020ea8 	.word	0x00020ea8

000194ec <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   194ec:	2802      	cmp	r0, #2
   194ee:	dc1b      	bgt.n	19528 <hal_spi_enable+0x3c>
   194f0:	4b10      	ldr	r3, [pc, #64]	; (19534 <hal_spi_enable+0x48>)
   194f2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   194f6:	b1cb      	cbz	r3, 1952c <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   194f8:	781a      	ldrb	r2, [r3, #0]
   194fa:	b17a      	cbz	r2, 1951c <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
   194fc:	6a1a      	ldr	r2, [r3, #32]
   194fe:	b1ba      	cbz	r2, 19530 <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
   19500:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   19502:	2000      	movs	r0, #0
   19504:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   19508:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   1950c:	f240 4202 	movw	r2, #1026	; 0x402
   19510:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   19514:	2202      	movs	r2, #2
   19516:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1951a:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   1951c:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1951e:	2201      	movs	r2, #1
   19520:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
   19524:	2000      	movs	r0, #0
   19526:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19528:	2016      	movs	r0, #22
   1952a:	4770      	bx	lr
   1952c:	2016      	movs	r0, #22
   1952e:	4770      	bx	lr
            rc = EINVAL;
   19530:	2016      	movs	r0, #22

err:
    return rc;
}
   19532:	4770      	bx	lr
   19534:	00020ea8 	.word	0x00020ea8

00019538 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19538:	2802      	cmp	r0, #2
   1953a:	dc2a      	bgt.n	19592 <hal_spi_disable+0x5a>
{
   1953c:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1953e:	4b17      	ldr	r3, [pc, #92]	; (1959c <hal_spi_disable+0x64>)
   19540:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   19544:	b33c      	cbz	r4, 19596 <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   19546:	7823      	ldrb	r3, [r4, #0]
   19548:	b9ab      	cbnz	r3, 19576 <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   1954a:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1954c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19550:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   19554:	7863      	ldrb	r3, [r4, #1]
   19556:	b943      	cbnz	r3, 1956a <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   19558:	2300      	movs	r3, #0
   1955a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   1955e:	2000      	movs	r0, #0
   19560:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   19562:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   19564:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   19566:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   19568:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   1956a:	4628      	mov	r0, r5
   1956c:	f7ff fea6 	bl	192bc <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   19570:	2300      	movs	r3, #0
   19572:	7063      	strb	r3, [r4, #1]
   19574:	e7f0      	b.n	19558 <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   19576:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   19578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1957c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   19580:	2300      	movs	r3, #0
   19582:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   19586:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   1958a:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   1958e:	70e3      	strb	r3, [r4, #3]
   19590:	e7e5      	b.n	1955e <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19592:	2016      	movs	r0, #22
}
   19594:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19596:	2016      	movs	r0, #22
    return rc;
   19598:	e7e6      	b.n	19568 <hal_spi_disable+0x30>
   1959a:	bf00      	nop
   1959c:	00020ea8 	.word	0x00020ea8

000195a0 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   195a0:	2802      	cmp	r0, #2
   195a2:	dc1d      	bgt.n	195e0 <hal_spi_init+0x40>
{
   195a4:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   195a6:	4b13      	ldr	r3, [pc, #76]	; (195f4 <hal_spi_init+0x54>)
   195a8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   195ac:	b1d4      	cbz	r4, 195e4 <hal_spi_init+0x44>
    if (cfg == NULL) {
   195ae:	b1d9      	cbz	r1, 195e8 <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   195b0:	2a01      	cmp	r2, #1
   195b2:	d81b      	bhi.n	195ec <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
   195b4:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
   195b6:	b9d8      	cbnz	r0, 195f0 <hal_spi_init+0x50>
   195b8:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   195ba:	2303      	movs	r3, #3
   195bc:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   195be:	b94a      	cbnz	r2, 195d4 <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   195c0:	4b0d      	ldr	r3, [pc, #52]	; (195f8 <hal_spi_init+0x58>)
   195c2:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
   195c4:	f7ff ffb8 	bl	19538 <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   195c8:	4a0c      	ldr	r2, [pc, #48]	; (195fc <hal_spi_init+0x5c>)
   195ca:	4629      	mov	r1, r5
   195cc:	4620      	mov	r0, r4
   195ce:	f7ff fea5 	bl	1931c <hal_spi_init_master>
   195d2:	e00c      	b.n	195ee <hal_spi_init+0x4e>
            assert(0);
   195d4:	2300      	movs	r3, #0
   195d6:	461a      	mov	r2, r3
   195d8:	4619      	mov	r1, r3
   195da:	4618      	mov	r0, r3
   195dc:	f000 f952 	bl	19884 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   195e0:	2016      	movs	r0, #22
}
   195e2:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   195e4:	2016      	movs	r0, #22
   195e6:	e002      	b.n	195ee <hal_spi_init+0x4e>
    rc = EINVAL;
   195e8:	2016      	movs	r0, #22
   195ea:	e000      	b.n	195ee <hal_spi_init+0x4e>
   195ec:	2016      	movs	r0, #22
}
   195ee:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
   195f0:	2016      	movs	r0, #22
    return (rc);
   195f2:	e7fc      	b.n	195ee <hal_spi_init+0x4e>
   195f4:	00020ea8 	.word	0x00020ea8
   195f8:	40003000 	.word	0x40003000
   195fc:	000192a5 	.word	0x000192a5

00019600 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19600:	2802      	cmp	r0, #2
   19602:	dc0a      	bgt.n	1961a <hal_spi_set_txrx_cb+0x1a>
   19604:	4b08      	ldr	r3, [pc, #32]	; (19628 <hal_spi_set_txrx_cb+0x28>)
   19606:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1960a:	b143      	cbz	r3, 1961e <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1960c:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   1960e:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   19612:	b930      	cbnz	r0, 19622 <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   19614:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   19616:	625a      	str	r2, [r3, #36]	; 0x24
   19618:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1961a:	2016      	movs	r0, #22
   1961c:	4770      	bx	lr
   1961e:	2016      	movs	r0, #22
   19620:	4770      	bx	lr
        rc = -1;
   19622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
   19626:	4770      	bx	lr
   19628:	00020ea8 	.word	0x00020ea8

0001962c <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   1962c:	2b00      	cmp	r3, #0
   1962e:	d046      	beq.n	196be <hal_spi_txrx+0x92>
{
   19630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19632:	460d      	mov	r5, r1
   19634:	4617      	mov	r7, r2
   19636:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   19638:	2802      	cmp	r0, #2
   1963a:	dc42      	bgt.n	196c2 <hal_spi_txrx+0x96>
   1963c:	4b25      	ldr	r3, [pc, #148]	; (196d4 <hal_spi_txrx+0xa8>)
   1963e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   19642:	2b00      	cmp	r3, #0
   19644:	d03f      	beq.n	196c6 <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   19646:	781a      	ldrb	r2, [r3, #0]
   19648:	2a00      	cmp	r2, #0
   1964a:	d13e      	bne.n	196ca <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   1964c:	2900      	cmp	r1, #0
   1964e:	d03e      	beq.n	196ce <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   19650:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   19652:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   19656:	2b07      	cmp	r3, #7
   19658:	d004      	beq.n	19664 <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   1965a:	b95b      	cbnz	r3, 19674 <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1965c:	2301      	movs	r3, #1
   1965e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   19662:	e007      	b.n	19674 <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   19664:	f7ff ff68 	bl	19538 <hal_spi_disable>
   19668:	e7f8      	b.n	1965c <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   1966a:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   1966e:	2300      	movs	r3, #0
   19670:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   19674:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19678:	2b00      	cmp	r3, #0
   1967a:	d1f6      	bne.n	1966a <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   1967c:	782b      	ldrb	r3, [r5, #0]
   1967e:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   19682:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
   19684:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
   19686:	2200      	movs	r2, #0
   19688:	e00d      	b.n	196a6 <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   1968a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1968e:	2b00      	cmp	r3, #0
   19690:	d0fb      	beq.n	1968a <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   19692:	2300      	movs	r3, #0
   19694:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   19698:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   1969c:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   1969e:	b10f      	cbz	r7, 196a4 <hal_spi_txrx+0x78>
                *rxd = rxval;
   196a0:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
   196a4:	3201      	adds	r2, #1
   196a6:	42b2      	cmp	r2, r6
   196a8:	da07      	bge.n	196ba <hal_spi_txrx+0x8e>
            if (txcnt) {
   196aa:	2900      	cmp	r1, #0
   196ac:	d0ed      	beq.n	1968a <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   196ae:	786b      	ldrb	r3, [r5, #1]
   196b0:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   196b4:	3901      	subs	r1, #1
                ++txd;
   196b6:	3501      	adds	r5, #1
   196b8:	e7e7      	b.n	1968a <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   196ba:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   196bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   196be:	2016      	movs	r0, #22
}
   196c0:	4770      	bx	lr
    return rc;
   196c2:	2016      	movs	r0, #22
   196c4:	e7fa      	b.n	196bc <hal_spi_txrx+0x90>
   196c6:	2016      	movs	r0, #22
   196c8:	e7f8      	b.n	196bc <hal_spi_txrx+0x90>
   196ca:	2016      	movs	r0, #22
   196cc:	e7f6      	b.n	196bc <hal_spi_txrx+0x90>
   196ce:	2016      	movs	r0, #22
   196d0:	e7f4      	b.n	196bc <hal_spi_txrx+0x90>
   196d2:	bf00      	nop
   196d4:	00020ea8 	.word	0x00020ea8

000196d8 <hal_spi_txrx_noblock>:
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   196d8:	2802      	cmp	r0, #2
   196da:	dc57      	bgt.n	1978c <hal_spi_txrx_noblock+0xb4>
{
   196dc:	b430      	push	{r4, r5}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   196de:	4c35      	ldr	r4, [pc, #212]	; (197b4 <hal_spi_txrx_noblock+0xdc>)
   196e0:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   196e4:	2800      	cmp	r0, #0
   196e6:	d053      	beq.n	19790 <hal_spi_txrx_noblock+0xb8>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   196e8:	6a04      	ldr	r4, [r0, #32]
   196ea:	2c00      	cmp	r4, #0
   196ec:	d052      	beq.n	19794 <hal_spi_txrx_noblock+0xbc>
   196ee:	2b00      	cmp	r3, #0
   196f0:	d052      	beq.n	19798 <hal_spi_txrx_noblock+0xc0>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   196f2:	7804      	ldrb	r4, [r0, #0]
   196f4:	2c00      	cmp	r4, #0
   196f6:	d137      	bne.n	19768 <hal_spi_txrx_noblock+0x90>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   196f8:	2900      	cmp	r1, #0
   196fa:	d050      	beq.n	1979e <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
   196fc:	7844      	ldrb	r4, [r0, #1]
   196fe:	2c00      	cmp	r4, #0
   19700:	d14f      	bne.n	197a2 <hal_spi_txrx_noblock+0xca>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
   19702:	6904      	ldr	r4, [r0, #16]
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   19704:	2540      	movs	r5, #64	; 0x40
   19706:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   1970a:	2501      	movs	r5, #1
   1970c:	7045      	strb	r5, [r0, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   1970e:	f8d4 5500 	ldr.w	r5, [r4, #1280]	; 0x500
   19712:	2d07      	cmp	r5, #7
   19714:	d005      	beq.n	19722 <hal_spi_txrx_noblock+0x4a>
            spim->ENABLE = 0;
   19716:	2500      	movs	r5, #0
   19718:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   1971c:	2507      	movs	r5, #7
   1971e:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
   19722:	2500      	movs	r5, #0
   19724:	80c5      	strh	r5, [r0, #6]
        spi->nhs_buflen = len;
   19726:	8083      	strh	r3, [r0, #4]
        spi->nhs_txbuf = txbuf;
   19728:	6181      	str	r1, [r0, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
   1972a:	2bff      	cmp	r3, #255	; 0xff
   1972c:	bfa8      	it	ge
   1972e:	23ff      	movge	r3, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
   19730:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   19734:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
   19738:	61c2      	str	r2, [r0, #28]
        if (rxbuf == NULL) {
   1973a:	b172      	cbz	r2, 1975a <hal_spi_txrx_noblock+0x82>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
   1973c:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   19740:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
   19744:	2000      	movs	r0, #0
   19746:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   1974a:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        spim->TASKS_START = 1;
   1974e:	2301      	movs	r3, #1
   19750:	6123      	str	r3, [r4, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   19752:	2340      	movs	r3, #64	; 0x40
   19754:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   19758:	e01f      	b.n	1979a <hal_spi_txrx_noblock+0xc2>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   1975a:	3002      	adds	r0, #2
   1975c:	f8c4 0534 	str.w	r0, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   19760:	2301      	movs	r3, #1
   19762:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
   19766:	e7ed      	b.n	19744 <hal_spi_txrx_noblock+0x6c>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   19768:	b161      	cbz	r1, 19784 <hal_spi_txrx_noblock+0xac>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
   1976a:	2bff      	cmp	r3, #255	; 0xff
   1976c:	dc1c      	bgt.n	197a8 <hal_spi_txrx_noblock+0xd0>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   1976e:	78c4      	ldrb	r4, [r0, #3]
   19770:	b9e4      	cbnz	r4, 197ac <hal_spi_txrx_noblock+0xd4>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
   19772:	61c2      	str	r2, [r0, #28]
        spi->nhs_txbuf = txbuf;
   19774:	6181      	str	r1, [r0, #24]
        spi->nhs_buflen = len;
   19776:	8083      	strh	r3, [r0, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   19778:	2301      	movs	r3, #1
   1977a:	70c3      	strb	r3, [r0, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   1977c:	6902      	ldr	r2, [r0, #16]
   1977e:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
   19780:	2000      	movs	r0, #0
   19782:	e00a      	b.n	1979a <hal_spi_txrx_noblock+0xc2>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   19784:	2a00      	cmp	r2, #0
   19786:	d1f0      	bne.n	1976a <hal_spi_txrx_noblock+0x92>
    rc = EINVAL;
   19788:	2016      	movs	r0, #22
   1978a:	e006      	b.n	1979a <hal_spi_txrx_noblock+0xc2>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1978c:	2016      	movs	r0, #22

err:
    return rc;
}
   1978e:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19790:	2016      	movs	r0, #22
   19792:	e002      	b.n	1979a <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   19794:	2016      	movs	r0, #22
   19796:	e000      	b.n	1979a <hal_spi_txrx_noblock+0xc2>
   19798:	2016      	movs	r0, #22
}
   1979a:	bc30      	pop	{r4, r5}
   1979c:	4770      	bx	lr
    rc = EINVAL;
   1979e:	2016      	movs	r0, #22
   197a0:	e7fb      	b.n	1979a <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   197a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   197a6:	e7f8      	b.n	1979a <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   197a8:	2016      	movs	r0, #22
   197aa:	e7f6      	b.n	1979a <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   197ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   197b0:	e7f3      	b.n	1979a <hal_spi_txrx_noblock+0xc2>
   197b2:	bf00      	nop
   197b4:	00020ea8 	.word	0x00020ea8

000197b8 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   197b8:	b508      	push	{r3, lr}
    assert(0);
   197ba:	2300      	movs	r3, #0
   197bc:	461a      	mov	r2, r3
   197be:	4619      	mov	r1, r3
   197c0:	4618      	mov	r0, r3
   197c2:	f000 f85f 	bl	19884 <__assert_func>
	...

000197c8 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   197c8:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   197ca:	4b06      	ldr	r3, [pc, #24]	; (197e4 <nrf52_wdt_irq_handler+0x1c>)
   197cc:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   197d0:	f013 0f01 	tst.w	r3, #1
   197d4:	d100      	bne.n	197d8 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   197d6:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   197d8:	4b02      	ldr	r3, [pc, #8]	; (197e4 <nrf52_wdt_irq_handler+0x1c>)
   197da:	2200      	movs	r2, #0
   197dc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   197e0:	f7ff ffea 	bl	197b8 <nrf52_hal_wdt_default_handler>
   197e4:	40010000 	.word	0x40010000

000197e8 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   197e8:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   197ea:	4b17      	ldr	r3, [pc, #92]	; (19848 <hal_watchdog_init+0x60>)
   197ec:	2201      	movs	r2, #1
   197ee:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   197f2:	4b16      	ldr	r3, [pc, #88]	; (1984c <hal_watchdog_init+0x64>)
   197f4:	4298      	cmp	r0, r3
   197f6:	d821      	bhi.n	1983c <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   197f8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   197fc:	0153      	lsls	r3, r2, #5
   197fe:	4a14      	ldr	r2, [pc, #80]	; (19850 <hal_watchdog_init+0x68>)
   19800:	fba2 2303 	umull	r2, r3, r2, r3
   19804:	08db      	lsrs	r3, r3, #3
   19806:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1980a:	4b0f      	ldr	r3, [pc, #60]	; (19848 <hal_watchdog_init+0x60>)
   1980c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   19810:	4a10      	ldr	r2, [pc, #64]	; (19854 <hal_watchdog_init+0x6c>)
   19812:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   19814:	4910      	ldr	r1, [pc, #64]	; (19858 <hal_watchdog_init+0x70>)
   19816:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1981a:	4a10      	ldr	r2, [pc, #64]	; (1985c <hal_watchdog_init+0x74>)
   1981c:	21e0      	movs	r1, #224	; 0xe0
   1981e:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19822:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   19826:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1982a:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   1982c:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   19830:	f042 0201 	orr.w	r2, r2, #1
   19834:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   19838:	2000      	movs	r0, #0
   1983a:	bd08      	pop	{r3, pc}
        assert(0);
   1983c:	2300      	movs	r3, #0
   1983e:	461a      	mov	r2, r3
   19840:	4619      	mov	r1, r3
   19842:	4618      	mov	r0, r3
   19844:	f000 f81e 	bl	19884 <__assert_func>
   19848:	40010000 	.word	0x40010000
   1984c:	02aaaaaa 	.word	0x02aaaaaa
   19850:	10624dd3 	.word	0x10624dd3
   19854:	e000ed00 	.word	0xe000ed00
   19858:	000197c9 	.word	0x000197c9
   1985c:	e000e100 	.word	0xe000e100

00019860 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   19860:	4b02      	ldr	r3, [pc, #8]	; (1986c <hal_watchdog_enable+0xc>)
   19862:	2201      	movs	r2, #1
   19864:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   19868:	601a      	str	r2, [r3, #0]
}
   1986a:	4770      	bx	lr
   1986c:	40010000 	.word	0x40010000

00019870 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   19870:	4b02      	ldr	r3, [pc, #8]	; (1987c <hal_watchdog_tickle+0xc>)
   19872:	4a03      	ldr	r2, [pc, #12]	; (19880 <hal_watchdog_tickle+0x10>)
   19874:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   19878:	4770      	bx	lr
   1987a:	bf00      	nop
   1987c:	40010000 	.word	0x40010000
   19880:	6e524635 	.word	0x6e524635

00019884 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   19884:	b508      	push	{r3, lr}
   19886:	4675      	mov	r5, lr
   19888:	4604      	mov	r4, r0
   1988a:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   1988c:	f001 fa90 	bl	1adb0 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   19890:	f7ff f905 	bl	18a9e <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   19894:	b18c      	cbz	r4, 198ba <__assert_func+0x36>
   19896:	4633      	mov	r3, r6
   19898:	4622      	mov	r2, r4
   1989a:	4629      	mov	r1, r5
   1989c:	4809      	ldr	r0, [pc, #36]	; (198c4 <__assert_func+0x40>)
   1989e:	f7ff f929 	bl	18af4 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
   198a2:	f7ee fc6f 	bl	8184 <hal_debugger_connected>
   198a6:	b100      	cbz	r0, 198aa <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
   198a8:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   198aa:	4b07      	ldr	r3, [pc, #28]	; (198c8 <__assert_func+0x44>)
   198ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   198b0:	605a      	str	r2, [r3, #4]
    asm("isb");
   198b2:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   198b6:	f7ee fc6d 	bl	8194 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   198ba:	4629      	mov	r1, r5
   198bc:	4803      	ldr	r0, [pc, #12]	; (198cc <__assert_func+0x48>)
   198be:	f7ff f919 	bl	18af4 <console_printf>
   198c2:	e7ee      	b.n	198a2 <__assert_func+0x1e>
   198c4:	00020ec4 	.word	0x00020ec4
   198c8:	e000ed00 	.word	0xe000ed00
   198cc:	00020eb4 	.word	0x00020eb4

000198d0 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   198d0:	b500      	push	{lr}
   198d2:	b083      	sub	sp, #12
   198d4:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   198d6:	f7ff f8e2 	bl	18a9e <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   198da:	4d1b      	ldr	r5, [pc, #108]	; (19948 <os_default_irq+0x78>)
   198dc:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   198de:	6822      	ldr	r2, [r4, #0]
   198e0:	f3c1 0108 	ubfx	r1, r1, #0, #9
   198e4:	4819      	ldr	r0, [pc, #100]	; (1994c <os_default_irq+0x7c>)
   198e6:	f7ff f905 	bl	18af4 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   198ea:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   198ec:	6883      	ldr	r3, [r0, #8]
   198ee:	6842      	ldr	r2, [r0, #4]
   198f0:	6801      	ldr	r1, [r0, #0]
   198f2:	68c0      	ldr	r0, [r0, #12]
   198f4:	9000      	str	r0, [sp, #0]
   198f6:	4816      	ldr	r0, [pc, #88]	; (19950 <os_default_irq+0x80>)
   198f8:	f7ff f8fc 	bl	18af4 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   198fc:	6923      	ldr	r3, [r4, #16]
   198fe:	9300      	str	r3, [sp, #0]
   19900:	68e3      	ldr	r3, [r4, #12]
   19902:	68a2      	ldr	r2, [r4, #8]
   19904:	6861      	ldr	r1, [r4, #4]
   19906:	4813      	ldr	r0, [pc, #76]	; (19954 <os_default_irq+0x84>)
   19908:	f7ff f8f4 	bl	18af4 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   1990c:	6a23      	ldr	r3, [r4, #32]
   1990e:	9300      	str	r3, [sp, #0]
   19910:	69e3      	ldr	r3, [r4, #28]
   19912:	69a2      	ldr	r2, [r4, #24]
   19914:	6961      	ldr	r1, [r4, #20]
   19916:	4810      	ldr	r0, [pc, #64]	; (19958 <os_default_irq+0x88>)
   19918:	f7ff f8ec 	bl	18af4 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   1991c:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   1991e:	6983      	ldr	r3, [r0, #24]
   19920:	6942      	ldr	r2, [r0, #20]
   19922:	6901      	ldr	r1, [r0, #16]
   19924:	69c0      	ldr	r0, [r0, #28]
   19926:	9000      	str	r0, [sp, #0]
   19928:	480c      	ldr	r0, [pc, #48]	; (1995c <os_default_irq+0x8c>)
   1992a:	f7ff f8e3 	bl	18af4 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   1992e:	6869      	ldr	r1, [r5, #4]
   19930:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   19932:	6aab      	ldr	r3, [r5, #40]	; 0x28
   19934:	480a      	ldr	r0, [pc, #40]	; (19960 <os_default_irq+0x90>)
   19936:	f7ff f8dd 	bl	18af4 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   1993a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   1993c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   1993e:	4809      	ldr	r0, [pc, #36]	; (19964 <os_default_irq+0x94>)
   19940:	f7ff f8d8 	bl	18af4 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   19944:	f7ee fc26 	bl	8194 <hal_system_reset>
   19948:	e000ed00 	.word	0xe000ed00
   1994c:	00020edc 	.word	0x00020edc
   19950:	00020f10 	.word	0x00020f10
   19954:	00020f44 	.word	0x00020f44
   19958:	00020f78 	.word	0x00020f78
   1995c:	00020fac 	.word	0x00020fac
   19960:	00020fe0 	.word	0x00020fe0
   19964:	00021008 	.word	0x00021008

00019968 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   19968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
   1996a:	f7ff ff81 	bl	19870 <hal_watchdog_tickle>
    sanity_last = 0;
   1996e:	2500      	movs	r5, #0
   19970:	e00b      	b.n	1998a <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   19972:	f000 fec7 	bl	1a704 <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   19976:	f7ff ff7b 	bl	19870 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
   1997a:	4625      	mov	r5, r4
   1997c:	e011      	b.n	199a2 <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   1997e:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   19980:	f002 f842 	bl	1ba08 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   19984:	4638      	mov	r0, r7
   19986:	f001 fa19 	bl	1adbc <os_arch_restore_sr>
        ++g_os_idle_ctr;
   1998a:	4a14      	ldr	r2, [pc, #80]	; (199dc <os_idle_task+0x74>)
   1998c:	6813      	ldr	r3, [r2, #0]
   1998e:	3301      	adds	r3, #1
   19990:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   19992:	f001 f995 	bl	1acc0 <os_time_get>
   19996:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
   19998:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   1999c:	1ac3      	subs	r3, r0, r3
   1999e:	2b00      	cmp	r3, #0
   199a0:	dce7      	bgt.n	19972 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   199a2:	f001 fa05 	bl	1adb0 <os_arch_save_sr>
   199a6:	4607      	mov	r7, r0
        now = os_time_get();
   199a8:	f001 f98a 	bl	1acc0 <os_time_get>
   199ac:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
   199ae:	f000 ffd7 	bl	1a960 <os_sched_wakeup_ticks>
   199b2:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   199b4:	4630      	mov	r0, r6
   199b6:	f000 f975 	bl	19ca4 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   199ba:	42a0      	cmp	r0, r4
   199bc:	bf28      	it	cs
   199be:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
   199c0:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   199c4:	1b9b      	subs	r3, r3, r6
   199c6:	4298      	cmp	r0, r3
   199c8:	bf28      	it	cs
   199ca:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
   199cc:	280b      	cmp	r0, #11
   199ce:	d9d6      	bls.n	1997e <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
   199d0:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   199d4:	d9d4      	bls.n	19980 <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
   199d6:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   199da:	e7d1      	b.n	19980 <os_idle_task+0x18>
   199dc:	2000a63c 	.word	0x2000a63c

000199e0 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   199e0:	b508      	push	{r3, lr}
   199e2:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   199e4:	2100      	movs	r1, #0
   199e6:	4608      	mov	r0, r1
   199e8:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   199ea:	2300      	movs	r3, #0
   199ec:	461a      	mov	r2, r3
   199ee:	4619      	mov	r1, r3
   199f0:	4618      	mov	r0, r3
   199f2:	f7ff ff47 	bl	19884 <__assert_func>
	...

000199f8 <os_started>:
}
   199f8:	4b01      	ldr	r3, [pc, #4]	; (19a00 <os_started+0x8>)
   199fa:	6818      	ldr	r0, [r3, #0]
   199fc:	4770      	bx	lr
   199fe:	bf00      	nop
   19a00:	2000a638 	.word	0x2000a638

00019a04 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   19a04:	b500      	push	{lr}
   19a06:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   19a08:	2340      	movs	r3, #64	; 0x40
   19a0a:	9303      	str	r3, [sp, #12]
   19a0c:	4b15      	ldr	r3, [pc, #84]	; (19a64 <os_init_idle_task+0x60>)
   19a0e:	9302      	str	r3, [sp, #8]
   19a10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19a14:	9301      	str	r3, [sp, #4]
   19a16:	23ff      	movs	r3, #255	; 0xff
   19a18:	9300      	str	r3, [sp, #0]
   19a1a:	2300      	movs	r3, #0
   19a1c:	4a12      	ldr	r2, [pc, #72]	; (19a68 <os_init_idle_task+0x64>)
   19a1e:	4913      	ldr	r1, [pc, #76]	; (19a6c <os_init_idle_task+0x68>)
   19a20:	4813      	ldr	r0, [pc, #76]	; (19a70 <os_init_idle_task+0x6c>)
   19a22:	f001 f88d 	bl	1ab40 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   19a26:	b950      	cbnz	r0, 19a3e <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   19a28:	f000 fea2 	bl	1a770 <os_sanity_init>
    assert(rc == 0);
   19a2c:	b968      	cbnz	r0, 19a4a <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   19a2e:	f247 5030 	movw	r0, #30000	; 0x7530
   19a32:	f7ff fed9 	bl	197e8 <hal_watchdog_init>
    assert(rc == 0);
   19a36:	b970      	cbnz	r0, 19a56 <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
   19a38:	b005      	add	sp, #20
   19a3a:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   19a3e:	2300      	movs	r3, #0
   19a40:	461a      	mov	r2, r3
   19a42:	4619      	mov	r1, r3
   19a44:	4618      	mov	r0, r3
   19a46:	f7ff ff1d 	bl	19884 <__assert_func>
    assert(rc == 0);
   19a4a:	2300      	movs	r3, #0
   19a4c:	461a      	mov	r2, r3
   19a4e:	4619      	mov	r1, r3
   19a50:	4618      	mov	r0, r3
   19a52:	f7ff ff17 	bl	19884 <__assert_func>
    assert(rc == 0);
   19a56:	2300      	movs	r3, #0
   19a58:	461a      	mov	r2, r3
   19a5a:	4619      	mov	r1, r3
   19a5c:	4618      	mov	r0, r3
   19a5e:	f7ff ff11 	bl	19884 <__assert_func>
   19a62:	bf00      	nop
   19a64:	20001720 	.word	0x20001720
   19a68:	00019969 	.word	0x00019969
   19a6c:	0002102c 	.word	0x0002102c
   19a70:	2000a598 	.word	0x2000a598

00019a74 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   19a74:	b510      	push	{r4, lr}
   19a76:	b084      	sub	sp, #16
   19a78:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   19a7a:	4b24      	ldr	r3, [pc, #144]	; (19b0c <os_init+0x98>)
   19a7c:	2200      	movs	r2, #0
   19a7e:	601a      	str	r2, [r3, #0]
   19a80:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   19a82:	4b23      	ldr	r3, [pc, #140]	; (19b10 <os_init+0x9c>)
   19a84:	601a      	str	r2, [r3, #0]
   19a86:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   19a88:	f000 faba 	bl	1a000 <os_eventq_dflt_get>
   19a8c:	f000 fa0e 	bl	19eac <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   19a90:	f000 fa04 	bl	19e9c <os_dev_reset>

    err = os_arch_os_init();
   19a94:	f001 f9c6 	bl	1ae24 <os_arch_os_init>
    assert(err == OS_OK);
   19a98:	bb00      	cbnz	r0, 19adc <os_init+0x68>

    if (main_fn) {
   19a9a:	b18c      	cbz	r4, 19ac0 <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   19a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   19aa0:	9303      	str	r3, [sp, #12]
   19aa2:	4b1c      	ldr	r3, [pc, #112]	; (19b14 <os_init+0xa0>)
   19aa4:	9302      	str	r3, [sp, #8]
   19aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19aaa:	9301      	str	r3, [sp, #4]
   19aac:	237f      	movs	r3, #127	; 0x7f
   19aae:	9300      	str	r3, [sp, #0]
   19ab0:	4623      	mov	r3, r4
   19ab2:	4a19      	ldr	r2, [pc, #100]	; (19b18 <os_init+0xa4>)
   19ab4:	4919      	ldr	r1, [pc, #100]	; (19b1c <os_init+0xa8>)
   19ab6:	481a      	ldr	r0, [pc, #104]	; (19b20 <os_init+0xac>)
   19ab8:	f001 f842 	bl	1ab40 <os_task_init>
   19abc:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   19abe:	b998      	cbnz	r0, 19ae8 <os_init+0x74>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   19ac0:	f001 fe72 	bl	1b7a8 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   19ac4:	2001      	movs	r0, #1
   19ac6:	f000 f985 	bl	19dd4 <os_dev_initialize_all>
   19aca:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   19acc:	b990      	cbnz	r0, 19af4 <os_init+0x80>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   19ace:	2002      	movs	r0, #2
   19ad0:	f000 f980 	bl	19dd4 <os_dev_initialize_all>
   19ad4:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   19ad6:	b998      	cbnz	r0, 19b00 <os_init+0x8c>
}
   19ad8:	b004      	add	sp, #16
   19ada:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   19adc:	2300      	movs	r3, #0
   19ade:	461a      	mov	r2, r3
   19ae0:	4619      	mov	r1, r3
   19ae2:	4618      	mov	r0, r3
   19ae4:	f7ff fece 	bl	19884 <__assert_func>
        assert(err == 0);
   19ae8:	2300      	movs	r3, #0
   19aea:	461a      	mov	r2, r3
   19aec:	4619      	mov	r1, r3
   19aee:	4618      	mov	r0, r3
   19af0:	f7ff fec8 	bl	19884 <__assert_func>
    assert(err == OS_OK);
   19af4:	2300      	movs	r3, #0
   19af6:	461a      	mov	r2, r3
   19af8:	4619      	mov	r1, r3
   19afa:	4618      	mov	r0, r3
   19afc:	f7ff fec2 	bl	19884 <__assert_func>
    assert(err == OS_OK);
   19b00:	2300      	movs	r3, #0
   19b02:	461a      	mov	r2, r3
   19b04:	4619      	mov	r1, r3
   19b06:	4618      	mov	r0, r3
   19b08:	f7ff febc 	bl	19884 <__assert_func>
   19b0c:	2000a640 	.word	0x2000a640
   19b10:	2000a668 	.word	0x2000a668
   19b14:	20001820 	.word	0x20001820
   19b18:	000199e1 	.word	0x000199e1
   19b1c:	00021024 	.word	0x00021024
   19b20:	2000a5e8 	.word	0x2000a5e8

00019b24 <os_start>:

void
os_start(void)
{
   19b24:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   19b26:	f7ff fe9b 	bl	19860 <hal_watchdog_enable>

    err = os_arch_os_start();
   19b2a:	f001 f9db 	bl	1aee4 <os_arch_os_start>
    assert(err == OS_OK);
   19b2e:	b900      	cbnz	r0, 19b32 <os_start+0xe>
#else
    assert(0);
#endif
}
   19b30:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   19b32:	2300      	movs	r3, #0
   19b34:	461a      	mov	r2, r3
   19b36:	4619      	mov	r1, r3
   19b38:	4618      	mov	r0, r3
   19b3a:	f7ff fea3 	bl	19884 <__assert_func>
	...

00019b40 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   19b40:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   19b42:	4b0c      	ldr	r3, [pc, #48]	; (19b74 <os_pkg_init+0x34>)
   19b44:	781b      	ldrb	r3, [r3, #0]
   19b46:	b14b      	cbz	r3, 19b5c <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   19b48:	2003      	movs	r0, #3
   19b4a:	f000 f943 	bl	19dd4 <os_dev_initialize_all>
   19b4e:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   19b50:	b948      	cbnz	r0, 19b66 <os_pkg_init+0x26>

    os_mempool_module_init();
   19b52:	f000 fc25 	bl	1a3a0 <os_mempool_module_init>
    os_msys_init();
   19b56:	f000 fcad 	bl	1a4b4 <os_msys_init>
}
   19b5a:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   19b5c:	461a      	mov	r2, r3
   19b5e:	4619      	mov	r1, r3
   19b60:	4618      	mov	r0, r3
   19b62:	f7ff fe8f 	bl	19884 <__assert_func>
    assert(err == OS_OK);
   19b66:	2300      	movs	r3, #0
   19b68:	461a      	mov	r2, r3
   19b6a:	4619      	mov	r1, r3
   19b6c:	4618      	mov	r0, r3
   19b6e:	f7ff fe89 	bl	19884 <__assert_func>
   19b72:	bf00      	nop
   19b74:	2000a56c 	.word	0x2000a56c

00019b78 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   19b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19b7a:	4604      	mov	r4, r0
   19b7c:	460d      	mov	r5, r1
   19b7e:	4617      	mov	r7, r2
   19b80:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   19b82:	2220      	movs	r2, #32
   19b84:	2100      	movs	r1, #0
   19b86:	f001 fa80 	bl	1b08a <memset>
    c->c_ev.ev_cb = ev_cb;
   19b8a:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   19b8c:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   19b8e:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   19b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00019b94 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   19b94:	b538      	push	{r3, r4, r5, lr}
   19b96:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   19b98:	f001 f90a 	bl	1adb0 <os_arch_save_sr>
   19b9c:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   19b9e:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   19ba0:	b13b      	cbz	r3, 19bb2 <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   19ba2:	69a2      	ldr	r2, [r4, #24]
   19ba4:	b172      	cbz	r2, 19bc4 <os_callout_stop+0x30>
   19ba6:	61d3      	str	r3, [r2, #28]
   19ba8:	69e3      	ldr	r3, [r4, #28]
   19baa:	69a2      	ldr	r2, [r4, #24]
   19bac:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   19bae:	2300      	movs	r3, #0
   19bb0:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   19bb2:	6920      	ldr	r0, [r4, #16]
   19bb4:	b110      	cbz	r0, 19bbc <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   19bb6:	4621      	mov	r1, r4
   19bb8:	f000 fa02 	bl	19fc0 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   19bbc:	4628      	mov	r0, r5
   19bbe:	f001 f8fd 	bl	1adbc <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   19bc2:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   19bc4:	4a01      	ldr	r2, [pc, #4]	; (19bcc <os_callout_stop+0x38>)
   19bc6:	6053      	str	r3, [r2, #4]
   19bc8:	e7ee      	b.n	19ba8 <os_callout_stop+0x14>
   19bca:	bf00      	nop
   19bcc:	2000a640 	.word	0x2000a640

00019bd0 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   19bd0:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   19bd2:	6903      	ldr	r3, [r0, #16]
   19bd4:	b1c3      	cbz	r3, 19c08 <os_callout_reset+0x38>
   19bd6:	4605      	mov	r5, r0
   19bd8:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   19bda:	2900      	cmp	r1, #0
   19bdc:	db2f      	blt.n	19c3e <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   19bde:	f001 f8e7 	bl	1adb0 <os_arch_save_sr>
   19be2:	4606      	mov	r6, r0

    os_callout_stop(c);
   19be4:	4628      	mov	r0, r5
   19be6:	f7ff ffd5 	bl	19b94 <os_callout_stop>

    if (ticks == 0) {
   19bea:	b904      	cbnz	r4, 19bee <os_callout_reset+0x1e>
        ticks = 1;
   19bec:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
   19bee:	f001 f867 	bl	1acc0 <os_time_get>
   19bf2:	4420      	add	r0, r4
   19bf4:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   19bf6:	4b13      	ldr	r3, [pc, #76]	; (19c44 <os_callout_reset+0x74>)
   19bf8:	681b      	ldr	r3, [r3, #0]
   19bfa:	b153      	cbz	r3, 19c12 <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   19bfc:	695a      	ldr	r2, [r3, #20]
   19bfe:	1a82      	subs	r2, r0, r2
   19c00:	2a00      	cmp	r2, #0
   19c02:	db06      	blt.n	19c12 <os_callout_reset+0x42>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   19c04:	699b      	ldr	r3, [r3, #24]
   19c06:	e7f8      	b.n	19bfa <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   19c08:	461a      	mov	r2, r3
   19c0a:	4619      	mov	r1, r3
   19c0c:	4618      	mov	r0, r3
   19c0e:	f7ff fe39 	bl	19884 <__assert_func>
            break;
        }
    }

    if (entry) {
   19c12:	b15b      	cbz	r3, 19c2c <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   19c14:	69da      	ldr	r2, [r3, #28]
   19c16:	61ea      	str	r2, [r5, #28]
   19c18:	61ab      	str	r3, [r5, #24]
   19c1a:	69da      	ldr	r2, [r3, #28]
   19c1c:	6015      	str	r5, [r2, #0]
   19c1e:	3518      	adds	r5, #24
   19c20:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   19c22:	4630      	mov	r0, r6
   19c24:	f001 f8ca 	bl	1adbc <os_arch_restore_sr>

    ret = OS_OK;
   19c28:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   19c2a:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   19c2c:	2300      	movs	r3, #0
   19c2e:	61ab      	str	r3, [r5, #24]
   19c30:	4b04      	ldr	r3, [pc, #16]	; (19c44 <os_callout_reset+0x74>)
   19c32:	685a      	ldr	r2, [r3, #4]
   19c34:	61ea      	str	r2, [r5, #28]
   19c36:	6015      	str	r5, [r2, #0]
   19c38:	3518      	adds	r5, #24
   19c3a:	605d      	str	r5, [r3, #4]
   19c3c:	e7f1      	b.n	19c22 <os_callout_reset+0x52>
        ret = OS_EINVAL;
   19c3e:	2002      	movs	r0, #2
    return ret;
   19c40:	e7f3      	b.n	19c2a <os_callout_reset+0x5a>
   19c42:	bf00      	nop
   19c44:	2000a640 	.word	0x2000a640

00019c48 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   19c48:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   19c4a:	f001 f839 	bl	1acc0 <os_time_get>
   19c4e:	4605      	mov	r5, r0
   19c50:	e00f      	b.n	19c72 <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   19c52:	69e2      	ldr	r2, [r4, #28]
   19c54:	4b12      	ldr	r3, [pc, #72]	; (19ca0 <os_callout_tick+0x58>)
   19c56:	605a      	str	r2, [r3, #4]
   19c58:	69e3      	ldr	r3, [r4, #28]
   19c5a:	69a2      	ldr	r2, [r4, #24]
   19c5c:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   19c5e:	2300      	movs	r3, #0
   19c60:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   19c62:	f001 f8ab 	bl	1adbc <os_arch_restore_sr>

        if (c) {
   19c66:	b1d4      	cbz	r4, 19c9e <os_callout_tick+0x56>
            if (c->c_evq) {
   19c68:	6920      	ldr	r0, [r4, #16]
   19c6a:	b9a0      	cbnz	r0, 19c96 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   19c6c:	6863      	ldr	r3, [r4, #4]
   19c6e:	4620      	mov	r0, r4
   19c70:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
   19c72:	f001 f89d 	bl	1adb0 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   19c76:	4b0a      	ldr	r3, [pc, #40]	; (19ca0 <os_callout_tick+0x58>)
   19c78:	681c      	ldr	r4, [r3, #0]
        if (c) {
   19c7a:	2c00      	cmp	r4, #0
   19c7c:	d0f1      	beq.n	19c62 <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   19c7e:	6963      	ldr	r3, [r4, #20]
   19c80:	1aeb      	subs	r3, r5, r3
   19c82:	2b00      	cmp	r3, #0
   19c84:	db05      	blt.n	19c92 <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   19c86:	69a3      	ldr	r3, [r4, #24]
   19c88:	2b00      	cmp	r3, #0
   19c8a:	d0e2      	beq.n	19c52 <os_callout_tick+0xa>
   19c8c:	69e2      	ldr	r2, [r4, #28]
   19c8e:	61da      	str	r2, [r3, #28]
   19c90:	e7e2      	b.n	19c58 <os_callout_tick+0x10>
                c = NULL;
   19c92:	2400      	movs	r4, #0
   19c94:	e7e5      	b.n	19c62 <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
   19c96:	4621      	mov	r1, r4
   19c98:	f000 f915 	bl	19ec6 <os_eventq_put>
   19c9c:	e7e9      	b.n	19c72 <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   19c9e:	bd38      	pop	{r3, r4, r5, pc}
   19ca0:	2000a640 	.word	0x2000a640

00019ca4 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   19ca4:	b510      	push	{r4, lr}
   19ca6:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   19ca8:	f001 f88b 	bl	1adc2 <os_arch_in_critical>
   19cac:	b130      	cbz	r0, 19cbc <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   19cae:	4b09      	ldr	r3, [pc, #36]	; (19cd4 <os_callout_wakeup_ticks+0x30>)
   19cb0:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   19cb2:	b15b      	cbz	r3, 19ccc <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   19cb4:	6958      	ldr	r0, [r3, #20]
   19cb6:	1b00      	subs	r0, r0, r4
   19cb8:	d406      	bmi.n	19cc8 <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   19cba:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   19cbc:	2300      	movs	r3, #0
   19cbe:	461a      	mov	r2, r3
   19cc0:	4619      	mov	r1, r3
   19cc2:	4618      	mov	r0, r3
   19cc4:	f7ff fdde 	bl	19884 <__assert_func>
            rt = 0;     /* callout time is in the past */
   19cc8:	2000      	movs	r0, #0
   19cca:	e7f6      	b.n	19cba <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   19ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   19cd0:	e7f3      	b.n	19cba <os_callout_wakeup_ticks+0x16>
   19cd2:	bf00      	nop
   19cd4:	2000a640 	.word	0x2000a640

00019cd8 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   19cd8:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   19cda:	4601      	mov	r1, r0
   19cdc:	2000      	movs	r0, #0
   19cde:	f002 f84d 	bl	1bd7c <hal_timer_config>
    return rc;
}
   19ce2:	bd08      	pop	{r3, pc}

00019ce4 <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
   19ce4:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   19ce6:	2000      	movs	r0, #0
   19ce8:	f002 f8c4 	bl	1be74 <hal_timer_read>
    return cpu_time;
}
   19cec:	bd08      	pop	{r3, pc}
	...

00019cf0 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   19cf0:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   19cf2:	4b15      	ldr	r3, [pc, #84]	; (19d48 <os_dev_add+0x58>)
   19cf4:	681d      	ldr	r5, [r3, #0]
   19cf6:	b115      	cbz	r5, 19cfe <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   19cf8:	462b      	mov	r3, r5
    prev_dev = NULL;
   19cfa:	2400      	movs	r4, #0
   19cfc:	e008      	b.n	19d10 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   19cfe:	4603      	mov	r3, r0
   19d00:	f843 5f20 	str.w	r5, [r3, #32]!
   19d04:	4a10      	ldr	r2, [pc, #64]	; (19d48 <os_dev_add+0x58>)
   19d06:	6053      	str	r3, [r2, #4]
   19d08:	6010      	str	r0, [r2, #0]
        return (0);
   19d0a:	e010      	b.n	19d2e <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   19d0c:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   19d0e:	6a1b      	ldr	r3, [r3, #32]
   19d10:	b143      	cbz	r3, 19d24 <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
   19d12:	7e01      	ldrb	r1, [r0, #24]
   19d14:	7e1a      	ldrb	r2, [r3, #24]
   19d16:	4291      	cmp	r1, r2
   19d18:	d304      	bcc.n	19d24 <os_dev_add+0x34>
   19d1a:	d1f7      	bne.n	19d0c <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
   19d1c:	7e41      	ldrb	r1, [r0, #25]
   19d1e:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
   19d20:	4291      	cmp	r1, r2
   19d22:	d2f3      	bcs.n	19d0c <os_dev_add+0x1c>
    }

    if (prev_dev) {
   19d24:	b15c      	cbz	r4, 19d3e <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   19d26:	6a23      	ldr	r3, [r4, #32]
   19d28:	6203      	str	r3, [r0, #32]
   19d2a:	b11b      	cbz	r3, 19d34 <os_dev_add+0x44>
   19d2c:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   19d2e:	2000      	movs	r0, #0
   19d30:	bc30      	pop	{r4, r5}
   19d32:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   19d34:	f100 0320 	add.w	r3, r0, #32
   19d38:	4a03      	ldr	r2, [pc, #12]	; (19d48 <os_dev_add+0x58>)
   19d3a:	6053      	str	r3, [r2, #4]
   19d3c:	e7f6      	b.n	19d2c <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   19d3e:	6205      	str	r5, [r0, #32]
   19d40:	4b01      	ldr	r3, [pc, #4]	; (19d48 <os_dev_add+0x58>)
   19d42:	6018      	str	r0, [r3, #0]
   19d44:	e7f3      	b.n	19d2e <os_dev_add+0x3e>
   19d46:	bf00      	nop
   19d48:	20005820 	.word	0x20005820

00019d4c <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   19d4c:	b510      	push	{r4, lr}
   19d4e:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   19d50:	6903      	ldr	r3, [r0, #16]
   19d52:	6941      	ldr	r1, [r0, #20]
   19d54:	4798      	blx	r3
    if (rc != 0) {
   19d56:	4603      	mov	r3, r0
   19d58:	b128      	cbz	r0, 19d66 <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   19d5a:	7ee2      	ldrb	r2, [r4, #27]
   19d5c:	f012 0f08 	tst.w	r2, #8
   19d60:	d105      	bne.n	19d6e <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   19d62:	2300      	movs	r3, #0
   19d64:	e003      	b.n	19d6e <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   19d66:	7ee2      	ldrb	r2, [r4, #27]
   19d68:	f042 0201 	orr.w	r2, r2, #1
   19d6c:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
   19d6e:	4618      	mov	r0, r3
   19d70:	bd10      	pop	{r4, pc}

00019d72 <os_dev_init>:
    dev->od_name = name;
   19d72:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   19d74:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   19d76:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   19d78:	2300      	movs	r3, #0
   19d7a:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
   19d7c:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
   19d7e:	9a00      	ldr	r2, [sp, #0]
   19d80:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
   19d82:	9a01      	ldr	r2, [sp, #4]
   19d84:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   19d86:	6003      	str	r3, [r0, #0]
   19d88:	6043      	str	r3, [r0, #4]
   19d8a:	6083      	str	r3, [r0, #8]
   19d8c:	60c3      	str	r3, [r0, #12]
}
   19d8e:	4618      	mov	r0, r3
   19d90:	4770      	bx	lr
	...

00019d94 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   19d94:	b530      	push	{r4, r5, lr}
   19d96:	b083      	sub	sp, #12
   19d98:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   19d9a:	9c07      	ldr	r4, [sp, #28]
   19d9c:	9401      	str	r4, [sp, #4]
   19d9e:	9c06      	ldr	r4, [sp, #24]
   19da0:	9400      	str	r4, [sp, #0]
   19da2:	f7ff ffe6 	bl	19d72 <os_dev_init>
    if (rc != 0) {
   19da6:	4603      	mov	r3, r0
   19da8:	b110      	cbz	r0, 19db0 <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   19daa:	4618      	mov	r0, r3
   19dac:	b003      	add	sp, #12
   19dae:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   19db0:	4628      	mov	r0, r5
   19db2:	f7ff ff9d 	bl	19cf0 <os_dev_add>
    if (rc != 0) {
   19db6:	4603      	mov	r3, r0
   19db8:	2800      	cmp	r0, #0
   19dba:	d1f6      	bne.n	19daa <os_dev_create+0x16>
    if (g_os_started) {
   19dbc:	4a04      	ldr	r2, [pc, #16]	; (19dd0 <os_dev_create+0x3c>)
   19dbe:	6812      	ldr	r2, [r2, #0]
   19dc0:	2a00      	cmp	r2, #0
   19dc2:	d0f2      	beq.n	19daa <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
   19dc4:	4628      	mov	r0, r5
   19dc6:	f7ff ffc1 	bl	19d4c <os_dev_initialize>
   19dca:	4603      	mov	r3, r0
    return (rc);
   19dcc:	e7ed      	b.n	19daa <os_dev_create+0x16>
   19dce:	bf00      	nop
   19dd0:	2000a638 	.word	0x2000a638

00019dd4 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   19dd4:	b538      	push	{r3, r4, r5, lr}
   19dd6:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19dd8:	4b08      	ldr	r3, [pc, #32]	; (19dfc <os_dev_initialize_all+0x28>)
   19dda:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   19ddc:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19dde:	e000      	b.n	19de2 <os_dev_initialize_all+0xe>
   19de0:	6a24      	ldr	r4, [r4, #32]
   19de2:	b144      	cbz	r4, 19df6 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   19de4:	7e23      	ldrb	r3, [r4, #24]
   19de6:	42ab      	cmp	r3, r5
   19de8:	d1fa      	bne.n	19de0 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   19dea:	4620      	mov	r0, r4
   19dec:	f7ff ffae 	bl	19d4c <os_dev_initialize>
            if (rc) {
   19df0:	4602      	mov	r2, r0
   19df2:	2800      	cmp	r0, #0
   19df4:	d0f4      	beq.n	19de0 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   19df6:	4610      	mov	r0, r2
   19df8:	bd38      	pop	{r3, r4, r5, pc}
   19dfa:	bf00      	nop
   19dfc:	20005820 	.word	0x20005820

00019e00 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   19e00:	b538      	push	{r3, r4, r5, lr}
   19e02:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19e04:	4b05      	ldr	r3, [pc, #20]	; (19e1c <os_dev_lookup+0x1c>)
   19e06:	681c      	ldr	r4, [r3, #0]
   19e08:	b134      	cbz	r4, 19e18 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   19e0a:	4629      	mov	r1, r5
   19e0c:	69e0      	ldr	r0, [r4, #28]
   19e0e:	f001 f958 	bl	1b0c2 <strcmp>
   19e12:	b108      	cbz	r0, 19e18 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19e14:	6a24      	ldr	r4, [r4, #32]
   19e16:	e7f7      	b.n	19e08 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   19e18:	4620      	mov	r0, r4
   19e1a:	bd38      	pop	{r3, r4, r5, pc}
   19e1c:	20005820 	.word	0x20005820

00019e20 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   19e20:	b570      	push	{r4, r5, r6, lr}
   19e22:	460d      	mov	r5, r1
   19e24:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   19e26:	f7ff ffeb 	bl	19e00 <os_dev_lookup>
    if (dev == NULL) {
   19e2a:	4604      	mov	r4, r0
   19e2c:	b1a0      	cbz	r0, 19e58 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   19e2e:	7ec3      	ldrb	r3, [r0, #27]
   19e30:	f013 0f01 	tst.w	r3, #1
   19e34:	d012      	beq.n	19e5c <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   19e36:	6803      	ldr	r3, [r0, #0]
   19e38:	b11b      	cbz	r3, 19e42 <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   19e3a:	4632      	mov	r2, r6
   19e3c:	4629      	mov	r1, r5
   19e3e:	4798      	blx	r3
        if (rc != 0) {
   19e40:	b970      	cbnz	r0, 19e60 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   19e42:	f000 ffb5 	bl	1adb0 <os_arch_save_sr>
    ++dev->od_open_ref;
   19e46:	7ea3      	ldrb	r3, [r4, #26]
   19e48:	3301      	adds	r3, #1
   19e4a:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   19e4c:	7ee3      	ldrb	r3, [r4, #27]
   19e4e:	f043 0302 	orr.w	r3, r3, #2
   19e52:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   19e54:	f000 ffb2 	bl	1adbc <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   19e58:	4620      	mov	r0, r4
   19e5a:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   19e5c:	2400      	movs	r4, #0
   19e5e:	e7fb      	b.n	19e58 <os_dev_open+0x38>
    return (NULL);
   19e60:	2400      	movs	r4, #0
   19e62:	e7f9      	b.n	19e58 <os_dev_open+0x38>

00019e64 <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev == NULL) {
   19e64:	b1b0      	cbz	r0, 19e94 <os_dev_close+0x30>
{
   19e66:	b510      	push	{r4, lr}
   19e68:	4604      	mov	r4, r0
        rc = OS_EINVAL;
        goto err;
    }

    if (dev->od_handlers.od_close) {
   19e6a:	68c3      	ldr	r3, [r0, #12]
   19e6c:	b113      	cbz	r3, 19e74 <os_dev_close+0x10>
        rc = dev->od_handlers.od_close(dev);
   19e6e:	4798      	blx	r3
        if (rc != 0) {
   19e70:	4603      	mov	r3, r0
   19e72:	b968      	cbnz	r0, 19e90 <os_dev_close+0x2c>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   19e74:	f000 ff9c 	bl	1adb0 <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
   19e78:	7ea3      	ldrb	r3, [r4, #26]
   19e7a:	3b01      	subs	r3, #1
   19e7c:	b2db      	uxtb	r3, r3
   19e7e:	76a3      	strb	r3, [r4, #26]
   19e80:	b91b      	cbnz	r3, 19e8a <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
   19e82:	7ee3      	ldrb	r3, [r4, #27]
   19e84:	f023 0306 	bic.w	r3, r3, #6
   19e88:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
   19e8a:	f000 ff97 	bl	1adbc <os_arch_restore_sr>

    return (0);
   19e8e:	2300      	movs	r3, #0
err:
    return (rc);
}
   19e90:	4618      	mov	r0, r3
   19e92:	bd10      	pop	{r4, pc}
        rc = OS_EINVAL;
   19e94:	2302      	movs	r3, #2
}
   19e96:	4618      	mov	r0, r3
   19e98:	4770      	bx	lr
	...

00019e9c <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   19e9c:	4b02      	ldr	r3, [pc, #8]	; (19ea8 <os_dev_reset+0xc>)
   19e9e:	2200      	movs	r2, #0
   19ea0:	601a      	str	r2, [r3, #0]
   19ea2:	605b      	str	r3, [r3, #4]
}
   19ea4:	4770      	bx	lr
   19ea6:	bf00      	nop
   19ea8:	20005820 	.word	0x20005820

00019eac <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   19eac:	2200      	movs	r2, #0
   19eae:	6002      	str	r2, [r0, #0]
   19eb0:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   19eb2:	4603      	mov	r3, r0
   19eb4:	f843 2f08 	str.w	r2, [r3, #8]!
   19eb8:	60c3      	str	r3, [r0, #12]
}
   19eba:	4770      	bx	lr

00019ebc <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   19ebc:	68c0      	ldr	r0, [r0, #12]
}
   19ebe:	3000      	adds	r0, #0
   19ec0:	bf18      	it	ne
   19ec2:	2001      	movne	r0, #1
   19ec4:	4770      	bx	lr

00019ec6 <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   19ec6:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   19ec8:	b1f0      	cbz	r0, 19f08 <os_eventq_put+0x42>
   19eca:	460c      	mov	r4, r1
   19ecc:	4605      	mov	r5, r0
   19ece:	f7ff fff5 	bl	19ebc <os_eventq_inited>
   19ed2:	b1c8      	cbz	r0, 19f08 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   19ed4:	f000 ff6c 	bl	1adb0 <os_arch_save_sr>
   19ed8:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   19eda:	7823      	ldrb	r3, [r4, #0]
   19edc:	b9d3      	cbnz	r3, 19f14 <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   19ede:	2301      	movs	r3, #1
   19ee0:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   19ee2:	2300      	movs	r3, #0
   19ee4:	60e3      	str	r3, [r4, #12]
   19ee6:	68eb      	ldr	r3, [r5, #12]
   19ee8:	601c      	str	r4, [r3, #0]
   19eea:	340c      	adds	r4, #12
   19eec:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
   19eee:	6868      	ldr	r0, [r5, #4]
   19ef0:	b1b8      	cbz	r0, 19f22 <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   19ef2:	7b03      	ldrb	r3, [r0, #12]
   19ef4:	2b02      	cmp	r3, #2
   19ef6:	d010      	beq.n	19f1a <os_eventq_put+0x54>
    resched = 0;
   19ef8:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   19efa:	2300      	movs	r3, #0
   19efc:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
   19efe:	4630      	mov	r0, r6
   19f00:	f000 ff5c 	bl	1adbc <os_arch_restore_sr>

    if (resched) {
   19f04:	b97c      	cbnz	r4, 19f26 <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   19f06:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   19f08:	2300      	movs	r3, #0
   19f0a:	461a      	mov	r2, r3
   19f0c:	4619      	mov	r1, r3
   19f0e:	4618      	mov	r0, r3
   19f10:	f7ff fcb8 	bl	19884 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   19f14:	f000 ff52 	bl	1adbc <os_arch_restore_sr>
   19f18:	e7f5      	b.n	19f06 <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   19f1a:	f000 fcc7 	bl	1a8ac <os_sched_wakeup>
            resched = 1;
   19f1e:	2401      	movs	r4, #1
   19f20:	e7eb      	b.n	19efa <os_eventq_put+0x34>
    resched = 0;
   19f22:	2400      	movs	r4, #0
   19f24:	e7eb      	b.n	19efe <os_eventq_put+0x38>
        os_sched(NULL);
   19f26:	2000      	movs	r0, #0
   19f28:	f000 fd40 	bl	1a9ac <os_sched>
   19f2c:	e7eb      	b.n	19f06 <os_eventq_put+0x40>

00019f2e <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   19f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19f30:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   19f32:	f000 fc67 	bl	1a804 <os_sched_get_current_task>
   19f36:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   19f38:	682b      	ldr	r3, [r5, #0]
   19f3a:	4283      	cmp	r3, r0
   19f3c:	d001      	beq.n	19f42 <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   19f3e:	b9db      	cbnz	r3, 19f78 <os_eventq_get+0x4a>
            evq->evq_owner = t;
   19f40:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   19f42:	f000 ff35 	bl	1adb0 <os_arch_save_sr>
   19f46:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   19f48:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
   19f4a:	b9de      	cbnz	r6, 19f84 <os_eventq_get+0x56>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   19f4c:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   19f4e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19f52:	4620      	mov	r0, r4
   19f54:	f000 fc62 	bl	1a81c <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   19f58:	7b63      	ldrb	r3, [r4, #13]
   19f5a:	f043 0308 	orr.w	r3, r3, #8
   19f5e:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   19f60:	4638      	mov	r0, r7
   19f62:	f000 ff2b 	bl	1adbc <os_arch_restore_sr>

        os_sched(NULL);
   19f66:	2000      	movs	r0, #0
   19f68:	f000 fd20 	bl	1a9ac <os_sched>

        OS_ENTER_CRITICAL(sr);
   19f6c:	f000 ff20 	bl	1adb0 <os_arch_save_sr>
   19f70:	4607      	mov	r7, r0
        evq->evq_task = NULL;
   19f72:	2300      	movs	r3, #0
   19f74:	606b      	str	r3, [r5, #4]
        goto pull_one;
   19f76:	e7e7      	b.n	19f48 <os_eventq_get+0x1a>
            assert(0);
   19f78:	2300      	movs	r3, #0
   19f7a:	461a      	mov	r2, r3
   19f7c:	4619      	mov	r1, r3
   19f7e:	4618      	mov	r0, r3
   19f80:	f7ff fc80 	bl	19884 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   19f84:	68f3      	ldr	r3, [r6, #12]
   19f86:	60ab      	str	r3, [r5, #8]
   19f88:	b153      	cbz	r3, 19fa0 <os_eventq_get+0x72>
        ev->ev_queued = 0;
   19f8a:	2300      	movs	r3, #0
   19f8c:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   19f8e:	7b63      	ldrb	r3, [r4, #13]
   19f90:	f023 0308 	bic.w	r3, r3, #8
   19f94:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   19f96:	4638      	mov	r0, r7
   19f98:	f000 ff10 	bl	1adbc <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   19f9c:	4630      	mov	r0, r6
   19f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   19fa0:	f105 0308 	add.w	r3, r5, #8
   19fa4:	60eb      	str	r3, [r5, #12]
   19fa6:	e7f0      	b.n	19f8a <os_eventq_get+0x5c>

00019fa8 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   19fa8:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   19faa:	f7ff ffc0 	bl	19f2e <os_eventq_get>
    assert(ev->ev_cb != NULL);
   19fae:	6843      	ldr	r3, [r0, #4]
   19fb0:	b10b      	cbz	r3, 19fb6 <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   19fb2:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   19fb4:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   19fb6:	461a      	mov	r2, r3
   19fb8:	4619      	mov	r1, r3
   19fba:	4618      	mov	r0, r3
   19fbc:	f7ff fc62 	bl	19884 <__assert_func>

00019fc0 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   19fc0:	b538      	push	{r3, r4, r5, lr}
   19fc2:	4605      	mov	r5, r0
   19fc4:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   19fc6:	f000 fef3 	bl	1adb0 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   19fca:	7823      	ldrb	r3, [r4, #0]
   19fcc:	b183      	cbz	r3, 19ff0 <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   19fce:	68aa      	ldr	r2, [r5, #8]
   19fd0:	42a2      	cmp	r2, r4
   19fd2:	d107      	bne.n	19fe4 <os_eventq_remove+0x24>
   19fd4:	68d3      	ldr	r3, [r2, #12]
   19fd6:	60ab      	str	r3, [r5, #8]
   19fd8:	b953      	cbnz	r3, 19ff0 <os_eventq_remove+0x30>
   19fda:	f105 0308 	add.w	r3, r5, #8
   19fde:	60eb      	str	r3, [r5, #12]
   19fe0:	e006      	b.n	19ff0 <os_eventq_remove+0x30>
   19fe2:	461a      	mov	r2, r3
   19fe4:	68d3      	ldr	r3, [r2, #12]
   19fe6:	42a3      	cmp	r3, r4
   19fe8:	d1fb      	bne.n	19fe2 <os_eventq_remove+0x22>
   19fea:	68db      	ldr	r3, [r3, #12]
   19fec:	60d3      	str	r3, [r2, #12]
   19fee:	b123      	cbz	r3, 19ffa <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
   19ff0:	2300      	movs	r3, #0
   19ff2:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   19ff4:	f000 fee2 	bl	1adbc <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   19ff8:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   19ffa:	320c      	adds	r2, #12
   19ffc:	60ea      	str	r2, [r5, #12]
   19ffe:	e7f7      	b.n	19ff0 <os_eventq_remove+0x30>

0001a000 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   1a000:	4800      	ldr	r0, [pc, #0]	; (1a004 <os_eventq_dflt_get+0x4>)
   1a002:	4770      	bx	lr
   1a004:	20005828 	.word	0x20005828

0001a008 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
   1a008:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
   1a00a:	2000      	movs	r0, #0
   1a00c:	6018      	str	r0, [r3, #0]
   1a00e:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
   1a010:	6098      	str	r0, [r3, #8]
   1a012:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
   1a014:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
   1a016:	611a      	str	r2, [r3, #16]

    return (0);
}
   1a018:	4770      	bx	lr

0001a01a <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
   1a01a:	b538      	push	{r3, r4, r5, lr}
   1a01c:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1a01e:	f000 fec7 	bl	1adb0 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
   1a022:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   1a024:	b114      	cbz	r4, 1a02c <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   1a026:	6863      	ldr	r3, [r4, #4]
   1a028:	602b      	str	r3, [r5, #0]
   1a02a:	b12b      	cbz	r3, 1a038 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   1a02c:	f000 fec6 	bl	1adbc <os_arch_restore_sr>

    if (mp) {
   1a030:	b124      	cbz	r4, 1a03c <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
   1a032:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
   1a036:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   1a038:	606d      	str	r5, [r5, #4]
   1a03a:	e7f7      	b.n	1a02c <os_mqueue_get+0x12>
        m = NULL;
   1a03c:	2000      	movs	r0, #0
    return (m);
   1a03e:	e7fa      	b.n	1a036 <os_mqueue_get+0x1c>

0001a040 <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
   1a040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
   1a042:	7953      	ldrb	r3, [r2, #5]
   1a044:	2b07      	cmp	r3, #7
   1a046:	d916      	bls.n	1a076 <os_mqueue_put+0x36>
   1a048:	4614      	mov	r4, r2
   1a04a:	460e      	mov	r6, r1
   1a04c:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
   1a04e:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   1a052:	f000 fead 	bl	1adb0 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   1a056:	2300      	movs	r3, #0
   1a058:	f844 3f14 	str.w	r3, [r4, #20]!
   1a05c:	686b      	ldr	r3, [r5, #4]
   1a05e:	601f      	str	r7, [r3, #0]
   1a060:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   1a062:	f000 feab 	bl	1adbc <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   1a066:	b146      	cbz	r6, 1a07a <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
   1a068:	f105 0108 	add.w	r1, r5, #8
   1a06c:	4630      	mov	r0, r6
   1a06e:	f7ff ff2a 	bl	19ec6 <os_eventq_put>
    }

    return (0);
   1a072:	2000      	movs	r0, #0
   1a074:	e000      	b.n	1a078 <os_mqueue_put+0x38>
err:
    return (rc);
   1a076:	2002      	movs	r0, #2
}
   1a078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   1a07a:	2000      	movs	r0, #0
   1a07c:	e7fc      	b.n	1a078 <os_mqueue_put+0x38>

0001a07e <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   1a07e:	3a10      	subs	r2, #16
   1a080:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   1a082:	6041      	str	r1, [r0, #4]

    return (0);
}
   1a084:	2000      	movs	r0, #0
   1a086:	4770      	bx	lr

0001a088 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   1a088:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   1a08a:	8803      	ldrh	r3, [r0, #0]
   1a08c:	428b      	cmp	r3, r1
   1a08e:	d312      	bcc.n	1a0b6 <os_mbuf_get+0x2e>
   1a090:	460d      	mov	r5, r1
   1a092:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   1a094:	6840      	ldr	r0, [r0, #4]
   1a096:	f000 f947 	bl	1a328 <os_memblock_get>
    if (!om) {
   1a09a:	4603      	mov	r3, r0
   1a09c:	b148      	cbz	r0, 1a0b2 <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   1a09e:	2200      	movs	r2, #0
   1a0a0:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
   1a0a2:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
   1a0a4:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
   1a0a6:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   1a0a8:	f100 0110 	add.w	r1, r0, #16
   1a0ac:	4429      	add	r1, r5
   1a0ae:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
   1a0b0:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   1a0b2:	4618      	mov	r0, r3
   1a0b4:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1a0b6:	2300      	movs	r3, #0
    return om;
   1a0b8:	e7fb      	b.n	1a0b2 <os_mbuf_get+0x2a>

0001a0ba <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   1a0ba:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   1a0bc:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   1a0c0:	8803      	ldrh	r3, [r0, #0]
   1a0c2:	42ab      	cmp	r3, r5
   1a0c4:	d310      	bcc.n	1a0e8 <os_mbuf_get_pkthdr+0x2e>
   1a0c6:	2dff      	cmp	r5, #255	; 0xff
   1a0c8:	d810      	bhi.n	1a0ec <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   1a0ca:	2100      	movs	r1, #0
   1a0cc:	f7ff ffdc 	bl	1a088 <os_mbuf_get>
    if (om) {
   1a0d0:	4603      	mov	r3, r0
   1a0d2:	b138      	cbz	r0, 1a0e4 <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
   1a0d4:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
   1a0d6:	6802      	ldr	r2, [r0, #0]
   1a0d8:	4415      	add	r5, r2
   1a0da:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   1a0dc:	2200      	movs	r2, #0
   1a0de:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
   1a0e0:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   1a0e2:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   1a0e4:	4618      	mov	r0, r3
   1a0e6:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1a0e8:	2300      	movs	r3, #0
   1a0ea:	e7fb      	b.n	1a0e4 <os_mbuf_get_pkthdr+0x2a>
   1a0ec:	2300      	movs	r3, #0
    return om;
   1a0ee:	e7f9      	b.n	1a0e4 <os_mbuf_get_pkthdr+0x2a>

0001a0f0 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   1a0f0:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   1a0f2:	6883      	ldr	r3, [r0, #8]
   1a0f4:	b123      	cbz	r3, 1a100 <os_mbuf_free+0x10>
   1a0f6:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   1a0f8:	6858      	ldr	r0, [r3, #4]
   1a0fa:	f000 f93d 	bl	1a378 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   1a0fe:	bd08      	pop	{r3, pc}
    rc = 0;
   1a100:	2000      	movs	r0, #0
    return (rc);
   1a102:	e7fc      	b.n	1a0fe <os_mbuf_free+0xe>

0001a104 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
   1a104:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   1a106:	b160      	cbz	r0, 1a122 <os_mbuf_free_chain+0x1e>
{
   1a108:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   1a10a:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
   1a10c:	4618      	mov	r0, r3
   1a10e:	f7ff ffef 	bl	1a0f0 <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
   1a112:	4623      	mov	r3, r4
        if (rc != 0) {
   1a114:	4602      	mov	r2, r0
   1a116:	b910      	cbnz	r0, 1a11e <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
   1a118:	2c00      	cmp	r4, #0
   1a11a:	d1f6      	bne.n	1a10a <os_mbuf_free_chain+0x6>
    }

    rc = 0;
   1a11c:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   1a11e:	4610      	mov	r0, r2
   1a120:	bd10      	pop	{r4, pc}
    rc = 0;
   1a122:	2200      	movs	r2, #0
}
   1a124:	4610      	mov	r0, r2
   1a126:	4770      	bx	lr

0001a128 <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
   1a128:	2300      	movs	r3, #0
    while (om != NULL) {
   1a12a:	e003      	b.n	1a134 <os_mbuf_len+0xc>
        len += om->om_len;
   1a12c:	88c2      	ldrh	r2, [r0, #6]
   1a12e:	4413      	add	r3, r2
   1a130:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
   1a132:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
   1a134:	2800      	cmp	r0, #0
   1a136:	d1f9      	bne.n	1a12c <os_mbuf_len+0x4>
    }

    return len;
}
   1a138:	4618      	mov	r0, r3
   1a13a:	4770      	bx	lr

0001a13c <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   1a13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   1a140:	2800      	cmp	r0, #0
   1a142:	d04d      	beq.n	1a1e0 <os_mbuf_append+0xa4>
   1a144:	460f      	mov	r7, r1
   1a146:	4691      	mov	r9, r2
   1a148:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   1a14a:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   1a14e:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   1a150:	e000      	b.n	1a154 <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
   1a152:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
   1a154:	68eb      	ldr	r3, [r5, #12]
   1a156:	2b00      	cmp	r3, #0
   1a158:	d1fb      	bne.n	1a152 <os_mbuf_append+0x16>
    }

    remainder = len;
   1a15a:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   1a15c:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1a15e:	f105 0410 	add.w	r4, r5, #16
   1a162:	881b      	ldrh	r3, [r3, #0]
   1a164:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   1a166:	6828      	ldr	r0, [r5, #0]
   1a168:	88eb      	ldrh	r3, [r5, #6]
   1a16a:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1a16c:	1a24      	subs	r4, r4, r0
   1a16e:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   1a170:	b164      	cbz	r4, 1a18c <os_mbuf_append+0x50>
        if (space > remainder) {
   1a172:	454c      	cmp	r4, r9
   1a174:	dd00      	ble.n	1a178 <os_mbuf_append+0x3c>
            space = remainder;
   1a176:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   1a178:	4622      	mov	r2, r4
   1a17a:	4639      	mov	r1, r7
   1a17c:	f000 ff78 	bl	1b070 <memcpy>

        last->om_len += space;
   1a180:	88eb      	ldrh	r3, [r5, #6]
   1a182:	4423      	add	r3, r4
   1a184:	80eb      	strh	r3, [r5, #6]
        data += space;
   1a186:	4427      	add	r7, r4
        remainder -= space;
   1a188:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   1a18c:	2e00      	cmp	r6, #0
   1a18e:	dd16      	ble.n	1a1be <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
   1a190:	2100      	movs	r1, #0
   1a192:	4640      	mov	r0, r8
   1a194:	f7ff ff78 	bl	1a088 <os_mbuf_get>
        if (!new) {
   1a198:	4604      	mov	r4, r0
   1a19a:	b180      	cbz	r0, 1a1be <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   1a19c:	f8b8 2000 	ldrh.w	r2, [r8]
   1a1a0:	42b2      	cmp	r2, r6
   1a1a2:	bfa8      	it	ge
   1a1a4:	4632      	movge	r2, r6
   1a1a6:	b292      	uxth	r2, r2
   1a1a8:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   1a1aa:	4639      	mov	r1, r7
   1a1ac:	6800      	ldr	r0, [r0, #0]
   1a1ae:	f000 ff5f 	bl	1b070 <memcpy>
        data += new->om_len;
   1a1b2:	88e3      	ldrh	r3, [r4, #6]
   1a1b4:	441f      	add	r7, r3
        remainder -= new->om_len;
   1a1b6:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
   1a1b8:	60ec      	str	r4, [r5, #12]
        last = new;
   1a1ba:	4625      	mov	r5, r4
   1a1bc:	e7e6      	b.n	1a18c <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   1a1be:	f89a 3005 	ldrb.w	r3, [sl, #5]
   1a1c2:	2b07      	cmp	r3, #7
   1a1c4:	d907      	bls.n	1a1d6 <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   1a1c6:	eba9 0906 	sub.w	r9, r9, r6
   1a1ca:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   1a1ce:	fa13 f989 	uxtah	r9, r3, r9
   1a1d2:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   1a1d6:	b106      	cbz	r6, 1a1da <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
   1a1d8:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
   1a1da:	4630      	mov	r0, r6
   1a1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   1a1e0:	2602      	movs	r6, #2
   1a1e2:	e7fa      	b.n	1a1da <os_mbuf_append+0x9e>

0001a1e4 <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
   1a1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a1e8:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
   1a1ea:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
   1a1ee:	2700      	movs	r7, #0
    head = NULL;
   1a1f0:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1a1f2:	e017      	b.n	1a224 <os_mbuf_dup+0x40>
    startoff = 0;
   1a1f4:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1a1f6:	4623      	mov	r3, r4
   1a1f8:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1a1fc:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1a1fe:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
   1a200:	b299      	uxth	r1, r3
   1a202:	4640      	mov	r0, r8
   1a204:	f7ff ff40 	bl	1a088 <os_mbuf_get>
   1a208:	4605      	mov	r5, r0
   1a20a:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
   1a20c:	b188      	cbz	r0, 1a232 <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
   1a20e:	7923      	ldrb	r3, [r4, #4]
   1a210:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
   1a212:	88e3      	ldrh	r3, [r4, #6]
   1a214:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
   1a216:	88e2      	ldrh	r2, [r4, #6]
   1a218:	6821      	ldr	r1, [r4, #0]
   1a21a:	6828      	ldr	r0, [r5, #0]
   1a21c:	f000 ff28 	bl	1b070 <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1a220:	68e4      	ldr	r4, [r4, #12]
   1a222:	462f      	mov	r7, r5
   1a224:	b14c      	cbz	r4, 1a23a <os_mbuf_dup+0x56>
        if (head) {
   1a226:	b15e      	cbz	r6, 1a240 <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   1a228:	7963      	ldrb	r3, [r4, #5]
   1a22a:	2b07      	cmp	r3, #7
   1a22c:	d9e2      	bls.n	1a1f4 <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
   1a22e:	b299      	uxth	r1, r3
   1a230:	e7e1      	b.n	1a1f6 <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
   1a232:	4630      	mov	r0, r6
   1a234:	f7ff ff66 	bl	1a104 <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
   1a238:	462e      	mov	r6, r5
}
   1a23a:	4630      	mov	r0, r6
   1a23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
   1a240:	7963      	ldrb	r3, [r4, #5]
   1a242:	2b07      	cmp	r3, #7
   1a244:	d911      	bls.n	1a26a <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
   1a246:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1a248:	4623      	mov	r3, r4
   1a24a:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1a24e:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1a250:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
   1a252:	b299      	uxth	r1, r3
   1a254:	4640      	mov	r0, r8
   1a256:	f7ff ff17 	bl	1a088 <os_mbuf_get>
            if (!head) {
   1a25a:	4606      	mov	r6, r0
   1a25c:	2800      	cmp	r0, #0
   1a25e:	d0ec      	beq.n	1a23a <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
   1a260:	7963      	ldrb	r3, [r4, #5]
   1a262:	2b07      	cmp	r3, #7
   1a264:	d803      	bhi.n	1a26e <os_mbuf_dup+0x8a>
            copy = head;
   1a266:	4605      	mov	r5, r0
   1a268:	e7d1      	b.n	1a20e <os_mbuf_dup+0x2a>
    startoff = 0;
   1a26a:	2100      	movs	r1, #0
   1a26c:	e7ec      	b.n	1a248 <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
   1a26e:	88c3      	ldrh	r3, [r0, #6]
   1a270:	b973      	cbnz	r3, 1a290 <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   1a272:	f100 0510 	add.w	r5, r0, #16
   1a276:	7962      	ldrb	r2, [r4, #5]
   1a278:	f104 0110 	add.w	r1, r4, #16
   1a27c:	4628      	mov	r0, r5
   1a27e:	f000 fef7 	bl	1b070 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   1a282:	7963      	ldrb	r3, [r4, #5]
   1a284:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   1a286:	7963      	ldrb	r3, [r4, #5]
   1a288:	441d      	add	r5, r3
   1a28a:	6035      	str	r5, [r6, #0]
            copy = head;
   1a28c:	4635      	mov	r5, r6
   1a28e:	e7be      	b.n	1a20e <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
   1a290:	2300      	movs	r3, #0
   1a292:	461a      	mov	r2, r3
   1a294:	4619      	mov	r1, r3
   1a296:	4618      	mov	r0, r3
   1a298:	f7ff faf4 	bl	19884 <__assert_func>

0001a29c <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   1a29c:	2800      	cmp	r0, #0
   1a29e:	d031      	beq.n	1a304 <os_mempool_init_internal+0x68>
{
   1a2a0:	b430      	push	{r4, r5}
   1a2a2:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   1a2a4:	2a00      	cmp	r2, #0
   1a2a6:	d02f      	beq.n	1a308 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   1a2a8:	b1bb      	cbz	r3, 1a2da <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   1a2aa:	b113      	cbz	r3, 1a2b2 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   1a2ac:	f013 0f03 	tst.w	r3, #3
   1a2b0:	d12c      	bne.n	1a30c <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   1a2b2:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   1a2b4:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   1a2b6:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   1a2b8:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1a2bc:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   1a2be:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   1a2c0:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   1a2c2:	9802      	ldr	r0, [sp, #8]
   1a2c4:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   1a2c6:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   1a2c8:	b199      	cbz	r1, 1a2f2 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   1a2ca:	f012 0f03 	tst.w	r2, #3
   1a2ce:	d002      	beq.n	1a2d6 <os_mempool_init_internal+0x3a>
   1a2d0:	f022 0203 	bic.w	r2, r2, #3
   1a2d4:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   1a2d6:	2001      	movs	r0, #1
   1a2d8:	e007      	b.n	1a2ea <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   1a2da:	2900      	cmp	r1, #0
   1a2dc:	d0e5      	beq.n	1a2aa <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   1a2de:	2003      	movs	r0, #3
   1a2e0:	e00e      	b.n	1a300 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   1a2e2:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   1a2e4:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   1a2e6:	3001      	adds	r0, #1
            block_addr += true_block_size;
   1a2e8:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   1a2ea:	4281      	cmp	r1, r0
   1a2ec:	dcf9      	bgt.n	1a2e2 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   1a2ee:	2200      	movs	r2, #0
   1a2f0:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   1a2f2:	2000      	movs	r0, #0
   1a2f4:	6120      	str	r0, [r4, #16]
   1a2f6:	4b06      	ldr	r3, [pc, #24]	; (1a310 <os_mempool_init_internal+0x74>)
   1a2f8:	685a      	ldr	r2, [r3, #4]
   1a2fa:	6014      	str	r4, [r2, #0]
   1a2fc:	3410      	adds	r4, #16
   1a2fe:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   1a300:	bc30      	pop	{r4, r5}
   1a302:	4770      	bx	lr
        return OS_INVALID_PARM;
   1a304:	2003      	movs	r0, #3
}
   1a306:	4770      	bx	lr
        return OS_INVALID_PARM;
   1a308:	2003      	movs	r0, #3
   1a30a:	e7f9      	b.n	1a300 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   1a30c:	2004      	movs	r0, #4
   1a30e:	e7f7      	b.n	1a300 <os_mempool_init_internal+0x64>
   1a310:	2000a648 	.word	0x2000a648

0001a314 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   1a314:	b510      	push	{r4, lr}
   1a316:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   1a318:	2400      	movs	r4, #0
   1a31a:	9401      	str	r4, [sp, #4]
   1a31c:	9c04      	ldr	r4, [sp, #16]
   1a31e:	9400      	str	r4, [sp, #0]
   1a320:	f7ff ffbc 	bl	1a29c <os_mempool_init_internal>
}
   1a324:	b002      	add	sp, #8
   1a326:	bd10      	pop	{r4, pc}

0001a328 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
   1a328:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   1a32a:	b1a0      	cbz	r0, 1a356 <os_memblock_get+0x2e>
   1a32c:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1a32e:	f000 fd3f 	bl	1adb0 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   1a332:	88e3      	ldrh	r3, [r4, #6]
   1a334:	b153      	cbz	r3, 1a34c <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   1a336:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   1a338:	682a      	ldr	r2, [r5, #0]
   1a33a:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   1a33c:	3b01      	subs	r3, #1
   1a33e:	b29b      	uxth	r3, r3
   1a340:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   1a342:	8922      	ldrh	r2, [r4, #8]
   1a344:	4293      	cmp	r3, r2
   1a346:	d202      	bcs.n	1a34e <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   1a348:	8123      	strh	r3, [r4, #8]
   1a34a:	e000      	b.n	1a34e <os_memblock_get+0x26>
    block = NULL;
   1a34c:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   1a34e:	f000 fd35 	bl	1adbc <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   1a352:	4628      	mov	r0, r5
   1a354:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   1a356:	2500      	movs	r5, #0
    return (void *)block;
   1a358:	e7fb      	b.n	1a352 <os_memblock_get+0x2a>

0001a35a <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   1a35a:	b538      	push	{r3, r4, r5, lr}
   1a35c:	4604      	mov	r4, r0
   1a35e:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   1a360:	f000 fd26 	bl	1adb0 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   1a364:	6963      	ldr	r3, [r4, #20]
   1a366:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   1a368:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   1a36a:	88e3      	ldrh	r3, [r4, #6]
   1a36c:	3301      	adds	r3, #1
   1a36e:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   1a370:	f000 fd24 	bl	1adbc <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   1a374:	2000      	movs	r0, #0
   1a376:	bd38      	pop	{r3, r4, r5, pc}

0001a378 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   1a378:	b168      	cbz	r0, 1a396 <os_memblock_put+0x1e>
{
   1a37a:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
   1a37c:	b169      	cbz	r1, 1a39a <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   1a37e:	7a83      	ldrb	r3, [r0, #10]
   1a380:	f013 0f01 	tst.w	r3, #1
   1a384:	d004      	beq.n	1a390 <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   1a386:	69c3      	ldr	r3, [r0, #28]
   1a388:	b113      	cbz	r3, 1a390 <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   1a38a:	6a02      	ldr	r2, [r0, #32]
   1a38c:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   1a38e:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
   1a390:	f7ff ffe3 	bl	1a35a <os_memblock_put_from_cb>
   1a394:	e7fb      	b.n	1a38e <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
   1a396:	2003      	movs	r0, #3
}
   1a398:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1a39a:	2003      	movs	r0, #3
   1a39c:	e7f7      	b.n	1a38e <os_memblock_put+0x16>
	...

0001a3a0 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   1a3a0:	4b02      	ldr	r3, [pc, #8]	; (1a3ac <os_mempool_module_init+0xc>)
   1a3a2:	2200      	movs	r2, #0
   1a3a4:	601a      	str	r2, [r3, #0]
   1a3a6:	605b      	str	r3, [r3, #4]
}
   1a3a8:	4770      	bx	lr
   1a3aa:	bf00      	nop
   1a3ac:	2000a648 	.word	0x2000a648

0001a3b0 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1a3b0:	4b02      	ldr	r3, [pc, #8]	; (1a3bc <os_msys_find_biggest_pool+0xc>)
   1a3b2:	6818      	ldr	r0, [r3, #0]
   1a3b4:	b108      	cbz	r0, 1a3ba <os_msys_find_biggest_pool+0xa>
   1a3b6:	6858      	ldr	r0, [r3, #4]
   1a3b8:	3808      	subs	r0, #8
}
   1a3ba:	4770      	bx	lr
   1a3bc:	2000010c 	.word	0x2000010c

0001a3c0 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1a3c0:	4b09      	ldr	r3, [pc, #36]	; (1a3e8 <os_msys_find_pool+0x28>)
   1a3c2:	6819      	ldr	r1, [r3, #0]
   1a3c4:	460b      	mov	r3, r1
   1a3c6:	b123      	cbz	r3, 1a3d2 <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
   1a3c8:	881a      	ldrh	r2, [r3, #0]
   1a3ca:	4282      	cmp	r2, r0
   1a3cc:	d201      	bcs.n	1a3d2 <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1a3ce:	689b      	ldr	r3, [r3, #8]
   1a3d0:	e7f9      	b.n	1a3c6 <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
   1a3d2:	b10b      	cbz	r3, 1a3d8 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   1a3d4:	4618      	mov	r0, r3
   1a3d6:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1a3d8:	b119      	cbz	r1, 1a3e2 <os_msys_find_pool+0x22>
   1a3da:	4b03      	ldr	r3, [pc, #12]	; (1a3e8 <os_msys_find_pool+0x28>)
   1a3dc:	685b      	ldr	r3, [r3, #4]
   1a3de:	3b08      	subs	r3, #8
   1a3e0:	e7f8      	b.n	1a3d4 <os_msys_find_pool+0x14>
   1a3e2:	460b      	mov	r3, r1
    return (pool);
   1a3e4:	e7f6      	b.n	1a3d4 <os_msys_find_pool+0x14>
   1a3e6:	bf00      	nop
   1a3e8:	2000010c 	.word	0x2000010c

0001a3ec <os_msys_register>:
{
   1a3ec:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1a3ee:	4b11      	ldr	r3, [pc, #68]	; (1a434 <os_msys_register+0x48>)
   1a3f0:	681d      	ldr	r5, [r3, #0]
   1a3f2:	462b      	mov	r3, r5
    prev = NULL;
   1a3f4:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1a3f6:	b133      	cbz	r3, 1a406 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   1a3f8:	8801      	ldrh	r1, [r0, #0]
   1a3fa:	881a      	ldrh	r2, [r3, #0]
   1a3fc:	4291      	cmp	r1, r2
   1a3fe:	d302      	bcc.n	1a406 <os_msys_register+0x1a>
        prev = pool;
   1a400:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1a402:	689b      	ldr	r3, [r3, #8]
   1a404:	e7f7      	b.n	1a3f6 <os_msys_register+0xa>
    if (prev) {
   1a406:	b15c      	cbz	r4, 1a420 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1a408:	68a3      	ldr	r3, [r4, #8]
   1a40a:	6083      	str	r3, [r0, #8]
   1a40c:	b11b      	cbz	r3, 1a416 <os_msys_register+0x2a>
   1a40e:	60a0      	str	r0, [r4, #8]
}
   1a410:	2000      	movs	r0, #0
   1a412:	bc30      	pop	{r4, r5}
   1a414:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1a416:	f100 0308 	add.w	r3, r0, #8
   1a41a:	4a06      	ldr	r2, [pc, #24]	; (1a434 <os_msys_register+0x48>)
   1a41c:	6053      	str	r3, [r2, #4]
   1a41e:	e7f6      	b.n	1a40e <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   1a420:	6085      	str	r5, [r0, #8]
   1a422:	b115      	cbz	r5, 1a42a <os_msys_register+0x3e>
   1a424:	4b03      	ldr	r3, [pc, #12]	; (1a434 <os_msys_register+0x48>)
   1a426:	6018      	str	r0, [r3, #0]
   1a428:	e7f2      	b.n	1a410 <os_msys_register+0x24>
   1a42a:	f100 0308 	add.w	r3, r0, #8
   1a42e:	4a01      	ldr	r2, [pc, #4]	; (1a434 <os_msys_register+0x48>)
   1a430:	6053      	str	r3, [r2, #4]
   1a432:	e7f7      	b.n	1a424 <os_msys_register+0x38>
   1a434:	2000010c 	.word	0x2000010c

0001a438 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   1a438:	b530      	push	{r4, r5, lr}
   1a43a:	b083      	sub	sp, #12
   1a43c:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   1a43e:	9d07      	ldr	r5, [sp, #28]
   1a440:	9501      	str	r5, [sp, #4]
   1a442:	9d06      	ldr	r5, [sp, #24]
   1a444:	9500      	str	r5, [sp, #0]
   1a446:	f001 f96d 	bl	1b724 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   1a44a:	b138      	cbz	r0, 1a45c <os_msys_init_once+0x24>
   1a44c:	2000      	movs	r0, #0
   1a44e:	9000      	str	r0, [sp, #0]
   1a450:	4b09      	ldr	r3, [pc, #36]	; (1a478 <os_msys_init_once+0x40>)
   1a452:	681d      	ldr	r5, [r3, #0]
   1a454:	4603      	mov	r3, r0
   1a456:	4602      	mov	r2, r0
   1a458:	4601      	mov	r1, r0
   1a45a:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
   1a45c:	4620      	mov	r0, r4
   1a45e:	f7ff ffc5 	bl	1a3ec <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1a462:	b138      	cbz	r0, 1a474 <os_msys_init_once+0x3c>
   1a464:	2000      	movs	r0, #0
   1a466:	9000      	str	r0, [sp, #0]
   1a468:	4b03      	ldr	r3, [pc, #12]	; (1a478 <os_msys_init_once+0x40>)
   1a46a:	681c      	ldr	r4, [r3, #0]
   1a46c:	4603      	mov	r3, r0
   1a46e:	4602      	mov	r2, r0
   1a470:	4601      	mov	r1, r0
   1a472:	47a0      	blx	r4
}
   1a474:	b003      	add	sp, #12
   1a476:	bd30      	pop	{r4, r5, pc}
   1a478:	20000104 	.word	0x20000104

0001a47c <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   1a47c:	4b02      	ldr	r3, [pc, #8]	; (1a488 <os_msys_reset+0xc>)
   1a47e:	2200      	movs	r2, #0
   1a480:	601a      	str	r2, [r3, #0]
   1a482:	605b      	str	r3, [r3, #4]
}
   1a484:	4770      	bx	lr
   1a486:	bf00      	nop
   1a488:	2000010c 	.word	0x2000010c

0001a48c <os_msys_get_pkthdr>:
{
   1a48c:	b510      	push	{r4, lr}
   1a48e:	460c      	mov	r4, r1
    if (dsize == 0) {
   1a490:	b930      	cbnz	r0, 1a4a0 <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   1a492:	f7ff ff8d 	bl	1a3b0 <os_msys_find_biggest_pool>
    if (!pool) {
   1a496:	b158      	cbz	r0, 1a4b0 <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   1a498:	b2e1      	uxtb	r1, r4
   1a49a:	f7ff fe0e 	bl	1a0ba <os_mbuf_get_pkthdr>
}
   1a49e:	bd10      	pop	{r4, pc}
   1a4a0:	f101 0308 	add.w	r3, r1, #8
   1a4a4:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   1a4a6:	4403      	add	r3, r0
   1a4a8:	b298      	uxth	r0, r3
   1a4aa:	f7ff ff89 	bl	1a3c0 <os_msys_find_pool>
   1a4ae:	e7f2      	b.n	1a496 <os_msys_get_pkthdr+0xa>
    return (NULL);
   1a4b0:	2000      	movs	r0, #0
   1a4b2:	e7f4      	b.n	1a49e <os_msys_get_pkthdr+0x12>

0001a4b4 <os_msys_init>:

void
os_msys_init(void)
{
   1a4b4:	b500      	push	{lr}
   1a4b6:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   1a4b8:	f7ff ffe0 	bl	1a47c <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   1a4bc:	4b06      	ldr	r3, [pc, #24]	; (1a4d8 <os_msys_init+0x24>)
   1a4be:	9301      	str	r3, [sp, #4]
   1a4c0:	f44f 7392 	mov.w	r3, #292	; 0x124
   1a4c4:	9300      	str	r3, [sp, #0]
   1a4c6:	2340      	movs	r3, #64	; 0x40
   1a4c8:	4a04      	ldr	r2, [pc, #16]	; (1a4dc <os_msys_init+0x28>)
   1a4ca:	4905      	ldr	r1, [pc, #20]	; (1a4e0 <os_msys_init+0x2c>)
   1a4cc:	4805      	ldr	r0, [pc, #20]	; (1a4e4 <os_msys_init+0x30>)
   1a4ce:	f7ff ffb3 	bl	1a438 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   1a4d2:	b003      	add	sp, #12
   1a4d4:	f85d fb04 	ldr.w	pc, [sp], #4
   1a4d8:	00021034 	.word	0x00021034
   1a4dc:	2000a138 	.word	0x2000a138
   1a4e0:	2000a144 	.word	0x2000a144
   1a4e4:	20005838 	.word	0x20005838

0001a4e8 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   1a4e8:	4603      	mov	r3, r0
   1a4ea:	b128      	cbz	r0, 1a4f8 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   1a4ec:	2000      	movs	r0, #0
   1a4ee:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   1a4f0:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   1a4f2:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   1a4f4:	6018      	str	r0, [r3, #0]
   1a4f6:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1a4f8:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   1a4fa:	4770      	bx	lr

0001a4fc <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   1a4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   1a4fe:	4b2c      	ldr	r3, [pc, #176]	; (1a5b0 <os_mutex_release+0xb4>)
   1a500:	681b      	ldr	r3, [r3, #0]
   1a502:	2b00      	cmp	r3, #0
   1a504:	d04d      	beq.n	1a5a2 <os_mutex_release+0xa6>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1a506:	2800      	cmp	r0, #0
   1a508:	d04d      	beq.n	1a5a6 <os_mutex_release+0xaa>
   1a50a:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   1a50c:	f000 f97a 	bl	1a804 <os_sched_get_current_task>
   1a510:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   1a512:	88e3      	ldrh	r3, [r4, #6]
   1a514:	2b00      	cmp	r3, #0
   1a516:	d048      	beq.n	1a5aa <os_mutex_release+0xae>
   1a518:	68a2      	ldr	r2, [r4, #8]
   1a51a:	4282      	cmp	r2, r0
   1a51c:	d001      	beq.n	1a522 <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
   1a51e:	2005      	movs	r0, #5
   1a520:	e040      	b.n	1a5a4 <os_mutex_release+0xa8>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   1a522:	2b01      	cmp	r3, #1
   1a524:	d003      	beq.n	1a52e <os_mutex_release+0x32>
        --mu->mu_level;
   1a526:	3b01      	subs	r3, #1
   1a528:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1a52a:	2000      	movs	r0, #0
        goto done;
   1a52c:	e03a      	b.n	1a5a4 <os_mutex_release+0xa8>
    }

    OS_ENTER_CRITICAL(sr);
   1a52e:	f000 fc3f 	bl	1adb0 <os_arch_save_sr>
   1a532:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   1a534:	88e3      	ldrh	r3, [r4, #6]
   1a536:	3b01      	subs	r3, #1
   1a538:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   1a53a:	7aea      	ldrb	r2, [r5, #11]
   1a53c:	7963      	ldrb	r3, [r4, #5]
   1a53e:	429a      	cmp	r2, r3
   1a540:	d11e      	bne.n	1a580 <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   1a542:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   1a544:	b146      	cbz	r6, 1a558 <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   1a546:	69f3      	ldr	r3, [r6, #28]
   1a548:	b1fb      	cbz	r3, 1a58a <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
   1a54a:	4630      	mov	r0, r6
   1a54c:	f000 f9ae 	bl	1a8ac <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   1a550:	2301      	movs	r3, #1
   1a552:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   1a554:	7af3      	ldrb	r3, [r6, #11]
   1a556:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   1a558:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   1a55a:	b116      	cbz	r6, 1a562 <os_mutex_release+0x66>
        rdy->t_lockcnt++;
   1a55c:	7bb3      	ldrb	r3, [r6, #14]
   1a55e:	3301      	adds	r3, #1
   1a560:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   1a562:	7bab      	ldrb	r3, [r5, #14]
   1a564:	3b01      	subs	r3, #1
   1a566:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   1a568:	f000 fa1a 	bl	1a9a0 <os_sched_next_task>
   1a56c:	4604      	mov	r4, r0
    if (rdy != current) {
   1a56e:	4285      	cmp	r5, r0
   1a570:	d010      	beq.n	1a594 <os_mutex_release+0x98>
        resched = 1;
   1a572:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   1a574:	4638      	mov	r0, r7
   1a576:	f000 fc21 	bl	1adbc <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1a57a:	b96d      	cbnz	r5, 1a598 <os_mutex_release+0x9c>
        os_sched(rdy);
    }

    ret = OS_OK;
   1a57c:	2000      	movs	r0, #0
   1a57e:	e011      	b.n	1a5a4 <os_mutex_release+0xa8>
        current->t_prio = mu->mu_prio;
   1a580:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   1a582:	4628      	mov	r0, r5
   1a584:	f000 fa24 	bl	1a9d0 <os_sched_resort>
   1a588:	e7db      	b.n	1a542 <os_mutex_release+0x46>
        assert(rdy->t_obj);
   1a58a:	461a      	mov	r2, r3
   1a58c:	4619      	mov	r1, r3
   1a58e:	4618      	mov	r0, r3
   1a590:	f7ff f978 	bl	19884 <__assert_func>
    resched = 0;
   1a594:	2500      	movs	r5, #0
   1a596:	e7ed      	b.n	1a574 <os_mutex_release+0x78>
        os_sched(rdy);
   1a598:	4620      	mov	r0, r4
   1a59a:	f000 fa07 	bl	1a9ac <os_sched>
    ret = OS_OK;
   1a59e:	2000      	movs	r0, #0
   1a5a0:	e000      	b.n	1a5a4 <os_mutex_release+0xa8>
        ret = OS_NOT_STARTED;
   1a5a2:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   1a5a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   1a5a6:	2003      	movs	r0, #3
   1a5a8:	e7fc      	b.n	1a5a4 <os_mutex_release+0xa8>
        ret = OS_BAD_MUTEX;
   1a5aa:	2005      	movs	r0, #5
   1a5ac:	e7fa      	b.n	1a5a4 <os_mutex_release+0xa8>
   1a5ae:	bf00      	nop
   1a5b0:	2000a638 	.word	0x2000a638

0001a5b4 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   1a5b4:	4b36      	ldr	r3, [pc, #216]	; (1a690 <os_mutex_pend+0xdc>)
   1a5b6:	681b      	ldr	r3, [r3, #0]
   1a5b8:	2b00      	cmp	r3, #0
   1a5ba:	d065      	beq.n	1a688 <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1a5bc:	2800      	cmp	r0, #0
   1a5be:	d065      	beq.n	1a68c <os_mutex_pend+0xd8>
{
   1a5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a5c4:	460f      	mov	r7, r1
   1a5c6:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   1a5c8:	f000 fbf2 	bl	1adb0 <os_arch_save_sr>
   1a5cc:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   1a5ce:	f000 f919 	bl	1a804 <os_sched_get_current_task>
   1a5d2:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
   1a5d4:	88e3      	ldrh	r3, [r4, #6]
   1a5d6:	b19b      	cbz	r3, 1a600 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   1a5d8:	68a2      	ldr	r2, [r4, #8]
   1a5da:	4282      	cmp	r2, r0
   1a5dc:	d01e      	beq.n	1a61c <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   1a5de:	b327      	cbz	r7, 1a62a <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   1a5e0:	7ad1      	ldrb	r1, [r2, #11]
   1a5e2:	7ac3      	ldrb	r3, [r0, #11]
   1a5e4:	4299      	cmp	r1, r3
   1a5e6:	d825      	bhi.n	1a634 <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   1a5e8:	6821      	ldr	r1, [r4, #0]
   1a5ea:	b369      	cbz	r1, 1a648 <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1a5ec:	460b      	mov	r3, r1
    last = NULL;
   1a5ee:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1a5f0:	b32b      	cbz	r3, 1a63e <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
   1a5f2:	7ae8      	ldrb	r0, [r5, #11]
   1a5f4:	7ada      	ldrb	r2, [r3, #11]
   1a5f6:	4290      	cmp	r0, r2
   1a5f8:	d321      	bcc.n	1a63e <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
   1a5fa:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1a5fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1a5fe:	e7f7      	b.n	1a5f0 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   1a600:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
   1a602:	7ac3      	ldrb	r3, [r0, #11]
   1a604:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
   1a606:	7b83      	ldrb	r3, [r0, #14]
   1a608:	3301      	adds	r3, #1
   1a60a:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   1a60c:	2301      	movs	r3, #1
   1a60e:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1a610:	4640      	mov	r0, r8
   1a612:	f000 fbd3 	bl	1adbc <os_arch_restore_sr>
        ret = OS_OK;
   1a616:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   1a618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
   1a61c:	3301      	adds	r3, #1
   1a61e:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1a620:	4640      	mov	r0, r8
   1a622:	f000 fbcb 	bl	1adbc <os_arch_restore_sr>
        ret = OS_OK;
   1a626:	2000      	movs	r0, #0
        goto done;
   1a628:	e7f6      	b.n	1a618 <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
   1a62a:	4640      	mov	r0, r8
   1a62c:	f000 fbc6 	bl	1adbc <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   1a630:	2006      	movs	r0, #6
        goto done;
   1a632:	e7f1      	b.n	1a618 <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
   1a634:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
   1a636:	68a0      	ldr	r0, [r4, #8]
   1a638:	f000 f9ca 	bl	1a9d0 <os_sched_resort>
   1a63c:	e7d4      	b.n	1a5e8 <os_mutex_pend+0x34>
    if (last) {
   1a63e:	b11e      	cbz	r6, 1a648 <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   1a640:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   1a642:	64eb      	str	r3, [r5, #76]	; 0x4c
   1a644:	64f5      	str	r5, [r6, #76]	; 0x4c
   1a646:	e001      	b.n	1a64c <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   1a648:	64e9      	str	r1, [r5, #76]	; 0x4c
   1a64a:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
   1a64c:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   1a64e:	7b6b      	ldrb	r3, [r5, #13]
   1a650:	f043 0304 	orr.w	r3, r3, #4
   1a654:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
   1a656:	4639      	mov	r1, r7
   1a658:	4628      	mov	r0, r5
   1a65a:	f000 f8df 	bl	1a81c <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   1a65e:	4640      	mov	r0, r8
   1a660:	f000 fbac 	bl	1adbc <os_arch_restore_sr>
    os_sched(NULL);
   1a664:	2000      	movs	r0, #0
   1a666:	f000 f9a1 	bl	1a9ac <os_sched>
    OS_ENTER_CRITICAL(sr);
   1a66a:	f000 fba1 	bl	1adb0 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   1a66e:	7b6b      	ldrb	r3, [r5, #13]
   1a670:	f023 0304 	bic.w	r3, r3, #4
   1a674:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
   1a676:	f000 fba1 	bl	1adbc <os_arch_restore_sr>
    if (mu->mu_owner == current) {
   1a67a:	68a3      	ldr	r3, [r4, #8]
   1a67c:	42ab      	cmp	r3, r5
   1a67e:	d001      	beq.n	1a684 <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
   1a680:	2006      	movs	r0, #6
   1a682:	e7c9      	b.n	1a618 <os_mutex_pend+0x64>
        ret = OS_OK;
   1a684:	2000      	movs	r0, #0
   1a686:	e7c7      	b.n	1a618 <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
   1a688:	2009      	movs	r0, #9
   1a68a:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1a68c:	2003      	movs	r0, #3
}
   1a68e:	4770      	bx	lr
   1a690:	2000a638 	.word	0x2000a638

0001a694 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   1a694:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1a696:	4b05      	ldr	r3, [pc, #20]	; (1a6ac <os_sanity_check_list_lock+0x18>)
   1a698:	6818      	ldr	r0, [r3, #0]
   1a69a:	b900      	cbnz	r0, 1a69e <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1a69c:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   1a69e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a6a2:	4803      	ldr	r0, [pc, #12]	; (1a6b0 <os_sanity_check_list_lock+0x1c>)
   1a6a4:	f7ff ff86 	bl	1a5b4 <os_mutex_pend>
err:
   1a6a8:	e7f8      	b.n	1a69c <os_sanity_check_list_lock+0x8>
   1a6aa:	bf00      	nop
   1a6ac:	2000a638 	.word	0x2000a638
   1a6b0:	2000a650 	.word	0x2000a650

0001a6b4 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   1a6b4:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1a6b6:	4b04      	ldr	r3, [pc, #16]	; (1a6c8 <os_sanity_check_list_unlock+0x14>)
   1a6b8:	6818      	ldr	r0, [r3, #0]
   1a6ba:	b900      	cbnz	r0, 1a6be <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1a6bc:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   1a6be:	4803      	ldr	r0, [pc, #12]	; (1a6cc <os_sanity_check_list_unlock+0x18>)
   1a6c0:	f7ff ff1c 	bl	1a4fc <os_mutex_release>
err:
   1a6c4:	e7fa      	b.n	1a6bc <os_sanity_check_list_unlock+0x8>
   1a6c6:	bf00      	nop
   1a6c8:	2000a638 	.word	0x2000a638
   1a6cc:	2000a650 	.word	0x2000a650

0001a6d0 <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
   1a6d0:	2300      	movs	r3, #0
   1a6d2:	6003      	str	r3, [r0, #0]
   1a6d4:	6043      	str	r3, [r0, #4]
   1a6d6:	6083      	str	r3, [r0, #8]
   1a6d8:	60c3      	str	r3, [r0, #12]
   1a6da:	6103      	str	r3, [r0, #16]
}
   1a6dc:	4618      	mov	r0, r3
   1a6de:	4770      	bx	lr

0001a6e0 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   1a6e0:	b510      	push	{r4, lr}
   1a6e2:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   1a6e4:	f7ff ffd6 	bl	1a694 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   1a6e8:	4603      	mov	r3, r0
   1a6ea:	b108      	cbz	r0, 1a6f0 <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
   1a6ec:	4618      	mov	r0, r3
   1a6ee:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   1a6f0:	4b03      	ldr	r3, [pc, #12]	; (1a700 <os_sanity_check_register+0x20>)
   1a6f2:	681a      	ldr	r2, [r3, #0]
   1a6f4:	6122      	str	r2, [r4, #16]
   1a6f6:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   1a6f8:	f7ff ffdc 	bl	1a6b4 <os_sanity_check_list_unlock>
   1a6fc:	4603      	mov	r3, r0
err:
   1a6fe:	e7f5      	b.n	1a6ec <os_sanity_check_register+0xc>
   1a700:	2000a160 	.word	0x2000a160

0001a704 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   1a704:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   1a706:	f7ff ffc5 	bl	1a694 <os_sanity_check_list_lock>
    if (rc != 0) {
   1a70a:	b910      	cbnz	r0, 1a712 <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1a70c:	4b17      	ldr	r3, [pc, #92]	; (1a76c <os_sanity_run+0x68>)
   1a70e:	681c      	ldr	r4, [r3, #0]
   1a710:	e00e      	b.n	1a730 <os_sanity_run+0x2c>
        assert(0);
   1a712:	2300      	movs	r3, #0
   1a714:	461a      	mov	r2, r3
   1a716:	4619      	mov	r1, r3
   1a718:	4618      	mov	r0, r3
   1a71a:	f7ff f8b3 	bl	19884 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   1a71e:	f000 facf 	bl	1acc0 <os_time_get>
   1a722:	6823      	ldr	r3, [r4, #0]
   1a724:	6862      	ldr	r2, [r4, #4]
   1a726:	4413      	add	r3, r2
   1a728:	1ac3      	subs	r3, r0, r3
   1a72a:	2b00      	cmp	r3, #0
   1a72c:	dc0d      	bgt.n	1a74a <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1a72e:	6924      	ldr	r4, [r4, #16]
   1a730:	b18c      	cbz	r4, 1a756 <os_sanity_run+0x52>
        if (sc->sc_func) {
   1a732:	68a3      	ldr	r3, [r4, #8]
   1a734:	2b00      	cmp	r3, #0
   1a736:	d0f2      	beq.n	1a71e <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
   1a738:	68e1      	ldr	r1, [r4, #12]
   1a73a:	4620      	mov	r0, r4
   1a73c:	4798      	blx	r3
            if (rc == OS_OK) {
   1a73e:	2800      	cmp	r0, #0
   1a740:	d1ed      	bne.n	1a71e <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
   1a742:	f000 fabd 	bl	1acc0 <os_time_get>
   1a746:	6020      	str	r0, [r4, #0]
                continue;
   1a748:	e7f1      	b.n	1a72e <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   1a74a:	2300      	movs	r3, #0
   1a74c:	461a      	mov	r2, r3
   1a74e:	4619      	mov	r1, r3
   1a750:	4618      	mov	r0, r3
   1a752:	f7ff f897 	bl	19884 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   1a756:	f7ff ffad 	bl	1a6b4 <os_sanity_check_list_unlock>
    if (rc != 0) {
   1a75a:	b900      	cbnz	r0, 1a75e <os_sanity_run+0x5a>
        assert(0);
    }
}
   1a75c:	bd10      	pop	{r4, pc}
        assert(0);
   1a75e:	2300      	movs	r3, #0
   1a760:	461a      	mov	r2, r3
   1a762:	4619      	mov	r1, r3
   1a764:	4618      	mov	r0, r3
   1a766:	f7ff f88d 	bl	19884 <__assert_func>
   1a76a:	bf00      	nop
   1a76c:	2000a160 	.word	0x2000a160

0001a770 <os_sanity_init>:

int
os_sanity_init(void)
{
   1a770:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   1a772:	4802      	ldr	r0, [pc, #8]	; (1a77c <os_sanity_init+0xc>)
   1a774:	f7ff feb8 	bl	1a4e8 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   1a778:	bd08      	pop	{r3, pc}
   1a77a:	bf00      	nop
   1a77c:	2000a650 	.word	0x2000a650

0001a780 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   1a780:	7b03      	ldrb	r3, [r0, #12]
   1a782:	2b01      	cmp	r3, #1
   1a784:	d001      	beq.n	1a78a <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   1a786:	2002      	movs	r0, #2
}
   1a788:	4770      	bx	lr
{
   1a78a:	b510      	push	{r4, lr}
   1a78c:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1a78e:	f000 fb0f 	bl	1adb0 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1a792:	4b0f      	ldr	r3, [pc, #60]	; (1a7d0 <os_sched_insert+0x50>)
   1a794:	681b      	ldr	r3, [r3, #0]
   1a796:	b12b      	cbz	r3, 1a7a4 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   1a798:	7ae1      	ldrb	r1, [r4, #11]
   1a79a:	7ada      	ldrb	r2, [r3, #11]
   1a79c:	4291      	cmp	r1, r2
   1a79e:	d301      	bcc.n	1a7a4 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1a7a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a7a2:	e7f8      	b.n	1a796 <os_sched_insert+0x16>
    if (entry) {
   1a7a4:	b153      	cbz	r3, 1a7bc <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   1a7a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a7a8:	64a2      	str	r2, [r4, #72]	; 0x48
   1a7aa:	6463      	str	r3, [r4, #68]	; 0x44
   1a7ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a7ae:	6014      	str	r4, [r2, #0]
   1a7b0:	3444      	adds	r4, #68	; 0x44
   1a7b2:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   1a7b4:	f000 fb02 	bl	1adbc <os_arch_restore_sr>
    return (0);
   1a7b8:	2000      	movs	r0, #0
}
   1a7ba:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   1a7bc:	2300      	movs	r3, #0
   1a7be:	6463      	str	r3, [r4, #68]	; 0x44
   1a7c0:	4b03      	ldr	r3, [pc, #12]	; (1a7d0 <os_sched_insert+0x50>)
   1a7c2:	685a      	ldr	r2, [r3, #4]
   1a7c4:	64a2      	str	r2, [r4, #72]	; 0x48
   1a7c6:	6014      	str	r4, [r2, #0]
   1a7c8:	3444      	adds	r4, #68	; 0x44
   1a7ca:	605c      	str	r4, [r3, #4]
   1a7cc:	e7f2      	b.n	1a7b4 <os_sched_insert+0x34>
   1a7ce:	bf00      	nop
   1a7d0:	20000114 	.word	0x20000114

0001a7d4 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   1a7d4:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   1a7d6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1a7d8:	3301      	adds	r3, #1
   1a7da:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
   1a7dc:	4b06      	ldr	r3, [pc, #24]	; (1a7f8 <os_sched_ctx_sw_hook+0x24>)
   1a7de:	681c      	ldr	r4, [r3, #0]
   1a7e0:	4b06      	ldr	r3, [pc, #24]	; (1a7fc <os_sched_ctx_sw_hook+0x28>)
   1a7e2:	6818      	ldr	r0, [r3, #0]
   1a7e4:	4906      	ldr	r1, [pc, #24]	; (1a800 <os_sched_ctx_sw_hook+0x2c>)
   1a7e6:	680b      	ldr	r3, [r1, #0]
   1a7e8:	1ac2      	subs	r2, r0, r3
   1a7ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1a7ec:	4413      	add	r3, r2
   1a7ee:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
   1a7f0:	6008      	str	r0, [r1, #0]
}
   1a7f2:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a7f6:	4770      	bx	lr
   1a7f8:	2000a660 	.word	0x2000a660
   1a7fc:	2000a670 	.word	0x2000a670
   1a800:	2000a65c 	.word	0x2000a65c

0001a804 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   1a804:	4b01      	ldr	r3, [pc, #4]	; (1a80c <os_sched_get_current_task+0x8>)
   1a806:	6818      	ldr	r0, [r3, #0]
   1a808:	4770      	bx	lr
   1a80a:	bf00      	nop
   1a80c:	2000a660 	.word	0x2000a660

0001a810 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   1a810:	4b01      	ldr	r3, [pc, #4]	; (1a818 <os_sched_set_current_task+0x8>)
   1a812:	6018      	str	r0, [r3, #0]
}
   1a814:	4770      	bx	lr
   1a816:	bf00      	nop
   1a818:	2000a660 	.word	0x2000a660

0001a81c <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   1a81c:	b538      	push	{r3, r4, r5, lr}
   1a81e:	4604      	mov	r4, r0
   1a820:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1a822:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1a824:	b1d3      	cbz	r3, 1a85c <os_sched_sleep+0x40>
   1a826:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a828:	649a      	str	r2, [r3, #72]	; 0x48
   1a82a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1a82c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1a82e:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   1a830:	2302      	movs	r3, #2
   1a832:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   1a834:	f000 fa44 	bl	1acc0 <os_time_get>
   1a838:	4428      	add	r0, r5
   1a83a:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   1a83c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1a840:	d010      	beq.n	1a864 <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1a842:	4b18      	ldr	r3, [pc, #96]	; (1a8a4 <os_sched_sleep+0x88>)
   1a844:	681b      	ldr	r3, [r3, #0]
   1a846:	b1d3      	cbz	r3, 1a87e <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1a848:	7b5a      	ldrb	r2, [r3, #13]
   1a84a:	f012 0f01 	tst.w	r2, #1
   1a84e:	d116      	bne.n	1a87e <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   1a850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1a852:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1a854:	2a00      	cmp	r2, #0
   1a856:	dc12      	bgt.n	1a87e <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1a858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a85a:	e7f4      	b.n	1a846 <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1a85c:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a85e:	4b12      	ldr	r3, [pc, #72]	; (1a8a8 <os_sched_sleep+0x8c>)
   1a860:	605a      	str	r2, [r3, #4]
   1a862:	e7e2      	b.n	1a82a <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   1a864:	7b63      	ldrb	r3, [r4, #13]
   1a866:	f043 0301 	orr.w	r3, r3, #1
   1a86a:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1a86c:	2300      	movs	r3, #0
   1a86e:	6463      	str	r3, [r4, #68]	; 0x44
   1a870:	4b0c      	ldr	r3, [pc, #48]	; (1a8a4 <os_sched_sleep+0x88>)
   1a872:	685a      	ldr	r2, [r3, #4]
   1a874:	64a2      	str	r2, [r4, #72]	; 0x48
   1a876:	6014      	str	r4, [r2, #0]
   1a878:	3444      	adds	r4, #68	; 0x44
   1a87a:	605c      	str	r4, [r3, #4]
   1a87c:	e007      	b.n	1a88e <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
   1a87e:	b143      	cbz	r3, 1a892 <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   1a880:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a882:	64a2      	str	r2, [r4, #72]	; 0x48
   1a884:	6463      	str	r3, [r4, #68]	; 0x44
   1a886:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a888:	6014      	str	r4, [r2, #0]
   1a88a:	3444      	adds	r4, #68	; 0x44
   1a88c:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   1a88e:	2000      	movs	r0, #0
   1a890:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1a892:	2300      	movs	r3, #0
   1a894:	6463      	str	r3, [r4, #68]	; 0x44
   1a896:	4b03      	ldr	r3, [pc, #12]	; (1a8a4 <os_sched_sleep+0x88>)
   1a898:	685a      	ldr	r2, [r3, #4]
   1a89a:	64a2      	str	r2, [r4, #72]	; 0x48
   1a89c:	6014      	str	r4, [r2, #0]
   1a89e:	3444      	adds	r4, #68	; 0x44
   1a8a0:	605c      	str	r4, [r3, #4]
   1a8a2:	e7f4      	b.n	1a88e <os_sched_sleep+0x72>
   1a8a4:	2000011c 	.word	0x2000011c
   1a8a8:	20000114 	.word	0x20000114

0001a8ac <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   1a8ac:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   1a8ae:	7b03      	ldrb	r3, [r0, #12]
   1a8b0:	2b02      	cmp	r3, #2
   1a8b2:	d108      	bne.n	1a8c6 <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   1a8b4:	69c3      	ldr	r3, [r0, #28]
   1a8b6:	b1db      	cbz	r3, 1a8f0 <os_sched_wakeup+0x44>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1a8b8:	681a      	ldr	r2, [r3, #0]
   1a8ba:	b152      	cbz	r2, 1a8d2 <os_sched_wakeup+0x26>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1a8bc:	4282      	cmp	r2, r0
   1a8be:	d10f      	bne.n	1a8e0 <os_sched_wakeup+0x34>
   1a8c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1a8c2:	601a      	str	r2, [r3, #0]
   1a8c4:	e011      	b.n	1a8ea <os_sched_wakeup+0x3e>
    assert(t->t_state == OS_TASK_SLEEP);
   1a8c6:	2300      	movs	r3, #0
   1a8c8:	461a      	mov	r2, r3
   1a8ca:	4619      	mov	r1, r3
   1a8cc:	4618      	mov	r0, r3
   1a8ce:	f7fe ffd9 	bl	19884 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1a8d2:	2300      	movs	r3, #0
   1a8d4:	461a      	mov	r2, r3
   1a8d6:	4619      	mov	r1, r3
   1a8d8:	4618      	mov	r0, r3
   1a8da:	f7fe ffd3 	bl	19884 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1a8de:	461a      	mov	r2, r3
   1a8e0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1a8e2:	4283      	cmp	r3, r0
   1a8e4:	d1fb      	bne.n	1a8de <os_sched_wakeup+0x32>
   1a8e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1a8e8:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   1a8ea:	2300      	movs	r3, #0
   1a8ec:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   1a8ee:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   1a8f0:	2301      	movs	r3, #1
   1a8f2:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   1a8f4:	2300      	movs	r3, #0
   1a8f6:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   1a8f8:	7b43      	ldrb	r3, [r0, #13]
   1a8fa:	f023 0301 	bic.w	r3, r3, #1
   1a8fe:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1a900:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1a902:	b143      	cbz	r3, 1a916 <os_sched_wakeup+0x6a>
   1a904:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a906:	649a      	str	r2, [r3, #72]	; 0x48
   1a908:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1a90a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1a90c:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   1a90e:	f7ff ff37 	bl	1a780 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   1a912:	2000      	movs	r0, #0
   1a914:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1a916:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a918:	4b01      	ldr	r3, [pc, #4]	; (1a920 <os_sched_wakeup+0x74>)
   1a91a:	605a      	str	r2, [r3, #4]
   1a91c:	e7f4      	b.n	1a908 <os_sched_wakeup+0x5c>
   1a91e:	bf00      	nop
   1a920:	2000011c 	.word	0x2000011c

0001a924 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   1a924:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   1a926:	f000 f9cb 	bl	1acc0 <os_time_get>
   1a92a:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   1a92c:	f000 fa40 	bl	1adb0 <os_arch_save_sr>
   1a930:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   1a932:	4b0a      	ldr	r3, [pc, #40]	; (1a95c <os_sched_os_timer_exp+0x38>)
   1a934:	6818      	ldr	r0, [r3, #0]
    while (t) {
   1a936:	b160      	cbz	r0, 1a952 <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   1a938:	7b43      	ldrb	r3, [r0, #13]
   1a93a:	f013 0f01 	tst.w	r3, #1
   1a93e:	d108      	bne.n	1a952 <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
   1a940:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   1a942:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1a944:	1aeb      	subs	r3, r5, r3
   1a946:	2b00      	cmp	r3, #0
   1a948:	db03      	blt.n	1a952 <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
   1a94a:	f7ff ffaf 	bl	1a8ac <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   1a94e:	4620      	mov	r0, r4
   1a950:	e7f1      	b.n	1a936 <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
   1a952:	4630      	mov	r0, r6
   1a954:	f000 fa32 	bl	1adbc <os_arch_restore_sr>
}
   1a958:	bd70      	pop	{r4, r5, r6, pc}
   1a95a:	bf00      	nop
   1a95c:	2000011c 	.word	0x2000011c

0001a960 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   1a960:	b510      	push	{r4, lr}
   1a962:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   1a964:	f000 fa2d 	bl	1adc2 <os_arch_in_critical>
   1a968:	b150      	cbz	r0, 1a980 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   1a96a:	4b0c      	ldr	r3, [pc, #48]	; (1a99c <os_sched_wakeup_ticks+0x3c>)
   1a96c:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   1a96e:	b17b      	cbz	r3, 1a990 <os_sched_wakeup_ticks+0x30>
   1a970:	7b5a      	ldrb	r2, [r3, #13]
   1a972:	f012 0f01 	tst.w	r2, #1
   1a976:	d10e      	bne.n	1a996 <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   1a978:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1a97a:	1b00      	subs	r0, r0, r4
   1a97c:	d406      	bmi.n	1a98c <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   1a97e:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1a980:	2300      	movs	r3, #0
   1a982:	461a      	mov	r2, r3
   1a984:	4619      	mov	r1, r3
   1a986:	4618      	mov	r0, r3
   1a988:	f7fe ff7c 	bl	19884 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   1a98c:	2000      	movs	r0, #0
   1a98e:	e7f6      	b.n	1a97e <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   1a990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a994:	e7f3      	b.n	1a97e <os_sched_wakeup_ticks+0x1e>
   1a996:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1a99a:	e7f0      	b.n	1a97e <os_sched_wakeup_ticks+0x1e>
   1a99c:	2000011c 	.word	0x2000011c

0001a9a0 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   1a9a0:	4b01      	ldr	r3, [pc, #4]	; (1a9a8 <os_sched_next_task+0x8>)
   1a9a2:	6818      	ldr	r0, [r3, #0]
   1a9a4:	4770      	bx	lr
   1a9a6:	bf00      	nop
   1a9a8:	20000114 	.word	0x20000114

0001a9ac <os_sched>:
{
   1a9ac:	b538      	push	{r3, r4, r5, lr}
   1a9ae:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1a9b0:	f000 f9fe 	bl	1adb0 <os_arch_save_sr>
   1a9b4:	4605      	mov	r5, r0
    if (!next_t) {
   1a9b6:	b134      	cbz	r4, 1a9c6 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   1a9b8:	4620      	mov	r0, r4
   1a9ba:	f000 f9ef 	bl	1ad9c <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   1a9be:	4628      	mov	r0, r5
   1a9c0:	f000 f9fc 	bl	1adbc <os_arch_restore_sr>
}
   1a9c4:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   1a9c6:	f7ff ffeb 	bl	1a9a0 <os_sched_next_task>
   1a9ca:	4604      	mov	r4, r0
   1a9cc:	e7f4      	b.n	1a9b8 <os_sched+0xc>
	...

0001a9d0 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   1a9d0:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   1a9d2:	7b03      	ldrb	r3, [r0, #12]
   1a9d4:	2b01      	cmp	r3, #1
   1a9d6:	d000      	beq.n	1a9da <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   1a9d8:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1a9da:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1a9dc:	b13b      	cbz	r3, 1a9ee <os_sched_resort+0x1e>
   1a9de:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a9e0:	649a      	str	r2, [r3, #72]	; 0x48
   1a9e2:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1a9e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1a9e6:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   1a9e8:	f7ff feca 	bl	1a780 <os_sched_insert>
}
   1a9ec:	e7f4      	b.n	1a9d8 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1a9ee:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a9f0:	4b01      	ldr	r3, [pc, #4]	; (1a9f8 <os_sched_resort+0x28>)
   1a9f2:	605a      	str	r2, [r3, #4]
   1a9f4:	e7f5      	b.n	1a9e2 <os_sched_resort+0x12>
   1a9f6:	bf00      	nop
   1a9f8:	20000114 	.word	0x20000114

0001a9fc <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   1a9fc:	4603      	mov	r3, r0
   1a9fe:	b118      	cbz	r0, 1aa08 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   1aa00:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   1aa02:	2000      	movs	r0, #0
   1aa04:	6018      	str	r0, [r3, #0]
   1aa06:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1aa08:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   1aa0a:	4770      	bx	lr

0001aa0c <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   1aa0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   1aa0e:	4b17      	ldr	r3, [pc, #92]	; (1aa6c <os_sem_release+0x60>)
   1aa10:	681b      	ldr	r3, [r3, #0]
   1aa12:	b33b      	cbz	r3, 1aa64 <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1aa14:	b340      	cbz	r0, 1aa68 <os_sem_release+0x5c>
   1aa16:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   1aa18:	f7ff fef4 	bl	1a804 <os_sched_get_current_task>
   1aa1c:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   1aa1e:	f000 f9c7 	bl	1adb0 <os_arch_save_sr>
   1aa22:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   1aa24:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   1aa26:	b165      	cbz	r5, 1aa42 <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1aa28:	7b6b      	ldrb	r3, [r5, #13]
   1aa2a:	f023 0302 	bic.w	r3, r3, #2
   1aa2e:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   1aa30:	4628      	mov	r0, r5
   1aa32:	f7ff ff3b 	bl	1a8ac <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
   1aa36:	7afa      	ldrb	r2, [r7, #11]
   1aa38:	7aeb      	ldrb	r3, [r5, #11]
   1aa3a:	429a      	cmp	r2, r3
   1aa3c:	d80b      	bhi.n	1aa56 <os_sem_release+0x4a>
    resched = 0;
   1aa3e:	2400      	movs	r4, #0
   1aa40:	e003      	b.n	1aa4a <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   1aa42:	88e3      	ldrh	r3, [r4, #6]
   1aa44:	3301      	adds	r3, #1
   1aa46:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   1aa48:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   1aa4a:	4630      	mov	r0, r6
   1aa4c:	f000 f9b6 	bl	1adbc <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1aa50:	b91c      	cbnz	r4, 1aa5a <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   1aa52:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   1aa54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   1aa56:	2401      	movs	r4, #1
   1aa58:	e7f7      	b.n	1aa4a <os_sem_release+0x3e>
        os_sched(rdy);
   1aa5a:	4628      	mov	r0, r5
   1aa5c:	f7ff ffa6 	bl	1a9ac <os_sched>
    ret = OS_OK;
   1aa60:	2000      	movs	r0, #0
   1aa62:	e7f7      	b.n	1aa54 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   1aa64:	2009      	movs	r0, #9
   1aa66:	e7f5      	b.n	1aa54 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   1aa68:	2003      	movs	r0, #3
   1aa6a:	e7f3      	b.n	1aa54 <os_sem_release+0x48>
   1aa6c:	2000a638 	.word	0x2000a638

0001aa70 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   1aa70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   1aa72:	4b2c      	ldr	r3, [pc, #176]	; (1ab24 <os_sem_pend+0xb4>)
   1aa74:	681b      	ldr	r3, [r3, #0]
   1aa76:	2b00      	cmp	r3, #0
   1aa78:	d04f      	beq.n	1ab1a <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1aa7a:	2800      	cmp	r0, #0
   1aa7c:	d04f      	beq.n	1ab1e <os_sem_pend+0xae>
   1aa7e:	460d      	mov	r5, r1
   1aa80:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   1aa82:	f7ff febf 	bl	1a804 <os_sched_get_current_task>
   1aa86:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
   1aa88:	f000 f992 	bl	1adb0 <os_arch_save_sr>
   1aa8c:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   1aa8e:	88e3      	ldrh	r3, [r4, #6]
   1aa90:	b14b      	cbz	r3, 1aaa6 <os_sem_pend+0x36>
        sem->sem_tokens--;
   1aa92:	3b01      	subs	r3, #1
   1aa94:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1aa96:	2400      	movs	r4, #0
    sched = 0;
   1aa98:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   1aa9a:	4638      	mov	r0, r7
   1aa9c:	f000 f98e 	bl	1adbc <os_arch_restore_sr>

    if (sched) {
   1aaa0:	bb45      	cbnz	r5, 1aaf4 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   1aaa2:	4620      	mov	r0, r4
   1aaa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   1aaa6:	b315      	cbz	r5, 1aaee <os_sem_pend+0x7e>
        current->t_obj = sem;
   1aaa8:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   1aaaa:	7b73      	ldrb	r3, [r6, #13]
   1aaac:	f043 0302 	orr.w	r3, r3, #2
   1aab0:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   1aab2:	f8d4 c000 	ldr.w	ip, [r4]
   1aab6:	f1bc 0f00 	cmp.w	ip, #0
   1aaba:	d00e      	beq.n	1aada <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1aabc:	4663      	mov	r3, ip
        last = NULL;
   1aabe:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1aac0:	b133      	cbz	r3, 1aad0 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   1aac2:	7af1      	ldrb	r1, [r6, #11]
   1aac4:	7ada      	ldrb	r2, [r3, #11]
   1aac6:	4291      	cmp	r1, r2
   1aac8:	d302      	bcc.n	1aad0 <os_sem_pend+0x60>
                last = entry;
   1aaca:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1aacc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1aace:	e7f7      	b.n	1aac0 <os_sem_pend+0x50>
        if (last) {
   1aad0:	b118      	cbz	r0, 1aada <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   1aad2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1aad4:	64f3      	str	r3, [r6, #76]	; 0x4c
   1aad6:	64c6      	str	r6, [r0, #76]	; 0x4c
   1aad8:	e002      	b.n	1aae0 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   1aada:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
   1aade:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
   1aae0:	4629      	mov	r1, r5
   1aae2:	4630      	mov	r0, r6
   1aae4:	f7ff fe9a 	bl	1a81c <os_sched_sleep>
        ret = OS_OK;
   1aae8:	2400      	movs	r4, #0
        sched = 1;
   1aaea:	2501      	movs	r5, #1
   1aaec:	e7d5      	b.n	1aa9a <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   1aaee:	2406      	movs	r4, #6
    sched = 0;
   1aaf0:	2500      	movs	r5, #0
   1aaf2:	e7d2      	b.n	1aa9a <os_sem_pend+0x2a>
        os_sched(NULL);
   1aaf4:	2000      	movs	r0, #0
   1aaf6:	f7ff ff59 	bl	1a9ac <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   1aafa:	7b73      	ldrb	r3, [r6, #13]
   1aafc:	f013 0f02 	tst.w	r3, #2
   1ab00:	d101      	bne.n	1ab06 <os_sem_pend+0x96>
            ret = OS_OK;
   1ab02:	2400      	movs	r4, #0
   1ab04:	e7cd      	b.n	1aaa2 <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   1ab06:	f000 f953 	bl	1adb0 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1ab0a:	7b73      	ldrb	r3, [r6, #13]
   1ab0c:	f023 0302 	bic.w	r3, r3, #2
   1ab10:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
   1ab12:	f000 f953 	bl	1adbc <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   1ab16:	2406      	movs	r4, #6
   1ab18:	e7c3      	b.n	1aaa2 <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   1ab1a:	2409      	movs	r4, #9
   1ab1c:	e7c1      	b.n	1aaa2 <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   1ab1e:	2403      	movs	r4, #3
   1ab20:	e7bf      	b.n	1aaa2 <os_sem_pend+0x32>
   1ab22:	bf00      	nop
   1ab24:	2000a638 	.word	0x2000a638

0001ab28 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   1ab28:	2300      	movs	r3, #0
   1ab2a:	e003      	b.n	1ab34 <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
   1ab2c:	4a03      	ldr	r2, [pc, #12]	; (1ab3c <_clear_stack+0x14>)
   1ab2e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   1ab32:	3301      	adds	r3, #1
   1ab34:	428b      	cmp	r3, r1
   1ab36:	dbf9      	blt.n	1ab2c <_clear_stack+0x4>
    }
}
   1ab38:	4770      	bx	lr
   1ab3a:	bf00      	nop
   1ab3c:	deadbeef 	.word	0xdeadbeef

0001ab40 <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
   1ab40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab44:	4604      	mov	r4, r0
   1ab46:	460f      	mov	r7, r1
   1ab48:	4690      	mov	r8, r2
   1ab4a:	461d      	mov	r5, r3
   1ab4c:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
   1ab50:	2250      	movs	r2, #80	; 0x50
   1ab52:	2100      	movs	r1, #0
   1ab54:	f000 fa99 	bl	1b08a <memset>

    t->t_func = func;
   1ab58:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
   1ab5c:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   1ab5e:	f000 f927 	bl	1adb0 <os_arch_save_sr>
    rc = g_task_id;
   1ab62:	4b2b      	ldr	r3, [pc, #172]	; (1ac10 <os_task_init+0xd0>)
   1ab64:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
   1ab66:	1c6a      	adds	r2, r5, #1
   1ab68:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1ab6a:	f000 f927 	bl	1adbc <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
   1ab6e:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
   1ab70:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1ab74:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
   1ab76:	2301      	movs	r3, #1
   1ab78:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   1ab7a:	6127      	str	r7, [r4, #16]
    t->t_next_wakeup = 0;
   1ab7c:	2300      	movs	r3, #0
   1ab7e:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
   1ab80:	f104 0720 	add.w	r7, r4, #32
   1ab84:	4638      	mov	r0, r7
   1ab86:	f7ff fda3 	bl	1a6d0 <os_sanity_check_init>
    if (rc != OS_OK) {
   1ab8a:	4605      	mov	r5, r0
   1ab8c:	2800      	cmp	r0, #0
   1ab8e:	d132      	bne.n	1abf6 <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
   1ab90:	9b07      	ldr	r3, [sp, #28]
   1ab92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1ab96:	d005      	beq.n	1aba4 <os_task_init+0x64>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
   1ab98:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
   1ab9a:	4638      	mov	r0, r7
   1ab9c:	f7ff fda0 	bl	1a6e0 <os_sanity_check_register>
        if (rc != OS_OK) {
   1aba0:	4605      	mov	r5, r0
   1aba2:	bb40      	cbnz	r0, 1abf6 <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
   1aba4:	4631      	mov	r1, r6
   1aba6:	9808      	ldr	r0, [sp, #32]
   1aba8:	f7ff ffbe 	bl	1ab28 <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
   1abac:	9b08      	ldr	r3, [sp, #32]
   1abae:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   1abb2:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
   1abb4:	8126      	strh	r6, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
   1abb6:	4632      	mov	r2, r6
   1abb8:	4620      	mov	r0, r4
   1abba:	f000 f907 	bl	1adcc <os_arch_task_stack_init>
   1abbe:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1abc0:	4b14      	ldr	r3, [pc, #80]	; (1ac14 <os_task_init+0xd4>)
   1abc2:	681b      	ldr	r3, [r3, #0]
   1abc4:	b15b      	cbz	r3, 1abde <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
   1abc6:	7ae1      	ldrb	r1, [r4, #11]
   1abc8:	7ada      	ldrb	r2, [r3, #11]
   1abca:	4291      	cmp	r1, r2
   1abcc:	d001      	beq.n	1abd2 <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1abce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1abd0:	e7f8      	b.n	1abc4 <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
   1abd2:	2300      	movs	r3, #0
   1abd4:	461a      	mov	r2, r3
   1abd6:	4619      	mov	r1, r3
   1abd8:	4618      	mov	r0, r3
   1abda:	f7fe fe53 	bl	19884 <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   1abde:	6423      	str	r3, [r4, #64]	; 0x40
   1abe0:	4b0c      	ldr	r3, [pc, #48]	; (1ac14 <os_task_init+0xd4>)
   1abe2:	685a      	ldr	r2, [r3, #4]
   1abe4:	6014      	str	r4, [r2, #0]
   1abe6:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1abea:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
   1abec:	4620      	mov	r0, r4
   1abee:	f7ff fdc7 	bl	1a780 <os_sched_insert>
   1abf2:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   1abf4:	b110      	cbz	r0, 1abfc <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
   1abf6:	4628      	mov	r0, r5
   1abf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
   1abfc:	f7fe fefc 	bl	199f8 <os_started>
   1ac00:	b908      	cbnz	r0, 1ac06 <os_task_init+0xc6>
    return (0);
   1ac02:	4605      	mov	r5, r0
   1ac04:	e7f7      	b.n	1abf6 <os_task_init+0xb6>
        os_sched(NULL);
   1ac06:	2000      	movs	r0, #0
   1ac08:	f7ff fed0 	bl	1a9ac <os_sched>
   1ac0c:	e7f3      	b.n	1abf6 <os_task_init+0xb6>
   1ac0e:	bf00      	nop
   1ac10:	2000a664 	.word	0x2000a664
   1ac14:	2000a668 	.word	0x2000a668

0001ac18 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   1ac18:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   1ac1c:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   1ac1e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   1ac22:	e9d1 4500 	ldrd	r4, r5, [r1]
   1ac26:	eb14 0b03 	adds.w	fp, r4, r3
   1ac2a:	f145 0c00 	adc.w	ip, r5, #0
   1ac2e:	e9c2 bc00 	strd	fp, ip, [r2]
   1ac32:	688b      	ldr	r3, [r1, #8]
   1ac34:	f641 6184 	movw	r1, #7812	; 0x1e84
   1ac38:	fb01 3000 	mla	r0, r1, r0, r3
   1ac3c:	6090      	str	r0, [r2, #8]
   1ac3e:	4b08      	ldr	r3, [pc, #32]	; (1ac60 <os_deltatime+0x48>)
   1ac40:	4298      	cmp	r0, r3
   1ac42:	dd0a      	ble.n	1ac5a <os_deltatime+0x42>
   1ac44:	f11b 0401 	adds.w	r4, fp, #1
   1ac48:	f14c 0500 	adc.w	r5, ip, #0
   1ac4c:	e9c2 4500 	strd	r4, r5, [r2]
   1ac50:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   1ac54:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   1ac58:	6090      	str	r0, [r2, #8]
}
   1ac5a:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1ac5e:	4770      	bx	lr
   1ac60:	000f423f 	.word	0x000f423f

0001ac64 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   1ac64:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   1ac66:	1e04      	subs	r4, r0, #0
   1ac68:	db0d      	blt.n	1ac86 <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   1ac6a:	f000 f8a1 	bl	1adb0 <os_arch_save_sr>
   1ac6e:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   1ac70:	4a11      	ldr	r2, [pc, #68]	; (1acb8 <os_time_tick+0x54>)
   1ac72:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
   1ac74:	18e0      	adds	r0, r4, r3
   1ac76:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   1ac78:	ea90 0f03 	teq	r0, r3
   1ac7c:	d409      	bmi.n	1ac92 <os_time_tick+0x2e>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   1ac7e:	4628      	mov	r0, r5
   1ac80:	f000 f89c 	bl	1adbc <os_arch_restore_sr>
}
   1ac84:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   1ac86:	2300      	movs	r3, #0
   1ac88:	461a      	mov	r2, r3
   1ac8a:	4619      	mov	r1, r3
   1ac8c:	4618      	mov	r0, r3
   1ac8e:	f7fe fdf9 	bl	19884 <__assert_func>
        delta = g_os_time - basetod.ostime;
   1ac92:	4e0a      	ldr	r6, [pc, #40]	; (1acbc <os_time_tick+0x58>)
   1ac94:	4631      	mov	r1, r6
   1ac96:	f851 4b08 	ldr.w	r4, [r1], #8
   1ac9a:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   1ac9c:	460a      	mov	r2, r1
   1ac9e:	4620      	mov	r0, r4
   1aca0:	f7ff ffba 	bl	1ac18 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   1aca4:	f106 0118 	add.w	r1, r6, #24
   1aca8:	460a      	mov	r2, r1
   1acaa:	4620      	mov	r0, r4
   1acac:	f7ff ffb4 	bl	1ac18 <os_deltatime>
        basetod.ostime = g_os_time;
   1acb0:	4b01      	ldr	r3, [pc, #4]	; (1acb8 <os_time_tick+0x54>)
   1acb2:	681b      	ldr	r3, [r3, #0]
   1acb4:	6033      	str	r3, [r6, #0]
   1acb6:	e7e2      	b.n	1ac7e <os_time_tick+0x1a>
   1acb8:	2000a670 	.word	0x2000a670
   1acbc:	2000a168 	.word	0x2000a168

0001acc0 <os_time_get>:
}
   1acc0:	4b01      	ldr	r3, [pc, #4]	; (1acc8 <os_time_get+0x8>)
   1acc2:	6818      	ldr	r0, [r3, #0]
   1acc4:	4770      	bx	lr
   1acc6:	bf00      	nop
   1acc8:	2000a670 	.word	0x2000a670

0001accc <os_time_advance>:

void
os_time_advance(int ticks)
{
   1accc:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   1acce:	1e04      	subs	r4, r0, #0
   1acd0:	db09      	blt.n	1ace6 <os_time_advance+0x1a>

    if (ticks > 0) {
   1acd2:	2c00      	cmp	r4, #0
   1acd4:	dd06      	ble.n	1ace4 <os_time_advance+0x18>
        if (!os_started()) {
   1acd6:	f7fe fe8f 	bl	199f8 <os_started>
   1acda:	b950      	cbnz	r0, 1acf2 <os_time_advance+0x26>
            g_os_time += ticks;
   1acdc:	4a0a      	ldr	r2, [pc, #40]	; (1ad08 <os_time_advance+0x3c>)
   1acde:	6813      	ldr	r3, [r2, #0]
   1ace0:	441c      	add	r4, r3
   1ace2:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   1ace4:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   1ace6:	2300      	movs	r3, #0
   1ace8:	461a      	mov	r2, r3
   1acea:	4619      	mov	r1, r3
   1acec:	4618      	mov	r0, r3
   1acee:	f7fe fdc9 	bl	19884 <__assert_func>
            os_time_tick(ticks);
   1acf2:	4620      	mov	r0, r4
   1acf4:	f7ff ffb6 	bl	1ac64 <os_time_tick>
            os_callout_tick();
   1acf8:	f7fe ffa6 	bl	19c48 <os_callout_tick>
            os_sched_os_timer_exp();
   1acfc:	f7ff fe12 	bl	1a924 <os_sched_os_timer_exp>
            os_sched(NULL);
   1ad00:	2000      	movs	r0, #0
   1ad02:	f7ff fe53 	bl	1a9ac <os_sched>
}
   1ad06:	e7ed      	b.n	1ace4 <os_time_advance+0x18>
   1ad08:	2000a670 	.word	0x2000a670

0001ad0c <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   1ad0c:	b900      	cbnz	r0, 1ad10 <os_time_delay+0x4>
   1ad0e:	4770      	bx	lr
{
   1ad10:	b538      	push	{r3, r4, r5, lr}
   1ad12:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1ad14:	f000 f84c 	bl	1adb0 <os_arch_save_sr>
   1ad18:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   1ad1a:	f7ff fd73 	bl	1a804 <os_sched_get_current_task>
   1ad1e:	4621      	mov	r1, r4
   1ad20:	f7ff fd7c 	bl	1a81c <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   1ad24:	4628      	mov	r0, r5
   1ad26:	f000 f849 	bl	1adbc <os_arch_restore_sr>
        os_sched(NULL);
   1ad2a:	2000      	movs	r0, #0
   1ad2c:	f7ff fe3e 	bl	1a9ac <os_sched>
    }
}
   1ad30:	bd38      	pop	{r3, r4, r5, pc}
	...

0001ad34 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   1ad34:	b570      	push	{r4, r5, r6, lr}
   1ad36:	4605      	mov	r5, r0
   1ad38:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   1ad3a:	f000 f839 	bl	1adb0 <os_arch_save_sr>
   1ad3e:	4606      	mov	r6, r0
    if (tv != NULL) {
   1ad40:	b145      	cbz	r5, 1ad54 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   1ad42:	f7ff ffbd 	bl	1acc0 <os_time_get>
   1ad46:	4908      	ldr	r1, [pc, #32]	; (1ad68 <os_gettimeofday+0x34>)
   1ad48:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   1ad4c:	462a      	mov	r2, r5
   1ad4e:	1ac0      	subs	r0, r0, r3
   1ad50:	f7ff ff62 	bl	1ac18 <os_deltatime>
    }

    if (tz != NULL) {
   1ad54:	b114      	cbz	r4, 1ad5c <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   1ad56:	4b04      	ldr	r3, [pc, #16]	; (1ad68 <os_gettimeofday+0x34>)
   1ad58:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1ad5a:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   1ad5c:	4630      	mov	r0, r6
   1ad5e:	f000 f82d 	bl	1adbc <os_arch_restore_sr>

    return (0);
}
   1ad62:	2000      	movs	r0, #0
   1ad64:	bd70      	pop	{r4, r5, r6, pc}
   1ad66:	bf00      	nop
   1ad68:	2000a168 	.word	0x2000a168

0001ad6c <os_time_ms_to_ticks>:
  return (tv.tv_sec * 1000000 + tv.tv_usec);
}

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   1ad6c:	b538      	push	{r3, r4, r5, lr}
   1ad6e:	4604      	mov	r4, r0
   1ad70:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   1ad72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ad76:	2300      	movs	r3, #0
   1ad78:	01c0      	lsls	r0, r0, #7
   1ad7a:	0e61      	lsrs	r1, r4, #25
   1ad7c:	f002 f88a 	bl	1ce94 <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   1ad80:	2901      	cmp	r1, #1
   1ad82:	bf08      	it	eq
   1ad84:	2800      	cmpeq	r0, #0
   1ad86:	d202      	bcs.n	1ad8e <os_time_ms_to_ticks+0x22>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   1ad88:	6028      	str	r0, [r5, #0]
    return 0;
   1ad8a:	2000      	movs	r0, #0
}
   1ad8c:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
   1ad8e:	2002      	movs	r0, #2
   1ad90:	e7fc      	b.n	1ad8c <os_time_ms_to_ticks+0x20>

0001ad92 <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
   1ad92:	b508      	push	{r3, lr}
    os_time_advance(1);
   1ad94:	2001      	movs	r0, #1
   1ad96:	f7ff ff99 	bl	1accc <os_time_advance>
}
   1ad9a:	bd08      	pop	{r3, pc}

0001ad9c <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
   1ad9c:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   1ad9e:	f7ff fd19 	bl	1a7d4 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   1ada2:	4b02      	ldr	r3, [pc, #8]	; (1adac <os_arch_ctx_sw+0x10>)
   1ada4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ada8:	605a      	str	r2, [r3, #4]
}
   1adaa:	bd08      	pop	{r3, pc}
   1adac:	e000ed00 	.word	0xe000ed00

0001adb0 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1adb0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1adb4:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
   1adb6:	f000 0001 	and.w	r0, r0, #1
   1adba:	4770      	bx	lr

0001adbc <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
   1adbc:	b900      	cbnz	r0, 1adc0 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   1adbe:	b662      	cpsie	i
        __enable_irq();
    }
}
   1adc0:	4770      	bx	lr

0001adc2 <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1adc2:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
   1adc6:	f000 0001 	and.w	r0, r0, #1
   1adca:	4770      	bx	lr

0001adcc <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   1adcc:	b570      	push	{r4, r5, r6, lr}
   1adce:	4606      	mov	r6, r0
   1add0:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   1add2:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
   1add6:	2309      	movs	r3, #9
   1add8:	e003      	b.n	1ade2 <os_arch_task_stack_init+0x16>
        s[i] = 0;
   1adda:	2200      	movs	r2, #0
   1addc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
   1ade0:	3301      	adds	r3, #1
   1ade2:	2b0d      	cmp	r3, #13
   1ade4:	ddf9      	ble.n	1adda <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   1ade6:	4620      	mov	r0, r4
   1ade8:	f000 f8b6 	bl	1af58 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   1adec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1adf0:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
   1adf4:	6973      	ldr	r3, [r6, #20]
   1adf6:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   1adfa:	69b3      	ldr	r3, [r6, #24]
   1adfc:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
   1ae00:	f06f 0302 	mvn.w	r3, #2
   1ae04:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
   1ae08:	4620      	mov	r0, r4
   1ae0a:	bd70      	pop	{r4, r5, r6, pc}

0001ae0c <os_arch_init>:

void
os_arch_init(void)
{
   1ae0c:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1ae0e:	4a04      	ldr	r2, [pc, #16]	; (1ae20 <os_arch_init+0x14>)
   1ae10:	6953      	ldr	r3, [r2, #20]
   1ae12:	f043 0310 	orr.w	r3, r3, #16
   1ae16:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   1ae18:	f7fe fdf4 	bl	19a04 <os_init_idle_task>
}
   1ae1c:	bd08      	pop	{r3, pc}
   1ae1e:	bf00      	nop
   1ae20:	e000ed00 	.word	0xe000ed00

0001ae24 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   1ae24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1ae26:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1ae2a:	b90c      	cbnz	r4, 1ae30 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1ae2c:	2400      	movs	r4, #0
   1ae2e:	e009      	b.n	1ae44 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   1ae30:	2007      	movs	r0, #7
   1ae32:	e02e      	b.n	1ae92 <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   1ae34:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   1ae38:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   1ae3c:	26ff      	movs	r6, #255	; 0xff
   1ae3e:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1ae42:	3401      	adds	r4, #1
   1ae44:	2cef      	cmp	r4, #239	; 0xef
   1ae46:	d9f5      	bls.n	1ae34 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1ae48:	f06f 040d 	mvn.w	r4, #13
   1ae4c:	e007      	b.n	1ae5e <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   1ae4e:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1ae50:	4e12      	ldr	r6, [pc, #72]	; (1ae9c <os_arch_os_init+0x78>)
   1ae52:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1ae54:	3510      	adds	r5, #16
   1ae56:	4f12      	ldr	r7, [pc, #72]	; (1aea0 <os_arch_os_init+0x7c>)
   1ae58:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   1ae5c:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1ae5e:	2c25      	cmp	r4, #37	; 0x25
   1ae60:	ddf5      	ble.n	1ae4e <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1ae62:	4c0e      	ldr	r4, [pc, #56]	; (1ae9c <os_arch_os_init+0x78>)
   1ae64:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1ae66:	4e0f      	ldr	r6, [pc, #60]	; (1aea4 <os_arch_os_init+0x80>)
   1ae68:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1ae6a:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1ae6c:	4e0e      	ldr	r6, [pc, #56]	; (1aea8 <os_arch_os_init+0x84>)
   1ae6e:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1ae70:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1ae72:	4e0e      	ldr	r6, [pc, #56]	; (1aeac <os_arch_os_init+0x88>)
   1ae74:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ae76:	25e0      	movs	r5, #224	; 0xe0
   1ae78:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   1ae7c:	2520      	movs	r5, #32
   1ae7e:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1ae80:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   1ae84:	f014 0f01 	tst.w	r4, #1
   1ae88:	d004      	beq.n	1ae94 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   1ae8a:	f8df c024 	ldr.w	ip, [pc, #36]	; 1aeb0 <os_arch_os_init+0x8c>
   1ae8e:	df00      	svc	0
        err = OS_OK;
   1ae90:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   1ae92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   1ae94:	f7ff ffba 	bl	1ae0c <os_arch_init>
        err = OS_OK;
   1ae98:	2000      	movs	r0, #0
   1ae9a:	e7fa      	b.n	1ae92 <os_arch_os_init+0x6e>
   1ae9c:	e000ed00 	.word	0xe000ed00
   1aea0:	0001aff7 	.word	0x0001aff7
   1aea4:	0001af5f 	.word	0x0001af5f
   1aea8:	0001afa5 	.word	0x0001afa5
   1aeac:	0001afeb 	.word	0x0001afeb
   1aeb0:	0001ae0d 	.word	0x0001ae0d

0001aeb4 <os_arch_start>:

uint32_t
os_arch_start(void)
{
   1aeb4:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   1aeb6:	f7ff fd73 	bl	1a9a0 <os_sched_next_task>
   1aeba:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   1aebc:	f7ff fca8 	bl	1a810 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   1aec0:	6823      	ldr	r3, [r4, #0]
   1aec2:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1aec4:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   1aec8:	2106      	movs	r1, #6
   1aeca:	2080      	movs	r0, #128	; 0x80
   1aecc:	f000 fde8 	bl	1baa0 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   1aed0:	4b03      	ldr	r3, [pc, #12]	; (1aee0 <os_arch_start+0x2c>)
   1aed2:	2201      	movs	r2, #1
   1aed4:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   1aed6:	4620      	mov	r0, r4
   1aed8:	f7ff ff60 	bl	1ad9c <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   1aedc:	69a0      	ldr	r0, [r4, #24]
   1aede:	bd10      	pop	{r4, pc}
   1aee0:	2000a638 	.word	0x2000a638

0001aee4 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   1aee4:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   1aee6:	4814      	ldr	r0, [pc, #80]	; (1af38 <os_arch_os_start+0x54>)
   1aee8:	6800      	ldr	r0, [r0, #0]
   1aeea:	3804      	subs	r0, #4
   1aeec:	f000 f82a 	bl	1af44 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1aef0:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1aef4:	b9d4      	cbnz	r4, 1af2c <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1aef6:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   1aefa:	f004 0403 	and.w	r4, r4, #3
   1aefe:	2c03      	cmp	r4, #3
   1af00:	d808      	bhi.n	1af14 <os_arch_os_start+0x30>
   1af02:	e8df f004 	tbb	[pc, r4]
   1af06:	1515      	.short	0x1515
   1af08:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   1af0a:	4c0c      	ldr	r4, [pc, #48]	; (1af3c <os_arch_os_start+0x58>)
   1af0c:	6824      	ldr	r4, [r4, #0]
   1af0e:	f014 0f01 	tst.w	r4, #1
   1af12:	d10f      	bne.n	1af34 <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
   1af14:	f8df c028 	ldr.w	ip, [pc, #40]	; 1af40 <os_arch_os_start+0x5c>
   1af18:	df00      	svc	0
   1af1a:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
   1af1c:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   1af1e:	4c07      	ldr	r4, [pc, #28]	; (1af3c <os_arch_os_start+0x58>)
   1af20:	6824      	ldr	r4, [r4, #0]
   1af22:	f014 0f01 	tst.w	r4, #1
   1af26:	d1f5      	bne.n	1af14 <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
   1af28:	2008      	movs	r0, #8
   1af2a:	e7f7      	b.n	1af1c <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
   1af2c:	2007      	movs	r0, #7
   1af2e:	e7f5      	b.n	1af1c <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
   1af30:	2008      	movs	r0, #8
   1af32:	e7f3      	b.n	1af1c <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
   1af34:	2008      	movs	r0, #8
   1af36:	e7f1      	b.n	1af1c <os_arch_os_start+0x38>
   1af38:	2000a598 	.word	0x2000a598
   1af3c:	2000a198 	.word	0x2000a198
   1af40:	0001aeb5 	.word	0x0001aeb5

0001af44 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   1af44:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   1af48:	4832      	ldr	r0, [pc, #200]	; (1b014 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   1af4a:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   1af4c:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   1af4e:	f380 8814 	msr	CONTROL, r0
        ISB
   1af52:	f3bf 8f6f 	isb	sy
        BX      LR
   1af56:	4770      	bx	lr

0001af58 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   1af58:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   1af5c:	4770      	bx	lr

0001af5e <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   1af5e:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   1af62:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   1af64:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   1af68:	b951      	cbnz	r1, 1af80 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1af6a:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1af6e:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   1af70:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1af72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   1af76:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   1af7a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   1af7e:	4770      	bx	lr

0001af80 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1af80:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   1af82:	4a25      	ldr	r2, [pc, #148]	; (1b018 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   1af84:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   1af86:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   1af88:	d809      	bhi.n	1af9e <SVC_Done>

        LDR     R4,=SVC_Table-4
   1af8a:	4c24      	ldr	r4, [pc, #144]	; (1b01c <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   1af8c:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1af90:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   1af94:	47a0      	blx	r4

        MRS     R12,PSP
   1af96:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   1af9a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0001af9e <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1af9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   1afa2:	4770      	bx	lr

0001afa4 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1afa4:	4b1e      	ldr	r3, [pc, #120]	; (1b020 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   1afa6:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   1afa8:	4b1e      	ldr	r3, [pc, #120]	; (1b024 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   1afaa:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   1afac:	4291      	cmp	r1, r2
        IT      EQ
   1afae:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   1afb0:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   1afb2:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
   1afb6:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
   1afba:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
   1afbc:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
   1afc0:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1afc4:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1afc8:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   1afca:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
   1afce:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
   1afd2:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
   1afd6:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
   1afd8:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
   1afdc:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
   1afe0:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
   1afe4:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1afe8:	4770      	bx	lr

0001afea <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1afea:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   1afec:	f7ff fed1 	bl	1ad92 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1aff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   1aff4:	4770      	bx	lr

0001aff6 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1aff6:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1affa:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   1affc:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   1b000:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   1b004:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1b008:	4668      	mov	r0, sp
        BL      os_default_irq
   1b00a:	f7fe fc61 	bl	198d0 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   1b00e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   1b012:	4770      	bx	lr
        LDR     R0,=os_flags
   1b014:	2000a198 	.word	0x2000a198
        LDR     R2,=SVC_Count
   1b018:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   1b01c:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1b020:	20000114 	.word	0x20000114
        LDR     R3,=g_current_task      /* Get current task */
   1b024:	2000a660 	.word	0x2000a660

0001b028 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
   1b028:	b470      	push	{r4, r5, r6}
   1b02a:	f04f 0500 	mov.w	r5, #0
   1b02e:	f022 0603 	bic.w	r6, r2, #3
   1b032:	e005      	b.n	1b040 <test1>

0001b034 <loop1>:
   1b034:	5943      	ldr	r3, [r0, r5]
   1b036:	594c      	ldr	r4, [r1, r5]
   1b038:	42a3      	cmp	r3, r4
   1b03a:	d104      	bne.n	1b046 <res1>
   1b03c:	f105 0504 	add.w	r5, r5, #4

0001b040 <test1>:
   1b040:	42b5      	cmp	r5, r6
   1b042:	d1f7      	bne.n	1b034 <loop1>
   1b044:	e00d      	b.n	1b062 <test2>

0001b046 <res1>:
   1b046:	ba1b      	rev	r3, r3
   1b048:	ba24      	rev	r4, r4
   1b04a:	1b1b      	subs	r3, r3, r4
   1b04c:	bf8c      	ite	hi
   1b04e:	2301      	movhi	r3, #1
   1b050:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   1b054:	e009      	b.n	1b06a <done>

0001b056 <loop2>:
   1b056:	5d43      	ldrb	r3, [r0, r5]
   1b058:	5d4c      	ldrb	r4, [r1, r5]
   1b05a:	1b1b      	subs	r3, r3, r4
   1b05c:	d105      	bne.n	1b06a <done>
   1b05e:	f105 0501 	add.w	r5, r5, #1

0001b062 <test2>:
   1b062:	4295      	cmp	r5, r2
   1b064:	d1f7      	bne.n	1b056 <loop2>
   1b066:	f04f 0300 	mov.w	r3, #0

0001b06a <done>:
   1b06a:	4618      	mov	r0, r3
   1b06c:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   1b06e:	4770      	bx	lr

0001b070 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   1b070:	e001      	b.n	1b076 <test1>

0001b072 <loop1>:
   1b072:	588b      	ldr	r3, [r1, r2]
   1b074:	5083      	str	r3, [r0, r2]

0001b076 <test1>:
   1b076:	3a04      	subs	r2, #4
   1b078:	d5fb      	bpl.n	1b072 <loop1>
   1b07a:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   1b07e:	e001      	b.n	1b084 <test2>

0001b080 <loop2>:
   1b080:	5c8b      	ldrb	r3, [r1, r2]
   1b082:	5483      	strb	r3, [r0, r2]

0001b084 <test2>:
   1b084:	3a01      	subs	r2, #1
   1b086:	d5fb      	bpl.n	1b080 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   1b088:	4770      	bx	lr

0001b08a <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   1b08a:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   1b08c:	4605      	mov	r5, r0
   1b08e:	b2c9      	uxtb	r1, r1
   1b090:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1b094:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1b098:	18ab      	adds	r3, r5, r2
   1b09a:	2403      	movs	r4, #3
   1b09c:	4023      	ands	r3, r4
   1b09e:	1ad3      	subs	r3, r2, r3
   1b0a0:	d40b      	bmi.n	1b0ba <memset+0x30>
   1b0a2:	e001      	b.n	1b0a8 <memset+0x1e>
   1b0a4:	3a01      	subs	r2, #1
   1b0a6:	54a9      	strb	r1, [r5, r2]
   1b0a8:	429a      	cmp	r2, r3
   1b0aa:	d1fb      	bne.n	1b0a4 <memset+0x1a>
   1b0ac:	e000      	b.n	1b0b0 <memset+0x26>
   1b0ae:	50a9      	str	r1, [r5, r2]
   1b0b0:	3a04      	subs	r2, #4
   1b0b2:	d5fc      	bpl.n	1b0ae <memset+0x24>
   1b0b4:	3204      	adds	r2, #4
   1b0b6:	e000      	b.n	1b0ba <memset+0x30>
   1b0b8:	54a9      	strb	r1, [r5, r2]
   1b0ba:	3a01      	subs	r2, #1
   1b0bc:	d5fc      	bpl.n	1b0b8 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   1b0be:	bc30      	pop	{r4, r5}
   1b0c0:	4770      	bx	lr

0001b0c2 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   1b0c2:	b430      	push	{r4, r5}
   1b0c4:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   1b0c6:	1c55      	adds	r5, r2, #1
   1b0c8:	7813      	ldrb	r3, [r2, #0]
   1b0ca:	1c4c      	adds	r4, r1, #1
   1b0cc:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
   1b0ce:	1a18      	subs	r0, r3, r0
   1b0d0:	d103      	bne.n	1b0da <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
   1b0d2:	462a      	mov	r2, r5
   1b0d4:	4621      	mov	r1, r4
		if (d || !ch)
   1b0d6:	2b00      	cmp	r3, #0
   1b0d8:	d1f5      	bne.n	1b0c6 <strcmp+0x4>
			break;
	}

	return d;
}
   1b0da:	bc30      	pop	{r4, r5}
   1b0dc:	4770      	bx	lr

0001b0de <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   1b0de:	4603      	mov	r3, r0
	while (*ss)
   1b0e0:	e000      	b.n	1b0e4 <strlen+0x6>
		ss++;
   1b0e2:	3301      	adds	r3, #1
	while (*ss)
   1b0e4:	781a      	ldrb	r2, [r3, #0]
   1b0e6:	2a00      	cmp	r2, #0
   1b0e8:	d1fb      	bne.n	1b0e2 <strlen+0x4>
	return ss - s;
}
   1b0ea:	1a18      	subs	r0, r3, r0
   1b0ec:	4770      	bx	lr

0001b0ee <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   1b0ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b0f2:	b082      	sub	sp, #8
   1b0f4:	e9cd 0100 	strd	r0, r1, [sp]
   1b0f8:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   1b0fa:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
   1b0fe:	2401      	movs	r4, #1
   1b100:	2500      	movs	r5, #0
    while (num / d >= p->base)
   1b102:	e004      	b.n	1b10e <ui2a+0x20>
        d *= p->base;
   1b104:	fb06 f305 	mul.w	r3, r6, r5
   1b108:	fba4 4506 	umull	r4, r5, r4, r6
   1b10c:	441d      	add	r5, r3
    while (num / d >= p->base)
   1b10e:	4622      	mov	r2, r4
   1b110:	462b      	mov	r3, r5
   1b112:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b116:	f001 febd 	bl	1ce94 <__aeabi_uldivmod>
   1b11a:	f899 6003 	ldrb.w	r6, [r9, #3]
   1b11e:	2700      	movs	r7, #0
   1b120:	42b9      	cmp	r1, r7
   1b122:	bf08      	it	eq
   1b124:	42b0      	cmpeq	r0, r6
   1b126:	d2ed      	bcs.n	1b104 <ui2a+0x16>
    int n = 0;
   1b128:	f04f 0a00 	mov.w	sl, #0
   1b12c:	e007      	b.n	1b13e <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1b12e:	2330      	movs	r3, #48	; 0x30
   1b130:	441e      	add	r6, r3
   1b132:	f888 6000 	strb.w	r6, [r8]
            ++n;
   1b136:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1b13a:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
   1b13e:	ea54 0305 	orrs.w	r3, r4, r5
   1b142:	d02e      	beq.n	1b1a2 <ui2a+0xb4>
        unsigned long long  dgt = num / d;
   1b144:	4622      	mov	r2, r4
   1b146:	462b      	mov	r3, r5
   1b148:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b14c:	f001 fea2 	bl	1ce94 <__aeabi_uldivmod>
   1b150:	4606      	mov	r6, r0
   1b152:	460f      	mov	r7, r1
        num %= d;
   1b154:	4622      	mov	r2, r4
   1b156:	462b      	mov	r3, r5
   1b158:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b15c:	f001 fe9a 	bl	1ce94 <__aeabi_uldivmod>
   1b160:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
   1b164:	f899 2003 	ldrb.w	r2, [r9, #3]
   1b168:	2300      	movs	r3, #0
   1b16a:	4620      	mov	r0, r4
   1b16c:	4629      	mov	r1, r5
   1b16e:	f001 fe91 	bl	1ce94 <__aeabi_uldivmod>
   1b172:	4604      	mov	r4, r0
   1b174:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
   1b176:	f1ba 0f00 	cmp.w	sl, #0
   1b17a:	d105      	bne.n	1b188 <ui2a+0x9a>
   1b17c:	ea56 0307 	orrs.w	r3, r6, r7
   1b180:	d102      	bne.n	1b188 <ui2a+0x9a>
   1b182:	ea54 0305 	orrs.w	r3, r4, r5
   1b186:	d1da      	bne.n	1b13e <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1b188:	2f00      	cmp	r7, #0
   1b18a:	bf08      	it	eq
   1b18c:	2e0a      	cmpeq	r6, #10
   1b18e:	d3ce      	bcc.n	1b12e <ui2a+0x40>
   1b190:	f899 3002 	ldrb.w	r3, [r9, #2]
   1b194:	f013 0f04 	tst.w	r3, #4
   1b198:	d001      	beq.n	1b19e <ui2a+0xb0>
   1b19a:	2337      	movs	r3, #55	; 0x37
   1b19c:	e7c8      	b.n	1b130 <ui2a+0x42>
   1b19e:	2357      	movs	r3, #87	; 0x57
   1b1a0:	e7c6      	b.n	1b130 <ui2a+0x42>
        }
    }
    *bf = 0;
   1b1a2:	2300      	movs	r3, #0
   1b1a4:	f888 3000 	strb.w	r3, [r8]
}
   1b1a8:	b002      	add	sp, #8
   1b1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001b1ae <i2a>:

static void i2a(long long int num, struct param *p)
{
   1b1ae:	b508      	push	{r3, lr}
    if (num < 0) {
   1b1b0:	2800      	cmp	r0, #0
   1b1b2:	f171 0300 	sbcs.w	r3, r1, #0
   1b1b6:	db02      	blt.n	1b1be <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   1b1b8:	f7ff ff99 	bl	1b0ee <ui2a>
}
   1b1bc:	bd08      	pop	{r3, pc}
        num = -num;
   1b1be:	4240      	negs	r0, r0
   1b1c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   1b1c4:	7893      	ldrb	r3, [r2, #2]
   1b1c6:	f043 0301 	orr.w	r3, r3, #1
   1b1ca:	7093      	strb	r3, [r2, #2]
   1b1cc:	e7f4      	b.n	1b1b8 <i2a+0xa>

0001b1ce <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   1b1ce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1b1d2:	b2db      	uxtb	r3, r3
   1b1d4:	2b09      	cmp	r3, #9
   1b1d6:	d90b      	bls.n	1b1f0 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   1b1d8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1b1dc:	b2db      	uxtb	r3, r3
   1b1de:	2b05      	cmp	r3, #5
   1b1e0:	d908      	bls.n	1b1f4 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   1b1e2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1b1e6:	b2db      	uxtb	r3, r3
   1b1e8:	2b05      	cmp	r3, #5
   1b1ea:	d805      	bhi.n	1b1f8 <a2d+0x2a>
        return ch - 'A' + 10;
   1b1ec:	3837      	subs	r0, #55	; 0x37
   1b1ee:	4770      	bx	lr
        return ch - '0';
   1b1f0:	3830      	subs	r0, #48	; 0x30
   1b1f2:	4770      	bx	lr
        return ch - 'a' + 10;
   1b1f4:	3857      	subs	r0, #87	; 0x57
   1b1f6:	4770      	bx	lr
    else
        return -1;
   1b1f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1b1fc:	4770      	bx	lr

0001b1fe <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   1b1fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b202:	4605      	mov	r5, r0
   1b204:	4688      	mov	r8, r1
   1b206:	4617      	mov	r7, r2
   1b208:	4699      	mov	r9, r3
    const char *p = *src;
   1b20a:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   1b20c:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   1b20e:	4628      	mov	r0, r5
   1b210:	f7ff ffdd 	bl	1b1ce <a2d>
   1b214:	2800      	cmp	r0, #0
   1b216:	db06      	blt.n	1b226 <a2i+0x28>
        if (digit > base)
   1b218:	42b8      	cmp	r0, r7
   1b21a:	dc04      	bgt.n	1b226 <a2i+0x28>
            break;
        num = num * base + digit;
   1b21c:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
   1b220:	7825      	ldrb	r5, [r4, #0]
   1b222:	3401      	adds	r4, #1
   1b224:	e7f3      	b.n	1b20e <a2i+0x10>
    }
    *src = p;
   1b226:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   1b22a:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
   1b22e:	4628      	mov	r0, r5
   1b230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001b234 <putf>:

static int putf(FILE *putp, char c)
{
   1b234:	b500      	push	{lr}
   1b236:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   1b238:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   1b23c:	6803      	ldr	r3, [r0, #0]
   1b23e:	681b      	ldr	r3, [r3, #0]
   1b240:	b14b      	cbz	r3, 1b256 <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   1b242:	2201      	movs	r2, #1
   1b244:	f10d 0107 	add.w	r1, sp, #7
   1b248:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   1b24a:	2801      	cmp	r0, #1
   1b24c:	d005      	beq.n	1b25a <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
   1b24e:	2000      	movs	r0, #0
    else
        return 1;
}
   1b250:	b003      	add	sp, #12
   1b252:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   1b256:	2000      	movs	r0, #0
   1b258:	e7fa      	b.n	1b250 <putf+0x1c>
        return 1;
   1b25a:	2001      	movs	r0, #1
   1b25c:	e7f8      	b.n	1b250 <putf+0x1c>
	...

0001b260 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   1b260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b264:	4606      	mov	r6, r0
   1b266:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   1b268:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   1b26a:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   1b26c:	e001      	b.n	1b272 <putchw+0x12>
        n--;
   1b26e:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   1b270:	4613      	mov	r3, r2
   1b272:	1c5a      	adds	r2, r3, #1
   1b274:	781b      	ldrb	r3, [r3, #0]
   1b276:	b10b      	cbz	r3, 1b27c <putchw+0x1c>
   1b278:	2c00      	cmp	r4, #0
   1b27a:	dcf8      	bgt.n	1b26e <putchw+0xe>
    if (p->sign)
   1b27c:	78bb      	ldrb	r3, [r7, #2]
   1b27e:	f013 0f01 	tst.w	r3, #1
   1b282:	d000      	beq.n	1b286 <putchw+0x26>
        n--;
   1b284:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   1b286:	887b      	ldrh	r3, [r7, #2]
   1b288:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1b28c:	b29b      	uxth	r3, r3
   1b28e:	f241 0202 	movw	r2, #4098	; 0x1002
   1b292:	4293      	cmp	r3, r2
   1b294:	d01c      	beq.n	1b2d0 <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
   1b296:	f640 0202 	movw	r2, #2050	; 0x802
   1b29a:	4293      	cmp	r3, r2
   1b29c:	d01a      	beq.n	1b2d4 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   1b29e:	683b      	ldr	r3, [r7, #0]
   1b2a0:	4d35      	ldr	r5, [pc, #212]	; (1b378 <putchw+0x118>)
   1b2a2:	401d      	ands	r5, r3
   1b2a4:	b1f5      	cbz	r5, 1b2e4 <putchw+0x84>
    unsigned written = 0;
   1b2a6:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   1b2a8:	78bb      	ldrb	r3, [r7, #2]
   1b2aa:	f013 0f01 	tst.w	r3, #1
   1b2ae:	d11f      	bne.n	1b2f0 <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   1b2b0:	887b      	ldrh	r3, [r7, #2]
   1b2b2:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1b2b6:	b29b      	uxth	r3, r3
   1b2b8:	f241 0202 	movw	r2, #4098	; 0x1002
   1b2bc:	4293      	cmp	r3, r2
   1b2be:	d01d      	beq.n	1b2fc <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   1b2c0:	f640 0202 	movw	r2, #2050	; 0x802
   1b2c4:	4293      	cmp	r3, r2
   1b2c6:	d02a      	beq.n	1b31e <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   1b2c8:	787b      	ldrb	r3, [r7, #1]
   1b2ca:	bba3      	cbnz	r3, 1b336 <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   1b2cc:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
   1b2ce:	e03d      	b.n	1b34c <putchw+0xec>
        n -= 2;
   1b2d0:	3c02      	subs	r4, #2
   1b2d2:	e7e4      	b.n	1b29e <putchw+0x3e>
        n--;
   1b2d4:	3c01      	subs	r4, #1
   1b2d6:	e7e2      	b.n	1b29e <putchw+0x3e>
            written += putf(putp, ' ');
   1b2d8:	2120      	movs	r1, #32
   1b2da:	4630      	mov	r0, r6
   1b2dc:	f7ff ffaa 	bl	1b234 <putf>
   1b2e0:	4405      	add	r5, r0
        while (n-- > 0)
   1b2e2:	4644      	mov	r4, r8
   1b2e4:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1b2e8:	2c00      	cmp	r4, #0
   1b2ea:	dcf5      	bgt.n	1b2d8 <putchw+0x78>
   1b2ec:	4644      	mov	r4, r8
   1b2ee:	e7db      	b.n	1b2a8 <putchw+0x48>
        written += putf(putp, '-');
   1b2f0:	212d      	movs	r1, #45	; 0x2d
   1b2f2:	4630      	mov	r0, r6
   1b2f4:	f7ff ff9e 	bl	1b234 <putf>
   1b2f8:	4405      	add	r5, r0
   1b2fa:	e7d9      	b.n	1b2b0 <putchw+0x50>
        written += putf(putp, '0');
   1b2fc:	2130      	movs	r1, #48	; 0x30
   1b2fe:	4630      	mov	r0, r6
   1b300:	f7ff ff98 	bl	1b234 <putf>
   1b304:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   1b306:	78bb      	ldrb	r3, [r7, #2]
   1b308:	f013 0f04 	tst.w	r3, #4
   1b30c:	d005      	beq.n	1b31a <putchw+0xba>
   1b30e:	2158      	movs	r1, #88	; 0x58
   1b310:	4630      	mov	r0, r6
   1b312:	f7ff ff8f 	bl	1b234 <putf>
   1b316:	4405      	add	r5, r0
   1b318:	e7d6      	b.n	1b2c8 <putchw+0x68>
   1b31a:	2178      	movs	r1, #120	; 0x78
   1b31c:	e7f8      	b.n	1b310 <putchw+0xb0>
        written += putf(putp, '0');
   1b31e:	2130      	movs	r1, #48	; 0x30
   1b320:	4630      	mov	r0, r6
   1b322:	f7ff ff87 	bl	1b234 <putf>
   1b326:	4405      	add	r5, r0
   1b328:	e7ce      	b.n	1b2c8 <putchw+0x68>
            written += putf(putp, '0');
   1b32a:	2130      	movs	r1, #48	; 0x30
   1b32c:	4630      	mov	r0, r6
   1b32e:	f7ff ff81 	bl	1b234 <putf>
   1b332:	4405      	add	r5, r0
        while (n-- > 0)
   1b334:	4644      	mov	r4, r8
   1b336:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1b33a:	2c00      	cmp	r4, #0
   1b33c:	dcf5      	bgt.n	1b32a <putchw+0xca>
   1b33e:	4644      	mov	r4, r8
   1b340:	e7c4      	b.n	1b2cc <putchw+0x6c>
        written += putf(putp, ch);
   1b342:	4630      	mov	r0, r6
   1b344:	f7ff ff76 	bl	1b234 <putf>
   1b348:	4405      	add	r5, r0
    while ((ch = *bf++))
   1b34a:	4643      	mov	r3, r8
   1b34c:	f103 0801 	add.w	r8, r3, #1
   1b350:	7819      	ldrb	r1, [r3, #0]
   1b352:	2900      	cmp	r1, #0
   1b354:	d1f5      	bne.n	1b342 <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   1b356:	78bb      	ldrb	r3, [r7, #2]
   1b358:	f013 0f08 	tst.w	r3, #8
   1b35c:	d106      	bne.n	1b36c <putchw+0x10c>
   1b35e:	e008      	b.n	1b372 <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
   1b360:	2120      	movs	r1, #32
   1b362:	4630      	mov	r0, r6
   1b364:	f7ff ff66 	bl	1b234 <putf>
   1b368:	4405      	add	r5, r0
        while (n-- > 0)
   1b36a:	463c      	mov	r4, r7
   1b36c:	1e67      	subs	r7, r4, #1
   1b36e:	2c00      	cmp	r4, #0
   1b370:	dcf6      	bgt.n	1b360 <putchw+0x100>
    }
    
    return written;
}
   1b372:	4628      	mov	r0, r5
   1b374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b378:	0008ff00 	.word	0x0008ff00

0001b37c <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   1b37c:	b160      	cbz	r0, 1b398 <intarg+0x1c>
   1b37e:	2801      	cmp	r0, #1
   1b380:	d017      	beq.n	1b3b2 <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   1b382:	bb19      	cbnz	r1, 1b3cc <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
   1b384:	6813      	ldr	r3, [r2, #0]
   1b386:	3307      	adds	r3, #7
   1b388:	f023 0307 	bic.w	r3, r3, #7
   1b38c:	f103 0108 	add.w	r1, r3, #8
   1b390:	6011      	str	r1, [r2, #0]
   1b392:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   1b396:	4770      	bx	lr
        if (sign) {
   1b398:	b129      	cbz	r1, 1b3a6 <intarg+0x2a>
            val = va_arg(*va, int);
   1b39a:	6813      	ldr	r3, [r2, #0]
   1b39c:	1d19      	adds	r1, r3, #4
   1b39e:	6011      	str	r1, [r2, #0]
   1b3a0:	6818      	ldr	r0, [r3, #0]
   1b3a2:	17c1      	asrs	r1, r0, #31
   1b3a4:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   1b3a6:	6813      	ldr	r3, [r2, #0]
   1b3a8:	1d19      	adds	r1, r3, #4
   1b3aa:	6011      	str	r1, [r2, #0]
   1b3ac:	6818      	ldr	r0, [r3, #0]
   1b3ae:	2100      	movs	r1, #0
   1b3b0:	4770      	bx	lr
        if (sign) {
   1b3b2:	b129      	cbz	r1, 1b3c0 <intarg+0x44>
            val = va_arg(*va, long);
   1b3b4:	6813      	ldr	r3, [r2, #0]
   1b3b6:	1d19      	adds	r1, r3, #4
   1b3b8:	6011      	str	r1, [r2, #0]
   1b3ba:	6818      	ldr	r0, [r3, #0]
   1b3bc:	17c1      	asrs	r1, r0, #31
   1b3be:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   1b3c0:	6813      	ldr	r3, [r2, #0]
   1b3c2:	1d19      	adds	r1, r3, #4
   1b3c4:	6011      	str	r1, [r2, #0]
   1b3c6:	6818      	ldr	r0, [r3, #0]
   1b3c8:	2100      	movs	r1, #0
   1b3ca:	4770      	bx	lr
            val = va_arg(*va, long long);
   1b3cc:	6813      	ldr	r3, [r2, #0]
   1b3ce:	3307      	adds	r3, #7
   1b3d0:	f023 0307 	bic.w	r3, r3, #7
   1b3d4:	f103 0108 	add.w	r1, r3, #8
   1b3d8:	6011      	str	r1, [r2, #0]
   1b3da:	e9d3 0100 	ldrd	r0, r1, [r3]
   1b3de:	4770      	bx	lr

0001b3e0 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   1b3e0:	b570      	push	{r4, r5, r6, lr}
   1b3e2:	b08a      	sub	sp, #40	; 0x28
   1b3e4:	4605      	mov	r5, r0
   1b3e6:	9101      	str	r1, [sp, #4]
   1b3e8:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   1b3ea:	ab02      	add	r3, sp, #8
   1b3ec:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   1b3ee:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
   1b3f0:	9b01      	ldr	r3, [sp, #4]
   1b3f2:	1c5a      	adds	r2, r3, #1
   1b3f4:	9201      	str	r2, [sp, #4]
   1b3f6:	7819      	ldrb	r1, [r3, #0]
   1b3f8:	2900      	cmp	r1, #0
   1b3fa:	f000 811c 	beq.w	1b636 <tfp_format+0x256>
        if (ch != '%') {
   1b3fe:	2925      	cmp	r1, #37	; 0x25
   1b400:	d004      	beq.n	1b40c <tfp_format+0x2c>
            written += putf(putp, ch);
   1b402:	4628      	mov	r0, r5
   1b404:	f7ff ff16 	bl	1b234 <putf>
   1b408:	4404      	add	r4, r0
   1b40a:	e7f1      	b.n	1b3f0 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   1b40c:	2200      	movs	r2, #0
   1b40e:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   1b412:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   1b416:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
   1b41a:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
   1b41e:	f362 0382 	bfi	r3, r2, #2, #1
   1b422:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   1b426:	9b01      	ldr	r3, [sp, #4]
   1b428:	1c5a      	adds	r2, r3, #1
   1b42a:	9201      	str	r2, [sp, #4]
   1b42c:	7818      	ldrb	r0, [r3, #0]
   1b42e:	b128      	cbz	r0, 1b43c <tfp_format+0x5c>
                switch (ch) {
   1b430:	282d      	cmp	r0, #45	; 0x2d
   1b432:	d04e      	beq.n	1b4d2 <tfp_format+0xf2>
   1b434:	2830      	cmp	r0, #48	; 0x30
   1b436:	d03c      	beq.n	1b4b2 <tfp_format+0xd2>
   1b438:	2823      	cmp	r0, #35	; 0x23
   1b43a:	d043      	beq.n	1b4c4 <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   1b43c:	282a      	cmp	r0, #42	; 0x2a
   1b43e:	d052      	beq.n	1b4e6 <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   1b440:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1b444:	b2db      	uxtb	r3, r3
   1b446:	2b09      	cmp	r3, #9
   1b448:	d961      	bls.n	1b50e <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   1b44a:	286c      	cmp	r0, #108	; 0x6c
   1b44c:	d065      	beq.n	1b51a <tfp_format+0x13a>
            lng = 0;
   1b44e:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   1b450:	287a      	cmp	r0, #122	; 0x7a
   1b452:	d06f      	beq.n	1b534 <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
   1b454:	2869      	cmp	r0, #105	; 0x69
   1b456:	f000 808e 	beq.w	1b576 <tfp_format+0x196>
   1b45a:	d970      	bls.n	1b53e <tfp_format+0x15e>
   1b45c:	2873      	cmp	r0, #115	; 0x73
   1b45e:	f000 80dd 	beq.w	1b61c <tfp_format+0x23c>
   1b462:	f200 8099 	bhi.w	1b598 <tfp_format+0x1b8>
   1b466:	286f      	cmp	r0, #111	; 0x6f
   1b468:	f000 80c7 	beq.w	1b5fa <tfp_format+0x21a>
   1b46c:	2870      	cmp	r0, #112	; 0x70
   1b46e:	d1bf      	bne.n	1b3f0 <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
   1b470:	9b00      	ldr	r3, [sp, #0]
   1b472:	1d1a      	adds	r2, r3, #4
   1b474:	9200      	str	r2, [sp, #0]
   1b476:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   1b478:	2310      	movs	r3, #16
   1b47a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   1b47e:	aa08      	add	r2, sp, #32
   1b480:	2100      	movs	r1, #0
   1b482:	f7ff fe34 	bl	1b0ee <ui2a>
                p.width = 2 * sizeof(void*);
   1b486:	2308      	movs	r3, #8
   1b488:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   1b48c:	2301      	movs	r3, #1
   1b48e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   1b492:	2130      	movs	r1, #48	; 0x30
   1b494:	4628      	mov	r0, r5
   1b496:	f7ff fecd 	bl	1b234 <putf>
   1b49a:	4404      	add	r4, r0
                written += putf(putp, 'x');
   1b49c:	2178      	movs	r1, #120	; 0x78
   1b49e:	4628      	mov	r0, r5
   1b4a0:	f7ff fec8 	bl	1b234 <putf>
   1b4a4:	4404      	add	r4, r0
                written += putchw(putp, &p);
   1b4a6:	a908      	add	r1, sp, #32
   1b4a8:	4628      	mov	r0, r5
   1b4aa:	f7ff fed9 	bl	1b260 <putchw>
   1b4ae:	4404      	add	r4, r0
                break;
   1b4b0:	e79e      	b.n	1b3f0 <tfp_format+0x10>
                    if (!p.left) {
   1b4b2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b4b6:	f013 0f08 	tst.w	r3, #8
   1b4ba:	d1b4      	bne.n	1b426 <tfp_format+0x46>
                        p.lz = 1;
   1b4bc:	2301      	movs	r3, #1
   1b4be:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1b4c2:	e7b0      	b.n	1b426 <tfp_format+0x46>
                    p.alt = 1;
   1b4c4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b4c8:	f043 0302 	orr.w	r3, r3, #2
   1b4cc:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   1b4d0:	e7a9      	b.n	1b426 <tfp_format+0x46>
                    p.left = 1;
   1b4d2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b4d6:	f043 0308 	orr.w	r3, r3, #8
   1b4da:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   1b4de:	2300      	movs	r3, #0
   1b4e0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1b4e4:	e79f      	b.n	1b426 <tfp_format+0x46>
                i = intarg(0, 1, &va);
   1b4e6:	466a      	mov	r2, sp
   1b4e8:	2101      	movs	r1, #1
   1b4ea:	2000      	movs	r0, #0
   1b4ec:	f7ff ff46 	bl	1b37c <intarg>
                if (i > UCHAR_MAX) {
   1b4f0:	28ff      	cmp	r0, #255	; 0xff
   1b4f2:	dd07      	ble.n	1b504 <tfp_format+0x124>
                    p.width = UCHAR_MAX;
   1b4f4:	23ff      	movs	r3, #255	; 0xff
   1b4f6:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   1b4fa:	9b01      	ldr	r3, [sp, #4]
   1b4fc:	1c5a      	adds	r2, r3, #1
   1b4fe:	9201      	str	r2, [sp, #4]
   1b500:	7818      	ldrb	r0, [r3, #0]
   1b502:	e7a2      	b.n	1b44a <tfp_format+0x6a>
                } else if (i > 0) {
   1b504:	2800      	cmp	r0, #0
   1b506:	ddf8      	ble.n	1b4fa <tfp_format+0x11a>
                    p.width = i;
   1b508:	f88d 0020 	strb.w	r0, [sp, #32]
   1b50c:	e7f5      	b.n	1b4fa <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
   1b50e:	ab08      	add	r3, sp, #32
   1b510:	220a      	movs	r2, #10
   1b512:	a901      	add	r1, sp, #4
   1b514:	f7ff fe73 	bl	1b1fe <a2i>
   1b518:	e797      	b.n	1b44a <tfp_format+0x6a>
                ch = *(fmt++);
   1b51a:	9b01      	ldr	r3, [sp, #4]
   1b51c:	1c5a      	adds	r2, r3, #1
   1b51e:	9201      	str	r2, [sp, #4]
   1b520:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
   1b522:	286c      	cmp	r0, #108	; 0x6c
   1b524:	d001      	beq.n	1b52a <tfp_format+0x14a>
                lng = 1;
   1b526:	2601      	movs	r6, #1
   1b528:	e792      	b.n	1b450 <tfp_format+0x70>
                    ch = *(fmt++);
   1b52a:	1c9a      	adds	r2, r3, #2
   1b52c:	9201      	str	r2, [sp, #4]
   1b52e:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
   1b530:	2602      	movs	r6, #2
   1b532:	e78d      	b.n	1b450 <tfp_format+0x70>
                ch = *(fmt++);
   1b534:	9b01      	ldr	r3, [sp, #4]
   1b536:	1c5a      	adds	r2, r3, #1
   1b538:	9201      	str	r2, [sp, #4]
   1b53a:	7818      	ldrb	r0, [r3, #0]
   1b53c:	e78a      	b.n	1b454 <tfp_format+0x74>
            switch (ch) {
   1b53e:	2858      	cmp	r0, #88	; 0x58
   1b540:	d040      	beq.n	1b5c4 <tfp_format+0x1e4>
   1b542:	d80a      	bhi.n	1b55a <tfp_format+0x17a>
   1b544:	2800      	cmp	r0, #0
   1b546:	d076      	beq.n	1b636 <tfp_format+0x256>
   1b548:	2825      	cmp	r0, #37	; 0x25
   1b54a:	f47f af51 	bne.w	1b3f0 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   1b54e:	4601      	mov	r1, r0
   1b550:	4628      	mov	r0, r5
   1b552:	f7ff fe6f 	bl	1b234 <putf>
   1b556:	4404      	add	r4, r0
                break;
   1b558:	e74a      	b.n	1b3f0 <tfp_format+0x10>
            switch (ch) {
   1b55a:	2863      	cmp	r0, #99	; 0x63
   1b55c:	d108      	bne.n	1b570 <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
   1b55e:	9b00      	ldr	r3, [sp, #0]
   1b560:	1d1a      	adds	r2, r3, #4
   1b562:	9200      	str	r2, [sp, #0]
   1b564:	7819      	ldrb	r1, [r3, #0]
   1b566:	4628      	mov	r0, r5
   1b568:	f7ff fe64 	bl	1b234 <putf>
   1b56c:	4404      	add	r4, r0
                break;
   1b56e:	e73f      	b.n	1b3f0 <tfp_format+0x10>
            switch (ch) {
   1b570:	2864      	cmp	r0, #100	; 0x64
   1b572:	f47f af3d 	bne.w	1b3f0 <tfp_format+0x10>
                p.base = 10;
   1b576:	230a      	movs	r3, #10
   1b578:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   1b57c:	466a      	mov	r2, sp
   1b57e:	2101      	movs	r1, #1
   1b580:	4630      	mov	r0, r6
   1b582:	f7ff fefb 	bl	1b37c <intarg>
   1b586:	aa08      	add	r2, sp, #32
   1b588:	f7ff fe11 	bl	1b1ae <i2a>
                written += putchw(putp, &p);
   1b58c:	a908      	add	r1, sp, #32
   1b58e:	4628      	mov	r0, r5
   1b590:	f7ff fe66 	bl	1b260 <putchw>
   1b594:	4404      	add	r4, r0
                break;
   1b596:	e72b      	b.n	1b3f0 <tfp_format+0x10>
            switch (ch) {
   1b598:	2875      	cmp	r0, #117	; 0x75
   1b59a:	d110      	bne.n	1b5be <tfp_format+0x1de>
                p.base = 10;
   1b59c:	230a      	movs	r3, #10
   1b59e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1b5a2:	466a      	mov	r2, sp
   1b5a4:	2100      	movs	r1, #0
   1b5a6:	4630      	mov	r0, r6
   1b5a8:	f7ff fee8 	bl	1b37c <intarg>
   1b5ac:	aa08      	add	r2, sp, #32
   1b5ae:	f7ff fd9e 	bl	1b0ee <ui2a>
                written += putchw(putp, &p);
   1b5b2:	a908      	add	r1, sp, #32
   1b5b4:	4628      	mov	r0, r5
   1b5b6:	f7ff fe53 	bl	1b260 <putchw>
   1b5ba:	4404      	add	r4, r0
                break;
   1b5bc:	e718      	b.n	1b3f0 <tfp_format+0x10>
            switch (ch) {
   1b5be:	2878      	cmp	r0, #120	; 0x78
   1b5c0:	f47f af16 	bne.w	1b3f0 <tfp_format+0x10>
                p.base = 16;
   1b5c4:	2310      	movs	r3, #16
   1b5c6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   1b5ca:	2858      	cmp	r0, #88	; 0x58
   1b5cc:	bf14      	ite	ne
   1b5ce:	2300      	movne	r3, #0
   1b5d0:	2301      	moveq	r3, #1
   1b5d2:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1b5d6:	f363 0282 	bfi	r2, r3, #2, #1
   1b5da:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   1b5de:	466a      	mov	r2, sp
   1b5e0:	2100      	movs	r1, #0
   1b5e2:	4630      	mov	r0, r6
   1b5e4:	f7ff feca 	bl	1b37c <intarg>
   1b5e8:	aa08      	add	r2, sp, #32
   1b5ea:	f7ff fd80 	bl	1b0ee <ui2a>
                written += putchw(putp, &p);
   1b5ee:	a908      	add	r1, sp, #32
   1b5f0:	4628      	mov	r0, r5
   1b5f2:	f7ff fe35 	bl	1b260 <putchw>
   1b5f6:	4404      	add	r4, r0
                break;
   1b5f8:	e6fa      	b.n	1b3f0 <tfp_format+0x10>
                p.base = 8;
   1b5fa:	2308      	movs	r3, #8
   1b5fc:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1b600:	466a      	mov	r2, sp
   1b602:	2100      	movs	r1, #0
   1b604:	4630      	mov	r0, r6
   1b606:	f7ff feb9 	bl	1b37c <intarg>
   1b60a:	aa08      	add	r2, sp, #32
   1b60c:	f7ff fd6f 	bl	1b0ee <ui2a>
                written += putchw(putp, &p);
   1b610:	a908      	add	r1, sp, #32
   1b612:	4628      	mov	r0, r5
   1b614:	f7ff fe24 	bl	1b260 <putchw>
   1b618:	4404      	add	r4, r0
                break;
   1b61a:	e6e9      	b.n	1b3f0 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   1b61c:	9b00      	ldr	r3, [sp, #0]
   1b61e:	1d1a      	adds	r2, r3, #4
   1b620:	9200      	str	r2, [sp, #0]
   1b622:	681b      	ldr	r3, [r3, #0]
   1b624:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   1b626:	a908      	add	r1, sp, #32
   1b628:	4628      	mov	r0, r5
   1b62a:	f7ff fe19 	bl	1b260 <putchw>
   1b62e:	4404      	add	r4, r0
                p.bf = bf;
   1b630:	ab02      	add	r3, sp, #8
   1b632:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   1b634:	e6dc      	b.n	1b3f0 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   1b636:	4620      	mov	r0, r4
   1b638:	b00a      	add	sp, #40	; 0x28
   1b63a:	bd70      	pop	{r4, r5, r6, pc}

0001b63c <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   1b63c:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   1b63e:	f7ff fecf 	bl	1b3e0 <tfp_format>
}
   1b642:	bd08      	pop	{r3, pc}

0001b644 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
   1b644:	b40f      	push	{r0, r1, r2, r3}
   1b646:	b500      	push	{lr}
   1b648:	b083      	sub	sp, #12
   1b64a:	aa04      	add	r2, sp, #16
   1b64c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   1b650:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   1b652:	4b04      	ldr	r3, [pc, #16]	; (1b664 <printf+0x20>)
   1b654:	6818      	ldr	r0, [r3, #0]
   1b656:	f7ff fff1 	bl	1b63c <vfprintf>
    va_end(va);
    return rv;
}
   1b65a:	b003      	add	sp, #12
   1b65c:	f85d eb04 	ldr.w	lr, [sp], #4
   1b660:	b004      	add	sp, #16
   1b662:	4770      	bx	lr
   1b664:	00021044 	.word	0x00021044

0001b668 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   1b668:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b66a:	b085      	sub	sp, #20
   1b66c:	4605      	mov	r5, r0
   1b66e:	460c      	mov	r4, r1
   1b670:	4616      	mov	r6, r2
   1b672:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   1b674:	460a      	mov	r2, r1
   1b676:	4601      	mov	r1, r0
   1b678:	4668      	mov	r0, sp
   1b67a:	f000 f835 	bl	1b6e8 <fmemopen_w>
    tfp_format(f, fmt, va);
   1b67e:	463a      	mov	r2, r7
   1b680:	4631      	mov	r1, r6
   1b682:	f7ff fead 	bl	1b3e0 <tfp_format>
    if (size > 0) {
   1b686:	b12c      	cbz	r4, 1b694 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   1b688:	9b02      	ldr	r3, [sp, #8]
   1b68a:	42a3      	cmp	r3, r4
   1b68c:	d305      	bcc.n	1b69a <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
   1b68e:	3c01      	subs	r4, #1
   1b690:	2300      	movs	r3, #0
   1b692:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
   1b694:	9802      	ldr	r0, [sp, #8]
   1b696:	b005      	add	sp, #20
   1b698:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
   1b69a:	9b01      	ldr	r3, [sp, #4]
   1b69c:	2200      	movs	r2, #0
   1b69e:	701a      	strb	r2, [r3, #0]
   1b6a0:	e7f8      	b.n	1b694 <vsnprintf+0x2c>
	...

0001b6a4 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   1b6a4:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
   1b6a6:	460a      	mov	r2, r1
   1b6a8:	4601      	mov	r1, r0
   1b6aa:	4b02      	ldr	r3, [pc, #8]	; (1b6b4 <vprintf+0x10>)
   1b6ac:	6818      	ldr	r0, [r3, #0]
   1b6ae:	f7ff ffc5 	bl	1b63c <vfprintf>
}
   1b6b2:	bd08      	pop	{r3, pc}
   1b6b4:	00021044 	.word	0x00021044

0001b6b8 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   1b6b8:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   1b6ba:	2500      	movs	r5, #0
    
    while (n--)
   1b6bc:	e000      	b.n	1b6c0 <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   1b6be:	4622      	mov	r2, r4
    while (n--)
   1b6c0:	1e54      	subs	r4, r2, #1
   1b6c2:	b16a      	cbz	r2, 1b6e0 <memfile_write+0x28>
        f->bytes_written++;
   1b6c4:	6883      	ldr	r3, [r0, #8]
   1b6c6:	3301      	adds	r3, #1
   1b6c8:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
   1b6ca:	68c2      	ldr	r2, [r0, #12]
   1b6cc:	4293      	cmp	r3, r2
   1b6ce:	d8f6      	bhi.n	1b6be <memfile_write+0x6>
            *f->buffer++ = *bp++;
   1b6d0:	6843      	ldr	r3, [r0, #4]
   1b6d2:	1c5a      	adds	r2, r3, #1
   1b6d4:	6042      	str	r2, [r0, #4]
   1b6d6:	780a      	ldrb	r2, [r1, #0]
   1b6d8:	701a      	strb	r2, [r3, #0]
            i++;
   1b6da:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
   1b6dc:	3101      	adds	r1, #1
   1b6de:	e7ee      	b.n	1b6be <memfile_write+0x6>
        }
    }
    
    return i;
}
   1b6e0:	4628      	mov	r0, r5
   1b6e2:	bc30      	pop	{r4, r5}
   1b6e4:	4770      	bx	lr
	...

0001b6e8 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   1b6e8:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   1b6ea:	4c04      	ldr	r4, [pc, #16]	; (1b6fc <fmemopen_w+0x14>)
   1b6ec:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   1b6ee:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   1b6f0:	2100      	movs	r1, #0
   1b6f2:	6081      	str	r1, [r0, #8]
    storage->size = size;
   1b6f4:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   1b6f6:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b6fa:	4770      	bx	lr
   1b6fc:	0002103c 	.word	0x0002103c

0001b700 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   1b700:	2000      	movs	r0, #0
   1b702:	4770      	bx	lr

0001b704 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   1b704:	b510      	push	{r4, lr}
   1b706:	4608      	mov	r0, r1
   1b708:	4614      	mov	r4, r2
    console_write(bp, n);
   1b70a:	4611      	mov	r1, r2
   1b70c:	f7fd f9b8 	bl	18a80 <console_write>
    return n;
}
   1b710:	4620      	mov	r0, r4
   1b712:	bd10      	pop	{r4, pc}

0001b714 <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
   1b714:	b508      	push	{r3, lr}
    sysinit();
   1b716:	f7fd fa1b 	bl	18b50 <sysinit_start>
   1b71a:	f000 f81b 	bl	1b754 <sysinit_app>
   1b71e:	f7fd fa1d 	bl	18b5c <sysinit_end>
}
   1b722:	bd08      	pop	{r3, pc}

0001b724 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   1b724:	b570      	push	{r4, r5, r6, lr}
   1b726:	b082      	sub	sp, #8
   1b728:	460c      	mov	r4, r1
   1b72a:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   1b72c:	b29d      	uxth	r5, r3
   1b72e:	9b07      	ldr	r3, [sp, #28]
   1b730:	9300      	str	r3, [sp, #0]
   1b732:	4603      	mov	r3, r0
   1b734:	9a06      	ldr	r2, [sp, #24]
   1b736:	4629      	mov	r1, r5
   1b738:	4620      	mov	r0, r4
   1b73a:	f7fe fdeb 	bl	1a314 <os_mempool_init>
    if (rc != 0) {
   1b73e:	b108      	cbz	r0, 1b744 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1b740:	b002      	add	sp, #8
   1b742:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   1b744:	462b      	mov	r3, r5
   1b746:	9a06      	ldr	r2, [sp, #24]
   1b748:	b292      	uxth	r2, r2
   1b74a:	4621      	mov	r1, r4
   1b74c:	4630      	mov	r0, r6
   1b74e:	f7fe fc96 	bl	1a07e <os_mbuf_pool_init>
   1b752:	e7f5      	b.n	1b740 <mem_init_mbuf_pool+0x1c>

0001b754 <sysinit_app>:
void sensor_network_init(void);
void init_sensor_coap(void);

void
sysinit_app(void)
{
   1b754:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   1b756:	f7fe f9f3 	bl	19b40 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   1b75a:	f001 f985 	bl	1ca68 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
   1b75e:	f7fd f9a3 	bl	18aa8 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
   1b762:	f001 fac7 	bl	1ccf4 <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
   1b766:	f001 f9b7 	bl	1cad8 <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
   1b76a:	f001 f8e1 	bl	1c930 <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
   1b76e:	f001 f8f1 	bl	1c954 <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
   1b772:	f001 f8f0 	bl	1c956 <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
   1b776:	f001 f8ef 	bl	1c958 <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
   1b77a:	f001 f8ee 	bl	1c95a <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
   1b77e:	f001 f8ed 	bl	1c95c <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
   1b782:	f000 fbd1 	bl	1bf28 <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
   1b786:	f000 fd1f 	bl	1c1c8 <sensor_pkg_init>

    /*** Stage 620 */
    /* 620.0: temp_stub_create (libs/temp_stub) */
    temp_stub_create();
   1b78a:	f000 ff3d 	bl	1c608 <temp_stub_create>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
   1b78e:	f000 feb3 	bl	1c4f8 <sensor_network_init>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
   1b792:	f000 fe3d 	bl	1c410 <init_sensor_coap>
}
   1b796:	bd08      	pop	{r3, pc}

0001b798 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
   1b798:	b908      	cbnz	r0, 1b79e <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
   1b79a:	4802      	ldr	r0, [pc, #8]	; (1b7a4 <hal_bsp_flash_dev+0xc>)
   1b79c:	4770      	bx	lr
    }

    return NULL;
   1b79e:	2000      	movs	r0, #0
}
   1b7a0:	4770      	bx	lr
   1b7a2:	bf00      	nop
   1b7a4:	00021048 	.word	0x00021048

0001b7a8 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   1b7a8:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   1b7aa:	f7ec fd09 	bl	81c0 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   1b7ae:	f000 fbb3 	bl	1bf18 <nrf52_periph_create>
}
   1b7b2:	bd08      	pop	{r3, pc}

0001b7b4 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   1b7b4:	2300      	movs	r3, #0
   1b7b6:	4a07      	ldr	r2, [pc, #28]	; (1b7d4 <nrf52k_flash_wait_ready+0x20>)
   1b7b8:	4293      	cmp	r3, r2
   1b7ba:	dc06      	bgt.n	1b7ca <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   1b7bc:	4a06      	ldr	r2, [pc, #24]	; (1b7d8 <nrf52k_flash_wait_ready+0x24>)
   1b7be:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   1b7c2:	2a01      	cmp	r2, #1
   1b7c4:	d004      	beq.n	1b7d0 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   1b7c6:	3301      	adds	r3, #1
   1b7c8:	e7f5      	b.n	1b7b6 <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   1b7ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b7ce:	4770      	bx	lr
            return 0;
   1b7d0:	2000      	movs	r0, #0
}
   1b7d2:	4770      	bx	lr
   1b7d4:	0001869f 	.word	0x0001869f
   1b7d8:	4001e000 	.word	0x4001e000

0001b7dc <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   1b7dc:	b538      	push	{r3, r4, r5, lr}
   1b7de:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   1b7e0:	f7ff ffe8 	bl	1b7b4 <nrf52k_flash_wait_ready>
   1b7e4:	b9f0      	cbnz	r0, 1b824 <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b7e6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b7ea:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   1b7ec:	4b0f      	ldr	r3, [pc, #60]	; (1b82c <nrf52k_flash_erase_sector+0x50>)
   1b7ee:	2202      	movs	r2, #2
   1b7f0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   1b7f4:	f7ff ffde 	bl	1b7b4 <nrf52k_flash_wait_ready>
   1b7f8:	b148      	cbz	r0, 1b80e <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
   1b7fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   1b7fe:	4a0b      	ldr	r2, [pc, #44]	; (1b82c <nrf52k_flash_erase_sector+0x50>)
   1b800:	2100      	movs	r1, #0
   1b802:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1b806:	b904      	cbnz	r4, 1b80a <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   1b808:	b662      	cpsie	i
    return rc;
}
   1b80a:	4618      	mov	r0, r3
   1b80c:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   1b80e:	4b07      	ldr	r3, [pc, #28]	; (1b82c <nrf52k_flash_erase_sector+0x50>)
   1b810:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   1b814:	f7ff ffce 	bl	1b7b4 <nrf52k_flash_wait_ready>
   1b818:	4603      	mov	r3, r0
   1b81a:	2800      	cmp	r0, #0
   1b81c:	d0ef      	beq.n	1b7fe <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   1b81e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b822:	e7ec      	b.n	1b7fe <nrf52k_flash_erase_sector+0x22>
        return -1;
   1b824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b828:	e7ef      	b.n	1b80a <nrf52k_flash_erase_sector+0x2e>
   1b82a:	bf00      	nop
   1b82c:	4001e000 	.word	0x4001e000

0001b830 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   1b830:	2000      	movs	r0, #0
   1b832:	4770      	bx	lr

0001b834 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1b834:	297f      	cmp	r1, #127	; 0x7f
   1b836:	dc06      	bgt.n	1b846 <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   1b838:	0309      	lsls	r1, r1, #12
   1b83a:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   1b83c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1b840:	601a      	str	r2, [r3, #0]
}
   1b842:	2000      	movs	r0, #0
   1b844:	4770      	bx	lr
{
   1b846:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1b848:	2300      	movs	r3, #0
   1b84a:	461a      	mov	r2, r3
   1b84c:	4619      	mov	r1, r3
   1b84e:	4618      	mov	r0, r3
   1b850:	f7fe f818 	bl	19884 <__assert_func>

0001b854 <nrf52k_flash_write>:
{
   1b854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b858:	b082      	sub	sp, #8
   1b85a:	460d      	mov	r5, r1
   1b85c:	4616      	mov	r6, r2
   1b85e:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   1b860:	f7ff ffa8 	bl	1b7b4 <nrf52k_flash_wait_ready>
   1b864:	2800      	cmp	r0, #0
   1b866:	d158      	bne.n	1b91a <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b868:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b86c:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   1b86e:	4b2c      	ldr	r3, [pc, #176]	; (1b920 <nrf52k_flash_write+0xcc>)
   1b870:	2201      	movs	r2, #1
   1b872:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   1b876:	f015 0803 	ands.w	r8, r5, #3
   1b87a:	d10b      	bne.n	1b894 <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
   1b87c:	2c03      	cmp	r4, #3
   1b87e:	d925      	bls.n	1b8cc <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
   1b880:	f7ff ff98 	bl	1b7b4 <nrf52k_flash_wait_ready>
   1b884:	2800      	cmp	r0, #0
   1b886:	d139      	bne.n	1b8fc <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
   1b888:	f856 3b04 	ldr.w	r3, [r6], #4
   1b88c:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   1b890:	3c04      	subs	r4, #4
   1b892:	e7f3      	b.n	1b87c <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   1b894:	f7ff ff8e 	bl	1b7b4 <nrf52k_flash_wait_ready>
   1b898:	bb68      	cbnz	r0, 1b8f6 <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
   1b89a:	f025 0a03 	bic.w	sl, r5, #3
   1b89e:	f8da 3000 	ldr.w	r3, [sl]
   1b8a2:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   1b8a4:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   1b8a8:	45a1      	cmp	r9, r4
   1b8aa:	d900      	bls.n	1b8ae <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
   1b8ac:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   1b8ae:	464a      	mov	r2, r9
   1b8b0:	4631      	mov	r1, r6
   1b8b2:	ab01      	add	r3, sp, #4
   1b8b4:	eb03 0008 	add.w	r0, r3, r8
   1b8b8:	f7ff fbda 	bl	1b070 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   1b8bc:	9b01      	ldr	r3, [sp, #4]
   1b8be:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   1b8c2:	444d      	add	r5, r9
        num_bytes -= cnt;
   1b8c4:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   1b8c8:	444e      	add	r6, r9
   1b8ca:	e7d7      	b.n	1b87c <nrf52k_flash_write+0x28>
    if (num_bytes) {
   1b8cc:	b164      	cbz	r4, 1b8e8 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   1b8ce:	682b      	ldr	r3, [r5, #0]
   1b8d0:	a802      	add	r0, sp, #8
   1b8d2:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
   1b8d6:	4622      	mov	r2, r4
   1b8d8:	4631      	mov	r1, r6
   1b8da:	f7ff fbc9 	bl	1b070 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   1b8de:	f7ff ff69 	bl	1b7b4 <nrf52k_flash_wait_ready>
   1b8e2:	b9b8      	cbnz	r0, 1b914 <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
   1b8e4:	9b01      	ldr	r3, [sp, #4]
   1b8e6:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   1b8e8:	f7ff ff64 	bl	1b7b4 <nrf52k_flash_wait_ready>
   1b8ec:	4603      	mov	r3, r0
   1b8ee:	b138      	cbz	r0, 1b900 <nrf52k_flash_write+0xac>
        rc = -1;
   1b8f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b8f4:	e004      	b.n	1b900 <nrf52k_flash_write+0xac>
    int rc = -1;
   1b8f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b8fa:	e001      	b.n	1b900 <nrf52k_flash_write+0xac>
   1b8fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   1b900:	4a07      	ldr	r2, [pc, #28]	; (1b920 <nrf52k_flash_write+0xcc>)
   1b902:	2100      	movs	r1, #0
   1b904:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1b908:	b907      	cbnz	r7, 1b90c <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
   1b90a:	b662      	cpsie	i
}
   1b90c:	4618      	mov	r0, r3
   1b90e:	b002      	add	sp, #8
   1b910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   1b914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b918:	e7f2      	b.n	1b900 <nrf52k_flash_write+0xac>
        return -1;
   1b91a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b91e:	e7f5      	b.n	1b90c <nrf52k_flash_write+0xb8>
   1b920:	4001e000 	.word	0x4001e000

0001b924 <nrf52k_flash_read>:
{
   1b924:	b508      	push	{r3, lr}
   1b926:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   1b928:	461a      	mov	r2, r3
   1b92a:	f7ff fba1 	bl	1b070 <memcpy>
}
   1b92e:	2000      	movs	r0, #0
   1b930:	bd08      	pop	{r3, pc}
	...

0001b934 <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   1b934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   1b936:	f7ff fa3b 	bl	1adb0 <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   1b93a:	4b31      	ldr	r3, [pc, #196]	; (1ba00 <nrf52_timer_handler+0xcc>)
   1b93c:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   1b940:	4b30      	ldr	r3, [pc, #192]	; (1ba04 <nrf52_timer_handler+0xd0>)
   1b942:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
   1b944:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   1b948:	d225      	bcs.n	1b996 <nrf52_timer_handler+0x62>
   1b94a:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   1b94c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1b950:	d227      	bcs.n	1b9a2 <nrf52_timer_handler+0x6e>
    result = x - y;
   1b952:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
   1b954:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   1b958:	d129      	bne.n	1b9ae <nrf52_timer_handler+0x7a>
        return (result & 0x007fffff);
   1b95a:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   1b95e:	4f29      	ldr	r7, [pc, #164]	; (1ba04 <nrf52_timer_handler+0xd0>)
   1b960:	683c      	ldr	r4, [r7, #0]
   1b962:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
   1b966:	4628      	mov	r0, r5
   1b968:	f7ff f9b0 	bl	1accc <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1b96c:	4b24      	ldr	r3, [pc, #144]	; (1ba00 <nrf52_timer_handler+0xcc>)
   1b96e:	2200      	movs	r2, #0
   1b970:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1b974:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1b976:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1b978:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1b97c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1b980:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   1b982:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   1b984:	f7ff fa1d 	bl	1adc2 <os_arch_in_critical>
   1b988:	bb28      	cbnz	r0, 1b9d6 <nrf52_timer_handler+0xa2>
   1b98a:	2300      	movs	r3, #0
   1b98c:	461a      	mov	r2, r3
   1b98e:	4619      	mov	r1, r3
   1b990:	4618      	mov	r0, r3
   1b992:	f7fd ff77 	bl	19884 <__assert_func>
    assert(x <= 0xffffff);
   1b996:	2300      	movs	r3, #0
   1b998:	461a      	mov	r2, r3
   1b99a:	4619      	mov	r1, r3
   1b99c:	4618      	mov	r0, r3
   1b99e:	f7fd ff71 	bl	19884 <__assert_func>
    assert(y <= 0xffffff);
   1b9a2:	2300      	movs	r3, #0
   1b9a4:	461a      	mov	r2, r3
   1b9a6:	4619      	mov	r1, r3
   1b9a8:	4618      	mov	r0, r3
   1b9aa:	f7fd ff6b 	bl	19884 <__assert_func>
        return (result | 0xff800000);
   1b9ae:	ea6f 2545 	mvn.w	r5, r5, lsl #9
   1b9b2:	ea6f 2555 	mvn.w	r5, r5, lsr #9
   1b9b6:	e7d2      	b.n	1b95e <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
   1b9b8:	2300      	movs	r3, #0
   1b9ba:	461a      	mov	r2, r3
   1b9bc:	4619      	mov	r1, r3
   1b9be:	4618      	mov	r0, r3
   1b9c0:	f7fd ff60 	bl	19884 <__assert_func>
        return (result | 0xff800000);
   1b9c4:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   1b9c8:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
   1b9cc:	2a02      	cmp	r2, #2
   1b9ce:	dc13      	bgt.n	1b9f8 <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1b9d0:	4a0c      	ldr	r2, [pc, #48]	; (1ba04 <nrf52_timer_handler+0xd0>)
   1b9d2:	6814      	ldr	r4, [r2, #0]
   1b9d4:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   1b9d6:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1b9da:	4a09      	ldr	r2, [pc, #36]	; (1ba00 <nrf52_timer_handler+0xcc>)
   1b9dc:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1b9e0:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   1b9e4:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1b9e8:	d2e6      	bcs.n	1b9b8 <nrf52_timer_handler+0x84>
    result = x - y;
   1b9ea:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   1b9ec:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1b9f0:	d1e8      	bne.n	1b9c4 <nrf52_timer_handler+0x90>
        return (result & 0x007fffff);
   1b9f2:	f3c2 0216 	ubfx	r2, r2, #0, #23
   1b9f6:	e7e9      	b.n	1b9cc <nrf52_timer_handler+0x98>

    OS_EXIT_CRITICAL(sr);
   1b9f8:	4630      	mov	r0, r6
   1b9fa:	f7ff f9df 	bl	1adbc <os_arch_restore_sr>
    os_trace_isr_exit();
}
   1b9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ba00:	40011000 	.word	0x40011000
   1ba04:	2000a674 	.word	0x2000a674

0001ba08 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   1ba08:	b538      	push	{r3, r4, r5, lr}
   1ba0a:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   1ba0c:	f7ff f9d9 	bl	1adc2 <os_arch_in_critical>
   1ba10:	b1a0      	cbz	r0, 1ba3c <os_tick_idle+0x34>

    if (ticks > 0) {
   1ba12:	2d00      	cmp	r5, #0
   1ba14:	d038      	beq.n	1ba88 <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   1ba16:	4b20      	ldr	r3, [pc, #128]	; (1ba98 <os_tick_idle+0x90>)
   1ba18:	685b      	ldr	r3, [r3, #4]
   1ba1a:	42ab      	cmp	r3, r5
   1ba1c:	d200      	bcs.n	1ba20 <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   1ba1e:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   1ba20:	4b1d      	ldr	r3, [pc, #116]	; (1ba98 <os_tick_idle+0x90>)
   1ba22:	689c      	ldr	r4, [r3, #8]
   1ba24:	681a      	ldr	r2, [r3, #0]
   1ba26:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   1ba2a:	f7ff f9ca 	bl	1adc2 <os_arch_in_critical>
   1ba2e:	b9d0      	cbnz	r0, 1ba66 <os_tick_idle+0x5e>
   1ba30:	2300      	movs	r3, #0
   1ba32:	461a      	mov	r2, r3
   1ba34:	4619      	mov	r1, r3
   1ba36:	4618      	mov	r0, r3
   1ba38:	f7fd ff24 	bl	19884 <__assert_func>
    OS_ASSERT_CRITICAL();
   1ba3c:	2300      	movs	r3, #0
   1ba3e:	461a      	mov	r2, r3
   1ba40:	4619      	mov	r1, r3
   1ba42:	4618      	mov	r0, r3
   1ba44:	f7fd ff1e 	bl	19884 <__assert_func>
    assert(y <= 0xffffff);
   1ba48:	2300      	movs	r3, #0
   1ba4a:	461a      	mov	r2, r3
   1ba4c:	4619      	mov	r1, r3
   1ba4e:	4618      	mov	r0, r3
   1ba50:	f7fd ff18 	bl	19884 <__assert_func>
        return (result | 0xff800000);
   1ba54:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1ba58:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
   1ba5c:	2b02      	cmp	r3, #2
   1ba5e:	dc13      	bgt.n	1ba88 <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1ba60:	4b0d      	ldr	r3, [pc, #52]	; (1ba98 <os_tick_idle+0x90>)
   1ba62:	681c      	ldr	r4, [r3, #0]
   1ba64:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1ba66:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1ba6a:	4b0c      	ldr	r3, [pc, #48]	; (1ba9c <os_tick_idle+0x94>)
   1ba6c:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1ba70:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   1ba74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1ba78:	d2e6      	bcs.n	1ba48 <os_tick_idle+0x40>
    result = x - y;
   1ba7a:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   1ba7c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1ba80:	d1e8      	bne.n	1ba54 <os_tick_idle+0x4c>
        return (result & 0x007fffff);
   1ba82:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1ba86:	e7e9      	b.n	1ba5c <os_tick_idle+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
   1ba88:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   1ba8c:	bf30      	wfi

    if (ticks > 0) {
   1ba8e:	b905      	cbnz	r5, 1ba92 <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   1ba90:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   1ba92:	f7ff ff4f 	bl	1b934 <nrf52_timer_handler>
}
   1ba96:	e7fb      	b.n	1ba90 <os_tick_idle+0x88>
   1ba98:	2000a674 	.word	0x2000a674
   1ba9c:	40011000 	.word	0x40011000

0001baa0 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   1baa0:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1baa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1baa6:	fbb3 f3f0 	udiv	r3, r3, r0
   1baaa:	fb00 f303 	mul.w	r3, r0, r3
   1baae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1bab2:	d136      	bne.n	1bb22 <os_tick_init+0x82>
   1bab4:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   1bab6:	4d1e      	ldr	r5, [pc, #120]	; (1bb30 <os_tick_init+0x90>)
   1bab8:	2600      	movs	r6, #0
   1baba:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   1babc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1bac0:	fbb3 f0f0 	udiv	r0, r3, r0
   1bac4:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1bac6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1baca:	fbb3 f0f0 	udiv	r0, r3, r0
   1bace:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1bad0:	f7ff f96e 	bl	1adb0 <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bad4:	0164      	lsls	r4, r4, #5
   1bad6:	b2e4      	uxtb	r4, r4
   1bad8:	4b16      	ldr	r3, [pc, #88]	; (1bb34 <os_tick_init+0x94>)
   1bada:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1bade:	4a16      	ldr	r2, [pc, #88]	; (1bb38 <os_tick_init+0x98>)
   1bae0:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1bae2:	4916      	ldr	r1, [pc, #88]	; (1bb3c <os_tick_init+0x9c>)
   1bae4:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bae8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1baec:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1baee:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1baf2:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1baf6:	2201      	movs	r2, #1
   1baf8:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   1bafa:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1bafc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1bb00:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   1bb04:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1bb08:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1bb0c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1bb10:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1bb14:	6829      	ldr	r1, [r5, #0]
   1bb16:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   1bb1a:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   1bb1c:	f7ff f94e 	bl	1adbc <os_arch_restore_sr>
}
   1bb20:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1bb22:	2300      	movs	r3, #0
   1bb24:	461a      	mov	r2, r3
   1bb26:	4619      	mov	r1, r3
   1bb28:	4618      	mov	r0, r3
   1bb2a:	f7fd feab 	bl	19884 <__assert_func>
   1bb2e:	bf00      	nop
   1bb30:	2000a674 	.word	0x2000a674
   1bb34:	e000e100 	.word	0xe000e100
   1bb38:	e000ed00 	.word	0xe000ed00
   1bb3c:	0001b935 	.word	0x0001b935

0001bb40 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1bb40:	2301      	movs	r3, #1
   1bb42:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1bb44:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   1bb48:	4770      	bx	lr
	...

0001bb4c <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   1bb4c:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   1bb4e:	7883      	ldrb	r3, [r0, #2]
   1bb50:	b393      	cbz	r3, 1bbb8 <nrf_timer_set_ocmp+0x6c>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1bb52:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1bb54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1bb58:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   1bb5c:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   1bb5e:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1bb62:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1bb66:	b11d      	cbz	r5, 1bb70 <nrf_timer_set_ocmp+0x24>
            temp += (1UL << 24);
   1bb68:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   1bb6c:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   1bb70:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
   1bb72:	1acb      	subs	r3, r1, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   1bb74:	2b02      	cmp	r3, #2
   1bb76:	dc0e      	bgt.n	1bb96 <nrf_timer_set_ocmp+0x4a>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1bb78:	7842      	ldrb	r2, [r0, #1]
   1bb7a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1bb7c:	2b00      	cmp	r3, #0
   1bb7e:	db15      	blt.n	1bbac <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bb80:	f002 021f 	and.w	r2, r2, #31
   1bb84:	095b      	lsrs	r3, r3, #5
   1bb86:	2101      	movs	r1, #1
   1bb88:	fa01 f202 	lsl.w	r2, r1, r2
   1bb8c:	3340      	adds	r3, #64	; 0x40
   1bb8e:	491b      	ldr	r1, [pc, #108]	; (1bbfc <nrf_timer_set_ocmp+0xb0>)
   1bb90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1bb94:	e00a      	b.n	1bbac <nrf_timer_set_ocmp+0x60>
        } else  {
            if (delta_t < (1UL << 24)) {
   1bb96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1bb9a:	d208      	bcs.n	1bbae <nrf_timer_set_ocmp+0x62>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1bb9c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1bba0:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1bba4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1bba8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   1bbac:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1bbae:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
   1bbb2:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
   1bbb6:	e7f5      	b.n	1bba4 <nrf_timer_set_ocmp+0x58>
   1bbb8:	460d      	mov	r5, r1
   1bbba:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
   1bbbc:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1bbbe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1bbc2:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   1bbc6:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1bbca:	2200      	movs	r2, #0
   1bbcc:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1bbd0:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1bbd4:	f7ff ffb4 	bl	1bb40 <nrf_read_timer_cntr>
   1bbd8:	1b40      	subs	r0, r0, r5
   1bbda:	2800      	cmp	r0, #0
   1bbdc:	dbe6      	blt.n	1bbac <nrf_timer_set_ocmp+0x60>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1bbde:	7862      	ldrb	r2, [r4, #1]
   1bbe0:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1bbe2:	2b00      	cmp	r3, #0
   1bbe4:	dbe2      	blt.n	1bbac <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bbe6:	f002 021f 	and.w	r2, r2, #31
   1bbea:	095b      	lsrs	r3, r3, #5
   1bbec:	2101      	movs	r1, #1
   1bbee:	fa01 f202 	lsl.w	r2, r1, r2
   1bbf2:	3340      	adds	r3, #64	; 0x40
   1bbf4:	4901      	ldr	r1, [pc, #4]	; (1bbfc <nrf_timer_set_ocmp+0xb0>)
   1bbf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1bbfa:	e7d7      	b.n	1bbac <nrf_timer_set_ocmp+0x60>
   1bbfc:	e000e100 	.word	0xe000e100

0001bc00 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1bc00:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1bc04:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1bc08:	4770      	bx	lr

0001bc0a <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1bc0a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1bc0e:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1bc12:	4770      	bx	lr

0001bc14 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1bc14:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1bc16:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1bc18:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1bc1c:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   1bc1e:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   1bc20:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1bc24:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1bc28:	b1ad      	cbz	r5, 1bc56 <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
   1bc2a:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   1bc2e:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   1bc30:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1bc34:	2500      	movs	r5, #0
   1bc36:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1bc3a:	7840      	ldrb	r0, [r0, #1]
   1bc3c:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
   1bc3e:	42aa      	cmp	r2, r5
   1bc40:	db09      	blt.n	1bc56 <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bc42:	f000 001f 	and.w	r0, r0, #31
   1bc46:	0952      	lsrs	r2, r2, #5
   1bc48:	2501      	movs	r5, #1
   1bc4a:	fa05 f000 	lsl.w	r0, r5, r0
   1bc4e:	3240      	adds	r2, #64	; 0x40
   1bc50:	4d04      	ldr	r5, [pc, #16]	; (1bc64 <hal_timer_read_bsptimer+0x50>)
   1bc52:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
   1bc56:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   1bc5a:	b904      	cbnz	r4, 1bc5e <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
   1bc5c:	b662      	cpsie	i

    return tcntr;
}
   1bc5e:	bc30      	pop	{r4, r5}
   1bc60:	4770      	bx	lr
   1bc62:	bf00      	nop
   1bc64:	e000e100 	.word	0xe000e100

0001bc68 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   1bc68:	b570      	push	{r4, r5, r6, lr}
   1bc6a:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1bc6c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1bc70:	b672      	cpsid	i
   1bc72:	e013      	b.n	1bc9c <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1bc74:	6928      	ldr	r0, [r5, #16]
   1bc76:	f7ff ff63 	bl	1bb40 <nrf_read_timer_cntr>
            delta = 0;
   1bc7a:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   1bc7c:	68e3      	ldr	r3, [r4, #12]
   1bc7e:	1ac0      	subs	r0, r0, r3
   1bc80:	4290      	cmp	r0, r2
   1bc82:	db19      	blt.n	1bcb8 <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1bc84:	6923      	ldr	r3, [r4, #16]
   1bc86:	b1a3      	cbz	r3, 1bcb2 <hal_timer_chk_queue+0x4a>
   1bc88:	6962      	ldr	r2, [r4, #20]
   1bc8a:	615a      	str	r2, [r3, #20]
   1bc8c:	6963      	ldr	r3, [r4, #20]
   1bc8e:	6922      	ldr	r2, [r4, #16]
   1bc90:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1bc92:	2300      	movs	r3, #0
   1bc94:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1bc96:	6863      	ldr	r3, [r4, #4]
   1bc98:	68a0      	ldr	r0, [r4, #8]
   1bc9a:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   1bc9c:	696c      	ldr	r4, [r5, #20]
   1bc9e:	b15c      	cbz	r4, 1bcb8 <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   1bca0:	78ab      	ldrb	r3, [r5, #2]
   1bca2:	2b00      	cmp	r3, #0
   1bca4:	d0e6      	beq.n	1bc74 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1bca6:	4628      	mov	r0, r5
   1bca8:	f7ff ffb4 	bl	1bc14 <hal_timer_read_bsptimer>
            delta = -3;
   1bcac:	f06f 0202 	mvn.w	r2, #2
   1bcb0:	e7e4      	b.n	1bc7c <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1bcb2:	6963      	ldr	r3, [r4, #20]
   1bcb4:	61ab      	str	r3, [r5, #24]
   1bcb6:	e7e9      	b.n	1bc8c <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1bcb8:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   1bcba:	b133      	cbz	r3, 1bcca <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1bcbc:	68d9      	ldr	r1, [r3, #12]
   1bcbe:	4628      	mov	r0, r5
   1bcc0:	f7ff ff44 	bl	1bb4c <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   1bcc4:	b906      	cbnz	r6, 1bcc8 <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1bcc6:	b662      	cpsie	i
}
   1bcc8:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   1bcca:	78ab      	ldrb	r3, [r5, #2]
   1bccc:	b11b      	cbz	r3, 1bcd6 <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1bcce:	6928      	ldr	r0, [r5, #16]
   1bcd0:	f7ff ff9b 	bl	1bc0a <nrf_rtc_disable_ocmp>
   1bcd4:	e7f6      	b.n	1bcc4 <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1bcd6:	6928      	ldr	r0, [r5, #16]
   1bcd8:	f7ff ff92 	bl	1bc00 <nrf_timer_disable_ocmp>
   1bcdc:	e7f2      	b.n	1bcc4 <hal_timer_chk_queue+0x5c>

0001bcde <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1bcde:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   1bce0:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1bce2:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   1bce6:	b113      	cbz	r3, 1bcee <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1bce8:	2300      	movs	r3, #0
   1bcea:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1bcee:	6883      	ldr	r3, [r0, #8]
   1bcf0:	3301      	adds	r3, #1
   1bcf2:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   1bcf4:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   1bcf8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   1bcfc:	d100      	bne.n	1bd00 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   1bcfe:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   1bd00:	f7ff ffb2 	bl	1bc68 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1bd04:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   1bd08:	e7f9      	b.n	1bcfe <hal_timer_irq_handler+0x20>
	...

0001bd0c <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   1bd0c:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   1bd0e:	4802      	ldr	r0, [pc, #8]	; (1bd18 <nrf52_timer0_irq_handler+0xc>)
   1bd10:	f7ff ffe5 	bl	1bcde <hal_timer_irq_handler>
}
   1bd14:	bd08      	pop	{r3, pc}
   1bd16:	bf00      	nop
   1bd18:	2000a680 	.word	0x2000a680

0001bd1c <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1bd1c:	2805      	cmp	r0, #5
   1bd1e:	dc1c      	bgt.n	1bd5a <hal_timer_init+0x3e>
   1bd20:	4b12      	ldr	r3, [pc, #72]	; (1bd6c <hal_timer_init+0x50>)
   1bd22:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1bd26:	b1d3      	cbz	r3, 1bd5e <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1bd28:	781a      	ldrb	r2, [r3, #0]
   1bd2a:	b9d2      	cbnz	r2, 1bd62 <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   1bd2c:	b9d8      	cbnz	r0, 1bd66 <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1bd2e:	4a10      	ldr	r2, [pc, #64]	; (1bd70 <hal_timer_init+0x54>)
   1bd30:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1bd32:	2208      	movs	r2, #8
   1bd34:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bd36:	4b0f      	ldr	r3, [pc, #60]	; (1bd74 <hal_timer_init+0x58>)
   1bd38:	f44f 7280 	mov.w	r2, #256	; 0x100
   1bd3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1bd40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1bd44:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bd48:	22e0      	movs	r2, #224	; 0xe0
   1bd4a:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1bd4e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1bd52:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1bd54:	4a08      	ldr	r2, [pc, #32]	; (1bd78 <hal_timer_init+0x5c>)
   1bd56:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   1bd58:	4770      	bx	lr

err:
    return rc;
   1bd5a:	2016      	movs	r0, #22
   1bd5c:	4770      	bx	lr
   1bd5e:	2016      	movs	r0, #22
   1bd60:	4770      	bx	lr
   1bd62:	2016      	movs	r0, #22
   1bd64:	4770      	bx	lr
   1bd66:	2016      	movs	r0, #22
}
   1bd68:	4770      	bx	lr
   1bd6a:	bf00      	nop
   1bd6c:	0002107c 	.word	0x0002107c
   1bd70:	40008000 	.word	0x40008000
   1bd74:	e000e100 	.word	0xe000e100
   1bd78:	0001bd0d 	.word	0x0001bd0d

0001bd7c <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1bd7c:	2805      	cmp	r0, #5
   1bd7e:	dc65      	bgt.n	1be4c <hal_timer_config+0xd0>
   1bd80:	4b39      	ldr	r3, [pc, #228]	; (1be68 <hal_timer_config+0xec>)
   1bd82:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1bd86:	2800      	cmp	r0, #0
   1bd88:	d062      	beq.n	1be50 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   1bd8a:	4b38      	ldr	r3, [pc, #224]	; (1be6c <hal_timer_config+0xf0>)
   1bd8c:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1bd90:	7803      	ldrb	r3, [r0, #0]
   1bd92:	2b00      	cmp	r3, #0
   1bd94:	d15e      	bne.n	1be54 <hal_timer_config+0xd8>
   1bd96:	2900      	cmp	r1, #0
   1bd98:	d05e      	beq.n	1be58 <hal_timer_config+0xdc>
   1bd9a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1bd9e:	d85d      	bhi.n	1be5c <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
   1bda0:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1bda2:	2a00      	cmp	r2, #0
   1bda4:	d05c      	beq.n	1be60 <hal_timer_config+0xe4>
{
   1bda6:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1bda8:	2901      	cmp	r1, #1
   1bdaa:	d013      	beq.n	1bdd4 <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1bdac:	2301      	movs	r3, #1
   1bdae:	2b09      	cmp	r3, #9
   1bdb0:	d810      	bhi.n	1bdd4 <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
   1bdb2:	2201      	movs	r2, #1
   1bdb4:	409a      	lsls	r2, r3
   1bdb6:	428a      	cmp	r2, r1
   1bdb8:	d202      	bcs.n	1bdc0 <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1bdba:	3301      	adds	r3, #1
   1bdbc:	b2db      	uxtb	r3, r3
   1bdbe:	e7f6      	b.n	1bdae <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
   1bdc0:	1e5c      	subs	r4, r3, #1
   1bdc2:	2501      	movs	r5, #1
   1bdc4:	fa05 f404 	lsl.w	r4, r5, r4
   1bdc8:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
   1bdca:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
   1bdcc:	428c      	cmp	r4, r1
   1bdce:	d201      	bcs.n	1bdd4 <hal_timer_config+0x58>
                    prescaler -= 1;
   1bdd0:	3b01      	subs	r3, #1
   1bdd2:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1bdd4:	4a25      	ldr	r2, [pc, #148]	; (1be6c <hal_timer_config+0xf0>)
   1bdd6:	411a      	asrs	r2, r3
   1bdd8:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
   1bdda:	2201      	movs	r2, #1
   1bddc:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1bdde:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1bde2:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1bde4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1bde8:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   1bdec:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1bdf0:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1bdf4:	d00c      	beq.n	1be10 <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1bdf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1bdfa:	2100      	movs	r1, #0
   1bdfc:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1be00:	2101      	movs	r1, #1
   1be02:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1be04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1be08:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1be0c:	2a00      	cmp	r2, #0
   1be0e:	d0f9      	beq.n	1be04 <hal_timer_config+0x88>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1be10:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1be12:	2101      	movs	r1, #1
   1be14:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   1be16:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1be18:	2500      	movs	r5, #0
   1be1a:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1be1e:	2503      	movs	r5, #3
   1be20:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1be24:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1be28:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1be2a:	7842      	ldrb	r2, [r0, #1]
   1be2c:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1be2e:	2b00      	cmp	r3, #0
   1be30:	db07      	blt.n	1be42 <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1be32:	f002 021f 	and.w	r2, r2, #31
   1be36:	095b      	lsrs	r3, r3, #5
   1be38:	fa01 f202 	lsl.w	r2, r1, r2
   1be3c:	490c      	ldr	r1, [pc, #48]	; (1be70 <hal_timer_config+0xf4>)
   1be3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1be42:	b97c      	cbnz	r4, 1be64 <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
   1be44:	b662      	cpsie	i

    return 0;
   1be46:	2000      	movs	r0, #0

err:
    return rc;
}
   1be48:	bc30      	pop	{r4, r5}
   1be4a:	4770      	bx	lr
    return rc;
   1be4c:	2016      	movs	r0, #22
   1be4e:	4770      	bx	lr
   1be50:	2016      	movs	r0, #22
   1be52:	4770      	bx	lr
   1be54:	2016      	movs	r0, #22
   1be56:	4770      	bx	lr
   1be58:	2016      	movs	r0, #22
   1be5a:	4770      	bx	lr
   1be5c:	2016      	movs	r0, #22
   1be5e:	4770      	bx	lr
   1be60:	2016      	movs	r0, #22
}
   1be62:	4770      	bx	lr
    return 0;
   1be64:	2000      	movs	r0, #0
   1be66:	e7ef      	b.n	1be48 <hal_timer_config+0xcc>
   1be68:	0002107c 	.word	0x0002107c
   1be6c:	00f42400 	.word	0x00f42400
   1be70:	e000e100 	.word	0xe000e100

0001be74 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   1be74:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1be76:	2805      	cmp	r0, #5
   1be78:	dc0c      	bgt.n	1be94 <hal_timer_read+0x20>
   1be7a:	4b09      	ldr	r3, [pc, #36]	; (1bea0 <hal_timer_read+0x2c>)
   1be7c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1be80:	b140      	cbz	r0, 1be94 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   1be82:	7883      	ldrb	r3, [r0, #2]
   1be84:	b91b      	cbnz	r3, 1be8e <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1be86:	6900      	ldr	r0, [r0, #16]
   1be88:	f7ff fe5a 	bl	1bb40 <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   1be8c:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   1be8e:	f7ff fec1 	bl	1bc14 <hal_timer_read_bsptimer>
   1be92:	e7fb      	b.n	1be8c <hal_timer_read+0x18>
    assert(0);
   1be94:	2300      	movs	r3, #0
   1be96:	461a      	mov	r2, r3
   1be98:	4619      	mov	r1, r3
   1be9a:	4618      	mov	r0, r3
   1be9c:	f7fd fcf2 	bl	19884 <__assert_func>
   1bea0:	0002107c 	.word	0x0002107c

0001bea4 <nrf52_periph_create_timers>:
};
#endif

static void
nrf52_periph_create_timers(void)
{
   1bea4:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   1bea6:	2100      	movs	r1, #0
   1bea8:	4608      	mov	r0, r1
   1beaa:	f7ff ff37 	bl	1bd1c <hal_timer_init>
    assert(rc == 0);
   1beae:	b920      	cbnz	r0, 1beba <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1beb0:	4808      	ldr	r0, [pc, #32]	; (1bed4 <nrf52_periph_create_timers+0x30>)
   1beb2:	f7fd ff11 	bl	19cd8 <os_cputime_init>
    assert(rc == 0);
   1beb6:	b930      	cbnz	r0, 1bec6 <nrf52_periph_create_timers+0x22>
#endif
}
   1beb8:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1beba:	2300      	movs	r3, #0
   1bebc:	461a      	mov	r2, r3
   1bebe:	4619      	mov	r1, r3
   1bec0:	4618      	mov	r0, r3
   1bec2:	f7fd fcdf 	bl	19884 <__assert_func>
    assert(rc == 0);
   1bec6:	2300      	movs	r3, #0
   1bec8:	461a      	mov	r2, r3
   1beca:	4619      	mov	r1, r3
   1becc:	4618      	mov	r0, r3
   1bece:	f7fd fcd9 	bl	19884 <__assert_func>
   1bed2:	bf00      	nop
   1bed4:	000f4240 	.word	0x000f4240

0001bed8 <nrf52_periph_create_i2c>:
#endif
}

static void
nrf52_periph_create_i2c(void)
{
   1bed8:	b508      	push	{r3, lr}
    rc = bus_i2c_hal_dev_create("i2c1", &i2c1_bus,
                                (struct bus_i2c_dev_cfg *)&i2c1_cfg);
    assert(rc == 0);
#endif
#else
    rc = hal_i2c_init(1, (void *)&hal_i2c1_cfg);
   1beda:	4906      	ldr	r1, [pc, #24]	; (1bef4 <nrf52_periph_create_i2c+0x1c>)
   1bedc:	2001      	movs	r0, #1
   1bede:	f7fd f82b 	bl	18f38 <hal_i2c_init>
    assert(rc == 0);
   1bee2:	b900      	cbnz	r0, 1bee6 <nrf52_periph_create_i2c+0xe>
#endif
#endif
}
   1bee4:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1bee6:	2300      	movs	r3, #0
   1bee8:	461a      	mov	r2, r3
   1beea:	4619      	mov	r1, r3
   1beec:	4618      	mov	r0, r3
   1beee:	f7fd fcc9 	bl	19884 <__assert_func>
   1bef2:	bf00      	nop
   1bef4:	00021094 	.word	0x00021094

0001bef8 <nrf52_periph_create_spi>:

static void
nrf52_periph_create_spi(void)
{
   1bef8:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   1befa:	2200      	movs	r2, #0
   1befc:	4905      	ldr	r1, [pc, #20]	; (1bf14 <nrf52_periph_create_spi+0x1c>)
   1befe:	4610      	mov	r0, r2
   1bf00:	f7fd fb4e 	bl	195a0 <hal_spi_init>
    assert(rc == 0);
   1bf04:	b900      	cbnz	r0, 1bf08 <nrf52_periph_create_spi+0x10>
#endif
#if MYNEWT_VAL(SPI_2_SLAVE)
    rc = hal_spi_init(2, (void *)&os_bsp_spi2s_cfg, HAL_SPI_TYPE_SLAVE);
    assert(rc == 0);
#endif
}
   1bf06:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1bf08:	2300      	movs	r3, #0
   1bf0a:	461a      	mov	r2, r3
   1bf0c:	4619      	mov	r1, r3
   1bf0e:	4618      	mov	r0, r3
   1bf10:	f7fd fcb8 	bl	19884 <__assert_func>
   1bf14:	000210a0 	.word	0x000210a0

0001bf18 <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   1bf18:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   1bf1a:	f7ff ffc3 	bl	1bea4 <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
   1bf1e:	f7ff ffdb 	bl	1bed8 <nrf52_periph_create_i2c>
    nrf52_periph_create_spi();
   1bf22:	f7ff ffe9 	bl	1bef8 <nrf52_periph_create_spi>
}
   1bf26:	bd08      	pop	{r3, pc}

0001bf28 <sensor_dev_create>:
    assert(rc == 0);

    rc = config_icp10114_sensor();
    assert(rc == 0);
#endif
}
   1bf28:	4770      	bx	lr
	...

0001bf2c <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
   1bf2c:	4b08      	ldr	r3, [pc, #32]	; (1bf50 <sensor_mgr_remove+0x24>)
   1bf2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1bf30:	4282      	cmp	r2, r0
   1bf32:	d104      	bne.n	1bf3e <sensor_mgr_remove+0x12>
   1bf34:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
   1bf38:	631a      	str	r2, [r3, #48]	; 0x30
   1bf3a:	4770      	bx	lr
   1bf3c:	461a      	mov	r2, r3
   1bf3e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1bf42:	4283      	cmp	r3, r0
   1bf44:	d1fa      	bne.n	1bf3c <sensor_mgr_remove+0x10>
   1bf46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1bf4a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
   1bf4e:	4770      	bx	lr
   1bf50:	2000a6a0 	.word	0x2000a6a0

0001bf54 <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
   1bf54:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
   1bf56:	6a03      	ldr	r3, [r0, #32]
   1bf58:	b993      	cbnz	r3, 1bf80 <sensor_mgr_insert+0x2c>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1bf5a:	4b15      	ldr	r3, [pc, #84]	; (1bfb0 <sensor_mgr_insert+0x5c>)
   1bf5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1bf5e:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1bf60:	e002      	b.n	1bf68 <sensor_mgr_insert+0x14>
            prev = cursor;
   1bf62:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1bf64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1bf68:	2b00      	cmp	r3, #0
   1bf6a:	d1fa      	bne.n	1bf62 <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
   1bf6c:	b1c9      	cbz	r1, 1bfa2 <sensor_mgr_insert+0x4e>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
   1bf6e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   1bf72:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
   1bf76:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
   1bf7a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1bf7e:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1bf80:	4b0b      	ldr	r3, [pc, #44]	; (1bfb0 <sensor_mgr_insert+0x5c>)
   1bf82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1bf84:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1bf86:	2b00      	cmp	r3, #0
   1bf88:	d0f0      	beq.n	1bf6c <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
   1bf8a:	6a1a      	ldr	r2, [r3, #32]
   1bf8c:	2a00      	cmp	r2, #0
   1bf8e:	d0ed      	beq.n	1bf6c <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
   1bf90:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1bf92:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1bf94:	1b12      	subs	r2, r2, r4
   1bf96:	2a00      	cmp	r2, #0
   1bf98:	dbe8      	blt.n	1bf6c <sensor_mgr_insert+0x18>
        prev = cursor;
   1bf9a:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1bf9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1bfa0:	e7f1      	b.n	1bf86 <sensor_mgr_insert+0x32>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
   1bfa2:	4b03      	ldr	r3, [pc, #12]	; (1bfb0 <sensor_mgr_insert+0x5c>)
   1bfa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1bfa6:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   1bfaa:	6318      	str	r0, [r3, #48]	; 0x30
   1bfac:	e7e5      	b.n	1bf7a <sensor_mgr_insert+0x26>
   1bfae:	bf00      	nop
   1bfb0:	2000a6a0 	.word	0x2000a6a0

0001bfb4 <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
   1bfb4:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
   1bfb6:	fab0 f080 	clz	r0, r0
   1bfba:	0940      	lsrs	r0, r0, #5
   1bfbc:	4770      	bx	lr
	...

0001bfc0 <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
   1bfc0:	4b01      	ldr	r3, [pc, #4]	; (1bfc8 <sensor_mgr_evq_set+0x8>)
   1bfc2:	62d8      	str	r0, [r3, #44]	; 0x2c
}
   1bfc4:	4770      	bx	lr
   1bfc6:	bf00      	nop
   1bfc8:	2000a6a0 	.word	0x2000a6a0

0001bfcc <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
   1bfcc:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
   1bfd0:	e9d1 2300 	ldrd	r2, r3, [r1]
   1bfd4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1bfd8:	ea02 0b04 	and.w	fp, r2, r4
   1bfdc:	ea03 0c05 	and.w	ip, r3, r5
   1bfe0:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
   1bfe4:	ea0b 0200 	and.w	r2, fp, r0
   1bfe8:	ea0c 0301 	and.w	r3, ip, r1
   1bfec:	4313      	orrs	r3, r2
}
   1bfee:	bf14      	ite	ne
   1bff0:	2001      	movne	r0, #1
   1bff2:	2000      	moveq	r0, #0
   1bff4:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1bff8:	4770      	bx	lr

0001bffa <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
   1bffa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bffe:	b083      	sub	sp, #12
   1c000:	4605      	mov	r5, r0
   1c002:	4689      	mov	r9, r1
   1c004:	4690      	mov	r8, r2
   1c006:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
   1c00a:	790b      	ldrb	r3, [r1, #4]
   1c00c:	2b01      	cmp	r3, #1
   1c00e:	d013      	beq.n	1c038 <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
   1c010:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   1c012:	e000      	b.n	1c016 <sensor_read_data_func+0x1c>
   1c014:	6924      	ldr	r4, [r4, #16]
   1c016:	b17c      	cbz	r4, 1c038 <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
   1c018:	e9d4 0100 	ldrd	r0, r1, [r4]
   1c01c:	ea00 0206 	and.w	r2, r0, r6
   1c020:	ea01 0307 	and.w	r3, r1, r7
   1c024:	4313      	orrs	r3, r2
   1c026:	d0f5      	beq.n	1c014 <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
   1c028:	68a3      	ldr	r3, [r4, #8]
   1c02a:	68e1      	ldr	r1, [r4, #12]
   1c02c:	e9cd 6700 	strd	r6, r7, [sp]
   1c030:	4642      	mov	r2, r8
   1c032:	4628      	mov	r0, r5
   1c034:	4798      	blx	r3
   1c036:	e7ed      	b.n	1c014 <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
   1c038:	f8d9 3000 	ldr.w	r3, [r9]
   1c03c:	b14b      	cbz	r3, 1c052 <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
   1c03e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1c042:	e9cd 6700 	strd	r6, r7, [sp]
   1c046:	4642      	mov	r2, r8
   1c048:	4628      	mov	r0, r5
   1c04a:	4798      	blx	r3
    }

    return (0);
}
   1c04c:	b003      	add	sp, #12
   1c04e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
   1c052:	2000      	movs	r0, #0
   1c054:	e7fa      	b.n	1c04c <sensor_read_data_func+0x52>
	...

0001c058 <sensor_base_ts_update_event>:
{
   1c058:	b530      	push	{r4, r5, lr}
   1c05a:	b087      	sub	sp, #28
    ticks = os_time_get();
   1c05c:	f7fe fe30 	bl	1acc0 <os_time_get>
   1c060:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
   1c062:	a901      	add	r1, sp, #4
   1c064:	a802      	add	r0, sp, #8
   1c066:	f7fe fe65 	bl	1ad34 <os_gettimeofday>
    if (rc) {
   1c06a:	b138      	cbz	r0, 1c07c <sensor_base_ts_update_event+0x24>
        ticks += OS_TICKS_PER_SEC * 600;
   1c06c:	f504 3496 	add.w	r4, r4, #76800	; 0x12c00
    os_callout_reset(&st_up_osco, ticks);
   1c070:	4621      	mov	r1, r4
   1c072:	4809      	ldr	r0, [pc, #36]	; (1c098 <sensor_base_ts_update_event+0x40>)
   1c074:	f7fd fdac 	bl	19bd0 <os_callout_reset>
}
   1c078:	b007      	add	sp, #28
   1c07a:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
   1c07c:	f504 347a 	add.w	r4, r4, #256000	; 0x3e800
    sensor_base_ts.st_ostv = ostv;
   1c080:	4d06      	ldr	r5, [pc, #24]	; (1c09c <sensor_base_ts_update_event+0x44>)
   1c082:	ab06      	add	r3, sp, #24
   1c084:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1c088:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1c08c:	9b01      	ldr	r3, [sp, #4]
   1c08e:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1c090:	f7fd fe28 	bl	19ce4 <os_cputime_get32>
   1c094:	6168      	str	r0, [r5, #20]
   1c096:	e7eb      	b.n	1c070 <sensor_base_ts_update_event+0x18>
   1c098:	2000a6d4 	.word	0x2000a6d4
   1c09c:	2000a6f8 	.word	0x2000a6f8

0001c0a0 <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
   1c0a0:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1c0a4:	4604      	mov	r4, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
   1c0a6:	f7fd fe1d 	bl	19ce4 <os_cputime_get32>

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
   1c0aa:	4a0e      	ldr	r2, [pc, #56]	; (1c0e4 <sensor_up_timestamp+0x44>)
   1c0ac:	6955      	ldr	r5, [r2, #20]
   1c0ae:	1b43      	subs	r3, r0, r5
             sensor_base_ts.st_cputime);

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
   1c0b0:	6460      	str	r0, [r4, #68]	; 0x44
   1c0b2:	6150      	str	r0, [r2, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1c0b4:	e9d2 0100 	ldrd	r0, r1, [r2]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1c0b8:	6895      	ldr	r5, [r2, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1c0ba:	441d      	add	r5, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1c0bc:	4b0a      	ldr	r3, [pc, #40]	; (1c0e8 <sensor_up_timestamp+0x48>)
   1c0be:	fba3 c305 	umull	ip, r3, r3, r5
   1c0c2:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1c0c4:	eb10 0b03 	adds.w	fp, r0, r3
   1c0c8:	f141 0c00 	adc.w	ip, r1, #0
   1c0cc:	e9c2 bc00 	strd	fp, ip, [r2]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
   1c0d0:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
   1c0d4:	4905      	ldr	r1, [pc, #20]	; (1c0ec <sensor_up_timestamp+0x4c>)
   1c0d6:	fb01 5113 	mls	r1, r1, r3, r5
    sensor_base_ts.st_ostv.tv_usec  =
   1c0da:	6091      	str	r1, [r2, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
   1c0dc:	63a1      	str	r1, [r4, #56]	; 0x38

}
   1c0de:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   1c0e2:	bf00      	nop
   1c0e4:	2000a6f8 	.word	0x2000a6f8
   1c0e8:	431bde83 	.word	0x431bde83
   1c0ec:	000f4240 	.word	0x000f4240

0001c0f0 <sensor_mgr_lock>:
{
   1c0f0:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
   1c0f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c0f6:	4804      	ldr	r0, [pc, #16]	; (1c108 <sensor_mgr_lock+0x18>)
   1c0f8:	f7fe fa5c 	bl	1a5b4 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1c0fc:	b108      	cbz	r0, 1c102 <sensor_mgr_lock+0x12>
   1c0fe:	2809      	cmp	r0, #9
   1c100:	d000      	beq.n	1c104 <sensor_mgr_lock+0x14>
}
   1c102:	bd08      	pop	{r3, pc}
        return (0);
   1c104:	2000      	movs	r0, #0
   1c106:	e7fc      	b.n	1c102 <sensor_mgr_lock+0x12>
   1c108:	2000a6a0 	.word	0x2000a6a0

0001c10c <sensor_mgr_unlock>:
{
   1c10c:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
   1c10e:	4802      	ldr	r0, [pc, #8]	; (1c118 <sensor_mgr_unlock+0xc>)
   1c110:	f7fe f9f4 	bl	1a4fc <os_mutex_release>
}
   1c114:	bd08      	pop	{r3, pc}
   1c116:	bf00      	nop
   1c118:	2000a6a0 	.word	0x2000a6a0

0001c11c <sensor_mgr_evq_get>:
}
   1c11c:	4b01      	ldr	r3, [pc, #4]	; (1c124 <sensor_mgr_evq_get+0x8>)
   1c11e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1c120:	4770      	bx	lr
   1c122:	bf00      	nop
   1c124:	2000a6a0 	.word	0x2000a6a0

0001c128 <sensor_mgr_init>:
{
   1c128:	b570      	push	{r4, r5, r6, lr}
   1c12a:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
   1c12c:	f7fd ff68 	bl	1a000 <os_eventq_dflt_get>
   1c130:	f7ff ff46 	bl	1bfc0 <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
   1c134:	4b1c      	ldr	r3, [pc, #112]	; (1c1a8 <sensor_mgr_init+0x80>)
   1c136:	9300      	str	r3, [sp, #0]
   1c138:	4b1c      	ldr	r3, [pc, #112]	; (1c1ac <sensor_mgr_init+0x84>)
   1c13a:	2218      	movs	r2, #24
   1c13c:	2105      	movs	r1, #5
   1c13e:	481c      	ldr	r0, [pc, #112]	; (1c1b0 <sensor_mgr_init+0x88>)
   1c140:	f7fe f8e8 	bl	1a314 <os_mempool_init>
    assert(rc == OS_OK);
   1c144:	bb50      	cbnz	r0, 1c19c <sensor_mgr_init+0x74>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
   1c146:	f7ff ffe9 	bl	1c11c <sensor_mgr_evq_get>
   1c14a:	4e1a      	ldr	r6, [pc, #104]	; (1c1b4 <sensor_mgr_init+0x8c>)
   1c14c:	2300      	movs	r3, #0
   1c14e:	4a1a      	ldr	r2, [pc, #104]	; (1c1b8 <sensor_mgr_init+0x90>)
   1c150:	4601      	mov	r1, r0
   1c152:	4630      	mov	r0, r6
   1c154:	f7fd fd10 	bl	19b78 <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
   1c158:	ad04      	add	r5, sp, #16
   1c15a:	a903      	add	r1, sp, #12
   1c15c:	4628      	mov	r0, r5
   1c15e:	f7fe fde9 	bl	1ad34 <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
   1c162:	4c16      	ldr	r4, [pc, #88]	; (1c1bc <sensor_mgr_init+0x94>)
   1c164:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1c168:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1c16c:	9b03      	ldr	r3, [sp, #12]
   1c16e:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1c170:	f7fd fdb8 	bl	19ce4 <os_cputime_get32>
   1c174:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
   1c176:	f7ff ffd1 	bl	1c11c <sensor_mgr_evq_get>
   1c17a:	4c11      	ldr	r4, [pc, #68]	; (1c1c0 <sensor_mgr_init+0x98>)
   1c17c:	2300      	movs	r3, #0
   1c17e:	4a11      	ldr	r2, [pc, #68]	; (1c1c4 <sensor_mgr_init+0x9c>)
   1c180:	4601      	mov	r1, r0
   1c182:	4620      	mov	r0, r4
   1c184:	f7fd fcf8 	bl	19b78 <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
   1c188:	2180      	movs	r1, #128	; 0x80
   1c18a:	4620      	mov	r0, r4
   1c18c:	f7fd fd20 	bl	19bd0 <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
   1c190:	f1a6 000c 	sub.w	r0, r6, #12
   1c194:	f7fe f9a8 	bl	1a4e8 <os_mutex_init>
}
   1c198:	b008      	add	sp, #32
   1c19a:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
   1c19c:	2300      	movs	r3, #0
   1c19e:	461a      	mov	r2, r3
   1c1a0:	4619      	mov	r1, r3
   1c1a2:	4618      	mov	r0, r3
   1c1a4:	f7fd fb6e 	bl	19884 <__assert_func>
   1c1a8:	000210a4 	.word	0x000210a4
   1c1ac:	2000a19c 	.word	0x2000a19c
   1c1b0:	2000a214 	.word	0x2000a214
   1c1b4:	2000a6ac 	.word	0x2000a6ac
   1c1b8:	0001c395 	.word	0x0001c395
   1c1bc:	2000a6f8 	.word	0x2000a6f8
   1c1c0:	2000a6d4 	.word	0x2000a6d4
   1c1c4:	0001c059 	.word	0x0001c059

0001c1c8 <sensor_pkg_init>:
{
   1c1c8:	b508      	push	{r3, lr}
    sensor_mgr_init();
   1c1ca:	f7ff ffad 	bl	1c128 <sensor_mgr_init>
}
   1c1ce:	bd08      	pop	{r3, pc}

0001c1d0 <sensor_lock>:
{
   1c1d0:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
   1c1d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c1d6:	3004      	adds	r0, #4
   1c1d8:	f7fe f9ec 	bl	1a5b4 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1c1dc:	b108      	cbz	r0, 1c1e2 <sensor_lock+0x12>
   1c1de:	2809      	cmp	r0, #9
   1c1e0:	d000      	beq.n	1c1e4 <sensor_lock+0x14>
}
   1c1e2:	bd08      	pop	{r3, pc}
        return (0);
   1c1e4:	2000      	movs	r0, #0
   1c1e6:	e7fc      	b.n	1c1e2 <sensor_lock+0x12>

0001c1e8 <sensor_unlock>:
{
   1c1e8:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
   1c1ea:	3004      	adds	r0, #4
   1c1ec:	f7fe f986 	bl	1a4fc <os_mutex_release>
}
   1c1f0:	bd08      	pop	{r3, pc}

0001c1f2 <sensor_update_nextrun>:
{
   1c1f2:	b530      	push	{r4, r5, lr}
   1c1f4:	b083      	sub	sp, #12
   1c1f6:	4604      	mov	r4, r0
   1c1f8:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
   1c1fa:	a901      	add	r1, sp, #4
   1c1fc:	6a00      	ldr	r0, [r0, #32]
   1c1fe:	f7fe fdb5 	bl	1ad6c <os_time_ms_to_ticks>
    sensor_lock(sensor);
   1c202:	4620      	mov	r0, r4
   1c204:	f7ff ffe4 	bl	1c1d0 <sensor_lock>
    sensor_mgr_remove(sensor);
   1c208:	4620      	mov	r0, r4
   1c20a:	f7ff fe8f 	bl	1bf2c <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
   1c20e:	9b01      	ldr	r3, [sp, #4]
   1c210:	441d      	add	r5, r3
   1c212:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
   1c214:	4620      	mov	r0, r4
   1c216:	f7ff fe9d 	bl	1bf54 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1c21a:	4620      	mov	r0, r4
   1c21c:	f7ff ffe4 	bl	1c1e8 <sensor_unlock>
}
   1c220:	b003      	add	sp, #12
   1c222:	bd30      	pop	{r4, r5, pc}

0001c224 <sensor_calc_nextrun_delta>:
{
   1c224:	b538      	push	{r3, r4, r5, lr}
   1c226:	4605      	mov	r5, r0
   1c228:	460c      	mov	r4, r1
    sensor_lock(sensor);
   1c22a:	f7ff ffd1 	bl	1c1d0 <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
   1c22e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
   1c230:	1b0c      	subs	r4, r1, r4
   1c232:	d404      	bmi.n	1c23e <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
   1c234:	4628      	mov	r0, r5
   1c236:	f7ff ffd7 	bl	1c1e8 <sensor_unlock>
}
   1c23a:	4620      	mov	r0, r4
   1c23c:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
   1c23e:	2400      	movs	r4, #0
   1c240:	e7f8      	b.n	1c234 <sensor_calc_nextrun_delta+0x10>
	...

0001c244 <sensor_find_min_nextrun_sensor>:
{
   1c244:	b570      	push	{r4, r5, r6, lr}
   1c246:	4606      	mov	r6, r0
   1c248:	460d      	mov	r5, r1
    sensor_mgr_lock();
   1c24a:	f7ff ff51 	bl	1c0f0 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
   1c24e:	4b05      	ldr	r3, [pc, #20]	; (1c264 <sensor_find_min_nextrun_sensor+0x20>)
   1c250:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
   1c252:	4631      	mov	r1, r6
   1c254:	4620      	mov	r0, r4
   1c256:	f7ff ffe5 	bl	1c224 <sensor_calc_nextrun_delta>
   1c25a:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
   1c25c:	f7ff ff56 	bl	1c10c <sensor_mgr_unlock>
}
   1c260:	4620      	mov	r0, r4
   1c262:	bd70      	pop	{r4, r5, r6, pc}
   1c264:	2000a6a0 	.word	0x2000a6a0

0001c268 <sensor_mgr_register>:
{
   1c268:	b538      	push	{r3, r4, r5, lr}
   1c26a:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
   1c26c:	f7ff ff40 	bl	1c0f0 <sensor_mgr_lock>
    if (rc != 0) {
   1c270:	4604      	mov	r4, r0
   1c272:	b108      	cbz	r0, 1c278 <sensor_mgr_register+0x10>
}
   1c274:	4620      	mov	r0, r4
   1c276:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
   1c278:	4628      	mov	r0, r5
   1c27a:	f7ff ffa9 	bl	1c1d0 <sensor_lock>
    if (rc != 0) {
   1c27e:	4604      	mov	r4, r0
   1c280:	2800      	cmp	r0, #0
   1c282:	d1f7      	bne.n	1c274 <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
   1c284:	4628      	mov	r0, r5
   1c286:	f7ff fe65 	bl	1bf54 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1c28a:	4628      	mov	r0, r5
   1c28c:	f7ff ffac 	bl	1c1e8 <sensor_unlock>
    sensor_mgr_unlock();
   1c290:	f7ff ff3c 	bl	1c10c <sensor_mgr_unlock>
    return (0);
   1c294:	e7ee      	b.n	1c274 <sensor_mgr_register+0xc>

0001c296 <sensor_init>:
{
   1c296:	b538      	push	{r3, r4, r5, lr}
   1c298:	4604      	mov	r4, r0
   1c29a:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
   1c29c:	2288      	movs	r2, #136	; 0x88
   1c29e:	2100      	movs	r1, #0
   1c2a0:	f7fe fef3 	bl	1b08a <memset>
    rc = os_mutex_init(&sensor->s_lock);
   1c2a4:	1d20      	adds	r0, r4, #4
   1c2a6:	f7fe f91f 	bl	1a4e8 <os_mutex_init>
    if (rc != 0) {
   1c2aa:	4603      	mov	r3, r0
   1c2ac:	b900      	cbnz	r0, 1c2b0 <sensor_init+0x1a>
    sensor->s_dev = dev;
   1c2ae:	6025      	str	r5, [r4, #0]
}
   1c2b0:	4618      	mov	r0, r3
   1c2b2:	bd38      	pop	{r3, r4, r5, pc}

0001c2b4 <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
   1c2b4:	b530      	push	{r4, r5, lr}
   1c2b6:	b089      	sub	sp, #36	; 0x24
   1c2b8:	4604      	mov	r4, r0
   1c2ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
   1c2be:	f7ff ff87 	bl	1c1d0 <sensor_lock>
    if (rc) {
   1c2c2:	4605      	mov	r5, r0
   1c2c4:	b9f8      	cbnz	r0, 1c306 <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
   1c2c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c2c8:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
   1c2ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1c2cc:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
   1c2ce:	a904      	add	r1, sp, #16
   1c2d0:	4620      	mov	r0, r4
   1c2d2:	f7ff fe7b 	bl	1bfcc <sensor_mgr_match_bytype>
   1c2d6:	b1e0      	cbz	r0, 1c312 <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
   1c2d8:	4620      	mov	r0, r4
   1c2da:	f7ff fee1 	bl	1c0a0 <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
   1c2de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c2e0:	6819      	ldr	r1, [r3, #0]
   1c2e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c2e4:	9302      	str	r3, [sp, #8]
   1c2e6:	ab06      	add	r3, sp, #24
   1c2e8:	9301      	str	r3, [sp, #4]
   1c2ea:	4b0b      	ldr	r3, [pc, #44]	; (1c318 <sensor_read+0x64>)
   1c2ec:	9300      	str	r3, [sp, #0]
   1c2ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1c2f2:	4620      	mov	r0, r4
   1c2f4:	4788      	blx	r1
                                  timeout);
    if (rc) {
   1c2f6:	4605      	mov	r5, r0
   1c2f8:	b128      	cbz	r0, 1c306 <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
   1c2fa:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1c2fc:	b11b      	cbz	r3, 1c306 <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
   1c2fe:	4602      	mov	r2, r0
   1c300:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1c302:	4620      	mov	r0, r4
   1c304:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
   1c306:	4620      	mov	r0, r4
   1c308:	f7ff ff6e 	bl	1c1e8 <sensor_unlock>
    return (rc);
}
   1c30c:	4628      	mov	r0, r5
   1c30e:	b009      	add	sp, #36	; 0x24
   1c310:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
   1c312:	f06f 0503 	mvn.w	r5, #3
   1c316:	e7f6      	b.n	1c306 <sensor_read+0x52>
   1c318:	0001bffb 	.word	0x0001bffb

0001c31c <sensor_mgr_poll_bytype>:
{
   1c31c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c31e:	b085      	sub	sp, #20
   1c320:	4616      	mov	r6, r2
   1c322:	461f      	mov	r7, r3
   1c324:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
   1c326:	b10c      	cbz	r4, 1c32c <sensor_mgr_poll_bytype+0x10>
   1c328:	8aa3      	ldrh	r3, [r4, #20]
   1c32a:	b9cb      	cbnz	r3, 1c360 <sensor_mgr_poll_bytype+0x44>
   1c32c:	4632      	mov	r2, r6
   1c32e:	463b      	mov	r3, r7
   1c330:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
   1c332:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c336:	9102      	str	r1, [sp, #8]
   1c338:	2100      	movs	r1, #0
   1c33a:	9101      	str	r1, [sp, #4]
   1c33c:	9100      	str	r1, [sp, #0]
   1c33e:	f7ff ffb9 	bl	1c2b4 <sensor_read>
        sensor_lock(sensor);
   1c342:	4628      	mov	r0, r5
   1c344:	f7ff ff44 	bl	1c1d0 <sensor_lock>
        if (stt) {
   1c348:	b12c      	cbz	r4, 1c356 <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
   1c34a:	8aa3      	ldrh	r3, [r4, #20]
   1c34c:	b91b      	cbnz	r3, 1c356 <sensor_mgr_poll_bytype+0x3a>
   1c34e:	8a63      	ldrh	r3, [r4, #18]
   1c350:	b10b      	cbz	r3, 1c356 <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
   1c352:	3b01      	subs	r3, #1
   1c354:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
   1c356:	4628      	mov	r0, r5
   1c358:	f7ff ff46 	bl	1c1e8 <sensor_unlock>
}
   1c35c:	b005      	add	sp, #20
   1c35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
   1c360:	3b01      	subs	r3, #1
   1c362:	82a3      	strh	r3, [r4, #20]
}
   1c364:	e7fa      	b.n	1c35c <sensor_mgr_poll_bytype+0x40>

0001c366 <sensor_poll_per_type_trait>:
{
   1c366:	b570      	push	{r4, r5, r6, lr}
   1c368:	b082      	sub	sp, #8
   1c36a:	4605      	mov	r5, r0
   1c36c:	460e      	mov	r6, r1
    sensor_lock(sensor);
   1c36e:	f7ff ff2f 	bl	1c1d0 <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1c372:	6fec      	ldr	r4, [r5, #124]	; 0x7c
   1c374:	e007      	b.n	1c386 <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
   1c376:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c37a:	9601      	str	r6, [sp, #4]
   1c37c:	9400      	str	r4, [sp, #0]
   1c37e:	4628      	mov	r0, r5
   1c380:	f7ff ffcc 	bl	1c31c <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1c384:	6a24      	ldr	r4, [r4, #32]
   1c386:	2c00      	cmp	r4, #0
   1c388:	d1f5      	bne.n	1c376 <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
   1c38a:	4628      	mov	r0, r5
   1c38c:	f7ff ff2c 	bl	1c1e8 <sensor_unlock>
}
   1c390:	b002      	add	sp, #8
   1c392:	bd70      	pop	{r4, r5, r6, pc}

0001c394 <sensor_mgr_wakeup_event>:
{
   1c394:	b570      	push	{r4, r5, r6, lr}
   1c396:	b084      	sub	sp, #16
    now = os_time_get();
   1c398:	f7fe fc92 	bl	1acc0 <os_time_get>
   1c39c:	4605      	mov	r5, r0
    sensor_mgr_lock();
   1c39e:	f7ff fea7 	bl	1c0f0 <sensor_mgr_lock>
   1c3a2:	e012      	b.n	1c3ca <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
   1c3a4:	4620      	mov	r0, r4
   1c3a6:	f7ff ff1f 	bl	1c1e8 <sensor_unlock>
            sensor_mgr_unlock();
   1c3aa:	f7ff feaf 	bl	1c10c <sensor_mgr_unlock>
}
   1c3ae:	b004      	add	sp, #16
   1c3b0:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
   1c3b2:	4632      	mov	r2, r6
   1c3b4:	4629      	mov	r1, r5
   1c3b6:	4620      	mov	r0, r4
   1c3b8:	f7ff ffd5 	bl	1c366 <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
   1c3bc:	4629      	mov	r1, r5
   1c3be:	4620      	mov	r0, r4
   1c3c0:	f7ff ff17 	bl	1c1f2 <sensor_update_nextrun>
        sensor_unlock(cursor);
   1c3c4:	4620      	mov	r0, r4
   1c3c6:	f7ff ff0f 	bl	1c1e8 <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
   1c3ca:	a903      	add	r1, sp, #12
   1c3cc:	4628      	mov	r0, r5
   1c3ce:	f7ff ff39 	bl	1c244 <sensor_find_min_nextrun_sensor>
   1c3d2:	4604      	mov	r4, r0
        sensor_lock(cursor);
   1c3d4:	f7ff fefc 	bl	1c1d0 <sensor_lock>
        if (!cursor->s_poll_rate) {
   1c3d8:	6a23      	ldr	r3, [r4, #32]
   1c3da:	2b00      	cmp	r3, #0
   1c3dc:	d0e2      	beq.n	1c3a4 <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
   1c3de:	9e03      	ldr	r6, [sp, #12]
   1c3e0:	b96e      	cbnz	r6, 1c3fe <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
   1c3e2:	4620      	mov	r0, r4
   1c3e4:	f7ff fde6 	bl	1bfb4 <sensor_type_traits_empty>
   1c3e8:	2800      	cmp	r0, #0
   1c3ea:	d0e2      	beq.n	1c3b2 <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
   1c3ec:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1c3f0:	9501      	str	r5, [sp, #4]
   1c3f2:	2100      	movs	r1, #0
   1c3f4:	9100      	str	r1, [sp, #0]
   1c3f6:	4620      	mov	r0, r4
   1c3f8:	f7ff ff90 	bl	1c31c <sensor_mgr_poll_bytype>
   1c3fc:	e7de      	b.n	1c3bc <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
   1c3fe:	f7ff fe85 	bl	1c10c <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
   1c402:	9903      	ldr	r1, [sp, #12]
   1c404:	4801      	ldr	r0, [pc, #4]	; (1c40c <sensor_mgr_wakeup_event+0x78>)
   1c406:	f7fd fbe3 	bl	19bd0 <os_callout_reset>
   1c40a:	e7d0      	b.n	1c3ae <sensor_mgr_wakeup_event+0x1a>
   1c40c:	2000a6ac 	.word	0x2000a6ac

0001c410 <init_sensor_coap>:

///////////////////////////////////////////////////////////////////////////////
//  CoAP Functions

///  Init the Sensor CoAP module. Called by sysinit() during startup, defined in pkg.yml.
void init_sensor_coap(void) {
   1c410:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
   1c412:	2101      	movs	r1, #1
   1c414:	4806      	ldr	r0, [pc, #24]	; (1c430 <init_sensor_coap+0x20>)
   1c416:	f7fe faf1 	bl	1a9fc <os_sem_init>
    assert(rc == OS_OK);
   1c41a:	b918      	cbnz	r0, 1c424 <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
   1c41c:	4b05      	ldr	r3, [pc, #20]	; (1c434 <init_sensor_coap+0x24>)
   1c41e:	2201      	movs	r2, #1
   1c420:	701a      	strb	r2, [r3, #0]
}
   1c422:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
   1c424:	2300      	movs	r3, #0
   1c426:	461a      	mov	r2, r3
   1c428:	4619      	mov	r1, r3
   1c42a:	4618      	mov	r0, r3
   1c42c:	f7fd fa2a 	bl	19884 <__assert_func>
   1c430:	2000a230 	.word	0x2000a230
   1c434:	2000a238 	.word	0x2000a238

0001c438 <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1c438:	4b04      	ldr	r3, [pc, #16]	; (1c44c <is_sensor_node+0x14>)
   1c43a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c43e:	4313      	orrs	r3, r2
   1c440:	d101      	bne.n	1c446 <is_sensor_node+0xe>
    return false;
   1c442:	2000      	movs	r0, #0
}
   1c444:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1c446:	2001      	movs	r0, #1
   1c448:	4770      	bx	lr
   1c44a:	bf00      	nop
   1c44c:	2000a250 	.word	0x2000a250

0001c450 <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
   1c450:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
   1c452:	4b16      	ldr	r3, [pc, #88]	; (1c4ac <get_hardware_id+0x5c>)
   1c454:	681b      	ldr	r3, [r3, #0]
   1c456:	b10b      	cbz	r3, 1c45c <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
   1c458:	4815      	ldr	r0, [pc, #84]	; (1c4b0 <get_hardware_id+0x60>)
   1c45a:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
   1c45c:	f000 fcee 	bl	1ce3c <hal_bsp_hw_id_len>
   1c460:	4b12      	ldr	r3, [pc, #72]	; (1c4ac <get_hardware_id+0x5c>)
   1c462:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1c464:	280b      	cmp	r0, #11
   1c466:	d914      	bls.n	1c492 <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1c468:	210c      	movs	r1, #12
   1c46a:	4811      	ldr	r0, [pc, #68]	; (1c4b0 <get_hardware_id+0x60>)
   1c46c:	f000 fce8 	bl	1ce40 <hal_bsp_hw_id>
   1c470:	4b0e      	ldr	r3, [pc, #56]	; (1c4ac <get_hardware_id+0x5c>)
   1c472:	6018      	str	r0, [r3, #0]
   1c474:	2800      	cmp	r0, #0
   1c476:	dd12      	ble.n	1c49e <get_hardware_id+0x4e>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
   1c478:	490e      	ldr	r1, [pc, #56]	; (1c4b4 <get_hardware_id+0x64>)
   1c47a:	480f      	ldr	r0, [pc, #60]	; (1c4b8 <get_hardware_id+0x68>)
   1c47c:	f7fc fb3a 	bl	18af4 <console_printf>
   1c480:	4b0a      	ldr	r3, [pc, #40]	; (1c4ac <get_hardware_id+0x5c>)
   1c482:	6819      	ldr	r1, [r3, #0]
   1c484:	480a      	ldr	r0, [pc, #40]	; (1c4b0 <get_hardware_id+0x60>)
   1c486:	f7fc fac5 	bl	18a14 <console_dump>
   1c48a:	480c      	ldr	r0, [pc, #48]	; (1c4bc <get_hardware_id+0x6c>)
   1c48c:	f7fc fb32 	bl	18af4 <console_printf>
   1c490:	e7e2      	b.n	1c458 <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1c492:	2300      	movs	r3, #0
   1c494:	461a      	mov	r2, r3
   1c496:	4619      	mov	r1, r3
   1c498:	4618      	mov	r0, r3
   1c49a:	f7fd f9f3 	bl	19884 <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1c49e:	2300      	movs	r3, #0
   1c4a0:	461a      	mov	r2, r3
   1c4a2:	4619      	mov	r1, r3
   1c4a4:	4618      	mov	r0, r3
   1c4a6:	f7fd f9ed 	bl	19884 <__assert_func>
   1c4aa:	bf00      	nop
   1c4ac:	2000a248 	.word	0x2000a248
   1c4b0:	2000a23c 	.word	0x2000a23c
   1c4b4:	00021148 	.word	0x00021148
   1c4b8:	00021100 	.word	0x00021100
   1c4bc:	00021260 	.word	0x00021260

0001c4c0 <is_collector_node>:
bool is_collector_node(void) {
   1c4c0:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
   1c4c2:	f7ff ffc5 	bl	1c450 <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1c4c6:	220c      	movs	r2, #12
   1c4c8:	4903      	ldr	r1, [pc, #12]	; (1c4d8 <is_collector_node+0x18>)
   1c4ca:	f7fe fdad 	bl	1b028 <memcmp>
   1c4ce:	b108      	cbz	r0, 1c4d4 <is_collector_node+0x14>
    return false; 
   1c4d0:	2000      	movs	r0, #0
}
   1c4d2:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1c4d4:	2001      	movs	r0, #1
   1c4d6:	e7fc      	b.n	1c4d2 <is_collector_node+0x12>
   1c4d8:	000210b8 	.word	0x000210b8

0001c4dc <is_standalone_node>:
bool is_standalone_node(void) {
   1c4dc:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
   1c4de:	f7ff ffef 	bl	1c4c0 <is_collector_node>
   1c4e2:	b928      	cbnz	r0, 1c4f0 <is_standalone_node+0x14>
   1c4e4:	4604      	mov	r4, r0
   1c4e6:	f7ff ffa7 	bl	1c438 <is_sensor_node>
   1c4ea:	b910      	cbnz	r0, 1c4f2 <is_standalone_node+0x16>
   1c4ec:	2401      	movs	r4, #1
   1c4ee:	e000      	b.n	1c4f2 <is_standalone_node+0x16>
    return false;
   1c4f0:	2400      	movs	r4, #0
}
   1c4f2:	4620      	mov	r0, r4
   1c4f4:	bd10      	pop	{r4, pc}
	...

0001c4f8 <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
   1c4f8:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c4fa:	2400      	movs	r4, #0
   1c4fc:	2c04      	cmp	r4, #4
   1c4fe:	dc15      	bgt.n	1c52c <sensor_network_init+0x34>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
   1c500:	4b23      	ldr	r3, [pc, #140]	; (1c590 <sensor_network_init+0x98>)
   1c502:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1c506:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c50a:	4922      	ldr	r1, [pc, #136]	; (1c594 <sensor_network_init+0x9c>)
   1c50c:	4822      	ldr	r0, [pc, #136]	; (1c598 <sensor_network_init+0xa0>)
   1c50e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1c512:	f000 fcaf 	bl	1ce74 <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1c516:	3001      	adds	r0, #1
   1c518:	280b      	cmp	r0, #11
   1c51a:	dc01      	bgt.n	1c520 <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c51c:	3401      	adds	r4, #1
   1c51e:	e7ed      	b.n	1c4fc <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1c520:	2300      	movs	r3, #0
   1c522:	461a      	mov	r2, r3
   1c524:	4619      	mov	r1, r3
   1c526:	4618      	mov	r0, r3
   1c528:	f7fd f9ac 	bl	19884 <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
   1c52c:	f7ff ff90 	bl	1c450 <get_hardware_id>
   1c530:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c532:	2400      	movs	r4, #0
   1c534:	2c04      	cmp	r4, #4
   1c536:	dc19      	bgt.n	1c56c <sensor_network_init+0x74>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
   1c538:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1c53c:	0093      	lsls	r3, r2, #2
   1c53e:	220c      	movs	r2, #12
   1c540:	4916      	ldr	r1, [pc, #88]	; (1c59c <sensor_network_init+0xa4>)
   1c542:	4419      	add	r1, r3
   1c544:	4628      	mov	r0, r5
   1c546:	f7fe fd6f 	bl	1b028 <memcmp>
   1c54a:	b108      	cbz	r0, 1c550 <sensor_network_init+0x58>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c54c:	3401      	adds	r4, #1
   1c54e:	e7f1      	b.n	1c534 <sensor_network_init+0x3c>
            sensor_node_address = sensor_node_addresses[i];
   1c550:	4b0f      	ldr	r3, [pc, #60]	; (1c590 <sensor_network_init+0x98>)
   1c552:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1c556:	e9d3 0100 	ldrd	r0, r1, [r3]
   1c55a:	4b11      	ldr	r3, [pc, #68]	; (1c5a0 <sensor_network_init+0xa8>)
   1c55c:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
   1c560:	1c63      	adds	r3, r4, #1
   1c562:	4a10      	ldr	r2, [pc, #64]	; (1c5a4 <sensor_network_init+0xac>)
   1c564:	4910      	ldr	r1, [pc, #64]	; (1c5a8 <sensor_network_init+0xb0>)
   1c566:	4811      	ldr	r0, [pc, #68]	; (1c5ac <sensor_network_init+0xb4>)
   1c568:	f7fc fac4 	bl	18af4 <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1c56c:	f7ff ffa8 	bl	1c4c0 <is_collector_node>
   1c570:	b940      	cbnz	r0, 1c584 <sensor_network_init+0x8c>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
   1c572:	f7ff ffb3 	bl	1c4dc <is_standalone_node>
   1c576:	b150      	cbz	r0, 1c58e <sensor_network_init+0x96>
   1c578:	4a0a      	ldr	r2, [pc, #40]	; (1c5a4 <sensor_network_init+0xac>)
   1c57a:	490b      	ldr	r1, [pc, #44]	; (1c5a8 <sensor_network_init+0xb0>)
   1c57c:	480c      	ldr	r0, [pc, #48]	; (1c5b0 <sensor_network_init+0xb8>)
   1c57e:	f7fc fab9 	bl	18af4 <console_printf>
}
   1c582:	e004      	b.n	1c58e <sensor_network_init+0x96>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1c584:	4a07      	ldr	r2, [pc, #28]	; (1c5a4 <sensor_network_init+0xac>)
   1c586:	4908      	ldr	r1, [pc, #32]	; (1c5a8 <sensor_network_init+0xb0>)
   1c588:	480a      	ldr	r0, [pc, #40]	; (1c5b4 <sensor_network_init+0xbc>)
   1c58a:	f7fc fab3 	bl	18af4 <console_printf>
}
   1c58e:	bd38      	pop	{r3, r4, r5, pc}
   1c590:	00021160 	.word	0x00021160
   1c594:	00021108 	.word	0x00021108
   1c598:	20000130 	.word	0x20000130
   1c59c:	000210c4 	.word	0x000210c4
   1c5a0:	2000a250 	.word	0x2000a250
   1c5a4:	00021110 	.word	0x00021110
   1c5a8:	00021148 	.word	0x00021148
   1c5ac:	00021118 	.word	0x00021118
   1c5b0:	00021138 	.word	0x00021138
   1c5b4:	00021128 	.word	0x00021128

0001c5b8 <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
   1c5b8:	b530      	push	{r4, r5, lr}
   1c5ba:	b083      	sub	sp, #12
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
   1c5bc:	2200      	movs	r2, #0
   1c5be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c5c2:	4810      	ldr	r0, [pc, #64]	; (1c604 <config_device+0x4c>)
   1c5c4:	f7fd fc2c 	bl	19e20 <os_dev_open>
    assert(dev != NULL);
   1c5c8:	b178      	cbz	r0, 1c5ea <config_device+0x32>
   1c5ca:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
   1c5cc:	4668      	mov	r0, sp
   1c5ce:	f000 f86c 	bl	1c6aa <temp_stub_default_cfg>
    assert(rc == 0);
   1c5d2:	b980      	cbnz	r0, 1c5f6 <config_device+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
   1c5d4:	4669      	mov	r1, sp
   1c5d6:	4620      	mov	r0, r4
   1c5d8:	f000 f900 	bl	1c7dc <temp_stub_config>
   1c5dc:	4605      	mov	r5, r0
    os_dev_close(dev);
   1c5de:	4620      	mov	r0, r4
   1c5e0:	f7fd fc40 	bl	19e64 <os_dev_close>
    return rc;
}
   1c5e4:	4628      	mov	r0, r5
   1c5e6:	b003      	add	sp, #12
   1c5e8:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
   1c5ea:	2300      	movs	r3, #0
   1c5ec:	461a      	mov	r2, r3
   1c5ee:	4619      	mov	r1, r3
   1c5f0:	4618      	mov	r0, r3
   1c5f2:	f7fd f947 	bl	19884 <__assert_func>
    assert(rc == 0);
   1c5f6:	2300      	movs	r3, #0
   1c5f8:	461a      	mov	r2, r3
   1c5fa:	4619      	mov	r1, r3
   1c5fc:	4618      	mov	r0, r3
   1c5fe:	f7fd f941 	bl	19884 <__assert_func>
   1c602:	bf00      	nop
   1c604:	00021188 	.word	0x00021188

0001c608 <temp_stub_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
   1c608:	b510      	push	{r4, lr}
   1c60a:	b082      	sub	sp, #8
    console_printf("TMP create %s\n", DEVICE_NAME);
   1c60c:	4c10      	ldr	r4, [pc, #64]	; (1c650 <temp_stub_create+0x48>)
   1c60e:	4621      	mov	r1, r4
   1c610:	4810      	ldr	r0, [pc, #64]	; (1c654 <temp_stub_create+0x4c>)
   1c612:	f7fc fa6f 	bl	18af4 <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
   1c616:	4b10      	ldr	r3, [pc, #64]	; (1c658 <temp_stub_create+0x50>)
   1c618:	9301      	str	r3, [sp, #4]
   1c61a:	4b10      	ldr	r3, [pc, #64]	; (1c65c <temp_stub_create+0x54>)
   1c61c:	9300      	str	r3, [sp, #0]
   1c61e:	2300      	movs	r3, #0
   1c620:	2201      	movs	r2, #1
   1c622:	4621      	mov	r1, r4
   1c624:	480e      	ldr	r0, [pc, #56]	; (1c660 <temp_stub_create+0x58>)
   1c626:	f7fd fbb5 	bl	19d94 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
   1c62a:	b920      	cbnz	r0, 1c636 <temp_stub_create+0x2e>

    //  Configure the device.
    rc = config_device();
   1c62c:	f7ff ffc4 	bl	1c5b8 <config_device>
    assert(rc == 0);
   1c630:	b938      	cbnz	r0, 1c642 <temp_stub_create+0x3a>
}
   1c632:	b002      	add	sp, #8
   1c634:	bd10      	pop	{r4, pc}
    assert(rc == 0);
   1c636:	2300      	movs	r3, #0
   1c638:	461a      	mov	r2, r3
   1c63a:	4619      	mov	r1, r3
   1c63c:	4618      	mov	r0, r3
   1c63e:	f7fd f921 	bl	19884 <__assert_func>
    assert(rc == 0);
   1c642:	2300      	movs	r3, #0
   1c644:	461a      	mov	r2, r3
   1c646:	4619      	mov	r1, r3
   1c648:	4618      	mov	r0, r3
   1c64a:	f7fd f91b 	bl	19884 <__assert_func>
   1c64e:	bf00      	nop
   1c650:	00021188 	.word	0x00021188
   1c654:	00021194 	.word	0x00021194
   1c658:	2000a290 	.word	0x2000a290
   1c65c:	0001c6b9 	.word	0x0001c6b9
   1c660:	2000a2a8 	.word	0x2000a2a8

0001c664 <temp_stub_close>:
}

static int temp_stub_close(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
   1c664:	2000      	movs	r0, #0
   1c666:	4770      	bx	lr

0001c668 <temp_stub_sensor_get_config>:

static int temp_stub_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
   1c668:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
   1c66c:	2100      	movs	r1, #0
   1c66e:	ea50 0301 	orrs.w	r3, r0, r1
   1c672:	d004      	beq.n	1c67e <temp_stub_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
   1c674:	9b00      	ldr	r3, [sp, #0]
   1c676:	2201      	movs	r2, #1
   1c678:	701a      	strb	r2, [r3, #0]
    return (0);
   1c67a:	2000      	movs	r0, #0
   1c67c:	4770      	bx	lr
err:
    return (rc);
   1c67e:	f06f 0001 	mvn.w	r0, #1
}
   1c682:	4770      	bx	lr

0001c684 <temp_stub_open>:
static int temp_stub_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
   1c684:	b508      	push	{r3, lr}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1c686:	b120      	cbz	r0, 1c692 <temp_stub_open+0xe>
    cfg = &dev->cfg; assert(cfg);
   1c688:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
   1c68c:	d007      	beq.n	1c69e <temp_stub_open+0x1a>
}
   1c68e:	2000      	movs	r0, #0
   1c690:	bd08      	pop	{r3, pc}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1c692:	2300      	movs	r3, #0
   1c694:	461a      	mov	r2, r3
   1c696:	4619      	mov	r1, r3
   1c698:	4618      	mov	r0, r3
   1c69a:	f7fd f8f3 	bl	19884 <__assert_func>
    cfg = &dev->cfg; assert(cfg);
   1c69e:	2300      	movs	r3, #0
   1c6a0:	461a      	mov	r2, r3
   1c6a2:	4619      	mov	r1, r3
   1c6a4:	4618      	mov	r0, r3
   1c6a6:	f7fd f8ed 	bl	19884 <__assert_func>

0001c6aa <temp_stub_default_cfg>:
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
   1c6aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c6ae:	2300      	movs	r3, #0
   1c6b0:	e9c0 2300 	strd	r2, r3, [r0]
}
   1c6b4:	2000      	movs	r0, #0
   1c6b6:	4770      	bx	lr

0001c6b8 <temp_stub_init>:
int temp_stub_init(struct os_dev *dev0, void *arg) {
   1c6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1c6ba:	b379      	cbz	r1, 1c71c <temp_stub_init+0x64>
   1c6bc:	460d      	mov	r5, r1
   1c6be:	b380      	cbz	r0, 1c722 <temp_stub_init+0x6a>
   1c6c0:	4604      	mov	r4, r0
    rc = temp_stub_default_cfg(&dev->cfg);
   1c6c2:	30b0      	adds	r0, #176	; 0xb0
   1c6c4:	f7ff fff1 	bl	1c6aa <temp_stub_default_cfg>
    if (rc) { goto err; }
   1c6c8:	4603      	mov	r3, r0
   1c6ca:	b108      	cbz	r0, 1c6d0 <temp_stub_init+0x18>
}
   1c6cc:	4618      	mov	r0, r3
   1c6ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
   1c6d0:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
   1c6d4:	4621      	mov	r1, r4
   1c6d6:	4630      	mov	r0, r6
   1c6d8:	f7ff fddd 	bl	1c296 <sensor_init>
    if (rc != 0) { goto err; }
   1c6dc:	4603      	mov	r3, r0
   1c6de:	2800      	cmp	r0, #0
   1c6e0:	d1f4      	bne.n	1c6cc <temp_stub_init+0x14>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
   1c6e2:	4b11      	ldr	r3, [pc, #68]	; (1c728 <temp_stub_init+0x70>)
   1c6e4:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
   1c6e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1c6ea:	2300      	movs	r3, #0
   1c6ec:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
   1c6f0:	682a      	ldr	r2, [r5, #0]
   1c6f2:	686f      	ldr	r7, [r5, #4]
   1c6f4:	68a8      	ldr	r0, [r5, #8]
   1c6f6:	68e9      	ldr	r1, [r5, #12]
   1c6f8:	6722      	str	r2, [r4, #112]	; 0x70
   1c6fa:	6767      	str	r7, [r4, #116]	; 0x74
   1c6fc:	67a0      	str	r0, [r4, #120]	; 0x78
   1c6fe:	67e1      	str	r1, [r4, #124]	; 0x7c
   1c700:	692a      	ldr	r2, [r5, #16]
   1c702:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
   1c706:	4630      	mov	r0, r6
   1c708:	f7ff fdae 	bl	1c268 <sensor_mgr_register>
    if (rc != 0) { goto err; }
   1c70c:	4603      	mov	r3, r0
   1c70e:	2800      	cmp	r0, #0
   1c710:	d1dc      	bne.n	1c6cc <temp_stub_init+0x14>
    OS_DEV_SETHANDLERS(dev0, temp_stub_open, temp_stub_close);
   1c712:	4a06      	ldr	r2, [pc, #24]	; (1c72c <temp_stub_init+0x74>)
   1c714:	6022      	str	r2, [r4, #0]
   1c716:	4a06      	ldr	r2, [pc, #24]	; (1c730 <temp_stub_init+0x78>)
   1c718:	60e2      	str	r2, [r4, #12]
    return (0);
   1c71a:	e7d7      	b.n	1c6cc <temp_stub_init+0x14>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1c71c:	f06f 0308 	mvn.w	r3, #8
   1c720:	e7d4      	b.n	1c6cc <temp_stub_init+0x14>
   1c722:	f06f 0308 	mvn.w	r3, #8
   1c726:	e7d1      	b.n	1c6cc <temp_stub_init+0x14>
   1c728:	000211a4 	.word	0x000211a4
   1c72c:	0001c685 	.word	0x0001c685
   1c730:	0001c665 	.word	0x0001c665

0001c734 <temp_stub_get_raw_temperature>:
int temp_stub_get_raw_temperature(struct temp_stub *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
   1c734:	b538      	push	{r3, r4, r5, lr}
   1c736:	460d      	mov	r5, r1
   1c738:	4614      	mov	r4, r2
    console_printf("STB read temp sensor\n");  ////
   1c73a:	4808      	ldr	r0, [pc, #32]	; (1c75c <temp_stub_get_raw_temperature+0x28>)
   1c73c:	f7fc f9da 	bl	18af4 <console_printf>
    assert(temp_sum);
   1c740:	b134      	cbz	r4, 1c750 <temp_stub_get_raw_temperature+0x1c>
    *temp_sum = 1757 * num_readings;
   1c742:	f240 61dd 	movw	r1, #1757	; 0x6dd
   1c746:	fb01 f105 	mul.w	r1, r1, r5
   1c74a:	6021      	str	r1, [r4, #0]
}
   1c74c:	2000      	movs	r0, #0
   1c74e:	bd38      	pop	{r3, r4, r5, pc}
    assert(temp_sum);
   1c750:	2300      	movs	r3, #0
   1c752:	461a      	mov	r2, r3
   1c754:	4619      	mov	r1, r3
   1c756:	4618      	mov	r0, r3
   1c758:	f7fd f894 	bl	19884 <__assert_func>
   1c75c:	000211cc 	.word	0x000211cc

0001c760 <temp_stub_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
   1c760:	b530      	push	{r4, r5, lr}
   1c762:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1c764:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
   1c768:	2500      	movs	r5, #0
   1c76a:	ea54 0305 	orrs.w	r3, r4, r5
   1c76e:	d032      	beq.n	1c7d6 <temp_stub_sensor_read+0x76>
   1c770:	4604      	mov	r4, r0
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1c772:	6805      	ldr	r5, [r0, #0]
   1c774:	b165      	cbz	r5, 1c790 <temp_stub_sensor_read+0x30>
    rawtemp = -1;
   1c776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c77a:	9303      	str	r3, [sp, #12]
        rc = temp_stub_open((struct os_dev *) dev, 0, NULL);
   1c77c:	2200      	movs	r2, #0
   1c77e:	4611      	mov	r1, r2
   1c780:	4628      	mov	r0, r5
   1c782:	f7ff ff7f 	bl	1c684 <temp_stub_open>
        if (rc) { goto err; }
   1c786:	4603      	mov	r3, r0
   1c788:	b140      	cbz	r0, 1c79c <temp_stub_sensor_read+0x3c>
}
   1c78a:	4618      	mov	r0, r3
   1c78c:	b007      	add	sp, #28
   1c78e:	bd30      	pop	{r4, r5, pc}
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1c790:	2300      	movs	r3, #0
   1c792:	461a      	mov	r2, r3
   1c794:	4619      	mov	r1, r3
   1c796:	4618      	mov	r0, r3
   1c798:	f7fd f874 	bl	19884 <__assert_func>
        rc = temp_stub_get_raw_temperature(dev, 1, &rawtemp, NULL);
   1c79c:	2300      	movs	r3, #0
   1c79e:	aa03      	add	r2, sp, #12
   1c7a0:	2101      	movs	r1, #1
   1c7a2:	4628      	mov	r0, r5
   1c7a4:	f7ff ffc6 	bl	1c734 <temp_stub_get_raw_temperature>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
   1c7a8:	4603      	mov	r3, r0
   1c7aa:	2800      	cmp	r0, #0
   1c7ac:	d1ed      	bne.n	1c78a <temp_stub_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
   1c7ae:	9a03      	ldr	r2, [sp, #12]
   1c7b0:	9204      	str	r2, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
   1c7b2:	2201      	movs	r2, #1
   1c7b4:	f88d 2014 	strb.w	r2, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
   1c7b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c7ba:	2a00      	cmp	r2, #0
   1c7bc:	d0e5      	beq.n	1c78a <temp_stub_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
   1c7be:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1c7c2:	2300      	movs	r3, #0
   1c7c4:	e9cd 2300 	strd	r2, r3, [sp]
   1c7c8:	aa04      	add	r2, sp, #16
   1c7ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1c7cc:	4620      	mov	r0, r4
   1c7ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c7d0:	4798      	blx	r3
   1c7d2:	4603      	mov	r3, r0
   1c7d4:	e7d9      	b.n	1c78a <temp_stub_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1c7d6:	f06f 0301 	mvn.w	r3, #1
   1c7da:	e7d6      	b.n	1c78a <temp_stub_sensor_read+0x2a>

0001c7dc <temp_stub_config>:
 * @param Sensor device temp_stub structure
 * @param Sensor device temp_stub_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stub_config(struct temp_stub *dev, struct temp_stub_cfg *cfg) {
   1c7dc:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1c7de:	f110 0f70 	cmn.w	r0, #112	; 0x70
   1c7e2:	d009      	beq.n	1c7f8 <temp_stub_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
   1c7e4:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
   1c7e8:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
   1c7ec:	e9d1 2300 	ldrd	r2, r3, [r1]
   1c7f0:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
   1c7f4:	2000      	movs	r0, #0
   1c7f6:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1c7f8:	2300      	movs	r3, #0
   1c7fa:	461a      	mov	r2, r3
   1c7fc:	4619      	mov	r1, r3
   1c7fe:	4618      	mov	r0, r3
   1c800:	f7fd f840 	bl	19884 <__assert_func>

0001c804 <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
   1c804:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1c806:	e002      	b.n	1c80e <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
   1c808:	4618      	mov	r0, r3
   1c80a:	f000 f85b 	bl	1c8c4 <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1c80e:	4808      	ldr	r0, [pc, #32]	; (1c830 <oc_buffer_tx+0x2c>)
   1c810:	f7fd fc03 	bl	1a01a <os_mqueue_get>
   1c814:	4603      	mov	r3, r0
   1c816:	b148      	cbz	r0, 1c82c <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
   1c818:	2200      	movs	r2, #0
   1c81a:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
   1c81c:	7e1a      	ldrb	r2, [r3, #24]
   1c81e:	f012 0f08 	tst.w	r2, #8
   1c822:	d0f1      	beq.n	1c808 <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
   1c824:	4618      	mov	r0, r3
   1c826:	f000 f85d 	bl	1c8e4 <oc_send_multicast_message>
   1c82a:	e7f0      	b.n	1c80e <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
   1c82c:	bd08      	pop	{r3, pc}
   1c82e:	bf00      	nop
   1c830:	2000a380 	.word	0x2000a380

0001c834 <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
   1c834:	b500      	push	{lr}
   1c836:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
   1c838:	4808      	ldr	r0, [pc, #32]	; (1c85c <oc_buffer_rx+0x28>)
   1c83a:	f7fd fbee 	bl	1a01a <os_mqueue_get>
   1c83e:	9001      	str	r0, [sp, #4]
   1c840:	b140      	cbz	r0, 1c854 <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
   1c842:	a801      	add	r0, sp, #4
   1c844:	f000 faa2 	bl	1cd8c <__wrap_coap_receive>
#endif
        if (m) {
   1c848:	9801      	ldr	r0, [sp, #4]
   1c84a:	2800      	cmp	r0, #0
   1c84c:	d0f4      	beq.n	1c838 <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
   1c84e:	f7fd fc59 	bl	1a104 <os_mbuf_free_chain>
   1c852:	e7f1      	b.n	1c838 <oc_buffer_rx+0x4>
        }
    }
}
   1c854:	b003      	add	sp, #12
   1c856:	f85d fb04 	ldr.w	pc, [sp], #4
   1c85a:	bf00      	nop
   1c85c:	2000a368 	.word	0x2000a368

0001c860 <oc_buffer_init>:

void
oc_buffer_init(void)
{
   1c860:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
   1c862:	2200      	movs	r2, #0
   1c864:	4904      	ldr	r1, [pc, #16]	; (1c878 <oc_buffer_init+0x18>)
   1c866:	4805      	ldr	r0, [pc, #20]	; (1c87c <oc_buffer_init+0x1c>)
   1c868:	f7fd fbce 	bl	1a008 <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
   1c86c:	2200      	movs	r2, #0
   1c86e:	4904      	ldr	r1, [pc, #16]	; (1c880 <oc_buffer_init+0x20>)
   1c870:	4804      	ldr	r0, [pc, #16]	; (1c884 <oc_buffer_init+0x24>)
   1c872:	f7fd fbc9 	bl	1a008 <os_mqueue_init>
}
   1c876:	bd08      	pop	{r3, pc}
   1c878:	0001c835 	.word	0x0001c835
   1c87c:	2000a368 	.word	0x2000a368
   1c880:	0001c805 	.word	0x0001c805
   1c884:	2000a380 	.word	0x2000a380

0001c888 <oc_ri_mem_init>:
}
#endif

void
oc_ri_mem_init(void)
{
   1c888:	b500      	push	{lr}
   1c88a:	b083      	sub	sp, #12
#ifdef OC_SERVER
  os_mempool_init(&oc_resource_pool, MAX_APP_RESOURCES, sizeof(oc_resource_t),
                  oc_resource_area, "oc_res");
#endif
#ifdef OC_CLIENT
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
   1c88c:	4b07      	ldr	r3, [pc, #28]	; (1c8ac <oc_ri_mem_init+0x24>)
   1c88e:	9300      	str	r3, [sp, #0]
   1c890:	4b07      	ldr	r3, [pc, #28]	; (1c8b0 <oc_ri_mem_init+0x28>)
   1c892:	2264      	movs	r2, #100	; 0x64
   1c894:	2102      	movs	r1, #2
   1c896:	4807      	ldr	r0, [pc, #28]	; (1c8b4 <oc_ri_mem_init+0x2c>)
   1c898:	f7fd fd3c 	bl	1a314 <os_mempool_init>
      sizeof(oc_client_cb_t), oc_client_cb_area, "oc_cl_cbs");
    oc_rep_init();
   1c89c:	f000 f860 	bl	1c960 <oc_rep_init>
#endif
    oc_buffer_init();
   1c8a0:	f7ff ffde 	bl	1c860 <oc_buffer_init>
}
   1c8a4:	b003      	add	sp, #12
   1c8a6:	f85d fb04 	ldr.w	pc, [sp], #4
   1c8aa:	bf00      	nop
   1c8ac:	000211e4 	.word	0x000211e4
   1c8b0:	2000a398 	.word	0x2000a398
   1c8b4:	2000a460 	.word	0x2000a460

0001c8b8 <oc_evq_set>:
}

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
   1c8b8:	4b01      	ldr	r3, [pc, #4]	; (1c8c0 <oc_evq_set+0x8>)
   1c8ba:	6018      	str	r0, [r3, #0]
}
   1c8bc:	4770      	bx	lr
   1c8be:	bf00      	nop
   1c8c0:	2000a47c 	.word	0x2000a47c

0001c8c4 <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
   1c8c4:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
   1c8c6:	7e03      	ldrb	r3, [r0, #24]
   1c8c8:	f003 0307 	and.w	r3, r3, #7
   1c8cc:	4a04      	ldr	r2, [pc, #16]	; (1c8e0 <oc_send_buffer+0x1c>)
   1c8ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
   1c8d2:	b113      	cbz	r3, 1c8da <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
   1c8d4:	68db      	ldr	r3, [r3, #12]
   1c8d6:	4798      	blx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
   1c8d8:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
   1c8da:	f7fd fc13 	bl	1a104 <os_mbuf_free_chain>
}
   1c8de:	e7fb      	b.n	1c8d8 <oc_send_buffer+0x14>
   1c8e0:	2000a710 	.word	0x2000a710

0001c8e4 <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
   1c8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c8e8:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1c8ea:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
   1c8ec:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1c8ee:	e002      	b.n	1c8f6 <oc_send_multicast_message+0x12>
   1c8f0:	4635      	mov	r5, r6
   1c8f2:	3401      	adds	r4, #1
   1c8f4:	462e      	mov	r6, r5
   1c8f6:	2c07      	cmp	r4, #7
   1c8f8:	dc12      	bgt.n	1c920 <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
   1c8fa:	4b0c      	ldr	r3, [pc, #48]	; (1c92c <oc_send_multicast_message+0x48>)
   1c8fc:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   1c900:	2d00      	cmp	r5, #0
   1c902:	d0f5      	beq.n	1c8f0 <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
   1c904:	2e00      	cmp	r6, #0
   1c906:	d0f4      	beq.n	1c8f2 <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
   1c908:	4638      	mov	r0, r7
   1c90a:	f7fd fc6b 	bl	1a1e4 <os_mbuf_dup>
   1c90e:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
   1c910:	6933      	ldr	r3, [r6, #16]
   1c912:	4638      	mov	r0, r7
   1c914:	4798      	blx	r3
            if (!n) {
   1c916:	f1b8 0f00 	cmp.w	r8, #0
   1c91a:	d005      	beq.n	1c928 <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
   1c91c:	4647      	mov	r7, r8
   1c91e:	e7e8      	b.n	1c8f2 <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
   1c920:	b116      	cbz	r6, 1c928 <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
   1c922:	6933      	ldr	r3, [r6, #16]
   1c924:	4638      	mov	r0, r7
   1c926:	4798      	blx	r3
    }
}
   1c928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c92c:	2000a710 	.word	0x2000a710

0001c930 <oc_init>:
    return rc;
}

void
oc_init(void)
{
   1c930:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1c932:	4b07      	ldr	r3, [pc, #28]	; (1c950 <oc_init+0x20>)
   1c934:	781b      	ldrb	r3, [r3, #0]
   1c936:	b133      	cbz	r3, 1c946 <oc_init+0x16>
    oc_ri_mem_init();
   1c938:	f7ff ffa6 	bl	1c888 <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
   1c93c:	f7fd fb60 	bl	1a000 <os_eventq_dflt_get>
   1c940:	f7ff ffba 	bl	1c8b8 <oc_evq_set>
}
   1c944:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1c946:	461a      	mov	r2, r3
   1c948:	4619      	mov	r1, r3
   1c94a:	4618      	mov	r0, r3
   1c94c:	f7fc ff9a 	bl	19884 <__assert_func>
   1c950:	2000a56c 	.word	0x2000a56c

0001c954 <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
   1c954:	4770      	bx	lr

0001c956 <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
   1c956:	4770      	bx	lr

0001c958 <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
   1c958:	4770      	bx	lr

0001c95a <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
   1c95a:	4770      	bx	lr

0001c95c <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
   1c95c:	4770      	bx	lr
	...

0001c960 <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
   1c960:	b500      	push	{lr}
   1c962:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
   1c964:	4b05      	ldr	r3, [pc, #20]	; (1c97c <oc_rep_init+0x1c>)
   1c966:	9300      	str	r3, [sp, #0]
   1c968:	4b05      	ldr	r3, [pc, #20]	; (1c980 <oc_rep_init+0x20>)
   1c96a:	2218      	movs	r2, #24
   1c96c:	2102      	movs	r1, #2
   1c96e:	4805      	ldr	r0, [pc, #20]	; (1c984 <oc_rep_init+0x24>)
   1c970:	f7fd fcd0 	bl	1a314 <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
   1c974:	b003      	add	sp, #12
   1c976:	f85d fb04 	ldr.w	pc, [sp], #4
   1c97a:	bf00      	nop
   1c97c:	000211f0 	.word	0x000211f0
   1c980:	2000a49c 	.word	0x2000a49c
   1c984:	2000a480 	.word	0x2000a480

0001c988 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   1c988:	b570      	push	{r4, r5, r6, lr}
   1c98a:	b086      	sub	sp, #24
   1c98c:	4605      	mov	r5, r0
   1c98e:	460e      	mov	r6, r1
   1c990:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   1c992:	2300      	movs	r3, #0
   1c994:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   1c996:	f000 f9ad 	bl	1ccf4 <mfg_init>

    mfg_open(&reader);
   1c99a:	a801      	add	r0, sp, #4
   1c99c:	f000 f9c6 	bl	1cd2c <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   1c9a0:	6823      	ldr	r3, [r4, #0]
   1c9a2:	42ab      	cmp	r3, r5
   1c9a4:	da29      	bge.n	1c9fa <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   1c9a6:	2102      	movs	r1, #2
   1c9a8:	a801      	add	r0, sp, #4
   1c9aa:	f000 f98c 	bl	1ccc6 <mfg_seek_next_with_type>
   1c9ae:	4603      	mov	r3, r0
        switch (rc) {
   1c9b0:	f110 0f0f 	cmn.w	r0, #15
   1c9b4:	d003      	beq.n	1c9be <flash_map_read_mfg+0x36>
   1c9b6:	b120      	cbz	r0, 1c9c2 <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
   1c9b8:	4618      	mov	r0, r3
   1c9ba:	b006      	add	sp, #24
   1c9bc:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
   1c9be:	2300      	movs	r3, #0
   1c9c0:	e7fa      	b.n	1c9b8 <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   1c9c2:	a903      	add	r1, sp, #12
   1c9c4:	a801      	add	r0, sp, #4
   1c9c6:	f000 f98b 	bl	1cce0 <mfg_read_tlv_flash_area>
        if (rc != 0) {
   1c9ca:	4603      	mov	r3, r0
   1c9cc:	2800      	cmp	r0, #0
   1c9ce:	d1f3      	bne.n	1c9b8 <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
   1c9d0:	6823      	ldr	r3, [r4, #0]
   1c9d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1c9d6:	009a      	lsls	r2, r3, #2
   1c9d8:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
   1c9da:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1c9de:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
   1c9e0:	f89d 200d 	ldrb.w	r2, [sp, #13]
   1c9e4:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
   1c9e6:	f8dd 200e 	ldr.w	r2, [sp, #14]
   1c9ea:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
   1c9ec:	f8dd 2012 	ldr.w	r2, [sp, #18]
   1c9f0:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
   1c9f2:	6823      	ldr	r3, [r4, #0]
   1c9f4:	3301      	adds	r3, #1
   1c9f6:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   1c9f8:	e7d2      	b.n	1c9a0 <flash_map_read_mfg+0x18>
            return -1;
   1c9fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c9fe:	e7db      	b.n	1c9b8 <flash_map_read_mfg+0x30>

0001ca00 <flash_area_open>:
{
   1ca00:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   1ca02:	4b0d      	ldr	r3, [pc, #52]	; (1ca38 <flash_area_open+0x38>)
   1ca04:	681d      	ldr	r5, [r3, #0]
   1ca06:	b1a5      	cbz	r5, 1ca32 <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
   1ca08:	2300      	movs	r3, #0
   1ca0a:	4a0c      	ldr	r2, [pc, #48]	; (1ca3c <flash_area_open+0x3c>)
   1ca0c:	6812      	ldr	r2, [r2, #0]
   1ca0e:	429a      	cmp	r2, r3
   1ca10:	dd0b      	ble.n	1ca2a <flash_area_open+0x2a>
        area = flash_map + i;
   1ca12:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1ca16:	00a2      	lsls	r2, r4, #2
   1ca18:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
   1ca1a:	5caa      	ldrb	r2, [r5, r2]
   1ca1c:	4282      	cmp	r2, r0
   1ca1e:	d001      	beq.n	1ca24 <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
   1ca20:	3301      	adds	r3, #1
   1ca22:	e7f2      	b.n	1ca0a <flash_area_open+0xa>
            *fap = area;
   1ca24:	600c      	str	r4, [r1, #0]
            return 0;
   1ca26:	2000      	movs	r0, #0
   1ca28:	e001      	b.n	1ca2e <flash_area_open+0x2e>
    return SYS_ENOENT;
   1ca2a:	f06f 0003 	mvn.w	r0, #3
}
   1ca2e:	bc30      	pop	{r4, r5}
   1ca30:	4770      	bx	lr
        return SYS_EACCES;
   1ca32:	f06f 0006 	mvn.w	r0, #6
   1ca36:	e7fa      	b.n	1ca2e <flash_area_open+0x2e>
   1ca38:	2000a734 	.word	0x2000a734
   1ca3c:	2000a730 	.word	0x2000a730

0001ca40 <flash_area_read>:
{
   1ca40:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1ca42:	6884      	ldr	r4, [r0, #8]
   1ca44:	428c      	cmp	r4, r1
   1ca46:	d308      	bcc.n	1ca5a <flash_area_read+0x1a>
   1ca48:	18cd      	adds	r5, r1, r3
   1ca4a:	42ac      	cmp	r4, r5
   1ca4c:	d308      	bcc.n	1ca60 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   1ca4e:	6844      	ldr	r4, [r0, #4]
   1ca50:	4421      	add	r1, r4
   1ca52:	7840      	ldrb	r0, [r0, #1]
   1ca54:	f000 f9c8 	bl	1cde8 <hal_flash_read>
}
   1ca58:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   1ca5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ca5e:	e7fb      	b.n	1ca58 <flash_area_read+0x18>
   1ca60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ca64:	e7f8      	b.n	1ca58 <flash_area_read+0x18>
	...

0001ca68 <flash_map_init>:

void
flash_map_init(void)
{
   1ca68:	b510      	push	{r4, lr}
   1ca6a:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1ca6c:	4b14      	ldr	r3, [pc, #80]	; (1cac0 <flash_map_init+0x58>)
   1ca6e:	781b      	ldrb	r3, [r3, #0]
   1ca70:	b303      	cbz	r3, 1cab4 <flash_map_init+0x4c>

    rc = hal_flash_init();
   1ca72:	f000 f9a5 	bl	1cdc0 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1ca76:	b138      	cbz	r0, 1ca88 <flash_map_init+0x20>
   1ca78:	2000      	movs	r0, #0
   1ca7a:	9000      	str	r0, [sp, #0]
   1ca7c:	4b11      	ldr	r3, [pc, #68]	; (1cac4 <flash_map_init+0x5c>)
   1ca7e:	681c      	ldr	r4, [r3, #0]
   1ca80:	4603      	mov	r3, r0
   1ca82:	4602      	mov	r2, r0
   1ca84:	4601      	mov	r1, r0
   1ca86:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1ca88:	4b0f      	ldr	r3, [pc, #60]	; (1cac8 <flash_map_init+0x60>)
   1ca8a:	4a10      	ldr	r2, [pc, #64]	; (1cacc <flash_map_init+0x64>)
   1ca8c:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1ca8e:	4b10      	ldr	r3, [pc, #64]	; (1cad0 <flash_map_init+0x68>)
   1ca90:	2206      	movs	r2, #6
   1ca92:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   1ca94:	aa03      	add	r2, sp, #12
   1ca96:	490f      	ldr	r1, [pc, #60]	; (1cad4 <flash_map_init+0x6c>)
   1ca98:	200a      	movs	r0, #10
   1ca9a:	f7ff ff75 	bl	1c988 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   1ca9e:	b938      	cbnz	r0, 1cab0 <flash_map_init+0x48>
   1caa0:	9b03      	ldr	r3, [sp, #12]
   1caa2:	2b00      	cmp	r3, #0
   1caa4:	dd04      	ble.n	1cab0 <flash_map_init+0x48>
        flash_map = mfg_areas;
   1caa6:	4a08      	ldr	r2, [pc, #32]	; (1cac8 <flash_map_init+0x60>)
   1caa8:	490a      	ldr	r1, [pc, #40]	; (1cad4 <flash_map_init+0x6c>)
   1caaa:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   1caac:	4a08      	ldr	r2, [pc, #32]	; (1cad0 <flash_map_init+0x68>)
   1caae:	6013      	str	r3, [r2, #0]
    }
}
   1cab0:	b004      	add	sp, #16
   1cab2:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1cab4:	461a      	mov	r2, r3
   1cab6:	4619      	mov	r1, r3
   1cab8:	4618      	mov	r0, r3
   1caba:	f7fc fee3 	bl	19884 <__assert_func>
   1cabe:	bf00      	nop
   1cac0:	2000a56c 	.word	0x2000a56c
   1cac4:	20000104 	.word	0x20000104
   1cac8:	2000a734 	.word	0x2000a734
   1cacc:	000211fc 	.word	0x000211fc
   1cad0:	2000a730 	.word	0x2000a730
   1cad4:	2000a4cc 	.word	0x2000a4cc

0001cad8 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   1cad8:	4770      	bx	lr
	...

0001cadc <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   1cadc:	b530      	push	{r4, r5, lr}
   1cade:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   1cae0:	7885      	ldrb	r5, [r0, #2]
   1cae2:	4b21      	ldr	r3, [pc, #132]	; (1cb68 <mfg_seek_next_aux+0x8c>)
   1cae4:	681b      	ldr	r3, [r3, #0]
   1cae6:	429d      	cmp	r5, r3
   1cae8:	da32      	bge.n	1cb50 <mfg_seek_next_aux+0x74>
   1caea:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   1caec:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   1caf0:	0093      	lsls	r3, r2, #2
   1caf2:	a901      	add	r1, sp, #4
   1caf4:	4a1d      	ldr	r2, [pc, #116]	; (1cb6c <mfg_seek_next_aux+0x90>)
   1caf6:	5cd0      	ldrb	r0, [r2, r3]
   1caf8:	f7ff ff82 	bl	1ca00 <flash_area_open>
    if (rc != 0) {
   1cafc:	bb58      	cbnz	r0, 1cb56 <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1cafe:	6862      	ldr	r2, [r4, #4]
   1cb00:	b9c2      	cbnz	r2, 1cb34 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1cb02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1cb06:	00aa      	lsls	r2, r5, #2
   1cb08:	4b18      	ldr	r3, [pc, #96]	; (1cb6c <mfg_seek_next_aux+0x90>)
   1cb0a:	4413      	add	r3, r2
   1cb0c:	685b      	ldr	r3, [r3, #4]
   1cb0e:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   1cb10:	6861      	ldr	r1, [r4, #4]
   1cb12:	9801      	ldr	r0, [sp, #4]
   1cb14:	6883      	ldr	r3, [r0, #8]
   1cb16:	3b08      	subs	r3, #8
   1cb18:	4299      	cmp	r1, r3
   1cb1a:	d310      	bcc.n	1cb3e <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1cb1c:	78a3      	ldrb	r3, [r4, #2]
   1cb1e:	1c59      	adds	r1, r3, #1
   1cb20:	4a11      	ldr	r2, [pc, #68]	; (1cb68 <mfg_seek_next_aux+0x8c>)
   1cb22:	6812      	ldr	r2, [r2, #0]
   1cb24:	4291      	cmp	r1, r2
   1cb26:	da19      	bge.n	1cb5c <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   1cb28:	2200      	movs	r2, #0
   1cb2a:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1cb2c:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   1cb2e:	f06f 0305 	mvn.w	r3, #5
   1cb32:	e015      	b.n	1cb60 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1cb34:	7863      	ldrb	r3, [r4, #1]
   1cb36:	4413      	add	r3, r2
   1cb38:	3302      	adds	r3, #2
   1cb3a:	6063      	str	r3, [r4, #4]
   1cb3c:	e7e8      	b.n	1cb10 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1cb3e:	2302      	movs	r3, #2
   1cb40:	4622      	mov	r2, r4
   1cb42:	f7ff ff7d 	bl	1ca40 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   1cb46:	4603      	mov	r3, r0
   1cb48:	b150      	cbz	r0, 1cb60 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
   1cb4a:	f06f 0304 	mvn.w	r3, #4
   1cb4e:	e007      	b.n	1cb60 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
   1cb50:	f06f 0301 	mvn.w	r3, #1
   1cb54:	e004      	b.n	1cb60 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
   1cb56:	f06f 0304 	mvn.w	r3, #4
   1cb5a:	e001      	b.n	1cb60 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
   1cb5c:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
   1cb60:	4618      	mov	r0, r3
   1cb62:	b003      	add	sp, #12
   1cb64:	bd30      	pop	{r4, r5, pc}
   1cb66:	bf00      	nop
   1cb68:	2000a560 	.word	0x2000a560
   1cb6c:	2000a548 	.word	0x2000a548

0001cb70 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   1cb70:	b530      	push	{r4, r5, lr}
   1cb72:	b085      	sub	sp, #20
   1cb74:	4605      	mov	r5, r0
   1cb76:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   1cb78:	a903      	add	r1, sp, #12
   1cb7a:	f7ff ff41 	bl	1ca00 <flash_area_open>
    if (rc != 0) {
   1cb7e:	b9e8      	cbnz	r0, 1cbbc <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   1cb80:	9803      	ldr	r0, [sp, #12]
   1cb82:	6881      	ldr	r1, [r0, #8]
   1cb84:	2308      	movs	r3, #8
   1cb86:	aa01      	add	r2, sp, #4
   1cb88:	3908      	subs	r1, #8
   1cb8a:	f7ff ff59 	bl	1ca40 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   1cb8e:	4601      	mov	r1, r0
   1cb90:	b9b8      	cbnz	r0, 1cbc2 <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   1cb92:	9a02      	ldr	r2, [sp, #8]
   1cb94:	4b11      	ldr	r3, [pc, #68]	; (1cbdc <mfg_read_mmr+0x6c>)
   1cb96:	429a      	cmp	r2, r3
   1cb98:	d116      	bne.n	1cbc8 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   1cb9a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1cb9e:	2b02      	cmp	r3, #2
   1cba0:	d115      	bne.n	1cbce <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   1cba2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1cba6:	9b03      	ldr	r3, [sp, #12]
   1cba8:	689b      	ldr	r3, [r3, #8]
   1cbaa:	429a      	cmp	r2, r3
   1cbac:	d812      	bhi.n	1cbd4 <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   1cbae:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1cbb0:	7025      	strb	r5, [r4, #0]
   1cbb2:	6063      	str	r3, [r4, #4]
   1cbb4:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   1cbb6:	4608      	mov	r0, r1
   1cbb8:	b005      	add	sp, #20
   1cbba:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   1cbbc:	f06f 0104 	mvn.w	r1, #4
   1cbc0:	e7f9      	b.n	1cbb6 <mfg_read_mmr+0x46>
        return SYS_EIO;
   1cbc2:	f06f 0104 	mvn.w	r1, #4
   1cbc6:	e7f6      	b.n	1cbb6 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1cbc8:	f06f 0108 	mvn.w	r1, #8
   1cbcc:	e7f3      	b.n	1cbb6 <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
   1cbce:	f06f 010b 	mvn.w	r1, #11
   1cbd2:	e7f0      	b.n	1cbb6 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1cbd4:	f06f 0108 	mvn.w	r1, #8
   1cbd8:	e7ed      	b.n	1cbb6 <mfg_read_mmr+0x46>
   1cbda:	bf00      	nop
   1cbdc:	3bb2a269 	.word	0x3bb2a269

0001cbe0 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   1cbe0:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1cbe2:	2300      	movs	r3, #0
   1cbe4:	4a11      	ldr	r2, [pc, #68]	; (1cc2c <mfg_read_next_mmr+0x4c>)
   1cbe6:	6812      	ldr	r2, [r2, #0]
   1cbe8:	429a      	cmp	r2, r3
   1cbea:	dd08      	ble.n	1cbfe <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   1cbec:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1cbf0:	008a      	lsls	r2, r1, #2
   1cbf2:	490f      	ldr	r1, [pc, #60]	; (1cc30 <mfg_read_next_mmr+0x50>)
   1cbf4:	5c8a      	ldrb	r2, [r1, r2]
   1cbf6:	4282      	cmp	r2, r0
   1cbf8:	d011      	beq.n	1cc1e <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
   1cbfa:	3301      	adds	r3, #1
   1cbfc:	e7f2      	b.n	1cbe4 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1cbfe:	2a01      	cmp	r2, #1
   1cc00:	dc11      	bgt.n	1cc26 <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1cc02:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1cc06:	0093      	lsls	r3, r2, #2
   1cc08:	4909      	ldr	r1, [pc, #36]	; (1cc30 <mfg_read_next_mmr+0x50>)
   1cc0a:	4419      	add	r1, r3
   1cc0c:	f7ff ffb0 	bl	1cb70 <mfg_read_mmr>
    if (rc != 0) {
   1cc10:	4603      	mov	r3, r0
   1cc12:	b930      	cbnz	r0, 1cc22 <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
   1cc14:	4905      	ldr	r1, [pc, #20]	; (1cc2c <mfg_read_next_mmr+0x4c>)
   1cc16:	680a      	ldr	r2, [r1, #0]
   1cc18:	3201      	adds	r2, #1
   1cc1a:	600a      	str	r2, [r1, #0]
    return 0;
   1cc1c:	e001      	b.n	1cc22 <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
   1cc1e:	f06f 030a 	mvn.w	r3, #10
}
   1cc22:	4618      	mov	r0, r3
   1cc24:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   1cc26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cc2a:	e7fa      	b.n	1cc22 <mfg_read_next_mmr+0x42>
   1cc2c:	2000a560 	.word	0x2000a560
   1cc30:	2000a548 	.word	0x2000a548

0001cc34 <mfg_open_flash_area>:
{
   1cc34:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1cc36:	7883      	ldrb	r3, [r0, #2]
   1cc38:	4a0b      	ldr	r2, [pc, #44]	; (1cc68 <mfg_open_flash_area+0x34>)
   1cc3a:	6812      	ldr	r2, [r2, #0]
   1cc3c:	4293      	cmp	r3, r2
   1cc3e:	da0a      	bge.n	1cc56 <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
   1cc40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1cc44:	009a      	lsls	r2, r3, #2
   1cc46:	4b09      	ldr	r3, [pc, #36]	; (1cc6c <mfg_open_flash_area+0x38>)
   1cc48:	5c98      	ldrb	r0, [r3, r2]
   1cc4a:	f7ff fed9 	bl	1ca00 <flash_area_open>
    if (rc != 0) {
   1cc4e:	4603      	mov	r3, r0
   1cc50:	b938      	cbnz	r0, 1cc62 <mfg_open_flash_area+0x2e>
}
   1cc52:	4618      	mov	r0, r3
   1cc54:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1cc56:	2300      	movs	r3, #0
   1cc58:	461a      	mov	r2, r3
   1cc5a:	4619      	mov	r1, r3
   1cc5c:	4618      	mov	r0, r3
   1cc5e:	f7fc fe11 	bl	19884 <__assert_func>
        return SYS_EIO;
   1cc62:	f06f 0304 	mvn.w	r3, #4
   1cc66:	e7f4      	b.n	1cc52 <mfg_open_flash_area+0x1e>
   1cc68:	2000a560 	.word	0x2000a560
   1cc6c:	2000a548 	.word	0x2000a548

0001cc70 <mfg_read_tlv_body>:
{
   1cc70:	b570      	push	{r4, r5, r6, lr}
   1cc72:	b082      	sub	sp, #8
   1cc74:	4606      	mov	r6, r0
   1cc76:	460c      	mov	r4, r1
   1cc78:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   1cc7a:	a901      	add	r1, sp, #4
   1cc7c:	f7ff ffda 	bl	1cc34 <mfg_open_flash_area>
    if (rc != 0) {
   1cc80:	4603      	mov	r3, r0
   1cc82:	b110      	cbz	r0, 1cc8a <mfg_read_tlv_body+0x1a>
}
   1cc84:	4618      	mov	r0, r3
   1cc86:	b002      	add	sp, #8
   1cc88:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   1cc8a:	462a      	mov	r2, r5
   1cc8c:	2100      	movs	r1, #0
   1cc8e:	4620      	mov	r0, r4
   1cc90:	f7fe f9fb 	bl	1b08a <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   1cc94:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   1cc96:	6871      	ldr	r1, [r6, #4]
   1cc98:	42ab      	cmp	r3, r5
   1cc9a:	bfa8      	it	ge
   1cc9c:	462b      	movge	r3, r5
   1cc9e:	4622      	mov	r2, r4
   1cca0:	3102      	adds	r1, #2
   1cca2:	9801      	ldr	r0, [sp, #4]
   1cca4:	f7ff fecc 	bl	1ca40 <flash_area_read>
    if (rc != 0) {
   1cca8:	4603      	mov	r3, r0
   1ccaa:	2800      	cmp	r0, #0
   1ccac:	d0ea      	beq.n	1cc84 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
   1ccae:	f06f 0304 	mvn.w	r3, #4
   1ccb2:	e7e7      	b.n	1cc84 <mfg_read_tlv_body+0x14>

0001ccb4 <mfg_seek_next>:
{
   1ccb4:	b510      	push	{r4, lr}
   1ccb6:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   1ccb8:	4620      	mov	r0, r4
   1ccba:	f7ff ff0f 	bl	1cadc <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   1ccbe:	f110 0f06 	cmn.w	r0, #6
   1ccc2:	d0f9      	beq.n	1ccb8 <mfg_seek_next+0x4>
}
   1ccc4:	bd10      	pop	{r4, pc}

0001ccc6 <mfg_seek_next_with_type>:
{
   1ccc6:	b538      	push	{r3, r4, r5, lr}
   1ccc8:	4604      	mov	r4, r0
   1ccca:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   1cccc:	4620      	mov	r0, r4
   1ccce:	f7ff fff1 	bl	1ccb4 <mfg_seek_next>
        if (rc != 0) {
   1ccd2:	4602      	mov	r2, r0
   1ccd4:	b910      	cbnz	r0, 1ccdc <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   1ccd6:	7823      	ldrb	r3, [r4, #0]
   1ccd8:	42ab      	cmp	r3, r5
   1ccda:	d1f7      	bne.n	1cccc <mfg_seek_next_with_type+0x6>
}
   1ccdc:	4610      	mov	r0, r2
   1ccde:	bd38      	pop	{r3, r4, r5, pc}

0001cce0 <mfg_read_tlv_flash_area>:
{
   1cce0:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1cce2:	220a      	movs	r2, #10
   1cce4:	f7ff ffc4 	bl	1cc70 <mfg_read_tlv_body>
}
   1cce8:	bd08      	pop	{r3, pc}

0001ccea <mfg_read_tlv_mmr_ref>:
{
   1ccea:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1ccec:	2201      	movs	r2, #1
   1ccee:	f7ff ffbf 	bl	1cc70 <mfg_read_tlv_body>
}
   1ccf2:	bd08      	pop	{r3, pc}

0001ccf4 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1ccf4:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1ccf6:	4b0b      	ldr	r3, [pc, #44]	; (1cd24 <mfg_init+0x30>)
   1ccf8:	781b      	ldrb	r3, [r3, #0]
   1ccfa:	b94b      	cbnz	r3, 1cd10 <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   1ccfc:	4b09      	ldr	r3, [pc, #36]	; (1cd24 <mfg_init+0x30>)
   1ccfe:	2201      	movs	r2, #1
   1cd00:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1cd02:	4b09      	ldr	r3, [pc, #36]	; (1cd28 <mfg_init+0x34>)
   1cd04:	781b      	ldrb	r3, [r3, #0]
   1cd06:	b123      	cbz	r3, 1cd12 <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1cd08:	2000      	movs	r0, #0
   1cd0a:	f7ff ff69 	bl	1cbe0 <mfg_read_next_mmr>
    if (rc != 0) {
   1cd0e:	b128      	cbz	r0, 1cd1c <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
   1cd10:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1cd12:	461a      	mov	r2, r3
   1cd14:	4619      	mov	r1, r3
   1cd16:	4618      	mov	r0, r3
   1cd18:	f7fc fdb4 	bl	19884 <__assert_func>
    rc = mfg_read_mmr_refs();
   1cd1c:	f000 f80e 	bl	1cd3c <mfg_read_mmr_refs>
err:
   1cd20:	e7f6      	b.n	1cd10 <mfg_init+0x1c>
   1cd22:	bf00      	nop
   1cd24:	2000a544 	.word	0x2000a544
   1cd28:	2000a56c 	.word	0x2000a56c

0001cd2c <mfg_open>:
{
   1cd2c:	b510      	push	{r4, lr}
   1cd2e:	4604      	mov	r4, r0
    mfg_init();
   1cd30:	f7ff ffe0 	bl	1ccf4 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1cd34:	2300      	movs	r3, #0
   1cd36:	6023      	str	r3, [r4, #0]
   1cd38:	6063      	str	r3, [r4, #4]
}
   1cd3a:	bd10      	pop	{r4, pc}

0001cd3c <mfg_read_mmr_refs>:
{
   1cd3c:	b500      	push	{lr}
   1cd3e:	b085      	sub	sp, #20
    mfg_open(&reader);
   1cd40:	a801      	add	r0, sp, #4
   1cd42:	f7ff fff3 	bl	1cd2c <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1cd46:	2104      	movs	r1, #4
   1cd48:	eb0d 0001 	add.w	r0, sp, r1
   1cd4c:	f7ff ffbb 	bl	1ccc6 <mfg_seek_next_with_type>
   1cd50:	4603      	mov	r3, r0
        switch (rc) {
   1cd52:	f110 0f0f 	cmn.w	r0, #15
   1cd56:	d004      	beq.n	1cd62 <mfg_read_mmr_refs+0x26>
   1cd58:	b128      	cbz	r0, 1cd66 <mfg_read_mmr_refs+0x2a>
}
   1cd5a:	4618      	mov	r0, r3
   1cd5c:	b005      	add	sp, #20
   1cd5e:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
   1cd62:	2300      	movs	r3, #0
   1cd64:	e7f9      	b.n	1cd5a <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1cd66:	a903      	add	r1, sp, #12
   1cd68:	a801      	add	r0, sp, #4
   1cd6a:	f7ff ffbe 	bl	1ccea <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1cd6e:	4603      	mov	r3, r0
   1cd70:	2800      	cmp	r0, #0
   1cd72:	d1f2      	bne.n	1cd5a <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   1cd74:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1cd78:	f7ff ff32 	bl	1cbe0 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1cd7c:	4603      	mov	r3, r0
   1cd7e:	2800      	cmp	r0, #0
   1cd80:	d0e1      	beq.n	1cd46 <mfg_read_mmr_refs+0xa>
   1cd82:	f110 0f0b 	cmn.w	r0, #11
   1cd86:	d0de      	beq.n	1cd46 <mfg_read_mmr_refs+0xa>
   1cd88:	e7e7      	b.n	1cd5a <mfg_read_mmr_refs+0x1e>
	...

0001cd8c <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
   1cd8c:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
   1cd8e:	4803      	ldr	r0, [pc, #12]	; (1cd9c <__wrap_coap_receive+0x10>)
   1cd90:	f7fb feb0 	bl	18af4 <console_printf>
    return -1;
}
   1cd94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cd98:	bd08      	pop	{r3, pc}
   1cd9a:	bf00      	nop
   1cd9c:	00021244 	.word	0x00021244

0001cda0 <_fini>:
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
int __aeabi_atexit(void *object, void (*destructor)(void *), void *dso_handle) { return 0; }

#ifndef ARCH_rv32imac  //  If not RISC-V...
void _fini(void) { }   //  Define the function to be called when main() exits
   1cda0:	4770      	bx	lr

0001cda2 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1cda2:	6843      	ldr	r3, [r0, #4]
   1cda4:	428b      	cmp	r3, r1
   1cda6:	d808      	bhi.n	1cdba <hal_flash_check_addr+0x18>
   1cda8:	6882      	ldr	r2, [r0, #8]
   1cdaa:	4413      	add	r3, r2
   1cdac:	428b      	cmp	r3, r1
   1cdae:	d301      	bcc.n	1cdb4 <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
   1cdb0:	2000      	movs	r0, #0
}
   1cdb2:	4770      	bx	lr
        return SYS_EINVAL;
   1cdb4:	f06f 0001 	mvn.w	r0, #1
   1cdb8:	4770      	bx	lr
   1cdba:	f06f 0001 	mvn.w	r0, #1
   1cdbe:	4770      	bx	lr

0001cdc0 <hal_flash_init>:
{
   1cdc0:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   1cdc2:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   1cdc4:	462c      	mov	r4, r5
   1cdc6:	e001      	b.n	1cdcc <hal_flash_init+0xc>
   1cdc8:	3401      	adds	r4, #1
   1cdca:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   1cdcc:	4620      	mov	r0, r4
   1cdce:	f7fe fce3 	bl	1b798 <hal_bsp_flash_dev>
        if (!hf) {
   1cdd2:	b138      	cbz	r0, 1cde4 <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   1cdd4:	6802      	ldr	r2, [r0, #0]
   1cdd6:	6952      	ldr	r2, [r2, #20]
   1cdd8:	4790      	blx	r2
   1cdda:	2800      	cmp	r0, #0
   1cddc:	d0f4      	beq.n	1cdc8 <hal_flash_init+0x8>
            rc = SYS_EIO;
   1cdde:	f06f 0504 	mvn.w	r5, #4
   1cde2:	e7f1      	b.n	1cdc8 <hal_flash_init+0x8>
}
   1cde4:	4628      	mov	r0, r5
   1cde6:	bd38      	pop	{r3, r4, r5, pc}

0001cde8 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1cde8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cdec:	460d      	mov	r5, r1
   1cdee:	4690      	mov	r8, r2
   1cdf0:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1cdf2:	f7fe fcd1 	bl	1b798 <hal_bsp_flash_dev>
    if (!hf) {
   1cdf6:	b1c0      	cbz	r0, 1ce2a <hal_flash_read+0x42>
   1cdf8:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1cdfa:	4629      	mov	r1, r5
   1cdfc:	f7ff ffd1 	bl	1cda2 <hal_flash_check_addr>
   1ce00:	b9b0      	cbnz	r0, 1ce30 <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1ce02:	19a9      	adds	r1, r5, r6
   1ce04:	4620      	mov	r0, r4
   1ce06:	f7ff ffcc 	bl	1cda2 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1ce0a:	b9a0      	cbnz	r0, 1ce36 <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1ce0c:	6823      	ldr	r3, [r4, #0]
   1ce0e:	681f      	ldr	r7, [r3, #0]
   1ce10:	4633      	mov	r3, r6
   1ce12:	4642      	mov	r2, r8
   1ce14:	4629      	mov	r1, r5
   1ce16:	4620      	mov	r0, r4
   1ce18:	47b8      	blx	r7
    if (rc != 0) {
   1ce1a:	4603      	mov	r3, r0
   1ce1c:	b910      	cbnz	r0, 1ce24 <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
   1ce1e:	4618      	mov	r0, r3
   1ce20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   1ce24:	f06f 0304 	mvn.w	r3, #4
   1ce28:	e7f9      	b.n	1ce1e <hal_flash_read+0x36>
        return SYS_EINVAL;
   1ce2a:	f06f 0301 	mvn.w	r3, #1
   1ce2e:	e7f6      	b.n	1ce1e <hal_flash_read+0x36>
        return SYS_EINVAL;
   1ce30:	f06f 0301 	mvn.w	r3, #1
   1ce34:	e7f3      	b.n	1ce1e <hal_flash_read+0x36>
   1ce36:	f06f 0301 	mvn.w	r3, #1
   1ce3a:	e7f0      	b.n	1ce1e <hal_flash_read+0x36>

0001ce3c <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return sizeof(NRF_FICR->DEVICEID) + sizeof(NRF_FICR->DEVICEADDR);
}
   1ce3c:	2010      	movs	r0, #16
   1ce3e:	4770      	bx	lr

0001ce40 <hal_bsp_hw_id>:
 * These values are generated at random.
 * DEVICEID[0-1] and DEVICEADDR[0-1].
 */
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
   1ce40:	b570      	push	{r4, r5, r6, lr}
   1ce42:	4606      	mov	r6, r0
   1ce44:	460c      	mov	r4, r1
    int len, cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEID), max_len);
   1ce46:	460d      	mov	r5, r1
   1ce48:	2908      	cmp	r1, #8
   1ce4a:	bf28      	it	cs
   1ce4c:	2508      	movcs	r5, #8
    memcpy(id, (void *)NRF_FICR->DEVICEID, cnt);
   1ce4e:	462a      	mov	r2, r5
   1ce50:	4906      	ldr	r1, [pc, #24]	; (1ce6c <hal_bsp_hw_id+0x2c>)
   1ce52:	f7fe f90d 	bl	1b070 <memcpy>
    len = cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEADDR), max_len - len);
   1ce56:	1b64      	subs	r4, r4, r5
   1ce58:	2c08      	cmp	r4, #8
   1ce5a:	bf28      	it	cs
   1ce5c:	2408      	movcs	r4, #8
    memcpy(id + len, (void *)NRF_FICR->DEVICEADDR, cnt);
   1ce5e:	4622      	mov	r2, r4
   1ce60:	4903      	ldr	r1, [pc, #12]	; (1ce70 <hal_bsp_hw_id+0x30>)
   1ce62:	1970      	adds	r0, r6, r5
   1ce64:	f7fe f904 	bl	1b070 <memcpy>

    return len + cnt;
}
   1ce68:	1928      	adds	r0, r5, r4
   1ce6a:	bd70      	pop	{r4, r5, r6, pc}
   1ce6c:	10000060 	.word	0x10000060
   1ce70:	100000a4 	.word	0x100000a4

0001ce74 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1ce74:	b40e      	push	{r1, r2, r3}
   1ce76:	b500      	push	{lr}
   1ce78:	b082      	sub	sp, #8
   1ce7a:	ab03      	add	r3, sp, #12
   1ce7c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1ce80:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1ce82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1ce86:	f7fe fbef 	bl	1b668 <vsnprintf>
	va_end(ap);

	return rv;
}
   1ce8a:	b002      	add	sp, #8
   1ce8c:	f85d eb04 	ldr.w	lr, [sp], #4
   1ce90:	b003      	add	sp, #12
   1ce92:	4770      	bx	lr

0001ce94 <__aeabi_uldivmod>:
   1ce94:	b953      	cbnz	r3, 1ceac <__aeabi_uldivmod+0x18>
   1ce96:	b94a      	cbnz	r2, 1ceac <__aeabi_uldivmod+0x18>
   1ce98:	2900      	cmp	r1, #0
   1ce9a:	bf08      	it	eq
   1ce9c:	2800      	cmpeq	r0, #0
   1ce9e:	bf1c      	itt	ne
   1cea0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1cea4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1cea8:	f000 b972 	b.w	1d190 <__aeabi_idiv0>
   1ceac:	f1ad 0c08 	sub.w	ip, sp, #8
   1ceb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1ceb4:	f000 f806 	bl	1cec4 <__udivmoddi4>
   1ceb8:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cec0:	b004      	add	sp, #16
   1cec2:	4770      	bx	lr

0001cec4 <__udivmoddi4>:
   1cec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cec8:	9e08      	ldr	r6, [sp, #32]
   1ceca:	4604      	mov	r4, r0
   1cecc:	4688      	mov	r8, r1
   1cece:	2b00      	cmp	r3, #0
   1ced0:	d14b      	bne.n	1cf6a <__udivmoddi4+0xa6>
   1ced2:	428a      	cmp	r2, r1
   1ced4:	4615      	mov	r5, r2
   1ced6:	d967      	bls.n	1cfa8 <__udivmoddi4+0xe4>
   1ced8:	fab2 f282 	clz	r2, r2
   1cedc:	b14a      	cbz	r2, 1cef2 <__udivmoddi4+0x2e>
   1cede:	f1c2 0720 	rsb	r7, r2, #32
   1cee2:	fa01 f302 	lsl.w	r3, r1, r2
   1cee6:	fa20 f707 	lsr.w	r7, r0, r7
   1ceea:	4095      	lsls	r5, r2
   1ceec:	ea47 0803 	orr.w	r8, r7, r3
   1cef0:	4094      	lsls	r4, r2
   1cef2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1cef6:	0c23      	lsrs	r3, r4, #16
   1cef8:	fbb8 f7fe 	udiv	r7, r8, lr
   1cefc:	fa1f fc85 	uxth.w	ip, r5
   1cf00:	fb0e 8817 	mls	r8, lr, r7, r8
   1cf04:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   1cf08:	fb07 f10c 	mul.w	r1, r7, ip
   1cf0c:	4299      	cmp	r1, r3
   1cf0e:	d909      	bls.n	1cf24 <__udivmoddi4+0x60>
   1cf10:	18eb      	adds	r3, r5, r3
   1cf12:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   1cf16:	f080 811b 	bcs.w	1d150 <__udivmoddi4+0x28c>
   1cf1a:	4299      	cmp	r1, r3
   1cf1c:	f240 8118 	bls.w	1d150 <__udivmoddi4+0x28c>
   1cf20:	3f02      	subs	r7, #2
   1cf22:	442b      	add	r3, r5
   1cf24:	1a5b      	subs	r3, r3, r1
   1cf26:	b2a4      	uxth	r4, r4
   1cf28:	fbb3 f0fe 	udiv	r0, r3, lr
   1cf2c:	fb0e 3310 	mls	r3, lr, r0, r3
   1cf30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1cf34:	fb00 fc0c 	mul.w	ip, r0, ip
   1cf38:	45a4      	cmp	ip, r4
   1cf3a:	d909      	bls.n	1cf50 <__udivmoddi4+0x8c>
   1cf3c:	192c      	adds	r4, r5, r4
   1cf3e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1cf42:	f080 8107 	bcs.w	1d154 <__udivmoddi4+0x290>
   1cf46:	45a4      	cmp	ip, r4
   1cf48:	f240 8104 	bls.w	1d154 <__udivmoddi4+0x290>
   1cf4c:	3802      	subs	r0, #2
   1cf4e:	442c      	add	r4, r5
   1cf50:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   1cf54:	eba4 040c 	sub.w	r4, r4, ip
   1cf58:	2700      	movs	r7, #0
   1cf5a:	b11e      	cbz	r6, 1cf64 <__udivmoddi4+0xa0>
   1cf5c:	40d4      	lsrs	r4, r2
   1cf5e:	2300      	movs	r3, #0
   1cf60:	e9c6 4300 	strd	r4, r3, [r6]
   1cf64:	4639      	mov	r1, r7
   1cf66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cf6a:	428b      	cmp	r3, r1
   1cf6c:	d909      	bls.n	1cf82 <__udivmoddi4+0xbe>
   1cf6e:	2e00      	cmp	r6, #0
   1cf70:	f000 80eb 	beq.w	1d14a <__udivmoddi4+0x286>
   1cf74:	2700      	movs	r7, #0
   1cf76:	e9c6 0100 	strd	r0, r1, [r6]
   1cf7a:	4638      	mov	r0, r7
   1cf7c:	4639      	mov	r1, r7
   1cf7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cf82:	fab3 f783 	clz	r7, r3
   1cf86:	2f00      	cmp	r7, #0
   1cf88:	d147      	bne.n	1d01a <__udivmoddi4+0x156>
   1cf8a:	428b      	cmp	r3, r1
   1cf8c:	d302      	bcc.n	1cf94 <__udivmoddi4+0xd0>
   1cf8e:	4282      	cmp	r2, r0
   1cf90:	f200 80fa 	bhi.w	1d188 <__udivmoddi4+0x2c4>
   1cf94:	1a84      	subs	r4, r0, r2
   1cf96:	eb61 0303 	sbc.w	r3, r1, r3
   1cf9a:	2001      	movs	r0, #1
   1cf9c:	4698      	mov	r8, r3
   1cf9e:	2e00      	cmp	r6, #0
   1cfa0:	d0e0      	beq.n	1cf64 <__udivmoddi4+0xa0>
   1cfa2:	e9c6 4800 	strd	r4, r8, [r6]
   1cfa6:	e7dd      	b.n	1cf64 <__udivmoddi4+0xa0>
   1cfa8:	b902      	cbnz	r2, 1cfac <__udivmoddi4+0xe8>
   1cfaa:	deff      	udf	#255	; 0xff
   1cfac:	fab2 f282 	clz	r2, r2
   1cfb0:	2a00      	cmp	r2, #0
   1cfb2:	f040 808f 	bne.w	1d0d4 <__udivmoddi4+0x210>
   1cfb6:	1b49      	subs	r1, r1, r5
   1cfb8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1cfbc:	fa1f f885 	uxth.w	r8, r5
   1cfc0:	2701      	movs	r7, #1
   1cfc2:	fbb1 fcfe 	udiv	ip, r1, lr
   1cfc6:	0c23      	lsrs	r3, r4, #16
   1cfc8:	fb0e 111c 	mls	r1, lr, ip, r1
   1cfcc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1cfd0:	fb08 f10c 	mul.w	r1, r8, ip
   1cfd4:	4299      	cmp	r1, r3
   1cfd6:	d907      	bls.n	1cfe8 <__udivmoddi4+0x124>
   1cfd8:	18eb      	adds	r3, r5, r3
   1cfda:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1cfde:	d202      	bcs.n	1cfe6 <__udivmoddi4+0x122>
   1cfe0:	4299      	cmp	r1, r3
   1cfe2:	f200 80cd 	bhi.w	1d180 <__udivmoddi4+0x2bc>
   1cfe6:	4684      	mov	ip, r0
   1cfe8:	1a59      	subs	r1, r3, r1
   1cfea:	b2a3      	uxth	r3, r4
   1cfec:	fbb1 f0fe 	udiv	r0, r1, lr
   1cff0:	fb0e 1410 	mls	r4, lr, r0, r1
   1cff4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   1cff8:	fb08 f800 	mul.w	r8, r8, r0
   1cffc:	45a0      	cmp	r8, r4
   1cffe:	d907      	bls.n	1d010 <__udivmoddi4+0x14c>
   1d000:	192c      	adds	r4, r5, r4
   1d002:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1d006:	d202      	bcs.n	1d00e <__udivmoddi4+0x14a>
   1d008:	45a0      	cmp	r8, r4
   1d00a:	f200 80b6 	bhi.w	1d17a <__udivmoddi4+0x2b6>
   1d00e:	4618      	mov	r0, r3
   1d010:	eba4 0408 	sub.w	r4, r4, r8
   1d014:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1d018:	e79f      	b.n	1cf5a <__udivmoddi4+0x96>
   1d01a:	f1c7 0c20 	rsb	ip, r7, #32
   1d01e:	40bb      	lsls	r3, r7
   1d020:	fa22 fe0c 	lsr.w	lr, r2, ip
   1d024:	ea4e 0e03 	orr.w	lr, lr, r3
   1d028:	fa01 f407 	lsl.w	r4, r1, r7
   1d02c:	fa20 f50c 	lsr.w	r5, r0, ip
   1d030:	fa21 f30c 	lsr.w	r3, r1, ip
   1d034:	ea4f 481e 	mov.w	r8, lr, lsr #16
   1d038:	4325      	orrs	r5, r4
   1d03a:	fbb3 f9f8 	udiv	r9, r3, r8
   1d03e:	0c2c      	lsrs	r4, r5, #16
   1d040:	fb08 3319 	mls	r3, r8, r9, r3
   1d044:	fa1f fa8e 	uxth.w	sl, lr
   1d048:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   1d04c:	fb09 f40a 	mul.w	r4, r9, sl
   1d050:	429c      	cmp	r4, r3
   1d052:	fa02 f207 	lsl.w	r2, r2, r7
   1d056:	fa00 f107 	lsl.w	r1, r0, r7
   1d05a:	d90b      	bls.n	1d074 <__udivmoddi4+0x1b0>
   1d05c:	eb1e 0303 	adds.w	r3, lr, r3
   1d060:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1d064:	f080 8087 	bcs.w	1d176 <__udivmoddi4+0x2b2>
   1d068:	429c      	cmp	r4, r3
   1d06a:	f240 8084 	bls.w	1d176 <__udivmoddi4+0x2b2>
   1d06e:	f1a9 0902 	sub.w	r9, r9, #2
   1d072:	4473      	add	r3, lr
   1d074:	1b1b      	subs	r3, r3, r4
   1d076:	b2ad      	uxth	r5, r5
   1d078:	fbb3 f0f8 	udiv	r0, r3, r8
   1d07c:	fb08 3310 	mls	r3, r8, r0, r3
   1d080:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   1d084:	fb00 fa0a 	mul.w	sl, r0, sl
   1d088:	45a2      	cmp	sl, r4
   1d08a:	d908      	bls.n	1d09e <__udivmoddi4+0x1da>
   1d08c:	eb1e 0404 	adds.w	r4, lr, r4
   1d090:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1d094:	d26b      	bcs.n	1d16e <__udivmoddi4+0x2aa>
   1d096:	45a2      	cmp	sl, r4
   1d098:	d969      	bls.n	1d16e <__udivmoddi4+0x2aa>
   1d09a:	3802      	subs	r0, #2
   1d09c:	4474      	add	r4, lr
   1d09e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1d0a2:	fba0 8902 	umull	r8, r9, r0, r2
   1d0a6:	eba4 040a 	sub.w	r4, r4, sl
   1d0aa:	454c      	cmp	r4, r9
   1d0ac:	46c2      	mov	sl, r8
   1d0ae:	464b      	mov	r3, r9
   1d0b0:	d354      	bcc.n	1d15c <__udivmoddi4+0x298>
   1d0b2:	d051      	beq.n	1d158 <__udivmoddi4+0x294>
   1d0b4:	2e00      	cmp	r6, #0
   1d0b6:	d069      	beq.n	1d18c <__udivmoddi4+0x2c8>
   1d0b8:	ebb1 050a 	subs.w	r5, r1, sl
   1d0bc:	eb64 0403 	sbc.w	r4, r4, r3
   1d0c0:	fa04 fc0c 	lsl.w	ip, r4, ip
   1d0c4:	40fd      	lsrs	r5, r7
   1d0c6:	40fc      	lsrs	r4, r7
   1d0c8:	ea4c 0505 	orr.w	r5, ip, r5
   1d0cc:	e9c6 5400 	strd	r5, r4, [r6]
   1d0d0:	2700      	movs	r7, #0
   1d0d2:	e747      	b.n	1cf64 <__udivmoddi4+0xa0>
   1d0d4:	f1c2 0320 	rsb	r3, r2, #32
   1d0d8:	fa20 f703 	lsr.w	r7, r0, r3
   1d0dc:	4095      	lsls	r5, r2
   1d0de:	fa01 f002 	lsl.w	r0, r1, r2
   1d0e2:	fa21 f303 	lsr.w	r3, r1, r3
   1d0e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1d0ea:	4338      	orrs	r0, r7
   1d0ec:	0c01      	lsrs	r1, r0, #16
   1d0ee:	fbb3 f7fe 	udiv	r7, r3, lr
   1d0f2:	fa1f f885 	uxth.w	r8, r5
   1d0f6:	fb0e 3317 	mls	r3, lr, r7, r3
   1d0fa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1d0fe:	fb07 f308 	mul.w	r3, r7, r8
   1d102:	428b      	cmp	r3, r1
   1d104:	fa04 f402 	lsl.w	r4, r4, r2
   1d108:	d907      	bls.n	1d11a <__udivmoddi4+0x256>
   1d10a:	1869      	adds	r1, r5, r1
   1d10c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   1d110:	d22f      	bcs.n	1d172 <__udivmoddi4+0x2ae>
   1d112:	428b      	cmp	r3, r1
   1d114:	d92d      	bls.n	1d172 <__udivmoddi4+0x2ae>
   1d116:	3f02      	subs	r7, #2
   1d118:	4429      	add	r1, r5
   1d11a:	1acb      	subs	r3, r1, r3
   1d11c:	b281      	uxth	r1, r0
   1d11e:	fbb3 f0fe 	udiv	r0, r3, lr
   1d122:	fb0e 3310 	mls	r3, lr, r0, r3
   1d126:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1d12a:	fb00 f308 	mul.w	r3, r0, r8
   1d12e:	428b      	cmp	r3, r1
   1d130:	d907      	bls.n	1d142 <__udivmoddi4+0x27e>
   1d132:	1869      	adds	r1, r5, r1
   1d134:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1d138:	d217      	bcs.n	1d16a <__udivmoddi4+0x2a6>
   1d13a:	428b      	cmp	r3, r1
   1d13c:	d915      	bls.n	1d16a <__udivmoddi4+0x2a6>
   1d13e:	3802      	subs	r0, #2
   1d140:	4429      	add	r1, r5
   1d142:	1ac9      	subs	r1, r1, r3
   1d144:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   1d148:	e73b      	b.n	1cfc2 <__udivmoddi4+0xfe>
   1d14a:	4637      	mov	r7, r6
   1d14c:	4630      	mov	r0, r6
   1d14e:	e709      	b.n	1cf64 <__udivmoddi4+0xa0>
   1d150:	4607      	mov	r7, r0
   1d152:	e6e7      	b.n	1cf24 <__udivmoddi4+0x60>
   1d154:	4618      	mov	r0, r3
   1d156:	e6fb      	b.n	1cf50 <__udivmoddi4+0x8c>
   1d158:	4541      	cmp	r1, r8
   1d15a:	d2ab      	bcs.n	1d0b4 <__udivmoddi4+0x1f0>
   1d15c:	ebb8 0a02 	subs.w	sl, r8, r2
   1d160:	eb69 020e 	sbc.w	r2, r9, lr
   1d164:	3801      	subs	r0, #1
   1d166:	4613      	mov	r3, r2
   1d168:	e7a4      	b.n	1d0b4 <__udivmoddi4+0x1f0>
   1d16a:	4660      	mov	r0, ip
   1d16c:	e7e9      	b.n	1d142 <__udivmoddi4+0x27e>
   1d16e:	4618      	mov	r0, r3
   1d170:	e795      	b.n	1d09e <__udivmoddi4+0x1da>
   1d172:	4667      	mov	r7, ip
   1d174:	e7d1      	b.n	1d11a <__udivmoddi4+0x256>
   1d176:	4681      	mov	r9, r0
   1d178:	e77c      	b.n	1d074 <__udivmoddi4+0x1b0>
   1d17a:	3802      	subs	r0, #2
   1d17c:	442c      	add	r4, r5
   1d17e:	e747      	b.n	1d010 <__udivmoddi4+0x14c>
   1d180:	f1ac 0c02 	sub.w	ip, ip, #2
   1d184:	442b      	add	r3, r5
   1d186:	e72f      	b.n	1cfe8 <__udivmoddi4+0x124>
   1d188:	4638      	mov	r0, r7
   1d18a:	e708      	b.n	1cf9e <__udivmoddi4+0xda>
   1d18c:	4637      	mov	r7, r6
   1d18e:	e6e9      	b.n	1cf64 <__udivmoddi4+0xa0>

0001d190 <__aeabi_idiv0>:
   1d190:	4770      	bx	lr
   1d192:	bf00      	nop

0001d194 <__aeabi_memclr>:
   1d194:	2200      	movs	r2, #0
   1d196:	f000 b803 	b.w	1d1a0 <__aeabi_memset>
   1d19a:	bf00      	nop

0001d19c <__aeabi_memcpy>:
   1d19c:	f7fd bf68 	b.w	1b070 <memcpy>

0001d1a0 <__aeabi_memset>:
   1d1a0:	b470      	push	{r4, r5, r6}
   1d1a2:	0784      	lsls	r4, r0, #30
   1d1a4:	d046      	beq.n	1d234 <__aeabi_memset+0x94>
   1d1a6:	1e4c      	subs	r4, r1, #1
   1d1a8:	2900      	cmp	r1, #0
   1d1aa:	d041      	beq.n	1d230 <__aeabi_memset+0x90>
   1d1ac:	b2d5      	uxtb	r5, r2
   1d1ae:	4603      	mov	r3, r0
   1d1b0:	e002      	b.n	1d1b8 <__aeabi_memset+0x18>
   1d1b2:	1e61      	subs	r1, r4, #1
   1d1b4:	b3e4      	cbz	r4, 1d230 <__aeabi_memset+0x90>
   1d1b6:	460c      	mov	r4, r1
   1d1b8:	f803 5b01 	strb.w	r5, [r3], #1
   1d1bc:	0799      	lsls	r1, r3, #30
   1d1be:	d1f8      	bne.n	1d1b2 <__aeabi_memset+0x12>
   1d1c0:	2c03      	cmp	r4, #3
   1d1c2:	d92e      	bls.n	1d222 <__aeabi_memset+0x82>
   1d1c4:	b2d5      	uxtb	r5, r2
   1d1c6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1d1ca:	2c0f      	cmp	r4, #15
   1d1cc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1d1d0:	d919      	bls.n	1d206 <__aeabi_memset+0x66>
   1d1d2:	4626      	mov	r6, r4
   1d1d4:	f103 0110 	add.w	r1, r3, #16
   1d1d8:	3e10      	subs	r6, #16
   1d1da:	2e0f      	cmp	r6, #15
   1d1dc:	f841 5c10 	str.w	r5, [r1, #-16]
   1d1e0:	f841 5c0c 	str.w	r5, [r1, #-12]
   1d1e4:	f841 5c08 	str.w	r5, [r1, #-8]
   1d1e8:	f841 5c04 	str.w	r5, [r1, #-4]
   1d1ec:	f101 0110 	add.w	r1, r1, #16
   1d1f0:	d8f2      	bhi.n	1d1d8 <__aeabi_memset+0x38>
   1d1f2:	f1a4 0110 	sub.w	r1, r4, #16
   1d1f6:	f021 010f 	bic.w	r1, r1, #15
   1d1fa:	f004 040f 	and.w	r4, r4, #15
   1d1fe:	3110      	adds	r1, #16
   1d200:	2c03      	cmp	r4, #3
   1d202:	440b      	add	r3, r1
   1d204:	d90d      	bls.n	1d222 <__aeabi_memset+0x82>
   1d206:	461e      	mov	r6, r3
   1d208:	4621      	mov	r1, r4
   1d20a:	3904      	subs	r1, #4
   1d20c:	2903      	cmp	r1, #3
   1d20e:	f846 5b04 	str.w	r5, [r6], #4
   1d212:	d8fa      	bhi.n	1d20a <__aeabi_memset+0x6a>
   1d214:	1f21      	subs	r1, r4, #4
   1d216:	f021 0103 	bic.w	r1, r1, #3
   1d21a:	3104      	adds	r1, #4
   1d21c:	440b      	add	r3, r1
   1d21e:	f004 0403 	and.w	r4, r4, #3
   1d222:	b12c      	cbz	r4, 1d230 <__aeabi_memset+0x90>
   1d224:	b2d2      	uxtb	r2, r2
   1d226:	441c      	add	r4, r3
   1d228:	f803 2b01 	strb.w	r2, [r3], #1
   1d22c:	42a3      	cmp	r3, r4
   1d22e:	d1fb      	bne.n	1d228 <__aeabi_memset+0x88>
   1d230:	bc70      	pop	{r4, r5, r6}
   1d232:	4770      	bx	lr
   1d234:	460c      	mov	r4, r1
   1d236:	4603      	mov	r3, r0
   1d238:	e7c2      	b.n	1d1c0 <__aeabi_memset+0x20>
   1d23a:	5344      	.short	0x5344
   1d23c:	61662050 	.word	0x61662050
   1d240:	43546c69 	.word	0x43546c69
   1d244:	61662048 	.word	0x61662048
   1d248:	45476c69 	.word	0x45476c69
   1d24c:	61662054 	.word	0x61662054
   1d250:	55526c69 	.word	0x55526c69
   1d254:	6166204e 	.word	0x6166204e
   1d258:	6c69      	.short	0x6c69
   1d25a:	7572      	.short	0x7572
   1d25c:	612f7473 	.word	0x612f7473
   1d260:	732f7070 	.word	0x732f7070
   1d264:	6c2f6372 	.word	0x6c2f6372
   1d268:	722e6269 	.word	0x722e6269
   1d26c:	00000073 	.word	0x00000073
   1d270:	0001d25a 	.word	0x0001d25a
   1d274:	00000013 	.word	0x00000013
   1d278:	0000005b 	.word	0x0000005b
   1d27c:	00000005 	.word	0x00000005
   1d280:	0001d25a 	.word	0x0001d25a
   1d284:	00000013 	.word	0x00000013
   1d288:	00000064 	.word	0x00000064
   1d28c:	00000005 	.word	0x00000005
   1d290:	50494843 	.word	0x50494843
   1d294:	61662038 	.word	0x61662038
   1d298:	00006c69 	.word	0x00006c69
   1d29c:	0001d25a 	.word	0x0001d25a
   1d2a0:	00000013 	.word	0x00000013
   1d2a4:	00000076 	.word	0x00000076
   1d2a8:	00000005 	.word	0x00000005
   1d2ac:	0001d25a 	.word	0x0001d25a
   1d2b0:	00000013 	.word	0x00000013
   1d2b4:	0000007c 	.word	0x0000007c
   1d2b8:	0000000d 	.word	0x0000000d
   1d2bc:	0001d25a 	.word	0x0001d25a
   1d2c0:	00000013 	.word	0x00000013
   1d2c4:	0000007b 	.word	0x0000007b
   1d2c8:	00000009 	.word	0x00000009
   1d2cc:	696e6170 	.word	0x696e6170
   1d2d0:	2063      	.short	0x2063
   1d2d2:	6f6e      	.short	0x6f6e
   1d2d4:	636f6c20 	.word	0x636f6c20
   1d2d8:	0a          	.byte	0x0a
   1d2d9:	61          	.byte	0x61
   1d2da:	2074      	.short	0x2074
   1d2dc:	6e696c20 	.word	0x6e696c20
   1d2e0:	2065      	.short	0x2065
   1d2e2:	000a      	.short	0x000a
   1d2e4:	0001d25a 	.word	0x0001d25a
   1d2e8:	00000013 	.word	0x00000013
   1d2ec:	00000094 	.word	0x00000094
   1d2f0:	00000014 	.word	0x00000014
   1d2f4:	74737552 	.word	0x74737552
   1d2f8:	756f7420 	.word	0x756f7420
   1d2fc:	73206863 	.word	0x73206863
   1d300:	6f736e65 	.word	0x6f736e65
   1d304:	00000a72 	.word	0x00000a72
   1d308:	00000000 	.word	0x00000000
   1d30c:	0001d308 	.word	0x0001d308
   1d310:	65737361 	.word	0x65737361
   1d314:	6f697472 	.word	0x6f697472
   1d318:	6166206e 	.word	0x6166206e
   1d31c:	64656c69 	.word	0x64656c69
   1d320:	2860203a 	.word	0x2860203a
   1d324:	7466656c 	.word	0x7466656c
   1d328:	203d3d20 	.word	0x203d3d20
   1d32c:	68676972 	.word	0x68676972
   1d330:	0a602974 	.word	0x0a602974
   1d334:	656c2020 	.word	0x656c2020
   1d338:	203a7466 	.word	0x203a7466
   1d33c:	60          	.byte	0x60
   1d33d:	60          	.byte	0x60
   1d33e:	0a2c      	.short	0x0a2c
   1d340:	67697220 	.word	0x67697220
   1d344:	203a7468 	.word	0x203a7468
   1d348:	60          	.byte	0x60
   1d349:	60          	.byte	0x60
   1d34a:	203a      	.short	0x203a
   1d34c:	0001d310 	.word	0x0001d310
   1d350:	0000002d 	.word	0x0000002d
   1d354:	0001d33d 	.word	0x0001d33d
   1d358:	0000000c 	.word	0x0000000c
   1d35c:	0001d349 	.word	0x0001d349
   1d360:	00000003 	.word	0x00000003
   1d364:	0001d34c 	.word	0x0001d34c
   1d368:	20515249 	.word	0x20515249
   1d36c:	74696e69 	.word	0x74696e69
   1d370:	69616620 	.word	0x69616620
   1d374:	0000006c 	.word	0x0000006c
   1d378:	0001d368 	.word	0x0001d368
   1d37c:	0000000d 	.word	0x0000000d
   1d380:	0001d378 	.word	0x0001d378
   1d384:	0001d384 	.word	0x0001d384
   1d388:	74737572 	.word	0x74737572
   1d38c:	7070612f 	.word	0x7070612f
   1d390:	6372732f 	.word	0x6372732f
   1d394:	756f742f 	.word	0x756f742f
   1d398:	735f6863 	.word	0x735f6863
   1d39c:	6f736e65 	.word	0x6f736e65
   1d3a0:	73722e72 	.word	0x73722e72
   1d3a4:	0001d388 	.word	0x0001d388
   1d3a8:	0000001c 	.word	0x0000001c
   1d3ac:	0000003f 	.word	0x0000003f
   1d3b0:	00000005 	.word	0x00000005
   1d3b4:	20633269 	.word	0x20633269
   1d3b8:	72646461 	.word	0x72646461
   1d3bc:	0001d388 	.word	0x0001d388
   1d3c0:	0000001c 	.word	0x0000001c
   1d3c4:	0000004b 	.word	0x0000004b
   1d3c8:	00000011 	.word	0x00000011
   1d3cc:	63756f74 	.word	0x63756f74
   1d3d0:	74616468 	.word	0x74616468
   1d3d4:	61662061 	.word	0x61662061
   1d3d8:	00006c69 	.word	0x00006c69
   1d3dc:	0001d388 	.word	0x0001d388
   1d3e0:	0000001c 	.word	0x0000001c
   1d3e4:	00000056 	.word	0x00000056
   1d3e8:	00000009 	.word	0x00000009
   1d3ec:	0001d388 	.word	0x0001d388
   1d3f0:	0000001c 	.word	0x0000001c
   1d3f4:	0000005a 	.word	0x0000005a
   1d3f8:	00000031 	.word	0x00000031
   1d3fc:	64616572 	.word	0x64616572
   1d400:	756f7420 	.word	0x756f7420
   1d404:	61646863 	.word	0x61646863
   1d408:	66206174 	.word	0x66206174
   1d40c:	006c6961 	.word	0x006c6961
   1d410:	0001d388 	.word	0x0001d388
   1d414:	0000001c 	.word	0x0000001c
   1d418:	00000089 	.word	0x00000089
   1d41c:	00000005 	.word	0x00000005
   1d420:	0001d388 	.word	0x0001d388
   1d424:	0000001c 	.word	0x0000001c
   1d428:	00000095 	.word	0x00000095
   1d42c:	00000037 	.word	0x00000037

0001d430 <str.0>:
   1d430:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1d440:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1d450:	00000077 0001d388 0000001c 00000095     w...............
   1d460:	00000024 00000000 00000000 00000000     $...............

0001d470 <str.1>:
   1d470:	65747461 2074706d 61206f74 77206464     attempt to add w
   1d480:	20687469 7265766f 776f6c66 0001d388     ith overflow....
   1d490:	0000001c 00000095 00000020 0001d388     ........ .......
   1d4a0:	0000001c 00000099 00000009 0001d388     ................
   1d4b0:	0000001c 0000009a 00000037 0001d388     ........7.......
   1d4c0:	0000001c 0000009a 00000023 0001d388     ........#.......
   1d4d0:	0000001c 0000009a 0000001f 0001d388     ................
   1d4e0:	0000001c 0000009b 00000037 0001d388     ........7.......
   1d4f0:	0000001c 0000009b 00000023 0001d388     ........#.......
   1d500:	0000001c 0000009b 0000001f 0001d388     ................
   1d510:	0000001c 0000009c 00000009 0001d388     ................
   1d520:	0000001c 0000009e 00000037 0001d388     ........7.......
   1d530:	0000001c 0000009e 00000023 0001d388     ........#.......
   1d540:	0000001c 0000009e 0000001f 0001d388     ................
   1d550:	0000001c 0000009f 00000037 0001d388     ........7.......
   1d560:	0000001c 0000009f 00000023 0001d388     ........#.......
   1d570:	0000001c 0000009f 0000001f 0001d388     ................
   1d580:	0000001c 000000a0 00000009 0001d388     ................
   1d590:	0000001c 000000a4 00000030 0001d388     ........0.......
   1d5a0:	0000001c 000000a4 0000001a 0001d388     ................
   1d5b0:	0000001c 000000a4 00000016 0001d388     ................
   1d5c0:	0000001c 000000a3 00000009 0001d388     ................
   1d5d0:	0000001c 000000a6 00000030 0001d388     ........0.......
   1d5e0:	0000001c 000000a6 0000001a 0001d388     ................
   1d5f0:	0000001c 000000a6 00000016 0001d388     ................
   1d600:	0000001c 000000a5 00000009 0001d388     ................
   1d610:	0000001c 000000aa 0000002d 0001d388     ........-.......
   1d620:	0000001c 000000aa 0000001a 0001d388     ................
   1d630:	0000001c 000000aa 00000016 0001d388     ................
   1d640:	0000001c 000000a9 00000009 0001d388     ................
   1d650:	0000001c 000000ac 0000002d 0001d388     ........-.......
   1d660:	0000001c 000000ac 0000001a 0001d388     ................
   1d670:	0000001c 000000ac 00000016 0001d388     ................
   1d680:	0000001c 000000ab 00000009 0001d388     ................
   1d690:	0000001c 000000af 0000000d 0001d388     ................
   1d6a0:	0000001c 000000af 0000002c 20633269     ........,...i2c 
   1d6b0:	00667562 0001d388 0000001c 000000f1     buf.............
   1d6c0:	00000005 0001d388 0000001c 000000f2     ................
   1d6d0:	0000000d 0001d388 0000001c 000000f2     ................
   1d6e0:	00000005 20633269 6c696166 7375520a     ....i2c fail.Rus
   1d6f0:	48432074 0a385049 50532512 20454341     t CHIP8..%SPACE 
   1d700:	41564e49 53524544 392e3020 79422031     INVADERS 0.91 By
   1d710:	76614420 57206469 45544e49 61006052      David WINTER`.a
   1d720:	a3086200 7118d0dd 311ef208 702d1220     .b.....q...1 .-p
   1d730:	30006108 692d1240 6e156c05 60912300     .a.0@.-i.l.n.#.`
   1d740:	f015f00a 12003007 7e91234b 66451201     .....0..K#.~..Ef
   1d750:	691c6800 6b046a00 6d046c0a 000f6e3c     .h.i.j.k.l.m<n..
   1d760:	237523e0 6015fd51 129ee004 3875237d     .#u#Q..`....}#u8
   1d770:	23ff7800 e0066075 238b129e 78393875     .x.#u`.....#u89x
   1d780:	36752301 609f1200 129ee005 650166e9     .#u6...`.....f.e
   1d790:	a380841b a351d4d9 7551d4d9 12ff35ff     ......Q...Qu.5..
   1d7a0:	120066ad 3f51d4e9 d4e91201 83006651     .f....Q?....Qf..
   1d7b0:	83037340 83f862b5 33086222 23c91200     @s...b.."b.3...#
   1d7c0:	4306827d 33d31208 23d51210 3306827d     }..C...3...#}..3
   1d7d0:	23dd1218 4306827d 33e71220 23e91228     ...#}..C ..3(..#
   1d7e0:	13003e7d 49067907 6a006918 6c0a6b04     }>...y.I.i.j.k.l
   1d7f0:	6ef47d04 23e0000f fd752351 f76f1215     .}.n...#Q#u...o.
   1d800:	12003707 2315fd6f 3ba48b51 7c1b1312     .7..o..#Q..;...|
   1d810:	3bfc6a02 7c231302 23046a02 12183c51     .j.;..#|.j.#Q<..
   1d820:	a4e0006f 611460dd d00f6208 f208701f     o....`.a.b...p..
   1d830:	132c301e f0ff6033 3007f015 f0411300     .0,.3`.....0..A.
   1d840:	a7e0000a 1265fe06 f9c1a325 2308611e     ......e.%....a.#
   1d850:	23068169 23068169 23068169 00d07b69     i..#i..#i..#i{..
   1d860:	80e080ee db003012 000c7bc6 60d9a3ee     .....0...{.....`
   1d870:	0004d81c 8e5123ee 60512323 f018f005     .....#Q.##Q`....
   1d880:	3007f015 00891300 8d006aee e9046be0     ...0.....j...k..
   1d890:	a65712a1 f01efd0c 13ff3065 6b006aaf     ..W.....e0...j.k
   1d8a0:	6e016d04 a5971301 db1ef00a 7d087bc6     .m.n.........{.}
   1d8b0:	3a017a01 00971307 ff7e3cee 7e9999ff     .z.:.....<~....~
   1d8c0:	2424ffff 3cff7ee7 81db7e3c ff7e3c42     ..$$.~.<<~..B<~.
   1d8d0:	7c3810db 7f0000fe 7f003f00 01000000     ..8|.....?......
   1d8e0:	03030101 00000303 2020203f 20202020     ........?       
   1d8f0:	08083f20 fe0000ff fe00fc00 7e000000      ?.............~
   1d900:	62624242 00006262 000000ff 00000000     BBbbbb..........
   1d910:	0000ff00 007d00ff 7d057d41 c200007d     ......}.A}.}}...
   1d920:	6c44c6c2 00003828 000000ff 00000000     ..Dl(8..........
   1d930:	0000ff00 10f700ff 04f7f714 7c000004     ...............|
   1d940:	c2c2fe44 0000c2c2 000000ff 00000000     D...............
   1d950:	0000ff00 20ef00ff 2fe8e828 f900002f     ....... (..//...
   1d960:	c5c5c585 0000f9c5 000000ff 00000000     ................
   1d970:	0000ff00 00be00ff be203020 f70000be     ........ 0 .....
   1d980:	8585e704 0000f484 000000ff 00000000     ................
   1d990:	0000ff00 7f0000ff 7f003f00 ef000000     .........?......
   1d9a0:	e000ef28 00006f60 000000ff 00000000     (...`o..........
   1d9b0:	0000ff00 fe0000ff fe00fc00 c0000000     ................
   1d9c0:	c0c0c000 0000c0c0 040404fc 04040404     ................
   1d9d0:	1010fc04 b981f9ff fa9a9a8b 9a8afa00     ................
   1d9e0:	f8999b9a f42525e6 00343434 37341417     .....%%.444...47
   1d9f0:	dfc72636 d85c5050 df00dfd8 1b121f11     6&..PP\.........
   1da00:	447cd919 868686fe 82fe84fc 80fefe82     ..|D............
   1da10:	fec0c0c0 c2c282fc 80fefcc2 fec0c0f8     ................
   1da20:	c0f080fe 80fec0c0 fe8686be 86fe8686     ................
   1da30:	10108686 10101010 48181818 909c7848     ...........HHx..
   1da40:	9cb0c0b0 c0c08080 92eefec0 86868692     ................
   1da50:	868682fe 827c8686 7c868686 c0fe82fe     ......|....|....
   1da60:	827cc0c0 7ac4cac2 90fe86fe c0fe849c     ..|....z........
   1da70:	fe0202fe 303010fe 82823030 fec2c2c2     ......0000......
   1da80:	ee828282 86861038 ee929296 38384482     ....8........D88
   1da90:	82828244 303030fe f01e02fe 0000fe80     D....000........
   1daa0:	06060000 60000000 0000c060 00000000     .......``.......
   1dab0:	18181818 c67c1800 1800180c fefe0000     ......|.........
   1dac0:	82fe0000 fe868686 18080808 02fe1818     ................
   1dad0:	fec0c0fe 061e02fe c484fe06 0404fec4     ................
   1dae0:	06fe80fe c0c0fe06 fe82fec0 060202fe     ................
   1daf0:	447c0606 fe8686fe 06fe82fe fe440606     ..|D..........D.
   1db00:	44fe4444 a8a8a8a8 6ca8a8a8 180c005a     DD.D.......lZ...
   1db10:	7e4e30a8 66181200 665aa86c 00662454     .0N~...fl.ZfT$f.
   1db20:	12184848 a89006a8 307e0012 3084a812     HH........~0...0
   1db30:	6618724e a8a8a8a8 5490a8a8 7848a878     Nr.f.......Tx.Hx
   1db40:	12a8726c 66726c18 72a89054 30a8182a     lr...lrfT..r*..0
   1db50:	12007e4e a86c6618 5aa85472 187e1866     N~...fl.rT.Zf.~.
   1db60:	72a8724e 6630182a 7e4e30a8 54306c00     Nr.r*.0f.0N~.l0T
   1db70:	a8a89c4e a8a8a8a8 7e5448a8 5490a818     N........HT~...T
   1db80:	6ca86678 a85a302a 2a723084 00a8d8a8     xf.l*0Z..0r*....
   1db90:	e4a8124e 4e00a8a2 2a6ca812 a8725454     N......N..l*TTr.
   1dba0:	2a723084 a89cdea8 a8182a72 5a48540c     .0r*....r*...THZ
   1dbb0:	66187278 5a1866a8 6c726654 002a72a8     xr.f.f.ZTfrl.r*.
   1dbc0:	2a72a872 4e30a818 1812007e 00a86c66     r.r*..0N~...fl..
   1dbd0:	30a81866 18660c4e 4e306c00 2a72a824     f..0N.f..l0N$.r*
   1dbe0:	a8663018 0c66541e 24a89c18 a8125454     .0f..Tf....$TT..
   1dbf0:	3c0c7842 a8a8aea8 a8a8a8a8 0000ffa8     Bx.<............
	...
   1dc0c:	74657300 0a202c20 74737572 7070612f     .set , .rust/app
   1dc1c:	6372732f 6968632f 722e3870 00000073     /src/chip8.rs...
   1dc2c:	0001dc14 00000015 00000056 00000015     ........V.......
   1dc3c:	00000000                                ....

0001dc40 <str.0>:
   1dc40:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1dc50:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1dc60:	00000077 0001dc14 00000015 00000056     w...........V...
   1dc70:	00000011 00000000 00000000 00000000     ................

0001dc80 <str.1>:
   1dc80:	65747461 2074706d 61206f74 77206464     attempt to add w
   1dc90:	20687469 7265766f 776f6c66 0001dc14     ith overflow....
   1dca0:	00000015 00000057 00000012 0001dc14     ....W...........
   1dcb0:	00000015 00000058 0000001d 0001dc14     ....X...........
   1dcc0:	00000015 00000059 0000001d 0001dc14     ....Y...........
   1dcd0:	00000015 0000005c 00000042 00000000     ....\...B.......

0001dce0 <str.2>:
   1dce0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1dcf0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1dd00:	00000077 0001dc14 00000015 0000005c     w...........\...
   1dd10:	0000005d 0001dc14 00000015 00000066     ]...........f...
   1dd20:	00000015 0001dc14 00000015 00000066     ............f...
   1dd30:	00000011 0001dc14 00000015 00000067     ............g...
   1dd40:	00000012 0001dc14 00000015 0000008c     ................
   1dd50:	00000009 50494843 6f742038 20686375     ....CHIP8 touch 
   1dd60:	20746f6e 646e6168 0a64656c 6573552f     not handled./Use
   1dd70:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   1dd80:	69676572 79727473 6372732f 7469672f     registry/src/git
   1dd90:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   1dda0:	65396264 33323863 62696c2f 70696863     db9ec823/libchip
   1ddb0:	2e302d38 2f322e31 2f637273 2e62696c     8-0.1.2/src/lib.
   1ddc0:	00007372 0001dd6c 00000056 0000009d     rs..l...V.......
   1ddd0:	00000014 0001dd6c 00000056 000000d4     ....l...V.......
   1dde0:	00000011 0001dd6c 00000056 000000d5     ....l...V.......
   1ddf0:	0000001a 00000000 00000000 00000000     ................

0001de00 <str.0>:
   1de00:	65747461 2074706d 61206f74 77206464     attempt to add w
   1de10:	20687469 7265766f 776f6c66 0001dd6c     ith overflowl...
   1de20:	00000056 000000d5 00000011 00000005     V...............
   1de30:	0001de2c 4c205d5b 78562044 495b202c     ,...[] LD Vx, [I
   1de40:	0000005d 0001de34 00000001 0001de35     ]...4.......5...
   1de50:	0000000c 0001de44 00000000 00000020     ....D....... ...
   1de60:	00000008 00000002 00000000 00000000     ................
   1de70:	00000004 00000003 0001de58 6362696c     ........X...libc
   1de80:	38706968 4b53205d 78562050 504a205d     hip8] SKP Vx] JP
   1de90:	6e6e6e20 00000040 00000020 0001de7c      nnn@... ...|...
   1dea0:	00000008 0001de7c 00000008 0001dd6c     ....|.......l...
   1deb0:	00000056 000001a1 0001de9c 0001dd6c     V...........l...
   1dec0:	00000056 000001a3 0000001d 0001dd6c     V...........l...
   1ded0:	00000056 000001a4 0000002a 0001dd6c     V.......*...l...
   1dee0:	00000056 000001a4 00000021 0001dd6c     V.......!...l...
   1def0:	00000056 000001a4 00000015 444c205d     V...........] LD
   1df00:	5d495b20 7856202c 0001de34 00000001      [I], Vx4.......
   1df10:	0001defc 0000000c 0001df08 0001de7c     ............|...
   1df20:	00000008 0001de7c 00000008 0001dd6c     ....|.......l...
   1df30:	00000056 0000019a 0001df1c 0001dd6c     V...........l...
   1df40:	00000056 0000019c 0000001d 0001dd6c     V...........l...
   1df50:	00000056 0000019d 00000035 0001dd6c     V.......5...l...
   1df60:	00000056 0000019d 0000001e 0001dd6c     V...........l...
   1df70:	00000056 0000019d 00000015 444c205d     V...........] LD
   1df80:	202c4220 00007856 0001de34 00000001      B, Vx..4.......
   1df90:	0001df7c 0000000a 0001df88 0001de7c     |...........|...
   1dfa0:	00000008 0001de7c 00000008 0001dd6c     ....|.......l...
   1dfb0:	00000056 00000193 0001df9c 0001dd6c     V...........l...
   1dfc0:	00000056 00000194 0000001b 0001dd6c     V...........l...
   1dfd0:	00000056 00000195 00000011 0001dd6c     V...........l...
   1dfe0:	00000056 00000196 0000001a 0001dd6c     V...........l...
   1dff0:	00000056 00000196 00000011 0001dd6c     V...........l...
   1e000:	00000056 00000197 0000001a 0001dd6c     V...........l...
   1e010:	00000056 00000197 00000011 444c205d     V...........] LD
   1e020:	202c4620 00007856 0001de34 00000001      F, Vx..4.......
   1e030:	0001e01c 0000000a 0001e028 0001de7c     ........(...|...
   1e040:	00000008 0001de7c 00000008 0001dd6c     ....|.......l...
   1e050:	00000056 0000018f 0001e03c 0001dd6c     V.......<...l...
   1e060:	00000056 00000190 0000001b 0001dd6c     V...........l...
   1e070:	00000056 00000190 0000001a 00000000     V...............

0001e080 <str.1>:
   1e080:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1e090:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1e0a0:	41205d77 49204444 7856202c 0001de34     w] ADD I, Vx4...
   1e0b0:	00000001 0001e0a1 0000000b 0001e0ac     ................
   1e0c0:	0001de7c 00000008 0001de7c 00000008     |.......|.......
   1e0d0:	0001dd6c 00000056 0000018b 0001e0c0     l...V...........
   1e0e0:	0001dd6c 00000056 0000018c 0000002e     l...V...........
   1e0f0:	444c205d 2c545320 00785620 0001de34     ] LD ST, Vx.4...
   1e100:	00000001 0001e0f0 0000000b 0001e0fc     ................
   1e110:	0001de7c 00000008 0001de7c 00000008     |.......|.......
   1e120:	0001dd6c 00000056 00000187 0001e110     l...V...........
   1e130:	0001dd6c 00000056 00000188 0000001b     l...V...........
   1e140:	444c205d 2c544420 00785620 0001de34     ] LD DT, Vx.4...
   1e150:	00000001 0001e140 0000000b 0001e14c     ....@.......L...
   1e160:	0001de7c 00000008 0001de7c 00000008     |.......|.......
   1e170:	0001dd6c 00000056 00000183 0001e160     l...V.......`...
   1e180:	0001dd6c 00000056 00000184 0000001b     l...V...........
   1e190:	444c205d 2c785620 00004b20 0001de34     ] LD Vx, K..4...
   1e1a0:	00000001 0001e190 0000000a 0001e19c     ................
   1e1b0:	0001de7c 00000008 0001de7c 00000008     |.......|.......
   1e1c0:	0001dd6c 00000056 0000017f 0001e1b0     l...V...........
   1e1d0:	0001dd6c 00000056 00000180 00000011     l...V...........
   1e1e0:	444c205d 2c785620 00544420 0001de34     ] LD Vx, DT.4...
   1e1f0:	00000001 0001e1e0 0000000b 0001e1ec     ................
   1e200:	0001de7c 00000008 0001de7c 00000008     |.......|.......
   1e210:	0001dd6c 00000056 0000017b 0001e200     l...V...{.......
   1e220:	0001dd6c 00000056 0000017c 00000011     l...V...|.......
   1e230:	4b53205d 5620504e 00000078 0001de34     ] SKNP Vx...4...
   1e240:	00000001 0001e230 00000009 0001e23c     ....0.......<...
   1e250:	0001de7c 00000008 0001de7c 00000008     |.......|.......
   1e260:	0001dd6c 00000056 00000175 0001e250     l...V...u...P...
   1e270:	0001dd6c 00000056 00000176 00000021     l...V...v...!...
   1e280:	0001de34 00000001 0001de84 00000008     4...............
   1e290:	0001e280 0001de7c 00000008 0001de7c     ....|.......|...
   1e2a0:	00000008 0001dd6c 00000056 0000016f     ....l...V...o...
   1e2b0:	0001e294 0001dd6c 00000056 00000170     ....l...V...p...
   1e2c0:	00000020 5244205d 78562057 7956202c      ...] DRW Vx, Vy
   1e2d0:	006e202c 0001de34 00000001 0001e2c4     , n.4...........
   1e2e0:	0000000f 0001e2d4 0001de7c 00000008     ........|.......
   1e2f0:	0001de7c 00000008 0001dd6c 00000056     |.......l...V...
   1e300:	00000156 0001e2e8 0001dd6c 00000056     V.......l...V...
   1e310:	00000157 0000001d 0001dd6c 00000056     W.......l...V...
   1e320:	00000158 0000001d 0001dd6c 00000056     X.......l...V...
   1e330:	0000015e 00000026 0001dd6c 00000056     ^...&...l...V...
   1e340:	0000015e 0000001d 0001dd6c 00000056     ^.......l...V...
   1e350:	00000160 00000021 00000000 00000000     `...!...........

0001e360 <str.2>:
   1e360:	65747461 2074706d 63206f74 75636c61     attempt to calcu
   1e370:	6574616c 65687420 6d657220 646e6961     late the remaind
   1e380:	77207265 20687469 69642061 6f736976     er with a diviso
   1e390:	666f2072 72657a20 0000006f 0001dd6c     r of zero...l...
   1e3a0:	00000056 00000163 00000025 0001dd6c     V...c...%...l...
   1e3b0:	00000056 00000165 0000002d 00000000     V...e...-.......

0001e3c0 <str.3>:
   1e3c0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1e3d0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1e3e0:	00000077 0001dd6c 00000056 00000165     w...l...V...e...
   1e3f0:	00000028 00000000 00000000 00000000     (...............

0001e400 <str.4>:
   1e400:	65747461 2074706d 73206f74 74666968     attempt to shift
   1e410:	66656c20 69772074 6f206874 66726576      left with overf
   1e420:	5d776f6c 444e5220 2c785620 006b6b20     low] RND Vx, kk.
   1e430:	0001de34 00000001 0001e423 0000000c     4.......#.......
   1e440:	0001e430 0001de7c 00000008 0001de7c     0...|.......|...
   1e450:	00000008 0001dd6c 00000056 00000152     ....l...V...R...
   1e460:	0001e444 0001dd6c 00000056 00000153     D...l...V...S...
   1e470:	00000011 504a205d 2c305620 6e6e6e20     ....] JP V0, nnn
   1e480:	0001de34 00000001 0001e474 0000000c     4.......t.......
   1e490:	0001e480 0001de7c 00000008 0001de7c     ....|.......|...
   1e4a0:	00000008 0001dd6c 00000056 0000014e     ....l...V...N...
   1e4b0:	0001e494 444c205d 202c4920 006e6e6e     ....] LD I, nnn.
   1e4c0:	0001de34 00000001 0001e4b4 0000000b     4...............
   1e4d0:	0001e4c0 0001de7c 00000008 0001de7c     ....|.......|...
   1e4e0:	00000008 0001dd6c 00000056 0000014a     ....l...V...J...
   1e4f0:	0001e4d4 4e53205d 78562045 7956202c     ....] SNE Vx, Vy
   1e500:	0001de34 00000001 0001e4f4 0000000c     4...............
   1e510:	0001e500 0001de7c 00000008 0001de7c     ....|.......|...
   1e520:	00000008 0001dd6c 00000056 00000144     ....l...V...D...
   1e530:	0001e514 0001dd6c 00000056 00000145     ....l...V...E...
   1e540:	00000014 0001dd6c 00000056 00000145     ....l...V...E...
   1e550:	00000021 4853205d 7856204c 7956202c     !...] SHL Vx, Vy
   1e560:	0001de34 00000001 0001e554 0000000c     4.......T.......
   1e570:	0001e560 0001de7c 00000008 0001de7c     `...|.......|...
   1e580:	00000008 0001dd6c 00000056 0000013f     ....l...V...?...
   1e590:	0001e574 0001dd6c 00000056 00000140     t...l...V...@...
   1e5a0:	00000020 0001dd6c 00000056 00000141      ...l...V...A...
   1e5b0:	0000001d 0001dd6c 00000056 00000141     ....l...V...A...
   1e5c0:	00000011 5553205d 56204e42 56202c78     ....] SUBN Vx, V
   1e5d0:	00000079 0001de34 00000001 0001e5c4     y...4...........
   1e5e0:	0000000d 0001e5d4 0001de7c 00000008     ........|.......
   1e5f0:	0001de7c 00000008 0001dd6c 00000056     |.......l...V...
   1e600:	00000139 0001e5e8 0001dd6c 00000056     9.......l...V...
   1e610:	0000013a 0000001e 0001dd6c 00000056     :.......l...V...
   1e620:	0000013a 00000038 0001dd6c 00000056     :...8...l...V...
   1e630:	0000013b 00000011 4853205d 78562052     ;.......] SHR Vx
   1e640:	7956202c 0001de34 00000001 0001e638     , Vy4.......8...
   1e650:	0000000c 0001e644 0001de7c 00000008     ....D...|.......
   1e660:	0001de7c 00000008 0001dd6c 00000056     |.......l...V...
   1e670:	00000134 0001e658 0001dd6c 00000056     4...X...l...V...
   1e680:	00000135 0000001f 0001dd6c 00000056     5.......l...V...
   1e690:	00000136 0000001d 0001dd6c 00000056     6.......l...V...
   1e6a0:	00000136 00000011 5553205d 78562042     6.......] SUB Vx
   1e6b0:	7956202c 0001de34 00000001 0001e6a8     , Vy4...........
   1e6c0:	0000000c 0001e6b4 0001de7c 00000008     ........|.......
   1e6d0:	0001de7c 00000008 0001dd6c 00000056     |.......l...V...
   1e6e0:	0000012e 0001e6c8 0001dd6c 00000056     ........l...V...
   1e6f0:	0000012f 0000001e 0001dd6c 00000056     /.......l...V...
   1e700:	0000012f 00000038 0001dd6c 00000056     /...8...l...V...
   1e710:	00000130 00000011 4441205d 78562044     0.......] ADD Vx
   1e720:	7956202c 0001de34 00000001 0001e718     , Vy4...........
   1e730:	0000000c 0001e724 0001de7c 00000008     ....$...|.......
   1e740:	0001de7c 00000008 0001dd6c 00000056     |.......l...V...
   1e750:	00000128 0001e738 0001dd6c 00000056     (...8...l...V...
   1e760:	00000129 0000001e 0001dd6c 00000056     ).......l...V...
   1e770:	00000129 00000038 0001dd6c 00000056     )...8...l...V...
   1e780:	0000012a 00000011 4f58205d 78562052     *.......] XOR Vx
   1e790:	7956202c 0001de34 00000001 0001e788     , Vy4...........
   1e7a0:	0000000c 0001e794 0001de7c 00000008     ........|.......
   1e7b0:	0001de7c 00000008 0001dd6c 00000056     |.......l...V...
   1e7c0:	00000124 0001e7a8 0001dd6c 00000056     $.......l...V...
   1e7d0:	00000125 0000001e 0001dd6c 00000056     %.......l...V...
   1e7e0:	00000125 00000011 4e41205d 78562044     %.......] AND Vx
   1e7f0:	7956202c 0001de34 00000001 0001e7e8     , Vy4...........
   1e800:	0000000c 0001e7f4 0001de7c 00000008     ........|.......
   1e810:	0001de7c 00000008 0001dd6c 00000056     |.......l...V...
   1e820:	00000120 0001e808 0001dd6c 00000056      .......l...V...
   1e830:	00000121 0000001e 0001dd6c 00000056     !.......l...V...
   1e840:	00000121 00000011 524f205d 2c785620     !.......] OR Vx,
   1e850:	00795620 0001de34 00000001 0001e848      Vy.4.......H...
   1e860:	0000000b 0001e854 0001de7c 00000008     ....T...|.......
   1e870:	0001de7c 00000008 0001dd6c 00000056     |.......l...V...
   1e880:	0000011c 0001e868 0001dd6c 00000056     ....h...l...V...
   1e890:	0000011d 0000001e 0001dd6c 00000056     ........l...V...
   1e8a0:	0000011d 00000011 444c205d 2c785620     ........] LD Vx,
   1e8b0:	00795620 0001de34 00000001 0001e8a8      Vy.4...........
   1e8c0:	0000000b 0001e8b4 0001de7c 00000008     ........|.......
   1e8d0:	0001de7c 00000008 0001dd6c 00000056     |.......l...V...
   1e8e0:	00000118 0001e8c8 0001dd6c 00000056     ........l...V...
   1e8f0:	00000119 0000001d 0001dd6c 00000056     ........l...V...
   1e900:	00000119 00000011 4441205d 78562044     ........] ADD Vx
   1e910:	6b6b202c 0001de34 00000001 0001e908     , kk4...........
   1e920:	0000000c 0001e914 0001de7c 00000008     ........|.......
   1e930:	0001de7c 00000008 0001dd6c 00000056     |.......l...V...
   1e940:	00000114 0001e928 0001dd6c 00000056     ....(...l...V...
   1e950:	00000115 0000001d 0001dd6c 00000056     ........l...V...
   1e960:	00000115 00000011 444c205d 2c785620     ........] LD Vx,
   1e970:	006b6b20 0001de34 00000001 0001e968      kk.4.......h...
   1e980:	0000000b 0001e974 0001de7c 00000008     ....t...|.......
   1e990:	0001de7c 00000008 0001dd6c 00000056     |.......l...V...
   1e9a0:	00000110 0001e988 0001dd6c 00000056     ........l...V...
   1e9b0:	00000111 00000011 6e49205d 696c6176     ........] Invali
   1e9c0:	706f2064 0000203a 0001de34 00000001     d op: ..4.......
   1e9d0:	0001e9b8 0000000e 0001e9c8 00000000     ................
   1e9e0:	00000020 00000008 00000002 00000000      ...............
   1e9f0:	00000000 00000004 00000003 00000001     ................
   1ea00:	00000020 00000008 00000002 00000000      ...............
   1ea10:	00000000 00000004 00000003 0001e9dc     ................
   1ea20:	633a3a3c 3a65726f 63616d3a 3a736f72     <::core::macros:
   1ea30:	6e61703a 6d206369 6f726361 00003e73     :panic macros>..
   1ea40:	0001ea20 0000001e 00000005 00000032      ...........2...
   1ea50:	4553205d 2c785620 00795620 0001de34     ] SE Vx, Vy.4...
   1ea60:	00000001 0001ea50 0000000b 0001ea5c     ....P.......\...
   1ea70:	0001de7c 00000008 0001de7c 00000008     |.......|.......
   1ea80:	0001dd6c 00000056 0000010a 0001ea70     l...V.......p...
   1ea90:	0001dd6c 00000056 0000010b 00000014     l...V...........
   1eaa0:	0001dd6c 00000056 0000010b 00000021     l...V.......!...
   1eab0:	4e53205d 78562045 6b6b202c 0001de34     ] SNE Vx, kk4...
   1eac0:	00000001 0001eab0 0000000c 0001eabc     ................
   1ead0:	0001de7c 00000008 0001de7c 00000008     |.......|.......
   1eae0:	0001dd6c 00000056 00000104 0001ead0     l...V...........
   1eaf0:	0001dd6c 00000056 00000105 00000014     l...V...........
   1eb00:	4553205d 20785620 00006b6b 0001de34     ] SE Vx kk..4...
   1eb10:	00000001 0001eb00 0000000a 0001eb0c     ................
   1eb20:	0001de7c 00000008 0001de7c 00000008     |.......|.......
   1eb30:	0001dd6c 00000056 000000fe 0001eb20     l...V....... ...
   1eb40:	0001dd6c 00000056 000000ff 00000014     l...V...........
   1eb50:	4143205d 6e204c4c 00006e6e 0001de34     ] CALL nnn..4...
   1eb60:	00000001 0001eb50 0000000a 0001eb5c     ....P.......\...
   1eb70:	0001de7c 00000008 0001de7c 00000008     |.......|.......
   1eb80:	0001dd6c 00000056 000000f9 0001eb70     l...V.......p...
   1eb90:	0001de34 00000001 0001de8c 00000008     4...............
   1eba0:	0001eb90 0001de7c 00000008 0001de7c     ....|.......|...
   1ebb0:	00000008 0001dd6c 00000056 000000f5     ....l...V.......
   1ebc0:	0001eba4 5953205d 6e6e2053 0000006e     ....] SYS nnn...
   1ebd0:	0001de34 00000001 0001ebc4 00000009     4...............
   1ebe0:	0001ebd0 0001de7c 00000008 0001de7c     ....|.......|...
   1ebf0:	00000008 0001dd6c 00000056 000000f1     ....l...V.......
   1ec00:	0001ebe4 20746f6e 6c706d69 6e656d65     ....not implemen
   1ec10:	00646574 0001ea20 0000001e 00000002     ted. ...........
   1ec20:	00000002 4552205d 00000054 0001de34     ....] RET...4...
   1ec30:	00000001 0001ec24 00000005 0001ec2c     ....$.......,...
   1ec40:	0001de7c 00000008 0001de7c 00000008     |.......|.......
   1ec50:	0001dd6c 00000056 000000ec 0001ec40     l...V.......@...
   1ec60:	4c43205d 00000053 0001de34 00000001     ] CLS...4.......
   1ec70:	0001ec60 00000005 0001ec68 0001de7c     `.......h...|...
   1ec80:	00000008 0001de7c 00000008 0001dd6c     ....|.......l...
   1ec90:	00000056 000000e5 0001ec7c 0001dd6c     V.......|...l...
   1eca0:	00000056 00000093 0000001b 0001dd6c     V...........l...
   1ecb0:	00000056 00000097 00000009 0001dd6c     V...........l...
   1ecc0:	00000056 000000bb 0000000d 0001dd6c     V...........l...
   1ecd0:	00000056 000000be 0000000d 6c6c6163     V...........call
   1ece0:	60206465 6974704f 3a3a6e6f 72776e75     ed `Option::unwr
   1ecf0:	29287061 6e6f2060 60206120 656e6f4e     ap()` on a `None
   1ed00:	61762060 2f65756c 72657355 754c2f73     ` value/Users/Lu
   1ed10:	2f797070 7261632e 722f6f67 73696765     ppy/.cargo/regis
   1ed20:	2f797274 2f637273 68746967 632e6275     try/src/github.c
   1ed30:	312d6d6f 36636365 64393932 63653962     om-1ecc6299db9ec
   1ed40:	2f333238 65626d65 64656464 6172672d     823/embedded-gra
   1ed50:	63696870 2e302d73 2f322e35 2f637273     phics-0.5.2/src/
   1ed60:	726f6f63 73722e64 65726e55 61686361     coord.rsUnreacha
   1ed70:	20656c62 65646e69 00002078 0001ed68     ble index ..h...
   1ed80:	00000012 0001ed7c 0001ed07 00000061     ....|.......a...
   1ed90:	00000070 00000016                       p.......

0001ed98 <_ZN8libchip87CHARBUF17h227c6d0d7e24574cE>:
   1ed98:	909090f0 206020f0 10f07020 f0f080f0     ..... `  p......
   1eda8:	f010f010 10f09090 f080f010 80f0f010     ................
   1edb8:	f0f090f0 40402010 90f090f0 f090f0f0     ..... @@........
   1edc8:	90f0f010 e09090f0 e090e090 808080f0     ................
   1edd8:	9090e0f0 80f0e090 f0f080f0 8080f080     ................
   1ede8:	72656874 73692065 206f6e20 68637573     there is no such
   1edf8:	69687420 6120676e 6e612073 71636120      thing as an acq
   1ee08:	65726975 6c65722f 65736165 616f6c20     uire/release loa
   1ee18:	75722f64 2f637473 61376535 36363466     d/rustc/5e7af466
   1ee28:	30386639 36663565 34313238 35306631     9f80e5f682141f05
   1ee38:	33393130 37366261 64666139 31623462     0193ab679afdb4b1
   1ee48:	6372732f 62696c2f 65726f63 63616d2f     /src/libcore/mac
   1ee58:	2f736f72 2e646f6d 00007372 0001ee19     ros/mod.rs......
   1ee68:	00000049 0000000a 00000009 72656874     I...........ther
   1ee78:	73692065 206f6e20 68637573 69687420     e is no such thi
   1ee88:	6120676e 20612073 656c6572 20657361     ng as a release 
   1ee98:	64616f6c 0000e9a3 00000000 00000001     load............
   1eea8:	0000ed5f 0000ed6b 0000ed75 0001ee9c     _...k...u.......
   1eeb8:	0000e9a3 00000000 00000001 0000ed5f     ............_...
   1eec8:	0000ed6b 0000ed75                       k...u...

0001eed0 <_ZN3log6logger3NOP17h5a3de47970f20990E>:
   1eed0:	00000000 0001eed0 0001eed4 65737361     ............asse
   1eee0:	6f697472 6166206e 64656c69 2860203a     rtion failed: `(
   1eef0:	7466656c 203d3d20 68676972 0a602974     left == right)`.
   1ef00:	656c2020 203a7466 0a2c6060 67697220       left: ``,. rig
   1ef10:	203a7468 203a6060 0001eedc 0000002d     ht: ``: ....-...
   1ef20:	0001ef09 0000000c 0001ef15 00000003     ................
   1ef30:	0001ef18 6e206f6e 006c6c75 0001ef34     ....no null.4...
   1ef40:	00000007 0001ef3c 0001ef48 74737572     ....<...H...rust
   1ef50:	6e796d2f 2f747765 2f637273 2e62696c     /mynewt/src/lib.
   1ef60:	00007372 0001ef4c 00000016 000000db     rs..L...........
   1ef70:	00000011 0000f41b 00000004 00000004     ................
   1ef80:	000131cd 65737361 6f697472 6166206e     .1..assertion fa
   1ef90:	64656c69 2860203a 7466656c 203d3d20     iled: `(left == 
   1efa0:	68676972 0a602974 656c2020 203a7466     right)`.  left: 
   1efb0:	0a2c6060 67697220 203a7468 203a6060     ``,. right: ``: 
   1efc0:	0001ef84 0000002d 0001efb1 0000000c     ....-...........
   1efd0:	0001efbd 00000003 0001efc0 74736564     ............dest
   1efe0:	74616e69 206e6f69 20646e61 72756f73     ination and sour
   1eff0:	73206563 6563696c 61682073 64206576     ce slices have d
   1f000:	65666669 746e6572 6e656c20 73687467     ifferent lengths
   1f010:	0001efdc 00000034 0001f010 0001f01c     ....4...........
   1f020:	7375722f 352f6374 66613765 39363634     /rustc/5e7af4669
   1f030:	65303866 38366635 31343132 30353066     f80e5f682141f050
   1f040:	61333931 39373662 62646661 2f316234     193ab679afdb4b1/
   1f050:	2f637273 6362696c 2f65726f 7263616d     src/libcore/macr
   1f060:	6d2f736f 722e646f 00000073 0001f020     os/mod.rs... ...
   1f070:	00000049 00000012 0000000d 0001d308     I...............
   1f080:	65737361 6f697472 6166206e 64656c69     assertion failed
   1f090:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   1f0a0:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   1f0b0:	67697220 203a7468 203a6060 0001f080      right: ``: ....
   1f0c0:	0000002d 0001f0ad 0000000c 0001f0b9     -...............
   1f0d0:	00000003 0001f0bc 20697073 666e6f63     ........spi conf
   1f0e0:	66206769 006c6961 0001f0d8 0000000f     ig fail.........
   1f0f0:	0001f0e8 0001f0f4 74737572 6e796d2f     ........rust/myn
   1f100:	2f747765 2f637273 2e6c6168 00007372     ewt/src/hal.rs..
   1f110:	0001f0f8 00000016 00000016 00000009     ................
   1f120:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   1f130:	0001f120 0000000f 0001f130 0001f0f8      .......0.......
   1f140:	00000016 00000019 00000009 20697073     ............spi 
   1f150:	74696e69 69616620 0000006c 0001f14c     init fail...L...
   1f160:	0000000d 0001f15c 0001f0f8 00000016     ....\...........
   1f170:	0000001c 00000009 6f697067 69616620     ........gpio fai
   1f180:	0000006c 0001f178 00000009 0001f184     l...x...........
   1f190:	0001f0f8 00000016 00000045 00000009     ........E.......
   1f1a0:	0001f0f8 00000016 0000006c 0000001b     ........l.......

0001f1b0 <str.0>:
   1f1b0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1f1c0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1f1d0:	6d6f5377 6e6f4e65 00000065 0000f413     wSomeNone.......
   1f1e0:	00000004 00000004 0000ff27 77617264     ........'...draw
   1f1f0:	6f6c6220 20736b63 6c696166 74737572      blocks failrust
   1f200:	6569702f 6d652d74 64646562 702f6465     /piet-embedded/p
   1f210:	2d746569 65626d65 64656464 6172672d     iet-embedded-gra
   1f220:	63696870 72732f73 69642f63 616c7073     phics/src/displa
   1f230:	73722e79 0001f1fc 00000038 00000080     y.rs....8.......
   1f240:	00000005 00000060 0001f244 6576656e     ....`...D...neve
   1f250:	73757272 69702f74 652d7465 6465626d     rrust/piet-embed
   1f260:	2f646564 74656970 626d652d 65646465     ded/piet-embedde
   1f270:	72672d64 69687061 732f7363 622f6372     d-graphics/src/b
   1f280:	68637461 0073722e 0001f251 00000036     atch.rs.Q...6...
   1f290:	000000be 00000019 0001f251 00000036     ........Q...6...
   1f2a0:	000000c3 0000001d 00000000 00000000     ................

0001f2b0 <str.0>:
   1f2b0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f2c0:	20687469 7265766f 776f6c66 0001f251     ith overflowQ...
   1f2d0:	00000036 000000d5 00000015 0001f251     6...........Q...
   1f2e0:	00000036 00000104 00000019 0001f251     6...........Q...
   1f2f0:	00000036 00000109 0000001d 0001f251     6...........Q...
   1f300:	00000036 0000011d 00000015 20697073     6...........spi 
   1f310:	73756c66 61662068 552f6c69 73726573     flush fail/Users
   1f320:	70754c2f 502f7970 54656e69 2f656d69     /Luppy/PineTime/
   1f330:	656e6970 656d6974 7375722d 796d2d74     pinetime-rust-my
   1f340:	7477656e 7375722f 74732f74 35333737     newt/rust/st7735
   1f350:	64636c2d 7461622d 722d6863 72732f73     -lcd-batch-rs/sr
   1f360:	696c2f63 73722e62 0001f31a 0000004e     c/lib.rs....N...
   1f370:	000000fe 00000009 20697073 61746164     ........spi data
   1f380:	69616620 0000006c 0001f31a 0000004e      fail.......N...
   1f390:	000000b0 00000009 0001f31a 0000004e     ............N...
   1f3a0:	000000f3 00000009 0001f31a 0000004e     ............N...
   1f3b0:	00000098 0000000d 20697073 20646d63     ........spi cmd 
   1f3c0:	6c696166 0001f31a 0000004e 00000097     fail....N.......
   1f3d0:	00000009 0001f31a 0000004e 0000009d     ........N.......
   1f3e0:	00000011 0001f31a 0000004e 0000009c     ........N.......
   1f3f0:	0000000d 0001f31a 0000004e 000000c5     ........N.......
   1f400:	0000002d 0001f31a 0000004e 000000c9     -.......N.......
   1f410:	0000002d 0001f31a 0000004e 000000d8     -.......N.......
   1f420:	00000019 00000000 00000000 00000000     ................

0001f430 <str.0>:
   1f430:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f440:	20687469 7265766f 776f6c66 0001f31a     ith overflow....
   1f450:	0000004e 000000d9 00000019 0001f31a     N...............
   1f460:	0000004e 000000db 00000019 0001f31a     N...............
   1f470:	0000004e 000000dc 00000019 20697073     N...........spi 
   1f480:	74696e69 69616620 0000006c 0001f31a     init fail.......
   1f490:	0000004e 00000066 00000009 002d2c01     N...f........,-.
   1f4a0:	0001f49c 012d2c01 00002d2c 0001f4a4     .....,-.,-......
   1f4b0:	00000007 0001f4b0 008402a2 0001f4b8     ................
   1f4c0:	000000c5 0001f4c0 0000000a 0001f4c8     ................
   1f4d0:	00002a8a 0001f4d0 0000ee8a 0001f4d8     .*..............
   1f4e0:	0000000e 0001f4e0 00000000 0001f4e8     ................
   1f4f0:	00000008 0001f4f0 00000005 0001f4f8     ................
   1f500:	0001f31a 0000004e 00000088 00000009     ....N...........
   1f510:	6573552f 4c2f7372 79707075 61632e2f     /Users/Luppy/.ca
   1f520:	2f6f6772 69676572 79727473 6372732f     rgo/registry/src
   1f530:	7469672f 2e627568 2d6d6f63 63636531     /github.com-1ecc
   1f540:	39393236 65396264 33323863 626d652f     6299db9ec823/emb
   1f550:	65646465 72672d64 69687061 302d7363     edded-graphics-0
   1f560:	322e352e 6372732f 6972702f 6974696d     .5.2/src/primiti
   1f570:	2f736576 74636572 6c676e61 73722e65     ves/rectangle.rs
   1f580:	0001f510 00000070 000000c0 00000032     ....p.......2...

0001f590 <str.0>:
   1f590:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f5a0:	20687469 7265766f 776f6c66 0001f510     ith overflow....
   1f5b0:	00000070 000000c2 00000031 00000000     p.......1.......

0001f5c0 <str.1>:
   1f5c0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1f5d0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1f5e0:	00000077 0001f510 00000070 000000c4     w.......p.......
   1f5f0:	00000031 0001f510 00000070 000000c6     1.......p.......
   1f600:	00000031 65707845 64657463 72747320     1...Expected str
   1f610:	00656b6f 0001f510 00000070 000000cc     oke.....p.......
   1f620:	00000019 0001f510 00000070 000000d5     ........p.......
   1f630:	0000000d 0001f510 00000070 000000da     ........p.......
   1f640:	00000011 00012e63 00000004 00000004     ....c...........
   1f650:	000131cd 00697073 0001d308 65737361     .1..spi.....asse
   1f660:	6f697472 6166206e 64656c69 2860203a     rtion failed: `(
   1f670:	7466656c 203d3d20 68676972 0a602974     left == right)`.
   1f680:	656c2020 203a7466 0a2c6060 67697220       left: ``,. rig
   1f690:	203a7468 203a6060 0001f65c 0000002d     ht: ``: \...-...
   1f6a0:	0001f689 0000000c 0001f695 00000003     ................
   1f6b0:	0001f698 20697073 666e6f63 66206769     ....spi config f
   1f6c0:	006c6961 0001f6b4 0000000f 0001f6c4     ail.............
   1f6d0:	0001f6d0 74737572 6e796d2f 2f747765     ....rust/mynewt/
   1f6e0:	2f637273 2e697073 00007372 0001f6d4     src/spi.rs......
   1f6f0:	00000016 00000050 0000004a 20697073     ....P...J...spi 
   1f700:	66206263 006c6961 0001f6fc 0000000b     cb fail.........
   1f710:	0001f708 0001f6d4 00000016 00000057     ............W...
   1f720:	00000005 20697073 62616e65 6620656c     ....spi enable f
   1f730:	006c6961 0001f724 0000000f 0001f734     ail.$.......4...
   1f740:	0001f6d4 00000016 0000005a 00000037     ........Z...7...
   1f750:	6f697067 69616620 0000006c 0001f750     gpio fail...P...
   1f760:	00000009 0001f75c 0001f6d4 00000016     ....\...........
   1f770:	0000005b 00000040 0001f6d4 00000016     [...@...........
   1f780:	0000005c 00000040 6575716d 66206575     \...@...mqueue f
   1f790:	006c6961 0001f788 0000000b 0001f794     ail.............
   1f7a0:	0001f6d4 00000016 00000065 00000005     ........e.......
   1f7b0:	206d6573 6c696166 20697073 6c696166     sem failspi fail
   1f7c0:	0001f7b0 00000008 0001f7c0 0001f6d4     ................
   1f7d0:	00000016 00000069 00000005 0001f6d4     ....i...........
   1f7e0:	00000016 0000006d 00000005 00000000     ....m...........
   1f7f0:	0001f654 00000004 0001f7ec 6e657665     T...........even
   1f800:	66207174 006c6961 0001f6d4 00000016     tq fail.........
   1f810:	00000081 00000009 65737361 6f697472     ........assertio
   1f820:	6166206e 64656c69 6e75203a 65666173     n failed: unsafe
   1f830:	50207b20 49444e45 435f474e 6c2e444d      { PENDING_CMD.l
   1f840:	29286e65 3e207d20 00003020 0001f6d4     en() } > 0......
   1f850:	00000016 00000097 00000005 0001f6d4     ................
   1f860:	00000016 000000a6 00000012 0001f6d4     ................
   1f870:	00000016 000000bf 00000035 00000000     ........5.......

0001f880 <str.0>:
   1f880:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1f890:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1f8a0:	00000077 0001f6d4 00000016 000000c2     w...............
   1f8b0:	0000000f 00000000 00000000 00000000     ................

0001f8c0 <str.1>:
   1f8c0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f8d0:	20687469 7265766f 776f6c66 20746e69     ith overflowint 
   1f8e0:	20697073 6c696166 0001f6d4 00000016     spi fail........
   1f8f0:	000000ff 00000011 0001f6d4 00000016     ................
   1f900:	0000010f 00000015 00000000 00000000     ................

0001f910 <str.2>:
   1f910:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1f920:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1f930:	00000077 0001f6d4 00000016 0000010d     w...............
   1f940:	00000011 0001f6d4 00000016 00000115     ................
   1f950:	00000011 0001f6d4 00000016 00000122     ............"...
   1f960:	00000009 20646162 20697073 006e656c     ....bad spi len.
   1f970:	0001f6d4 00000016 00000129 00000005     ........).......
   1f980:	0001f7b8 00000008 0001f980 0001f6d4     ................
   1f990:	00000016 0000013f 00000009 0001f6d4     ....?...........
   1f9a0:	00000016 00000148 00000009 0001f6d4     ....H...........
   1f9b0:	00000016 0000014c 00000030 0001f6d4     ....L...0.......
   1f9c0:	00000016 00000158 00000005 0001f6d4     ....X...........
   1f9d0:	00000016 0000015d 00000017 6c6c6163     ....].......call
   1f9e0:	60206465 6974704f 3a3a6e6f 72776e75     ed `Option::unwr
   1f9f0:	29287061 6e6f2060 60206120 656e6f4e     ap()` on a `None
   1fa00:	61762060 2f65756c 72657355 754c2f73     ` value/Users/Lu
   1fa10:	2f797070 7261632e 722f6f67 73696765     ppy/.cargo/regis
   1fa20:	2f797274 2f637273 68746967 632e6275     try/src/github.c
   1fa30:	312d6d6f 36636365 64393932 63653962     om-1ecc6299db9ec
   1fa40:	2f333238 70616568 7373656c 352e302d     823/heapless-0.5
   1fa50:	732f312e 762f6372 722e6365 00000073     .1/src/vec.rs...
   1fa60:	0001fa07 00000056 000001e8 0000000d     ....V...........

0001fa70 <str.0>:
   1fa70:	65747461 2074706d 61206f74 77206464     attempt to add w
   1fa80:	20687469 7265766f 776f6c66 552f2928     ith overflow()/U
   1fa90:	73726573 70754c2f 2e2f7970 67726163     sers/Luppy/.carg
   1faa0:	65722f6f 74736967 732f7972 672f6372     o/registry/src/g
   1fab0:	75687469 6f632e62 65312d6d 32366363     ithub.com-1ecc62
   1fac0:	62643939 38636539 682f3332 6c706165     99db9ec823/heapl
   1fad0:	2d737365 2e352e30 72732f31 65762f63     ess-0.5.1/src/ve
   1fae0:	73722e63 00000000 00000000 00000000     c.rs............

0001faf0 <str.0>:
   1faf0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1fb00:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1fb10:	00000077 0001fa8e 00000056 00000066     w.......V...f...
   1fb20:	00000009 00000000 00000000 00000000     ................

0001fb30 <str.1>:
   1fb30:	65747461 2074706d 61206f74 77206464     attempt to add w
   1fb40:	20687469 7265766f 776f6c66 0001fa8e     ith overflow....
   1fb50:	00000056 0000003e 0000000c 0001fa8e     V...>...........
   1fb60:	00000056 0000002d 00000009 0001fa8e     V...-...........
   1fb70:	00000056 0000007e 00000011 00011ccd     V...~...........
   1fb80:	00000000 00000001 00015085 00011c11     .........P......
   1fb90:	00000002 00000002 00016595 6c6c6163     .........e..call
   1fba0:	60206465 75736552 3a3a746c 72776e75     ed `Result::unwr
   1fbb0:	29287061 6e6f2060 206e6120 72724560     ap()` on an `Err
   1fbc0:	61762060 2f65756c 72657355 754c2f73     ` value/Users/Lu
   1fbd0:	2f797070 7261632e 722f6f67 73696765     ppy/.cargo/regis
   1fbe0:	2f797274 2f637273 68746967 632e6275     try/src/github.c
   1fbf0:	312d6d6f 36636365 64393932 63653962     om-1ecc6299db9ec
   1fc00:	2f333238 70616568 7373656c 352e302d     823/heapless-0.5
   1fc10:	732f312e 762f6372 722e6365 00000073     .1/src/vec.rs...
   1fc20:	0001fbc7 00000056 00000066 00000009     ....V...f.......

0001fc30 <str.0>:
   1fc30:	65747461 2074706d 61206f74 77206464     attempt to add w
   1fc40:	20687469 7265766f 776f6c66 0001fbc7     ith overflow....
   1fc50:	00000056 0000003e 0000000c 0001fbc7     V...>...........
   1fc60:	00000056 0000007e 00000011 00000000     V...~...........

0001fc70 <str.1>:
   1fc70:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1fc80:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1fc90:	00000077 2f637273 6362696c 2f65726f     w...src/libcore/
   1fca0:	2f6d756e 32636564 2f746c66 66776172     num/dec2flt/rawf
   1fcb0:	73722e70 65646e69 756f2078 666f2074     p.rsindex out of
   1fcc0:	756f6220 3a73646e 65687420 6e656c20      bounds: the len
   1fcd0:	20736920 00000000 00000020 00000008      is .... .......
   1fce0:	00000002 00000000 00000000 00000002     ................
   1fcf0:	00000003 2f637273 6362696c 2f65726f     ....src/libcore/
   1fd00:	63696e75 2f65646f 6e697270 6c626174     unicode/printabl
   1fd10:	73722e65 00000000 00000020 00000004     e.rs.... .......
   1fd20:	00000002 00000000 00000002 00000000     ................
   1fd30:	00000003 00000000 00000020 00000008     ........ .......
   1fd40:	00000002 00000000 00000001 00000001     ................
   1fd50:	00000003 002e2e60 0001fd55 00000002     ....`...U.......
   1fd60:	65726c61 20796461 72726f62 6465776f     already borrowed
   1fd70:	68772029 73206e65 6963696c 6020676e     ) when slicing `
   1fd80:	72616843 46797254 456d6f72 726f7272     CharTryFromError
   1fd90:	6f636544 74556564 45363166 726f7272     DecodeUtf16Error

0001fda0 <_ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE>:
   1fda0:	00010201 00000000 00000000 00000000     ................
   1fdb0:	72657469 20202020 2e2e202c 65757274     iter    , ..true
   1fdc0:	72657449 203d3c20 61746164 646e696b     Iter <= datakind
   1fdd0:	746e616d 73756c70 6f72655a 79706f43     mantplusZeroCopy
   1fde0:	7373654c 65646f63 65707954 656e6f44     LesscodeTypeDone
   1fdf0:	72616843 6b636142 68746f42 6d657449     CharBackBothItem
   1fe00:	656c6966 656e696c 7466654c 6c696174     filelineLefttail
   1fe10:	656b6177 706f7264 32783875 32783869     wakedropu8x2i8x2
   1fe20:	34783875 34783869 38783875 38783869     u8x4i8x4u8x8i8x8
   1fe30:	6c6c6163 60206465 6974704f 3a3a6e6f     called `Option::
   1fe40:	72776e75 29287061 6e6f2060 60206120     unwrap()` on a `
   1fe50:	656e6f4e 61762060 0065756c 0001fc94     None` value.....
   1fe60:	00000000 0000203a 0001fc94 00000000     ....: ..........
   1fe70:	0001fe64 00000002 000167e9 00000000     d........g......
   1fe80:	00000001 00016839 74756220 65687420     ....9h.. but the
   1fe90:	646e6920 69207865 00002073 0001fcb4      index is ......
   1fea0:	00000020 0001fe88 00000012 000167e9      ............g..
   1feb0:	0000000c 00000004 00016a83 00016dd9     .........j...m..
   1fec0:	00016e89 202c0a2c 2c280a28 30783029     .n..,., (.(,)0x0
   1fed0:	30313030 30333032 30353034 30373036     0010203040506070
   1fee0:	31393038 31313130 31333132 31353134     8091011121314151
   1fef0:	31373136 32393138 32313230 32333232     6171819202122232
   1ff00:	32353234 32373236 33393238 33313330     4252627282930313
   1ff10:	33333332 33353334 33373336 34393338     2333435363738394
   1ff20:	34313430 34333432 34353434 34373436     0414243444546474
   1ff30:	35393438 35313530 35333532 35353534     8495051525354555
   1ff40:	35373536 36393538 36313630 36333632     6575859606162636
   1ff50:	36353634 36373636 37393638 37313730     4656667686970717
   1ff60:	37333732 37353734 37373736 38393738     2737475767778798
   1ff70:	38313830 38333832 38353834 38373836     0818283848586878
   1ff80:	39393838 39313930 39333932 39353934     8899091929394959
   1ff90:	39373936 00393938 000167e9 00000004     6979899..g......
   1ffa0:	00000004 00016ead 00016eb3 00016eb9     .....n...n...n..
   1ffb0:	2f637273 6362696c 2f65726f 2f746d66     src/libcore/fmt/
   1ffc0:	2e646f6d 00007372 0001ffb0 00000016     mod.rs..........
   1ffd0:	0000043b 00000011 0001ffb0 00000016     ;...............
   1ffe0:	00000445 00000024 2f637273 6362696c     E...$...src/libc
   1fff0:	2f65726f 63696c73 6f6d2f65 73722e64     ore/slice/mod.rs
   20000:	65646e69 6f202078 6f207475 61722066     index  out of ra
   20010:	2065676e 20726f66 63696c73 666f2065     nge for slice of
   20020:	6e656c20 20687467 00020000 00000006      length ........
   20030:	00020006 00000022 0001ffe8 00000018     ...."...........
   20040:	00000a72 00000005 63696c73 6e692065     r.......slice in
   20050:	20786564 72617473 61207374 62202074     dex starts at  b
   20060:	65207475 2073646e 00207461 00020048     ut ends at .H...
   20070:	00000016 0002005e 0000000d 0001ffe8     ....^...........
   20080:	00000018 00000a78 00000005 696e6966     ....x.......fini
   20090:	64656873 73796168 6b636174 79622820     shedhaystack (by
   200a0:	20736574 6167654e 65766974 69736f50     tes NegativePosi
   200b0:	65766974 65746e69 6c617267 61706e55     tiveintegralUnpa
   200c0:	64656b63 69666e49 6574696e 756e694d     ckedInfiniteMinu
   200d0:	77615273 7265764f 776f6c66 6b636162     sRawOverflowback
   200e0:	72657469 6f746e49 72657449 61636f6c     iterIntoIterloca
   200f0:	6e6f6974 61636f4c 6e6f6974 72616573     tionLocationsear
   20100:	72656863 69736f70 6e6f6974 74697263     cherpositioncrit
   20110:	736f705f 656e694c 796e4173 57776152     _posLinesAnyRawW
   20120:	72656b61 6f6c6c41 72724563 38746e69     akerAllocErrint8
   20130:	745f3478 2f637273 6362696c 2f65726f     x4_tsrc/libcore/
   20140:	2f727473 2e646f6d 2e5b7372 625d2e2e     str/mod.rs[...]b
   20150:	20657479 65646e69 69202078 756f2073     yte index  is ou
   20160:	666f2074 756f6220 2073646e 6020666f     t of bounds of `
   20170:	0002014f 0000000b 0002015a 00000016     O.......Z.......
   20180:	0001fd54 00000001 00020134 00000016     T.......4.......
   20190:	00000853 00000009 69676562 3d3c206e     S.......begin <=
   201a0:	646e6520 00002820 00020198 0000000e      end (..........
   201b0:	0001fdc4 00000004 0001fd70 00000010     ........p.......
   201c0:	0001fd54 00000001 00020134 00000016     T.......4.......
   201d0:	00000857 00000005 00020134 00000016     W.......4.......
   201e0:	00000868 0000000e 20736920 20746f6e     h....... is not 
   201f0:	68632061 62207261 646e756f 3b797261     a char boundary;
   20200:	20746920 69207369 6469736e 20292065      it is inside ) 
   20210:	6020666f 0002014f 0000000b 000201e8     of `O...........
   20220:	00000026 0002009c 00000008 0002020e     &...............
   20230:	00000006 0001fd54 00000001 00020134     ....T.......4...
   20240:	00000016 0000086a 00000005 0001fcf4     ....j...........
   20250:	00000020 0000001a 00000028 05030100      .......(.......
   20260:	03060605 08080607 1c0a1109 140c190b     ................
   20270:	0d0e120d 0310040f 09131212 05170116     ................
   20280:	03190218 021c071a 161f011d 042b0320     ............ .+.
   20290:	0b2d022c 0330012e 01320231 02a902a7     ,.-...0.1.2.....
   202a0:	08ab04aa 05fb02fa 03fe04fd 78ad09ff     ...............x
   202b0:	a28d8b79 8b585730 1d1c908c 4b0f0edd     y...0WX........K
   202c0:	2efcfb4c 5d5c3f2f 84e2b55f 92918e8d     L.../?\]_.......
   202d0:	bbbab1a9 cac9c6c5 ffe5e4de 12110400     ................
   202e0:	37343129 493d3b3a 8e845d4a b4b1a992     )147:;=IJ]......
   202f0:	cac6bbba e5e4cfce 0e0d0400 31291211     ..............)1
   20300:	453b3a34 5e4a4946 91846564 cec99d9b     4:;EFIJ^de......
   20310:	29110dcf 64574945 a9918d65 c5bbbab4     ...)EIWde.......
   20320:	e5e4dfc9 110d04f0 65644945 b2848180     ........EIde....
   20330:	d5bfbebc 83f1f0d7 a6a48b85 c7c5bfbe     ................
   20340:	dbdacfce cdbd9848 49cfcec6 59574f4e     ....H......INOWY
   20350:	8e895f5e b7b6b18f c7c6c1bf 171611d7     ^_..............
   20360:	f7f65c5b 0d80fffe dfde716d 6e1f0f0e     [\......mq.....n
   20370:	5f1d1c6f afae7e7d 16fabcbb 461f1e17     o.._}~.........F
   20380:	584f4e47 7e5e5c5a d4c5b57f f1f0dcd5     GNOXZ\^~........
   20390:	8f7372f5 97967574 2e265f2f b7afa72f     .rs.tu../_&./...
   203a0:	d7cfc7bf 97409adf 1f8f3098 ffcec1c0     ......@..0......
   203b0:	5b5a4f4e 100f0807 efee2f27 3d376f6e     NOZ[....'/..no7=
   203c0:	9045423f 53fffe91 c9c87567 d9d8d1d0     ?BE....Sgu......
   203d0:	00fffee7 82225f20 448204df 06041b08     .... _"....D....
   203e0:	0eac8111 1e35ab80 03e08015 04010819     ......5.........
   203f0:	0434042f 07010307 0a110706 07120f50     /.4.........P...
   20400:	04020855 03090a1c 03070308 03030302     U...............
   20410:	0305040c 0e01060b 033a0515 05060711     ..........:.....
   20420:	07570710 0d150702 03430450 0401032d     ..W.....P.C.-...
   20430:	0c0f0611 251d043a 046d205f c880256a     ....:..%_ m.j%..
   20440:	03b08205 fd82061a 15075903 1409170b     .........Y......
   20450:	6a0c140c 1a060a06 2b075906 2c0a4605     ...j.....Y.+.F.,
   20460:	01040c04 2c0b3103 0b061a04 06ac8003     .....1.,........
   20470:	411f060a 032d044c 033c0874 073c030f     ...AL.-.t.<...<.
   20480:	052b0838 1811ff82 2d112f08 21102003     8.+....../.-. .!
   20490:	048c800f 0b199782 05948815 073b052f     ............/.;.
   204a0:	09180e02 7430b080 1ad6800c ff80050c     ......0t........
   204b0:	05b68005 c69b0c24 1030d20a 37038d84     ....$.....0....7
   204c0:	145c8109 8008b880 043530c7 0838060a     ..\......05...8.
   204d0:	060c0846 031e0b74 0959045a 1c188380     F...t...Z.Y.....
   204e0:	4809160a 068a8008 170ca4ab 04a13104     ...H.........1..
   204f0:	0726da81 8005050c 6d8111a5 2a287810     ..&........m.x(*
   20500:	80044c06 be80048d 0f031b03 0106000d     .L..............
   20510:	04010301 09080802 0b050a02 11011002     ................
   20520:	13051204 15021411 19021702 1d051c04     ................
   20530:	6a012408 bc026b03 d402d102 d609d50c     .$.j.k..........
   20540:	da02d702 e105e001 ee02e802 f904f020     ............ ...
   20550:	0c02fa06 4e3e3b27 9e9e8f4f 0907069f     ....';>NO.......
   20560:	563e3d36 04d1d0f3 37361814 35bd5756     6=>V......67VW.5
   20570:	12e0cfce 9e8e8987 110e0d04 34312912     .............)14
   20580:	4946453a 644f4e4a b65c5a65 a81c1bb7     :EFIJNOdeZ\.....
   20590:	09d9d8a9 a8919037 3e3b0a07 928f6966     ....7.....;>fi..
   205a0:	efee5f6f 9b9a625a 9d552827 a4a3a1a0     o_..Zb..'(U.....
   205b0:	baada8a7 0b06c4bc 3a1d150c a651453f     ...........:?EQ.
   205c0:	a0cdcca7 221a1907 c53f3e25 232004c6     ......."%>?... #
   205d0:	33282625 4a483a38 5553504c 5c5a5856     %&(38:HJLPSUVXZ\
   205e0:	6563605e 78736b66 a48a7f7d c0b0afaa     ^`cefksx}.......
   205f0:	a3720cd0 6ecccba4 7b225e6f 2d040305     ..r....no^"{...-
   20600:	01046503 82802e2f 0f31031d 0924041c     .e../.....1...$.
   20610:	052b051e 2a0e0444 2406aa80 28042404     ..+.D..*...$.$.(
   20620:	010b3408 37819080 080a1609 03399880     .4.....7......9.
   20630:	30090863 03210516 4001051b 054b0438     c..0..!....@8.K.
   20640:	070a042f 20400709 090c0427 053a0336     /.....@ '...6.:.
   20650:	0c04071a 37495007 07330d33 810a082e     .....PI73.3.....
   20660:	81801f26 802a0828 4e091786 430f1e04     &...(.*....N...C
   20670:	0a07190e 27094706 3f0b7509 3b062a41     .....G.'.u.?A*.;
   20680:	51060a05 10050106 8b800503 08482060     ...Q........` H.
   20690:	5ea6800a 0a0b4522 39130d06 2c360a07     ...^"E.....9..6,
   206a0:	c0801004 0c53643c 45a08001 5308481b     ....<dS....E.H.S
   206b0:	0781391d 031d0a46 03374947 060a080e     .9..F...GI7.....
   206c0:	810a0739 c7801936 9b830d32 800b7566     9...6...2...fu..
   206d0:	84bc8ac4 82d18f2f 82b9a147 042a0739     ..../...G...9.*.
   206e0:	0a266002 05280a46 5bb08213 39044b65     .`&.F.(....[eK.9
   206f0:	04401107 08f8971c 0da5f382 03311f81     ..@...........1.
   20700:	81080411 6b04898c 09030d05 60931007     .......k.......`
   20710:	730af680 46176e08 0c149a80 80190957     ...s.n.F....W...
   20720:	03478187 150f4285 802b5085 1a032dd5     ..G..B...P+..-..
   20730:	70810204 8501053a 29d78000 040a044c     ...p:......)L...
   20740:	44118302 c2803d4c 0401063c 341b0555     ...DL=..<...U..4
   20750:	2c0e8102 560c6404 5d030d0a 1d393d03     ...,.d.V...].=9.
   20760:	09042c0d 060e0207 d6839a80 0b030d0a     .,..............
   20770:	590c7405 0c140c07 0a083804 1e082806     .t.Y.....8...(..
   20780:	31037752 0ca68003 05030414 85060d03     Rw.1............
   20790:	6372736a 62696c2f 65726f63 696e752f     jsrc/libcore/uni
   207a0:	65646f63 646f6d2f 0073722e 00020791     code/mod.rs.....
   207b0:	0000001a 00000038 0000000f 00020791     ....8...........
   207c0:	0000001a 00000039 00000010              ....9.......

000207cc <_ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E>:
   207cc:	1b150f04 17120319 0e000011 00000016     ................
	...
   207f4:	00130600 00000000 00000000 00000000     ................
   20804:	00000000 07020000 0c08000a 1a181c1d     ................
	...
   20824:	01050000 00000000 00000000 00000000     ................
   20834:	00000000 10000000 00000000 0009000b     ................
   20844:	                                         ...

00020847 <_ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E>:
	...
   20863:	00120f00 00000000 00000000 00000000     ................
   20873:	0000001f 00000000 00000000 00000000     ................
   20883:	1d664649 00000000 00000000 00000000     IFf.............
   20893:	00003e8a 00000000 00000000 4b000000     .>.............K
   208a3:	00000053 00000000 00000000 42236700     S............g#B
	...
   208bf:	0000003d 00230000 00000000 00000000     =.....#.........
   208cf:	2d000075 00000000 00000000 00000000     u..-............
   208df:	003c4e82 00000000 00000000 63000000     .N<............c
   208ef:	25000000 00005a00 00000000 00368100     ...%.Z........6.
   208ff:	00000300 00000000 00000000 0000002f     ............/...
   2090f:	00000000 00001000 13000000 00000800     ................
	...
   20927:	43000000 89007200 00000000 00000000     ...C.r..........
   20937:	00070000 057d0000 37003f18 64400987     ......}..?.7..@d
   20947:	00210000 00000000 00000000 00000000     ..!.............
   20957:	4100000a 00000000 00000000 00000000     ...A............
   20967:	0030000c 0000005c 00717719 44354760     ..0.\....wq.`G5D
   20977:	7400002e 2c651139 507f5e51 34000000     ...t9.e,Q^.P...4
   20987:	00000031 00000053 3a000000 00000000     1...S......:....
   20997:	88001a38 696b2b5f 845d4f5d 14682a80     8..._+ki]O]..*h.
   209a7:	0017003b 00000000 00000000 00000000     ;...............
   209b7:	57000055 83000000 00000000 00000000     U..W............
   209c7:	00000059 26000000 00161b6e 00000000     Y......&n.......
   209d7:	001c4a6d 00000000 00000000 00002400     mJ...........$..
   209e7:	0052007c 0015067b 48000000 00000000     |.R.{......H....
   209f7:	2776287e 2200296c 0d610e5b 04627056     ~(v'l)."[.a.Vpb.
   20a07:	02782085 1e7a0000 00540179 00000033     . x...z.y.T.3...
   20a17:	00587386 0b6f454d 3200006a 00004c6c     .sX.MEo.j..2lL..
   20a27:	00008a89 3e8a8a8a 00000000 00000000     .......>........
	...

00020a38 <_ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E>:
	...
   20a40:	00000001 00000000 0000000d 00000000     ................
   20a50:	0000001c 00000000 00000040 00000000     ........@.......
   20a60:	000000b6 00000000 000000bf 00000000     ................
   20a70:	000003f8 00000000 000007f0 00000000     ................
   20a80:	000007ff 00000000 00001000 00000000     ................
   20a90:	00001e00 00000000 00003800 00000000     .........8......
   20aa0:	00003f00 00000000 00007f80 00000000     .?..............
   20ab0:	00008000 00000000 0001ffc0 00000000     ................
   20ac0:	0003ff80 00000000 00078000 00000000     ................
   20ad0:	007f0000 00000000 00802001 00000000     ......... ......
   20ae0:	00a30000 00000000 037ffc00 00000000     ................
   20af0:	06000000 00000000 07ff0000 00000000     ................
   20b00:	09800000 00000000 0e000000 00000000     ................
   20b10:	0e7e0080 00000000 20002064 00000000     ..~.....d . ....
   20b20:	200ffe40 00000000 30000001 00000000     @.. .......0....
   20b30:	40000000 00000000 4000005c 00000000     ...@....\..@....
   20b40:	60000000 00000000 805c8400 00000000     ...`......\.....
   20b50:	c0000000 00000000 e0000000 00000000     ................
   20b60:	00000000 00000001 0cf00000 00000001     ................
   20b70:	00603044 0000000c 00603dc1 0000000c     D0`......=`.....
   20b80:	0080201e 0000000c 00c0201e 0000000c     . ....... ......
   20b90:	00fe21fe 0000000c 00000000 00000020     .!.......... ...
   20ba0:	00000000 00000060 00000844 00000060     ....`...D...`...
   20bb0:	00000000 000000f0 00000060 00000200     ........`.......
   20bc0:	f9ffff7f 000007db 80000000 000007f8     ................
   20bd0:	e0000000 00000fbc 00000000 00002120     ............ !..
   20be0:	00000003 00003b3c 00000fe7 00003c00     ....<;.......<..
   20bf0:	9fc00000 00003d9f fbc00000 00003eef     .....=.......>..
   20c00:	00000000 00003fc0 00000000 0000f000     .....?..........
   20c10:	00000000 0000fc00 f8000010 0000fffe     ................
   20c20:	0000ffff 0000ffff ffffffff 0000ffff     ................
   20c30:	fffff800 00010000 00000000 0001ffc0     ................
   20c40:	ffff0000 0001ffff 00000000 00030000     ................
   20c50:	00000000 00038000 00000000 0003a340     ............@...
   20c60:	00000000 00080000 000c0000 000c0000     ................
   20c70:	00000004 000ff800 00000000 00180000     ................
   20c80:	001c0000 001c0000 c3000000 001e0001     ................
   20c90:	00000000 001f0000 00800001 001f1fc0     ................
   20ca0:	00000007 001fef80 ffffffff 00201fff     .............. .
   20cb0:	00023986 00230000 00000002 00403000     .9....#......0@.
   20cc0:	00000000 00667e00 fffc0000 006dfcff     .....~f.......m.
   20cd0:	00000000 007f0000 00000000 00bf2800     .............(..
   20ce0:	00000000 00cff000 03000000 02a00000     ................
   20cf0:	fff70000 031021fd 00000003 06780000     .....!........x.
   20d00:	00000000 06ff8000 00000000 07c00000     ................
   20d10:	00000000 07f20000 00000000 0e040187     ................
   20d20:	00000006 10000000 00001008 10000000     ................
   20d30:	00000007 14000000 0000000f 17f00000     ................
   20d40:	00000000 1ff20000 feffe0df 1fffffff     ................
   20d50:	00000000 20000000 00000000 200ff800     ....... ....... 
   20d60:	00000007 33c80000 00000000 3fb00000     .......3.......?
   20d70:	00000000 3ff78000 00000004 40000000     .......?.......@
   20d80:	0080201e 4000000c 00000000 40d38000     . .....@.......@
   20d90:	00000002 50000000 00000003 58000000     .......P.......X
   20da0:	00000000 66fde000 000007fe 79f80000     .......f.......y
   20db0:	00000003 7fc00000 00000000 7ffe0000     ................
   20dc0:	00000000 7fff0000 00000000 80000000     ................
   20dd0:	0000007f 80000000 00000030 8003ffff     ........0.......
   20de0:	0000f06e 87000000 00000002 90000000     n...............
   20df0:	7f400000 9ff81fe5 00000000 a5f90000     ..@.............
   20e00:	00000000 a7f80000 00000000 b03c8000     ..............<.
   20e10:	00000000 b47e0000 00000000 bf7f0000     ......~.........
   20e20:	fffe0000 bfffffff 00000011 c0000000     ................
   20e30:	00000000 c19d0000 00000002 d0000000     ................
   20e40:	00000000 f807c3a0 ffffffff f87fffff     ................
   20e50:	ffffffff fbffffff 000021be fc00000c     .........!......
   20e60:	00000000 ff000000 00000002 ff000000     ................
   20e70:	00020000 ffff0000 fff80000 fffffffb     ................
   20e80:	00000000 ffffffff ffffffff ffffffff     ................
   20e90:	00000020 00006425 6c363025 00002075      ...%d..%06lu ..

00020ea0 <nrf52_hal_i2cs>:
   20ea0:	00000000 20000108                       ....... 

00020ea8 <nrf52_hal_spis>:
   20ea8:	2000a570 00000000 00000000 65737341     p.. ........Asse
   20eb8:	40207472 25783020 00000a78 65737341     rt @ 0x%x...Asse
   20ec8:	40207472 25783020 202d2078 253a7325     rt @ 0x%x - %s:%
   20ed8:	00000a64 61686e55 656c646e 6e692064     d...Unhandled in
   20ee8:	72726574 20747075 646c2528 65202c29     terrupt (%ld), e
   20ef8:	70656378 6e6f6974 20707320 30257830     xception sp 0x%0
   20f08:	0a786c38 00000000 3a307220 30257830     8lx..... r0:0x%0
   20f18:	20786c38 3a317220 30257830 20786c38     8lx  r1:0x%08lx 
   20f28:	3a327220 30257830 20786c38 3a337220      r2:0x%08lx  r3:
   20f38:	30257830 0a786c38 00000000 3a347220     0x%08lx..... r4:
   20f48:	30257830 20786c38 3a357220 30257830     0x%08lx  r5:0x%0
   20f58:	20786c38 3a367220 30257830 20786c38     8lx  r6:0x%08lx 
   20f68:	3a377220 30257830 0a786c38 00000000      r7:0x%08lx.....
   20f78:	3a387220 30257830 20786c38 3a397220      r8:0x%08lx  r9:
   20f88:	30257830 20786c38 3a303172 30257830     0x%08lx r10:0x%0
   20f98:	20786c38 3a313172 30257830 0a786c38     8lx r11:0x%08lx.
   20fa8:	00000000 3a323172 30257830 20786c38     ....r12:0x%08lx 
   20fb8:	3a726c20 30257830 20786c38 3a637020      lr:0x%08lx  pc:
   20fc8:	30257830 20786c38 3a727370 30257830     0x%08lx psr:0x%0
   20fd8:	0a786c38 00000000 52534349 2578303a     8lx.....ICSR:0x%
   20fe8:	786c3830 53464820 78303a52 6c383025     08lx HFSR:0x%08l
   20ff8:	46432078 303a5253 38302578 000a786c     x CFSR:0x%08lx..
   21008:	52414642 2578303a 786c3830 464d4d20     BFAR:0x%08lx MMF
   21018:	303a5241 38302578 000a786c 6e69616d     AR:0x%08lx..main
   21028:	00000000 656c6469 00000000 7379736d     ....idle....msys
   21038:	0000315f                                _1..

0002103c <MemFile_methods>:
   2103c:	0001b6b9 00000000                       ........

00021044 <stdout>:
   21044:	20000124                                $.. 

00021048 <nrf52k_flash_dev>:
   21048:	00021060 00000000 00080000 00000080     `...............
   21058:	00000001 000000ff                       ........

00021060 <nrf52k_flash_funcs>:
   21060:	0001b925 0001b855 0001b7dd 0001b835     %...U.......5...
   21070:	00000000 0001b831 00000000              ....1.......

0002107c <nrf52_hal_timers>:
   2107c:	2000a680 00000000 00000000 00000000     ... ............
	...

00021094 <hal_i2c1_cfg>:
   21094:	00000007 00000006 00000064              ........d...

000210a0 <os_bsp_spi0m_cfg>:
   210a0:	001d0302 736e6573 6e5f726f 6669746f     ....sensor_notif
   210b0:	7476655f 00000073                       _evts...

000210b8 <COLLECTOR_NODE_HW_ID>:
   210b8:	066aff57 50547878 67242949              W.j.xxTPI)$g

000210c4 <SENSOR_NODE_HW_IDS>:
   210c4:	066dff38 3634574e 43085825 04030201     8.m.NW46%X.C....
   210d4:	08070605 020b0a09 04030201 08070605     ................
   210e4:	030b0a09 04030201 08070605 040b0a09     ................
   210f4:	04030201 08070605 050b0a09 77687325     ............%shw
   21104:	00206469 30313025 00786c6c 646f6e20     id .%010llx. nod
   21114:	00002065 65737325 726f736e 25237325     e ..%ssensor%s#%
   21124:	00000a64 6f637325 63656c6c 25726f74     d...%scollector%
   21134:	00000a73 74737325 61646e61 656e6f6c     s...%sstandalone
   21144:	000a7325 2054454e 00000000 73257325     %s..NET ....%s%s
   21154:	0a732520 00000000 00000000               %s.........

00021160 <sensor_node_addresses>:
   21160:	b4b5b6f1 000000b3 b4b5b6cd 000000b3     ................
   21170:	b4b5b6a3 000000b3 b4b5b60f 000000b3     ................
   21180:	b4b5b605 000000b3 706d6574 7574735f     ........temp_stu
   21190:	00305f62 20504d54 61657263 25206574     b_0.TMP create %
   211a0:	00000a73                                s...

000211a4 <g_temp_stub_sensor_driver>:
   211a4:	0001c761 0001c669 00000000 00000000     a...i...........
	...
   211cc:	20425453 64616572 6d657420 65732070     STB read temp se
   211dc:	726f736e 0000000a 635f636f 62635f6c     nsor....oc_cl_cb
   211ec:	00000073 725f636f 6f5f7065 00000000     s...oc_rep_o....

000211fc <sysflash_map_dflt>:
	...
   21204:	00004000 00000001 00008000 00073c00     .@...........<..
   21214:	00000002 0007bc00 00000400 00000003     ................
   21224:	0007c000 00001000 00000010 00004000     .............@..
   21234:	00004000 00000011 0007d000 00003000     .@...........0..
   21244:	70616f63 6365725f 65766965 544f4e20     coap_receive NOT
   21254:	504d4920 454d454c 4445544e 0000000a      IMPLEMENTED....

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 103004	    108	  42728	 145840	  239b0	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
