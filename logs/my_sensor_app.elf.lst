
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x0001fb3c vaddr 0x0001fb3c paddr 0x0001fb3c align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0001fb54 memsz 0x0001fb54 flags rwx
    LOAD off    0x000200d8 vaddr 0x200000d8 paddr 0x0001fb54 align 2**16
         filesz 0x0000006c memsz 0x0000006c flags rw-
    LOAD off    0x00020148 vaddr 0x20000148 paddr 0x0001fbc0 align 2**16
         filesz 0x00000000 memsz 0x0000de40 flags rw-
    LOAD off    0x00030000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              00017b1c  00008020  00008020  00008020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  0001fb3c  0001fb3c  00020144  2**0  CONTENTS
  3 .ARM.exidx         00000018  0001fb3c  0001fb3c  0001fb3c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00030000  2**0  ALLOC
  5 .rtt               00000000  200000d8  200000d8  00020144  2**0  CONTENTS
  6 .data              0000006c  200000d8  0001fb54  000200d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20000144  20000144  00020144  2**0  CONTENTS
  8 .bss               0000de40  20000148  0001fbc0  00020148  2**3  ALLOC
  9 .stack_dummy       000001b0  2000df88  2000df88  00020148  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000003b  00000000  00000000  000202f8  2**0  CONTENTS, READONLY
 11 .comment           0000007f  00000000  00000000  00020333  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  000203b2  2**0  CONTENTS, READONLY
 13 .debug_line        0004934d  00000000  00000000  000203b6  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        0008525c  00000000  00000000  00069703  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      0000e342  00000000  00000000  000ee95f  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     000059d0  00000000  00000000  000fcca8  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         0005947e  00000000  00000000  00102678  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         000134bc  00000000  00000000  0015baf6  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      00019cb8  00000000  00000000  0016efb2  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       0000e890  00000000  00000000  00188c6c  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_macinfo     00000053  00000000  00000000  001974fc  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_pubnames    00014ad0  00000000  00000000  0019754f  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_pubtypes    0003086e  00000000  00000000  001ac01f  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
0001fb3c l    d  .ARM.extab	00000000 .ARM.extab
0001fb3c l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
20000144 l    d  .bssnz	00000000 .bssnz
20000148 l    d  .bss	00000000 .bss
2000df88 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
0000820c l     F .text	0000003c errata_16
00008248 l     F .text	0000004c errata_31
00008294 l     F .text	0000003c errata_32
000082d0 l     F .text	0000004c errata_36
0000831c l     F .text	0000003c errata_37
00008358 l     F .text	0000003c errata_57
00008394 l     F .text	0000003c errata_66
000083d0 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 3592ao74dt466zwu
00000d09 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f9dc l       .debug_str	00000000 
00052395 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fb59 l       .debug_str	00000000 
0001fb4d l       .debug_str	00000000 
0002c01d l       .debug_str	00000000 
00051ca9 l       .debug_str	00000000 
00052410 l       .debug_str	00000000 
000516dd l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
0002c04a l       .debug_str	00000000 
0002c03c l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
00000e0f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00046608 l       .debug_str	00000000 
000315ad l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00054902 l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
0005378b l       .debug_str	00000000 
00000bbf l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
00003ee3 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0002c009 l       .debug_str	00000000 
000573c3 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000310c3 l       .debug_str	00000000 
000547ac l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058de6 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005241e l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cz1tg82iqprprj5
00001118 l       .debug_str	00000000 
0000126a l       .debug_str	00000000 
000012aa l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00017016 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003a1e1 l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005709e l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00051ae3 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
00057ed9 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00055428 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
000361f7 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 40zocxwjz4ckzrhd
000012fa l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000132a l       .debug_str	00000000 
0000133d l       .debug_str	00000000 
0000136d l       .debug_str	00000000 
00001398 l       .debug_str	00000000 
000013a1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5k460cii92qewjl
000012f5 l       .debug_str	00000000 
00001433 l       .debug_str	00000000 
0000146f l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
00001478 l       .debug_str	00000000 
0001abeb l       .debug_str	00000000 
000014a3 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0002c009 l       .debug_str	00000000 
00001501 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00011087 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00001412 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001fac1 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001425 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16zjnp1vbo7kc1gp
00000c82 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000310c3 l       .debug_str	00000000 
000547ac l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058de6 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005241e l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f9dc l       .debug_str	00000000 
00052395 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fb59 l       .debug_str	00000000 
0001fb4d l       .debug_str	00000000 
0000165b l       .debug_str	00000000 
00012cd8 l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
00054bd9 l       .debug_str	00000000 
00058ecc l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00003d16 l       .debug_str	00000000 
00058dd7 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00046608 l       .debug_str	00000000 
000315ad l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00057ac2 l       .debug_str	00000000 
00001521 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00058a96 l       .debug_str	00000000 
0000152e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
0002284e l       .debug_str	00000000 
00016151 l       .debug_str	00000000 
00001536 l       .debug_str	00000000 
000017dc l       .debug_str	00000000 
0000153e l       .debug_str	00000000 
000015c3 l       .debug_str	00000000 
000015d9 l       .debug_str	00000000 
0005490b l       .debug_str	00000000 
00001600 l       .debug_str	00000000 
000374e7 l       .debug_str	00000000 
00001628 l       .debug_str	00000000 
00001656 l       .debug_str	00000000 
00001660 l       .debug_str	00000000 
0000168b l       .debug_str	00000000 
00001692 l       .debug_str	00000000 
0005725c l       .debug_str	00000000 
000016ba l       .debug_str	00000000 
00058e57 l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
000016e7 l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
0000171b l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
00001783 l       .debug_str	00000000 
0000178c l       .debug_str	00000000 
000017c2 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000017d3 l       .debug_str	00000000 
0000165a l       .debug_str	00000000 
0005182a l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
000017fa l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1oq54qwymghnfn7s
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f9dc l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052395 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046608 l       .debug_str	00000000 
000315ad l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000182a l       .debug_str	00000000 
00053c50 l       .debug_str	00000000 
000018af l       .debug_str	00000000 
0000191c l       .debug_str	00000000 
0000198e l       .debug_str	00000000 
00052a2c l       .debug_str	00000000 
000565b0 l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000019ec l       .debug_str	00000000 
00046607 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058de6 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2d0u1dup22f6p5uq
00000d12 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fb59 l       .debug_str	00000000 
00001a09 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00046608 l       .debug_str	00000000 
000315ad l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000310c3 l       .debug_str	00000000 
000547ac l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058de6 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005241e l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f9dc l       .debug_str	00000000 
00052395 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2q7rzzztqsy7quqz
00003138 l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
00003651 l       .debug_str	00000000 
00003691 l       .debug_str	00000000 
000036df l       .debug_str	00000000 
0000371f l       .debug_str	00000000 
00003746 l       .debug_str	00000000 
00003786 l       .debug_str	00000000 
00003794 l       .debug_str	00000000 
00003803 l       .debug_str	00000000 
0000382e l       .debug_str	00000000 
0000389e l       .debug_str	00000000 
000038b1 l       .debug_str	00000000 
00003921 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000394d l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00017016 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000361f7 l       .debug_str	00000000 
0000395c l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000527d0 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
00001a42 l       .debug_str	00000000 
00001d90 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003a1e1 l       .debug_str	00000000 
00001a4b l       .debug_str	00000000 
00001a57 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00001a5f l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00001ab9 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b6d l       .debug_str	00000000 
00001bbc l       .debug_str	00000000 
00001bc6 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c48 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c61 l       .debug_str	00000000 
00001c69 l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001d1b l       .debug_str	00000000 
00001d27 l       .debug_str	00000000 
00001d30 l       .debug_str	00000000 
00001d3c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001d61 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d96 l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005709e l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00051ae3 l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
00057ed9 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001daf l       .debug_str	00000000 
00047186 l       .debug_str	00000000 
00001dc6 l       .debug_str	00000000 
00001dce l       .debug_str	00000000 
00001dd7 l       .debug_str	00000000 
000031db l       .debug_str	00000000 
00001de0 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
00057b8c l       .debug_str	00000000 
00001de8 l       .debug_str	00000000 
00001df4 l       .debug_str	00000000 
00001dff l       .debug_str	00000000 
00001e07 l       .debug_str	00000000 
0000b1d7 l       .debug_str	00000000 
0000b702 l       .debug_str	00000000 
00001e0f l       .debug_str	00000000 
00001f0b l       .debug_str	00000000 
0000200f l       .debug_str	00000000 
0000201d l       .debug_str	00000000 
00002028 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002055 l       .debug_str	00000000 
00002032 l       .debug_str	00000000 
00002060 l       .debug_str	00000000 
000020db l       .debug_str	00000000 
0000215e l       .debug_str	00000000 
0000216c l       .debug_str	00000000 
000021cb l       .debug_str	00000000 
00002232 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
00002258 l       .debug_str	00000000 
000563c2 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00002267 l       .debug_str	00000000 
000252bf l       .debug_str	00000000 
0000226d l       .debug_str	00000000 
00002273 l       .debug_str	00000000 
00002279 l       .debug_str	00000000 
00002285 l       .debug_str	00000000 
00058de6 l       .debug_str	00000000 
0000228d l       .debug_str	00000000 
00002295 l       .debug_str	00000000 
0000229b l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
000022be l       .debug_str	00000000 
000022f1 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
00055f4f l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
0000237f l       .debug_str	00000000 
00002385 l       .debug_str	00000000 
000023ae l       .debug_str	00000000 
0000238b l       .debug_str	00000000 
000023c0 l       .debug_str	00000000 
00002402 l       .debug_str	00000000 
00055e38 l       .debug_str	00000000 
0000244c l       .debug_str	00000000 
00002452 l       .debug_str	00000000 
00002458 l       .debug_str	00000000 
00002481 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002493 l       .debug_str	00000000 
000024d5 l       .debug_str	00000000 
000552fc l       .debug_str	00000000 
0000251f l       .debug_str	00000000 
00002525 l       .debug_str	00000000 
0000252b l       .debug_str	00000000 
00002531 l       .debug_str	00000000 
0000255a l       .debug_str	00000000 
00002537 l       .debug_str	00000000 
0000256b l       .debug_str	00000000 
000025ac l       .debug_str	00000000 
000025f5 l       .debug_str	00000000 
000025fa l       .debug_str	00000000 
00056186 l       .debug_str	00000000 
000025ff l       .debug_str	00000000 
00002605 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002634 l       .debug_str	00000000 
00002611 l       .debug_str	00000000 
00002645 l       .debug_str	00000000 
00002686 l       .debug_str	00000000 
000553b4 l       .debug_str	00000000 
000026cf l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
000026d8 l       .debug_str	00000000 
0000270c l       .debug_str	00000000 
0000274d l       .debug_str	00000000 
00002796 l       .debug_str	00000000 
0005635a l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027a4 l       .debug_str	00000000 
000027ab l       .debug_str	00000000 
000027d6 l       .debug_str	00000000 
000027b3 l       .debug_str	00000000 
000027e8 l       .debug_str	00000000 
0000282a l       .debug_str	00000000 
00056022 l       .debug_str	00000000 
00002874 l       .debug_str	00000000 
0000287a l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
00002886 l       .debug_str	00000000 
0000288c l       .debug_str	00000000 
00002894 l       .debug_str	00000000 
000028a2 l       .debug_str	00000000 
000028b1 l       .debug_str	00000000 
000028c2 l       .debug_str	00000000 
000028cd l       .debug_str	00000000 
000028d8 l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028ea l       .debug_str	00000000 
00002930 l       .debug_str	00000000 
0000290d l       .debug_str	00000000 
00002942 l       .debug_str	00000000 
00002984 l       .debug_str	00000000 
000554b7 l       .debug_str	00000000 
000029ce l       .debug_str	00000000 
000029fb l       .debug_str	00000000 
000029d8 l       .debug_str	00000000 
00002a0d l       .debug_str	00000000 
00002a4f l       .debug_str	00000000 
00002a99 l       .debug_str	00000000 
00002a9e l       .debug_str	00000000 
00002acb l       .debug_str	00000000 
00002aa8 l       .debug_str	00000000 
00002add l       .debug_str	00000000 
00002b1f l       .debug_str	00000000 
00002b69 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00002be8 l       .debug_str	00000000 
00002b7d l       .debug_str	00000000 
00002b8d l       .debug_str	00000000 
00002b96 l       .debug_str	00000000 
00002ba1 l       .debug_str	00000000 
00002bb0 l       .debug_str	00000000 
00002bc5 l       .debug_str	00000000 
00002bf6 l       .debug_str	00000000 
00002c93 l       .debug_str	00000000 
00002d38 l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d4c l       .debug_str	00000000 
00002d90 l       .debug_str	00000000 
00002d6d l       .debug_str	00000000 
00002da3 l       .debug_str	00000000 
00002e26 l       .debug_str	00000000 
00002eb1 l       .debug_str	00000000 
00002ecd l       .debug_str	00000000 
00002f19 l       .debug_str	00000000 
00002f6d l       .debug_str	00000000 
00002f8a l       .debug_str	00000000 
00002f9e l       .debug_str	00000000 
00002fea l       .debug_str	00000000 
0000303e l       .debug_str	00000000 
00003054 l       .debug_str	00000000 
00003068 l       .debug_str	00000000 
000030af l       .debug_str	00000000 
000030fe l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003107 l       .debug_str	00000000 
0000313e l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314d l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
00003155 l       .debug_str	00000000 
0000315d l       .debug_str	00000000 
0002bb08 l       .debug_str	00000000 
0000316c l       .debug_str	00000000 
00003df8 l       .debug_str	00000000 
00003177 l       .debug_str	00000000 
00003182 l       .debug_str	00000000 
00003193 l       .debug_str	00000000 
00003199 l       .debug_str	00000000 
000031a1 l       .debug_str	00000000 
000031a8 l       .debug_str	00000000 
000031b2 l       .debug_str	00000000 
000031ba l       .debug_str	00000000 
000031c2 l       .debug_str	00000000 
000031e4 l       .debug_str	00000000 
000031ef l       .debug_str	00000000 
000031fb l       .debug_str	00000000 
00003203 l       .debug_str	00000000 
0000320c l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
00003217 l       .debug_str	00000000 
00003222 l       .debug_str	00000000 
0000322d l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
00055428 l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
0000323d l       .debug_str	00000000 
0000324d l       .debug_str	00000000 
0000325c l       .debug_str	00000000 
00003264 l       .debug_str	00000000 
0000326b l       .debug_str	00000000 
00003273 l       .debug_str	00000000 
000032b4 l       .debug_str	00000000 
00003291 l       .debug_str	00000000 
000032c4 l       .debug_str	00000000 
000032d9 l       .debug_str	00000000 
000032e2 l       .debug_str	00000000 
0000333f l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
000033ae l       .debug_str	00000000 
000033be l       .debug_str	00000000 
000033d3 l       .debug_str	00000000 
000033db l       .debug_str	00000000 
0000343f l       .debug_str	00000000 
000034ab l       .debug_str	00000000 
000034b2 l       .debug_str	00000000 
000034ba l       .debug_str	00000000 
000034fb l       .debug_str	00000000 
000034d8 l       .debug_str	00000000 
0000350b l       .debug_str	00000000 
00003520 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
0000354f l       .debug_str	00000000 
00003564 l       .debug_str	00000000 
0000358e l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00003605 l       .debug_str	00000000 
00003644 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2vuqh37eag1b6y30
00003b45 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00054bd9 l       .debug_str	00000000 
00058ecc l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00003d16 l       .debug_str	00000000 
0002307b l       .debug_str	00000000 
00003aba l       .debug_str	00000000 
00003b1d l       .debug_str	00000000 
00003bc3 l       .debug_str	00000000 
00003c53 l       .debug_str	00000000 
00003c69 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00003cf0 l       .debug_str	00000000 
00003cff l       .debug_str	00000000 
00052291 l       .debug_str	00000000 
00003d21 l       .debug_str	00000000 
000168b4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00012cd8 l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00003979 l       .debug_str	00000000 
00003a03 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00052736 l       .debug_str	00000000 
00003a1b l       .debug_str	00000000 
00003ab0 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fb77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3l5pa7f4r4pjxp5p
000049f0 l       .debug_str	00000000 
00004a1d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00004a3c l       .debug_str	00000000 
00004a70 l       .debug_str	00000000 
00004a57 l       .debug_str	00000000 
00004a78 l       .debug_str	00000000 
00004a8e l       .debug_str	00000000 
00004af6 l       .debug_str	00000000 
00004b6e l       .debug_str	00000000 
00004b9b l       .debug_str	00000000 
00004bb3 l       .debug_str	00000000 
00004c1d l       .debug_str	00000000 
00004c25 l       .debug_str	00000000 
00004c2b l       .debug_str	00000000 
00004c35 l       .debug_str	00000000 
00004caf l       .debug_str	00000000 
00004d1b l       .debug_str	00000000 
00004d94 l       .debug_str	00000000 
00004e0d l       .debug_str	00000000 
00004e78 l       .debug_str	00000000 
00004ee7 l       .debug_str	00000000 
00004eee l       .debug_str	00000000 
00004ef9 l       .debug_str	00000000 
00004f21 l       .debug_str	00000000 
00004f96 l       .debug_str	00000000 
00005013 l       .debug_str	00000000 
00004f12 l       .debug_str	00000000 
0000501f l       .debug_str	00000000 
00001daf l       .debug_str	00000000 
00005096 l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
00047186 l       .debug_str	00000000 
00001dc6 l       .debug_str	00000000 
00001dce l       .debug_str	00000000 
00001dd7 l       .debug_str	00000000 
000031db l       .debug_str	00000000 
000050ff l       .debug_str	00000000 
0000517d l       .debug_str	00000000 
000051ed l       .debug_str	00000000 
00005267 l       .debug_str	00000000 
00005281 l       .debug_str	00000000 
000052ed l       .debug_str	00000000 
000052f6 l       .debug_str	00000000 
00005302 l       .debug_str	00000000 
00005378 l       .debug_str	00000000 
000053ee l       .debug_str	00000000 
00005464 l       .debug_str	00000000 
000054cc l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
0000553b l       .debug_str	00000000 
00000a4f l       .debug_str	00000000 
000055a8 l       .debug_str	00000000 
0000561d l       .debug_str	00000000 
00005632 l       .debug_str	00000000 
00005699 l       .debug_str	00000000 
000056a2 l       .debug_str	00000000 
000056ad l       .debug_str	00000000 
000056b4 l       .debug_str	00000000 
00053793 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
000361f7 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
000056e9 l       .debug_str	00000000 
000531cc l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
00005723 l       .debug_str	00000000 
00053073 l       .debug_str	00000000 
0005850a l       .debug_str	00000000 
00005756 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
00005763 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00058a96 l       .debug_str	00000000 
0000152e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
0002284e l       .debug_str	00000000 
00016151 l       .debug_str	00000000 
00001536 l       .debug_str	00000000 
000017dc l       .debug_str	00000000 
000017d3 l       .debug_str	00000000 
00005784 l       .debug_str	00000000 
00005789 l       .debug_str	00000000 
0000578e l       .debug_str	00000000 
00005793 l       .debug_str	00000000 
00005798 l       .debug_str	00000000 
0000579d l       .debug_str	00000000 
000057a8 l       .debug_str	00000000 
000057b3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003a1e1 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00003d2b l       .debug_str	00000000 
00013cd7 l       .debug_str	00000000 
00003d9f l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0000314d l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
00003dab l       .debug_str	00000000 
00003dd1 l       .debug_str	00000000 
0000315d l       .debug_str	00000000 
0002bb08 l       .debug_str	00000000 
0000316c l       .debug_str	00000000 
00003df8 l       .debug_str	00000000 
00003ddd l       .debug_str	00000000 
00003e04 l       .debug_str	00000000 
00003e0f l       .debug_str	00000000 
00003e1a l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
00003ed4 l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00003eb2 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00003eb9 l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00003ee8 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00003f45 l       .debug_str	00000000 
00003faa l       .debug_str	00000000 
00003fb2 l       .debug_str	00000000 
00003fd4 l       .debug_str	00000000 
00003fbb l       .debug_str	00000000 
00003fec l       .debug_str	00000000 
00004012 l       .debug_str	00000000 
0000408a l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
00055428 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
00004101 l       .debug_str	00000000 
0000416a l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
000041e2 l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005709e l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00051ae3 l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
00057ed9 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
0000424c l       .debug_str	00000000 
000042c5 l       .debug_str	00000000 
00058508 l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
000042ca l       .debug_str	00000000 
00000aa4 l       .debug_str	00000000 
000042f0 l       .debug_str	00000000 
000042d7 l       .debug_str	00000000 
000042d2 l       .debug_str	00000000 
000042fb l       .debug_str	00000000 
00004314 l       .debug_str	00000000 
0000437f l       .debug_str	00000000 
00000896 l       .debug_str	00000000 
00000ad4 l       .debug_str	00000000 
000043ef l       .debug_str	00000000 
000043ff l       .debug_str	00000000 
00004477 l       .debug_str	00000000 
00052d23 l       .debug_str	00000000 
00052a7d l       .debug_str	00000000 
00004481 l       .debug_str	00000000 
00004488 l       .debug_str	00000000 
000044ab l       .debug_str	00000000 
00004492 l       .debug_str	00000000 
0000448d l       .debug_str	00000000 
000044b5 l       .debug_str	00000000 
000044cd l       .debug_str	00000000 
00004537 l       .debug_str	00000000 
00001a4b l       .debug_str	00000000 
00001a57 l       .debug_str	00000000 
00001a5f l       .debug_str	00000000 
00001ab9 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b6d l       .debug_str	00000000 
00001bbc l       .debug_str	00000000 
00001bc6 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c48 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c61 l       .debug_str	00000000 
00001c69 l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001d1b l       .debug_str	00000000 
00001d27 l       .debug_str	00000000 
00001d30 l       .debug_str	00000000 
00001d3c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d61 l       .debug_str	00000000 
000045ac l       .debug_str	00000000 
00004613 l       .debug_str	00000000 
0000468e l       .debug_str	00000000 
0000469e l       .debug_str	00000000 
000046a7 l       .debug_str	00000000 
000046b5 l       .debug_str	00000000 
000046c3 l       .debug_str	00000000 
000046cf l       .debug_str	00000000 
000048dd l       .debug_str	00000000 
000046db l       .debug_str	00000000 
000046ea l       .debug_str	00000000 
000046f2 l       .debug_str	00000000 
0000470b l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
0000471c l       .debug_str	00000000 
00004724 l       .debug_str	00000000 
00004757 l       .debug_str	00000000 
0000473e l       .debug_str	00000000 
00004763 l       .debug_str	00000000 
00001d54 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00004795 l       .debug_str	00000000 
0000477c l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047c2 l       .debug_str	00000000 
000047a9 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047ea l       .debug_str	00000000 
00004857 l       .debug_str	00000000 
000048d4 l       .debug_str	00000000 
000048dc l       .debug_str	00000000 
00004b8c l       .debug_str	00000000 
00004b73 l       .debug_str	00000000 
000048e6 l       .debug_str	00000000 
00004903 l       .debug_str	00000000 
00004972 l       .debug_str	00000000 
000049e8 l       .debug_str	00000000 
000049f9 l       .debug_str	00000000 
00004a07 l       .debug_str	00000000 
00004a0e l       .debug_str	00000000 
00004a15 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 413mqmtb04w1hzsl
000077a3 l       .debug_str	00000000 
00009b75 l       .debug_str	00000000 
00009dbe l       .debug_str	00000000 
0000a024 l       .debug_str	00000000 
00029104 l       .debug_str	00000000 
00021fbc l       .debug_str	00000000 
0000a289 l       .debug_str	00000000 
0000a2b9 l       .debug_str	00000000 
0000a517 l       .debug_str	00000000 
0000136d l       .debug_str	00000000 
0000a547 l       .debug_str	00000000 
0000a551 l       .debug_str	00000000 
0000a5aa l       .debug_str	00000000 
000013a1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000a54c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000057b8 l       .debug_str	00000000 
000057e8 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00057d24 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
00053e42 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0002d51c l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
00052825 l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000590a l       .debug_str	00000000 
00005958 l       .debug_str	00000000 
000059c3 l       .debug_str	00000000 
0005725c l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00052736 l       .debug_str	00000000 
00029090 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00022210 l       .debug_str	00000000 
00005a2d l       .debug_str	00000000 
00005a5d l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00005b05 l       .debug_str	00000000 
00005b73 l       .debug_str	00000000 
00005c0a l       .debug_str	00000000 
00005cca l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005ec5 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
00006164 l       .debug_str	00000000 
000062f1 l       .debug_str	00000000 
000064a7 l       .debug_str	00000000 
00006686 l       .debug_str	00000000 
0000688e l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000094f8 l       .debug_str	00000000 
0000971c l       .debug_str	00000000 
0000994d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n7qec2sa6vjglqv
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005241e l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f9dc l       .debug_str	00000000 
00052395 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fb59 l       .debug_str	00000000 
0001fb4d l       .debug_str	00000000 
00052262 l       .debug_str	00000000 
00052a2c l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
00058dd7 l       .debug_str	00000000 
0000ac10 l       .debug_str	00000000 
0000ac19 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00046608 l       .debug_str	00000000 
000315ad l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000a7fe l       .debug_str	00000000 
0000b122 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
0000a835 l       .debug_str	00000000 
0000a888 l       .debug_str	00000000 
0002307b l       .debug_str	00000000 
0000a89c l       .debug_str	00000000 
0000a8e2 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
0000a8f0 l       .debug_str	00000000 
0000a937 l       .debug_str	00000000 
0000a940 l       .debug_str	00000000 
0000a989 l       .debug_str	00000000 
0000579d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
00003d21 l       .debug_str	00000000 
0000a995 l       .debug_str	00000000 
0000aa11 l       .debug_str	00000000 
00058ecc l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00003cf0 l       .debug_str	00000000 
0000aa3b l       .debug_str	00000000 
0000aab7 l       .debug_str	00000000 
0000aae6 l       .debug_str	00000000 
0000ab6c l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0002d362 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013cc7 l       .debug_str	00000000 
0000ab94 l       .debug_str	00000000 
0000abf6 l       .debug_str	00000000 
00053e42 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005725c l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0002284e l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0001678f l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0000abfe l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000310c3 l       .debug_str	00000000 
000547ac l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058de6 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4oqy1cznfkuv6rc
00054bee l       .debug_str	00000000 
0000ae2c l       .debug_str	00000000 
000517a4 l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00052395 l       .debug_str	00000000 
0005725c l       .debug_str	00000000 
0005921c l       .debug_str	00000000 
0005921b l       .debug_str	00000000 
00058a96 l       .debug_str	00000000 
0000152e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002284e l       .debug_str	00000000 
00016151 l       .debug_str	00000000 
00001536 l       .debug_str	00000000 
000017dc l       .debug_str	00000000 
000017d3 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
000252bf l       .debug_str	00000000 
000252c4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000ac20 l       .debug_str	00000000 
000516c7 l       .debug_str	00000000 
0000ac24 l       .debug_str	00000000 
0000ac55 l       .debug_str	00000000 
0000ac5b l       .debug_str	00000000 
0000ac9c l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0000acb1 l       .debug_str	00000000 
0000ace8 l       .debug_str	00000000 
0000acf3 l       .debug_str	00000000 
00057d24 l       .debug_str	00000000 
0000ad25 l       .debug_str	00000000 
0005180b l       .debug_str	00000000 
0000ad59 l       .debug_str	00000000 
000517fa l       .debug_str	00000000 
0000ad8d l       .debug_str	00000000 
000517b2 l       .debug_str	00000000 
0000adc4 l       .debug_str	00000000 
00051844 l       .debug_str	00000000 
0000adfc l       .debug_str	00000000 
00051675 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4qlpitlm4hs8kdcv
00003df8 l       .debug_str	00000000 
0000b173 l       .debug_str	00000000 
0000b19a l       .debug_str	00000000 
0000b1a5 l       .debug_str	00000000 
0000b1cc l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000b1d7 l       .debug_str	00000000 
0000b1d6 l       .debug_str	00000000 
0001fa0c l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
000527b3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005725c l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
00053e42 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0000579d l       .debug_str	00000000 
00055703 l       .debug_str	00000000 
00052a0d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000ae5d l       .debug_str	00000000 
0000ae86 l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
0000ae93 l       .debug_str	00000000 
0000aea5 l       .debug_str	00000000 
0000aeb6 l       .debug_str	00000000 
0000af02 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
0000af0e l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000527d0 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
00001a42 l       .debug_str	00000000 
00001d90 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003a1e1 l       .debug_str	00000000 
00001a4b l       .debug_str	00000000 
00001a57 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00001a5f l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001ab9 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b6d l       .debug_str	00000000 
00001bbc l       .debug_str	00000000 
00001bc6 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c48 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c61 l       .debug_str	00000000 
00001c69 l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001d1b l       .debug_str	00000000 
00001d27 l       .debug_str	00000000 
00001d30 l       .debug_str	00000000 
00001d3c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001d61 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d96 l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005709e l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00051ae3 l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
00057ed9 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001daf l       .debug_str	00000000 
00047186 l       .debug_str	00000000 
00001dc6 l       .debug_str	00000000 
00001dce l       .debug_str	00000000 
00001dd7 l       .debug_str	00000000 
000031db l       .debug_str	00000000 
00001de0 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
00057b8c l       .debug_str	00000000 
00001de8 l       .debug_str	00000000 
00001df4 l       .debug_str	00000000 
00001dff l       .debug_str	00000000 
00001e07 l       .debug_str	00000000 
0000af12 l       .debug_str	00000000 
0000b702 l       .debug_str	00000000 
00001e0f l       .debug_str	00000000 
00001f0b l       .debug_str	00000000 
0000200f l       .debug_str	00000000 
0000201d l       .debug_str	00000000 
00002028 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002055 l       .debug_str	00000000 
00002032 l       .debug_str	00000000 
00002060 l       .debug_str	00000000 
000020db l       .debug_str	00000000 
0000215e l       .debug_str	00000000 
0000216c l       .debug_str	00000000 
000021cb l       .debug_str	00000000 
00002232 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
00002258 l       .debug_str	00000000 
000563c2 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00002267 l       .debug_str	00000000 
000252bf l       .debug_str	00000000 
0000226d l       .debug_str	00000000 
00002273 l       .debug_str	00000000 
00002279 l       .debug_str	00000000 
00002285 l       .debug_str	00000000 
00058de6 l       .debug_str	00000000 
0000228d l       .debug_str	00000000 
00002295 l       .debug_str	00000000 
0000229b l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
000022be l       .debug_str	00000000 
000022f1 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
00055f4f l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
0000237f l       .debug_str	00000000 
00002385 l       .debug_str	00000000 
000023ae l       .debug_str	00000000 
0000238b l       .debug_str	00000000 
000023c0 l       .debug_str	00000000 
00002402 l       .debug_str	00000000 
00055e38 l       .debug_str	00000000 
0000244c l       .debug_str	00000000 
00002452 l       .debug_str	00000000 
00002458 l       .debug_str	00000000 
00002481 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002493 l       .debug_str	00000000 
000024d5 l       .debug_str	00000000 
000552fc l       .debug_str	00000000 
0000251f l       .debug_str	00000000 
00002525 l       .debug_str	00000000 
0000252b l       .debug_str	00000000 
00002531 l       .debug_str	00000000 
0000255a l       .debug_str	00000000 
00002537 l       .debug_str	00000000 
0000256b l       .debug_str	00000000 
000025ac l       .debug_str	00000000 
000025f5 l       .debug_str	00000000 
000025fa l       .debug_str	00000000 
00056186 l       .debug_str	00000000 
000025ff l       .debug_str	00000000 
00002605 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002634 l       .debug_str	00000000 
00002611 l       .debug_str	00000000 
00002645 l       .debug_str	00000000 
00002686 l       .debug_str	00000000 
000553b4 l       .debug_str	00000000 
000026cf l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
000026d8 l       .debug_str	00000000 
0000270c l       .debug_str	00000000 
0000274d l       .debug_str	00000000 
00002796 l       .debug_str	00000000 
0005635a l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027a4 l       .debug_str	00000000 
000027ab l       .debug_str	00000000 
000027d6 l       .debug_str	00000000 
000027b3 l       .debug_str	00000000 
000027e8 l       .debug_str	00000000 
0000282a l       .debug_str	00000000 
00056022 l       .debug_str	00000000 
00002874 l       .debug_str	00000000 
0000287a l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
00002886 l       .debug_str	00000000 
0000288c l       .debug_str	00000000 
00002894 l       .debug_str	00000000 
000028a2 l       .debug_str	00000000 
000028b1 l       .debug_str	00000000 
000028c2 l       .debug_str	00000000 
000028cd l       .debug_str	00000000 
000028d8 l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028ea l       .debug_str	00000000 
00002930 l       .debug_str	00000000 
0000290d l       .debug_str	00000000 
00002942 l       .debug_str	00000000 
00002984 l       .debug_str	00000000 
000554b7 l       .debug_str	00000000 
000029ce l       .debug_str	00000000 
000029fb l       .debug_str	00000000 
000029d8 l       .debug_str	00000000 
00002a0d l       .debug_str	00000000 
00002a4f l       .debug_str	00000000 
00002a99 l       .debug_str	00000000 
00002a9e l       .debug_str	00000000 
00002acb l       .debug_str	00000000 
00002aa8 l       .debug_str	00000000 
00002add l       .debug_str	00000000 
00002b1f l       .debug_str	00000000 
00002b69 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00002be8 l       .debug_str	00000000 
00002b7d l       .debug_str	00000000 
00002b8d l       .debug_str	00000000 
00002b96 l       .debug_str	00000000 
00002ba1 l       .debug_str	00000000 
00002bb0 l       .debug_str	00000000 
00002bc5 l       .debug_str	00000000 
00002bf6 l       .debug_str	00000000 
00002c93 l       .debug_str	00000000 
00002d38 l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d4c l       .debug_str	00000000 
00002d90 l       .debug_str	00000000 
00002d6d l       .debug_str	00000000 
00002da3 l       .debug_str	00000000 
00002e26 l       .debug_str	00000000 
00002eb1 l       .debug_str	00000000 
00002ecd l       .debug_str	00000000 
00002f19 l       .debug_str	00000000 
00002f6d l       .debug_str	00000000 
00002f8a l       .debug_str	00000000 
00002f9e l       .debug_str	00000000 
00002fea l       .debug_str	00000000 
0000303e l       .debug_str	00000000 
00003054 l       .debug_str	00000000 
00003068 l       .debug_str	00000000 
000030af l       .debug_str	00000000 
000030fe l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003107 l       .debug_str	00000000 
00003138 l       .debug_str	00000000 
0000313e l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314d l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
00003155 l       .debug_str	00000000 
0000315d l       .debug_str	00000000 
0002bb08 l       .debug_str	00000000 
0000316c l       .debug_str	00000000 
00003177 l       .debug_str	00000000 
00003182 l       .debug_str	00000000 
00003193 l       .debug_str	00000000 
00003199 l       .debug_str	00000000 
000031a1 l       .debug_str	00000000 
000031a8 l       .debug_str	00000000 
000031b2 l       .debug_str	00000000 
000031ba l       .debug_str	00000000 
000031c2 l       .debug_str	00000000 
000031e4 l       .debug_str	00000000 
000031ef l       .debug_str	00000000 
000031fb l       .debug_str	00000000 
00003203 l       .debug_str	00000000 
0000320c l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
00003217 l       .debug_str	00000000 
00003222 l       .debug_str	00000000 
0000322d l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
00055428 l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
0000323d l       .debug_str	00000000 
0000324d l       .debug_str	00000000 
0000325c l       .debug_str	00000000 
00003264 l       .debug_str	00000000 
0000326b l       .debug_str	00000000 
00003273 l       .debug_str	00000000 
000032b4 l       .debug_str	00000000 
00003291 l       .debug_str	00000000 
000032c4 l       .debug_str	00000000 
000032d9 l       .debug_str	00000000 
000032e2 l       .debug_str	00000000 
0000333f l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
000033ae l       .debug_str	00000000 
000033be l       .debug_str	00000000 
000033d3 l       .debug_str	00000000 
000033db l       .debug_str	00000000 
0000343f l       .debug_str	00000000 
000034ab l       .debug_str	00000000 
000034b2 l       .debug_str	00000000 
000034ba l       .debug_str	00000000 
000034fb l       .debug_str	00000000 
000034d8 l       .debug_str	00000000 
0000350b l       .debug_str	00000000 
00003520 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
0000354f l       .debug_str	00000000 
00003564 l       .debug_str	00000000 
00052736 l       .debug_str	00000000 
00052825 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
00052530 l       .debug_str	00000000 
0000af1f l       .debug_str	00000000 
0000afd7 l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
0000b03b l       .debug_str	00000000 
0000b071 l       .debug_str	00000000 
0000b08a l       .debug_str	00000000 
0000b0c4 l       .debug_str	00000000 
0000b0e1 l       .debug_str	00000000 
0000b11c l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
0000b139 l       .debug_str	00000000 
0000b143 l       .debug_str	00000000 
0000b169 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z8krxbvbr97ayck
0005725c l       .debug_str	00000000 
0000b29d l       .debug_str	00000000 
0000b2d9 l       .debug_str	00000000 
0000168b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000b253 l       .debug_str	00000000 
0000b294 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
0002284e l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 54b6z89c74d8bdz1
00003155 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052395 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00052a2c l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
00011d31 l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0000b6ea l       .debug_str	00000000 
0000b6f3 l       .debug_str	00000000 
0001fa0c l       .debug_str	00000000 
0000b786 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0000b796 l       .debug_str	00000000 
0000b1d6 l       .debug_str	00000000 
0000b7a1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000a54c l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046608 l       .debug_str	00000000 
000315ad l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f9dc l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
0000b318 l       .debug_str	00000000 
0000b360 l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
000361f7 l       .debug_str	00000000 
0000b37f l       .debug_str	00000000 
0000b3ba l       .debug_str	00000000 
0000b3df l       .debug_str	00000000 
0000b406 l       .debug_str	00000000 
0000b466 l       .debug_str	00000000 
0000b46f l       .debug_str	00000000 
0000b4da l       .debug_str	00000000 
0000b4ea l       .debug_str	00000000 
0000b556 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000527d0 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
00001a42 l       .debug_str	00000000 
00001d90 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003a1e1 l       .debug_str	00000000 
00001a4b l       .debug_str	00000000 
00001a57 l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00001a5f l       .debug_str	00000000 
00001ab9 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b6d l       .debug_str	00000000 
00001bbc l       .debug_str	00000000 
00001bc6 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c48 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c61 l       .debug_str	00000000 
00001c69 l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001d1b l       .debug_str	00000000 
00001d27 l       .debug_str	00000000 
00001d30 l       .debug_str	00000000 
00001d3c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001d61 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d96 l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005709e l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00051ae3 l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
00057ed9 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001daf l       .debug_str	00000000 
00047186 l       .debug_str	00000000 
00001dc6 l       .debug_str	00000000 
00001dce l       .debug_str	00000000 
00001dd7 l       .debug_str	00000000 
000031db l       .debug_str	00000000 
00001de0 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
00057b8c l       .debug_str	00000000 
00001de8 l       .debug_str	00000000 
00001df4 l       .debug_str	00000000 
00001dff l       .debug_str	00000000 
00001e07 l       .debug_str	00000000 
0000b702 l       .debug_str	00000000 
00001e0f l       .debug_str	00000000 
00001f0b l       .debug_str	00000000 
0000200f l       .debug_str	00000000 
0000201d l       .debug_str	00000000 
00002028 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002055 l       .debug_str	00000000 
00002032 l       .debug_str	00000000 
00002060 l       .debug_str	00000000 
000020db l       .debug_str	00000000 
0000215e l       .debug_str	00000000 
0000216c l       .debug_str	00000000 
000021cb l       .debug_str	00000000 
00002232 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
00002258 l       .debug_str	00000000 
000563c2 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00002267 l       .debug_str	00000000 
000252bf l       .debug_str	00000000 
0000226d l       .debug_str	00000000 
00002273 l       .debug_str	00000000 
00002279 l       .debug_str	00000000 
00002285 l       .debug_str	00000000 
00058de6 l       .debug_str	00000000 
0000228d l       .debug_str	00000000 
00002295 l       .debug_str	00000000 
0000229b l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
000022be l       .debug_str	00000000 
000022f1 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
00055f4f l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
0000237f l       .debug_str	00000000 
00002385 l       .debug_str	00000000 
000023ae l       .debug_str	00000000 
0000238b l       .debug_str	00000000 
000023c0 l       .debug_str	00000000 
00002402 l       .debug_str	00000000 
00055e38 l       .debug_str	00000000 
0000244c l       .debug_str	00000000 
00002452 l       .debug_str	00000000 
00002458 l       .debug_str	00000000 
00002481 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002493 l       .debug_str	00000000 
000024d5 l       .debug_str	00000000 
000552fc l       .debug_str	00000000 
0000251f l       .debug_str	00000000 
00002525 l       .debug_str	00000000 
0000252b l       .debug_str	00000000 
00002531 l       .debug_str	00000000 
0000255a l       .debug_str	00000000 
00002537 l       .debug_str	00000000 
0000256b l       .debug_str	00000000 
000025ac l       .debug_str	00000000 
000025f5 l       .debug_str	00000000 
000025fa l       .debug_str	00000000 
00056186 l       .debug_str	00000000 
000025ff l       .debug_str	00000000 
00002605 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002634 l       .debug_str	00000000 
00002611 l       .debug_str	00000000 
00002645 l       .debug_str	00000000 
00002686 l       .debug_str	00000000 
000553b4 l       .debug_str	00000000 
000026cf l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
000026d8 l       .debug_str	00000000 
0000270c l       .debug_str	00000000 
0000274d l       .debug_str	00000000 
00002796 l       .debug_str	00000000 
0005635a l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027a4 l       .debug_str	00000000 
000027ab l       .debug_str	00000000 
000027d6 l       .debug_str	00000000 
000027b3 l       .debug_str	00000000 
000027e8 l       .debug_str	00000000 
0000282a l       .debug_str	00000000 
00056022 l       .debug_str	00000000 
00002874 l       .debug_str	00000000 
0000287a l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
00002886 l       .debug_str	00000000 
0000288c l       .debug_str	00000000 
00002894 l       .debug_str	00000000 
000028a2 l       .debug_str	00000000 
000028b1 l       .debug_str	00000000 
000028c2 l       .debug_str	00000000 
000028cd l       .debug_str	00000000 
000028d8 l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028ea l       .debug_str	00000000 
00002930 l       .debug_str	00000000 
0000290d l       .debug_str	00000000 
00002942 l       .debug_str	00000000 
00002984 l       .debug_str	00000000 
000554b7 l       .debug_str	00000000 
000029ce l       .debug_str	00000000 
000029fb l       .debug_str	00000000 
000029d8 l       .debug_str	00000000 
00002a0d l       .debug_str	00000000 
00002a4f l       .debug_str	00000000 
00002a99 l       .debug_str	00000000 
00002a9e l       .debug_str	00000000 
00002acb l       .debug_str	00000000 
00002aa8 l       .debug_str	00000000 
00002add l       .debug_str	00000000 
00002b1f l       .debug_str	00000000 
00002b69 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00002be8 l       .debug_str	00000000 
00002b7d l       .debug_str	00000000 
00002b8d l       .debug_str	00000000 
00002b96 l       .debug_str	00000000 
00002ba1 l       .debug_str	00000000 
00002bb0 l       .debug_str	00000000 
00002bc5 l       .debug_str	00000000 
00002bf6 l       .debug_str	00000000 
00002c93 l       .debug_str	00000000 
00002d38 l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d4c l       .debug_str	00000000 
00002d90 l       .debug_str	00000000 
00002d6d l       .debug_str	00000000 
00002da3 l       .debug_str	00000000 
00002e26 l       .debug_str	00000000 
00002eb1 l       .debug_str	00000000 
00002ecd l       .debug_str	00000000 
00002f19 l       .debug_str	00000000 
00002f6d l       .debug_str	00000000 
00002f8a l       .debug_str	00000000 
00002f9e l       .debug_str	00000000 
00002fea l       .debug_str	00000000 
0000303e l       .debug_str	00000000 
00003054 l       .debug_str	00000000 
00003068 l       .debug_str	00000000 
000030af l       .debug_str	00000000 
000030fe l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003107 l       .debug_str	00000000 
00003138 l       .debug_str	00000000 
0000313e l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314d l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
0000315d l       .debug_str	00000000 
0002bb08 l       .debug_str	00000000 
0000316c l       .debug_str	00000000 
00003df8 l       .debug_str	00000000 
00003177 l       .debug_str	00000000 
00003182 l       .debug_str	00000000 
00003193 l       .debug_str	00000000 
00003199 l       .debug_str	00000000 
000031a1 l       .debug_str	00000000 
000031a8 l       .debug_str	00000000 
000031b2 l       .debug_str	00000000 
000031ba l       .debug_str	00000000 
000031c2 l       .debug_str	00000000 
000031e4 l       .debug_str	00000000 
000031ef l       .debug_str	00000000 
000031fb l       .debug_str	00000000 
00003203 l       .debug_str	00000000 
0000320c l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
00003217 l       .debug_str	00000000 
00003222 l       .debug_str	00000000 
0000322d l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
00055428 l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
0000323d l       .debug_str	00000000 
0000324d l       .debug_str	00000000 
0000325c l       .debug_str	00000000 
00003264 l       .debug_str	00000000 
0000326b l       .debug_str	00000000 
00003273 l       .debug_str	00000000 
000032b4 l       .debug_str	00000000 
00003291 l       .debug_str	00000000 
000032c4 l       .debug_str	00000000 
000032d9 l       .debug_str	00000000 
000032e2 l       .debug_str	00000000 
0000333f l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
000033ae l       .debug_str	00000000 
000033be l       .debug_str	00000000 
000033d3 l       .debug_str	00000000 
000033db l       .debug_str	00000000 
0000343f l       .debug_str	00000000 
000034ab l       .debug_str	00000000 
000034b2 l       .debug_str	00000000 
000034ba l       .debug_str	00000000 
000034fb l       .debug_str	00000000 
000034d8 l       .debug_str	00000000 
0000350b l       .debug_str	00000000 
00003520 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
0000354f l       .debug_str	00000000 
00003564 l       .debug_str	00000000 
0000b1d7 l       .debug_str	00000000 
0000b569 l       .debug_str	00000000 
0000b5cc l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
0000b64c l       .debug_str	00000000 
0000b6af l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000017fa l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 57lqf44sdwu8qayr
00000c71 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fb59 l       .debug_str	00000000 
0000ba46 l       .debug_str	00000000 
0000ba77 l       .debug_str	00000000 
0000bd0a l       .debug_str	00000000 
0000ba91 l       .debug_str	00000000 
0000bac2 l       .debug_str	00000000 
0000bb40 l       .debug_str	00000000 
0000baf2 l       .debug_str	00000000 
0000bb23 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0000a54c l       .debug_str	00000000 
0000bb33 l       .debug_str	00000000 
0000bb39 l       .debug_str	00000000 
0000bb3f l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0000bb45 l       .debug_str	00000000 
0000bb97 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
0000bbea l       .debug_str	00000000 
0000bc53 l       .debug_str	00000000 
0001fb4d l       .debug_str	00000000 
0000bca6 l       .debug_str	00000000 
0000bd09 l       .debug_str	00000000 
0000bd35 l       .debug_str	00000000 
0000bdae l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046608 l       .debug_str	00000000 
000315ad l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00057ac2 l       .debug_str	00000000 
00001521 l       .debug_str	00000000 
00000e2c l       .debug_str	00000000 
0000b7ab l       .debug_str	00000000 
0000bd2b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058de6 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f9dc l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052395 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
0000b7ba l       .debug_str	00000000 
0000b802 l       .debug_str	00000000 
0000b80b l       .debug_str	00000000 
0000b853 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000b85b l       .debug_str	00000000 
0000b466 l       .debug_str	00000000 
0000b8a3 l       .debug_str	00000000 
0000b8eb l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0000b8f4 l       .debug_str	00000000 
0000b93c l       .debug_str	00000000 
0000b945 l       .debug_str	00000000 
0000b976 l       .debug_str	00000000 
00019262 l       .debug_str	00000000 
0000b97f l       .debug_str	00000000 
0000b9b0 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
000017fa l       .debug_str	00000000 
0000b9ba l       .debug_str	00000000 
0000b9eb l       .debug_str	00000000 
00019276 l       .debug_str	00000000 
0000ba0b l       .debug_str	00000000 
0000ba3c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000310c3 l       .debug_str	00000000 
000547ac l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005241e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dmg7ylzo67ab86f
0000bf55 l       .debug_str	00000000 
0000be52 l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
0000beab l       .debug_str	00000000 
0000beb7 l       .debug_str	00000000 
0000befe l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
0001f9dc l       .debug_str	00000000 
0000bf0a l       .debug_str	00000000 
0000bf65 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005479a l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
000565b0 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000be01 l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fb77 l       .debug_str	00000000 
00009440 l     F .text	00000044 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E
00000000 l    df *ABS*	00000000 2zydbnxo7qpu1b5q
0000c225 l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00019326 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025ae6 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
0002c668 l       .debug_str	00000000 
000276e1 l       .debug_str	00000000 
0000c27e l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c284 l       .debug_str	00000000 
0001940a l       .debug_str	00000000 
0000c28e l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
00019445 l       .debug_str	00000000 
0000c2ce l       .debug_str	00000000 
0000c33d l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0001926c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
00016a83 l       .debug_str	00000000 
0000bfc3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000527d0 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000bfd4 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000bfde l       .debug_str	00000000 
0000bfe9 l       .debug_str	00000000 
0000bff3 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00023093 l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
0000c042 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
000551bd l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
00023079 l       .debug_str	00000000 
0000c05d l       .debug_str	00000000 
000525f0 l       .debug_str	00000000 
000230bc l       .debug_str	00000000 
00058098 l       .debug_str	00000000 
0000c061 l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
0000c065 l       .debug_str	00000000 
00001820 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
000574d4 l       .debug_str	00000000 
0000c06e l       .debug_str	00000000 
00056b2c l       .debug_str	00000000 
0000e73f l       .debug_str	00000000 
0000c071 l       .debug_str	00000000 
0000c0b1 l       .debug_str	00000000 
0000c0c0 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
0000c108 l       .debug_str	00000000 
0000c14f l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000361f7 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
0000c15d l       .debug_str	00000000 
0000c1a1 l       .debug_str	00000000 
0000c1ac l       .debug_str	00000000 
0000c1b5 l       .debug_str	00000000 
0000c1bd l       .debug_str	00000000 
000543d5 l       .debug_str	00000000 
0000e7ad l       .debug_str	00000000 
00052a2c l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000c1c6 l       .debug_str	00000000 
0000c1cc l       .debug_str	00000000 
0000c1d5 l       .debug_str	00000000 
0000c1e2 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0003b764 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c1e5 l       .debug_str	00000000 
0000c1fc l       .debug_str	00000000 
0005725c l       .debug_str	00000000 
00052736 l       .debug_str	00000000 
00010a38 l       .debug_str	00000000 
0000c212 l       .debug_str	00000000 
0000c218 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000c21f l       .debug_str	00000000 
000169ab l       .debug_str	00000000 
0000e885 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000192db l       .debug_str	00000000 
00057955 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
200000e8 l     O .data	00000008 _ZN22piet_embedded_graphics7display12SPI_SETTINGS17h78a64d1040fbeee1E
20000160 l     O .bss	00000004 _ZN22piet_embedded_graphics7display14BACKLIGHT_HIGH17hd6bdc29c96588211E
00000000 l    df *ABS*	00000000 3eyht9wxrw4fbo0o
0000e3ad l       .debug_str	00000000 
0000e311 l       .debug_str	00000000 
0000e357 l       .debug_str	00000000 
0000e3f6 l       .debug_str	00000000 
0000e43c l       .debug_str	00000000 
0000e7ad l       .debug_str	00000000 
000110ed l       .debug_str	00000000 
0000e476 l       .debug_str	00000000 
0000e4bd l       .debug_str	00000000 
0000e50b l       .debug_str	00000000 
0000e557 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000c21f l       .debug_str	00000000 
0000c225 l       .debug_str	00000000 
000169ab l       .debug_str	00000000 
0000e885 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
000192db l       .debug_str	00000000 
00057955 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00019326 l       .debug_str	00000000 
00025ae6 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
000276e1 l       .debug_str	00000000 
0000c27e l       .debug_str	00000000 
0000c284 l       .debug_str	00000000 
0001940a l       .debug_str	00000000 
0000c28e l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
00019445 l       .debug_str	00000000 
0000c2ce l       .debug_str	00000000 
0000e597 l       .debug_str	00000000 
0000e643 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e715 l       .debug_str	00000000 
0000e72e l       .debug_str	00000000 
00052a2c l       .debug_str	00000000 
0001fa95 l       .debug_str	00000000 
00011e3b l       .debug_str	00000000 
0001d584 l       .debug_str	00000000 
0000e77e l       .debug_str	00000000 
0003891e l       .debug_str	00000000 
0001a4f5 l       .debug_str	00000000 
000354ce l       .debug_str	00000000 
0000e781 l       .debug_str	00000000 
0002284e l       .debug_str	00000000 
00016f75 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00012cd8 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
000107c4 l       .debug_str	00000000 
00058dd7 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
00022b95 l       .debug_str	00000000 
0000e788 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00025b2b l       .debug_str	00000000 
0000e78f l       .debug_str	00000000 
000551be l       .debug_str	00000000 
0000c05e l       .debug_str	00000000 
00016a83 l       .debug_str	00000000 
000543d5 l       .debug_str	00000000 
0000e79b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000e7b3 l       .debug_str	00000000 
0000e7bf l       .debug_str	00000000 
0000e7cb l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000e7d8 l       .debug_str	00000000 
00059344 l       .debug_str	00000000 
0000e7e5 l       .debug_str	00000000 
0000e85c l       .debug_str	00000000 
0000e865 l       .debug_str	00000000 
0000e873 l       .debug_str	00000000 
0001938c l       .debug_str	00000000 
0000e88b l       .debug_str	00000000 
0000e8c0 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c344 l       .debug_str	00000000 
0000c34d l       .debug_str	00000000 
0000c357 l       .debug_str	00000000 
0000c367 l       .debug_str	00000000 
0000e722 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
0000c384 l       .debug_str	00000000 
0000c388 l       .debug_str	00000000 
0000c390 l       .debug_str	00000000 
0000c396 l       .debug_str	00000000 
0000c39c l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a9 l       .debug_str	00000000 
0000c3af l       .debug_str	00000000 
0000c3b5 l       .debug_str	00000000 
0000c3bc l       .debug_str	00000000 
0000c3c2 l       .debug_str	00000000 
0000c3ca l       .debug_str	00000000 
0000c3d1 l       .debug_str	00000000 
0000c3d7 l       .debug_str	00000000 
0000c3dd l       .debug_str	00000000 
0000c3e3 l       .debug_str	00000000 
0000c3e9 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c3f6 l       .debug_str	00000000 
0000c3fd l       .debug_str	00000000 
0000c405 l       .debug_str	00000000 
0000c40d l       .debug_str	00000000 
0000c415 l       .debug_str	00000000 
0000c41c l       .debug_str	00000000 
0000c424 l       .debug_str	00000000 
0000c42b l       .debug_str	00000000 
0000c432 l       .debug_str	00000000 
0000c439 l       .debug_str	00000000 
0000c440 l       .debug_str	00000000 
0000c447 l       .debug_str	00000000 
0000c44e l       .debug_str	00000000 
0000c454 l       .debug_str	00000000 
0000c45a l       .debug_str	00000000 
0000c460 l       .debug_str	00000000 
0000c466 l       .debug_str	00000000 
0000c46d l       .debug_str	00000000 
0000c475 l       .debug_str	00000000 
0000e94e l       .debug_str	00000000 
0000c47d l       .debug_str	00000000 
00056a31 l       .debug_str	00000000 
0000c488 l       .debug_str	00000000 
000551bd l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
00023079 l       .debug_str	00000000 
0000c05d l       .debug_str	00000000 
000525f0 l       .debug_str	00000000 
000230bc l       .debug_str	00000000 
00058098 l       .debug_str	00000000 
0000c061 l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
0000c065 l       .debug_str	00000000 
00001820 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
000574d4 l       .debug_str	00000000 
0000c06e l       .debug_str	00000000 
00056b2c l       .debug_str	00000000 
0000e73f l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000c494 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0000c4a4 l       .debug_str	00000000 
0000c4e0 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea13 l       .debug_str	00000000 
0000c4ff l       .debug_str	00000000 
0000c54d l       .debug_str	00000000 
0000c58e l       .debug_str	00000000 
0000c5fa l       .debug_str	00000000 
0000c63c l       .debug_str	00000000 
0000c6a8 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00057d24 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
00053e42 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c714 l       .debug_str	00000000 
0000c731 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c777 l       .debug_str	00000000 
0000c788 l       .debug_str	00000000 
0000c7f8 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c955 l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0002d51c l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
00052825 l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0000d4f0 l       .debug_str	00000000 
0000d603 l       .debug_str	00000000 
0000d723 l       .debug_str	00000000 
0000d83a l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000dac9 l       .debug_str	00000000 
0005725c l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00052736 l       .debug_str	00000000 
0000dc1e l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00010422 l       .debug_str	00000000 
0002c668 l       .debug_str	00000000 
0000dd6b l       .debug_str	00000000 
0000ddb9 l       .debug_str	00000000 
0000df39 l       .debug_str	00000000 
0000df87 l       .debug_str	00000000 
0000dfc8 l       .debug_str	00000000 
0000e016 l       .debug_str	00000000 
0000e057 l       .debug_str	00000000 
0000e0a7 l       .debug_str	00000000 
0000e229 l       .debug_str	00000000 
0000e27a l       .debug_str	00000000 
0000e2be l       .debug_str	00000000 
0001c030 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3sr9zgbizuzi7j5h
0000c488 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea13 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e934 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c384 l       .debug_str	00000000 
0000c388 l       .debug_str	00000000 
0000c390 l       .debug_str	00000000 
0000c396 l       .debug_str	00000000 
0000c39c l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a9 l       .debug_str	00000000 
0000c3af l       .debug_str	00000000 
0000c3b5 l       .debug_str	00000000 
0000c3bc l       .debug_str	00000000 
0000c3c2 l       .debug_str	00000000 
0000c3ca l       .debug_str	00000000 
0000c3d1 l       .debug_str	00000000 
0000c3d7 l       .debug_str	00000000 
0000c3dd l       .debug_str	00000000 
0000c3e3 l       .debug_str	00000000 
0000c3e9 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c3f6 l       .debug_str	00000000 
0000c3fd l       .debug_str	00000000 
0000c405 l       .debug_str	00000000 
0000c40d l       .debug_str	00000000 
0000c415 l       .debug_str	00000000 
0000c41c l       .debug_str	00000000 
0000c424 l       .debug_str	00000000 
0000c42b l       .debug_str	00000000 
0000c432 l       .debug_str	00000000 
0000c439 l       .debug_str	00000000 
0000c440 l       .debug_str	00000000 
0000c447 l       .debug_str	00000000 
0000c44e l       .debug_str	00000000 
0000c454 l       .debug_str	00000000 
0000c45a l       .debug_str	00000000 
0000c460 l       .debug_str	00000000 
0000c466 l       .debug_str	00000000 
0000c46d l       .debug_str	00000000 
0000c475 l       .debug_str	00000000 
0000e94e l       .debug_str	00000000 
0000c47d l       .debug_str	00000000 
00056a31 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0000e8cc l       .debug_str	00000000 
0000e908 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 44cnu8660c26myi6
0000e9a9 l       .debug_str	00000000 
0000e99e l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
0000e9e7 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
000565b0 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000e95a l       .debug_str	00000000 
0000a434 l     F .text	0000001e _ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E
00000000 l    df *ABS*	00000000 469um0xjm96v8cgk
0000f578 l       .debug_str	00000000 
0000ff39 l       .debug_str	00000000 
0001008c l       .debug_str	00000000 
000100bc l       .debug_str	00000000 
0000c1cc l       .debug_str	00000000 
0000c1d5 l       .debug_str	00000000 
0000c1e2 l       .debug_str	00000000 
0003b764 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c1e5 l       .debug_str	00000000 
0000c1fc l       .debug_str	00000000 
00010a38 l       .debug_str	00000000 
00010a1b l       .debug_str	00000000 
000101e3 l       .debug_str	00000000 
00010213 l       .debug_str	00000000 
00010abf l       .debug_str	00000000 
00010a61 l       .debug_str	00000000 
00010255 l       .debug_str	00000000 
00010285 l       .debug_str	00000000 
000102d4 l       .debug_str	00000000 
00010304 l       .debug_str	00000000 
00010316 l       .debug_str	00000000 
00010346 l       .debug_str	00000000 
0001037f l       .debug_str	00000000 
00010388 l       .debug_str	00000000 
000103b5 l       .debug_str	00000000 
000103f8 l       .debug_str	00000000 
0001040e l       .debug_str	00000000 
00010552 l       .debug_str	00000000 
000105ee l       .debug_str	00000000 
000106b8 l       .debug_str	00000000 
000106d1 l       .debug_str	00000000 
000107b0 l       .debug_str	00000000 
000108f9 l       .debug_str	00000000 
00010a16 l       .debug_str	00000000 
00010a4e l       .debug_str	00000000 
00010a93 l       .debug_str	00000000 
00010a9b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0000e9ed l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea13 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
0000e9f4 l       .debug_str	00000000 
0000e9f9 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0000ea1e l       .debug_str	00000000 
0000ea25 l       .debug_str	00000000 
0000ea2a l       .debug_str	00000000 
0000ea65 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
0000ea9c l       .debug_str	00000000 
0000eacc l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
0000eadf l       .debug_str	00000000 
0000eae5 l       .debug_str	00000000 
0000eaec l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000e781 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00057d24 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
00053e42 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c714 l       .debug_str	00000000 
0000c731 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c777 l       .debug_str	00000000 
0000c788 l       .debug_str	00000000 
0000c7f8 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c955 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0002d51c l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
00052825 l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0000eaf4 l       .debug_str	00000000 
0000ec06 l       .debug_str	00000000 
0000ed35 l       .debug_str	00000000 
0005725c l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00052736 l       .debug_str	00000000 
0000ee63 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0001090d l       .debug_str	00000000 
000103ac l       .debug_str	00000000 
0000ef89 l       .debug_str	00000000 
0000efb9 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000103c8 l       .debug_str	00000000 
0000eff0 l       .debug_str	00000000 
0000f020 l       .debug_str	00000000 
00046608 l       .debug_str	00000000 
000163b7 l       .debug_str	00000000 
0000f06d l       .debug_str	00000000 
0000f09d l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
0000d4f0 l       .debug_str	00000000 
0000d603 l       .debug_str	00000000 
0000d723 l       .debug_str	00000000 
0000d83a l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000dac9 l       .debug_str	00000000 
0000dc1e l       .debug_str	00000000 
00010422 l       .debug_str	00000000 
0000f0bd l       .debug_str	00000000 
0000f0ed l       .debug_str	00000000 
0000e8c5 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000f23b l       .debug_str	00000000 
0000f246 l       .debug_str	00000000 
0000f250 l       .debug_str	00000000 
0000e885 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
000192db l       .debug_str	00000000 
0000f259 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00019326 l       .debug_str	00000000 
00025ae6 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
0002c668 l       .debug_str	00000000 
000276e1 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
00027675 l       .debug_str	00000000 
0000f266 l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
00010576 l       .debug_str	00000000 
0000f272 l       .debug_str	00000000 
0000f2a2 l       .debug_str	00000000 
0000f348 l       .debug_str	00000000 
0000f34d l       .debug_str	00000000 
0000f353 l       .debug_str	00000000 
0000f35c l       .debug_str	00000000 
00054e36 l       .debug_str	00000000 
00010612 l       .debug_str	00000000 
0000f366 l       .debug_str	00000000 
0000f396 l       .debug_str	00000000 
0000f46a l       .debug_str	00000000 
00056674 l       .debug_str	00000000 
000252c4 l       .debug_str	00000000 
000106cb l       .debug_str	00000000 
0000f470 l       .debug_str	00000000 
0000f4a0 l       .debug_str	00000000 
0000f4c3 l       .debug_str	00000000 
0000f4f0 l       .debug_str	00000000 
0000f511 l       .debug_str	00000000 
0000f618 l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
0000f6f2 l       .debug_str	00000000 
0000f769 l       .debug_str	00000000 
0000f7ed l       .debug_str	00000000 
0000f868 l       .debug_str	00000000 
0000f906 l       .debug_str	00000000 
0000f9b1 l       .debug_str	00000000 
0000fa53 l       .debug_str	00000000 
0000fb27 l       .debug_str	00000000 
0000fc18 l       .debug_str	00000000 
0000fd08 l       .debug_str	00000000 
000106e5 l       .debug_str	00000000 
0000fdf0 l       .debug_str	00000000 
0000fe20 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
000107c4 l       .debug_str	00000000 
0000ff09 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 49htiubyezwzqodr
00052395 l       .debug_str	00000000 
00010aca l       .debug_str	00000000 
00010afb l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0001926c l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00010b04 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046608 l       .debug_str	00000000 
000315ad l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058de6 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f9dc l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1vm1jsf9206jqt1a
000139f7 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010c68 l       .debug_str	00000000 
00010c74 l       .debug_str	00000000 
00010d35 l       .debug_str	00000000 
00025acb l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e934 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010b56 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c384 l       .debug_str	00000000 
0000c388 l       .debug_str	00000000 
0000c390 l       .debug_str	00000000 
0000c396 l       .debug_str	00000000 
0000c39c l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a9 l       .debug_str	00000000 
0000c3af l       .debug_str	00000000 
0000c3b5 l       .debug_str	00000000 
0000c3bc l       .debug_str	00000000 
0000c3c2 l       .debug_str	00000000 
0000c3ca l       .debug_str	00000000 
0000c3d1 l       .debug_str	00000000 
0000c3d7 l       .debug_str	00000000 
0000c3dd l       .debug_str	00000000 
0000c3e3 l       .debug_str	00000000 
0000c3e9 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c3f6 l       .debug_str	00000000 
0000c3fd l       .debug_str	00000000 
0000c405 l       .debug_str	00000000 
0000c40d l       .debug_str	00000000 
0000c415 l       .debug_str	00000000 
0000c41c l       .debug_str	00000000 
0000c424 l       .debug_str	00000000 
0000c42b l       .debug_str	00000000 
0000c432 l       .debug_str	00000000 
0000c439 l       .debug_str	00000000 
0000c440 l       .debug_str	00000000 
0000c447 l       .debug_str	00000000 
0000c44e l       .debug_str	00000000 
0000c454 l       .debug_str	00000000 
0000c45a l       .debug_str	00000000 
0000c460 l       .debug_str	00000000 
0000c466 l       .debug_str	00000000 
0000c46d l       .debug_str	00000000 
0000c475 l       .debug_str	00000000 
0000e94e l       .debug_str	00000000 
00010b7a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00010ba0 l       .debug_str	00000000 
00010c61 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3on1efjgx1q5grpf
00025acb l       .debug_str	00000000 
00010d35 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e715 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010b56 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c344 l       .debug_str	00000000 
0000c34d l       .debug_str	00000000 
0000c357 l       .debug_str	00000000 
0000c367 l       .debug_str	00000000 
0000e722 l       .debug_str	00000000 
00010d3c l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00010d62 l       .debug_str	00000000 
00010c61 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010c68 l       .debug_str	00000000 
00010e09 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dxw5xp80tje79rx
000012f5 l       .debug_str	00000000 
00010f00 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010b56 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010c68 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
00010b7a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00010d35 l       .debug_str	00000000 
00011e3b l       .debug_str	00000000 
0005731f l       .debug_str	00000000 
00010eb0 l       .debug_str	00000000 
00010ee9 l       .debug_str	00000000 
00025acb l       .debug_str	00000000 
00010d3c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 t2y6wwi1wx5h1fq
0000237d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010b56 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
00010b7a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
00010d35 l       .debug_str	00000000 
00010f39 l       .debug_str	00000000 
00011018 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00011e3b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1ai0eloc31rxz52x
00011099 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00011024 l       .debug_str	00000000 
0002b896 l       .debug_str	00000000 
0000e9f4 l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00011087 l       .debug_str	00000000 
0001107b l       .debug_str	00000000 
0001fa0c l       .debug_str	00000000 
0001108e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1v17h907p30pylh6
00000d77 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f9dc l       .debug_str	00000000 
00052395 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fb59 l       .debug_str	00000000 
0001fb4d l       .debug_str	00000000 
00057bfa l       .debug_str	00000000 
000550b5 l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005709e l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00051ae3 l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
00057ed9 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
00056205 l       .debug_str	00000000 
00012cd8 l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
00054bd9 l       .debug_str	00000000 
00058ecc l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
000168b4 l       .debug_str	00000000 
00058dd7 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00053e42 l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
00011464 l       .debug_str	00000000 
0001146c l       .debug_str	00000000 
00011473 l       .debug_str	00000000 
00011479 l       .debug_str	00000000 
00011480 l       .debug_str	00000000 
00054bef l       .debug_str	00000000 
00011486 l       .debug_str	00000000 
00011495 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
000114a3 l       .debug_str	00000000 
000114a8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00054902 l       .debug_str	00000000 
000112e4 l       .debug_str	00000000 
000110a4 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
000525f0 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
000230bc l       .debug_str	00000000 
000110b0 l       .debug_str	00000000 
000110e7 l       .debug_str	00000000 
0000e7ad l       .debug_str	00000000 
000110f3 l       .debug_str	00000000 
0001112a l       .debug_str	00000000 
00011135 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0001113d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00011144 l       .debug_str	00000000 
0001114b l       .debug_str	00000000 
00057f77 l       .debug_str	00000000 
00011154 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000527b3 l       .debug_str	00000000 
0001115e l       .debug_str	00000000 
00011455 l       .debug_str	00000000 
00011168 l       .debug_str	00000000 
0001a6ce l       .debug_str	00000000 
0001119e l       .debug_str	00000000 
000111cc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003a1e1 l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
00055428 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
000111d8 l       .debug_str	00000000 
0001120f l       .debug_str	00000000 
000527d0 l       .debug_str	00000000 
00057aab l       .debug_str	00000000 
0005725c l       .debug_str	00000000 
00057d24 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00011218 l       .debug_str	00000000 
0001122c l       .debug_str	00000000 
0001125f l       .debug_str	00000000 
0001126a l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00046608 l       .debug_str	00000000 
000315ad l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000112a0 l       .debug_str	00000000 
000112de l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
000361f7 l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
000112f1 l       .debug_str	00000000 
00011334 l       .debug_str	00000000 
0001134c l       .debug_str	00000000 
0001138c l       .debug_str	00000000 
000113a1 l       .debug_str	00000000 
000113db l       .debug_str	00000000 
000113ea l       .debug_str	00000000 
00011429 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
00052a2c l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00019262 l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000310c3 l       .debug_str	00000000 
000547ac l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058de6 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005241e l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
20000214 l     O .bss	00000001 _ZN3app12touch_sensor10I2C_BUFFER17h8c3d62e53c42ce39E
20000168 l     O .bss	00000052 _ZN3app12touch_sensor10TOUCH_DATA17h1dd6b74134f2575dE
20000168 l     O .bss	00000000 _ZN3app12touch_sensor11TOUCH_DELAY17h6bb1c96a489889baE
200001fc l     O .bss	00000010 _ZN3app12touch_sensor11TOUCH_EVENT17hb169e5084280c5b1E
20000164 l     O .bss	00000004 _ZN3app12touch_sensor11TOUCH_RESET17h950734ac5f86de57E
0000aeac l     F .text	00000752 _ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E
0000b5fe l     F .text	0000019a _ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E
0000ad72 l     F .text	0000013a _ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E
0000ad26 l     F .text	0000004c _ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE
200001ba l     O .bss	0000003f _ZN3app12touch_sensor3BUF17h9edf4dcfe692b5b1E
2000020c l     O .bss	00000008 _ZN3app12touch_sensor8I2C_DATA17hb66b2debc1d16188E
0001c250 l     O .text	00000021 str.0
0001c290 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 25jm3tkgfnhczjfh
00011b0c l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
000115fc l       .debug_str	00000000 
00011627 l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
000361f7 l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
00011630 l       .debug_str	00000000 
00022b3b l       .debug_str	00000000 
0001165c l       .debug_str	00000000 
000374e7 l       .debug_str	00000000 
0001168b l       .debug_str	00000000 
000524af l       .debug_str	00000000 
000116e5 l       .debug_str	00000000 
000354cd l       .debug_str	00000000 
0001173e l       .debug_str	00000000 
0001179c l       .debug_str	00000000 
000117a5 l       .debug_str	00000000 
00011803 l       .debug_str	00000000 
0001180c l       .debug_str	00000000 
0001186f l       .debug_str	00000000 
0001187c l       .debug_str	00000000 
000118db l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000118e5 l       .debug_str	00000000 
000118f4 l       .debug_str	00000000 
0001194f l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00011955 l       .debug_str	00000000 
000119af l       .debug_str	00000000 
000119b4 l       .debug_str	00000000 
00053772 l       .debug_str	00000000 
00011a0f l       .debug_str	00000000 
00011a40 l       .debug_str	00000000 
00011a4e l       .debug_str	00000000 
00011a7e l       .debug_str	00000000 
00011a8b l       .debug_str	00000000 
00011ac0 l       .debug_str	00000000 
00011afd l       .debug_str	00000000 
00011b08 l       .debug_str	00000000 
00011b10 l       .debug_str	00000000 
00011b21 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
00011b94 l       .debug_str	00000000 
00011ba0 l       .debug_str	00000000 
00011bd1 l       .debug_str	00000000 
00011bdf l       .debug_str	00000000 
00011c0f l       .debug_str	00000000 
00011c1c l       .debug_str	00000000 
00011c4c l       .debug_str	00000000 
00011c59 l       .debug_str	00000000 
00011cb5 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000f23b l       .debug_str	00000000 
0000f246 l       .debug_str	00000000 
0000f250 l       .debug_str	00000000 
0000e885 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
000192db l       .debug_str	00000000 
0000f259 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00019326 l       .debug_str	00000000 
00025ae6 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
0002c668 l       .debug_str	00000000 
000276e1 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0002760a l       .debug_str	00000000 
00052a2c l       .debug_str	00000000 
00057bf9 l       .debug_str	00000000 
00011cc0 l       .debug_str	00000000 
00011cc9 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00011cd2 l       .debug_str	00000000 
000132cc l       .debug_str	00000000 
00011cd5 l       .debug_str	00000000 
00044859 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0005326b l       .debug_str	00000000 
00057b84 l       .debug_str	00000000 
00025acb l       .debug_str	00000000 
00011cd8 l       .debug_str	00000000 
000527d0 l       .debug_str	00000000 
00012c9d l       .debug_str	00000000 
00053c51 l       .debug_str	00000000 
00011ce0 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00011cec l       .debug_str	00000000 
000354cc l       .debug_str	00000000 
0001108c l       .debug_str	00000000 
0003e407 l       .debug_str	00000000 
00053ac9 l       .debug_str	00000000 
0001157c l       .debug_str	00000000 
00011587 l       .debug_str	00000000 
00011594 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00011d06 l       .debug_str	00000000 
00011a85 l       .debug_str	00000000 
00011d0d l       .debug_str	00000000 
000125e2 l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
00011d28 l       .debug_str	00000000 
0000237c l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058de6 l       .debug_str	00000000 
0001f9dc l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052395 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
00011d2d l       .debug_str	00000000 
00011d38 l       .debug_str	00000000 
00011099 l       .debug_str	00000000 
00011d44 l       .debug_str	00000000 
00011d4f l       .debug_str	00000000 
00011d5a l       .debug_str	00000000 
00011d65 l       .debug_str	00000000 
00011d70 l       .debug_str	00000000 
00011d7b l       .debug_str	00000000 
00011d86 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00054902 l       .debug_str	00000000 
00011ccc l       .debug_str	00000000 
000114ac l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003a1e1 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005709e l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00051ae3 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
00057ed9 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000114b7 l       .debug_str	00000000 
000114e5 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000114f6 l       .debug_str	00000000 
0001152a l       .debug_str	00000000 
00011538 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046608 l       .debug_str	00000000 
000315ad l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00011569 l       .debug_str	00000000 
00011575 l       .debug_str	00000000 
00011580 l       .debug_str	00000000 
0001158d l       .debug_str	00000000 
0001159b l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
000115aa l       .debug_str	00000000 
00011cfd l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
000115bc l       .debug_str	00000000 
000115c5 l       .debug_str	00000000 
000115ce l       .debug_str	00000000 
000115d9 l       .debug_str	00000000 
000115e5 l       .debug_str	00000000 
000115ef l       .debug_str	00000000 
000125f3 l       .debug_str	00000000 
20000218 l     O .bss	00000050 _ZN3app5chip810CHIP8_TASK17hdc3e015a60662be5E
0000c224 l     F .text	000000a8 _ZN3app5chip812render_block17hf14dcded684223a2E
0000ca48 l     F .text	00000088 _ZN3app5chip812update_color17h6dfdd6e6a860804cE
0000c302 l     F .text	00000364 _ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE
0000c2cc l     F .text	00000036 _ZN3app5chip813PixelIterator3new17h822e2c1da3bbcd7bE
20004268 l     O .bss	00000800 _ZN3app5chip813SCREEN_BUFFER17hf6360141ad32453fE
0000c92e l     F .text	0000011a _ZN3app5chip813convert_color17hd3e64e3317a6481bE
0000bf22 l     F .text	00000302 _ZN3app5chip813render_region17h63a2f42595e40485E
20000268 l     O .bss	00004000 _ZN3app5chip816CHIP8_TASK_STACK17hb31f2a0cca07481dE
0000b976 l     F .text	00000010 _ZN3app5chip88Hardware3new17h7d277b7134505907E
0000b8c0 l     F .text	000000b6 _ZN3app5chip89task_func17h385831a0096277b5E
0001caf0 l     O .text	00000021 str.0
0001cb30 l     O .text	0000001c str.1
0001cc10 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 2c6bdy6rt6z3zh1y
00011f91 l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
000361f7 l       .debug_str	00000000 
00011f56 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00011ffa l       .debug_str	00000000 
00012065 l       .debug_str	00000000 
000120a1 l       .debug_str	00000000 
000120ee l       .debug_str	00000000 
0001212a l       .debug_str	00000000 
00012138 l       .debug_str	00000000 
000121a3 l       .debug_str	00000000 
000121be l       .debug_str	00000000 
0001222a l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00052a2c l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00012281 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f9dc l       .debug_str	00000000 
00012cd8 l       .debug_str	00000000 
00011d91 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
00054bd9 l       .debug_str	00000000 
00058ecc l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
000168b4 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00011cc9 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00011018 l       .debug_str	00000000 
00011e3b l       .debug_str	00000000 
0002307b l       .debug_str	00000000 
0005731f l       .debug_str	00000000 
00011db5 l       .debug_str	00000000 
00011d9a l       .debug_str	00000000 
00011de4 l       .debug_str	00000000 
00012294 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001fac1 l       .debug_str	00000000 
00001425 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000118e5 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00011e36 l       .debug_str	00000000 
00011e45 l       .debug_str	00000000 
00011e7e l       .debug_str	00000000 
00011ea7 l       .debug_str	00000000 
0001678f l       .debug_str	00000000 
00011ebe l       .debug_str	00000000 
00011ef7 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xbkmlpi4vyn2qbv
000354ce l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
00016a83 l       .debug_str	00000000 
0000e781 l       .debug_str	00000000 
00054902 l       .debug_str	00000000 
00011ccc l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
000115bc l       .debug_str	00000000 
000115c5 l       .debug_str	00000000 
000115ce l       .debug_str	00000000 
000115d9 l       .debug_str	00000000 
000115e5 l       .debug_str	00000000 
000115ef l       .debug_str	00000000 
000125f3 l       .debug_str	00000000 
000125e2 l       .debug_str	00000000 
0002c668 l       .debug_str	00000000 
000122e1 l       .debug_str	00000000 
0001232d l       .debug_str	00000000 
0000e77e l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
0003891e l       .debug_str	00000000 
0001a4f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 36ol61x1a5do2305
0001245e l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e72e l       .debug_str	00000000 
0000e77e l       .debug_str	00000000 
0003891e l       .debug_str	00000000 
0001a4f5 l       .debug_str	00000000 
000354ce l       .debug_str	00000000 
0000e781 l       .debug_str	00000000 
00052a2c l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
00012cd8 l       .debug_str	00000000 
00058dd7 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
000551bd l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
00023079 l       .debug_str	00000000 
0000c05d l       .debug_str	00000000 
000525f0 l       .debug_str	00000000 
000230bc l       .debug_str	00000000 
00058098 l       .debug_str	00000000 
0000c061 l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
0000c065 l       .debug_str	00000000 
00001820 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
000574d4 l       .debug_str	00000000 
0000c06e l       .debug_str	00000000 
00056b2c l       .debug_str	00000000 
0000e73f l       .debug_str	00000000 
00054902 l       .debug_str	00000000 
00011ccc l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
000115bc l       .debug_str	00000000 
000115c5 l       .debug_str	00000000 
000115ce l       .debug_str	00000000 
000115d9 l       .debug_str	00000000 
000115e5 l       .debug_str	00000000 
000115ef l       .debug_str	00000000 
000125f3 l       .debug_str	00000000 
000125e2 l       .debug_str	00000000 
0002c668 l       .debug_str	00000000 
00012360 l       .debug_str	00000000 
000123ae l       .debug_str	00000000 
0001240e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4ae8jurj2cyz895o
000002a2 l       .debug_str	00000000 
000125bd l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00011b94 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000125dd l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00012cd8 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000124c0 l       .debug_str	00000000 
00054902 l       .debug_str	00000000 
00011ccc l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
000115bc l       .debug_str	00000000 
000115c5 l       .debug_str	00000000 
000115ce l       .debug_str	00000000 
000115d9 l       .debug_str	00000000 
000115e5 l       .debug_str	00000000 
000115ef l       .debug_str	00000000 
000125f3 l       .debug_str	00000000 
000125e2 l       .debug_str	00000000 
0002307b l       .debug_str	00000000 
000124c9 l       .debug_str	00000000 
0001252c l       .debug_str	00000000 
00012556 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4vqyywb7xxbk2fnk
00012931 l       .debug_str	00000000 
0003b764 l       .debug_str	00000000 
00012cc2 l       .debug_str	00000000 
00002450 l       .debug_str	00000000 
00012cbe l       .debug_str	00000000 
00012cb9 l       .debug_str	00000000 
0002284e l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00053c51 l       .debug_str	00000000 
00011e3b l       .debug_str	00000000 
0005731f l       .debug_str	00000000 
00012648 l       .debug_str	00000000 
000126d4 l       .debug_str	00000000 
00012cd8 l       .debug_str	00000000 
00011d91 l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
00054bd9 l       .debug_str	00000000 
00058ecc l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
000168b4 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0002307b l       .debug_str	00000000 
00011db5 l       .debug_str	00000000 
000126f1 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000118e5 l       .debug_str	00000000 
0001277d l       .debug_str	00000000 
000127b2 l       .debug_str	00000000 
000127cc l       .debug_str	00000000 
00012801 l       .debug_str	00000000 
00012c8e l       .debug_str	00000000 
0005241e l       .debug_str	00000000 
00011e36 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001281b l       .debug_str	00000000 
00012c6f l       .debug_str	00000000 
00012c35 l       .debug_str	00000000 
00012850 l       .debug_str	00000000 
00012c17 l       .debug_str	00000000 
0001286a l       .debug_str	00000000 
000128a0 l       .debug_str	00000000 
00012bde l       .debug_str	00000000 
00012bc2 l       .debug_str	00000000 
000128bb l       .debug_str	00000000 
00012b8b l       .debug_str	00000000 
00012b6f l       .debug_str	00000000 
00012b38 l       .debug_str	00000000 
00012b1d l       .debug_str	00000000 
00012ae7 l       .debug_str	00000000 
00012acc l       .debug_str	00000000 
00012a96 l       .debug_str	00000000 
00012a7b l       .debug_str	00000000 
00012a45 l       .debug_str	00000000 
00012a2a l       .debug_str	00000000 
000129f4 l       .debug_str	00000000 
000129d9 l       .debug_str	00000000 
000129a3 l       .debug_str	00000000 
0001290f l       .debug_str	00000000 
00013943 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00012d00 l       .debug_str	00000000 
00012cfc l       .debug_str	00000000 
00052a0d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00051709 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
000163b7 l       .debug_str	00000000 
00012605 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
0002bfd5 l       .debug_str	00000000 
0001260a l       .debug_str	00000000 
0001fca3 l       .debug_str	00000000 
0001faf8 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0002afe8 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00011cc9 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00011cd2 l       .debug_str	00000000 
000132cc l       .debug_str	00000000 
00011cd5 l       .debug_str	00000000 
00044859 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0005326b l       .debug_str	00000000 
00057b84 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00012cf6 l       .debug_str	00000000 
00012cf0 l       .debug_str	00000000 
00012cea l       .debug_str	00000000 
00012ce4 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00054bef l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
00058dd7 l       .debug_str	00000000 
00002535 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0001926c l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
00012ce1 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00025acb l       .debug_str	00000000 
00011cd8 l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
000527d0 l       .debug_str	00000000 
00054902 l       .debug_str	00000000 
00052291 l       .debug_str	00000000 
00011ccc l       .debug_str	00000000 
00011569 l       .debug_str	00000000 
00011575 l       .debug_str	00000000 
00011580 l       .debug_str	00000000 
0001158d l       .debug_str	00000000 
0001159b l       .debug_str	00000000 
000115aa l       .debug_str	00000000 
00011cfd l       .debug_str	00000000 
00012c9d l       .debug_str	00000000 
00012610 l       .debug_str	00000000 
00012636 l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00011018 l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00012640 l       .debug_str	00000000 
00052736 l       .debug_str	00000000 
0001678f l       .debug_str	00000000 
00012cdd l       .debug_str	00000000 
000533a3 l       .debug_str	00000000 
00013127 l       .debug_str	00000000 
00013199 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00012cd4 l       .debug_str	00000000 
00012294 l       .debug_str	00000000 
00012cca l       .debug_str	00000000 
0001cf70 l     O .text	0000001c str.0
0001d1f0 l     O .text	00000021 str.1
0001d4d0 l     O .text	00000039 str.2
0001d530 l     O .text	00000021 str.3
0001d570 l     O .text	00000023 str.4
00000000 l    df *ABS*	00000000 5amxpeuxwufgc2g7
00012eb3 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000118e5 l       .debug_str	00000000 
00011ea7 l       .debug_str	00000000 
00012e1f l       .debug_str	00000000 
00012efc l       .debug_str	00000000 
00012f46 l       .debug_str	00000000 
00012f99 l       .debug_str	00000000 
00013028 l       .debug_str	00000000 
0001308b l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00013103 l       .debug_str	00000000 
00013175 l       .debug_str	00000000 
00013233 l       .debug_str	00000000 
00052a2c l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
00011d9a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00012cd8 l       .debug_str	00000000 
00011d91 l       .debug_str	00000000 
00012cc2 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0003b764 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
00054bd9 l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00058ecc l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
000168b4 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00011cc9 l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001678f l       .debug_str	00000000 
00011e3b l       .debug_str	00000000 
0002307b l       .debug_str	00000000 
0005731f l       .debug_str	00000000 
00011db5 l       .debug_str	00000000 
00012cca l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00011018 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00012294 l       .debug_str	00000000 
00012cd4 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00013199 l       .debug_str	00000000 
00013127 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00012d05 l       .debug_str	00000000 
00012d8f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5eukf9ymd90dvsi0
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00013237 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00013290 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0001323f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5fcitodfeuns782f
0001330f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
0001329d l       .debug_str	00000000 
000132a2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000132a9 l       .debug_str	00000000 
000132b1 l       .debug_str	00000000 
0000bfe3 l       .debug_str	00000000 
000132b9 l       .debug_str	00000000 
000132c1 l       .debug_str	00000000 
000132c8 l       .debug_str	00000000 
00016c78 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
000132cf l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001fb90 l       .debug_str	00000000 
00013324 l       .debug_str	00000000 
000132d4 l       .debug_str	00000000 
0002b97c l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 tdisvxegs4w5usn
00013430 l       .debug_str	00000000 
00012cd4 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00013199 l       .debug_str	00000000 
00013127 l       .debug_str	00000000 
000133c1 l       .debug_str	00000000 
00013402 l       .debug_str	00000000 
00013471 l       .debug_str	00000000 
000134d4 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000118e5 l       .debug_str	00000000 
00052825 l       .debug_str	00000000 
00013524 l       .debug_str	00000000 
000135a4 l       .debug_str	00000000 
00011ea7 l       .debug_str	00000000 
000135e2 l       .debug_str	00000000 
00013662 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00011d9a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00012cd8 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
000124c0 l       .debug_str	00000000 
0002e1dc l       .debug_str	00000000 
00011d91 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
00054bd9 l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00058ecc l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
000168b4 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00011cc9 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00011018 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00011e3b l       .debug_str	00000000 
0002307b l       .debug_str	00000000 
0005731f l       .debug_str	00000000 
00011db5 l       .debug_str	00000000 
0001678f l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
00013330 l       .debug_str	00000000 
00013373 l       .debug_str	00000000 
00012cc2 l       .debug_str	00000000 
0003b764 l       .debug_str	00000000 
00012cca l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00012294 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 u3mfxzl87iwp64s
00013774 l       .debug_str	00000000 
00052825 l       .debug_str	00000000 
0001678f l       .debug_str	00000000 
000137b3 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000118e5 l       .debug_str	00000000 
00013826 l       .debug_str	00000000 
00013865 l       .debug_str	00000000 
00013943 l       .debug_str	00000000 
000138a2 l       .debug_str	00000000 
00013905 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001392c l       .debug_str	00000000 
00052291 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00012cd8 l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
000124c0 l       .debug_str	00000000 
0002e1dc l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00052736 l       .debug_str	00000000 
000136d6 l       .debug_str	00000000 
0001376b l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea13 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00054bd9 l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00058ecc l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
000168b4 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
00011d91 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00011cc9 l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00011018 l       .debug_str	00000000 
00011e3b l       .debug_str	00000000 
0002307b l       .debug_str	00000000 
0005731f l       .debug_str	00000000 
00011db5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.8j8txwjh-cgu.0
00014fa3 l       .debug_str	00000000 
00013f94 l       .debug_str	00000000 
00013fbe l       .debug_str	00000000 
0001400c l       .debug_str	00000000 
00014014 l       .debug_str	00000000 
0000bf06 l       .debug_str	00000000 
00014061 l       .debug_str	00000000 
000140bb l       .debug_str	00000000 
000140c9 l       .debug_str	00000000 
0001411c l       .debug_str	00000000 
00014124 l       .debug_str	00000000 
00014179 l       .debug_str	00000000 
00014183 l       .debug_str	00000000 
000141c1 l       .debug_str	00000000 
000141dc l       .debug_str	00000000 
0001423b l       .debug_str	00000000 
00013234 l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
000142a0 l       .debug_str	00000000 
000142d1 l       .debug_str	00000000 
000142dc l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
0001430e l       .debug_str	00000000 
0001433c l       .debug_str	00000000 
0001434e l       .debug_str	00000000 
00014374 l       .debug_str	00000000 
00014380 l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
000143c7 l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
0000bf65 l       .debug_str	00000000 
00014412 l       .debug_str	00000000 
00052736 l       .debug_str	00000000 
00014418 l       .debug_str	00000000 
000144a4 l       .debug_str	00000000 
000144bf l       .debug_str	00000000 
000144ef l       .debug_str	00000000 
00014524 l       .debug_str	00000000 
00014554 l       .debug_str	00000000 
0001456a l       .debug_str	00000000 
000145a0 l       .debug_str	00000000 
000145bb l       .debug_str	00000000 
000145f5 l       .debug_str	00000000 
00014614 l       .debug_str	00000000 
00014650 l       .debug_str	00000000 
00014676 l       .debug_str	00000000 
00014682 l       .debug_str	00000000 
000146a9 l       .debug_str	00000000 
000146b6 l       .debug_str	00000000 
000148c3 l       .debug_str	00000000 
00014704 l       .debug_str	00000000 
00014933 l       .debug_str	00000000 
00014755 l       .debug_str	00000000 
000147a7 l       .debug_str	00000000 
000147b3 l       .debug_str	00000000 
000147fe l       .debug_str	00000000 
00014810 l       .debug_str	00000000 
00014853 l       .debug_str	00000000 
0001485e l       .debug_str	00000000 
000148ba l       .debug_str	00000000 
000148cb l       .debug_str	00000000 
0001492a l       .debug_str	00000000 
0001493e l       .debug_str	00000000 
00014994 l       .debug_str	00000000 
00014a29 l       .debug_str	00000000 
00014a35 l       .debug_str	00000000 
00014acf l       .debug_str	00000000 
00014ae0 l       .debug_str	00000000 
00014b05 l       .debug_str	00000000 
00014bae l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
00052825 l       .debug_str	00000000 
00014bbf l       .debug_str	00000000 
00014c47 l       .debug_str	00000000 
00014bfe l       .debug_str	00000000 
00014c42 l       .debug_str	00000000 
00014c8c l       .debug_str	00000000 
00014ccd l       .debug_str	00000000 
00014cf2 l       .debug_str	00000000 
00014d43 l       .debug_str	00000000 
00014d88 l       .debug_str	00000000 
00014ddb l       .debug_str	00000000 
00014e3c l       .debug_str	00000000 
00014ea3 l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
00014eea l       .debug_str	00000000 
00014f35 l       .debug_str	00000000 
00014f42 l       .debug_str	00000000 
0001501c l       .debug_str	00000000 
00015014 l       .debug_str	00000000 
00015024 l       .debug_str	00000000 
00003cf0 l       .debug_str	00000000 
00015040 l       .debug_str	00000000 
000150b5 l       .debug_str	00000000 
000150e0 l       .debug_str	00000000 
00015159 l       .debug_str	00000000 
00015163 l       .debug_str	00000000 
00015189 l       .debug_str	00000000 
000151c2 l       .debug_str	00000000 
00011e36 l       .debug_str	00000000 
000151da l       .debug_str	00000000 
00015213 l       .debug_str	00000000 
0001524b l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
00015284 l       .debug_str	00000000 
000152bf l       .debug_str	00000000 
00015303 l       .debug_str	00000000 
00015349 l       .debug_str	00000000 
00015385 l       .debug_str	00000000 
000153ad l       .debug_str	00000000 
000153e9 l       .debug_str	00000000 
0001540d l       .debug_str	00000000 
0001546a l       .debug_str	00000000 
0001547e l       .debug_str	00000000 
000154cf l       .debug_str	00000000 
000163b7 l       .debug_str	00000000 
000154db l       .debug_str	00000000 
0001552c l       .debug_str	00000000 
00015543 l       .debug_str	00000000 
00015594 l       .debug_str	00000000 
000155b2 l       .debug_str	00000000 
00015603 l       .debug_str	00000000 
00015615 l       .debug_str	00000000 
0001566d l       .debug_str	00000000 
00015683 l       .debug_str	00000000 
000156e6 l       .debug_str	00000000 
00015711 l       .debug_str	00000000 
00015774 l       .debug_str	00000000 
000157e9 l       .debug_str	00000000 
0001584d l       .debug_str	00000000 
00015857 l       .debug_str	00000000 
000158c2 l       .debug_str	00000000 
000158d1 l       .debug_str	00000000 
0001593d l       .debug_str	00000000 
0001596f l       .debug_str	00000000 
00015995 l       .debug_str	00000000 
00015a04 l       .debug_str	00000000 
00015a24 l       .debug_str	00000000 
00015a94 l       .debug_str	00000000 
00015ab5 l       .debug_str	00000000 
0001376b l       .debug_str	00000000 
00015b29 l       .debug_str	00000000 
00015ba9 l       .debug_str	00000000 
00015bef l       .debug_str	00000000 
00015c18 l       .debug_str	00000000 
00015c1f l       .debug_str	00000000 
00015c57 l       .debug_str	00000000 
00015c96 l       .debug_str	00000000 
00015c9d l       .debug_str	00000000 
00015d16 l       .debug_str	00000000 
00011018 l       .debug_str	00000000 
00015dad l       .debug_str	00000000 
00015e2b l       .debug_str	00000000 
00015e35 l       .debug_str	00000000 
00015ec3 l       .debug_str	00000000 
00015f6f l       .debug_str	00000000 
00015fb6 l       .debug_str	00000000 
00015fc3 l       .debug_str	00000000 
00016010 l       .debug_str	00000000 
00016023 l       .debug_str	00000000 
00016075 l       .debug_str	00000000 
000160e5 l       .debug_str	00000000 
00013cd7 l       .debug_str	00000000 
00016145 l       .debug_str	00000000 
00016156 l       .debug_str	00000000 
000161bb l       .debug_str	00000000 
000161eb l       .debug_str	00000000 
000161f4 l       .debug_str	00000000 
00016230 l       .debug_str	00000000 
00016244 l       .debug_str	00000000 
0001627f l       .debug_str	00000000 
000162c5 l       .debug_str	00000000 
000162e3 l       .debug_str	00000000 
00016313 l       .debug_str	00000000 
0001631c l       .debug_str	00000000 
00016356 l       .debug_str	00000000 
00016368 l       .debug_str	00000000 
00016396 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0001639d l       .debug_str	00000000 
000163a9 l       .debug_str	00000000 
000163b3 l       .debug_str	00000000 
000163bd l       .debug_str	00000000 
000163e0 l       .debug_str	00000000 
0002b896 l       .debug_str	00000000 
00016435 l       .debug_str	00000000 
00016495 l       .debug_str	00000000 
000164a1 l       .debug_str	00000000 
000164f1 l       .debug_str	00000000 
00016554 l       .debug_str	00000000 
000165bb l       .debug_str	00000000 
0001662a l       .debug_str	00000000 
00052a2c l       .debug_str	00000000 
00013233 l       .debug_str	00000000 
000166ba l       .debug_str	00000000 
00053ac9 l       .debug_str	00000000 
00011587 l       .debug_str	00000000 
0000bfe3 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
0001fa0c l       .debug_str	00000000 
00052291 l       .debug_str	00000000 
000166e1 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000166e8 l       .debug_str	00000000 
00052a0d l       .debug_str	00000000 
000166f5 l       .debug_str	00000000 
000527b3 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00016700 l       .debug_str	00000000 
00058dd7 l       .debug_str	00000000 
00016754 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005479a l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
0001675f l       .debug_str	00000000 
0001678a l       .debug_str	00000000 
0005725c l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016796 l       .debug_str	00000000 
000167d0 l       .debug_str	00000000 
00016809 l       .debug_str	00000000 
00016818 l       .debug_str	00000000 
0001685b l       .debug_str	00000000 
00053cde l       .debug_str	00000000 
00030669 l       .debug_str	00000000 
00055703 l       .debug_str	00000000 
0001689d l       .debug_str	00000000 
000168c1 l       .debug_str	00000000 
00015e30 l       .debug_str	00000000 
00052262 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
000168e1 l       .debug_str	00000000 
0003e407 l       .debug_str	00000000 
0001691c l       .debug_str	00000000 
00016923 l       .debug_str	00000000 
0002f003 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00016964 l       .debug_str	00000000 
000169ab l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0001fecf l       .debug_str	00000000 
00016985 l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
00016f75 l       .debug_str	00000000 
000169a7 l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
00011d2d l       .debug_str	00000000 
00011d38 l       .debug_str	00000000 
00011099 l       .debug_str	00000000 
00011d31 l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0000b6ea l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001394d l       .debug_str	00000000 
000139a5 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
000139f2 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000139fc l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00013a08 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00016764 l       .debug_str	00000000 
0001678f l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046608 l       .debug_str	00000000 
000315ad l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00056394 l       .debug_str	00000000 
0002d388 l       .debug_str	00000000 
00013a19 l       .debug_str	00000000 
00013a1e l       .debug_str	00000000 
00013a24 l       .debug_str	00000000 
00016c78 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00012cd8 l       .debug_str	00000000 
00011d91 l       .debug_str	00000000 
00012cc2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00013a2c l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
00013a32 l       .debug_str	00000000 
0002afe8 l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058de6 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001f9dc l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052395 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000310c3 l       .debug_str	00000000 
000547ac l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005241e l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fb59 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
000565b0 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013a3d l       .debug_str	00000000 
00013a66 l       .debug_str	00000000 
00013a75 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00011b08 l       .debug_str	00000000 
00011b0c l       .debug_str	00000000 
00016812 l       .debug_str	00000000 
00013a8f l       .debug_str	00000000 
00013ab8 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00013aed l       .debug_str	00000000 
00013b01 l       .debug_str	00000000 
00013b14 l       .debug_str	00000000 
00013b60 l       .debug_str	00000000 
00013b6e l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
0002d362 l       .debug_str	00000000 
00013b76 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
000124c0 l       .debug_str	00000000 
0002e1dc l       .debug_str	00000000 
00058ecc l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013cc7 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00011e3b l       .debug_str	00000000 
0002307b l       .debug_str	00000000 
0005731f l       .debug_str	00000000 
0001693e l       .debug_str	00000000 
0003b764 l       .debug_str	00000000 
00012cca l       .debug_str	00000000 
00013b80 l       .debug_str	00000000 
00054bd9 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
000168b4 l       .debug_str	00000000 
00053e42 l       .debug_str	00000000 
0001517b l       .debug_str	00000000 
000168f4 l       .debug_str	00000000 
00012cd4 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0001664e l       .debug_str	00000000 
000165df l       .debug_str	00000000 
00013b86 l       .debug_str	00000000 
00013b8c l       .debug_str	00000000 
00013bb5 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00015164 l       .debug_str	00000000 
00013bc1 l       .debug_str	00000000 
00013237 l       .debug_str	00000000 
00013bee l       .debug_str	00000000 
000361f7 l       .debug_str	00000000 
00013bf9 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00013c22 l       .debug_str	00000000 
00013c29 l       .debug_str	00000000 
00013c53 l       .debug_str	00000000 
00020bef l       .debug_str	00000000 
00013c57 l       .debug_str	00000000 
0002284e l       .debug_str	00000000 
00013c60 l       .debug_str	00000000 
00013ca2 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00013cb5 l       .debug_str	00000000 
00057229 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
00042ab6 l       .debug_str	00000000 
00013cd0 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
00013cdf l       .debug_str	00000000 
00013ce9 l       .debug_str	00000000 
00016991 l       .debug_str	00000000 
00016151 l       .debug_str	00000000 
00013cee l       .debug_str	00000000 
00013d74 l       .debug_str	00000000 
00013d7e l       .debug_str	00000000 
00013e10 l       .debug_str	00000000 
0000ea13 l       .debug_str	00000000 
00013e56 l       .debug_str	00000000 
00013eea l       .debug_str	00000000 
00013f4c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 embedded_graphics.94s3esdv-cgu.0
0001736d l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
000565b0 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000310c3 l       .debug_str	00000000 
000547ac l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005241e l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fb59 l       .debug_str	00000000 
0000e9ed l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000e885 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000192db l       .debug_str	00000000 
0000c21f l       .debug_str	00000000 
0000c284 l       .debug_str	00000000 
00016a64 l       .debug_str	00000000 
00016a6d l       .debug_str	00000000 
00016a75 l       .debug_str	00000000 
00016a7e l       .debug_str	00000000 
0002c668 l       .debug_str	00000000 
00016a8b l       .debug_str	00000000 
00016a9b l       .debug_str	00000000 
00016aac l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00019326 l       .debug_str	00000000 
0000f23b l       .debug_str	00000000 
00016abd l       .debug_str	00000000 
0000e865 l       .debug_str	00000000 
0000e873 l       .debug_str	00000000 
0001938c l       .debug_str	00000000 
00016ac6 l       .debug_str	00000000 
00016acc l       .debug_str	00000000 
00016ad7 l       .debug_str	00000000 
00016ae1 l       .debug_str	00000000 
00016aeb l       .debug_str	00000000 
0000b802 l       .debug_str	00000000 
00016b33 l       .debug_str	00000000 
0000b8eb l       .debug_str	00000000 
00016b7b l       .debug_str	00000000 
00016bc3 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
00016bcc l       .debug_str	00000000 
00016bf5 l       .debug_str	00000000 
00016bfe l       .debug_str	00000000 
00016c5b l       .debug_str	00000000 
0005731f l       .debug_str	00000000 
00016c81 l       .debug_str	00000000 
00016ca9 l       .debug_str	00000000 
00016cdb l       .debug_str	00000000 
000142d1 l       .debug_str	00000000 
00016d0c l       .debug_str	00000000 
00016d69 l       .debug_str	00000000 
00016dc6 l       .debug_str	00000000 
00016e23 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
00016e55 l       .debug_str	00000000 
00016e9a l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
00016ea6 l       .debug_str	00000000 
00051829 l       .debug_str	00000000 
00016ee2 l       .debug_str	00000000 
0000e99e l       .debug_str	00000000 
00016f26 l       .debug_str	00000000 
00016f6d l       .debug_str	00000000 
00016f7b l       .debug_str	00000000 
00016fc2 l       .debug_str	00000000 
00016fd0 l       .debug_str	00000000 
00017010 l       .debug_str	00000000 
00017018 l       .debug_str	00000000 
0000ea25 l       .debug_str	00000000 
00017025 l       .debug_str	00000000 
00017060 l       .debug_str	00000000 
0001709e l       .debug_str	00000000 
000170ce l       .debug_str	00000000 
000170e2 l       .debug_str	00000000 
00017112 l       .debug_str	00000000 
00017126 l       .debug_str	00000000 
00017156 l       .debug_str	00000000 
0001716a l       .debug_str	00000000 
000374e7 l       .debug_str	00000000 
000171b5 l       .debug_str	00000000 
0001720c l       .debug_str	00000000 
0001721b l       .debug_str	00000000 
00017266 l       .debug_str	00000000 
0000be4e l       .debug_str	00000000 
000172dd l       .debug_str	00000000 
00017362 l       .debug_str	00000000 
0000bf06 l       .debug_str	00000000 
000173e4 l       .debug_str	00000000 
00017469 l       .debug_str	00000000 
00017474 l       .debug_str	00000000 
00052262 l       .debug_str	00000000 
000174fd l       .debug_str	00000000 
0002033d l       .debug_str	00000000 
00017574 l       .debug_str	00000000 
00053c50 l       .debug_str	00000000 
00017609 l       .debug_str	00000000 
000176a0 l       .debug_str	00000000 
0001773b l       .debug_str	00000000 
000177d0 l       .debug_str	00000000 
00017867 l       .debug_str	00000000 
00017902 l       .debug_str	00000000 
000179ca l       .debug_str	00000000 
000179d5 l       .debug_str	00000000 
00017aa1 l       .debug_str	00000000 
00017b31 l       .debug_str	00000000 
00017b3d l       .debug_str	00000000 
00017be3 l       .debug_str	00000000 
00017bef l       .debug_str	00000000 
00017c93 l       .debug_str	00000000 
00017d35 l       .debug_str	00000000 
00017dd9 l       .debug_str	00000000 
00017e2d l       .debug_str	00000000 
00017e82 l       .debug_str	00000000 
00017ed7 l       .debug_str	00000000 
00013cd7 l       .debug_str	00000000 
00017f5a l       .debug_str	00000000 
00017fde l       .debug_str	00000000 
00018062 l       .debug_str	00000000 
00002878 l       .debug_str	00000000 
000180a9 l       .debug_str	00000000 
0000287e l       .debug_str	00000000 
000180f0 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00018137 l       .debug_str	00000000 
000181b5 l       .debug_str	00000000 
00018234 l       .debug_str	00000000 
000182cf l       .debug_str	00000000 
00018363 l       .debug_str	00000000 
000183b0 l       .debug_str	00000000 
000183bc l       .debug_str	00000000 
0001841f l       .debug_str	00000000 
00018467 l       .debug_str	00000000 
00011b08 l       .debug_str	00000000 
0001846f l       .debug_str	00000000 
00018503 l       .debug_str	00000000 
00018569 l       .debug_str	00000000 
000185fa l       .debug_str	00000000 
00018699 l       .debug_str	00000000 
0001872a l       .debug_str	00000000 
000187c9 l       .debug_str	00000000 
0001886b l       .debug_str	00000000 
000188fc l       .debug_str	00000000 
000189aa l       .debug_str	00000000 
00018a5a l       .debug_str	00000000 
00018b0e l       .debug_str	00000000 
00018c01 l       .debug_str	00000000 
00018c0c l       .debug_str	00000000 
00018d03 l       .debug_str	00000000 
00018daf l       .debug_str	00000000 
00018db9 l       .debug_str	00000000 
00018e2b l       .debug_str	00000000 
00018ea0 l       .debug_str	00000000 
00018f13 l       .debug_str	00000000 
00018f84 l       .debug_str	00000000 
00018ff7 l       .debug_str	00000000 
0001906e l       .debug_str	00000000 
000190e3 l       .debug_str	00000000 
00019158 l       .debug_str	00000000 
000191c8 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0000bb39 l       .debug_str	00000000 
00019254 l       .debug_str	00000000 
0001fa0c l       .debug_str	00000000 
0001925a l       .debug_str	00000000 
0001400c l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0001678f l       .debug_str	00000000 
00016700 l       .debug_str	00000000 
00016f75 l       .debug_str	00000000 
0001925d l       .debug_str	00000000 
00019267 l       .debug_str	00000000 
00019271 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0001927b l       .debug_str	00000000 
000192ac l       .debug_str	00000000 
00059344 l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
000192e1 l       .debug_str	00000000 
000192eb l       .debug_str	00000000 
000007da l       .debug_str	00000000 
000192f5 l       .debug_str	00000000 
000192fe l       .debug_str	00000000 
0001932d l       .debug_str	00000000 
0001933a l       .debug_str	00000000 
0001933d l       .debug_str	00000000 
00019340 l       .debug_str	00000000 
00019343 l       .debug_str	00000000 
00019346 l       .debug_str	00000000 
00019349 l       .debug_str	00000000 
0001934c l       .debug_str	00000000 
0001939a l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
00011d31 l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
00011099 l       .debug_str	00000000 
00011d44 l       .debug_str	00000000 
0001940a l       .debug_str	00000000 
000193e4 l       .debug_str	00000000 
0001943d l       .debug_str	00000000 
00019418 l       .debug_str	00000000 
0001946e l       .debug_str	00000000 
0001944a l       .debug_str	00000000 
0001949f l       .debug_str	00000000 
0001947a l       .debug_str	00000000 
000194d3 l       .debug_str	00000000 
000194ac l       .debug_str	00000000 
00019508 l       .debug_str	00000000 
000194e2 l       .debug_str	00000000 
0001953c l       .debug_str	00000000 
00019516 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000169af l       .debug_str	00000000 
00016a0f l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00019262 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
0001926c l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00019276 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046608 l       .debug_str	00000000 
000315ad l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00056394 l       .debug_str	00000000 
0002d388 l       .debug_str	00000000 
00013a19 l       .debug_str	00000000 
00013a1e l       .debug_str	00000000 
00013a24 l       .debug_str	00000000 
00016c78 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00030279 l       .debug_str	00000000 
0002afe8 l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058de6 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f9dc l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052395 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
000116d2 l     F .text	0000006e _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E
00000000 l    df *ABS*	00000000 hash32.79y5bd3b-cgu.0
00015603 l       .debug_str	00000000 
00019a24 l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
0000bf65 l       .debug_str	00000000 
00019a6f l       .debug_str	00000000 
000145a0 l       .debug_str	00000000 
00019aa5 l       .debug_str	00000000 
000145f5 l       .debug_str	00000000 
00019adf l       .debug_str	00000000 
00019b1b l       .debug_str	00000000 
00014676 l       .debug_str	00000000 
00019b41 l       .debug_str	00000000 
000146a9 l       .debug_str	00000000 
00019b68 l       .debug_str	00000000 
000148c3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00019bb6 l       .debug_str	00000000 
00014933 l       .debug_str	00000000 
00019c07 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00019c59 l       .debug_str	00000000 
00052736 l       .debug_str	00000000 
00019cae l       .debug_str	00000000 
00014a29 l       .debug_str	00000000 
00019d43 l       .debug_str	00000000 
00019d91 l       .debug_str	00000000 
0002307b l       .debug_str	00000000 
00019da0 l       .debug_str	00000000 
00019df1 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00019e09 l       .debug_str	00000000 
00019e5e l       .debug_str	00000000 
00019e7a l       .debug_str	00000000 
00019e82 l       .debug_str	00000000 
00019ec8 l       .debug_str	00000000 
00019ed0 l       .debug_str	00000000 
00014853 l       .debug_str	00000000 
00019f19 l       .debug_str	00000000 
00053c50 l       .debug_str	00000000 
00019f88 l       .debug_str	00000000 
000154cf l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00019fd9 l       .debug_str	00000000 
0001a02a l       .debug_str	00000000 
0001566d l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00013bee l       .debug_str	00000000 
000361f7 l       .debug_str	00000000 
00013bf9 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00054bd9 l       .debug_str	00000000 
00058ecc l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
000168b4 l       .debug_str	00000000 
0001a082 l       .debug_str	00000000 
0001a0e5 l       .debug_str	00000000 
0001a10f l       .debug_str	00000000 
0001a172 l       .debug_str	00000000 
0001a17b l       .debug_str	00000000 
0001a1e8 l       .debug_str	00000000 
0001a1fa l       .debug_str	00000000 
00003c53 l       .debug_str	00000000 
0001a26b l       .debug_str	00000000 
00013cd7 l       .debug_str	00000000 
0001a2cb l       .debug_str	00000000 
0001a2fe l       .debug_str	00000000 
0001a368 l       .debug_str	00000000 
0001a39b l       .debug_str	00000000 
0001a3a0 l       .debug_str	00000000 
0001a404 l       .debug_str	00000000 
00056509 l       .debug_str	00000000 
0001a45f l       .debug_str	00000000 
0001a49b l       .debug_str	00000000 
0001a4a9 l       .debug_str	00000000 
0001a4d8 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001678f l       .debug_str	00000000 
00052291 l       .debug_str	00000000 
000166e1 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00052a0d l       .debug_str	00000000 
000527b3 l       .debug_str	00000000 
000166e8 l       .debug_str	00000000 
000166f5 l       .debug_str	00000000 
0001fa0c l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00016754 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005479a l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
0005725c l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016796 l       .debug_str	00000000 
000167d0 l       .debug_str	00000000 
00016809 l       .debug_str	00000000 
00016818 l       .debug_str	00000000 
0001685b l       .debug_str	00000000 
00053cde l       .debug_str	00000000 
00030669 l       .debug_str	00000000 
00055703 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0001689d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
0002284e l       .debug_str	00000000 
0002d8fb l       .debug_str	00000000 
00053e42 l       .debug_str	00000000 
0001a4e0 l       .debug_str	00000000 
0001a4f8 l       .debug_str	00000000 
00058dd7 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0001a515 l       .debug_str	00000000 
00011a85 l       .debug_str	00000000 
0001a52e l       .debug_str	00000000 
0001a54a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001954a l       .debug_str	00000000 
0001959f l       .debug_str	00000000 
000195e9 l       .debug_str	00000000 
000195f0 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000110a1 l       .debug_str	00000000 
00011d4c l       .debug_str	00000000 
00011d57 l       .debug_str	00000000 
00011d62 l       .debug_str	00000000 
0001a4f2 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00012cd8 l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00013a32 l       .debug_str	00000000 
00056394 l       .debug_str	00000000 
0002afe8 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
000565b0 l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000195f8 l       .debug_str	00000000 
00013a66 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013a75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00011b08 l       .debug_str	00000000 
00011b0c l       .debug_str	00000000 
00016812 l       .debug_str	00000000 
00019621 l       .debug_str	00000000 
00013ab8 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00013aed l       .debug_str	00000000 
00013b01 l       .debug_str	00000000 
0001964a l       .debug_str	00000000 
00013b60 l       .debug_str	00000000 
00013b6e l       .debug_str	00000000 
00013b76 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00013237 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00019696 l       .debug_str	00000000 
0000ae86 l       .debug_str	00000000 
000196bf l       .debug_str	00000000 
000196c9 l       .debug_str	00000000 
00052395 l       .debug_str	00000000 
00016f75 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000574 l       .debug_str	00000000 
00052262 l       .debug_str	00000000 
000196cd l       .debug_str	00000000 
00052787 l       .debug_str	00000000 
0001a544 l       .debug_str	00000000 
0001a50e l       .debug_str	00000000 
000196d7 l       .debug_str	00000000 
00014179 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001f9dc l       .debug_str	00000000 
0001972c l       .debug_str	00000000 
0001976a l       .debug_str	00000000 
00019782 l       .debug_str	00000000 
000141c1 l       .debug_str	00000000 
000197c0 l       .debug_str	00000000 
00013234 l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
00019825 l       .debug_str	00000000 
00019855 l       .debug_str	00000000 
0001987c l       .debug_str	00000000 
00014374 l       .debug_str	00000000 
000198a2 l       .debug_str	00000000 
000198e7 l       .debug_str	00000000 
000198f3 l       .debug_str	00000000 
00019939 l       .debug_str	00000000 
00019946 l       .debug_str	00000000 
0001998c l       .debug_str	00000000 
00019999 l       .debug_str	00000000 
000199d7 l       .debug_str	00000000 
000199dd l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
000117e0 l     F .text	00000034 _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE
0001184a l     F .text	00000018 _ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E
00011874 l     F .text	0000003e _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE
000118b2 l     F .text	00000040 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE
00011982 l     F .text	0000011c _ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE
00000000 l    df *ABS*	00000000 4iim1qfb3qo0ur8y
0001a5ce l       .debug_str	00000000 
0001a5cc l       .debug_str	00000000 
0001a61f l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001a553 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00013237 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001a572 l       .debug_str	00000000 
0001a5c3 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 log.9af4yuww-cgu.0
0001c79d l       .debug_str	00000000 
000132b9 l       .debug_str	00000000 
000132c1 l       .debug_str	00000000 
000132c8 l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
0001fca3 l       .debug_str	00000000 
00011d91 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0001a947 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
0001a94b l       .debug_str	00000000 
00019ec8 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
0002d362 l       .debug_str	00000000 
00058ecc l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013cc7 l       .debug_str	00000000 
0001a9c9 l       .debug_str	00000000 
00054bd9 l       .debug_str	00000000 
0003e407 l       .debug_str	00000000 
00057cad l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0001a9e0 l       .debug_str	00000000 
00013bb5 l       .debug_str	00000000 
0001aa09 l       .debug_str	00000000 
0001aa3b l       .debug_str	00000000 
00013a32 l       .debug_str	00000000 
00030279 l       .debug_str	00000000 
0002afe8 l       .debug_str	00000000 
000565b0 l       .debug_str	00000000 
0000e9ed l       .debug_str	00000000 
0001aa4d l       .debug_str	00000000 
0001aa76 l       .debug_str	00000000 
00013a75 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00011b08 l       .debug_str	00000000 
00011b0c l       .debug_str	00000000 
00016812 l       .debug_str	00000000 
0001aa9b l       .debug_str	00000000 
00013ab8 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
0001aac4 l       .debug_str	00000000 
0001aaee l       .debug_str	00000000 
0001ab17 l       .debug_str	00000000 
0001ab63 l       .debug_str	00000000 
00013b6e l       .debug_str	00000000 
0001ab87 l       .debug_str	00000000 
00013b76 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b253 l       .debug_str	00000000 
0000b294 l       .debug_str	00000000 
0002284e l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
00052825 l       .debug_str	00000000 
0001ab95 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
000124c0 l       .debug_str	00000000 
0002e1dc l       .debug_str	00000000 
00053578 l       .debug_str	00000000 
000465cb l       .debug_str	00000000 
000542dd l       .debug_str	00000000 
00055bf6 l       .debug_str	00000000 
0002307b l       .debug_str	00000000 
0001f8fd l       .debug_str	00000000 
0003b764 l       .debug_str	00000000 
00030e83 l       .debug_str	00000000 
00052736 l       .debug_str	00000000 
0001fc0d l       .debug_str	00000000 
0001fbb5 l       .debug_str	00000000 
0001abaa l       .debug_str	00000000 
0001abb4 l       .debug_str	00000000 
0001fa95 l       .debug_str	00000000 
0002c668 l       .debug_str	00000000 
0001f86d l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0001d584 l       .debug_str	00000000 
0005731f l       .debug_str	00000000 
0001fc46 l       .debug_str	00000000 
0005479a l       .debug_str	00000000 
0001fc25 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00052262 l       .debug_str	00000000 
0005725c l       .debug_str	00000000 
0001f8be l       .debug_str	00000000 
00013b86 l       .debug_str	00000000 
0001abbd l       .debug_str	00000000 
0001abe6 l       .debug_str	00000000 
0001abf4 l       .debug_str	00000000 
0001ac01 l       .debug_str	00000000 
0001ac14 l       .debug_str	00000000 
000361f7 l       .debug_str	00000000 
0001ac2d l       .debug_str	00000000 
00013237 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
0001ac42 l       .debug_str	00000000 
0001acbe l       .debug_str	00000000 
0001ac55 l       .debug_str	00000000 
0001ac97 l       .debug_str	00000000 
0001acac l       .debug_str	00000000 
00057229 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
00042ab6 l       .debug_str	00000000 
0001acc9 l       .debug_str	00000000 
0001acd3 l       .debug_str	00000000 
0001ad05 l       .debug_str	00000000 
0001ad19 l       .debug_str	00000000 
0001ad2e l       .debug_str	00000000 
0001ee68 l       .debug_str	00000000 
0001f071 l       .debug_str	00000000 
0001ad35 l       .debug_str	00000000 
0001ad40 l       .debug_str	00000000 
0001adc4 l       .debug_str	00000000 
0001adf2 l       .debug_str	00000000 
0001ae78 l       .debug_str	00000000 
0003a665 l       .debug_str	00000000 
0001aea0 l       .debug_str	00000000 
0001aeb1 l       .debug_str	00000000 
0001af3b l       .debug_str	00000000 
0001af59 l       .debug_str	00000000 
0001afe7 l       .debug_str	00000000 
0001b00e l       .debug_str	00000000 
0001b09d l       .debug_str	00000000 
0001b0e5 l       .debug_str	00000000 
0001b114 l       .debug_str	00000000 
0001b15c l       .debug_str	00000000 
0001b17b l       .debug_str	00000000 
0001b1c3 l       .debug_str	00000000 
0001b1d3 l       .debug_str	00000000 
0001b21b l       .debug_str	00000000 
0001b22c l       .debug_str	00000000 
0001b274 l       .debug_str	00000000 
0001b27c l       .debug_str	00000000 
0001b2c4 l       .debug_str	00000000 
0001b2ce l       .debug_str	00000000 
0001b316 l       .debug_str	00000000 
0001b330 l       .debug_str	00000000 
0001b378 l       .debug_str	00000000 
0001b391 l       .debug_str	00000000 
0001b3d9 l       .debug_str	00000000 
0001b3ec l       .debug_str	00000000 
0001b434 l       .debug_str	00000000 
0001b43d l       .debug_str	00000000 
0000b8eb l       .debug_str	00000000 
0001b485 l       .debug_str	00000000 
0001b4cf l       .debug_str	00000000 
0001b51a l       .debug_str	00000000 
0001b558 l       .debug_str	00000000 
0001b589 l       .debug_str	00000000 
0001976a l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0001b5c7 l       .debug_str	00000000 
0001b5f0 l       .debug_str	00000000 
0001b5fb l       .debug_str	00000000 
0001b620 l       .debug_str	00000000 
0001b67f l       .debug_str	00000000 
0002b896 l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
0001678f l       .debug_str	00000000 
0001b6e6 l       .debug_str	00000000 
0001b710 l       .debug_str	00000000 
0001b738 l       .debug_str	00000000 
0001b770 l       .debug_str	00000000 
0001b7a1 l       .debug_str	00000000 
0001b7ab l       .debug_str	00000000 
0001b808 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
0001b83a l       .debug_str	00000000 
0001b860 l       .debug_str	00000000 
0001b882 l       .debug_str	00000000 
0001b8a8 l       .debug_str	00000000 
0001b8ca l       .debug_str	00000000 
0001b8f3 l       .debug_str	00000000 
0001b918 l       .debug_str	00000000 
0001b960 l       .debug_str	00000000 
0001b96d l       .debug_str	00000000 
0001b976 l       .debug_str	00000000 
0001ba00 l       .debug_str	00000000 
00012640 l       .debug_str	00000000 
0001ba1d l       .debug_str	00000000 
0001baa9 l       .debug_str	00000000 
0001bac6 l       .debug_str	00000000 
0001bae6 l       .debug_str	00000000 
0000ea25 l       .debug_str	00000000 
0001baed l       .debug_str	00000000 
0001bb28 l       .debug_str	00000000 
0001bb5a l       .debug_str	00000000 
0001bb6b l       .debug_str	00000000 
0001bba6 l       .debug_str	00000000 
0001bbec l       .debug_str	00000000 
00017156 l       .debug_str	00000000 
0001bc1c l       .debug_str	00000000 
0001bc4c l       .debug_str	00000000 
0001bc6a l       .debug_str	00000000 
0001bc9a l       .debug_str	00000000 
0001bcad l       .debug_str	00000000 
0001bcdd l       .debug_str	00000000 
0001bcf2 l       .debug_str	00000000 
0001bd22 l       .debug_str	00000000 
0001bd3e l       .debug_str	00000000 
0001bd6e l       .debug_str	00000000 
0001bd8c l       .debug_str	00000000 
0001bdbc l       .debug_str	00000000 
0001bdd7 l       .debug_str	00000000 
0001be07 l       .debug_str	00000000 
0001be2b l       .debug_str	00000000 
0001be5b l       .debug_str	00000000 
0001be95 l       .debug_str	00000000 
0001bec5 l       .debug_str	00000000 
0001beea l       .debug_str	00000000 
0001bf1a l       .debug_str	00000000 
0001bf44 l       .debug_str	00000000 
0001bf7a l       .debug_str	00000000 
0001bfab l       .debug_str	00000000 
0001bfe5 l       .debug_str	00000000 
0001c01a l       .debug_str	00000000 
0001c056 l       .debug_str	00000000 
0001c07c l       .debug_str	00000000 
0001c09e l       .debug_str	00000000 
0001c0c5 l       .debug_str	00000000 
0001c0e8 l       .debug_str	00000000 
000148c3 l       .debug_str	00000000 
0001c136 l       .debug_str	00000000 
00014933 l       .debug_str	00000000 
0001c187 l       .debug_str	00000000 
0001c1d8 l       .debug_str	00000000 
0001c1e5 l       .debug_str	00000000 
0001c237 l       .debug_str	00000000 
0001c245 l       .debug_str	00000000 
000147fe l       .debug_str	00000000 
0001c290 l       .debug_str	00000000 
0001c2db l       .debug_str	00000000 
0001c2ef l       .debug_str	00000000 
0001c332 l       .debug_str	00000000 
0001c33f l       .debug_str	00000000 
00014853 l       .debug_str	00000000 
0001c382 l       .debug_str	00000000 
000148ba l       .debug_str	00000000 
0001c3de l       .debug_str	00000000 
0001492a l       .debug_str	00000000 
0001c43d l       .debug_str	00000000 
0001c48f l       .debug_str	00000000 
0001c4e1 l       .debug_str	00000000 
0001c4eb l       .debug_str	00000000 
0001c540 l       .debug_str	00000000 
0001c595 l       .debug_str	00000000 
0001c5eb l       .debug_str	00000000 
000147a7 l       .debug_str	00000000 
0001c641 l       .debug_str	00000000 
0001c67d l       .debug_str	00000000 
00016f75 l       .debug_str	00000000 
0001c6bb l       .debug_str	00000000 
0001c6f6 l       .debug_str	00000000 
000166f5 l       .debug_str	00000000 
0001c701 l       .debug_str	00000000 
0001c748 l       .debug_str	00000000 
00011e3b l       .debug_str	00000000 
0001c75e l       .debug_str	00000000 
0001c7ef l       .debug_str	00000000 
0001c805 l       .debug_str	00000000 
0001c84a l       .debug_str	00000000 
0001c864 l       .debug_str	00000000 
0001c8c7 l       .debug_str	00000000 
0001c8e7 l       .debug_str	00000000 
0001c926 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0001c987 l       .debug_str	00000000 
0001c9c6 l       .debug_str	00000000 
0001fa90 l       .debug_str	00000000 
0001c9ed l       .debug_str	00000000 
0001ca2d l       .debug_str	00000000 
0001ca60 l       .debug_str	00000000 
0001ca77 l       .debug_str	00000000 
0001cabd l       .debug_str	00000000 
0001cad9 l       .debug_str	00000000 
0001cb3d l       .debug_str	00000000 
0001cb5f l       .debug_str	00000000 
0001cba1 l       .debug_str	00000000 
0001cbc2 l       .debug_str	00000000 
0001cc04 l       .debug_str	00000000 
00054e36 l       .debug_str	00000000 
0001cc34 l       .debug_str	00000000 
0001cc78 l       .debug_str	00000000 
0001cccd l       .debug_str	00000000 
0001cd11 l       .debug_str	00000000 
0001cd67 l       .debug_str	00000000 
0001cdab l       .debug_str	00000000 
0001ce23 l       .debug_str	00000000 
0001ce67 l       .debug_str	00000000 
0001cea7 l       .debug_str	00000000 
0001cec2 l       .debug_str	00000000 
0001cf03 l       .debug_str	00000000 
0001cf59 l       .debug_str	00000000 
0001cf9d l       .debug_str	00000000 
0001cfca l       .debug_str	00000000 
0001d00f l       .debug_str	00000000 
0001d057 l       .debug_str	00000000 
0001d068 l       .debug_str	00000000 
0001d0b0 l       .debug_str	00000000 
0001d0c1 l       .debug_str	00000000 
0002b97c l       .debug_str	00000000 
0001d0fc l       .debug_str	00000000 
0001d138 l       .debug_str	00000000 
0001d13e l       .debug_str	00000000 
0001d174 l       .debug_str	00000000 
0001d187 l       .debug_str	00000000 
0001d1be l       .debug_str	00000000 
0001d1d2 l       .debug_str	00000000 
0001d214 l       .debug_str	00000000 
0001d233 l       .debug_str	00000000 
0001d278 l       .debug_str	00000000 
0001d293 l       .debug_str	00000000 
0001d2f8 l       .debug_str	00000000 
0001d35f l       .debug_str	00000000 
0001d36a l       .debug_str	00000000 
0001d3b0 l       .debug_str	00000000 
0001d3f6 l       .debug_str	00000000 
0001d400 l       .debug_str	00000000 
0001d447 l       .debug_str	00000000 
0001d452 l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
0001d499 l       .debug_str	00000000 
0001d4e2 l       .debug_str	00000000 
0001d52b l       .debug_str	00000000 
0001d564 l       .debug_str	00000000 
0001d57f l       .debug_str	00000000 
0001d58e l       .debug_str	00000000 
0001d5c7 l       .debug_str	00000000 
0001d5ec l       .debug_str	00000000 
0001d625 l       .debug_str	00000000 
0001d65e l       .debug_str	00000000 
0001d684 l       .debug_str	00000000 
0001d6bd l       .debug_str	00000000 
0001d6fb l       .debug_str	00000000 
0001d735 l       .debug_str	00000000 
0001d741 l       .debug_str	00000000 
0001d77d l       .debug_str	00000000 
0001d790 l       .debug_str	00000000 
0001d7cc l       .debug_str	00000000 
0001d7e5 l       .debug_str	00000000 
0001d822 l       .debug_str	00000000 
0001d833 l       .debug_str	00000000 
000154cf l       .debug_str	00000000 
0001d884 l       .debug_str	00000000 
0001a5c3 l       .debug_str	00000000 
0001d8d5 l       .debug_str	00000000 
0001d930 l       .debug_str	00000000 
0001d993 l       .debug_str	00000000 
0001d9af l       .debug_str	00000000 
0001da0f l       .debug_str	00000000 
0001da6f l       .debug_str	00000000 
0001dad3 l       .debug_str	00000000 
0001daee l       .debug_str	00000000 
0001db52 l       .debug_str	00000000 
0001db5d l       .debug_str	00000000 
0001dbc7 l       .debug_str	00000000 
0001dbd6 l       .debug_str	00000000 
0001dc45 l       .debug_str	00000000 
0001dc5d l       .debug_str	00000000 
0001dccd l       .debug_str	00000000 
0001dce6 l       .debug_str	00000000 
0001dd51 l       .debug_str	00000000 
0001dd66 l       .debug_str	00000000 
0001ddd6 l       .debug_str	00000000 
0001ddeb l       .debug_str	00000000 
0001de5b l       .debug_str	00000000 
0001de6d l       .debug_str	00000000 
0000389e l       .debug_str	00000000 
0001dede l       .debug_str	00000000 
0001df4f l       .debug_str	00000000 
0001df65 l       .debug_str	00000000 
0001df77 l       .debug_str	00000000 
0001dfe3 l       .debug_str	00000000 
0001dff5 l       .debug_str	00000000 
0001e061 l       .debug_str	00000000 
0001e070 l       .debug_str	00000000 
0001e0d8 l       .debug_str	00000000 
0001e0e2 l       .debug_str	00000000 
0001e156 l       .debug_str	00000000 
00001425 l       .debug_str	00000000 
0001e161 l       .debug_str	00000000 
0001e1d9 l       .debug_str	00000000 
0001e1f2 l       .debug_str	00000000 
0001e26a l       .debug_str	00000000 
0001e300 l       .debug_str	00000000 
0001e31c l       .debug_str	00000000 
0001e3b2 l       .debug_str	00000000 
0001e448 l       .debug_str	00000000 
0001e4de l       .debug_str	00000000 
00014a29 l       .debug_str	00000000 
0001e553 l       .debug_str	00000000 
0001e5c7 l       .debug_str	00000000 
0001e640 l       .debug_str	00000000 
0001e6bf l       .debug_str	00000000 
0001e6d0 l       .debug_str	00000000 
0001e750 l       .debug_str	00000000 
0001e7b2 l       .debug_str	00000000 
0001fd10 l       .debug_str	00000000 
0001e803 l       .debug_str	00000000 
0001e825 l       .debug_str	00000000 
0001e852 l       .debug_str	00000000 
0001e881 l       .debug_str	00000000 
0001e8a3 l       .debug_str	00000000 
0001e8ca l       .debug_str	00000000 
0001e8f3 l       .debug_str	00000000 
0001e925 l       .debug_str	00000000 
00011018 l       .debug_str	00000000 
0001e975 l       .debug_str	00000000 
0001e9bb l       .debug_str	00000000 
0001e9ce l       .debug_str	00000000 
0001ea22 l       .debug_str	00000000 
0001ea94 l       .debug_str	00000000 
0001eb06 l       .debug_str	00000000 
0001eb78 l       .debug_str	00000000 
0001ebc7 l       .debug_str	00000000 
0001ebf5 l       .debug_str	00000000 
0001ec00 l       .debug_str	00000000 
0001ec5a l       .debug_str	00000000 
0001ecd2 l       .debug_str	00000000 
0001ed4a l       .debug_str	00000000 
0001ed9f l       .debug_str	00000000 
0001edd4 l       .debug_str	00000000 
0000b6c3 l       .debug_str	00000000 
0001edff l       .debug_str	00000000 
000374e7 l       .debug_str	00000000 
0001ee2e l       .debug_str	00000000 
0001ee5e l       .debug_str	00000000 
0001ee76 l       .debug_str	00000000 
0001eea7 l       .debug_str	00000000 
0001eed9 l       .debug_str	00000000 
0001ef18 l       .debug_str	00000000 
0001ef2b l       .debug_str	00000000 
0001ef63 l       .debug_str	00000000 
0001ef6f l       .debug_str	00000000 
0001ef9f l       .debug_str	00000000 
0001efd0 l       .debug_str	00000000 
0001efd6 l       .debug_str	00000000 
0001f003 l       .debug_str	00000000 
0001f034 l       .debug_str	00000000 
0001f067 l       .debug_str	00000000 
0001f081 l       .debug_str	00000000 
0001f0b5 l       .debug_str	00000000 
0001f0e8 l       .debug_str	00000000 
000517c1 l       .debug_str	00000000 
0001f135 l       .debug_str	00000000 
0001f17e l       .debug_str	00000000 
000517a4 l       .debug_str	00000000 
0001f1c9 l       .debug_str	00000000 
0001f1f1 l       .debug_str	00000000 
0001f237 l       .debug_str	00000000 
0001f23d l       .debug_str	00000000 
0001f26b l       .debug_str	00000000 
0001f287 l       .debug_str	00000000 
0001f2b4 l       .debug_str	00000000 
0001f2c4 l       .debug_str	00000000 
0001f31c l       .debug_str	00000000 
0001f375 l       .debug_str	00000000 
0001f398 l       .debug_str	00000000 
0001f3c7 l       .debug_str	00000000 
0001f3d9 l       .debug_str	00000000 
0001f40c l       .debug_str	00000000 
0001f422 l       .debug_str	00000000 
0001f46f l       .debug_str	00000000 
0001f4c2 l       .debug_str	00000000 
0001f4f5 l       .debug_str	00000000 
0001f505 l       .debug_str	00000000 
0001f55b l       .debug_str	00000000 
0001f5b5 l       .debug_str	00000000 
0001f603 l       .debug_str	00000000 
0001f655 l       .debug_str	00000000 
0001f6aa l       .debug_str	00000000 
0001f6fa l       .debug_str	00000000 
0001f74e l       .debug_str	00000000 
0001f7a5 l       .debug_str	00000000 
0001f7fb l       .debug_str	00000000 
0001f852 l       .debug_str	00000000 
0001f89e l       .debug_str	00000000 
0001f8e6 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0001f91b l       .debug_str	00000000 
0001f947 l       .debug_str	00000000 
0001f963 l       .debug_str	00000000 
0001f970 l       .debug_str	00000000 
0001f97e l       .debug_str	00000000 
0001f983 l       .debug_str	00000000 
0001f98a l       .debug_str	00000000 
0001f9a1 l       .debug_str	00000000 
0001f9b7 l       .debug_str	00000000 
0000bb39 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0001f9c7 l       .debug_str	00000000 
00052a0d l       .debug_str	00000000 
0001f9ea l       .debug_str	00000000 
000527b3 l       .debug_str	00000000 
0001fa0c l       .debug_str	00000000 
0001925a l       .debug_str	00000000 
0001fa0b l       .debug_str	00000000 
0001400c l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0001fa12 l       .debug_str	00000000 
0001fa65 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0001fa86 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0001fa8b l       .debug_str	00000000 
00019271 l       .debug_str	00000000 
0001fa9f l       .debug_str	00000000 
0001fab3 l       .debug_str	00000000 
0001fabc l       .debug_str	00000000 
0001fac7 l       .debug_str	00000000 
0001fad9 l       .debug_str	00000000 
0001faed l       .debug_str	00000000 
0001fafe l       .debug_str	00000000 
0001fb18 l       .debug_str	00000000 
0001fb48 l       .debug_str	00000000 
0001fb63 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016796 l       .debug_str	00000000 
000167d0 l       .debug_str	00000000 
00016809 l       .debug_str	00000000 
00016818 l       .debug_str	00000000 
0001685b l       .debug_str	00000000 
00053cde l       .debug_str	00000000 
00030669 l       .debug_str	00000000 
00055703 l       .debug_str	00000000 
0001fb83 l       .debug_str	00000000 
0001fba2 l       .debug_str	00000000 
00057c33 l       .debug_str	00000000 
0001fbc5 l       .debug_str	00000000 
00052a2c l       .debug_str	00000000 
0001330f l       .debug_str	00000000 
0001fbcb l       .debug_str	00000000 
0000bfe3 l       .debug_str	00000000 
0001fbd3 l       .debug_str	00000000 
000535e5 l       .debug_str	00000000 
00058dd7 l       .debug_str	00000000 
000166e8 l       .debug_str	00000000 
00054054 l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
00011d31 l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0000b6ea l       .debug_str	00000000 
0001fbdb l       .debug_str	00000000 
0000b786 l       .debug_str	00000000 
0000b796 l       .debug_str	00000000 
0000b7a1 l       .debug_str	00000000 
00052291 l       .debug_str	00000000 
0001fbfa l       .debug_str	00000000 
0001fc19 l       .debug_str	00000000 
0001fc2b l       .debug_str	00000000 
00017016 l       .debug_str	00000000 
00011e36 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00001d54 l       .debug_str	00000000 
00059344 l       .debug_str	00000000 
00053eff l       .debug_str	00000000 
0002f003 l       .debug_str	00000000 
0001fc9d l       .debug_str	00000000 
0001a938 l       .debug_str	00000000 
0001fcaf l       .debug_str	00000000 
00057bfa l       .debug_str	00000000 
0001fcc3 l       .debug_str	00000000 
0001fcd9 l       .debug_str	00000000 
0001fce9 l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
0001fcf5 l       .debug_str	00000000 
0001fd0a l       .debug_str	00000000 
0001fd21 l       .debug_str	00000000 
0001fd20 l       .debug_str	00000000 
00011d2d l       .debug_str	00000000 
00011d38 l       .debug_str	00000000 
00011099 l       .debug_str	00000000 
00011d44 l       .debug_str	00000000 
00011d4f l       .debug_str	00000000 
00011d5a l       .debug_str	00000000 
00011d65 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001a6fb l       .debug_str	00000000 
0001a74d l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00051709 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0001a794 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001a79b l       .debug_str	00000000 
0001bad7 l       .debug_str	00000000 
0001fb03 l       .debug_str	00000000 
00019276 l       .debug_str	00000000 
0001a7a4 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0001f238 l       .debug_str	00000000 
0001a7ab l       .debug_str	00000000 
0001a7ce l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
0001329d l       .debug_str	00000000 
000132a2 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
000132cf l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001fb90 l       .debug_str	00000000 
00013324 l       .debug_str	00000000 
0001a7d4 l       .debug_str	00000000 
0001a7f6 l       .debug_str	00000000 
0001a80b l       .debug_str	00000000 
0001a83d l       .debug_str	00000000 
0001a84d l       .debug_str	00000000 
0001a87a l       .debug_str	00000000 
0001a88b l       .debug_str	00000000 
0001a8b9 l       .debug_str	00000000 
0001a8cb l       .debug_str	00000000 
0001faa9 l       .debug_str	00000000 
0001fcee l       .debug_str	00000000 
0000c384 l       .debug_str	00000000 
0001a8fa l       .debug_str	00000000 
0001fac1 l       .debug_str	00000000 
00001dd1 l       .debug_str	00000000 
000163b7 l       .debug_str	00000000 
00012605 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
0002bfd5 l       .debug_str	00000000 
0001260a l       .debug_str	00000000 
0001faf8 l       .debug_str	00000000 
0001a921 l       .debug_str	00000000 
0001fae4 l       .debug_str	00000000 
0001fade l       .debug_str	00000000 
00046608 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000315ad l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
000310c3 l       .debug_str	00000000 
000547ac l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058de6 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005241e l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0001f9dc l       .debug_str	00000000 
00052395 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fb59 l       .debug_str	00000000 
0001fb4d l       .debug_str	00000000 
0001fb2c l       .debug_str	00000000 
0001fb1d l       .debug_str	00000000 
0001fb77 l       .debug_str	00000000 
0001fb68 l       .debug_str	00000000 
0001a928 l       .debug_str	00000000 
0001a931 l       .debug_str	00000000 
00052410 l       .debug_str	00000000 
000516dd l       .debug_str	00000000 
0001fad2 l       .debug_str	00000000 
0001facc l       .debug_str	00000000 
0001faf2 l       .debug_str	00000000 
0001fab8 l       .debug_str	00000000 
00056394 l       .debug_str	00000000 
0002d388 l       .debug_str	00000000 
00013a19 l       .debug_str	00000000 
00013a1e l       .debug_str	00000000 
00013a24 l       .debug_str	00000000 
00016c78 l       .debug_str	00000000 
00012cd8 l       .debug_str	00000000 
0002b688 l       .debug_str	00000000 
000568dc l       .debug_str	00000000 
0001a93d l       .debug_str	00000000 
000132a9 l       .debug_str	00000000 
000132b1 l       .debug_str	00000000 
00012030 l     F .text	0000002a _ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E
00012006 l     F .text	0000002a _ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE
00011f2c l     F .text	0000009c _ZN3log13RecordBuilder3new17haca8312579858419E
00011fc8 l     F .text	00000022 _ZN3log13RecordBuilder4args17h0d0d49873389eda9E
0001205a l     F .text	00000010 _ZN3log13RecordBuilder4line17h44de9f431bb34307E
0001206a l     F .text	00000010 _ZN3log13RecordBuilder5build17h83529556a009112eE
00011fea l     F .text	0000000c _ZN3log13RecordBuilder5level17h0f95d7860f854eb5E
00011ff6 l     F .text	00000010 _ZN3log13RecordBuilder6target17hd1b0e0684e399993E
0001221e l     F .text	00000012 _ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E
00012084 l     F .text	00000028 _ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E
000120ac l     F .text	00000010 _ZN3log15MetadataBuilder5build17h2478972692162fc0E
20004a68 l     O .bss	00000004 _ZN3log5STATE17hc9404a0f5c97cef6E
200000f0 l     O .data	00000008 _ZN3log6LOGGER17hc33d4d9c061fc628E
00011f22 l     F .text	0000000a _ZN3log6Record7builder17hde62ab0132265febE
0001df84 l     O .text	00000000 _ZN3log6logger3NOP17h5a3de47970f20990E
0001207a l     F .text	0000000a _ZN3log8Metadata7builder17ha56bd59835d60a3cE
00011f18 l     F .text	0000000a _ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E
00011cae l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E
00011ce6 l     F .text	00000016 _ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE
00011cfc l     F .text	00000008 _ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE
00011d0c l     F .text	00000028 _ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E
00011db0 l     F .text	0000000a _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E
00012244 l     F .text	000000aa _ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E
000122ee l     F .text	0000003a _ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E
00012230 l     F .text	00000014 _ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE
00011e7c l     F .text	00000012 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E
00000000 l    df *ABS*	00000000 memchr.2yzmedhn-cgu.0
0002038c l       .debug_str	00000000 
00013c22 l       .debug_str	00000000 
000192f5 l       .debug_str	00000000 
0001fdd8 l       .debug_str	00000000 
0001fe0d l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00011e3b l       .debug_str	00000000 
0005731f l       .debug_str	00000000 
0001fe19 l       .debug_str	00000000 
0001fe51 l       .debug_str	00000000 
0001fe6b l       .debug_str	00000000 
0001fe75 l       .debug_str	00000000 
0001fe7d l       .debug_str	00000000 
0001fe85 l       .debug_str	00000000 
0001fec1 l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0001fed4 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0001fedc l       .debug_str	00000000 
0001ff14 l       .debug_str	00000000 
00011b08 l       .debug_str	00000000 
0001ff1c l       .debug_str	00000000 
0001ff54 l       .debug_str	00000000 
0001ff5c l       .debug_str	00000000 
0001ff94 l       .debug_str	00000000 
0001ffae l       .debug_str	00000000 
0001ffb7 l       .debug_str	00000000 
0001ffef l       .debug_str	00000000 
0001fff8 l       .debug_str	00000000 
00020030 l       .debug_str	00000000 
00013d74 l       .debug_str	00000000 
0002284e l       .debug_str	00000000 
000200b8 l       .debug_str	00000000 
00020100 l       .debug_str	00000000 
0002010b l       .debug_str	00000000 
0001976a l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
00020149 l       .debug_str	00000000 
0001b5f0 l       .debug_str	00000000 
00020172 l       .debug_str	00000000 
00020197 l       .debug_str	00000000 
0001678f l       .debug_str	00000000 
0001b6e6 l       .debug_str	00000000 
000201f6 l       .debug_str	00000000 
0001b738 l       .debug_str	00000000 
0002021e l       .debug_str	00000000 
0002024f l       .debug_str	00000000 
0002025b l       .debug_str	00000000 
000202ba l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
000202ec l       .debug_str	00000000 
00020334 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
00020341 l       .debug_str	00000000 
0002039c l       .debug_str	00000000 
000203aa l       .debug_str	00000000 
0001b960 l       .debug_str	00000000 
0001bb5a l       .debug_str	00000000 
0000ea25 l       .debug_str	00000000 
000203f2 l       .debug_str	00000000 
0001bba6 l       .debug_str	00000000 
0002042d l       .debug_str	00000000 
00020464 l       .debug_str	00000000 
0002047d l       .debug_str	00000000 
00020489 l       .debug_str	00000000 
000148c3 l       .debug_str	00000000 
000204db l       .debug_str	00000000 
00014933 l       .debug_str	00000000 
00020530 l       .debug_str	00000000 
0002046a l       .debug_str	00000000 
00020563 l       .debug_str	00000000 
00019ec8 l       .debug_str	00000000 
000205a9 l       .debug_str	00000000 
00014853 l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
00054bd9 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
000205f2 l       .debug_str	00000000 
0002307b l       .debug_str	00000000 
00020603 l       .debug_str	00000000 
00020678 l       .debug_str	00000000 
000206a5 l       .debug_str	00000000 
0001a1e8 l       .debug_str	00000000 
00020731 l       .debug_str	00000000 
000207b4 l       .debug_str	00000000 
000207e3 l       .debug_str	00000000 
00011018 l       .debug_str	00000000 
00020830 l       .debug_str	00000000 
00020860 l       .debug_str	00000000 
000208ae l       .debug_str	00000000 
000208de l       .debug_str	00000000 
0002092c l       .debug_str	00000000 
0002095c l       .debug_str	00000000 
000209aa l       .debug_str	00000000 
000209db l       .debug_str	00000000 
00020a2a l       .debug_str	00000000 
00020a5b l       .debug_str	00000000 
00020aaa l       .debug_str	00000000 
00020ada l       .debug_str	00000000 
00020ae2 l       .debug_str	00000000 
00020b12 l       .debug_str	00000000 
00020b1a l       .debug_str	00000000 
00020b58 l       .debug_str	00000000 
00020b6d l       .debug_str	00000000 
0000bf06 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000abfe l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00052a0d l       .debug_str	00000000 
000527b3 l       .debug_str	00000000 
0001fa0c l       .debug_str	00000000 
0001925a l       .debug_str	00000000 
0001400c l       .debug_str	00000000 
00020b99 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
00053e42 l       .debug_str	00000000 
0005725c l       .debug_str	00000000 
00052262 l       .debug_str	00000000 
00058ecc l       .debug_str	00000000 
000168b4 l       .debug_str	00000000 
00020bef l       .debug_str	00000000 
00013c57 l       .debug_str	00000000 
00020bee l       .debug_str	00000000 
00020bf2 l       .debug_str	00000000 
00020bfc l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
0005479a l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
00020c02 l       .debug_str	00000000 
00020c06 l       .debug_str	00000000 
0001fecf l       .debug_str	00000000 
00020c0b l       .debug_str	00000000 
00020c0a l       .debug_str	00000000 
00020c0e l       .debug_str	00000000 
00020c12 l       .debug_str	00000000 
00020c17 l       .debug_str	00000000 
00020c16 l       .debug_str	00000000 
00020c1a l       .debug_str	00000000 
00020c1e l       .debug_str	00000000 
00052291 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001fd39 l       .debug_str	00000000 
0001fd8e l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046608 l       .debug_str	00000000 
000315ad l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00056394 l       .debug_str	00000000 
0002d388 l       .debug_str	00000000 
00013a19 l       .debug_str	00000000 
00013a1e l       .debug_str	00000000 
00013a24 l       .debug_str	00000000 
00016c78 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00013a32 l       .debug_str	00000000 
00030279 l       .debug_str	00000000 
0002afe8 l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058de6 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f9dc l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052395 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
000565b0 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000310c3 l       .debug_str	00000000 
000547ac l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005241e l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fb59 l       .debug_str	00000000 
0000e9ed l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013b76 l       .debug_str	00000000 
0001236e l     F .text	0000006e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE
00000000 l    df *ABS*	00000000 1sklumn9v47r13ke
0001fa0c l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00019276 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00056394 l       .debug_str	00000000 
0002afe8 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00020c22 l       .debug_str	00000000 
0002b896 l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
00020c83 l       .debug_str	00000000 
00013234 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2la8qm50nrg05wyh
00029090 l       .debug_str	00000000 
0002284e l       .debug_str	00000000 
000212e7 l       .debug_str	00000000 
00021352 l       .debug_str	00000000 
00021398 l       .debug_str	00000000 
0002140a l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
0002164f l       .debug_str	00000000 
000216c1 l       .debug_str	00000000 
0002170b l       .debug_str	00000000 
00021755 l       .debug_str	00000000 
000219a2 l       .debug_str	00000000 
000219de l       .debug_str	00000000 
000361f7 l       .debug_str	00000000 
0000395c l       .debug_str	00000000 
00021a23 l       .debug_str	00000000 
00021a60 l       .debug_str	00000000 
00021aa6 l       .debug_str	00000000 
00021ae3 l       .debug_str	00000000 
00021d24 l       .debug_str	00000000 
00021d64 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00021fa8 l       .debug_str	00000000 
000221fc l       .debug_str	00000000 
00022255 l       .debug_str	00000000 
000224a5 l       .debug_str	00000000 
0001fa0c l       .debug_str	00000000 
00012d00 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00057d24 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
00053e42 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00005b05 l       .debug_str	00000000 
00005b73 l       .debug_str	00000000 
00005c0a l       .debug_str	00000000 
00005cca l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005ec5 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
00006164 l       .debug_str	00000000 
000062f1 l       .debug_str	00000000 
000064a7 l       .debug_str	00000000 
00006686 l       .debug_str	00000000 
0000688e l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0002d51c l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
00052825 l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000077a3 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000094f8 l       .debug_str	00000000 
0000971c l       .debug_str	00000000 
0000994d l       .debug_str	00000000 
00009b75 l       .debug_str	00000000 
00009dbe l       .debug_str	00000000 
0000a024 l       .debug_str	00000000 
0005725c l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00052736 l       .debug_str	00000000 
00029104 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00021fbc l       .debug_str	00000000 
0000590a l       .debug_str	00000000 
00005958 l       .debug_str	00000000 
000059c3 l       .debug_str	00000000 
00022210 l       .debug_str	00000000 
00020ce6 l       .debug_str	00000000 
00020d4e l       .debug_str	00000000 
00020f8e l       .debug_str	00000000 
00020ff6 l       .debug_str	00000000 
0002103b l       .debug_str	00000000 
000210a6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xneats2au1n52xr
0002254b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00013237 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000224fa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3hq83qlgyhwbaj1j
00000beb l       .debug_str	00000000 
00052395 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00019262 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0000bb40 l       .debug_str	00000000 
00019276 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046608 l       .debug_str	00000000 
000315ad l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000565b0 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002256d l       .debug_str	00000000 
000225c9 l       .debug_str	00000000 
00022626 l       .debug_str	00000000 
00022683 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058de6 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f9dc l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4dguvrsipkvuzwcx
0001fac1 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001fa0c l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000a54c l       .debug_str	00000000 
0002284e l       .debug_str	00000000 
0002284d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00056394 l       .debug_str	00000000 
0002afe8 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002d388 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00052736 l       .debug_str	00000000 
00052825 l       .debug_str	00000000 
000226e0 l       .debug_str	00000000 
00022751 l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002275d l       .debug_str	00000000 
00015159 l       .debug_str	00000000 
000227ce l       .debug_str	00000000 
0002283f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 501bil2zkh495ov3
00022bd8 l       .debug_str	00000000 
00022c43 l       .debug_str	00000000 
00022d0b l       .debug_str	00000000 
00022c79 l       .debug_str	00000000 
00022cb0 l       .debug_str	00000000 
00022cc3 l       .debug_str	00000000 
00022d02 l       .debug_str	00000000 
00022d1d l       .debug_str	00000000 
00022d55 l       .debug_str	00000000 
00022d69 l       .debug_str	00000000 
00022d95 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00019262 l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
00057bfa l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000310c3 l       .debug_str	00000000 
000547ac l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058de6 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005241e l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f9dc l       .debug_str	00000000 
00052395 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fb59 l       .debug_str	00000000 
0001fb4d l       .debug_str	00000000 
00019276 l       .debug_str	00000000 
0000bb39 l       .debug_str	00000000 
00052a2c l       .debug_str	00000000 
00057bf9 l       .debug_str	00000000 
00022d9e l       .debug_str	00000000 
0002284e l       .debug_str	00000000 
00017016 l       .debug_str	00000000 
00022da2 l       .debug_str	00000000 
00057127 l       .debug_str	00000000 
000049e8 l       .debug_str	00000000 
000049f0 l       .debug_str	00000000 
000049f9 l       .debug_str	00000000 
00004a07 l       .debug_str	00000000 
00004a0e l       .debug_str	00000000 
0000468e l       .debug_str	00000000 
0000469e l       .debug_str	00000000 
000046a7 l       .debug_str	00000000 
000046b5 l       .debug_str	00000000 
000046c3 l       .debug_str	00000000 
000046cf l       .debug_str	00000000 
000048dd l       .debug_str	00000000 
000046db l       .debug_str	00000000 
000046ea l       .debug_str	00000000 
000046f2 l       .debug_str	00000000 
0000470b l       .debug_str	00000000 
0000471c l       .debug_str	00000000 
00004724 l       .debug_str	00000000 
00004757 l       .debug_str	00000000 
0000473e l       .debug_str	00000000 
00004763 l       .debug_str	00000000 
00001d54 l       .debug_str	00000000 
00004795 l       .debug_str	00000000 
0000477c l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047c2 l       .debug_str	00000000 
000047a9 l       .debug_str	00000000 
00004a15 l       .debug_str	00000000 
00004a78 l       .debug_str	00000000 
00004a1d l       .debug_str	00000000 
00004a3c l       .debug_str	00000000 
00004a70 l       .debug_str	00000000 
00004a57 l       .debug_str	00000000 
00056205 l       .debug_str	00000000 
00044852 l       .debug_str	00000000 
00023949 l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
00053a17 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00022daa l       .debug_str	00000000 
0005725b l       .debug_str	00000000 
0005559b l       .debug_str	00000000 
0005348d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000551be l       .debug_str	00000000 
0000bfc3 l       .debug_str	00000000 
000527d0 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000bfd4 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000bfde l       .debug_str	00000000 
0000bfe9 l       .debug_str	00000000 
0000bff3 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00023093 l       .debug_str	00000000 
00022854 l       .debug_str	00000000 
00022885 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00057d24 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
00053e42 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0002d51c l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
00052825 l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000590a l       .debug_str	00000000 
00005958 l       .debug_str	00000000 
000059c3 l       .debug_str	00000000 
0005725c l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00052736 l       .debug_str	00000000 
00029090 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00022210 l       .debug_str	00000000 
00022891 l       .debug_str	00000000 
000228c1 l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00005b05 l       .debug_str	00000000 
00005b73 l       .debug_str	00000000 
00005c0a l       .debug_str	00000000 
00005cca l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005ec5 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
00006164 l       .debug_str	00000000 
000062f1 l       .debug_str	00000000 
000064a7 l       .debug_str	00000000 
00006686 l       .debug_str	00000000 
0000688e l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000077a3 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000094f8 l       .debug_str	00000000 
0000971c l       .debug_str	00000000 
0000994d l       .debug_str	00000000 
00009b75 l       .debug_str	00000000 
00009dbe l       .debug_str	00000000 
0000a024 l       .debug_str	00000000 
00029104 l       .debug_str	00000000 
00021fbc l       .debug_str	00000000 
000228ce l       .debug_str	00000000 
000228ff l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003a1e1 l       .debug_str	00000000 
00005699 l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005709e l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00051ae3 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
00057ed9 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
0000561d l       .debug_str	00000000 
00047186 l       .debug_str	00000000 
000056a2 l       .debug_str	00000000 
000056ad l       .debug_str	00000000 
00022907 l       .debug_str	00000000 
00022932 l       .debug_str	00000000 
00022943 l       .debug_str	00000000 
00022978 l       .debug_str	00000000 
00004c1d l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
000048d4 l       .debug_str	00000000 
000048dc l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000048e6 l       .debug_str	00000000 
00004b8c l       .debug_str	00000000 
00004b73 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004b6e l       .debug_str	00000000 
00004b9b l       .debug_str	00000000 
00004c25 l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
00055428 l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
00004c2b l       .debug_str	00000000 
00022987 l       .debug_str	00000000 
000229ba l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
000229ca l       .debug_str	00000000 
000229fe l       .debug_str	00000000 
00022a07 l       .debug_str	00000000 
00022a33 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00022a42 l       .debug_str	00000000 
00022a75 l       .debug_str	00000000 
00022a82 l       .debug_str	00000000 
00022a8e l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00046608 l       .debug_str	00000000 
000315ad l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00022abf l       .debug_str	00000000 
00022af4 l       .debug_str	00000000 
000361f7 l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
00022b05 l       .debug_str	00000000 
00022b37 l       .debug_str	00000000 
00022b45 l       .debug_str	00000000 
00022b83 l       .debug_str	00000000 
00022b9d l       .debug_str	00000000 
00022bef l       .debug_str	00000000 
00022c2b l       .debug_str	00000000 
20004a70 l     O .bss	00000008 _ZN6mynewt3spi11PENDING_CMD17hd08bb758c99a7708E
20004a78 l     O .bss	00002004 _ZN6mynewt3spi12PENDING_DATA17hf749c482f1fd6e90E
20006f04 l     O .bss	00000000 _ZN6mynewt3spi12SPI_CALLBACK17h9820a4217e4879a6E
200000f8 l     O .data	00000008 _ZN6mynewt3spi12SPI_SETTINGS17h4a4473e27299c06dE
000130fa l     F .text	0000003a _ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E
20006a8c l     O .bss	00000018 _ZN6mynewt3spi14SPI_DATA_QUEUE17h4880c24292cc1218E
20006b04 l     O .bss	00000400 _ZN6mynewt3spi14SPI_TASK_STACK17h041a1fc76b4d16c1E
20006aa4 l     O .bss	00000010 _ZN6mynewt3spi15SPI_EVENT_QUEUE17h4e2cf68a255fc2fdE
20006a84 l     O .bss	00000008 _ZN6mynewt3spi16SPI_THROTTLE_SEM17h1f0932d6e65cb8daE
00013412 l     F .text	000001ea _ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E
000135fc l     F .text	000002e8 _ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E
00013c1a l     F .text	00000128 _ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E
000138e4 l     F .text	00000336 _ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E
20006a7c l     O .bss	00000008 _ZN6mynewt3spi7SPI_SEM17hd7399e388b8e657cE
20006ab4 l     O .bss	00000050 _ZN6mynewt3spi8SPI_TASK17h4c45c24ee73ad430E
00013d42 l     F .text	00000054 _ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E
0001e180 l     O .text	0000001c str.0
0001e1e0 l     O .text	00000021 str.1
0001e240 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 53x3bckk5lzipnpa
00000c52 l       .debug_str	00000000 
000310c3 l       .debug_str	00000000 
000547ac l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058de6 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005241e l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f9dc l       .debug_str	00000000 
00052395 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fb59 l       .debug_str	00000000 
0001fb4d l       .debug_str	00000000 
000230a4 l       .debug_str	00000000 
0002284e l       .debug_str	00000000 
000230aa l       .debug_str	00000000 
0000e79b l       .debug_str	00000000 
0005559b l       .debug_str	00000000 
0005348d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00046608 l       .debug_str	00000000 
000315ad l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
00023079 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000525f0 l       .debug_str	00000000 
000230bc l       .debug_str	00000000 
0000e7ad l       .debug_str	00000000 
00022db5 l       .debug_str	00000000 
000374e7 l       .debug_str	00000000 
00022de0 l       .debug_str	00000000 
00057c33 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000361f7 l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
00022e0c l       .debug_str	00000000 
00058f2f l       .debug_str	00000000 
00022e7d l       .debug_str	00000000 
00022ea9 l       .debug_str	00000000 
00022ed6 l       .debug_str	00000000 
00022f42 l       .debug_str	00000000 
00022f4a l       .debug_str	00000000 
00022fb7 l       .debug_str	00000000 
00022fc0 l       .debug_str	00000000 
00022fed l       .debug_str	00000000 
00022d95 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00023067 l       .debug_str	00000000 
00023097 l       .debug_str	00000000 
000527d0 l       .debug_str	00000000 
0000bfd4 l       .debug_str	00000000 
0000bfde l       .debug_str	00000000 
0000bfe9 l       .debug_str	00000000 
0000bff3 l       .debug_str	00000000 
00023093 l       .debug_str	00000000 
0002307d l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00019262 l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001e440 l     O .text	00000021 str.0
00000000 l    df *ABS*	00000000 n1xzuhnvw82wqrn
00004a1d l       .debug_str	00000000 
00004a3c l       .debug_str	00000000 
00004a70 l       .debug_str	00000000 
000230c1 l       .debug_str	00000000 
00023113 l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013b6e l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003a1e1 l       .debug_str	00000000 
000049e8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
000049f0 l       .debug_str	00000000 
000049f9 l       .debug_str	00000000 
00004a07 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00004a0e l       .debug_str	00000000 
0000468e l       .debug_str	00000000 
0000469e l       .debug_str	00000000 
000046a7 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000046b5 l       .debug_str	00000000 
000046c3 l       .debug_str	00000000 
000046cf l       .debug_str	00000000 
000048dd l       .debug_str	00000000 
000046db l       .debug_str	00000000 
000046ea l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000046f2 l       .debug_str	00000000 
0000470b l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
0000471c l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00004724 l       .debug_str	00000000 
00004757 l       .debug_str	00000000 
0000473e l       .debug_str	00000000 
00004763 l       .debug_str	00000000 
00001d54 l       .debug_str	00000000 
00004795 l       .debug_str	00000000 
0000477c l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047c2 l       .debug_str	00000000 
000047a9 l       .debug_str	00000000 
00004a15 l       .debug_str	00000000 
00004a57 l       .debug_str	00000000 
00004a78 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 num_traits.eydd4btj-cgu.0
00024463 l       .debug_str	00000000 
00023684 l       .debug_str	00000000 
00014853 l       .debug_str	00000000 
000236c7 l       .debug_str	00000000 
000148ba l       .debug_str	00000000 
00023723 l       .debug_str	00000000 
0001492a l       .debug_str	00000000 
00023782 l       .debug_str	00000000 
000148c3 l       .debug_str	00000000 
000237d4 l       .debug_str	00000000 
00023829 l       .debug_str	00000000 
0002387f l       .debug_str	00000000 
000238ad l       .debug_str	00000000 
000238b9 l       .debug_str	00000000 
000238eb l       .debug_str	00000000 
00023912 l       .debug_str	00000000 
00023944 l       .debug_str	00000000 
00023954 l       .debug_str	00000000 
00023989 l       .debug_str	00000000 
0002399c l       .debug_str	00000000 
000239d2 l       .debug_str	00000000 
000239e6 l       .debug_str	00000000 
00023a30 l       .debug_str	00000000 
00023a41 l       .debug_str	00000000 
0005725c l       .debug_str	00000000 
00023a7d l       .debug_str	00000000 
00051b0f l       .debug_str	00000000 
0005731f l       .debug_str	00000000 
00023abb l       .debug_str	00000000 
00023af9 l       .debug_str	00000000 
00013ce9 l       .debug_str	00000000 
00023b06 l       .debug_str	00000000 
000361f7 l       .debug_str	00000000 
00023b14 l       .debug_str	00000000 
00023b3c l       .debug_str	00000000 
0000168b l       .debug_str	00000000 
00023b7b l       .debug_str	00000000 
00023ba9 l       .debug_str	00000000 
00023bb0 l       .debug_str	00000000 
00023c53 l       .debug_str	00000000 
00023c61 l       .debug_str	00000000 
000389f0 l       .debug_str	00000000 
00023cf9 l       .debug_str	00000000 
00023d93 l       .debug_str	00000000 
00011018 l       .debug_str	00000000 
00023e4b l       .debug_str	00000000 
0002b896 l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
000205f2 l       .debug_str	00000000 
00023eae l       .debug_str	00000000 
00023f20 l       .debug_str	00000000 
00023f4a l       .debug_str	00000000 
00023f88 l       .debug_str	00000000 
00023f9b l       .debug_str	00000000 
00023fe6 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
00023fef l       .debug_str	00000000 
00024031 l       .debug_str	00000000 
000252f2 l       .debug_str	00000000 
0002406b l       .debug_str	00000000 
000240b0 l       .debug_str	00000000 
000240cc l       .debug_str	00000000 
0002410f l       .debug_str	00000000 
00024125 l       .debug_str	00000000 
0002418a l       .debug_str	00000000 
000241ef l       .debug_str	00000000 
0002422a l       .debug_str	00000000 
00024237 l       .debug_str	00000000 
0002046a l       .debug_str	00000000 
0002426a l       .debug_str	00000000 
0000a8e2 l       .debug_str	00000000 
000242b0 l       .debug_str	00000000 
00019ec8 l       .debug_str	00000000 
000242f6 l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
0002433d l       .debug_str	00000000 
00024386 l       .debug_str	00000000 
00015159 l       .debug_str	00000000 
0001fac1 l       .debug_str	00000000 
0001678f l       .debug_str	00000000 
00011b08 l       .debug_str	00000000 
00011e3b l       .debug_str	00000000 
000243ff l       .debug_str	00000000 
00024444 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0002449c l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
000244b4 l       .debug_str	00000000 
000244ef l       .debug_str	00000000 
00024513 l       .debug_str	00000000 
00024539 l       .debug_str	00000000 
00024574 l       .debug_str	00000000 
00024597 l       .debug_str	00000000 
000245bc l       .debug_str	00000000 
000245f9 l       .debug_str	00000000 
00024610 l       .debug_str	00000000 
0002464d l       .debug_str	00000000 
00024664 l       .debug_str	00000000 
00015594 l       .debug_str	00000000 
000246b5 l       .debug_str	00000000 
00017362 l       .debug_str	00000000 
00024710 l       .debug_str	00000000 
00024773 l       .debug_str	00000000 
000247b5 l       .debug_str	00000000 
0001584d l       .debug_str	00000000 
00024819 l       .debug_str	00000000 
0001a1e8 l       .debug_str	00000000 
00024886 l       .debug_str	00000000 
0000abf6 l       .debug_str	00000000 
000248e8 l       .debug_str	00000000 
000248f6 l       .debug_str	00000000 
00024961 l       .debug_str	00000000 
0002497b l       .debug_str	00000000 
00024991 l       .debug_str	00000000 
000249fc l       .debug_str	00000000 
00024a0c l       .debug_str	00000000 
00024a78 l       .debug_str	00000000 
00024a8a l       .debug_str	00000000 
00024af6 l       .debug_str	00000000 
00024b07 l       .debug_str	00000000 
00024b6e l       .debug_str	00000000 
00024ba6 l       .debug_str	00000000 
00024c10 l       .debug_str	00000000 
00024c98 l       .debug_str	00000000 
0001376b l       .debug_str	00000000 
00024d0c l       .debug_str	00000000 
00024d8e l       .debug_str	00000000 
00024da5 l       .debug_str	00000000 
00024de3 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
0002bb08 l       .debug_str	00000000 
0002d388 l       .debug_str	00000000 
00024df6 l       .debug_str	00000000 
00024e05 l       .debug_str	00000000 
00024e43 l       .debug_str	00000000 
00024e56 l       .debug_str	00000000 
00024e82 l       .debug_str	00000000 
00024e8b l       .debug_str	00000000 
00024eb7 l       .debug_str	00000000 
00024ec0 l       .debug_str	00000000 
00024f20 l       .debug_str	00000000 
0002b549 l       .debug_str	00000000 
00024f71 l       .debug_str	00000000 
00024fc2 l       .debug_str	00000000 
0002501f l       .debug_str	00000000 
0002507d l       .debug_str	00000000 
00025362 l       .debug_str	00000000 
000250ce l       .debug_str	00000000 
000250f7 l       .debug_str	00000000 
0002515a l       .debug_str	00000000 
0002516b l       .debug_str	00000000 
00025178 l       .debug_str	00000000 
0002518d l       .debug_str	00000000 
000251de l       .debug_str	00000000 
00025207 l       .debug_str	00000000 
0002526a l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
00058de6 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0001f9dc l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052395 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0001fa0c l       .debug_str	00000000 
0002284d l       .debug_str	00000000 
00058dd7 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
00025287 l       .debug_str	00000000 
00053e42 l       .debug_str	00000000 
00030e83 l       .debug_str	00000000 
0001fecf l       .debug_str	00000000 
00016f75 l       .debug_str	00000000 
00052a2c l       .debug_str	00000000 
000517e3 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00057c33 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
000252a8 l       .debug_str	00000000 
00002535 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
000252ac l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00023319 l       .debug_str	00000000 
000252be l       .debug_str	00000000 
000252c3 l       .debug_str	00000000 
000252c8 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016754 l       .debug_str	00000000 
000252ed l       .debug_str	00000000 
00025329 l       .debug_str	00000000 
0005479a l       .debug_str	00000000 
000358af l       .debug_str	00000000 
0002533f l       .debug_str	00000000 
00025348 l       .debug_str	00000000 
0002eeb4 l       .debug_str	00000000 
0005287f l       .debug_str	00000000 
00044ac6 l       .debug_str	00000000 
00025351 l       .debug_str	00000000 
00025355 l       .debug_str	00000000 
0002f17a l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
00011d31 l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
00011d2d l       .debug_str	00000000 
00011d38 l       .debug_str	00000000 
00011099 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00025377 l       .debug_str	00000000 
00025372 l       .debug_str	00000000 
00052600 l       .debug_str	00000000 
0002537b l       .debug_str	00000000 
00030c51 l       .debug_str	00000000 
00025384 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0003370b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00023138 l       .debug_str	00000000 
00023192 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000c47d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002b7b3 l       .debug_str	00000000 
000231e1 l       .debug_str	00000000 
00025299 l       .debug_str	00000000 
0002528c l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046608 l       .debug_str	00000000 
000315ad l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000565b0 l       .debug_str	00000000 
000231e9 l       .debug_str	00000000 
000231f6 l       .debug_str	00000000 
000231ff l       .debug_str	00000000 
000516fd l       .debug_str	00000000 
0002bb7f l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00013a2c l       .debug_str	00000000 
00056394 l       .debug_str	00000000 
0002afe8 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013b6e l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002d362 l       .debug_str	00000000 
00013b76 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b253 l       .debug_str	00000000 
0000b294 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
0002284e l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00012cd8 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00058ecc l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013cc7 l       .debug_str	00000000 
00025339 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00052262 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00013237 l       .debug_str	00000000 
00054828 l       .debug_str	00000000 
000124c0 l       .debug_str	00000000 
0002e1dc l       .debug_str	00000000 
00011d91 l       .debug_str	00000000 
000527b3 l       .debug_str	00000000 
0002307b l       .debug_str	00000000 
0002530d l       .debug_str	00000000 
00013b86 l       .debug_str	00000000 
00023209 l       .debug_str	00000000 
00023247 l       .debug_str	00000000 
0001a9c9 l       .debug_str	00000000 
00054bd9 l       .debug_str	00000000 
0003e407 l       .debug_str	00000000 
00057cad l       .debug_str	00000000 
00023256 l       .debug_str	00000000 
00013bb5 l       .debug_str	00000000 
0002327f l       .debug_str	00000000 
0001aa3b l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001abf4 l       .debug_str	00000000 
0001fb77 l       .debug_str	00000000 
0000e7d8 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000232b1 l       .debug_str	00000000 
000252d7 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
000232bf l       .debug_str	00000000 
00013ca2 l       .debug_str	00000000 
00013cb5 l       .debug_str	00000000 
00057229 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
00042ab6 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00051898 l       .debug_str	00000000 
00023301 l       .debug_str	00000000 
00023305 l       .debug_str	00000000 
00023310 l       .debug_str	00000000 
0002331f l       .debug_str	00000000 
00023367 l       .debug_str	00000000 
00023387 l       .debug_str	00000000 
0003199d l       .debug_str	00000000 
000252bf l       .debug_str	00000000 
000233d2 l       .debug_str	00000000 
000252c4 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00052736 l       .debug_str	00000000 
00052825 l       .debug_str	00000000 
0002341d l       .debug_str	00000000 
0002283f l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
0002348e l       .debug_str	00000000 
0001433c l       .debug_str	00000000 
000234bc l       .debug_str	00000000 
0001b960 l       .debug_str	00000000 
00023504 l       .debug_str	00000000 
00023534 l       .debug_str	00000000 
0002355f l       .debug_str	00000000 
00020464 l       .debug_str	00000000 
0002047d l       .debug_str	00000000 
00023596 l       .debug_str	00000000 
00014933 l       .debug_str	00000000 
000235e7 l       .debug_str	00000000 
000147a7 l       .debug_str	00000000 
00023639 l       .debug_str	00000000 
000147fe l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19c5s2vweequjzfw
0000e9f4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00025390 l       .debug_str	00000000 
000253b9 l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
0002544a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000253c6 l       .debug_str	00000000 
00013bb5 l       .debug_str	00000000 
0000c47d l       .debug_str	00000000 
00056a31 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000253ef l       .debug_str	00000000 
00025444 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea13 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1bm86yaetip2rc3f
000257bf l       .debug_str	00000000 
00025627 l       .debug_str	00000000 
00025663 l       .debug_str	00000000 
0002567f l       .debug_str	00000000 
000256bb l       .debug_str	00000000 
000256f1 l       .debug_str	00000000 
0002572d l       .debug_str	00000000 
00025738 l       .debug_str	00000000 
00025774 l       .debug_str	00000000 
00025782 l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
000257f6 l       .debug_str	00000000 
00025833 l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
0002587f l       .debug_str	00000000 
000258c2 l       .debug_str	00000000 
000258ff l       .debug_str	00000000 
0000e9f9 l       .debug_str	00000000 
00025936 l       .debug_str	00000000 
00025974 l       .debug_str	00000000 
000259ab l       .debug_str	00000000 
000259ea l       .debug_str	00000000 
00025a23 l       .debug_str	00000000 
00025a87 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00025abc l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00025ad7 l       .debug_str	00000000 
00025b1c l       .debug_str	00000000 
00025b39 l       .debug_str	00000000 
00013cd7 l       .debug_str	00000000 
000192fe l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00011b08 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00019326 l       .debug_str	00000000 
0002544e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025b48 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00025acb l       .debug_str	00000000 
0000f46a l       .debug_str	00000000 
00056674 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
000252c4 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
000106cb l       .debug_str	00000000 
00025488 l       .debug_str	00000000 
00025ae6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000ea13 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
0002284e l       .debug_str	00000000 
00025b2b l       .debug_str	00000000 
0000e9f4 l       .debug_str	00000000 
000254a4 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000e85c l       .debug_str	00000000 
0000e865 l       .debug_str	00000000 
0000e873 l       .debug_str	00000000 
0001938c l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0000e88b l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000f23b l       .debug_str	00000000 
0000f246 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
00011e3b l       .debug_str	00000000 
0005731f l       .debug_str	00000000 
000254b1 l       .debug_str	00000000 
000254ea l       .debug_str	00000000 
00025585 l       .debug_str	00000000 
000255df l       .debug_str	00000000 
0002561b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1w4juabyv8bmed5v
00000d37 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fb59 l       .debug_str	00000000 
00025b8a l       .debug_str	00000000 
00025bd5 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001fab8 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046608 l       .debug_str	00000000 
000315ad l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000310c3 l       .debug_str	00000000 
000547ac l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058de6 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005241e l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f9dc l       .debug_str	00000000 
00052395 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2jbqb9ep0zzhh36j
0001ca72 l       .debug_str	00000000 
00026844 l       .debug_str	00000000 
00026851 l       .debug_str	00000000 
00026891 l       .debug_str	00000000 
0002698e l       .debug_str	00000000 
000269ce l       .debug_str	00000000 
000269dd l       .debug_str	00000000 
00026a1d l       .debug_str	00000000 
00026a3c l       .debug_str	00000000 
00026a7c l       .debug_str	00000000 
00026a98 l       .debug_str	00000000 
00026ad8 l       .debug_str	00000000 
00026ae6 l       .debug_str	00000000 
00026b26 l       .debug_str	00000000 
0005731f l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c494 l       .debug_str	00000000 
0001d584 l       .debug_str	00000000 
00000788 l       .debug_str	00000000 
00026b34 l       .debug_str	00000000 
00026b75 l       .debug_str	00000000 
0000c1d5 l       .debug_str	00000000 
00026baa l       .debug_str	00000000 
00011e3b l       .debug_str	00000000 
00026bb4 l       .debug_str	00000000 
00026bf5 l       .debug_str	00000000 
0001fa95 l       .debug_str	00000000 
00026c42 l       .debug_str	00000000 
00026c83 l       .debug_str	00000000 
00026cb8 l       .debug_str	00000000 
00026cc3 l       .debug_str	00000000 
00026d04 l       .debug_str	00000000 
00026d51 l       .debug_str	00000000 
00026d92 l       .debug_str	00000000 
00026dc7 l       .debug_str	00000000 
00026e36 l       .debug_str	00000000 
00026f37 l       .debug_str	00000000 
0001de5b l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00026fa6 l       .debug_str	00000000 
00026fc5 l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00017016 l       .debug_str	00000000 
0005266b l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
0000f46a l       .debug_str	00000000 
00056674 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
000252c4 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
000106cb l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00046608 l       .debug_str	00000000 
000163b7 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000361f7 l       .debug_str	00000000 
00026fb5 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
000586d6 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00057d24 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
00053e42 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00025c07 l       .debug_str	00000000 
00025c74 l       .debug_str	00000000 
00025d0a l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0002d51c l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
00052825 l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
0000f6f2 l       .debug_str	00000000 
0000f769 l       .debug_str	00000000 
0000f7ed l       .debug_str	00000000 
0000f868 l       .debug_str	00000000 
0000f906 l       .debug_str	00000000 
0000f9b1 l       .debug_str	00000000 
00025dc9 l       .debug_str	00000000 
00025e8e l       .debug_str	00000000 
00025f60 l       .debug_str	00000000 
00026029 l       .debug_str	00000000 
00026113 l       .debug_str	00000000 
0002621a l       .debug_str	00000000 
0005725c l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00052736 l       .debug_str	00000000 
00026320 l       .debug_str	00000000 
0002641e l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002651f l       .debug_str	00000000 
000265ff l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
000266fd l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
0000c1cc l       .debug_str	00000000 
0002671d l       .debug_str	00000000 
00026724 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0002672c l       .debug_str	00000000 
00026740 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00026772 l       .debug_str	00000000 
00026786 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000267b8 l       .debug_str	00000000 
000267f7 l       .debug_str	00000000 
00026805 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53kqumdi8360wwys
0002755c l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0000e85c l       .debug_str	00000000 
0000e865 l       .debug_str	00000000 
0000e873 l       .debug_str	00000000 
0001938c l       .debug_str	00000000 
0000e88b l       .debug_str	00000000 
00025585 l       .debug_str	00000000 
000273d8 l       .debug_str	00000000 
00027495 l       .debug_str	00000000 
000274d0 l       .debug_str	00000000 
00027529 l       .debug_str	00000000 
00025a87 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000275df l       .debug_str	00000000 
00027643 l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
00027646 l       .debug_str	00000000 
0000f26c l       .debug_str	00000000 
00011b08 l       .debug_str	00000000 
0002544e l       .debug_str	00000000 
00025b48 l       .debug_str	00000000 
00051a0e l       .debug_str	00000000 
0005932e l       .debug_str	00000000 
000276b6 l       .debug_str	00000000 
000276b9 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
00011e3b l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00011099 l       .debug_str	00000000 
0001927b l       .debug_str	00000000 
00011d44 l       .debug_str	00000000 
00011d4f l       .debug_str	00000000 
000276c6 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000f23b l       .debug_str	00000000 
0000f246 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
0000f250 l       .debug_str	00000000 
0000e885 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000192db l       .debug_str	00000000 
0000f259 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00019326 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025ae6 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002c668 l       .debug_str	00000000 
000276e1 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0002760a l       .debug_str	00000000 
00026fe3 l       .debug_str	00000000 
00027080 l       .debug_str	00000000 
000270b9 l       .debug_str	00000000 
00027158 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00027675 l       .debug_str	00000000 
00027191 l       .debug_str	00000000 
0002722e l       .debug_str	00000000 
00027262 l       .debug_str	00000000 
00027305 l       .debug_str	00000000 
000273a4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 tool5db1zbl71ep
000276c6 l       .debug_str	00000000 
000276e1 l       .debug_str	00000000 
00027785 l       .debug_str	00000000 
000277fa l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00011099 l       .debug_str	00000000 
00025ad7 l       .debug_str	00000000 
00011d44 l       .debug_str	00000000 
00011d4f l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00019326 l       .debug_str	00000000 
0002c668 l       .debug_str	00000000 
00027716 l       .debug_str	00000000 
00025a87 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025ae6 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ik332mkg6tevaet
0000bb41 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010b56 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
00010d3c l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00010d35 l       .debug_str	00000000 
00027831 l       .debug_str	00000000 
00011018 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00011e3b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1d7thnxtm1658vov
00000d1e l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fb59 l       .debug_str	00000000 
000278f6 l       .debug_str	00000000 
00027933 l       .debug_str	00000000 
00027944 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00046608 l       .debug_str	00000000 
000315ad l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000310c3 l       .debug_str	00000000 
000547ac l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058de6 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005241e l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f9dc l       .debug_str	00000000 
00052395 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1mpt8t9sy9fl5s1y
00027b3b l       .debug_str	00000000 
0000ea13 l       .debug_str	00000000 
000279ba l       .debug_str	00000000 
00019939 l       .debug_str	00000000 
000279ff l       .debug_str	00000000 
00027a44 l       .debug_str	00000000 
00027a51 l       .debug_str	00000000 
00027a96 l       .debug_str	00000000 
00027aa3 l       .debug_str	00000000 
0001b960 l       .debug_str	00000000 
00027ae8 l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
00027b30 l       .debug_str	00000000 
0000bf55 l       .debug_str	00000000 
00027b83 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00027bc9 l       .debug_str	00000000 
00027c0f l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005479a l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
000565b0 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00027976 l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1yr11byuhnx447wf
0001fa0c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00051709 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000163b7 l       .debug_str	00000000 
00012605 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
0001fc9d l       .debug_str	00000000 
0002bfd5 l       .debug_str	00000000 
0001260a l       .debug_str	00000000 
0001faf8 l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
0001fca3 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00027c55 l       .debug_str	00000000 
000199da l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001faf2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2c4l9zx47vkj1m82
0002d8fb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00013237 l       .debug_str	00000000 
000565b0 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00027cbe l       .debug_str	00000000 
00053c50 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2zdnjadro4igct6r
00019e7a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00027d2d l       .debug_str	00000000 
00027d53 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3w7pruxfhz9uhnv5
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00052262 l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
00054bd9 l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00058ecc l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
000168b4 l       .debug_str	00000000 
0002307b l       .debug_str	00000000 
00027d5c l       .debug_str	00000000 
00027dd8 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4wduwt141qumn59z
0000139d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00056394 l       .debug_str	00000000 
0002afe8 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0001fa0c l       .debug_str	00000000 
00027e05 l       .debug_str	00000000 
00013234 l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 pcinnba97cylogg
000166ef l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00012cd8 l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00027e67 l       .debug_str	00000000 
000166e1 l       .debug_str	00000000 
00014179 l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea13 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00052291 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 13ma8mzaba1sllzw
000283bd l       .debug_str	00000000 
000361f7 l       .debug_str	00000000 
0000395c l       .debug_str	00000000 
00028711 l       .debug_str	00000000 
00021a60 l       .debug_str	00000000 
00028790 l       .debug_str	00000000 
00021ae3 l       .debug_str	00000000 
0002880f l       .debug_str	00000000 
00028891 l       .debug_str	00000000 
0002284e l       .debug_str	00000000 
00028ad5 l       .debug_str	00000000 
00028b57 l       .debug_str	00000000 
00028ba0 l       .debug_str	00000000 
00028c22 l       .debug_str	00000000 
00028c6b l       .debug_str	00000000 
00021d64 l       .debug_str	00000000 
00028ced l       .debug_str	00000000 
00028d6f l       .debug_str	00000000 
00028fb3 l       .debug_str	00000000 
00029035 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0002907e l       .debug_str	00000000 
000290f2 l       .debug_str	00000000 
00012d00 l       .debug_str	00000000 
0001fa0c l       .debug_str	00000000 
00012cd8 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0002d362 l       .debug_str	00000000 
00058ecc l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013cc7 l       .debug_str	00000000 
00058dd7 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
00029361 l       .debug_str	00000000 
00029366 l       .debug_str	00000000 
000295d1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00057d24 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
00053e42 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0002d51c l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
00052825 l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000590a l       .debug_str	00000000 
00005958 l       .debug_str	00000000 
000059c3 l       .debug_str	00000000 
0005725c l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00052736 l       .debug_str	00000000 
00029090 l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00005b05 l       .debug_str	00000000 
00005b73 l       .debug_str	00000000 
00005c0a l       .debug_str	00000000 
00005cca l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005ec5 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
00006164 l       .debug_str	00000000 
000062f1 l       .debug_str	00000000 
000064a7 l       .debug_str	00000000 
00006686 l       .debug_str	00000000 
0000688e l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000077a3 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000094f8 l       .debug_str	00000000 
0000971c l       .debug_str	00000000 
0000994d l       .debug_str	00000000 
00009b75 l       .debug_str	00000000 
00009dbe l       .debug_str	00000000 
0000a024 l       .debug_str	00000000 
00029104 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027eb9 l       .debug_str	00000000 
00027f40 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00027f8d l       .debug_str	00000000 
00028014 l       .debug_str	00000000 
0002825c l       .debug_str	00000000 
000282e5 l       .debug_str	00000000 
00028334 l       .debug_str	00000000 
00028607 l       .debug_str	00000000 
00021755 l       .debug_str	00000000 
00028693 l       .debug_str	00000000 
000219de l       .debug_str	00000000 
0001e510 l     O .text	0000001c str.0
0001e550 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 4miap3quw76e3k6m
00000beb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013b6e l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00058dd7 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00029641 l       .debug_str	00000000 
0000b1cc l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4yl298udq4i2eqhh
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00013b86 l       .debug_str	00000000 
0002afe8 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00029691 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 f8ebwo3yn0ryfmw
00029956 l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000299ce l       .debug_str	00000000 
00029bf9 l       .debug_str	00000000 
00029c71 l       .debug_str	00000000 
00029e00 l       .debug_str	00000000 
00029e78 l       .debug_str	00000000 
00029fe0 l       .debug_str	00000000 
0002a058 l       .debug_str	00000000 
0002a0d6 l       .debug_str	00000000 
0002a14e l       .debug_str	00000000 
0002a241 l       .debug_str	00000000 
0002a2b9 l       .debug_str	00000000 
0002a496 l       .debug_str	00000000 
0002a50e l       .debug_str	00000000 
0002a5da l       .debug_str	00000000 
0002a652 l       .debug_str	00000000 
0002a682 l       .debug_str	00000000 
0002a6fa l       .debug_str	00000000 
0002a79f l       .debug_str	00000000 
0002a817 l       .debug_str	00000000 
0002a958 l       .debug_str	00000000 
0002a9d0 l       .debug_str	00000000 
0002ab86 l       .debug_str	00000000 
0002abfe l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0002d51c l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00052825 l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
000296f5 l       .debug_str	00000000 
0002976d l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
000297c4 l       .debug_str	00000000 
0002983c l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000077a3 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 26y0fjfhtczgcip1
000527b3 l       .debug_str	00000000 
0002af2b l       .debug_str	00000000 
0002af47 l       .debug_str	00000000 
0002af6d l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0005725c l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00055703 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002ae02 l       .debug_str	00000000 
00013bb5 l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
0002ae2b l       .debug_str	00000000 
0002ae3c l       .debug_str	00000000 
0002ae4c l       .debug_str	00000000 
0002ae98 l       .debug_str	00000000 
0002aea3 l       .debug_str	00000000 
0002aed9 l       .debug_str	00000000 
0002aef1 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3529eu2hb2fyibnd
00016796 l       .debug_str	00000000 
000167d0 l       .debug_str	00000000 
00016809 l       .debug_str	00000000 
00016818 l       .debug_str	00000000 
0001685b l       .debug_str	00000000 
00053cde l       .debug_str	00000000 
00030669 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013a75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00011b08 l       .debug_str	00000000 
00011b0c l       .debug_str	00000000 
00016812 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002af76 l       .debug_str	00000000 
00013ab8 l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
0002af9f l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0005725c l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cyvbl47c30y60eb
00053eff l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00013237 l       .debug_str	00000000 
000565b0 l       .debug_str	00000000 
0002afdb l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002afee l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
0002b07a l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
0002b083 l       .debug_str	00000000 
000361f7 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
0002b093 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19nunfeq6523tst5
00025444 l       .debug_str	00000000 
0002b0ba l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002b11a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
0002d51c l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1xpo0qpsduc6enem
0002b1e6 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002b17a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4xxoizn3g1nl6m5i
0002d8fb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00013237 l       .debug_str	00000000 
000565b0 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002b1ef l       .debug_str	00000000 
00053c50 l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 core.b09zx0wt-cgu.0
00000afc l       .debug_str	00000000 
0002b260 l       .debug_str	00000000 
0002b273 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
000565b0 l       .debug_str	00000000 
0002b2a4 l       .debug_str	00000000 
0002b2ac l       .debug_str	00000000 
0002b2b5 l       .debug_str	00000000 
0002b2fe l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0002b2bc l       .debug_str	00000000 
0002b2fb l       .debug_str	00000000 
0002b304 l       .debug_str	00000000 
0002b346 l       .debug_str	00000000 
0002b350 l       .debug_str	00000000 
0002b393 l       .debug_str	00000000 
0002b39d l       .debug_str	00000000 
0002b3e0 l       .debug_str	00000000 
0002b3ea l       .debug_str	00000000 
0002b42d l       .debug_str	00000000 
0002b438 l       .debug_str	00000000 
0002b47d l       .debug_str	00000000 
0002b488 l       .debug_str	00000000 
0002b4cd l       .debug_str	00000000 
0002b4d3 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0002bb08 l       .debug_str	00000000 
00011b08 l       .debug_str	00000000 
0002b4e0 l       .debug_str	00000000 
0002b4f0 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00012cd8 l       .debug_str	00000000 
00011d91 l       .debug_str	00000000 
00012cc2 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002d362 l       .debug_str	00000000 
00058ecc l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013cc7 l       .debug_str	00000000 
00025339 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0002b536 l       .debug_str	00000000 
0002307b l       .debug_str	00000000 
0005731f l       .debug_str	00000000 
0002bf0c l       .debug_str	00000000 
00012cca l       .debug_str	00000000 
00056f31 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00052787 l       .debug_str	00000000 
0002b548 l       .debug_str	00000000 
0002b54d l       .debug_str	00000000 
000588a7 l       .debug_str	00000000 
0002b558 l       .debug_str	00000000 
00000326 l       .debug_str	00000000 
0002b562 l       .debug_str	00000000 
0002bbd6 l       .debug_str	00000000 
0002b56c l       .debug_str	00000000 
000166ef l       .debug_str	00000000 
0002bc16 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0002bf4f l       .debug_str	00000000 
00012cd4 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0002b57a l       .debug_str	00000000 
0002b5ee l       .debug_str	00000000 
0002be30 l       .debug_str	00000000 
0002b600 l       .debug_str	00000000 
0002bc1c l       .debug_str	00000000 
0002bbf6 l       .debug_str	00000000 
0001517b l       .debug_str	00000000 
0002be73 l       .debug_str	00000000 
0002b605 l       .debug_str	00000000 
0002b679 l       .debug_str	00000000 
0002bf88 l       .debug_str	00000000 
0002bfcf l       .debug_str	00000000 
0002bed5 l       .debug_str	00000000 
0002b691 l       .debug_str	00000000 
0003b764 l       .debug_str	00000000 
00030e83 l       .debug_str	00000000 
00052736 l       .debug_str	00000000 
0002bfea l       .debug_str	00000000 
0002bea4 l       .debug_str	00000000 
0002b709 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005653d l       .debug_str	00000000 
0002284e l       .debug_str	00000000 
0002b761 l       .debug_str	00000000 
0002b766 l       .debug_str	00000000 
0002b778 l       .debug_str	00000000 
0001ca72 l       .debug_str	00000000 
0002c668 l       .debug_str	00000000 
0002b781 l       .debug_str	00000000 
0001abaa l       .debug_str	00000000 
0002b7a9 l       .debug_str	00000000 
0002b7b9 l       .debug_str	00000000 
00054bd9 l       .debug_str	00000000 
0002b812 l       .debug_str	00000000 
0002b81a l       .debug_str	00000000 
00013c57 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00011144 l       .debug_str	00000000 
0002b822 l       .debug_str	00000000 
0001691c l       .debug_str	00000000 
0002b82e l       .debug_str	00000000 
0002b838 l       .debug_str	00000000 
0002b845 l       .debug_str	00000000 
0002b852 l       .debug_str	00000000 
0002b867 l       .debug_str	00000000 
0002b87b l       .debug_str	00000000 
0002b891 l       .debug_str	00000000 
0002b899 l       .debug_str	00000000 
0002b8a6 l       .debug_str	00000000 
0002b8b3 l       .debug_str	00000000 
0002c1bc l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0002b8c0 l       .debug_str	00000000 
0002b8ed l       .debug_str	00000000 
0002b91c l       .debug_str	00000000 
0002b943 l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002b962 l       .debug_str	00000000 
0002b977 l       .debug_str	00000000 
0001a5cc l       .debug_str	00000000 
00046608 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
00052395 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
0002b981 l       .debug_str	00000000 
0002b9a6 l       .debug_str	00000000 
0002b98c l       .debug_str	00000000 
0002ba25 l       .debug_str	00000000 
0002b9b6 l       .debug_str	00000000 
0002b9bc l       .debug_str	00000000 
0002b9cb l       .debug_str	00000000 
0002b9d6 l       .debug_str	00000000 
0002ba0b l       .debug_str	00000000 
0002ba30 l       .debug_str	00000000 
0002ba40 l       .debug_str	00000000 
00052f9f l       .debug_str	00000000 
0002ba72 l       .debug_str	00000000 
0002ba77 l       .debug_str	00000000 
00053e42 l       .debug_str	00000000 
0002d2dc l       .debug_str	00000000 
0002d2d5 l       .debug_str	00000000 
00013b86 l       .debug_str	00000000 
0002d303 l       .debug_str	00000000 
0002d337 l       .debug_str	00000000 
0002ba7d l       .debug_str	00000000 
0000581f l       .debug_str	00000000 
0002babb l       .debug_str	00000000 
0002d2e0 l       .debug_str	00000000 
0002d32d l       .debug_str	00000000 
0002ba9c l       .debug_str	00000000 
0002ba89 l       .debug_str	00000000 
0002baa2 l       .debug_str	00000000 
0002284d l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0000bb40 l       .debug_str	00000000 
0002baca l       .debug_str	00000000 
0002bad2 l       .debug_str	00000000 
00036f9b l       .debug_str	00000000 
0002bad8 l       .debug_str	00000000 
00044ac6 l       .debug_str	00000000 
0002baff l       .debug_str	00000000 
0002bae3 l       .debug_str	00000000 
0000e9f4 l       .debug_str	00000000 
0002bb07 l       .debug_str	00000000 
0002b7b3 l       .debug_str	00000000 
000231e1 l       .debug_str	00000000 
00025299 l       .debug_str	00000000 
0002bb0c l       .debug_str	00000000 
0002bb30 l       .debug_str	00000000 
0002bb36 l       .debug_str	00000000 
0002bb3e l       .debug_str	00000000 
00047131 l       .debug_str	00000000 
00036b97 l       .debug_str	00000000 
0002bb43 l       .debug_str	00000000 
0002bb6b l       .debug_str	00000000 
0002bb4d l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
0001926c l       .debug_str	00000000 
0001678f l       .debug_str	00000000 
0001fab8 l       .debug_str	00000000 
000231e9 l       .debug_str	00000000 
000231f6 l       .debug_str	00000000 
000231ff l       .debug_str	00000000 
000516fd l       .debug_str	00000000 
0002bb7f l       .debug_str	00000000 
0002bb73 l       .debug_str	00000000 
00013237 l       .debug_str	00000000 
0002bb8c l       .debug_str	00000000 
0002bb98 l       .debug_str	00000000 
0002bbbb l       .debug_str	00000000 
0002bba5 l       .debug_str	00000000 
0002bbc9 l       .debug_str	00000000 
0002bbe9 l       .debug_str	00000000 
0002bc09 l       .debug_str	00000000 
0002bc24 l       .debug_str	00000000 
0002bc3f l       .debug_str	00000000 
0002bc45 l       .debug_str	00000000 
0002bc49 l       .debug_str	00000000 
0002bc5a l       .debug_str	00000000 
0002bc4d l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
0002bc6f l       .debug_str	00000000 
0002bc6a l       .debug_str	00000000 
0002bc82 l       .debug_str	00000000 
0002bcce l       .debug_str	00000000 
0002bca7 l       .debug_str	00000000 
0002bcbe l       .debug_str	00000000 
0002bce8 l       .debug_str	00000000 
0002bcd9 l       .debug_str	00000000 
0002bd30 l       .debug_str	00000000 
0002bd10 l       .debug_str	00000000 
0002bd89 l       .debug_str	00000000 
0002bd69 l       .debug_str	00000000 
000516ef l       .debug_str	00000000 
0002bde0 l       .debug_str	00000000 
0002bde5 l       .debug_str	00000000 
0002bdeb l       .debug_str	00000000 
0002be0e l       .debug_str	00000000 
0002bdf0 l       .debug_str	00000000 
0002be19 l       .debug_str	00000000 
0002be64 l       .debug_str	00000000 
0002be95 l       .debug_str	00000000 
0002bec6 l       .debug_str	00000000 
0002bef5 l       .debug_str	00000000 
0002bf40 l       .debug_str	00000000 
0002bf71 l       .debug_str	00000000 
0001a9c9 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000315ad l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
000310c3 l       .debug_str	00000000 
000547ac l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
00058de6 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005241e l       .debug_str	00000000 
0005231f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00052967 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0001f9dc l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fb59 l       .debug_str	00000000 
0001fb4d l       .debug_str	00000000 
0001f98a l       .debug_str	00000000 
0002bfc2 l       .debug_str	00000000 
0002bfdb l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
0002c009 l       .debug_str	00000000 
0002c008 l       .debug_str	00000000 
0002c01d l       .debug_str	00000000 
0002c00e l       .debug_str	00000000 
00052410 l       .debug_str	00000000 
000516dd l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
0002c04a l       .debug_str	00000000 
0002c03c l       .debug_str	00000000 
0002c03b l       .debug_str	00000000 
0001fac1 l       .debug_str	00000000 
00019276 l       .debug_str	00000000 
0005921c l       .debug_str	00000000 
0002c053 l       .debug_str	00000000 
0002c057 l       .debug_str	00000000 
0002c05a l       .debug_str	00000000 
00057d0c l       .debug_str	00000000 
0001925a l       .debug_str	00000000 
0002c05d l       .debug_str	00000000 
0001a544 l       .debug_str	00000000 
0002c061 l       .debug_str	00000000 
0002c060 l       .debug_str	00000000 
0002c066 l       .debug_str	00000000 
0002c138 l       .debug_str	00000000 
00000238 l       .debug_str	00000000 
0002c084 l       .debug_str	00000000 
0002c072 l       .debug_str	00000000 
0002c0a9 l       .debug_str	00000000 
0002c171 l       .debug_str	00000000 
0002c0c7 l       .debug_str	00000000 
0002c0b5 l       .debug_str	00000000 
0002c0ec l       .debug_str	00000000 
0002c105 l       .debug_str	00000000 
0002c0f3 l       .debug_str	00000000 
0002c111 l       .debug_str	00000000 
0002c129 l       .debug_str	00000000 
0002c162 l       .debug_str	00000000 
0001a54a l       .debug_str	00000000 
0002c19b l       .debug_str	00000000 
0002c1a8 l       .debug_str	00000000 
0002c1a7 l       .debug_str	00000000 
0002c1b0 l       .debug_str	00000000 
0002c1dd l       .debug_str	00000000 
0002c1c8 l       .debug_str	00000000 
0002c1fa l       .debug_str	00000000 
0002c206 l       .debug_str	00000000 
0002c2b0 l       .debug_str	00000000 
0002c212 l       .debug_str	00000000 
0002c219 l       .debug_str	00000000 
0002c222 l       .debug_str	00000000 
0002c230 l       .debug_str	00000000 
0002c237 l       .debug_str	00000000 
0002c23f l       .debug_str	00000000 
0002c246 l       .debug_str	00000000 
0002c28c l       .debug_str	00000000 
0002c267 l       .debug_str	00000000 
0002c252 l       .debug_str	00000000 
0002c277 l       .debug_str	00000000 
0002c29b l       .debug_str	00000000 
0000ea13 l       .debug_str	00000000 
0002c2bc l       .debug_str	00000000 
000252ac l       .debug_str	00000000 
00055bf6 l       .debug_str	00000000 
0001f8fd l       .debug_str	00000000 
0001f8e6 l       .debug_str	00000000 
0002c2d6 l       .debug_str	00000000 
0002c2f9 l       .debug_str	00000000 
0002c2e2 l       .debug_str	00000000 
0002c343 l       .debug_str	00000000 
0002c337 l       .debug_str	00000000 
0002b7ae l       .debug_str	00000000 
0002c360 l       .debug_str	00000000 
0002c349 l       .debug_str	00000000 
0002c3a9 l       .debug_str	00000000 
0002c3d1 l       .debug_str	00000000 
0002c3ba l       .debug_str	00000000 
0005479a l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00052825 l       .debug_str	00000000 
0002c480 l       .debug_str	00000000 
0002c462 l       .debug_str	00000000 
0002c576 l       .debug_str	00000000 
0002c556 l       .debug_str	00000000 
0002c5e9 l       .debug_str	00000000 
0002c5c9 l       .debug_str	00000000 
00042bef l       .debug_str	00000000 
0002c63c l       .debug_str	00000000 
0002c649 l       .debug_str	00000000 
0002c654 l       .debug_str	00000000 
0002c66a l       .debug_str	00000000 
0002c674 l       .debug_str	00000000 
0002c6ca l       .debug_str	00000000 
0002c6dc l       .debug_str	00000000 
0002c72e l       .debug_str	00000000 
0002c742 l       .debug_str	00000000 
0002c796 l       .debug_str	00000000 
0002c79d l       .debug_str	00000000 
0002c7e3 l       .debug_str	00000000 
0002c7f2 l       .debug_str	00000000 
0002c84c l       .debug_str	00000000 
0002c8a2 l       .debug_str	00000000 
0002c8fa l       .debug_str	00000000 
0002c944 l       .debug_str	00000000 
0002c94a l       .debug_str	00000000 
0002c99a l       .debug_str	00000000 
0002c9e6 l       .debug_str	00000000 
0002ca34 l       .debug_str	00000000 
00025352 l       .debug_str	00000000 
0002ca74 l       .debug_str	00000000 
0002cac1 l       .debug_str	00000000 
0002cb0a l       .debug_str	00000000 
0002cb55 l       .debug_str	00000000 
0002cb92 l       .debug_str	00000000 
0002cba2 l       .debug_str	00000000 
0002cbfd l       .debug_str	00000000 
0002cc54 l       .debug_str	00000000 
0002ccad l       .debug_str	00000000 
00039f83 l       .debug_str	00000000 
0002ccf8 l       .debug_str	00000000 
0002cd4c l       .debug_str	00000000 
0002cd9c l       .debug_str	00000000 
0002cdee l       .debug_str	00000000 
00052291 l       .debug_str	00000000 
0002ce32 l       .debug_str	00000000 
0002ce7e l       .debug_str	00000000 
0002cec6 l       .debug_str	00000000 
0002cf10 l       .debug_str	00000000 
00039db9 l       .debug_str	00000000 
0002cf4c l       .debug_str	00000000 
0002cfa0 l       .debug_str	00000000 
0002cff0 l       .debug_str	00000000 
0002d042 l       .debug_str	00000000 
0002d086 l       .debug_str	00000000 
0002d092 l       .debug_str	00000000 
0002d0e9 l       .debug_str	00000000 
0002d13c l       .debug_str	00000000 
0002d191 l       .debug_str	00000000 
0002d1d8 l       .debug_str	00000000 
0002d1e4 l       .debug_str	00000000 
0002d1fb l       .debug_str	00000000 
0002d1f4 l       .debug_str	00000000 
0002d20d l       .debug_str	00000000 
0002d222 l       .debug_str	00000000 
0002d273 l       .debug_str	00000000 
0002d283 l       .debug_str	00000000 
0002d2d4 l       .debug_str	00000000 
0002d2df l       .debug_str	00000000 
0002d302 l       .debug_str	00000000 
0002d336 l       .debug_str	00000000 
0002d34c l       .debug_str	00000000 
0002d37a l       .debug_str	00000000 
0002d36e l       .debug_str	00000000 
0002d388 l       .debug_str	00000000 
0002d387 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00019262 l       .debug_str	00000000 
000252bf l       .debug_str	00000000 
000252be l       .debug_str	00000000 
000252c4 l       .debug_str	00000000 
000252c3 l       .debug_str	00000000 
0002d38b l       .debug_str	00000000 
0002d3cb l       .debug_str	00000000 
0002d3d3 l       .debug_str	00000000 
0002d413 l       .debug_str	00000000 
0002d41d l       .debug_str	00000000 
00051829 l       .debug_str	00000000 
00056394 l       .debug_str	00000000 
0002d459 l       .debug_str	00000000 
0001b738 l       .debug_str	00000000 
00030279 l       .debug_str	00000000 
0002d481 l       .debug_str	00000000 
0001b5f0 l       .debug_str	00000000 
0002d4aa l       .debug_str	00000000 
0002d4cf l       .debug_str	00000000 
0003e407 l       .debug_str	00000000 
0005287f l       .debug_str	00000000 
0002d4d6 l       .debug_str	00000000 
0002d4df l       .debug_str	00000000 
0002d518 l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
0002d520 l       .debug_str	00000000 
00014a29 l       .debug_str	00000000 
0002d5b5 l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
0002d600 l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
0002d647 l       .debug_str	00000000 
00014179 l       .debug_str	00000000 
0002d69c l       .debug_str	00000000 
0002d6d9 l       .debug_str	00000000 
00013b76 l       .debug_str	00000000 
0002d6e4 l       .debug_str	00000000 
00014933 l       .debug_str	00000000 
0002d739 l       .debug_str	00000000 
000148c3 l       .debug_str	00000000 
0002d78b l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
0002d7d2 l       .debug_str	00000000 
0000ab6c l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
000124c0 l       .debug_str	00000000 
0002e1dc l       .debug_str	00000000 
0002d858 l       .debug_str	00000000 
0002d899 l       .debug_str	00000000 
0002d8bc l       .debug_str	00000000 
0002d8f7 l       .debug_str	00000000 
0002d901 l       .debug_str	00000000 
0002d98b l       .debug_str	00000000 
0002d9bd l       .debug_str	00000000 
0001376b l       .debug_str	00000000 
00013b6e l       .debug_str	00000000 
0002da31 l       .debug_str	00000000 
0002da82 l       .debug_str	00000000 
00013ca2 l       .debug_str	00000000 
0002dac4 l       .debug_str	00000000 
0002db4b l       .debug_str	00000000 
0002db5a l       .debug_str	00000000 
0002dbe4 l       .debug_str	00000000 
0002dc60 l       .debug_str	00000000 
0002dc90 l       .debug_str	00000000 
0002dccb l       .debug_str	00000000 
0002dcd5 l       .debug_str	00000000 
00003ab0 l       .debug_str	00000000 
0002dd4c l       .debug_str	00000000 
0002dda1 l       .debug_str	00000000 
0002ddaa l       .debug_str	00000000 
0002ddfb l       .debug_str	00000000 
0000579d l       .debug_str	00000000 
0002de07 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0002de14 l       .debug_str	00000000 
0002de1d l       .debug_str	00000000 
0002de33 l       .debug_str	00000000 
0002de40 l       .debug_str	00000000 
0002de85 l       .debug_str	00000000 
0002de99 l       .debug_str	00000000 
0002deee l       .debug_str	00000000 
0002def7 l       .debug_str	00000000 
000450a6 l       .debug_str	00000000 
0002df2f l       .debug_str	00000000 
0002df6c l       .debug_str	00000000 
0002df77 l       .debug_str	00000000 
0002dffa l       .debug_str	00000000 
0002e005 l       .debug_str	00000000 
0002e08b l       .debug_str	00000000 
0002e100 l       .debug_str	00000000 
0002e12c l       .debug_str	00000000 
0002e1b5 l       .debug_str	00000000 
0002e1c4 l       .debug_str	00000000 
0002e1d1 l       .debug_str	00000000 
0002e1e5 l       .debug_str	00000000 
0002e23b l       .debug_str	00000000 
0002e2aa l       .debug_str	00000000 
0002e32a l       .debug_str	00000000 
0002e398 l       .debug_str	00000000 
0002e423 l       .debug_str	00000000 
0002e498 l       .debug_str	00000000 
0002e4d8 l       .debug_str	00000000 
0002e55b l       .debug_str	00000000 
0002e59c l       .debug_str	00000000 
00042ab1 l       .debug_str	00000000 
000465cb l       .debug_str	00000000 
0002e601 l       .debug_str	00000000 
0002e6b0 l       .debug_str	00000000 
0002e6fb l       .debug_str	00000000 
00014bae l       .debug_str	00000000 
0002e7a4 l       .debug_str	00000000 
0002e820 l       .debug_str	00000000 
00013a2c l       .debug_str	00000000 
0002e845 l       .debug_str	00000000 
0000bf06 l       .debug_str	00000000 
0002e892 l       .debug_str	00000000 
0001411c l       .debug_str	00000000 
0002e8e5 l       .debug_str	00000000 
0002e920 l       .debug_str	00000000 
0002e92b l       .debug_str	00000000 
0001a1e8 l       .debug_str	00000000 
0002e9b7 l       .debug_str	00000000 
00013d74 l       .debug_str	00000000 
0002ea3a l       .debug_str	00000000 
0002eac2 l       .debug_str	00000000 
00020678 l       .debug_str	00000000 
0002eb37 l       .debug_str	00000000 
0002ebbd l       .debug_str	00000000 
000150b5 l       .debug_str	00000000 
0002ec32 l       .debug_str	00000000 
0000b6af l       .debug_str	00000000 
0002ec95 l       .debug_str	00000000 
0000abf6 l       .debug_str	00000000 
0002ecf7 l       .debug_str	00000000 
0000a8e2 l       .debug_str	00000000 
0002ed3d l       .debug_str	00000000 
0002ed85 l       .debug_str	00000000 
0002ed8f l       .debug_str	00000000 
0002edd0 l       .debug_str	00000000 
0002edea l       .debug_str	00000000 
00025377 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
0002edf0 l       .debug_str	00000000 
0002edf9 l       .debug_str	00000000 
0002ee5e l       .debug_str	00000000 
0002ee6d l       .debug_str	00000000 
0002eeaf l       .debug_str	00000000 
0002eeb9 l       .debug_str	00000000 
0002ef1e l       .debug_str	00000000 
0002ef60 l       .debug_str	00000000 
0002efaa l       .debug_str	00000000 
0002efb9 l       .debug_str	00000000 
0002efef l       .debug_str	00000000 
0002eff8 l       .debug_str	00000000 
00017016 l       .debug_str	00000000 
0002f002 l       .debug_str	00000000 
0002f005 l       .debug_str	00000000 
0002f03d l       .debug_str	00000000 
0002f047 l       .debug_str	00000000 
0002f08b l       .debug_str	00000000 
0002f0a1 l       .debug_str	00000000 
0002f0ea l       .debug_str	00000000 
00013ce9 l       .debug_str	00000000 
00025362 l       .debug_str	00000000 
0002f12f l       .debug_str	00000000 
0002f178 l       .debug_str	00000000 
0002f186 l       .debug_str	00000000 
0002f1ce l       .debug_str	00000000 
00023a30 l       .debug_str	00000000 
0002f218 l       .debug_str	00000000 
000389f0 l       .debug_str	00000000 
0002f2b0 l       .debug_str	00000000 
00052262 l       .debug_str	00000000 
0002f34a l       .debug_str	00000000 
00023f20 l       .debug_str	00000000 
0002f3bc l       .debug_str	00000000 
00023c53 l       .debug_str	00000000 
0002f45f l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
0002f491 l       .debug_str	00000000 
0002f4d8 l       .debug_str	00000000 
0002f4e6 l       .debug_str	00000000 
0002f4f0 l       .debug_str	00000000 
0002f53e l       .debug_str	00000000 
0002f54e l       .debug_str	00000000 
0002f599 l       .debug_str	00000000 
0002f5a7 l       .debug_str	00000000 
0002f635 l       .debug_str	00000000 
0002f644 l       .debug_str	00000000 
0000bf55 l       .debug_str	00000000 
0002f68d l       .debug_str	00000000 
0000befe l       .debug_str	00000000 
0002f6d2 l       .debug_str	00000000 
0002f70c l       .debug_str	00000000 
0002f715 l       .debug_str	00000000 
0002f761 l       .debug_str	00000000 
0002f779 l       .debug_str	00000000 
0002f7db l       .debug_str	00000000 
0000be4e l       .debug_str	00000000 
0002f810 l       .debug_str	00000000 
0002f838 l       .debug_str	00000000 
0002f870 l       .debug_str	00000000 
0002f899 l       .debug_str	00000000 
0002f8a4 l       .debug_str	00000000 
0001a947 l       .debug_str	00000000 
0002f8c9 l       .debug_str	00000000 
0002f958 l       .debug_str	00000000 
0002f98f l       .debug_str	00000000 
0002fa15 l       .debug_str	00000000 
0002fa63 l       .debug_str	00000000 
0002fa6c l       .debug_str	00000000 
0002faf2 l       .debug_str	00000000 
0002fb05 l       .debug_str	00000000 
0002fb8e l       .debug_str	00000000 
0002fbea l       .debug_str	00000000 
0002fc2c l       .debug_str	00000000 
0002fcde l       .debug_str	00000000 
0002fd1d l       .debug_str	00000000 
0002fdc2 l       .debug_str	00000000 
0002fe56 l       .debug_str	00000000 
0002fe7c l       .debug_str	00000000 
0002fef8 l       .debug_str	00000000 
0002ff33 l       .debug_str	00000000 
0002ff40 l       .debug_str	00000000 
0002ff79 l       .debug_str	00000000 
0002ff91 l       .debug_str	00000000 
0002ffd1 l       .debug_str	00000000 
0002afe8 l       .debug_str	00000000 
0002ffdd l       .debug_str	00000000 
0003003a l       .debug_str	00000000 
00030097 l       .debug_str	00000000 
00030144 l       .debug_str	00000000 
000301a1 l       .debug_str	00000000 
00016495 l       .debug_str	00000000 
0003020e l       .debug_str	00000000 
00030272 l       .debug_str	00000000 
0003027d l       .debug_str	00000000 
000302ad l       .debug_str	00000000 
000302d9 l       .debug_str	00000000 
00030345 l       .debug_str	00000000 
00030375 l       .debug_str	00000000 
000303b1 l       .debug_str	00000000 
000303fb l       .debug_str	00000000 
0003040b l       .debug_str	00000000 
00030440 l       .debug_str	00000000 
00030485 l       .debug_str	00000000 
00030490 l       .debug_str	00000000 
000304d0 l       .debug_str	00000000 
000304de l       .debug_str	00000000 
0003056a l       .debug_str	00000000 
000305e6 l       .debug_str	00000000 
00030606 l       .debug_str	00000000 
00030660 l       .debug_str	00000000 
0003066d l       .debug_str	00000000 
000306a6 l       .debug_str	00000000 
000306ae l       .debug_str	00000000 
00030703 l       .debug_str	00000000 
00030755 l       .debug_str	00000000 
0002f63a l       .debug_str	00000000 
0003079c l       .debug_str	00000000 
00030810 l       .debug_str	00000000 
00030854 l       .debug_str	00000000 
000308a0 l       .debug_str	00000000 
000308df l       .debug_str	00000000 
00030905 l       .debug_str	00000000 
00030917 l       .debug_str	00000000 
00030921 l       .debug_str	00000000 
00030963 l       .debug_str	00000000 
00003a03 l       .debug_str	00000000 
000309ea l       .debug_str	00000000 
00027dd8 l       .debug_str	00000000 
00030a66 l       .debug_str	00000000 
00030add l       .debug_str	00000000 
00030b2b l       .debug_str	00000000 
00003c53 l       .debug_str	00000000 
00030bbb l       .debug_str	00000000 
00030bf7 l       .debug_str	00000000 
00030c04 l       .debug_str	00000000 
00030c4a l       .debug_str	00000000 
00030c57 l       .debug_str	00000000 
0003199d l       .debug_str	00000000 
00030c89 l       .debug_str	00000000 
00030cd9 l       .debug_str	00000000 
00030cf0 l       .debug_str	00000000 
00030d7a l       .debug_str	00000000 
0000aab7 l       .debug_str	00000000 
00030df6 l       .debug_str	00000000 
00030e0a l       .debug_str	00000000 
00030e67 l       .debug_str	00000000 
00030e76 l       .debug_str	00000000 
00030e87 l       .debug_str	00000000 
00030ee1 l       .debug_str	00000000 
00030ef0 l       .debug_str	00000000 
00030f79 l       .debug_str	00000000 
00030f87 l       .debug_str	00000000 
00030fdd l       .debug_str	00000000 
00031031 l       .debug_str	00000000 
000310aa l       .debug_str	00000000 
000310c2 l       .debug_str	00000000 
000310cc l       .debug_str	00000000 
00031163 l       .debug_str	00000000 
0003117d l       .debug_str	00000000 
0001d564 l       .debug_str	00000000 
000311b6 l       .debug_str	00000000 
00013234 l       .debug_str	00000000 
0003121b l       .debug_str	00000000 
000312b2 l       .debug_str	00000000 
000312b6 l       .debug_str	00000000 
000315ab l       .debug_str	00000000 
000312bb l       .debug_str	00000000 
0005725c l       .debug_str	00000000 
00013a32 l       .debug_str	00000000 
000312ed l       .debug_str	00000000 
0001976a l       .debug_str	00000000 
0003132b l       .debug_str	00000000 
0000a888 l       .debug_str	00000000 
0003137e l       .debug_str	00000000 
0003140a l       .debug_str	00000000 
00031486 l       .debug_str	00000000 
000314a5 l       .debug_str	00000000 
000314f0 l       .debug_str	00000000 
000314fd l       .debug_str	00000000 
00031571 l       .debug_str	00000000 
000358af l       .debug_str	00000000 
00046fea l       .debug_str	00000000 
00031590 l       .debug_str	00000000 
000315b0 l       .debug_str	00000000 
000315cc l       .debug_str	00000000 
000315d6 l       .debug_str	00000000 
00031662 l       .debug_str	00000000 
000316de l       .debug_str	00000000 
0003170f l       .debug_str	00000000 
00031792 l       .debug_str	00000000 
000317b2 l       .debug_str	00000000 
00031838 l       .debug_str	00000000 
000318ad l       .debug_str	00000000 
0002b083 l       .debug_str	00000000 
00054828 l       .debug_str	00000000 
000318ee l       .debug_str	00000000 
00023fe6 l       .debug_str	00000000 
00031939 l       .debug_str	00000000 
00031995 l       .debug_str	00000000 
000319a1 l       .debug_str	00000000 
000319ea l       .debug_str	00000000 
000319fa l       .debug_str	00000000 
00031a3f l       .debug_str	00000000 
00031a88 l       .debug_str	00000000 
00031acd l       .debug_str	00000000 
00031b29 l       .debug_str	00000000 
00031b74 l       .debug_str	00000000 
00031bbb l       .debug_str	00000000 
00031c19 l       .debug_str	00000000 
00031c64 l       .debug_str	00000000 
00031cab l       .debug_str	00000000 
00031d09 l       .debug_str	00000000 
00031d54 l       .debug_str	00000000 
00031d9b l       .debug_str	00000000 
00031df9 l       .debug_str	00000000 
00031e42 l       .debug_str	00000000 
00031e87 l       .debug_str	00000000 
00031ee3 l       .debug_str	00000000 
00031f2c l       .debug_str	00000000 
00031f71 l       .debug_str	00000000 
00031fcd l       .debug_str	00000000 
00032017 l       .debug_str	00000000 
0003205d l       .debug_str	00000000 
000320ba l       .debug_str	00000000 
00032104 l       .debug_str	00000000 
0003214a l       .debug_str	00000000 
000321a7 l       .debug_str	00000000 
00032202 l       .debug_str	00000000 
0003224a l       .debug_str	00000000 
0003228e l       .debug_str	00000000 
000322d6 l       .debug_str	00000000 
0003231a l       .debug_str	00000000 
00032375 l       .debug_str	00000000 
000323be l       .debug_str	00000000 
00032403 l       .debug_str	00000000 
0003245f l       .debug_str	00000000 
000324a8 l       .debug_str	00000000 
000324ed l       .debug_str	00000000 
00032549 l       .debug_str	00000000 
00032592 l       .debug_str	00000000 
000325d7 l       .debug_str	00000000 
00032633 l       .debug_str	00000000 
0003267d l       .debug_str	00000000 
000326c3 l       .debug_str	00000000 
00032720 l       .debug_str	00000000 
0003276a l       .debug_str	00000000 
000327b0 l       .debug_str	00000000 
0003280d l       .debug_str	00000000 
00032857 l       .debug_str	00000000 
0003289d l       .debug_str	00000000 
000328fa l       .debug_str	00000000 
00032955 l       .debug_str	00000000 
0003299d l       .debug_str	00000000 
000329e1 l       .debug_str	00000000 
00032a29 l       .debug_str	00000000 
00032a6d l       .debug_str	00000000 
00032ac8 l       .debug_str	00000000 
00032b23 l       .debug_str	00000000 
00032b6b l       .debug_str	00000000 
00032baf l       .debug_str	00000000 
00032bf8 l       .debug_str	00000000 
00032c3d l       .debug_str	00000000 
00032c99 l       .debug_str	00000000 
00032cf5 l       .debug_str	00000000 
00032d3e l       .debug_str	00000000 
00032d83 l       .debug_str	00000000 
00032ddf l       .debug_str	00000000 
00032e28 l       .debug_str	00000000 
00032e6d l       .debug_str	00000000 
00032ec9 l       .debug_str	00000000 
00032f12 l       .debug_str	00000000 
00032f57 l       .debug_str	00000000 
00023b06 l       .debug_str	00000000 
00032fb3 l       .debug_str	00000000 
00032ff2 l       .debug_str	00000000 
00033027 l       .debug_str	00000000 
0000582c l       .debug_str	00000000 
00013b80 l       .debug_str	00000000 
00013cd0 l       .debug_str	00000000 
00033031 l       .debug_str	00000000 
00015c96 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
0003306b l       .debug_str	00000000 
00011018 l       .debug_str	00000000 
000330fd l       .debug_str	00000000 
000151c2 l       .debug_str	00000000 
00033136 l       .debug_str	00000000 
000146a9 l       .debug_str	00000000 
0003315d l       .debug_str	00000000 
000145f5 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00033197 l       .debug_str	00000000 
00014374 l       .debug_str	00000000 
000331bd l       .debug_str	00000000 
000140bb l       .debug_str	00000000 
00033217 l       .debug_str	00000000 
00014acf l       .debug_str	00000000 
000332b1 l       .debug_str	00000000 
00013cdf l       .debug_str	00000000 
0003333a l       .debug_str	00000000 
000333e1 l       .debug_str	00000000 
0003341a l       .debug_str	00000000 
0003348f l       .debug_str	00000000 
000334b8 l       .debug_str	00000000 
00026baa l       .debug_str	00000000 
000334ed l       .debug_str	00000000 
00033529 l       .debug_str	00000000 
0003353a l       .debug_str	00000000 
00033573 l       .debug_str	00000000 
000132cf l       .debug_str	00000000 
00033580 l       .debug_str	00000000 
0003358f l       .debug_str	00000000 
0002ee66 l       .debug_str	00000000 
000335d8 l       .debug_str	00000000 
0003360b l       .debug_str	00000000 
00033618 l       .debug_str	00000000 
0005851b l       .debug_str	00000000 
00033663 l       .debug_str	00000000 
000336bb l       .debug_str	00000000 
000336d0 l       .debug_str	00000000 
00033706 l       .debug_str	00000000 
00033711 l       .debug_str	00000000 
00026cb8 l       .debug_str	00000000 
00033770 l       .debug_str	00000000 
000337e3 l       .debug_str	00000000 
0003384a l       .debug_str	00000000 
0003386a l       .debug_str	00000000 
000338a9 l       .debug_str	00000000 
000338c8 l       .debug_str	00000000 
00000ad8 l       .debug_str	00000000 
0003393b l       .debug_str	00000000 
000339b8 l       .debug_str	00000000 
00033a1d l       .debug_str	00000000 
00033a7d l       .debug_str	00000000 
00033af0 l       .debug_str	00000000 
00033b6d l       .debug_str	00000000 
00015e2b l       .debug_str	00000000 
00033be5 l       .debug_str	00000000 
00033c5a l       .debug_str	00000000 
00033cd4 l       .debug_str	00000000 
00011d2d l       .debug_str	00000000 
00011d38 l       .debug_str	00000000 
00033d34 l       .debug_str	00000000 
00056509 l       .debug_str	00000000 
00033d72 l       .debug_str	00000000 
00033db4 l       .debug_str	00000000 
00033ddf l       .debug_str	00000000 
00033e20 l       .debug_str	00000000 
00033e2a l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
000573c3 l       .debug_str	00000000 
00051ca9 l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
00033e86 l       .debug_str	00000000 
0000146f l       .debug_str	00000000 
00033ec2 l       .debug_str	00000000 
00001412 l       .debug_str	00000000 
00033f09 l       .debug_str	00000000 
00033f67 l       .debug_str	00000000 
0002b896 l       .debug_str	00000000 
00033fbe l       .debug_str	00000000 
00034018 l       .debug_str	00000000 
00034022 l       .debug_str	00000000 
0001329d l       .debug_str	00000000 
000132a2 l       .debug_str	00000000 
00034065 l       .debug_str	00000000 
0003409b l       .debug_str	00000000 
000340ab l       .debug_str	00000000 
000340ba l       .debug_str	00000000 
000340c5 l       .debug_str	00000000 
0002b97c l       .debug_str	00000000 
000340ff l       .debug_str	00000000 
00034148 l       .debug_str	00000000 
00025b2b l       .debug_str	00000000 
0003418f l       .debug_str	00000000 
000341ca l       .debug_str	00000000 
000341ef l       .debug_str	00000000 
0003425b l       .debug_str	00000000 
0003426e l       .debug_str	00000000 
000342e5 l       .debug_str	00000000 
000342f0 l       .debug_str	00000000 
0003432d l       .debug_str	00000000 
00034338 l       .debug_str	00000000 
000343b9 l       .debug_str	00000000 
000343ff l       .debug_str	00000000 
00034426 l       .debug_str	00000000 
00034455 l       .debug_str	00000000 
00034466 l       .debug_str	00000000 
00013c22 l       .debug_str	00000000 
000344c2 l       .debug_str	00000000 
000344f3 l       .debug_str	00000000 
0001b960 l       .debug_str	00000000 
0003453b l       .debug_str	00000000 
0001fec1 l       .debug_str	00000000 
00034579 l       .debug_str	00000000 
000345bd l       .debug_str	00000000 
00034610 l       .debug_str	00000000 
000310ab l       .debug_str	00000000 
00034688 l       .debug_str	00000000 
000346d7 l       .debug_str	00000000 
0003476d l       .debug_str	00000000 
000347b1 l       .debug_str	00000000 
000384ef l       .debug_str	00000000 
00034829 l       .debug_str	00000000 
00034878 l       .debug_str	00000000 
0003490e l       .debug_str	00000000 
00034928 l       .debug_str	00000000 
00034977 l       .debug_str	00000000 
000349b0 l       .debug_str	00000000 
000349cb l       .debug_str	00000000 
0001584d l       .debug_str	00000000 
00034a2f l       .debug_str	00000000 
00015159 l       .debug_str	00000000 
00034aa8 l       .debug_str	00000000 
0002283f l       .debug_str	00000000 
00034b19 l       .debug_str	00000000 
00034baf l       .debug_str	00000000 
00034c47 l       .debug_str	00000000 
00034cb9 l       .debug_str	00000000 
00034ce1 l       .debug_str	00000000 
0001abf4 l       .debug_str	00000000 
00034d99 l       .debug_str	00000000 
00024444 l       .debug_str	00000000 
00034dde l       .debug_str	00000000 
00034e94 l       .debug_str	00000000 
00034ed9 l       .debug_str	00000000 
00002b77 l       .debug_str	00000000 
00034f1b l       .debug_str	00000000 
00034f76 l       .debug_str	00000000 
00034f7b l       .debug_str	00000000 
00034fd4 l       .debug_str	00000000 
00035008 l       .debug_str	00000000 
0003501c l       .debug_str	00000000 
00035057 l       .debug_str	00000000 
00035099 l       .debug_str	00000000 
000350af l       .debug_str	00000000 
0003511b l       .debug_str	00000000 
00011d31 l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0003515d l       .debug_str	00000000 
0003519d l       .debug_str	00000000 
000351f7 l       .debug_str	00000000 
00035239 l       .debug_str	00000000 
00035294 l       .debug_str	00000000 
000352d6 l       .debug_str	00000000 
000352e1 l       .debug_str	00000000 
00035321 l       .debug_str	00000000 
00035327 l       .debug_str	00000000 
00035381 l       .debug_str	00000000 
0003538a l       .debug_str	00000000 
000353cc l       .debug_str	00000000 
00035424 l       .debug_str	00000000 
00035466 l       .debug_str	00000000 
000354bf l       .debug_str	00000000 
000354c9 l       .debug_str	00000000 
000354d1 l       .debug_str	00000000 
000354da l       .debug_str	00000000 
000354cd l       .debug_str	00000000 
0003551c l       .debug_str	00000000 
00035571 l       .debug_str	00000000 
000355ae l       .debug_str	00000000 
000355f0 l       .debug_str	00000000 
00035647 l       .debug_str	00000000 
00035689 l       .debug_str	00000000 
000356e1 l       .debug_str	00000000 
00035719 l       .debug_str	00000000 
00035725 l       .debug_str	00000000 
00035762 l       .debug_str	00000000 
000357c4 l       .debug_str	00000000 
00035805 l       .debug_str	00000000 
0003580e l       .debug_str	00000000 
0003586c l       .debug_str	00000000 
000358a5 l       .debug_str	00000000 
000358b4 l       .debug_str	00000000 
000358f3 l       .debug_str	00000000 
00035908 l       .debug_str	00000000 
0003594e l       .debug_str	00000000 
0003595b l       .debug_str	00000000 
00035961 l       .debug_str	00000000 
0003599a l       .debug_str	00000000 
00035a26 l       .debug_str	00000000 
00035a62 l       .debug_str	00000000 
00051898 l       .debug_str	00000000 
00035a74 l       .debug_str	00000000 
00035aac l       .debug_str	00000000 
00035ab8 l       .debug_str	00000000 
00035af5 l       .debug_str	00000000 
00035b57 l       .debug_str	00000000 
00035b98 l       .debug_str	00000000 
00035bf6 l       .debug_str	00000000 
00035c30 l       .debug_str	00000000 
00035c8a l       .debug_str	00000000 
00035cd3 l       .debug_str	00000000 
00035ce3 l       .debug_str	00000000 
00035d1c l       .debug_str	00000000 
00035d9e l       .debug_str	00000000 
00035dd8 l       .debug_str	00000000 
00035e32 l       .debug_str	00000000 
00035e6d l       .debug_str	00000000 
00035ecd l       .debug_str	00000000 
00035f08 l       .debug_str	00000000 
00035f68 l       .debug_str	00000000 
00035fa6 l       .debug_str	00000000 
00036004 l       .debug_str	00000000 
00036042 l       .debug_str	00000000 
000360a0 l       .debug_str	00000000 
000360eb l       .debug_str	00000000 
000360f4 l       .debug_str	00000000 
00036143 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
0003614f l       .debug_str	00000000 
00036180 l       .debug_str	00000000 
000361ab l       .debug_str	00000000 
000361f9 l       .debug_str	00000000 
00013c53 l       .debug_str	00000000 
00036200 l       .debug_str	00000000 
00036265 l       .debug_str	00000000 
00036296 l       .debug_str	00000000 
0003629e l       .debug_str	00000000 
000142d1 l       .debug_str	00000000 
000362cf l       .debug_str	00000000 
00036328 l       .debug_str	00000000 
000363b6 l       .debug_str	00000000 
00036402 l       .debug_str	00000000 
00036427 l       .debug_str	00000000 
00036444 l       .debug_str	00000000 
0003646e l       .debug_str	00000000 
0001ab87 l       .debug_str	00000000 
0001ac42 l       .debug_str	00000000 
0001acbe l       .debug_str	00000000 
00036490 l       .debug_str	00000000 
000364dd l       .debug_str	00000000 
00036522 l       .debug_str	00000000 
00036561 l       .debug_str	00000000 
000365ad l       .debug_str	00000000 
0003663c l       .debug_str	00000000 
00036689 l       .debug_str	00000000 
0003670f l       .debug_str	00000000 
0005379a l       .debug_str	00000000 
00036734 l       .debug_str	00000000 
0003675e l       .debug_str	00000000 
00036767 l       .debug_str	00000000 
0003679d l       .debug_str	00000000 
000367a6 l       .debug_str	00000000 
00036834 l       .debug_str	00000000 
0003687a l       .debug_str	00000000 
00036899 l       .debug_str	00000000 
000368b0 l       .debug_str	00000000 
000368d4 l       .debug_str	00000000 
000368f0 l       .debug_str	00000000 
00036937 l       .debug_str	00000000 
0003697c l       .debug_str	00000000 
000369bb l       .debug_str	00000000 
00036a01 l       .debug_str	00000000 
00036a90 l       .debug_str	00000000 
00036ad7 l       .debug_str	00000000 
00036b5d l       .debug_str	00000000 
00036b92 l       .debug_str	00000000 
00036b9c l       .debug_str	00000000 
000527b3 l       .debug_str	00000000 
00036c07 l       .debug_str	00000000 
00036c3c l       .debug_str	00000000 
00036c46 l       .debug_str	00000000 
00036c79 l       .debug_str	00000000 
00036c81 l       .debug_str	00000000 
00036cb5 l       .debug_str	00000000 
00036cc7 l       .debug_str	00000000 
00036d01 l       .debug_str	00000000 
00036d1f l       .debug_str	00000000 
00036d45 l       .debug_str	00000000 
00036d50 l       .debug_str	00000000 
00036d79 l       .debug_str	00000000 
00036d87 l       .debug_str	00000000 
00036dc1 l       .debug_str	00000000 
00036df7 l       .debug_str	00000000 
00036e1d l       .debug_str	00000000 
00036e40 l       .debug_str	00000000 
00036e69 l       .debug_str	00000000 
00036e8f l       .debug_str	00000000 
00036ecd l       .debug_str	00000000 
00036ee7 l       .debug_str	00000000 
00036f25 l       .debug_str	00000000 
00036f57 l       .debug_str	00000000 
00036f63 l       .debug_str	00000000 
00058f2f l       .debug_str	00000000 
00036f97 l       .debug_str	00000000 
00036fa4 l       .debug_str	00000000 
000238eb l       .debug_str	00000000 
00036fd6 l       .debug_str	00000000 
00037040 l       .debug_str	00000000 
000370b0 l       .debug_str	00000000 
00037117 l       .debug_str	00000000 
00037134 l       .debug_str	00000000 
00037173 l       .debug_str	00000000 
0003718f l       .debug_str	00000000 
000238ad l       .debug_str	00000000 
000371bd l       .debug_str	00000000 
00023989 l       .debug_str	00000000 
000371f2 l       .debug_str	00000000 
0003722e l       .debug_str	00000000 
00037254 l       .debug_str	00000000 
00037293 l       .debug_str	00000000 
000372a3 l       .debug_str	00000000 
00037307 l       .debug_str	00000000 
0003733e l       .debug_str	00000000 
00037354 l       .debug_str	00000000 
000373a3 l       .debug_str	00000000 
000373af l       .debug_str	00000000 
00037481 l       .debug_str	00000000 
000373f6 l       .debug_str	00000000 
0003747c l       .debug_str	00000000 
000374a0 l       .debug_str	00000000 
000374db l       .debug_str	00000000 
000374eb l       .debug_str	00000000 
00058e57 l       .debug_str	00000000 
0003752c l       .debug_str	00000000 
00037566 l       .debug_str	00000000 
00037575 l       .debug_str	00000000 
000375ae l       .debug_str	00000000 
000375bc l       .debug_str	00000000 
000375f5 l       .debug_str	00000000 
00037603 l       .debug_str	00000000 
00037653 l       .debug_str	00000000 
00037660 l       .debug_str	00000000 
000376d6 l       .debug_str	00000000 
000376e1 l       .debug_str	00000000 
000376f3 l       .debug_str	00000000 
0003773f l       .debug_str	00000000 
0003775c l       .debug_str	00000000 
000377f0 l       .debug_str	00000000 
00037886 l       .debug_str	00000000 
000378f8 l       .debug_str	00000000 
0003791e l       .debug_str	00000000 
000379bd l       .debug_str	00000000 
00037a2e l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00037a73 l       .debug_str	00000000 
00037ad6 l       .debug_str	00000000 
00037af9 l       .debug_str	00000000 
00037b4d l       .debug_str	00000000 
00037b64 l       .debug_str	00000000 
00025444 l       .debug_str	00000000 
00037bb1 l       .debug_str	00000000 
00037bbe l       .debug_str	00000000 
00037bf9 l       .debug_str	00000000 
00037c21 l       .debug_str	00000000 
00037c83 l       .debug_str	00000000 
0003370b l       .debug_str	00000000 
00037cec l       .debug_str	00000000 
0003a51a l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
0002ae2b l       .debug_str	00000000 
0002ae3c l       .debug_str	00000000 
00037d39 l       .debug_str	00000000 
0000b1cc l       .debug_str	00000000 
00037d84 l       .debug_str	00000000 
00037e07 l       .debug_str	00000000 
00037e37 l       .debug_str	00000000 
00037ebf l       .debug_str	00000000 
00037f34 l       .debug_str	00000000 
00037f87 l       .debug_str	00000000 
00038013 l       .debug_str	00000000 
0003804b l       .debug_str	00000000 
000380a0 l       .debug_str	00000000 
000380d1 l       .debug_str	00000000 
00038123 l       .debug_str	00000000 
00038151 l       .debug_str	00000000 
000381a5 l       .debug_str	00000000 
000381cb l       .debug_str	00000000 
0001fe0d l       .debug_str	00000000 
00038202 l       .debug_str	00000000 
0003824d l       .debug_str	00000000 
00038269 l       .debug_str	00000000 
000382bf l       .debug_str	00000000 
0001ff54 l       .debug_str	00000000 
00038338 l       .debug_str	00000000 
00038388 l       .debug_str	00000000 
0003841f l       .debug_str	00000000 
00038475 l       .debug_str	00000000 
000384ee l       .debug_str	00000000 
00038506 l       .debug_str	00000000 
0003859d l       .debug_str	00000000 
000385d6 l       .debug_str	00000000 
00038806 l       .debug_str	00000000 
0003861f l       .debug_str	00000000 
000374e7 l       .debug_str	00000000 
0003865c l       .debug_str	00000000 
000386a0 l       .debug_str	00000000 
000386eb l       .debug_str	00000000 
0003872b l       .debug_str	00000000 
00038755 l       .debug_str	00000000 
0003879e l       .debug_str	00000000 
000387ad l       .debug_str	00000000 
000387fe l       .debug_str	00000000 
00038815 l       .debug_str	00000000 
00042ab5 l       .debug_str	00000000 
00054054 l       .debug_str	00000000 
0003887c l       .debug_str	00000000 
000388dd l       .debug_str	00000000 
000388fc l       .debug_str	00000000 
00038905 l       .debug_str	00000000 
00038911 l       .debug_str	00000000 
00016f75 l       .debug_str	00000000 
00038917 l       .debug_str	00000000 
00038921 l       .debug_str	00000000 
00038953 l       .debug_str	00000000 
00038963 l       .debug_str	00000000 
000389eb l       .debug_str	00000000 
000389f4 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00038a61 l       .debug_str	00000000 
00038aa0 l       .debug_str	00000000 
0001639d l       .debug_str	00000000 
000163a9 l       .debug_str	00000000 
000163b3 l       .debug_str	00000000 
00038aaf l       .debug_str	00000000 
00038b1f l       .debug_str	00000000 
00038b44 l       .debug_str	00000000 
00038bb3 l       .debug_str	00000000 
00038bd9 l       .debug_str	00000000 
00038c48 l       .debug_str	00000000 
00038c72 l       .debug_str	00000000 
00038ca9 l       .debug_str	00000000 
00038cb4 l       .debug_str	00000000 
00038cf0 l       .debug_str	00000000 
00038d0f l       .debug_str	00000000 
00038d49 l       .debug_str	00000000 
00038d84 l       .debug_str	00000000 
00038dc0 l       .debug_str	00000000 
0000e7d8 l       .debug_str	00000000 
00038dda l       .debug_str	00000000 
00038e16 l       .debug_str	00000000 
00038e23 l       .debug_str	00000000 
00051b0f l       .debug_str	00000000 
00038e61 l       .debug_str	00000000 
00038ea7 l       .debug_str	00000000 
00038f2f l       .debug_str	00000000 
00038f48 l       .debug_str	00000000 
00038fa2 l       .debug_str	00000000 
00038fe8 l       .debug_str	00000000 
00039000 l       .debug_str	00000000 
00039080 l       .debug_str	00000000 
00039554 l       .debug_str	00000000 
00039090 l       .debug_str	00000000 
000390cf l       .debug_str	00000000 
0003910f l       .debug_str	00000000 
00039199 l       .debug_str	00000000 
000391b0 l       .debug_str	00000000 
00039201 l       .debug_str	00000000 
0003920f l       .debug_str	00000000 
00039214 l       .debug_str	00000000 
0003926f l       .debug_str	00000000 
00039c29 l       .debug_str	00000000 
000392c6 l       .debug_str	00000000 
000392f9 l       .debug_str	00000000 
00039340 l       .debug_str	00000000 
0003937a l       .debug_str	00000000 
000393a9 l       .debug_str	00000000 
00039427 l       .debug_str	00000000 
000394ab l       .debug_str	00000000 
00039538 l       .debug_str	00000000 
0003954d l       .debug_str	00000000 
0003955d l       .debug_str	00000000 
000395a9 l       .debug_str	00000000 
000395ee l       .debug_str	00000000 
00039685 l       .debug_str	00000000 
000396a1 l       .debug_str	00000000 
000396e8 l       .debug_str	00000000 
00039716 l       .debug_str	00000000 
0003974f l       .debug_str	00000000 
00039771 l       .debug_str	00000000 
00019ec8 l       .debug_str	00000000 
000397ef l       .debug_str	00000000 
0003986f l       .debug_str	00000000 
000398ae l       .debug_str	00000000 
00039938 l       .debug_str	00000000 
00039984 l       .debug_str	00000000 
000399a2 l       .debug_str	00000000 
000399ad l       .debug_str	00000000 
00039a0f l       .debug_str	00000000 
00039a66 l       .debug_str	00000000 
00039af3 l       .debug_str	00000000 
00039b3f l       .debug_str	00000000 
00039bd6 l       .debug_str	00000000 
00039c20 l       .debug_str	00000000 
00039c3c l       .debug_str	00000000 
00039c96 l       .debug_str	00000000 
00039c9f l       .debug_str	00000000 
00039cfe l       .debug_str	00000000 
00039d55 l       .debug_str	00000000 
00039dae l       .debug_str	00000000 
00039dc3 l       .debug_str	00000000 
00039e10 l       .debug_str	00000000 
00039e5b l       .debug_str	00000000 
00039e6e l       .debug_str	00000000 
0001e9bb l       .debug_str	00000000 
00019e7a l       .debug_str	00000000 
00039eb9 l       .debug_str	00000000 
00039ece l       .debug_str	00000000 
00039eda l       .debug_str	00000000 
00039f1f l       .debug_str	00000000 
00039f78 l       .debug_str	00000000 
00039f8d l       .debug_str	00000000 
00039fda l       .debug_str	00000000 
0003a025 l       .debug_str	00000000 
0003a038 l       .debug_str	00000000 
0003a083 l       .debug_str	00000000 
0003a096 l       .debug_str	00000000 
0003a0fa l       .debug_str	00000000 
0003a133 l       .debug_str	00000000 
0003a15f l       .debug_str	00000000 
00057b84 l       .debug_str	00000000 
00052f49 l       .debug_str	00000000 
0003a1de l       .debug_str	00000000 
0003a1e4 l       .debug_str	00000000 
0003a1ed l       .debug_str	00000000 
0003a225 l       .debug_str	00000000 
0003a242 l       .debug_str	00000000 
0003a27e l       .debug_str	00000000 
0003a29b l       .debug_str	00000000 
0003a2f7 l       .debug_str	00000000 
0003a32f l       .debug_str	00000000 
0003a38b l       .debug_str	00000000 
00025acb l       .debug_str	00000000 
0003a3c3 l       .debug_str	00000000 
0003a401 l       .debug_str	00000000 
0003a41d l       .debug_str	00000000 
0003a473 l       .debug_str	00000000 
0003a4da l       .debug_str	00000000 
0003a512 l       .debug_str	00000000 
0003a51e l       .debug_str	00000000 
0003a585 l       .debug_str	00000000 
0003a5c4 l       .debug_str	00000000 
0003a5d5 l       .debug_str	00000000 
0003a60e l       .debug_str	00000000 
000485b6 l       .debug_str	00000000 
0003a629 l       .debug_str	00000000 
0003a665 l       .debug_str	00000000 
0003a65e l       .debug_str	00000000 
0003a66e l       .debug_str	00000000 
0003a680 l       .debug_str	00000000 
0003a6cb l       .debug_str	00000000 
0003a6e3 l       .debug_str	00000000 
0003a6ed l       .debug_str	00000000 
0003a704 l       .debug_str	00000000 
0003a713 l       .debug_str	00000000 
0003a755 l       .debug_str	00000000 
0003a76e l       .debug_str	00000000 
0003a7e2 l       .debug_str	00000000 
0003a7f1 l       .debug_str	00000000 
0003a82a l       .debug_str	00000000 
0003a840 l       .debug_str	00000000 
0003a880 l       .debug_str	00000000 
0003a88b l       .debug_str	00000000 
0003a90a l       .debug_str	00000000 
000526c2 l       .debug_str	00000000 
0003a929 l       .debug_str	00000000 
0003a93e l       .debug_str	00000000 
0003a948 l       .debug_str	00000000 
0001a4f5 l       .debug_str	00000000 
0003a94d l       .debug_str	00000000 
0003a97e l       .debug_str	00000000 
0003a991 l       .debug_str	00000000 
0003a99b l       .debug_str	00000000 
0003a9b8 l       .debug_str	00000000 
0003a9f3 l       .debug_str	00000000 
0003aa28 l       .debug_str	00000000 
0003aa59 l       .debug_str	00000000 
0003aa6d l       .debug_str	00000000 
0003aa78 l       .debug_str	00000000 
0003aa96 l       .debug_str	00000000 
0003aad1 l       .debug_str	00000000 
0003ab07 l       .debug_str	00000000 
0003ab38 l       .debug_str	00000000 
0003ab4c l       .debug_str	00000000 
0003ab57 l       .debug_str	00000000 
0003ab75 l       .debug_str	00000000 
0003abb0 l       .debug_str	00000000 
0003abe6 l       .debug_str	00000000 
0003ac17 l       .debug_str	00000000 
0003ac2b l       .debug_str	00000000 
0003ac36 l       .debug_str	00000000 
0003ac54 l       .debug_str	00000000 
0003ac8f l       .debug_str	00000000 
0003acc5 l       .debug_str	00000000 
0003acf6 l       .debug_str	00000000 
0003f543 l       .debug_str	00000000 
0003ad0b l       .debug_str	00000000 
0003ad17 l       .debug_str	00000000 
0003ad36 l       .debug_str	00000000 
0003ad71 l       .debug_str	00000000 
0003ada8 l       .debug_str	00000000 
0003add9 l       .debug_str	00000000 
0003adec l       .debug_str	00000000 
0003adf6 l       .debug_str	00000000 
0003ae13 l       .debug_str	00000000 
0003ae4e l       .debug_str	00000000 
0003ae83 l       .debug_str	00000000 
0003aeb4 l       .debug_str	00000000 
0003aec8 l       .debug_str	00000000 
0003aed3 l       .debug_str	00000000 
0003aef1 l       .debug_str	00000000 
0003af2c l       .debug_str	00000000 
0003af62 l       .debug_str	00000000 
0003af93 l       .debug_str	00000000 
0003afa7 l       .debug_str	00000000 
0003b016 l       .debug_str	00000000 
0003b051 l       .debug_str	00000000 
0003b09a l       .debug_str	00000000 
0003b0df l       .debug_str	00000000 
0003b13b l       .debug_str	00000000 
0003b184 l       .debug_str	00000000 
0003b1c9 l       .debug_str	00000000 
0003b225 l       .debug_str	00000000 
0003b26e l       .debug_str	00000000 
0003b2b3 l       .debug_str	00000000 
0003b30f l       .debug_str	00000000 
0003b31a l       .debug_str	00000000 
0003b338 l       .debug_str	00000000 
0003b373 l       .debug_str	00000000 
0003b3a9 l       .debug_str	00000000 
0003b3da l       .debug_str	00000000 
0003b3ee l       .debug_str	00000000 
0003b3f9 l       .debug_str	00000000 
0003b417 l       .debug_str	00000000 
0003b452 l       .debug_str	00000000 
0003b488 l       .debug_str	00000000 
0003b4f7 l       .debug_str	00000000 
0003b532 l       .debug_str	00000000 
0003b563 l       .debug_str	00000000 
0003b578 l       .debug_str	00000000 
0003b57d l       .debug_str	00000000 
0003b589 l       .debug_str	00000000 
0003b5a8 l       .debug_str	00000000 
0003b5e3 l       .debug_str	00000000 
0003b61a l       .debug_str	00000000 
0003b689 l       .debug_str	00000000 
0003b6c5 l       .debug_str	00000000 
0000a989 l       .debug_str	00000000 
0003b70e l       .debug_str	00000000 
0003b719 l       .debug_str	00000000 
0003b760 l       .debug_str	00000000 
0003b76a l       .debug_str	00000000 
0003b7ec l       .debug_str	00000000 
0003b809 l       .debug_str	00000000 
00017362 l       .debug_str	00000000 
0003b864 l       .debug_str	00000000 
0003b8be l       .debug_str	00000000 
0003b8cb l       .debug_str	00000000 
0003b93d l       .debug_str	00000000 
0003b9a1 l       .debug_str	00000000 
0003b9ac l       .debug_str	00000000 
0003ba25 l       .debug_str	00000000 
0003ba31 l       .debug_str	00000000 
0003baad l       .debug_str	00000000 
0003bab3 l       .debug_str	00000000 
0003baba l       .debug_str	00000000 
0003baf6 l       .debug_str	00000000 
00014853 l       .debug_str	00000000 
0003bb3f l       .debug_str	00000000 
0003bb83 l       .debug_str	00000000 
0003bbce l       .debug_str	00000000 
0003bc0d l       .debug_str	00000000 
0003bc32 l       .debug_str	00000000 
0003bc88 l       .debug_str	00000000 
0003bcf6 l       .debug_str	00000000 
0003bd76 l       .debug_str	00000000 
0003bde3 l       .debug_str	00000000 
0003be6e l       .debug_str	00000000 
0003bee2 l       .debug_str	00000000 
0003bf22 l       .debug_str	00000000 
0003bfa3 l       .debug_str	00000000 
0003bfe4 l       .debug_str	00000000 
0003c048 l       .debug_str	00000000 
0003c0f7 l       .debug_str	00000000 
0003c141 l       .debug_str	00000000 
0003c18e l       .debug_str	00000000 
0003c1d4 l       .debug_str	00000000 
0003c1de l       .debug_str	00000000 
0003c217 l       .debug_str	00000000 
0003c246 l       .debug_str	00000000 
0003c2a7 l       .debug_str	00000000 
0003c2d6 l       .debug_str	00000000 
0003c313 l       .debug_str	00000000 
0003c3a2 l       .debug_str	00000000 
0003c3d7 l       .debug_str	00000000 
0003c45d l       .debug_str	00000000 
0003c4e3 l       .debug_str	00000000 
0003c537 l       .debug_str	00000000 
0003c5c0 l       .debug_str	00000000 
00019d91 l       .debug_str	00000000 
0003c60e l       .debug_str	00000000 
0003c69c l       .debug_str	00000000 
0003c6f0 l       .debug_str	00000000 
0003c72f l       .debug_str	00000000 
0003c77a l       .debug_str	00000000 
0003c7fc l       .debug_str	00000000 
0003c818 l       .debug_str	00000000 
0003c871 l       .debug_str	00000000 
0003c8ca l       .debug_str	00000000 
0003c907 l       .debug_str	00000000 
0003c948 l       .debug_str	00000000 
0003c9a9 l       .debug_str	00000000 
0003ca1a l       .debug_str	00000000 
0003ca4a l       .debug_str	00000000 
0003ca90 l       .debug_str	00000000 
0003cb02 l       .debug_str	00000000 
0003cb96 l       .debug_str	00000000 
0003cbba l       .debug_str	00000000 
0003cc36 l       .debug_str	00000000 
0003cc70 l       .debug_str	00000000 
0003ccb2 l       .debug_str	00000000 
0003cd62 l       .debug_str	00000000 
0003cda1 l       .debug_str	00000000 
0003ce44 l       .debug_str	00000000 
0003cea0 l       .debug_str	00000000 
0003cefd l       .debug_str	00000000 
0003cfa8 l       .debug_str	00000000 
0003cfe1 l       .debug_str	00000000 
0003d05d l       .debug_str	00000000 
0003d095 l       .debug_str	00000000 
0003d0a1 l       .debug_str	00000000 
0003d0de l       .debug_str	00000000 
0003d136 l       .debug_str	00000000 
0003d156 l       .debug_str	00000000 
0003d1af l       .debug_str	00000000 
0003d208 l       .debug_str	00000000 
0003d261 l       .debug_str	00000000 
0003d2bb l       .debug_str	00000000 
0003d2f1 l       .debug_str	00000000 
0003d301 l       .debug_str	00000000 
0003d310 l       .debug_str	00000000 
0003d319 l       .debug_str	00000000 
0003d350 l       .debug_str	00000000 
0003d38c l       .debug_str	00000000 
0003d39c l       .debug_str	00000000 
0003d3f8 l       .debug_str	00000000 
0003d45a l       .debug_str	00000000 
00030669 l       .debug_str	00000000 
0003d4a4 l       .debug_str	00000000 
0003d4df l       .debug_str	00000000 
0003d504 l       .debug_str	00000000 
0003d563 l       .debug_str	00000000 
0003d5ad l       .debug_str	00000000 
0003d5e8 l       .debug_str	00000000 
0003d60d l       .debug_str	00000000 
0003d66c l       .debug_str	00000000 
0003d6d5 l       .debug_str	00000000 
0003d6de l       .debug_str	00000000 
0003d715 l       .debug_str	00000000 
0003d771 l       .debug_str	00000000 
0003d7d3 l       .debug_str	00000000 
0003d832 l       .debug_str	00000000 
0003d891 l       .debug_str	00000000 
0003d8c7 l       .debug_str	00000000 
0003d8d8 l       .debug_str	00000000 
0003d8e8 l       .debug_str	00000000 
0003d8f2 l       .debug_str	00000000 
0003d92a l       .debug_str	00000000 
0003d987 l       .debug_str	00000000 
0003d9ea l       .debug_str	00000000 
0003da35 l       .debug_str	00000000 
0003da70 l       .debug_str	00000000 
0003da96 l       .debug_str	00000000 
0003daf6 l       .debug_str	00000000 
0003db41 l       .debug_str	00000000 
0003db7c l       .debug_str	00000000 
0003dba2 l       .debug_str	00000000 
0003dc02 l       .debug_str	00000000 
0003dc38 l       .debug_str	00000000 
0003dc49 l       .debug_str	00000000 
0003dc59 l       .debug_str	00000000 
0003dc63 l       .debug_str	00000000 
0003dc9b l       .debug_str	00000000 
0003dcf8 l       .debug_str	00000000 
0003dd5b l       .debug_str	00000000 
0003ddbb l       .debug_str	00000000 
0003de1b l       .debug_str	00000000 
0003de51 l       .debug_str	00000000 
0003de62 l       .debug_str	00000000 
0003de72 l       .debug_str	00000000 
0003de7c l       .debug_str	00000000 
0003deb4 l       .debug_str	00000000 
0003df11 l       .debug_str	00000000 
0003df74 l       .debug_str	00000000 
0003dfbf l       .debug_str	00000000 
0003dffa l       .debug_str	00000000 
0003e020 l       .debug_str	00000000 
0003e080 l       .debug_str	00000000 
0003e0cb l       .debug_str	00000000 
0003e106 l       .debug_str	00000000 
0003e12c l       .debug_str	00000000 
0003e18c l       .debug_str	00000000 
0003e1c2 l       .debug_str	00000000 
0003e1d3 l       .debug_str	00000000 
0003e1e3 l       .debug_str	00000000 
0003e1ed l       .debug_str	00000000 
0003e225 l       .debug_str	00000000 
0003e282 l       .debug_str	00000000 
0003e2e5 l       .debug_str	00000000 
0003e345 l       .debug_str	00000000 
0003e3a5 l       .debug_str	00000000 
0003e3db l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0003e3ee l       .debug_str	00000000 
0003e400 l       .debug_str	00000000 
0003e40c l       .debug_str	00000000 
0003e447 l       .debug_str	00000000 
0003e4a6 l       .debug_str	00000000 
0003e50b l       .debug_str	00000000 
0003e56d l       .debug_str	00000000 
0003e5a8 l       .debug_str	00000000 
0003e5d0 l       .debug_str	00000000 
0003e632 l       .debug_str	00000000 
0001d174 l       .debug_str	00000000 
0001fb90 l       .debug_str	00000000 
00013324 l       .debug_str	00000000 
0003e668 l       .debug_str	00000000 
0003e6a3 l       .debug_str	00000000 
0003e6e3 l       .debug_str	00000000 
0003e700 l       .debug_str	00000000 
0003e744 l       .debug_str	00000000 
0003e765 l       .debug_str	00000000 
0003e7a5 l       .debug_str	00000000 
0003e7c2 l       .debug_str	00000000 
0003e806 l       .debug_str	00000000 
0003e827 l       .debug_str	00000000 
0003e889 l       .debug_str	00000000 
0003e8f0 l       .debug_str	00000000 
0003e92b l       .debug_str	00000000 
0003e94e l       .debug_str	00000000 
0003e9b4 l       .debug_str	00000000 
0003e9ef l       .debug_str	00000000 
0003ea11 l       .debug_str	00000000 
0003ea4c l       .debug_str	00000000 
0003ea70 l       .debug_str	00000000 
0003eaab l       .debug_str	00000000 
0003eace l       .debug_str	00000000 
0003eb09 l       .debug_str	00000000 
0003eb2d l       .debug_str	00000000 
0003eb68 l       .debug_str	00000000 
0003eb8b l       .debug_str	00000000 
0003ebc6 l       .debug_str	00000000 
0003ebea l       .debug_str	00000000 
0003ec35 l       .debug_str	00000000 
0003ec97 l       .debug_str	00000000 
0003ecd2 l       .debug_str	00000000 
0003ecf5 l       .debug_str	00000000 
0003ed40 l       .debug_str	00000000 
0003ed7b l       .debug_str	00000000 
0003eda1 l       .debug_str	00000000 
0003eddc l       .debug_str	00000000 
0003ee02 l       .debug_str	00000000 
0003ee53 l       .debug_str	00000000 
0003eea1 l       .debug_str	00000000 
0003eeec l       .debug_str	00000000 
0003ef1f l       .debug_str	00000000 
0003ef5a l       .debug_str	00000000 
0003ef7f l       .debug_str	00000000 
0003f00b l       .debug_str	00000000 
0003f03f l       .debug_str	00000000 
0003f0bb l       .debug_str	00000000 
0003f100 l       .debug_str	00000000 
0003f14c l       .debug_str	00000000 
0003f1af l       .debug_str	00000000 
0003f1ea l       .debug_str	00000000 
0003f20e l       .debug_str	00000000 
0003f249 l       .debug_str	00000000 
0003f270 l       .debug_str	00000000 
0003f2bc l       .debug_str	00000000 
0003f2f7 l       .debug_str	00000000 
0003f31e l       .debug_str	00000000 
0003f369 l       .debug_str	00000000 
0003f3b5 l       .debug_str	00000000 
0003f401 l       .debug_str	00000000 
0003f432 l       .debug_str	00000000 
0003f43a l       .debug_str	00000000 
00010d35 l       .debug_str	00000000 
0003f486 l       .debug_str	00000000 
0003f4bb l       .debug_str	00000000 
0003f4e9 l       .debug_str	00000000 
0003f4f2 l       .debug_str	00000000 
0003f540 l       .debug_str	00000000 
0003f548 l       .debug_str	00000000 
0003f5ad l       .debug_str	00000000 
0003f600 l       .debug_str	00000000 
0003f660 l       .debug_str	00000000 
0003f67f l       .debug_str	00000000 
0003f6e2 l       .debug_str	00000000 
0003f704 l       .debug_str	00000000 
0003f74f l       .debug_str	00000000 
0003f7b4 l       .debug_str	00000000 
0003f7d6 l       .debug_str	00000000 
0003f83f l       .debug_str	00000000 
0003f87c l       .debug_str	00000000 
0003f8e5 l       .debug_str	00000000 
0003f975 l       .debug_str	00000000 
0000b853 l       .debug_str	00000000 
0003f9d5 l       .debug_str	00000000 
0003fa38 l       .debug_str	00000000 
0003faa1 l       .debug_str	00000000 
0003fad4 l       .debug_str	00000000 
0003fb1c l       .debug_str	00000000 
0003fb96 l       .debug_str	00000000 
0003fbe7 l       .debug_str	00000000 
0003fc3e l       .debug_str	00000000 
0001b316 l       .debug_str	00000000 
0003fc86 l       .debug_str	00000000 
0003fce4 l       .debug_str	00000000 
0003fd01 l       .debug_str	00000000 
0003fd6d l       .debug_str	00000000 
0003fdb2 l       .debug_str	00000000 
0003fe00 l       .debug_str	00000000 
0003fe48 l       .debug_str	00000000 
0003fe52 l       .debug_str	00000000 
0003fec0 l       .debug_str	00000000 
0003fefc l       .debug_str	00000000 
0003ff1f l       .debug_str	00000000 
0003ff8f l       .debug_str	00000000 
0003ffd7 l       .debug_str	00000000 
0003ffe0 l       .debug_str	00000000 
0004003d l       .debug_str	00000000 
000400a0 l       .debug_str	00000000 
00040100 l       .debug_str	00000000 
00040160 l       .debug_str	00000000 
000401bc l       .debug_str	00000000 
0004021b l       .debug_str	00000000 
0004027b l       .debug_str	00000000 
00040296 l       .debug_str	00000000 
0001b274 l       .debug_str	00000000 
000402ea l       .debug_str	00000000 
00040368 l       .debug_str	00000000 
00040392 l       .debug_str	00000000 
000403f4 l       .debug_str	00000000 
00040455 l       .debug_str	00000000 
000404af l       .debug_str	00000000 
00040514 l       .debug_str	00000000 
00040566 l       .debug_str	00000000 
000405ae l       .debug_str	00000000 
000405c9 l       .debug_str	00000000 
00040643 l       .debug_str	00000000 
00040690 l       .debug_str	00000000 
0004070a l       .debug_str	00000000 
00040757 l       .debug_str	00000000 
000407ab l       .debug_str	00000000 
000407fd l       .debug_str	00000000 
00040865 l       .debug_str	00000000 
000408c5 l       .debug_str	00000000 
0004091f l       .debug_str	00000000 
0004097e l       .debug_str	00000000 
000409d8 l       .debug_str	00000000 
00040a35 l       .debug_str	00000000 
00023247 l       .debug_str	00000000 
00040a73 l       .debug_str	00000000 
0002422a l       .debug_str	00000000 
00040aae l       .debug_str	00000000 
00040b20 l       .debug_str	00000000 
00040bf3 l       .debug_str	00000000 
0001b434 l       .debug_str	00000000 
00040c3b l       .debug_str	00000000 
00040c89 l       .debug_str	00000000 
00040c93 l       .debug_str	00000000 
00040cdb l       .debug_str	00000000 
00040ce7 l       .debug_str	00000000 
00040d5b l       .debug_str	00000000 
00040d66 l       .debug_str	00000000 
00040da2 l       .debug_str	00000000 
00040dc9 l       .debug_str	00000000 
00040e1a l       .debug_str	00000000 
00040e27 l       .debug_str	00000000 
00040e35 l       .debug_str	00000000 
00040e48 l       .debug_str	00000000 
00040e53 l       .debug_str	00000000 
00040e95 l       .debug_str	00000000 
00040eaa l       .debug_str	00000000 
00040f14 l       .debug_str	00000000 
00040f71 l       .debug_str	00000000 
00040fd1 l       .debug_str	00000000 
00041031 l       .debug_str	00000000 
000410a3 l       .debug_str	00000000 
000410f0 l       .debug_str	00000000 
0004114f l       .debug_str	00000000 
000411a9 l       .debug_str	00000000 
0004121c l       .debug_str	00000000 
00041229 l       .debug_str	00000000 
00041289 l       .debug_str	00000000 
000412a8 l       .debug_str	00000000 
00041310 l       .debug_str	00000000 
0004132b l       .debug_str	00000000 
00041383 l       .debug_str	00000000 
000413cd l       .debug_str	00000000 
00041431 l       .debug_str	00000000 
00041450 l       .debug_str	00000000 
000414b2 l       .debug_str	00000000 
00041518 l       .debug_str	00000000 
00041598 l       .debug_str	00000000 
000415e7 l       .debug_str	00000000 
0004165d l       .debug_str	00000000 
000416d3 l       .debug_str	00000000 
000417a8 l       .debug_str	00000000 
00041805 l       .debug_str	00000000 
00041863 l       .debug_str	00000000 
000418e3 l       .debug_str	00000000 
00041952 l       .debug_str	00000000 
000419d0 l       .debug_str	00000000 
00041a23 l       .debug_str	00000000 
00041a88 l       .debug_str	00000000 
00041ae8 l       .debug_str	00000000 
00041b56 l       .debug_str	00000000 
00041bee l       .debug_str	00000000 
00041c7d l       .debug_str	00000000 
00041d0b l       .debug_str	00000000 
00041d99 l       .debug_str	00000000 
00041ea9 l       .debug_str	00000000 
00041f1d l       .debug_str	00000000 
00041f5f l       .debug_str	00000000 
00041fa8 l       .debug_str	00000000 
00042002 l       .debug_str	00000000 
0004207b l       .debug_str	00000000 
00042088 l       .debug_str	00000000 
0004208d l       .debug_str	00000000 
000420f9 l       .debug_str	00000000 
00042140 l       .debug_str	00000000 
000421ca l       .debug_str	00000000 
000421e9 l       .debug_str	00000000 
00042273 l       .debug_str	00000000 
00042297 l       .debug_str	00000000 
000422db l       .debug_str	00000000 
0004233f l       .debug_str	00000000 
00042383 l       .debug_str	00000000 
000423f5 l       .debug_str	00000000 
000424b3 l       .debug_str	00000000 
00042515 l       .debug_str	00000000 
000425ad l       .debug_str	00000000 
0004265c l       .debug_str	00000000 
000426f2 l       .debug_str	00000000 
00042785 l       .debug_str	00000000 
000427c9 l       .debug_str	00000000 
0004281c l       .debug_str	00000000 
000428a0 l       .debug_str	00000000 
0004292e l       .debug_str	00000000 
00042982 l       .debug_str	00000000 
00042993 l       .debug_str	00000000 
00042a18 l       .debug_str	00000000 
00042aa4 l       .debug_str	00000000 
00042aad l       .debug_str	00000000 
00042aba l       .debug_str	00000000 
00042b11 l       .debug_str	00000000 
00042b96 l       .debug_str	00000000 
00042be8 l       .debug_str	00000000 
00042bf7 l       .debug_str	00000000 
00042c3e l       .debug_str	00000000 
00042ca2 l       .debug_str	00000000 
00042cc3 l       .debug_str	00000000 
00042d43 l       .debug_str	00000000 
00042dae l       .debug_str	00000000 
00042e2c l       .debug_str	00000000 
00042e7b l       .debug_str	00000000 
00042eda l       .debug_str	00000000 
00042f72 l       .debug_str	00000000 
00043018 l       .debug_str	00000000 
000430ae l       .debug_str	00000000 
00043138 l       .debug_str	00000000 
000431ae l       .debug_str	00000000 
000431f7 l       .debug_str	00000000 
00043253 l       .debug_str	00000000 
000432ce l       .debug_str	00000000 
0004333a l       .debug_str	00000000 
000433c4 l       .debug_str	00000000 
00043408 l       .debug_str	00000000 
00043469 l       .debug_str	00000000 
000434ad l       .debug_str	00000000 
00043531 l       .debug_str	00000000 
000435bb l       .debug_str	00000000 
0004360d l       .debug_str	00000000 
0004368b l       .debug_str	00000000 
00043710 l       .debug_str	00000000 
00043767 l       .debug_str	00000000 
000437e8 l       .debug_str	00000000 
000438a6 l       .debug_str	00000000 
00043905 l       .debug_str	00000000 
00043968 l       .debug_str	00000000 
0004398d l       .debug_str	00000000 
000439f1 l       .debug_str	00000000 
00043a12 l       .debug_str	00000000 
00043a92 l       .debug_str	00000000 
00043afd l       .debug_str	00000000 
00043b7b l       .debug_str	00000000 
00043bca l       .debug_str	00000000 
00043c29 l       .debug_str	00000000 
00043cc1 l       .debug_str	00000000 
00043d67 l       .debug_str	00000000 
00043dfd l       .debug_str	00000000 
00043e87 l       .debug_str	00000000 
00043efd l       .debug_str	00000000 
00043f46 l       .debug_str	00000000 
00043fa2 l       .debug_str	00000000 
0004401d l       .debug_str	00000000 
00044089 l       .debug_str	00000000 
00044113 l       .debug_str	00000000 
00044157 l       .debug_str	00000000 
000441b8 l       .debug_str	00000000 
000441fc l       .debug_str	00000000 
00044280 l       .debug_str	00000000 
0004430a l       .debug_str	00000000 
00044388 l       .debug_str	00000000 
0004440d l       .debug_str	00000000 
00044464 l       .debug_str	00000000 
000444e5 l       .debug_str	00000000 
000445a3 l       .debug_str	00000000 
00044602 l       .debug_str	00000000 
00044635 l       .debug_str	00000000 
00044668 l       .debug_str	00000000 
0004469b l       .debug_str	00000000 
000446ce l       .debug_str	00000000 
00044701 l       .debug_str	00000000 
00044734 l       .debug_str	00000000 
00044767 l       .debug_str	00000000 
000447bb l       .debug_str	00000000 
000447e9 l       .debug_str	00000000 
0004483d l       .debug_str	00000000 
0005721a l       .debug_str	00000000 
00011499 l       .debug_str	00000000 
00044850 l       .debug_str	00000000 
00044854 l       .debug_str	00000000 
00044858 l       .debug_str	00000000 
0004485c l       .debug_str	00000000 
00044863 l       .debug_str	00000000 
00044868 l       .debug_str	00000000 
00044898 l       .debug_str	00000000 
000448ea l       .debug_str	00000000 
0004492b l       .debug_str	00000000 
00044938 l       .debug_str	00000000 
00044977 l       .debug_str	00000000 
00044982 l       .debug_str	00000000 
000449be l       .debug_str	00000000 
000449cc l       .debug_str	00000000 
00044a00 l       .debug_str	00000000 
00044a3b l       .debug_str	00000000 
00044a79 l       .debug_str	00000000 
00044a87 l       .debug_str	00000000 
00044ac0 l       .debug_str	00000000 
00044aca l       .debug_str	00000000 
00044b06 l       .debug_str	00000000 
00044b62 l       .debug_str	00000000 
00044b69 l       .debug_str	00000000 
00044bc7 l       .debug_str	00000000 
00044bd0 l       .debug_str	00000000 
00044c37 l       .debug_str	00000000 
00044c48 l       .debug_str	00000000 
00044ca5 l       .debug_str	00000000 
00044d04 l       .debug_str	00000000 
00044d60 l       .debug_str	00000000 
00044dbe l       .debug_str	00000000 
00044e25 l       .debug_str	00000000 
00044e82 l       .debug_str	00000000 
00044ee1 l       .debug_str	00000000 
00044f1a l       .debug_str	00000000 
00044f24 l       .debug_str	00000000 
00044f8c l       .debug_str	00000000 
00044fbf l       .debug_str	00000000 
00044fc9 l       .debug_str	00000000 
00044fff l       .debug_str	00000000 
0004500b l       .debug_str	00000000 
00045042 l       .debug_str	00000000 
0004504f l       .debug_str	00000000 
00045093 l       .debug_str	00000000 
000450ad l       .debug_str	00000000 
0004511e l       .debug_str	00000000 
00045131 l       .debug_str	00000000 
000451a2 l       .debug_str	00000000 
000451e5 l       .debug_str	00000000 
000451ef l       .debug_str	00000000 
00045239 l       .debug_str	00000000 
00045280 l       .debug_str	00000000 
000452cd l       .debug_str	00000000 
00045317 l       .debug_str	00000000 
00045349 l       .debug_str	00000000 
00045352 l       .debug_str	00000000 
00045386 l       .debug_str	00000000 
000453bf l       .debug_str	00000000 
000453fb l       .debug_str	00000000 
0004540d l       .debug_str	00000000 
0004544e l       .debug_str	00000000 
000454ad l       .debug_str	00000000 
000454de l       .debug_str	00000000 
000454f4 l       .debug_str	00000000 
00045529 l       .debug_str	00000000 
00045586 l       .debug_str	00000000 
000455ea l       .debug_str	00000000 
00045649 l       .debug_str	00000000 
000456a9 l       .debug_str	00000000 
00045707 l       .debug_str	00000000 
00020100 l       .debug_str	00000000 
0004576c l       .debug_str	00000000 
000457b2 l       .debug_str	00000000 
000457f2 l       .debug_str	00000000 
0004587a l       .debug_str	00000000 
00053c50 l       .debug_str	00000000 
00045901 l       .debug_str	00000000 
00045934 l       .debug_str	00000000 
000459a8 l       .debug_str	00000000 
00045a21 l       .debug_str	00000000 
00045a95 l       .debug_str	00000000 
00045af4 l       .debug_str	00000000 
00045b51 l       .debug_str	00000000 
00045bab l       .debug_str	00000000 
00045c07 l       .debug_str	00000000 
00045c64 l       .debug_str	00000000 
00045cc3 l       .debug_str	00000000 
00045d2b l       .debug_str	00000000 
00045d95 l       .debug_str	00000000 
00045dfe l       .debug_str	00000000 
00045e5c l       .debug_str	00000000 
00045ece l       .debug_str	00000000 
00045ed2 l       .debug_str	00000000 
00045f45 l       .debug_str	00000000 
00045fa3 l       .debug_str	00000000 
00045fff l       .debug_str	00000000 
00046070 l       .debug_str	00000000 
000460e6 l       .debug_str	00000000 
0004611d l       .debug_str	00000000 
00046179 l       .debug_str	00000000 
000461cd l       .debug_str	00000000 
0004622b l       .debug_str	00000000 
00046297 l       .debug_str	00000000 
000462ec l       .debug_str	00000000 
0004631f l       .debug_str	00000000 
0004632d l       .debug_str	00000000 
00046365 l       .debug_str	00000000 
00046378 l       .debug_str	00000000 
000463ad l       .debug_str	00000000 
000463e3 l       .debug_str	00000000 
0004643e l       .debug_str	00000000 
00046471 l       .debug_str	00000000 
00046478 l       .debug_str	00000000 
000464ba l       .debug_str	00000000 
000464eb l       .debug_str	00000000 
0004651c l       .debug_str	00000000 
0004654f l       .debug_str	00000000 
00046556 l       .debug_str	00000000 
00046583 l       .debug_str	00000000 
000465be l       .debug_str	00000000 
000465d1 l       .debug_str	00000000 
00046602 l       .debug_str	00000000 
0004660c l       .debug_str	00000000 
0004666d l       .debug_str	00000000 
000466d5 l       .debug_str	00000000 
00046712 l       .debug_str	00000000 
00046760 l       .debug_str	00000000 
0004679c l       .debug_str	00000000 
000467d8 l       .debug_str	00000000 
00046811 l       .debug_str	00000000 
0004684b l       .debug_str	00000000 
00046884 l       .debug_str	00000000 
000468bb l       .debug_str	00000000 
000468f4 l       .debug_str	00000000 
0004692e l       .debug_str	00000000 
00046974 l       .debug_str	00000000 
00046997 l       .debug_str	00000000 
000469dd l       .debug_str	00000000 
00046a00 l       .debug_str	00000000 
00046a49 l       .debug_str	00000000 
00046a6f l       .debug_str	00000000 
00046ab8 l       .debug_str	00000000 
00046ade l       .debug_str	00000000 
00046b28 l       .debug_str	00000000 
00046b4f l       .debug_str	00000000 
00046b99 l       .debug_str	00000000 
00046bc0 l       .debug_str	00000000 
00046c0d l       .debug_str	00000000 
00046c37 l       .debug_str	00000000 
00046c84 l       .debug_str	00000000 
00046cae l       .debug_str	00000000 
00046ce1 l       .debug_str	00000000 
00046d0d l       .debug_str	00000000 
00046d63 l       .debug_str	00000000 
00046d8e l       .debug_str	00000000 
00046de6 l       .debug_str	00000000 
00046e3c l       .debug_str	00000000 
00046e75 l       .debug_str	00000000 
00046e80 l       .debug_str	00000000 
0001ebf5 l       .debug_str	00000000 
00046eb9 l       .debug_str	00000000 
00046ee0 l       .debug_str	00000000 
00046f19 l       .debug_str	00000000 
00046f60 l       .debug_str	00000000 
00046f6d l       .debug_str	00000000 
00047187 l       .debug_str	00000000 
00046f9c l       .debug_str	00000000 
00046fdc l       .debug_str	00000000 
00046ff0 l       .debug_str	00000000 
00047032 l       .debug_str	00000000 
00047063 l       .debug_str	00000000 
00047093 l       .debug_str	00000000 
000470c4 l       .debug_str	00000000 
000470f5 l       .debug_str	00000000 
0004712c l       .debug_str	00000000 
00047137 l       .debug_str	00000000 
00047177 l       .debug_str	00000000 
0004718b l       .debug_str	00000000 
000471c7 l       .debug_str	00000000 
000471d7 l       .debug_str	00000000 
0004720c l       .debug_str	00000000 
00047216 l       .debug_str	00000000 
0004724b l       .debug_str	00000000 
00047255 l       .debug_str	00000000 
000472aa l       .debug_str	00000000 
000472f2 l       .debug_str	00000000 
00047338 l       .debug_str	00000000 
0004737f l       .debug_str	00000000 
000473c8 l       .debug_str	00000000 
0004741a l       .debug_str	00000000 
0004746c l       .debug_str	00000000 
0004750a l       .debug_str	00000000 
0004753c l       .debug_str	00000000 
00047575 l       .debug_str	00000000 
0004758a l       .debug_str	00000000 
000475c5 l       .debug_str	00000000 
000475dc l       .debug_str	00000000 
0004761a l       .debug_str	00000000 
00047634 l       .debug_str	00000000 
00047696 l       .debug_str	00000000 
000476bb l       .debug_str	00000000 
00047716 l       .debug_str	00000000 
00047725 l       .debug_str	00000000 
0004779a l       .debug_str	00000000 
000477b7 l       .debug_str	00000000 
000477f1 l       .debug_str	00000000 
0004782e l       .debug_str	00000000 
00047839 l       .debug_str	00000000 
00047871 l       .debug_str	00000000 
00047878 l       .debug_str	00000000 
000478f7 l       .debug_str	00000000 
00047957 l       .debug_str	00000000 
000479b5 l       .debug_str	00000000 
00047a13 l       .debug_str	00000000 
00047a4b l       .debug_str	00000000 
00047a80 l       .debug_str	00000000 
00047aab l       .debug_str	00000000 
00047ab5 l       .debug_str	00000000 
00047ae5 l       .debug_str	00000000 
00047af3 l       .debug_str	00000000 
00047b4c l       .debug_str	00000000 
00047b9f l       .debug_str	00000000 
00047c1b l       .debug_str	00000000 
00047c7f l       .debug_str	00000000 
00047ce3 l       .debug_str	00000000 
00047d19 l       .debug_str	00000000 
00047d2d l       .debug_str	00000000 
00047d6e l       .debug_str	00000000 
00047d86 l       .debug_str	00000000 
00047e3a l       .debug_str	00000000 
00047e6d l       .debug_str	00000000 
00047e7e l       .debug_str	00000000 
00047ec4 l       .debug_str	00000000 
00047ed1 l       .debug_str	00000000 
00047f0e l       .debug_str	00000000 
00047f52 l       .debug_str	00000000 
00047f93 l       .debug_str	00000000 
00047fd5 l       .debug_str	00000000 
00047fdf l       .debug_str	00000000 
00048023 l       .debug_str	00000000 
0004802e l       .debug_str	00000000 
0004807c l       .debug_str	00000000 
000480ca l       .debug_str	00000000 
00048110 l       .debug_str	00000000 
00048158 l       .debug_str	00000000 
000481a0 l       .debug_str	00000000 
00013cd7 l       .debug_str	00000000 
00048207 l       .debug_str	00000000 
00048260 l       .debug_str	00000000 
000482ca l       .debug_str	00000000 
00017469 l       .debug_str	00000000 
00048334 l       .debug_str	00000000 
000483af l       .debug_str	00000000 
00048424 l       .debug_str	00000000 
0004842f l       .debug_str	00000000 
000484a4 l       .debug_str	00000000 
000484af l       .debug_str	00000000 
00048506 l       .debug_str	00000000 
0004856a l       .debug_str	00000000 
00048576 l       .debug_str	00000000 
000485b3 l       .debug_str	00000000 
000485c0 l       .debug_str	00000000 
000485f4 l       .debug_str	00000000 
0004862f l       .debug_str	00000000 
0004868b l       .debug_str	00000000 
000486e6 l       .debug_str	00000000 
00048740 l       .debug_str	00000000 
0002f17a l       .debug_str	00000000 
00048786 l       .debug_str	00000000 
000487ec l       .debug_str	00000000 
00048823 l       .debug_str	00000000 
0004882b l       .debug_str	00000000 
00048863 l       .debug_str	00000000 
0004886c l       .debug_str	00000000 
000488a4 l       .debug_str	00000000 
000488ad l       .debug_str	00000000 
000488e4 l       .debug_str	00000000 
000488ec l       .debug_str	00000000 
00048924 l       .debug_str	00000000 
0004892d l       .debug_str	00000000 
00048965 l       .debug_str	00000000 
0004896e l       .debug_str	00000000 
000489a5 l       .debug_str	00000000 
000489ad l       .debug_str	00000000 
00048a27 l       .debug_str	00000000 
00048aa1 l       .debug_str	00000000 
00048b1b l       .debug_str	00000000 
00048b97 l       .debug_str	00000000 
0001abb4 l       .debug_str	00000000 
00048bf5 l       .debug_str	00000000 
00048c54 l       .debug_str	00000000 
00048cb3 l       .debug_str	00000000 
00048d12 l       .debug_str	00000000 
00048d72 l       .debug_str	00000000 
00048dd0 l       .debug_str	00000000 
00048e2f l       .debug_str	00000000 
00048e8e l       .debug_str	00000000 
00048eed l       .debug_str	00000000 
00048f4d l       .debug_str	00000000 
00048fa2 l       .debug_str	00000000 
00048ff7 l       .debug_str	00000000 
00049051 l       .debug_str	00000000 
000490ab l       .debug_str	00000000 
000490e5 l       .debug_str	00000000 
000490ee l       .debug_str	00000000 
00049128 l       .debug_str	00000000 
00049131 l       .debug_str	00000000 
0004916e l       .debug_str	00000000 
00030665 l       .debug_str	00000000 
000491a7 l       .debug_str	00000000 
00049208 l       .debug_str	00000000 
00049266 l       .debug_str	00000000 
000492a7 l       .debug_str	00000000 
000492e5 l       .debug_str	00000000 
0004931e l       .debug_str	00000000 
0004935d l       .debug_str	00000000 
0004939b l       .debug_str	00000000 
000493d9 l       .debug_str	00000000 
0004941a l       .debug_str	00000000 
0004945e l       .debug_str	00000000 
0004949b l       .debug_str	00000000 
00049501 l       .debug_str	00000000 
00049568 l       .debug_str	00000000 
000495cb l       .debug_str	00000000 
0004962d l       .debug_str	00000000 
00049692 l       .debug_str	00000000 
000496fb l       .debug_str	00000000 
00049761 l       .debug_str	00000000 
000497c7 l       .debug_str	00000000 
00049822 l       .debug_str	00000000 
00049889 l       .debug_str	00000000 
000498f4 l       .debug_str	00000000 
0004994f l       .debug_str	00000000 
000499aa l       .debug_str	00000000 
00023310 l       .debug_str	00000000 
000499f1 l       .debug_str	00000000 
00049a39 l       .debug_str	00000000 
00049a81 l       .debug_str	00000000 
00049ac9 l       .debug_str	00000000 
00049b12 l       .debug_str	00000000 
00049b5c l       .debug_str	00000000 
00049ba3 l       .debug_str	00000000 
00049bf6 l       .debug_str	00000000 
00049c11 l       .debug_str	00000000 
00049c59 l       .debug_str	00000000 
00049cad l       .debug_str	00000000 
00049cf5 l       .debug_str	00000000 
00049d49 l       .debug_str	00000000 
00049d91 l       .debug_str	00000000 
00049de5 l       .debug_str	00000000 
00049e2e l       .debug_str	00000000 
00049e83 l       .debug_str	00000000 
00049ecd l       .debug_str	00000000 
00049f25 l       .debug_str	00000000 
00049f87 l       .debug_str	00000000 
00049fe6 l       .debug_str	00000000 
0004a046 l       .debug_str	00000000 
0004a0a6 l       .debug_str	00000000 
0004a106 l       .debug_str	00000000 
0004a167 l       .debug_str	00000000 
0004a1c6 l       .debug_str	00000000 
0004a226 l       .debug_str	00000000 
0004a286 l       .debug_str	00000000 
0004a2e6 l       .debug_str	00000000 
0004a347 l       .debug_str	00000000 
0004a3a4 l       .debug_str	00000000 
0004a3ff l       .debug_str	00000000 
0004a455 l       .debug_str	00000000 
0004a4b3 l       .debug_str	00000000 
0004a507 l       .debug_str	00000000 
0004a568 l       .debug_str	00000000 
0004a5ce l       .debug_str	00000000 
0004a636 l       .debug_str	00000000 
0004a69d l       .debug_str	00000000 
0004a6f9 l       .debug_str	00000000 
0004a75a l       .debug_str	00000000 
0004a7b4 l       .debug_str	00000000 
0004a80e l       .debug_str	00000000 
0004a86c l       .debug_str	00000000 
0004a8c0 l       .debug_str	00000000 
0004a93c l       .debug_str	00000000 
0004a9a5 l       .debug_str	00000000 
0004aa21 l       .debug_str	00000000 
0004aa9d l       .debug_str	00000000 
0004ab06 l       .debug_str	00000000 
0004ab82 l       .debug_str	00000000 
0004abef l       .debug_str	00000000 
0004ac49 l       .debug_str	00000000 
0004aca2 l       .debug_str	00000000 
0004acfa l       .debug_str	00000000 
0004ad59 l       .debug_str	00000000 
0004adb8 l       .debug_str	00000000 
0004ae17 l       .debug_str	00000000 
0004ae77 l       .debug_str	00000000 
0004aed7 l       .debug_str	00000000 
0004af37 l       .debug_str	00000000 
0004af97 l       .debug_str	00000000 
0004aff9 l       .debug_str	00000000 
0004b05b l       .debug_str	00000000 
0004b0bc l       .debug_str	00000000 
0004b11e l       .debug_str	00000000 
0004b180 l       .debug_str	00000000 
0004b1e1 l       .debug_str	00000000 
0004b243 l       .debug_str	00000000 
0004b2a5 l       .debug_str	00000000 
000306a9 l       .debug_str	00000000 
0004b2ee l       .debug_str	00000000 
0004b33a l       .debug_str	00000000 
0004b342 l       .debug_str	00000000 
0004b38c l       .debug_str	00000000 
0004b3d7 l       .debug_str	00000000 
0004b3de l       .debug_str	00000000 
0004b429 l       .debug_str	00000000 
0004b474 l       .debug_str	00000000 
0004b4c0 l       .debug_str	00000000 
0004b50a l       .debug_str	00000000 
0004b557 l       .debug_str	00000000 
0004b5a2 l       .debug_str	00000000 
0004b5ee l       .debug_str	00000000 
0004b63a l       .debug_str	00000000 
0004b686 l       .debug_str	00000000 
0004b6d3 l       .debug_str	00000000 
0004b71d l       .debug_str	00000000 
0004b76a l       .debug_str	00000000 
0004b7b5 l       .debug_str	00000000 
0004b801 l       .debug_str	00000000 
0004b84d l       .debug_str	00000000 
0004b899 l       .debug_str	00000000 
0004b8e6 l       .debug_str	00000000 
0004b930 l       .debug_str	00000000 
0004b97d l       .debug_str	00000000 
0004b9c8 l       .debug_str	00000000 
0004ba14 l       .debug_str	00000000 
0004ba60 l       .debug_str	00000000 
0004baac l       .debug_str	00000000 
0004baf9 l       .debug_str	00000000 
0004bb44 l       .debug_str	00000000 
0004bb92 l       .debug_str	00000000 
0004bbde l       .debug_str	00000000 
0004bc2b l       .debug_str	00000000 
0004bc78 l       .debug_str	00000000 
0004bcc5 l       .debug_str	00000000 
0004bd13 l       .debug_str	00000000 
0004bd5e l       .debug_str	00000000 
0004bda9 l       .debug_str	00000000 
0004bdf5 l       .debug_str	00000000 
0004be41 l       .debug_str	00000000 
0004be8e l       .debug_str	00000000 
0004beda l       .debug_str	00000000 
0004bf27 l       .debug_str	00000000 
0004bf74 l       .debug_str	00000000 
0004bfd3 l       .debug_str	00000000 
0004c030 l       .debug_str	00000000 
0004c08c l       .debug_str	00000000 
0004c0ea l       .debug_str	00000000 
0004c147 l       .debug_str	00000000 
0004c1a5 l       .debug_str	00000000 
0004c202 l       .debug_str	00000000 
0004c260 l       .debug_str	00000000 
0004c2bd l       .debug_str	00000000 
0004c31c l       .debug_str	00000000 
0004c37a l       .debug_str	00000000 
0004c3db l       .debug_str	00000000 
0004c43c l       .debug_str	00000000 
0004c49f l       .debug_str	00000000 
0004c4d0 l       .debug_str	00000000 
0004c4d8 l       .debug_str	00000000 
0004c53b l       .debug_str	00000000 
0004c59e l       .debug_str	00000000 
0004c602 l       .debug_str	00000000 
0004c666 l       .debug_str	00000000 
0004c6ca l       .debug_str	00000000 
0004c72e l       .debug_str	00000000 
0004c791 l       .debug_str	00000000 
0004c7f4 l       .debug_str	00000000 
0004c858 l       .debug_str	00000000 
0004c8bc l       .debug_str	00000000 
0004c920 l       .debug_str	00000000 
0004c984 l       .debug_str	00000000 
0004c9b5 l       .debug_str	00000000 
0004c9bd l       .debug_str	00000000 
0004ca21 l       .debug_str	00000000 
0004ca85 l       .debug_str	00000000 
0004cae9 l       .debug_str	00000000 
0004cb4d l       .debug_str	00000000 
0004cbad l       .debug_str	00000000 
0004cc0d l       .debug_str	00000000 
0004cc3b l       .debug_str	00000000 
0004cc44 l       .debug_str	00000000 
0004cca5 l       .debug_str	00000000 
0004cd06 l       .debug_str	00000000 
0004cd67 l       .debug_str	00000000 
0004cdc8 l       .debug_str	00000000 
0004ce1f l       .debug_str	00000000 
0004ce72 l       .debug_str	00000000 
0004ceba l       .debug_str	00000000 
0004cee2 l       .debug_str	00000000 
0004cf2a l       .debug_str	00000000 
0004cf40 l       .debug_str	00000000 
0004cf88 l       .debug_str	00000000 
0004cfbd l       .debug_str	00000000 
0004d005 l       .debug_str	00000000 
0004d040 l       .debug_str	00000000 
0004d088 l       .debug_str	00000000 
0004d0d0 l       .debug_str	00000000 
0004d0f1 l       .debug_str	00000000 
0004d139 l       .debug_str	00000000 
0004d144 l       .debug_str	00000000 
0004d18c l       .debug_str	00000000 
0004d1c9 l       .debug_str	00000000 
0004d211 l       .debug_str	00000000 
0004d26a l       .debug_str	00000000 
0004d2b2 l       .debug_str	00000000 
0004d2ce l       .debug_str	00000000 
0004d316 l       .debug_str	00000000 
0004d3c2 l       .debug_str	00000000 
0004d40a l       .debug_str	00000000 
0004d428 l       .debug_str	00000000 
0004d470 l       .debug_str	00000000 
0004d47a l       .debug_str	00000000 
0004d4c2 l       .debug_str	00000000 
0004d4fd l       .debug_str	00000000 
0004d545 l       .debug_str	00000000 
0004d594 l       .debug_str	00000000 
0004d5dc l       .debug_str	00000000 
0004d603 l       .debug_str	00000000 
0004d64b l       .debug_str	00000000 
0004d675 l       .debug_str	00000000 
0004d6bd l       .debug_str	00000000 
0004d738 l       .debug_str	00000000 
0004d780 l       .debug_str	00000000 
0004d7c8 l       .debug_str	00000000 
0004d7de l       .debug_str	00000000 
00016bc3 l       .debug_str	00000000 
0004d826 l       .debug_str	00000000 
0004d86e l       .debug_str	00000000 
0004d8b6 l       .debug_str	00000000 
0004d8e7 l       .debug_str	00000000 
0004d92f l       .debug_str	00000000 
0004d993 l       .debug_str	00000000 
0004d9db l       .debug_str	00000000 
0000b802 l       .debug_str	00000000 
0004da23 l       .debug_str	00000000 
0004da6b l       .debug_str	00000000 
0004da78 l       .debug_str	00000000 
0004dac0 l       .debug_str	00000000 
0004daca l       .debug_str	00000000 
0004db12 l       .debug_str	00000000 
0004db1b l       .debug_str	00000000 
0004db63 l       .debug_str	00000000 
0004db8b l       .debug_str	00000000 
0004dbd3 l       .debug_str	00000000 
0004dc1b l       .debug_str	00000000 
0004dc3d l       .debug_str	00000000 
0004dc85 l       .debug_str	00000000 
0004dcb6 l       .debug_str	00000000 
0004dcfe l       .debug_str	00000000 
0004dd46 l       .debug_str	00000000 
0004dd7e l       .debug_str	00000000 
0004ddc6 l       .debug_str	00000000 
0004ddfb l       .debug_str	00000000 
0004de43 l       .debug_str	00000000 
0004de6c l       .debug_str	00000000 
0004deb4 l       .debug_str	00000000 
0004ded8 l       .debug_str	00000000 
0004df20 l       .debug_str	00000000 
0004df45 l       .debug_str	00000000 
0004df8d l       .debug_str	00000000 
0004dfaa l       .debug_str	00000000 
0004dff2 l       .debug_str	00000000 
0004dffd l       .debug_str	00000000 
0004e045 l       .debug_str	00000000 
0004e06d l       .debug_str	00000000 
0004e0b5 l       .debug_str	00000000 
0004e0c4 l       .debug_str	00000000 
0004e10c l       .debug_str	00000000 
0004e154 l       .debug_str	00000000 
0004e170 l       .debug_str	00000000 
0004e1b8 l       .debug_str	00000000 
0004e22f l       .debug_str	00000000 
0004e277 l       .debug_str	00000000 
0004e2ee l       .debug_str	00000000 
0004e336 l       .debug_str	00000000 
0004e33f l       .debug_str	00000000 
0004e387 l       .debug_str	00000000 
0004e3ad l       .debug_str	00000000 
0004e3f5 l       .debug_str	00000000 
0004e428 l       .debug_str	00000000 
0004e470 l       .debug_str	00000000 
0004e48d l       .debug_str	00000000 
0004e4d5 l       .debug_str	00000000 
0004e4de l       .debug_str	00000000 
0004e526 l       .debug_str	00000000 
0004e56e l       .debug_str	00000000 
0004e592 l       .debug_str	00000000 
0000b8eb l       .debug_str	00000000 
0004e5da l       .debug_str	00000000 
0004e622 l       .debug_str	00000000 
0004e66a l       .debug_str	00000000 
0004e762 l       .debug_str	00000000 
0001b2c4 l       .debug_str	00000000 
0004e7aa l       .debug_str	00000000 
0004e7f2 l       .debug_str	00000000 
0004e83a l       .debug_str	00000000 
0004e867 l       .debug_str	00000000 
0000b93c l       .debug_str	00000000 
0004e8af l       .debug_str	00000000 
0004e8f7 l       .debug_str	00000000 
0004e954 l       .debug_str	00000000 
0004e99c l       .debug_str	00000000 
0004e9a5 l       .debug_str	00000000 
0004e9ed l       .debug_str	00000000 
0004ea0a l       .debug_str	00000000 
0004ea52 l       .debug_str	00000000 
0004ea88 l       .debug_str	00000000 
0004ead0 l       .debug_str	00000000 
0004eb05 l       .debug_str	00000000 
0004eb4d l       .debug_str	00000000 
0004eb86 l       .debug_str	00000000 
0004ebce l       .debug_str	00000000 
0004ebea l       .debug_str	00000000 
0004ec32 l       .debug_str	00000000 
0004ec3a l       .debug_str	00000000 
0004ec82 l       .debug_str	00000000 
0004ec9d l       .debug_str	00000000 
0004ece5 l       .debug_str	00000000 
0004ed0d l       .debug_str	00000000 
0004ed57 l       .debug_str	00000000 
0004eda1 l       .debug_str	00000000 
0004ee00 l       .debug_str	00000000 
0004ee5d l       .debug_str	00000000 
0004eeb6 l       .debug_str	00000000 
0004ef15 l       .debug_str	00000000 
0004ef74 l       .debug_str	00000000 
0004efd5 l       .debug_str	00000000 
0004f038 l       .debug_str	00000000 
0004f0a0 l       .debug_str	00000000 
0004f102 l       .debug_str	00000000 
0004f168 l       .debug_str	00000000 
0004f1ca l       .debug_str	00000000 
0004f22f l       .debug_str	00000000 
0004f292 l       .debug_str	00000000 
0004f2ee l       .debug_str	00000000 
0004f345 l       .debug_str	00000000 
0004f39e l       .debug_str	00000000 
0004f3f1 l       .debug_str	00000000 
0004f44d l       .debug_str	00000000 
0004f4b3 l       .debug_str	00000000 
0004f509 l       .debug_str	00000000 
0004f566 l       .debug_str	00000000 
0004f5c8 l       .debug_str	00000000 
0004f621 l       .debug_str	00000000 
0004f67c l       .debug_str	00000000 
0004f6d7 l       .debug_str	00000000 
0004f732 l       .debug_str	00000000 
0004f78f l       .debug_str	00000000 
0004f7ec l       .debug_str	00000000 
0004f832 l       .debug_str	00000000 
0004f87c l       .debug_str	00000000 
0004f8bc l       .debug_str	00000000 
0004f8f9 l       .debug_str	00000000 
0004f93d l       .debug_str	00000000 
0004f979 l       .debug_str	00000000 
0004f9bd l       .debug_str	00000000 
0004fa06 l       .debug_str	00000000 
0004fa0f l       .debug_str	00000000 
0004fa58 l       .debug_str	00000000 
0004fa61 l       .debug_str	00000000 
0004faca l       .debug_str	00000000 
0004fb27 l       .debug_str	00000000 
0004fb8a l       .debug_str	00000000 
0004fbe0 l       .debug_str	00000000 
0004fc36 l       .debug_str	00000000 
0004fc8f l       .debug_str	00000000 
0004fce7 l       .debug_str	00000000 
0004fd4b l       .debug_str	00000000 
0004fdd1 l       .debug_str	00000000 
0004fdd7 l       .debug_str	00000000 
0004fe5d l       .debug_str	00000000 
0004fe63 l       .debug_str	00000000 
0004fee5 l       .debug_str	00000000 
0004ff67 l       .debug_str	00000000 
0004ffea l       .debug_str	00000000 
0004fff1 l       .debug_str	00000000 
00050074 l       .debug_str	00000000 
0005007b l       .debug_str	00000000 
00050101 l       .debug_str	00000000 
00050187 l       .debug_str	00000000 
0005020a l       .debug_str	00000000 
0005028d l       .debug_str	00000000 
0005030f l       .debug_str	00000000 
00050395 l       .debug_str	00000000 
0005041b l       .debug_str	00000000 
000504a5 l       .debug_str	00000000 
0005052d l       .debug_str	00000000 
000505b5 l       .debug_str	00000000 
0005061d l       .debug_str	00000000 
00050686 l       .debug_str	00000000 
000506f0 l       .debug_str	00000000 
0005075b l       .debug_str	00000000 
000507b9 l       .debug_str	00000000 
00050817 l       .debug_str	00000000 
00050875 l       .debug_str	00000000 
000508d4 l       .debug_str	00000000 
00050932 l       .debug_str	00000000 
00050991 l       .debug_str	00000000 
000509ef l       .debug_str	00000000 
00050a4e l       .debug_str	00000000 
00050aad l       .debug_str	00000000 
00050b0c l       .debug_str	00000000 
00050b6a l       .debug_str	00000000 
00050bc9 l       .debug_str	00000000 
00050c28 l       .debug_str	00000000 
00050c87 l       .debug_str	00000000 
00050ce6 l       .debug_str	00000000 
00050d45 l       .debug_str	00000000 
00050da4 l       .debug_str	00000000 
00050e03 l       .debug_str	00000000 
00050e62 l       .debug_str	00000000 
00050ec1 l       .debug_str	00000000 
00050f20 l       .debug_str	00000000 
00050f7f l       .debug_str	00000000 
00050fde l       .debug_str	00000000 
0005103d l       .debug_str	00000000 
0005109c l       .debug_str	00000000 
000510fb l       .debug_str	00000000 
0005115a l       .debug_str	00000000 
000511b9 l       .debug_str	00000000 
00051218 l       .debug_str	00000000 
00051277 l       .debug_str	00000000 
000512d7 l       .debug_str	00000000 
00051336 l       .debug_str	00000000 
00051395 l       .debug_str	00000000 
000513f4 l       .debug_str	00000000 
00051454 l       .debug_str	00000000 
000514b3 l       .debug_str	00000000 
00051512 l       .debug_str	00000000 
00051571 l       .debug_str	00000000 
000515d1 l       .debug_str	00000000 
0001546a l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE
000172c2 l     F .text	0000000a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E
000172cc l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E
00015ad6 l     F .text	000000e4 _ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE
00016afe l     F .text	0000024c _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE
000159d0 l     F .text	000000b0 _ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E
00015a80 l     F .text	00000024 _ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE
00015ff8 l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E
0001541a l     F .text	00000002 _ZN4core3ptr13drop_in_place17h000c7c147ade2111E
0001547c l     F .text	00000114 _ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E
0001f0a4 l     O .text	0000007b _ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E
0001f11f l     O .text	000001f0 _ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E
0001f310 l     O .text	00000458 _ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E
0001e680 l     O .text	00000010 _ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE
00015aaa l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE
00015ab0 l     F .text	00000026 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE
00015aa4 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E
0001541c l     F .text	0000004e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE
00000000 l    df *ABS*	00000000 semihosting_console.c
000172d8 l     F .text	00000024 __semihost
000172fc l     F .text	00000010 debugger_connected
0001730c l     F .text	0000002e semihost_write
000173e0 l     F .text	0000001c semihosting_console_write_ch
20006f04 l     O .bss	00000004 semihost_mbuf
20000100 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
20006f08 l     O .bss	00000010 avail_queue
20006f18 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
20006f24 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
000175b0 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_gpio.c
00017604 l     F .text	00000050 hal_gpio_irq_handler
00017654 l     F .text	0000002c hal_gpio_irq_setup
00017680 l     F .text	0000001c hal_gpio_find_empty_slot
0001769c l     F .text	00000038 hal_gpio_find_pin
20006f28 l     O .bss	00000040 hal_gpio_irqs
20006f68 l     O .bss	00000001 irq_setup.8906
00000000 l    df *ABS*	00000000 hal_i2c.c
00017830 l     F .text	0000007a hal_i2c_delay_us
000178ac l     F .text	00000024 hal_i2c_resolve
000178d0 l     F .text	0000001c hal_i2c_convert_status
000178ec l     F .text	00000012 read_gpio_inbuffer
000178fe l     F .text	000000a2 hal_i2c_clear_bus
0001f778 l     O .text	00000008 nrf52_hal_i2cs
00000000 l    df *ABS*	00000000 hal_spi.c
00017c9c l     F .text	0000006e nrf52_irqm_handler
00017d24 l     F .text	00000014 hal_spi_stop_transfer
00017d38 l     F .text	0000004c hal_spi_config_slave
00017d84 l     F .text	000000b8 hal_spi_init_master
00017e3c l     F .text	000000e0 hal_spi_config_master
0001f780 l     O .text	0000000c nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_watchdog.c
00018220 l     F .text	0000000e nrf52_hal_wdt_default_handler
00018230 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
00018448 l     F .text	00000016 os_main
20007070 l     O .bss	00002000 g_os_main_stack
20006f70 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
00018758 l     F .text	0000005c os_dev_add
000187b4 l     F .text	00000026 os_dev_initialize
000187da l     F .text	00000020 os_dev_init
20009070 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20009078 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
00018d04 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
00018e18 l     F .text	00000010 os_msys_find_biggest_pool
00018e28 l     F .text	0000002c os_msys_find_pool
00018ea0 l     F .text	00000044 os_msys_init_once
20009088 l     O .bss	00004900 os_msys_1_data
2000d988 l     O .bss	0000000c os_msys_1_mbuf_pool
2000d994 l     O .bss	0000001c os_msys_1_mempool
2000010c l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
000190fc l     F .text	00000020 os_sanity_check_list_lock
0001911c l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00019590 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
00019680 l     F .text	0000004c os_deltatime
000196cc l     F .text	0000005c os_time_tick
2000d9b8 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
000199e8 l       .text	00000000 SVC_User
00019a06 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
00019aa8 l       .text	00000000 test1
00019a9c l       .text	00000000 loop1
00019aae l       .text	00000000 res1
00019aca l       .text	00000000 test2
00019ad2 l       .text	00000000 done
00019abe l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
00019ade l       .text	00000000 test1
00019ada l       .text	00000000 loop1
00019aec l       .text	00000000 test2
00019ae8 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tinyprintf.c
00019b56 l     F .text	000000c0 ui2a
00019c16 l     F .text	00000020 i2a
00019c36 l     F .text	00000030 a2d
00019c66 l     F .text	00000036 a2i
00019c9c l     F .text	0000002a putf
00019cc8 l     F .text	0000011c putchw
00019de4 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
0001a168 l     F .text	00000004 stdin_read
0001a16c l     F .text	00000010 stdout_write
20000124 l     O .data	00000004 _stdin
20000128 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001a21c l     F .text	00000028 nrf52k_flash_wait_ready
0001a244 l     F .text	00000054 nrf52k_flash_erase_sector
0001a298 l     F .text	00000004 nrf52k_flash_init
0001a29c l     F .text	00000020 nrf52k_flash_sector_info
0001a2bc l     F .text	000000d0 nrf52k_flash_write
0001a38c l     F .text	0000000e nrf52k_flash_read
0001f938 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0001a39c l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_timer.c
0001a5a8 l     F .text	0000000a nrf_read_timer_cntr
0001a5b4 l     F .text	000000b4 nrf_timer_set_ocmp
0001a668 l     F .text	0000000a nrf_timer_disable_ocmp
0001a672 l     F .text	0000000a nrf_rtc_disable_ocmp
0001a67c l     F .text	00000054 hal_timer_read_bsptimer
0001a6d0 l     F .text	00000076 hal_timer_chk_queue
0001a746 l     F .text	0000002c hal_timer_irq_handler
0001f954 l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 nrf52_periph.c
0001a90c l     F .text	00000034 nrf52_periph_create_timers
0001a940 l     F .text	00000020 nrf52_periph_create_i2c
0001a960 l     F .text	00000020 nrf52_periph_create_spi
0001f96c l     O .text	0000000c hal_i2c1_cfg
0001f978 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 sensor.c
0001a994 l     F .text	00000028 sensor_mgr_remove
0001a9bc l     F .text	00000060 sensor_mgr_insert
0001aa1c l     F .text	0000000a sensor_type_traits_empty
0001aa28 l     F .text	0000000c sensor_mgr_evq_set
0001aa62 l     F .text	0000005c sensor_read_data_func
0001aac0 l     F .text	00000048 sensor_base_ts_update_event
0001ab08 l     F .text	00000050 sensor_up_timestamp
0001ab90 l     F .text	000000a0 sensor_mgr_init
0001adfc l     F .text	0000007c sensor_mgr_wakeup_event
0001ac5a l     F .text	00000032 sensor_update_nextrun
0001ac8c l     F .text	0000001e sensor_calc_nextrun_delta
0001acac l     F .text	00000024 sensor_find_min_nextrun_sensor
0001ad84 l     F .text	0000004a sensor_mgr_poll_bytype
0001adce l     F .text	0000002e sensor_poll_per_type_trait
2000d9ec l     O .bss	00000078 sensor_notify_evt_area
2000da64 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 sensor_coap.c
2000da80 l     O .bss	00000008 oc_sem
2000da88 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
2000da8c l     O .bss	0000000c hw_id
2000da98 l     O .bss	00000004 hw_id_len
2000daa0 l     O .bss	00000008 sensor_node_address
2000daa8 l     O .bss	00000037 sensor_node_names_buf
20000130 l     O .data	00000014 sensor_node_names
0001f990 l     O .text	0000000c COLLECTOR_NODE_HW_ID
0001f99c l     O .text	0000003c SENSOR_NODE_HW_IDS
0001fa38 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 creator.c
0001b020 l     F .text	00000050 config_device
2000dae0 l     O .bss	00000014 adc_1_itf_temp_stub
2000daf8 l     O .bss	000000c0 temp_stub_dev
00000000 l    df *ABS*	00000000 temp_stub.c
0001b0cc l     F .text	00000004 temp_stub_close
0001b0d0 l     F .text	0000001c temp_stub_sensor_get_config
0001b0ec l     F .text	00000026 temp_stub_open
0001b1c8 l     F .text	0000007c temp_stub_sensor_read
0001fa7c l     O .text	00000028 g_temp_stub_sensor_driver
00000000 l    df *ABS*	00000000 oc_buffer.c
0001b26c l     F .text	00000030 oc_buffer_tx
0001b29c l     F .text	0000002c oc_buffer_rx
2000dbb8 l     O .bss	00000018 oc_inq
2000dbd0 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_ri.c
2000dbe8 l     O .bss	000000c8 oc_client_cb_area
2000dcb0 l     O .bss	0000001c oc_client_cb_pool
00000000 l    df *ABS*	00000000 adaptor.c
2000dccc l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 oc_rep.c
2000dcd0 l     O .bss	0000001c oc_rep_objects
2000dcec l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 flash_map.c
0001b3f0 l     F .text	00000078 flash_map_read_mfg
2000dd1c l     O .bss	00000078 mfg_areas.9056
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0001b544 l     F .text	00000094 mfg_seek_next_aux
0001b5d8 l     F .text	00000070 mfg_read_mmr
0001b648 l     F .text	00000054 mfg_read_next_mmr
0001b69c l     F .text	0000003c mfg_open_flash_area
0001b6d8 l     F .text	00000044 mfg_read_tlv_body
0001b7a4 l     F .text	0000004e mfg_read_mmr_refs
2000dd94 l     O .bss	00000001 mfg_initialized
2000dd98 l     O .bss	00000018 mfg_mmrs
2000ddb0 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001b80a l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 nrf52_hw_id.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_memclr.c
00000000 l    df *ABS*	00000000 aeabi_memcpy.c
00000000 l    df *ABS*	00000000 lib_a-aeabi_memset-soft.o
00000000 l    df *ABS*	00000000 libchip8.bde0u64m-cgu.0
00000afc l       .debug_str	00000000 
0001a627 l       .debug_str	00000000 
0001a67e l       .debug_str	00000000 
00011cc9 l       .debug_str	00000000 
0001a6ca l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0001a6d2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
000155e8 g     F .text	00000004 _ZN4core5panic8Location4line17h650a566d9637c91dE
00008616 g     F .text	000000ba main
00009cf4 g     F .text	0000070a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E
00018a28 g     F .text	00000040 os_eventq_remove
00019874 g     F .text	00000018 os_arch_init
00019a90 g     F .text	00000048 memcmp
00011dba g     F .text	00000012 _ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE
00014770 g     F .text	00000024 _ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE
000114e8 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E
00012130 g     F .text	000000ee _ZN3log17__private_api_log17h076f8f4ccc99f19bE
00014f20 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE
00014da8 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E
0001136a g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h6a9fe8e0637c7337E
00014274 g     F .text	00000002 _ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E
00015618 g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E
0000a46c g     F .text	0000001e .hidden _ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE
000090a0 g     F .text	00000010 _ZN4core3ptr5write17h7ef3fa6b6f80daebE
0000bbde g     F .text	000000d4 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E
000170ea g     F .text	000000f4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17hc96955e2b836ab47E
2000ded0 g     O .bss	0000001c nrf52_hal_timer0
00009086 g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE
0001ac50 g     F .text	0000000a sensor_unlock
0000a852 g     F .text	00000036 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E
0000be2c g     F .text	000000f6 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE
0001153c g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E
00008ef2 g     F .text	0000006c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E
00019148 g     F .text	00000024 os_sanity_check_register
0001b120 g     F .text	0000007c temp_stub_init
000191e8 g     F .text	00000054 os_sched_insert
0000bd4c g     F .text	00000014 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17h3eb92f330a1e13e5E
00011142 g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$8shutdown17h728c2b30a102c46bE
2000ddb4 g     O .bss	00000001 g_silence_console
0001244c g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE
00014b9e g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
0001b8a8 g     F .text	00000034 hal_bsp_hw_id
00008164  w    F .text	00000002 NFCT_IRQHandler
00015408 g     F .text	00000004 .hidden _ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE
00010e56 g     F .text	000000a8 _ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E
00014860 g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E
00008c5e g     F .text	00000012 _ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE
000146b6 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE
00008a9c g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E
20000114 g     O .data	00000008 g_os_run_list
0001b32c g     F .text	00000020 oc_send_buffer
0001991c g     F .text	00000030 os_arch_start
0001af44 g     F .text	0000001a is_standalone_node
000087d2 g     F .text	00000054 _ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE
00018914 g     F .text	00000010 os_eventq_init
000164d6 g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E
00011152 g     F .text	00000010 _ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04da96b0e9749c79E
000124dc g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E
00015bba g     F .text	00000022 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E
00011526 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E
00008d54 g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE
00011274 g     F .text	00000038 _ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h53d3e78f478dc601E
0000ccb0 g     F .text	00000028 _ZN4core6option15Option$LT$T$GT$6as_mut17h781416273935c5a0E
00015122 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE
0001ae78 g     F .text	00000028 init_sensor_coap
00014e34 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE
0001b34c g     F .text	0000004c oc_send_multicast_message
00011adc g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E
00016492 g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE
2000def0 g     O .bss	00000034 sensor_mgr
0000cd98 g     F .text	00000106 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E
0001747c g     F .text	0000002c console_dump
00019314 g     F .text	00000078 os_sched_wakeup
000152b2 g     F .text	0000011c .hidden _ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE
000123dc g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E
00016f9a g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17h6ff113c3a96d4445E
00008ad4 g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E
0001b808 g     F .text	00000002 _fini
0001874c g     F .text	0000000a os_cputime_get32
000115ec g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E
00014116 g     F .text	00000132 _ZN6mynewt3hal4GPIO4init17h54c34caf27320956E
2000ddb5 g     O .bss	00000001 g_console_input_ignore
00019804 g     F .text	00000014 os_arch_ctx_sw
00011326 g     F .text	00000028 .hidden _ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E
00012422 g     F .text	0000001a _ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E
0000b990 g     F .text	00000042 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17he15d36584013bbaeE
00019a52 g     F .text	0000000c SysTick_Handler
0001aeb8 g     F .text	00000070 get_hardware_id
00008168 g     F .text	00000010 _sbrkInit
00011edc g     F .text	0000003c _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E
00011552 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE
000093d8 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE
00008a74 g     F .text	00000012 _ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E
00019b2a g     F .text	0000001c strcmp
0000b798 g     F .text	00000128 .hidden _ZN3app5chip88on_start17h473d234c4f7ef3a3E
2000dde8 g     O .bss	00000050 g_idle_task
0000d18a g     F .text	00000052 _ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E
00018904 g     F .text	00000010 os_dev_reset
00009484 g     F .text	00000262 _ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E
00019464 g     F .text	00000010 os_sem_init
0001497a g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E
000173fc g     F .text	00000070 console_printhex
0000aab6 g     F .text	00000270 .hidden _ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E
00010e00 g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$4push17h2bc728f644865dbfE
0000885c g     F .text	0000003a _ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE
000142e0 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE
0001fb3c g       .text	00000000 __exidx_start
0001af28 g     F .text	0000001c is_collector_node
000151e2 g     F .text	00000036 _ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE
0001139c g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5039ae5c012134d0E
00019af2 g     F .text	00000038 memset
00008164  w    F .text	00000002 WDT_IRQHandler
00016da8 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h096b8fea83a9dea7E
0001738c g     F .text	00000054 console_buffer
00018924 g     F .text	0000000a os_eventq_inited
000175c4 g     F .text	0000000c sysinit_end
00014d56 g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE
000151b2 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE
00008020 g       .text	00000000 __isr_vector_start
00008164  w    F .text	00000002 TIMER3_IRQHandler
00008164  w    F .text	00000002 MWU_IRQHandler
00015590 g     F .text	0000004a _ZN4core6result13unwrap_failed17h10957bfda7d5e5f2E
2000df88 g       .bss	00000000 __HeapBase
00009384 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E
0000882e g     F .text	0000002e _ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E
00014248 g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E
0000cffc g     F .text	00000014 _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h7785b67405c5f47aE
00014450 g     F .text	00000096 _ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E
0001b4a8 g     F .text	00000026 flash_area_read
0001240c g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E
0001b3be g     F .text	00000002 oc_register_ip4
00008faa g     F .text	00000046 _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E
0001b3c0 g     F .text	00000002 oc_register_ip6
0000842c g     F .text	000001d4 SystemInit
00014c2c g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE
0001b828 g     F .text	00000028 hal_flash_init
000188cc g     F .text	00000036 os_dev_close
0001fad4 g     O .text	00000048 sysflash_map_dflt
0001a210 g     F .text	0000000c hal_bsp_init
00008b80 g     F .text	00000032 _ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E
00011bd8 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
0000991e g     F .text	0000012c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE
00011a9e g     F .text	00000032 _ZN4core3ptr4read17h2038b0ecb0975c4fE
0001bc04 g     F .text	00000004 __aeabi_memcpy4
0000bd60 g     F .text	000000c4 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h3f18189aedbeb9e0E
00018068 g     F .text	0000002c hal_spi_set_txrx_cb
0001bbfc g     F .text	00000006 __aeabi_memclr8
000086d0 g     F .text	00000102 rust_begin_unwind
2000ddb8 g     O .bss	00000004 console_is_midline
0001bbfc g     F .text	00000006 __aeabi_memclr4
000080f8 g       .text	00000000 __isr_vector_end
00017b60 g     F .text	0000013c hal_i2c_master_read
00019e48 g     F .text	0000025c tfp_format
000150f2 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE
0001ad1c g     F .text	00000068 sensor_read
000149d0 g     F .text	00000058 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E
0000906c g     F .text	00000010 _ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E
0001bc04 g     F .text	00000004 __aeabi_memcpy
0001bc04 g     F .text	00000004 __aeabi_memcpy8
2000df24 g     O .bss	00000020 st_up_osco
0001994c g     F .text	0000005c os_arch_os_start
0001acfe g     F .text	0000001e sensor_init
000153ce g     F .text	00000032 .hidden _ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE
20000000 g       .bss	00000000 _ram_start
00019774 g     F .text	00000026 os_time_delay
0000cd24 g     F .text	00000014 _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h01a214062ce56537E
0001b3bc g     F .text	00000002 oc_register_gatt
20004a6c g     O .bss	00000004 _ZN3log20MAX_LOG_LEVEL_FILTER17h20753a6176f34564E
0001b8a4 g     F .text	00000004 hal_bsp_hw_id_len
0001870c g     F .text	00000034 os_callout_wakeup_ticks
00018a82 g     F .text	00000026 os_mqueue_get
000179a0 g     F .text	00000098 hal_i2c_init
00016364 g     F .text	0000012e _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E
00016da8 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E
00008164  w    F .text	00000002 TIMER4_IRQHandler
0001de4c g     O .text	00000050 _ZN8libchip87CHARBUF17h227c6d0d7e24574cE
000150c2 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E
00019414 g     F .text	00000022 os_sched
00008c70 g     F .text	00000020 _ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
0001130c g     F .text	0000001a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E
00011c1e g     F .text	00000014 _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE
2000fe50 g       *ABS*	000001b0 __StackLimit
0001aa34 g     F .text	0000002e sensor_mgr_match_bytype
00011af2 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE
0000a9d4 g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE
00018f50 g     F .text	00000014 os_mutex_init
00008f5e g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E
00009cb0 g     F .text	00000044 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE
2000ddc0 g     O .bss	00000028 nrf52_hal_spi0
00008614 g     F .text	00000002 _init
00000020 g       *ABS*	00000000 _imghdr_size
00008164  w    F .text	00000002 RTC1_IRQHandler
00011d04 g     F .text	00000008 _ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E
00008164  w    F .text	00000002 PDM_IRQHandler
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
00015032 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE
20000124 g       .data	00000000 __aeabi_unwind_cpp_pr0
00009214 g     F .text	0000001a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E
0000935a g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE
00008b78 g     F .text	00000008 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E
000125f4 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E
00018ef4 g     F .text	00000028 os_msys_get_pkthdr
0001b19c g     F .text	0000002c temp_stub_get_raw_temperature
0001938c g     F .text	0000003c os_sched_os_timer_exp
000187fc g     F .text	00000040 os_dev_create
0000bcb2 g     F .text	0000009a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
00019138 g     F .text	00000010 os_sanity_check_init
0001137c g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17hb92aaa4dbbca4bccE
0001567a g     F .text	0000022c _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE
00008164  w    F .text	00000002 SAADC_IRQHandler
00018740 g     F .text	0000000c os_cputime_init
00018a10 g     F .text	00000018 os_eventq_run
000120bc g     F .text	0000000c _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE
00018f1c g     F .text	00000034 os_msys_init
00014818 g     F .text	0000000e .hidden _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E
00014bc8 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E
000197fa g     F .text	0000000a timer_handler
000116b6 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE
0001540c g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E
000092ea g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E
00008bb2 g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E
00015404 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E
00015658 g     F .text	00000022 _ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E
000080f8 g     F .text	0000005c Reset_Handler
0000cad0 g     F .text	0000002e .hidden _ZN3app5chip812handle_touch17habca32c74e5cefadE
000147ec g     F .text	0000002c _ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE
00008020 g       .text	000000d8 __isr_vector
00016f9a g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17heaf2297ac445d947E
000144e6 g     F .text	0000002a .hidden _ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE
0001a0a4 g     F .text	00000008 vfprintf
000142cc g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E
00011c4a g     F .text	0000000a _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E
00011ca8 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E
00018b22 g     F .text	00000036 os_mbuf_get_pkthdr
00008164  w    F .text	00000002 PWM0_IRQHandler
00015092 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E
00000000 g       .svc_table	00000000 SVC_Count
00016866 g     F .text	00000298 _ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE
0000c666 g     F .text	000002c8 _ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE
000155ec g     F .text	0000002c _ZN4core9panicking5panic17h24d1dd0a9d540834E
0001982a g     F .text	0000000a os_arch_in_critical
000191d8 g     F .text	00000010 os_sanity_init
000113f4 g     F .text	000000ba _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E
00016f9a g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E
00014afe g     F .text	00000018 .hidden _ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE
000182ec g     F .text	0000004c __assert_func
00014e20 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E
0001460c g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
00018dc2 g     F .text	0000001e os_memblock_put_from_cb
000199ac g     F .text	00000014 os_set_env
2000deac g     O .bss	00000004 g_os_last_ctx_sw_time
00008a86 g     F .text	0000000a _ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE
0001755c g     F .text	00000048 console_printf
00012456 g     F .text	00000016 .hidden _ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E
0000a924 g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE
00011b1e g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE
00012328 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E
00014fd2 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E
000199c0 g     F .text	00000006 os_arch_init_task_stack
0001b794 g     F .text	00000010 mfg_open
00016f9a g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17hb33f6f1f0114a92bE
00014b16 g     F .text	0000005e .hidden _ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE
0001b2f0 g     F .text	00000030 oc_ri_mem_init
000096e6 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE
0001a200 g     F .text	00000010 hal_bsp_flash_dev
0001b4d0 g     F .text	00000070 flash_map_init
2000dec0 g     O .bss	00000004 g_os_time
00010d1c g     F .text	00000024 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17ha6efa376ff520dabE
0000cd1a g     F .text	0000000a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E
00019a5e g     F .text	0000001e os_default_irq_asm
00018338 g     F .text	00000098 os_default_irq
200000e4 g     O .data	00000004 SystemCoreClock
00017fa0 g     F .text	00000068 hal_spi_disable
0001249c g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E
0000903e g     F .text	0000002e _ZN6mynewt3sys7console6buffer17h6e460748855d110aE
0001b3c2 g     F .text	00000002 oc_register_lora
00018ba4 g     F .text	000000a8 os_mbuf_append
0001b070 g     F .text	0000005c temp_stub_create
0001b850 g     F .text	00000054 hal_flash_read
0001733c g     F .text	00000048 console_flush
0001858c g     F .text	0000001a os_start
0001a784 g     F .text	00000060 hal_timer_init
00011566 g     F .text	00000086 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E
0001a17c g     F .text	00000010 rust_sysinit
00008164  w    F .text	00000002 I2S_IRQHandler
0001746c g     F .text	00000010 console_printint
00019438 g     F .text	0000002c os_sched_resort
0001f914 g     O .text	00000008 MemFile_methods
000112ac g     F .text	0000004c _ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h3c6fa8392f63d25bE
00011004 g     F .text	0000007e _ZN8libchip814Chip8$LT$T$GT$5setup17h331c1512aac9f047E
0001a150 g     F .text	00000018 fmemopen_w
000132ec g     F .text	00000126 _ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E
00017f1c g     F .text	00000038 hal_spi_config
0001bbf8  w    F .text	00000002 .hidden __aeabi_ldiv0
00018e08 g     F .text	00000010 os_mempool_module_init
00019408 g     F .text	0000000c os_sched_next_task
0001775a g     F .text	00000034 hal_gpio_read
000185e0 g     F .text	0000001a os_callout_init
00018ee4 g     F .text	00000010 os_msys_reset
00011082 g     F .text	000000c0 _ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E
0001a0ac g     F .text	00000024 printf
00008156  w    F .text	00000002 HardFault_Handler
0001b8fc g     F .text	00000000 .hidden __aeabi_uldivmod
0001979c g     F .text	00000038 os_gettimeofday
000174e8 g     F .text	0000001e console_write
00015182 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E
0001632e g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE
000097e2 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE
0001846c g     F .text	00000070 os_init_idle_task
0001988c g     F .text	0000008c os_arch_os_init
00009322 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E
000184dc g     F .text	000000b0 os_init
2000de98 g     O .bss	00000008 g_os_mempool_list
000097d8 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE
00008184 g     F .text	00000010 hal_debugger_connected
00011b34 g     F .text	0000009a _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E
000174e4 g     F .text	00000004 semihosting_console_init
0001b72e g     F .text	0000001a mfg_seek_next_with_type
0001901c g     F .text	000000e0 os_mutex_pend
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
00014932 g     F .text	00000026 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E
00017738 g     F .text	00000022 hal_gpio_write
0000b986 g     F .text	0000000a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h254831b02f23b02eE
00008600 g     F .text	00000014 _start
00011c16 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE
00011c7e g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE
0001b7f4 g     F .text	00000014 __wrap_coap_receive
00015002 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E
2000ddbc g     O .bss	00000001 sysinit_active
00014ac2 g     F .text	00000012 _ZN4core3mem4swap17h206518364108b51fE
00012518 g     F .text	0000006e .hidden _ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E
00014364 g     F .text	0000002a _ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE
0001a120 g     F .text	0000002e memfile_write
0001bbf8  w    F .text	00000002 .hidden __aeabi_idiv0
00014a6c g     F .text	00000030 .hidden _ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE
00018460 g     F .text	0000000c os_started
0001b2c8 g     F .text	00000028 oc_buffer_init
00014276 g     F .text	00000056 _ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE
00009306 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E
2000dea0 g     O .bss	0000000c g_os_sanity_check_mu
000090b0 g     F .text	0000002c .hidden _ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E
00014a4a g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
0001bbfc g     F .text	00000006 __aeabi_memclr
0001bc08 g     F .text	0000009a __aeabi_memset4
00012680 g     F .text	00000a7a _ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E
00016336 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE
0001246c g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E
00019734 g     F .text	00000040 os_time_advance
00017f54 g     F .text	0000004c hal_spi_enable
0001b75c g     F .text	00000038 mfg_init
00013d96 g     F .text	00000010 _ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E
2000de38 g     O .bss	00000050 g_os_main_task
0001bc08 g     F .text	0000009a __aeabi_memset8
00016e06 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hcd88e3dc15351fceE
00008b6c g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE
0001fb54 g       .ARM.exidx	00000000 __exidx_end
00008164  w    F .text	00000002 PWM1_IRQHandler
20000148 g     O .bss	00000018 _ZN22piet_embedded_graphics7display7DISPLAY17ha0ff10e671b220f2E
00015978 g     F .text	00000058 _ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE
00008afa g     F .text	0000004e _ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE
000171de g     F .text	000000e4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17hea84eef47d2fd641E
000175d0 g     F .text	00000034 NVIC_Relocate
0000cb98 g     F .text	0000009c _ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E
000175b8 g     F .text	0000000c sysinit_start
0001f920 g     O .text	00000018 nrf52k_flash_dev
0001a7e4 g     F .text	000000f8 hal_timer_config
000143e0 g     F .text	0000004c _ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E
0001a10c g     F .text	00000014 vprintf
0000be24 g     F .text	00000008 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha66b0913e7bbcba9E
00008f90 g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E
00017384 g     F .text	00000008 disable_buffer
00014e48 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E
2000de88 g     O .bss	00000004 g_os_started
0000cc34 g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE
000155e0 g     F .text	00000008 _ZN4core5panic9PanicInfo7payload17h9302c8d957737573E
0000d134 g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$3pop17hcb81f3113413a9ceE
20000144 g       .bssnz	00000000 __bssnz_end__
00018868 g     F .text	00000020 os_dev_lookup
00009208 g     F .text	0000000c _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E
000182c8 g     F .text	00000010 hal_watchdog_enable
2000dec4 g     O .bss	0000000c g_hal_os_tick
00014dba g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E
00019824 g     F .text	00000006 os_arch_restore_sr
00018638 g     F .text	00000078 os_callout_reset
000097ec g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE
0001b748 g     F .text	0000000a mfg_read_tlv_flash_area
000124b8 g     F .text	00000024 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E
0000815a  w    F .text	00000002 BusFault_Handler
00018a70 g     F .text	00000012 os_mqueue_init
00015062 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E
00014510 g     F .text	00000052 _ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E
0001b112 g     F .text	0000000e temp_stub_default_cfg
000124ec g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E
00008020 g       .imghdr	00000000 __text
000185fc g     F .text	0000003c os_callout_stop
000081c0 g     F .text	0000004c hal_system_clock_start
00018b6c g     F .text	00000024 os_mbuf_free_chain
000090dc g     F .text	0000000a .hidden _ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E
0001a18c g     F .text	00000030 mem_init_mbuf_pool
00012510 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E
0000cafe g     F .text	0000009a _ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E
00008a90 g     F .text	0000000c _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E
00014dcc g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E
00017a38 g     F .text	00000128 hal_i2c_master_write
00008164  w    F .text	00000002 QDEC_IRQHandler
00010d40 g     F .text	00000014 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hb6f25fe722781fd6E
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
00014910 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E
00012662 g     F .text	0000001e _ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E
000118f2 g     F .text	0000003a _ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E
00018a68 g     F .text	00000008 os_eventq_dflt_get
0001ac38 g     F .text	00000018 sensor_lock
000114fe g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE
000088c6 g     F .text	00000016 _ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE
00017510 g     F .text	0000004c console_pkg_init
20000104 g     O .data	00000004 sysinit_panic_cb
00018b90 g     F .text	00000014 os_mbuf_len
00018b58 g     F .text	00000014 os_mbuf_free
00011b08 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE
000120c8 g     F .text	0000000a _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE
00008194 g     F .text	0000002c hal_system_reset
00017506 g     F .text	00000008 console_blocking_mode
0000a492 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE
00009a4a g     F .text	00000266 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE
00011512 g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E
0001a980 g     F .text	00000010 nrf52_periph_create
0001916c g     F .text	0000006c os_sanity_run
00014826 g     F .text	0000003a .hidden _ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE
00014ab4 g     F .text	0000000e .hidden _ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E
0000841c g     F .text	00000010 SystemCoreClockUpdate
000142e6 g     F .text	0000007e .hidden _ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE
0001442c g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E
00008896 g     F .text	00000030 _ZN4core3any6TypeId2of17haae5124a9f275cb8E
00018d7c g     F .text	00000014 os_mempool_init
0001f91c g     O .text	00000004 stdout
0000aa84 g     F .text	0000000e .hidden _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE
0000ccd8 g     F .text	00000042 _ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E
0001883c g     F .text	0000002c os_dev_initialize_all
00008c90 g     F .text	000000b4 _ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E
00014df6 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE
000183d0 g     F .text	00000078 os_idle_task
00008d44 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h1982c2483e0a2028E
0001134e g     F .text	0000001c _ZN4core4iter6traits8iterator8Iterator7flatten17hce303520e4c400b1E
00014f38 g     F .text	0000000a .hidden _ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE
00009868 g     F .text	000000b6 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE
0001602c g     F .text	00000302 _ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE
0001b468 g     F .text	00000040 flash_area_open
00008164 g     F .text	00000002 Default_Handler
000155de g     F .text	00000002 _ZN4core5panic8Location6caller17h4b6b61f9498709a3E
0000922e g     F .text	000000bc _ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E
00018e54 g     F .text	0000004c os_msys_register
000114c2 g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17hfd3597918d2fce20E
000090e6 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E
2000d9b0 g     O .bss	00000004 g_os_sanity_check_list
0000a888 g     F .text	00000066 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E
00011c54 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE
0001182e g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E
00018008 g     F .text	00000060 hal_spi_init
00008164  w    F .text	00000002 RNG_IRQHandler
0001ab74 g     F .text	00000010 sensor_mgr_unlock
2000df80 g     O .bss	00000004 flash_map_entries
00016d4a g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17hb1f1dec5462292d8E
00014f42 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E
0001b3c4 g     F .text	00000002 oc_register_serial
00008178 g     F .text	0000000c hal_system_init
00014760 g     F .text	00000010 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E
0000a4bc g     F .text	00000396 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E
00011162 g     F .text	00000112 _ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E
00008164  w    F .text	00000002 GPIOTE_IRQHandler
00011dcc g     F .text	000000aa _ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0001b71c g     F .text	00000012 mfg_seek_next
000120d2 g     F .text	00000008 _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE
2000011c g     O .data	00000008 g_os_sleep_list
00015d9c g     F .text	0000025c _ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E
0000ce9e g     F .text	0000013c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E
00015218 g     F .text	00000058 _ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE
00018ae6 g     F .text	0000000a os_mbuf_pool_init
2000de90 g     O .bss	00000008 g_callout_list
00019278 g     F .text	0000000c os_sched_set_current_task
0000b9d2 g     F .text	0000020c _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E
000186b0 g     F .text	0000005c os_callout_tick
00015270 g     F .text	00000042 _ZN4core3ptr4read17h38cf3848f1a0f2ccE
00009102 g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE
00011d34 g     F .text	0000007c _ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E
00018250 g     F .text	00000078 hal_watchdog_init
2000deb4 g     O .bss	00000001 g_task_id
00017070 g     F .text	0000007a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E
0000a48a g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17hef1277471241eea2E
0000aa92 g     F .text	00000024 .hidden _ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E
00018888 g     F .text	00000044 os_dev_open
2000deb0 g     O .bss	00000004 g_current_task
00015400 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE
20000148 g       .bss	00000000 __bss_start__
00014eb4 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E
00008b60 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE
0000d1dc g     F .text	00003b40 _ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E
00017d0c g     F .text	00000018 nrf52_spi0_irq_handler
0001ac30 g     F .text	00000008 sensor_pkg_init
00014ad4 g     F .text	0000002a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE
0001b244 g     F .text	00000028 temp_stub_config
000114ae g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h977bf45075800c77E
00018aa8 g     F .text	0000003e os_mqueue_put
000171de g     F .text	000000e4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE
00018094 g     F .text	000000ac hal_spi_txrx
00008164  w    F .text	00000002 RTC2_IRQHandler
0001926c g     F .text	0000000c os_sched_get_current_task
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00012344 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E
0001b540 g     F .text	00000002 modlog_init
00018140 g     F .text	000000e0 hal_spi_txrx_noblock
0001633e g     F .text	00000026 _ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE
0000907c g     F .text	0000000a _ZN6mynewt3sys7console5flush17h78b2f38352f0d691E
00008164  w    F .text	00000002 TEMP_IRQHandler
00008ece g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE
0001923c g     F .text	00000030 os_sched_ctx_sw_hook
0001acd0 g     F .text	0000002e sensor_mgr_register
00015590 g     F .text	0000004a _ZN4core6option18expect_none_failed17h54d938081af97677E
00015bdc g     F .text	000001c0 _ZN4core3fmt5write17hd95ac78ed22a2252E
0000cfda g     F .text	00000008 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcdf096192109e52aE
00008154  w    F .text	00000002 NMI_Handler
0001425e g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE
0000917e g     F .text	0000008a _ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE
00008d4c g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E
00011ad0 g     F .text	0000000c _ZN4core3ptr5write17h4a80332de2cee3d3E
00014958 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E
00018af0 g     F .text	00000032 os_mbuf_get
2000deb8 g     O .bss	00000008 g_os_task_list
00008928 g     F .text	0000014c _ZN6mynewt4Strn8validate17h1102378208cc75cdE
000158a6 g     F .text	000000d2 _ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E
0001a0d0 g     F .text	0000003a vsnprintf
00013134 g     F .text	00000090 _ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E
0000cd38 g     F .text	00000060 _ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E
00018f64 g     F .text	000000b8 os_mutex_release
000120da g     F .text	00000056 _ZN3log6logger17hf609e7cc1c031552E
00011e8e g     F .text	0000004e _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E
0001ab84 g     F .text	0000000c sensor_mgr_evq_get
0000d010 g     F .text	0000001c _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf3cc102ec961f44aE
00014794 g     F .text	00000058 _ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E
00011c32 g     F .text	00000018 _ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E
2000de8c g     O .bss	00000004 g_os_idle_ctr
000112f8 g     F .text	00000014 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h81f0567d2baa3411E
000176d4 g     F .text	0000002c hal_gpio_init_in
00011bce g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE
000097f6 g     F .text	00000036 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E
00008164  w    F .text	00000002 TIMER1_IRQHandler
00010dda g     F .text	00000026 _ZN8libchip814Chip8$LT$T$GT$4next17h079fcfcda82e796aE
0001a990 g     F .text	00000002 sensor_dev_create
00011752 g     F .text	0000008e _ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE
00010d64 g     F .text	00000076 _ZN8libchip814Chip8$LT$T$GT$4load17h41409d517e122012E
00010efe g     F .text	00000106 _ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E
00008164  w    F .text	00000002 TIMER0_IRQHandler
000088dc g     F .text	00000010 _ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE
00017700 g     F .text	00000038 hal_gpio_init_out
00008d6e g     F .text	00000160 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE
00011862 g     F .text	00000012 _ZN4core3mem4swap17hc4afbec7b5ffb125E
00010d54 g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$4jump17h98fcf36ccb52be45E
00014898 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E
00009402 g     F .text	0000003e .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE
200000d8 g       .data	00000000 __data_start__
00019728 g     F .text	0000000c os_time_get
000155e0 g     F .text	00000008 _ZN4core5panic8Location4file17h61e77cb122865fdbE
0000a3fe g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E
00018de0 g     F .text	00000026 os_memblock_put
000131c4 g     F .text	00000128 _ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE
00019284 g     F .text	00000090 os_sched_sleep
00011c0c g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE
0001ab58 g     F .text	0000001c sensor_mgr_lock
0001b92c g     F .text	000002cc .hidden __udivmoddi4
0001151e g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E
0001a508 g     F .text	000000a0 os_tick_init
0001438e g     F .text	00000052 _ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E
000155da g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E
00008164  w    F .text	00000002 RTC0_IRQHandler
00008ff0 g     F .text	00000044 _ZN6mynewt3sys7console5print17hc13a6743274d87fcE
000193c8 g     F .text	00000040 os_sched_wakeup_ticks
0000933e g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE
0001a8dc g     F .text	00000030 hal_timer_read
20000144 g       .data	00000000 __data_end__
00017808 g     F .text	00000028 hal_gpio_irq_enable
0001b320 g     F .text	0000000c oc_evq_set
0001aea0 g     F .text	00000018 is_sensor_node
00016d4a g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE
0001b398 g     F .text	00000024 oc_init
00016ec4 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h54b904d9d5d295daE
00016ec4 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h85ec06f2c95e1ecaE
0000971c g     F .text	000000bc _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE
0001651a g     F .text	0000034c _ZN4core3str16slice_error_fail17h232f9181d55b3da9E
00014fa2 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E
2000df48 g     O .bss	00000018 sensor_base_ts
000170ea g     F .text	000000f4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E
00014c90 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E
0001fb54 g       .ARM.exidx	00000000 __etext
000114d6 g     F .text	00000012 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE
00016e06 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E
000175a4 g     F .text	0000000c console_get_ticks
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
00009034 g     F .text	0000000a _ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E
0000d02c g     F .text	00000108 _ZN8libchip814Chip8$LT$T$GT$3new17h327c7b1fc19df648E
20000108 g     O .data	00000004 hal_twi_i2c1
000195a8 g     F .text	000000d8 os_task_init
00008f68 g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E
00011814 g     F .text	0000001a _ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE
00011bfc g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E
00015152 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E
00019474 g     F .text	00000064 os_sem_release
0001bc08 g     F .text	0000009a __aeabi_memset
00018c4c g     F .text	000000b8 os_mbuf_dup
00019a0c g     F .text	00000046 PendSV_Handler
000124fc g     F .text	00000014 _ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E
000199c6 g     F .text	00000046 SVC_Handler
00008826 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17he6c5bffce3c304d4E
00019818 g     F .text	0000000c os_arch_save_sr
00008164  w    F .text	00000002 PWM2_IRQHandler
0000815c  w    F .text	00000002 UsageFault_Handler
0001a774 g     F .text	00000010 nrf52_timer0_irq_handler
00019834 g     F .text	00000040 os_arch_task_stack_init
2000df88 g       .bss	00000000 __bss_end__
00014a28 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E
00018d90 g     F .text	00000032 os_memblock_get
2000df84 g     O .bss	00000004 flash_map
00008164  w    F .text	00000002 RADIO_IRQHandler
0001192c g     F .text	00000056 _ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE
00008164  w    F .text	00000002 TIMER2_IRQHandler
000115f2 g     F .text	000000c4 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E
000182d8 g     F .text	00000014 hal_watchdog_tickle
00018996 g     F .text	0000007a os_eventq_get
0001b8dc g     F .text	00000020 sprintf
0000cfe2 g     F .text	0000001a _ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE
000197d4 g     F .text	00000026 os_time_ms_to_ticks
000088ec g     F .text	0000003c _ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E
0000a8ee g     F .text	00000036 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE
2000d9e8 g     O .bss	00000004 os_flags
0001b3c8 g     F .text	00000028 oc_rep_init
00019ad8 g     F .text	0000001a memcpy
0001a1bc g     F .text	00000044 sysinit_app
0001138e g     F .text	0000000e _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6ed52dfe9f180960E
00011e76 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E
00014f72 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E
00013da6 g     F .text	0000036c _ZN6mynewt3hal3SPI4init17h97467ea724680fb5E
000123f6 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE
000174a8 g     F .text	0000003c console_out_nolock
2000df60 g     O .bss	00000020 oc_transports
00017790 g     F .text	00000078 hal_gpio_irq_init
00019b46 g     F .text	00000010 strlen
000194d8 g     F .text	000000b8 os_sem_pend
0001a470 g     F .text	00000098 os_tick_idle
0001243c g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E
000148ee g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
00000000 g       .svc_table	00000000 SVC_Table
00012586 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE
2000fe50 g       *ABS*	00000000 __HeapLimit
000185a8 g     F .text	00000038 os_pkg_init
20000144 g       .bssnz	00000000 __bssnz_start__
000093ae g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17had883e363867a05eE
000113c8 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h53e4f1f46625fe50E
0000a452 g     F .text	0000001a .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E
00014562 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE
00008164  w    F .text	00000002 ECB_IRQHandler
00014112 g     F .text	00000004 _ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E
00014a9c g     F .text	00000018 .hidden _ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E
00008158  w    F .text	00000002 MemoryManagement_Handler
00016ec4 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17hc11e05ad6528dc14E
0001892e g     F .text	00000068 os_eventq_put
20010000 g       .bss	00000000 __StackTop
0000982c g     F .text	0000003c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E
00011740 g     F .text	00000012 _ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE
0001b752 g     F .text	0000000a mfg_read_tlv_mmr_ref
00008b48 g     F .text	00000018 _ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E
0001af60 g     F .text	000000c0 sensor_network_init
00016ec4 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE
00014b74 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE
00008bf4 g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE
00012484 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	000199c7 	.word	0x000199c7
	...
    8058:	00019a0d 	.word	0x00019a0d
    805c:	00019a53 	.word	0x00019a53
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f826 	bl	8178 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20000148 	.word	0x20000148
    ldr     r3, =__bss_end__
    8134:	2000df88 	.word	0x2000df88
    ldr    r1, =__etext
    8138:	0001fb54 	.word	0x0001fb54
    ldr    r2, =__data_start__
    813c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
    8140:	20000144 	.word	0x20000144
    LDR     R0, =__HeapBase
    8144:	2000df88 	.word	0x2000df88
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	0000842d 	.word	0x0000842d
    LDR     R0, =_start
    8150:	00008601 	.word	0x00008601

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	200000d8 	.word	0x200000d8

00008178 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    8178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    817c:	2201      	movs	r2, #1
    817e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    8182:	4770      	bx	lr

00008184 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    8184:	4b02      	ldr	r3, [pc, #8]	; (8190 <hal_debugger_connected+0xc>)
    8186:	6818      	ldr	r0, [r3, #0]
}
    8188:	f000 0001 	and.w	r0, r0, #1
    818c:	4770      	bx	lr
    818e:	bf00      	nop
    8190:	e000edf0 	.word	0xe000edf0

00008194 <hal_system_reset>:
{
    8194:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    8196:	f7ff fff5 	bl	8184 <hal_debugger_connected>
    819a:	b100      	cbz	r0, 819e <hal_system_reset+0xa>
            asm("bkpt");
    819c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    819e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81a2:	4905      	ldr	r1, [pc, #20]	; (81b8 <hal_system_reset+0x24>)
    81a4:	68ca      	ldr	r2, [r1, #12]
    81a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81aa:	4b04      	ldr	r3, [pc, #16]	; (81bc <hal_system_reset+0x28>)
    81ac:	4313      	orrs	r3, r2
    81ae:	60cb      	str	r3, [r1, #12]
    81b0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81b4:	bf00      	nop
    81b6:	e7fd      	b.n	81b4 <hal_system_reset+0x20>
    81b8:	e000ed00 	.word	0xe000ed00
    81bc:	05fa0004 	.word	0x05fa0004

000081c0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81c4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81c8:	4b0f      	ldr	r3, [pc, #60]	; (8208 <hal_system_clock_start+0x48>)
    81ca:	4013      	ands	r3, r2
    81cc:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    81d0:	d018      	beq.n	8204 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    81d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81d6:	2201      	movs	r2, #1
    81d8:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    81da:	2100      	movs	r1, #0
    81dc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    81e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    81e4:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    81e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    81ee:	2b00      	cmp	r3, #0
    81f0:	d0f9      	beq.n	81e6 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    81f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81fa:	4b03      	ldr	r3, [pc, #12]	; (8208 <hal_system_clock_start+0x48>)
    81fc:	4013      	ands	r3, r2
    81fe:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    8202:	d1f0      	bne.n	81e6 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8204:	4770      	bx	lr
    8206:	bf00      	nop
    8208:	00010003 	.word	0x00010003

0000820c <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    820c:	4b0b      	ldr	r3, [pc, #44]	; (823c <errata_16+0x30>)
    820e:	781b      	ldrb	r3, [r3, #0]
    8210:	2b06      	cmp	r3, #6
    8212:	d001      	beq.n	8218 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8214:	2000      	movs	r0, #0
    8216:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8218:	4b09      	ldr	r3, [pc, #36]	; (8240 <errata_16+0x34>)
    821a:	681b      	ldr	r3, [r3, #0]
    821c:	f013 0f0f 	tst.w	r3, #15
    8220:	d107      	bne.n	8232 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8222:	4b08      	ldr	r3, [pc, #32]	; (8244 <errata_16+0x38>)
    8224:	681b      	ldr	r3, [r3, #0]
    8226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    822a:	2b30      	cmp	r3, #48	; 0x30
    822c:	d003      	beq.n	8236 <errata_16+0x2a>
    return false;
    822e:	2000      	movs	r0, #0
    8230:	4770      	bx	lr
    8232:	2000      	movs	r0, #0
    8234:	4770      	bx	lr
            return true;
    8236:	2001      	movs	r0, #1
}
    8238:	4770      	bx	lr
    823a:	bf00      	nop
    823c:	f0000fe0 	.word	0xf0000fe0
    8240:	f0000fe4 	.word	0xf0000fe4
    8244:	f0000fe8 	.word	0xf0000fe8

00008248 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	4b0f      	ldr	r3, [pc, #60]	; (8288 <errata_31+0x40>)
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	2b06      	cmp	r3, #6
    824e:	d001      	beq.n	8254 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8250:	2000      	movs	r0, #0
    8252:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8254:	4b0d      	ldr	r3, [pc, #52]	; (828c <errata_31+0x44>)
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	f013 0f0f 	tst.w	r3, #15
    825c:	d10b      	bne.n	8276 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    825e:	4b0c      	ldr	r3, [pc, #48]	; (8290 <errata_31+0x48>)
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8266:	2b30      	cmp	r3, #48	; 0x30
    8268:	d007      	beq.n	827a <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    826a:	2b40      	cmp	r3, #64	; 0x40
    826c:	d007      	beq.n	827e <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    826e:	2b50      	cmp	r3, #80	; 0x50
    8270:	d007      	beq.n	8282 <errata_31+0x3a>
    return false;
    8272:	2000      	movs	r0, #0
    8274:	4770      	bx	lr
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
            return true;
    827a:	2001      	movs	r0, #1
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
    8280:	4770      	bx	lr
            return true;
    8282:	2001      	movs	r0, #1
}
    8284:	4770      	bx	lr
    8286:	bf00      	nop
    8288:	f0000fe0 	.word	0xf0000fe0
    828c:	f0000fe4 	.word	0xf0000fe4
    8290:	f0000fe8 	.word	0xf0000fe8

00008294 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8294:	4b0b      	ldr	r3, [pc, #44]	; (82c4 <errata_32+0x30>)
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	2b06      	cmp	r3, #6
    829a:	d001      	beq.n	82a0 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    829c:	2000      	movs	r0, #0
    829e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82a0:	4b09      	ldr	r3, [pc, #36]	; (82c8 <errata_32+0x34>)
    82a2:	681b      	ldr	r3, [r3, #0]
    82a4:	f013 0f0f 	tst.w	r3, #15
    82a8:	d107      	bne.n	82ba <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82aa:	4b08      	ldr	r3, [pc, #32]	; (82cc <errata_32+0x38>)
    82ac:	681b      	ldr	r3, [r3, #0]
    82ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82b2:	2b30      	cmp	r3, #48	; 0x30
    82b4:	d003      	beq.n	82be <errata_32+0x2a>
    return false;
    82b6:	2000      	movs	r0, #0
    82b8:	4770      	bx	lr
    82ba:	2000      	movs	r0, #0
    82bc:	4770      	bx	lr
            return true;
    82be:	2001      	movs	r0, #1
}
    82c0:	4770      	bx	lr
    82c2:	bf00      	nop
    82c4:	f0000fe0 	.word	0xf0000fe0
    82c8:	f0000fe4 	.word	0xf0000fe4
    82cc:	f0000fe8 	.word	0xf0000fe8

000082d0 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82d0:	4b0f      	ldr	r3, [pc, #60]	; (8310 <errata_36+0x40>)
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	4b0d      	ldr	r3, [pc, #52]	; (8314 <errata_36+0x44>)
    82de:	681b      	ldr	r3, [r3, #0]
    82e0:	f013 0f0f 	tst.w	r3, #15
    82e4:	d10b      	bne.n	82fe <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82e6:	4b0c      	ldr	r3, [pc, #48]	; (8318 <errata_36+0x48>)
    82e8:	681b      	ldr	r3, [r3, #0]
    82ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ee:	2b30      	cmp	r3, #48	; 0x30
    82f0:	d007      	beq.n	8302 <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82f2:	2b40      	cmp	r3, #64	; 0x40
    82f4:	d007      	beq.n	8306 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82f6:	2b50      	cmp	r3, #80	; 0x50
    82f8:	d007      	beq.n	830a <errata_36+0x3a>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
    8304:	4770      	bx	lr
            return true;
    8306:	2001      	movs	r0, #1
    8308:	4770      	bx	lr
            return true;
    830a:	2001      	movs	r0, #1
}
    830c:	4770      	bx	lr
    830e:	bf00      	nop
    8310:	f0000fe0 	.word	0xf0000fe0
    8314:	f0000fe4 	.word	0xf0000fe4
    8318:	f0000fe8 	.word	0xf0000fe8

0000831c <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    831c:	4b0b      	ldr	r3, [pc, #44]	; (834c <errata_37+0x30>)
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	2b06      	cmp	r3, #6
    8322:	d001      	beq.n	8328 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8324:	2000      	movs	r0, #0
    8326:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8328:	4b09      	ldr	r3, [pc, #36]	; (8350 <errata_37+0x34>)
    832a:	681b      	ldr	r3, [r3, #0]
    832c:	f013 0f0f 	tst.w	r3, #15
    8330:	d107      	bne.n	8342 <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8332:	4b08      	ldr	r3, [pc, #32]	; (8354 <errata_37+0x38>)
    8334:	681b      	ldr	r3, [r3, #0]
    8336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    833a:	2b30      	cmp	r3, #48	; 0x30
    833c:	d003      	beq.n	8346 <errata_37+0x2a>
    return false;
    833e:	2000      	movs	r0, #0
    8340:	4770      	bx	lr
    8342:	2000      	movs	r0, #0
    8344:	4770      	bx	lr
            return true;
    8346:	2001      	movs	r0, #1
}
    8348:	4770      	bx	lr
    834a:	bf00      	nop
    834c:	f0000fe0 	.word	0xf0000fe0
    8350:	f0000fe4 	.word	0xf0000fe4
    8354:	f0000fe8 	.word	0xf0000fe8

00008358 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8358:	4b0b      	ldr	r3, [pc, #44]	; (8388 <errata_57+0x30>)
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	2b06      	cmp	r3, #6
    835e:	d001      	beq.n	8364 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8360:	2000      	movs	r0, #0
    8362:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8364:	4b09      	ldr	r3, [pc, #36]	; (838c <errata_57+0x34>)
    8366:	681b      	ldr	r3, [r3, #0]
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d107      	bne.n	837e <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	4b08      	ldr	r3, [pc, #32]	; (8390 <errata_57+0x38>)
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8376:	2b30      	cmp	r3, #48	; 0x30
    8378:	d003      	beq.n	8382 <errata_57+0x2a>
    return false;
    837a:	2000      	movs	r0, #0
    837c:	4770      	bx	lr
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
            return true;
    8382:	2001      	movs	r0, #1
}
    8384:	4770      	bx	lr
    8386:	bf00      	nop
    8388:	f0000fe0 	.word	0xf0000fe0
    838c:	f0000fe4 	.word	0xf0000fe4
    8390:	f0000fe8 	.word	0xf0000fe8

00008394 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8394:	4b0b      	ldr	r3, [pc, #44]	; (83c4 <errata_66+0x30>)
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	2b06      	cmp	r3, #6
    839a:	d001      	beq.n	83a0 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    839c:	2000      	movs	r0, #0
    839e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <errata_66+0x34>)
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	f013 0f0f 	tst.w	r3, #15
    83a8:	d107      	bne.n	83ba <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83aa:	4b08      	ldr	r3, [pc, #32]	; (83cc <errata_66+0x38>)
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b2:	2b50      	cmp	r3, #80	; 0x50
    83b4:	d003      	beq.n	83be <errata_66+0x2a>
    return false;
    83b6:	2000      	movs	r0, #0
    83b8:	4770      	bx	lr
    83ba:	2000      	movs	r0, #0
    83bc:	4770      	bx	lr
            return true;
    83be:	2001      	movs	r0, #1
}
    83c0:	4770      	bx	lr
    83c2:	bf00      	nop
    83c4:	f0000fe0 	.word	0xf0000fe0
    83c8:	f0000fe4 	.word	0xf0000fe4
    83cc:	f0000fe8 	.word	0xf0000fe8

000083d0 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d0:	4b0f      	ldr	r3, [pc, #60]	; (8410 <errata_108+0x40>)
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	2b06      	cmp	r3, #6
    83d6:	d001      	beq.n	83dc <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d8:	2000      	movs	r0, #0
    83da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83dc:	4b0d      	ldr	r3, [pc, #52]	; (8414 <errata_108+0x44>)
    83de:	681b      	ldr	r3, [r3, #0]
    83e0:	f013 0f0f 	tst.w	r3, #15
    83e4:	d10b      	bne.n	83fe <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83e6:	4b0c      	ldr	r3, [pc, #48]	; (8418 <errata_108+0x48>)
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b30      	cmp	r3, #48	; 0x30
    83f0:	d007      	beq.n	8402 <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    83f2:	2b40      	cmp	r3, #64	; 0x40
    83f4:	d007      	beq.n	8406 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83f6:	2b50      	cmp	r3, #80	; 0x50
    83f8:	d007      	beq.n	840a <errata_108+0x3a>
    return false;
    83fa:	2000      	movs	r0, #0
    83fc:	4770      	bx	lr
    83fe:	2000      	movs	r0, #0
    8400:	4770      	bx	lr
            return true;
    8402:	2001      	movs	r0, #1
    8404:	4770      	bx	lr
            return true;
    8406:	2001      	movs	r0, #1
    8408:	4770      	bx	lr
            return true;
    840a:	2001      	movs	r0, #1
}
    840c:	4770      	bx	lr
    840e:	bf00      	nop
    8410:	f0000fe0 	.word	0xf0000fe0
    8414:	f0000fe4 	.word	0xf0000fe4
    8418:	f0000fe8 	.word	0xf0000fe8

0000841c <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    841c:	4b01      	ldr	r3, [pc, #4]	; (8424 <SystemCoreClockUpdate+0x8>)
    841e:	4a02      	ldr	r2, [pc, #8]	; (8428 <SystemCoreClockUpdate+0xc>)
    8420:	601a      	str	r2, [r3, #0]
}
    8422:	4770      	bx	lr
    8424:	200000e4 	.word	0x200000e4
    8428:	03d09000 	.word	0x03d09000

0000842c <SystemInit>:
{
    842c:	b508      	push	{r3, lr}
    if (errata_16()){
    842e:	f7ff feed 	bl	820c <errata_16>
    8432:	b110      	cbz	r0, 843a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8434:	4b65      	ldr	r3, [pc, #404]	; (85cc <SystemInit+0x1a0>)
    8436:	4a66      	ldr	r2, [pc, #408]	; (85d0 <SystemInit+0x1a4>)
    8438:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    843a:	f7ff ff05 	bl	8248 <errata_31>
    843e:	b128      	cbz	r0, 844c <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    8440:	4b64      	ldr	r3, [pc, #400]	; (85d4 <SystemInit+0x1a8>)
    8442:	681b      	ldr	r3, [r3, #0]
    8444:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8448:	4a63      	ldr	r2, [pc, #396]	; (85d8 <SystemInit+0x1ac>)
    844a:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    844c:	f7ff ff22 	bl	8294 <errata_32>
    8450:	b120      	cbz	r0, 845c <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8452:	4a62      	ldr	r2, [pc, #392]	; (85dc <SystemInit+0x1b0>)
    8454:	68d3      	ldr	r3, [r2, #12]
    8456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    845a:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    845c:	f7ff ff38 	bl	82d0 <errata_36>
    8460:	b140      	cbz	r0, 8474 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
    8462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8466:	2200      	movs	r2, #0
    8468:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    846c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    8470:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    8474:	f7ff ff52 	bl	831c <errata_37>
    8478:	b110      	cbz	r0, 8480 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    847a:	4b59      	ldr	r3, [pc, #356]	; (85e0 <SystemInit+0x1b4>)
    847c:	2203      	movs	r2, #3
    847e:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    8480:	f7ff ff6a 	bl	8358 <errata_57>
    8484:	b158      	cbz	r0, 849e <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    8486:	4b57      	ldr	r3, [pc, #348]	; (85e4 <SystemInit+0x1b8>)
    8488:	2205      	movs	r2, #5
    848a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    848c:	3378      	adds	r3, #120	; 0x78
    848e:	2201      	movs	r2, #1
    8490:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    8492:	3b70      	subs	r3, #112	; 0x70
    8494:	2200      	movs	r2, #0
    8496:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    8498:	3b04      	subs	r3, #4
    849a:	223f      	movs	r2, #63	; 0x3f
    849c:	601a      	str	r2, [r3, #0]
    if (errata_66()){
    849e:	f7ff ff79 	bl	8394 <errata_66>
    84a2:	2800      	cmp	r0, #0
    84a4:	d046      	beq.n	8534 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84aa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ae:	4b4e      	ldr	r3, [pc, #312]	; (85e8 <SystemInit+0x1bc>)
    84b0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84b4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84b8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84bc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84c0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    84c4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    84c8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    84cc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    84d0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    84d4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    84d8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    84dc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    84e0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    84e4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    84e8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    84ec:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    84f0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    84f4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    84f8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    84fc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8500:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8504:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8508:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    850c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8510:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8514:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8518:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    851c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8520:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8524:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8528:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    852c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8530:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8534:	f7ff ff4c 	bl	83d0 <errata_108>
    8538:	b128      	cbz	r0, 8546 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    853a:	4b2c      	ldr	r3, [pc, #176]	; (85ec <SystemInit+0x1c0>)
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8542:	4a2b      	ldr	r2, [pc, #172]	; (85f0 <SystemInit+0x1c4>)
    8544:	6013      	str	r3, [r2, #0]
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    8546:	4a2b      	ldr	r2, [pc, #172]	; (85f4 <SystemInit+0x1c8>)
    8548:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    854c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    8554:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8558:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    855c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8560:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    8564:	f013 0f01 	tst.w	r3, #1
    8568:	d104      	bne.n	8574 <SystemInit+0x148>
    SystemCoreClockUpdate();
    856a:	f7ff ff57 	bl	841c <SystemCoreClockUpdate>
    NVIC_Relocate();
    856e:	f00f f82f 	bl	175d0 <NVIC_Relocate>
}
    8572:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    8574:	4b20      	ldr	r3, [pc, #128]	; (85f8 <SystemInit+0x1cc>)
    8576:	2201      	movs	r2, #1
    8578:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    857c:	4b1e      	ldr	r3, [pc, #120]	; (85f8 <SystemInit+0x1cc>)
    857e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8582:	2b00      	cmp	r3, #0
    8584:	d0fa      	beq.n	857c <SystemInit+0x150>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    8586:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    858a:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    858e:	f023 0301 	bic.w	r3, r3, #1
    8592:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8596:	4b18      	ldr	r3, [pc, #96]	; (85f8 <SystemInit+0x1cc>)
    8598:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    859c:	2b00      	cmp	r3, #0
    859e:	d0fa      	beq.n	8596 <SystemInit+0x16a>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85a0:	4b15      	ldr	r3, [pc, #84]	; (85f8 <SystemInit+0x1cc>)
    85a2:	2200      	movs	r2, #0
    85a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85a8:	4b13      	ldr	r3, [pc, #76]	; (85f8 <SystemInit+0x1cc>)
    85aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85ae:	2b00      	cmp	r3, #0
    85b0:	d0fa      	beq.n	85a8 <SystemInit+0x17c>
  __ASM volatile ("dsb 0xF":::"memory");
    85b2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85b6:	490f      	ldr	r1, [pc, #60]	; (85f4 <SystemInit+0x1c8>)
    85b8:	68ca      	ldr	r2, [r1, #12]
    85ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    85be:	4b0f      	ldr	r3, [pc, #60]	; (85fc <SystemInit+0x1d0>)
    85c0:	4313      	orrs	r3, r2
    85c2:	60cb      	str	r3, [r1, #12]
    85c4:	f3bf 8f4f 	dsb	sy
    __NOP();
    85c8:	bf00      	nop
    85ca:	e7fd      	b.n	85c8 <SystemInit+0x19c>
    85cc:	4007c074 	.word	0x4007c074
    85d0:	baadf00d 	.word	0xbaadf00d
    85d4:	10000244 	.word	0x10000244
    85d8:	4000053c 	.word	0x4000053c
    85dc:	e000edf0 	.word	0xe000edf0
    85e0:	400005a0 	.word	0x400005a0
    85e4:	40005610 	.word	0x40005610
    85e8:	4000c000 	.word	0x4000c000
    85ec:	10000258 	.word	0x10000258
    85f0:	40000ee4 	.word	0x40000ee4
    85f4:	e000ed00 	.word	0xe000ed00
    85f8:	4001e000 	.word	0x4001e000
    85fc:	05fa0004 	.word	0x05fa0004

00008600 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8600:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8602:	4803      	ldr	r0, [pc, #12]	; (8610 <_start+0x10>)
    8604:	f00f ff6a 	bl	184dc <os_init>
    os_start();
    8608:	f00f ffc0 	bl	1858c <os_start>
#endif
}
    860c:	bd08      	pop	{r3, pc}
    860e:	bf00      	nop
    8610:	00008617 	.word	0x00008617

00008614 <_init>:

void
_init(void)
{
}
    8614:	4770      	bx	lr

00008616 <main>:
pub fn handle_touch(_x: u16, _y: u16) { console::print("touch not handled\n"); console::flush(); }  //  Define a touch handler that does nothing

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
    8616:	b088      	sub	sp, #32
    //  Initialise the Mynewt packages and internal temperature sensor driver. Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/nrf52_my_sensor/generated/src/nrf52_my_sensor-sysinit-app.c
    mynewt::sysinit();
    8618:	f000 f960 	bl	88dc <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>
    861c:	e7ff      	b.n	861e <main+0x8>
    //  extern { fn start_ble() -> i32; }
    //  let rc = unsafe { start_ble() };
    //  assert!(rc == 0, "BLE fail");

    //  Start the display
    druid::start_display()
    861e:	f000 ff31 	bl	9484 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>
    8622:	9005      	str	r0, [sp, #20]
    8624:	e7ff      	b.n	8626 <main+0x10>
    8626:	f64b 41a2 	movw	r1, #48290	; 0xbca2
    862a:	f2c0 0101 	movt	r1, #1
    862e:	f64b 43d8 	movw	r3, #48344	; 0xbcd8
    8632:	f2c0 0301 	movt	r3, #1
    8636:	2208      	movs	r2, #8
    8638:	9805      	ldr	r0, [sp, #20]
    863a:	f000 fa5e 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    863e:	e7ff      	b.n	8640 <main+0x2a>
    #[cfg(feature = "display_app")]  //  If graphics display app is enabled...
    display::test_display()
        .expect("DSP test fail");

    //  Start the touch sensor
    touch_sensor::start_touch_sensor()
    8640:	f002 fa39 	bl	aab6 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E>
    8644:	9004      	str	r0, [sp, #16]
    8646:	e7ff      	b.n	8648 <main+0x32>
    8648:	f64b 41aa 	movw	r1, #48298	; 0xbcaa
    864c:	f2c0 0101 	movt	r1, #1
    8650:	f64b 43e8 	movw	r3, #48360	; 0xbce8
    8654:	f2c0 0301 	movt	r3, #1
    8658:	2208      	movs	r2, #8
    865a:	9804      	ldr	r0, [sp, #16]
    865c:	f000 fa4d 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8660:	e7ff      	b.n	8662 <main+0x4c>
    visual::on_start()
        .expect("VIS fail");

    //  Launch the CHIP8 Emulator app
    #[cfg(feature = "chip8_app")]  //  If CHIP8 Emulator app is enabled...
    chip8::on_start()
    8662:	f003 f899 	bl	b798 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E>
    8666:	9003      	str	r0, [sp, #12]
    8668:	e7ff      	b.n	866a <main+0x54>
    866a:	f64b 41f8 	movw	r1, #48376	; 0xbcf8
    866e:	f2c0 0101 	movt	r1, #1
    8672:	f64b 5304 	movw	r3, #48388	; 0xbd04
    8676:	f2c0 0301 	movt	r3, #1
    867a:	220a      	movs	r2, #10
    867c:	9803      	ldr	r0, [sp, #12]
    867e:	f000 fa3c 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8682:	e7ff      	b.n	8684 <main+0x6e>
        .expect("CHIP8 fail");

    //  Main event loop
    loop {                            //  Loop forever...
    8684:	e7ff      	b.n	8686 <main+0x70>
    8686:	a806      	add	r0, sp, #24
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
    8688:	f000 faf2 	bl	8c70 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    868c:	e7ff      	b.n	868e <main+0x78>
    868e:	f64b 41b2 	movw	r1, #48306	; 0xbcb2
    8692:	f2c0 0101 	movt	r1, #1
    8696:	f64b 5314 	movw	r3, #48404	; 0xbd14
    869a:	f2c0 0301 	movt	r3, #1
    869e:	a806      	add	r0, sp, #24
    86a0:	2208      	movs	r2, #8
    86a2:	f000 f896 	bl	87d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>
    86a6:	9002      	str	r0, [sp, #8]
    86a8:	e7ff      	b.n	86aa <main+0x94>
        os::eventq_run(               //  Processing events...
    86aa:	9802      	ldr	r0, [sp, #8]
    86ac:	f000 fad7 	bl	8c5e <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
    86b0:	9001      	str	r0, [sp, #4]
    86b2:	e7ff      	b.n	86b4 <main+0x9e>
    86b4:	f64b 41ba 	movw	r1, #48314	; 0xbcba
    86b8:	f2c0 0101 	movt	r1, #1
    86bc:	f64b 5324 	movw	r3, #48420	; 0xbd24
    86c0:	f2c0 0301 	movt	r3, #1
    86c4:	2208      	movs	r2, #8
    86c6:	9801      	ldr	r0, [sp, #4]
    86c8:	f000 fa17 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    86cc:	e7ff      	b.n	86ce <main+0xb8>
    loop {                            //  Loop forever...
    86ce:	e7da      	b.n	8686 <main+0x70>

000086d0 <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    86d0:	b08e      	sub	sp, #56	; 0x38
    86d2:	900b      	str	r0, [sp, #44]	; 0x2c
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
    86d4:	f64b 5134 	movw	r1, #48436	; 0xbd34
    86d8:	f2c0 0101 	movt	r1, #1
    86dc:	2206      	movs	r2, #6
    86de:	9007      	str	r0, [sp, #28]
    86e0:	4608      	mov	r0, r1
    86e2:	4611      	mov	r1, r2
    86e4:	f000 fc84 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    86e8:	e7ff      	b.n	86ea <rust_begin_unwind+0x1a>
    if let Some(location) = info.location() {
    86ea:	9807      	ldr	r0, [sp, #28]
    86ec:	f00c ff75 	bl	155da <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>
    86f0:	9008      	str	r0, [sp, #32]
    86f2:	e7ff      	b.n	86f4 <rust_begin_unwind+0x24>
    86f4:	9808      	ldr	r0, [sp, #32]
    86f6:	2800      	cmp	r0, #0
    86f8:	d108      	bne.n	870c <rust_begin_unwind+0x3c>
    86fa:	e7ff      	b.n	86fc <rust_begin_unwind+0x2c>
        let line = location.line();
        console::print("at ");       console::buffer(&file);
        console::print(" line ");    console::printint(line as i32);
        console::print("\n");        console::flush();
    } else {
        console::print("no loc\n");  console::flush();
    86fc:	f64b 503a 	movw	r0, #48442	; 0xbd3a
    8700:	f2c0 0001 	movt	r0, #1
    8704:	2107      	movs	r1, #7
    8706:	f000 fc73 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    870a:	e033      	b.n	8774 <rust_begin_unwind+0xa4>
    if let Some(location) = info.location() {
    870c:	9808      	ldr	r0, [sp, #32]
    870e:	900c      	str	r0, [sp, #48]	; 0x30
        let file = location.file();
    8710:	9006      	str	r0, [sp, #24]
    8712:	f00c ff65 	bl	155e0 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8716:	910a      	str	r1, [sp, #40]	; 0x28
    8718:	9009      	str	r0, [sp, #36]	; 0x24
    871a:	e7ff      	b.n	871c <rust_begin_unwind+0x4c>
        let line = location.line();
    871c:	9806      	ldr	r0, [sp, #24]
    871e:	f00c ff63 	bl	155e8 <_ZN4core5panic8Location4line17h650a566d9637c91dE>
    8722:	4601      	mov	r1, r0
    8724:	900d      	str	r0, [sp, #52]	; 0x34
    8726:	9105      	str	r1, [sp, #20]
    8728:	e7ff      	b.n	872a <rust_begin_unwind+0x5a>
        console::print("at ");       console::buffer(&file);
    872a:	f64b 5041 	movw	r0, #48449	; 0xbd41
    872e:	f2c0 0001 	movt	r0, #1
    8732:	2103      	movs	r1, #3
    8734:	f000 fc5c 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8738:	e7ff      	b.n	873a <rust_begin_unwind+0x6a>
    873a:	9809      	ldr	r0, [sp, #36]	; 0x24
    873c:	990a      	ldr	r1, [sp, #40]	; 0x28
    873e:	f000 fc7e 	bl	903e <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>
    8742:	e7ff      	b.n	8744 <rust_begin_unwind+0x74>
        console::print(" line ");    console::printint(line as i32);
    8744:	f64b 5044 	movw	r0, #48452	; 0xbd44
    8748:	f2c0 0001 	movt	r0, #1
    874c:	2106      	movs	r1, #6
    874e:	f000 fc4f 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8752:	e7ff      	b.n	8754 <rust_begin_unwind+0x84>
    8754:	9805      	ldr	r0, [sp, #20]
    8756:	f000 fc89 	bl	906c <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    875a:	e7ff      	b.n	875c <rust_begin_unwind+0x8c>
        console::print("\n");        console::flush();
    875c:	f64b 504a 	movw	r0, #48458	; 0xbd4a
    8760:	f2c0 0001 	movt	r0, #1
    8764:	2101      	movs	r1, #1
    8766:	f000 fc43 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    876a:	e7ff      	b.n	876c <rust_begin_unwind+0x9c>
    876c:	f000 fc86 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8770:	e7ff      	b.n	8772 <rust_begin_unwind+0xa2>
    if let Some(location) = info.location() {
    8772:	e003      	b.n	877c <rust_begin_unwind+0xac>
        console::print("no loc\n");  console::flush();
    8774:	f000 fc82 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8778:	e7ff      	b.n	877a <rust_begin_unwind+0xaa>
    if let Some(location) = info.location() {
    877a:	e7ff      	b.n	877c <rust_begin_unwind+0xac>
/// exception.
#[inline(always)]
pub fn bkpt() {
    match () {
        #[cfg(all(cortex_m, feature = "inline-asm"))]
        () => unsafe { asm!("bkpt" :::: "volatile") },
    877c:	be00      	bkpt	0x0000
    }
    //  Pause in the debugger.
    bkpt();
    877e:	e7ff      	b.n	8780 <rust_begin_unwind+0xb0>
    //  Display the payload.
    console::print(info.payload().downcast_ref::<&str>().unwrap());
    8780:	9807      	ldr	r0, [sp, #28]
    8782:	f00c ff2d 	bl	155e0 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8786:	9004      	str	r0, [sp, #16]
    8788:	9103      	str	r1, [sp, #12]
    878a:	e7ff      	b.n	878c <rust_begin_unwind+0xbc>
    878c:	9804      	ldr	r0, [sp, #16]
    878e:	9903      	ldr	r1, [sp, #12]
    8790:	f000 f899 	bl	88c6 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE>
    8794:	9002      	str	r0, [sp, #8]
    8796:	e7ff      	b.n	8798 <rust_begin_unwind+0xc8>
    8798:	f64b 514c 	movw	r1, #48460	; 0xbd4c
    879c:	f2c0 0101 	movt	r1, #1
    87a0:	9802      	ldr	r0, [sp, #8]
    87a2:	f004 fa99 	bl	ccd8 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E>
    87a6:	9001      	str	r0, [sp, #4]
    87a8:	e7ff      	b.n	87aa <rust_begin_unwind+0xda>
    87aa:	9801      	ldr	r0, [sp, #4]
    87ac:	6800      	ldr	r0, [r0, #0]
    87ae:	9901      	ldr	r1, [sp, #4]
    87b0:	6849      	ldr	r1, [r1, #4]
    87b2:	f000 fc1d 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87b6:	e7ff      	b.n	87b8 <rust_begin_unwind+0xe8>
    console::print("\n");  console::flush();
    87b8:	f64b 504a 	movw	r0, #48458	; 0xbd4a
    87bc:	f2c0 0001 	movt	r0, #1
    87c0:	2101      	movs	r1, #1
    87c2:	f000 fc15 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87c6:	e7ff      	b.n	87c8 <rust_begin_unwind+0xf8>
    87c8:	f000 fc58 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    87cc:	e7ff      	b.n	87ce <rust_begin_unwind+0xfe>
    //  Loop forever so that device won't restart.
    loop {}
    87ce:	e7ff      	b.n	87d0 <rust_begin_unwind+0x100>
    87d0:	e7fe      	b.n	87d0 <rust_begin_unwind+0x100>

000087d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>:
    87d2:	b08a      	sub	sp, #40	; 0x28
    87d4:	9107      	str	r1, [sp, #28]
    87d6:	9208      	str	r2, [sp, #32]
    87d8:	f8d0 c000 	ldr.w	ip, [r0]
    87dc:	f1bc 0f00 	cmp.w	ip, #0
    87e0:	9305      	str	r3, [sp, #20]
    87e2:	9204      	str	r2, [sp, #16]
    87e4:	9103      	str	r1, [sp, #12]
    87e6:	9002      	str	r0, [sp, #8]
    87e8:	d011      	beq.n	880e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x3c>
    87ea:	e7ff      	b.n	87ec <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x1a>
    87ec:	9802      	ldr	r0, [sp, #8]
    87ee:	6841      	ldr	r1, [r0, #4]
    87f0:	9106      	str	r1, [sp, #24]
    87f2:	4669      	mov	r1, sp
    87f4:	9a05      	ldr	r2, [sp, #20]
    87f6:	600a      	str	r2, [r1, #0]
    87f8:	f64b 535c 	movw	r3, #48476	; 0xbd5c
    87fc:	f2c0 0301 	movt	r3, #1
    8800:	aa06      	add	r2, sp, #24
    8802:	9803      	ldr	r0, [sp, #12]
    8804:	9904      	ldr	r1, [sp, #16]
    8806:	f00c fec3 	bl	15590 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    880a:	defe      	udf	#254	; 0xfe
    880c:	defe      	udf	#254	; 0xfe
    880e:	9802      	ldr	r0, [sp, #8]
    8810:	6841      	ldr	r1, [r0, #4]
    8812:	9109      	str	r1, [sp, #36]	; 0x24
    8814:	6802      	ldr	r2, [r0, #0]
    8816:	2a00      	cmp	r2, #0
    8818:	9101      	str	r1, [sp, #4]
    881a:	d103      	bne.n	8824 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x52>
    881c:	e7ff      	b.n	881e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x4c>
    881e:	9801      	ldr	r0, [sp, #4]
    8820:	b00a      	add	sp, #40	; 0x28
    8822:	4770      	bx	lr
    8824:	e7fb      	b.n	881e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x4c>

00008826 <_ZN4core3ptr13drop_in_place17he6c5bffce3c304d4E>:
    8826:	b081      	sub	sp, #4
    8828:	9000      	str	r0, [sp, #0]
    882a:	b001      	add	sp, #4
    882c:	4770      	bx	lr

0000882e <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E>:
    882e:	b580      	push	{r7, lr}
    8830:	b086      	sub	sp, #24
    8832:	9004      	str	r0, [sp, #16]
    8834:	9105      	str	r1, [sp, #20]
    8836:	9002      	str	r0, [sp, #8]
    8838:	f000 f810 	bl	885c <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE>
    883c:	9001      	str	r0, [sp, #4]
    883e:	e7ff      	b.n	8840 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x12>
    8840:	9801      	ldr	r0, [sp, #4]
    8842:	07c1      	lsls	r1, r0, #31
    8844:	2900      	cmp	r1, #0
    8846:	d103      	bne.n	8850 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x22>
    8848:	e7ff      	b.n	884a <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x1c>
    884a:	2000      	movs	r0, #0
    884c:	9003      	str	r0, [sp, #12]
    884e:	e002      	b.n	8856 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x28>
    8850:	9802      	ldr	r0, [sp, #8]
    8852:	9003      	str	r0, [sp, #12]
    8854:	e7ff      	b.n	8856 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x28>
    8856:	9803      	ldr	r0, [sp, #12]
    8858:	b006      	add	sp, #24
    885a:	bd80      	pop	{r7, pc}

0000885c <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE>:
    885c:	b580      	push	{r7, lr}
    885e:	b08a      	sub	sp, #40	; 0x28
    8860:	9008      	str	r0, [sp, #32]
    8862:	9109      	str	r1, [sp, #36]	; 0x24
    8864:	9103      	str	r1, [sp, #12]
    8866:	9002      	str	r0, [sp, #8]
    8868:	f000 f815 	bl	8896 <_ZN4core3any6TypeId2of17haae5124a9f275cb8E>
    886c:	9105      	str	r1, [sp, #20]
    886e:	9004      	str	r0, [sp, #16]
    8870:	e7ff      	b.n	8872 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x16>
    8872:	9803      	ldr	r0, [sp, #12]
    8874:	68c1      	ldr	r1, [r0, #12]
    8876:	9802      	ldr	r0, [sp, #8]
    8878:	4788      	blx	r1
    887a:	9107      	str	r1, [sp, #28]
    887c:	9006      	str	r0, [sp, #24]
    887e:	e7ff      	b.n	8880 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x24>
    8880:	a804      	add	r0, sp, #16
    8882:	a906      	add	r1, sp, #24
    8884:	f002 f905 	bl	aa92 <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E>
    8888:	9001      	str	r0, [sp, #4]
    888a:	e7ff      	b.n	888c <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x30>
    888c:	9801      	ldr	r0, [sp, #4]
    888e:	f000 0001 	and.w	r0, r0, #1
    8892:	b00a      	add	sp, #40	; 0x28
    8894:	bd80      	pop	{r7, pc}

00008896 <_ZN4core3any6TypeId2of17haae5124a9f275cb8E>:
    8896:	b086      	sub	sp, #24
    8898:	f249 40d9 	movw	r0, #38105	; 0x94d9
    889c:	f2c1 1010 	movt	r0, #4368	; 0x1110
    88a0:	9005      	str	r0, [sp, #20]
    88a2:	f249 7064 	movw	r0, #38756	; 0x9764
    88a6:	f2c7 00b0 	movt	r0, #28848	; 0x70b0
    88aa:	9004      	str	r0, [sp, #16]
    88ac:	9804      	ldr	r0, [sp, #16]
    88ae:	9905      	ldr	r1, [sp, #20]
    88b0:	9001      	str	r0, [sp, #4]
    88b2:	9100      	str	r1, [sp, #0]
    88b4:	e7ff      	b.n	88b6 <_ZN4core3any6TypeId2of17haae5124a9f275cb8E+0x20>
    88b6:	9801      	ldr	r0, [sp, #4]
    88b8:	9002      	str	r0, [sp, #8]
    88ba:	9900      	ldr	r1, [sp, #0]
    88bc:	9103      	str	r1, [sp, #12]
    88be:	9802      	ldr	r0, [sp, #8]
    88c0:	9903      	ldr	r1, [sp, #12]
    88c2:	b006      	add	sp, #24
    88c4:	4770      	bx	lr

000088c6 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE>:
    88c6:	b580      	push	{r7, lr}
    88c8:	b084      	sub	sp, #16
    88ca:	9002      	str	r0, [sp, #8]
    88cc:	9103      	str	r1, [sp, #12]
    88ce:	f7ff ffae 	bl	882e <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E>
    88d2:	9001      	str	r0, [sp, #4]
    88d4:	e7ff      	b.n	88d6 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE+0x10>
    88d6:	9801      	ldr	r0, [sp, #4]
    88d8:	b004      	add	sp, #16
    88da:	bd80      	pop	{r7, pc}

000088dc <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>:
pub use hal::{ Delay, GPIO, SPI };  //  Export `hal` types GPIO and SPI

pub mod spi;  //  Export Non-Blocking SPI API

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
pub fn sysinit() {
    88dc:	b580      	push	{r7, lr}
    unsafe { rust_sysinit(); }
    88de:	f011 fc4d 	bl	1a17c <rust_sysinit>
    88e2:	e7ff      	b.n	88e4 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0x8>
    sys::console::flush();
    88e4:	f000 fbca 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    88e8:	e7ff      	b.n	88ea <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0xe>
}
    88ea:	bd80      	pop	{r7, pc}

000088ec <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>:
            rep: StrnRep::CStr(cstr)
        }
    }

    /// Return a pointer to the string
    pub fn as_ptr(&self) -> *const u8 {
    88ec:	b580      	push	{r7, lr}
    88ee:	b086      	sub	sp, #24
    88f0:	9002      	str	r0, [sp, #8]
        match self.rep {
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    88f2:	7801      	ldrb	r1, [r0, #0]
    88f4:	07ca      	lsls	r2, r1, #31
    88f6:	2a00      	cmp	r2, #0
    88f8:	9000      	str	r0, [sp, #0]
    88fa:	d006      	beq.n	890a <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x1e>
    88fc:	e7ff      	b.n	88fe <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x12>
            StrnRep::CStr(cstr)  => { cstr }
    88fe:	9800      	ldr	r0, [sp, #0]
    8900:	6841      	ldr	r1, [r0, #4]
    8902:	9103      	str	r1, [sp, #12]
    8904:	9101      	str	r1, [sp, #4]
        match self.rep {
    8906:	e00c      	b.n	8922 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
    8908:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    890a:	9800      	ldr	r0, [sp, #0]
    890c:	6841      	ldr	r1, [r0, #4]
    890e:	6882      	ldr	r2, [r0, #8]
    8910:	9104      	str	r1, [sp, #16]
    8912:	9205      	str	r2, [sp, #20]
    8914:	4608      	mov	r0, r1
    8916:	4611      	mov	r1, r2
    8918:	f009 f978 	bl	11c0c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    891c:	9001      	str	r0, [sp, #4]
    891e:	e7ff      	b.n	8920 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x34>
        match self.rep {
    8920:	e7ff      	b.n	8922 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
        }
    }
    8922:	9801      	ldr	r0, [sp, #4]
    8924:	b006      	add	sp, #24
    8926:	bd80      	pop	{r7, pc}

00008928 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>:
            }
        }
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
    8928:	b5b0      	push	{r4, r5, r7, lr}
    892a:	b0b2      	sub	sp, #200	; 0xc8
    892c:	9029      	str	r0, [sp, #164]	; 0xa4
        match self.rep {
            StrnRep::ByteStr(bs) => {         
    892e:	7801      	ldrb	r1, [r0, #0]
    8930:	07ca      	lsls	r2, r1, #31
    8932:	2a00      	cmp	r2, #0
    8934:	900e      	str	r0, [sp, #56]	; 0x38
    8936:	d005      	beq.n	8944 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x1c>
    8938:	e7ff      	b.n	893a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
            }
            StrnRep::CStr(_cstr)  => {}
    893a:	980e      	ldr	r0, [sp, #56]	; 0x38
    893c:	6841      	ldr	r1, [r0, #4]
    893e:	912a      	str	r1, [sp, #168]	; 0xa8
        match self.rep {
    8940:	e096      	b.n	8a70 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
    8942:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => {         
    8944:	980e      	ldr	r0, [sp, #56]	; 0x38
    8946:	6841      	ldr	r1, [r0, #4]
    8948:	6882      	ldr	r2, [r0, #8]
    894a:	912b      	str	r1, [sp, #172]	; 0xac
    894c:	922c      	str	r2, [sp, #176]	; 0xb0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    894e:	4608      	mov	r0, r1
    8950:	4611      	mov	r1, r2
    8952:	f000 face 	bl	8ef2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>
    8956:	9011      	str	r0, [sp, #68]	; 0x44
    8958:	e7ff      	b.n	895a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x32>
    895a:	f64b 5074 	movw	r0, #48500	; 0xbd74
    895e:	f2c0 0001 	movt	r0, #1
    8962:	6800      	ldr	r0, [r0, #0]
    8964:	a911      	add	r1, sp, #68	; 0x44
    8966:	910f      	str	r1, [sp, #60]	; 0x3c
    8968:	9010      	str	r0, [sp, #64]	; 0x40
    896a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    896c:	902d      	str	r0, [sp, #180]	; 0xb4
    896e:	9910      	ldr	r1, [sp, #64]	; 0x40
    8970:	912e      	str	r1, [sp, #184]	; 0xb8
    8972:	900d      	str	r0, [sp, #52]	; 0x34
    8974:	910c      	str	r1, [sp, #48]	; 0x30
    8976:	f000 fc5a 	bl	922e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>
    897a:	900b      	str	r0, [sp, #44]	; 0x2c
    897c:	e7ff      	b.n	897e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x56>
    897e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8980:	07c1      	lsls	r1, r0, #31
    8982:	2900      	cmp	r1, #0
    8984:	d001      	beq.n	898a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x62>
    8986:	e7ff      	b.n	8988 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x60>
        }
    }
    8988:	e072      	b.n	8a70 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    898a:	f64b 50cc 	movw	r0, #48588	; 0xbdcc
    898e:	f2c0 0001 	movt	r0, #1
    8992:	6801      	ldr	r1, [r0, #0]
    8994:	980d      	ldr	r0, [sp, #52]	; 0x34
    8996:	9021      	str	r0, [sp, #132]	; 0x84
    8998:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    899a:	9222      	str	r2, [sp, #136]	; 0x88
    899c:	f64b 53e0 	movw	r3, #48608	; 0xbde0
    89a0:	f2c0 0301 	movt	r3, #1
    89a4:	681b      	ldr	r3, [r3, #0]
    89a6:	f64b 5ce4 	movw	ip, #48612	; 0xbde4
    89aa:	f2c0 0c01 	movt	ip, #1
    89ae:	f8dc c000 	ldr.w	ip, [ip]
    89b2:	46ee      	mov	lr, sp
    89b4:	2400      	movs	r4, #0
    89b6:	f8ce 4000 	str.w	r4, [lr]
    89ba:	a823      	add	r0, sp, #140	; 0x8c
    89bc:	2201      	movs	r2, #1
    89be:	910a      	str	r1, [sp, #40]	; 0x28
    89c0:	4619      	mov	r1, r3
    89c2:	4663      	mov	r3, ip
    89c4:	f000 f86a 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    89c8:	e7ff      	b.n	89ca <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xa2>
    89ca:	a821      	add	r0, sp, #132	; 0x84
    89cc:	901e      	str	r0, [sp, #120]	; 0x78
    89ce:	a822      	add	r0, sp, #136	; 0x88
    89d0:	901f      	str	r0, [sp, #124]	; 0x7c
    89d2:	a823      	add	r0, sp, #140	; 0x8c
    89d4:	9020      	str	r0, [sp, #128]	; 0x80
    89d6:	981e      	ldr	r0, [sp, #120]	; 0x78
    89d8:	902f      	str	r0, [sp, #188]	; 0xbc
    89da:	991f      	ldr	r1, [sp, #124]	; 0x7c
    89dc:	9130      	str	r1, [sp, #192]	; 0xc0
    89de:	9a20      	ldr	r2, [sp, #128]	; 0x80
    89e0:	9231      	str	r2, [sp, #196]	; 0xc4
    89e2:	f249 03e7 	movw	r3, #37095	; 0x90e7
    89e6:	f2c0 0300 	movt	r3, #0
    89ea:	9109      	str	r1, [sp, #36]	; 0x24
    89ec:	4619      	mov	r1, r3
    89ee:	9208      	str	r2, [sp, #32]
    89f0:	f000 fcc8 	bl	9384 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    89f4:	9007      	str	r0, [sp, #28]
    89f6:	9106      	str	r1, [sp, #24]
    89f8:	e7ff      	b.n	89fa <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xd2>
    89fa:	f249 01e7 	movw	r1, #37095	; 0x90e7
    89fe:	f2c0 0100 	movt	r1, #0
    8a02:	9809      	ldr	r0, [sp, #36]	; 0x24
    8a04:	f000 fcbe 	bl	9384 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    8a08:	9005      	str	r0, [sp, #20]
    8a0a:	9104      	str	r1, [sp, #16]
    8a0c:	e7ff      	b.n	8a0e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xe6>
    8a0e:	f645 31bb 	movw	r1, #23483	; 0x5bbb
    8a12:	f2c0 0101 	movt	r1, #1
    8a16:	9808      	ldr	r0, [sp, #32]
    8a18:	f000 fcde 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8a1c:	9003      	str	r0, [sp, #12]
    8a1e:	9102      	str	r1, [sp, #8]
    8a20:	e7ff      	b.n	8a22 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xfa>
    8a22:	9807      	ldr	r0, [sp, #28]
    8a24:	9018      	str	r0, [sp, #96]	; 0x60
    8a26:	9906      	ldr	r1, [sp, #24]
    8a28:	9119      	str	r1, [sp, #100]	; 0x64
    8a2a:	9a05      	ldr	r2, [sp, #20]
    8a2c:	921a      	str	r2, [sp, #104]	; 0x68
    8a2e:	9b04      	ldr	r3, [sp, #16]
    8a30:	931b      	str	r3, [sp, #108]	; 0x6c
    8a32:	f8dd c00c 	ldr.w	ip, [sp, #12]
    8a36:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    8a3a:	f8dd e008 	ldr.w	lr, [sp, #8]
    8a3e:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    8a42:	466c      	mov	r4, sp
    8a44:	2503      	movs	r5, #3
    8a46:	6025      	str	r5, [r4, #0]
    8a48:	a812      	add	r0, sp, #72	; 0x48
    8a4a:	ab18      	add	r3, sp, #96	; 0x60
    8a4c:	990a      	ldr	r1, [sp, #40]	; 0x28
    8a4e:	462a      	mov	r2, r5
    8a50:	f000 f824 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8a54:	e7ff      	b.n	8a56 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12e>
    8a56:	f64b 6000 	movw	r0, #48640	; 0xbe00
    8a5a:	f2c0 0001 	movt	r0, #1
    8a5e:	f00c fdbe 	bl	155de <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8a62:	9001      	str	r0, [sp, #4]
    8a64:	e7ff      	b.n	8a66 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x13e>
    8a66:	a812      	add	r0, sp, #72	; 0x48
    8a68:	9901      	ldr	r1, [sp, #4]
    8a6a:	f00c fdf5 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8a6e:	defe      	udf	#254	; 0xfe
    }
    8a70:	b032      	add	sp, #200	; 0xc8
    8a72:	bdb0      	pop	{r4, r5, r7, pc}

00008a74 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>:
        fn from(num: i32) -> Self {
    8a74:	b083      	sub	sp, #12
    8a76:	9001      	str	r0, [sp, #4]
                ::core::mem::transmute::
    8a78:	9002      	str	r0, [sp, #8]
    8a7a:	9802      	ldr	r0, [sp, #8]
    8a7c:	9000      	str	r0, [sp, #0]
    8a7e:	e7ff      	b.n	8a80 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E+0xc>
        }
    8a80:	9800      	ldr	r0, [sp, #0]
    8a82:	b003      	add	sp, #12
    8a84:	4770      	bx	lr

00008a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>:
        fn from(_: ()) -> Self {
    8a86:	b081      	sub	sp, #4
    8a88:	f06f 000c 	mvn.w	r0, #12
        }
    8a8c:	b001      	add	sp, #4
    8a8e:	4770      	bx	lr

00008a90 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E>:
        fn fmt(&self, _fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    8a90:	b082      	sub	sp, #8
    8a92:	9000      	str	r0, [sp, #0]
    8a94:	9101      	str	r1, [sp, #4]
    8a96:	2000      	movs	r0, #0
        }
    8a98:	b002      	add	sp, #8
    8a9a:	4770      	bx	lr

00008a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>:
    8a9c:	b580      	push	{r7, lr}
    8a9e:	b086      	sub	sp, #24
    8aa0:	f8dd c020 	ldr.w	ip, [sp, #32]
    8aa4:	9102      	str	r1, [sp, #8]
    8aa6:	9203      	str	r2, [sp, #12]
    8aa8:	9304      	str	r3, [sp, #16]
    8aaa:	f8cd c014 	str.w	ip, [sp, #20]
    8aae:	f04f 0e00 	mov.w	lr, #0
    8ab2:	f8cd e004 	str.w	lr, [sp, #4]
    8ab6:	f8cd e000 	str.w	lr, [sp]
    8aba:	f8cd e000 	str.w	lr, [sp]
    8abe:	6001      	str	r1, [r0, #0]
    8ac0:	6042      	str	r2, [r0, #4]
    8ac2:	9900      	ldr	r1, [sp, #0]
    8ac4:	9a01      	ldr	r2, [sp, #4]
    8ac6:	6081      	str	r1, [r0, #8]
    8ac8:	60c2      	str	r2, [r0, #12]
    8aca:	6103      	str	r3, [r0, #16]
    8acc:	f8c0 c014 	str.w	ip, [r0, #20]
    8ad0:	b006      	add	sp, #24
    8ad2:	bd80      	pop	{r7, pc}

00008ad4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>:
    8ad4:	b082      	sub	sp, #8
    8ad6:	9001      	str	r0, [sp, #4]
    8ad8:	7800      	ldrb	r0, [r0, #0]
    8ada:	07c0      	lsls	r0, r0, #31
    8adc:	2800      	cmp	r0, #0
    8ade:	d004      	beq.n	8aea <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x16>
    8ae0:	e7ff      	b.n	8ae2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0xe>
    8ae2:	2000      	movs	r0, #0
    8ae4:	f88d 0003 	strb.w	r0, [sp, #3]
    8ae8:	e003      	b.n	8af2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8aea:	2001      	movs	r0, #1
    8aec:	f88d 0003 	strb.w	r0, [sp, #3]
    8af0:	e7ff      	b.n	8af2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8af2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    8af6:	b002      	add	sp, #8
    8af8:	4770      	bx	lr

00008afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>:
    8afa:	b08a      	sub	sp, #40	; 0x28
    8afc:	9005      	str	r0, [sp, #20]
    8afe:	9107      	str	r1, [sp, #28]
    8b00:	9208      	str	r2, [sp, #32]
    8b02:	9805      	ldr	r0, [sp, #20]
    8b04:	f1b0 0c01 	subs.w	ip, r0, #1
    8b08:	bf18      	it	ne
    8b0a:	f04f 0c01 	movne.w	ip, #1
    8b0e:	2801      	cmp	r0, #1
    8b10:	9304      	str	r3, [sp, #16]
    8b12:	9203      	str	r2, [sp, #12]
    8b14:	9102      	str	r1, [sp, #8]
    8b16:	d010      	beq.n	8b3a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x40>
    8b18:	e7ff      	b.n	8b1a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x20>
    8b1a:	9805      	ldr	r0, [sp, #20]
    8b1c:	9006      	str	r0, [sp, #24]
    8b1e:	4668      	mov	r0, sp
    8b20:	9904      	ldr	r1, [sp, #16]
    8b22:	6001      	str	r1, [r0, #0]
    8b24:	f64b 6310 	movw	r3, #48656	; 0xbe10
    8b28:	f2c0 0301 	movt	r3, #1
    8b2c:	aa06      	add	r2, sp, #24
    8b2e:	9802      	ldr	r0, [sp, #8]
    8b30:	9903      	ldr	r1, [sp, #12]
    8b32:	f00c fd2d 	bl	15590 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    8b36:	defe      	udf	#254	; 0xfe
    8b38:	defe      	udf	#254	; 0xfe
    8b3a:	9805      	ldr	r0, [sp, #20]
    8b3c:	2801      	cmp	r0, #1
    8b3e:	d102      	bne.n	8b46 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x4c>
    8b40:	e7ff      	b.n	8b42 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>
    8b42:	b00a      	add	sp, #40	; 0x28
    8b44:	4770      	bx	lr
    8b46:	e7fc      	b.n	8b42 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>

00008b48 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>:
    8b48:	b580      	push	{r7, lr}
    8b4a:	b082      	sub	sp, #8
    8b4c:	9001      	str	r0, [sp, #4]
    8b4e:	f7ff ffc1 	bl	8ad4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>
    8b52:	9000      	str	r0, [sp, #0]
    8b54:	e7ff      	b.n	8b56 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E+0xe>
    8b56:	2001      	movs	r0, #1
    8b58:	9900      	ldr	r1, [sp, #0]
    8b5a:	4388      	bics	r0, r1
    8b5c:	b002      	add	sp, #8
    8b5e:	bd80      	pop	{r7, pc}

00008b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>:
    8b60:	b082      	sub	sp, #8
    8b62:	9001      	str	r0, [sp, #4]
    8b64:	9000      	str	r0, [sp, #0]
    8b66:	9800      	ldr	r0, [sp, #0]
    8b68:	b002      	add	sp, #8
    8b6a:	4770      	bx	lr

00008b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>:
    8b6c:	b081      	sub	sp, #4
    8b6e:	4601      	mov	r1, r0
    8b70:	f88d 0003 	strb.w	r0, [sp, #3]
    8b74:	b001      	add	sp, #4
    8b76:	4770      	bx	lr

00008b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>:
    8b78:	b081      	sub	sp, #4
    8b7a:	9000      	str	r0, [sp, #0]
    8b7c:	b001      	add	sp, #4
    8b7e:	4770      	bx	lr

00008b80 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>:
    8b80:	b580      	push	{r7, lr}
    8b82:	b08a      	sub	sp, #40	; 0x28
    8b84:	9007      	str	r0, [sp, #28]
    8b86:	9108      	str	r1, [sp, #32]
    8b88:	9209      	str	r2, [sp, #36]	; 0x24
    8b8a:	2300      	movs	r3, #0
    8b8c:	9305      	str	r3, [sp, #20]
    8b8e:	9006      	str	r0, [sp, #24]
    8b90:	9805      	ldr	r0, [sp, #20]
    8b92:	9b06      	ldr	r3, [sp, #24]
    8b94:	9104      	str	r1, [sp, #16]
    8b96:	4619      	mov	r1, r3
    8b98:	9b04      	ldr	r3, [sp, #16]
    8b9a:	9203      	str	r2, [sp, #12]
    8b9c:	461a      	mov	r2, r3
    8b9e:	9b03      	ldr	r3, [sp, #12]
    8ba0:	f000 f828 	bl	8bf4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    8ba4:	9002      	str	r0, [sp, #8]
    8ba6:	9101      	str	r1, [sp, #4]
    8ba8:	e7ff      	b.n	8baa <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E+0x2a>
    8baa:	9802      	ldr	r0, [sp, #8]
    8bac:	9901      	ldr	r1, [sp, #4]
    8bae:	b00a      	add	sp, #40	; 0x28
    8bb0:	bd80      	pop	{r7, pc}

00008bb2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>:
    8bb2:	b580      	push	{r7, lr}
    8bb4:	b08a      	sub	sp, #40	; 0x28
    8bb6:	9006      	str	r0, [sp, #24]
    8bb8:	9107      	str	r1, [sp, #28]
    8bba:	9208      	str	r2, [sp, #32]
    8bbc:	9309      	str	r3, [sp, #36]	; 0x24
    8bbe:	9005      	str	r0, [sp, #20]
    8bc0:	4610      	mov	r0, r2
    8bc2:	9104      	str	r1, [sp, #16]
    8bc4:	4619      	mov	r1, r3
    8bc6:	f009 f802 	bl	11bce <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    8bca:	9003      	str	r0, [sp, #12]
    8bcc:	e7ff      	b.n	8bce <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x1c>
    8bce:	9803      	ldr	r0, [sp, #12]
    8bd0:	9905      	ldr	r1, [sp, #20]
    8bd2:	f008 ff83 	bl	11adc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    8bd6:	9002      	str	r0, [sp, #8]
    8bd8:	e7ff      	b.n	8bda <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x28>
    8bda:	9804      	ldr	r0, [sp, #16]
    8bdc:	9905      	ldr	r1, [sp, #20]
    8bde:	1a41      	subs	r1, r0, r1
    8be0:	9802      	ldr	r0, [sp, #8]
    8be2:	f000 f8b7 	bl	8d54 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
    8be6:	9001      	str	r0, [sp, #4]
    8be8:	9100      	str	r1, [sp, #0]
    8bea:	e7ff      	b.n	8bec <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x3a>
    8bec:	9801      	ldr	r0, [sp, #4]
    8bee:	9900      	ldr	r1, [sp, #0]
    8bf0:	b00a      	add	sp, #40	; 0x28
    8bf2:	bd80      	pop	{r7, pc}

00008bf4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>:
    8bf4:	b580      	push	{r7, lr}
    8bf6:	b08c      	sub	sp, #48	; 0x30
    8bf8:	9008      	str	r0, [sp, #32]
    8bfa:	9109      	str	r1, [sp, #36]	; 0x24
    8bfc:	920a      	str	r2, [sp, #40]	; 0x28
    8bfe:	930b      	str	r3, [sp, #44]	; 0x2c
    8c00:	4288      	cmp	r0, r1
    8c02:	9307      	str	r3, [sp, #28]
    8c04:	9206      	str	r2, [sp, #24]
    8c06:	9105      	str	r1, [sp, #20]
    8c08:	9004      	str	r0, [sp, #16]
    8c0a:	d806      	bhi.n	8c1a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x26>
    8c0c:	e7ff      	b.n	8c0e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x1a>
    8c0e:	9806      	ldr	r0, [sp, #24]
    8c10:	9907      	ldr	r1, [sp, #28]
    8c12:	f008 fff3 	bl	11bfc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8c16:	9003      	str	r0, [sp, #12]
    8c18:	e004      	b.n	8c24 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x30>
    8c1a:	9804      	ldr	r0, [sp, #16]
    8c1c:	9905      	ldr	r1, [sp, #20]
    8c1e:	f00d fc5a 	bl	164d6 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
    8c22:	defe      	udf	#254	; 0xfe
    8c24:	9805      	ldr	r0, [sp, #20]
    8c26:	9903      	ldr	r1, [sp, #12]
    8c28:	4288      	cmp	r0, r1
    8c2a:	d809      	bhi.n	8c40 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x4c>
    8c2c:	e7ff      	b.n	8c2e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x3a>
    8c2e:	9804      	ldr	r0, [sp, #16]
    8c30:	9905      	ldr	r1, [sp, #20]
    8c32:	9a06      	ldr	r2, [sp, #24]
    8c34:	9b07      	ldr	r3, [sp, #28]
    8c36:	f7ff ffbc 	bl	8bb2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>
    8c3a:	9002      	str	r0, [sp, #8]
    8c3c:	9101      	str	r1, [sp, #4]
    8c3e:	e00a      	b.n	8c56 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x62>
    8c40:	9806      	ldr	r0, [sp, #24]
    8c42:	9907      	ldr	r1, [sp, #28]
    8c44:	f008 ffda 	bl	11bfc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8c48:	9000      	str	r0, [sp, #0]
    8c4a:	e7ff      	b.n	8c4c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x58>
    8c4c:	9805      	ldr	r0, [sp, #20]
    8c4e:	9900      	ldr	r1, [sp, #0]
    8c50:	f00d fc1f 	bl	16492 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
    8c54:	defe      	udf	#254	; 0xfe
    8c56:	9802      	ldr	r0, [sp, #8]
    8c58:	9901      	ldr	r1, [sp, #4]
    8c5a:	b00c      	add	sp, #48	; 0x30
    8c5c:	bd80      	pop	{r7, pc}

00008c5e <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8c5e:	b580      	push	{r7, lr}
    8c60:	b082      	sub	sp, #8
    8c62:	9001      	str	r0, [sp, #4]
    8c64:	f00f fed4 	bl	18a10 <os_eventq_run>
    8c68:	e7ff      	b.n	8c6a <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE+0xc>
    8c6a:	2001      	movs	r0, #1
    8c6c:	b002      	add	sp, #8
    8c6e:	bd80      	pop	{r7, pc}

00008c70 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8c70:	b580      	push	{r7, lr}
    8c72:	b084      	sub	sp, #16
    8c74:	9002      	str	r0, [sp, #8]
    8c76:	f00f fef7 	bl	18a68 <os_eventq_dflt_get>
    8c7a:	4601      	mov	r1, r0
    8c7c:	9003      	str	r0, [sp, #12]
    8c7e:	9101      	str	r1, [sp, #4]
    8c80:	e7ff      	b.n	8c82 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE+0x12>
    8c82:	9801      	ldr	r0, [sp, #4]
    8c84:	9902      	ldr	r1, [sp, #8]
    8c86:	6048      	str	r0, [r1, #4]
    8c88:	2200      	movs	r2, #0
    8c8a:	600a      	str	r2, [r1, #0]
    8c8c:	b004      	add	sp, #16
    8c8e:	bd80      	pop	{r7, pc}

00008c90 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>:
impl Default for os_task_stailq {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8c90:	b570      	push	{r4, r5, r6, lr}
    8c92:	b09c      	sub	sp, #112	; 0x70
    8c94:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
    8c98:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
    8c9c:	9c22      	ldr	r4, [sp, #136]	; 0x88
    8c9e:	9d21      	ldr	r5, [sp, #132]	; 0x84
    8ca0:	9e20      	ldr	r6, [sp, #128]	; 0x80
    8ca2:	9013      	str	r0, [sp, #76]	; 0x4c
    8ca4:	9114      	str	r1, [sp, #80]	; 0x50
    8ca6:	9215      	str	r2, [sp, #84]	; 0x54
    8ca8:	9316      	str	r3, [sp, #88]	; 0x58
    8caa:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
    8cae:	9418      	str	r4, [sp, #96]	; 0x60
    8cb0:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
    8cb4:	f8ad c06a 	strh.w	ip, [sp, #106]	; 0x6a
    8cb8:	9011      	str	r0, [sp, #68]	; 0x44
    8cba:	4608      	mov	r0, r1
    8cbc:	9310      	str	r3, [sp, #64]	; 0x40
    8cbe:	920f      	str	r2, [sp, #60]	; 0x3c
    8cc0:	910e      	str	r1, [sp, #56]	; 0x38
    8cc2:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    8cc6:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    8cca:	940b      	str	r4, [sp, #44]	; 0x2c
    8ccc:	950a      	str	r5, [sp, #40]	; 0x28
    8cce:	9609      	str	r6, [sp, #36]	; 0x24
    8cd0:	f7ff fe2a 	bl	8928 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>
    8cd4:	e7ff      	b.n	8cd6 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x46>
    8cd6:	980e      	ldr	r0, [sp, #56]	; 0x38
    8cd8:	f7ff fe08 	bl	88ec <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>
    8cdc:	9008      	str	r0, [sp, #32]
    8cde:	e7ff      	b.n	8ce0 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x50>
    8ce0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8ce2:	990c      	ldr	r1, [sp, #48]	; 0x30
    8ce4:	f000 f93b 	bl	8f5e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>
    8ce8:	9007      	str	r0, [sp, #28]
    8cea:	e7ff      	b.n	8cec <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x5c>
    8cec:	980d      	ldr	r0, [sp, #52]	; 0x34
    8cee:	b281      	uxth	r1, r0
    8cf0:	466a      	mov	r2, sp
    8cf2:	60d1      	str	r1, [r2, #12]
    8cf4:	9907      	ldr	r1, [sp, #28]
    8cf6:	6091      	str	r1, [r2, #8]
    8cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8cfa:	6053      	str	r3, [r2, #4]
    8cfc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    8d00:	fa5f fe8c 	uxtb.w	lr, ip
    8d04:	f8c2 e000 	str.w	lr, [r2]
    8d08:	9811      	ldr	r0, [sp, #68]	; 0x44
    8d0a:	9908      	ldr	r1, [sp, #32]
    8d0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8d0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8d10:	f010 fc4a 	bl	195a8 <os_task_init>
    8d14:	4601      	mov	r1, r0
    8d16:	901b      	str	r0, [sp, #108]	; 0x6c
    8d18:	9106      	str	r1, [sp, #24]
    8d1a:	e7ff      	b.n	8d1c <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x8c>
    8d1c:	9806      	ldr	r0, [sp, #24]
    8d1e:	2800      	cmp	r0, #0
    8d20:	d005      	beq.n	8d2e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x9e>
    8d22:	e7ff      	b.n	8d24 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x94>
    8d24:	9806      	ldr	r0, [sp, #24]
    8d26:	f7ff fea5 	bl	8a74 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>
    8d2a:	9005      	str	r0, [sp, #20]
    8d2c:	e004      	b.n	8d38 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xa8>
    8d2e:	2000      	movs	r0, #0
    8d30:	9012      	str	r0, [sp, #72]	; 0x48
    8d32:	2001      	movs	r0, #1
    8d34:	9012      	str	r0, [sp, #72]	; 0x48
    8d36:	e002      	b.n	8d3e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8d38:	9805      	ldr	r0, [sp, #20]
    8d3a:	9012      	str	r0, [sp, #72]	; 0x48
    8d3c:	e7ff      	b.n	8d3e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8d3e:	9812      	ldr	r0, [sp, #72]	; 0x48
    8d40:	b01c      	add	sp, #112	; 0x70
    8d42:	bd70      	pop	{r4, r5, r6, pc}

00008d44 <_ZN4core3ptr13drop_in_place17h1982c2483e0a2028E>:
    8d44:	b081      	sub	sp, #4
    8d46:	9000      	str	r0, [sp, #0]
    8d48:	b001      	add	sp, #4
    8d4a:	4770      	bx	lr

00008d4c <_ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E>:
    8d4c:	b081      	sub	sp, #4
    8d4e:	9000      	str	r0, [sp, #0]
    8d50:	b001      	add	sp, #4
    8d52:	4770      	bx	lr

00008d54 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>:
    8d54:	b580      	push	{r7, lr}
    8d56:	b084      	sub	sp, #16
    8d58:	9002      	str	r0, [sp, #8]
    8d5a:	9103      	str	r1, [sp, #12]
    8d5c:	f000 f993 	bl	9086 <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>
    8d60:	9001      	str	r0, [sp, #4]
    8d62:	9100      	str	r1, [sp, #0]
    8d64:	e7ff      	b.n	8d66 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE+0x12>
    8d66:	9801      	ldr	r0, [sp, #4]
    8d68:	9900      	ldr	r1, [sp, #0]
    8d6a:	b004      	add	sp, #16
    8d6c:	bd80      	pop	{r7, pc}

00008d6e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>:
    8d6e:	b5b0      	push	{r4, r5, r7, lr}
    8d70:	b0b8      	sub	sp, #224	; 0xe0
    8d72:	902f      	str	r0, [sp, #188]	; 0xbc
    8d74:	9130      	str	r1, [sp, #192]	; 0xc0
    8d76:	9231      	str	r2, [sp, #196]	; 0xc4
    8d78:	9332      	str	r3, [sp, #200]	; 0xc8
    8d7a:	9013      	str	r0, [sp, #76]	; 0x4c
    8d7c:	9112      	str	r1, [sp, #72]	; 0x48
    8d7e:	9311      	str	r3, [sp, #68]	; 0x44
    8d80:	9210      	str	r2, [sp, #64]	; 0x40
    8d82:	f008 ff3b 	bl	11bfc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8d86:	9016      	str	r0, [sp, #88]	; 0x58
    8d88:	e7ff      	b.n	8d8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x1c>
    8d8a:	9810      	ldr	r0, [sp, #64]	; 0x40
    8d8c:	9911      	ldr	r1, [sp, #68]	; 0x44
    8d8e:	f008 ff35 	bl	11bfc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8d92:	9017      	str	r0, [sp, #92]	; 0x5c
    8d94:	e7ff      	b.n	8d96 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x28>
    8d96:	a816      	add	r0, sp, #88	; 0x58
    8d98:	9014      	str	r0, [sp, #80]	; 0x50
    8d9a:	a817      	add	r0, sp, #92	; 0x5c
    8d9c:	9015      	str	r0, [sp, #84]	; 0x54
    8d9e:	9814      	ldr	r0, [sp, #80]	; 0x50
    8da0:	9033      	str	r0, [sp, #204]	; 0xcc
    8da2:	9915      	ldr	r1, [sp, #84]	; 0x54
    8da4:	9134      	str	r1, [sp, #208]	; 0xd0
    8da6:	6802      	ldr	r2, [r0, #0]
    8da8:	680b      	ldr	r3, [r1, #0]
    8daa:	429a      	cmp	r2, r3
    8dac:	900f      	str	r0, [sp, #60]	; 0x3c
    8dae:	910e      	str	r1, [sp, #56]	; 0x38
    8db0:	d106      	bne.n	8dc0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x52>
    8db2:	e7ff      	b.n	8db4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x46>
    8db4:	9810      	ldr	r0, [sp, #64]	; 0x40
    8db6:	9911      	ldr	r1, [sp, #68]	; 0x44
    8db8:	f008 ff28 	bl	11c0c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    8dbc:	900d      	str	r0, [sp, #52]	; 0x34
    8dbe:	e072      	b.n	8ea6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x138>
    8dc0:	f64b 6074 	movw	r0, #48756	; 0xbe74
    8dc4:	f2c0 0001 	movt	r0, #1
    8dc8:	6801      	ldr	r1, [r0, #0]
    8dca:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8dcc:	9027      	str	r0, [sp, #156]	; 0x9c
    8dce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8dd0:	9228      	str	r2, [sp, #160]	; 0xa0
    8dd2:	f64b 63b4 	movw	r3, #48820	; 0xbeb4
    8dd6:	f2c0 0301 	movt	r3, #1
    8dda:	681b      	ldr	r3, [r3, #0]
    8ddc:	f64b 6cb8 	movw	ip, #48824	; 0xbeb8
    8de0:	f2c0 0c01 	movt	ip, #1
    8de4:	f8dc c000 	ldr.w	ip, [ip]
    8de8:	46ee      	mov	lr, sp
    8dea:	2400      	movs	r4, #0
    8dec:	f8ce 4000 	str.w	r4, [lr]
    8df0:	a829      	add	r0, sp, #164	; 0xa4
    8df2:	2201      	movs	r2, #1
    8df4:	910c      	str	r1, [sp, #48]	; 0x30
    8df6:	4619      	mov	r1, r3
    8df8:	4663      	mov	r3, ip
    8dfa:	f7ff fe4f 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8dfe:	e7ff      	b.n	8e00 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x92>
    8e00:	a827      	add	r0, sp, #156	; 0x9c
    8e02:	9024      	str	r0, [sp, #144]	; 0x90
    8e04:	a828      	add	r0, sp, #160	; 0xa0
    8e06:	9025      	str	r0, [sp, #148]	; 0x94
    8e08:	a829      	add	r0, sp, #164	; 0xa4
    8e0a:	9026      	str	r0, [sp, #152]	; 0x98
    8e0c:	9824      	ldr	r0, [sp, #144]	; 0x90
    8e0e:	9035      	str	r0, [sp, #212]	; 0xd4
    8e10:	9925      	ldr	r1, [sp, #148]	; 0x94
    8e12:	9136      	str	r1, [sp, #216]	; 0xd8
    8e14:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8e16:	9237      	str	r2, [sp, #220]	; 0xdc
    8e18:	f242 3329 	movw	r3, #9001	; 0x2329
    8e1c:	f2c0 0301 	movt	r3, #1
    8e20:	910b      	str	r1, [sp, #44]	; 0x2c
    8e22:	4619      	mov	r1, r3
    8e24:	920a      	str	r2, [sp, #40]	; 0x28
    8e26:	f009 fa8d 	bl	12344 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8e2a:	9009      	str	r0, [sp, #36]	; 0x24
    8e2c:	9108      	str	r1, [sp, #32]
    8e2e:	e7ff      	b.n	8e30 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xc2>
    8e30:	f242 3129 	movw	r1, #9001	; 0x2329
    8e34:	f2c0 0101 	movt	r1, #1
    8e38:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8e3a:	f009 fa83 	bl	12344 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8e3e:	9007      	str	r0, [sp, #28]
    8e40:	9106      	str	r1, [sp, #24]
    8e42:	e7ff      	b.n	8e44 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xd6>
    8e44:	f645 31bb 	movw	r1, #23483	; 0x5bbb
    8e48:	f2c0 0101 	movt	r1, #1
    8e4c:	980a      	ldr	r0, [sp, #40]	; 0x28
    8e4e:	f000 fac3 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8e52:	9005      	str	r0, [sp, #20]
    8e54:	9104      	str	r1, [sp, #16]
    8e56:	e7ff      	b.n	8e58 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xea>
    8e58:	9809      	ldr	r0, [sp, #36]	; 0x24
    8e5a:	901e      	str	r0, [sp, #120]	; 0x78
    8e5c:	9908      	ldr	r1, [sp, #32]
    8e5e:	911f      	str	r1, [sp, #124]	; 0x7c
    8e60:	9a07      	ldr	r2, [sp, #28]
    8e62:	9220      	str	r2, [sp, #128]	; 0x80
    8e64:	9b06      	ldr	r3, [sp, #24]
    8e66:	9321      	str	r3, [sp, #132]	; 0x84
    8e68:	f8dd c014 	ldr.w	ip, [sp, #20]
    8e6c:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    8e70:	f8dd e010 	ldr.w	lr, [sp, #16]
    8e74:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
    8e78:	466c      	mov	r4, sp
    8e7a:	2503      	movs	r5, #3
    8e7c:	6025      	str	r5, [r4, #0]
    8e7e:	a818      	add	r0, sp, #96	; 0x60
    8e80:	ab1e      	add	r3, sp, #120	; 0x78
    8e82:	990c      	ldr	r1, [sp, #48]	; 0x30
    8e84:	462a      	mov	r2, r5
    8e86:	f7ff fe09 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8e8a:	e7ff      	b.n	8e8c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x11e>
    8e8c:	f64b 7008 	movw	r0, #48904	; 0xbf08
    8e90:	f2c0 0001 	movt	r0, #1
    8e94:	f00c fba3 	bl	155de <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8e98:	9003      	str	r0, [sp, #12]
    8e9a:	e7ff      	b.n	8e9c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x12e>
    8e9c:	a818      	add	r0, sp, #96	; 0x60
    8e9e:	9903      	ldr	r1, [sp, #12]
    8ea0:	f00c fbda 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8ea4:	defe      	udf	#254	; 0xfe
    8ea6:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8ea8:	9912      	ldr	r1, [sp, #72]	; 0x48
    8eaa:	f008 fe90 	bl	11bce <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    8eae:	9002      	str	r0, [sp, #8]
    8eb0:	e7ff      	b.n	8eb2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x144>
    8eb2:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8eb4:	9912      	ldr	r1, [sp, #72]	; 0x48
    8eb6:	f008 fea1 	bl	11bfc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8eba:	9001      	str	r0, [sp, #4]
    8ebc:	e7ff      	b.n	8ebe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x150>
    8ebe:	980d      	ldr	r0, [sp, #52]	; 0x34
    8ec0:	9902      	ldr	r1, [sp, #8]
    8ec2:	9a01      	ldr	r2, [sp, #4]
    8ec4:	f008 fca6 	bl	11814 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    8ec8:	e7ff      	b.n	8eca <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x15c>
    8eca:	b038      	add	sp, #224	; 0xe0
    8ecc:	bdb0      	pop	{r4, r5, r7, pc}

00008ece <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>:
    8ece:	b580      	push	{r7, lr}
    8ed0:	b086      	sub	sp, #24
    8ed2:	9003      	str	r0, [sp, #12]
    8ed4:	9104      	str	r1, [sp, #16]
    8ed6:	9205      	str	r2, [sp, #20]
    8ed8:	9002      	str	r0, [sp, #8]
    8eda:	4610      	mov	r0, r2
    8edc:	9a02      	ldr	r2, [sp, #8]
    8ede:	9101      	str	r1, [sp, #4]
    8ee0:	4611      	mov	r1, r2
    8ee2:	9a01      	ldr	r2, [sp, #4]
    8ee4:	f000 f861 	bl	8faa <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>
    8ee8:	9000      	str	r0, [sp, #0]
    8eea:	e7ff      	b.n	8eec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE+0x1e>
    8eec:	9800      	ldr	r0, [sp, #0]
    8eee:	b006      	add	sp, #24
    8ef0:	bd80      	pop	{r7, pc}

00008ef2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>:
    8ef2:	b580      	push	{r7, lr}
    8ef4:	b08e      	sub	sp, #56	; 0x38
    8ef6:	9009      	str	r0, [sp, #36]	; 0x24
    8ef8:	910a      	str	r1, [sp, #40]	; 0x28
    8efa:	9005      	str	r0, [sp, #20]
    8efc:	9104      	str	r1, [sp, #16]
    8efe:	f008 fe7d 	bl	11bfc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8f02:	9003      	str	r0, [sp, #12]
    8f04:	e7ff      	b.n	8f06 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x14>
    8f06:	2101      	movs	r1, #1
    8f08:	9803      	ldr	r0, [sp, #12]
    8f0a:	f000 fa7a 	bl	9402 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>
    8f0e:	9002      	str	r0, [sp, #8]
    8f10:	9101      	str	r1, [sp, #4]
    8f12:	e7ff      	b.n	8f14 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x22>
    8f14:	9802      	ldr	r0, [sp, #8]
    8f16:	9901      	ldr	r1, [sp, #4]
    8f18:	f000 f97c 	bl	9214 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>
    8f1c:	9108      	str	r1, [sp, #32]
    8f1e:	9007      	str	r0, [sp, #28]
    8f20:	e7ff      	b.n	8f22 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x30>
    8f22:	9807      	ldr	r0, [sp, #28]
    8f24:	2800      	cmp	r0, #0
    8f26:	d001      	beq.n	8f2c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x3a>
    8f28:	e7ff      	b.n	8f2a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x38>
    8f2a:	e00c      	b.n	8f46 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x54>
    8f2c:	9808      	ldr	r0, [sp, #32]
    8f2e:	900c      	str	r0, [sp, #48]	; 0x30
    8f30:	900d      	str	r0, [sp, #52]	; 0x34
    8f32:	9905      	ldr	r1, [sp, #20]
    8f34:	9000      	str	r0, [sp, #0]
    8f36:	4608      	mov	r0, r1
    8f38:	9904      	ldr	r1, [sp, #16]
    8f3a:	9a00      	ldr	r2, [sp, #0]
    8f3c:	f7ff ffc7 	bl	8ece <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>
    8f40:	9006      	str	r0, [sp, #24]
    8f42:	e00b      	b.n	8f5c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x6a>
    8f44:	defe      	udf	#254	; 0xfe
    8f46:	f008 fb51 	bl	115ec <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>
    8f4a:	e002      	b.n	8f52 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x60>
    8f4c:	9806      	ldr	r0, [sp, #24]
    8f4e:	b00e      	add	sp, #56	; 0x38
    8f50:	bd80      	pop	{r7, pc}
    8f52:	f000 f959 	bl	9208 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>
    8f56:	9006      	str	r0, [sp, #24]
    8f58:	e7ff      	b.n	8f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x68>
    8f5a:	e7f7      	b.n	8f4c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>
    8f5c:	e7f6      	b.n	8f4c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>

00008f5e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>:
    8f5e:	b082      	sub	sp, #8
    8f60:	9000      	str	r0, [sp, #0]
    8f62:	9101      	str	r1, [sp, #4]
    8f64:	b002      	add	sp, #8
    8f66:	4770      	bx	lr

00008f68 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>:
    8f68:	b580      	push	{r7, lr}
    8f6a:	b088      	sub	sp, #32
    8f6c:	9005      	str	r0, [sp, #20]
    8f6e:	9106      	str	r1, [sp, #24]
    8f70:	9207      	str	r2, [sp, #28]
    8f72:	9004      	str	r0, [sp, #16]
    8f74:	4610      	mov	r0, r2
    8f76:	9a04      	ldr	r2, [sp, #16]
    8f78:	9103      	str	r1, [sp, #12]
    8f7a:	4611      	mov	r1, r2
    8f7c:	9a03      	ldr	r2, [sp, #12]
    8f7e:	f7ff fdff 	bl	8b80 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>
    8f82:	9002      	str	r0, [sp, #8]
    8f84:	9101      	str	r1, [sp, #4]
    8f86:	e7ff      	b.n	8f88 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E+0x20>
    8f88:	9802      	ldr	r0, [sp, #8]
    8f8a:	9901      	ldr	r1, [sp, #4]
    8f8c:	b008      	add	sp, #32
    8f8e:	bd80      	pop	{r7, pc}

00008f90 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>:
    8f90:	b580      	push	{r7, lr}
    8f92:	b084      	sub	sp, #16
    8f94:	9002      	str	r0, [sp, #8]
    8f96:	9103      	str	r1, [sp, #12]
    8f98:	f008 fae5 	bl	11566 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>
    8f9c:	9001      	str	r0, [sp, #4]
    8f9e:	9100      	str	r1, [sp, #0]
    8fa0:	e7ff      	b.n	8fa2 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E+0x12>
    8fa2:	9801      	ldr	r0, [sp, #4]
    8fa4:	9900      	ldr	r1, [sp, #0]
    8fa6:	b004      	add	sp, #16
    8fa8:	bd80      	pop	{r7, pc}

00008faa <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>:
    8faa:	b580      	push	{r7, lr}
    8fac:	b08a      	sub	sp, #40	; 0x28
    8fae:	9007      	str	r0, [sp, #28]
    8fb0:	9108      	str	r1, [sp, #32]
    8fb2:	9209      	str	r2, [sp, #36]	; 0x24
    8fb4:	9005      	str	r0, [sp, #20]
    8fb6:	4608      	mov	r0, r1
    8fb8:	9104      	str	r1, [sp, #16]
    8fba:	4611      	mov	r1, r2
    8fbc:	9203      	str	r2, [sp, #12]
    8fbe:	f008 fe1d 	bl	11bfc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8fc2:	9002      	str	r0, [sp, #8]
    8fc4:	e7ff      	b.n	8fc6 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x1c>
    8fc6:	9805      	ldr	r0, [sp, #20]
    8fc8:	9902      	ldr	r1, [sp, #8]
    8fca:	4288      	cmp	r0, r1
    8fcc:	d303      	bcc.n	8fd6 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x2c>
    8fce:	e7ff      	b.n	8fd0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x26>
    8fd0:	2000      	movs	r0, #0
    8fd2:	9006      	str	r0, [sp, #24]
    8fd4:	e009      	b.n	8fea <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    8fd6:	9805      	ldr	r0, [sp, #20]
    8fd8:	9904      	ldr	r1, [sp, #16]
    8fda:	9a03      	ldr	r2, [sp, #12]
    8fdc:	f008 fe3a 	bl	11c54 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>
    8fe0:	9001      	str	r0, [sp, #4]
    8fe2:	e7ff      	b.n	8fe4 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x3a>
    8fe4:	9801      	ldr	r0, [sp, #4]
    8fe6:	9006      	str	r0, [sp, #24]
    8fe8:	e7ff      	b.n	8fea <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    8fea:	9806      	ldr	r0, [sp, #24]
    8fec:	b00a      	add	sp, #40	; 0x28
    8fee:	bd80      	pop	{r7, pc}

00008ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn print(msg: &str) {
    8ff0:	b580      	push	{r7, lr}
    8ff2:	b08a      	sub	sp, #40	; 0x28
    8ff4:	9004      	str	r0, [sp, #16]
    8ff6:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    let buf = msg.as_ptr();
    8ff8:	9003      	str	r0, [sp, #12]
    8ffa:	9102      	str	r1, [sp, #8]
    8ffc:	f000 f86e 	bl	90dc <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    9000:	4601      	mov	r1, r0
    9002:	9006      	str	r0, [sp, #24]
    9004:	9101      	str	r1, [sp, #4]
    9006:	e7ff      	b.n	9008 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x18>
    let len = msg.len() as u32;
    9008:	9803      	ldr	r0, [sp, #12]
    900a:	9902      	ldr	r1, [sp, #8]
    900c:	f000 f850 	bl	90b0 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    9010:	9000      	str	r0, [sp, #0]
    9012:	e7ff      	b.n	9014 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x24>
    9014:	9800      	ldr	r0, [sp, #0]
    9016:	9007      	str	r0, [sp, #28]
    9018:	2100      	movs	r1, #0

    //  TODO: Dispatch the Mynewt C function `console_buffer`.
    //  TODO: Use a procedural macro to compute the hash of function name `console_buffer`.
    let hash = 0;  //  TODO
    901a:	9108      	str	r1, [sp, #32]
    //  TODO: Lookup the dispatch address of `console_buffer`.
    let _addr = get_dispatch_address(hash);
    901c:	4608      	mov	r0, r1
    901e:	f000 f809 	bl	9034 <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>
    9022:	9009      	str	r0, [sp, #36]	; 0x24
    9024:	e7ff      	b.n	9026 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x36>
    //  TODO: Call the `console_buffer` function using the dispatch address.
    unsafe { console_buffer(buf, len); }
    9026:	9801      	ldr	r0, [sp, #4]
    9028:	9900      	ldr	r1, [sp, #0]
    902a:	f00e f9af 	bl	1738c <console_buffer>
    902e:	e7ff      	b.n	9030 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x40>
}
    9030:	b00a      	add	sp, #40	; 0x28
    9032:	bd80      	pop	{r7, pc}

00009034 <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>:

/// Return the Dispatch Address for the OS function whose function name hashed is `hash`
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn get_dispatch_address(_hash: u32) -> u32 {
    9034:	b081      	sub	sp, #4
    9036:	9000      	str	r0, [sp, #0]
    9038:	2000      	movs	r0, #0
    //  TODO: Lookup the Dispatch Table for the hash of function name
    0
}
    903a:	b001      	add	sp, #4
    903c:	4770      	bx	lr

0000903e <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>:
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
}

///  Add the string to the output buffer.
pub fn buffer(msg: &str) {
    903e:	b580      	push	{r7, lr}
    9040:	b086      	sub	sp, #24
    9042:	9004      	str	r0, [sp, #16]
    9044:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
    9046:	9003      	str	r0, [sp, #12]
    9048:	9102      	str	r1, [sp, #8]
    904a:	f000 f847 	bl	90dc <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    904e:	9001      	str	r0, [sp, #4]
    9050:	e7ff      	b.n	9052 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x14>
    9052:	9803      	ldr	r0, [sp, #12]
    9054:	9902      	ldr	r1, [sp, #8]
    9056:	f000 f82b 	bl	90b0 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    905a:	9000      	str	r0, [sp, #0]
    905c:	e7ff      	b.n	905e <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x20>
    905e:	9801      	ldr	r0, [sp, #4]
    9060:	9900      	ldr	r1, [sp, #0]
    9062:	f00e f993 	bl	1738c <console_buffer>
    9066:	e7ff      	b.n	9068 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x2a>
}
    9068:	b006      	add	sp, #24
    906a:	bd80      	pop	{r7, pc}

0000906c <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>:
    unsafe { console_printhex(v); }
}

///  Write an int to the output buffer.
///  C API: `void console_printint(int i)`
pub fn printint(v: i32) {
    906c:	b580      	push	{r7, lr}
    906e:	b082      	sub	sp, #8
    9070:	9001      	str	r0, [sp, #4]
    unsafe { console_printint(v); }
    9072:	f00e f9fb 	bl	1746c <console_printint>
    9076:	e7ff      	b.n	9078 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E+0xc>
}
    9078:	b002      	add	sp, #8
    907a:	bd80      	pop	{r7, pc}

0000907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>:
pub fn dump(buffer: *const u8, len: u32) {
    unsafe { console_dump(buffer, len); }
}

///  Flush the output buffer to the console.
pub fn flush() {
    907c:	b580      	push	{r7, lr}
    unsafe { console_flush(); }
    907e:	f00e f95d 	bl	1733c <console_flush>
    9082:	e7ff      	b.n	9084 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E+0x8>
}
    9084:	bd80      	pop	{r7, pc}

00009086 <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>:
    9086:	b086      	sub	sp, #24
    9088:	9004      	str	r0, [sp, #16]
    908a:	9105      	str	r1, [sp, #20]
    908c:	9002      	str	r0, [sp, #8]
    908e:	9103      	str	r1, [sp, #12]
    9090:	9802      	ldr	r0, [sp, #8]
    9092:	9903      	ldr	r1, [sp, #12]
    9094:	9000      	str	r0, [sp, #0]
    9096:	9101      	str	r1, [sp, #4]
    9098:	9800      	ldr	r0, [sp, #0]
    909a:	9901      	ldr	r1, [sp, #4]
    909c:	b006      	add	sp, #24
    909e:	4770      	bx	lr

000090a0 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>:
    90a0:	b082      	sub	sp, #8
    90a2:	460a      	mov	r2, r1
    90a4:	9000      	str	r0, [sp, #0]
    90a6:	f88d 1007 	strb.w	r1, [sp, #7]
    90aa:	7001      	strb	r1, [r0, #0]
    90ac:	b002      	add	sp, #8
    90ae:	4770      	bx	lr

000090b0 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>:
    90b0:	b580      	push	{r7, lr}
    90b2:	b08a      	sub	sp, #40	; 0x28
    90b4:	9004      	str	r0, [sp, #16]
    90b6:	9105      	str	r1, [sp, #20]
    90b8:	9008      	str	r0, [sp, #32]
    90ba:	9109      	str	r1, [sp, #36]	; 0x24
    90bc:	9006      	str	r0, [sp, #24]
    90be:	9107      	str	r1, [sp, #28]
    90c0:	9806      	ldr	r0, [sp, #24]
    90c2:	9907      	ldr	r1, [sp, #28]
    90c4:	9003      	str	r0, [sp, #12]
    90c6:	9102      	str	r1, [sp, #8]
    90c8:	e7ff      	b.n	90ca <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x1a>
    90ca:	9803      	ldr	r0, [sp, #12]
    90cc:	9902      	ldr	r1, [sp, #8]
    90ce:	f008 fd95 	bl	11bfc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    90d2:	9001      	str	r0, [sp, #4]
    90d4:	e7ff      	b.n	90d6 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x26>
    90d6:	9801      	ldr	r0, [sp, #4]
    90d8:	b00a      	add	sp, #40	; 0x28
    90da:	bd80      	pop	{r7, pc}

000090dc <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>:
    90dc:	b082      	sub	sp, #8
    90de:	9000      	str	r0, [sp, #0]
    90e0:	9101      	str	r1, [sp, #4]
    90e2:	b002      	add	sp, #8
    90e4:	4770      	bx	lr

000090e6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E>:
    90e6:	b580      	push	{r7, lr}
    90e8:	b084      	sub	sp, #16
    90ea:	9002      	str	r0, [sp, #8]
    90ec:	9103      	str	r1, [sp, #12]
    90ee:	6800      	ldr	r0, [r0, #0]
    90f0:	f000 f845 	bl	917e <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>
    90f4:	9001      	str	r0, [sp, #4]
    90f6:	e7ff      	b.n	90f8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E+0x12>
    90f8:	9801      	ldr	r0, [sp, #4]
    90fa:	f000 0001 	and.w	r0, r0, #1
    90fe:	b004      	add	sp, #16
    9100:	bd80      	pop	{r7, pc}

00009102 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>:
    9102:	b087      	sub	sp, #28
    9104:	9000      	str	r0, [sp, #0]
    9106:	9101      	str	r1, [sp, #4]
    9108:	2000      	movs	r0, #0
    910a:	f88d 0013 	strb.w	r0, [sp, #19]
    910e:	f88d 0012 	strb.w	r0, [sp, #18]
    9112:	2001      	movs	r0, #1
    9114:	f88d 0013 	strb.w	r0, [sp, #19]
    9118:	f88d 0012 	strb.w	r0, [sp, #18]
    911c:	9800      	ldr	r0, [sp, #0]
    911e:	2800      	cmp	r0, #0
    9120:	d001      	beq.n	9126 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x24>
    9122:	e7ff      	b.n	9124 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x22>
    9124:	e006      	b.n	9134 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x32>
    9126:	2000      	movs	r0, #0
    9128:	f88d 0012 	strb.w	r0, [sp, #18]
    912c:	2001      	movs	r0, #1
    912e:	9002      	str	r0, [sp, #8]
    9130:	e008      	b.n	9144 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    9132:	defe      	udf	#254	; 0xfe
    9134:	2000      	movs	r0, #0
    9136:	f88d 0013 	strb.w	r0, [sp, #19]
    913a:	9901      	ldr	r1, [sp, #4]
    913c:	9106      	str	r1, [sp, #24]
    913e:	9103      	str	r1, [sp, #12]
    9140:	9002      	str	r0, [sp, #8]
    9142:	e7ff      	b.n	9144 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    9144:	f89d 0012 	ldrb.w	r0, [sp, #18]
    9148:	07c0      	lsls	r0, r0, #31
    914a:	2800      	cmp	r0, #0
    914c:	d104      	bne.n	9158 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x56>
    914e:	e7ff      	b.n	9150 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9150:	9800      	ldr	r0, [sp, #0]
    9152:	2801      	cmp	r0, #1
    9154:	d008      	beq.n	9168 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x66>
    9156:	e011      	b.n	917c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x7a>
    9158:	2000      	movs	r0, #0
    915a:	f88d 0012 	strb.w	r0, [sp, #18]
    915e:	e7f7      	b.n	9150 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9160:	9802      	ldr	r0, [sp, #8]
    9162:	9903      	ldr	r1, [sp, #12]
    9164:	b007      	add	sp, #28
    9166:	4770      	bx	lr
    9168:	f89d 0013 	ldrb.w	r0, [sp, #19]
    916c:	07c0      	lsls	r0, r0, #31
    916e:	2800      	cmp	r0, #0
    9170:	d0f6      	beq.n	9160 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    9172:	e7ff      	b.n	9174 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x72>
    9174:	2000      	movs	r0, #0
    9176:	f88d 0013 	strb.w	r0, [sp, #19]
    917a:	e7f1      	b.n	9160 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    917c:	e7f0      	b.n	9160 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>

0000917e <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>:
    917e:	b580      	push	{r7, lr}
    9180:	b08e      	sub	sp, #56	; 0x38
    9182:	900b      	str	r0, [sp, #44]	; 0x2c
    9184:	910c      	str	r1, [sp, #48]	; 0x30
    9186:	9003      	str	r0, [sp, #12]
    9188:	9803      	ldr	r0, [sp, #12]
    918a:	6800      	ldr	r0, [r0, #0]
    918c:	2800      	cmp	r0, #0
    918e:	4602      	mov	r2, r0
    9190:	bf18      	it	ne
    9192:	2201      	movne	r2, #1
    9194:	2800      	cmp	r0, #0
    9196:	9101      	str	r1, [sp, #4]
    9198:	d00f      	beq.n	91ba <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x3c>
    919a:	e7ff      	b.n	919c <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x1e>
    919c:	9803      	ldr	r0, [sp, #12]
    919e:	900d      	str	r0, [sp, #52]	; 0x34
    91a0:	f64b 7218 	movw	r2, #48920	; 0xbf18
    91a4:	f2c0 0201 	movt	r2, #1
    91a8:	a907      	add	r1, sp, #28
    91aa:	2304      	movs	r3, #4
    91ac:	9000      	str	r0, [sp, #0]
    91ae:	4608      	mov	r0, r1
    91b0:	9901      	ldr	r1, [sp, #4]
    91b2:	f00d f8c4 	bl	1633e <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    91b6:	e011      	b.n	91dc <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5e>
    91b8:	defe      	udf	#254	; 0xfe
    91ba:	f64b 721c 	movw	r2, #48924	; 0xbf1c
    91be:	f2c0 0201 	movt	r2, #1
    91c2:	a804      	add	r0, sp, #16
    91c4:	2304      	movs	r3, #4
    91c6:	9901      	ldr	r1, [sp, #4]
    91c8:	f00d f8b9 	bl	1633e <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    91cc:	e7ff      	b.n	91ce <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x50>
    91ce:	a804      	add	r0, sp, #16
    91d0:	f00c fbd2 	bl	15978 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    91d4:	f88d 000b 	strb.w	r0, [sp, #11]
    91d8:	e7ff      	b.n	91da <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5c>
    91da:	e011      	b.n	9200 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    91dc:	9800      	ldr	r0, [sp, #0]
    91de:	900a      	str	r0, [sp, #40]	; 0x28
    91e0:	f64b 7220 	movw	r2, #48928	; 0xbf20
    91e4:	f2c0 0201 	movt	r2, #1
    91e8:	a807      	add	r0, sp, #28
    91ea:	a90a      	add	r1, sp, #40	; 0x28
    91ec:	f00c fb5b 	bl	158a6 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>
    91f0:	e7ff      	b.n	91f2 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x74>
    91f2:	a807      	add	r0, sp, #28
    91f4:	f00c fbc0 	bl	15978 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    91f8:	f88d 000b 	strb.w	r0, [sp, #11]
    91fc:	e7ff      	b.n	91fe <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x80>
    91fe:	e7ff      	b.n	9200 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    9200:	f89d 000b 	ldrb.w	r0, [sp, #11]
    9204:	b00e      	add	sp, #56	; 0x38
    9206:	bd80      	pop	{r7, pc}

00009208 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>:
    9208:	b082      	sub	sp, #8
    920a:	2000      	movs	r0, #0
    920c:	9000      	str	r0, [sp, #0]
    920e:	9800      	ldr	r0, [sp, #0]
    9210:	b002      	add	sp, #8
    9212:	4770      	bx	lr

00009214 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>:
    9214:	b580      	push	{r7, lr}
    9216:	b084      	sub	sp, #16
    9218:	9002      	str	r0, [sp, #8]
    921a:	9103      	str	r1, [sp, #12]
    921c:	f7ff ff71 	bl	9102 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>
    9220:	9001      	str	r0, [sp, #4]
    9222:	9100      	str	r1, [sp, #0]
    9224:	e7ff      	b.n	9226 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E+0x12>
    9226:	9801      	ldr	r0, [sp, #4]
    9228:	9900      	ldr	r1, [sp, #0]
    922a:	b004      	add	sp, #16
    922c:	bd80      	pop	{r7, pc}

0000922e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>:
    922e:	b580      	push	{r7, lr}
    9230:	b094      	sub	sp, #80	; 0x50
    9232:	9008      	str	r0, [sp, #32]
    9234:	9109      	str	r1, [sp, #36]	; 0x24
    9236:	6802      	ldr	r2, [r0, #0]
    9238:	2a00      	cmp	r2, #0
    923a:	bf18      	it	ne
    923c:	2201      	movne	r2, #1
    923e:	f04f 0300 	mov.w	r3, #0
    9242:	930b      	str	r3, [sp, #44]	; 0x2c
    9244:	920a      	str	r2, [sp, #40]	; 0x28
    9246:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    924a:	9104      	str	r1, [sp, #16]
    924c:	9003      	str	r0, [sp, #12]
    924e:	9202      	str	r2, [sp, #8]
    9250:	e7ff      	b.n	9252 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x24>
    9252:	9802      	ldr	r0, [sp, #8]
    9254:	9902      	ldr	r1, [sp, #8]
    9256:	910d      	str	r1, [sp, #52]	; 0x34
    9258:	9a04      	ldr	r2, [sp, #16]
    925a:	6813      	ldr	r3, [r2, #0]
    925c:	2b00      	cmp	r3, #0
    925e:	bf18      	it	ne
    9260:	2301      	movne	r3, #1
    9262:	f04f 0c00 	mov.w	ip, #0
    9266:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    926a:	930e      	str	r3, [sp, #56]	; 0x38
    926c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    926e:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    9272:	9001      	str	r0, [sp, #4]
    9274:	9300      	str	r3, [sp, #0]
    9276:	e7ff      	b.n	9278 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x4a>
    9278:	9800      	ldr	r0, [sp, #0]
    927a:	9011      	str	r0, [sp, #68]	; 0x44
    927c:	9901      	ldr	r1, [sp, #4]
    927e:	4281      	cmp	r1, r0
    9280:	d104      	bne.n	928c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x5e>
    9282:	e7ff      	b.n	9284 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x56>
    9284:	2001      	movs	r0, #1
    9286:	f88d 0017 	strb.w	r0, [sp, #23]
    928a:	e003      	b.n	9294 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    928c:	2000      	movs	r0, #0
    928e:	f88d 0017 	strb.w	r0, [sp, #23]
    9292:	e7ff      	b.n	9294 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    9294:	f89d 0017 	ldrb.w	r0, [sp, #23]
    9298:	07c0      	lsls	r0, r0, #31
    929a:	2800      	cmp	r0, #0
    929c:	d104      	bne.n	92a8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x7a>
    929e:	e7ff      	b.n	92a0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x72>
    92a0:	2000      	movs	r0, #0
    92a2:	f88d 0016 	strb.w	r0, [sp, #22]
    92a6:	e01c      	b.n	92e2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    92a8:	9803      	ldr	r0, [sp, #12]
    92aa:	9006      	str	r0, [sp, #24]
    92ac:	9904      	ldr	r1, [sp, #16]
    92ae:	9107      	str	r1, [sp, #28]
    92b0:	9a06      	ldr	r2, [sp, #24]
    92b2:	6812      	ldr	r2, [r2, #0]
    92b4:	2a00      	cmp	r2, #0
    92b6:	d104      	bne.n	92c2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x94>
    92b8:	e7ff      	b.n	92ba <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    92ba:	2001      	movs	r0, #1
    92bc:	f88d 0016 	strb.w	r0, [sp, #22]
    92c0:	e00e      	b.n	92e0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    92c2:	9807      	ldr	r0, [sp, #28]
    92c4:	6800      	ldr	r0, [r0, #0]
    92c6:	2800      	cmp	r0, #0
    92c8:	d0f7      	beq.n	92ba <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    92ca:	e7ff      	b.n	92cc <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x9e>
    92cc:	9806      	ldr	r0, [sp, #24]
    92ce:	9012      	str	r0, [sp, #72]	; 0x48
    92d0:	9907      	ldr	r1, [sp, #28]
    92d2:	9113      	str	r1, [sp, #76]	; 0x4c
    92d4:	f009 f9c5 	bl	12662 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>
    92d8:	f88d 0016 	strb.w	r0, [sp, #22]
    92dc:	e7ff      	b.n	92de <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb0>
    92de:	e7ff      	b.n	92e0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    92e0:	e7ff      	b.n	92e2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    92e2:	f89d 0016 	ldrb.w	r0, [sp, #22]
    92e6:	b014      	add	sp, #80	; 0x50
    92e8:	bd80      	pop	{r7, pc}

000092ea <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E>:
    92ea:	b580      	push	{r7, lr}
    92ec:	b084      	sub	sp, #16
    92ee:	9002      	str	r0, [sp, #8]
    92f0:	9103      	str	r1, [sp, #12]
    92f2:	6800      	ldr	r0, [r0, #0]
    92f4:	f009 f947 	bl	12586 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>
    92f8:	9001      	str	r0, [sp, #4]
    92fa:	e7ff      	b.n	92fc <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E+0x12>
    92fc:	9801      	ldr	r0, [sp, #4]
    92fe:	f000 0001 	and.w	r0, r0, #1
    9302:	b004      	add	sp, #16
    9304:	bd80      	pop	{r7, pc}

00009306 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>:
    9306:	b580      	push	{r7, lr}
    9308:	b084      	sub	sp, #16
    930a:	9002      	str	r0, [sp, #8]
    930c:	9103      	str	r1, [sp, #12]
    930e:	6800      	ldr	r0, [r0, #0]
    9310:	f009 f902 	bl	12518 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>
    9314:	9001      	str	r0, [sp, #4]
    9316:	e7ff      	b.n	9318 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E+0x12>
    9318:	9801      	ldr	r0, [sp, #4]
    931a:	f000 0001 	and.w	r0, r0, #1
    931e:	b004      	add	sp, #16
    9320:	bd80      	pop	{r7, pc}

00009322 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E>:
    9322:	b580      	push	{r7, lr}
    9324:	b084      	sub	sp, #16
    9326:	9002      	str	r0, [sp, #8]
    9328:	9103      	str	r1, [sp, #12]
    932a:	6800      	ldr	r0, [r0, #0]
    932c:	f7ff ffeb 	bl	9306 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>
    9330:	9001      	str	r0, [sp, #4]
    9332:	e7ff      	b.n	9334 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E+0x12>
    9334:	9801      	ldr	r0, [sp, #4]
    9336:	f000 0001 	and.w	r0, r0, #1
    933a:	b004      	add	sp, #16
    933c:	bd80      	pop	{r7, pc}

0000933e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE>:
    933e:	b580      	push	{r7, lr}
    9340:	b084      	sub	sp, #16
    9342:	9002      	str	r0, [sp, #8]
    9344:	9103      	str	r1, [sp, #12]
    9346:	6800      	ldr	r0, [r0, #0]
    9348:	f009 f954 	bl	125f4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>
    934c:	9001      	str	r0, [sp, #4]
    934e:	e7ff      	b.n	9350 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE+0x12>
    9350:	9801      	ldr	r0, [sp, #4]
    9352:	f000 0001 	and.w	r0, r0, #1
    9356:	b004      	add	sp, #16
    9358:	bd80      	pop	{r7, pc}

0000935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>:
    935a:	b089      	sub	sp, #36	; 0x24
    935c:	9005      	str	r0, [sp, #20]
    935e:	9106      	str	r1, [sp, #24]
    9360:	9107      	str	r1, [sp, #28]
    9362:	9907      	ldr	r1, [sp, #28]
    9364:	9002      	str	r0, [sp, #8]
    9366:	9101      	str	r1, [sp, #4]
    9368:	e7ff      	b.n	936a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x10>
    936a:	9802      	ldr	r0, [sp, #8]
    936c:	9008      	str	r0, [sp, #32]
    936e:	9908      	ldr	r1, [sp, #32]
    9370:	9100      	str	r1, [sp, #0]
    9372:	e7ff      	b.n	9374 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x1a>
    9374:	9800      	ldr	r0, [sp, #0]
    9376:	9003      	str	r0, [sp, #12]
    9378:	9901      	ldr	r1, [sp, #4]
    937a:	9104      	str	r1, [sp, #16]
    937c:	9803      	ldr	r0, [sp, #12]
    937e:	9904      	ldr	r1, [sp, #16]
    9380:	b009      	add	sp, #36	; 0x24
    9382:	4770      	bx	lr

00009384 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>:
    9384:	b089      	sub	sp, #36	; 0x24
    9386:	9005      	str	r0, [sp, #20]
    9388:	9106      	str	r1, [sp, #24]
    938a:	9107      	str	r1, [sp, #28]
    938c:	9907      	ldr	r1, [sp, #28]
    938e:	9002      	str	r0, [sp, #8]
    9390:	9101      	str	r1, [sp, #4]
    9392:	e7ff      	b.n	9394 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x10>
    9394:	9802      	ldr	r0, [sp, #8]
    9396:	9008      	str	r0, [sp, #32]
    9398:	9908      	ldr	r1, [sp, #32]
    939a:	9100      	str	r1, [sp, #0]
    939c:	e7ff      	b.n	939e <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x1a>
    939e:	9800      	ldr	r0, [sp, #0]
    93a0:	9003      	str	r0, [sp, #12]
    93a2:	9901      	ldr	r1, [sp, #4]
    93a4:	9104      	str	r1, [sp, #16]
    93a6:	9803      	ldr	r0, [sp, #12]
    93a8:	9904      	ldr	r1, [sp, #16]
    93aa:	b009      	add	sp, #36	; 0x24
    93ac:	4770      	bx	lr

000093ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>:
    93ae:	b089      	sub	sp, #36	; 0x24
    93b0:	9005      	str	r0, [sp, #20]
    93b2:	9106      	str	r1, [sp, #24]
    93b4:	9107      	str	r1, [sp, #28]
    93b6:	9907      	ldr	r1, [sp, #28]
    93b8:	9002      	str	r0, [sp, #8]
    93ba:	9101      	str	r1, [sp, #4]
    93bc:	e7ff      	b.n	93be <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x10>
    93be:	9802      	ldr	r0, [sp, #8]
    93c0:	9008      	str	r0, [sp, #32]
    93c2:	9908      	ldr	r1, [sp, #32]
    93c4:	9100      	str	r1, [sp, #0]
    93c6:	e7ff      	b.n	93c8 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x1a>
    93c8:	9800      	ldr	r0, [sp, #0]
    93ca:	9003      	str	r0, [sp, #12]
    93cc:	9901      	ldr	r1, [sp, #4]
    93ce:	9104      	str	r1, [sp, #16]
    93d0:	9803      	ldr	r0, [sp, #12]
    93d2:	9904      	ldr	r1, [sp, #16]
    93d4:	b009      	add	sp, #36	; 0x24
    93d6:	4770      	bx	lr

000093d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>:
    93d8:	b089      	sub	sp, #36	; 0x24
    93da:	9005      	str	r0, [sp, #20]
    93dc:	9106      	str	r1, [sp, #24]
    93de:	9107      	str	r1, [sp, #28]
    93e0:	9907      	ldr	r1, [sp, #28]
    93e2:	9002      	str	r0, [sp, #8]
    93e4:	9101      	str	r1, [sp, #4]
    93e6:	e7ff      	b.n	93e8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x10>
    93e8:	9802      	ldr	r0, [sp, #8]
    93ea:	9008      	str	r0, [sp, #32]
    93ec:	9908      	ldr	r1, [sp, #32]
    93ee:	9100      	str	r1, [sp, #0]
    93f0:	e7ff      	b.n	93f2 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x1a>
    93f2:	9800      	ldr	r0, [sp, #0]
    93f4:	9003      	str	r0, [sp, #12]
    93f6:	9901      	ldr	r1, [sp, #4]
    93f8:	9104      	str	r1, [sp, #16]
    93fa:	9803      	ldr	r0, [sp, #12]
    93fc:	9904      	ldr	r1, [sp, #16]
    93fe:	b009      	add	sp, #36	; 0x24
    9400:	4770      	bx	lr

00009402 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>:
    9402:	b580      	push	{r7, lr}
    9404:	b088      	sub	sp, #32
    9406:	9004      	str	r0, [sp, #16]
    9408:	9105      	str	r1, [sp, #20]
    940a:	f000 f819 	bl	9440 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>
    940e:	9001      	str	r0, [sp, #4]
    9410:	9100      	str	r1, [sp, #0]
    9412:	e7ff      	b.n	9414 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x12>
    9414:	9801      	ldr	r0, [sp, #4]
    9416:	9006      	str	r0, [sp, #24]
    9418:	9900      	ldr	r1, [sp, #0]
    941a:	f001 0201 	and.w	r2, r1, #1
    941e:	f88d 201f 	strb.w	r2, [sp, #31]
    9422:	2a00      	cmp	r2, #0
    9424:	d105      	bne.n	9432 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x30>
    9426:	e7ff      	b.n	9428 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x26>
    9428:	9801      	ldr	r0, [sp, #4]
    942a:	9003      	str	r0, [sp, #12]
    942c:	2101      	movs	r1, #1
    942e:	9102      	str	r1, [sp, #8]
    9430:	e002      	b.n	9438 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    9432:	2000      	movs	r0, #0
    9434:	9002      	str	r0, [sp, #8]
    9436:	e7ff      	b.n	9438 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    9438:	9802      	ldr	r0, [sp, #8]
    943a:	9903      	ldr	r1, [sp, #12]
    943c:	b008      	add	sp, #32
    943e:	bd80      	pop	{r7, pc}

00009440 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>:
    9440:	b08a      	sub	sp, #40	; 0x28
    9442:	9004      	str	r0, [sp, #16]
    9444:	9105      	str	r1, [sp, #20]
    9446:	1a40      	subs	r0, r0, r1
    9448:	f04f 0100 	mov.w	r1, #0
    944c:	f141 0100 	adc.w	r1, r1, #0
    9450:	f1c1 0101 	rsb	r1, r1, #1
    9454:	9006      	str	r0, [sp, #24]
    9456:	f88d 101c 	strb.w	r1, [sp, #28]
    945a:	9806      	ldr	r0, [sp, #24]
    945c:	f89d 101c 	ldrb.w	r1, [sp, #28]
    9460:	9001      	str	r0, [sp, #4]
    9462:	9100      	str	r1, [sp, #0]
    9464:	e7ff      	b.n	9466 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E+0x26>
    9466:	9801      	ldr	r0, [sp, #4]
    9468:	9008      	str	r0, [sp, #32]
    946a:	9900      	ldr	r1, [sp, #0]
    946c:	f001 0201 	and.w	r2, r1, #1
    9470:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    9474:	9002      	str	r0, [sp, #8]
    9476:	f88d 200c 	strb.w	r2, [sp, #12]
    947a:	9802      	ldr	r0, [sp, #8]
    947c:	f89d 100c 	ldrb.w	r1, [sp, #12]
    9480:	b00a      	add	sp, #40	; 0x28
    9482:	4770      	bx	lr

00009484 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>:
    baudrate:   8000,  //  In kHZ. Use SPI at 8MHz (the fastest clock available on the nRF52832) because otherwise refreshing will be super slow.
    word_size:  hal::HAL_SPI_WORD_SIZE_8BIT as u8,
};

/// Initialise the display controller
pub fn start_display() -> MynewtResult<()> {
    9484:	b5b0      	push	{r4, r5, r7, lr}
    9486:	b0b2      	sub	sp, #200	; 0xc8
    //  Create SPI port and GPIO pins
    let mut spi_port = mynewt::SPI::new();
    9488:	f00a fc85 	bl	13d96 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>
    948c:	9115      	str	r1, [sp, #84]	; 0x54
    948e:	9014      	str	r0, [sp, #80]	; 0x50
    9490:	e7ff      	b.n	9492 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe>
    let mut dc_gpio =  mynewt::GPIO::new();
    9492:	f00a fe3e 	bl	14112 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    9496:	9016      	str	r0, [sp, #88]	; 0x58
    9498:	e7ff      	b.n	949a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16>
    let mut rst_gpio = mynewt::GPIO::new();
    949a:	f00a fe3a 	bl	14112 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    949e:	9017      	str	r0, [sp, #92]	; 0x5c
    94a0:	e7ff      	b.n	94a2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e>

    //  Init SPI port and GPIO pins
    spi_port.init(
    94a2:	f240 03e8 	movw	r3, #232	; 0xe8
    94a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94aa:	a814      	add	r0, sp, #80	; 0x50
    94ac:	2100      	movs	r1, #0
    94ae:	2219      	movs	r2, #25
    94b0:	f00a fc79 	bl	13da6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>
    94b4:	9012      	str	r0, [sp, #72]	; 0x48
    94b6:	e7ff      	b.n	94b8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x34>
    94b8:	9812      	ldr	r0, [sp, #72]	; 0x48
    94ba:	f7ff fb5d 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    94be:	9018      	str	r0, [sp, #96]	; 0x60
    94c0:	e7ff      	b.n	94c2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x3e>
        DISPLAY_SPI, //  Mynewt SPI port 0
        DISPLAY_CS,  //  LCD_CS (P0.25): Chip select
        unsafe { &mut SPI_SETTINGS }
    ) ? ;
    94c2:	9818      	ldr	r0, [sp, #96]	; 0x60
    94c4:	1e41      	subs	r1, r0, #1
    94c6:	bf18      	it	ne
    94c8:	2101      	movne	r1, #1
    94ca:	2801      	cmp	r0, #1
    94cc:	d001      	beq.n	94d2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4e>
    94ce:	e7ff      	b.n	94d0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4c>
    94d0:	e006      	b.n	94e0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x5c>
    94d2:	a816      	add	r0, sp, #88	; 0x58
    94d4:	2112      	movs	r1, #18
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    94d6:	f00a fe1e 	bl	14116 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    94da:	9011      	str	r0, [sp, #68]	; 0x44
    94dc:	e010      	b.n	9500 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7c>
    spi_port.init(
    94de:	defe      	udf	#254	; 0xfe
    ) ? ;
    94e0:	9818      	ldr	r0, [sp, #96]	; 0x60
    94e2:	902d      	str	r0, [sp, #180]	; 0xb4
    94e4:	f009 f814 	bl	12510 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    94e8:	9010      	str	r0, [sp, #64]	; 0x40
    94ea:	e002      	b.n	94f2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x6e>
    unsafe {
        DISPLAY.init(&mut delay) ? ;
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    }
    Ok(())
}
    94ec:	9813      	ldr	r0, [sp, #76]	; 0x4c
    94ee:	b032      	add	sp, #200	; 0xc8
    94f0:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;
    94f2:	9810      	ldr	r0, [sp, #64]	; 0x40
    94f4:	f7ff fb34 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    94f8:	9013      	str	r0, [sp, #76]	; 0x4c
    94fa:	e7ff      	b.n	94fc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x78>
    94fc:	e7ff      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    94fe:	e7f5      	b.n	94ec <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    9500:	9811      	ldr	r0, [sp, #68]	; 0x44
    9502:	f7ff fb39 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9506:	9019      	str	r0, [sp, #100]	; 0x64
    9508:	e7ff      	b.n	950a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x86>
    950a:	9819      	ldr	r0, [sp, #100]	; 0x64
    950c:	1e41      	subs	r1, r0, #1
    950e:	bf18      	it	ne
    9510:	2101      	movne	r1, #1
    9512:	2801      	cmp	r0, #1
    9514:	d001      	beq.n	951a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x96>
    9516:	e7ff      	b.n	9518 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x94>
    9518:	e006      	b.n	9528 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xa4>
    951a:	a817      	add	r0, sp, #92	; 0x5c
    951c:	211a      	movs	r1, #26
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    951e:	f00a fdfa 	bl	14116 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    9522:	900f      	str	r0, [sp, #60]	; 0x3c
    9524:	e00c      	b.n	9540 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xbc>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    9526:	defe      	udf	#254	; 0xfe
    9528:	9819      	ldr	r0, [sp, #100]	; 0x64
    952a:	902e      	str	r0, [sp, #184]	; 0xb8
    952c:	f008 fff0 	bl	12510 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9530:	900e      	str	r0, [sp, #56]	; 0x38
    9532:	e7ff      	b.n	9534 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xb0>
    9534:	980e      	ldr	r0, [sp, #56]	; 0x38
    9536:	f7ff fb13 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    953a:	9013      	str	r0, [sp, #76]	; 0x4c
    953c:	e7ff      	b.n	953e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xba>
    953e:	e7de      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    9540:	980f      	ldr	r0, [sp, #60]	; 0x3c
    9542:	f7ff fb19 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9546:	901a      	str	r0, [sp, #104]	; 0x68
    9548:	e7ff      	b.n	954a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xc6>
    954a:	981a      	ldr	r0, [sp, #104]	; 0x68
    954c:	1e41      	subs	r1, r0, #1
    954e:	bf18      	it	ne
    9550:	2101      	movne	r1, #1
    9552:	2801      	cmp	r0, #1
    9554:	d001      	beq.n	955a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd6>
    9556:	e7ff      	b.n	9558 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd4>
    9558:	e004      	b.n	9564 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe0>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    955a:	f00a fdda 	bl	14112 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    955e:	900d      	str	r0, [sp, #52]	; 0x34
    9560:	e00c      	b.n	957c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf8>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    9562:	defe      	udf	#254	; 0xfe
    9564:	981a      	ldr	r0, [sp, #104]	; 0x68
    9566:	902f      	str	r0, [sp, #188]	; 0xbc
    9568:	f008 ffd2 	bl	12510 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    956c:	900c      	str	r0, [sp, #48]	; 0x30
    956e:	e7ff      	b.n	9570 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xec>
    9570:	980c      	ldr	r0, [sp, #48]	; 0x30
    9572:	f7ff faf5 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9576:	9013      	str	r0, [sp, #76]	; 0x4c
    9578:	e7ff      	b.n	957a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf6>
    957a:	e7c0      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    957c:	f240 1060 	movw	r0, #352	; 0x160
    9580:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9584:	990d      	ldr	r1, [sp, #52]	; 0x34
    9586:	6001      	str	r1, [r0, #0]
    9588:	2117      	movs	r1, #23
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    958a:	f00a fdc4 	bl	14116 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    958e:	900b      	str	r0, [sp, #44]	; 0x2c
    9590:	e7ff      	b.n	9592 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x10e>
    9592:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9594:	f7ff faf0 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9598:	901b      	str	r0, [sp, #108]	; 0x6c
    959a:	e7ff      	b.n	959c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x118>
    959c:	981b      	ldr	r0, [sp, #108]	; 0x6c
    959e:	1e41      	subs	r1, r0, #1
    95a0:	bf18      	it	ne
    95a2:	2101      	movne	r1, #1
    95a4:	2801      	cmp	r0, #1
    95a6:	d001      	beq.n	95ac <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x128>
    95a8:	e7ff      	b.n	95aa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x126>
    95aa:	e008      	b.n	95be <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x13a>
        BACKLIGHT_HIGH.set_low() ? ;    
    95ac:	f240 1060 	movw	r0, #352	; 0x160
    95b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    95b4:	f00a fe48 	bl	14248 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    95b8:	900a      	str	r0, [sp, #40]	; 0x28
    95ba:	e00d      	b.n	95d8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x154>
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    95bc:	defe      	udf	#254	; 0xfe
    95be:	981b      	ldr	r0, [sp, #108]	; 0x6c
    95c0:	9030      	str	r0, [sp, #192]	; 0xc0
    95c2:	f008 ffa5 	bl	12510 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    95c6:	9009      	str	r0, [sp, #36]	; 0x24
    95c8:	e7ff      	b.n	95ca <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x146>
    95ca:	9809      	ldr	r0, [sp, #36]	; 0x24
    95cc:	f7ff fac8 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    95d0:	9013      	str	r0, [sp, #76]	; 0x4c
    95d2:	e7ff      	b.n	95d4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x150>
    95d4:	e7ff      	b.n	95d6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    95d6:	e792      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH.set_low() ? ;    
    95d8:	980a      	ldr	r0, [sp, #40]	; 0x28
    95da:	f7ff facd 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    95de:	901c      	str	r0, [sp, #112]	; 0x70
    95e0:	e7ff      	b.n	95e2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x15e>
    95e2:	981c      	ldr	r0, [sp, #112]	; 0x70
    95e4:	1e41      	subs	r1, r0, #1
    95e6:	bf18      	it	ne
    95e8:	2101      	movne	r1, #1
    95ea:	2801      	cmp	r0, #1
    95ec:	d001      	beq.n	95f2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16e>
    95ee:	e7ff      	b.n	95f0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16c>
    95f0:	e011      	b.n	9616 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x192>
        spi_port,    //  SPI Port
    95f2:	9914      	ldr	r1, [sp, #80]	; 0x50
    95f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
        dc_gpio,     //  GPIO Pin for DC
    95f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
        rst_gpio,    //  GPIO Pin for RST
    95f8:	9817      	ldr	r0, [sp, #92]	; 0x5c
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    95fa:	46ec      	mov	ip, sp
    95fc:	f04f 0e01 	mov.w	lr, #1
    9600:	f8cc e008 	str.w	lr, [ip, #8]
    9604:	f8cc e004 	str.w	lr, [ip, #4]
    9608:	f8cc 0000 	str.w	r0, [ip]
    960c:	a81d      	add	r0, sp, #116	; 0x74
    960e:	f000 fb4f 	bl	9cb0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>
    9612:	e00c      	b.n	962e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1aa>
        BACKLIGHT_HIGH.set_low() ? ;    
    9614:	defe      	udf	#254	; 0xfe
    9616:	981c      	ldr	r0, [sp, #112]	; 0x70
    9618:	9031      	str	r0, [sp, #196]	; 0xc4
    961a:	f008 ff79 	bl	12510 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    961e:	9008      	str	r0, [sp, #32]
    9620:	e7ff      	b.n	9622 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x19e>
    9622:	9808      	ldr	r0, [sp, #32]
    9624:	f7ff fa9c 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9628:	9013      	str	r0, [sp, #76]	; 0x4c
    962a:	e7ff      	b.n	962c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1a8>
    962c:	e7d3      	b.n	95d6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    962e:	f240 1048 	movw	r0, #328	; 0x148
    9632:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9636:	a91d      	add	r1, sp, #116	; 0x74
    9638:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    963c:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    let mut delay = mynewt::Delay::new();
    9640:	f00a fe18 	bl	14274 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>
    9644:	e7ff      	b.n	9646 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1c2>
        DISPLAY.init(&mut delay) ? ;
    9646:	f240 1048 	movw	r0, #328	; 0x148
    964a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    964e:	a923      	add	r1, sp, #140	; 0x8c
    9650:	f000 fb50 	bl	9cf4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>
    9654:	9007      	str	r0, [sp, #28]
    9656:	e7ff      	b.n	9658 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1d4>
    9658:	9807      	ldr	r0, [sp, #28]
    965a:	f000 0001 	and.w	r0, r0, #1
    965e:	f7ff fa85 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9662:	f88d 008e 	strb.w	r0, [sp, #142]	; 0x8e
    9666:	e7ff      	b.n	9668 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e4>
    9668:	f89d 008e 	ldrb.w	r0, [sp, #142]	; 0x8e
    966c:	07c1      	lsls	r1, r0, #31
    966e:	2900      	cmp	r1, #0
    9670:	d001      	beq.n	9676 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f2>
    9672:	e7ff      	b.n	9674 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f0>
    9674:	e00d      	b.n	9692 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x20e>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    9676:	f64b 7034 	movw	r0, #48948	; 0xbf34
    967a:	f2c0 0001 	movt	r0, #1
    967e:	6801      	ldr	r1, [r0, #0]
    9680:	f240 1048 	movw	r0, #328	; 0x148
    9684:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9688:	f000 f949 	bl	991e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>
    968c:	9006      	str	r0, [sp, #24]
    968e:	e00b      	b.n	96a8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x224>
        DISPLAY.init(&mut delay) ? ;
    9690:	defe      	udf	#254	; 0xfe
    9692:	f7ff f9f8 	bl	8a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    9696:	9005      	str	r0, [sp, #20]
    9698:	e7ff      	b.n	969a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x216>
    969a:	9805      	ldr	r0, [sp, #20]
    969c:	f7ff fa60 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    96a0:	9013      	str	r0, [sp, #76]	; 0x4c
    96a2:	e7ff      	b.n	96a4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x220>
    96a4:	e7ff      	b.n	96a6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>
    96a6:	e72a      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    96a8:	9806      	ldr	r0, [sp, #24]
    96aa:	f000 0001 	and.w	r0, r0, #1
    96ae:	f7ff fa5d 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    96b2:	f88d 008f 	strb.w	r0, [sp, #143]	; 0x8f
    96b6:	e7ff      	b.n	96b8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x234>
    96b8:	f89d 008f 	ldrb.w	r0, [sp, #143]	; 0x8f
    96bc:	07c1      	lsls	r1, r0, #31
    96be:	2900      	cmp	r1, #0
    96c0:	d001      	beq.n	96c6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x242>
    96c2:	e7ff      	b.n	96c4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x240>
    96c4:	e005      	b.n	96d2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x24e>
    96c6:	2000      	movs	r0, #0
    Ok(())
    96c8:	9013      	str	r0, [sp, #76]	; 0x4c
    96ca:	2001      	movs	r0, #1
    96cc:	9013      	str	r0, [sp, #76]	; 0x4c
}
    96ce:	e70d      	b.n	94ec <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    96d0:	defe      	udf	#254	; 0xfe
    96d2:	f7ff f9d8 	bl	8a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    96d6:	9004      	str	r0, [sp, #16]
    96d8:	e7ff      	b.n	96da <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x256>
    96da:	9804      	ldr	r0, [sp, #16]
    96dc:	f7ff fa40 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    96e0:	9013      	str	r0, [sp, #76]	; 0x4c
    96e2:	e7ff      	b.n	96e4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x260>
    96e4:	e7df      	b.n	96a6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>

000096e6 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>:
    }

    /// Converts the value of `self` to a `u8`. If the value cannot be
    /// represented by a `u8`, then `None` is returned.
    #[inline]
    fn to_u8(&self) -> Option<u8> {
    96e6:	b580      	push	{r7, lr}
    96e8:	b08a      	sub	sp, #40	; 0x28
    96ea:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    96ec:	f001 f8ff 	bl	a8ee <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>
    96f0:	9307      	str	r3, [sp, #28]
    96f2:	9206      	str	r2, [sp, #24]
    96f4:	9105      	str	r1, [sp, #20]
    96f6:	9004      	str	r0, [sp, #16]
    96f8:	e7ff      	b.n	96fa <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x14>
    96fa:	a804      	add	r0, sp, #16
    96fc:	f00a fe32 	bl	14364 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    9700:	9003      	str	r0, [sp, #12]
    9702:	e7ff      	b.n	9704 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x1e>
    9704:	9803      	ldr	r0, [sp, #12]
    9706:	f00a fea3 	bl	14450 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    970a:	9002      	str	r0, [sp, #8]
    970c:	9101      	str	r1, [sp, #4]
    970e:	e7ff      	b.n	9710 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x2a>
    }
    9710:	9802      	ldr	r0, [sp, #8]
    9712:	f000 0001 	and.w	r0, r0, #1
    9716:	9901      	ldr	r1, [sp, #4]
    9718:	b00a      	add	sp, #40	; 0x28
    971a:	bd80      	pop	{r7, pc}

0000971c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>:
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }

    pub fn hard_reset(&mut self) -> Result<(), ()>
    971c:	b580      	push	{r7, lr}
    971e:	b090      	sub	sp, #64	; 0x40
    9720:	900b      	str	r0, [sp, #44]	; 0x2c
    {
        self.rst.set_high().map_err(|_| ())?;
    9722:	f100 010c 	add.w	r1, r0, #12
    9726:	9006      	str	r0, [sp, #24]
    9728:	4608      	mov	r0, r1
    972a:	f00a fd98 	bl	1425e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    972e:	9005      	str	r0, [sp, #20]
    9730:	e7ff      	b.n	9732 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x16>
    9732:	9805      	ldr	r0, [sp, #20]
    9734:	f00a ffbf 	bl	146b6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>
    9738:	9004      	str	r0, [sp, #16]
    973a:	e7ff      	b.n	973c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x20>
    973c:	9804      	ldr	r0, [sp, #16]
    973e:	f000 0001 	and.w	r0, r0, #1
    9742:	f7ff fa13 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9746:	f88d 001f 	strb.w	r0, [sp, #31]
    974a:	e7ff      	b.n	974c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x30>
    974c:	f89d 001f 	ldrb.w	r0, [sp, #31]
    9750:	07c1      	lsls	r1, r0, #31
    9752:	2900      	cmp	r1, #0
    9754:	d001      	beq.n	975a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3e>
    9756:	e7ff      	b.n	9758 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3c>
    9758:	e006      	b.n	9768 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x4c>
        self.rst.set_low().map_err(|_| ())?;
    975a:	9806      	ldr	r0, [sp, #24]
    975c:	300c      	adds	r0, #12
    975e:	f00a fd73 	bl	14248 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    9762:	9003      	str	r0, [sp, #12]
    9764:	e00d      	b.n	9782 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x66>
        self.rst.set_high().map_err(|_| ())?;
    9766:	defe      	udf	#254	; 0xfe
    9768:	f008 fa9e 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    976c:	e003      	b.n	9776 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x5a>
        self.rst.set_high().map_err(|_| ())
    }
    976e:	f89d 001e 	ldrb.w	r0, [sp, #30]
    9772:	b010      	add	sp, #64	; 0x40
    9774:	bd80      	pop	{r7, pc}
        self.rst.set_high().map_err(|_| ())?;
    9776:	f00a fff3 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    977a:	f88d 001e 	strb.w	r0, [sp, #30]
    977e:	e7ff      	b.n	9780 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x64>
    9780:	e7f5      	b.n	976e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_low().map_err(|_| ())?;
    9782:	9803      	ldr	r0, [sp, #12]
    9784:	f00a ff42 	bl	1460c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>
    9788:	9002      	str	r0, [sp, #8]
    978a:	e7ff      	b.n	978c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x70>
    978c:	9802      	ldr	r0, [sp, #8]
    978e:	f000 0001 	and.w	r0, r0, #1
    9792:	f7ff f9eb 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9796:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    979a:	e7ff      	b.n	979c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x80>
    979c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    97a0:	07c1      	lsls	r1, r0, #31
    97a2:	2900      	cmp	r1, #0
    97a4:	d001      	beq.n	97aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8e>
    97a6:	e7ff      	b.n	97a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8c>
    97a8:	e006      	b.n	97b8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x9c>
        self.rst.set_high().map_err(|_| ())
    97aa:	9806      	ldr	r0, [sp, #24]
    97ac:	300c      	adds	r0, #12
    97ae:	f00a fd56 	bl	1425e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    97b2:	9001      	str	r0, [sp, #4]
    97b4:	e009      	b.n	97ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xae>
        self.rst.set_low().map_err(|_| ())?;
    97b6:	defe      	udf	#254	; 0xfe
    97b8:	f008 fa76 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    97bc:	e7ff      	b.n	97be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xa2>
    97be:	f00a ffcf 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    97c2:	f88d 001e 	strb.w	r0, [sp, #30]
    97c6:	e7ff      	b.n	97c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xac>
    97c8:	e7d1      	b.n	976e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_high().map_err(|_| ())
    97ca:	9801      	ldr	r0, [sp, #4]
    97cc:	f00a fec9 	bl	14562 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>
    97d0:	f88d 001e 	strb.w	r0, [sp, #30]
    97d4:	e7ff      	b.n	97d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xba>
    }
    97d6:	e7ca      	b.n	976e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>

000097d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>:
        self.rst.set_low().map_err(|_| ())?;
    97d8:	b082      	sub	sp, #8
    97da:	9001      	str	r0, [sp, #4]
    97dc:	e7ff      	b.n	97de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE+0x6>
    97de:	b002      	add	sp, #8
    97e0:	4770      	bx	lr

000097e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>:
        self.rst.set_high().map_err(|_| ())?;
    97e2:	b082      	sub	sp, #8
    97e4:	9001      	str	r0, [sp, #4]
    97e6:	e7ff      	b.n	97e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE+0x6>
    97e8:	b002      	add	sp, #8
    97ea:	4770      	bx	lr

000097ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>:
        self.rst.set_high().map_err(|_| ())
    97ec:	b082      	sub	sp, #8
    97ee:	9001      	str	r0, [sp, #4]
    97f0:	e7ff      	b.n	97f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE+0x6>
    97f2:	b002      	add	sp, #8
    97f4:	4770      	bx	lr

000097f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>:
        }
        Ok(())
    }

    #[cfg(feature = "noblock_spi")]  //  If non-blocking SPI is enabled...
    fn write_data(&mut self, data: &[u8]) -> Result<(), ()> {
    97f6:	b580      	push	{r7, lr}
    97f8:	b084      	sub	sp, #16
    97fa:	9001      	str	r0, [sp, #4]
    97fc:	9102      	str	r1, [sp, #8]
    97fe:	9203      	str	r2, [sp, #12]
        //  Write the data bytes,
        mynewt::spi::spi_noblock_write_data(
    9800:	4608      	mov	r0, r1
    9802:	4611      	mov	r1, r2
    9804:	f009 fcde 	bl	131c4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    9808:	9000      	str	r0, [sp, #0]
    980a:	e7ff      	b.n	980c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x16>
    980c:	f64b 7194 	movw	r1, #49044	; 0xbf94
    9810:	f2c0 0101 	movt	r1, #1
    9814:	f64b 73a4 	movw	r3, #49060	; 0xbfa4
    9818:	f2c0 0301 	movt	r3, #1
    981c:	220d      	movs	r2, #13
    981e:	9800      	ldr	r0, [sp, #0]
    9820:	f7ff f96b 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9824:	e7ff      	b.n	9826 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x30>
    9826:	2000      	movs	r0, #0
            data
        ).expect("spi data fail");
        Ok(())
    }
    9828:	b004      	add	sp, #16
    982a:	bd80      	pop	{r7, pc}

0000982c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>:
        self.dc.set_high().map_err(|_| ())?;
        self.spi.write(data).map_err(|_| ())
    }

    /// Writes a data word to the display.
    fn write_word(&mut self, value: u16) -> Result<(), ()> {
    982c:	b580      	push	{r7, lr}
    982e:	b088      	sub	sp, #32
    9830:	460a      	mov	r2, r1
    9832:	9006      	str	r0, [sp, #24]
    9834:	f8ad 101e 	strh.w	r1, [sp, #30]
        let bytes: [u8; 2] = unsafe { transmute(value.to_be()) };
    9838:	9004      	str	r0, [sp, #16]
    983a:	4608      	mov	r0, r1
    983c:	9203      	str	r2, [sp, #12]
    983e:	f000 fe08 	bl	a452 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>
    9842:	9002      	str	r0, [sp, #8]
    9844:	e7ff      	b.n	9846 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x1a>
    9846:	9802      	ldr	r0, [sp, #8]
    9848:	f8ad 0016 	strh.w	r0, [sp, #22]
    984c:	e7ff      	b.n	984e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x22>
    984e:	f10d 0116 	add.w	r1, sp, #22
    9852:	2202      	movs	r2, #2
        self.write_data(&bytes)
    9854:	9804      	ldr	r0, [sp, #16]
    9856:	f7ff ffce 	bl	97f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>
    985a:	9001      	str	r0, [sp, #4]
    985c:	e7ff      	b.n	985e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x32>
    }
    985e:	9801      	ldr	r0, [sp, #4]
    9860:	f000 0001 	and.w	r0, r0, #1
    9864:	b008      	add	sp, #32
    9866:	bd80      	pop	{r7, pc}

00009868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>:
    fn write_command(&mut self, command: Instruction, params: Option<&[u8]>) -> Result<(), ()> {
    9868:	b580      	push	{r7, lr}
    986a:	b08e      	sub	sp, #56	; 0x38
    986c:	468c      	mov	ip, r1
    986e:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
    9872:	920b      	str	r2, [sp, #44]	; 0x2c
    9874:	930c      	str	r3, [sp, #48]	; 0x30
    9876:	900d      	str	r0, [sp, #52]	; 0x34
    9878:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
            command.to_u8().unwrap()
    987c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    9880:	f000 fdbd 	bl	a3fe <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>
    9884:	9008      	str	r0, [sp, #32]
    9886:	9107      	str	r1, [sp, #28]
    9888:	e7ff      	b.n	988a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x22>
    988a:	9808      	ldr	r0, [sp, #32]
    988c:	f000 0001 	and.w	r0, r0, #1
    9890:	f64b 72b4 	movw	r2, #49076	; 0xbfb4
    9894:	f2c0 0201 	movt	r2, #1
    9898:	9907      	ldr	r1, [sp, #28]
    989a:	f00a fd78 	bl	1438e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    989e:	9006      	str	r0, [sp, #24]
    98a0:	e7ff      	b.n	98a2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x3a>
        mynewt::spi::spi_noblock_write_command(
    98a2:	9806      	ldr	r0, [sp, #24]
    98a4:	f009 fc46 	bl	13134 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>
    98a8:	9005      	str	r0, [sp, #20]
    98aa:	e7ff      	b.n	98ac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x44>
    98ac:	f64b 71c4 	movw	r1, #49092	; 0xbfc4
    98b0:	f2c0 0101 	movt	r1, #1
    98b4:	f64b 73d0 	movw	r3, #49104	; 0xbfd0
    98b8:	f2c0 0301 	movt	r3, #1
    98bc:	220c      	movs	r2, #12
    98be:	9805      	ldr	r0, [sp, #20]
    98c0:	f7ff f91b 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    98c4:	e7ff      	b.n	98c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x5e>
    98c6:	a80b      	add	r0, sp, #44	; 0x2c
        if params.is_some() {
    98c8:	f00a fdb0 	bl	1442c <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>
    98cc:	9004      	str	r0, [sp, #16]
    98ce:	e7ff      	b.n	98d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x68>
    98d0:	9804      	ldr	r0, [sp, #16]
    98d2:	07c1      	lsls	r1, r0, #31
    98d4:	2900      	cmp	r1, #0
    98d6:	d01f      	beq.n	9918 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    98d8:	e7ff      	b.n	98da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x72>
                params.unwrap()
    98da:	980b      	ldr	r0, [sp, #44]	; 0x2c
    98dc:	990c      	ldr	r1, [sp, #48]	; 0x30
    98de:	f64b 72e0 	movw	r2, #49120	; 0xbfe0
    98e2:	f2c0 0201 	movt	r2, #1
    98e6:	f00a fd7b 	bl	143e0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>
    98ea:	9003      	str	r0, [sp, #12]
    98ec:	9102      	str	r1, [sp, #8]
    98ee:	e7ff      	b.n	98f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x88>
            mynewt::spi::spi_noblock_write_data(
    98f0:	9803      	ldr	r0, [sp, #12]
    98f2:	9902      	ldr	r1, [sp, #8]
    98f4:	f009 fc66 	bl	131c4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    98f8:	9001      	str	r0, [sp, #4]
    98fa:	e7ff      	b.n	98fc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x94>
    98fc:	f64b 7194 	movw	r1, #49044	; 0xbf94
    9900:	f2c0 0101 	movt	r1, #1
    9904:	f64b 73f0 	movw	r3, #49136	; 0xbff0
    9908:	f2c0 0301 	movt	r3, #1
    990c:	220d      	movs	r2, #13
    990e:	9801      	ldr	r0, [sp, #4]
    9910:	f7ff f8f3 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9914:	e7ff      	b.n	9916 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xae>
        if params.is_some() {
    9916:	e7ff      	b.n	9918 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    9918:	2000      	movs	r0, #0
    }
    991a:	b00e      	add	sp, #56	; 0x38
    991c:	bd80      	pop	{r7, pc}

0000991e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>:

    pub fn set_orientation(&mut self, orientation: &Orientation) -> Result<(), ()> {
    991e:	b580      	push	{r7, lr}
    9920:	b098      	sub	sp, #96	; 0x60
    9922:	9012      	str	r0, [sp, #72]	; 0x48
    9924:	9113      	str	r1, [sp, #76]	; 0x4c
        if self.rgb {
    9926:	7d02      	ldrb	r2, [r0, #20]
    9928:	07d2      	lsls	r2, r2, #31
    992a:	2a00      	cmp	r2, #0
    992c:	910a      	str	r1, [sp, #40]	; 0x28
    992e:	9009      	str	r0, [sp, #36]	; 0x24
    9930:	d109      	bne.n	9946 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x28>
    9932:	e7ff      	b.n	9934 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x16>
    9934:	2036      	movs	r0, #54	; 0x36
            self.write_command(
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
            ))?;
        } else {
            self.write_command(
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9936:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    993a:	980a      	ldr	r0, [sp, #40]	; 0x28
    993c:	f7ff fed3 	bl	96e6 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9940:	9008      	str	r0, [sp, #32]
    9942:	9107      	str	r1, [sp, #28]
    9944:	e044      	b.n	99d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb2>
    9946:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
    9948:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    994c:	980a      	ldr	r0, [sp, #40]	; 0x28
    994e:	f7ff feca 	bl	96e6 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9952:	9006      	str	r0, [sp, #24]
    9954:	9105      	str	r1, [sp, #20]
    9956:	e7ff      	b.n	9958 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x3a>
    9958:	9806      	ldr	r0, [sp, #24]
    995a:	f000 0001 	and.w	r0, r0, #1
    995e:	f24c 0200 	movw	r2, #49152	; 0xc000
    9962:	f2c0 0201 	movt	r2, #1
    9966:	9905      	ldr	r1, [sp, #20]
    9968:	f00a fd11 	bl	1438e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    996c:	9004      	str	r0, [sp, #16]
    996e:	e7ff      	b.n	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x52>
    9970:	9804      	ldr	r0, [sp, #16]
    9972:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9976:	f10d 0139 	add.w	r1, sp, #57	; 0x39
    997a:	910c      	str	r1, [sp, #48]	; 0x30
    997c:	2101      	movs	r1, #1
    997e:	910d      	str	r1, [sp, #52]	; 0x34
            self.write_command(
    9980:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9984:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    9988:	9809      	ldr	r0, [sp, #36]	; 0x24
    998a:	f7ff ff6d 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    998e:	9003      	str	r0, [sp, #12]
    9990:	e7ff      	b.n	9992 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x74>
    9992:	9803      	ldr	r0, [sp, #12]
    9994:	f000 0001 	and.w	r0, r0, #1
    9998:	f7ff f8e8 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    999c:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    99a0:	e7ff      	b.n	99a2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x84>
            ))?;
    99a2:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    99a6:	07c1      	lsls	r1, r0, #31
    99a8:	2900      	cmp	r1, #0
    99aa:	d001      	beq.n	99b0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x92>
    99ac:	e7ff      	b.n	99ae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x90>
    99ae:	e001      	b.n	99b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x96>
        if self.rgb {
    99b0:	e047      	b.n	9a42 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    99b2:	defe      	udf	#254	; 0xfe
            ))?;
    99b4:	f008 f978 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    99b8:	e003      	b.n	99c2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xa4>
            ))?;
        }
        Ok(())
    }
    99ba:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    99be:	b018      	add	sp, #96	; 0x60
    99c0:	bd80      	pop	{r7, pc}
            ))?;
    99c2:	f00a fecd 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    99c6:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    99ca:	e7ff      	b.n	99cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xae>
    99cc:	e7ff      	b.n	99ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    99ce:	e7f4      	b.n	99ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    99d0:	9808      	ldr	r0, [sp, #32]
    99d2:	f000 0001 	and.w	r0, r0, #1
    99d6:	f24c 0210 	movw	r2, #49168	; 0xc010
    99da:	f2c0 0201 	movt	r2, #1
    99de:	9907      	ldr	r1, [sp, #28]
    99e0:	f00a fcd5 	bl	1438e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    99e4:	9002      	str	r0, [sp, #8]
    99e6:	e7ff      	b.n	99e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xca>
    99e8:	9802      	ldr	r0, [sp, #8]
    99ea:	f040 0108 	orr.w	r1, r0, #8
    99ee:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
    99f2:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    99f6:	910f      	str	r1, [sp, #60]	; 0x3c
    99f8:	2101      	movs	r1, #1
    99fa:	9110      	str	r1, [sp, #64]	; 0x40
            self.write_command(
    99fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    99fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9a00:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9a04:	9809      	ldr	r0, [sp, #36]	; 0x24
    9a06:	f7ff ff2f 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9a0a:	9001      	str	r0, [sp, #4]
    9a0c:	e7ff      	b.n	9a0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xf0>
    9a0e:	9801      	ldr	r0, [sp, #4]
    9a10:	f000 0001 	and.w	r0, r0, #1
    9a14:	f7ff f8aa 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9a18:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9a1c:	e7ff      	b.n	9a1e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x100>
            ))?;
    9a1e:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9a22:	07c1      	lsls	r1, r0, #31
    9a24:	2900      	cmp	r1, #0
    9a26:	d001      	beq.n	9a2c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10e>
    9a28:	e7ff      	b.n	9a2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10c>
    9a2a:	e001      	b.n	9a30 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x112>
        if self.rgb {
    9a2c:	e009      	b.n	9a42 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    9a2e:	defe      	udf	#254	; 0xfe
            ))?;
    9a30:	f008 f93a 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9a34:	e7ff      	b.n	9a36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x118>
    9a36:	f00a fe93 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9a3a:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9a3e:	e7ff      	b.n	9a40 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x122>
    9a40:	e7c5      	b.n	99ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9a42:	2000      	movs	r0, #0
        Ok(())
    9a44:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
    9a48:	e7b7      	b.n	99ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>

00009a4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>:
        self.dx = dx;
        self.dy = dy;
    }

    /// Sets the address window for the display.
    fn set_address_window(&mut self, sx: u16, sy: u16, ex: u16, ey: u16) -> Result<(), ()> {
    9a4a:	b5b0      	push	{r4, r5, r7, lr}
    9a4c:	b0a2      	sub	sp, #136	; 0x88
    9a4e:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
    9a52:	469e      	mov	lr, r3
    9a54:	4614      	mov	r4, r2
    9a56:	460d      	mov	r5, r1
    9a58:	9015      	str	r0, [sp, #84]	; 0x54
    9a5a:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
    9a5e:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    9a62:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    9a66:	f8ad c05e 	strh.w	ip, [sp, #94]	; 0x5e
    9a6a:	212a      	movs	r1, #42	; 0x2a
        self.write_command(Instruction::CASET, None)?;
    9a6c:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
    9a70:	2100      	movs	r1, #0
    9a72:	9110      	str	r1, [sp, #64]	; 0x40
    9a74:	910f      	str	r1, [sp, #60]	; 0x3c
    9a76:	910f      	str	r1, [sp, #60]	; 0x3c
    9a78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9a7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9a7c:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9a80:	900d      	str	r0, [sp, #52]	; 0x34
    9a82:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    9a86:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    9a8a:	940a      	str	r4, [sp, #40]	; 0x28
    9a8c:	9509      	str	r5, [sp, #36]	; 0x24
    9a8e:	f7ff feeb 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9a92:	9008      	str	r0, [sp, #32]
    9a94:	e7ff      	b.n	9a96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x4c>
    9a96:	9808      	ldr	r0, [sp, #32]
    9a98:	f000 0001 	and.w	r0, r0, #1
    9a9c:	f7ff f866 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9aa0:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9aa4:	e7ff      	b.n	9aa6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x5c>
    9aa6:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9aaa:	07c1      	lsls	r1, r0, #31
    9aac:	2900      	cmp	r1, #0
    9aae:	d001      	beq.n	9ab4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x6a>
    9ab0:	e7ff      	b.n	9ab2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x68>
    9ab2:	e00d      	b.n	9ad0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x86>
        self.write_word(sx + self.dx)?;
    9ab4:	980d      	ldr	r0, [sp, #52]	; 0x34
    9ab6:	8a01      	ldrh	r1, [r0, #16]
    9ab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9aba:	fa11 f182 	uxtah	r1, r1, r2
    9abe:	b28b      	uxth	r3, r1
    9ac0:	468c      	mov	ip, r1
    9ac2:	428b      	cmp	r3, r1
    9ac4:	f8cd c01c 	str.w	ip, [sp, #28]
    9ac8:	f040 80c2 	bne.w	9c50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x206>
    9acc:	e00d      	b.n	9aea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xa0>
        self.write_command(Instruction::CASET, None)?;
    9ace:	defe      	udf	#254	; 0xfe
    9ad0:	f008 f8ea 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9ad4:	e003      	b.n	9ade <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x94>
        self.write_word(ex + self.dx)?;
        self.write_command(Instruction::RASET, None)?;
        self.write_word(sy + self.dy)?;
        self.write_word(ey + self.dy)
    }
    9ad6:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    9ada:	b022      	add	sp, #136	; 0x88
    9adc:	bdb0      	pop	{r4, r5, r7, pc}
        self.write_command(Instruction::CASET, None)?;
    9ade:	f00a fe3f 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ae2:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9ae6:	e7ff      	b.n	9ae8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x9e>
    9ae8:	e7f5      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9aea:	980d      	ldr	r0, [sp, #52]	; 0x34
    9aec:	9907      	ldr	r1, [sp, #28]
    9aee:	f7ff fe9d 	bl	982c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9af2:	9006      	str	r0, [sp, #24]
    9af4:	e7ff      	b.n	9af6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xac>
    9af6:	9806      	ldr	r0, [sp, #24]
    9af8:	f000 0001 	and.w	r0, r0, #1
    9afc:	f7ff f836 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9b00:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    9b04:	e7ff      	b.n	9b06 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xbc>
    9b06:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9b0a:	07c1      	lsls	r1, r0, #31
    9b0c:	2900      	cmp	r1, #0
    9b0e:	d001      	beq.n	9b14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xca>
    9b10:	e7ff      	b.n	9b12 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xc8>
    9b12:	e00d      	b.n	9b30 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xe6>
        self.write_word(ex + self.dx)?;
    9b14:	980d      	ldr	r0, [sp, #52]	; 0x34
    9b16:	8a01      	ldrh	r1, [r0, #16]
    9b18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9b1a:	fa11 f182 	uxtah	r1, r1, r2
    9b1e:	b28b      	uxth	r3, r1
    9b20:	468c      	mov	ip, r1
    9b22:	428b      	cmp	r3, r1
    9b24:	f8cd c014 	str.w	ip, [sp, #20]
    9b28:	f040 809e 	bne.w	9c68 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x21e>
    9b2c:	e009      	b.n	9b42 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf8>
        self.write_word(sx + self.dx)?;
    9b2e:	defe      	udf	#254	; 0xfe
    9b30:	f008 f8ba 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9b34:	e7ff      	b.n	9b36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xec>
    9b36:	f00a fe13 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9b3a:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9b3e:	e7ff      	b.n	9b40 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf6>
    9b40:	e7c9      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ex + self.dx)?;
    9b42:	980d      	ldr	r0, [sp, #52]	; 0x34
    9b44:	9905      	ldr	r1, [sp, #20]
    9b46:	f7ff fe71 	bl	982c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9b4a:	9004      	str	r0, [sp, #16]
    9b4c:	e7ff      	b.n	9b4e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x104>
    9b4e:	9804      	ldr	r0, [sp, #16]
    9b50:	f000 0001 	and.w	r0, r0, #1
    9b54:	f7ff f80a 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9b58:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    9b5c:	e7ff      	b.n	9b5e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x114>
    9b5e:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    9b62:	07c1      	lsls	r1, r0, #31
    9b64:	2900      	cmp	r1, #0
    9b66:	d001      	beq.n	9b6c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x122>
    9b68:	e7ff      	b.n	9b6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x120>
    9b6a:	e010      	b.n	9b8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x144>
    9b6c:	202b      	movs	r0, #43	; 0x2b
        self.write_command(Instruction::RASET, None)?;
    9b6e:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
    9b72:	2000      	movs	r0, #0
    9b74:	9013      	str	r0, [sp, #76]	; 0x4c
    9b76:	9012      	str	r0, [sp, #72]	; 0x48
    9b78:	9012      	str	r0, [sp, #72]	; 0x48
    9b7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9b7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9b7e:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
    9b82:	980d      	ldr	r0, [sp, #52]	; 0x34
    9b84:	f7ff fe70 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9b88:	9003      	str	r0, [sp, #12]
    9b8a:	e009      	b.n	9ba0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x156>
        self.write_word(ex + self.dx)?;
    9b8c:	defe      	udf	#254	; 0xfe
    9b8e:	f008 f88b 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9b92:	e7ff      	b.n	9b94 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x14a>
    9b94:	f00a fde4 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9b98:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9b9c:	e7ff      	b.n	9b9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x154>
    9b9e:	e79a      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_command(Instruction::RASET, None)?;
    9ba0:	9803      	ldr	r0, [sp, #12]
    9ba2:	f000 0001 	and.w	r0, r0, #1
    9ba6:	f7fe ffe1 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9baa:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    9bae:	e7ff      	b.n	9bb0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x166>
    9bb0:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
    9bb4:	07c1      	lsls	r1, r0, #31
    9bb6:	2900      	cmp	r1, #0
    9bb8:	d001      	beq.n	9bbe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x174>
    9bba:	e7ff      	b.n	9bbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x172>
    9bbc:	e00c      	b.n	9bd8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x18e>
        self.write_word(sy + self.dy)?;
    9bbe:	980d      	ldr	r0, [sp, #52]	; 0x34
    9bc0:	8a41      	ldrh	r1, [r0, #18]
    9bc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9bc4:	fa11 f182 	uxtah	r1, r1, r2
    9bc8:	b28b      	uxth	r3, r1
    9bca:	468c      	mov	ip, r1
    9bcc:	428b      	cmp	r3, r1
    9bce:	f8cd c008 	str.w	ip, [sp, #8]
    9bd2:	d155      	bne.n	9c80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x236>
    9bd4:	e009      	b.n	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1a0>
        self.write_command(Instruction::RASET, None)?;
    9bd6:	defe      	udf	#254	; 0xfe
    9bd8:	f008 f866 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9bdc:	e7ff      	b.n	9bde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x194>
    9bde:	f00a fdbf 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9be2:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9be6:	e7ff      	b.n	9be8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x19e>
    9be8:	e775      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sy + self.dy)?;
    9bea:	980d      	ldr	r0, [sp, #52]	; 0x34
    9bec:	9902      	ldr	r1, [sp, #8]
    9bee:	f7ff fe1d 	bl	982c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9bf2:	9001      	str	r0, [sp, #4]
    9bf4:	e7ff      	b.n	9bf6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ac>
    9bf6:	9801      	ldr	r0, [sp, #4]
    9bf8:	f000 0001 	and.w	r0, r0, #1
    9bfc:	f7fe ffb6 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9c00:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
    9c04:	e7ff      	b.n	9c06 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1bc>
    9c06:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    9c0a:	07c1      	lsls	r1, r0, #31
    9c0c:	2900      	cmp	r1, #0
    9c0e:	d001      	beq.n	9c14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ca>
    9c10:	e7ff      	b.n	9c12 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1c8>
    9c12:	e00c      	b.n	9c2e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1e4>
        self.write_word(ey + self.dy)
    9c14:	980d      	ldr	r0, [sp, #52]	; 0x34
    9c16:	8a41      	ldrh	r1, [r0, #18]
    9c18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9c1a:	fa11 f182 	uxtah	r1, r1, r2
    9c1e:	b28b      	uxth	r3, r1
    9c20:	468c      	mov	ip, r1
    9c22:	428b      	cmp	r3, r1
    9c24:	f8cd c000 	str.w	ip, [sp]
    9c28:	d136      	bne.n	9c98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x24e>
    9c2a:	e009      	b.n	9c40 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f6>
        self.write_word(sy + self.dy)?;
    9c2c:	defe      	udf	#254	; 0xfe
    9c2e:	f008 f83b 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9c32:	e7ff      	b.n	9c34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ea>
    9c34:	f00a fd94 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9c38:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9c3c:	e7ff      	b.n	9c3e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f4>
    9c3e:	e74a      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ey + self.dy)
    9c40:	980d      	ldr	r0, [sp, #52]	; 0x34
    9c42:	9900      	ldr	r1, [sp, #0]
    9c44:	f7ff fdf2 	bl	982c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9c48:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9c4c:	e7ff      	b.n	9c4e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x204>
    }
    9c4e:	e742      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9c50:	f24c 0030 	movw	r0, #49200	; 0xc030
    9c54:	f2c0 0001 	movt	r0, #1
    9c58:	f24c 0220 	movw	r2, #49184	; 0xc020
    9c5c:	f2c0 0201 	movt	r2, #1
    9c60:	211c      	movs	r1, #28
    9c62:	f00b fcc3 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9c66:	defe      	udf	#254	; 0xfe
        self.write_word(ex + self.dx)?;
    9c68:	f24c 0030 	movw	r0, #49200	; 0xc030
    9c6c:	f2c0 0001 	movt	r0, #1
    9c70:	f24c 024c 	movw	r2, #49228	; 0xc04c
    9c74:	f2c0 0201 	movt	r2, #1
    9c78:	211c      	movs	r1, #28
    9c7a:	f00b fcb7 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9c7e:	defe      	udf	#254	; 0xfe
        self.write_word(sy + self.dy)?;
    9c80:	f24c 0030 	movw	r0, #49200	; 0xc030
    9c84:	f2c0 0001 	movt	r0, #1
    9c88:	f24c 025c 	movw	r2, #49244	; 0xc05c
    9c8c:	f2c0 0201 	movt	r2, #1
    9c90:	211c      	movs	r1, #28
    9c92:	f00b fcab 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9c96:	defe      	udf	#254	; 0xfe
        self.write_word(ey + self.dy)
    9c98:	f24c 0030 	movw	r0, #49200	; 0xc030
    9c9c:	f2c0 0001 	movt	r0, #1
    9ca0:	f24c 026c 	movw	r2, #49260	; 0xc06c
    9ca4:	f2c0 0201 	movt	r2, #1
    9ca8:	211c      	movs	r1, #28
    9caa:	f00b fc9f 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9cae:	defe      	udf	#254	; 0xfe

00009cb0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>:
    pub fn new(
    9cb0:	b5b0      	push	{r4, r5, r7, lr}
    9cb2:	b08a      	sub	sp, #40	; 0x28
    9cb4:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    9cb8:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    9cbc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    9cbe:	9106      	str	r1, [sp, #24]
    9cc0:	9207      	str	r2, [sp, #28]
    9cc2:	9308      	str	r3, [sp, #32]
    9cc4:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    9cc8:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
        let display = ST7735 {
    9ccc:	9100      	str	r1, [sp, #0]
    9cce:	9201      	str	r2, [sp, #4]
    9cd0:	9302      	str	r3, [sp, #8]
    9cd2:	9403      	str	r4, [sp, #12]
    9cd4:	f88d e014 	strb.w	lr, [sp, #20]
    9cd8:	f88d c015 	strb.w	ip, [sp, #21]
    9cdc:	2100      	movs	r1, #0
    9cde:	f8ad 1010 	strh.w	r1, [sp, #16]
    9ce2:	f8ad 1012 	strh.w	r1, [sp, #18]
    9ce6:	4669      	mov	r1, sp
        display
    9ce8:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    9cec:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    }
    9cf0:	b00a      	add	sp, #40	; 0x28
    9cf2:	bdb0      	pop	{r4, r5, r7, pc}

00009cf4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>:
    pub fn init<DELAY>(&mut self, delay: &mut DELAY) -> Result<(), ()>
    9cf4:	b580      	push	{r7, lr}
    9cf6:	b0f6      	sub	sp, #472	; 0x1d8
    9cf8:	904e      	str	r0, [sp, #312]	; 0x138
    9cfa:	914f      	str	r1, [sp, #316]	; 0x13c
        mynewt::spi::spi_noblock_init()  //  Init the SPI queue
    9cfc:	9117      	str	r1, [sp, #92]	; 0x5c
    9cfe:	9016      	str	r0, [sp, #88]	; 0x58
    9d00:	f008 fcbe 	bl	12680 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>
    9d04:	9015      	str	r0, [sp, #84]	; 0x54
    9d06:	e7ff      	b.n	9d08 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x14>
    9d08:	f24c 017c 	movw	r1, #49276	; 0xc07c
    9d0c:	f2c0 0101 	movt	r1, #1
    9d10:	f24c 038c 	movw	r3, #49292	; 0xc08c
    9d14:	f2c0 0301 	movt	r3, #1
    9d18:	220d      	movs	r2, #13
    9d1a:	9815      	ldr	r0, [sp, #84]	; 0x54
    9d1c:	f7fe feed 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9d20:	e7ff      	b.n	9d22 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2e>
        self.hard_reset()?;
    9d22:	9816      	ldr	r0, [sp, #88]	; 0x58
    9d24:	f7ff fcfa 	bl	971c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>
    9d28:	9014      	str	r0, [sp, #80]	; 0x50
    9d2a:	e7ff      	b.n	9d2c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38>
    9d2c:	9814      	ldr	r0, [sp, #80]	; 0x50
    9d2e:	f000 0001 	and.w	r0, r0, #1
    9d32:	f7fe ff1b 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9d36:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
    9d3a:	e7ff      	b.n	9d3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48>
    9d3c:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
    9d40:	07c1      	lsls	r1, r0, #31
    9d42:	2900      	cmp	r1, #0
    9d44:	d001      	beq.n	9d4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x56>
    9d46:	e7ff      	b.n	9d48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54>
    9d48:	e010      	b.n	9d6c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x78>
    9d4a:	2001      	movs	r0, #1
        self.write_command(Instruction::SWRESET, None)?;
    9d4c:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
    9d50:	2000      	movs	r0, #0
    9d52:	901a      	str	r0, [sp, #104]	; 0x68
    9d54:	9019      	str	r0, [sp, #100]	; 0x64
    9d56:	9019      	str	r0, [sp, #100]	; 0x64
    9d58:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9d5a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9d5c:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
    9d60:	9816      	ldr	r0, [sp, #88]	; 0x58
    9d62:	f7ff fd81 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9d66:	9013      	str	r0, [sp, #76]	; 0x4c
    9d68:	e00d      	b.n	9d86 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x92>
        self.hard_reset()?;
    9d6a:	defe      	udf	#254	; 0xfe
    9d6c:	f007 ff9c 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9d70:	e003      	b.n	9d7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x86>
    }
    9d72:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    9d76:	b076      	add	sp, #472	; 0x1d8
    9d78:	bd80      	pop	{r7, pc}
        self.hard_reset()?;
    9d7a:	f00a fcf1 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9d7e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9d82:	e7ff      	b.n	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x90>
    9d84:	e7f5      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::SWRESET, None)?;
    9d86:	9813      	ldr	r0, [sp, #76]	; 0x4c
    9d88:	f000 0001 	and.w	r0, r0, #1
    9d8c:	f7fe feee 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9d90:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
    9d94:	e7ff      	b.n	9d96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xa2>
    9d96:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    9d9a:	07c1      	lsls	r1, r0, #31
    9d9c:	2900      	cmp	r1, #0
    9d9e:	d001      	beq.n	9da4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xb0>
    9da0:	e7ff      	b.n	9da2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xae>
    9da2:	e005      	b.n	9db0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xbc>
    9da4:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    9da6:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9da8:	f00a fa65 	bl	14276 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    9dac:	e009      	b.n	9dc2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xce>
        self.write_command(Instruction::SWRESET, None)?;
    9dae:	defe      	udf	#254	; 0xfe
    9db0:	f007 ff7a 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9db4:	e7ff      	b.n	9db6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xc2>
    9db6:	f00a fcd3 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9dba:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9dbe:	e7ff      	b.n	9dc0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xcc>
    9dc0:	e7d7      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    9dc2:	2011      	movs	r0, #17
        self.write_command(Instruction::SLPOUT, None)?;
    9dc4:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
    9dc8:	2000      	movs	r0, #0
    9dca:	901d      	str	r0, [sp, #116]	; 0x74
    9dcc:	901c      	str	r0, [sp, #112]	; 0x70
    9dce:	901c      	str	r0, [sp, #112]	; 0x70
    9dd0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    9dd2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9dd4:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
    9dd8:	9816      	ldr	r0, [sp, #88]	; 0x58
    9dda:	f7ff fd45 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9dde:	9012      	str	r0, [sp, #72]	; 0x48
    9de0:	e7ff      	b.n	9de2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xee>
    9de2:	9812      	ldr	r0, [sp, #72]	; 0x48
    9de4:	f000 0001 	and.w	r0, r0, #1
    9de8:	f7fe fec0 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9dec:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
    9df0:	e7ff      	b.n	9df2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xfe>
    9df2:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
    9df6:	07c1      	lsls	r1, r0, #31
    9df8:	2900      	cmp	r1, #0
    9dfa:	d001      	beq.n	9e00 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10c>
    9dfc:	e7ff      	b.n	9dfe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10a>
    9dfe:	e005      	b.n	9e0c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x118>
    9e00:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    9e02:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9e04:	f00a fa37 	bl	14276 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    9e08:	e009      	b.n	9e1e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x12a>
        self.write_command(Instruction::SLPOUT, None)?;
    9e0a:	defe      	udf	#254	; 0xfe
    9e0c:	f007 ff4c 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9e10:	e7ff      	b.n	9e12 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x11e>
    9e12:	f00a fca5 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9e16:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9e1a:	e7ff      	b.n	9e1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x128>
    9e1c:	e7a9      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    9e1e:	20b1      	movs	r0, #177	; 0xb1
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    9e20:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
    9e24:	f24c 00a0 	movw	r0, #49312	; 0xc0a0
    9e28:	f2c0 0001 	movt	r0, #1
    9e2c:	6800      	ldr	r0, [r0, #0]
    9e2e:	901f      	str	r0, [sp, #124]	; 0x7c
    9e30:	2003      	movs	r0, #3
    9e32:	9020      	str	r0, [sp, #128]	; 0x80
    9e34:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    9e36:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9e38:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
    9e3c:	9816      	ldr	r0, [sp, #88]	; 0x58
    9e3e:	f7ff fd13 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9e42:	9011      	str	r0, [sp, #68]	; 0x44
    9e44:	e7ff      	b.n	9e46 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x152>
    9e46:	9811      	ldr	r0, [sp, #68]	; 0x44
    9e48:	f000 0001 	and.w	r0, r0, #1
    9e4c:	f7fe fe8e 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9e50:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
    9e54:	e7ff      	b.n	9e56 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x162>
    9e56:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
    9e5a:	07c1      	lsls	r1, r0, #31
    9e5c:	2900      	cmp	r1, #0
    9e5e:	d001      	beq.n	9e64 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x170>
    9e60:	e7ff      	b.n	9e62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x16e>
    9e62:	e014      	b.n	9e8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x19a>
    9e64:	20b2      	movs	r0, #178	; 0xb2
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    9e66:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
    9e6a:	f24c 00a0 	movw	r0, #49312	; 0xc0a0
    9e6e:	f2c0 0001 	movt	r0, #1
    9e72:	6800      	ldr	r0, [r0, #0]
    9e74:	9022      	str	r0, [sp, #136]	; 0x88
    9e76:	2003      	movs	r0, #3
    9e78:	9023      	str	r0, [sp, #140]	; 0x8c
    9e7a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9e7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9e7e:	f89d 1087 	ldrb.w	r1, [sp, #135]	; 0x87
    9e82:	9816      	ldr	r0, [sp, #88]	; 0x58
    9e84:	f7ff fcf0 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9e88:	9010      	str	r0, [sp, #64]	; 0x40
    9e8a:	e009      	b.n	9ea0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ac>
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    9e8c:	defe      	udf	#254	; 0xfe
    9e8e:	f007 ff0b 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9e92:	e7ff      	b.n	9e94 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1a0>
    9e94:	f00a fc64 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9e98:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9e9c:	e7ff      	b.n	9e9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1aa>
    9e9e:	e768      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    9ea0:	9810      	ldr	r0, [sp, #64]	; 0x40
    9ea2:	f000 0001 	and.w	r0, r0, #1
    9ea6:	f7fe fe61 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9eaa:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
    9eae:	e7ff      	b.n	9eb0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1bc>
    9eb0:	f89d 0086 	ldrb.w	r0, [sp, #134]	; 0x86
    9eb4:	07c1      	lsls	r1, r0, #31
    9eb6:	2900      	cmp	r1, #0
    9eb8:	d001      	beq.n	9ebe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ca>
    9eba:	e7ff      	b.n	9ebc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1c8>
    9ebc:	e014      	b.n	9ee8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1f4>
    9ebe:	20b3      	movs	r0, #179	; 0xb3
        self.write_command(Instruction::FRMCTR3,
    9ec0:	f88d 0093 	strb.w	r0, [sp, #147]	; 0x93
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    9ec4:	f24c 00ac 	movw	r0, #49324	; 0xc0ac
    9ec8:	f2c0 0001 	movt	r0, #1
    9ecc:	6800      	ldr	r0, [r0, #0]
    9ece:	9025      	str	r0, [sp, #148]	; 0x94
    9ed0:	2006      	movs	r0, #6
    9ed2:	9026      	str	r0, [sp, #152]	; 0x98
        self.write_command(Instruction::FRMCTR3,
    9ed4:	9a25      	ldr	r2, [sp, #148]	; 0x94
    9ed6:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9ed8:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
    9edc:	9816      	ldr	r0, [sp, #88]	; 0x58
    9ede:	f7ff fcc3 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9ee2:	900f      	str	r0, [sp, #60]	; 0x3c
    9ee4:	e009      	b.n	9efa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x206>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    9ee6:	defe      	udf	#254	; 0xfe
    9ee8:	f007 fede 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9eec:	e7ff      	b.n	9eee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1fa>
    9eee:	f00a fc37 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ef2:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9ef6:	e7ff      	b.n	9ef8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x204>
    9ef8:	e73b      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR3,
    9efa:	980f      	ldr	r0, [sp, #60]	; 0x3c
    9efc:	f000 0001 	and.w	r0, r0, #1
    9f00:	f7fe fe34 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9f04:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
    9f08:	e7ff      	b.n	9f0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x216>
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    9f0a:	f89d 0092 	ldrb.w	r0, [sp, #146]	; 0x92
    9f0e:	07c1      	lsls	r1, r0, #31
    9f10:	2900      	cmp	r1, #0
    9f12:	d001      	beq.n	9f18 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x224>
    9f14:	e7ff      	b.n	9f16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x222>
    9f16:	e014      	b.n	9f42 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x24e>
    9f18:	20b4      	movs	r0, #180	; 0xb4
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    9f1a:	f88d 009f 	strb.w	r0, [sp, #159]	; 0x9f
    9f1e:	f24c 00b4 	movw	r0, #49332	; 0xc0b4
    9f22:	f2c0 0001 	movt	r0, #1
    9f26:	6800      	ldr	r0, [r0, #0]
    9f28:	9028      	str	r0, [sp, #160]	; 0xa0
    9f2a:	2001      	movs	r0, #1
    9f2c:	9029      	str	r0, [sp, #164]	; 0xa4
    9f2e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    9f30:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    9f32:	f89d 109f 	ldrb.w	r1, [sp, #159]	; 0x9f
    9f36:	9816      	ldr	r0, [sp, #88]	; 0x58
    9f38:	f7ff fc96 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9f3c:	900e      	str	r0, [sp, #56]	; 0x38
    9f3e:	e009      	b.n	9f54 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x260>
        self.write_command(Instruction::FRMCTR3,
    9f40:	defe      	udf	#254	; 0xfe
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    9f42:	f007 feb1 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9f46:	e7ff      	b.n	9f48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x254>
    9f48:	f00a fc0a 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9f4c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9f50:	e7ff      	b.n	9f52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x25e>
    9f52:	e70e      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    9f54:	980e      	ldr	r0, [sp, #56]	; 0x38
    9f56:	f000 0001 	and.w	r0, r0, #1
    9f5a:	f7fe fe07 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9f5e:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
    9f62:	e7ff      	b.n	9f64 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x270>
    9f64:	f89d 009e 	ldrb.w	r0, [sp, #158]	; 0x9e
    9f68:	07c1      	lsls	r1, r0, #31
    9f6a:	2900      	cmp	r1, #0
    9f6c:	d001      	beq.n	9f72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27e>
    9f6e:	e7ff      	b.n	9f70 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27c>
    9f70:	e014      	b.n	9f9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2a8>
    9f72:	20c0      	movs	r0, #192	; 0xc0
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    9f74:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
    9f78:	f24c 00bc 	movw	r0, #49340	; 0xc0bc
    9f7c:	f2c0 0001 	movt	r0, #1
    9f80:	6800      	ldr	r0, [r0, #0]
    9f82:	902b      	str	r0, [sp, #172]	; 0xac
    9f84:	2003      	movs	r0, #3
    9f86:	902c      	str	r0, [sp, #176]	; 0xb0
    9f88:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    9f8a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    9f8c:	f89d 10ab 	ldrb.w	r1, [sp, #171]	; 0xab
    9f90:	9816      	ldr	r0, [sp, #88]	; 0x58
    9f92:	f7ff fc69 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9f96:	900d      	str	r0, [sp, #52]	; 0x34
    9f98:	e009      	b.n	9fae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ba>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    9f9a:	defe      	udf	#254	; 0xfe
    9f9c:	f007 fe84 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9fa0:	e7ff      	b.n	9fa2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ae>
    9fa2:	f00a fbdd 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9fa6:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9faa:	e7ff      	b.n	9fac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2b8>
    9fac:	e6e1      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    9fae:	980d      	ldr	r0, [sp, #52]	; 0x34
    9fb0:	f000 0001 	and.w	r0, r0, #1
    9fb4:	f7fe fdda 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9fb8:	f88d 00aa 	strb.w	r0, [sp, #170]	; 0xaa
    9fbc:	e7ff      	b.n	9fbe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ca>
    9fbe:	f89d 00aa 	ldrb.w	r0, [sp, #170]	; 0xaa
    9fc2:	07c1      	lsls	r1, r0, #31
    9fc4:	2900      	cmp	r1, #0
    9fc6:	d001      	beq.n	9fcc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d8>
    9fc8:	e7ff      	b.n	9fca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d6>
    9fca:	e014      	b.n	9ff6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x302>
    9fcc:	20c1      	movs	r0, #193	; 0xc1
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    9fce:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
    9fd2:	f24c 00c4 	movw	r0, #49348	; 0xc0c4
    9fd6:	f2c0 0001 	movt	r0, #1
    9fda:	6800      	ldr	r0, [r0, #0]
    9fdc:	902e      	str	r0, [sp, #184]	; 0xb8
    9fde:	2001      	movs	r0, #1
    9fe0:	902f      	str	r0, [sp, #188]	; 0xbc
    9fe2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    9fe4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    9fe6:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
    9fea:	9816      	ldr	r0, [sp, #88]	; 0x58
    9fec:	f7ff fc3c 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9ff0:	900c      	str	r0, [sp, #48]	; 0x30
    9ff2:	e009      	b.n	a008 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x314>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    9ff4:	defe      	udf	#254	; 0xfe
    9ff6:	f007 fe57 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9ffa:	e7ff      	b.n	9ffc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x308>
    9ffc:	f00a fbb0 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a000:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a004:	e7ff      	b.n	a006 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x312>
    a006:	e6b4      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a008:	980c      	ldr	r0, [sp, #48]	; 0x30
    a00a:	f000 0001 	and.w	r0, r0, #1
    a00e:	f7fe fdad 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a012:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
    a016:	e7ff      	b.n	a018 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x324>
    a018:	f89d 00b6 	ldrb.w	r0, [sp, #182]	; 0xb6
    a01c:	07c1      	lsls	r1, r0, #31
    a01e:	2900      	cmp	r1, #0
    a020:	d001      	beq.n	a026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x332>
    a022:	e7ff      	b.n	a024 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x330>
    a024:	e014      	b.n	a050 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x35c>
    a026:	20c2      	movs	r0, #194	; 0xc2
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a028:	f88d 00c3 	strb.w	r0, [sp, #195]	; 0xc3
    a02c:	f24c 00cc 	movw	r0, #49356	; 0xc0cc
    a030:	f2c0 0001 	movt	r0, #1
    a034:	6800      	ldr	r0, [r0, #0]
    a036:	9031      	str	r0, [sp, #196]	; 0xc4
    a038:	2002      	movs	r0, #2
    a03a:	9032      	str	r0, [sp, #200]	; 0xc8
    a03c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    a03e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    a040:	f89d 10c3 	ldrb.w	r1, [sp, #195]	; 0xc3
    a044:	9816      	ldr	r0, [sp, #88]	; 0x58
    a046:	f7ff fc0f 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a04a:	900b      	str	r0, [sp, #44]	; 0x2c
    a04c:	e009      	b.n	a062 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a04e:	defe      	udf	#254	; 0xfe
    a050:	f007 fe2a 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a054:	e7ff      	b.n	a056 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x362>
    a056:	f00a fb83 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a05a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a05e:	e7ff      	b.n	a060 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36c>
    a060:	e687      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a062:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a064:	f000 0001 	and.w	r0, r0, #1
    a068:	f7fe fd80 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a06c:	f88d 00c2 	strb.w	r0, [sp, #194]	; 0xc2
    a070:	e7ff      	b.n	a072 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x37e>
    a072:	f89d 00c2 	ldrb.w	r0, [sp, #194]	; 0xc2
    a076:	07c1      	lsls	r1, r0, #31
    a078:	2900      	cmp	r1, #0
    a07a:	d001      	beq.n	a080 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38c>
    a07c:	e7ff      	b.n	a07e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38a>
    a07e:	e014      	b.n	a0aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3b6>
    a080:	20c3      	movs	r0, #195	; 0xc3
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a082:	f88d 00cf 	strb.w	r0, [sp, #207]	; 0xcf
    a086:	f24c 00d4 	movw	r0, #49364	; 0xc0d4
    a08a:	f2c0 0001 	movt	r0, #1
    a08e:	6800      	ldr	r0, [r0, #0]
    a090:	9034      	str	r0, [sp, #208]	; 0xd0
    a092:	2002      	movs	r0, #2
    a094:	9035      	str	r0, [sp, #212]	; 0xd4
    a096:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    a098:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    a09a:	f89d 10cf 	ldrb.w	r1, [sp, #207]	; 0xcf
    a09e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a0a0:	f7ff fbe2 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a0a4:	900a      	str	r0, [sp, #40]	; 0x28
    a0a6:	e009      	b.n	a0bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c8>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a0a8:	defe      	udf	#254	; 0xfe
    a0aa:	f007 fdfd 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a0ae:	e7ff      	b.n	a0b0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3bc>
    a0b0:	f00a fb56 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a0b4:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a0b8:	e7ff      	b.n	a0ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c6>
    a0ba:	e65a      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a0bc:	980a      	ldr	r0, [sp, #40]	; 0x28
    a0be:	f000 0001 	and.w	r0, r0, #1
    a0c2:	f7fe fd53 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a0c6:	f88d 00ce 	strb.w	r0, [sp, #206]	; 0xce
    a0ca:	e7ff      	b.n	a0cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3d8>
    a0cc:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
    a0d0:	07c1      	lsls	r1, r0, #31
    a0d2:	2900      	cmp	r1, #0
    a0d4:	d001      	beq.n	a0da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e6>
    a0d6:	e7ff      	b.n	a0d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e4>
    a0d8:	e014      	b.n	a104 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x410>
    a0da:	20c4      	movs	r0, #196	; 0xc4
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a0dc:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
    a0e0:	f24c 00dc 	movw	r0, #49372	; 0xc0dc
    a0e4:	f2c0 0001 	movt	r0, #1
    a0e8:	6800      	ldr	r0, [r0, #0]
    a0ea:	9037      	str	r0, [sp, #220]	; 0xdc
    a0ec:	2002      	movs	r0, #2
    a0ee:	9038      	str	r0, [sp, #224]	; 0xe0
    a0f0:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    a0f2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    a0f4:	f89d 10db 	ldrb.w	r1, [sp, #219]	; 0xdb
    a0f8:	9816      	ldr	r0, [sp, #88]	; 0x58
    a0fa:	f7ff fbb5 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a0fe:	9009      	str	r0, [sp, #36]	; 0x24
    a100:	e009      	b.n	a116 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x422>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a102:	defe      	udf	#254	; 0xfe
    a104:	f007 fdd0 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a108:	e7ff      	b.n	a10a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x416>
    a10a:	f00a fb29 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a10e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a112:	e7ff      	b.n	a114 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x420>
    a114:	e62d      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a116:	9809      	ldr	r0, [sp, #36]	; 0x24
    a118:	f000 0001 	and.w	r0, r0, #1
    a11c:	f7fe fd26 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a120:	f88d 00da 	strb.w	r0, [sp, #218]	; 0xda
    a124:	e7ff      	b.n	a126 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x432>
    a126:	f89d 00da 	ldrb.w	r0, [sp, #218]	; 0xda
    a12a:	07c1      	lsls	r1, r0, #31
    a12c:	2900      	cmp	r1, #0
    a12e:	d001      	beq.n	a134 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x440>
    a130:	e7ff      	b.n	a132 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x43e>
    a132:	e014      	b.n	a15e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x46a>
    a134:	20c5      	movs	r0, #197	; 0xc5
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a136:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
    a13a:	f24c 00e4 	movw	r0, #49380	; 0xc0e4
    a13e:	f2c0 0001 	movt	r0, #1
    a142:	6800      	ldr	r0, [r0, #0]
    a144:	903a      	str	r0, [sp, #232]	; 0xe8
    a146:	2001      	movs	r0, #1
    a148:	903b      	str	r0, [sp, #236]	; 0xec
    a14a:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    a14c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    a14e:	f89d 10e7 	ldrb.w	r1, [sp, #231]	; 0xe7
    a152:	9816      	ldr	r0, [sp, #88]	; 0x58
    a154:	f7ff fb88 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a158:	9008      	str	r0, [sp, #32]
    a15a:	e009      	b.n	a170 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47c>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a15c:	defe      	udf	#254	; 0xfe
    a15e:	f007 fda3 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a162:	e7ff      	b.n	a164 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x470>
    a164:	f00a fafc 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a168:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a16c:	e7ff      	b.n	a16e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47a>
    a16e:	e600      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a170:	9808      	ldr	r0, [sp, #32]
    a172:	f000 0001 	and.w	r0, r0, #1
    a176:	f7fe fcf9 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a17a:	f88d 00e6 	strb.w	r0, [sp, #230]	; 0xe6
    a17e:	e7ff      	b.n	a180 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48c>
    a180:	f89d 00e6 	ldrb.w	r0, [sp, #230]	; 0xe6
    a184:	07c1      	lsls	r1, r0, #31
    a186:	2900      	cmp	r1, #0
    a188:	d001      	beq.n	a18e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x49a>
    a18a:	e7ff      	b.n	a18c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x498>
    a18c:	e006      	b.n	a19c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4a8>
        if self.inverted {
    a18e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a190:	7d41      	ldrb	r1, [r0, #21]
    a192:	07c9      	lsls	r1, r1, #31
    a194:	2900      	cmp	r1, #0
    a196:	d11a      	bne.n	a1ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4da>
    a198:	e009      	b.n	a1ae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ba>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a19a:	defe      	udf	#254	; 0xfe
    a19c:	f007 fd84 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a1a0:	e7ff      	b.n	a1a2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ae>
    a1a2:	f00a fadd 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a1a6:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a1aa:	e7ff      	b.n	a1ac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4b8>
    a1ac:	e5e1      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a1ae:	2020      	movs	r0, #32
            self.write_command(Instruction::INVOFF, None)?;
    a1b0:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    a1b4:	2000      	movs	r0, #0
    a1b6:	9041      	str	r0, [sp, #260]	; 0x104
    a1b8:	9040      	str	r0, [sp, #256]	; 0x100
    a1ba:	9040      	str	r0, [sp, #256]	; 0x100
    a1bc:	9a40      	ldr	r2, [sp, #256]	; 0x100
    a1be:	9b41      	ldr	r3, [sp, #260]	; 0x104
    a1c0:	f89d 10ff 	ldrb.w	r1, [sp, #255]	; 0xff
    a1c4:	9816      	ldr	r0, [sp, #88]	; 0x58
    a1c6:	f7ff fb4f 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a1ca:	9007      	str	r0, [sp, #28]
    a1cc:	e02a      	b.n	a224 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x530>
    a1ce:	2021      	movs	r0, #33	; 0x21
            self.write_command(Instruction::INVON, None)?;
    a1d0:	f88d 00f3 	strb.w	r0, [sp, #243]	; 0xf3
    a1d4:	2000      	movs	r0, #0
    a1d6:	903e      	str	r0, [sp, #248]	; 0xf8
    a1d8:	903d      	str	r0, [sp, #244]	; 0xf4
    a1da:	903d      	str	r0, [sp, #244]	; 0xf4
    a1dc:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    a1de:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    a1e0:	f89d 10f3 	ldrb.w	r1, [sp, #243]	; 0xf3
    a1e4:	9816      	ldr	r0, [sp, #88]	; 0x58
    a1e6:	f7ff fb3f 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a1ea:	9006      	str	r0, [sp, #24]
    a1ec:	e7ff      	b.n	a1ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4fa>
    a1ee:	9806      	ldr	r0, [sp, #24]
    a1f0:	f000 0001 	and.w	r0, r0, #1
    a1f4:	f7fe fcba 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a1f8:	f88d 00f2 	strb.w	r0, [sp, #242]	; 0xf2
    a1fc:	e7ff      	b.n	a1fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x50a>
    a1fe:	f89d 00f2 	ldrb.w	r0, [sp, #242]	; 0xf2
    a202:	07c1      	lsls	r1, r0, #31
    a204:	2900      	cmp	r1, #0
    a206:	d001      	beq.n	a20c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x518>
    a208:	e7ff      	b.n	a20a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x516>
    a20a:	e001      	b.n	a210 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x51c>
        if self.inverted {
    a20c:	e024      	b.n	a258 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVON, None)?;
    a20e:	defe      	udf	#254	; 0xfe
    a210:	f007 fd4a 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a214:	e7ff      	b.n	a216 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x522>
    a216:	f00a faa3 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a21a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a21e:	e7ff      	b.n	a220 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52c>
    a220:	e7ff      	b.n	a222 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
    a222:	e5a6      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::INVOFF, None)?;
    a224:	9807      	ldr	r0, [sp, #28]
    a226:	f000 0001 	and.w	r0, r0, #1
    a22a:	f7fe fc9f 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a22e:	f88d 00fe 	strb.w	r0, [sp, #254]	; 0xfe
    a232:	e7ff      	b.n	a234 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x540>
    a234:	f89d 00fe 	ldrb.w	r0, [sp, #254]	; 0xfe
    a238:	07c1      	lsls	r1, r0, #31
    a23a:	2900      	cmp	r1, #0
    a23c:	d001      	beq.n	a242 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54e>
    a23e:	e7ff      	b.n	a240 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54c>
    a240:	e001      	b.n	a246 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x552>
        if self.inverted {
    a242:	e009      	b.n	a258 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVOFF, None)?;
    a244:	defe      	udf	#254	; 0xfe
    a246:	f007 fd2f 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a24a:	e7ff      	b.n	a24c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x558>
    a24c:	f00a fa88 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a250:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a254:	e7ff      	b.n	a256 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x562>
    a256:	e7e4      	b.n	a222 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
        if self.rgb {
    a258:	9816      	ldr	r0, [sp, #88]	; 0x58
    a25a:	7d01      	ldrb	r1, [r0, #20]
    a25c:	07c9      	lsls	r1, r1, #31
    a25e:	2900      	cmp	r1, #0
    a260:	d114      	bne.n	a28c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x598>
    a262:	e7ff      	b.n	a264 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x570>
    a264:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a266:	f88d 0117 	strb.w	r0, [sp, #279]	; 0x117
    a26a:	f24c 00f4 	movw	r0, #49396	; 0xc0f4
    a26e:	f2c0 0001 	movt	r0, #1
    a272:	6800      	ldr	r0, [r0, #0]
    a274:	9046      	str	r0, [sp, #280]	; 0x118
    a276:	2001      	movs	r0, #1
    a278:	9047      	str	r0, [sp, #284]	; 0x11c
    a27a:	9a46      	ldr	r2, [sp, #280]	; 0x118
    a27c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    a27e:	f89d 1117 	ldrb.w	r1, [sp, #279]	; 0x117
    a282:	9816      	ldr	r0, [sp, #88]	; 0x58
    a284:	f7ff faf0 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a288:	9005      	str	r0, [sp, #20]
    a28a:	e02e      	b.n	a2ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f6>
    a28c:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a28e:	f88d 010b 	strb.w	r0, [sp, #267]	; 0x10b
    a292:	f24c 00ec 	movw	r0, #49388	; 0xc0ec
    a296:	f2c0 0001 	movt	r0, #1
    a29a:	6800      	ldr	r0, [r0, #0]
    a29c:	9043      	str	r0, [sp, #268]	; 0x10c
    a29e:	2001      	movs	r0, #1
    a2a0:	9044      	str	r0, [sp, #272]	; 0x110
    a2a2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    a2a4:	9b44      	ldr	r3, [sp, #272]	; 0x110
    a2a6:	f89d 110b 	ldrb.w	r1, [sp, #267]	; 0x10b
    a2aa:	9816      	ldr	r0, [sp, #88]	; 0x58
    a2ac:	f7ff fadc 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a2b0:	9004      	str	r0, [sp, #16]
    a2b2:	e7ff      	b.n	a2b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5c0>
    a2b4:	9804      	ldr	r0, [sp, #16]
    a2b6:	f000 0001 	and.w	r0, r0, #1
    a2ba:	f7fe fc57 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a2be:	f88d 010a 	strb.w	r0, [sp, #266]	; 0x10a
    a2c2:	e7ff      	b.n	a2c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5d0>
    a2c4:	f89d 010a 	ldrb.w	r0, [sp, #266]	; 0x10a
    a2c8:	07c1      	lsls	r1, r0, #31
    a2ca:	2900      	cmp	r1, #0
    a2cc:	d001      	beq.n	a2d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5de>
    a2ce:	e7ff      	b.n	a2d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5dc>
    a2d0:	e001      	b.n	a2d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e2>
        if self.rgb {
    a2d2:	e024      	b.n	a31e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a2d4:	defe      	udf	#254	; 0xfe
    a2d6:	f007 fce7 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a2da:	e7ff      	b.n	a2dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e8>
    a2dc:	f00a fa40 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a2e0:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a2e4:	e7ff      	b.n	a2e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f2>
    a2e6:	e7ff      	b.n	a2e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a2e8:	e543      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a2ea:	9805      	ldr	r0, [sp, #20]
    a2ec:	f000 0001 	and.w	r0, r0, #1
    a2f0:	f7fe fc3c 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a2f4:	f88d 0116 	strb.w	r0, [sp, #278]	; 0x116
    a2f8:	e7ff      	b.n	a2fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x606>
    a2fa:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    a2fe:	07c1      	lsls	r1, r0, #31
    a300:	2900      	cmp	r1, #0
    a302:	d001      	beq.n	a308 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x614>
    a304:	e7ff      	b.n	a306 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x612>
    a306:	e001      	b.n	a30c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x618>
        if self.rgb {
    a308:	e009      	b.n	a31e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a30a:	defe      	udf	#254	; 0xfe
    a30c:	f007 fccc 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a310:	e7ff      	b.n	a312 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x61e>
    a312:	f00a fa25 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a316:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a31a:	e7ff      	b.n	a31c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x628>
    a31c:	e7e4      	b.n	a2e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a31e:	203a      	movs	r0, #58	; 0x3a
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a320:	f88d 0123 	strb.w	r0, [sp, #291]	; 0x123
    a324:	f24c 00fc 	movw	r0, #49404	; 0xc0fc
    a328:	f2c0 0001 	movt	r0, #1
    a32c:	6800      	ldr	r0, [r0, #0]
    a32e:	9049      	str	r0, [sp, #292]	; 0x124
    a330:	2001      	movs	r0, #1
    a332:	904a      	str	r0, [sp, #296]	; 0x128
    a334:	9a49      	ldr	r2, [sp, #292]	; 0x124
    a336:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    a338:	f89d 1123 	ldrb.w	r1, [sp, #291]	; 0x123
    a33c:	9816      	ldr	r0, [sp, #88]	; 0x58
    a33e:	f7ff fa93 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a342:	9003      	str	r0, [sp, #12]
    a344:	e7ff      	b.n	a346 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x652>
    a346:	9803      	ldr	r0, [sp, #12]
    a348:	f000 0001 	and.w	r0, r0, #1
    a34c:	f7fe fc0e 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a350:	f88d 0122 	strb.w	r0, [sp, #290]	; 0x122
    a354:	e7ff      	b.n	a356 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x662>
    a356:	f89d 0122 	ldrb.w	r0, [sp, #290]	; 0x122
    a35a:	07c1      	lsls	r1, r0, #31
    a35c:	2900      	cmp	r1, #0
    a35e:	d001      	beq.n	a364 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x670>
    a360:	e7ff      	b.n	a362 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x66e>
    a362:	e010      	b.n	a386 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x692>
    a364:	2029      	movs	r0, #41	; 0x29
        self.write_command(Instruction::DISPON, None)?;
    a366:	f88d 012f 	strb.w	r0, [sp, #303]	; 0x12f
    a36a:	2000      	movs	r0, #0
    a36c:	904d      	str	r0, [sp, #308]	; 0x134
    a36e:	904c      	str	r0, [sp, #304]	; 0x130
    a370:	904c      	str	r0, [sp, #304]	; 0x130
    a372:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    a374:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    a376:	f89d 112f 	ldrb.w	r1, [sp, #303]	; 0x12f
    a37a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a37c:	f7ff fa74 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a380:	9002      	str	r0, [sp, #8]
    a382:	e009      	b.n	a398 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a4>
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a384:	defe      	udf	#254	; 0xfe
    a386:	f007 fc8f 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a38a:	e7ff      	b.n	a38c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x698>
    a38c:	f00a f9e8 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a390:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a394:	e7ff      	b.n	a396 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a2>
    a396:	e4ec      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::DISPON, None)?;
    a398:	9802      	ldr	r0, [sp, #8]
    a39a:	f000 0001 	and.w	r0, r0, #1
    a39e:	f7fe fbe5 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a3a2:	f88d 012e 	strb.w	r0, [sp, #302]	; 0x12e
    a3a6:	e7ff      	b.n	a3a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6b4>
    a3a8:	f89d 012e 	ldrb.w	r0, [sp, #302]	; 0x12e
    a3ac:	07c1      	lsls	r1, r0, #31
    a3ae:	2900      	cmp	r1, #0
    a3b0:	d001      	beq.n	a3b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c2>
    a3b2:	e7ff      	b.n	a3b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c0>
    a3b4:	e005      	b.n	a3c2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6ce>
    a3b6:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a3b8:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a3ba:	f009 ff5c 	bl	14276 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a3be:	e009      	b.n	a3d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e0>
        self.write_command(Instruction::DISPON, None)?;
    a3c0:	defe      	udf	#254	; 0xfe
    a3c2:	f007 fc71 	bl	11ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a3c6:	e7ff      	b.n	a3c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6d4>
    a3c8:	f00a f9ca 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a3cc:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a3d0:	e7ff      	b.n	a3d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6de>
    a3d2:	e4ce      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    a3d4:	f008 ff8a 	bl	132ec <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    a3d8:	9001      	str	r0, [sp, #4]
    a3da:	e7ff      	b.n	a3dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e8>
    a3dc:	f64b 7138 	movw	r1, #48952	; 0xbf38
    a3e0:	f2c0 0101 	movt	r1, #1
    a3e4:	f24c 1300 	movw	r3, #49408	; 0xc100
    a3e8:	f2c0 0301 	movt	r3, #1
    a3ec:	220e      	movs	r2, #14
    a3ee:	9801      	ldr	r0, [sp, #4]
    a3f0:	f7fe fb83 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    a3f4:	e7ff      	b.n	a3f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x702>
    a3f6:	2000      	movs	r0, #0
        Ok(())
    a3f8:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    }
    a3fc:	e4b9      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>

0000a3fe <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>:
    fn to_u8(&self) -> Option<u8> {
    a3fe:	b580      	push	{r7, lr}
    a400:	b08a      	sub	sp, #40	; 0x28
    a402:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    a404:	f000 fa25 	bl	a852 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>
    a408:	9307      	str	r3, [sp, #28]
    a40a:	9206      	str	r2, [sp, #24]
    a40c:	9105      	str	r1, [sp, #20]
    a40e:	9004      	str	r0, [sp, #16]
    a410:	e7ff      	b.n	a412 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x14>
    a412:	a804      	add	r0, sp, #16
    a414:	f009 ffa6 	bl	14364 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    a418:	9003      	str	r0, [sp, #12]
    a41a:	e7ff      	b.n	a41c <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x1e>
    a41c:	9803      	ldr	r0, [sp, #12]
    a41e:	f00a f817 	bl	14450 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    a422:	9002      	str	r0, [sp, #8]
    a424:	9101      	str	r1, [sp, #4]
    a426:	e7ff      	b.n	a428 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x2a>
    }
    a428:	9802      	ldr	r0, [sp, #8]
    a42a:	f000 0001 	and.w	r0, r0, #1
    a42e:	9901      	ldr	r1, [sp, #4]
    a430:	b00a      	add	sp, #40	; 0x28
    a432:	bd80      	pop	{r7, pc}

0000a434 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>:
    a434:	b082      	sub	sp, #8
    a436:	4601      	mov	r1, r0
    a438:	f8ad 0004 	strh.w	r0, [sp, #4]
    a43c:	ba00      	rev	r0, r0
    a43e:	0c00      	lsrs	r0, r0, #16
    a440:	f8ad 0006 	strh.w	r0, [sp, #6]
    a444:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a448:	9000      	str	r0, [sp, #0]
    a44a:	e7ff      	b.n	a44c <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E+0x18>
    a44c:	9800      	ldr	r0, [sp, #0]
    a44e:	b002      	add	sp, #8
    a450:	4770      	bx	lr

0000a452 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>:
    a452:	b580      	push	{r7, lr}
    a454:	b084      	sub	sp, #16
    a456:	4601      	mov	r1, r0
    a458:	f8ad 000e 	strh.w	r0, [sp, #14]
    a45c:	9102      	str	r1, [sp, #8]
    a45e:	f7ff ffe9 	bl	a434 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>
    a462:	9001      	str	r0, [sp, #4]
    a464:	e7ff      	b.n	a466 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E+0x14>
    a466:	9801      	ldr	r0, [sp, #4]
    a468:	b004      	add	sp, #16
    a46a:	bd80      	pop	{r7, pc}

0000a46c <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>:
    a46c:	b580      	push	{r7, lr}
    a46e:	b084      	sub	sp, #16
    a470:	9002      	str	r0, [sp, #8]
    a472:	9802      	ldr	r0, [sp, #8]
    a474:	f009 ff37 	bl	142e6 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>
    a478:	9001      	str	r0, [sp, #4]
    a47a:	9100      	str	r1, [sp, #0]
    a47c:	e7ff      	b.n	a47e <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE+0x12>
    a47e:	9801      	ldr	r0, [sp, #4]
    a480:	f000 0001 	and.w	r0, r0, #1
    a484:	9900      	ldr	r1, [sp, #0]
    a486:	b004      	add	sp, #16
    a488:	bd80      	pop	{r7, pc}

0000a48a <_ZN4core3ptr13drop_in_place17hef1277471241eea2E>:
    a48a:	b081      	sub	sp, #4
    a48c:	9000      	str	r0, [sp, #0]
    a48e:	b001      	add	sp, #4
    a490:	4770      	bx	lr

0000a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>:
    a492:	b089      	sub	sp, #36	; 0x24
    a494:	9005      	str	r0, [sp, #20]
    a496:	9106      	str	r1, [sp, #24]
    a498:	9107      	str	r1, [sp, #28]
    a49a:	9907      	ldr	r1, [sp, #28]
    a49c:	9002      	str	r0, [sp, #8]
    a49e:	9101      	str	r1, [sp, #4]
    a4a0:	e7ff      	b.n	a4a2 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x10>
    a4a2:	9802      	ldr	r0, [sp, #8]
    a4a4:	9008      	str	r0, [sp, #32]
    a4a6:	9908      	ldr	r1, [sp, #32]
    a4a8:	9100      	str	r1, [sp, #0]
    a4aa:	e7ff      	b.n	a4ac <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x1a>
    a4ac:	9800      	ldr	r0, [sp, #0]
    a4ae:	9003      	str	r0, [sp, #12]
    a4b0:	9901      	ldr	r1, [sp, #4]
    a4b2:	9104      	str	r1, [sp, #16]
    a4b4:	9803      	ldr	r0, [sp, #12]
    a4b6:	9904      	ldr	r1, [sp, #16]
    a4b8:	b009      	add	sp, #36	; 0x24
    a4ba:	4770      	bx	lr

0000a4bc <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>:
use num_derive::ToPrimitive;

/// ST7735 instructions.
#[derive(ToPrimitive)]
    a4bc:	b08a      	sub	sp, #40	; 0x28
    a4be:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Instruction {
    a4c0:	7800      	ldrb	r0, [r0, #0]
    a4c2:	9001      	str	r0, [sp, #4]
    a4c4:	9901      	ldr	r1, [sp, #4]
    a4c6:	e8df f011 	tbh	[pc, r1, lsl #1]
    a4ca:	0103      	.short	0x0103
    a4cc:	01020107 	.word	0x01020107
    a4d0:	010c0102 	.word	0x010c0102
    a4d4:	01020102 	.word	0x01020102
    a4d8:	01020102 	.word	0x01020102
    a4dc:	01020111 	.word	0x01020111
    a4e0:	01020102 	.word	0x01020102
    a4e4:	01020102 	.word	0x01020102
    a4e8:	01160102 	.word	0x01160102
    a4ec:	0120011b 	.word	0x0120011b
    a4f0:	01020125 	.word	0x01020125
    a4f4:	01020102 	.word	0x01020102
    a4f8:	01020102 	.word	0x01020102
    a4fc:	01020102 	.word	0x01020102
    a500:	01020102 	.word	0x01020102
    a504:	01020102 	.word	0x01020102
    a508:	012a0102 	.word	0x012a0102
    a50c:	0102012f 	.word	0x0102012f
    a510:	01020102 	.word	0x01020102
    a514:	01020102 	.word	0x01020102
    a518:	01340102 	.word	0x01340102
    a51c:	013e0139 	.word	0x013e0139
    a520:	01480143 	.word	0x01480143
    a524:	014d0102 	.word	0x014d0102
    a528:	01520102 	.word	0x01520102
    a52c:	01020102 	.word	0x01020102
    a530:	01020102 	.word	0x01020102
    a534:	015c0102 	.word	0x015c0102
    a538:	01020102 	.word	0x01020102
    a53c:	01570102 	.word	0x01570102
    a540:	01020102 	.word	0x01020102
    a544:	01020102 	.word	0x01020102
    a548:	01020102 	.word	0x01020102
    a54c:	01020102 	.word	0x01020102
    a550:	01020102 	.word	0x01020102
    a554:	01020102 	.word	0x01020102
    a558:	01020102 	.word	0x01020102
    a55c:	01020102 	.word	0x01020102
    a560:	01020102 	.word	0x01020102
    a564:	01020102 	.word	0x01020102
    a568:	01020102 	.word	0x01020102
    a56c:	01020102 	.word	0x01020102
    a570:	01020102 	.word	0x01020102
    a574:	01020102 	.word	0x01020102
    a578:	01020102 	.word	0x01020102
    a57c:	01020102 	.word	0x01020102
    a580:	01020102 	.word	0x01020102
    a584:	01020102 	.word	0x01020102
    a588:	01020102 	.word	0x01020102
    a58c:	01020102 	.word	0x01020102
    a590:	01020102 	.word	0x01020102
    a594:	01020102 	.word	0x01020102
    a598:	01020102 	.word	0x01020102
    a59c:	01020102 	.word	0x01020102
    a5a0:	01020102 	.word	0x01020102
    a5a4:	01020102 	.word	0x01020102
    a5a8:	01020102 	.word	0x01020102
    a5ac:	01020102 	.word	0x01020102
    a5b0:	01020102 	.word	0x01020102
    a5b4:	01020102 	.word	0x01020102
    a5b8:	01020102 	.word	0x01020102
    a5bc:	01020102 	.word	0x01020102
    a5c0:	01020102 	.word	0x01020102
    a5c4:	01020102 	.word	0x01020102
    a5c8:	01020102 	.word	0x01020102
    a5cc:	01020102 	.word	0x01020102
    a5d0:	01020102 	.word	0x01020102
    a5d4:	01020102 	.word	0x01020102
    a5d8:	01020102 	.word	0x01020102
    a5dc:	01020102 	.word	0x01020102
    a5e0:	01020102 	.word	0x01020102
    a5e4:	01020102 	.word	0x01020102
    a5e8:	01020102 	.word	0x01020102
    a5ec:	01020102 	.word	0x01020102
    a5f0:	01020102 	.word	0x01020102
    a5f4:	01020102 	.word	0x01020102
    a5f8:	01020102 	.word	0x01020102
    a5fc:	01020102 	.word	0x01020102
    a600:	01020102 	.word	0x01020102
    a604:	01020102 	.word	0x01020102
    a608:	01020102 	.word	0x01020102
    a60c:	01020102 	.word	0x01020102
    a610:	01020102 	.word	0x01020102
    a614:	01020102 	.word	0x01020102
    a618:	01020102 	.word	0x01020102
    a61c:	01020102 	.word	0x01020102
    a620:	01020102 	.word	0x01020102
    a624:	01020102 	.word	0x01020102
    a628:	01020102 	.word	0x01020102
    a62c:	01660161 	.word	0x01660161
    a630:	0170016b 	.word	0x0170016b
    a634:	01750102 	.word	0x01750102
    a638:	01020102 	.word	0x01020102
    a63c:	01020102 	.word	0x01020102
    a640:	01020102 	.word	0x01020102
    a644:	01020102 	.word	0x01020102
    a648:	017a0102 	.word	0x017a0102
    a64c:	0184017f 	.word	0x0184017f
    a650:	018e0189 	.word	0x018e0189
    a654:	01020193 	.word	0x01020193
    a658:	01020102 	.word	0x01020102
    a65c:	01020102 	.word	0x01020102
    a660:	01020102 	.word	0x01020102
    a664:	01020102 	.word	0x01020102
    a668:	01020102 	.word	0x01020102
    a66c:	01020102 	.word	0x01020102
    a670:	01020102 	.word	0x01020102
    a674:	01020102 	.word	0x01020102
    a678:	01020102 	.word	0x01020102
    a67c:	01980102 	.word	0x01980102
    a680:	01a2019d 	.word	0x01a2019d
    a684:	010201a7 	.word	0x010201a7
    a688:	01b10102 	.word	0x01b10102
    a68c:	010200fd 	.word	0x010200fd
    a690:	01020102 	.word	0x01020102
    a694:	01020102 	.word	0x01020102
    a698:	01020102 	.word	0x01020102
    a69c:	01020102 	.word	0x01020102
    a6a0:	01020102 	.word	0x01020102
    a6a4:	01020102 	.word	0x01020102
    a6a8:	01020102 	.word	0x01020102
    a6ac:	01020102 	.word	0x01020102
    a6b0:	01020102 	.word	0x01020102
    a6b4:	01020102 	.word	0x01020102
    a6b8:	01020102 	.word	0x01020102
    a6bc:	01020102 	.word	0x01020102
    a6c0:	01ac0102 	.word	0x01ac0102
    a6c4:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    a6c6:	9007      	str	r0, [sp, #28]
    a6c8:	20e1      	movs	r0, #225	; 0xe1
    a6ca:	9006      	str	r0, [sp, #24]
    a6cc:	e0b3      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a6ce:	defe      	udf	#254	; 0xfe
    a6d0:	2000      	movs	r0, #0
    a6d2:	9007      	str	r0, [sp, #28]
    a6d4:	9006      	str	r0, [sp, #24]
    a6d6:	e0ae      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a6d8:	2000      	movs	r0, #0
    a6da:	9007      	str	r0, [sp, #28]
    a6dc:	2001      	movs	r0, #1
    a6de:	9006      	str	r0, [sp, #24]
    a6e0:	e0a9      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a6e2:	2000      	movs	r0, #0
    a6e4:	9007      	str	r0, [sp, #28]
    a6e6:	2004      	movs	r0, #4
    a6e8:	9006      	str	r0, [sp, #24]
    a6ea:	e0a4      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a6ec:	2000      	movs	r0, #0
    a6ee:	9007      	str	r0, [sp, #28]
    a6f0:	2009      	movs	r0, #9
    a6f2:	9006      	str	r0, [sp, #24]
    a6f4:	e09f      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a6f6:	2000      	movs	r0, #0
    a6f8:	9007      	str	r0, [sp, #28]
    a6fa:	2010      	movs	r0, #16
    a6fc:	9006      	str	r0, [sp, #24]
    a6fe:	e09a      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a700:	2000      	movs	r0, #0
    a702:	9007      	str	r0, [sp, #28]
    a704:	2011      	movs	r0, #17
    a706:	9006      	str	r0, [sp, #24]
    a708:	e095      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a70a:	2000      	movs	r0, #0
    a70c:	9007      	str	r0, [sp, #28]
    a70e:	2012      	movs	r0, #18
    a710:	9006      	str	r0, [sp, #24]
    a712:	e090      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a714:	2000      	movs	r0, #0
    a716:	9007      	str	r0, [sp, #28]
    a718:	2013      	movs	r0, #19
    a71a:	9006      	str	r0, [sp, #24]
    a71c:	e08b      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a71e:	2000      	movs	r0, #0
    a720:	9007      	str	r0, [sp, #28]
    a722:	2020      	movs	r0, #32
    a724:	9006      	str	r0, [sp, #24]
    a726:	e086      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a728:	2000      	movs	r0, #0
    a72a:	9007      	str	r0, [sp, #28]
    a72c:	2021      	movs	r0, #33	; 0x21
    a72e:	9006      	str	r0, [sp, #24]
    a730:	e081      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a732:	2000      	movs	r0, #0
    a734:	9007      	str	r0, [sp, #28]
    a736:	2028      	movs	r0, #40	; 0x28
    a738:	9006      	str	r0, [sp, #24]
    a73a:	e07c      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a73c:	2000      	movs	r0, #0
    a73e:	9007      	str	r0, [sp, #28]
    a740:	2029      	movs	r0, #41	; 0x29
    a742:	9006      	str	r0, [sp, #24]
    a744:	e077      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a746:	2000      	movs	r0, #0
    a748:	9007      	str	r0, [sp, #28]
    a74a:	202a      	movs	r0, #42	; 0x2a
    a74c:	9006      	str	r0, [sp, #24]
    a74e:	e072      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a750:	2000      	movs	r0, #0
    a752:	9007      	str	r0, [sp, #28]
    a754:	202b      	movs	r0, #43	; 0x2b
    a756:	9006      	str	r0, [sp, #24]
    a758:	e06d      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a75a:	2000      	movs	r0, #0
    a75c:	9007      	str	r0, [sp, #28]
    a75e:	202c      	movs	r0, #44	; 0x2c
    a760:	9006      	str	r0, [sp, #24]
    a762:	e068      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a764:	2000      	movs	r0, #0
    a766:	9007      	str	r0, [sp, #28]
    a768:	202e      	movs	r0, #46	; 0x2e
    a76a:	9006      	str	r0, [sp, #24]
    a76c:	e063      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a76e:	2000      	movs	r0, #0
    a770:	9007      	str	r0, [sp, #28]
    a772:	2030      	movs	r0, #48	; 0x30
    a774:	9006      	str	r0, [sp, #24]
    a776:	e05e      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a778:	2000      	movs	r0, #0
    a77a:	9007      	str	r0, [sp, #28]
    a77c:	203a      	movs	r0, #58	; 0x3a
    a77e:	9006      	str	r0, [sp, #24]
    a780:	e059      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a782:	2000      	movs	r0, #0
    a784:	9007      	str	r0, [sp, #28]
    a786:	2036      	movs	r0, #54	; 0x36
    a788:	9006      	str	r0, [sp, #24]
    a78a:	e054      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a78c:	2000      	movs	r0, #0
    a78e:	9007      	str	r0, [sp, #28]
    a790:	20b1      	movs	r0, #177	; 0xb1
    a792:	9006      	str	r0, [sp, #24]
    a794:	e04f      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a796:	2000      	movs	r0, #0
    a798:	9007      	str	r0, [sp, #28]
    a79a:	20b2      	movs	r0, #178	; 0xb2
    a79c:	9006      	str	r0, [sp, #24]
    a79e:	e04a      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7a0:	2000      	movs	r0, #0
    a7a2:	9007      	str	r0, [sp, #28]
    a7a4:	20b3      	movs	r0, #179	; 0xb3
    a7a6:	9006      	str	r0, [sp, #24]
    a7a8:	e045      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7aa:	2000      	movs	r0, #0
    a7ac:	9007      	str	r0, [sp, #28]
    a7ae:	20b4      	movs	r0, #180	; 0xb4
    a7b0:	9006      	str	r0, [sp, #24]
    a7b2:	e040      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7b4:	2000      	movs	r0, #0
    a7b6:	9007      	str	r0, [sp, #28]
    a7b8:	20b6      	movs	r0, #182	; 0xb6
    a7ba:	9006      	str	r0, [sp, #24]
    a7bc:	e03b      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7be:	2000      	movs	r0, #0
    a7c0:	9007      	str	r0, [sp, #28]
    a7c2:	20c0      	movs	r0, #192	; 0xc0
    a7c4:	9006      	str	r0, [sp, #24]
    a7c6:	e036      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7c8:	2000      	movs	r0, #0
    a7ca:	9007      	str	r0, [sp, #28]
    a7cc:	20c1      	movs	r0, #193	; 0xc1
    a7ce:	9006      	str	r0, [sp, #24]
    a7d0:	e031      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7d2:	2000      	movs	r0, #0
    a7d4:	9007      	str	r0, [sp, #28]
    a7d6:	20c2      	movs	r0, #194	; 0xc2
    a7d8:	9006      	str	r0, [sp, #24]
    a7da:	e02c      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7dc:	2000      	movs	r0, #0
    a7de:	9007      	str	r0, [sp, #28]
    a7e0:	20c3      	movs	r0, #195	; 0xc3
    a7e2:	9006      	str	r0, [sp, #24]
    a7e4:	e027      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7e6:	2000      	movs	r0, #0
    a7e8:	9007      	str	r0, [sp, #28]
    a7ea:	20c4      	movs	r0, #196	; 0xc4
    a7ec:	9006      	str	r0, [sp, #24]
    a7ee:	e022      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7f0:	2000      	movs	r0, #0
    a7f2:	9007      	str	r0, [sp, #28]
    a7f4:	20c5      	movs	r0, #197	; 0xc5
    a7f6:	9006      	str	r0, [sp, #24]
    a7f8:	e01d      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7fa:	2000      	movs	r0, #0
    a7fc:	9007      	str	r0, [sp, #28]
    a7fe:	20da      	movs	r0, #218	; 0xda
    a800:	9006      	str	r0, [sp, #24]
    a802:	e018      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a804:	2000      	movs	r0, #0
    a806:	9007      	str	r0, [sp, #28]
    a808:	20db      	movs	r0, #219	; 0xdb
    a80a:	9006      	str	r0, [sp, #24]
    a80c:	e013      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a80e:	2000      	movs	r0, #0
    a810:	9007      	str	r0, [sp, #28]
    a812:	20dc      	movs	r0, #220	; 0xdc
    a814:	9006      	str	r0, [sp, #24]
    a816:	e00e      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a818:	2000      	movs	r0, #0
    a81a:	9007      	str	r0, [sp, #28]
    a81c:	20dd      	movs	r0, #221	; 0xdd
    a81e:	9006      	str	r0, [sp, #24]
    a820:	e009      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a822:	2000      	movs	r0, #0
    a824:	9007      	str	r0, [sp, #28]
    a826:	20fc      	movs	r0, #252	; 0xfc
    a828:	9006      	str	r0, [sp, #24]
    a82a:	e004      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a82c:	2000      	movs	r0, #0
    a82e:	9007      	str	r0, [sp, #28]
    a830:	20e0      	movs	r0, #224	; 0xe0
    a832:	9006      	str	r0, [sp, #24]
    a834:	e7ff      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a836:	9806      	ldr	r0, [sp, #24]
    a838:	9907      	ldr	r1, [sp, #28]
    a83a:	9105      	str	r1, [sp, #20]
    a83c:	9004      	str	r0, [sp, #16]
    a83e:	2000      	movs	r0, #0
    a840:	9003      	str	r0, [sp, #12]
    a842:	2001      	movs	r0, #1
    a844:	9002      	str	r0, [sp, #8]
    a846:	9802      	ldr	r0, [sp, #8]
    a848:	9903      	ldr	r1, [sp, #12]
    a84a:	9a04      	ldr	r2, [sp, #16]
    a84c:	9b05      	ldr	r3, [sp, #20]
    a84e:	b00a      	add	sp, #40	; 0x28
    a850:	4770      	bx	lr

0000a852 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>:
    a852:	b580      	push	{r7, lr}
    a854:	b08a      	sub	sp, #40	; 0x28
    a856:	9009      	str	r0, [sp, #36]	; 0x24
    a858:	f7ff fe30 	bl	a4bc <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>
    a85c:	9108      	str	r1, [sp, #32]
    a85e:	9007      	str	r0, [sp, #28]
    a860:	9306      	str	r3, [sp, #24]
    a862:	9205      	str	r2, [sp, #20]
    a864:	e7ff      	b.n	a866 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x14>
    a866:	9807      	ldr	r0, [sp, #28]
    a868:	9908      	ldr	r1, [sp, #32]
    a86a:	9a05      	ldr	r2, [sp, #20]
    a86c:	9b06      	ldr	r3, [sp, #24]
    a86e:	f000 f859 	bl	a924 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>
    a872:	9104      	str	r1, [sp, #16]
    a874:	9003      	str	r0, [sp, #12]
    a876:	9302      	str	r3, [sp, #8]
    a878:	9201      	str	r2, [sp, #4]
    a87a:	e7ff      	b.n	a87c <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x2a>
    a87c:	9803      	ldr	r0, [sp, #12]
    a87e:	9904      	ldr	r1, [sp, #16]
    a880:	9a01      	ldr	r2, [sp, #4]
    a882:	9b02      	ldr	r3, [sp, #8]
    a884:	b00a      	add	sp, #40	; 0x28
    a886:	bd80      	pop	{r7, pc}

0000a888 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>:
#[derive(ToPrimitive)]
    a888:	b08a      	sub	sp, #40	; 0x28
    a88a:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Orientation {
    a88c:	7800      	ldrb	r0, [r0, #0]
    a88e:	4601      	mov	r1, r0
    a890:	2800      	cmp	r0, #0
    a892:	9101      	str	r1, [sp, #4]
    a894:	d00f      	beq.n	a8b6 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x2e>
    a896:	e7ff      	b.n	a898 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x10>
    a898:	9801      	ldr	r0, [sp, #4]
    a89a:	2860      	cmp	r0, #96	; 0x60
    a89c:	d00f      	beq.n	a8be <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x36>
    a89e:	e7ff      	b.n	a8a0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x18>
    a8a0:	9801      	ldr	r0, [sp, #4]
    a8a2:	28a0      	cmp	r0, #160	; 0xa0
    a8a4:	d001      	beq.n	a8aa <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x22>
    a8a6:	e7ff      	b.n	a8a8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x20>
    a8a8:	e00e      	b.n	a8c8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x40>
    a8aa:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    a8ac:	9007      	str	r0, [sp, #28]
    a8ae:	20a0      	movs	r0, #160	; 0xa0
    a8b0:	9006      	str	r0, [sp, #24]
    a8b2:	e00e      	b.n	a8d2 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a8b4:	defe      	udf	#254	; 0xfe
    a8b6:	2000      	movs	r0, #0
    a8b8:	9007      	str	r0, [sp, #28]
    a8ba:	9006      	str	r0, [sp, #24]
    a8bc:	e009      	b.n	a8d2 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a8be:	2000      	movs	r0, #0
    a8c0:	9007      	str	r0, [sp, #28]
    a8c2:	2060      	movs	r0, #96	; 0x60
    a8c4:	9006      	str	r0, [sp, #24]
    a8c6:	e004      	b.n	a8d2 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a8c8:	2000      	movs	r0, #0
    a8ca:	9007      	str	r0, [sp, #28]
    a8cc:	20c0      	movs	r0, #192	; 0xc0
    a8ce:	9006      	str	r0, [sp, #24]
    a8d0:	e7ff      	b.n	a8d2 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a8d2:	9806      	ldr	r0, [sp, #24]
    a8d4:	9907      	ldr	r1, [sp, #28]
    a8d6:	9105      	str	r1, [sp, #20]
    a8d8:	9004      	str	r0, [sp, #16]
    a8da:	2000      	movs	r0, #0
    a8dc:	9003      	str	r0, [sp, #12]
    a8de:	2001      	movs	r0, #1
    a8e0:	9002      	str	r0, [sp, #8]
    a8e2:	9802      	ldr	r0, [sp, #8]
    a8e4:	9903      	ldr	r1, [sp, #12]
    a8e6:	9a04      	ldr	r2, [sp, #16]
    a8e8:	9b05      	ldr	r3, [sp, #20]
    a8ea:	b00a      	add	sp, #40	; 0x28
    a8ec:	4770      	bx	lr

0000a8ee <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>:
    a8ee:	b580      	push	{r7, lr}
    a8f0:	b08a      	sub	sp, #40	; 0x28
    a8f2:	9009      	str	r0, [sp, #36]	; 0x24
    a8f4:	f7ff ffc8 	bl	a888 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>
    a8f8:	9108      	str	r1, [sp, #32]
    a8fa:	9007      	str	r0, [sp, #28]
    a8fc:	9306      	str	r3, [sp, #24]
    a8fe:	9205      	str	r2, [sp, #20]
    a900:	e7ff      	b.n	a902 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x14>
    a902:	9807      	ldr	r0, [sp, #28]
    a904:	9908      	ldr	r1, [sp, #32]
    a906:	9a05      	ldr	r2, [sp, #20]
    a908:	9b06      	ldr	r3, [sp, #24]
    a90a:	f000 f863 	bl	a9d4 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>
    a90e:	9104      	str	r1, [sp, #16]
    a910:	9003      	str	r0, [sp, #12]
    a912:	9302      	str	r3, [sp, #8]
    a914:	9201      	str	r2, [sp, #4]
    a916:	e7ff      	b.n	a918 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x2a>
    a918:	9803      	ldr	r0, [sp, #12]
    a91a:	9904      	ldr	r1, [sp, #16]
    a91c:	9a01      	ldr	r2, [sp, #4]
    a91e:	9b02      	ldr	r3, [sp, #8]
    a920:	b00a      	add	sp, #40	; 0x28
    a922:	bd80      	pop	{r7, pc}

0000a924 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>:
    a924:	b5b0      	push	{r4, r5, r7, lr}
    a926:	b090      	sub	sp, #64	; 0x40
    a928:	469c      	mov	ip, r3
    a92a:	4696      	mov	lr, r2
    a92c:	460c      	mov	r4, r1
    a92e:	4605      	mov	r5, r0
    a930:	9103      	str	r1, [sp, #12]
    a932:	9002      	str	r0, [sp, #8]
    a934:	9305      	str	r3, [sp, #20]
    a936:	9204      	str	r2, [sp, #16]
    a938:	2000      	movs	r0, #0
    a93a:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    a93e:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    a942:	2001      	movs	r0, #1
    a944:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    a948:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    a94c:	9802      	ldr	r0, [sp, #8]
    a94e:	2800      	cmp	r0, #0
    a950:	d001      	beq.n	a956 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x32>
    a952:	e7ff      	b.n	a954 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x30>
    a954:	e004      	b.n	a960 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x3c>
    a956:	2000      	movs	r0, #0
    a958:	9007      	str	r0, [sp, #28]
    a95a:	9006      	str	r0, [sp, #24]
    a95c:	e023      	b.n	a9a6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    a95e:	defe      	udf	#254	; 0xfe
    a960:	2000      	movs	r0, #0
    a962:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    a966:	9904      	ldr	r1, [sp, #16]
    a968:	9a05      	ldr	r2, [sp, #20]
    a96a:	920f      	str	r2, [sp, #60]	; 0x3c
    a96c:	910e      	str	r1, [sp, #56]	; 0x38
    a96e:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    a972:	920b      	str	r2, [sp, #44]	; 0x2c
    a974:	910a      	str	r1, [sp, #40]	; 0x28
    a976:	980a      	ldr	r0, [sp, #40]	; 0x28
    a978:	990b      	ldr	r1, [sp, #44]	; 0x2c
    a97a:	f000 f883 	bl	aa84 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>
    a97e:	9101      	str	r1, [sp, #4]
    a980:	9000      	str	r0, [sp, #0]
    a982:	e7ff      	b.n	a984 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x60>
    a984:	9800      	ldr	r0, [sp, #0]
    a986:	9008      	str	r0, [sp, #32]
    a988:	9901      	ldr	r1, [sp, #4]
    a98a:	9109      	str	r1, [sp, #36]	; 0x24
    a98c:	2200      	movs	r2, #0
    a98e:	9207      	str	r2, [sp, #28]
    a990:	2201      	movs	r2, #1
    a992:	9206      	str	r2, [sp, #24]
    a994:	e007      	b.n	a9a6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    a996:	9802      	ldr	r0, [sp, #8]
    a998:	2801      	cmp	r0, #1
    a99a:	d010      	beq.n	a9be <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x9a>
    a99c:	e019      	b.n	a9d2 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xae>
    a99e:	2000      	movs	r0, #0
    a9a0:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    a9a4:	e7f7      	b.n	a996 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    a9a6:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    a9aa:	07c0      	lsls	r0, r0, #31
    a9ac:	2800      	cmp	r0, #0
    a9ae:	d1f6      	bne.n	a99e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x7a>
    a9b0:	e7f1      	b.n	a996 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    a9b2:	9806      	ldr	r0, [sp, #24]
    a9b4:	9907      	ldr	r1, [sp, #28]
    a9b6:	9a08      	ldr	r2, [sp, #32]
    a9b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a9ba:	b010      	add	sp, #64	; 0x40
    a9bc:	bdb0      	pop	{r4, r5, r7, pc}
    a9be:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    a9c2:	07c0      	lsls	r0, r0, #31
    a9c4:	2800      	cmp	r0, #0
    a9c6:	d0f4      	beq.n	a9b2 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    a9c8:	e7ff      	b.n	a9ca <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xa6>
    a9ca:	2000      	movs	r0, #0
    a9cc:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    a9d0:	e7ef      	b.n	a9b2 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    a9d2:	e7ee      	b.n	a9b2 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>

0000a9d4 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>:
    a9d4:	b5b0      	push	{r4, r5, r7, lr}
    a9d6:	b090      	sub	sp, #64	; 0x40
    a9d8:	469c      	mov	ip, r3
    a9da:	4696      	mov	lr, r2
    a9dc:	460c      	mov	r4, r1
    a9de:	4605      	mov	r5, r0
    a9e0:	9103      	str	r1, [sp, #12]
    a9e2:	9002      	str	r0, [sp, #8]
    a9e4:	9305      	str	r3, [sp, #20]
    a9e6:	9204      	str	r2, [sp, #16]
    a9e8:	2000      	movs	r0, #0
    a9ea:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    a9ee:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    a9f2:	2001      	movs	r0, #1
    a9f4:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    a9f8:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    a9fc:	9802      	ldr	r0, [sp, #8]
    a9fe:	2800      	cmp	r0, #0
    aa00:	d001      	beq.n	aa06 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x32>
    aa02:	e7ff      	b.n	aa04 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x30>
    aa04:	e004      	b.n	aa10 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x3c>
    aa06:	2000      	movs	r0, #0
    aa08:	9007      	str	r0, [sp, #28]
    aa0a:	9006      	str	r0, [sp, #24]
    aa0c:	e023      	b.n	aa56 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    aa0e:	defe      	udf	#254	; 0xfe
    aa10:	2000      	movs	r0, #0
    aa12:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aa16:	9904      	ldr	r1, [sp, #16]
    aa18:	9a05      	ldr	r2, [sp, #20]
    aa1a:	920f      	str	r2, [sp, #60]	; 0x3c
    aa1c:	910e      	str	r1, [sp, #56]	; 0x38
    aa1e:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aa22:	920b      	str	r2, [sp, #44]	; 0x2c
    aa24:	910a      	str	r1, [sp, #40]	; 0x28
    aa26:	980a      	ldr	r0, [sp, #40]	; 0x28
    aa28:	990b      	ldr	r1, [sp, #44]	; 0x2c
    aa2a:	f009 fef5 	bl	14818 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>
    aa2e:	9101      	str	r1, [sp, #4]
    aa30:	9000      	str	r0, [sp, #0]
    aa32:	e7ff      	b.n	aa34 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x60>
    aa34:	9800      	ldr	r0, [sp, #0]
    aa36:	9008      	str	r0, [sp, #32]
    aa38:	9901      	ldr	r1, [sp, #4]
    aa3a:	9109      	str	r1, [sp, #36]	; 0x24
    aa3c:	2200      	movs	r2, #0
    aa3e:	9207      	str	r2, [sp, #28]
    aa40:	2201      	movs	r2, #1
    aa42:	9206      	str	r2, [sp, #24]
    aa44:	e007      	b.n	aa56 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    aa46:	9802      	ldr	r0, [sp, #8]
    aa48:	2801      	cmp	r0, #1
    aa4a:	d010      	beq.n	aa6e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x9a>
    aa4c:	e019      	b.n	aa82 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xae>
    aa4e:	2000      	movs	r0, #0
    aa50:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aa54:	e7f7      	b.n	aa46 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    aa56:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    aa5a:	07c0      	lsls	r0, r0, #31
    aa5c:	2800      	cmp	r0, #0
    aa5e:	d1f6      	bne.n	aa4e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x7a>
    aa60:	e7f1      	b.n	aa46 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    aa62:	9806      	ldr	r0, [sp, #24]
    aa64:	9907      	ldr	r1, [sp, #28]
    aa66:	9a08      	ldr	r2, [sp, #32]
    aa68:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aa6a:	b010      	add	sp, #64	; 0x40
    aa6c:	bdb0      	pop	{r4, r5, r7, pc}
    aa6e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    aa72:	07c0      	lsls	r0, r0, #31
    aa74:	2800      	cmp	r0, #0
    aa76:	d0f4      	beq.n	aa62 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    aa78:	e7ff      	b.n	aa7a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xa6>
    aa7a:	2000      	movs	r0, #0
    aa7c:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aa80:	e7ef      	b.n	aa62 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    aa82:	e7ee      	b.n	aa62 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>

0000aa84 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>:
    aa84:	b084      	sub	sp, #16
    aa86:	460a      	mov	r2, r1
    aa88:	4603      	mov	r3, r0
    aa8a:	9103      	str	r1, [sp, #12]
    aa8c:	9002      	str	r0, [sp, #8]
    aa8e:	b004      	add	sp, #16
    aa90:	4770      	bx	lr

0000aa92 <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E>:
    aa92:	b084      	sub	sp, #16
    aa94:	9000      	str	r0, [sp, #0]
    aa96:	9101      	str	r1, [sp, #4]
    aa98:	9102      	str	r1, [sp, #8]
    aa9a:	9003      	str	r0, [sp, #12]
    aa9c:	6802      	ldr	r2, [r0, #0]
    aa9e:	6840      	ldr	r0, [r0, #4]
    aaa0:	680b      	ldr	r3, [r1, #0]
    aaa2:	6849      	ldr	r1, [r1, #4]
    aaa4:	4048      	eors	r0, r1
    aaa6:	ea82 0103 	eor.w	r1, r2, r3
    aaaa:	4308      	orrs	r0, r1
    aaac:	fab0 f080 	clz	r0, r0
    aab0:	0940      	lsrs	r0, r0, #5
    aab2:	b004      	add	sp, #16
    aab4:	4770      	bx	lr

0000aab6 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E>:
/// ```rust
/// let peripherals = nrf52::Peripherals::take().unwrap();
/// let nfcpins = peripherals.UICR.nfcpins.read().bits();
/// console::print("nfcpins = "); console::printhex(nfcpins as u8); console::print("\n");
/// ```
pub fn start_touch_sensor() -> MynewtResult<()> {
    aab6:	b5b0      	push	{r4, r5, r7, lr}
    aab8:	b0be      	sub	sp, #248	; 0xf8
    console::print("Rust touch sensor\n");
    aaba:	f24c 1010 	movw	r0, #49424	; 0xc110
    aabe:	f2c0 0001 	movt	r0, #1
    aac2:	2112      	movs	r1, #18
    aac4:	f7fe fa94 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    aac8:	e7ff      	b.n	aaca <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x14>

    //  Init GPIO for the Reset Pin
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    aaca:	f240 1064 	movw	r0, #356	; 0x164
    aace:	f2c2 0000 	movt	r0, #8192	; 0x2000
    aad2:	210a      	movs	r1, #10
    aad4:	f009 fb1f 	bl	14116 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    aad8:	9012      	str	r0, [sp, #72]	; 0x48
    aada:	e7ff      	b.n	aadc <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x26>
    aadc:	9812      	ldr	r0, [sp, #72]	; 0x48
    aade:	f7fe f84b 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    aae2:	9014      	str	r0, [sp, #80]	; 0x50
    aae4:	e7ff      	b.n	aae6 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x30>
    aae6:	9814      	ldr	r0, [sp, #80]	; 0x50
    aae8:	1e41      	subs	r1, r0, #1
    aaea:	bf18      	it	ne
    aaec:	2101      	movne	r1, #1
    aaee:	2801      	cmp	r0, #1
    aaf0:	d001      	beq.n	aaf6 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x40>
    aaf2:	e7ff      	b.n	aaf4 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x3e>
    aaf4:	e008      	b.n	ab08 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x52>

    //  Reset the touch controller by switching the Reset Pin low then high with pauses. Based on https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L1017-L1167
    unsafe {
        TOUCH_RESET.set_low() ? ;
    aaf6:	f240 1064 	movw	r0, #356	; 0x164
    aafa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    aafe:	f009 fba3 	bl	14248 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    ab02:	9011      	str	r0, [sp, #68]	; 0x44
    ab04:	e00f      	b.n	ab26 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x70>
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    ab06:	defe      	udf	#254	; 0xfe
    ab08:	9814      	ldr	r0, [sp, #80]	; 0x50
    ab0a:	9036      	str	r0, [sp, #216]	; 0xd8
    ab0c:	f007 fd00 	bl	12510 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    ab10:	9010      	str	r0, [sp, #64]	; 0x40
    ab12:	e002      	b.n	ab1a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x64>
    assert_eq!(rc, 0, "IRQ init fail");

    //  Start monitoring for touch controller interrupts
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    Ok(())
}
    ab14:	9813      	ldr	r0, [sp, #76]	; 0x4c
    ab16:	b03e      	add	sp, #248	; 0xf8
    ab18:	bdb0      	pop	{r4, r5, r7, pc}
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    ab1a:	9810      	ldr	r0, [sp, #64]	; 0x40
    ab1c:	f7fe f820 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    ab20:	9013      	str	r0, [sp, #76]	; 0x4c
    ab22:	e7ff      	b.n	ab24 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x6e>
    ab24:	e7f6      	b.n	ab14 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>
        TOUCH_RESET.set_low() ? ;
    ab26:	9811      	ldr	r0, [sp, #68]	; 0x44
    ab28:	f7fe f826 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    ab2c:	9015      	str	r0, [sp, #84]	; 0x54
    ab2e:	e7ff      	b.n	ab30 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x7a>
    ab30:	9815      	ldr	r0, [sp, #84]	; 0x54
    ab32:	1e41      	subs	r1, r0, #1
    ab34:	bf18      	it	ne
    ab36:	2101      	movne	r1, #1
    ab38:	2801      	cmp	r0, #1
    ab3a:	d001      	beq.n	ab40 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x8a>
    ab3c:	e7ff      	b.n	ab3e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x88>
    ab3e:	e008      	b.n	ab52 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x9c>
        TOUCH_DELAY.delay_ms(20);
    ab40:	f240 1068 	movw	r0, #360	; 0x168
    ab44:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ab48:	2114      	movs	r1, #20
    ab4a:	f009 fb94 	bl	14276 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    ab4e:	e00d      	b.n	ab6c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb6>
        TOUCH_RESET.set_low() ? ;
    ab50:	defe      	udf	#254	; 0xfe
    ab52:	9815      	ldr	r0, [sp, #84]	; 0x54
    ab54:	9037      	str	r0, [sp, #220]	; 0xdc
    ab56:	f007 fcdb 	bl	12510 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    ab5a:	900f      	str	r0, [sp, #60]	; 0x3c
    ab5c:	e7ff      	b.n	ab5e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xa8>
    ab5e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    ab60:	f7fd fffe 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    ab64:	9013      	str	r0, [sp, #76]	; 0x4c
    ab66:	e7ff      	b.n	ab68 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb2>
    ab68:	e7ff      	b.n	ab6a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb4>
    ab6a:	e7d3      	b.n	ab14 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>
        TOUCH_RESET.set_high() ? ;
    ab6c:	f240 1064 	movw	r0, #356	; 0x164
    ab70:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ab74:	f009 fb73 	bl	1425e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    ab78:	900e      	str	r0, [sp, #56]	; 0x38
    ab7a:	e7ff      	b.n	ab7c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xc6>
    ab7c:	980e      	ldr	r0, [sp, #56]	; 0x38
    ab7e:	f7fd fffb 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    ab82:	9016      	str	r0, [sp, #88]	; 0x58
    ab84:	e7ff      	b.n	ab86 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xd0>
    ab86:	9816      	ldr	r0, [sp, #88]	; 0x58
    ab88:	1e41      	subs	r1, r0, #1
    ab8a:	bf18      	it	ne
    ab8c:	2101      	movne	r1, #1
    ab8e:	2801      	cmp	r0, #1
    ab90:	d001      	beq.n	ab96 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xe0>
    ab92:	e7ff      	b.n	ab94 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xde>
    ab94:	e008      	b.n	aba8 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xf2>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    ab96:	f240 1068 	movw	r0, #360	; 0x168
    ab9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ab9e:	21c8      	movs	r1, #200	; 0xc8
    aba0:	f009 fb69 	bl	14276 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    aba4:	e00c      	b.n	abc0 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x10a>
        TOUCH_RESET.set_high() ? ;
    aba6:	defe      	udf	#254	; 0xfe
    aba8:	9816      	ldr	r0, [sp, #88]	; 0x58
    abaa:	9038      	str	r0, [sp, #224]	; 0xe0
    abac:	f007 fcb0 	bl	12510 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    abb0:	900d      	str	r0, [sp, #52]	; 0x34
    abb2:	e7ff      	b.n	abb4 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xfe>
    abb4:	980d      	ldr	r0, [sp, #52]	; 0x34
    abb6:	f7fd ffd3 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    abba:	9013      	str	r0, [sp, #76]	; 0x4c
    abbc:	e7ff      	b.n	abbe <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x108>
    abbe:	e7d4      	b.n	ab6a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb4>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    abc0:	f240 1068 	movw	r0, #360	; 0x168
    abc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    abc8:	21c8      	movs	r1, #200	; 0xc8
    abca:	f009 fb54 	bl	14276 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    abce:	e7ff      	b.n	abd0 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x11a>
    unsafe { TOUCH_EVENT.ev_cb = Some( touch_event_callback ) };
    abd0:	f64a 5073 	movw	r0, #44403	; 0xad73
    abd4:	f2c0 0000 	movt	r0, #0
    abd8:	9017      	str	r0, [sp, #92]	; 0x5c
    abda:	9817      	ldr	r0, [sp, #92]	; 0x5c
    abdc:	f240 11fc 	movw	r1, #508	; 0x1fc
    abe0:	f2c2 0100 	movt	r1, #8192	; 0x2000
    abe4:	6048      	str	r0, [r1, #4]
        Some( touch_interrupt_handler ),  //  Call `touch_interrupt_handler()` upon detecting interrupt
    abe6:	f64a 5027 	movw	r0, #44327	; 0xad27
    abea:	f2c0 0000 	movt	r0, #0
    abee:	9019      	str	r0, [sp, #100]	; 0x64
        core::ptr::null_mut(),            //  No arguments for `touch_interrupt_handler()`
    abf0:	e7ff      	b.n	abf2 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x13c>
    let rc = unsafe { hal::hal_gpio_irq_init(
    abf2:	9919      	ldr	r1, [sp, #100]	; 0x64
    abf4:	4668      	mov	r0, sp
    abf6:	2201      	movs	r2, #1
    abf8:	6002      	str	r2, [r0, #0]
    abfa:	201c      	movs	r0, #28
    abfc:	2200      	movs	r2, #0
    abfe:	2302      	movs	r3, #2
    ac00:	f00c fdc6 	bl	17790 <hal_gpio_irq_init>
    ac04:	9018      	str	r0, [sp, #96]	; 0x60
    ac06:	e7ff      	b.n	ac08 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x152>
    assert_eq!(rc, 0, "IRQ init fail");
    ac08:	f24c 1028 	movw	r0, #49448	; 0xc128
    ac0c:	f2c0 0001 	movt	r0, #1
    ac10:	6800      	ldr	r0, [r0, #0]
    ac12:	a918      	add	r1, sp, #96	; 0x60
    ac14:	911a      	str	r1, [sp, #104]	; 0x68
    ac16:	901b      	str	r0, [sp, #108]	; 0x6c
    ac18:	981a      	ldr	r0, [sp, #104]	; 0x68
    ac1a:	9039      	str	r0, [sp, #228]	; 0xe4
    ac1c:	991b      	ldr	r1, [sp, #108]	; 0x6c
    ac1e:	913a      	str	r1, [sp, #232]	; 0xe8
    ac20:	6802      	ldr	r2, [r0, #0]
    ac22:	680b      	ldr	r3, [r1, #0]
    ac24:	429a      	cmp	r2, r3
    ac26:	900c      	str	r0, [sp, #48]	; 0x30
    ac28:	910b      	str	r1, [sp, #44]	; 0x2c
    ac2a:	d104      	bne.n	ac36 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x180>
    ac2c:	e7ff      	b.n	ac2e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x178>
    ac2e:	201c      	movs	r0, #28
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    ac30:	f00c fdea 	bl	17808 <hal_gpio_irq_enable>
    ac34:	e072      	b.n	ad1c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x266>
    assert_eq!(rc, 0, "IRQ init fail");
    ac36:	f24c 1080 	movw	r0, #49536	; 0xc180
    ac3a:	f2c0 0001 	movt	r0, #1
    ac3e:	6801      	ldr	r1, [r0, #0]
    ac40:	980c      	ldr	r0, [sp, #48]	; 0x30
    ac42:	902b      	str	r0, [sp, #172]	; 0xac
    ac44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ac46:	922c      	str	r2, [sp, #176]	; 0xb0
    ac48:	f24c 139c 	movw	r3, #49564	; 0xc19c
    ac4c:	f2c0 0301 	movt	r3, #1
    ac50:	681b      	ldr	r3, [r3, #0]
    ac52:	f24c 1ca0 	movw	ip, #49568	; 0xc1a0
    ac56:	f2c0 0c01 	movt	ip, #1
    ac5a:	f8dc c000 	ldr.w	ip, [ip]
    ac5e:	46ee      	mov	lr, sp
    ac60:	2400      	movs	r4, #0
    ac62:	f8ce 4000 	str.w	r4, [lr]
    ac66:	a82d      	add	r0, sp, #180	; 0xb4
    ac68:	2201      	movs	r2, #1
    ac6a:	910a      	str	r1, [sp, #40]	; 0x28
    ac6c:	4619      	mov	r1, r3
    ac6e:	4663      	mov	r3, ip
    ac70:	f009 fdf6 	bl	14860 <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>
    ac74:	e7ff      	b.n	ac76 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x1c0>
    ac76:	a82b      	add	r0, sp, #172	; 0xac
    ac78:	9028      	str	r0, [sp, #160]	; 0xa0
    ac7a:	a82c      	add	r0, sp, #176	; 0xb0
    ac7c:	9029      	str	r0, [sp, #164]	; 0xa4
    ac7e:	a82d      	add	r0, sp, #180	; 0xb4
    ac80:	902a      	str	r0, [sp, #168]	; 0xa8
    ac82:	9828      	ldr	r0, [sp, #160]	; 0xa0
    ac84:	903b      	str	r0, [sp, #236]	; 0xec
    ac86:	9929      	ldr	r1, [sp, #164]	; 0xa4
    ac88:	913c      	str	r1, [sp, #240]	; 0xf0
    ac8a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    ac8c:	923d      	str	r2, [sp, #244]	; 0xf4
    ac8e:	f241 63b7 	movw	r3, #5815	; 0x16b7
    ac92:	f2c0 0301 	movt	r3, #1
    ac96:	9109      	str	r1, [sp, #36]	; 0x24
    ac98:	4619      	mov	r1, r3
    ac9a:	9208      	str	r2, [sp, #32]
    ac9c:	f7fe fb5d 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    aca0:	9007      	str	r0, [sp, #28]
    aca2:	9106      	str	r1, [sp, #24]
    aca4:	e7ff      	b.n	aca6 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x1f0>
    aca6:	f241 61b7 	movw	r1, #5815	; 0x16b7
    acaa:	f2c0 0101 	movt	r1, #1
    acae:	9809      	ldr	r0, [sp, #36]	; 0x24
    acb0:	f7fe fb53 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    acb4:	9005      	str	r0, [sp, #20]
    acb6:	9104      	str	r1, [sp, #16]
    acb8:	e7ff      	b.n	acba <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x204>
    acba:	f645 31bb 	movw	r1, #23483	; 0x5bbb
    acbe:	f2c0 0101 	movt	r1, #1
    acc2:	9808      	ldr	r0, [sp, #32]
    acc4:	f7fe fb88 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    acc8:	9003      	str	r0, [sp, #12]
    acca:	9102      	str	r1, [sp, #8]
    accc:	e7ff      	b.n	acce <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x218>
    acce:	9807      	ldr	r0, [sp, #28]
    acd0:	9022      	str	r0, [sp, #136]	; 0x88
    acd2:	9906      	ldr	r1, [sp, #24]
    acd4:	9123      	str	r1, [sp, #140]	; 0x8c
    acd6:	9a05      	ldr	r2, [sp, #20]
    acd8:	9224      	str	r2, [sp, #144]	; 0x90
    acda:	9b04      	ldr	r3, [sp, #16]
    acdc:	9325      	str	r3, [sp, #148]	; 0x94
    acde:	f8dd c00c 	ldr.w	ip, [sp, #12]
    ace2:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
    ace6:	f8dd e008 	ldr.w	lr, [sp, #8]
    acea:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
    acee:	466c      	mov	r4, sp
    acf0:	2503      	movs	r5, #3
    acf2:	6025      	str	r5, [r4, #0]
    acf4:	a81c      	add	r0, sp, #112	; 0x70
    acf6:	ab22      	add	r3, sp, #136	; 0x88
    acf8:	990a      	ldr	r1, [sp, #40]	; 0x28
    acfa:	462a      	mov	r2, r5
    acfc:	f009 fdb0 	bl	14860 <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>
    ad00:	e7ff      	b.n	ad02 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x24c>
    ad02:	f24c 10c0 	movw	r0, #49600	; 0xc1c0
    ad06:	f2c0 0001 	movt	r0, #1
    ad0a:	f00a fc68 	bl	155de <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    ad0e:	9001      	str	r0, [sp, #4]
    ad10:	e7ff      	b.n	ad12 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x25c>
    ad12:	a81c      	add	r0, sp, #112	; 0x70
    ad14:	9901      	ldr	r1, [sp, #4]
    ad16:	f00a fc9f 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    ad1a:	defe      	udf	#254	; 0xfe
    ad1c:	2000      	movs	r0, #0
    Ok(())
    ad1e:	9013      	str	r0, [sp, #76]	; 0x4c
    ad20:	2001      	movs	r0, #1
    ad22:	9013      	str	r0, [sp, #76]	; 0x4c
}
    ad24:	e6f6      	b.n	ab14 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>

0000ad26 <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE>:

/// Interrupt handler for the touch controller, triggered when a touch is detected
extern "C" fn touch_interrupt_handler(arg: *mut core::ffi::c_void) {
    ad26:	b580      	push	{r7, lr}
    ad28:	b086      	sub	sp, #24
    ad2a:	9004      	str	r0, [sp, #16]
    //  We forward a touch event to the Default Event Queue for deferred processing.  Don't do any processing here.
    unsafe { TOUCH_EVENT.ev_arg = arg };
    ad2c:	f240 11fc 	movw	r1, #508	; 0x1fc
    ad30:	f2c2 0100 	movt	r1, #8192	; 0x2000
    ad34:	6088      	str	r0, [r1, #8]
    ad36:	a802      	add	r0, sp, #8
    //  Fetch the Default Event Queue. TODO: Use dedicated Event Queue for higher priority processing.
    let queue = os::eventq_dflt_get()
    ad38:	f7fd ff9a 	bl	8c70 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    ad3c:	e7ff      	b.n	ad3e <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x18>
    ad3e:	f64b 41b2 	movw	r1, #48306	; 0xbcb2
    ad42:	f2c0 0101 	movt	r1, #1
    ad46:	f24c 13d8 	movw	r3, #49624	; 0xc1d8
    ad4a:	f2c0 0301 	movt	r3, #1
    ad4e:	a802      	add	r0, sp, #8
    ad50:	2208      	movs	r2, #8
    ad52:	f7fd fd3e 	bl	87d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>
    ad56:	4601      	mov	r1, r0
    ad58:	9005      	str	r0, [sp, #20]
    ad5a:	9101      	str	r1, [sp, #4]
    ad5c:	e7ff      	b.n	ad5e <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x38>
        .expect("GET fail");
    unsafe { os::os_eventq_put(queue, &mut TOUCH_EVENT) };  //  Trigger the callback function `touch_event_callback()`
    ad5e:	f240 11fc 	movw	r1, #508	; 0x1fc
    ad62:	f2c2 0100 	movt	r1, #8192	; 0x2000
    ad66:	9801      	ldr	r0, [sp, #4]
    ad68:	f00d fde1 	bl	1892e <os_eventq_put>
    ad6c:	e7ff      	b.n	ad6e <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x48>
    //console::print("touch\n"); ////
}
    ad6e:	b006      	add	sp, #24
    ad70:	bd80      	pop	{r7, pc}

0000ad72 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E>:

/// Callback for the touch event that is triggered when a touch is detected
extern "C" fn touch_event_callback(_event: *mut os_event) {
    ad72:	b580      	push	{r7, lr}
    ad74:	b094      	sub	sp, #80	; 0x50
    ad76:	900e      	str	r0, [sp, #56]	; 0x38
    //  console::printhex(unsafe { os::os_time_get() } as u8); console::print(" touch\n");
    unsafe { 
        //  Fetch the touch data from the touch controller
        read_touchdata(&mut TOUCH_DATA)
    ad78:	f240 1068 	movw	r0, #360	; 0x168
    ad7c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ad80:	f000 f894 	bl	aeac <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E>
    ad84:	9006      	str	r0, [sp, #24]
    ad86:	e7ff      	b.n	ad88 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x16>
    ad88:	f24c 11e8 	movw	r1, #49640	; 0xc1e8
    ad8c:	f2c0 0101 	movt	r1, #1
    ad90:	f24c 13f8 	movw	r3, #49656	; 0xc1f8
    ad94:	f2c0 0301 	movt	r3, #1
    ad98:	220e      	movs	r2, #14
    ad9a:	9806      	ldr	r0, [sp, #24]
    ad9c:	f7fd fead 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    ada0:	e7ff      	b.n	ada2 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x30>
            .expect("touchdata fail");
        //  Handle each touch data info
        for i in 0..TOUCH_DATA.count as usize {
    ada2:	f240 1068 	movw	r0, #360	; 0x168
    ada6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    adaa:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
    adae:	2100      	movs	r1, #0
    adb0:	9107      	str	r1, [sp, #28]
    adb2:	9008      	str	r0, [sp, #32]
    adb4:	9807      	ldr	r0, [sp, #28]
    adb6:	9908      	ldr	r1, [sp, #32]
    adb8:	f006 ff47 	bl	11c4a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    adbc:	9005      	str	r0, [sp, #20]
    adbe:	9104      	str	r1, [sp, #16]
    adc0:	e7ff      	b.n	adc2 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x50>
    adc2:	9805      	ldr	r0, [sp, #20]
    adc4:	9009      	str	r0, [sp, #36]	; 0x24
    adc6:	9904      	ldr	r1, [sp, #16]
    adc8:	910a      	str	r1, [sp, #40]	; 0x28
    adca:	e7ff      	b.n	adcc <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
    adcc:	a809      	add	r0, sp, #36	; 0x24
    adce:	f006 feb1 	bl	11b34 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    add2:	910c      	str	r1, [sp, #48]	; 0x30
    add4:	900b      	str	r0, [sp, #44]	; 0x2c
    add6:	e7ff      	b.n	add8 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x66>
    add8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    adda:	2800      	cmp	r0, #0
    addc:	d001      	beq.n	ade2 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x70>
    adde:	e7ff      	b.n	ade0 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x6e>
    ade0:	e002      	b.n	ade8 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x76>
            console::print(", x: "); console::printint(x as i32); 
            console::print(", y: "); console::printint(y as i32); console::print("\n");
        }
        console::flush();   
    } */
}
    ade2:	b014      	add	sp, #80	; 0x50
    ade4:	bd80      	pop	{r7, pc}
        for i in 0..TOUCH_DATA.count as usize {
    ade6:	defe      	udf	#254	; 0xfe
    ade8:	980c      	ldr	r0, [sp, #48]	; 0x30
    adea:	900f      	str	r0, [sp, #60]	; 0x3c
    adec:	9010      	str	r0, [sp, #64]	; 0x40
    adee:	9011      	str	r0, [sp, #68]	; 0x44
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    adf0:	2809      	cmp	r0, #9
    adf2:	9003      	str	r0, [sp, #12]
    adf4:	d851      	bhi.n	ae9a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x128>
    adf6:	e7ff      	b.n	adf8 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x86>
    adf8:	f240 1068 	movw	r0, #360	; 0x168
    adfc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ae00:	9903      	ldr	r1, [sp, #12]
    ae02:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    ae06:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
    ae0a:	4603      	mov	r3, r0
    ae0c:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
    ae10:	f8b2 c002 	ldrh.w	ip, [r2, #2]
    ae14:	46e6      	mov	lr, ip
    ae16:	f8ad c04c 	strh.w	ip, [sp, #76]	; 0x4c
    ae1a:	7912      	ldrb	r2, [r2, #4]
    ae1c:	4694      	mov	ip, r2
    ae1e:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
            if x == 0 && y == 0 { continue; }
    ae22:	2800      	cmp	r0, #0
    ae24:	9302      	str	r3, [sp, #8]
    ae26:	f8cd e004 	str.w	lr, [sp, #4]
    ae2a:	f8cd c000 	str.w	ip, [sp]
    ae2e:	d008      	beq.n	ae42 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xd0>
    ae30:	e003      	b.n	ae3a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc8>
    ae32:	2001      	movs	r0, #1
    ae34:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    ae38:	e008      	b.n	ae4c <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xda>
    ae3a:	2000      	movs	r0, #0
    ae3c:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    ae40:	e004      	b.n	ae4c <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xda>
    ae42:	9801      	ldr	r0, [sp, #4]
    ae44:	0401      	lsls	r1, r0, #16
    ae46:	2900      	cmp	r1, #0
    ae48:	d0f3      	beq.n	ae32 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc0>
    ae4a:	e7f6      	b.n	ae3a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc8>
    ae4c:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    ae50:	07c0      	lsls	r0, r0, #31
    ae52:	2800      	cmp	r0, #0
    ae54:	d105      	bne.n	ae62 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf0>
    ae56:	e7ff      	b.n	ae58 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xe6>
            if action != 0 && action != 2 { continue; }
    ae58:	9800      	ldr	r0, [sp, #0]
    ae5a:	0601      	lsls	r1, r0, #24
    ae5c:	2900      	cmp	r1, #0
    ae5e:	d10a      	bne.n	ae76 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x104>
    ae60:	e005      	b.n	ae6e <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xfc>
            if x == 0 && y == 0 { continue; }
    ae62:	e7ff      	b.n	ae64 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf2>
    ae64:	e7b2      	b.n	adcc <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
    ae66:	2001      	movs	r0, #1
            if action != 0 && action != 2 { continue; }
    ae68:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    ae6c:	e008      	b.n	ae80 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x10e>
    ae6e:	2000      	movs	r0, #0
    ae70:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    ae74:	e004      	b.n	ae80 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x10e>
    ae76:	9800      	ldr	r0, [sp, #0]
    ae78:	b2c1      	uxtb	r1, r0
    ae7a:	2902      	cmp	r1, #2
    ae7c:	d1f3      	bne.n	ae66 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf4>
    ae7e:	e7f6      	b.n	ae6e <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xfc>
    ae80:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
    ae84:	07c0      	lsls	r0, r0, #31
    ae86:	2800      	cmp	r0, #0
    ae88:	d105      	bne.n	ae96 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x124>
    ae8a:	e7ff      	b.n	ae8c <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x11a>
            super::handle_touch(x, y);
    ae8c:	9802      	ldr	r0, [sp, #8]
    ae8e:	9901      	ldr	r1, [sp, #4]
    ae90:	f001 fe1e 	bl	cad0 <_ZN3app5chip812handle_touch17habca32c74e5cefadE>
    ae94:	e000      	b.n	ae98 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x126>
            if action != 0 && action != 2 { continue; }
    ae96:	e7e5      	b.n	ae64 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf2>
        for i in 0..TOUCH_DATA.count as usize {
    ae98:	e798      	b.n	adcc <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    ae9a:	f24c 2008 	movw	r0, #49672	; 0xc208
    ae9e:	f2c0 0001 	movt	r0, #1
    aea2:	220a      	movs	r2, #10
    aea4:	9903      	ldr	r1, [sp, #12]
    aea6:	f00a fbb7 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    aeaa:	defe      	udf	#254	; 0xfe

0000aeac <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E>:
/// Touch data will be populated here
static mut TOUCH_DATA: TouchEventInfo = fill_zero!(TouchEventInfo);

/// Read touch controller data. This only works when the screen has been tapped and the touch controller wakes up.
/// Ported from https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L407-L466
fn read_touchdata(data: &mut TouchEventInfo) -> MynewtResult<()> {
    aeac:	b580      	push	{r7, lr}
    aeae:	b0de      	sub	sp, #376	; 0x178
    aeb0:	9057      	str	r0, [sp, #348]	; 0x15c
    read_register_range(           //  Read the range of I2C registers...
    aeb2:	4669      	mov	r1, sp
    aeb4:	223f      	movs	r2, #63	; 0x3f
    aeb6:	600a      	str	r2, [r1, #0]
    aeb8:	f240 13ba 	movw	r3, #442	; 0x1ba
    aebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aec0:	2115      	movs	r1, #21
    aec2:	f04f 0c00 	mov.w	ip, #0
    aec6:	9026      	str	r0, [sp, #152]	; 0x98
    aec8:	4608      	mov	r0, r1
    aeca:	4661      	mov	r1, ip
    aecc:	f000 fb97 	bl	b5fe <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E>
    aed0:	9025      	str	r0, [sp, #148]	; 0x94
    aed2:	e7ff      	b.n	aed4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x28>
    aed4:	f24c 2118 	movw	r1, #49688	; 0xc218
    aed8:	f2c0 0101 	movt	r1, #1
    aedc:	f24c 232c 	movw	r3, #49708	; 0xc22c
    aee0:	f2c0 0301 	movt	r3, #1
    aee4:	2213      	movs	r2, #19
    aee6:	9825      	ldr	r0, [sp, #148]	; 0x94
    aee8:	f7fd fe07 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    aeec:	e7ff      	b.n	aeee <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x42>
    aeee:	f10d 00ee 	add.w	r0, sp, #238	; 0xee
    aef2:	2152      	movs	r1, #82	; 0x52
        TOUCH_CONTROLLER_ADDRESS,  //  From the touch controller
        0,                         //  Starting from register 0
        POINT_READ_BUF as u8,      //  Number of registers to read
        unsafe { &mut BUF }        //  Save the read data into `buf`
    ).expect("read touchdata fail");
    *data = fill_zero!(TouchEventInfo);
    aef4:	9024      	str	r0, [sp, #144]	; 0x90
    aef6:	9123      	str	r1, [sp, #140]	; 0x8c
    aef8:	f010 fe80 	bl	1bbfc <__aeabi_memclr>
    aefc:	a827      	add	r0, sp, #156	; 0x9c
    aefe:	9924      	ldr	r1, [sp, #144]	; 0x90
    af00:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    af02:	f010 fe7f 	bl	1bc04 <__aeabi_memcpy>
    af06:	e7ff      	b.n	af08 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5c>
    af08:	a927      	add	r1, sp, #156	; 0x9c
    af0a:	2252      	movs	r2, #82	; 0x52
    af0c:	9826      	ldr	r0, [sp, #152]	; 0x98
    af0e:	f010 fe79 	bl	1bc04 <__aeabi_memcpy>
    data.point_num = unsafe { BUF[FT_TOUCH_POINT_NUM] & 0x0F };
    af12:	f240 11ba 	movw	r1, #442	; 0x1ba
    af16:	f2c2 0100 	movt	r1, #8192	; 0x2000
    af1a:	7889      	ldrb	r1, [r1, #2]
    af1c:	f001 010f 	and.w	r1, r1, #15
    af20:	9a26      	ldr	r2, [sp, #152]	; 0x98
    af22:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
    af26:	2100      	movs	r1, #0
    data.count     = 0;
    af28:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50

    //  Populate the first 5 touch points
    for i in 0..CFG_MAX_TOUCH_POINTS {
    af2c:	9150      	str	r1, [sp, #320]	; 0x140
    af2e:	2105      	movs	r1, #5
    af30:	9151      	str	r1, [sp, #324]	; 0x144
    af32:	9950      	ldr	r1, [sp, #320]	; 0x140
    af34:	9b51      	ldr	r3, [sp, #324]	; 0x144
    af36:	9022      	str	r0, [sp, #136]	; 0x88
    af38:	4608      	mov	r0, r1
    af3a:	4619      	mov	r1, r3
    af3c:	f006 fe85 	bl	11c4a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    af40:	9021      	str	r0, [sp, #132]	; 0x84
    af42:	9120      	str	r1, [sp, #128]	; 0x80
    af44:	e7ff      	b.n	af46 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x9a>
    af46:	9821      	ldr	r0, [sp, #132]	; 0x84
    af48:	9052      	str	r0, [sp, #328]	; 0x148
    af4a:	9920      	ldr	r1, [sp, #128]	; 0x80
    af4c:	9153      	str	r1, [sp, #332]	; 0x14c
    af4e:	e7ff      	b.n	af50 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xa4>
    af50:	a852      	add	r0, sp, #328	; 0x148
    af52:	f006 fdef 	bl	11b34 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    af56:	9155      	str	r1, [sp, #340]	; 0x154
    af58:	9054      	str	r0, [sp, #336]	; 0x150
    af5a:	e7ff      	b.n	af5c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xb0>
    af5c:	9854      	ldr	r0, [sp, #336]	; 0x150
    af5e:	2800      	cmp	r0, #0
    af60:	d001      	beq.n	af66 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xba>
    af62:	e7ff      	b.n	af64 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xb8>
    af64:	e001      	b.n	af6a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xbe>
    af66:	e00d      	b.n	af84 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xd8>
    af68:	defe      	udf	#254	; 0xfe
    af6a:	9855      	ldr	r0, [sp, #340]	; 0x154
    af6c:	9058      	str	r0, [sp, #352]	; 0x160
    af6e:	9059      	str	r0, [sp, #356]	; 0x164
    af70:	905a      	str	r0, [sp, #360]	; 0x168
    af72:	2106      	movs	r1, #6
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    af74:	fba1 1200 	umull	r1, r2, r1, r0
    af78:	2a00      	cmp	r2, #0
    af7a:	901f      	str	r0, [sp, #124]	; 0x7c
    af7c:	911e      	str	r1, [sp, #120]	; 0x78
    af7e:	f040 81c1 	bne.w	b304 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x458>
    af82:	e002      	b.n	af8a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xde>
    af84:	2001      	movs	r0, #1
            && (data.point_num == 0) {
            break;
        }
    }
    Ok(())
}
    af86:	b05e      	add	sp, #376	; 0x178
    af88:	bd80      	pop	{r7, pc}
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    af8a:	981e      	ldr	r0, [sp, #120]	; 0x78
    af8c:	1d41      	adds	r1, r0, #5
    af8e:	460a      	mov	r2, r1
    af90:	4281      	cmp	r1, r0
    af92:	921d      	str	r2, [sp, #116]	; 0x74
    af94:	f0c0 81c2 	bcc.w	b31c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x470>
    af98:	e7ff      	b.n	af9a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xee>
    af9a:	981d      	ldr	r0, [sp, #116]	; 0x74
    af9c:	283e      	cmp	r0, #62	; 0x3e
    af9e:	f200 81c9 	bhi.w	b334 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x488>
    afa2:	e7ff      	b.n	afa4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xf8>
    afa4:	f240 10ba 	movw	r0, #442	; 0x1ba
    afa8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    afac:	991d      	ldr	r1, [sp, #116]	; 0x74
    afae:	5c40      	ldrb	r0, [r0, r1]
    afb0:	0900      	lsrs	r0, r0, #4
    afb2:	901c      	str	r0, [sp, #112]	; 0x70
    afb4:	e7ff      	b.n	afb6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x10a>
    afb6:	981c      	ldr	r0, [sp, #112]	; 0x70
    afb8:	f88d 016f 	strb.w	r0, [sp, #367]	; 0x16f
    afbc:	b2c1      	uxtb	r1, r0
        if pointid >= HYN_MAX_ID { break; }
    afbe:	290e      	cmp	r1, #14
    afc0:	d80b      	bhi.n	afda <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x12e>
    afc2:	e7ff      	b.n	afc4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x118>
        data.count += 1;
    afc4:	9826      	ldr	r0, [sp, #152]	; 0x98
    afc6:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
    afca:	3101      	adds	r1, #1
    afcc:	b2ca      	uxtb	r2, r1
    afce:	460b      	mov	r3, r1
    afd0:	428a      	cmp	r2, r1
    afd2:	931b      	str	r3, [sp, #108]	; 0x6c
    afd4:	f040 81b7 	bne.w	b346 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x49a>
    afd8:	e001      	b.n	afde <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x132>
        if pointid >= HYN_MAX_ID { break; }
    afda:	e7ff      	b.n	afdc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x130>
    afdc:	e7d2      	b.n	af84 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xd8>
        data.count += 1;
    afde:	981b      	ldr	r0, [sp, #108]	; 0x6c
    afe0:	9926      	ldr	r1, [sp, #152]	; 0x98
    afe2:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    afe6:	2206      	movs	r2, #6
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    afe8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    afea:	fba2 2c03 	umull	r2, ip, r2, r3
    afee:	f1bc 0f00 	cmp.w	ip, #0
    aff2:	921a      	str	r2, [sp, #104]	; 0x68
    aff4:	f040 81b3 	bne.w	b35e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4b2>
    aff8:	e7ff      	b.n	affa <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x14e>
    affa:	981a      	ldr	r0, [sp, #104]	; 0x68
    affc:	1cc1      	adds	r1, r0, #3
    affe:	460a      	mov	r2, r1
    b000:	4281      	cmp	r1, r0
    b002:	9219      	str	r2, [sp, #100]	; 0x64
    b004:	f0c0 81b7 	bcc.w	b376 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4ca>
    b008:	e7ff      	b.n	b00a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x15e>
    b00a:	9819      	ldr	r0, [sp, #100]	; 0x64
    b00c:	283e      	cmp	r0, #62	; 0x3e
    b00e:	f200 81be 	bhi.w	b38e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4e2>
    b012:	e7ff      	b.n	b014 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x168>
    b014:	f240 10ba 	movw	r0, #442	; 0x1ba
    b018:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b01c:	9919      	ldr	r1, [sp, #100]	; 0x64
    b01e:	5c40      	ldrb	r0, [r0, r1]
    b020:	f000 000f 	and.w	r0, r0, #15
    b024:	4602      	mov	r2, r0
    b026:	f8ad 0170 	strh.w	r0, [sp, #368]	; 0x170
    b02a:	2006      	movs	r0, #6
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b02c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b02e:	fba0 0c03 	umull	r0, ip, r0, r3
    b032:	f1bc 0f00 	cmp.w	ip, #0
    b036:	9218      	str	r2, [sp, #96]	; 0x60
    b038:	9017      	str	r0, [sp, #92]	; 0x5c
    b03a:	f040 81b1 	bne.w	b3a0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4f4>
    b03e:	e7ff      	b.n	b040 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x194>
    b040:	9817      	ldr	r0, [sp, #92]	; 0x5c
    b042:	1d01      	adds	r1, r0, #4
    b044:	460a      	mov	r2, r1
    b046:	4281      	cmp	r1, r0
    b048:	9216      	str	r2, [sp, #88]	; 0x58
    b04a:	f0c0 81b5 	bcc.w	b3b8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x50c>
    b04e:	e7ff      	b.n	b050 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1a4>
    b050:	9816      	ldr	r0, [sp, #88]	; 0x58
    b052:	283e      	cmp	r0, #62	; 0x3e
    b054:	f200 81bc 	bhi.w	b3d0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x524>
    b058:	e7ff      	b.n	b05a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1ae>
    b05a:	f240 10ba 	movw	r0, #442	; 0x1ba
    b05e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b062:	9916      	ldr	r1, [sp, #88]	; 0x58
    b064:	5c40      	ldrb	r0, [r0, r1]
    b066:	4602      	mov	r2, r0
    b068:	f8ad 0172 	strh.w	r0, [sp, #370]	; 0x172
        data.touches[i].x  = (x_high << 8) | x_low;
    b06c:	9818      	ldr	r0, [sp, #96]	; 0x60
    b06e:	0203      	lsls	r3, r0, #8
    b070:	9215      	str	r2, [sp, #84]	; 0x54
    b072:	9314      	str	r3, [sp, #80]	; 0x50
    b074:	e7ff      	b.n	b076 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1ca>
    b076:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b078:	2809      	cmp	r0, #9
    b07a:	f200 81b2 	bhi.w	b3e2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x536>
    b07e:	e7ff      	b.n	b080 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1d4>
    b080:	9814      	ldr	r0, [sp, #80]	; 0x50
    b082:	9915      	ldr	r1, [sp, #84]	; 0x54
    b084:	ea40 0201 	orr.w	r2, r0, r1
    b088:	9b26      	ldr	r3, [sp, #152]	; 0x98
    b08a:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
    b08e:	f823 203c 	strh.w	r2, [r3, ip, lsl #3]
    b092:	2206      	movs	r2, #6
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b094:	fba2 2e0c 	umull	r2, lr, r2, ip
    b098:	f1be 0f00 	cmp.w	lr, #0
    b09c:	9213      	str	r2, [sp, #76]	; 0x4c
    b09e:	f040 81a9 	bne.w	b3f4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x548>
    b0a2:	e7ff      	b.n	b0a4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1f8>
    b0a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
    b0a6:	1d41      	adds	r1, r0, #5
    b0a8:	460a      	mov	r2, r1
    b0aa:	4281      	cmp	r1, r0
    b0ac:	9212      	str	r2, [sp, #72]	; 0x48
    b0ae:	f0c0 81ad 	bcc.w	b40c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x560>
    b0b2:	e7ff      	b.n	b0b4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x208>
    b0b4:	9812      	ldr	r0, [sp, #72]	; 0x48
    b0b6:	283e      	cmp	r0, #62	; 0x3e
    b0b8:	f200 81b4 	bhi.w	b424 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x578>
    b0bc:	e7ff      	b.n	b0be <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x212>
    b0be:	f240 10ba 	movw	r0, #442	; 0x1ba
    b0c2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b0c6:	9912      	ldr	r1, [sp, #72]	; 0x48
    b0c8:	5c40      	ldrb	r0, [r0, r1]
    b0ca:	f000 000f 	and.w	r0, r0, #15
    b0ce:	4602      	mov	r2, r0
    b0d0:	f8ad 0174 	strh.w	r0, [sp, #372]	; 0x174
    b0d4:	2006      	movs	r0, #6
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b0d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b0d8:	fba0 0c03 	umull	r0, ip, r0, r3
    b0dc:	f1bc 0f00 	cmp.w	ip, #0
    b0e0:	9211      	str	r2, [sp, #68]	; 0x44
    b0e2:	9010      	str	r0, [sp, #64]	; 0x40
    b0e4:	f040 81a7 	bne.w	b436 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x58a>
    b0e8:	e7ff      	b.n	b0ea <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x23e>
    b0ea:	9810      	ldr	r0, [sp, #64]	; 0x40
    b0ec:	1d81      	adds	r1, r0, #6
    b0ee:	460a      	mov	r2, r1
    b0f0:	4281      	cmp	r1, r0
    b0f2:	920f      	str	r2, [sp, #60]	; 0x3c
    b0f4:	f0c0 81ab 	bcc.w	b44e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5a2>
    b0f8:	e7ff      	b.n	b0fa <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x24e>
    b0fa:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b0fc:	283e      	cmp	r0, #62	; 0x3e
    b0fe:	f200 81b2 	bhi.w	b466 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5ba>
    b102:	e7ff      	b.n	b104 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x258>
    b104:	f240 10ba 	movw	r0, #442	; 0x1ba
    b108:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b10c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b10e:	5c40      	ldrb	r0, [r0, r1]
    b110:	4602      	mov	r2, r0
    b112:	f8ad 0176 	strh.w	r0, [sp, #374]	; 0x176
        data.touches[i].y  = (y_high << 8) | y_low;
    b116:	9811      	ldr	r0, [sp, #68]	; 0x44
    b118:	0203      	lsls	r3, r0, #8
    b11a:	920e      	str	r2, [sp, #56]	; 0x38
    b11c:	930d      	str	r3, [sp, #52]	; 0x34
    b11e:	e7ff      	b.n	b120 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x274>
    b120:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b122:	2809      	cmp	r0, #9
    b124:	f200 81a8 	bhi.w	b478 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5cc>
    b128:	e7ff      	b.n	b12a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x27e>
    b12a:	9826      	ldr	r0, [sp, #152]	; 0x98
    b12c:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b12e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b134:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    b138:	ea43 0e0c 	orr.w	lr, r3, ip
    b13c:	f8a2 e002 	strh.w	lr, [r2, #2]
    b140:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    b142:	fba2 2e01 	umull	r2, lr, r2, r1
    b146:	f1be 0f00 	cmp.w	lr, #0
    b14a:	920c      	str	r2, [sp, #48]	; 0x30
    b14c:	f040 819d 	bne.w	b48a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5de>
    b150:	e7ff      	b.n	b152 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2a6>
    b152:	980c      	ldr	r0, [sp, #48]	; 0x30
    b154:	1cc1      	adds	r1, r0, #3
    b156:	460a      	mov	r2, r1
    b158:	4281      	cmp	r1, r0
    b15a:	920b      	str	r2, [sp, #44]	; 0x2c
    b15c:	f0c0 81a1 	bcc.w	b4a2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5f6>
    b160:	e7ff      	b.n	b162 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2b6>
    b162:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b164:	283e      	cmp	r0, #62	; 0x3e
    b166:	f200 81a8 	bhi.w	b4ba <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x60e>
    b16a:	e7ff      	b.n	b16c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2c0>
    b16c:	f240 10ba 	movw	r0, #442	; 0x1ba
    b170:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b174:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b176:	5c40      	ldrb	r0, [r0, r1]
    b178:	0980      	lsrs	r0, r0, #6
    b17a:	900a      	str	r0, [sp, #40]	; 0x28
    b17c:	e7ff      	b.n	b17e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2d2>
        data.touches[i].action =
    b17e:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b180:	2809      	cmp	r0, #9
    b182:	f200 81a3 	bhi.w	b4cc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x620>
    b186:	e7ff      	b.n	b188 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2dc>
    b188:	9826      	ldr	r0, [sp, #152]	; 0x98
    b18a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b18c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b192:	7113      	strb	r3, [r2, #4]
    b194:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    b196:	fba2 2c01 	umull	r2, ip, r2, r1
    b19a:	f1bc 0f00 	cmp.w	ip, #0
    b19e:	9209      	str	r2, [sp, #36]	; 0x24
    b1a0:	f040 819d 	bne.w	b4de <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x632>
    b1a4:	e7ff      	b.n	b1a6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2fa>
    b1a6:	9809      	ldr	r0, [sp, #36]	; 0x24
    b1a8:	1d41      	adds	r1, r0, #5
    b1aa:	460a      	mov	r2, r1
    b1ac:	4281      	cmp	r1, r0
    b1ae:	9208      	str	r2, [sp, #32]
    b1b0:	f0c0 81a1 	bcc.w	b4f6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x64a>
    b1b4:	e7ff      	b.n	b1b6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x30a>
    b1b6:	9808      	ldr	r0, [sp, #32]
    b1b8:	283e      	cmp	r0, #62	; 0x3e
    b1ba:	f200 81a8 	bhi.w	b50e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x662>
    b1be:	e7ff      	b.n	b1c0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x314>
    b1c0:	f240 10ba 	movw	r0, #442	; 0x1ba
    b1c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b1c8:	9908      	ldr	r1, [sp, #32]
    b1ca:	5c40      	ldrb	r0, [r0, r1]
    b1cc:	0900      	lsrs	r0, r0, #4
    b1ce:	9007      	str	r0, [sp, #28]
    b1d0:	e7ff      	b.n	b1d2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x326>
        data.touches[i].finger =
    b1d2:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b1d4:	2809      	cmp	r0, #9
    b1d6:	f200 81a3 	bhi.w	b520 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x674>
    b1da:	e7ff      	b.n	b1dc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x330>
    b1dc:	9826      	ldr	r0, [sp, #152]	; 0x98
    b1de:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b1e0:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b1e4:	9b07      	ldr	r3, [sp, #28]
    b1e6:	7153      	strb	r3, [r2, #5]
    b1e8:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    b1ea:	fba2 2c01 	umull	r2, ip, r2, r1
    b1ee:	f1bc 0f00 	cmp.w	ip, #0
    b1f2:	9206      	str	r2, [sp, #24]
    b1f4:	f040 819d 	bne.w	b532 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x686>
    b1f8:	e7ff      	b.n	b1fa <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x34e>
    b1fa:	9806      	ldr	r0, [sp, #24]
    b1fc:	1dc1      	adds	r1, r0, #7
    b1fe:	460a      	mov	r2, r1
    b200:	4281      	cmp	r1, r0
    b202:	9205      	str	r2, [sp, #20]
    b204:	f0c0 81a1 	bcc.w	b54a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x69e>
    b208:	e7ff      	b.n	b20a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x35e>
    b20a:	9805      	ldr	r0, [sp, #20]
    b20c:	283e      	cmp	r0, #62	; 0x3e
    b20e:	f200 81a8 	bhi.w	b562 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6b6>
    b212:	e7ff      	b.n	b214 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x368>
    b214:	f240 10ba 	movw	r0, #442	; 0x1ba
    b218:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b21c:	9905      	ldr	r1, [sp, #20]
    b21e:	5c40      	ldrb	r0, [r0, r1]
        data.touches[i].pressure =
    b220:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    b222:	2a09      	cmp	r2, #9
    b224:	9004      	str	r0, [sp, #16]
    b226:	f200 81a5 	bhi.w	b574 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6c8>
    b22a:	e7ff      	b.n	b22c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x380>
    b22c:	9826      	ldr	r0, [sp, #152]	; 0x98
    b22e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b230:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b234:	9b04      	ldr	r3, [sp, #16]
    b236:	7193      	strb	r3, [r2, #6]
    b238:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    b23a:	fba2 2c01 	umull	r2, ip, r2, r1
    b23e:	f1bc 0f00 	cmp.w	ip, #0
    b242:	9203      	str	r2, [sp, #12]
    b244:	f040 819f 	bne.w	b586 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6da>
    b248:	e7ff      	b.n	b24a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x39e>
    b24a:	9803      	ldr	r0, [sp, #12]
    b24c:	f100 0108 	add.w	r1, r0, #8
    b250:	460a      	mov	r2, r1
    b252:	4281      	cmp	r1, r0
    b254:	9202      	str	r2, [sp, #8]
    b256:	f0c0 81a2 	bcc.w	b59e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6f2>
    b25a:	e7ff      	b.n	b25c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3b0>
    b25c:	9802      	ldr	r0, [sp, #8]
    b25e:	283e      	cmp	r0, #62	; 0x3e
    b260:	f200 81a9 	bhi.w	b5b6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x70a>
    b264:	e7ff      	b.n	b266 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3ba>
    b266:	f240 10ba 	movw	r0, #442	; 0x1ba
    b26a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b26e:	9902      	ldr	r1, [sp, #8]
    b270:	5c40      	ldrb	r0, [r0, r1]
    b272:	0900      	lsrs	r0, r0, #4
    b274:	9001      	str	r0, [sp, #4]
    b276:	e7ff      	b.n	b278 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3cc>
        data.touches[i].area =
    b278:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b27a:	2809      	cmp	r0, #9
    b27c:	f200 81a4 	bhi.w	b5c8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x71c>
    b280:	e7ff      	b.n	b282 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3d6>
    b282:	9826      	ldr	r0, [sp, #152]	; 0x98
    b284:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b286:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b28a:	9b01      	ldr	r3, [sp, #4]
    b28c:	71d3      	strb	r3, [r2, #7]
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b28e:	290a      	cmp	r1, #10
    b290:	d326      	bcc.n	b2e0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x434>
    b292:	e1a2      	b.n	b5da <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x72e>
    b294:	2001      	movs	r0, #1
    b296:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    b29a:	e009      	b.n	b2b0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x404>
    b29c:	2000      	movs	r0, #0
    b29e:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    b2a2:	e005      	b.n	b2b0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x404>
            && (data.point_num == 0) {
    b2a4:	9826      	ldr	r0, [sp, #152]	; 0x98
    b2a6:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b2aa:	2900      	cmp	r1, #0
    b2ac:	d0f2      	beq.n	b294 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3e8>
    b2ae:	e7f5      	b.n	b29c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f0>
    b2b0:	f89d 015a 	ldrb.w	r0, [sp, #346]	; 0x15a
    b2b4:	07c0      	lsls	r0, r0, #31
    b2b6:	2800      	cmp	r0, #0
    b2b8:	d123      	bne.n	b302 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x456>
    b2ba:	e021      	b.n	b300 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x454>
    b2bc:	2001      	movs	r0, #1
    b2be:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    b2c2:	e007      	b.n	b2d4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x428>
    b2c4:	2000      	movs	r0, #0
    b2c6:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    b2ca:	e003      	b.n	b2d4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x428>
    b2cc:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b2ce:	280a      	cmp	r0, #10
    b2d0:	d30e      	bcc.n	b2f0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x444>
    b2d2:	e18b      	b.n	b5ec <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x740>
    b2d4:	f89d 015b 	ldrb.w	r0, [sp, #347]	; 0x15b
    b2d8:	07c0      	lsls	r0, r0, #31
    b2da:	2800      	cmp	r0, #0
    b2dc:	d1e2      	bne.n	b2a4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f8>
    b2de:	e7dd      	b.n	b29c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f0>
    b2e0:	9826      	ldr	r0, [sp, #152]	; 0x98
    b2e2:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b2e4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b2e8:	7912      	ldrb	r2, [r2, #4]
    b2ea:	2a00      	cmp	r2, #0
    b2ec:	d0e6      	beq.n	b2bc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x410>
    b2ee:	e7ed      	b.n	b2cc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x420>
    b2f0:	9826      	ldr	r0, [sp, #152]	; 0x98
    b2f2:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b2f4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b2f8:	7912      	ldrb	r2, [r2, #4]
    b2fa:	2a02      	cmp	r2, #2
    b2fc:	d0de      	beq.n	b2bc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x410>
    b2fe:	e7e1      	b.n	b2c4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x418>
    for i in 0..CFG_MAX_TOUCH_POINTS {
    b300:	e626      	b.n	af50 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xa4>
            break;
    b302:	e66b      	b.n	afdc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x130>
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    b304:	f24c 2050 	movw	r0, #49744	; 0xc250
    b308:	f2c0 0001 	movt	r0, #1
    b30c:	f24c 223c 	movw	r2, #49724	; 0xc23c
    b310:	f2c0 0201 	movt	r2, #1
    b314:	2121      	movs	r1, #33	; 0x21
    b316:	f00a f969 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b31a:	defe      	udf	#254	; 0xfe
    b31c:	f24c 2090 	movw	r0, #49808	; 0xc290
    b320:	f2c0 0001 	movt	r0, #1
    b324:	f24c 2274 	movw	r2, #49780	; 0xc274
    b328:	f2c0 0201 	movt	r2, #1
    b32c:	211c      	movs	r1, #28
    b32e:	f00a f95d 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b332:	defe      	udf	#254	; 0xfe
    b334:	f24c 20ac 	movw	r0, #49836	; 0xc2ac
    b338:	f2c0 0001 	movt	r0, #1
    b33c:	223f      	movs	r2, #63	; 0x3f
    b33e:	991d      	ldr	r1, [sp, #116]	; 0x74
    b340:	f00a f96a 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b344:	defe      	udf	#254	; 0xfe
        data.count += 1;
    b346:	f24c 2090 	movw	r0, #49808	; 0xc290
    b34a:	f2c0 0001 	movt	r0, #1
    b34e:	f24c 22bc 	movw	r2, #49852	; 0xc2bc
    b352:	f2c0 0201 	movt	r2, #1
    b356:	211c      	movs	r1, #28
    b358:	f00a f948 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b35c:	defe      	udf	#254	; 0xfe
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b35e:	f24c 2050 	movw	r0, #49744	; 0xc250
    b362:	f2c0 0001 	movt	r0, #1
    b366:	f24c 22cc 	movw	r2, #49868	; 0xc2cc
    b36a:	f2c0 0201 	movt	r2, #1
    b36e:	2121      	movs	r1, #33	; 0x21
    b370:	f00a f93c 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b374:	defe      	udf	#254	; 0xfe
    b376:	f24c 2090 	movw	r0, #49808	; 0xc290
    b37a:	f2c0 0001 	movt	r0, #1
    b37e:	f24c 22dc 	movw	r2, #49884	; 0xc2dc
    b382:	f2c0 0201 	movt	r2, #1
    b386:	211c      	movs	r1, #28
    b388:	f00a f930 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b38c:	defe      	udf	#254	; 0xfe
    b38e:	f24c 20ec 	movw	r0, #49900	; 0xc2ec
    b392:	f2c0 0001 	movt	r0, #1
    b396:	223f      	movs	r2, #63	; 0x3f
    b398:	9919      	ldr	r1, [sp, #100]	; 0x64
    b39a:	f00a f93d 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b39e:	defe      	udf	#254	; 0xfe
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b3a0:	f24c 2050 	movw	r0, #49744	; 0xc250
    b3a4:	f2c0 0001 	movt	r0, #1
    b3a8:	f24c 22fc 	movw	r2, #49916	; 0xc2fc
    b3ac:	f2c0 0201 	movt	r2, #1
    b3b0:	2121      	movs	r1, #33	; 0x21
    b3b2:	f00a f91b 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b3b6:	defe      	udf	#254	; 0xfe
    b3b8:	f24c 2090 	movw	r0, #49808	; 0xc290
    b3bc:	f2c0 0001 	movt	r0, #1
    b3c0:	f24c 320c 	movw	r2, #49932	; 0xc30c
    b3c4:	f2c0 0201 	movt	r2, #1
    b3c8:	211c      	movs	r1, #28
    b3ca:	f00a f90f 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b3ce:	defe      	udf	#254	; 0xfe
    b3d0:	f24c 301c 	movw	r0, #49948	; 0xc31c
    b3d4:	f2c0 0001 	movt	r0, #1
    b3d8:	223f      	movs	r2, #63	; 0x3f
    b3da:	9916      	ldr	r1, [sp, #88]	; 0x58
    b3dc:	f00a f91c 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b3e0:	defe      	udf	#254	; 0xfe
        data.touches[i].x  = (x_high << 8) | x_low;
    b3e2:	f24c 302c 	movw	r0, #49964	; 0xc32c
    b3e6:	f2c0 0001 	movt	r0, #1
    b3ea:	220a      	movs	r2, #10
    b3ec:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b3ee:	f00a f913 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b3f2:	defe      	udf	#254	; 0xfe
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b3f4:	f24c 2050 	movw	r0, #49744	; 0xc250
    b3f8:	f2c0 0001 	movt	r0, #1
    b3fc:	f24c 323c 	movw	r2, #49980	; 0xc33c
    b400:	f2c0 0201 	movt	r2, #1
    b404:	2121      	movs	r1, #33	; 0x21
    b406:	f00a f8f1 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b40a:	defe      	udf	#254	; 0xfe
    b40c:	f24c 2090 	movw	r0, #49808	; 0xc290
    b410:	f2c0 0001 	movt	r0, #1
    b414:	f24c 324c 	movw	r2, #49996	; 0xc34c
    b418:	f2c0 0201 	movt	r2, #1
    b41c:	211c      	movs	r1, #28
    b41e:	f00a f8e5 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b422:	defe      	udf	#254	; 0xfe
    b424:	f24c 305c 	movw	r0, #50012	; 0xc35c
    b428:	f2c0 0001 	movt	r0, #1
    b42c:	223f      	movs	r2, #63	; 0x3f
    b42e:	9912      	ldr	r1, [sp, #72]	; 0x48
    b430:	f00a f8f2 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b434:	defe      	udf	#254	; 0xfe
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b436:	f24c 2050 	movw	r0, #49744	; 0xc250
    b43a:	f2c0 0001 	movt	r0, #1
    b43e:	f24c 326c 	movw	r2, #50028	; 0xc36c
    b442:	f2c0 0201 	movt	r2, #1
    b446:	2121      	movs	r1, #33	; 0x21
    b448:	f00a f8d0 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b44c:	defe      	udf	#254	; 0xfe
    b44e:	f24c 2090 	movw	r0, #49808	; 0xc290
    b452:	f2c0 0001 	movt	r0, #1
    b456:	f24c 327c 	movw	r2, #50044	; 0xc37c
    b45a:	f2c0 0201 	movt	r2, #1
    b45e:	211c      	movs	r1, #28
    b460:	f00a f8c4 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b464:	defe      	udf	#254	; 0xfe
    b466:	f24c 308c 	movw	r0, #50060	; 0xc38c
    b46a:	f2c0 0001 	movt	r0, #1
    b46e:	223f      	movs	r2, #63	; 0x3f
    b470:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b472:	f00a f8d1 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b476:	defe      	udf	#254	; 0xfe
        data.touches[i].y  = (y_high << 8) | y_low;
    b478:	f24c 309c 	movw	r0, #50076	; 0xc39c
    b47c:	f2c0 0001 	movt	r0, #1
    b480:	220a      	movs	r2, #10
    b482:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b484:	f00a f8c8 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b488:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    b48a:	f24c 2050 	movw	r0, #49744	; 0xc250
    b48e:	f2c0 0001 	movt	r0, #1
    b492:	f24c 32ac 	movw	r2, #50092	; 0xc3ac
    b496:	f2c0 0201 	movt	r2, #1
    b49a:	2121      	movs	r1, #33	; 0x21
    b49c:	f00a f8a6 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b4a0:	defe      	udf	#254	; 0xfe
    b4a2:	f24c 2090 	movw	r0, #49808	; 0xc290
    b4a6:	f2c0 0001 	movt	r0, #1
    b4aa:	f24c 32bc 	movw	r2, #50108	; 0xc3bc
    b4ae:	f2c0 0201 	movt	r2, #1
    b4b2:	211c      	movs	r1, #28
    b4b4:	f00a f89a 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b4b8:	defe      	udf	#254	; 0xfe
    b4ba:	f24c 30cc 	movw	r0, #50124	; 0xc3cc
    b4be:	f2c0 0001 	movt	r0, #1
    b4c2:	223f      	movs	r2, #63	; 0x3f
    b4c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b4c6:	f00a f8a7 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b4ca:	defe      	udf	#254	; 0xfe
        data.touches[i].action =
    b4cc:	f24c 30dc 	movw	r0, #50140	; 0xc3dc
    b4d0:	f2c0 0001 	movt	r0, #1
    b4d4:	220a      	movs	r2, #10
    b4d6:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b4d8:	f00a f89e 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b4dc:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    b4de:	f24c 2050 	movw	r0, #49744	; 0xc250
    b4e2:	f2c0 0001 	movt	r0, #1
    b4e6:	f24c 32ec 	movw	r2, #50156	; 0xc3ec
    b4ea:	f2c0 0201 	movt	r2, #1
    b4ee:	2121      	movs	r1, #33	; 0x21
    b4f0:	f00a f87c 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b4f4:	defe      	udf	#254	; 0xfe
    b4f6:	f24c 2090 	movw	r0, #49808	; 0xc290
    b4fa:	f2c0 0001 	movt	r0, #1
    b4fe:	f24c 32fc 	movw	r2, #50172	; 0xc3fc
    b502:	f2c0 0201 	movt	r2, #1
    b506:	211c      	movs	r1, #28
    b508:	f00a f870 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b50c:	defe      	udf	#254	; 0xfe
    b50e:	f24c 400c 	movw	r0, #50188	; 0xc40c
    b512:	f2c0 0001 	movt	r0, #1
    b516:	223f      	movs	r2, #63	; 0x3f
    b518:	9908      	ldr	r1, [sp, #32]
    b51a:	f00a f87d 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b51e:	defe      	udf	#254	; 0xfe
        data.touches[i].finger =
    b520:	f24c 401c 	movw	r0, #50204	; 0xc41c
    b524:	f2c0 0001 	movt	r0, #1
    b528:	220a      	movs	r2, #10
    b52a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b52c:	f00a f874 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b530:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    b532:	f24c 2050 	movw	r0, #49744	; 0xc250
    b536:	f2c0 0001 	movt	r0, #1
    b53a:	f24c 422c 	movw	r2, #50220	; 0xc42c
    b53e:	f2c0 0201 	movt	r2, #1
    b542:	2121      	movs	r1, #33	; 0x21
    b544:	f00a f852 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b548:	defe      	udf	#254	; 0xfe
    b54a:	f24c 2090 	movw	r0, #49808	; 0xc290
    b54e:	f2c0 0001 	movt	r0, #1
    b552:	f24c 423c 	movw	r2, #50236	; 0xc43c
    b556:	f2c0 0201 	movt	r2, #1
    b55a:	211c      	movs	r1, #28
    b55c:	f00a f846 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b560:	defe      	udf	#254	; 0xfe
    b562:	f24c 404c 	movw	r0, #50252	; 0xc44c
    b566:	f2c0 0001 	movt	r0, #1
    b56a:	223f      	movs	r2, #63	; 0x3f
    b56c:	9905      	ldr	r1, [sp, #20]
    b56e:	f00a f853 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b572:	defe      	udf	#254	; 0xfe
        data.touches[i].pressure =
    b574:	f24c 405c 	movw	r0, #50268	; 0xc45c
    b578:	f2c0 0001 	movt	r0, #1
    b57c:	220a      	movs	r2, #10
    b57e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b580:	f00a f84a 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b584:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    b586:	f24c 2050 	movw	r0, #49744	; 0xc250
    b58a:	f2c0 0001 	movt	r0, #1
    b58e:	f24c 426c 	movw	r2, #50284	; 0xc46c
    b592:	f2c0 0201 	movt	r2, #1
    b596:	2121      	movs	r1, #33	; 0x21
    b598:	f00a f828 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b59c:	defe      	udf	#254	; 0xfe
    b59e:	f24c 2090 	movw	r0, #49808	; 0xc290
    b5a2:	f2c0 0001 	movt	r0, #1
    b5a6:	f24c 427c 	movw	r2, #50300	; 0xc47c
    b5aa:	f2c0 0201 	movt	r2, #1
    b5ae:	211c      	movs	r1, #28
    b5b0:	f00a f81c 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b5b4:	defe      	udf	#254	; 0xfe
    b5b6:	f24c 408c 	movw	r0, #50316	; 0xc48c
    b5ba:	f2c0 0001 	movt	r0, #1
    b5be:	223f      	movs	r2, #63	; 0x3f
    b5c0:	9902      	ldr	r1, [sp, #8]
    b5c2:	f00a f829 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b5c6:	defe      	udf	#254	; 0xfe
        data.touches[i].area =
    b5c8:	f24c 409c 	movw	r0, #50332	; 0xc49c
    b5cc:	f2c0 0001 	movt	r0, #1
    b5d0:	220a      	movs	r2, #10
    b5d2:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b5d4:	f00a f820 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b5d8:	defe      	udf	#254	; 0xfe
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b5da:	f24c 40ac 	movw	r0, #50348	; 0xc4ac
    b5de:	f2c0 0001 	movt	r0, #1
    b5e2:	220a      	movs	r2, #10
    b5e4:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b5e6:	f00a f817 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b5ea:	defe      	udf	#254	; 0xfe
    b5ec:	f24c 40bc 	movw	r0, #50364	; 0xc4bc
    b5f0:	f2c0 0001 	movt	r0, #1
    b5f4:	220a      	movs	r2, #10
    b5f6:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b5f8:	f00a f80e 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b5fc:	defe      	udf	#254	; 0xfe

0000b5fe <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E>:

/// Event that will be forwarded to the Event Queue when a touch interrupt is triggered
static mut TOUCH_EVENT: os_event = fill_zero!(os_event);  //  Init all fields to 0 or NULL

/// Read a range of I2C registers from the I2C address `addr` (7-bit address), starting at `start_register` for count `num_registers`. Save into `buffer`.
fn read_register_range(addr: u8, start_register: u8, num_registers: u8, buffer: &mut[u8]) -> MynewtResult<()> {
    b5fe:	b5b0      	push	{r4, r5, r7, lr}
    b600:	b094      	sub	sp, #80	; 0x50
    b602:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
    b606:	4696      	mov	lr, r2
    b608:	460c      	mov	r4, r1
    b60a:	4605      	mov	r5, r0
    b60c:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    b610:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
    b614:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
    b618:	9310      	str	r3, [sp, #64]	; 0x40
    b61a:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    b61e:	4618      	mov	r0, r3
    b620:	4661      	mov	r1, ip
    b622:	930d      	str	r3, [sp, #52]	; 0x34
    b624:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    b628:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    b62c:	940a      	str	r4, [sp, #40]	; 0x28
    b62e:	9509      	str	r5, [sp, #36]	; 0x24
    b630:	f006 fae4 	bl	11bfc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    b634:	9008      	str	r0, [sp, #32]
    b636:	e7ff      	b.n	b638 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x3a>
    b638:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b63a:	b2c1      	uxtb	r1, r0
    b63c:	9a08      	ldr	r2, [sp, #32]
    b63e:	428a      	cmp	r2, r1
    b640:	d30d      	bcc.n	b65e <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x60>
    b642:	e7ff      	b.n	b644 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x46>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b644:	980a      	ldr	r0, [sp, #40]	; 0x28
    b646:	b2c1      	uxtb	r1, r0
    b648:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b64a:	fa51 f182 	uxtab	r1, r1, r2
    b64e:	b2cb      	uxtb	r3, r1
    b650:	468c      	mov	ip, r1
    b652:	428b      	cmp	r3, r1
    b654:	f8cd c01c 	str.w	ip, [sp, #28]
    b658:	f040 8092 	bne.w	b780 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x182>
    b65c:	e00b      	b.n	b676 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x78>
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    b65e:	f24c 40cc 	movw	r0, #50380	; 0xc4cc
    b662:	f2c0 0001 	movt	r0, #1
    b666:	f24c 42d4 	movw	r2, #50388	; 0xc4d4
    b66a:	f2c0 0201 	movt	r2, #1
    b66e:	2107      	movs	r1, #7
    b670:	f009 ffbc 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b674:	defe      	udf	#254	; 0xfe
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b676:	9807      	ldr	r0, [sp, #28]
    b678:	b241      	sxtb	r1, r0
    b67a:	2900      	cmp	r1, #0
    b67c:	d411      	bmi.n	b6a2 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xa4>
    b67e:	e7ff      	b.n	b680 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x82>
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Write Mode (1 bit, value 0)...
    //    Followed by starting Register Number (8 bits)
    unsafe { 
        I2C_BUFFER[0] = start_register;  //  I2C Packet buffer contains starting Register Number (1 byte)
    b680:	f240 2014 	movw	r0, #532	; 0x214
    b684:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b688:	990a      	ldr	r1, [sp, #40]	; 0x28
    b68a:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;         //  I2C Packet address (7 bits)
    b68c:	f240 220c 	movw	r2, #524	; 0x20c
    b690:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b694:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b696:	7013      	strb	r3, [r2, #0]
    b698:	2101      	movs	r1, #1
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    b69a:	f006 faaf 	bl	11bfc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    b69e:	9006      	str	r0, [sp, #24]
    b6a0:	e00b      	b.n	b6ba <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xbc>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b6a2:	f24c 10d0 	movw	r0, #49616	; 0xc1d0
    b6a6:	f2c0 0001 	movt	r0, #1
    b6aa:	f24c 42f4 	movw	r2, #50420	; 0xc4f4
    b6ae:	f2c0 0201 	movt	r2, #1
    b6b2:	2108      	movs	r1, #8
    b6b4:	f009 ff9a 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b6b8:	defe      	udf	#254	; 0xfe
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    b6ba:	f240 200c 	movw	r0, #524	; 0x20c
    b6be:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b6c2:	9906      	ldr	r1, [sp, #24]
    b6c4:	8041      	strh	r1, [r0, #2]
        I2C_DATA.buffer = I2C_BUFFER.as_mut_ptr();  //  I2C Packet data points to packet buffer
    b6c6:	f240 2014 	movw	r0, #532	; 0x214
    b6ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b6ce:	2101      	movs	r1, #1
    b6d0:	f006 fa7d 	bl	11bce <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    b6d4:	9005      	str	r0, [sp, #20]
    b6d6:	e7ff      	b.n	b6d8 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xda>
    b6d8:	f240 200c 	movw	r0, #524	; 0x20c
    b6dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b6e0:	9905      	ldr	r1, [sp, #20]
    b6e2:	6041      	str	r1, [r0, #4]
    b6e4:	2201      	movs	r2, #1
    b6e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    b6ea:	f04f 0c00 	mov.w	ip, #0
    };
    let _rc1 = unsafe { hal::hal_i2c_master_write(1, &mut I2C_DATA, 1000, 0) };  //  No stop yet, must continue even if we hit an error
    b6ee:	9004      	str	r0, [sp, #16]
    b6f0:	4610      	mov	r0, r2
    b6f2:	9904      	ldr	r1, [sp, #16]
    b6f4:	461a      	mov	r2, r3
    b6f6:	4663      	mov	r3, ip
    b6f8:	f00c f99e 	bl	17a38 <hal_i2c_master_write>
    b6fc:	9012      	str	r0, [sp, #72]	; 0x48
    b6fe:	e7ff      	b.n	b700 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x102>
    //  Step 3: Prepare to receive the stream of I2C Device Register values...
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Read Mode (1 bit, value 1)
    unsafe { 
        I2C_BUFFER[0] = 0x00;     //  I2C Packet buffer should be empty (provided by caller)
    b700:	f240 2014 	movw	r0, #532	; 0x214
    b704:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b708:	2100      	movs	r1, #0
    b70a:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;  //  I2C Packet address (7 bits)
    b70c:	f240 200c 	movw	r0, #524	; 0x20c
    b710:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b714:	9909      	ldr	r1, [sp, #36]	; 0x24
    b716:	7001      	strb	r1, [r0, #0]
        I2C_DATA.len = num_registers as u16;    //  I2C Packet data size is number of Registers to read
    b718:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b71a:	b2d3      	uxtb	r3, r2
    b71c:	8043      	strh	r3, [r0, #2]
        I2C_DATA.buffer = buffer.as_mut_ptr();  //  I2C Packet data points to packet buffer
    b71e:	980d      	ldr	r0, [sp, #52]	; 0x34
    b720:	990c      	ldr	r1, [sp, #48]	; 0x30
    b722:	f006 fa54 	bl	11bce <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    b726:	9003      	str	r0, [sp, #12]
    b728:	e7ff      	b.n	b72a <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x12c>
    b72a:	f240 200c 	movw	r0, #524	; 0x20c
    b72e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b732:	9903      	ldr	r1, [sp, #12]
    b734:	6041      	str	r1, [r0, #4]
    b736:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b73a:	2301      	movs	r3, #1
    };
    //  Step 4: Receive the requested number of Register values from I2C Device (1 byte per register)
    //  Step 5: Send the Stop Condition (Low to High SDA Transition)
    let rc2 = unsafe { hal::hal_i2c_master_read(1, &mut I2C_DATA, 1000, 1) };
    b73c:	9002      	str	r0, [sp, #8]
    b73e:	4618      	mov	r0, r3
    b740:	9902      	ldr	r1, [sp, #8]
    b742:	f00c fa0d 	bl	17b60 <hal_i2c_master_read>
    b746:	4601      	mov	r1, r0
    b748:	9013      	str	r0, [sp, #76]	; 0x4c
    b74a:	9101      	str	r1, [sp, #4]
    b74c:	e7ff      	b.n	b74e <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x150>
    if rc2 == hal::HAL_I2C_ERR_ADDR_NACK as i32 {
    b74e:	9801      	ldr	r0, [sp, #4]
    b750:	2804      	cmp	r0, #4
    b752:	d005      	beq.n	b760 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x162>
    b754:	e7ff      	b.n	b756 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x158>
    b756:	2000      	movs	r0, #0
        ////assert!(false, "i2c fail");  //  I2C read failed
        console::print("i2c fail\n"); ////
        return Ok(());               //  TODO: Return an error
    }
    Ok(())
    b758:	900e      	str	r0, [sp, #56]	; 0x38
    b75a:	2001      	movs	r0, #1
    b75c:	900e      	str	r0, [sp, #56]	; 0x38
}
    b75e:	e00c      	b.n	b77a <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x17c>
        console::print("i2c fail\n"); ////
    b760:	f24c 5004 	movw	r0, #50436	; 0xc504
    b764:	f2c0 0001 	movt	r0, #1
    b768:	2109      	movs	r1, #9
    b76a:	f7fd fc41 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    b76e:	e7ff      	b.n	b770 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x172>
    b770:	2000      	movs	r0, #0
        return Ok(());               //  TODO: Return an error
    b772:	900e      	str	r0, [sp, #56]	; 0x38
    b774:	2001      	movs	r0, #1
    b776:	900e      	str	r0, [sp, #56]	; 0x38
    b778:	e7ff      	b.n	b77a <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x17c>
}
    b77a:	980e      	ldr	r0, [sp, #56]	; 0x38
    b77c:	b014      	add	sp, #80	; 0x50
    b77e:	bdb0      	pop	{r4, r5, r7, pc}
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b780:	f24c 2090 	movw	r0, #49808	; 0xc290
    b784:	f2c0 0001 	movt	r0, #1
    b788:	f24c 42e4 	movw	r2, #50404	; 0xc4e4
    b78c:	f2c0 0201 	movt	r2, #1
    b790:	211c      	movs	r1, #28
    b792:	f009 ff2b 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b796:	defe      	udf	#254	; 0xfe

0000b798 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E>:
/// CHIP8 Virtual Pixel size, in Physical Pixels
const PIXEL_WIDTH: usize = 3;
const PIXEL_HEIGHT: usize = 5;

/// Render some graphics and text to the PineTime display. `start_display()` must have been called earlier.
pub fn on_start() -> MynewtResult<()> {
    b798:	b580      	push	{r7, lr}
    b79a:	b0a4      	sub	sp, #144	; 0x90
    console::print("Rust CHIP8\n"); console::flush();
    b79c:	f24c 500d 	movw	r0, #50445	; 0xc50d
    b7a0:	f2c0 0001 	movt	r0, #1
    b7a4:	210b      	movs	r1, #11
    b7a6:	f7fd fc23 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    b7aa:	e7ff      	b.n	b7ac <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x14>
    b7ac:	f7fd fc66 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    b7b0:	e7ff      	b.n	b7b2 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x1a>
    b7b2:	2000      	movs	r0, #0
    
    //  Create black background
    let background = Rectangle::<Rgb565>
        ::new( Coord::new( 0, 0 ), Coord::new( 239, 239 ) )   //  Rectangle coordinates
    b7b4:	900e      	str	r0, [sp, #56]	; 0x38
    b7b6:	990e      	ldr	r1, [sp, #56]	; 0x38
    b7b8:	f005 ffc2 	bl	11740 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    b7bc:	900d      	str	r0, [sp, #52]	; 0x34
    b7be:	910c      	str	r1, [sp, #48]	; 0x30
    b7c0:	e7ff      	b.n	b7c2 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x2a>
    b7c2:	20ef      	movs	r0, #239	; 0xef
    b7c4:	900b      	str	r0, [sp, #44]	; 0x2c
    b7c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b7c8:	f005 ffba 	bl	11740 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    b7cc:	900a      	str	r0, [sp, #40]	; 0x28
    b7ce:	9109      	str	r1, [sp, #36]	; 0x24
    b7d0:	e7ff      	b.n	b7d2 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x3a>
    let background = Rectangle::<Rgb565>
    b7d2:	4668      	mov	r0, sp
    b7d4:	9909      	ldr	r1, [sp, #36]	; 0x24
    b7d6:	6001      	str	r1, [r0, #0]
    b7d8:	a817      	add	r0, sp, #92	; 0x5c
    b7da:	990d      	ldr	r1, [sp, #52]	; 0x34
    b7dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b7de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b7e0:	f008 ffd8 	bl	14794 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    b7e4:	e7ff      	b.n	b7e6 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x4e>
    b7e6:	2000      	movs	r0, #0
        .fill( Some( Rgb565::from(( 0x00, 0x00, 0x00 )) ) );  //  Black
    b7e8:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
    b7ec:	f88d 007d 	strb.w	r0, [sp, #125]	; 0x7d
    b7f0:	f88d 007e 	strb.w	r0, [sp, #126]	; 0x7e
    b7f4:	f89d 007e 	ldrb.w	r0, [sp, #126]	; 0x7e
    b7f8:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
    b7fc:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    b800:	f005 ffa7 	bl	11752 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    b804:	9008      	str	r0, [sp, #32]
    b806:	e7ff      	b.n	b808 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x70>
    b808:	9808      	ldr	r0, [sp, #32]
    b80a:	f8ad 007a 	strh.w	r0, [sp, #122]	; 0x7a
    b80e:	2101      	movs	r1, #1
    b810:	f8ad 1078 	strh.w	r1, [sp, #120]	; 0x78
    let background = Rectangle::<Rgb565>
    b814:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    b818:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    b81c:	a810      	add	r0, sp, #64	; 0x40
    b81e:	a917      	add	r1, sp, #92	; 0x5c
    b820:	f008 ffa6 	bl	14770 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    b824:	e7ff      	b.n	b826 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x8e>
    b826:	2000      	movs	r0, #0
    b828:	223f      	movs	r2, #63	; 0x3f
    b82a:	231f      	movs	r3, #31

    //  Render background to display
    //  druid::draw_to_display(background);
    render_region(0, 0, SCREEN_WIDTH as u8 - 1, SCREEN_HEIGHT as u8 - 1);
    b82c:	9007      	str	r0, [sp, #28]
    b82e:	9907      	ldr	r1, [sp, #28]
    b830:	f000 fb77 	bl	bf22 <_ZN3app5chip813render_region17h63a2f42595e40485E>
    b834:	e7ff      	b.n	b836 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x9e>

    //  Start the emulator in a background task
    os::task_init(                  //  Create a new task and start it...
        unsafe { &mut CHIP8_TASK }, //  Task object will be saved here
        &init_strn!( "chip8" ),     //  Name of task
    b836:	f24c 502c 	movw	r0, #50476	; 0xc52c
    b83a:	f2c0 0001 	movt	r0, #1
    b83e:	6801      	ldr	r1, [r0, #0]
        Some( task_func ),    //  Function to execute when task starts
    b840:	f64b 00c1 	movw	r0, #47297	; 0xb8c1
    b844:	f2c0 0000 	movt	r0, #0
    b848:	9021      	str	r0, [sp, #132]	; 0x84
    os::task_init(                  //  Create a new task and start it...
    b84a:	9a21      	ldr	r2, [sp, #132]	; 0x84
    b84c:	4668      	mov	r0, sp
    b84e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    b852:	6103      	str	r3, [r0, #16]
    b854:	60c3      	str	r3, [r0, #12]
    b856:	f240 2368 	movw	r3, #616	; 0x268
    b85a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b85e:	6083      	str	r3, [r0, #8]
    b860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b864:	6043      	str	r3, [r0, #4]
    b866:	2314      	movs	r3, #20
    b868:	6003      	str	r3, [r0, #0]
    b86a:	f240 2018 	movw	r0, #536	; 0x218
    b86e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b872:	2300      	movs	r3, #0
    b874:	f7fd fa0c 	bl	8c90 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
    b878:	9006      	str	r0, [sp, #24]
    b87a:	e7ff      	b.n	b87c <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xe4>
    b87c:	9806      	ldr	r0, [sp, #24]
    b87e:	f7fd f97b 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    b882:	9020      	str	r0, [sp, #128]	; 0x80
    b884:	e7ff      	b.n	b886 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xee>
        NULL,  //  Argument to be passed to above function
        20,    //  Task priority: highest is 0, lowest is 255 (main task is 127), SPI is 10
        os::OS_WAIT_FOREVER as u32,       //  Don't do sanity / watchdog checking
        unsafe { &mut CHIP8_TASK_STACK }, //  Stack space for the task
        CHIP8_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                                 //  `?` means check for error
    b886:	9820      	ldr	r0, [sp, #128]	; 0x80
    b888:	1e41      	subs	r1, r0, #1
    b88a:	bf18      	it	ne
    b88c:	2101      	movne	r1, #1
    b88e:	2801      	cmp	r0, #1
    b890:	d001      	beq.n	b896 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xfe>
    b892:	e7ff      	b.n	b894 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xfc>
    b894:	e005      	b.n	b8a2 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x10a>
    b896:	2000      	movs	r0, #0

    //  Return success to the caller
    Ok(())
    b898:	900f      	str	r0, [sp, #60]	; 0x3c
    b89a:	2001      	movs	r0, #1
    b89c:	900f      	str	r0, [sp, #60]	; 0x3c
}
    b89e:	e006      	b.n	b8ae <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x116>
    os::task_init(                  //  Create a new task and start it...
    b8a0:	defe      	udf	#254	; 0xfe
    ) ? ;                                 //  `?` means check for error
    b8a2:	9820      	ldr	r0, [sp, #128]	; 0x80
    b8a4:	9023      	str	r0, [sp, #140]	; 0x8c
    b8a6:	f006 fe33 	bl	12510 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    b8aa:	9005      	str	r0, [sp, #20]
    b8ac:	e002      	b.n	b8b4 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x11c>
}
    b8ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b8b0:	b024      	add	sp, #144	; 0x90
    b8b2:	bd80      	pop	{r7, pc}
    ) ? ;                                 //  `?` means check for error
    b8b4:	9805      	ldr	r0, [sp, #20]
    b8b6:	f7fd f953 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    b8ba:	900f      	str	r0, [sp, #60]	; 0x3c
    b8bc:	e7ff      	b.n	b8be <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x126>
    b8be:	e7f6      	b.n	b8ae <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x116>

0000b8c0 <_ZN3app5chip89task_func17h385831a0096277b5E>:

/// Size of the stack (in 4-byte units). Previously `OS_STACK_ALIGN(256)`  
const CHIP8_TASK_STACK_SIZE: usize = 4096;  //  Must be 4096 and above because CHIP8 Emulator requires substantial stack space

///  Run the emulator
extern "C" fn task_func(_arg: Ptr) {    
    b8c0:	b580      	push	{r7, lr}
    b8c2:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
    b8c6:	b082      	sub	sp, #8
    b8c8:	f50d 5103 	add.w	r1, sp, #8384	; 0x20c0
    b8cc:	6008      	str	r0, [r1, #0]
    b8ce:	a804      	add	r0, sp, #16
    //  Create the hardware API for rendering the emulator
    let hardware = Hardware::new();
    b8d0:	9103      	str	r1, [sp, #12]
    b8d2:	f000 f850 	bl	b976 <_ZN3app5chip88Hardware3new17h7d277b7134505907E>
    b8d6:	e7ff      	b.n	b8d8 <_ZN3app5chip89task_func17h385831a0096277b5E+0x18>

    //  Create the emulator
    let chip8 = libchip8::Chip8::new(hardware);
    b8d8:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    b8dc:	f50d 5e80 	add.w	lr, sp, #4096	; 0x1000
    b8e0:	f8ae 006c 	strh.w	r0, [lr, #108]	; 0x6c
    b8e4:	9804      	ldr	r0, [sp, #16]
    b8e6:	f50d 5e80 	add.w	lr, sp, #4096	; 0x1000
    b8ea:	f8ce 0068 	str.w	r0, [lr, #104]	; 0x68
    b8ee:	a806      	add	r0, sp, #24
    b8f0:	f10d 0e08 	add.w	lr, sp, #8
    b8f4:	f50e 5183 	add.w	r1, lr, #4192	; 0x1060
    b8f8:	f001 fb98 	bl	d02c <_ZN8libchip814Chip8$LT$T$GT$3new17h327c7b1fc19df648E>
    b8fc:	e7ff      	b.n	b8fe <_ZN3app5chip89task_func17h385831a0096277b5E+0x3e>
    console::print("CHIP8 started\n"); console::flush();
    b8fe:	f24c 5030 	movw	r0, #50480	; 0xc530
    b902:	f2c0 0001 	movt	r0, #1
    b906:	210e      	movs	r1, #14
    b908:	f7fd fb72 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    b90c:	e7ff      	b.n	b90e <_ZN3app5chip89task_func17h385831a0096277b5E+0x4e>
    b90e:	f7fd fbb5 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    b912:	e7ff      	b.n	b914 <_ZN3app5chip89task_func17h385831a0096277b5E+0x54>

    //  Load the emulator ROM
    let rom = include_bytes!("../roms/invaders.ch8");
    b914:	f24c 503e 	movw	r0, #50494	; 0xc53e
    b918:	f2c0 0001 	movt	r0, #1
    b91c:	9903      	ldr	r1, [sp, #12]
    b91e:	6048      	str	r0, [r1, #4]
    b920:	f10d 0e10 	add.w	lr, sp, #16
    b924:	f50e 5283 	add.w	r2, lr, #4192	; 0x1060
    b928:	a906      	add	r1, sp, #24
    b92a:	f241 0350 	movw	r3, #4176	; 0x1050
    //  let rom = include_bytes!("../roms/pong.ch8");
    //  let rom = include_bytes!("../roms/blinky.ch8");

    //  Run the emulator ROM. This will block until emulator terminates
    chip8.run(rom);
    b92e:	9002      	str	r0, [sp, #8]
    b930:	4610      	mov	r0, r2
    b932:	9201      	str	r2, [sp, #4]
    b934:	461a      	mov	r2, r3
    b936:	f010 f965 	bl	1bc04 <__aeabi_memcpy>
    b93a:	f240 5215 	movw	r2, #1301	; 0x515
    b93e:	9801      	ldr	r0, [sp, #4]
    b940:	9902      	ldr	r1, [sp, #8]
    b942:	f001 fc22 	bl	d18a <_ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E>
    b946:	e7ff      	b.n	b948 <_ZN3app5chip89task_func17h385831a0096277b5E+0x88>

    //  Should not come here
    console::print("CHIP8 done\n"); console::flush();
    b948:	f64c 2053 	movw	r0, #51795	; 0xca53
    b94c:	f2c0 0001 	movt	r0, #1
    b950:	210b      	movs	r1, #11
    b952:	f7fd fb4d 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    b956:	e7ff      	b.n	b958 <_ZN3app5chip89task_func17h385831a0096277b5E+0x98>
    b958:	f7fd fb90 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    b95c:	e7ff      	b.n	b95e <_ZN3app5chip89task_func17h385831a0096277b5E+0x9e>
    assert!(false, "CHIP8 should not end");
    b95e:	f64c 205e 	movw	r0, #51806	; 0xca5e
    b962:	f2c0 0001 	movt	r0, #1
    b966:	f64c 2288 	movw	r2, #51848	; 0xca88
    b96a:	f2c0 0201 	movt	r2, #1
    b96e:	2114      	movs	r1, #20
    b970:	f009 fe3c 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b974:	defe      	udf	#254	; 0xfe

0000b976 <_ZN3app5chip88Hardware3new17h7d277b7134505907E>:
    is_checking_input: bool,
}

impl Hardware {
    /// Return a new Hardware API for rendering CHIP8 Emulator
    pub fn new() -> Hardware {
    b976:	2100      	movs	r1, #0
        Hardware {
    b978:	7001      	strb	r1, [r0, #0]
    b97a:	7041      	strb	r1, [r0, #1]
    b97c:	7081      	strb	r1, [r0, #2]
    b97e:	70c1      	strb	r1, [r0, #3]
    b980:	7101      	strb	r1, [r0, #4]
    b982:	7141      	strb	r1, [r0, #5]
            update_right: 0,
            update_bottom: 0,
            is_interactive: false,
            is_checking_input: false,
        }
    }
    b984:	4770      	bx	lr

0000b986 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h254831b02f23b02eE>:
}

impl libchip8::Hardware for Hardware {
    /// Return a random value.
    fn rand(&mut self) -> u8 {
    b986:	b081      	sub	sp, #4
    b988:	9000      	str	r0, [sp, #0]
    b98a:	207b      	movs	r0, #123	; 0x7b
        123  //  TODO
    }
    b98c:	b001      	add	sp, #4
    b98e:	4770      	bx	lr

0000b990 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17he15d36584013bbaeE>:

    /// Check if the key is pressed.
    fn key(&mut self, _key: u8) -> bool {
    b990:	b580      	push	{r7, lr}
    b992:	b084      	sub	sp, #16
    b994:	460a      	mov	r2, r1
    b996:	9002      	str	r0, [sp, #8]
    b998:	f88d 100f 	strb.w	r1, [sp, #15]
        if !self.is_interactive {
    b99c:	7901      	ldrb	r1, [r0, #4]
    b99e:	07c9      	lsls	r1, r1, #31
    b9a0:	2900      	cmp	r1, #0
    b9a2:	9001      	str	r0, [sp, #4]
    b9a4:	d10f      	bne.n	b9c6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17he15d36584013bbaeE+0x36>
    b9a6:	e7ff      	b.n	b9a8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17he15d36584013bbaeE+0x18>
    b9a8:	2001      	movs	r0, #1
            self.is_interactive = true;
    b9aa:	9901      	ldr	r1, [sp, #4]
    b9ac:	7108      	strb	r0, [r1, #4]
            console::print("key\n"); console::flush(); ////
    b9ae:	f64c 2098 	movw	r0, #51864	; 0xca98
    b9b2:	f2c0 0001 	movt	r0, #1
    b9b6:	2104      	movs	r1, #4
    b9b8:	f7fd fb1a 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    b9bc:	e7ff      	b.n	b9be <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17he15d36584013bbaeE+0x2e>
    b9be:	f7fd fb5d 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    b9c2:	e7ff      	b.n	b9c4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17he15d36584013bbaeE+0x34>
        if !self.is_interactive {
    b9c4:	e7ff      	b.n	b9c6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17he15d36584013bbaeE+0x36>
    b9c6:	2001      	movs	r0, #1
        }
        self.is_checking_input = true;
    b9c8:	9901      	ldr	r1, [sp, #4]
    b9ca:	7148      	strb	r0, [r1, #5]
    b9cc:	2000      	movs	r0, #0
        match &self.win {
            Some(win) => win.is_key_down(k),
            None => false,
        }
        */
    }
    b9ce:	b004      	add	sp, #16
    b9d0:	bd80      	pop	{r7, pc}

0000b9d2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E>:

    /// Set the state of a pixel in the screen. true for white, and false for black.
    fn vram_set(&mut self, x: usize, y: usize, d: bool) {
    b9d2:	b08c      	sub	sp, #48	; 0x30
    b9d4:	469c      	mov	ip, r3
    b9d6:	9007      	str	r0, [sp, #28]
    b9d8:	9108      	str	r1, [sp, #32]
    b9da:	9209      	str	r2, [sp, #36]	; 0x24
    b9dc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        //  console::print("set "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    b9e0:	293f      	cmp	r1, #63	; 0x3f
    b9e2:	9205      	str	r2, [sp, #20]
    b9e4:	9104      	str	r1, [sp, #16]
    b9e6:	9003      	str	r0, [sp, #12]
    b9e8:	f8cd c008 	str.w	ip, [sp, #8]
    b9ec:	d804      	bhi.n	b9f8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x26>
    b9ee:	e7ff      	b.n	b9f0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x1e>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    b9f0:	9805      	ldr	r0, [sp, #20]
    b9f2:	281f      	cmp	r0, #31
    b9f4:	d814      	bhi.n	ba20 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x4e>
    b9f6:	e00b      	b.n	ba10 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x3e>
        assert!(x < SCREEN_WIDTH, "x overflow");
    b9f8:	f64c 209c 	movw	r0, #51868	; 0xca9c
    b9fc:	f2c0 0001 	movt	r0, #1
    ba00:	f64c 22a8 	movw	r2, #51880	; 0xcaa8
    ba04:	f2c0 0201 	movt	r2, #1
    ba08:	210a      	movs	r1, #10
    ba0a:	f009 fdef 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ba0e:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    ba10:	9805      	ldr	r0, [sp, #20]
    ba12:	0181      	lsls	r1, r0, #6
    ba14:	0e82      	lsrs	r2, r0, #26
    ba16:	2a00      	cmp	r2, #0
    ba18:	9101      	str	r1, [sp, #4]
    ba1a:	f040 80be 	bne.w	bb9a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x1c8>
    ba1e:	e00b      	b.n	ba38 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x66>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    ba20:	f64c 20b8 	movw	r0, #51896	; 0xcab8
    ba24:	f2c0 0001 	movt	r0, #1
    ba28:	f64c 22c4 	movw	r2, #51908	; 0xcac4
    ba2c:	f2c0 0201 	movt	r2, #1
    ba30:	210a      	movs	r1, #10
    ba32:	f009 fddb 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ba36:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    ba38:	9804      	ldr	r0, [sp, #16]
    ba3a:	9901      	ldr	r1, [sp, #4]
    ba3c:	1842      	adds	r2, r0, r1
    ba3e:	4613      	mov	r3, r2
    ba40:	4282      	cmp	r2, r0
    ba42:	9300      	str	r3, [sp, #0]
    ba44:	f0c0 80b5 	bcc.w	bbb2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x1e0>
    ba48:	e7ff      	b.n	ba4a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x78>
    ba4a:	9800      	ldr	r0, [sp, #0]
    ba4c:	900b      	str	r0, [sp, #44]	; 0x2c
        unsafe { SCREEN_BUFFER[i] = 
            if d {
    ba4e:	9902      	ldr	r1, [sp, #8]
    ba50:	07ca      	lsls	r2, r1, #31
    ba52:	2a00      	cmp	r2, #0
    ba54:	d106      	bne.n	ba64 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x92>
    ba56:	e7ff      	b.n	ba58 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x86>
                if self.is_interactive { 255 }  //  Brighter colour when emulator is active
                else { 200 }                    //  Darker colour for initial screen
            } 
            else { 
                if self.is_interactive { 127 }  //  Fade to black
    ba58:	9803      	ldr	r0, [sp, #12]
    ba5a:	7901      	ldrb	r1, [r0, #4]
    ba5c:	07c9      	lsls	r1, r1, #31
    ba5e:	2900      	cmp	r1, #0
    ba60:	d113      	bne.n	ba8a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xb8>
    ba62:	e00e      	b.n	ba82 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xb0>
                if self.is_interactive { 255 }  //  Brighter colour when emulator is active
    ba64:	9803      	ldr	r0, [sp, #12]
    ba66:	7901      	ldrb	r1, [r0, #4]
    ba68:	07c9      	lsls	r1, r1, #31
    ba6a:	2900      	cmp	r1, #0
    ba6c:	d104      	bne.n	ba78 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xa6>
    ba6e:	e7ff      	b.n	ba70 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x9e>
    ba70:	20c8      	movs	r0, #200	; 0xc8
                else { 200 }                    //  Darker colour for initial screen
    ba72:	f88d 0018 	strb.w	r0, [sp, #24]
                if self.is_interactive { 255 }  //  Brighter colour when emulator is active
    ba76:	e003      	b.n	ba80 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xae>
    ba78:	20ff      	movs	r0, #255	; 0xff
    ba7a:	f88d 0018 	strb.w	r0, [sp, #24]
    ba7e:	e7ff      	b.n	ba80 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xae>
            if d {
    ba80:	e008      	b.n	ba94 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xc2>
    ba82:	2000      	movs	r0, #0
                else { 0 }                      //  Black for initial screen                 
    ba84:	f88d 0018 	strb.w	r0, [sp, #24]
                if self.is_interactive { 127 }  //  Fade to black
    ba88:	e003      	b.n	ba92 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xc0>
    ba8a:	207f      	movs	r0, #127	; 0x7f
    ba8c:	f88d 0018 	strb.w	r0, [sp, #24]
    ba90:	e7ff      	b.n	ba92 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xc0>
            if d {
    ba92:	e7ff      	b.n	ba94 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xc2>
    ba94:	2000      	movs	r0, #0
        unsafe { SCREEN_BUFFER[i] = 
    ba96:	9900      	ldr	r1, [sp, #0]
    ba98:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
    ba9c:	f040 8095 	bne.w	bbca <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x1f8>
    baa0:	e7ff      	b.n	baa2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xd0>
    baa2:	f244 2068 	movw	r0, #17000	; 0x4268
    baa6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    baaa:	f89d 1018 	ldrb.w	r1, [sp, #24]
    baae:	9a00      	ldr	r2, [sp, #0]
    bab0:	5481      	strb	r1, [r0, r2]
            }  
        };

        //  Remember the boundaries of the screen region to be updated
        if self.update_left == 0 && self.update_right == 0 &&
    bab2:	9803      	ldr	r0, [sp, #12]
    bab4:	7801      	ldrb	r1, [r0, #0]
    bab6:	2900      	cmp	r1, #0
    bab8:	d02e      	beq.n	bb18 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x146>
    baba:	e029      	b.n	bb10 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x13e>
    babc:	2001      	movs	r0, #1
    babe:	f88d 0019 	strb.w	r0, [sp, #25]
    bac2:	e008      	b.n	bad6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x104>
    bac4:	2000      	movs	r0, #0
    bac6:	f88d 0019 	strb.w	r0, [sp, #25]
    baca:	e004      	b.n	bad6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x104>
            self.update_top == 0 && self.update_bottom == 0 {
    bacc:	9803      	ldr	r0, [sp, #12]
    bace:	78c1      	ldrb	r1, [r0, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    bad0:	2900      	cmp	r1, #0
    bad2:	d0f3      	beq.n	babc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xea>
    bad4:	e7f6      	b.n	bac4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xf2>
    bad6:	f89d 0019 	ldrb.w	r0, [sp, #25]
    bada:	07c0      	lsls	r0, r0, #31
    badc:	2800      	cmp	r0, #0
    bade:	d126      	bne.n	bb2e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x15c>
    bae0:	e02d      	b.n	bb3e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x16c>
    bae2:	2001      	movs	r0, #1
    bae4:	f88d 001a 	strb.w	r0, [sp, #26]
    bae8:	e008      	b.n	bafc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x12a>
    baea:	2000      	movs	r0, #0
    baec:	f88d 001a 	strb.w	r0, [sp, #26]
    baf0:	e004      	b.n	bafc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x12a>
            self.update_top == 0 && self.update_bottom == 0 {
    baf2:	9803      	ldr	r0, [sp, #12]
    baf4:	7841      	ldrb	r1, [r0, #1]
        if self.update_left == 0 && self.update_right == 0 &&
    baf6:	2900      	cmp	r1, #0
    baf8:	d0f3      	beq.n	bae2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x110>
    bafa:	e7f6      	b.n	baea <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x118>
    bafc:	f89d 001a 	ldrb.w	r0, [sp, #26]
    bb00:	07c0      	lsls	r0, r0, #31
    bb02:	2800      	cmp	r0, #0
    bb04:	d1e2      	bne.n	bacc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xfa>
    bb06:	e7dd      	b.n	bac4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xf2>
    bb08:	2001      	movs	r0, #1
    bb0a:	f88d 001b 	strb.w	r0, [sp, #27]
    bb0e:	e008      	b.n	bb22 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x150>
    bb10:	2000      	movs	r0, #0
    bb12:	f88d 001b 	strb.w	r0, [sp, #27]
    bb16:	e004      	b.n	bb22 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x150>
    bb18:	9803      	ldr	r0, [sp, #12]
    bb1a:	7881      	ldrb	r1, [r0, #2]
    bb1c:	2900      	cmp	r1, #0
    bb1e:	d0f3      	beq.n	bb08 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x136>
    bb20:	e7f6      	b.n	bb10 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x13e>
    bb22:	f89d 001b 	ldrb.w	r0, [sp, #27]
    bb26:	07c0      	lsls	r0, r0, #31
    bb28:	2800      	cmp	r0, #0
    bb2a:	d1e2      	bne.n	baf2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x120>
    bb2c:	e7dd      	b.n	baea <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x118>
            self.update_left = x as u8;
    bb2e:	9804      	ldr	r0, [sp, #16]
    bb30:	9903      	ldr	r1, [sp, #12]
    bb32:	7008      	strb	r0, [r1, #0]
            self.update_right = x as u8;
    bb34:	7088      	strb	r0, [r1, #2]
            self.update_top = y as u8;
    bb36:	9a05      	ldr	r2, [sp, #20]
    bb38:	704a      	strb	r2, [r1, #1]
            self.update_bottom = y as u8;
    bb3a:	70ca      	strb	r2, [r1, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    bb3c:	e7ff      	b.n	bb3e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x16c>
        }
        if (x as u8) < self.update_left { self.update_left = x as u8; }
    bb3e:	9804      	ldr	r0, [sp, #16]
    bb40:	b2c1      	uxtb	r1, r0
    bb42:	9a03      	ldr	r2, [sp, #12]
    bb44:	7813      	ldrb	r3, [r2, #0]
    bb46:	4299      	cmp	r1, r3
    bb48:	d204      	bcs.n	bb54 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x182>
    bb4a:	e7ff      	b.n	bb4c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x17a>
    bb4c:	9804      	ldr	r0, [sp, #16]
    bb4e:	9903      	ldr	r1, [sp, #12]
    bb50:	7008      	strb	r0, [r1, #0]
    bb52:	e7ff      	b.n	bb54 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x182>
        if (x as u8) > self.update_right { self.update_right = x as u8; }
    bb54:	9804      	ldr	r0, [sp, #16]
    bb56:	b2c1      	uxtb	r1, r0
    bb58:	9a03      	ldr	r2, [sp, #12]
    bb5a:	7893      	ldrb	r3, [r2, #2]
    bb5c:	4299      	cmp	r1, r3
    bb5e:	d904      	bls.n	bb6a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x198>
    bb60:	e7ff      	b.n	bb62 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x190>
    bb62:	9804      	ldr	r0, [sp, #16]
    bb64:	9903      	ldr	r1, [sp, #12]
    bb66:	7088      	strb	r0, [r1, #2]
    bb68:	e7ff      	b.n	bb6a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x198>
        if (y as u8) < self.update_top { self.update_top = y as u8; }
    bb6a:	9805      	ldr	r0, [sp, #20]
    bb6c:	b2c1      	uxtb	r1, r0
    bb6e:	9a03      	ldr	r2, [sp, #12]
    bb70:	7853      	ldrb	r3, [r2, #1]
    bb72:	4299      	cmp	r1, r3
    bb74:	d204      	bcs.n	bb80 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x1ae>
    bb76:	e7ff      	b.n	bb78 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x1a6>
    bb78:	9805      	ldr	r0, [sp, #20]
    bb7a:	9903      	ldr	r1, [sp, #12]
    bb7c:	7048      	strb	r0, [r1, #1]
    bb7e:	e7ff      	b.n	bb80 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x1ae>
        if (y as u8) > self.update_bottom { self.update_bottom = y as u8; }
    bb80:	9805      	ldr	r0, [sp, #20]
    bb82:	b2c1      	uxtb	r1, r0
    bb84:	9a03      	ldr	r2, [sp, #12]
    bb86:	78d3      	ldrb	r3, [r2, #3]
    bb88:	4299      	cmp	r1, r3
    bb8a:	d904      	bls.n	bb96 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x1c4>
    bb8c:	e7ff      	b.n	bb8e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x1bc>
    bb8e:	9805      	ldr	r0, [sp, #20]
    bb90:	9903      	ldr	r1, [sp, #12]
    bb92:	70c8      	strb	r0, [r1, #3]
    bb94:	e7ff      	b.n	bb96 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x1c4>
    }
    bb96:	b00c      	add	sp, #48	; 0x30
    bb98:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    bb9a:	f64c 20f0 	movw	r0, #51952	; 0xcaf0
    bb9e:	f2c0 0001 	movt	r0, #1
    bba2:	f64c 22d4 	movw	r2, #51924	; 0xcad4
    bba6:	f2c0 0201 	movt	r2, #1
    bbaa:	2121      	movs	r1, #33	; 0x21
    bbac:	f009 fd1e 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bbb0:	defe      	udf	#254	; 0xfe
    bbb2:	f64c 3030 	movw	r0, #52016	; 0xcb30
    bbb6:	f2c0 0001 	movt	r0, #1
    bbba:	f64c 3214 	movw	r2, #51988	; 0xcb14
    bbbe:	f2c0 0201 	movt	r2, #1
    bbc2:	211c      	movs	r1, #28
    bbc4:	f009 fd12 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bbc8:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] = 
    bbca:	f64c 304c 	movw	r0, #52044	; 0xcb4c
    bbce:	f2c0 0001 	movt	r0, #1
    bbd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bbd6:	9900      	ldr	r1, [sp, #0]
    bbd8:	f009 fd1e 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    bbdc:	defe      	udf	#254	; 0xfe

0000bbde <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E>:

    /// Get the current state of a pixel in the screen.
    fn vram_get(&mut self, x: usize, y: usize) -> bool {
    bbde:	b088      	sub	sp, #32
    bbe0:	9004      	str	r0, [sp, #16]
    bbe2:	9105      	str	r1, [sp, #20]
    bbe4:	9206      	str	r2, [sp, #24]
        //  console::print("get "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    bbe6:	293f      	cmp	r1, #63	; 0x3f
    bbe8:	9203      	str	r2, [sp, #12]
    bbea:	9102      	str	r1, [sp, #8]
    bbec:	d804      	bhi.n	bbf8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E+0x1a>
    bbee:	e7ff      	b.n	bbf0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E+0x12>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    bbf0:	9803      	ldr	r0, [sp, #12]
    bbf2:	281f      	cmp	r0, #31
    bbf4:	d813      	bhi.n	bc1e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E+0x40>
    bbf6:	e00b      	b.n	bc10 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E+0x32>
        assert!(x < SCREEN_WIDTH, "x overflow");
    bbf8:	f64c 209c 	movw	r0, #51868	; 0xca9c
    bbfc:	f2c0 0001 	movt	r0, #1
    bc00:	f64c 325c 	movw	r2, #52060	; 0xcb5c
    bc04:	f2c0 0201 	movt	r2, #1
    bc08:	210a      	movs	r1, #10
    bc0a:	f009 fcef 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bc0e:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    bc10:	9803      	ldr	r0, [sp, #12]
    bc12:	0181      	lsls	r1, r0, #6
    bc14:	0e82      	lsrs	r2, r0, #26
    bc16:	2a00      	cmp	r2, #0
    bc18:	9101      	str	r1, [sp, #4]
    bc1a:	d128      	bne.n	bc6e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E+0x90>
    bc1c:	e00b      	b.n	bc36 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E+0x58>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    bc1e:	f64c 20b8 	movw	r0, #51896	; 0xcab8
    bc22:	f2c0 0001 	movt	r0, #1
    bc26:	f64c 326c 	movw	r2, #52076	; 0xcb6c
    bc2a:	f2c0 0201 	movt	r2, #1
    bc2e:	210a      	movs	r1, #10
    bc30:	f009 fcdc 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bc34:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    bc36:	9802      	ldr	r0, [sp, #8]
    bc38:	9901      	ldr	r1, [sp, #4]
    bc3a:	1842      	adds	r2, r0, r1
    bc3c:	4613      	mov	r3, r2
    bc3e:	4282      	cmp	r2, r0
    bc40:	9300      	str	r3, [sp, #0]
    bc42:	d320      	bcc.n	bc86 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E+0xa8>
    bc44:	e7ff      	b.n	bc46 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E+0x68>
    bc46:	9800      	ldr	r0, [sp, #0]
    bc48:	9007      	str	r0, [sp, #28]
    bc4a:	2100      	movs	r1, #0
        unsafe { SCREEN_BUFFER[i] >= 128 }
    bc4c:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    bc50:	d125      	bne.n	bc9e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E+0xc0>
    bc52:	e7ff      	b.n	bc54 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E+0x76>
    bc54:	f244 2068 	movw	r0, #17000	; 0x4268
    bc58:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bc5c:	9900      	ldr	r1, [sp, #0]
    bc5e:	5640      	ldrsb	r0, [r0, r1]
    bc60:	2200      	movs	r2, #0
    bc62:	2800      	cmp	r0, #0
    bc64:	bf48      	it	mi
    bc66:	2201      	movmi	r2, #1
    }
    bc68:	4610      	mov	r0, r2
    bc6a:	b008      	add	sp, #32
    bc6c:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    bc6e:	f64c 20f0 	movw	r0, #51952	; 0xcaf0
    bc72:	f2c0 0001 	movt	r0, #1
    bc76:	f64c 327c 	movw	r2, #52092	; 0xcb7c
    bc7a:	f2c0 0201 	movt	r2, #1
    bc7e:	2121      	movs	r1, #33	; 0x21
    bc80:	f009 fcb4 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bc84:	defe      	udf	#254	; 0xfe
    bc86:	f64c 3030 	movw	r0, #52016	; 0xcb30
    bc8a:	f2c0 0001 	movt	r0, #1
    bc8e:	f64c 328c 	movw	r2, #52108	; 0xcb8c
    bc92:	f2c0 0201 	movt	r2, #1
    bc96:	211c      	movs	r1, #28
    bc98:	f009 fca8 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bc9c:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] >= 128 }
    bc9e:	f64c 309c 	movw	r0, #52124	; 0xcb9c
    bca2:	f2c0 0001 	movt	r0, #1
    bca6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bcaa:	9900      	ldr	r1, [sp, #0]
    bcac:	f009 fcb4 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    bcb0:	defe      	udf	#254	; 0xfe

0000bcb2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E>:

    /// Set the size of the screen.
    fn vram_setsize(&mut self, size: (usize, usize)) {
    bcb2:	b580      	push	{r7, lr}
    bcb4:	b086      	sub	sp, #24
    bcb6:	9003      	str	r0, [sp, #12]
    bcb8:	9104      	str	r1, [sp, #16]
    bcba:	9205      	str	r2, [sp, #20]
        //  Do nothing. We assume SCREEN_WIDTH and SCREEN_HEIGHT.
        assert!(size.0 == SCREEN_WIDTH && size.1 == SCREEN_HEIGHT, "bad size");
    bcbc:	2940      	cmp	r1, #64	; 0x40
    bcbe:	9201      	str	r2, [sp, #4]
    bcc0:	9100      	str	r1, [sp, #0]
    bcc2:	d008      	beq.n	bcd6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x24>
    bcc4:	e003      	b.n	bcce <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x1c>
    bcc6:	2001      	movs	r0, #1
    bcc8:	f88d 000b 	strb.w	r0, [sp, #11]
    bccc:	e007      	b.n	bcde <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x2c>
    bcce:	2000      	movs	r0, #0
    bcd0:	f88d 000b 	strb.w	r0, [sp, #11]
    bcd4:	e003      	b.n	bcde <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x2c>
    bcd6:	9801      	ldr	r0, [sp, #4]
    bcd8:	2820      	cmp	r0, #32
    bcda:	d0f4      	beq.n	bcc6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x14>
    bcdc:	e7f7      	b.n	bcce <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x1c>
    bcde:	f89d 000b 	ldrb.w	r0, [sp, #11]
    bce2:	07c0      	lsls	r0, r0, #31
    bce4:	2800      	cmp	r0, #0
    bce6:	d008      	beq.n	bcfa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x48>
    bce8:	e7ff      	b.n	bcea <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x38>
        console::print("setsize "); console::printint(size.0 as i32); console::print(", "); console::printint(size.1 as i32); console::print("\n"); console::flush(); ////
    bcea:	f64c 30b4 	movw	r0, #52148	; 0xcbb4
    bcee:	f2c0 0001 	movt	r0, #1
    bcf2:	2108      	movs	r1, #8
    bcf4:	f7fd f97c 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    bcf8:	e00b      	b.n	bd12 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x60>
        assert!(size.0 == SCREEN_WIDTH && size.1 == SCREEN_HEIGHT, "bad size");
    bcfa:	f64c 30ac 	movw	r0, #52140	; 0xcbac
    bcfe:	f2c0 0001 	movt	r0, #1
    bd02:	f64c 32d4 	movw	r2, #52180	; 0xcbd4
    bd06:	f2c0 0201 	movt	r2, #1
    bd0a:	2108      	movs	r1, #8
    bd0c:	f009 fc6e 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bd10:	defe      	udf	#254	; 0xfe
        console::print("setsize "); console::printint(size.0 as i32); console::print(", "); console::printint(size.1 as i32); console::print("\n"); console::flush(); ////
    bd12:	9800      	ldr	r0, [sp, #0]
    bd14:	f7fd f9aa 	bl	906c <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    bd18:	e7ff      	b.n	bd1a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x68>
    bd1a:	f64c 30e4 	movw	r0, #52196	; 0xcbe4
    bd1e:	f2c0 0001 	movt	r0, #1
    bd22:	2102      	movs	r1, #2
    bd24:	f7fd f964 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    bd28:	e7ff      	b.n	bd2a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x78>
    bd2a:	9801      	ldr	r0, [sp, #4]
    bd2c:	f7fd f99e 	bl	906c <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    bd30:	e7ff      	b.n	bd32 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x80>
    bd32:	f64c 30e6 	movw	r0, #52198	; 0xcbe6
    bd36:	f2c0 0001 	movt	r0, #1
    bd3a:	2101      	movs	r1, #1
    bd3c:	f7fd f958 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    bd40:	e7ff      	b.n	bd42 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x90>
    bd42:	f7fd f99b 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    bd46:	e7ff      	b.n	bd48 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x96>
    }
    bd48:	b006      	add	sp, #24
    bd4a:	bd80      	pop	{r7, pc}

0000bd4c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17h3eb92f330a1e13e5E>:

    /// Get the size of the screen.
    fn vram_size(&mut self) -> (usize, usize) {
    bd4c:	b083      	sub	sp, #12
    bd4e:	9002      	str	r0, [sp, #8]
    bd50:	2040      	movs	r0, #64	; 0x40
        (SCREEN_WIDTH, SCREEN_HEIGHT)
    bd52:	9000      	str	r0, [sp, #0]
    bd54:	2020      	movs	r0, #32
    bd56:	9001      	str	r0, [sp, #4]
    }
    bd58:	9800      	ldr	r0, [sp, #0]
    bd5a:	9901      	ldr	r1, [sp, #4]
    bd5c:	b003      	add	sp, #12
    bd5e:	4770      	bx	lr

0000bd60 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h3f18189aedbeb9e0E>:

    /// Return the current clock value in nanoseconds.
    fn clock(&mut self) -> u64 {
    bd60:	b5b0      	push	{r4, r5, r7, lr}
    bd62:	b086      	sub	sp, #24
    bd64:	9005      	str	r0, [sp, #20]
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    bd66:	f00d fcdf 	bl	19728 <os_time_get>
    bd6a:	9004      	str	r0, [sp, #16]
    bd6c:	e7ff      	b.n	bd6e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h3f18189aedbeb9e0E+0xe>
    bd6e:	2000      	movs	r0, #0
    bd70:	9904      	ldr	r1, [sp, #16]
    bd72:	fba0 2301 	umull	r2, r3, r0, r1
    bd76:	2b00      	cmp	r3, #0
    bd78:	bf18      	it	ne
    bd7a:	2301      	movne	r3, #1
    bd7c:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    bd80:	fba0 e40c 	umull	lr, r4, r0, ip
    bd84:	2c00      	cmp	r4, #0
    bd86:	bf18      	it	ne
    bd88:	2401      	movne	r4, #1
    bd8a:	ea43 0304 	orr.w	r3, r3, r4
    bd8e:	4472      	add	r2, lr
    bd90:	fba1 ce0c 	umull	ip, lr, r1, ip
    bd94:	eb12 020e 	adds.w	r2, r2, lr
    bd98:	f140 0000 	adc.w	r0, r0, #0
    bd9c:	ea40 0003 	orr.w	r0, r0, r3
    bda0:	2800      	cmp	r0, #0
    bda2:	f8cd c00c 	str.w	ip, [sp, #12]
    bda6:	9202      	str	r2, [sp, #8]
    bda8:	d124      	bne.n	bdf4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h3f18189aedbeb9e0E+0x94>
    bdaa:	e7ff      	b.n	bdac <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h3f18189aedbeb9e0E+0x4c>
    bdac:	2000      	movs	r0, #0
    bdae:	9903      	ldr	r1, [sp, #12]
    bdb0:	fba0 2301 	umull	r2, r3, r0, r1
    bdb4:	2b00      	cmp	r3, #0
    bdb6:	bf18      	it	ne
    bdb8:	2301      	movne	r3, #1
    bdba:	f44f 6cfa 	mov.w	ip, #2000	; 0x7d0
    bdbe:	f8dd e008 	ldr.w	lr, [sp, #8]
    bdc2:	fbae 450c 	umull	r4, r5, lr, ip
    bdc6:	2d00      	cmp	r5, #0
    bdc8:	bf18      	it	ne
    bdca:	2501      	movne	r5, #1
    bdcc:	ea43 0305 	orr.w	r3, r3, r5
    bdd0:	4422      	add	r2, r4
    bdd2:	fba1 c40c 	umull	ip, r4, r1, ip
    bdd6:	1912      	adds	r2, r2, r4
    bdd8:	f140 0000 	adc.w	r0, r0, #0
    bddc:	ea40 0003 	orr.w	r0, r0, r3
    bde0:	2800      	cmp	r0, #0
    bde2:	f8cd c004 	str.w	ip, [sp, #4]
    bde6:	9200      	str	r2, [sp, #0]
    bde8:	d110      	bne.n	be0c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h3f18189aedbeb9e0E+0xac>
    bdea:	e7ff      	b.n	bdec <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h3f18189aedbeb9e0E+0x8c>
    }
    bdec:	9801      	ldr	r0, [sp, #4]
    bdee:	9900      	ldr	r1, [sp, #0]
    bdf0:	b006      	add	sp, #24
    bdf2:	bdb0      	pop	{r4, r5, r7, pc}
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    bdf4:	f64c 20f0 	movw	r0, #51952	; 0xcaf0
    bdf8:	f2c0 0001 	movt	r0, #1
    bdfc:	f64c 32e8 	movw	r2, #52200	; 0xcbe8
    be00:	f2c0 0201 	movt	r2, #1
    be04:	2121      	movs	r1, #33	; 0x21
    be06:	f009 fbf1 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    be0a:	defe      	udf	#254	; 0xfe
    be0c:	f64c 20f0 	movw	r0, #51952	; 0xcaf0
    be10:	f2c0 0001 	movt	r0, #1
    be14:	f64c 32e8 	movw	r2, #52200	; 0xcbe8
    be18:	f2c0 0201 	movt	r2, #1
    be1c:	2121      	movs	r1, #33	; 0x21
    be1e:	f009 fbe5 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    be22:	defe      	udf	#254	; 0xfe

0000be24 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha66b0913e7bbcba9E>:

    /// Play beep sound.
    fn beep(&mut self) {
    be24:	b081      	sub	sp, #4
    be26:	9000      	str	r0, [sp, #0]
        //  TODO: Vibrate? Flash?
    }
    be28:	b001      	add	sp, #4
    be2a:	4770      	bx	lr

0000be2c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE>:

    /// Called in every step; return true for shutdown.
    fn sched(&mut self) -> bool {
    be2c:	b580      	push	{r7, lr}
    be2e:	b084      	sub	sp, #16
    be30:	9003      	str	r0, [sp, #12]
        //  console::print("sched\n"); console::flush(); ////

        //  If no screen update, return
        if self.update_left == 0 && self.update_right == 0 &&
    be32:	7801      	ldrb	r1, [r0, #0]
    be34:	2900      	cmp	r1, #0
    be36:	9001      	str	r0, [sp, #4]
    be38:	d02e      	beq.n	be98 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x6c>
    be3a:	e029      	b.n	be90 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x64>
    be3c:	2001      	movs	r0, #1
    be3e:	f88d 0009 	strb.w	r0, [sp, #9]
    be42:	e008      	b.n	be56 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x2a>
    be44:	2000      	movs	r0, #0
    be46:	f88d 0009 	strb.w	r0, [sp, #9]
    be4a:	e004      	b.n	be56 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x2a>
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    be4c:	9801      	ldr	r0, [sp, #4]
    be4e:	78c1      	ldrb	r1, [r0, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    be50:	2900      	cmp	r1, #0
    be52:	d0f3      	beq.n	be3c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x10>
    be54:	e7f6      	b.n	be44 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x18>
    be56:	f89d 0009 	ldrb.w	r0, [sp, #9]
    be5a:	07c0      	lsls	r0, r0, #31
    be5c:	2800      	cmp	r0, #0
    be5e:	d12c      	bne.n	beba <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x8e>
    be60:	e025      	b.n	beae <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x82>
    be62:	2001      	movs	r0, #1
    be64:	f88d 000a 	strb.w	r0, [sp, #10]
    be68:	e008      	b.n	be7c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x50>
    be6a:	2000      	movs	r0, #0
    be6c:	f88d 000a 	strb.w	r0, [sp, #10]
    be70:	e004      	b.n	be7c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x50>
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    be72:	9801      	ldr	r0, [sp, #4]
    be74:	7841      	ldrb	r1, [r0, #1]
        if self.update_left == 0 && self.update_right == 0 &&
    be76:	2900      	cmp	r1, #0
    be78:	d0f3      	beq.n	be62 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x36>
    be7a:	e7f6      	b.n	be6a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x3e>
    be7c:	f89d 000a 	ldrb.w	r0, [sp, #10]
    be80:	07c0      	lsls	r0, r0, #31
    be82:	2800      	cmp	r0, #0
    be84:	d1e2      	bne.n	be4c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x20>
    be86:	e7dd      	b.n	be44 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x18>
    be88:	2001      	movs	r0, #1
    be8a:	f88d 000b 	strb.w	r0, [sp, #11]
    be8e:	e008      	b.n	bea2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x76>
    be90:	2000      	movs	r0, #0
    be92:	f88d 000b 	strb.w	r0, [sp, #11]
    be96:	e004      	b.n	bea2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x76>
    be98:	9801      	ldr	r0, [sp, #4]
    be9a:	7881      	ldrb	r1, [r0, #2]
    be9c:	2900      	cmp	r1, #0
    be9e:	d0f3      	beq.n	be88 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x5c>
    bea0:	e7f6      	b.n	be90 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x64>
    bea2:	f89d 000b 	ldrb.w	r0, [sp, #11]
    bea6:	07c0      	lsls	r0, r0, #31
    bea8:	2800      	cmp	r0, #0
    beaa:	d1e2      	bne.n	be72 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x46>
    beac:	e7dd      	b.n	be6a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x3e>

        //  If emulator is preparing the initial screen, refresh the screen later
        if !self.is_interactive { return false; }
    beae:	9801      	ldr	r0, [sp, #4]
    beb0:	7901      	ldrb	r1, [r0, #4]
    beb2:	07c9      	lsls	r1, r1, #31
    beb4:	2900      	cmp	r1, #0
    beb6:	d00e      	beq.n	bed6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0xaa>
    beb8:	e007      	b.n	beca <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x9e>
    beba:	2000      	movs	r0, #0
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    bebc:	f88d 0008 	strb.w	r0, [sp, #8]
    bec0:	e7ff      	b.n	bec2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x96>
        self.update_right = 0;
        self.update_bottom = 0;

        //  Return false to indicate no shutdown
        false
    }
    bec2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    bec6:	b004      	add	sp, #16
    bec8:	bd80      	pop	{r7, pc}
        if !self.is_checking_input { return false; }
    beca:	9801      	ldr	r0, [sp, #4]
    becc:	7941      	ldrb	r1, [r0, #5]
    bece:	07c9      	lsls	r1, r1, #31
    bed0:	2900      	cmp	r1, #0
    bed2:	d00a      	beq.n	beea <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0xbe>
    bed4:	e003      	b.n	bede <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0xb2>
    bed6:	2000      	movs	r0, #0
        if !self.is_interactive { return false; }
    bed8:	f88d 0008 	strb.w	r0, [sp, #8]
    bedc:	e7f1      	b.n	bec2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x96>
    bede:	2000      	movs	r0, #0
        self.is_checking_input = false;
    bee0:	9901      	ldr	r1, [sp, #4]
    bee2:	7148      	strb	r0, [r1, #5]
        unsafe { hal_watchdog_tickle() };
    bee4:	f00c f9f8 	bl	182d8 <hal_watchdog_tickle>
    bee8:	e003      	b.n	bef2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0xc6>
    beea:	2000      	movs	r0, #0
        if !self.is_checking_input { return false; }
    beec:	f88d 0008 	strb.w	r0, [sp, #8]
    bef0:	e7e7      	b.n	bec2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x96>
    bef2:	2001      	movs	r0, #1
        unsafe { os::os_time_delay(1) };
    bef4:	f00d fc3e 	bl	19774 <os_time_delay>
    bef8:	e7ff      	b.n	befa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0xce>
        render_region(
    befa:	9801      	ldr	r0, [sp, #4]
    befc:	7800      	ldrb	r0, [r0, #0]
    befe:	9901      	ldr	r1, [sp, #4]
    bf00:	7849      	ldrb	r1, [r1, #1]
    bf02:	9a01      	ldr	r2, [sp, #4]
    bf04:	7892      	ldrb	r2, [r2, #2]
    bf06:	9b01      	ldr	r3, [sp, #4]
    bf08:	78db      	ldrb	r3, [r3, #3]
    bf0a:	f000 f80a 	bl	bf22 <_ZN3app5chip813render_region17h63a2f42595e40485E>
    bf0e:	e7ff      	b.n	bf10 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0xe4>
    bf10:	2000      	movs	r0, #0
        self.update_left = 0;
    bf12:	9901      	ldr	r1, [sp, #4]
    bf14:	7008      	strb	r0, [r1, #0]
        self.update_top = 0;
    bf16:	7048      	strb	r0, [r1, #1]
        self.update_right = 0;
    bf18:	7088      	strb	r0, [r1, #2]
        self.update_bottom = 0;
    bf1a:	70c8      	strb	r0, [r1, #3]
        false
    bf1c:	f88d 0008 	strb.w	r0, [sp, #8]
    }
    bf20:	e7cf      	b.n	bec2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x96>

0000bf22 <_ZN3app5chip813render_region17h63a2f42595e40485E>:
}

/// Render the Virtual Screen region
fn render_region(left: u8, top: u8, right: u8, bottom: u8) {
    bf22:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf24:	b095      	sub	sp, #84	; 0x54
    bf26:	fa5f fc80 	uxtb.w	ip, r0
    bf2a:	fa5f fe82 	uxtb.w	lr, r2
    bf2e:	461c      	mov	r4, r3
    bf30:	4615      	mov	r5, r2
    bf32:	460e      	mov	r6, r1
    bf34:	4607      	mov	r7, r0
    bf36:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    bf3a:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    bf3e:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
    bf42:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    let width = right - left + 1;
    bf46:	ebae 000c 	sub.w	r0, lr, ip
    bf4a:	b2c1      	uxtb	r1, r0
    bf4c:	4602      	mov	r2, r0
    bf4e:	4281      	cmp	r1, r0
    bf50:	9411      	str	r4, [sp, #68]	; 0x44
    bf52:	9510      	str	r5, [sp, #64]	; 0x40
    bf54:	960f      	str	r6, [sp, #60]	; 0x3c
    bf56:	970e      	str	r7, [sp, #56]	; 0x38
    bf58:	920d      	str	r2, [sp, #52]	; 0x34
    bf5a:	f040 80df 	bne.w	c11c <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1fa>
    bf5e:	e7ff      	b.n	bf60 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x3e>
    bf60:	2001      	movs	r0, #1
    bf62:	990d      	ldr	r1, [sp, #52]	; 0x34
    bf64:	fa50 f081 	uxtab	r0, r0, r1
    bf68:	b2c2      	uxtb	r2, r0
    bf6a:	4603      	mov	r3, r0
    bf6c:	4282      	cmp	r2, r0
    bf6e:	930c      	str	r3, [sp, #48]	; 0x30
    bf70:	f040 80e0 	bne.w	c134 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x212>
    bf74:	e7ff      	b.n	bf76 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x54>
    bf76:	980c      	ldr	r0, [sp, #48]	; 0x30
    bf78:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    let height = bottom - top + 1;
    bf7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    bf7e:	b2ca      	uxtb	r2, r1
    bf80:	9b11      	ldr	r3, [sp, #68]	; 0x44
    bf82:	fa5f fc83 	uxtb.w	ip, r3
    bf86:	ebac 0202 	sub.w	r2, ip, r2
    bf8a:	fa5f fc82 	uxtb.w	ip, r2
    bf8e:	4696      	mov	lr, r2
    bf90:	4594      	cmp	ip, r2
    bf92:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    bf96:	f040 80d9 	bne.w	c14c <_ZN3app5chip813render_region17h63a2f42595e40485E+0x22a>
    bf9a:	e7ff      	b.n	bf9c <_ZN3app5chip813render_region17h63a2f42595e40485E+0x7a>
    bf9c:	2001      	movs	r0, #1
    bf9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bfa0:	fa50 f081 	uxtab	r0, r0, r1
    bfa4:	b2c2      	uxtb	r2, r0
    bfa6:	4603      	mov	r3, r0
    bfa8:	4282      	cmp	r2, r0
    bfaa:	930a      	str	r3, [sp, #40]	; 0x28
    bfac:	f040 80da 	bne.w	c164 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x242>
    bfb0:	e7ff      	b.n	bfb2 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x90>
    bfb2:	980a      	ldr	r0, [sp, #40]	; 0x28
    bfb4:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
    //  If the update region is small, render with a single block
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    bfb8:	990c      	ldr	r1, [sp, #48]	; 0x30
    bfba:	b2ca      	uxtb	r2, r1
    bfbc:	fa52 f280 	uxtab	r2, r2, r0
    bfc0:	b2d3      	uxtb	r3, r2
    bfc2:	4694      	mov	ip, r2
    bfc4:	4293      	cmp	r3, r2
    bfc6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    bfca:	f040 80d7 	bne.w	c17c <_ZN3app5chip813render_region17h63a2f42595e40485E+0x25a>
    bfce:	e7ff      	b.n	bfd0 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xae>
    bfd0:	9809      	ldr	r0, [sp, #36]	; 0x24
    bfd2:	b2c1      	uxtb	r1, r0
    bfd4:	2926      	cmp	r1, #38	; 0x26
    bfd6:	d307      	bcc.n	bfe8 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xc6>
    bfd8:	e7ff      	b.n	bfda <_ZN3app5chip813render_region17h63a2f42595e40485E+0xb8>
        render_block(left, top, right, bottom);
    } else {
        //  If the update region is too big for a single block, break the region into blocks and render
        let mut x = left;
    bfda:	980e      	ldr	r0, [sp, #56]	; 0x38
    bfdc:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
        let mut y = top;
    bfe0:	990f      	ldr	r1, [sp, #60]	; 0x3c
    bfe2:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
        loop {
    bfe6:	e007      	b.n	bff8 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xd6>
        render_block(left, top, right, bottom);
    bfe8:	980e      	ldr	r0, [sp, #56]	; 0x38
    bfea:	990f      	ldr	r1, [sp, #60]	; 0x3c
    bfec:	9a10      	ldr	r2, [sp, #64]	; 0x40
    bfee:	9b11      	ldr	r3, [sp, #68]	; 0x44
    bff0:	f000 f918 	bl	c224 <_ZN3app5chip812render_block17hf14dcded684223a2E>
    bff4:	e7ff      	b.n	bff6 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xd4>
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    bff6:	e08f      	b.n	c118 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f6>
            let block_right = x + BLOCK_WIDTH as u8 - 1;
    bff8:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    bffc:	3020      	adds	r0, #32
    bffe:	b2c1      	uxtb	r1, r0
    c000:	4602      	mov	r2, r0
    c002:	4281      	cmp	r1, r0
    c004:	9208      	str	r2, [sp, #32]
    c006:	f040 80c5 	bne.w	c194 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x272>
    c00a:	e7ff      	b.n	c00c <_ZN3app5chip813render_region17h63a2f42595e40485E+0xea>
    c00c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c010:	9908      	ldr	r1, [sp, #32]
    c012:	fa50 f081 	uxtab	r0, r0, r1
    c016:	b2c2      	uxtb	r2, r0
    c018:	4603      	mov	r3, r0
    c01a:	4282      	cmp	r2, r0
    c01c:	9307      	str	r3, [sp, #28]
    c01e:	f040 80c5 	bne.w	c1ac <_ZN3app5chip813render_region17h63a2f42595e40485E+0x28a>
    c022:	e7ff      	b.n	c024 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x102>
    c024:	9807      	ldr	r0, [sp, #28]
    c026:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
            let block_bottom = y + BLOCK_HEIGHT as u8 - 1;
    c02a:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    c02e:	3105      	adds	r1, #5
    c030:	b2ca      	uxtb	r2, r1
    c032:	460b      	mov	r3, r1
    c034:	428a      	cmp	r2, r1
    c036:	9306      	str	r3, [sp, #24]
    c038:	f040 80c4 	bne.w	c1c4 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x2a2>
    c03c:	e7ff      	b.n	c03e <_ZN3app5chip813render_region17h63a2f42595e40485E+0x11c>
    c03e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c042:	9906      	ldr	r1, [sp, #24]
    c044:	fa50 f081 	uxtab	r0, r0, r1
    c048:	b2c2      	uxtb	r2, r0
    c04a:	4603      	mov	r3, r0
    c04c:	4282      	cmp	r2, r0
    c04e:	9305      	str	r3, [sp, #20]
    c050:	f040 80c4 	bne.w	c1dc <_ZN3app5chip813render_region17h63a2f42595e40485E+0x2ba>
    c054:	e7ff      	b.n	c056 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x134>
    c056:	9805      	ldr	r0, [sp, #20]
    c058:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
            render_block(x, y,
    c05c:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
    c060:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
                if block_right  <= right  { block_right }  else { right },
    c064:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c066:	fa5f fc83 	uxtb.w	ip, r3
    c06a:	f8dd e01c 	ldr.w	lr, [sp, #28]
    c06e:	fa5f f48e 	uxtb.w	r4, lr
    c072:	4564      	cmp	r4, ip
    c074:	9104      	str	r1, [sp, #16]
    c076:	9203      	str	r2, [sp, #12]
    c078:	d904      	bls.n	c084 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x162>
    c07a:	e7ff      	b.n	c07c <_ZN3app5chip813render_region17h63a2f42595e40485E+0x15a>
    c07c:	9810      	ldr	r0, [sp, #64]	; 0x40
    c07e:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
    c082:	e003      	b.n	c08c <_ZN3app5chip813render_region17h63a2f42595e40485E+0x16a>
    c084:	9807      	ldr	r0, [sp, #28]
    c086:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
    c08a:	e7ff      	b.n	c08c <_ZN3app5chip813render_region17h63a2f42595e40485E+0x16a>
                if block_bottom <= bottom { block_bottom } else { bottom }
    c08c:	9811      	ldr	r0, [sp, #68]	; 0x44
    c08e:	b2c1      	uxtb	r1, r0
    c090:	9a05      	ldr	r2, [sp, #20]
    c092:	b2d3      	uxtb	r3, r2
    c094:	428b      	cmp	r3, r1
    c096:	d904      	bls.n	c0a2 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x180>
    c098:	e7ff      	b.n	c09a <_ZN3app5chip813render_region17h63a2f42595e40485E+0x178>
    c09a:	9811      	ldr	r0, [sp, #68]	; 0x44
    c09c:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
    c0a0:	e003      	b.n	c0aa <_ZN3app5chip813render_region17h63a2f42595e40485E+0x188>
    c0a2:	9805      	ldr	r0, [sp, #20]
    c0a4:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
    c0a8:	e7ff      	b.n	c0aa <_ZN3app5chip813render_region17h63a2f42595e40485E+0x188>
            render_block(x, y,
    c0aa:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
    c0ae:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    c0b2:	9804      	ldr	r0, [sp, #16]
    c0b4:	9903      	ldr	r1, [sp, #12]
    c0b6:	f000 f8b5 	bl	c224 <_ZN3app5chip812render_block17hf14dcded684223a2E>
    c0ba:	e7ff      	b.n	c0bc <_ZN3app5chip813render_region17h63a2f42595e40485E+0x19a>
            );  //  Will not overflow SPI buffer
            x += BLOCK_WIDTH as u8;
    c0bc:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    c0c0:	3020      	adds	r0, #32
    c0c2:	b2c1      	uxtb	r1, r0
    c0c4:	4602      	mov	r2, r0
    c0c6:	4281      	cmp	r1, r0
    c0c8:	9202      	str	r2, [sp, #8]
    c0ca:	f040 8093 	bne.w	c1f4 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x2d2>
    c0ce:	e7ff      	b.n	c0d0 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1ae>
    c0d0:	9802      	ldr	r0, [sp, #8]
    c0d2:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
            if x > right {
    c0d6:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
    c0da:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c0dc:	b2d3      	uxtb	r3, r2
    c0de:	4299      	cmp	r1, r3
    c0e0:	d919      	bls.n	c116 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f4>
    c0e2:	e7ff      	b.n	c0e4 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1c2>
                x = left;
    c0e4:	980e      	ldr	r0, [sp, #56]	; 0x38
    c0e6:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
                y += BLOCK_HEIGHT as u8;
    c0ea:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    c0ee:	3105      	adds	r1, #5
    c0f0:	b2ca      	uxtb	r2, r1
    c0f2:	460b      	mov	r3, r1
    c0f4:	428a      	cmp	r2, r1
    c0f6:	9301      	str	r3, [sp, #4]
    c0f8:	f040 8088 	bne.w	c20c <_ZN3app5chip813render_region17h63a2f42595e40485E+0x2ea>
    c0fc:	e7ff      	b.n	c0fe <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1dc>
    c0fe:	9801      	ldr	r0, [sp, #4]
    c100:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
                if y > bottom { break; }
    c104:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    c108:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c10a:	b2d3      	uxtb	r3, r2
    c10c:	4299      	cmp	r1, r3
    c10e:	d801      	bhi.n	c114 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f2>
    c110:	e7ff      	b.n	c112 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f0>
            if x > right {
    c112:	e000      	b.n	c116 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f4>
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    c114:	e000      	b.n	c118 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f6>
        loop {
    c116:	e76f      	b.n	bff8 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xd6>
            }
        }
    }
}
    c118:	b015      	add	sp, #84	; 0x54
    c11a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    let width = right - left + 1;
    c11c:	f64c 4010 	movw	r0, #52240	; 0xcc10
    c120:	f2c0 0001 	movt	r0, #1
    c124:	f64c 32f8 	movw	r2, #52216	; 0xcbf8
    c128:	f2c0 0201 	movt	r2, #1
    c12c:	2121      	movs	r1, #33	; 0x21
    c12e:	f009 fa5d 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c132:	defe      	udf	#254	; 0xfe
    c134:	f64c 3030 	movw	r0, #52016	; 0xcb30
    c138:	f2c0 0001 	movt	r0, #1
    c13c:	f64c 32f8 	movw	r2, #52216	; 0xcbf8
    c140:	f2c0 0201 	movt	r2, #1
    c144:	211c      	movs	r1, #28
    c146:	f009 fa51 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c14a:	defe      	udf	#254	; 0xfe
    let height = bottom - top + 1;
    c14c:	f64c 4010 	movw	r0, #52240	; 0xcc10
    c150:	f2c0 0001 	movt	r0, #1
    c154:	f64c 4234 	movw	r2, #52276	; 0xcc34
    c158:	f2c0 0201 	movt	r2, #1
    c15c:	2121      	movs	r1, #33	; 0x21
    c15e:	f009 fa45 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c162:	defe      	udf	#254	; 0xfe
    c164:	f64c 3030 	movw	r0, #52016	; 0xcb30
    c168:	f2c0 0001 	movt	r0, #1
    c16c:	f64c 4234 	movw	r2, #52276	; 0xcc34
    c170:	f2c0 0201 	movt	r2, #1
    c174:	211c      	movs	r1, #28
    c176:	f009 fa39 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c17a:	defe      	udf	#254	; 0xfe
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    c17c:	f64c 3030 	movw	r0, #52016	; 0xcb30
    c180:	f2c0 0001 	movt	r0, #1
    c184:	f64c 4244 	movw	r2, #52292	; 0xcc44
    c188:	f2c0 0201 	movt	r2, #1
    c18c:	211c      	movs	r1, #28
    c18e:	f009 fa2d 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c192:	defe      	udf	#254	; 0xfe
            let block_right = x + BLOCK_WIDTH as u8 - 1;
    c194:	f64c 3030 	movw	r0, #52016	; 0xcb30
    c198:	f2c0 0001 	movt	r0, #1
    c19c:	f64c 4254 	movw	r2, #52308	; 0xcc54
    c1a0:	f2c0 0201 	movt	r2, #1
    c1a4:	211c      	movs	r1, #28
    c1a6:	f009 fa21 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c1aa:	defe      	udf	#254	; 0xfe
    c1ac:	f64c 4010 	movw	r0, #52240	; 0xcc10
    c1b0:	f2c0 0001 	movt	r0, #1
    c1b4:	f64c 4254 	movw	r2, #52308	; 0xcc54
    c1b8:	f2c0 0201 	movt	r2, #1
    c1bc:	2121      	movs	r1, #33	; 0x21
    c1be:	f009 fa15 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c1c2:	defe      	udf	#254	; 0xfe
            let block_bottom = y + BLOCK_HEIGHT as u8 - 1;
    c1c4:	f64c 3030 	movw	r0, #52016	; 0xcb30
    c1c8:	f2c0 0001 	movt	r0, #1
    c1cc:	f64c 4264 	movw	r2, #52324	; 0xcc64
    c1d0:	f2c0 0201 	movt	r2, #1
    c1d4:	211c      	movs	r1, #28
    c1d6:	f009 fa09 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c1da:	defe      	udf	#254	; 0xfe
    c1dc:	f64c 4010 	movw	r0, #52240	; 0xcc10
    c1e0:	f2c0 0001 	movt	r0, #1
    c1e4:	f64c 4264 	movw	r2, #52324	; 0xcc64
    c1e8:	f2c0 0201 	movt	r2, #1
    c1ec:	2121      	movs	r1, #33	; 0x21
    c1ee:	f009 f9fd 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c1f2:	defe      	udf	#254	; 0xfe
            x += BLOCK_WIDTH as u8;
    c1f4:	f64c 3030 	movw	r0, #52016	; 0xcb30
    c1f8:	f2c0 0001 	movt	r0, #1
    c1fc:	f64c 4274 	movw	r2, #52340	; 0xcc74
    c200:	f2c0 0201 	movt	r2, #1
    c204:	211c      	movs	r1, #28
    c206:	f009 f9f1 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c20a:	defe      	udf	#254	; 0xfe
                y += BLOCK_HEIGHT as u8;
    c20c:	f64c 3030 	movw	r0, #52016	; 0xcb30
    c210:	f2c0 0001 	movt	r0, #1
    c214:	f64c 4284 	movw	r2, #52356	; 0xcc84
    c218:	f2c0 0201 	movt	r2, #1
    c21c:	211c      	movs	r1, #28
    c21e:	f009 f9e5 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c222:	defe      	udf	#254	; 0xfe

0000c224 <_ZN3app5chip812render_block17hf14dcded684223a2E>:

/// Render the Virtual Block
fn render_block(left: u8, top: u8, right: u8, bottom: u8) {
    c224:	b570      	push	{r4, r5, r6, lr}
    c226:	b090      	sub	sp, #64	; 0x40
    c228:	469c      	mov	ip, r3
    c22a:	4696      	mov	lr, r2
    c22c:	460c      	mov	r4, r1
    c22e:	4605      	mov	r5, r0
    c230:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    c234:	f88d 1035 	strb.w	r1, [sp, #53]	; 0x35
    c238:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
    c23c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    //  console::print("render "); console::printint(left as i32); console::print(", "); console::printint(top as i32); console::print(", "); console::printint(right as i32 - left as i32); console::print(", "); console::printint(bottom as i32 - top as i32); console::print("\n"); console::flush(); ////
    //  Create a new block for the region to be updated
    let mut block = PixelIterator::new(
    c240:	466e      	mov	r6, sp
    c242:	6033      	str	r3, [r6, #0]
    c244:	ab0a      	add	r3, sp, #40	; 0x28
    c246:	9009      	str	r0, [sp, #36]	; 0x24
    c248:	4618      	mov	r0, r3
    c24a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c24c:	9108      	str	r1, [sp, #32]
    c24e:	4619      	mov	r1, r3
    c250:	9e08      	ldr	r6, [sp, #32]
    c252:	9207      	str	r2, [sp, #28]
    c254:	4632      	mov	r2, r6
    c256:	9b07      	ldr	r3, [sp, #28]
    c258:	f8cd c018 	str.w	ip, [sp, #24]
    c25c:	f8cd e014 	str.w	lr, [sp, #20]
    c260:	9404      	str	r4, [sp, #16]
    c262:	9503      	str	r5, [sp, #12]
    c264:	f000 f832 	bl	c2cc <_ZN3app5chip813PixelIterator3new17h822e2c1da3bbcd7bE>
    c268:	e7ff      	b.n	c26a <_ZN3app5chip812render_block17hf14dcded684223a2E+0x46>
    c26a:	a80a      	add	r0, sp, #40	; 0x28
        left, top, 
        right, bottom,
    );
    //  Render the block
    let (left, top, right, bottom) = block.get_window();
    c26c:	f000 f849 	bl	c302 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE>
    c270:	900e      	str	r0, [sp, #56]	; 0x38
    c272:	980e      	ldr	r0, [sp, #56]	; 0x38
    c274:	900c      	str	r0, [sp, #48]	; 0x30
    c276:	e7ff      	b.n	c278 <_ZN3app5chip812render_block17hf14dcded684223a2E+0x54>
    c278:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    c27c:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
    c280:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
    c284:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
    c288:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    c28c:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
    c290:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    c294:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    druid::set_display_pixels(left as u16, top as u16, right as u16, bottom as u16,
    c298:	46ec      	mov	ip, sp
    c29a:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
    c29e:	f8cc e000 	str.w	lr, [ip]
    c2a2:	f000 fd49 	bl	cd38 <_ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E>
    c2a6:	9002      	str	r0, [sp, #8]
    c2a8:	e7ff      	b.n	c2aa <_ZN3app5chip812render_block17hf14dcded684223a2E+0x86>
    c2aa:	9802      	ldr	r0, [sp, #8]
    c2ac:	f000 0001 	and.w	r0, r0, #1
    c2b0:	f64c 4194 	movw	r1, #52372	; 0xcc94
    c2b4:	f2c0 0101 	movt	r1, #1
    c2b8:	f64c 43a8 	movw	r3, #52392	; 0xcca8
    c2bc:	f2c0 0301 	movt	r3, #1
    c2c0:	2211      	movs	r2, #17
    c2c2:	f008 f925 	bl	14510 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
    c2c6:	e7ff      	b.n	c2c8 <_ZN3app5chip812render_block17hf14dcded684223a2E+0xa4>
        &mut block
    ).expect("set pixels failed");    
}
    c2c8:	b010      	add	sp, #64	; 0x40
    c2ca:	bd70      	pop	{r4, r5, r6, pc}

0000c2cc <_ZN3app5chip813PixelIterator3new17h822e2c1da3bbcd7bE>:
    block_bottom:    u8,
}

impl PixelIterator {
    /// Return a new PixelInterator for the block dimensions
    pub fn new(
    c2cc:	b570      	push	{r4, r5, r6, lr}
    c2ce:	b081      	sub	sp, #4
    c2d0:	f8dd c014 	ldr.w	ip, [sp, #20]
    c2d4:	469e      	mov	lr, r3
    c2d6:	4614      	mov	r4, r2
    c2d8:	460d      	mov	r5, r1
    c2da:	f88d 1000 	strb.w	r1, [sp]
    c2de:	f88d 2001 	strb.w	r2, [sp, #1]
    c2e2:	f88d 3002 	strb.w	r3, [sp, #2]
    c2e6:	f88d c003 	strb.w	ip, [sp, #3]
        //  End column number for block
        block_right:     u8,
        //  End row number for block
        block_bottom:    u8,        
    ) -> PixelIterator {
        PixelIterator {
    c2ea:	7001      	strb	r1, [r0, #0]
    c2ec:	7042      	strb	r2, [r0, #1]
    c2ee:	2600      	movs	r6, #0
    c2f0:	7086      	strb	r6, [r0, #2]
    c2f2:	70c6      	strb	r6, [r0, #3]
    c2f4:	7101      	strb	r1, [r0, #4]
    c2f6:	7143      	strb	r3, [r0, #5]
    c2f8:	7182      	strb	r2, [r0, #6]
    c2fa:	f880 c007 	strb.w	ip, [r0, #7]
            x_offset: 0, 
            y_offset: 0,
            block_left, block_right,
            block_top, block_bottom,
        }
    }
    c2fe:	b001      	add	sp, #4
    c300:	bd70      	pop	{r4, r5, r6, pc}

0000c302 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE>:
    pub fn contains(&self, x: u8, y: u8) -> bool {
        x >= self.block_left && x <= self.block_right &&
            y >= self.block_top && y <= self.block_bottom
    }
    /// Return window of Physical Pixels: (left, top, right, bottom)
    pub fn get_window(&self) -> (u8, u8, u8, u8) {
    c302:	b580      	push	{r7, lr}
    c304:	b092      	sub	sp, #72	; 0x48
    c306:	9010      	str	r0, [sp, #64]	; 0x40
        let left: u8 = self.block_left as u8 * PIXEL_WIDTH as u8;
    c308:	7901      	ldrb	r1, [r0, #4]
    c30a:	2203      	movs	r2, #3
    c30c:	fba1 1202 	umull	r1, r2, r1, r2
    c310:	0a0b      	lsrs	r3, r1, #8
    c312:	f04f 0c00 	mov.w	ip, #0
    c316:	ebbc 2f11 	cmp.w	ip, r1, lsr #8
    c31a:	bf18      	it	ne
    c31c:	2301      	movne	r3, #1
    c31e:	2a00      	cmp	r2, #0
    c320:	bf18      	it	ne
    c322:	2201      	movne	r2, #1
    c324:	ea42 0203 	orr.w	r2, r2, r3
    c328:	2a00      	cmp	r2, #0
    c32a:	900d      	str	r0, [sp, #52]	; 0x34
    c32c:	910c      	str	r1, [sp, #48]	; 0x30
    c32e:	f040 810a 	bne.w	c546 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x244>
    c332:	e7ff      	b.n	c334 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x32>
    c334:	980c      	ldr	r0, [sp, #48]	; 0x30
    c336:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
        let top: u8 = self.block_top as u8 * PIXEL_HEIGHT as u8; 
    c33a:	990d      	ldr	r1, [sp, #52]	; 0x34
    c33c:	798a      	ldrb	r2, [r1, #6]
    c33e:	2305      	movs	r3, #5
    c340:	fba2 2303 	umull	r2, r3, r2, r3
    c344:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    c348:	f04f 0e00 	mov.w	lr, #0
    c34c:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
    c350:	bf18      	it	ne
    c352:	f04f 0c01 	movne.w	ip, #1
    c356:	2b00      	cmp	r3, #0
    c358:	bf18      	it	ne
    c35a:	2301      	movne	r3, #1
    c35c:	ea43 030c 	orr.w	r3, r3, ip
    c360:	2b00      	cmp	r3, #0
    c362:	920b      	str	r2, [sp, #44]	; 0x2c
    c364:	f040 80fb 	bne.w	c55e <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x25c>
    c368:	e7ff      	b.n	c36a <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x68>
    c36a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c36c:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
        let right: u8 = left + (self.block_right - self.block_left + 1) * PIXEL_WIDTH as u8 - 1;
    c370:	990d      	ldr	r1, [sp, #52]	; 0x34
    c372:	790a      	ldrb	r2, [r1, #4]
    c374:	794b      	ldrb	r3, [r1, #5]
    c376:	1a9a      	subs	r2, r3, r2
    c378:	b2d3      	uxtb	r3, r2
    c37a:	4694      	mov	ip, r2
    c37c:	4293      	cmp	r3, r2
    c37e:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    c382:	f040 80f8 	bne.w	c576 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x274>
    c386:	e7ff      	b.n	c388 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x86>
    c388:	2001      	movs	r0, #1
    c38a:	990a      	ldr	r1, [sp, #40]	; 0x28
    c38c:	fa50 f081 	uxtab	r0, r0, r1
    c390:	b2c2      	uxtb	r2, r0
    c392:	4603      	mov	r3, r0
    c394:	4282      	cmp	r2, r0
    c396:	9309      	str	r3, [sp, #36]	; 0x24
    c398:	f040 80f9 	bne.w	c58e <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x28c>
    c39c:	e7ff      	b.n	c39e <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x9c>
    c39e:	9809      	ldr	r0, [sp, #36]	; 0x24
    c3a0:	b2c1      	uxtb	r1, r0
    c3a2:	2203      	movs	r2, #3
    c3a4:	fba1 1202 	umull	r1, r2, r1, r2
    c3a8:	0a0b      	lsrs	r3, r1, #8
    c3aa:	f04f 0c00 	mov.w	ip, #0
    c3ae:	ebbc 2f11 	cmp.w	ip, r1, lsr #8
    c3b2:	bf18      	it	ne
    c3b4:	2301      	movne	r3, #1
    c3b6:	2a00      	cmp	r2, #0
    c3b8:	bf18      	it	ne
    c3ba:	2201      	movne	r2, #1
    c3bc:	ea42 0203 	orr.w	r2, r2, r3
    c3c0:	2a00      	cmp	r2, #0
    c3c2:	9108      	str	r1, [sp, #32]
    c3c4:	f040 80ef 	bne.w	c5a6 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x2a4>
    c3c8:	e7ff      	b.n	c3ca <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0xc8>
    c3ca:	980c      	ldr	r0, [sp, #48]	; 0x30
    c3cc:	b2c1      	uxtb	r1, r0
    c3ce:	9a08      	ldr	r2, [sp, #32]
    c3d0:	fa51 f182 	uxtab	r1, r1, r2
    c3d4:	b2cb      	uxtb	r3, r1
    c3d6:	468c      	mov	ip, r1
    c3d8:	428b      	cmp	r3, r1
    c3da:	f8cd c01c 	str.w	ip, [sp, #28]
    c3de:	f040 80ee 	bne.w	c5be <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x2bc>
    c3e2:	e7ff      	b.n	c3e4 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0xe2>
    c3e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c3e8:	9907      	ldr	r1, [sp, #28]
    c3ea:	fa50 f081 	uxtab	r0, r0, r1
    c3ee:	b2c2      	uxtb	r2, r0
    c3f0:	4603      	mov	r3, r0
    c3f2:	4282      	cmp	r2, r0
    c3f4:	9306      	str	r3, [sp, #24]
    c3f6:	f040 80ee 	bne.w	c5d6 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x2d4>
    c3fa:	e7ff      	b.n	c3fc <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0xfa>
    c3fc:	9806      	ldr	r0, [sp, #24]
    c3fe:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
        let bottom: u8 = top + (self.block_bottom - self.block_top + 1) * PIXEL_HEIGHT as u8 - 1;
    c402:	990d      	ldr	r1, [sp, #52]	; 0x34
    c404:	798a      	ldrb	r2, [r1, #6]
    c406:	79cb      	ldrb	r3, [r1, #7]
    c408:	1a9a      	subs	r2, r3, r2
    c40a:	b2d3      	uxtb	r3, r2
    c40c:	4694      	mov	ip, r2
    c40e:	4293      	cmp	r3, r2
    c410:	f8cd c014 	str.w	ip, [sp, #20]
    c414:	f040 80eb 	bne.w	c5ee <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x2ec>
    c418:	e7ff      	b.n	c41a <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x118>
    c41a:	2001      	movs	r0, #1
    c41c:	9905      	ldr	r1, [sp, #20]
    c41e:	fa50 f081 	uxtab	r0, r0, r1
    c422:	b2c2      	uxtb	r2, r0
    c424:	4603      	mov	r3, r0
    c426:	4282      	cmp	r2, r0
    c428:	9304      	str	r3, [sp, #16]
    c42a:	f040 80ec 	bne.w	c606 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x304>
    c42e:	e7ff      	b.n	c430 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x12e>
    c430:	9804      	ldr	r0, [sp, #16]
    c432:	b2c1      	uxtb	r1, r0
    c434:	2205      	movs	r2, #5
    c436:	fba1 1202 	umull	r1, r2, r1, r2
    c43a:	0a0b      	lsrs	r3, r1, #8
    c43c:	f04f 0c00 	mov.w	ip, #0
    c440:	ebbc 2f11 	cmp.w	ip, r1, lsr #8
    c444:	bf18      	it	ne
    c446:	2301      	movne	r3, #1
    c448:	2a00      	cmp	r2, #0
    c44a:	bf18      	it	ne
    c44c:	2201      	movne	r2, #1
    c44e:	ea42 0203 	orr.w	r2, r2, r3
    c452:	2a00      	cmp	r2, #0
    c454:	9103      	str	r1, [sp, #12]
    c456:	f040 80e2 	bne.w	c61e <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x31c>
    c45a:	e7ff      	b.n	c45c <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x15a>
    c45c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c45e:	b2c1      	uxtb	r1, r0
    c460:	9a03      	ldr	r2, [sp, #12]
    c462:	fa51 f182 	uxtab	r1, r1, r2
    c466:	b2cb      	uxtb	r3, r1
    c468:	468c      	mov	ip, r1
    c46a:	428b      	cmp	r3, r1
    c46c:	f8cd c008 	str.w	ip, [sp, #8]
    c470:	f040 80e1 	bne.w	c636 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x334>
    c474:	e7ff      	b.n	c476 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x174>
    c476:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c47a:	9902      	ldr	r1, [sp, #8]
    c47c:	fa50 f081 	uxtab	r0, r0, r1
    c480:	b2c2      	uxtb	r2, r0
    c482:	4603      	mov	r3, r0
    c484:	4282      	cmp	r2, r0
    c486:	9301      	str	r3, [sp, #4]
    c488:	f040 80e1 	bne.w	c64e <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x34c>
    c48c:	e7ff      	b.n	c48e <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x18c>
    c48e:	9801      	ldr	r0, [sp, #4]
    c490:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
        assert!(left < 240 && top < 240 && right < 240 && bottom < 240, "overflow");
    c494:	990c      	ldr	r1, [sp, #48]	; 0x30
    c496:	b2ca      	uxtb	r2, r1
    c498:	2af0      	cmp	r2, #240	; 0xf0
    c49a:	d32e      	bcc.n	c4fa <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1f8>
    c49c:	e029      	b.n	c4f2 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1f0>
    c49e:	2001      	movs	r0, #1
    c4a0:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    c4a4:	e008      	b.n	c4b8 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1b6>
    c4a6:	2000      	movs	r0, #0
    c4a8:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    c4ac:	e004      	b.n	c4b8 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1b6>
    c4ae:	9801      	ldr	r0, [sp, #4]
    c4b0:	b2c1      	uxtb	r1, r0
    c4b2:	29f0      	cmp	r1, #240	; 0xf0
    c4b4:	d3f3      	bcc.n	c49e <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x19c>
    c4b6:	e7f6      	b.n	c4a6 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1a4>
    c4b8:	f89d 003d 	ldrb.w	r0, [sp, #61]	; 0x3d
    c4bc:	07c0      	lsls	r0, r0, #31
    c4be:	2800      	cmp	r0, #0
    c4c0:	d035      	beq.n	c52e <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x22c>
    c4c2:	e025      	b.n	c510 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x20e>
    c4c4:	2001      	movs	r0, #1
    c4c6:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
    c4ca:	e008      	b.n	c4de <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1dc>
    c4cc:	2000      	movs	r0, #0
    c4ce:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
    c4d2:	e004      	b.n	c4de <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1dc>
    c4d4:	9806      	ldr	r0, [sp, #24]
    c4d6:	b2c1      	uxtb	r1, r0
    c4d8:	29f0      	cmp	r1, #240	; 0xf0
    c4da:	d3f3      	bcc.n	c4c4 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1c2>
    c4dc:	e7f6      	b.n	c4cc <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1ca>
    c4de:	f89d 003e 	ldrb.w	r0, [sp, #62]	; 0x3e
    c4e2:	07c0      	lsls	r0, r0, #31
    c4e4:	2800      	cmp	r0, #0
    c4e6:	d1e2      	bne.n	c4ae <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1ac>
    c4e8:	e7dd      	b.n	c4a6 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1a4>
    c4ea:	2001      	movs	r0, #1
    c4ec:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
    c4f0:	e008      	b.n	c504 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x202>
    c4f2:	2000      	movs	r0, #0
    c4f4:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
    c4f8:	e004      	b.n	c504 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x202>
    c4fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c4fc:	b2c1      	uxtb	r1, r0
    c4fe:	29f0      	cmp	r1, #240	; 0xf0
    c500:	d3f3      	bcc.n	c4ea <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1e8>
    c502:	e7f6      	b.n	c4f2 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1f0>
    c504:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
    c508:	07c0      	lsls	r0, r0, #31
    c50a:	2800      	cmp	r0, #0
    c50c:	d1e2      	bne.n	c4d4 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1d2>
    c50e:	e7dd      	b.n	c4cc <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1ca>
        ( left, top, right, bottom )
    c510:	980c      	ldr	r0, [sp, #48]	; 0x30
    c512:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    c516:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c518:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
    c51c:	9a06      	ldr	r2, [sp, #24]
    c51e:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
    c522:	9b01      	ldr	r3, [sp, #4]
    c524:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
    }
    c528:	980e      	ldr	r0, [sp, #56]	; 0x38
    c52a:	b012      	add	sp, #72	; 0x48
    c52c:	bd80      	pop	{r7, pc}
        assert!(left < 240 && top < 240 && right < 240 && bottom < 240, "overflow");
    c52e:	f64c 30bc 	movw	r0, #52156	; 0xcbbc
    c532:	f2c0 0001 	movt	r0, #1
    c536:	f64c 5238 	movw	r2, #52536	; 0xcd38
    c53a:	f2c0 0201 	movt	r2, #1
    c53e:	2108      	movs	r1, #8
    c540:	f009 f854 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c544:	defe      	udf	#254	; 0xfe
        let left: u8 = self.block_left as u8 * PIXEL_WIDTH as u8;
    c546:	f64c 20f0 	movw	r0, #51952	; 0xcaf0
    c54a:	f2c0 0001 	movt	r0, #1
    c54e:	f64c 42b8 	movw	r2, #52408	; 0xccb8
    c552:	f2c0 0201 	movt	r2, #1
    c556:	2121      	movs	r1, #33	; 0x21
    c558:	f009 f848 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c55c:	defe      	udf	#254	; 0xfe
        let top: u8 = self.block_top as u8 * PIXEL_HEIGHT as u8; 
    c55e:	f64c 20f0 	movw	r0, #51952	; 0xcaf0
    c562:	f2c0 0001 	movt	r0, #1
    c566:	f64c 42c8 	movw	r2, #52424	; 0xccc8
    c56a:	f2c0 0201 	movt	r2, #1
    c56e:	2121      	movs	r1, #33	; 0x21
    c570:	f009 f83c 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c574:	defe      	udf	#254	; 0xfe
        let right: u8 = left + (self.block_right - self.block_left + 1) * PIXEL_WIDTH as u8 - 1;
    c576:	f64c 4010 	movw	r0, #52240	; 0xcc10
    c57a:	f2c0 0001 	movt	r0, #1
    c57e:	f64c 42d8 	movw	r2, #52440	; 0xccd8
    c582:	f2c0 0201 	movt	r2, #1
    c586:	2121      	movs	r1, #33	; 0x21
    c588:	f009 f830 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c58c:	defe      	udf	#254	; 0xfe
    c58e:	f64c 3030 	movw	r0, #52016	; 0xcb30
    c592:	f2c0 0001 	movt	r0, #1
    c596:	f64c 42e8 	movw	r2, #52456	; 0xcce8
    c59a:	f2c0 0201 	movt	r2, #1
    c59e:	211c      	movs	r1, #28
    c5a0:	f009 f824 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c5a4:	defe      	udf	#254	; 0xfe
    c5a6:	f64c 20f0 	movw	r0, #51952	; 0xcaf0
    c5aa:	f2c0 0001 	movt	r0, #1
    c5ae:	f64c 42e8 	movw	r2, #52456	; 0xcce8
    c5b2:	f2c0 0201 	movt	r2, #1
    c5b6:	2121      	movs	r1, #33	; 0x21
    c5b8:	f009 f818 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c5bc:	defe      	udf	#254	; 0xfe
    c5be:	f64c 3030 	movw	r0, #52016	; 0xcb30
    c5c2:	f2c0 0001 	movt	r0, #1
    c5c6:	f64c 42f8 	movw	r2, #52472	; 0xccf8
    c5ca:	f2c0 0201 	movt	r2, #1
    c5ce:	211c      	movs	r1, #28
    c5d0:	f009 f80c 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c5d4:	defe      	udf	#254	; 0xfe
    c5d6:	f64c 4010 	movw	r0, #52240	; 0xcc10
    c5da:	f2c0 0001 	movt	r0, #1
    c5de:	f64c 42f8 	movw	r2, #52472	; 0xccf8
    c5e2:	f2c0 0201 	movt	r2, #1
    c5e6:	2121      	movs	r1, #33	; 0x21
    c5e8:	f009 f800 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c5ec:	defe      	udf	#254	; 0xfe
        let bottom: u8 = top + (self.block_bottom - self.block_top + 1) * PIXEL_HEIGHT as u8 - 1;
    c5ee:	f64c 4010 	movw	r0, #52240	; 0xcc10
    c5f2:	f2c0 0001 	movt	r0, #1
    c5f6:	f64c 5208 	movw	r2, #52488	; 0xcd08
    c5fa:	f2c0 0201 	movt	r2, #1
    c5fe:	2121      	movs	r1, #33	; 0x21
    c600:	f008 fff4 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c604:	defe      	udf	#254	; 0xfe
    c606:	f64c 3030 	movw	r0, #52016	; 0xcb30
    c60a:	f2c0 0001 	movt	r0, #1
    c60e:	f64c 5218 	movw	r2, #52504	; 0xcd18
    c612:	f2c0 0201 	movt	r2, #1
    c616:	211c      	movs	r1, #28
    c618:	f008 ffe8 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c61c:	defe      	udf	#254	; 0xfe
    c61e:	f64c 20f0 	movw	r0, #51952	; 0xcaf0
    c622:	f2c0 0001 	movt	r0, #1
    c626:	f64c 5218 	movw	r2, #52504	; 0xcd18
    c62a:	f2c0 0201 	movt	r2, #1
    c62e:	2121      	movs	r1, #33	; 0x21
    c630:	f008 ffdc 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c634:	defe      	udf	#254	; 0xfe
    c636:	f64c 3030 	movw	r0, #52016	; 0xcb30
    c63a:	f2c0 0001 	movt	r0, #1
    c63e:	f64c 5228 	movw	r2, #52520	; 0xcd28
    c642:	f2c0 0201 	movt	r2, #1
    c646:	211c      	movs	r1, #28
    c648:	f008 ffd0 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c64c:	defe      	udf	#254	; 0xfe
    c64e:	f64c 4010 	movw	r0, #52240	; 0xcc10
    c652:	f2c0 0001 	movt	r0, #1
    c656:	f64c 5228 	movw	r2, #52520	; 0xcd28
    c65a:	f2c0 0201 	movt	r2, #1
    c65e:	2121      	movs	r1, #33	; 0x21
    c660:	f008 ffc4 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c664:	defe      	udf	#254	; 0xfe

0000c666 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE>:
impl Iterator for PixelIterator {
    /// This Iterator returns Physical Pixel colour words (16-bit)
    type Item = u16;

    /// Return the next Physical Pixel colour
    fn next(&mut self) -> Option<Self::Item> {
    c666:	b580      	push	{r7, lr}
    c668:	b090      	sub	sp, #64	; 0x40
    c66a:	900d      	str	r0, [sp, #52]	; 0x34
        if self.y > self.block_bottom { return None; }  //  No more Physical Pixels
    c66c:	7841      	ldrb	r1, [r0, #1]
    c66e:	79c2      	ldrb	r2, [r0, #7]
    c670:	4291      	cmp	r1, r2
    c672:	900a      	str	r0, [sp, #40]	; 0x28
    c674:	d805      	bhi.n	c682 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1c>
    c676:	e7ff      	b.n	c678 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x12>

        if self.x >= SCREEN_WIDTH as u8 ||
    c678:	980a      	ldr	r0, [sp, #40]	; 0x28
    c67a:	7801      	ldrb	r1, [r0, #0]
    c67c:	293f      	cmp	r1, #63	; 0x3f
    c67e:	d80a      	bhi.n	c696 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x30>
    c680:	e011      	b.n	c6a6 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x40>
    c682:	2000      	movs	r0, #0
        if self.y > self.block_bottom { return None; }  //  No more Physical Pixels
    c684:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    c688:	e7ff      	b.n	c68a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x24>
                }
            }
        }
        //  Return the Physical Pixel color
        return Some(color);
    }
    c68a:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    c68e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
    c692:	b010      	add	sp, #64	; 0x40
    c694:	bd80      	pop	{r7, pc}
    c696:	2001      	movs	r0, #1
        if self.x >= SCREEN_WIDTH as u8 ||
    c698:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    c69c:	e008      	b.n	c6b0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x4a>
    c69e:	2000      	movs	r0, #0
    c6a0:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    c6a4:	e004      	b.n	c6b0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x4a>
            self.y >= SCREEN_HEIGHT as u8 { cortex_m::asm::bkpt(); }
    c6a6:	980a      	ldr	r0, [sp, #40]	; 0x28
    c6a8:	7841      	ldrb	r1, [r0, #1]
        if self.x >= SCREEN_WIDTH as u8 ||
    c6aa:	291f      	cmp	r1, #31
    c6ac:	d8f3      	bhi.n	c696 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x30>
    c6ae:	e7f6      	b.n	c69e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x38>
    c6b0:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    c6b4:	07c0      	lsls	r0, r0, #31
    c6b6:	2800      	cmp	r0, #0
    c6b8:	d003      	beq.n	c6c2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x5c>
    c6ba:	e7ff      	b.n	c6bc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x56>
    c6bc:	be00      	bkpt	0x0000
            self.y >= SCREEN_HEIGHT as u8 { cortex_m::asm::bkpt(); }
    c6be:	e7ff      	b.n	c6c0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x5a>
        if self.x >= SCREEN_WIDTH as u8 ||
    c6c0:	e7ff      	b.n	c6c2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x5c>
        assert!(self.x < SCREEN_WIDTH as u8, "x overflow");
    c6c2:	980a      	ldr	r0, [sp, #40]	; 0x28
    c6c4:	7801      	ldrb	r1, [r0, #0]
    c6c6:	293f      	cmp	r1, #63	; 0x3f
    c6c8:	d805      	bhi.n	c6d6 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x70>
    c6ca:	e7ff      	b.n	c6cc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x66>
        assert!(self.y < SCREEN_HEIGHT as u8, "y overflow");
    c6cc:	980a      	ldr	r0, [sp, #40]	; 0x28
    c6ce:	7841      	ldrb	r1, [r0, #1]
    c6d0:	291f      	cmp	r1, #31
    c6d2:	d817      	bhi.n	c704 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x9e>
    c6d4:	e00b      	b.n	c6ee <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x88>
        assert!(self.x < SCREEN_WIDTH as u8, "x overflow");
    c6d6:	f64c 209c 	movw	r0, #51868	; 0xca9c
    c6da:	f2c0 0001 	movt	r0, #1
    c6de:	f64c 5248 	movw	r2, #52552	; 0xcd48
    c6e2:	f2c0 0201 	movt	r2, #1
    c6e6:	210a      	movs	r1, #10
    c6e8:	f008 ff80 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c6ec:	defe      	udf	#254	; 0xfe
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
    c6ee:	980a      	ldr	r0, [sp, #40]	; 0x28
    c6f0:	7801      	ldrb	r1, [r0, #0]
    c6f2:	7842      	ldrb	r2, [r0, #1]
    c6f4:	0192      	lsls	r2, r2, #6
    c6f6:	2300      	movs	r3, #0
    c6f8:	2b00      	cmp	r3, #0
    c6fa:	9109      	str	r1, [sp, #36]	; 0x24
    c6fc:	9208      	str	r2, [sp, #32]
    c6fe:	f040 80b0 	bne.w	c862 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1fc>
    c702:	e00b      	b.n	c71c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xb6>
        assert!(self.y < SCREEN_HEIGHT as u8, "y overflow");
    c704:	f64c 20b8 	movw	r0, #51896	; 0xcab8
    c708:	f2c0 0001 	movt	r0, #1
    c70c:	f64c 5258 	movw	r2, #52568	; 0xcd58
    c710:	f2c0 0201 	movt	r2, #1
    c714:	210a      	movs	r1, #10
    c716:	f008 ff69 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c71a:	defe      	udf	#254	; 0xfe
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
    c71c:	9809      	ldr	r0, [sp, #36]	; 0x24
    c71e:	9908      	ldr	r1, [sp, #32]
    c720:	1842      	adds	r2, r0, r1
    c722:	4613      	mov	r3, r2
    c724:	4282      	cmp	r2, r0
    c726:	9307      	str	r3, [sp, #28]
    c728:	f0c0 80a7 	bcc.w	c87a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x214>
    c72c:	e7ff      	b.n	c72e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xc8>
    c72e:	9807      	ldr	r0, [sp, #28]
    c730:	900e      	str	r0, [sp, #56]	; 0x38
    c732:	2100      	movs	r1, #0
        let color = unsafe { convert_color(SCREEN_BUFFER[i]) };
    c734:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    c738:	f040 80ab 	bne.w	c892 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x22c>
    c73c:	e7ff      	b.n	c73e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xd8>
    c73e:	f244 2068 	movw	r0, #17000	; 0x4268
    c742:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c746:	9907      	ldr	r1, [sp, #28]
    c748:	5c40      	ldrb	r0, [r0, r1]
    c74a:	f000 f8f0 	bl	c92e <_ZN3app5chip813convert_color17hd3e64e3317a6481bE>
    c74e:	4601      	mov	r1, r0
    c750:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
    c754:	9106      	str	r1, [sp, #24]
    c756:	e7ff      	b.n	c758 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xf2>
        if self.x_offset == 0 && self.y_offset == 0 {  //  Update colours only once per Virtual Pixel
    c758:	980a      	ldr	r0, [sp, #40]	; 0x28
    c75a:	7881      	ldrb	r1, [r0, #2]
    c75c:	2900      	cmp	r1, #0
    c75e:	d008      	beq.n	c772 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x10c>
    c760:	e003      	b.n	c76a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x104>
    c762:	2001      	movs	r0, #1
    c764:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    c768:	e008      	b.n	c77c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x116>
    c76a:	2000      	movs	r0, #0
    c76c:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    c770:	e004      	b.n	c77c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x116>
    c772:	980a      	ldr	r0, [sp, #40]	; 0x28
    c774:	78c1      	ldrb	r1, [r0, #3]
    c776:	2900      	cmp	r1, #0
    c778:	d0f3      	beq.n	c762 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xfc>
    c77a:	e7f6      	b.n	c76a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x104>
    c77c:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    c780:	07c0      	lsls	r0, r0, #31
    c782:	2800      	cmp	r0, #0
    c784:	d020      	beq.n	c7c8 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x162>
    c786:	e7ff      	b.n	c788 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x122>
    c788:	2000      	movs	r0, #0
            unsafe { SCREEN_BUFFER[i] = update_color(SCREEN_BUFFER[i]); }  //  Fade to black
    c78a:	9907      	ldr	r1, [sp, #28]
    c78c:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
    c790:	f040 8089 	bne.w	c8a6 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x240>
    c794:	e7ff      	b.n	c796 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x130>
    c796:	f244 2068 	movw	r0, #17000	; 0x4268
    c79a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c79e:	9907      	ldr	r1, [sp, #28]
    c7a0:	5c40      	ldrb	r0, [r0, r1]
    c7a2:	f000 f951 	bl	ca48 <_ZN3app5chip812update_color17h6dfdd6e6a860804cE>
    c7a6:	9005      	str	r0, [sp, #20]
    c7a8:	e7ff      	b.n	c7aa <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x144>
    c7aa:	2000      	movs	r0, #0
    c7ac:	9907      	ldr	r1, [sp, #28]
    c7ae:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
    c7b2:	f040 8082 	bne.w	c8ba <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x254>
    c7b6:	e7ff      	b.n	c7b8 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x152>
    c7b8:	f244 2068 	movw	r0, #17000	; 0x4268
    c7bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c7c0:	9905      	ldr	r1, [sp, #20]
    c7c2:	9a07      	ldr	r2, [sp, #28]
    c7c4:	5481      	strb	r1, [r0, r2]
        if self.x_offset == 0 && self.y_offset == 0 {  //  Update colours only once per Virtual Pixel
    c7c6:	e7ff      	b.n	c7c8 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x162>
        self.x_offset += 1;
    c7c8:	980a      	ldr	r0, [sp, #40]	; 0x28
    c7ca:	7881      	ldrb	r1, [r0, #2]
    c7cc:	3101      	adds	r1, #1
    c7ce:	b2ca      	uxtb	r2, r1
    c7d0:	460b      	mov	r3, r1
    c7d2:	428a      	cmp	r2, r1
    c7d4:	9304      	str	r3, [sp, #16]
    c7d6:	d17a      	bne.n	c8ce <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x268>
    c7d8:	e7ff      	b.n	c7da <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x174>
    c7da:	9804      	ldr	r0, [sp, #16]
    c7dc:	990a      	ldr	r1, [sp, #40]	; 0x28
    c7de:	7088      	strb	r0, [r1, #2]
        if self.x_offset >= PIXEL_WIDTH as u8 {
    c7e0:	788a      	ldrb	r2, [r1, #2]
    c7e2:	2a03      	cmp	r2, #3
    c7e4:	d336      	bcc.n	c854 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1ee>
    c7e6:	e7ff      	b.n	c7e8 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x182>
    c7e8:	2000      	movs	r0, #0
            self.x_offset = 0;
    c7ea:	990a      	ldr	r1, [sp, #40]	; 0x28
    c7ec:	7088      	strb	r0, [r1, #2]
            self.x += 1;
    c7ee:	7808      	ldrb	r0, [r1, #0]
    c7f0:	3001      	adds	r0, #1
    c7f2:	b2c2      	uxtb	r2, r0
    c7f4:	4603      	mov	r3, r0
    c7f6:	4282      	cmp	r2, r0
    c7f8:	9303      	str	r3, [sp, #12]
    c7fa:	d174      	bne.n	c8e6 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x280>
    c7fc:	e7ff      	b.n	c7fe <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x198>
    c7fe:	9803      	ldr	r0, [sp, #12]
    c800:	990a      	ldr	r1, [sp, #40]	; 0x28
    c802:	7008      	strb	r0, [r1, #0]
            if self.x > self.block_right {
    c804:	780a      	ldrb	r2, [r1, #0]
    c806:	794b      	ldrb	r3, [r1, #5]
    c808:	429a      	cmp	r2, r3
    c80a:	d922      	bls.n	c852 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1ec>
    c80c:	e7ff      	b.n	c80e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1a8>
                self.x = self.block_left;
    c80e:	980a      	ldr	r0, [sp, #40]	; 0x28
    c810:	7901      	ldrb	r1, [r0, #4]
    c812:	7001      	strb	r1, [r0, #0]
                self.y_offset += 1;
    c814:	78c1      	ldrb	r1, [r0, #3]
    c816:	3101      	adds	r1, #1
    c818:	b2ca      	uxtb	r2, r1
    c81a:	460b      	mov	r3, r1
    c81c:	428a      	cmp	r2, r1
    c81e:	9302      	str	r3, [sp, #8]
    c820:	d16d      	bne.n	c8fe <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x298>
    c822:	e7ff      	b.n	c824 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1be>
    c824:	9802      	ldr	r0, [sp, #8]
    c826:	990a      	ldr	r1, [sp, #40]	; 0x28
    c828:	70c8      	strb	r0, [r1, #3]
                if self.y_offset >= PIXEL_HEIGHT as u8 {
    c82a:	78ca      	ldrb	r2, [r1, #3]
    c82c:	2a05      	cmp	r2, #5
    c82e:	d30f      	bcc.n	c850 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1ea>
    c830:	e7ff      	b.n	c832 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1cc>
    c832:	2000      	movs	r0, #0
                    self.y_offset = 0;
    c834:	990a      	ldr	r1, [sp, #40]	; 0x28
    c836:	70c8      	strb	r0, [r1, #3]
                    self.y += 1;
    c838:	7848      	ldrb	r0, [r1, #1]
    c83a:	3001      	adds	r0, #1
    c83c:	b2c2      	uxtb	r2, r0
    c83e:	4603      	mov	r3, r0
    c840:	4282      	cmp	r2, r0
    c842:	9301      	str	r3, [sp, #4]
    c844:	d167      	bne.n	c916 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x2b0>
    c846:	e7ff      	b.n	c848 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1e2>
    c848:	9801      	ldr	r0, [sp, #4]
    c84a:	990a      	ldr	r1, [sp, #40]	; 0x28
    c84c:	7048      	strb	r0, [r1, #1]
                if self.y_offset >= PIXEL_HEIGHT as u8 {
    c84e:	e7ff      	b.n	c850 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1ea>
            if self.x > self.block_right {
    c850:	e7ff      	b.n	c852 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1ec>
        if self.x_offset >= PIXEL_WIDTH as u8 {
    c852:	e7ff      	b.n	c854 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1ee>
        return Some(color);
    c854:	9806      	ldr	r0, [sp, #24]
    c856:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
    c85a:	2101      	movs	r1, #1
    c85c:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
    c860:	e713      	b.n	c68a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x24>
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
    c862:	f64c 20f0 	movw	r0, #51952	; 0xcaf0
    c866:	f2c0 0001 	movt	r0, #1
    c86a:	f64c 5268 	movw	r2, #52584	; 0xcd68
    c86e:	f2c0 0201 	movt	r2, #1
    c872:	2121      	movs	r1, #33	; 0x21
    c874:	f008 feba 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c878:	defe      	udf	#254	; 0xfe
    c87a:	f64c 3030 	movw	r0, #52016	; 0xcb30
    c87e:	f2c0 0001 	movt	r0, #1
    c882:	f64c 5278 	movw	r2, #52600	; 0xcd78
    c886:	f2c0 0201 	movt	r2, #1
    c88a:	211c      	movs	r1, #28
    c88c:	f008 feae 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c890:	defe      	udf	#254	; 0xfe
        let color = unsafe { convert_color(SCREEN_BUFFER[i]) };
    c892:	f64c 5088 	movw	r0, #52616	; 0xcd88
    c896:	f2c0 0001 	movt	r0, #1
    c89a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    c89e:	9907      	ldr	r1, [sp, #28]
    c8a0:	f008 feba 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    c8a4:	defe      	udf	#254	; 0xfe
            unsafe { SCREEN_BUFFER[i] = update_color(SCREEN_BUFFER[i]); }  //  Fade to black
    c8a6:	f64c 5098 	movw	r0, #52632	; 0xcd98
    c8aa:	f2c0 0001 	movt	r0, #1
    c8ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
    c8b2:	9907      	ldr	r1, [sp, #28]
    c8b4:	f008 feb0 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    c8b8:	defe      	udf	#254	; 0xfe
    c8ba:	f64c 50a8 	movw	r0, #52648	; 0xcda8
    c8be:	f2c0 0001 	movt	r0, #1
    c8c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    c8c6:	9907      	ldr	r1, [sp, #28]
    c8c8:	f008 fea6 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    c8cc:	defe      	udf	#254	; 0xfe
        self.x_offset += 1;
    c8ce:	f64c 3030 	movw	r0, #52016	; 0xcb30
    c8d2:	f2c0 0001 	movt	r0, #1
    c8d6:	f64c 52b8 	movw	r2, #52664	; 0xcdb8
    c8da:	f2c0 0201 	movt	r2, #1
    c8de:	211c      	movs	r1, #28
    c8e0:	f008 fe84 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c8e4:	defe      	udf	#254	; 0xfe
            self.x += 1;
    c8e6:	f64c 3030 	movw	r0, #52016	; 0xcb30
    c8ea:	f2c0 0001 	movt	r0, #1
    c8ee:	f64c 52c8 	movw	r2, #52680	; 0xcdc8
    c8f2:	f2c0 0201 	movt	r2, #1
    c8f6:	211c      	movs	r1, #28
    c8f8:	f008 fe78 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c8fc:	defe      	udf	#254	; 0xfe
                self.y_offset += 1;
    c8fe:	f64c 3030 	movw	r0, #52016	; 0xcb30
    c902:	f2c0 0001 	movt	r0, #1
    c906:	f64c 52d8 	movw	r2, #52696	; 0xcdd8
    c90a:	f2c0 0201 	movt	r2, #1
    c90e:	211c      	movs	r1, #28
    c910:	f008 fe6c 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c914:	defe      	udf	#254	; 0xfe
                    self.y += 1;
    c916:	f64c 3030 	movw	r0, #52016	; 0xcb30
    c91a:	f2c0 0001 	movt	r0, #1
    c91e:	f64c 52e8 	movw	r2, #52712	; 0xcde8
    c922:	f2c0 0201 	movt	r2, #1
    c926:	211c      	movs	r1, #28
    c928:	f008 fe60 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c92c:	defe      	udf	#254	; 0xfe

0000c92e <_ZN3app5chip813convert_color17hd3e64e3317a6481bE>:
}

/// Convert the Virtual Colour (8-bit greyscale) to 16-bit Colour
fn convert_color(grey: u8) -> u16 {
    c92e:	b580      	push	{r7, lr}
    c930:	b08a      	sub	sp, #40	; 0x28
    c932:	b2c1      	uxtb	r1, r0
    c934:	4602      	mov	r2, r0
    c936:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    match grey {
        250..=255 => Rgb565::from(( grey, grey, grey )).0,  //  White
    c93a:	29fa      	cmp	r1, #250	; 0xfa
    c93c:	9205      	str	r2, [sp, #20]
    c93e:	d304      	bcc.n	c94a <_ZN3app5chip813convert_color17hd3e64e3317a6481bE+0x1c>
    c940:	e7ff      	b.n	c942 <_ZN3app5chip813convert_color17hd3e64e3317a6481bE+0x14>
    c942:	2001      	movs	r0, #1
    c944:	2800      	cmp	r0, #0
    c946:	d11d      	bne.n	c984 <_ZN3app5chip813convert_color17hd3e64e3317a6481bE+0x56>
    c948:	e7ff      	b.n	c94a <_ZN3app5chip813convert_color17hd3e64e3317a6481bE+0x1c>
        128..250 => Rgb565::from(( grey - 100, grey, grey - 100 )).0,  //  Greenish
    c94a:	9805      	ldr	r0, [sp, #20]
    c94c:	b241      	sxtb	r1, r0
    c94e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    c952:	dc05      	bgt.n	c960 <_ZN3app5chip813convert_color17hd3e64e3317a6481bE+0x32>
    c954:	e7ff      	b.n	c956 <_ZN3app5chip813convert_color17hd3e64e3317a6481bE+0x28>
    c956:	9805      	ldr	r0, [sp, #20]
    c958:	b2c1      	uxtb	r1, r0
    c95a:	29fa      	cmp	r1, #250	; 0xfa
    c95c:	d327      	bcc.n	c9ae <_ZN3app5chip813convert_color17hd3e64e3317a6481bE+0x80>
    c95e:	e7ff      	b.n	c960 <_ZN3app5chip813convert_color17hd3e64e3317a6481bE+0x32>
    c960:	2000      	movs	r0, #0
        0..128   => Rgb565::from(( 0, 0, grey )).0,  //  Dark Blue
    c962:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    c966:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    c96a:	9805      	ldr	r0, [sp, #20]
    c96c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    c970:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
    c974:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    c978:	ea42 4001 	orr.w	r0, r2, r1, lsl #16
    c97c:	f004 fee9 	bl	11752 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    c980:	9004      	str	r0, [sp, #16]
    c982:	e041      	b.n	ca08 <_ZN3app5chip813convert_color17hd3e64e3317a6481bE+0xda>
        250..=255 => Rgb565::from(( grey, grey, grey )).0,  //  White
    c984:	9805      	ldr	r0, [sp, #20]
    c986:	f88d 001c 	strb.w	r0, [sp, #28]
    c98a:	f88d 001d 	strb.w	r0, [sp, #29]
    c98e:	f88d 001e 	strb.w	r0, [sp, #30]
    c992:	f89d 101e 	ldrb.w	r1, [sp, #30]
    c996:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    c99a:	ea42 4001 	orr.w	r0, r2, r1, lsl #16
    c99e:	f004 fed8 	bl	11752 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    c9a2:	9003      	str	r0, [sp, #12]
    c9a4:	e7ff      	b.n	c9a6 <_ZN3app5chip813convert_color17hd3e64e3317a6481bE+0x78>
    c9a6:	9803      	ldr	r0, [sp, #12]
    c9a8:	f8ad 001a 	strh.w	r0, [sp, #26]
    match grey {
    c9ac:	e030      	b.n	ca10 <_ZN3app5chip813convert_color17hd3e64e3317a6481bE+0xe2>
    c9ae:	f06f 0063 	mvn.w	r0, #99	; 0x63
        128..250 => Rgb565::from(( grey - 100, grey, grey - 100 )).0,  //  Greenish
    c9b2:	9905      	ldr	r1, [sp, #20]
    c9b4:	fa50 f081 	uxtab	r0, r0, r1
    c9b8:	b2c2      	uxtb	r2, r0
    c9ba:	4603      	mov	r3, r0
    c9bc:	4282      	cmp	r2, r0
    c9be:	9302      	str	r3, [sp, #8]
    c9c0:	d12a      	bne.n	ca18 <_ZN3app5chip813convert_color17hd3e64e3317a6481bE+0xea>
    c9c2:	e7ff      	b.n	c9c4 <_ZN3app5chip813convert_color17hd3e64e3317a6481bE+0x96>
    c9c4:	f06f 0063 	mvn.w	r0, #99	; 0x63
    c9c8:	9905      	ldr	r1, [sp, #20]
    c9ca:	fa50 f081 	uxtab	r0, r0, r1
    c9ce:	b2c2      	uxtb	r2, r0
    c9d0:	4603      	mov	r3, r0
    c9d2:	4282      	cmp	r2, r0
    c9d4:	9301      	str	r3, [sp, #4]
    c9d6:	d12b      	bne.n	ca30 <_ZN3app5chip813convert_color17hd3e64e3317a6481bE+0x102>
    c9d8:	e7ff      	b.n	c9da <_ZN3app5chip813convert_color17hd3e64e3317a6481bE+0xac>
    c9da:	9802      	ldr	r0, [sp, #8]
    c9dc:	f88d 0020 	strb.w	r0, [sp, #32]
    c9e0:	9905      	ldr	r1, [sp, #20]
    c9e2:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
    c9e6:	9a01      	ldr	r2, [sp, #4]
    c9e8:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    c9ec:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    c9f0:	f8bd c020 	ldrh.w	ip, [sp, #32]
    c9f4:	ea4c 4003 	orr.w	r0, ip, r3, lsl #16
    c9f8:	f004 feab 	bl	11752 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    c9fc:	9000      	str	r0, [sp, #0]
    c9fe:	e7ff      	b.n	ca00 <_ZN3app5chip813convert_color17hd3e64e3317a6481bE+0xd2>
    ca00:	9800      	ldr	r0, [sp, #0]
    ca02:	f8ad 001a 	strh.w	r0, [sp, #26]
    match grey {
    ca06:	e003      	b.n	ca10 <_ZN3app5chip813convert_color17hd3e64e3317a6481bE+0xe2>
        0..128   => Rgb565::from(( 0, 0, grey )).0,  //  Dark Blue
    ca08:	9804      	ldr	r0, [sp, #16]
    ca0a:	f8ad 001a 	strh.w	r0, [sp, #26]
    match grey {
    ca0e:	e7ff      	b.n	ca10 <_ZN3app5chip813convert_color17hd3e64e3317a6481bE+0xe2>
    }
}
    ca10:	f8bd 001a 	ldrh.w	r0, [sp, #26]
    ca14:	b00a      	add	sp, #40	; 0x28
    ca16:	bd80      	pop	{r7, pc}
        128..250 => Rgb565::from(( grey - 100, grey, grey - 100 )).0,  //  Greenish
    ca18:	f64c 4010 	movw	r0, #52240	; 0xcc10
    ca1c:	f2c0 0001 	movt	r0, #1
    ca20:	f64c 52f8 	movw	r2, #52728	; 0xcdf8
    ca24:	f2c0 0201 	movt	r2, #1
    ca28:	2121      	movs	r1, #33	; 0x21
    ca2a:	f008 fddf 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ca2e:	defe      	udf	#254	; 0xfe
    ca30:	f64c 4010 	movw	r0, #52240	; 0xcc10
    ca34:	f2c0 0001 	movt	r0, #1
    ca38:	f64c 6208 	movw	r2, #52744	; 0xce08
    ca3c:	f2c0 0201 	movt	r2, #1
    ca40:	2121      	movs	r1, #33	; 0x21
    ca42:	f008 fdd3 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ca46:	defe      	udf	#254	; 0xfe

0000ca48 <_ZN3app5chip812update_color17h6dfdd6e6a860804cE>:

/// Fade the Virtual Colour (8-bit greyscale) to black
fn update_color(grey: u8) -> u8 {
    ca48:	b084      	sub	sp, #16
    ca4a:	b2c1      	uxtb	r1, r0
    ca4c:	4602      	mov	r2, r0
    ca4e:	f88d 000f 	strb.w	r0, [sp, #15]
    match grey {
        200..=255 => grey - 2,   //  Initial white flash fade to normal white
    ca52:	29c8      	cmp	r1, #200	; 0xc8
    ca54:	9202      	str	r2, [sp, #8]
    ca56:	d304      	bcc.n	ca62 <_ZN3app5chip812update_color17h6dfdd6e6a860804cE+0x1a>
    ca58:	e7ff      	b.n	ca5a <_ZN3app5chip812update_color17h6dfdd6e6a860804cE+0x12>
    ca5a:	2001      	movs	r0, #1
    ca5c:	2800      	cmp	r0, #0
    ca5e:	d110      	bne.n	ca82 <_ZN3app5chip812update_color17h6dfdd6e6a860804cE+0x3a>
    ca60:	e7ff      	b.n	ca62 <_ZN3app5chip812update_color17h6dfdd6e6a860804cE+0x1a>
        128..200 => grey,        //  Normal white stays the same
    ca62:	9802      	ldr	r0, [sp, #8]
    ca64:	b241      	sxtb	r1, r0
    ca66:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    ca6a:	dc05      	bgt.n	ca78 <_ZN3app5chip812update_color17h6dfdd6e6a860804cE+0x30>
    ca6c:	e7ff      	b.n	ca6e <_ZN3app5chip812update_color17h6dfdd6e6a860804cE+0x26>
    ca6e:	9802      	ldr	r0, [sp, #8]
    ca70:	b2c1      	uxtb	r1, r0
    ca72:	29c8      	cmp	r1, #200	; 0xc8
    ca74:	d314      	bcc.n	caa0 <_ZN3app5chip812update_color17h6dfdd6e6a860804cE+0x58>
    ca76:	e7ff      	b.n	ca78 <_ZN3app5chip812update_color17h6dfdd6e6a860804cE+0x30>
        0..128   => grey >> 1,   //  Dark fade to black
    ca78:	9802      	ldr	r0, [sp, #8]
    ca7a:	b2c1      	uxtb	r1, r0
    ca7c:	0849      	lsrs	r1, r1, #1
    ca7e:	9101      	str	r1, [sp, #4]
    ca80:	e012      	b.n	caa8 <_ZN3app5chip812update_color17h6dfdd6e6a860804cE+0x60>
    ca82:	f06f 0001 	mvn.w	r0, #1
        200..=255 => grey - 2,   //  Initial white flash fade to normal white
    ca86:	9902      	ldr	r1, [sp, #8]
    ca88:	fa50 f081 	uxtab	r0, r0, r1
    ca8c:	b2c2      	uxtb	r2, r0
    ca8e:	4603      	mov	r3, r0
    ca90:	4282      	cmp	r2, r0
    ca92:	9300      	str	r3, [sp, #0]
    ca94:	d110      	bne.n	cab8 <_ZN3app5chip812update_color17h6dfdd6e6a860804cE+0x70>
    ca96:	e7ff      	b.n	ca98 <_ZN3app5chip812update_color17h6dfdd6e6a860804cE+0x50>
    ca98:	9800      	ldr	r0, [sp, #0]
    ca9a:	f88d 000e 	strb.w	r0, [sp, #14]
    match grey {
    ca9e:	e007      	b.n	cab0 <_ZN3app5chip812update_color17h6dfdd6e6a860804cE+0x68>
        128..200 => grey,        //  Normal white stays the same
    caa0:	9802      	ldr	r0, [sp, #8]
    caa2:	f88d 000e 	strb.w	r0, [sp, #14]
    match grey {
    caa6:	e003      	b.n	cab0 <_ZN3app5chip812update_color17h6dfdd6e6a860804cE+0x68>
        0..128   => grey >> 1,   //  Dark fade to black
    caa8:	9801      	ldr	r0, [sp, #4]
    caaa:	f88d 000e 	strb.w	r0, [sp, #14]
    match grey {
    caae:	e7ff      	b.n	cab0 <_ZN3app5chip812update_color17h6dfdd6e6a860804cE+0x68>
    }
}
    cab0:	f89d 000e 	ldrb.w	r0, [sp, #14]
    cab4:	b004      	add	sp, #16
    cab6:	4770      	bx	lr
        200..=255 => grey - 2,   //  Initial white flash fade to normal white
    cab8:	f64c 4010 	movw	r0, #52240	; 0xcc10
    cabc:	f2c0 0001 	movt	r0, #1
    cac0:	f64c 6218 	movw	r2, #52760	; 0xce18
    cac4:	f2c0 0201 	movt	r2, #1
    cac8:	2121      	movs	r1, #33	; 0x21
    caca:	f008 fd8f 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    cace:	defe      	udf	#254	; 0xfe

0000cad0 <_ZN3app5chip812handle_touch17habca32c74e5cefadE>:

pub fn handle_touch(_x: u16, _y: u16) { 
    cad0:	b580      	push	{r7, lr}
    cad2:	b084      	sub	sp, #16
    cad4:	460a      	mov	r2, r1
    cad6:	4603      	mov	r3, r0
    cad8:	f8ad 000c 	strh.w	r0, [sp, #12]
    cadc:	f8ad 100e 	strh.w	r1, [sp, #14]
    console::print("CHIP8 touch not handled\n"); console::flush(); 
    cae0:	f64c 6028 	movw	r0, #52776	; 0xce28
    cae4:	f2c0 0001 	movt	r0, #1
    cae8:	2118      	movs	r1, #24
    caea:	9202      	str	r2, [sp, #8]
    caec:	9301      	str	r3, [sp, #4]
    caee:	f7fc fa7f 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    caf2:	e7ff      	b.n	caf4 <_ZN3app5chip812handle_touch17habca32c74e5cefadE+0x24>
    caf4:	f7fc fac2 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    caf8:	e7ff      	b.n	cafa <_ZN3app5chip812handle_touch17habca32c74e5cefadE+0x2a>
}
    cafa:	b004      	add	sp, #16
    cafc:	bd80      	pop	{r7, pc}

0000cafe <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E>:
    cafe:	b580      	push	{r7, lr}
    cb00:	b08a      	sub	sp, #40	; 0x28
    cb02:	9104      	str	r1, [sp, #16]
    cb04:	9205      	str	r2, [sp, #20]
    cb06:	9308      	str	r3, [sp, #32]
    cb08:	2100      	movs	r1, #0
    cb0a:	f88d 101e 	strb.w	r1, [sp, #30]
    cb0e:	f88d 101f 	strb.w	r1, [sp, #31]
    cb12:	2101      	movs	r1, #1
    cb14:	f88d 101f 	strb.w	r1, [sp, #31]
    cb18:	f88d 101e 	strb.w	r1, [sp, #30]
    cb1c:	9904      	ldr	r1, [sp, #16]
    cb1e:	2900      	cmp	r1, #0
    cb20:	9303      	str	r3, [sp, #12]
    cb22:	9002      	str	r0, [sp, #8]
    cb24:	d001      	beq.n	cb2a <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x2c>
    cb26:	e7ff      	b.n	cb28 <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x2a>
    cb28:	e004      	b.n	cb34 <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x36>
    cb2a:	2000      	movs	r0, #0
    cb2c:	9902      	ldr	r1, [sp, #8]
    cb2e:	6008      	str	r0, [r1, #0]
    cb30:	e01f      	b.n	cb72 <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x74>
    cb32:	defe      	udf	#254	; 0xfe
    cb34:	2000      	movs	r0, #0
    cb36:	f88d 001f 	strb.w	r0, [sp, #31]
    cb3a:	9905      	ldr	r1, [sp, #20]
    cb3c:	9109      	str	r1, [sp, #36]	; 0x24
    cb3e:	f88d 001e 	strb.w	r0, [sp, #30]
    cb42:	9106      	str	r1, [sp, #24]
    cb44:	9906      	ldr	r1, [sp, #24]
    cb46:	9803      	ldr	r0, [sp, #12]
    cb48:	f000 fa62 	bl	d010 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf3cc102ec961f44aE>
    cb4c:	9001      	str	r0, [sp, #4]
    cb4e:	9100      	str	r1, [sp, #0]
    cb50:	e7ff      	b.n	cb52 <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x54>
    cb52:	9801      	ldr	r0, [sp, #4]
    cb54:	9902      	ldr	r1, [sp, #8]
    cb56:	6048      	str	r0, [r1, #4]
    cb58:	9a00      	ldr	r2, [sp, #0]
    cb5a:	608a      	str	r2, [r1, #8]
    cb5c:	2301      	movs	r3, #1
    cb5e:	600b      	str	r3, [r1, #0]
    cb60:	e007      	b.n	cb72 <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x74>
    cb62:	9804      	ldr	r0, [sp, #16]
    cb64:	2801      	cmp	r0, #1
    cb66:	d00c      	beq.n	cb82 <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x84>
    cb68:	e015      	b.n	cb96 <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x98>
    cb6a:	2000      	movs	r0, #0
    cb6c:	f88d 001e 	strb.w	r0, [sp, #30]
    cb70:	e7f7      	b.n	cb62 <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x64>
    cb72:	f89d 001e 	ldrb.w	r0, [sp, #30]
    cb76:	07c0      	lsls	r0, r0, #31
    cb78:	2800      	cmp	r0, #0
    cb7a:	d1f6      	bne.n	cb6a <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x6c>
    cb7c:	e7f1      	b.n	cb62 <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x64>
    cb7e:	b00a      	add	sp, #40	; 0x28
    cb80:	bd80      	pop	{r7, pc}
    cb82:	f89d 001f 	ldrb.w	r0, [sp, #31]
    cb86:	07c0      	lsls	r0, r0, #31
    cb88:	2800      	cmp	r0, #0
    cb8a:	d0f8      	beq.n	cb7e <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x80>
    cb8c:	e7ff      	b.n	cb8e <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x90>
    cb8e:	2000      	movs	r0, #0
    cb90:	f88d 001f 	strb.w	r0, [sp, #31]
    cb94:	e7f3      	b.n	cb7e <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x80>
    cb96:	e7f2      	b.n	cb7e <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x80>

0000cb98 <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E>:
    cb98:	b580      	push	{r7, lr}
    cb9a:	b08c      	sub	sp, #48	; 0x30
    cb9c:	9103      	str	r1, [sp, #12]
    cb9e:	9204      	str	r2, [sp, #16]
    cba0:	930a      	str	r3, [sp, #40]	; 0x28
    cba2:	2100      	movs	r1, #0
    cba4:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    cba8:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    cbac:	2101      	movs	r1, #1
    cbae:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    cbb2:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    cbb6:	9903      	ldr	r1, [sp, #12]
    cbb8:	2900      	cmp	r1, #0
    cbba:	9302      	str	r3, [sp, #8]
    cbbc:	9001      	str	r0, [sp, #4]
    cbbe:	d001      	beq.n	cbc4 <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x2c>
    cbc0:	e7ff      	b.n	cbc2 <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x2a>
    cbc2:	e004      	b.n	cbce <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x36>
    cbc4:	2000      	movs	r0, #0
    cbc6:	9901      	ldr	r1, [sp, #4]
    cbc8:	6008      	str	r0, [r1, #0]
    cbca:	e020      	b.n	cc0e <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x76>
    cbcc:	defe      	udf	#254	; 0xfe
    cbce:	2000      	movs	r0, #0
    cbd0:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    cbd4:	9904      	ldr	r1, [sp, #16]
    cbd6:	910b      	str	r1, [sp, #44]	; 0x2c
    cbd8:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    cbdc:	9108      	str	r1, [sp, #32]
    cbde:	9a08      	ldr	r2, [sp, #32]
    cbe0:	a805      	add	r0, sp, #20
    cbe2:	9902      	ldr	r1, [sp, #8]
    cbe4:	f000 fa0a 	bl	cffc <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h7785b67405c5f47aE>
    cbe8:	e7ff      	b.n	cbea <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x52>
    cbea:	9805      	ldr	r0, [sp, #20]
    cbec:	9906      	ldr	r1, [sp, #24]
    cbee:	9a07      	ldr	r2, [sp, #28]
    cbf0:	9b01      	ldr	r3, [sp, #4]
    cbf2:	60da      	str	r2, [r3, #12]
    cbf4:	6099      	str	r1, [r3, #8]
    cbf6:	6058      	str	r0, [r3, #4]
    cbf8:	2001      	movs	r0, #1
    cbfa:	6018      	str	r0, [r3, #0]
    cbfc:	e007      	b.n	cc0e <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x76>
    cbfe:	9803      	ldr	r0, [sp, #12]
    cc00:	2801      	cmp	r0, #1
    cc02:	d00c      	beq.n	cc1e <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x86>
    cc04:	e015      	b.n	cc32 <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x9a>
    cc06:	2000      	movs	r0, #0
    cc08:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    cc0c:	e7f7      	b.n	cbfe <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x66>
    cc0e:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    cc12:	07c0      	lsls	r0, r0, #31
    cc14:	2800      	cmp	r0, #0
    cc16:	d1f6      	bne.n	cc06 <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x6e>
    cc18:	e7f1      	b.n	cbfe <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x66>
    cc1a:	b00c      	add	sp, #48	; 0x30
    cc1c:	bd80      	pop	{r7, pc}
    cc1e:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    cc22:	07c0      	lsls	r0, r0, #31
    cc24:	2800      	cmp	r0, #0
    cc26:	d0f8      	beq.n	cc1a <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x82>
    cc28:	e7ff      	b.n	cc2a <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x92>
    cc2a:	2000      	movs	r0, #0
    cc2c:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    cc30:	e7f3      	b.n	cc1a <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x82>
    cc32:	e7f2      	b.n	cc1a <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x82>

0000cc34 <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE>:
    cc34:	b085      	sub	sp, #20
    cc36:	9000      	str	r0, [sp, #0]
    cc38:	2000      	movs	r0, #0
    cc3a:	f88d 000b 	strb.w	r0, [sp, #11]
    cc3e:	f88d 000a 	strb.w	r0, [sp, #10]
    cc42:	2001      	movs	r0, #1
    cc44:	f88d 000b 	strb.w	r0, [sp, #11]
    cc48:	f88d 000a 	strb.w	r0, [sp, #10]
    cc4c:	9800      	ldr	r0, [sp, #0]
    cc4e:	2800      	cmp	r0, #0
    cc50:	4601      	mov	r1, r0
    cc52:	bf18      	it	ne
    cc54:	2101      	movne	r1, #1
    cc56:	2800      	cmp	r0, #0
    cc58:	d001      	beq.n	cc5e <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x2a>
    cc5a:	e7ff      	b.n	cc5c <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x28>
    cc5c:	e005      	b.n	cc6a <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x36>
    cc5e:	2000      	movs	r0, #0
    cc60:	f88d 000a 	strb.w	r0, [sp, #10]
    cc64:	9001      	str	r0, [sp, #4]
    cc66:	e007      	b.n	cc78 <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x44>
    cc68:	defe      	udf	#254	; 0xfe
    cc6a:	2000      	movs	r0, #0
    cc6c:	f88d 000b 	strb.w	r0, [sp, #11]
    cc70:	9800      	ldr	r0, [sp, #0]
    cc72:	9004      	str	r0, [sp, #16]
    cc74:	9001      	str	r0, [sp, #4]
    cc76:	e7ff      	b.n	cc78 <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x44>
    cc78:	f89d 000a 	ldrb.w	r0, [sp, #10]
    cc7c:	07c0      	lsls	r0, r0, #31
    cc7e:	2800      	cmp	r0, #0
    cc80:	d104      	bne.n	cc8c <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x58>
    cc82:	e7ff      	b.n	cc84 <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x50>
    cc84:	9800      	ldr	r0, [sp, #0]
    cc86:	2800      	cmp	r0, #0
    cc88:	d107      	bne.n	cc9a <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x66>
    cc8a:	e010      	b.n	ccae <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x7a>
    cc8c:	2000      	movs	r0, #0
    cc8e:	f88d 000a 	strb.w	r0, [sp, #10]
    cc92:	e7f7      	b.n	cc84 <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x50>
    cc94:	9801      	ldr	r0, [sp, #4]
    cc96:	b005      	add	sp, #20
    cc98:	4770      	bx	lr
    cc9a:	f89d 000b 	ldrb.w	r0, [sp, #11]
    cc9e:	07c0      	lsls	r0, r0, #31
    cca0:	2800      	cmp	r0, #0
    cca2:	d0f7      	beq.n	cc94 <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x60>
    cca4:	e7ff      	b.n	cca6 <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x72>
    cca6:	2000      	movs	r0, #0
    cca8:	f88d 000b 	strb.w	r0, [sp, #11]
    ccac:	e7f2      	b.n	cc94 <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x60>
    ccae:	e7f1      	b.n	cc94 <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x60>

0000ccb0 <_ZN4core6option15Option$LT$T$GT$6as_mut17h781416273935c5a0E>:
    ccb0:	b084      	sub	sp, #16
    ccb2:	9002      	str	r0, [sp, #8]
    ccb4:	6801      	ldr	r1, [r0, #0]
    ccb6:	2900      	cmp	r1, #0
    ccb8:	9000      	str	r0, [sp, #0]
    ccba:	d001      	beq.n	ccc0 <_ZN4core6option15Option$LT$T$GT$6as_mut17h781416273935c5a0E+0x10>
    ccbc:	e7ff      	b.n	ccbe <_ZN4core6option15Option$LT$T$GT$6as_mut17h781416273935c5a0E+0xe>
    ccbe:	e003      	b.n	ccc8 <_ZN4core6option15Option$LT$T$GT$6as_mut17h781416273935c5a0E+0x18>
    ccc0:	2000      	movs	r0, #0
    ccc2:	9001      	str	r0, [sp, #4]
    ccc4:	e005      	b.n	ccd2 <_ZN4core6option15Option$LT$T$GT$6as_mut17h781416273935c5a0E+0x22>
    ccc6:	defe      	udf	#254	; 0xfe
    ccc8:	9800      	ldr	r0, [sp, #0]
    ccca:	1d01      	adds	r1, r0, #4
    cccc:	9103      	str	r1, [sp, #12]
    ccce:	9101      	str	r1, [sp, #4]
    ccd0:	e7ff      	b.n	ccd2 <_ZN4core6option15Option$LT$T$GT$6as_mut17h781416273935c5a0E+0x22>
    ccd2:	9801      	ldr	r0, [sp, #4]
    ccd4:	b004      	add	sp, #16
    ccd6:	4770      	bx	lr

0000ccd8 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E>:
    ccd8:	b084      	sub	sp, #16
    ccda:	9002      	str	r0, [sp, #8]
    ccdc:	9802      	ldr	r0, [sp, #8]
    ccde:	2800      	cmp	r0, #0
    cce0:	4602      	mov	r2, r0
    cce2:	bf18      	it	ne
    cce4:	2201      	movne	r2, #1
    cce6:	2800      	cmp	r0, #0
    cce8:	9101      	str	r1, [sp, #4]
    ccea:	d001      	beq.n	ccf0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x18>
    ccec:	e7ff      	b.n	ccee <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x16>
    ccee:	e009      	b.n	cd04 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x2c>
    ccf0:	f64c 6040 	movw	r0, #52800	; 0xce40
    ccf4:	f2c0 0001 	movt	r0, #1
    ccf8:	212b      	movs	r1, #43	; 0x2b
    ccfa:	9a01      	ldr	r2, [sp, #4]
    ccfc:	f008 fc76 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    cd00:	defe      	udf	#254	; 0xfe
    cd02:	defe      	udf	#254	; 0xfe
    cd04:	9802      	ldr	r0, [sp, #8]
    cd06:	9003      	str	r0, [sp, #12]
    cd08:	9902      	ldr	r1, [sp, #8]
    cd0a:	2900      	cmp	r1, #0
    cd0c:	9000      	str	r0, [sp, #0]
    cd0e:	d003      	beq.n	cd18 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x40>
    cd10:	e7ff      	b.n	cd12 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x3a>
    cd12:	9800      	ldr	r0, [sp, #0]
    cd14:	b004      	add	sp, #16
    cd16:	4770      	bx	lr
    cd18:	e7fb      	b.n	cd12 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x3a>

0000cd1a <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E>:
    cd1a:	b081      	sub	sp, #4
    cd1c:	2100      	movs	r1, #0
    cd1e:	6001      	str	r1, [r0, #0]
    cd20:	b001      	add	sp, #4
    cd22:	4770      	bx	lr

0000cd24 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h01a214062ce56537E>:
    cd24:	b580      	push	{r7, lr}
    cd26:	b082      	sub	sp, #8
    cd28:	9001      	str	r0, [sp, #4]
    cd2a:	f7ff ff83 	bl	cc34 <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE>
    cd2e:	9000      	str	r0, [sp, #0]
    cd30:	e7ff      	b.n	cd32 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h01a214062ce56537E+0xe>
    cd32:	9800      	ldr	r0, [sp, #0]
    cd34:	b002      	add	sp, #8
    cd36:	bd80      	pop	{r7, pc}

0000cd38 <_ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E>:
        item
    ).expect("draw blocks fail");
}

/// Draw the pixel colours to the display at the window from (sx,sy) to (ex,ey)
pub fn set_display_pixels<P: IntoIterator<Item = u16>>(sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    cd38:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd3a:	b08d      	sub	sp, #52	; 0x34
    cd3c:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    cd40:	469e      	mov	lr, r3
    cd42:	4614      	mov	r4, r2
    cd44:	460d      	mov	r5, r1
    cd46:	4606      	mov	r6, r0
    cd48:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    cd4c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
    cd50:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    cd54:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    unsafe { DISPLAY.set_pixels(sx, sy, ex, ey, colors) }
    cd58:	466f      	mov	r7, sp
    cd5a:	f8c7 c004 	str.w	ip, [r7, #4]
    cd5e:	603b      	str	r3, [r7, #0]
    cd60:	f240 1348 	movw	r3, #328	; 0x148
    cd64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd68:	900a      	str	r0, [sp, #40]	; 0x28
    cd6a:	4618      	mov	r0, r3
    cd6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cd6e:	9109      	str	r1, [sp, #36]	; 0x24
    cd70:	4619      	mov	r1, r3
    cd72:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    cd76:	9208      	str	r2, [sp, #32]
    cd78:	4662      	mov	r2, ip
    cd7a:	9b08      	ldr	r3, [sp, #32]
    cd7c:	f8cd e01c 	str.w	lr, [sp, #28]
    cd80:	9406      	str	r4, [sp, #24]
    cd82:	9505      	str	r5, [sp, #20]
    cd84:	9604      	str	r6, [sp, #16]
    cd86:	f000 f807 	bl	cd98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E>
    cd8a:	9003      	str	r0, [sp, #12]
    cd8c:	e7ff      	b.n	cd8e <_ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E+0x56>
}
    cd8e:	9803      	ldr	r0, [sp, #12]
    cd90:	f000 0001 	and.w	r0, r0, #1
    cd94:	b00d      	add	sp, #52	; 0x34
    cd96:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cd98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E>:
            .expect("spi flush fail");
        Ok(())
    }

    /// Sets pixel colors at the given drawing window
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    cd98:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd9a:	b091      	sub	sp, #68	; 0x44
    cd9c:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
    cda0:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
    cda4:	461c      	mov	r4, r3
    cda6:	4615      	mov	r5, r2
    cda8:	460e      	mov	r6, r1
    cdaa:	900a      	str	r0, [sp, #40]	; 0x28
    cdac:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
    cdb0:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
    cdb4:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    cdb8:	f8ad e032 	strh.w	lr, [sp, #50]	; 0x32
    cdbc:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
    cdbe:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
    cdc2:	2701      	movs	r7, #1
    cdc4:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
    cdc8:	466f      	mov	r7, sp
    cdca:	f8c7 e000 	str.w	lr, [r7]
    cdce:	9008      	str	r0, [sp, #32]
    cdd0:	f8cd c01c 	str.w	ip, [sp, #28]
    cdd4:	9406      	str	r4, [sp, #24]
    cdd6:	9505      	str	r5, [sp, #20]
    cdd8:	9604      	str	r6, [sp, #16]
    cdda:	f7fc fe36 	bl	9a4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
    cdde:	9003      	str	r0, [sp, #12]
    cde0:	e7ff      	b.n	cde2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x4a>
    cde2:	9803      	ldr	r0, [sp, #12]
    cde4:	f000 0001 	and.w	r0, r0, #1
    cde8:	f7fb fec0 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    cdec:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    cdf0:	e7ff      	b.n	cdf2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x5a>
    cdf2:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
    cdf6:	07c1      	lsls	r1, r0, #31
    cdf8:	2900      	cmp	r1, #0
    cdfa:	d001      	beq.n	ce00 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x68>
    cdfc:	e7ff      	b.n	cdfe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x66>
    cdfe:	e009      	b.n	ce14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x7c>
    ce00:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
    ce02:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    ce06:	9808      	ldr	r0, [sp, #32]
    ce08:	9907      	ldr	r1, [sp, #28]
    ce0a:	f000 f848 	bl	ce9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E>
    ce0e:	9002      	str	r0, [sp, #8]
    ce10:	e00d      	b.n	ce2e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x96>
        self.set_address_window(sx, sy, ex, ey)?;
    ce12:	defe      	udf	#254	; 0xfe
    ce14:	f005 f82f 	bl	11e76 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    ce18:	e003      	b.n	ce22 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x8a>

        #[cfg(feature = "noblock_spi")]         //  If non-blocking SPI is enabled...
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }
    ce1a:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    ce1e:	b011      	add	sp, #68	; 0x44
    ce20:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
    ce22:	f007 fc9d 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    ce26:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    ce2a:	e7ff      	b.n	ce2c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x94>
    ce2c:	e031      	b.n	ce92 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xfa>
        self.write_pixels(colors) ? ;
    ce2e:	9802      	ldr	r0, [sp, #8]
    ce30:	f000 0001 	and.w	r0, r0, #1
    ce34:	f7fb fe9a 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    ce38:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    ce3c:	e7ff      	b.n	ce3e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xa6>
    ce3e:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    ce42:	07c1      	lsls	r1, r0, #31
    ce44:	2900      	cmp	r1, #0
    ce46:	d001      	beq.n	ce4c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xb4>
    ce48:	e7ff      	b.n	ce4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xb2>
    ce4a:	e004      	b.n	ce56 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xbe>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    ce4c:	f006 fa4e 	bl	132ec <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    ce50:	9001      	str	r0, [sp, #4]
    ce52:	e009      	b.n	ce68 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xd0>
        self.write_pixels(colors) ? ;
    ce54:	defe      	udf	#254	; 0xfe
    ce56:	f005 f80e 	bl	11e76 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    ce5a:	e7ff      	b.n	ce5c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xc4>
    ce5c:	f007 fc80 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    ce60:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    ce64:	e7ff      	b.n	ce66 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xce>
    ce66:	e014      	b.n	ce92 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xfa>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    ce68:	f64c 616b 	movw	r1, #52843	; 0xce6b
    ce6c:	f2c0 0101 	movt	r1, #1
    ce70:	f64c 63c8 	movw	r3, #52936	; 0xcec8
    ce74:	f2c0 0301 	movt	r3, #1
    ce78:	220e      	movs	r2, #14
    ce7a:	9801      	ldr	r0, [sp, #4]
    ce7c:	f7fb fe3d 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    ce80:	e7ff      	b.n	ce82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xea>
    ce82:	2000      	movs	r0, #0
        Ok(())
    ce84:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    }
    ce88:	e7c7      	b.n	ce1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x82>
    ce8a:	2000      	movs	r0, #0
    ce8c:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    ce90:	e7c3      	b.n	ce1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x82>
    ce92:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    ce96:	07c0      	lsls	r0, r0, #31
    ce98:	2800      	cmp	r0, #0
    ce9a:	d1f6      	bne.n	ce8a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xf2>
    ce9c:	e7bd      	b.n	ce1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x82>

0000ce9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
    ce9e:	b580      	push	{r7, lr}
    cea0:	b094      	sub	sp, #80	; 0x50
    cea2:	900d      	str	r0, [sp, #52]	; 0x34
    cea4:	910e      	str	r1, [sp, #56]	; 0x38
    cea6:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
    cea8:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
    ceac:	2301      	movs	r3, #1
    ceae:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    ceb2:	232c      	movs	r3, #44	; 0x2c
    ceb4:	f88d 301f 	strb.w	r3, [sp, #31]
    ceb8:	9209      	str	r2, [sp, #36]	; 0x24
    ceba:	9208      	str	r2, [sp, #32]
    cebc:	9208      	str	r2, [sp, #32]
    cebe:	9a08      	ldr	r2, [sp, #32]
    cec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cec2:	f89d c01f 	ldrb.w	ip, [sp, #31]
    cec6:	9006      	str	r0, [sp, #24]
    cec8:	9105      	str	r1, [sp, #20]
    ceca:	4661      	mov	r1, ip
    cecc:	f7fc fccc 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    ced0:	9004      	str	r0, [sp, #16]
    ced2:	e7ff      	b.n	ced4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x36>
    ced4:	9804      	ldr	r0, [sp, #16]
    ced6:	f000 0001 	and.w	r0, r0, #1
    ceda:	f7fb fe47 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    cede:	f88d 001e 	strb.w	r0, [sp, #30]
    cee2:	e7ff      	b.n	cee4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x46>
    cee4:	f89d 001e 	ldrb.w	r0, [sp, #30]
    cee8:	07c1      	lsls	r1, r0, #31
    ceea:	2900      	cmp	r1, #0
    ceec:	d001      	beq.n	cef2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x54>
    ceee:	e7ff      	b.n	cef0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x52>
    cef0:	e008      	b.n	cf04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x66>
    cef2:	2000      	movs	r0, #0
        for color in colors {
    cef4:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    cef8:	9805      	ldr	r0, [sp, #20]
    cefa:	f000 f86e 	bl	cfda <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcdf096192109e52aE>
    cefe:	9003      	str	r0, [sp, #12]
    cf00:	e00d      	b.n	cf1e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x80>
        self.write_command(Instruction::RAMWR, None)?;
    cf02:	defe      	udf	#254	; 0xfe
    cf04:	f004 ffb7 	bl	11e76 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    cf08:	e003      	b.n	cf12 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x74>
    }
    cf0a:	f89d 001d 	ldrb.w	r0, [sp, #29]
    cf0e:	b014      	add	sp, #80	; 0x50
    cf10:	bd80      	pop	{r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
    cf12:	f007 fc25 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    cf16:	f88d 001d 	strb.w	r0, [sp, #29]
    cf1a:	e7ff      	b.n	cf1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x7e>
    cf1c:	e057      	b.n	cfce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x130>
        for color in colors {
    cf1e:	9803      	ldr	r0, [sp, #12]
    cf20:	900a      	str	r0, [sp, #40]	; 0x28
    cf22:	e7ff      	b.n	cf24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x86>
    cf24:	a80a      	add	r0, sp, #40	; 0x28
    cf26:	f000 f85c 	bl	cfe2 <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE>
    cf2a:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
    cf2e:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    cf32:	e7ff      	b.n	cf34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x96>
    cf34:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    cf38:	4601      	mov	r1, r0
    cf3a:	2800      	cmp	r0, #0
    cf3c:	d001      	beq.n	cf42 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xa4>
    cf3e:	e7ff      	b.n	cf40 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xa2>
    cf40:	e001      	b.n	cf46 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xa8>
        }
    cf42:	e02b      	b.n	cf9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xfe>
        for color in colors {
    cf44:	defe      	udf	#254	; 0xfe
    cf46:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
    cf4a:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
    cf4e:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    cf52:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
            self.write_word(color)?;
    cf56:	9906      	ldr	r1, [sp, #24]
    cf58:	9002      	str	r0, [sp, #8]
    cf5a:	4608      	mov	r0, r1
    cf5c:	9902      	ldr	r1, [sp, #8]
    cf5e:	f7fc fc65 	bl	982c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    cf62:	9001      	str	r0, [sp, #4]
    cf64:	e7ff      	b.n	cf66 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xc8>
    cf66:	9801      	ldr	r0, [sp, #4]
    cf68:	f000 0001 	and.w	r0, r0, #1
    cf6c:	f7fb fdfe 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    cf70:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    cf74:	e7ff      	b.n	cf76 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xd8>
    cf76:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    cf7a:	07c1      	lsls	r1, r0, #31
    cf7c:	2900      	cmp	r1, #0
    cf7e:	d001      	beq.n	cf84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xe6>
    cf80:	e7ff      	b.n	cf82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xe4>
    cf82:	e001      	b.n	cf88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xea>
        for color in colors {
    cf84:	e7ce      	b.n	cf24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x86>
            self.write_word(color)?;
    cf86:	defe      	udf	#254	; 0xfe
    cf88:	f004 ff75 	bl	11e76 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    cf8c:	e7ff      	b.n	cf8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xf0>
    cf8e:	f007 fbe7 	bl	14760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    cf92:	f88d 001d 	strb.w	r0, [sp, #29]
    cf96:	e7ff      	b.n	cf98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xfa>
        }
    cf98:	e7ff      	b.n	cf9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xfc>
    }
    cf9a:	e018      	b.n	cfce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x130>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    cf9c:	f006 f9a6 	bl	132ec <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    cfa0:	9000      	str	r0, [sp, #0]
    cfa2:	e7ff      	b.n	cfa4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x106>
    cfa4:	f64c 616b 	movw	r1, #52843	; 0xce6b
    cfa8:	f2c0 0101 	movt	r1, #1
    cfac:	f64c 63d8 	movw	r3, #52952	; 0xced8
    cfb0:	f2c0 0301 	movt	r3, #1
    cfb4:	220e      	movs	r2, #14
    cfb6:	9800      	ldr	r0, [sp, #0]
    cfb8:	f7fb fd9f 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    cfbc:	e7ff      	b.n	cfbe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x120>
    cfbe:	2000      	movs	r0, #0
        Ok(())
    cfc0:	f88d 001d 	strb.w	r0, [sp, #29]
    }
    cfc4:	e7a1      	b.n	cf0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x6c>
    cfc6:	2000      	movs	r0, #0
    cfc8:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    cfcc:	e79d      	b.n	cf0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x6c>
    cfce:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    cfd2:	07c0      	lsls	r0, r0, #31
    cfd4:	2800      	cmp	r0, #0
    cfd6:	d1f6      	bne.n	cfc6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x128>
    cfd8:	e797      	b.n	cf0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x6c>

0000cfda <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcdf096192109e52aE>:
    cfda:	b081      	sub	sp, #4
    cfdc:	9000      	str	r0, [sp, #0]
    cfde:	b001      	add	sp, #4
    cfe0:	4770      	bx	lr

0000cfe2 <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE>:
    cfe2:	b580      	push	{r7, lr}
    cfe4:	b084      	sub	sp, #16
    cfe6:	9003      	str	r0, [sp, #12]
    cfe8:	6800      	ldr	r0, [r0, #0]
    cfea:	f7ff fb3c 	bl	c666 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE>
    cfee:	9002      	str	r0, [sp, #8]
    cff0:	9101      	str	r1, [sp, #4]
    cff2:	e7ff      	b.n	cff4 <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE+0x12>
    cff4:	9802      	ldr	r0, [sp, #8]
    cff6:	9901      	ldr	r1, [sp, #4]
    cff8:	b004      	add	sp, #16
    cffa:	bd80      	pop	{r7, pc}

0000cffc <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h7785b67405c5f47aE>:
    cffc:	b580      	push	{r7, lr}
    cffe:	b082      	sub	sp, #8
    d000:	9200      	str	r2, [sp, #0]
    d002:	9101      	str	r1, [sp, #4]
    d004:	9a00      	ldr	r2, [sp, #0]
    d006:	f003 fe89 	bl	10d1c <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17ha6efa376ff520dabE>
    d00a:	e7ff      	b.n	d00c <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h7785b67405c5f47aE+0x10>
    d00c:	b002      	add	sp, #8
    d00e:	bd80      	pop	{r7, pc}

0000d010 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf3cc102ec961f44aE>:
    d010:	b580      	push	{r7, lr}
    d012:	b084      	sub	sp, #16
    d014:	9102      	str	r1, [sp, #8]
    d016:	9003      	str	r0, [sp, #12]
    d018:	9902      	ldr	r1, [sp, #8]
    d01a:	f003 fe91 	bl	10d40 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hb6f25fe722781fd6E>
    d01e:	9001      	str	r0, [sp, #4]
    d020:	9100      	str	r1, [sp, #0]
    d022:	e7ff      	b.n	d024 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf3cc102ec961f44aE+0x14>
    d024:	9801      	ldr	r0, [sp, #4]
    d026:	9900      	ldr	r1, [sp, #0]
    d028:	b004      	add	sp, #16
    d02a:	bd80      	pop	{r7, pc}

0000d02c <_ZN8libchip814Chip8$LT$T$GT$3new17h327c7b1fc19df648E>:
    0xf0, 0x80, 0xf0, 0x80, 0x80, // f
];

impl<T: Hardware> Chip8<T> {
    /// Create an interpreter instance.
    pub fn new(hw: T) -> Self {
    d02c:	b5b0      	push	{r4, r5, r7, lr}
    d02e:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
    d032:	b082      	sub	sp, #8
    d034:	f10d 0e0c 	add.w	lr, sp, #12
    d038:	f50e 5282 	add.w	r2, lr, #4160	; 0x1040
    d03c:	2300      	movs	r3, #0
        Self {
            v: [0; REGS],
    d03e:	930b      	str	r3, [sp, #44]	; 0x2c
    d040:	930a      	str	r3, [sp, #40]	; 0x28
    d042:	9309      	str	r3, [sp, #36]	; 0x24
    d044:	9308      	str	r3, [sp, #32]
    d046:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
    d04a:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
            i: 0,
            dt: 0,
            st: 0,
            pc: 0,
            sp: 0,
            mem: [0; MEMS],
    d04e:	9007      	str	r0, [sp, #28]
    d050:	4660      	mov	r0, ip
    d052:	9106      	str	r1, [sp, #24]
    d054:	4671      	mov	r1, lr
    d056:	9205      	str	r2, [sp, #20]
    d058:	9304      	str	r3, [sp, #16]
    d05a:	f8cd c00c 	str.w	ip, [sp, #12]
    d05e:	f8cd e008 	str.w	lr, [sp, #8]
    d062:	f00e fdcb 	bl	1bbfc <__aeabi_memclr>
            stack: [0; STACKS],
    d066:	9804      	ldr	r0, [sp, #16]
    d068:	9905      	ldr	r1, [sp, #20]
    d06a:	6008      	str	r0, [r1, #0]
    d06c:	f841 0c04 	str.w	r0, [r1, #-4]
    d070:	f841 0c08 	str.w	r0, [r1, #-8]
    d074:	f841 0c0c 	str.w	r0, [r1, #-12]
    d078:	f841 0c10 	str.w	r0, [r1, #-16]
    d07c:	f841 0c14 	str.w	r0, [r1, #-20]
    d080:	f841 0c18 	str.w	r0, [r1, #-24]
    d084:	f841 0c1c 	str.w	r0, [r1, #-28]
            time: None,
    d088:	6088      	str	r0, [r1, #8]
    d08a:	6048      	str	r0, [r1, #4]
            running: false,
            hw,
    d08c:	9a06      	ldr	r2, [sp, #24]
    d08e:	8893      	ldrh	r3, [r2, #4]
    d090:	f50d 5e80 	add.w	lr, sp, #4096	; 0x1000
    d094:	f8ae 3064 	strh.w	r3, [lr, #100]	; 0x64
    d098:	6813      	ldr	r3, [r2, #0]
    d09a:	614b      	str	r3, [r1, #20]
        Self {
    d09c:	9b08      	ldr	r3, [sp, #32]
    d09e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    d0a2:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
    d0a6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    d0a8:	9d07      	ldr	r5, [sp, #28]
    d0aa:	642c      	str	r4, [r5, #64]	; 0x40
    d0ac:	f8c5 e03c 	str.w	lr, [r5, #60]	; 0x3c
    d0b0:	f8c5 c038 	str.w	ip, [r5, #56]	; 0x38
    d0b4:	636b      	str	r3, [r5, #52]	; 0x34
    d0b6:	8228      	strh	r0, [r5, #16]
    d0b8:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    d0bc:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    d0c0:	8268      	strh	r0, [r5, #18]
    d0c2:	f885 0046 	strb.w	r0, [r5, #70]	; 0x46
    d0c6:	f105 0047 	add.w	r0, r5, #71	; 0x47
    d0ca:	9903      	ldr	r1, [sp, #12]
    d0cc:	9a02      	ldr	r2, [sp, #8]
    d0ce:	f00e fd99 	bl	1bc04 <__aeabi_memcpy>
    d0d2:	9907      	ldr	r1, [sp, #28]
    d0d4:	f101 0214 	add.w	r2, r1, #20
    d0d8:	f10d 0e10 	add.w	lr, sp, #16
    d0dc:	f50e 5181 	add.w	r1, lr, #4128	; 0x1020
    d0e0:	2320      	movs	r3, #32
    d0e2:	9001      	str	r0, [sp, #4]
    d0e4:	4610      	mov	r0, r2
    d0e6:	461a      	mov	r2, r3
    d0e8:	f00e fd8c 	bl	1bc04 <__aeabi_memcpy>
    d0ec:	9905      	ldr	r1, [sp, #20]
    d0ee:	684a      	ldr	r2, [r1, #4]
    d0f0:	688b      	ldr	r3, [r1, #8]
    d0f2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    d0f6:	f8d1 e010 	ldr.w	lr, [r1, #16]
    d0fa:	9c07      	ldr	r4, [sp, #28]
    d0fc:	6063      	str	r3, [r4, #4]
    d0fe:	6022      	str	r2, [r4, #0]
    d100:	f8c4 e00c 	str.w	lr, [r4, #12]
    d104:	f8c4 c008 	str.w	ip, [r4, #8]
    d108:	f241 0247 	movw	r2, #4167	; 0x1047
    d10c:	9b04      	ldr	r3, [sp, #16]
    d10e:	54a3      	strb	r3, [r4, r2]
    d110:	f241 0248 	movw	r2, #4168	; 0x1048
    d114:	eb04 0c02 	add.w	ip, r4, r2
    d118:	f8d1 e014 	ldr.w	lr, [r1, #20]
    d11c:	f844 e002 	str.w	lr, [r4, r2]
    d120:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
    d124:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
    d128:	f8ac 2004 	strh.w	r2, [ip, #4]
        }
    }
    d12c:	f50d 5d83 	add.w	sp, sp, #4192	; 0x1060
    d130:	b002      	add	sp, #8
    d132:	bdb0      	pop	{r4, r5, r7, pc}

0000d134 <_ZN8libchip814Chip8$LT$T$GT$3pop17hcb81f3113413a9ceE>:
    fn push(&mut self, item: u16) {
        self.stack[self.sp as usize] = item;
        self.sp = self.sp.wrapping_add(1);
    }

    fn pop(&mut self) -> u16 {
    d134:	b580      	push	{r7, lr}
    d136:	b086      	sub	sp, #24
    d138:	9004      	str	r0, [sp, #16]
        self.sp = self.sp.wrapping_sub(1);
    d13a:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    d13e:	2201      	movs	r2, #1
    d140:	9003      	str	r0, [sp, #12]
    d142:	4608      	mov	r0, r1
    d144:	4611      	mov	r1, r2
    d146:	f007 fc07 	bl	14958 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E>
    d14a:	9002      	str	r0, [sp, #8]
    d14c:	e7ff      	b.n	d14e <_ZN8libchip814Chip8$LT$T$GT$3pop17hcb81f3113413a9ceE+0x1a>
    d14e:	9802      	ldr	r0, [sp, #8]
    d150:	9903      	ldr	r1, [sp, #12]
    d152:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
        let item = self.stack[self.sp as usize];
    d156:	f891 2046 	ldrb.w	r2, [r1, #70]	; 0x46
    d15a:	4613      	mov	r3, r2
    d15c:	2a0f      	cmp	r2, #15
    d15e:	9301      	str	r3, [sp, #4]
    d160:	d80a      	bhi.n	d178 <_ZN8libchip814Chip8$LT$T$GT$3pop17hcb81f3113413a9ceE+0x44>
    d162:	e7ff      	b.n	d164 <_ZN8libchip814Chip8$LT$T$GT$3pop17hcb81f3113413a9ceE+0x30>
    d164:	9803      	ldr	r0, [sp, #12]
    d166:	9901      	ldr	r1, [sp, #4]
    d168:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    d16c:	8a92      	ldrh	r2, [r2, #20]
    d16e:	f8ad 2016 	strh.w	r2, [sp, #22]
        item
    }
    d172:	4610      	mov	r0, r2
    d174:	b006      	add	sp, #24
    d176:	bd80      	pop	{r7, pc}
        let item = self.stack[self.sp as usize];
    d178:	f64c 7040 	movw	r0, #53056	; 0xcf40
    d17c:	f2c0 0001 	movt	r0, #1
    d180:	2210      	movs	r2, #16
    d182:	9901      	ldr	r1, [sp, #4]
    d184:	f008 fa48 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d188:	defe      	udf	#254	; 0xfe

0000d18a <_ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E>:
    pub fn run(mut self, rom: &[u8]) {
    d18a:	b580      	push	{r7, lr}
    d18c:	b086      	sub	sp, #24
    d18e:	9104      	str	r1, [sp, #16]
    d190:	9205      	str	r2, [sp, #20]
        self.setup();
    d192:	9003      	str	r0, [sp, #12]
    d194:	9202      	str	r2, [sp, #8]
    d196:	9101      	str	r1, [sp, #4]
    d198:	f003 ff34 	bl	11004 <_ZN8libchip814Chip8$LT$T$GT$5setup17h331c1512aac9f047E>
    d19c:	e7ff      	b.n	d19e <_ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E+0x14>
        self.load(rom);
    d19e:	9803      	ldr	r0, [sp, #12]
    d1a0:	9901      	ldr	r1, [sp, #4]
    d1a2:	9a02      	ldr	r2, [sp, #8]
    d1a4:	f003 fdde 	bl	10d64 <_ZN8libchip814Chip8$LT$T$GT$4load17h41409d517e122012E>
    d1a8:	e7ff      	b.n	d1aa <_ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E+0x20>
        while self.running {
    d1aa:	e7ff      	b.n	d1ac <_ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E+0x22>
    d1ac:	f241 0047 	movw	r0, #4167	; 0x1047
    d1b0:	9903      	ldr	r1, [sp, #12]
    d1b2:	5c08      	ldrb	r0, [r1, r0]
    d1b4:	07c0      	lsls	r0, r0, #31
    d1b6:	2800      	cmp	r0, #0
    d1b8:	d101      	bne.n	d1be <_ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E+0x34>
    d1ba:	e7ff      	b.n	d1bc <_ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E+0x32>
    }
    d1bc:	e00c      	b.n	d1d8 <_ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E+0x4e>
            self.sched();
    d1be:	9803      	ldr	r0, [sp, #12]
    d1c0:	f003 fe9d 	bl	10efe <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E>
    d1c4:	e7ff      	b.n	d1c6 <_ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E+0x3c>
            self.eval();
    d1c6:	9803      	ldr	r0, [sp, #12]
    d1c8:	f000 f808 	bl	d1dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E>
    d1cc:	e7ff      	b.n	d1ce <_ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E+0x44>
            self.next();
    d1ce:	9803      	ldr	r0, [sp, #12]
    d1d0:	f003 fe03 	bl	10dda <_ZN8libchip814Chip8$LT$T$GT$4next17h079fcfcda82e796aE>
    d1d4:	e7ff      	b.n	d1d6 <_ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E+0x4c>
        while self.running {
    d1d6:	e7e9      	b.n	d1ac <_ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E+0x22>
    }
    d1d8:	b006      	add	sp, #24
    d1da:	bd80      	pop	{r7, pc}

0000d1dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E>:
        }

        return b' ';
    }

    fn eval(&mut self) {
    d1dc:	b570      	push	{r4, r5, r6, lr}
    d1de:	f5ad 6d6c 	sub.w	sp, sp, #3776	; 0xec0
    d1e2:	f8cd 0c70 	str.w	r0, [sp, #3184]	; 0xc70
        let h = self.mem[self.pc as usize] as u16;
    d1e6:	8a41      	ldrh	r1, [r0, #18]
    d1e8:	460a      	mov	r2, r1
    d1ea:	2300      	movs	r3, #0
    d1ec:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    d1f0:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
    d1f4:	f8cd 248c 	str.w	r2, [sp, #1164]	; 0x48c
    d1f8:	f043 82c0 	bne.w	1077c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x35a0>
    d1fc:	e7ff      	b.n	d1fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22>
    d1fe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d202:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    d206:	1842      	adds	r2, r0, r1
    d208:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    d20c:	4613      	mov	r3, r2
    d20e:	f8ad 2c76 	strh.w	r2, [sp, #3190]	; 0xc76
        let l = self.mem[(self.pc + 1) as usize] as u16;
    d212:	8a42      	ldrh	r2, [r0, #18]
    d214:	3201      	adds	r2, #1
    d216:	fa1f fc82 	uxth.w	ip, r2
    d21a:	4696      	mov	lr, r2
    d21c:	4594      	cmp	ip, r2
    d21e:	f8cd 3488 	str.w	r3, [sp, #1160]	; 0x488
    d222:	f8cd e484 	str.w	lr, [sp, #1156]	; 0x484
    d226:	f043 82b4 	bne.w	10792 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x35b6>
    d22a:	e7ff      	b.n	d22c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x50>
    d22c:	f8dd 0484 	ldr.w	r0, [sp, #1156]	; 0x484
    d230:	b281      	uxth	r1, r0
    d232:	460a      	mov	r2, r1
    d234:	2300      	movs	r3, #0
    d236:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    d23a:	f8cd 2480 	str.w	r2, [sp, #1152]	; 0x480
    d23e:	f043 82b4 	bne.w	107aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x35ce>
    d242:	e7ff      	b.n	d244 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x68>
    d244:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d248:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    d24c:	1842      	adds	r2, r0, r1
    d24e:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    d252:	4613      	mov	r3, r2
    d254:	f8ad 2c78 	strh.w	r2, [sp, #3192]	; 0xc78
        let inst = h << 8 | l;
    d258:	f8dd 2488 	ldr.w	r2, [sp, #1160]	; 0x488
    d25c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
    d260:	f8cd 347c 	str.w	r3, [sp, #1148]	; 0x47c
    d264:	f8cd c478 	str.w	ip, [sp, #1144]	; 0x478
    d268:	e7ff      	b.n	d26a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x8e>
    d26a:	f8dd 0478 	ldr.w	r0, [sp, #1144]	; 0x478
    d26e:	f8dd 147c 	ldr.w	r1, [sp, #1148]	; 0x47c
    d272:	ea40 0201 	orr.w	r2, r0, r1
    d276:	f8ad 2496 	strh.w	r2, [sp, #1174]	; 0x496

        let nnn = inst & 0xfff;
    d27a:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    d27e:	f36f 321f 	bfc	r2, #12, #20
    d282:	4613      	mov	r3, r2
    d284:	f8ad 2c7a 	strh.w	r2, [sp, #3194]	; 0xc7a
        let n = (inst & 0xf) as usize;
    d288:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    d28c:	f002 020f 	and.w	r2, r2, #15
    d290:	4694      	mov	ip, r2
    d292:	f8cd 2c7c 	str.w	r2, [sp, #3196]	; 0xc7c
        let x = ((inst >> 8) & 0xf) as usize;
    d296:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    d29a:	f8cd 3474 	str.w	r3, [sp, #1140]	; 0x474
    d29e:	f8cd c470 	str.w	ip, [sp, #1136]	; 0x470
    d2a2:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
    d2a6:	e7ff      	b.n	d2a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xcc>
    d2a8:	f8dd 046c 	ldr.w	r0, [sp, #1132]	; 0x46c
    d2ac:	f000 010f 	and.w	r1, r0, #15
    d2b0:	460a      	mov	r2, r1
    d2b2:	f8cd 1c80 	str.w	r1, [sp, #3200]	; 0xc80
        let y = ((inst >> 4) & 0xf) as usize;
    d2b6:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    d2ba:	0909      	lsrs	r1, r1, #4
    d2bc:	f8cd 2468 	str.w	r2, [sp, #1128]	; 0x468
    d2c0:	f8cd 1464 	str.w	r1, [sp, #1124]	; 0x464
    d2c4:	e7ff      	b.n	d2c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xea>
    d2c6:	f8dd 0464 	ldr.w	r0, [sp, #1124]	; 0x464
    d2ca:	f000 010f 	and.w	r1, r0, #15
    d2ce:	460a      	mov	r2, r1
    d2d0:	f8cd 1c84 	str.w	r1, [sp, #3204]	; 0xc84
        let kk = (inst & 0xff) as u8;
    d2d4:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    d2d8:	b2cb      	uxtb	r3, r1
    d2da:	f88d 1c8b 	strb.w	r1, [sp, #3211]	; 0xc8b

        match (
            (inst >> 12) & 0xf,
    d2de:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    d2e2:	0b09      	lsrs	r1, r1, #12
    d2e4:	f8cd 2460 	str.w	r2, [sp, #1120]	; 0x460
    d2e8:	f8cd 345c 	str.w	r3, [sp, #1116]	; 0x45c
    d2ec:	f8cd 1458 	str.w	r1, [sp, #1112]	; 0x458
    d2f0:	e7ff      	b.n	d2f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x116>
    d2f2:	f8dd 0458 	ldr.w	r0, [sp, #1112]	; 0x458
    d2f6:	f000 010f 	and.w	r1, r0, #15
            (inst >> 8) & 0xf,
    d2fa:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    d2fe:	f8cd 1454 	str.w	r1, [sp, #1108]	; 0x454
    d302:	f8cd 2450 	str.w	r2, [sp, #1104]	; 0x450
    d306:	e7ff      	b.n	d308 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x12c>
    d308:	f8dd 0450 	ldr.w	r0, [sp, #1104]	; 0x450
    d30c:	f000 010f 	and.w	r1, r0, #15
            (inst >> 4) & 0xf,
    d310:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    d314:	0912      	lsrs	r2, r2, #4
    d316:	f8cd 144c 	str.w	r1, [sp, #1100]	; 0x44c
    d31a:	f8cd 2448 	str.w	r2, [sp, #1096]	; 0x448
    d31e:	e7ff      	b.n	d320 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x144>
    d320:	f8dd 0448 	ldr.w	r0, [sp, #1096]	; 0x448
    d324:	f000 010f 	and.w	r1, r0, #15
            (inst >> 0) & 0xf,
    d328:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    d32c:	f8cd 1444 	str.w	r1, [sp, #1092]	; 0x444
    d330:	f8cd 2440 	str.w	r2, [sp, #1088]	; 0x440
    d334:	e7ff      	b.n	d336 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x15a>
    d336:	f8dd 0440 	ldr.w	r0, [sp, #1088]	; 0x440
    d33a:	f000 010f 	and.w	r1, r0, #15
        match (
    d33e:	f8dd 2454 	ldr.w	r2, [sp, #1108]	; 0x454
    d342:	f8ad 2498 	strh.w	r2, [sp, #1176]	; 0x498
    d346:	f8dd 344c 	ldr.w	r3, [sp, #1100]	; 0x44c
    d34a:	f8ad 349a 	strh.w	r3, [sp, #1178]	; 0x49a
    d34e:	f8dd c444 	ldr.w	ip, [sp, #1092]	; 0x444
    d352:	f8ad c49c 	strh.w	ip, [sp, #1180]	; 0x49c
    d356:	f8ad 149e 	strh.w	r1, [sp, #1182]	; 0x49e
        ) {
            (0, 0, 0xe, 0) => {
    d35a:	f8bd 1498 	ldrh.w	r1, [sp, #1176]	; 0x498
    d35e:	468e      	mov	lr, r1
    d360:	290f      	cmp	r1, #15
    d362:	f8cd e43c 	str.w	lr, [sp, #1084]	; 0x43c
    d366:	d84f      	bhi.n	d408 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
    d368:	f8dd 143c 	ldr.w	r1, [sp, #1084]	; 0x43c
    d36c:	e8df f011 	tbh	[pc, r1, lsl #1]
    d370:	03060010 	.word	0x03060010
    d374:	04320399 	.word	0x04320399
    d378:	002c04d2 	.word	0x002c04d2
    d37c:	06b4061f 	.word	0x06b4061f
    d380:	00750032 	.word	0x00750032
    d384:	0ee40e59 	.word	0x0ee40e59
    d388:	10260f85 	.word	0x10260f85
    d38c:	0095007b 	.word	0x0095007b
    d390:	f8bd 049a 	ldrh.w	r0, [sp, #1178]	; 0x49a
    d394:	2800      	cmp	r0, #0
    d396:	f040 8261 	bne.w	d85c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x680>
    d39a:	e7ff      	b.n	d39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1c0>
    d39c:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    d3a0:	280e      	cmp	r0, #14
    d3a2:	f040 825b 	bne.w	d85c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x680>
    d3a6:	e7ff      	b.n	d3a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1cc>
    d3a8:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d3ac:	4601      	mov	r1, r0
    d3ae:	2800      	cmp	r0, #0
    d3b0:	f8cd 1438 	str.w	r1, [sp, #1080]	; 0x438
    d3b4:	f000 80c0 	beq.w	d538 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x35c>
    d3b8:	e7ff      	b.n	d3ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1de>
    d3ba:	f8dd 0438 	ldr.w	r0, [sp, #1080]	; 0x438
    d3be:	b281      	uxth	r1, r0
    d3c0:	290e      	cmp	r1, #14
    d3c2:	f000 81b6 	beq.w	d732 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x556>
    d3c6:	e249      	b.n	d85c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x680>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
                if self.v[x] != kk {
                    self.next();
                }
            }
            (5, _, _, 0) => {
    d3c8:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d3cc:	2800      	cmp	r0, #0
    d3ce:	f000 8541 	beq.w	de54 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc78>
    d3d2:	e019      	b.n	d408 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
            }
            (7, _, _, _) => {
                trace!("[{:04x}] ADD Vx, kk", self.pc);
                self.v[x] = self.v[x].wrapping_add(kk);
            }
            (8, _, _, 0) => {
    d3d4:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d3d8:	4601      	mov	r1, r0
    d3da:	280e      	cmp	r0, #14
    d3dc:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
    d3e0:	d812      	bhi.n	d408 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
    d3e2:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
    d3e6:	e8df f011 	tbh	[pc, r1, lsl #1]
    d3ea:	071e      	.short	0x071e
    d3ec:	086707c0 	.word	0x086707c0
    d3f0:	09b5090e 	.word	0x09b5090e
    d3f4:	0b3b0a77 	.word	0x0b3b0a77
    d3f8:	000f0bf0 	.word	0x000f0bf0
    d3fc:	000f000f 	.word	0x000f000f
    d400:	000f000f 	.word	0x000f000f
    d404:	0cb4000f 	.word	0x0cb4000f
                let x = x as usize;
                for i in 0..(x + 1) {
                    self.v[i] = self.mem[self.i as usize + i];
                }
            }
            _ => panic!("[{:04x}] Invalid op: {:04x}", self.pc, inst), // Bad ops
    d408:	f64d 3048 	movw	r0, #56136	; 0xdb48
    d40c:	f2c0 0001 	movt	r0, #1
    d410:	6801      	ldr	r1, [r0, #0]
    d412:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d416:	f100 0212 	add.w	r2, r0, #18
    d41a:	f8cd 2c68 	str.w	r2, [sp, #3176]	; 0xc68
    d41e:	f20d 4296 	addw	r2, sp, #1174	; 0x496
    d422:	f8cd 2c6c 	str.w	r2, [sp, #3180]	; 0xc6c
    d426:	f8dd 2c68 	ldr.w	r2, [sp, #3176]	; 0xc68
    d42a:	f8cd 2d60 	str.w	r2, [sp, #3424]	; 0xd60
    d42e:	f8dd 3c6c 	ldr.w	r3, [sp, #3180]	; 0xc6c
    d432:	f8cd 3d64 	str.w	r3, [sp, #3428]	; 0xd64
    d436:	f646 6c07 	movw	ip, #28167	; 0x6e07
    d43a:	f2c0 0c01 	movt	ip, #1
    d43e:	4610      	mov	r0, r2
    d440:	f8cd 1434 	str.w	r1, [sp, #1076]	; 0x434
    d444:	4661      	mov	r1, ip
    d446:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430
    d44a:	f7fd f822 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d44e:	f8cd 042c 	str.w	r0, [sp, #1068]	; 0x42c
    d452:	f8cd 1428 	str.w	r1, [sp, #1064]	; 0x428
    d456:	f003 b94f 	b.w	106f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x351c>
            (9, _, _, 0) => {
    d45a:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d45e:	2800      	cmp	r0, #0
    d460:	f001 8532 	beq.w	eec8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1cec>
    d464:	e7d0      	b.n	d408 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
            (0xe, _, 9, 0xe) => {
    d466:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    d46a:	4601      	mov	r1, r0
    d46c:	2809      	cmp	r0, #9
    d46e:	f8cd 1420 	str.w	r1, [sp, #1056]	; 0x420
    d472:	d006      	beq.n	d482 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2a6>
    d474:	e7ff      	b.n	d476 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x29a>
    d476:	f8dd 0420 	ldr.w	r0, [sp, #1056]	; 0x420
    d47a:	b281      	uxth	r1, r0
    d47c:	290a      	cmp	r1, #10
    d47e:	d006      	beq.n	d48e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2b2>
    d480:	e7c2      	b.n	d408 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
    d482:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d486:	280e      	cmp	r0, #14
    d488:	f002 815b 	beq.w	f742 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2566>
    d48c:	e7bc      	b.n	d408 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
            (0xe, _, 0xa, 0x1) => {
    d48e:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d492:	2801      	cmp	r0, #1
    d494:	f002 81fe 	beq.w	f894 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x26b8>
    d498:	e7b6      	b.n	d408 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
            (0xf, _, 0, 7) => {
    d49a:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    d49e:	4601      	mov	r1, r0
    d4a0:	2806      	cmp	r0, #6
    d4a2:	f8cd 141c 	str.w	r1, [sp, #1052]	; 0x41c
    d4a6:	d8af      	bhi.n	d408 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
    d4a8:	f8dd 141c 	ldr.w	r1, [sp, #1052]	; 0x41c
    d4ac:	e8df f001 	tbb	[pc, r1]
    d4b0:	322c1505 	.word	0x322c1505
    d4b4:	003e3804 	.word	0x003e3804
    d4b8:	e7a6      	b.n	d408 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
    d4ba:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d4be:	4601      	mov	r1, r0
    d4c0:	2807      	cmp	r0, #7
    d4c2:	f8cd 1418 	str.w	r1, [sp, #1048]	; 0x418
    d4c6:	f002 828e 	beq.w	f9e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x280a>
    d4ca:	e7ff      	b.n	d4cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2f0>
    d4cc:	f8dd 0418 	ldr.w	r0, [sp, #1048]	; 0x418
    d4d0:	b281      	uxth	r1, r0
    d4d2:	290a      	cmp	r1, #10
    d4d4:	f002 8320 	beq.w	fb18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x293c>
    d4d8:	e796      	b.n	d408 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
            (0xf, _, 1, 5) => {
    d4da:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d4de:	4601      	mov	r1, r0
    d4e0:	2805      	cmp	r0, #5
    d4e2:	f8cd 1414 	str.w	r1, [sp, #1044]	; 0x414
    d4e6:	f002 83b1 	beq.w	fc4c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2a70>
    d4ea:	e7ff      	b.n	d4ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x310>
    d4ec:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    d4f0:	b281      	uxth	r1, r0
    d4f2:	2908      	cmp	r1, #8
    d4f4:	f002 843f 	beq.w	fd76 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2b9a>
    d4f8:	e7ff      	b.n	d4fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x31e>
    d4fa:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    d4fe:	b281      	uxth	r1, r0
    d500:	290e      	cmp	r1, #14
    d502:	f002 84cd 	beq.w	fea0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2cc4>
    d506:	e77f      	b.n	d408 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
            (0xf, _, 2, 9) => {
    d508:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d50c:	2809      	cmp	r0, #9
    d50e:	f002 856b 	beq.w	ffe8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2e0c>
    d512:	e779      	b.n	d408 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
            (0xf, _, 3, 3) => {
    d514:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d518:	2803      	cmp	r0, #3
    d51a:	f002 8616 	beq.w	1014a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2f6e>
    d51e:	e773      	b.n	d408 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
            (0xf, _, 5, 5) => {
    d520:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d524:	2805      	cmp	r0, #5
    d526:	f002 871f 	beq.w	10368 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x318c>
    d52a:	e76d      	b.n	d408 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
            (0xf, _, 6, 5) => {
    d52c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d530:	2805      	cmp	r0, #5
    d532:	f002 87fc 	beq.w	1052e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3352>
    d536:	e767      	b.n	d408 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
    d538:	2005      	movs	r0, #5
    d53a:	f8cd 04a0 	str.w	r0, [sp, #1184]	; 0x4a0
    d53e:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    d542:	f2c0 0001 	movt	r0, #1
    d546:	6801      	ldr	r1, [r0, #0]
    d548:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    d54c:	f007 faa6 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d550:	f8cd 0410 	str.w	r0, [sp, #1040]	; 0x410
    d554:	e01f      	b.n	d596 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3ba>
    d556:	2001      	movs	r0, #1
    d558:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    d55c:	e015      	b.n	d58a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3ae>
    d55e:	2000      	movs	r0, #0
    d560:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    d564:	e011      	b.n	d58a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3ae>
    d566:	2000      	movs	r0, #0
/// [`debug!`]: macro.debug.html
/// [`trace!`]: macro.trace.html
/// [`set_max_level`]: fn.set_max_level.html
#[inline(always)]
pub fn max_level() -> LevelFilter {
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
    d568:	f88d 0dab 	strb.w	r0, [sp, #3499]	; 0xdab
    d56c:	f89d 1dab 	ldrb.w	r1, [sp, #3499]	; 0xdab
    d570:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d574:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d578:	f003 fed5 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d57c:	f8cd 0dac 	str.w	r0, [sp, #3500]	; 0xdac
    d580:	f8dd 0dac 	ldr.w	r0, [sp, #3500]	; 0xdac
    d584:	f8cd 04a8 	str.w	r0, [sp, #1192]	; 0x4a8
    d588:	e00b      	b.n	d5a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3c6>
    d58a:	f89d 04a7 	ldrb.w	r0, [sp, #1191]	; 0x4a7
    d58e:	07c0      	lsls	r0, r0, #31
    d590:	2800      	cmp	r0, #0
    d592:	d115      	bne.n	d5c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3e4>
    d594:	e05e      	b.n	d654 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x478>
    d596:	f8dd 0410 	ldr.w	r0, [sp, #1040]	; 0x410
    d59a:	07c1      	lsls	r1, r0, #31
    d59c:	2900      	cmp	r1, #0
    d59e:	d1e2      	bne.n	d566 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x38a>
    d5a0:	e7dd      	b.n	d55e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x382>
    d5a2:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    d5a6:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
    d5aa:	f007 fa77 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d5ae:	f8cd 040c 	str.w	r0, [sp, #1036]	; 0x40c
    d5b2:	e7ff      	b.n	d5b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3d8>
    d5b4:	f8dd 040c 	ldr.w	r0, [sp, #1036]	; 0x40c
    d5b8:	07c1      	lsls	r1, r0, #31
    d5ba:	2900      	cmp	r1, #0
    d5bc:	d1cb      	bne.n	d556 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x37a>
    d5be:	e7ce      	b.n	d55e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x382>
                trace!("[{:04x}] CLS", self.pc);
    d5c0:	f64d 50e8 	movw	r0, #56808	; 0xdde8
    d5c4:	f2c0 0001 	movt	r0, #1
    d5c8:	6801      	ldr	r1, [r0, #0]
    d5ca:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d5ce:	f100 0212 	add.w	r2, r0, #18
    d5d2:	f8cd 24cc 	str.w	r2, [sp, #1228]	; 0x4cc
    d5d6:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
    d5da:	f8cd 2d88 	str.w	r2, [sp, #3464]	; 0xd88
    d5de:	f646 6307 	movw	r3, #28167	; 0x6e07
    d5e2:	f2c0 0301 	movt	r3, #1
    d5e6:	4610      	mov	r0, r2
    d5e8:	f8cd 1408 	str.w	r1, [sp, #1032]	; 0x408
    d5ec:	4619      	mov	r1, r3
    d5ee:	f7fc ff50 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d5f2:	f8cd 0404 	str.w	r0, [sp, #1028]	; 0x404
    d5f6:	f8cd 1400 	str.w	r1, [sp, #1024]	; 0x400
    d5fa:	e7ff      	b.n	d5fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x420>
    d5fc:	f8dd 0404 	ldr.w	r0, [sp, #1028]	; 0x404
    d600:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
    d604:	f8dd 1400 	ldr.w	r1, [sp, #1024]	; 0x400
    d608:	f8cd 14c8 	str.w	r1, [sp, #1224]	; 0x4c8
    d60c:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    d610:	f2c0 0201 	movt	r2, #1
    d614:	6812      	ldr	r2, [r2, #0]
    d616:	466b      	mov	r3, sp
    d618:	f04f 0c01 	mov.w	ip, #1
    d61c:	f8c3 c008 	str.w	ip, [r3, #8]
    d620:	605a      	str	r2, [r3, #4]
    d622:	f8c3 c000 	str.w	ip, [r3]
    d626:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    d62a:	2202      	movs	r2, #2
    d62c:	f20d 43c4 	addw	r3, sp, #1220	; 0x4c4
    d630:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    d634:	f007 f8f7 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d638:	e7ff      	b.n	d63a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x45e>
    d63a:	f8dd 14a0 	ldr.w	r1, [sp, #1184]	; 0x4a0
    d63e:	f64d 6008 	movw	r0, #56840	; 0xde08
    d642:	f2c0 0001 	movt	r0, #1
    d646:	6802      	ldr	r2, [r0, #0]
    d648:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    d64c:	f004 fd70 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d650:	e7ff      	b.n	d652 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x476>
    d652:	e7ff      	b.n	d654 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x478>
    d654:	f241 0048 	movw	r0, #4168	; 0x1048
                let (w, h) = self.hw.vram_size();
    d658:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d65c:	4408      	add	r0, r1
    d65e:	f7fe fb75 	bl	bd4c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17h3eb92f330a1e13e5E>
    d662:	90ff      	str	r0, [sp, #1020]	; 0x3fc
    d664:	91fe      	str	r1, [sp, #1016]	; 0x3f8
    d666:	e7ff      	b.n	d668 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x48c>
    d668:	98ff      	ldr	r0, [sp, #1020]	; 0x3fc
    d66a:	f8cd 0d8c 	str.w	r0, [sp, #3468]	; 0xd8c
    d66e:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
    d670:	f8cd 14d0 	str.w	r1, [sp, #1232]	; 0x4d0
    d674:	2200      	movs	r2, #0
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d676:	f8cd 2538 	str.w	r2, [sp, #1336]	; 0x538
    d67a:	f8cd 053c 	str.w	r0, [sp, #1340]	; 0x53c
    d67e:	f50d 629a 	add.w	r2, sp, #1232	; 0x4d0
    d682:	f8cd 2540 	str.w	r2, [sp, #1344]	; 0x540
    d686:	f8dd 1538 	ldr.w	r1, [sp, #1336]	; 0x538
    d68a:	f8dd 253c 	ldr.w	r2, [sp, #1340]	; 0x53c
    d68e:	f8dd 3540 	ldr.w	r3, [sp, #1344]	; 0x540
    d692:	f20d 502c 	addw	r0, sp, #1324	; 0x52c
    d696:	f003 ff0a 	bl	114ae <_ZN4core4iter6traits8iterator8Iterator3map17h977bf45075800c77E>
    d69a:	e7ff      	b.n	d69c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x4c0>
    d69c:	f50d 60a0 	add.w	r0, sp, #1280	; 0x500
    d6a0:	f20d 512c 	addw	r1, sp, #1324	; 0x52c
    d6a4:	f003 fe53 	bl	1134e <_ZN4core4iter6traits8iterator8Iterator7flatten17hce303520e4c400b1E>
    d6a8:	e7ff      	b.n	d6aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x4ce>
    d6aa:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    d6ae:	f50d 61a0 	add.w	r1, sp, #1280	; 0x500
    d6b2:	f003 fe21 	bl	112f8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h81f0567d2baa3411E>
    d6b6:	e7ff      	b.n	d6b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x4dc>
    d6b8:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    d6bc:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    d6c0:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
    d6c4:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
    d6c8:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
    d6cc:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
    d6d0:	e7ff      	b.n	d6d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x4f6>
    d6d2:	f50d 60ae 	add.w	r0, sp, #1392	; 0x570
    d6d6:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    d6da:	f003 fd3a 	bl	11152 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04da96b0e9749c79E>
    d6de:	e7ff      	b.n	d6e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x504>
    d6e0:	f8dd 0570 	ldr.w	r0, [sp, #1392]	; 0x570
    d6e4:	2800      	cmp	r0, #0
    d6e6:	d001      	beq.n	d6ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x510>
    d6e8:	e7ff      	b.n	d6ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x50e>
    d6ea:	e002      	b.n	d6f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x516>
        match (
    d6ec:	f003 b843 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d6f0:	defe      	udf	#254	; 0xfe
    d6f2:	f8dd 0574 	ldr.w	r0, [sp, #1396]	; 0x574
    d6f6:	f8dd 1578 	ldr.w	r1, [sp, #1400]	; 0x578
    d6fa:	f8cd 0d90 	str.w	r0, [sp, #3472]	; 0xd90
    d6fe:	f8cd 1d94 	str.w	r1, [sp, #3476]	; 0xd94
    d702:	f8cd 0d98 	str.w	r0, [sp, #3480]	; 0xd98
    d706:	f8cd 1d9c 	str.w	r1, [sp, #3484]	; 0xd9c
    d70a:	f8cd 0da0 	str.w	r0, [sp, #3488]	; 0xda0
    d70e:	f8cd 1da4 	str.w	r1, [sp, #3492]	; 0xda4
    d712:	f241 0248 	movw	r2, #4168	; 0x1048
                    self.hw.vram_set(x, y, false);
    d716:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    d71a:	441a      	add	r2, r3
    d71c:	2300      	movs	r3, #0
    d71e:	90fd      	str	r0, [sp, #1012]	; 0x3f4
    d720:	4610      	mov	r0, r2
    d722:	9afd      	ldr	r2, [sp, #1012]	; 0x3f4
    d724:	91fc      	str	r1, [sp, #1008]	; 0x3f0
    d726:	4611      	mov	r1, r2
    d728:	9afc      	ldr	r2, [sp, #1008]	; 0x3f0
    d72a:	f7fe f952 	bl	b9d2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E>
    d72e:	e7ff      	b.n	d730 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x554>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d730:	e7cf      	b.n	d6d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x4f6>
    d732:	2005      	movs	r0, #5
    d734:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
    d738:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    d73c:	f2c0 0001 	movt	r0, #1
    d740:	6801      	ldr	r1, [r0, #0]
    d742:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    d746:	f007 f9a9 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d74a:	90fb      	str	r0, [sp, #1004]	; 0x3ec
    d74c:	e01f      	b.n	d78e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x5b2>
    d74e:	2001      	movs	r0, #1
    d750:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    d754:	e015      	b.n	d782 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x5a6>
    d756:	2000      	movs	r0, #0
    d758:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    d75c:	e011      	b.n	d782 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x5a6>
    d75e:	2000      	movs	r0, #0
    d760:	f88d 0db3 	strb.w	r0, [sp, #3507]	; 0xdb3
    d764:	f89d 1db3 	ldrb.w	r1, [sp, #3507]	; 0xdb3
    d768:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d76c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d770:	f003 fdd9 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d774:	f8cd 0db4 	str.w	r0, [sp, #3508]	; 0xdb4
    d778:	f8dd 0db4 	ldr.w	r0, [sp, #3508]	; 0xdb4
    d77c:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
    d780:	e00a      	b.n	d798 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x5bc>
    d782:	f89d 0583 	ldrb.w	r0, [sp, #1411]	; 0x583
    d786:	07c0      	lsls	r0, r0, #31
    d788:	2800      	cmp	r0, #0
    d78a:	d112      	bne.n	d7b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x5d6>
    d78c:	e055      	b.n	d83a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x65e>
    d78e:	98fb      	ldr	r0, [sp, #1004]	; 0x3ec
    d790:	07c1      	lsls	r1, r0, #31
    d792:	2900      	cmp	r1, #0
    d794:	d1e3      	bne.n	d75e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x582>
    d796:	e7de      	b.n	d756 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x57a>
    d798:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    d79c:	f20d 5184 	addw	r1, sp, #1412	; 0x584
    d7a0:	f007 f97c 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d7a4:	90fa      	str	r0, [sp, #1000]	; 0x3e8
    d7a6:	e7ff      	b.n	d7a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x5cc>
    d7a8:	98fa      	ldr	r0, [sp, #1000]	; 0x3e8
    d7aa:	07c1      	lsls	r1, r0, #31
    d7ac:	2900      	cmp	r1, #0
    d7ae:	d1ce      	bne.n	d74e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x572>
    d7b0:	e7d1      	b.n	d756 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x57a>
                trace!("[{:04x}] RET", self.pc);
    d7b2:	f64d 50ac 	movw	r0, #56748	; 0xddac
    d7b6:	f2c0 0001 	movt	r0, #1
    d7ba:	6801      	ldr	r1, [r0, #0]
    d7bc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d7c0:	f100 0212 	add.w	r2, r0, #18
    d7c4:	f8cd 25a8 	str.w	r2, [sp, #1448]	; 0x5a8
    d7c8:	f8dd 25a8 	ldr.w	r2, [sp, #1448]	; 0x5a8
    d7cc:	f8cd 2d80 	str.w	r2, [sp, #3456]	; 0xd80
    d7d0:	f646 6307 	movw	r3, #28167	; 0x6e07
    d7d4:	f2c0 0301 	movt	r3, #1
    d7d8:	4610      	mov	r0, r2
    d7da:	91f9      	str	r1, [sp, #996]	; 0x3e4
    d7dc:	4619      	mov	r1, r3
    d7de:	f7fc fe58 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d7e2:	90f8      	str	r0, [sp, #992]	; 0x3e0
    d7e4:	91f7      	str	r1, [sp, #988]	; 0x3dc
    d7e6:	e7ff      	b.n	d7e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x60c>
    d7e8:	98f8      	ldr	r0, [sp, #992]	; 0x3e0
    d7ea:	f8cd 05a0 	str.w	r0, [sp, #1440]	; 0x5a0
    d7ee:	99f7      	ldr	r1, [sp, #988]	; 0x3dc
    d7f0:	f8cd 15a4 	str.w	r1, [sp, #1444]	; 0x5a4
    d7f4:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    d7f8:	f2c0 0201 	movt	r2, #1
    d7fc:	6812      	ldr	r2, [r2, #0]
    d7fe:	466b      	mov	r3, sp
    d800:	f04f 0c01 	mov.w	ip, #1
    d804:	f8c3 c008 	str.w	ip, [r3, #8]
    d808:	605a      	str	r2, [r3, #4]
    d80a:	f8c3 c000 	str.w	ip, [r3]
    d80e:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    d812:	2202      	movs	r2, #2
    d814:	f50d 63b4 	add.w	r3, sp, #1440	; 0x5a0
    d818:	99f9      	ldr	r1, [sp, #996]	; 0x3e4
    d81a:	f007 f804 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d81e:	e7ff      	b.n	d820 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x644>
    d820:	f8dd 157c 	ldr.w	r1, [sp, #1404]	; 0x57c
    d824:	f64d 50cc 	movw	r0, #56780	; 0xddcc
    d828:	f2c0 0001 	movt	r0, #1
    d82c:	6802      	ldr	r2, [r0, #0]
    d82e:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    d832:	f004 fc7d 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d836:	e7ff      	b.n	d838 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x65c>
    d838:	e7ff      	b.n	d83a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x65e>
                let addr = self.pop();
    d83a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d83e:	f7ff fc79 	bl	d134 <_ZN8libchip814Chip8$LT$T$GT$3pop17hcb81f3113413a9ceE>
    d842:	4601      	mov	r1, r0
    d844:	f8ad 0d86 	strh.w	r0, [sp, #3462]	; 0xd86
    d848:	91f6      	str	r1, [sp, #984]	; 0x3d8
    d84a:	e7ff      	b.n	d84c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x670>
                self.jump(addr);
    d84c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d850:	99f6      	ldr	r1, [sp, #984]	; 0x3d8
    d852:	f003 fa7f 	bl	10d54 <_ZN8libchip814Chip8$LT$T$GT$4jump17h98fcf36ccb52be45E>
    d856:	e7ff      	b.n	d858 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x67c>
        match (
    d858:	f002 bf8d 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    d85c:	2005      	movs	r0, #5
    d85e:	f8cd 05ac 	str.w	r0, [sp, #1452]	; 0x5ac
    d862:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    d866:	f2c0 0001 	movt	r0, #1
    d86a:	6801      	ldr	r1, [r0, #0]
    d86c:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    d870:	f007 f914 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d874:	90f5      	str	r0, [sp, #980]	; 0x3d4
    d876:	e01f      	b.n	d8b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x6dc>
    d878:	2001      	movs	r0, #1
    d87a:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    d87e:	e015      	b.n	d8ac <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x6d0>
    d880:	2000      	movs	r0, #0
    d882:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    d886:	e011      	b.n	d8ac <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x6d0>
    d888:	2000      	movs	r0, #0
    d88a:	f88d 0dbb 	strb.w	r0, [sp, #3515]	; 0xdbb
    d88e:	f89d 1dbb 	ldrb.w	r1, [sp, #3515]	; 0xdbb
    d892:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d896:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d89a:	f003 fd44 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d89e:	f8cd 0dbc 	str.w	r0, [sp, #3516]	; 0xdbc
    d8a2:	f8dd 0dbc 	ldr.w	r0, [sp, #3516]	; 0xdbc
    d8a6:	f8cd 05b4 	str.w	r0, [sp, #1460]	; 0x5b4
    d8aa:	e00a      	b.n	d8c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x6e6>
    d8ac:	f89d 05b3 	ldrb.w	r0, [sp, #1459]	; 0x5b3
    d8b0:	07c0      	lsls	r0, r0, #31
    d8b2:	2800      	cmp	r0, #0
    d8b4:	d112      	bne.n	d8dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x700>
    d8b6:	e055      	b.n	d964 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x788>
    d8b8:	98f5      	ldr	r0, [sp, #980]	; 0x3d4
    d8ba:	07c1      	lsls	r1, r0, #31
    d8bc:	2900      	cmp	r1, #0
    d8be:	d1e3      	bne.n	d888 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x6ac>
    d8c0:	e7de      	b.n	d880 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x6a4>
    d8c2:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    d8c6:	f20d 51b4 	addw	r1, sp, #1460	; 0x5b4
    d8ca:	f007 f8e7 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d8ce:	90f4      	str	r0, [sp, #976]	; 0x3d0
    d8d0:	e7ff      	b.n	d8d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x6f6>
    d8d2:	98f4      	ldr	r0, [sp, #976]	; 0x3d0
    d8d4:	07c1      	lsls	r1, r0, #31
    d8d6:	2900      	cmp	r1, #0
    d8d8:	d1ce      	bne.n	d878 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x69c>
    d8da:	e7d1      	b.n	d880 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x6a4>
                trace!("[{:04x}] SYS nnn", self.pc);
    d8dc:	f64d 5050 	movw	r0, #56656	; 0xdd50
    d8e0:	f2c0 0001 	movt	r0, #1
    d8e4:	6801      	ldr	r1, [r0, #0]
    d8e6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d8ea:	f100 0212 	add.w	r2, r0, #18
    d8ee:	f8cd 25d8 	str.w	r2, [sp, #1496]	; 0x5d8
    d8f2:	f8dd 25d8 	ldr.w	r2, [sp, #1496]	; 0x5d8
    d8f6:	f8cd 2d7c 	str.w	r2, [sp, #3452]	; 0xd7c
    d8fa:	f646 6307 	movw	r3, #28167	; 0x6e07
    d8fe:	f2c0 0301 	movt	r3, #1
    d902:	4610      	mov	r0, r2
    d904:	91f3      	str	r1, [sp, #972]	; 0x3cc
    d906:	4619      	mov	r1, r3
    d908:	f7fc fdc3 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d90c:	90f2      	str	r0, [sp, #968]	; 0x3c8
    d90e:	91f1      	str	r1, [sp, #964]	; 0x3c4
    d910:	e7ff      	b.n	d912 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x736>
    d912:	98f2      	ldr	r0, [sp, #968]	; 0x3c8
    d914:	f8cd 05d0 	str.w	r0, [sp, #1488]	; 0x5d0
    d918:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
    d91a:	f8cd 15d4 	str.w	r1, [sp, #1492]	; 0x5d4
    d91e:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    d922:	f2c0 0201 	movt	r2, #1
    d926:	6812      	ldr	r2, [r2, #0]
    d928:	466b      	mov	r3, sp
    d92a:	f04f 0c01 	mov.w	ip, #1
    d92e:	f8c3 c008 	str.w	ip, [r3, #8]
    d932:	605a      	str	r2, [r3, #4]
    d934:	f8c3 c000 	str.w	ip, [r3]
    d938:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    d93c:	2202      	movs	r2, #2
    d93e:	f50d 63ba 	add.w	r3, sp, #1488	; 0x5d0
    d942:	99f3      	ldr	r1, [sp, #972]	; 0x3cc
    d944:	f006 ff6f 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d948:	e7ff      	b.n	d94a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x76e>
    d94a:	f8dd 15ac 	ldr.w	r1, [sp, #1452]	; 0x5ac
    d94e:	f64d 5070 	movw	r0, #56688	; 0xdd70
    d952:	f2c0 0001 	movt	r0, #1
    d956:	6802      	ldr	r2, [r0, #0]
    d958:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    d95c:	f004 fbe8 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d960:	e7ff      	b.n	d962 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x786>
    d962:	e7ff      	b.n	d964 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x788>
    d964:	f64d 5074 	movw	r0, #56692	; 0xdd74
    d968:	f2c0 0001 	movt	r0, #1
    d96c:	f64d 5284 	movw	r2, #56708	; 0xdd84
    d970:	f2c0 0201 	movt	r2, #1
    d974:	210f      	movs	r1, #15
    d976:	f007 fe39 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d97a:	defe      	udf	#254	; 0xfe
    d97c:	2005      	movs	r0, #5
    d97e:	f8cd 05dc 	str.w	r0, [sp, #1500]	; 0x5dc
    d982:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    d986:	f2c0 0001 	movt	r0, #1
    d98a:	6801      	ldr	r1, [r0, #0]
    d98c:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    d990:	f007 f884 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d994:	90f0      	str	r0, [sp, #960]	; 0x3c0
    d996:	e01f      	b.n	d9d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x7fc>
    d998:	2001      	movs	r0, #1
    d99a:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    d99e:	e015      	b.n	d9cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x7f0>
    d9a0:	2000      	movs	r0, #0
    d9a2:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    d9a6:	e011      	b.n	d9cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x7f0>
    d9a8:	2000      	movs	r0, #0
    d9aa:	f88d 0dc3 	strb.w	r0, [sp, #3523]	; 0xdc3
    d9ae:	f89d 1dc3 	ldrb.w	r1, [sp, #3523]	; 0xdc3
    d9b2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d9b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d9ba:	f003 fcb4 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d9be:	f8cd 0dc4 	str.w	r0, [sp, #3524]	; 0xdc4
    d9c2:	f8dd 0dc4 	ldr.w	r0, [sp, #3524]	; 0xdc4
    d9c6:	f8cd 05e4 	str.w	r0, [sp, #1508]	; 0x5e4
    d9ca:	e00a      	b.n	d9e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x806>
    d9cc:	f89d 05e3 	ldrb.w	r0, [sp, #1507]	; 0x5e3
    d9d0:	07c0      	lsls	r0, r0, #31
    d9d2:	2800      	cmp	r0, #0
    d9d4:	d112      	bne.n	d9fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x820>
    d9d6:	e055      	b.n	da84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x8a8>
    d9d8:	98f0      	ldr	r0, [sp, #960]	; 0x3c0
    d9da:	07c1      	lsls	r1, r0, #31
    d9dc:	2900      	cmp	r1, #0
    d9de:	d1e3      	bne.n	d9a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x7cc>
    d9e0:	e7de      	b.n	d9a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x7c4>
    d9e2:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    d9e6:	f20d 51e4 	addw	r1, sp, #1508	; 0x5e4
    d9ea:	f007 f857 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d9ee:	90ef      	str	r0, [sp, #956]	; 0x3bc
    d9f0:	e7ff      	b.n	d9f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x816>
    d9f2:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
    d9f4:	07c1      	lsls	r1, r0, #31
    d9f6:	2900      	cmp	r1, #0
    d9f8:	d1ce      	bne.n	d998 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x7bc>
    d9fa:	e7d1      	b.n	d9a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x7c4>
                trace!("[{:04x}] JP nnn", self.pc);
    d9fc:	f64d 5010 	movw	r0, #56592	; 0xdd10
    da00:	f2c0 0001 	movt	r0, #1
    da04:	6801      	ldr	r1, [r0, #0]
    da06:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    da0a:	f100 0212 	add.w	r2, r0, #18
    da0e:	f8cd 2608 	str.w	r2, [sp, #1544]	; 0x608
    da12:	f8dd 2608 	ldr.w	r2, [sp, #1544]	; 0x608
    da16:	f8cd 2d78 	str.w	r2, [sp, #3448]	; 0xd78
    da1a:	f646 6307 	movw	r3, #28167	; 0x6e07
    da1e:	f2c0 0301 	movt	r3, #1
    da22:	4610      	mov	r0, r2
    da24:	91ee      	str	r1, [sp, #952]	; 0x3b8
    da26:	4619      	mov	r1, r3
    da28:	f7fc fd33 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    da2c:	90ed      	str	r0, [sp, #948]	; 0x3b4
    da2e:	91ec      	str	r1, [sp, #944]	; 0x3b0
    da30:	e7ff      	b.n	da32 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x856>
    da32:	98ed      	ldr	r0, [sp, #948]	; 0x3b4
    da34:	f8cd 0600 	str.w	r0, [sp, #1536]	; 0x600
    da38:	99ec      	ldr	r1, [sp, #944]	; 0x3b0
    da3a:	f8cd 1604 	str.w	r1, [sp, #1540]	; 0x604
    da3e:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    da42:	f2c0 0201 	movt	r2, #1
    da46:	6812      	ldr	r2, [r2, #0]
    da48:	466b      	mov	r3, sp
    da4a:	f04f 0c01 	mov.w	ip, #1
    da4e:	f8c3 c008 	str.w	ip, [r3, #8]
    da52:	605a      	str	r2, [r3, #4]
    da54:	f8c3 c000 	str.w	ip, [r3]
    da58:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    da5c:	2202      	movs	r2, #2
    da5e:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
    da62:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
    da64:	f006 fedf 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    da68:	e7ff      	b.n	da6a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x88e>
    da6a:	f8dd 15dc 	ldr.w	r1, [sp, #1500]	; 0x5dc
    da6e:	f64d 5030 	movw	r0, #56624	; 0xdd30
    da72:	f2c0 0001 	movt	r0, #1
    da76:	6802      	ldr	r2, [r0, #0]
    da78:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    da7c:	f004 fb58 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    da80:	e7ff      	b.n	da82 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x8a6>
    da82:	e7ff      	b.n	da84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x8a8>
    da84:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    da86:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    da8a:	f006 ffde 	bl	14a4a <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    da8e:	90eb      	str	r0, [sp, #940]	; 0x3ac
    da90:	e7ff      	b.n	da92 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x8b6>
    da92:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    da96:	99eb      	ldr	r1, [sp, #940]	; 0x3ac
    da98:	f003 f95c 	bl	10d54 <_ZN8libchip814Chip8$LT$T$GT$4jump17h98fcf36ccb52be45E>
    da9c:	e7ff      	b.n	da9e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x8c2>
        match (
    da9e:	f002 be6a 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    daa2:	2005      	movs	r0, #5
    daa4:	f8cd 060c 	str.w	r0, [sp, #1548]	; 0x60c
    daa8:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    daac:	f2c0 0001 	movt	r0, #1
    dab0:	6801      	ldr	r1, [r0, #0]
    dab2:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    dab6:	f006 fff1 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    daba:	90ea      	str	r0, [sp, #936]	; 0x3a8
    dabc:	e01f      	b.n	dafe <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x922>
    dabe:	2001      	movs	r0, #1
    dac0:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    dac4:	e015      	b.n	daf2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x916>
    dac6:	2000      	movs	r0, #0
    dac8:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    dacc:	e011      	b.n	daf2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x916>
    dace:	2000      	movs	r0, #0
    dad0:	f88d 0dcb 	strb.w	r0, [sp, #3531]	; 0xdcb
    dad4:	f89d 1dcb 	ldrb.w	r1, [sp, #3531]	; 0xdcb
    dad8:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dadc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dae0:	f003 fc21 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    dae4:	f8cd 0dcc 	str.w	r0, [sp, #3532]	; 0xdcc
    dae8:	f8dd 0dcc 	ldr.w	r0, [sp, #3532]	; 0xdcc
    daec:	f8cd 0614 	str.w	r0, [sp, #1556]	; 0x614
    daf0:	e00a      	b.n	db08 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x92c>
    daf2:	f89d 0613 	ldrb.w	r0, [sp, #1555]	; 0x613
    daf6:	07c0      	lsls	r0, r0, #31
    daf8:	2800      	cmp	r0, #0
    dafa:	d112      	bne.n	db22 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x946>
    dafc:	e055      	b.n	dbaa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x9ce>
    dafe:	98ea      	ldr	r0, [sp, #936]	; 0x3a8
    db00:	07c1      	lsls	r1, r0, #31
    db02:	2900      	cmp	r1, #0
    db04:	d1e3      	bne.n	dace <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x8f2>
    db06:	e7de      	b.n	dac6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x8ea>
    db08:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    db0c:	f20d 6114 	addw	r1, sp, #1556	; 0x614
    db10:	f006 ffc4 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    db14:	90e9      	str	r0, [sp, #932]	; 0x3a4
    db16:	e7ff      	b.n	db18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x93c>
    db18:	98e9      	ldr	r0, [sp, #932]	; 0x3a4
    db1a:	07c1      	lsls	r1, r0, #31
    db1c:	2900      	cmp	r1, #0
    db1e:	d1ce      	bne.n	dabe <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x8e2>
    db20:	e7d1      	b.n	dac6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x8ea>
                trace!("[{:04x}] CALL nnn", self.pc);
    db22:	f64d 40dc 	movw	r0, #56540	; 0xdcdc
    db26:	f2c0 0001 	movt	r0, #1
    db2a:	6801      	ldr	r1, [r0, #0]
    db2c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    db30:	f100 0212 	add.w	r2, r0, #18
    db34:	f8cd 2638 	str.w	r2, [sp, #1592]	; 0x638
    db38:	f8dd 2638 	ldr.w	r2, [sp, #1592]	; 0x638
    db3c:	f8cd 2d74 	str.w	r2, [sp, #3444]	; 0xd74
    db40:	f646 6307 	movw	r3, #28167	; 0x6e07
    db44:	f2c0 0301 	movt	r3, #1
    db48:	4610      	mov	r0, r2
    db4a:	91e8      	str	r1, [sp, #928]	; 0x3a0
    db4c:	4619      	mov	r1, r3
    db4e:	f7fc fca0 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    db52:	90e7      	str	r0, [sp, #924]	; 0x39c
    db54:	91e6      	str	r1, [sp, #920]	; 0x398
    db56:	e7ff      	b.n	db58 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x97c>
    db58:	98e7      	ldr	r0, [sp, #924]	; 0x39c
    db5a:	f8cd 0630 	str.w	r0, [sp, #1584]	; 0x630
    db5e:	99e6      	ldr	r1, [sp, #920]	; 0x398
    db60:	f8cd 1634 	str.w	r1, [sp, #1588]	; 0x634
    db64:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    db68:	f2c0 0201 	movt	r2, #1
    db6c:	6812      	ldr	r2, [r2, #0]
    db6e:	466b      	mov	r3, sp
    db70:	f04f 0c01 	mov.w	ip, #1
    db74:	f8c3 c008 	str.w	ip, [r3, #8]
    db78:	605a      	str	r2, [r3, #4]
    db7a:	f8c3 c000 	str.w	ip, [r3]
    db7e:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    db82:	2202      	movs	r2, #2
    db84:	f50d 63c6 	add.w	r3, sp, #1584	; 0x630
    db88:	99e8      	ldr	r1, [sp, #928]	; 0x3a0
    db8a:	f006 fe4c 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    db8e:	e7ff      	b.n	db90 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x9b4>
    db90:	f8dd 160c 	ldr.w	r1, [sp, #1548]	; 0x60c
    db94:	f64d 40fc 	movw	r0, #56572	; 0xdcfc
    db98:	f2c0 0001 	movt	r0, #1
    db9c:	6802      	ldr	r2, [r0, #0]
    db9e:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    dba2:	f004 fac5 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dba6:	e7ff      	b.n	dba8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x9cc>
    dba8:	e7ff      	b.n	dbaa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x9ce>
                self.push(self.pc);
    dbaa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dbae:	8a41      	ldrh	r1, [r0, #18]
    dbb0:	f003 f926 	bl	10e00 <_ZN8libchip814Chip8$LT$T$GT$4push17h2bc728f644865dbfE>
    dbb4:	e7ff      	b.n	dbb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x9da>
    dbb6:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    dbb8:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    dbbc:	f006 ff45 	bl	14a4a <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    dbc0:	90e5      	str	r0, [sp, #916]	; 0x394
    dbc2:	e7ff      	b.n	dbc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x9e8>
    dbc4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dbc8:	99e5      	ldr	r1, [sp, #916]	; 0x394
    dbca:	f003 f8c3 	bl	10d54 <_ZN8libchip814Chip8$LT$T$GT$4jump17h98fcf36ccb52be45E>
    dbce:	e7ff      	b.n	dbd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x9f4>
        match (
    dbd0:	f002 bdd1 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    dbd4:	2005      	movs	r0, #5
    dbd6:	f8cd 063c 	str.w	r0, [sp, #1596]	; 0x63c
    dbda:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    dbde:	f2c0 0001 	movt	r0, #1
    dbe2:	6801      	ldr	r1, [r0, #0]
    dbe4:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    dbe8:	f006 ff58 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dbec:	90e4      	str	r0, [sp, #912]	; 0x390
    dbee:	e01f      	b.n	dc30 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xa54>
    dbf0:	2001      	movs	r0, #1
    dbf2:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    dbf6:	e015      	b.n	dc24 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xa48>
    dbf8:	2000      	movs	r0, #0
    dbfa:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    dbfe:	e011      	b.n	dc24 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xa48>
    dc00:	2000      	movs	r0, #0
    dc02:	f88d 0dd3 	strb.w	r0, [sp, #3539]	; 0xdd3
    dc06:	f89d 1dd3 	ldrb.w	r1, [sp, #3539]	; 0xdd3
    dc0a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dc0e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dc12:	f003 fb88 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    dc16:	f8cd 0dd4 	str.w	r0, [sp, #3540]	; 0xdd4
    dc1a:	f8dd 0dd4 	ldr.w	r0, [sp, #3540]	; 0xdd4
    dc1e:	f8cd 0644 	str.w	r0, [sp, #1604]	; 0x644
    dc22:	e00a      	b.n	dc3a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xa5e>
    dc24:	f89d 0643 	ldrb.w	r0, [sp, #1603]	; 0x643
    dc28:	07c0      	lsls	r0, r0, #31
    dc2a:	2800      	cmp	r0, #0
    dc2c:	d112      	bne.n	dc54 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xa78>
    dc2e:	e055      	b.n	dcdc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb00>
    dc30:	98e4      	ldr	r0, [sp, #912]	; 0x390
    dc32:	07c1      	lsls	r1, r0, #31
    dc34:	2900      	cmp	r1, #0
    dc36:	d1e3      	bne.n	dc00 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xa24>
    dc38:	e7de      	b.n	dbf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xa1c>
    dc3a:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    dc3e:	f20d 6144 	addw	r1, sp, #1604	; 0x644
    dc42:	f006 ff2b 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dc46:	90e3      	str	r0, [sp, #908]	; 0x38c
    dc48:	e7ff      	b.n	dc4a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xa6e>
    dc4a:	98e3      	ldr	r0, [sp, #908]	; 0x38c
    dc4c:	07c1      	lsls	r1, r0, #31
    dc4e:	2900      	cmp	r1, #0
    dc50:	d1ce      	bne.n	dbf0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xa14>
    dc52:	e7d1      	b.n	dbf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xa1c>
                trace!("[{:04x}] SE Vx kk", self.pc);
    dc54:	f64d 408c 	movw	r0, #56460	; 0xdc8c
    dc58:	f2c0 0001 	movt	r0, #1
    dc5c:	6801      	ldr	r1, [r0, #0]
    dc5e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dc62:	f100 0212 	add.w	r2, r0, #18
    dc66:	f8cd 2668 	str.w	r2, [sp, #1640]	; 0x668
    dc6a:	f8dd 2668 	ldr.w	r2, [sp, #1640]	; 0x668
    dc6e:	f8cd 2d70 	str.w	r2, [sp, #3440]	; 0xd70
    dc72:	f646 6307 	movw	r3, #28167	; 0x6e07
    dc76:	f2c0 0301 	movt	r3, #1
    dc7a:	4610      	mov	r0, r2
    dc7c:	91e2      	str	r1, [sp, #904]	; 0x388
    dc7e:	4619      	mov	r1, r3
    dc80:	f7fc fc07 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dc84:	90e1      	str	r0, [sp, #900]	; 0x384
    dc86:	91e0      	str	r1, [sp, #896]	; 0x380
    dc88:	e7ff      	b.n	dc8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xaae>
    dc8a:	98e1      	ldr	r0, [sp, #900]	; 0x384
    dc8c:	f8cd 0660 	str.w	r0, [sp, #1632]	; 0x660
    dc90:	99e0      	ldr	r1, [sp, #896]	; 0x380
    dc92:	f8cd 1664 	str.w	r1, [sp, #1636]	; 0x664
    dc96:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    dc9a:	f2c0 0201 	movt	r2, #1
    dc9e:	6812      	ldr	r2, [r2, #0]
    dca0:	466b      	mov	r3, sp
    dca2:	f04f 0c01 	mov.w	ip, #1
    dca6:	f8c3 c008 	str.w	ip, [r3, #8]
    dcaa:	605a      	str	r2, [r3, #4]
    dcac:	f8c3 c000 	str.w	ip, [r3]
    dcb0:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    dcb4:	2202      	movs	r2, #2
    dcb6:	f50d 63cc 	add.w	r3, sp, #1632	; 0x660
    dcba:	99e2      	ldr	r1, [sp, #904]	; 0x388
    dcbc:	f006 fdb3 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    dcc0:	e7ff      	b.n	dcc2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xae6>
    dcc2:	f8dd 163c 	ldr.w	r1, [sp, #1596]	; 0x63c
    dcc6:	f64d 40ac 	movw	r0, #56492	; 0xdcac
    dcca:	f2c0 0001 	movt	r0, #1
    dcce:	6802      	ldr	r2, [r0, #0]
    dcd0:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    dcd4:	f004 fa2c 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dcd8:	e7ff      	b.n	dcda <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xafe>
    dcda:	e7ff      	b.n	dcdc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb00>
                if self.v[x] == kk {
    dcdc:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    dce0:	280f      	cmp	r0, #15
    dce2:	f203 8011 	bhi.w	10d08 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3b2c>
    dce6:	e7ff      	b.n	dce8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb0c>
    dce8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dcec:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    dcf0:	1842      	adds	r2, r0, r1
    dcf2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    dcf6:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    dcfa:	fa5f fc83 	uxtb.w	ip, r3
    dcfe:	4562      	cmp	r2, ip
    dd00:	d106      	bne.n	dd10 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb34>
    dd02:	e7ff      	b.n	dd04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb28>
                    self.next();
    dd04:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dd08:	f003 f867 	bl	10dda <_ZN8libchip814Chip8$LT$T$GT$4next17h079fcfcda82e796aE>
    dd0c:	e7ff      	b.n	dd0e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb32>
                if self.v[x] == kk {
    dd0e:	e7ff      	b.n	dd10 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb34>
        match (
    dd10:	f002 bd31 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    dd14:	2005      	movs	r0, #5
    dd16:	f8cd 066c 	str.w	r0, [sp, #1644]	; 0x66c
    dd1a:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    dd1e:	f2c0 0001 	movt	r0, #1
    dd22:	6801      	ldr	r1, [r0, #0]
    dd24:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    dd28:	f006 feb8 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dd2c:	90df      	str	r0, [sp, #892]	; 0x37c
    dd2e:	e01f      	b.n	dd70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb94>
    dd30:	2001      	movs	r0, #1
    dd32:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    dd36:	e015      	b.n	dd64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb88>
    dd38:	2000      	movs	r0, #0
    dd3a:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    dd3e:	e011      	b.n	dd64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb88>
    dd40:	2000      	movs	r0, #0
    dd42:	f88d 0ddb 	strb.w	r0, [sp, #3547]	; 0xddb
    dd46:	f89d 1ddb 	ldrb.w	r1, [sp, #3547]	; 0xddb
    dd4a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dd4e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dd52:	f003 fae8 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    dd56:	f8cd 0ddc 	str.w	r0, [sp, #3548]	; 0xddc
    dd5a:	f8dd 0ddc 	ldr.w	r0, [sp, #3548]	; 0xddc
    dd5e:	f8cd 0674 	str.w	r0, [sp, #1652]	; 0x674
    dd62:	e00a      	b.n	dd7a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb9e>
    dd64:	f89d 0673 	ldrb.w	r0, [sp, #1651]	; 0x673
    dd68:	07c0      	lsls	r0, r0, #31
    dd6a:	2800      	cmp	r0, #0
    dd6c:	d112      	bne.n	dd94 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xbb8>
    dd6e:	e055      	b.n	de1c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc40>
    dd70:	98df      	ldr	r0, [sp, #892]	; 0x37c
    dd72:	07c1      	lsls	r1, r0, #31
    dd74:	2900      	cmp	r1, #0
    dd76:	d1e3      	bne.n	dd40 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb64>
    dd78:	e7de      	b.n	dd38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb5c>
    dd7a:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    dd7e:	f20d 6174 	addw	r1, sp, #1652	; 0x674
    dd82:	f006 fe8b 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dd86:	90de      	str	r0, [sp, #888]	; 0x378
    dd88:	e7ff      	b.n	dd8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xbae>
    dd8a:	98de      	ldr	r0, [sp, #888]	; 0x378
    dd8c:	07c1      	lsls	r1, r0, #31
    dd8e:	2900      	cmp	r1, #0
    dd90:	d1ce      	bne.n	dd30 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb54>
    dd92:	e7d1      	b.n	dd38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb5c>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
    dd94:	f64d 403c 	movw	r0, #56380	; 0xdc3c
    dd98:	f2c0 0001 	movt	r0, #1
    dd9c:	6801      	ldr	r1, [r0, #0]
    dd9e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dda2:	f100 0212 	add.w	r2, r0, #18
    dda6:	f8cd 2698 	str.w	r2, [sp, #1688]	; 0x698
    ddaa:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
    ddae:	f8cd 2d6c 	str.w	r2, [sp, #3436]	; 0xd6c
    ddb2:	f646 6307 	movw	r3, #28167	; 0x6e07
    ddb6:	f2c0 0301 	movt	r3, #1
    ddba:	4610      	mov	r0, r2
    ddbc:	91dd      	str	r1, [sp, #884]	; 0x374
    ddbe:	4619      	mov	r1, r3
    ddc0:	f7fc fb67 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ddc4:	90dc      	str	r0, [sp, #880]	; 0x370
    ddc6:	91db      	str	r1, [sp, #876]	; 0x36c
    ddc8:	e7ff      	b.n	ddca <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xbee>
    ddca:	98dc      	ldr	r0, [sp, #880]	; 0x370
    ddcc:	f8cd 0690 	str.w	r0, [sp, #1680]	; 0x690
    ddd0:	99db      	ldr	r1, [sp, #876]	; 0x36c
    ddd2:	f8cd 1694 	str.w	r1, [sp, #1684]	; 0x694
    ddd6:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    ddda:	f2c0 0201 	movt	r2, #1
    ddde:	6812      	ldr	r2, [r2, #0]
    dde0:	466b      	mov	r3, sp
    dde2:	f04f 0c01 	mov.w	ip, #1
    dde6:	f8c3 c008 	str.w	ip, [r3, #8]
    ddea:	605a      	str	r2, [r3, #4]
    ddec:	f8c3 c000 	str.w	ip, [r3]
    ddf0:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    ddf4:	2202      	movs	r2, #2
    ddf6:	f50d 63d2 	add.w	r3, sp, #1680	; 0x690
    ddfa:	99dd      	ldr	r1, [sp, #884]	; 0x374
    ddfc:	f006 fd13 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    de00:	e7ff      	b.n	de02 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc26>
    de02:	f8dd 166c 	ldr.w	r1, [sp, #1644]	; 0x66c
    de06:	f64d 405c 	movw	r0, #56412	; 0xdc5c
    de0a:	f2c0 0001 	movt	r0, #1
    de0e:	6802      	ldr	r2, [r0, #0]
    de10:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    de14:	f004 f98c 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    de18:	e7ff      	b.n	de1a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc3e>
    de1a:	e7ff      	b.n	de1c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc40>
                if self.v[x] != kk {
    de1c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    de20:	280f      	cmp	r0, #15
    de22:	f202 8767 	bhi.w	10cf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3b18>
    de26:	e7ff      	b.n	de28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc4c>
    de28:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    de2c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    de30:	1842      	adds	r2, r0, r1
    de32:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    de36:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    de3a:	fa5f fc83 	uxtb.w	ip, r3
    de3e:	4562      	cmp	r2, ip
    de40:	d006      	beq.n	de50 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc74>
    de42:	e7ff      	b.n	de44 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc68>
                    self.next();
    de44:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    de48:	f002 ffc7 	bl	10dda <_ZN8libchip814Chip8$LT$T$GT$4next17h079fcfcda82e796aE>
    de4c:	e7ff      	b.n	de4e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc72>
                if self.v[x] != kk {
    de4e:	e7ff      	b.n	de50 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc74>
        match (
    de50:	f002 bc91 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    de54:	2005      	movs	r0, #5
    de56:	f8cd 069c 	str.w	r0, [sp, #1692]	; 0x69c
    de5a:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    de5e:	f2c0 0001 	movt	r0, #1
    de62:	6801      	ldr	r1, [r0, #0]
    de64:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    de68:	f006 fe18 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    de6c:	90da      	str	r0, [sp, #872]	; 0x368
    de6e:	e01f      	b.n	deb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xcd4>
    de70:	2001      	movs	r0, #1
    de72:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    de76:	e015      	b.n	dea4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xcc8>
    de78:	2000      	movs	r0, #0
    de7a:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    de7e:	e011      	b.n	dea4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xcc8>
    de80:	2000      	movs	r0, #0
    de82:	f88d 0de3 	strb.w	r0, [sp, #3555]	; 0xde3
    de86:	f89d 1de3 	ldrb.w	r1, [sp, #3555]	; 0xde3
    de8a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    de8e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    de92:	f003 fa48 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    de96:	f8cd 0de4 	str.w	r0, [sp, #3556]	; 0xde4
    de9a:	f8dd 0de4 	ldr.w	r0, [sp, #3556]	; 0xde4
    de9e:	f8cd 06a4 	str.w	r0, [sp, #1700]	; 0x6a4
    dea2:	e00a      	b.n	deba <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xcde>
    dea4:	f89d 06a3 	ldrb.w	r0, [sp, #1699]	; 0x6a3
    dea8:	07c0      	lsls	r0, r0, #31
    deaa:	2800      	cmp	r0, #0
    deac:	d112      	bne.n	ded4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xcf8>
    deae:	e055      	b.n	df5c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xd80>
    deb0:	98da      	ldr	r0, [sp, #872]	; 0x368
    deb2:	07c1      	lsls	r1, r0, #31
    deb4:	2900      	cmp	r1, #0
    deb6:	d1e3      	bne.n	de80 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xca4>
    deb8:	e7de      	b.n	de78 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc9c>
    deba:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    debe:	f20d 61a4 	addw	r1, sp, #1700	; 0x6a4
    dec2:	f006 fdeb 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dec6:	90d9      	str	r0, [sp, #868]	; 0x364
    dec8:	e7ff      	b.n	deca <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xcee>
    deca:	98d9      	ldr	r0, [sp, #868]	; 0x364
    decc:	07c1      	lsls	r1, r0, #31
    dece:	2900      	cmp	r1, #0
    ded0:	d1ce      	bne.n	de70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc94>
    ded2:	e7d1      	b.n	de78 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc9c>
                trace!("[{:04x}] SE Vx, Vy", self.pc);
    ded4:	f64d 30dc 	movw	r0, #56284	; 0xdbdc
    ded8:	f2c0 0001 	movt	r0, #1
    dedc:	6801      	ldr	r1, [r0, #0]
    dede:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dee2:	f100 0212 	add.w	r2, r0, #18
    dee6:	f8cd 26c8 	str.w	r2, [sp, #1736]	; 0x6c8
    deea:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
    deee:	f8cd 2d68 	str.w	r2, [sp, #3432]	; 0xd68
    def2:	f646 6307 	movw	r3, #28167	; 0x6e07
    def6:	f2c0 0301 	movt	r3, #1
    defa:	4610      	mov	r0, r2
    defc:	91d8      	str	r1, [sp, #864]	; 0x360
    defe:	4619      	mov	r1, r3
    df00:	f7fc fac7 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    df04:	90d7      	str	r0, [sp, #860]	; 0x35c
    df06:	91d6      	str	r1, [sp, #856]	; 0x358
    df08:	e7ff      	b.n	df0a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xd2e>
    df0a:	98d7      	ldr	r0, [sp, #860]	; 0x35c
    df0c:	f8cd 06c0 	str.w	r0, [sp, #1728]	; 0x6c0
    df10:	99d6      	ldr	r1, [sp, #856]	; 0x358
    df12:	f8cd 16c4 	str.w	r1, [sp, #1732]	; 0x6c4
    df16:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    df1a:	f2c0 0201 	movt	r2, #1
    df1e:	6812      	ldr	r2, [r2, #0]
    df20:	466b      	mov	r3, sp
    df22:	f04f 0c01 	mov.w	ip, #1
    df26:	f8c3 c008 	str.w	ip, [r3, #8]
    df2a:	605a      	str	r2, [r3, #4]
    df2c:	f8c3 c000 	str.w	ip, [r3]
    df30:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    df34:	2202      	movs	r2, #2
    df36:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
    df3a:	99d8      	ldr	r1, [sp, #864]	; 0x360
    df3c:	f006 fc73 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    df40:	e7ff      	b.n	df42 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xd66>
    df42:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
    df46:	f64d 30fc 	movw	r0, #56316	; 0xdbfc
    df4a:	f2c0 0001 	movt	r0, #1
    df4e:	6802      	ldr	r2, [r0, #0]
    df50:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    df54:	f004 f8ec 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    df58:	e7ff      	b.n	df5a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xd7e>
    df5a:	e7ff      	b.n	df5c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xd80>
                if self.v[x] == self.v[y] {
    df5c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    df60:	280f      	cmp	r0, #15
    df62:	f202 86b3 	bhi.w	10ccc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3af0>
    df66:	e7ff      	b.n	df68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xd8c>
    df68:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    df6c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    df70:	1842      	adds	r2, r0, r1
    df72:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    df76:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    df7a:	2b0f      	cmp	r3, #15
    df7c:	92d5      	str	r2, [sp, #852]	; 0x354
    df7e:	f202 86af 	bhi.w	10ce0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3b04>
    df82:	e7ff      	b.n	df84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xda8>
    df84:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    df88:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    df8c:	1842      	adds	r2, r0, r1
    df8e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    df92:	9bd5      	ldr	r3, [sp, #852]	; 0x354
    df94:	fa5f fc83 	uxtb.w	ip, r3
    df98:	4594      	cmp	ip, r2
    df9a:	d106      	bne.n	dfaa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xdce>
    df9c:	e7ff      	b.n	df9e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xdc2>
                    self.next();
    df9e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dfa2:	f002 ff1a 	bl	10dda <_ZN8libchip814Chip8$LT$T$GT$4next17h079fcfcda82e796aE>
    dfa6:	e7ff      	b.n	dfa8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xdcc>
                if self.v[x] == self.v[y] {
    dfa8:	e7ff      	b.n	dfaa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xdce>
        match (
    dfaa:	f002 bbe4 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    dfae:	2005      	movs	r0, #5
    dfb0:	f8cd 06cc 	str.w	r0, [sp, #1740]	; 0x6cc
    dfb4:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    dfb8:	f2c0 0001 	movt	r0, #1
    dfbc:	6801      	ldr	r1, [r0, #0]
    dfbe:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    dfc2:	f006 fd6b 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dfc6:	90d4      	str	r0, [sp, #848]	; 0x350
    dfc8:	e01f      	b.n	e00a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xe2e>
    dfca:	2001      	movs	r0, #1
    dfcc:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    dfd0:	e015      	b.n	dffe <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xe22>
    dfd2:	2000      	movs	r0, #0
    dfd4:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    dfd8:	e011      	b.n	dffe <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xe22>
    dfda:	2000      	movs	r0, #0
    dfdc:	f88d 0deb 	strb.w	r0, [sp, #3563]	; 0xdeb
    dfe0:	f89d 1deb 	ldrb.w	r1, [sp, #3563]	; 0xdeb
    dfe4:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dfe8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dfec:	f003 f99b 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    dff0:	f8cd 0dec 	str.w	r0, [sp, #3564]	; 0xdec
    dff4:	f8dd 0dec 	ldr.w	r0, [sp, #3564]	; 0xdec
    dff8:	f8cd 06d4 	str.w	r0, [sp, #1748]	; 0x6d4
    dffc:	e00a      	b.n	e014 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xe38>
    dffe:	f89d 06d3 	ldrb.w	r0, [sp, #1747]	; 0x6d3
    e002:	07c0      	lsls	r0, r0, #31
    e004:	2800      	cmp	r0, #0
    e006:	d112      	bne.n	e02e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xe52>
    e008:	e055      	b.n	e0b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xeda>
    e00a:	98d4      	ldr	r0, [sp, #848]	; 0x350
    e00c:	07c1      	lsls	r1, r0, #31
    e00e:	2900      	cmp	r1, #0
    e010:	d1e3      	bne.n	dfda <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xdfe>
    e012:	e7de      	b.n	dfd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xdf6>
    e014:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    e018:	f20d 61d4 	addw	r1, sp, #1748	; 0x6d4
    e01c:	f006 fd3e 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e020:	90d3      	str	r0, [sp, #844]	; 0x34c
    e022:	e7ff      	b.n	e024 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xe48>
    e024:	98d3      	ldr	r0, [sp, #844]	; 0x34c
    e026:	07c1      	lsls	r1, r0, #31
    e028:	2900      	cmp	r1, #0
    e02a:	d1ce      	bne.n	dfca <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xdee>
    e02c:	e7d1      	b.n	dfd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xdf6>
                trace!("[{:04x}] LD Vx, kk", self.pc);
    e02e:	f64d 20f4 	movw	r0, #56052	; 0xdaf4
    e032:	f2c0 0001 	movt	r0, #1
    e036:	6801      	ldr	r1, [r0, #0]
    e038:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e03c:	f100 0212 	add.w	r2, r0, #18
    e040:	f8cd 26f8 	str.w	r2, [sp, #1784]	; 0x6f8
    e044:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
    e048:	f8cd 2d5c 	str.w	r2, [sp, #3420]	; 0xd5c
    e04c:	f646 6307 	movw	r3, #28167	; 0x6e07
    e050:	f2c0 0301 	movt	r3, #1
    e054:	4610      	mov	r0, r2
    e056:	91d2      	str	r1, [sp, #840]	; 0x348
    e058:	4619      	mov	r1, r3
    e05a:	f7fc fa1a 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e05e:	90d1      	str	r0, [sp, #836]	; 0x344
    e060:	91d0      	str	r1, [sp, #832]	; 0x340
    e062:	e7ff      	b.n	e064 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xe88>
    e064:	98d1      	ldr	r0, [sp, #836]	; 0x344
    e066:	f8cd 06f0 	str.w	r0, [sp, #1776]	; 0x6f0
    e06a:	99d0      	ldr	r1, [sp, #832]	; 0x340
    e06c:	f8cd 16f4 	str.w	r1, [sp, #1780]	; 0x6f4
    e070:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    e074:	f2c0 0201 	movt	r2, #1
    e078:	6812      	ldr	r2, [r2, #0]
    e07a:	466b      	mov	r3, sp
    e07c:	f04f 0c01 	mov.w	ip, #1
    e080:	f8c3 c008 	str.w	ip, [r3, #8]
    e084:	605a      	str	r2, [r3, #4]
    e086:	f8c3 c000 	str.w	ip, [r3]
    e08a:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    e08e:	2202      	movs	r2, #2
    e090:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
    e094:	99d2      	ldr	r1, [sp, #840]	; 0x348
    e096:	f006 fbc6 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e09a:	e7ff      	b.n	e09c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xec0>
    e09c:	f8dd 16cc 	ldr.w	r1, [sp, #1740]	; 0x6cc
    e0a0:	f64d 3014 	movw	r0, #56084	; 0xdb14
    e0a4:	f2c0 0001 	movt	r0, #1
    e0a8:	6802      	ldr	r2, [r0, #0]
    e0aa:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    e0ae:	f004 f83f 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e0b2:	e7ff      	b.n	e0b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xed8>
    e0b4:	e7ff      	b.n	e0b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xeda>
                self.v[x] = kk;
    e0b6:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e0ba:	280f      	cmp	r0, #15
    e0bc:	f202 85fc 	bhi.w	10cb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3adc>
    e0c0:	e7ff      	b.n	e0c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xee6>
    e0c2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e0c6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e0ca:	1842      	adds	r2, r0, r1
    e0cc:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    e0d0:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e0d4:	f002 bb4f 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    e0d8:	2005      	movs	r0, #5
    e0da:	f8cd 06fc 	str.w	r0, [sp, #1788]	; 0x6fc
    e0de:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    e0e2:	f2c0 0001 	movt	r0, #1
    e0e6:	6801      	ldr	r1, [r0, #0]
    e0e8:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    e0ec:	f006 fcd6 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e0f0:	90cf      	str	r0, [sp, #828]	; 0x33c
    e0f2:	e01f      	b.n	e134 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xf58>
    e0f4:	2001      	movs	r0, #1
    e0f6:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    e0fa:	e015      	b.n	e128 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xf4c>
    e0fc:	2000      	movs	r0, #0
    e0fe:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    e102:	e011      	b.n	e128 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xf4c>
    e104:	2000      	movs	r0, #0
    e106:	f88d 0df3 	strb.w	r0, [sp, #3571]	; 0xdf3
    e10a:	f89d 1df3 	ldrb.w	r1, [sp, #3571]	; 0xdf3
    e10e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e112:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e116:	f003 f906 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e11a:	f8cd 0df4 	str.w	r0, [sp, #3572]	; 0xdf4
    e11e:	f8dd 0df4 	ldr.w	r0, [sp, #3572]	; 0xdf4
    e122:	f8cd 0704 	str.w	r0, [sp, #1796]	; 0x704
    e126:	e00a      	b.n	e13e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xf62>
    e128:	f89d 0703 	ldrb.w	r0, [sp, #1795]	; 0x703
    e12c:	07c0      	lsls	r0, r0, #31
    e12e:	2800      	cmp	r0, #0
    e130:	d112      	bne.n	e158 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xf7c>
    e132:	e055      	b.n	e1e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1004>
    e134:	98cf      	ldr	r0, [sp, #828]	; 0x33c
    e136:	07c1      	lsls	r1, r0, #31
    e138:	2900      	cmp	r1, #0
    e13a:	d1e3      	bne.n	e104 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xf28>
    e13c:	e7de      	b.n	e0fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xf20>
    e13e:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    e142:	f20d 7104 	addw	r1, sp, #1796	; 0x704
    e146:	f006 fca9 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e14a:	90ce      	str	r0, [sp, #824]	; 0x338
    e14c:	e7ff      	b.n	e14e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xf72>
    e14e:	98ce      	ldr	r0, [sp, #824]	; 0x338
    e150:	07c1      	lsls	r1, r0, #31
    e152:	2900      	cmp	r1, #0
    e154:	d1ce      	bne.n	e0f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xf18>
    e156:	e7d1      	b.n	e0fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xf20>
                trace!("[{:04x}] ADD Vx, kk", self.pc);
    e158:	f64d 2094 	movw	r0, #55956	; 0xda94
    e15c:	f2c0 0001 	movt	r0, #1
    e160:	6801      	ldr	r1, [r0, #0]
    e162:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e166:	f100 0212 	add.w	r2, r0, #18
    e16a:	f8cd 2728 	str.w	r2, [sp, #1832]	; 0x728
    e16e:	f8dd 2728 	ldr.w	r2, [sp, #1832]	; 0x728
    e172:	f8cd 2d58 	str.w	r2, [sp, #3416]	; 0xd58
    e176:	f646 6307 	movw	r3, #28167	; 0x6e07
    e17a:	f2c0 0301 	movt	r3, #1
    e17e:	4610      	mov	r0, r2
    e180:	91cd      	str	r1, [sp, #820]	; 0x334
    e182:	4619      	mov	r1, r3
    e184:	f7fc f985 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e188:	90cc      	str	r0, [sp, #816]	; 0x330
    e18a:	91cb      	str	r1, [sp, #812]	; 0x32c
    e18c:	e7ff      	b.n	e18e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xfb2>
    e18e:	98cc      	ldr	r0, [sp, #816]	; 0x330
    e190:	f8cd 0720 	str.w	r0, [sp, #1824]	; 0x720
    e194:	99cb      	ldr	r1, [sp, #812]	; 0x32c
    e196:	f8cd 1724 	str.w	r1, [sp, #1828]	; 0x724
    e19a:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    e19e:	f2c0 0201 	movt	r2, #1
    e1a2:	6812      	ldr	r2, [r2, #0]
    e1a4:	466b      	mov	r3, sp
    e1a6:	f04f 0c01 	mov.w	ip, #1
    e1aa:	f8c3 c008 	str.w	ip, [r3, #8]
    e1ae:	605a      	str	r2, [r3, #4]
    e1b0:	f8c3 c000 	str.w	ip, [r3]
    e1b4:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    e1b8:	2202      	movs	r2, #2
    e1ba:	f50d 63e4 	add.w	r3, sp, #1824	; 0x720
    e1be:	99cd      	ldr	r1, [sp, #820]	; 0x334
    e1c0:	f006 fb31 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e1c4:	e7ff      	b.n	e1c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xfea>
    e1c6:	f8dd 16fc 	ldr.w	r1, [sp, #1788]	; 0x6fc
    e1ca:	f64d 20b4 	movw	r0, #55988	; 0xdab4
    e1ce:	f2c0 0001 	movt	r0, #1
    e1d2:	6802      	ldr	r2, [r0, #0]
    e1d4:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    e1d8:	f003 ffaa 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e1dc:	e7ff      	b.n	e1de <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1002>
    e1de:	e7ff      	b.n	e1e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1004>
                self.v[x] = self.v[x].wrapping_add(kk);
    e1e0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e1e4:	280f      	cmp	r0, #15
    e1e6:	f202 8553 	bhi.w	10c90 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3ab4>
    e1ea:	e7ff      	b.n	e1ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1010>
    e1ec:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e1f0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e1f4:	1842      	adds	r2, r0, r1
    e1f6:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    e1fa:	f8dd 145c 	ldr.w	r1, [sp, #1116]	; 0x45c
    e1fe:	f006 fb76 	bl	148ee <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>
    e202:	90ca      	str	r0, [sp, #808]	; 0x328
    e204:	e7ff      	b.n	e206 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x102a>
    e206:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e20a:	280f      	cmp	r0, #15
    e20c:	f202 854a 	bhi.w	10ca4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3ac8>
    e210:	e7ff      	b.n	e212 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1036>
    e212:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e216:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e21a:	1842      	adds	r2, r0, r1
    e21c:	9bca      	ldr	r3, [sp, #808]	; 0x328
    e21e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e222:	f002 baa8 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    e226:	2005      	movs	r0, #5
    e228:	f8cd 072c 	str.w	r0, [sp, #1836]	; 0x72c
    e22c:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    e230:	f2c0 0001 	movt	r0, #1
    e234:	6801      	ldr	r1, [r0, #0]
    e236:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    e23a:	f006 fc2f 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e23e:	90c9      	str	r0, [sp, #804]	; 0x324
    e240:	e01f      	b.n	e282 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x10a6>
    e242:	2001      	movs	r0, #1
    e244:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    e248:	e015      	b.n	e276 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x109a>
    e24a:	2000      	movs	r0, #0
    e24c:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    e250:	e011      	b.n	e276 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x109a>
    e252:	2000      	movs	r0, #0
    e254:	f88d 0dfb 	strb.w	r0, [sp, #3579]	; 0xdfb
    e258:	f89d 1dfb 	ldrb.w	r1, [sp, #3579]	; 0xdfb
    e25c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e260:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e264:	f003 f85f 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e268:	f8cd 0dfc 	str.w	r0, [sp, #3580]	; 0xdfc
    e26c:	f8dd 0dfc 	ldr.w	r0, [sp, #3580]	; 0xdfc
    e270:	f8cd 0734 	str.w	r0, [sp, #1844]	; 0x734
    e274:	e00a      	b.n	e28c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x10b0>
    e276:	f89d 0733 	ldrb.w	r0, [sp, #1843]	; 0x733
    e27a:	07c0      	lsls	r0, r0, #31
    e27c:	2800      	cmp	r0, #0
    e27e:	d112      	bne.n	e2a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x10ca>
    e280:	e055      	b.n	e32e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1152>
    e282:	98c9      	ldr	r0, [sp, #804]	; 0x324
    e284:	07c1      	lsls	r1, r0, #31
    e286:	2900      	cmp	r1, #0
    e288:	d1e3      	bne.n	e252 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1076>
    e28a:	e7de      	b.n	e24a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x106e>
    e28c:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    e290:	f20d 7134 	addw	r1, sp, #1844	; 0x734
    e294:	f006 fc02 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e298:	90c8      	str	r0, [sp, #800]	; 0x320
    e29a:	e7ff      	b.n	e29c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x10c0>
    e29c:	98c8      	ldr	r0, [sp, #800]	; 0x320
    e29e:	07c1      	lsls	r1, r0, #31
    e2a0:	2900      	cmp	r1, #0
    e2a2:	d1ce      	bne.n	e242 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1066>
    e2a4:	e7d1      	b.n	e24a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x106e>
                trace!("[{:04x}] LD Vx, Vy", self.pc);
    e2a6:	f64d 2034 	movw	r0, #55860	; 0xda34
    e2aa:	f2c0 0001 	movt	r0, #1
    e2ae:	6801      	ldr	r1, [r0, #0]
    e2b0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e2b4:	f100 0212 	add.w	r2, r0, #18
    e2b8:	f8cd 2758 	str.w	r2, [sp, #1880]	; 0x758
    e2bc:	f8dd 2758 	ldr.w	r2, [sp, #1880]	; 0x758
    e2c0:	f8cd 2d54 	str.w	r2, [sp, #3412]	; 0xd54
    e2c4:	f646 6307 	movw	r3, #28167	; 0x6e07
    e2c8:	f2c0 0301 	movt	r3, #1
    e2cc:	4610      	mov	r0, r2
    e2ce:	91c7      	str	r1, [sp, #796]	; 0x31c
    e2d0:	4619      	mov	r1, r3
    e2d2:	f7fc f8de 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e2d6:	90c6      	str	r0, [sp, #792]	; 0x318
    e2d8:	91c5      	str	r1, [sp, #788]	; 0x314
    e2da:	e7ff      	b.n	e2dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1100>
    e2dc:	98c6      	ldr	r0, [sp, #792]	; 0x318
    e2de:	f8cd 0750 	str.w	r0, [sp, #1872]	; 0x750
    e2e2:	99c5      	ldr	r1, [sp, #788]	; 0x314
    e2e4:	f8cd 1754 	str.w	r1, [sp, #1876]	; 0x754
    e2e8:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    e2ec:	f2c0 0201 	movt	r2, #1
    e2f0:	6812      	ldr	r2, [r2, #0]
    e2f2:	466b      	mov	r3, sp
    e2f4:	f04f 0c01 	mov.w	ip, #1
    e2f8:	f8c3 c008 	str.w	ip, [r3, #8]
    e2fc:	605a      	str	r2, [r3, #4]
    e2fe:	f8c3 c000 	str.w	ip, [r3]
    e302:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    e306:	2202      	movs	r2, #2
    e308:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750
    e30c:	99c7      	ldr	r1, [sp, #796]	; 0x31c
    e30e:	f006 fa8a 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e312:	e7ff      	b.n	e314 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1138>
    e314:	f8dd 172c 	ldr.w	r1, [sp, #1836]	; 0x72c
    e318:	f64d 2054 	movw	r0, #55892	; 0xda54
    e31c:	f2c0 0001 	movt	r0, #1
    e320:	6802      	ldr	r2, [r0, #0]
    e322:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    e326:	f003 ff03 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e32a:	e7ff      	b.n	e32c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1150>
    e32c:	e7ff      	b.n	e32e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1152>
                self.v[x] = self.v[y];
    e32e:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e332:	280f      	cmp	r0, #15
    e334:	f202 8498 	bhi.w	10c68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3a8c>
    e338:	e7ff      	b.n	e33a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x115e>
    e33a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e33e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e342:	1842      	adds	r2, r0, r1
    e344:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e348:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e34c:	2b0f      	cmp	r3, #15
    e34e:	92c4      	str	r2, [sp, #784]	; 0x310
    e350:	f202 8494 	bhi.w	10c7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3aa0>
    e354:	e7ff      	b.n	e356 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x117a>
    e356:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e35a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e35e:	1842      	adds	r2, r0, r1
    e360:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    e362:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e366:	f002 ba06 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    e36a:	2005      	movs	r0, #5
    e36c:	f8cd 075c 	str.w	r0, [sp, #1884]	; 0x75c
    e370:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    e374:	f2c0 0001 	movt	r0, #1
    e378:	6801      	ldr	r1, [r0, #0]
    e37a:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    e37e:	f006 fb8d 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e382:	90c3      	str	r0, [sp, #780]	; 0x30c
    e384:	e01f      	b.n	e3c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x11ea>
    e386:	2001      	movs	r0, #1
    e388:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    e38c:	e015      	b.n	e3ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x11de>
    e38e:	2000      	movs	r0, #0
    e390:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    e394:	e011      	b.n	e3ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x11de>
    e396:	2000      	movs	r0, #0
    e398:	f88d 0e03 	strb.w	r0, [sp, #3587]	; 0xe03
    e39c:	f89d 1e03 	ldrb.w	r1, [sp, #3587]	; 0xe03
    e3a0:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e3a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e3a8:	f002 ffbd 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e3ac:	f8cd 0e04 	str.w	r0, [sp, #3588]	; 0xe04
    e3b0:	f8dd 0e04 	ldr.w	r0, [sp, #3588]	; 0xe04
    e3b4:	f8cd 0764 	str.w	r0, [sp, #1892]	; 0x764
    e3b8:	e00a      	b.n	e3d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x11f4>
    e3ba:	f89d 0763 	ldrb.w	r0, [sp, #1891]	; 0x763
    e3be:	07c0      	lsls	r0, r0, #31
    e3c0:	2800      	cmp	r0, #0
    e3c2:	d112      	bne.n	e3ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x120e>
    e3c4:	e055      	b.n	e472 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1296>
    e3c6:	98c3      	ldr	r0, [sp, #780]	; 0x30c
    e3c8:	07c1      	lsls	r1, r0, #31
    e3ca:	2900      	cmp	r1, #0
    e3cc:	d1e3      	bne.n	e396 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x11ba>
    e3ce:	e7de      	b.n	e38e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x11b2>
    e3d0:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    e3d4:	f20d 7164 	addw	r1, sp, #1892	; 0x764
    e3d8:	f006 fb60 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e3dc:	90c2      	str	r0, [sp, #776]	; 0x308
    e3de:	e7ff      	b.n	e3e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1204>
    e3e0:	98c2      	ldr	r0, [sp, #776]	; 0x308
    e3e2:	07c1      	lsls	r1, r0, #31
    e3e4:	2900      	cmp	r1, #0
    e3e6:	d1ce      	bne.n	e386 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x11aa>
    e3e8:	e7d1      	b.n	e38e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x11b2>
                trace!("[{:04x}] OR Vx, Vy", self.pc);
    e3ea:	f64d 10d4 	movw	r0, #55764	; 0xd9d4
    e3ee:	f2c0 0001 	movt	r0, #1
    e3f2:	6801      	ldr	r1, [r0, #0]
    e3f4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e3f8:	f100 0212 	add.w	r2, r0, #18
    e3fc:	f8cd 2788 	str.w	r2, [sp, #1928]	; 0x788
    e400:	f8dd 2788 	ldr.w	r2, [sp, #1928]	; 0x788
    e404:	f8cd 2d50 	str.w	r2, [sp, #3408]	; 0xd50
    e408:	f646 6307 	movw	r3, #28167	; 0x6e07
    e40c:	f2c0 0301 	movt	r3, #1
    e410:	4610      	mov	r0, r2
    e412:	91c1      	str	r1, [sp, #772]	; 0x304
    e414:	4619      	mov	r1, r3
    e416:	f7fc f83c 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e41a:	90c0      	str	r0, [sp, #768]	; 0x300
    e41c:	91bf      	str	r1, [sp, #764]	; 0x2fc
    e41e:	e7ff      	b.n	e420 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1244>
    e420:	98c0      	ldr	r0, [sp, #768]	; 0x300
    e422:	f8cd 0780 	str.w	r0, [sp, #1920]	; 0x780
    e426:	99bf      	ldr	r1, [sp, #764]	; 0x2fc
    e428:	f8cd 1784 	str.w	r1, [sp, #1924]	; 0x784
    e42c:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    e430:	f2c0 0201 	movt	r2, #1
    e434:	6812      	ldr	r2, [r2, #0]
    e436:	466b      	mov	r3, sp
    e438:	f04f 0c01 	mov.w	ip, #1
    e43c:	f8c3 c008 	str.w	ip, [r3, #8]
    e440:	605a      	str	r2, [r3, #4]
    e442:	f8c3 c000 	str.w	ip, [r3]
    e446:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    e44a:	2202      	movs	r2, #2
    e44c:	f50d 63f0 	add.w	r3, sp, #1920	; 0x780
    e450:	99c1      	ldr	r1, [sp, #772]	; 0x304
    e452:	f006 f9e8 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e456:	e7ff      	b.n	e458 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x127c>
    e458:	f8dd 175c 	ldr.w	r1, [sp, #1884]	; 0x75c
    e45c:	f64d 10f4 	movw	r0, #55796	; 0xd9f4
    e460:	f2c0 0001 	movt	r0, #1
    e464:	6802      	ldr	r2, [r0, #0]
    e466:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    e46a:	f003 fe61 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e46e:	e7ff      	b.n	e470 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1294>
    e470:	e7ff      	b.n	e472 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1296>
                self.v[x] |= self.v[y];
    e472:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e476:	280f      	cmp	r0, #15
    e478:	f202 83e2 	bhi.w	10c40 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3a64>
    e47c:	e7ff      	b.n	e47e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x12a2>
    e47e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e482:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e486:	1842      	adds	r2, r0, r1
    e488:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e48c:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e490:	2b0f      	cmp	r3, #15
    e492:	92be      	str	r2, [sp, #760]	; 0x2f8
    e494:	f202 83de 	bhi.w	10c54 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3a78>
    e498:	e7ff      	b.n	e49a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x12be>
    e49a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e49e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e4a2:	1842      	adds	r2, r0, r1
    e4a4:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    e4a8:	f8dd c2f8 	ldr.w	ip, [sp, #760]	; 0x2f8
    e4ac:	ea43 030c 	orr.w	r3, r3, ip
    e4b0:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e4b4:	f002 b95f 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    e4b8:	2005      	movs	r0, #5
    e4ba:	f8cd 078c 	str.w	r0, [sp, #1932]	; 0x78c
    e4be:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    e4c2:	f2c0 0001 	movt	r0, #1
    e4c6:	6801      	ldr	r1, [r0, #0]
    e4c8:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    e4cc:	f006 fae6 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e4d0:	90bd      	str	r0, [sp, #756]	; 0x2f4
    e4d2:	e01f      	b.n	e514 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1338>
    e4d4:	2001      	movs	r0, #1
    e4d6:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    e4da:	e015      	b.n	e508 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x132c>
    e4dc:	2000      	movs	r0, #0
    e4de:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    e4e2:	e011      	b.n	e508 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x132c>
    e4e4:	2000      	movs	r0, #0
    e4e6:	f88d 0e0b 	strb.w	r0, [sp, #3595]	; 0xe0b
    e4ea:	f89d 1e0b 	ldrb.w	r1, [sp, #3595]	; 0xe0b
    e4ee:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e4f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e4f6:	f002 ff16 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e4fa:	f8cd 0e0c 	str.w	r0, [sp, #3596]	; 0xe0c
    e4fe:	f8dd 0e0c 	ldr.w	r0, [sp, #3596]	; 0xe0c
    e502:	f8cd 0794 	str.w	r0, [sp, #1940]	; 0x794
    e506:	e00a      	b.n	e51e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1342>
    e508:	f89d 0793 	ldrb.w	r0, [sp, #1939]	; 0x793
    e50c:	07c0      	lsls	r0, r0, #31
    e50e:	2800      	cmp	r0, #0
    e510:	d112      	bne.n	e538 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x135c>
    e512:	e055      	b.n	e5c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x13e4>
    e514:	98bd      	ldr	r0, [sp, #756]	; 0x2f4
    e516:	07c1      	lsls	r1, r0, #31
    e518:	2900      	cmp	r1, #0
    e51a:	d1e3      	bne.n	e4e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1308>
    e51c:	e7de      	b.n	e4dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1300>
    e51e:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    e522:	f20d 7194 	addw	r1, sp, #1940	; 0x794
    e526:	f006 fab9 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e52a:	90bc      	str	r0, [sp, #752]	; 0x2f0
    e52c:	e7ff      	b.n	e52e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1352>
    e52e:	98bc      	ldr	r0, [sp, #752]	; 0x2f0
    e530:	07c1      	lsls	r1, r0, #31
    e532:	2900      	cmp	r1, #0
    e534:	d1ce      	bne.n	e4d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x12f8>
    e536:	e7d1      	b.n	e4dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1300>
                trace!("[{:04x}] AND Vx, Vy", self.pc);
    e538:	f64d 1074 	movw	r0, #55668	; 0xd974
    e53c:	f2c0 0001 	movt	r0, #1
    e540:	6801      	ldr	r1, [r0, #0]
    e542:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e546:	f100 0212 	add.w	r2, r0, #18
    e54a:	f8cd 27b8 	str.w	r2, [sp, #1976]	; 0x7b8
    e54e:	f8dd 27b8 	ldr.w	r2, [sp, #1976]	; 0x7b8
    e552:	f8cd 2d4c 	str.w	r2, [sp, #3404]	; 0xd4c
    e556:	f646 6307 	movw	r3, #28167	; 0x6e07
    e55a:	f2c0 0301 	movt	r3, #1
    e55e:	4610      	mov	r0, r2
    e560:	91bb      	str	r1, [sp, #748]	; 0x2ec
    e562:	4619      	mov	r1, r3
    e564:	f7fb ff95 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e568:	90ba      	str	r0, [sp, #744]	; 0x2e8
    e56a:	91b9      	str	r1, [sp, #740]	; 0x2e4
    e56c:	e7ff      	b.n	e56e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1392>
    e56e:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
    e570:	f8cd 07b0 	str.w	r0, [sp, #1968]	; 0x7b0
    e574:	99b9      	ldr	r1, [sp, #740]	; 0x2e4
    e576:	f8cd 17b4 	str.w	r1, [sp, #1972]	; 0x7b4
    e57a:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    e57e:	f2c0 0201 	movt	r2, #1
    e582:	6812      	ldr	r2, [r2, #0]
    e584:	466b      	mov	r3, sp
    e586:	f04f 0c01 	mov.w	ip, #1
    e58a:	f8c3 c008 	str.w	ip, [r3, #8]
    e58e:	605a      	str	r2, [r3, #4]
    e590:	f8c3 c000 	str.w	ip, [r3]
    e594:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    e598:	2202      	movs	r2, #2
    e59a:	f50d 63f6 	add.w	r3, sp, #1968	; 0x7b0
    e59e:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
    e5a0:	f006 f941 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e5a4:	e7ff      	b.n	e5a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x13ca>
    e5a6:	f8dd 178c 	ldr.w	r1, [sp, #1932]	; 0x78c
    e5aa:	f64d 1094 	movw	r0, #55700	; 0xd994
    e5ae:	f2c0 0001 	movt	r0, #1
    e5b2:	6802      	ldr	r2, [r0, #0]
    e5b4:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    e5b8:	f003 fdba 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e5bc:	e7ff      	b.n	e5be <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x13e2>
    e5be:	e7ff      	b.n	e5c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x13e4>
                self.v[x] &= self.v[y];
    e5c0:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e5c4:	280f      	cmp	r0, #15
    e5c6:	f202 8327 	bhi.w	10c18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3a3c>
    e5ca:	e7ff      	b.n	e5cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x13f0>
    e5cc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e5d0:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e5d4:	1842      	adds	r2, r0, r1
    e5d6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e5da:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e5de:	2b0f      	cmp	r3, #15
    e5e0:	92b8      	str	r2, [sp, #736]	; 0x2e0
    e5e2:	f202 8323 	bhi.w	10c2c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3a50>
    e5e6:	e7ff      	b.n	e5e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x140c>
    e5e8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e5ec:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e5f0:	1842      	adds	r2, r0, r1
    e5f2:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    e5f6:	f8dd c2e0 	ldr.w	ip, [sp, #736]	; 0x2e0
    e5fa:	ea03 030c 	and.w	r3, r3, ip
    e5fe:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e602:	f002 b8b8 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    e606:	2005      	movs	r0, #5
    e608:	f8cd 07bc 	str.w	r0, [sp, #1980]	; 0x7bc
    e60c:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    e610:	f2c0 0001 	movt	r0, #1
    e614:	6801      	ldr	r1, [r0, #0]
    e616:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    e61a:	f006 fa3f 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e61e:	90b7      	str	r0, [sp, #732]	; 0x2dc
    e620:	e01f      	b.n	e662 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1486>
    e622:	2001      	movs	r0, #1
    e624:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    e628:	e015      	b.n	e656 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x147a>
    e62a:	2000      	movs	r0, #0
    e62c:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    e630:	e011      	b.n	e656 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x147a>
    e632:	2000      	movs	r0, #0
    e634:	f88d 0e13 	strb.w	r0, [sp, #3603]	; 0xe13
    e638:	f89d 1e13 	ldrb.w	r1, [sp, #3603]	; 0xe13
    e63c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e640:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e644:	f002 fe6f 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e648:	f8cd 0e14 	str.w	r0, [sp, #3604]	; 0xe14
    e64c:	f8dd 0e14 	ldr.w	r0, [sp, #3604]	; 0xe14
    e650:	f8cd 07c4 	str.w	r0, [sp, #1988]	; 0x7c4
    e654:	e00a      	b.n	e66c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1490>
    e656:	f89d 07c3 	ldrb.w	r0, [sp, #1987]	; 0x7c3
    e65a:	07c0      	lsls	r0, r0, #31
    e65c:	2800      	cmp	r0, #0
    e65e:	d112      	bne.n	e686 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x14aa>
    e660:	e055      	b.n	e70e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1532>
    e662:	98b7      	ldr	r0, [sp, #732]	; 0x2dc
    e664:	07c1      	lsls	r1, r0, #31
    e666:	2900      	cmp	r1, #0
    e668:	d1e3      	bne.n	e632 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1456>
    e66a:	e7de      	b.n	e62a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x144e>
    e66c:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    e670:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
    e674:	f006 fa12 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e678:	90b6      	str	r0, [sp, #728]	; 0x2d8
    e67a:	e7ff      	b.n	e67c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x14a0>
    e67c:	98b6      	ldr	r0, [sp, #728]	; 0x2d8
    e67e:	07c1      	lsls	r1, r0, #31
    e680:	2900      	cmp	r1, #0
    e682:	d1ce      	bne.n	e622 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1446>
    e684:	e7d1      	b.n	e62a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x144e>
                trace!("[{:04x}] XOR Vx, Vy", self.pc);
    e686:	f64d 1014 	movw	r0, #55572	; 0xd914
    e68a:	f2c0 0001 	movt	r0, #1
    e68e:	6801      	ldr	r1, [r0, #0]
    e690:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e694:	f100 0212 	add.w	r2, r0, #18
    e698:	f8cd 27e8 	str.w	r2, [sp, #2024]	; 0x7e8
    e69c:	f8dd 27e8 	ldr.w	r2, [sp, #2024]	; 0x7e8
    e6a0:	f8cd 2d48 	str.w	r2, [sp, #3400]	; 0xd48
    e6a4:	f646 6307 	movw	r3, #28167	; 0x6e07
    e6a8:	f2c0 0301 	movt	r3, #1
    e6ac:	4610      	mov	r0, r2
    e6ae:	91b5      	str	r1, [sp, #724]	; 0x2d4
    e6b0:	4619      	mov	r1, r3
    e6b2:	f7fb feee 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e6b6:	90b4      	str	r0, [sp, #720]	; 0x2d0
    e6b8:	91b3      	str	r1, [sp, #716]	; 0x2cc
    e6ba:	e7ff      	b.n	e6bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x14e0>
    e6bc:	98b4      	ldr	r0, [sp, #720]	; 0x2d0
    e6be:	f8cd 07e0 	str.w	r0, [sp, #2016]	; 0x7e0
    e6c2:	99b3      	ldr	r1, [sp, #716]	; 0x2cc
    e6c4:	f8cd 17e4 	str.w	r1, [sp, #2020]	; 0x7e4
    e6c8:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    e6cc:	f2c0 0201 	movt	r2, #1
    e6d0:	6812      	ldr	r2, [r2, #0]
    e6d2:	466b      	mov	r3, sp
    e6d4:	f04f 0c01 	mov.w	ip, #1
    e6d8:	f8c3 c008 	str.w	ip, [r3, #8]
    e6dc:	605a      	str	r2, [r3, #4]
    e6de:	f8c3 c000 	str.w	ip, [r3]
    e6e2:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    e6e6:	2202      	movs	r2, #2
    e6e8:	f50d 63fc 	add.w	r3, sp, #2016	; 0x7e0
    e6ec:	99b5      	ldr	r1, [sp, #724]	; 0x2d4
    e6ee:	f006 f89a 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e6f2:	e7ff      	b.n	e6f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1518>
    e6f4:	f8dd 17bc 	ldr.w	r1, [sp, #1980]	; 0x7bc
    e6f8:	f64d 1034 	movw	r0, #55604	; 0xd934
    e6fc:	f2c0 0001 	movt	r0, #1
    e700:	6802      	ldr	r2, [r0, #0]
    e702:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    e706:	f003 fd13 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e70a:	e7ff      	b.n	e70c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1530>
    e70c:	e7ff      	b.n	e70e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1532>
                self.v[x] ^= self.v[y];
    e70e:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e712:	280f      	cmp	r0, #15
    e714:	f202 826c 	bhi.w	10bf0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3a14>
    e718:	e7ff      	b.n	e71a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x153e>
    e71a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e71e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e722:	1842      	adds	r2, r0, r1
    e724:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e728:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e72c:	2b0f      	cmp	r3, #15
    e72e:	92b2      	str	r2, [sp, #712]	; 0x2c8
    e730:	f202 8268 	bhi.w	10c04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3a28>
    e734:	e7ff      	b.n	e736 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x155a>
    e736:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e73a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e73e:	1842      	adds	r2, r0, r1
    e740:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    e744:	f8dd c2c8 	ldr.w	ip, [sp, #712]	; 0x2c8
    e748:	ea83 030c 	eor.w	r3, r3, ip
    e74c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e750:	f002 b811 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    e754:	2005      	movs	r0, #5
    e756:	f8cd 07ec 	str.w	r0, [sp, #2028]	; 0x7ec
    e75a:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    e75e:	f2c0 0001 	movt	r0, #1
    e762:	6801      	ldr	r1, [r0, #0]
    e764:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    e768:	f006 f998 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e76c:	90b1      	str	r0, [sp, #708]	; 0x2c4
    e76e:	e01f      	b.n	e7b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x15d4>
    e770:	2001      	movs	r0, #1
    e772:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    e776:	e015      	b.n	e7a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x15c8>
    e778:	2000      	movs	r0, #0
    e77a:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    e77e:	e011      	b.n	e7a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x15c8>
    e780:	2000      	movs	r0, #0
    e782:	f88d 0e1b 	strb.w	r0, [sp, #3611]	; 0xe1b
    e786:	f89d 1e1b 	ldrb.w	r1, [sp, #3611]	; 0xe1b
    e78a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e78e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e792:	f002 fdc8 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e796:	f8cd 0e1c 	str.w	r0, [sp, #3612]	; 0xe1c
    e79a:	f8dd 0e1c 	ldr.w	r0, [sp, #3612]	; 0xe1c
    e79e:	f8cd 07f4 	str.w	r0, [sp, #2036]	; 0x7f4
    e7a2:	e00a      	b.n	e7ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x15de>
    e7a4:	f89d 07f3 	ldrb.w	r0, [sp, #2035]	; 0x7f3
    e7a8:	07c0      	lsls	r0, r0, #31
    e7aa:	2800      	cmp	r0, #0
    e7ac:	d112      	bne.n	e7d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x15f8>
    e7ae:	e055      	b.n	e85c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1680>
    e7b0:	98b1      	ldr	r0, [sp, #708]	; 0x2c4
    e7b2:	07c1      	lsls	r1, r0, #31
    e7b4:	2900      	cmp	r1, #0
    e7b6:	d1e3      	bne.n	e780 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x15a4>
    e7b8:	e7de      	b.n	e778 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x159c>
    e7ba:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    e7be:	f20d 71f4 	addw	r1, sp, #2036	; 0x7f4
    e7c2:	f006 f96b 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e7c6:	90b0      	str	r0, [sp, #704]	; 0x2c0
    e7c8:	e7ff      	b.n	e7ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x15ee>
    e7ca:	98b0      	ldr	r0, [sp, #704]	; 0x2c0
    e7cc:	07c1      	lsls	r1, r0, #31
    e7ce:	2900      	cmp	r1, #0
    e7d0:	d1ce      	bne.n	e770 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1594>
    e7d2:	e7d1      	b.n	e778 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x159c>
                trace!("[{:04x}] ADD Vx, Vy", self.pc);
    e7d4:	f64d 00a4 	movw	r0, #55460	; 0xd8a4
    e7d8:	f2c0 0001 	movt	r0, #1
    e7dc:	6801      	ldr	r1, [r0, #0]
    e7de:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e7e2:	f100 0212 	add.w	r2, r0, #18
    e7e6:	f8cd 2818 	str.w	r2, [sp, #2072]	; 0x818
    e7ea:	f8dd 2818 	ldr.w	r2, [sp, #2072]	; 0x818
    e7ee:	f8cd 2d40 	str.w	r2, [sp, #3392]	; 0xd40
    e7f2:	f646 6307 	movw	r3, #28167	; 0x6e07
    e7f6:	f2c0 0301 	movt	r3, #1
    e7fa:	4610      	mov	r0, r2
    e7fc:	91af      	str	r1, [sp, #700]	; 0x2bc
    e7fe:	4619      	mov	r1, r3
    e800:	f7fb fe47 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e804:	90ae      	str	r0, [sp, #696]	; 0x2b8
    e806:	91ad      	str	r1, [sp, #692]	; 0x2b4
    e808:	e7ff      	b.n	e80a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x162e>
    e80a:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
    e80c:	f8cd 0810 	str.w	r0, [sp, #2064]	; 0x810
    e810:	99ad      	ldr	r1, [sp, #692]	; 0x2b4
    e812:	f8cd 1814 	str.w	r1, [sp, #2068]	; 0x814
    e816:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    e81a:	f2c0 0201 	movt	r2, #1
    e81e:	6812      	ldr	r2, [r2, #0]
    e820:	466b      	mov	r3, sp
    e822:	f04f 0c01 	mov.w	ip, #1
    e826:	f8c3 c008 	str.w	ip, [r3, #8]
    e82a:	605a      	str	r2, [r3, #4]
    e82c:	f8c3 c000 	str.w	ip, [r3]
    e830:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    e834:	2202      	movs	r2, #2
    e836:	f50d 6301 	add.w	r3, sp, #2064	; 0x810
    e83a:	99af      	ldr	r1, [sp, #700]	; 0x2bc
    e83c:	f005 fff3 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e840:	e7ff      	b.n	e842 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1666>
    e842:	f8dd 17ec 	ldr.w	r1, [sp, #2028]	; 0x7ec
    e846:	f64d 00c4 	movw	r0, #55492	; 0xd8c4
    e84a:	f2c0 0001 	movt	r0, #1
    e84e:	6802      	ldr	r2, [r0, #0]
    e850:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    e854:	f003 fc6c 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e858:	e7ff      	b.n	e85a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x167e>
    e85a:	e7ff      	b.n	e85c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1680>
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    e85c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e860:	280f      	cmp	r0, #15
    e862:	f202 81a7 	bhi.w	10bb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x39d8>
    e866:	e7ff      	b.n	e868 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x168c>
    e868:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e86c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e870:	1842      	adds	r2, r0, r1
    e872:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e876:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    e87a:	2b0f      	cmp	r3, #15
    e87c:	92ac      	str	r2, [sp, #688]	; 0x2b0
    e87e:	f202 81a3 	bhi.w	10bc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x39ec>
    e882:	e7ff      	b.n	e884 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x16a8>
    e884:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e888:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e88c:	1842      	adds	r2, r0, r1
    e88e:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    e892:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
    e894:	f006 f871 	bl	1497a <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>
    e898:	90ab      	str	r0, [sp, #684]	; 0x2ac
    e89a:	91aa      	str	r1, [sp, #680]	; 0x2a8
    e89c:	e7ff      	b.n	e89e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x16c2>
    e89e:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
    e8a0:	f88d 0d46 	strb.w	r0, [sp, #3398]	; 0xd46
    e8a4:	99aa      	ldr	r1, [sp, #680]	; 0x2a8
    e8a6:	f001 0201 	and.w	r2, r1, #1
    e8aa:	f88d 2d47 	strb.w	r2, [sp, #3399]	; 0xd47
                self.v[x] = v;
    e8ae:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    e8b2:	2a0f      	cmp	r2, #15
    e8b4:	f202 8192 	bhi.w	10bdc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3a00>
    e8b8:	e7ff      	b.n	e8ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x16de>
    e8ba:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e8be:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e8c2:	1842      	adds	r2, r0, r1
    e8c4:	9bab      	ldr	r3, [sp, #684]	; 0x2ac
    e8c6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                self.v[0xf] = c as u8;
    e8ca:	9aaa      	ldr	r2, [sp, #680]	; 0x2a8
    e8cc:	f002 0c01 	and.w	ip, r2, #1
    e8d0:	f880 c043 	strb.w	ip, [r0, #67]	; 0x43
        match (
    e8d4:	f001 bf4f 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    e8d8:	2005      	movs	r0, #5
    e8da:	f8cd 081c 	str.w	r0, [sp, #2076]	; 0x81c
    e8de:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    e8e2:	f2c0 0001 	movt	r0, #1
    e8e6:	6801      	ldr	r1, [r0, #0]
    e8e8:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    e8ec:	f006 f8d6 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e8f0:	90a9      	str	r0, [sp, #676]	; 0x2a4
    e8f2:	e01f      	b.n	e934 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1758>
    e8f4:	2001      	movs	r0, #1
    e8f6:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    e8fa:	e015      	b.n	e928 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x174c>
    e8fc:	2000      	movs	r0, #0
    e8fe:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    e902:	e011      	b.n	e928 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x174c>
    e904:	2000      	movs	r0, #0
    e906:	f88d 0e23 	strb.w	r0, [sp, #3619]	; 0xe23
    e90a:	f89d 1e23 	ldrb.w	r1, [sp, #3619]	; 0xe23
    e90e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e912:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e916:	f002 fd06 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e91a:	f8cd 0e24 	str.w	r0, [sp, #3620]	; 0xe24
    e91e:	f8dd 0e24 	ldr.w	r0, [sp, #3620]	; 0xe24
    e922:	f8cd 0824 	str.w	r0, [sp, #2084]	; 0x824
    e926:	e00a      	b.n	e93e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1762>
    e928:	f89d 0823 	ldrb.w	r0, [sp, #2083]	; 0x823
    e92c:	07c0      	lsls	r0, r0, #31
    e92e:	2800      	cmp	r0, #0
    e930:	d112      	bne.n	e958 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x177c>
    e932:	e055      	b.n	e9e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1804>
    e934:	98a9      	ldr	r0, [sp, #676]	; 0x2a4
    e936:	07c1      	lsls	r1, r0, #31
    e938:	2900      	cmp	r1, #0
    e93a:	d1e3      	bne.n	e904 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1728>
    e93c:	e7de      	b.n	e8fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1720>
    e93e:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    e942:	f60d 0124 	addw	r1, sp, #2084	; 0x824
    e946:	f006 f8a9 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e94a:	90a8      	str	r0, [sp, #672]	; 0x2a0
    e94c:	e7ff      	b.n	e94e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1772>
    e94e:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
    e950:	07c1      	lsls	r1, r0, #31
    e952:	2900      	cmp	r1, #0
    e954:	d1ce      	bne.n	e8f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1718>
    e956:	e7d1      	b.n	e8fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1720>
                trace!("[{:04x}] SUB Vx, Vy", self.pc);
    e958:	f64d 0034 	movw	r0, #55348	; 0xd834
    e95c:	f2c0 0001 	movt	r0, #1
    e960:	6801      	ldr	r1, [r0, #0]
    e962:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e966:	f100 0212 	add.w	r2, r0, #18
    e96a:	f8cd 2848 	str.w	r2, [sp, #2120]	; 0x848
    e96e:	f8dd 2848 	ldr.w	r2, [sp, #2120]	; 0x848
    e972:	f8cd 2d38 	str.w	r2, [sp, #3384]	; 0xd38
    e976:	f646 6307 	movw	r3, #28167	; 0x6e07
    e97a:	f2c0 0301 	movt	r3, #1
    e97e:	4610      	mov	r0, r2
    e980:	91a7      	str	r1, [sp, #668]	; 0x29c
    e982:	4619      	mov	r1, r3
    e984:	f7fb fd85 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e988:	90a6      	str	r0, [sp, #664]	; 0x298
    e98a:	91a5      	str	r1, [sp, #660]	; 0x294
    e98c:	e7ff      	b.n	e98e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x17b2>
    e98e:	98a6      	ldr	r0, [sp, #664]	; 0x298
    e990:	f8cd 0840 	str.w	r0, [sp, #2112]	; 0x840
    e994:	99a5      	ldr	r1, [sp, #660]	; 0x294
    e996:	f8cd 1844 	str.w	r1, [sp, #2116]	; 0x844
    e99a:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    e99e:	f2c0 0201 	movt	r2, #1
    e9a2:	6812      	ldr	r2, [r2, #0]
    e9a4:	466b      	mov	r3, sp
    e9a6:	f04f 0c01 	mov.w	ip, #1
    e9aa:	f8c3 c008 	str.w	ip, [r3, #8]
    e9ae:	605a      	str	r2, [r3, #4]
    e9b0:	f8c3 c000 	str.w	ip, [r3]
    e9b4:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    e9b8:	2202      	movs	r2, #2
    e9ba:	f50d 6304 	add.w	r3, sp, #2112	; 0x840
    e9be:	99a7      	ldr	r1, [sp, #668]	; 0x29c
    e9c0:	f005 ff31 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e9c4:	e7ff      	b.n	e9c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x17ea>
    e9c6:	f8dd 181c 	ldr.w	r1, [sp, #2076]	; 0x81c
    e9ca:	f64d 0054 	movw	r0, #55380	; 0xd854
    e9ce:	f2c0 0001 	movt	r0, #1
    e9d2:	6802      	ldr	r2, [r0, #0]
    e9d4:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    e9d8:	f003 fbaa 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e9dc:	e7ff      	b.n	e9de <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1802>
    e9de:	e7ff      	b.n	e9e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1804>
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    e9e0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e9e4:	280f      	cmp	r0, #15
    e9e6:	f202 80c7 	bhi.w	10b78 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x399c>
    e9ea:	e7ff      	b.n	e9ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1810>
    e9ec:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e9f0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e9f4:	1842      	adds	r2, r0, r1
    e9f6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e9fa:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    e9fe:	2b0f      	cmp	r3, #15
    ea00:	92a4      	str	r2, [sp, #656]	; 0x290
    ea02:	f202 80c3 	bhi.w	10b8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x39b0>
    ea06:	e7ff      	b.n	ea08 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x182c>
    ea08:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ea0c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ea10:	1842      	adds	r2, r0, r1
    ea12:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    ea16:	98a4      	ldr	r0, [sp, #656]	; 0x290
    ea18:	f005 ffda 	bl	149d0 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>
    ea1c:	90a3      	str	r0, [sp, #652]	; 0x28c
    ea1e:	91a2      	str	r1, [sp, #648]	; 0x288
    ea20:	e7ff      	b.n	ea22 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1846>
    ea22:	98a3      	ldr	r0, [sp, #652]	; 0x28c
    ea24:	f88d 0d3e 	strb.w	r0, [sp, #3390]	; 0xd3e
    ea28:	99a2      	ldr	r1, [sp, #648]	; 0x288
    ea2a:	f001 0201 	and.w	r2, r1, #1
    ea2e:	f88d 2d3f 	strb.w	r2, [sp, #3391]	; 0xd3f
                self.v[x] = v;
    ea32:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    ea36:	2a0f      	cmp	r2, #15
    ea38:	f202 80b2 	bhi.w	10ba0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x39c4>
    ea3c:	e7ff      	b.n	ea3e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1862>
    ea3e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ea42:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ea46:	1842      	adds	r2, r0, r1
    ea48:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    ea4a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    ea4e:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    ea50:	f8dd c288 	ldr.w	ip, [sp, #648]	; 0x288
    ea54:	ea22 020c 	bic.w	r2, r2, ip
    ea58:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    ea5c:	f001 be8b 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    ea60:	2005      	movs	r0, #5
    ea62:	f8cd 084c 	str.w	r0, [sp, #2124]	; 0x84c
    ea66:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    ea6a:	f2c0 0001 	movt	r0, #1
    ea6e:	6801      	ldr	r1, [r0, #0]
    ea70:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    ea74:	f006 f812 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ea78:	90a1      	str	r0, [sp, #644]	; 0x284
    ea7a:	e01f      	b.n	eabc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x18e0>
    ea7c:	2001      	movs	r0, #1
    ea7e:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    ea82:	e015      	b.n	eab0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x18d4>
    ea84:	2000      	movs	r0, #0
    ea86:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    ea8a:	e011      	b.n	eab0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x18d4>
    ea8c:	2000      	movs	r0, #0
    ea8e:	f88d 0e2b 	strb.w	r0, [sp, #3627]	; 0xe2b
    ea92:	f89d 1e2b 	ldrb.w	r1, [sp, #3627]	; 0xe2b
    ea96:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ea9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ea9e:	f002 fc42 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    eaa2:	f8cd 0e2c 	str.w	r0, [sp, #3628]	; 0xe2c
    eaa6:	f8dd 0e2c 	ldr.w	r0, [sp, #3628]	; 0xe2c
    eaaa:	f8cd 0854 	str.w	r0, [sp, #2132]	; 0x854
    eaae:	e00a      	b.n	eac6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x18ea>
    eab0:	f89d 0853 	ldrb.w	r0, [sp, #2131]	; 0x853
    eab4:	07c0      	lsls	r0, r0, #31
    eab6:	2800      	cmp	r0, #0
    eab8:	d112      	bne.n	eae0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1904>
    eaba:	e055      	b.n	eb68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x198c>
    eabc:	98a1      	ldr	r0, [sp, #644]	; 0x284
    eabe:	07c1      	lsls	r1, r0, #31
    eac0:	2900      	cmp	r1, #0
    eac2:	d1e3      	bne.n	ea8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x18b0>
    eac4:	e7de      	b.n	ea84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x18a8>
    eac6:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    eaca:	f60d 0154 	addw	r1, sp, #2132	; 0x854
    eace:	f005 ffe5 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ead2:	90a0      	str	r0, [sp, #640]	; 0x280
    ead4:	e7ff      	b.n	ead6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x18fa>
    ead6:	98a0      	ldr	r0, [sp, #640]	; 0x280
    ead8:	07c1      	lsls	r1, r0, #31
    eada:	2900      	cmp	r1, #0
    eadc:	d1ce      	bne.n	ea7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x18a0>
    eade:	e7d1      	b.n	ea84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x18a8>
                trace!("[{:04x}] SHR Vx, Vy", self.pc);
    eae0:	f24d 70c4 	movw	r0, #55236	; 0xd7c4
    eae4:	f2c0 0001 	movt	r0, #1
    eae8:	6801      	ldr	r1, [r0, #0]
    eaea:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eaee:	f100 0212 	add.w	r2, r0, #18
    eaf2:	f8cd 2878 	str.w	r2, [sp, #2168]	; 0x878
    eaf6:	f8dd 2878 	ldr.w	r2, [sp, #2168]	; 0x878
    eafa:	f8cd 2d34 	str.w	r2, [sp, #3380]	; 0xd34
    eafe:	f646 6307 	movw	r3, #28167	; 0x6e07
    eb02:	f2c0 0301 	movt	r3, #1
    eb06:	4610      	mov	r0, r2
    eb08:	919f      	str	r1, [sp, #636]	; 0x27c
    eb0a:	4619      	mov	r1, r3
    eb0c:	f7fb fcc1 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    eb10:	909e      	str	r0, [sp, #632]	; 0x278
    eb12:	919d      	str	r1, [sp, #628]	; 0x274
    eb14:	e7ff      	b.n	eb16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x193a>
    eb16:	989e      	ldr	r0, [sp, #632]	; 0x278
    eb18:	f8cd 0870 	str.w	r0, [sp, #2160]	; 0x870
    eb1c:	999d      	ldr	r1, [sp, #628]	; 0x274
    eb1e:	f8cd 1874 	str.w	r1, [sp, #2164]	; 0x874
    eb22:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    eb26:	f2c0 0201 	movt	r2, #1
    eb2a:	6812      	ldr	r2, [r2, #0]
    eb2c:	466b      	mov	r3, sp
    eb2e:	f04f 0c01 	mov.w	ip, #1
    eb32:	f8c3 c008 	str.w	ip, [r3, #8]
    eb36:	605a      	str	r2, [r3, #4]
    eb38:	f8c3 c000 	str.w	ip, [r3]
    eb3c:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    eb40:	2202      	movs	r2, #2
    eb42:	f50d 6307 	add.w	r3, sp, #2160	; 0x870
    eb46:	999f      	ldr	r1, [sp, #636]	; 0x27c
    eb48:	f005 fe6d 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    eb4c:	e7ff      	b.n	eb4e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1972>
    eb4e:	f8dd 184c 	ldr.w	r1, [sp, #2124]	; 0x84c
    eb52:	f24d 70e4 	movw	r0, #55268	; 0xd7e4
    eb56:	f2c0 0001 	movt	r0, #1
    eb5a:	6802      	ldr	r2, [r0, #0]
    eb5c:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    eb60:	f003 fae6 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    eb64:	e7ff      	b.n	eb66 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x198a>
    eb66:	e7ff      	b.n	eb68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x198c>
                self.v[0xf] = self.v[x] & 1;
    eb68:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    eb6c:	280f      	cmp	r0, #15
    eb6e:	f201 87e5 	bhi.w	10b3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3960>
    eb72:	e7ff      	b.n	eb74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1998>
    eb74:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eb78:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eb7c:	1842      	adds	r2, r0, r1
    eb7e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    eb82:	f002 0201 	and.w	r2, r2, #1
    eb86:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shr(1);
    eb8a:	290f      	cmp	r1, #15
    eb8c:	f201 87e0 	bhi.w	10b50 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3974>
    eb90:	e7ff      	b.n	eb92 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x19b6>
    eb92:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eb96:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eb9a:	1842      	adds	r2, r0, r1
    eb9c:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    eba0:	2101      	movs	r1, #1
    eba2:	f005 fec6 	bl	14932 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E>
    eba6:	909c      	str	r0, [sp, #624]	; 0x270
    eba8:	e7ff      	b.n	ebaa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x19ce>
    ebaa:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ebae:	280f      	cmp	r0, #15
    ebb0:	f201 87d8 	bhi.w	10b64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3988>
    ebb4:	e7ff      	b.n	ebb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x19da>
    ebb6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ebba:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ebbe:	1842      	adds	r2, r0, r1
    ebc0:	9b9c      	ldr	r3, [sp, #624]	; 0x270
    ebc2:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    ebc6:	f001 bdd6 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    ebca:	2005      	movs	r0, #5
    ebcc:	f8cd 087c 	str.w	r0, [sp, #2172]	; 0x87c
    ebd0:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    ebd4:	f2c0 0001 	movt	r0, #1
    ebd8:	6801      	ldr	r1, [r0, #0]
    ebda:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    ebde:	f005 ff5d 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ebe2:	909b      	str	r0, [sp, #620]	; 0x26c
    ebe4:	e01f      	b.n	ec26 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1a4a>
    ebe6:	2001      	movs	r0, #1
    ebe8:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    ebec:	e015      	b.n	ec1a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1a3e>
    ebee:	2000      	movs	r0, #0
    ebf0:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    ebf4:	e011      	b.n	ec1a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1a3e>
    ebf6:	2000      	movs	r0, #0
    ebf8:	f88d 0e33 	strb.w	r0, [sp, #3635]	; 0xe33
    ebfc:	f89d 1e33 	ldrb.w	r1, [sp, #3635]	; 0xe33
    ec00:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ec04:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ec08:	f002 fb8d 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ec0c:	f8cd 0e34 	str.w	r0, [sp, #3636]	; 0xe34
    ec10:	f8dd 0e34 	ldr.w	r0, [sp, #3636]	; 0xe34
    ec14:	f8cd 0884 	str.w	r0, [sp, #2180]	; 0x884
    ec18:	e00a      	b.n	ec30 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1a54>
    ec1a:	f89d 0883 	ldrb.w	r0, [sp, #2179]	; 0x883
    ec1e:	07c0      	lsls	r0, r0, #31
    ec20:	2800      	cmp	r0, #0
    ec22:	d112      	bne.n	ec4a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1a6e>
    ec24:	e055      	b.n	ecd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1af6>
    ec26:	989b      	ldr	r0, [sp, #620]	; 0x26c
    ec28:	07c1      	lsls	r1, r0, #31
    ec2a:	2900      	cmp	r1, #0
    ec2c:	d1e3      	bne.n	ebf6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1a1a>
    ec2e:	e7de      	b.n	ebee <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1a12>
    ec30:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    ec34:	f60d 0184 	addw	r1, sp, #2180	; 0x884
    ec38:	f005 ff30 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ec3c:	909a      	str	r0, [sp, #616]	; 0x268
    ec3e:	e7ff      	b.n	ec40 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1a64>
    ec40:	989a      	ldr	r0, [sp, #616]	; 0x268
    ec42:	07c1      	lsls	r1, r0, #31
    ec44:	2900      	cmp	r1, #0
    ec46:	d1ce      	bne.n	ebe6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1a0a>
    ec48:	e7d1      	b.n	ebee <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1a12>
                trace!("[{:04x}] SUBN Vx, Vy", self.pc);
    ec4a:	f24d 7054 	movw	r0, #55124	; 0xd754
    ec4e:	f2c0 0001 	movt	r0, #1
    ec52:	6801      	ldr	r1, [r0, #0]
    ec54:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ec58:	f100 0212 	add.w	r2, r0, #18
    ec5c:	f8cd 28a8 	str.w	r2, [sp, #2216]	; 0x8a8
    ec60:	f8dd 28a8 	ldr.w	r2, [sp, #2216]	; 0x8a8
    ec64:	f8cd 2d2c 	str.w	r2, [sp, #3372]	; 0xd2c
    ec68:	f646 6307 	movw	r3, #28167	; 0x6e07
    ec6c:	f2c0 0301 	movt	r3, #1
    ec70:	4610      	mov	r0, r2
    ec72:	9199      	str	r1, [sp, #612]	; 0x264
    ec74:	4619      	mov	r1, r3
    ec76:	f7fb fc0c 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ec7a:	9098      	str	r0, [sp, #608]	; 0x260
    ec7c:	9197      	str	r1, [sp, #604]	; 0x25c
    ec7e:	e7ff      	b.n	ec80 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1aa4>
    ec80:	9898      	ldr	r0, [sp, #608]	; 0x260
    ec82:	f8cd 08a0 	str.w	r0, [sp, #2208]	; 0x8a0
    ec86:	9997      	ldr	r1, [sp, #604]	; 0x25c
    ec88:	f8cd 18a4 	str.w	r1, [sp, #2212]	; 0x8a4
    ec8c:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    ec90:	f2c0 0201 	movt	r2, #1
    ec94:	6812      	ldr	r2, [r2, #0]
    ec96:	466b      	mov	r3, sp
    ec98:	f04f 0c01 	mov.w	ip, #1
    ec9c:	f8c3 c008 	str.w	ip, [r3, #8]
    eca0:	605a      	str	r2, [r3, #4]
    eca2:	f8c3 c000 	str.w	ip, [r3]
    eca6:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    ecaa:	2202      	movs	r2, #2
    ecac:	f50d 630a 	add.w	r3, sp, #2208	; 0x8a0
    ecb0:	9999      	ldr	r1, [sp, #612]	; 0x264
    ecb2:	f005 fdb8 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ecb6:	e7ff      	b.n	ecb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1adc>
    ecb8:	f8dd 187c 	ldr.w	r1, [sp, #2172]	; 0x87c
    ecbc:	f24d 7074 	movw	r0, #55156	; 0xd774
    ecc0:	f2c0 0001 	movt	r0, #1
    ecc4:	6802      	ldr	r2, [r0, #0]
    ecc6:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    ecca:	f003 fa31 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ecce:	e7ff      	b.n	ecd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1af4>
    ecd0:	e7ff      	b.n	ecd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1af6>
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    ecd2:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    ecd6:	280f      	cmp	r0, #15
    ecd8:	f201 8712 	bhi.w	10b00 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3924>
    ecdc:	e7ff      	b.n	ecde <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1b02>
    ecde:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ece2:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ece6:	1842      	adds	r2, r0, r1
    ece8:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ecec:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    ecf0:	2b0f      	cmp	r3, #15
    ecf2:	9296      	str	r2, [sp, #600]	; 0x258
    ecf4:	f201 870e 	bhi.w	10b14 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3938>
    ecf8:	e7ff      	b.n	ecfa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1b1e>
    ecfa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ecfe:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ed02:	1842      	adds	r2, r0, r1
    ed04:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    ed08:	9896      	ldr	r0, [sp, #600]	; 0x258
    ed0a:	f005 fe61 	bl	149d0 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>
    ed0e:	9095      	str	r0, [sp, #596]	; 0x254
    ed10:	9194      	str	r1, [sp, #592]	; 0x250
    ed12:	e7ff      	b.n	ed14 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1b38>
    ed14:	9895      	ldr	r0, [sp, #596]	; 0x254
    ed16:	f88d 0d32 	strb.w	r0, [sp, #3378]	; 0xd32
    ed1a:	9994      	ldr	r1, [sp, #592]	; 0x250
    ed1c:	f001 0201 	and.w	r2, r1, #1
    ed20:	f88d 2d33 	strb.w	r2, [sp, #3379]	; 0xd33
                self.v[x] = v;
    ed24:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    ed28:	2a0f      	cmp	r2, #15
    ed2a:	f201 86fd 	bhi.w	10b28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x394c>
    ed2e:	e7ff      	b.n	ed30 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1b54>
    ed30:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ed34:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ed38:	1842      	adds	r2, r0, r1
    ed3a:	9b95      	ldr	r3, [sp, #596]	; 0x254
    ed3c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    ed40:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    ed42:	f8dd c250 	ldr.w	ip, [sp, #592]	; 0x250
    ed46:	ea22 020c 	bic.w	r2, r2, ip
    ed4a:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    ed4e:	f001 bd12 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    ed52:	2005      	movs	r0, #5
    ed54:	f8cd 08ac 	str.w	r0, [sp, #2220]	; 0x8ac
    ed58:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    ed5c:	f2c0 0001 	movt	r0, #1
    ed60:	6801      	ldr	r1, [r0, #0]
    ed62:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    ed66:	f005 fe99 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ed6a:	9093      	str	r0, [sp, #588]	; 0x24c
    ed6c:	e01f      	b.n	edae <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1bd2>
    ed6e:	2001      	movs	r0, #1
    ed70:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    ed74:	e015      	b.n	eda2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1bc6>
    ed76:	2000      	movs	r0, #0
    ed78:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    ed7c:	e011      	b.n	eda2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1bc6>
    ed7e:	2000      	movs	r0, #0
    ed80:	f88d 0e3b 	strb.w	r0, [sp, #3643]	; 0xe3b
    ed84:	f89d 1e3b 	ldrb.w	r1, [sp, #3643]	; 0xe3b
    ed88:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ed8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ed90:	f002 fac9 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ed94:	f8cd 0e3c 	str.w	r0, [sp, #3644]	; 0xe3c
    ed98:	f8dd 0e3c 	ldr.w	r0, [sp, #3644]	; 0xe3c
    ed9c:	f8cd 08b4 	str.w	r0, [sp, #2228]	; 0x8b4
    eda0:	e00a      	b.n	edb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1bdc>
    eda2:	f89d 08b3 	ldrb.w	r0, [sp, #2227]	; 0x8b3
    eda6:	07c0      	lsls	r0, r0, #31
    eda8:	2800      	cmp	r0, #0
    edaa:	d112      	bne.n	edd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1bf6>
    edac:	e055      	b.n	ee5a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1c7e>
    edae:	9893      	ldr	r0, [sp, #588]	; 0x24c
    edb0:	07c1      	lsls	r1, r0, #31
    edb2:	2900      	cmp	r1, #0
    edb4:	d1e3      	bne.n	ed7e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1ba2>
    edb6:	e7de      	b.n	ed76 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1b9a>
    edb8:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    edbc:	f60d 01b4 	addw	r1, sp, #2228	; 0x8b4
    edc0:	f005 fe6c 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    edc4:	9092      	str	r0, [sp, #584]	; 0x248
    edc6:	e7ff      	b.n	edc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1bec>
    edc8:	9892      	ldr	r0, [sp, #584]	; 0x248
    edca:	07c1      	lsls	r1, r0, #31
    edcc:	2900      	cmp	r1, #0
    edce:	d1ce      	bne.n	ed6e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1b92>
    edd0:	e7d1      	b.n	ed76 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1b9a>
                trace!("[{:04x}] SHL Vx, Vy", self.pc);
    edd2:	f24d 60e0 	movw	r0, #55008	; 0xd6e0
    edd6:	f2c0 0001 	movt	r0, #1
    edda:	6801      	ldr	r1, [r0, #0]
    eddc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ede0:	f100 0212 	add.w	r2, r0, #18
    ede4:	f8cd 28d8 	str.w	r2, [sp, #2264]	; 0x8d8
    ede8:	f8dd 28d8 	ldr.w	r2, [sp, #2264]	; 0x8d8
    edec:	f8cd 2d28 	str.w	r2, [sp, #3368]	; 0xd28
    edf0:	f646 6307 	movw	r3, #28167	; 0x6e07
    edf4:	f2c0 0301 	movt	r3, #1
    edf8:	4610      	mov	r0, r2
    edfa:	9191      	str	r1, [sp, #580]	; 0x244
    edfc:	4619      	mov	r1, r3
    edfe:	f7fb fb48 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ee02:	9090      	str	r0, [sp, #576]	; 0x240
    ee04:	918f      	str	r1, [sp, #572]	; 0x23c
    ee06:	e7ff      	b.n	ee08 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1c2c>
    ee08:	9890      	ldr	r0, [sp, #576]	; 0x240
    ee0a:	f8cd 08d0 	str.w	r0, [sp, #2256]	; 0x8d0
    ee0e:	998f      	ldr	r1, [sp, #572]	; 0x23c
    ee10:	f8cd 18d4 	str.w	r1, [sp, #2260]	; 0x8d4
    ee14:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    ee18:	f2c0 0201 	movt	r2, #1
    ee1c:	6812      	ldr	r2, [r2, #0]
    ee1e:	466b      	mov	r3, sp
    ee20:	f04f 0c01 	mov.w	ip, #1
    ee24:	f8c3 c008 	str.w	ip, [r3, #8]
    ee28:	605a      	str	r2, [r3, #4]
    ee2a:	f8c3 c000 	str.w	ip, [r3]
    ee2e:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    ee32:	2202      	movs	r2, #2
    ee34:	f50d 630d 	add.w	r3, sp, #2256	; 0x8d0
    ee38:	9991      	ldr	r1, [sp, #580]	; 0x244
    ee3a:	f005 fcf4 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ee3e:	e7ff      	b.n	ee40 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1c64>
    ee40:	f8dd 18ac 	ldr.w	r1, [sp, #2220]	; 0x8ac
    ee44:	f24d 7000 	movw	r0, #55040	; 0xd700
    ee48:	f2c0 0001 	movt	r0, #1
    ee4c:	6802      	ldr	r2, [r0, #0]
    ee4e:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    ee52:	f003 f96d 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ee56:	e7ff      	b.n	ee58 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1c7c>
    ee58:	e7ff      	b.n	ee5a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1c7e>
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    ee5a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ee5e:	280f      	cmp	r0, #15
    ee60:	f201 8630 	bhi.w	10ac4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x38e8>
    ee64:	e7ff      	b.n	ee66 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1c8a>
    ee66:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ee6a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ee6e:	1842      	adds	r2, r0, r1
    ee70:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ee74:	09d2      	lsrs	r2, r2, #7
    ee76:	928e      	str	r2, [sp, #568]	; 0x238
    ee78:	e7ff      	b.n	ee7a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1c9e>
    ee7a:	988e      	ldr	r0, [sp, #568]	; 0x238
    ee7c:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    ee80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shl(1);
    ee84:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    ee88:	2a0f      	cmp	r2, #15
    ee8a:	f201 8625 	bhi.w	10ad8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x38fc>
    ee8e:	e7ff      	b.n	ee90 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1cb4>
    ee90:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ee94:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ee98:	1842      	adds	r2, r0, r1
    ee9a:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    ee9e:	2101      	movs	r1, #1
    eea0:	f005 fd36 	bl	14910 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E>
    eea4:	908d      	str	r0, [sp, #564]	; 0x234
    eea6:	e7ff      	b.n	eea8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1ccc>
    eea8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    eeac:	280f      	cmp	r0, #15
    eeae:	f201 861d 	bhi.w	10aec <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3910>
    eeb2:	e7ff      	b.n	eeb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1cd8>
    eeb4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eeb8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eebc:	1842      	adds	r2, r0, r1
    eebe:	9b8d      	ldr	r3, [sp, #564]	; 0x234
    eec0:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    eec4:	f001 bc57 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    eec8:	2005      	movs	r0, #5
    eeca:	f8cd 08dc 	str.w	r0, [sp, #2268]	; 0x8dc
    eece:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    eed2:	f2c0 0001 	movt	r0, #1
    eed6:	6801      	ldr	r1, [r0, #0]
    eed8:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    eedc:	f005 fdde 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    eee0:	908c      	str	r0, [sp, #560]	; 0x230
    eee2:	e01f      	b.n	ef24 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1d48>
    eee4:	2001      	movs	r0, #1
    eee6:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    eeea:	e015      	b.n	ef18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1d3c>
    eeec:	2000      	movs	r0, #0
    eeee:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    eef2:	e011      	b.n	ef18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1d3c>
    eef4:	2000      	movs	r0, #0
    eef6:	f88d 0e43 	strb.w	r0, [sp, #3651]	; 0xe43
    eefa:	f89d 1e43 	ldrb.w	r1, [sp, #3651]	; 0xe43
    eefe:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ef02:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ef06:	f002 fa0e 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ef0a:	f8cd 0e44 	str.w	r0, [sp, #3652]	; 0xe44
    ef0e:	f8dd 0e44 	ldr.w	r0, [sp, #3652]	; 0xe44
    ef12:	f8cd 08e4 	str.w	r0, [sp, #2276]	; 0x8e4
    ef16:	e00a      	b.n	ef2e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1d52>
    ef18:	f89d 08e3 	ldrb.w	r0, [sp, #2275]	; 0x8e3
    ef1c:	07c0      	lsls	r0, r0, #31
    ef1e:	2800      	cmp	r0, #0
    ef20:	d112      	bne.n	ef48 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1d6c>
    ef22:	e055      	b.n	efd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1df4>
    ef24:	988c      	ldr	r0, [sp, #560]	; 0x230
    ef26:	07c1      	lsls	r1, r0, #31
    ef28:	2900      	cmp	r1, #0
    ef2a:	d1e3      	bne.n	eef4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1d18>
    ef2c:	e7de      	b.n	eeec <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1d10>
    ef2e:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    ef32:	f60d 01e4 	addw	r1, sp, #2276	; 0x8e4
    ef36:	f005 fdb1 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ef3a:	908b      	str	r0, [sp, #556]	; 0x22c
    ef3c:	e7ff      	b.n	ef3e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1d62>
    ef3e:	988b      	ldr	r0, [sp, #556]	; 0x22c
    ef40:	07c1      	lsls	r1, r0, #31
    ef42:	2900      	cmp	r1, #0
    ef44:	d1ce      	bne.n	eee4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1d08>
    ef46:	e7d1      	b.n	eeec <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1d10>
                trace!("[{:04x}] SNE Vx, Vy", self.pc);
    ef48:	f24d 6080 	movw	r0, #54912	; 0xd680
    ef4c:	f2c0 0001 	movt	r0, #1
    ef50:	6801      	ldr	r1, [r0, #0]
    ef52:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ef56:	f100 0212 	add.w	r2, r0, #18
    ef5a:	f8cd 2908 	str.w	r2, [sp, #2312]	; 0x908
    ef5e:	f8dd 2908 	ldr.w	r2, [sp, #2312]	; 0x908
    ef62:	f8cd 2d24 	str.w	r2, [sp, #3364]	; 0xd24
    ef66:	f646 6307 	movw	r3, #28167	; 0x6e07
    ef6a:	f2c0 0301 	movt	r3, #1
    ef6e:	4610      	mov	r0, r2
    ef70:	918a      	str	r1, [sp, #552]	; 0x228
    ef72:	4619      	mov	r1, r3
    ef74:	f7fb fa8d 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ef78:	9089      	str	r0, [sp, #548]	; 0x224
    ef7a:	9188      	str	r1, [sp, #544]	; 0x220
    ef7c:	e7ff      	b.n	ef7e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1da2>
    ef7e:	9889      	ldr	r0, [sp, #548]	; 0x224
    ef80:	f8cd 0900 	str.w	r0, [sp, #2304]	; 0x900
    ef84:	9988      	ldr	r1, [sp, #544]	; 0x220
    ef86:	f8cd 1904 	str.w	r1, [sp, #2308]	; 0x904
    ef8a:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    ef8e:	f2c0 0201 	movt	r2, #1
    ef92:	6812      	ldr	r2, [r2, #0]
    ef94:	466b      	mov	r3, sp
    ef96:	f04f 0c01 	mov.w	ip, #1
    ef9a:	f8c3 c008 	str.w	ip, [r3, #8]
    ef9e:	605a      	str	r2, [r3, #4]
    efa0:	f8c3 c000 	str.w	ip, [r3]
    efa4:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    efa8:	2202      	movs	r2, #2
    efaa:	f50d 6310 	add.w	r3, sp, #2304	; 0x900
    efae:	998a      	ldr	r1, [sp, #552]	; 0x228
    efb0:	f005 fc39 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    efb4:	e7ff      	b.n	efb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1dda>
    efb6:	f8dd 18dc 	ldr.w	r1, [sp, #2268]	; 0x8dc
    efba:	f24d 60a0 	movw	r0, #54944	; 0xd6a0
    efbe:	f2c0 0001 	movt	r0, #1
    efc2:	6802      	ldr	r2, [r0, #0]
    efc4:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    efc8:	f003 f8b2 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    efcc:	e7ff      	b.n	efce <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1df2>
    efce:	e7ff      	b.n	efd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1df4>
                if self.v[x] != self.v[y] {
    efd0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    efd4:	280f      	cmp	r0, #15
    efd6:	f201 8561 	bhi.w	10a9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x38c0>
    efda:	e7ff      	b.n	efdc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1e00>
    efdc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    efe0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    efe4:	1842      	adds	r2, r0, r1
    efe6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    efea:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    efee:	2b0f      	cmp	r3, #15
    eff0:	9287      	str	r2, [sp, #540]	; 0x21c
    eff2:	f201 855d 	bhi.w	10ab0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x38d4>
    eff6:	e7ff      	b.n	eff8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1e1c>
    eff8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    effc:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    f000:	1842      	adds	r2, r0, r1
    f002:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f006:	9b87      	ldr	r3, [sp, #540]	; 0x21c
    f008:	fa5f fc83 	uxtb.w	ip, r3
    f00c:	4594      	cmp	ip, r2
    f00e:	d006      	beq.n	f01e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1e42>
    f010:	e7ff      	b.n	f012 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1e36>
                    self.next();
    f012:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f016:	f001 fee0 	bl	10dda <_ZN8libchip814Chip8$LT$T$GT$4next17h079fcfcda82e796aE>
    f01a:	e7ff      	b.n	f01c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1e40>
                if self.v[x] != self.v[y] {
    f01c:	e7ff      	b.n	f01e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1e42>
        match (
    f01e:	f001 bbaa 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    f022:	2005      	movs	r0, #5
    f024:	f8cd 090c 	str.w	r0, [sp, #2316]	; 0x90c
    f028:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    f02c:	f2c0 0001 	movt	r0, #1
    f030:	6801      	ldr	r1, [r0, #0]
    f032:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    f036:	f005 fd31 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f03a:	9086      	str	r0, [sp, #536]	; 0x218
    f03c:	e01f      	b.n	f07e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1ea2>
    f03e:	2001      	movs	r0, #1
    f040:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    f044:	e015      	b.n	f072 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1e96>
    f046:	2000      	movs	r0, #0
    f048:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    f04c:	e011      	b.n	f072 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1e96>
    f04e:	2000      	movs	r0, #0
    f050:	f88d 0e4b 	strb.w	r0, [sp, #3659]	; 0xe4b
    f054:	f89d 1e4b 	ldrb.w	r1, [sp, #3659]	; 0xe4b
    f058:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f05c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f060:	f002 f961 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f064:	f8cd 0e4c 	str.w	r0, [sp, #3660]	; 0xe4c
    f068:	f8dd 0e4c 	ldr.w	r0, [sp, #3660]	; 0xe4c
    f06c:	f8cd 0914 	str.w	r0, [sp, #2324]	; 0x914
    f070:	e00a      	b.n	f088 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1eac>
    f072:	f89d 0913 	ldrb.w	r0, [sp, #2323]	; 0x913
    f076:	07c0      	lsls	r0, r0, #31
    f078:	2800      	cmp	r0, #0
    f07a:	d112      	bne.n	f0a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1ec6>
    f07c:	e055      	b.n	f12a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1f4e>
    f07e:	9886      	ldr	r0, [sp, #536]	; 0x218
    f080:	07c1      	lsls	r1, r0, #31
    f082:	2900      	cmp	r1, #0
    f084:	d1e3      	bne.n	f04e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1e72>
    f086:	e7de      	b.n	f046 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1e6a>
    f088:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    f08c:	f60d 1114 	addw	r1, sp, #2324	; 0x914
    f090:	f005 fd04 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f094:	9085      	str	r0, [sp, #532]	; 0x214
    f096:	e7ff      	b.n	f098 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1ebc>
    f098:	9885      	ldr	r0, [sp, #532]	; 0x214
    f09a:	07c1      	lsls	r1, r0, #31
    f09c:	2900      	cmp	r1, #0
    f09e:	d1ce      	bne.n	f03e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1e62>
    f0a0:	e7d1      	b.n	f046 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1e6a>
                trace!("[{:04x}] LD I, nnn", self.pc);
    f0a2:	f24d 6040 	movw	r0, #54848	; 0xd640
    f0a6:	f2c0 0001 	movt	r0, #1
    f0aa:	6801      	ldr	r1, [r0, #0]
    f0ac:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f0b0:	f100 0212 	add.w	r2, r0, #18
    f0b4:	f8cd 2938 	str.w	r2, [sp, #2360]	; 0x938
    f0b8:	f8dd 2938 	ldr.w	r2, [sp, #2360]	; 0x938
    f0bc:	f8cd 2d20 	str.w	r2, [sp, #3360]	; 0xd20
    f0c0:	f646 6307 	movw	r3, #28167	; 0x6e07
    f0c4:	f2c0 0301 	movt	r3, #1
    f0c8:	4610      	mov	r0, r2
    f0ca:	9184      	str	r1, [sp, #528]	; 0x210
    f0cc:	4619      	mov	r1, r3
    f0ce:	f7fb f9e0 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f0d2:	9083      	str	r0, [sp, #524]	; 0x20c
    f0d4:	9182      	str	r1, [sp, #520]	; 0x208
    f0d6:	e7ff      	b.n	f0d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1efc>
    f0d8:	9883      	ldr	r0, [sp, #524]	; 0x20c
    f0da:	f8cd 0930 	str.w	r0, [sp, #2352]	; 0x930
    f0de:	9982      	ldr	r1, [sp, #520]	; 0x208
    f0e0:	f8cd 1934 	str.w	r1, [sp, #2356]	; 0x934
    f0e4:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    f0e8:	f2c0 0201 	movt	r2, #1
    f0ec:	6812      	ldr	r2, [r2, #0]
    f0ee:	466b      	mov	r3, sp
    f0f0:	f04f 0c01 	mov.w	ip, #1
    f0f4:	f8c3 c008 	str.w	ip, [r3, #8]
    f0f8:	605a      	str	r2, [r3, #4]
    f0fa:	f8c3 c000 	str.w	ip, [r3]
    f0fe:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    f102:	2202      	movs	r2, #2
    f104:	f50d 6313 	add.w	r3, sp, #2352	; 0x930
    f108:	9984      	ldr	r1, [sp, #528]	; 0x210
    f10a:	f005 fb8c 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f10e:	e7ff      	b.n	f110 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1f34>
    f110:	f8dd 190c 	ldr.w	r1, [sp, #2316]	; 0x90c
    f114:	f24d 6060 	movw	r0, #54880	; 0xd660
    f118:	f2c0 0001 	movt	r0, #1
    f11c:	6802      	ldr	r2, [r0, #0]
    f11e:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    f122:	f003 f805 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f126:	e7ff      	b.n	f128 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1f4c>
    f128:	e7ff      	b.n	f12a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1f4e>
                self.i = nnn;
    f12a:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    f12e:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f132:	8208      	strh	r0, [r1, #16]
        match (
    f134:	f001 bb1f 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    f138:	2005      	movs	r0, #5
    f13a:	f8cd 093c 	str.w	r0, [sp, #2364]	; 0x93c
    f13e:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    f142:	f2c0 0001 	movt	r0, #1
    f146:	6801      	ldr	r1, [r0, #0]
    f148:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    f14c:	f005 fca6 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f150:	9081      	str	r0, [sp, #516]	; 0x204
    f152:	e01f      	b.n	f194 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1fb8>
    f154:	2001      	movs	r0, #1
    f156:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    f15a:	e015      	b.n	f188 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1fac>
    f15c:	2000      	movs	r0, #0
    f15e:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    f162:	e011      	b.n	f188 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1fac>
    f164:	2000      	movs	r0, #0
    f166:	f88d 0e53 	strb.w	r0, [sp, #3667]	; 0xe53
    f16a:	f89d 1e53 	ldrb.w	r1, [sp, #3667]	; 0xe53
    f16e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f172:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f176:	f002 f8d6 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f17a:	f8cd 0e54 	str.w	r0, [sp, #3668]	; 0xe54
    f17e:	f8dd 0e54 	ldr.w	r0, [sp, #3668]	; 0xe54
    f182:	f8cd 0944 	str.w	r0, [sp, #2372]	; 0x944
    f186:	e00a      	b.n	f19e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1fc2>
    f188:	f89d 0943 	ldrb.w	r0, [sp, #2371]	; 0x943
    f18c:	07c0      	lsls	r0, r0, #31
    f18e:	2800      	cmp	r0, #0
    f190:	d112      	bne.n	f1b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1fdc>
    f192:	e055      	b.n	f240 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2064>
    f194:	9881      	ldr	r0, [sp, #516]	; 0x204
    f196:	07c1      	lsls	r1, r0, #31
    f198:	2900      	cmp	r1, #0
    f19a:	d1e3      	bne.n	f164 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1f88>
    f19c:	e7de      	b.n	f15c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1f80>
    f19e:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    f1a2:	f60d 1144 	addw	r1, sp, #2372	; 0x944
    f1a6:	f005 fc79 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f1aa:	9080      	str	r0, [sp, #512]	; 0x200
    f1ac:	e7ff      	b.n	f1ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1fd2>
    f1ae:	9880      	ldr	r0, [sp, #512]	; 0x200
    f1b0:	07c1      	lsls	r1, r0, #31
    f1b2:	2900      	cmp	r1, #0
    f1b4:	d1ce      	bne.n	f154 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1f78>
    f1b6:	e7d1      	b.n	f15c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1f80>
                trace!("[{:04x}] JP V0, nnn", self.pc);
    f1b8:	f24d 6000 	movw	r0, #54784	; 0xd600
    f1bc:	f2c0 0001 	movt	r0, #1
    f1c0:	6801      	ldr	r1, [r0, #0]
    f1c2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f1c6:	f100 0212 	add.w	r2, r0, #18
    f1ca:	f8cd 2968 	str.w	r2, [sp, #2408]	; 0x968
    f1ce:	f8dd 2968 	ldr.w	r2, [sp, #2408]	; 0x968
    f1d2:	f8cd 2d1c 	str.w	r2, [sp, #3356]	; 0xd1c
    f1d6:	f646 6307 	movw	r3, #28167	; 0x6e07
    f1da:	f2c0 0301 	movt	r3, #1
    f1de:	4610      	mov	r0, r2
    f1e0:	917f      	str	r1, [sp, #508]	; 0x1fc
    f1e2:	4619      	mov	r1, r3
    f1e4:	f7fb f955 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f1e8:	907e      	str	r0, [sp, #504]	; 0x1f8
    f1ea:	917d      	str	r1, [sp, #500]	; 0x1f4
    f1ec:	e7ff      	b.n	f1ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2012>
    f1ee:	987e      	ldr	r0, [sp, #504]	; 0x1f8
    f1f0:	f8cd 0960 	str.w	r0, [sp, #2400]	; 0x960
    f1f4:	997d      	ldr	r1, [sp, #500]	; 0x1f4
    f1f6:	f8cd 1964 	str.w	r1, [sp, #2404]	; 0x964
    f1fa:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    f1fe:	f2c0 0201 	movt	r2, #1
    f202:	6812      	ldr	r2, [r2, #0]
    f204:	466b      	mov	r3, sp
    f206:	f04f 0c01 	mov.w	ip, #1
    f20a:	f8c3 c008 	str.w	ip, [r3, #8]
    f20e:	605a      	str	r2, [r3, #4]
    f210:	f8c3 c000 	str.w	ip, [r3]
    f214:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    f218:	2202      	movs	r2, #2
    f21a:	f50d 6316 	add.w	r3, sp, #2400	; 0x960
    f21e:	997f      	ldr	r1, [sp, #508]	; 0x1fc
    f220:	f005 fb01 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f224:	e7ff      	b.n	f226 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x204a>
    f226:	f8dd 193c 	ldr.w	r1, [sp, #2364]	; 0x93c
    f22a:	f24d 6020 	movw	r0, #54816	; 0xd620
    f22e:	f2c0 0001 	movt	r0, #1
    f232:	6802      	ldr	r2, [r0, #0]
    f234:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    f238:	f002 ff7a 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f23c:	e7ff      	b.n	f23e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2062>
    f23e:	e7ff      	b.n	f240 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2064>
                self.jump(nnn.wrapping_add(self.v[0].into()).wrapping_sub(2));
    f240:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f244:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    f248:	f002 f860 	bl	1130c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
    f24c:	907c      	str	r0, [sp, #496]	; 0x1f0
    f24e:	e7ff      	b.n	f250 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2074>
    f250:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    f254:	997c      	ldr	r1, [sp, #496]	; 0x1f0
    f256:	f005 fbe7 	bl	14a28 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
    f25a:	907b      	str	r0, [sp, #492]	; 0x1ec
    f25c:	e7ff      	b.n	f25e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2082>
    f25e:	2102      	movs	r1, #2
    f260:	987b      	ldr	r0, [sp, #492]	; 0x1ec
    f262:	f005 fbf2 	bl	14a4a <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    f266:	907a      	str	r0, [sp, #488]	; 0x1e8
    f268:	e7ff      	b.n	f26a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x208e>
    f26a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f26e:	997a      	ldr	r1, [sp, #488]	; 0x1e8
    f270:	f001 fd70 	bl	10d54 <_ZN8libchip814Chip8$LT$T$GT$4jump17h98fcf36ccb52be45E>
    f274:	e7ff      	b.n	f276 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x209a>
        match (
    f276:	f001 ba7e 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    f27a:	2005      	movs	r0, #5
    f27c:	f8cd 096c 	str.w	r0, [sp, #2412]	; 0x96c
    f280:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    f284:	f2c0 0001 	movt	r0, #1
    f288:	6801      	ldr	r1, [r0, #0]
    f28a:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    f28e:	f005 fc05 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f292:	9079      	str	r0, [sp, #484]	; 0x1e4
    f294:	e01f      	b.n	f2d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x20fa>
    f296:	2001      	movs	r0, #1
    f298:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    f29c:	e015      	b.n	f2ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x20ee>
    f29e:	2000      	movs	r0, #0
    f2a0:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    f2a4:	e011      	b.n	f2ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x20ee>
    f2a6:	2000      	movs	r0, #0
    f2a8:	f88d 0e5b 	strb.w	r0, [sp, #3675]	; 0xe5b
    f2ac:	f89d 1e5b 	ldrb.w	r1, [sp, #3675]	; 0xe5b
    f2b0:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f2b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f2b8:	f002 f835 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f2bc:	f8cd 0e5c 	str.w	r0, [sp, #3676]	; 0xe5c
    f2c0:	f8dd 0e5c 	ldr.w	r0, [sp, #3676]	; 0xe5c
    f2c4:	f8cd 0974 	str.w	r0, [sp, #2420]	; 0x974
    f2c8:	e00a      	b.n	f2e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2104>
    f2ca:	f89d 0973 	ldrb.w	r0, [sp, #2419]	; 0x973
    f2ce:	07c0      	lsls	r0, r0, #31
    f2d0:	2800      	cmp	r0, #0
    f2d2:	d112      	bne.n	f2fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x211e>
    f2d4:	e055      	b.n	f382 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x21a6>
    f2d6:	9879      	ldr	r0, [sp, #484]	; 0x1e4
    f2d8:	07c1      	lsls	r1, r0, #31
    f2da:	2900      	cmp	r1, #0
    f2dc:	d1e3      	bne.n	f2a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x20ca>
    f2de:	e7de      	b.n	f29e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x20c2>
    f2e0:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    f2e4:	f60d 1174 	addw	r1, sp, #2420	; 0x974
    f2e8:	f005 fbd8 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f2ec:	9078      	str	r0, [sp, #480]	; 0x1e0
    f2ee:	e7ff      	b.n	f2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2114>
    f2f0:	9878      	ldr	r0, [sp, #480]	; 0x1e0
    f2f2:	07c1      	lsls	r1, r0, #31
    f2f4:	2900      	cmp	r1, #0
    f2f6:	d1ce      	bne.n	f296 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x20ba>
    f2f8:	e7d1      	b.n	f29e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x20c2>
                trace!("[{:04x}] RND Vx, kk", self.pc);
    f2fa:	f24d 50b0 	movw	r0, #54704	; 0xd5b0
    f2fe:	f2c0 0001 	movt	r0, #1
    f302:	6801      	ldr	r1, [r0, #0]
    f304:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f308:	f100 0212 	add.w	r2, r0, #18
    f30c:	f8cd 2998 	str.w	r2, [sp, #2456]	; 0x998
    f310:	f8dd 2998 	ldr.w	r2, [sp, #2456]	; 0x998
    f314:	f8cd 2d18 	str.w	r2, [sp, #3352]	; 0xd18
    f318:	f646 6307 	movw	r3, #28167	; 0x6e07
    f31c:	f2c0 0301 	movt	r3, #1
    f320:	4610      	mov	r0, r2
    f322:	9177      	str	r1, [sp, #476]	; 0x1dc
    f324:	4619      	mov	r1, r3
    f326:	f7fb f8b4 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f32a:	9076      	str	r0, [sp, #472]	; 0x1d8
    f32c:	9175      	str	r1, [sp, #468]	; 0x1d4
    f32e:	e7ff      	b.n	f330 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2154>
    f330:	9876      	ldr	r0, [sp, #472]	; 0x1d8
    f332:	f8cd 0990 	str.w	r0, [sp, #2448]	; 0x990
    f336:	9975      	ldr	r1, [sp, #468]	; 0x1d4
    f338:	f8cd 1994 	str.w	r1, [sp, #2452]	; 0x994
    f33c:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    f340:	f2c0 0201 	movt	r2, #1
    f344:	6812      	ldr	r2, [r2, #0]
    f346:	466b      	mov	r3, sp
    f348:	f04f 0c01 	mov.w	ip, #1
    f34c:	f8c3 c008 	str.w	ip, [r3, #8]
    f350:	605a      	str	r2, [r3, #4]
    f352:	f8c3 c000 	str.w	ip, [r3]
    f356:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    f35a:	2202      	movs	r2, #2
    f35c:	f50d 6319 	add.w	r3, sp, #2448	; 0x990
    f360:	9977      	ldr	r1, [sp, #476]	; 0x1dc
    f362:	f005 fa60 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f366:	e7ff      	b.n	f368 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x218c>
    f368:	f8dd 196c 	ldr.w	r1, [sp, #2412]	; 0x96c
    f36c:	f24d 50d0 	movw	r0, #54736	; 0xd5d0
    f370:	f2c0 0001 	movt	r0, #1
    f374:	6802      	ldr	r2, [r0, #0]
    f376:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    f37a:	f002 fed9 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f37e:	e7ff      	b.n	f380 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x21a4>
    f380:	e7ff      	b.n	f382 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x21a6>
    f382:	f241 0048 	movw	r0, #4168	; 0x1048
                self.v[x] = self.hw.rand() & kk;
    f386:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f38a:	4408      	add	r0, r1
    f38c:	f7fc fafb 	bl	b986 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h254831b02f23b02eE>
    f390:	9074      	str	r0, [sp, #464]	; 0x1d0
    f392:	e7ff      	b.n	f394 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x21b8>
    f394:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    f398:	280f      	cmp	r0, #15
    f39a:	f201 8375 	bhi.w	10a88 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x38ac>
    f39e:	e7ff      	b.n	f3a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x21c4>
    f3a0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f3a4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f3a8:	1842      	adds	r2, r0, r1
    f3aa:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
    f3ac:	f8dd c45c 	ldr.w	ip, [sp, #1116]	; 0x45c
    f3b0:	ea03 0e0c 	and.w	lr, r3, ip
    f3b4:	f882 e034 	strb.w	lr, [r2, #52]	; 0x34
        match (
    f3b8:	f001 b9dd 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    f3bc:	2005      	movs	r0, #5
    f3be:	f8cd 099c 	str.w	r0, [sp, #2460]	; 0x99c
    f3c2:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    f3c6:	f2c0 0001 	movt	r0, #1
    f3ca:	6801      	ldr	r1, [r0, #0]
    f3cc:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    f3d0:	f005 fb64 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f3d4:	9073      	str	r0, [sp, #460]	; 0x1cc
    f3d6:	e01f      	b.n	f418 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x223c>
    f3d8:	2001      	movs	r0, #1
    f3da:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    f3de:	e015      	b.n	f40c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2230>
    f3e0:	2000      	movs	r0, #0
    f3e2:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    f3e6:	e011      	b.n	f40c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2230>
    f3e8:	2000      	movs	r0, #0
    f3ea:	f88d 0e63 	strb.w	r0, [sp, #3683]	; 0xe63
    f3ee:	f89d 1e63 	ldrb.w	r1, [sp, #3683]	; 0xe63
    f3f2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f3f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f3fa:	f001 ff94 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f3fe:	f8cd 0e64 	str.w	r0, [sp, #3684]	; 0xe64
    f402:	f8dd 0e64 	ldr.w	r0, [sp, #3684]	; 0xe64
    f406:	f8cd 09a4 	str.w	r0, [sp, #2468]	; 0x9a4
    f40a:	e00a      	b.n	f422 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2246>
    f40c:	f89d 09a3 	ldrb.w	r0, [sp, #2467]	; 0x9a3
    f410:	07c0      	lsls	r0, r0, #31
    f412:	2800      	cmp	r0, #0
    f414:	d112      	bne.n	f43c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2260>
    f416:	e055      	b.n	f4c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22e8>
    f418:	9873      	ldr	r0, [sp, #460]	; 0x1cc
    f41a:	07c1      	lsls	r1, r0, #31
    f41c:	2900      	cmp	r1, #0
    f41e:	d1e3      	bne.n	f3e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x220c>
    f420:	e7de      	b.n	f3e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2204>
    f422:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    f426:	f60d 11a4 	addw	r1, sp, #2468	; 0x9a4
    f42a:	f005 fb37 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f42e:	9072      	str	r0, [sp, #456]	; 0x1c8
    f430:	e7ff      	b.n	f432 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2256>
    f432:	9872      	ldr	r0, [sp, #456]	; 0x1c8
    f434:	07c1      	lsls	r1, r0, #31
    f436:	2900      	cmp	r1, #0
    f438:	d1ce      	bne.n	f3d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x21fc>
    f43a:	e7d1      	b.n	f3e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2204>
                trace!("[{:04x}] DRW Vx, Vy, n", self.pc);
    f43c:	f24d 4054 	movw	r0, #54356	; 0xd454
    f440:	f2c0 0001 	movt	r0, #1
    f444:	6801      	ldr	r1, [r0, #0]
    f446:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f44a:	f100 0212 	add.w	r2, r0, #18
    f44e:	f8cd 29c8 	str.w	r2, [sp, #2504]	; 0x9c8
    f452:	f8dd 29c8 	ldr.w	r2, [sp, #2504]	; 0x9c8
    f456:	f8cd 2cdc 	str.w	r2, [sp, #3292]	; 0xcdc
    f45a:	f646 6307 	movw	r3, #28167	; 0x6e07
    f45e:	f2c0 0301 	movt	r3, #1
    f462:	4610      	mov	r0, r2
    f464:	9171      	str	r1, [sp, #452]	; 0x1c4
    f466:	4619      	mov	r1, r3
    f468:	f7fb f813 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f46c:	9070      	str	r0, [sp, #448]	; 0x1c0
    f46e:	916f      	str	r1, [sp, #444]	; 0x1bc
    f470:	e7ff      	b.n	f472 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2296>
    f472:	9870      	ldr	r0, [sp, #448]	; 0x1c0
    f474:	f8cd 09c0 	str.w	r0, [sp, #2496]	; 0x9c0
    f478:	996f      	ldr	r1, [sp, #444]	; 0x1bc
    f47a:	f8cd 19c4 	str.w	r1, [sp, #2500]	; 0x9c4
    f47e:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    f482:	f2c0 0201 	movt	r2, #1
    f486:	6812      	ldr	r2, [r2, #0]
    f488:	466b      	mov	r3, sp
    f48a:	f04f 0c01 	mov.w	ip, #1
    f48e:	f8c3 c008 	str.w	ip, [r3, #8]
    f492:	605a      	str	r2, [r3, #4]
    f494:	f8c3 c000 	str.w	ip, [r3]
    f498:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    f49c:	2202      	movs	r2, #2
    f49e:	f50d 631c 	add.w	r3, sp, #2496	; 0x9c0
    f4a2:	9971      	ldr	r1, [sp, #452]	; 0x1c4
    f4a4:	f005 f9bf 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f4a8:	e7ff      	b.n	f4aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22ce>
    f4aa:	f8dd 199c 	ldr.w	r1, [sp, #2460]	; 0x99c
    f4ae:	f24d 4074 	movw	r0, #54388	; 0xd474
    f4b2:	f2c0 0001 	movt	r0, #1
    f4b6:	6802      	ldr	r2, [r0, #0]
    f4b8:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    f4bc:	f002 fe38 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f4c0:	e7ff      	b.n	f4c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22e6>
    f4c2:	e7ff      	b.n	f4c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22e8>
                let basex = self.v[x] as usize;
    f4c4:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    f4c8:	280f      	cmp	r0, #15
    f4ca:	f201 826b 	bhi.w	109a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x37c8>
    f4ce:	e7ff      	b.n	f4d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22f4>
    f4d0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f4d4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f4d8:	1842      	adds	r2, r0, r1
    f4da:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f4de:	4613      	mov	r3, r2
    f4e0:	f8cd 2ce0 	str.w	r2, [sp, #3296]	; 0xce0
                let basey = self.v[y] as usize;
    f4e4:	f8dd 2460 	ldr.w	r2, [sp, #1120]	; 0x460
    f4e8:	2a0f      	cmp	r2, #15
    f4ea:	936e      	str	r3, [sp, #440]	; 0x1b8
    f4ec:	f201 8264 	bhi.w	109b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x37dc>
    f4f0:	e7ff      	b.n	f4f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2316>
    f4f2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f4f6:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    f4fa:	1842      	adds	r2, r0, r1
    f4fc:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f500:	4613      	mov	r3, r2
    f502:	f8cd 2ce4 	str.w	r2, [sp, #3300]	; 0xce4
    f506:	f241 0248 	movw	r2, #4168	; 0x1048
                let (w, h) = self.hw.vram_size();
    f50a:	4410      	add	r0, r2
    f50c:	936d      	str	r3, [sp, #436]	; 0x1b4
    f50e:	f7fc fc1d 	bl	bd4c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17h3eb92f330a1e13e5E>
    f512:	906c      	str	r0, [sp, #432]	; 0x1b0
    f514:	916b      	str	r1, [sp, #428]	; 0x1ac
    f516:	e7ff      	b.n	f518 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x233c>
    f518:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    f51a:	f8cd 0ce8 	str.w	r0, [sp, #3304]	; 0xce8
    f51e:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    f520:	f8cd 1cec 	str.w	r1, [sp, #3308]	; 0xcec
    f524:	2200      	movs	r2, #0
                self.v[0xf] = 0;
    f526:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    f52a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                for y in 0..n {
    f52e:	f8cd 29cc 	str.w	r2, [sp, #2508]	; 0x9cc
    f532:	f8dd 2470 	ldr.w	r2, [sp, #1136]	; 0x470
    f536:	f8cd 29d0 	str.w	r2, [sp, #2512]	; 0x9d0
    f53a:	f8dd 09cc 	ldr.w	r0, [sp, #2508]	; 0x9cc
    f53e:	f8dd 19d0 	ldr.w	r1, [sp, #2512]	; 0x9d0
    f542:	f002 fb82 	bl	11c4a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    f546:	906a      	str	r0, [sp, #424]	; 0x1a8
    f548:	9169      	str	r1, [sp, #420]	; 0x1a4
    f54a:	e7ff      	b.n	f54c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2370>
    f54c:	986a      	ldr	r0, [sp, #424]	; 0x1a8
    f54e:	f8cd 09d4 	str.w	r0, [sp, #2516]	; 0x9d4
    f552:	9969      	ldr	r1, [sp, #420]	; 0x1a4
    f554:	f8cd 19d8 	str.w	r1, [sp, #2520]	; 0x9d8
    f558:	e7ff      	b.n	f55a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x237e>
    f55a:	f60d 10d4 	addw	r0, sp, #2516	; 0x9d4
    f55e:	f002 fae9 	bl	11b34 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f562:	f8cd 19e0 	str.w	r1, [sp, #2528]	; 0x9e0
    f566:	f8cd 09dc 	str.w	r0, [sp, #2524]	; 0x9dc
    f56a:	e7ff      	b.n	f56c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2390>
    f56c:	f8dd 09dc 	ldr.w	r0, [sp, #2524]	; 0x9dc
    f570:	2800      	cmp	r0, #0
    f572:	d001      	beq.n	f578 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x239c>
    f574:	e7ff      	b.n	f576 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x239a>
    f576:	e002      	b.n	f57e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x23a2>
        match (
    f578:	f001 b8fd 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
                for y in 0..n {
    f57c:	defe      	udf	#254	; 0xfe
    f57e:	f8dd 09e0 	ldr.w	r0, [sp, #2528]	; 0x9e0
    f582:	f8cd 0cf0 	str.w	r0, [sp, #3312]	; 0xcf0
    f586:	f8cd 0cf4 	str.w	r0, [sp, #3316]	; 0xcf4
    f58a:	f8cd 0cf8 	str.w	r0, [sp, #3320]	; 0xcf8
                    let b = self.mem[self.i as usize + y];
    f58e:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f592:	8a0a      	ldrh	r2, [r1, #16]
    f594:	1813      	adds	r3, r2, r0
    f596:	469c      	mov	ip, r3
    f598:	4293      	cmp	r3, r2
    f59a:	9068      	str	r0, [sp, #416]	; 0x1a0
    f59c:	f8cd c19c 	str.w	ip, [sp, #412]	; 0x19c
    f5a0:	f0c1 8214 	bcc.w	109cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x37f0>
    f5a4:	e7ff      	b.n	f5a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x23ca>
    f5a6:	2000      	movs	r0, #0
    f5a8:	9967      	ldr	r1, [sp, #412]	; 0x19c
    f5aa:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    f5ae:	f041 8219 	bne.w	109e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3808>
    f5b2:	e7ff      	b.n	f5b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x23d8>
    f5b4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f5b8:	9967      	ldr	r1, [sp, #412]	; 0x19c
    f5ba:	1842      	adds	r2, r0, r1
    f5bc:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    f5c0:	4613      	mov	r3, r2
    f5c2:	f88d 2cff 	strb.w	r2, [sp, #3327]	; 0xcff
                    let vramy = (y + basey) % h;
    f5c6:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
    f5c8:	f8dd c1b4 	ldr.w	ip, [sp, #436]	; 0x1b4
    f5cc:	eb02 0e0c 	add.w	lr, r2, ip
    f5d0:	4674      	mov	r4, lr
    f5d2:	4596      	cmp	lr, r2
    f5d4:	9366      	str	r3, [sp, #408]	; 0x198
    f5d6:	9465      	str	r4, [sp, #404]	; 0x194
    f5d8:	f0c1 820e 	bcc.w	109f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x381c>
    f5dc:	e7ff      	b.n	f5de <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2402>
    f5de:	986b      	ldr	r0, [sp, #428]	; 0x1ac
    f5e0:	2800      	cmp	r0, #0
    f5e2:	f001 8215 	beq.w	10a10 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3834>
    f5e6:	e7ff      	b.n	f5e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x240c>
    f5e8:	9865      	ldr	r0, [sp, #404]	; 0x194
    f5ea:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    f5ec:	fbb0 f2f1 	udiv	r2, r0, r1
    f5f0:	fb02 0211 	mls	r2, r2, r1, r0
    f5f4:	4613      	mov	r3, r2
    f5f6:	f8cd 2d00 	str.w	r2, [sp, #3328]	; 0xd00
    f5fa:	2200      	movs	r2, #0
                    for x in 0..8 {
    f5fc:	f8cd 29e4 	str.w	r2, [sp, #2532]	; 0x9e4
    f600:	2208      	movs	r2, #8
    f602:	f8cd 29e8 	str.w	r2, [sp, #2536]	; 0x9e8
    f606:	f8dd 09e4 	ldr.w	r0, [sp, #2532]	; 0x9e4
    f60a:	f8dd 19e8 	ldr.w	r1, [sp, #2536]	; 0x9e8
    f60e:	9364      	str	r3, [sp, #400]	; 0x190
    f610:	f002 fb1b 	bl	11c4a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    f614:	9063      	str	r0, [sp, #396]	; 0x18c
    f616:	9162      	str	r1, [sp, #392]	; 0x188
    f618:	e7ff      	b.n	f61a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x243e>
    f61a:	9863      	ldr	r0, [sp, #396]	; 0x18c
    f61c:	f8cd 09ec 	str.w	r0, [sp, #2540]	; 0x9ec
    f620:	9962      	ldr	r1, [sp, #392]	; 0x188
    f622:	f8cd 19f0 	str.w	r1, [sp, #2544]	; 0x9f0
    f626:	e7ff      	b.n	f628 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x244c>
    f628:	f60d 10ec 	addw	r0, sp, #2540	; 0x9ec
    f62c:	f002 fa82 	bl	11b34 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f630:	f8cd 19f8 	str.w	r1, [sp, #2552]	; 0x9f8
    f634:	f8cd 09f4 	str.w	r0, [sp, #2548]	; 0x9f4
    f638:	e7ff      	b.n	f63a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x245e>
    f63a:	f8dd 09f4 	ldr.w	r0, [sp, #2548]	; 0x9f4
    f63e:	2800      	cmp	r0, #0
    f640:	d001      	beq.n	f646 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x246a>
    f642:	e7ff      	b.n	f644 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2468>
    f644:	e001      	b.n	f64a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x246e>
                for y in 0..n {
    f646:	e788      	b.n	f55a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x237e>
                    for x in 0..8 {
    f648:	defe      	udf	#254	; 0xfe
    f64a:	f8dd 09f8 	ldr.w	r0, [sp, #2552]	; 0x9f8
    f64e:	f8cd 0d04 	str.w	r0, [sp, #3332]	; 0xd04
    f652:	f8cd 0d08 	str.w	r0, [sp, #3336]	; 0xd08
    f656:	f8cd 0d0c 	str.w	r0, [sp, #3340]	; 0xd0c
                        let vramx = (x + basex) % w;
    f65a:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    f65c:	1842      	adds	r2, r0, r1
    f65e:	4613      	mov	r3, r2
    f660:	4282      	cmp	r2, r0
    f662:	9061      	str	r0, [sp, #388]	; 0x184
    f664:	9360      	str	r3, [sp, #384]	; 0x180
    f666:	f0c1 81df 	bcc.w	10a28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x384c>
    f66a:	e7ff      	b.n	f66c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2490>
    f66c:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    f66e:	2800      	cmp	r0, #0
    f670:	f001 81e6 	beq.w	10a40 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3864>
    f674:	e7ff      	b.n	f676 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x249a>
    f676:	9860      	ldr	r0, [sp, #384]	; 0x180
    f678:	996c      	ldr	r1, [sp, #432]	; 0x1b0
    f67a:	fbb0 f2f1 	udiv	r2, r0, r1
    f67e:	fb02 0211 	mls	r2, r2, r1, r0
    f682:	4613      	mov	r3, r2
    f684:	f8cd 2d10 	str.w	r2, [sp, #3344]	; 0xd10
                        let src = (b & 1 << (7 - x)) > 0;
    f688:	9a61      	ldr	r2, [sp, #388]	; 0x184
    f68a:	f1c2 0c07 	rsb	ip, r2, #7
    f68e:	f04f 0e07 	mov.w	lr, #7
    f692:	4596      	cmp	lr, r2
    f694:	935f      	str	r3, [sp, #380]	; 0x17c
    f696:	f8cd c178 	str.w	ip, [sp, #376]	; 0x178
    f69a:	f0c1 81dd 	bcc.w	10a58 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x387c>
    f69e:	e7ff      	b.n	f6a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x24c4>
    f6a0:	985e      	ldr	r0, [sp, #376]	; 0x178
    f6a2:	f000 0107 	and.w	r1, r0, #7
    f6a6:	2201      	movs	r2, #1
    f6a8:	fa02 f101 	lsl.w	r1, r2, r1
    f6ac:	08c2      	lsrs	r2, r0, #3
    f6ae:	2a00      	cmp	r2, #0
    f6b0:	915d      	str	r1, [sp, #372]	; 0x174
    f6b2:	f041 81dd 	bne.w	10a70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3894>
    f6b6:	e7ff      	b.n	f6b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x24dc>
    f6b8:	9866      	ldr	r0, [sp, #408]	; 0x198
    f6ba:	995d      	ldr	r1, [sp, #372]	; 0x174
    f6bc:	ea00 0201 	and.w	r2, r0, r1
    f6c0:	b2d2      	uxtb	r2, r2
    f6c2:	2a00      	cmp	r2, #0
    f6c4:	bf18      	it	ne
    f6c6:	2201      	movne	r2, #1
    f6c8:	4613      	mov	r3, r2
    f6ca:	f88d 2d16 	strb.w	r2, [sp, #3350]	; 0xd16
    f6ce:	f241 0248 	movw	r2, #4168	; 0x1048
                        let dst = self.hw.vram_get(vramx, vramy);
    f6d2:	f8dd c490 	ldr.w	ip, [sp, #1168]	; 0x490
    f6d6:	eb0c 0002 	add.w	r0, ip, r2
    f6da:	995f      	ldr	r1, [sp, #380]	; 0x17c
    f6dc:	9a64      	ldr	r2, [sp, #400]	; 0x190
    f6de:	935c      	str	r3, [sp, #368]	; 0x170
    f6e0:	f7fc fa7d 	bl	bbde <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E>
    f6e4:	4601      	mov	r1, r0
    f6e6:	f88d 0d17 	strb.w	r0, [sp, #3351]	; 0xd17
    f6ea:	915b      	str	r1, [sp, #364]	; 0x16c
    f6ec:	e7ff      	b.n	f6ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2512>
                        self.v[0xf] |= (src && dst) as u8;
    f6ee:	985c      	ldr	r0, [sp, #368]	; 0x170
    f6f0:	07c1      	lsls	r1, r0, #31
    f6f2:	2900      	cmp	r1, #0
    f6f4:	d108      	bne.n	f708 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x252c>
    f6f6:	e003      	b.n	f700 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2524>
    f6f8:	2001      	movs	r0, #1
    f6fa:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    f6fe:	e008      	b.n	f712 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2536>
    f700:	2000      	movs	r0, #0
    f702:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    f706:	e004      	b.n	f712 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2536>
    f708:	985b      	ldr	r0, [sp, #364]	; 0x16c
    f70a:	07c1      	lsls	r1, r0, #31
    f70c:	2900      	cmp	r1, #0
    f70e:	d1f3      	bne.n	f6f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x251c>
    f710:	e7f6      	b.n	f700 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2524>
    f712:	f89d 09ff 	ldrb.w	r0, [sp, #2559]	; 0x9ff
    f716:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f71a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    f71e:	4310      	orrs	r0, r2
    f720:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    f724:	f241 0048 	movw	r0, #4168	; 0x1048
                        self.hw.vram_set(vramx, vramy, src ^ dst);
    f728:	4408      	add	r0, r1
    f72a:	9a5c      	ldr	r2, [sp, #368]	; 0x170
    f72c:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    f72e:	ea82 0c03 	eor.w	ip, r2, r3
    f732:	f00c 0301 	and.w	r3, ip, #1
    f736:	995f      	ldr	r1, [sp, #380]	; 0x17c
    f738:	9a64      	ldr	r2, [sp, #400]	; 0x190
    f73a:	f7fc f94a 	bl	b9d2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E>
    f73e:	e7ff      	b.n	f740 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2564>
                    for x in 0..8 {
    f740:	e772      	b.n	f628 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x244c>
    f742:	2005      	movs	r0, #5
    f744:	f8cd 0a00 	str.w	r0, [sp, #2560]	; 0xa00
    f748:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    f74c:	f2c0 0001 	movt	r0, #1
    f750:	6801      	ldr	r1, [r0, #0]
    f752:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    f756:	f005 f9a1 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f75a:	905a      	str	r0, [sp, #360]	; 0x168
    f75c:	e01f      	b.n	f79e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x25c2>
    f75e:	2001      	movs	r0, #1
    f760:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    f764:	e015      	b.n	f792 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x25b6>
    f766:	2000      	movs	r0, #0
    f768:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    f76c:	e011      	b.n	f792 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x25b6>
    f76e:	2000      	movs	r0, #0
    f770:	f88d 0e6b 	strb.w	r0, [sp, #3691]	; 0xe6b
    f774:	f89d 1e6b 	ldrb.w	r1, [sp, #3691]	; 0xe6b
    f778:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f77c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f780:	f001 fdd1 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f784:	f8cd 0e6c 	str.w	r0, [sp, #3692]	; 0xe6c
    f788:	f8dd 0e6c 	ldr.w	r0, [sp, #3692]	; 0xe6c
    f78c:	f8cd 0a08 	str.w	r0, [sp, #2568]	; 0xa08
    f790:	e00a      	b.n	f7a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x25cc>
    f792:	f89d 0a07 	ldrb.w	r0, [sp, #2567]	; 0xa07
    f796:	07c0      	lsls	r0, r0, #31
    f798:	2800      	cmp	r0, #0
    f79a:	d112      	bne.n	f7c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x25e6>
    f79c:	e055      	b.n	f84a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x266e>
    f79e:	985a      	ldr	r0, [sp, #360]	; 0x168
    f7a0:	07c1      	lsls	r1, r0, #31
    f7a2:	2900      	cmp	r1, #0
    f7a4:	d1e3      	bne.n	f76e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2592>
    f7a6:	e7de      	b.n	f766 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x258a>
    f7a8:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    f7ac:	f60d 2108 	addw	r1, sp, #2568	; 0xa08
    f7b0:	f005 f974 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f7b4:	9059      	str	r0, [sp, #356]	; 0x164
    f7b6:	e7ff      	b.n	f7b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x25dc>
    f7b8:	9859      	ldr	r0, [sp, #356]	; 0x164
    f7ba:	07c1      	lsls	r1, r0, #31
    f7bc:	2900      	cmp	r1, #0
    f7be:	d1ce      	bne.n	f75e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2582>
    f7c0:	e7d1      	b.n	f766 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x258a>
                trace!("[{:04x}] SKP Vx", self.pc);
    f7c2:	f24d 4000 	movw	r0, #54272	; 0xd400
    f7c6:	f2c0 0001 	movt	r0, #1
    f7ca:	6801      	ldr	r1, [r0, #0]
    f7cc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f7d0:	f100 0212 	add.w	r2, r0, #18
    f7d4:	f8cd 2a2c 	str.w	r2, [sp, #2604]	; 0xa2c
    f7d8:	f8dd 2a2c 	ldr.w	r2, [sp, #2604]	; 0xa2c
    f7dc:	f8cd 2cd8 	str.w	r2, [sp, #3288]	; 0xcd8
    f7e0:	f646 6307 	movw	r3, #28167	; 0x6e07
    f7e4:	f2c0 0301 	movt	r3, #1
    f7e8:	4610      	mov	r0, r2
    f7ea:	9158      	str	r1, [sp, #352]	; 0x160
    f7ec:	4619      	mov	r1, r3
    f7ee:	f7fa fe50 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f7f2:	9057      	str	r0, [sp, #348]	; 0x15c
    f7f4:	9156      	str	r1, [sp, #344]	; 0x158
    f7f6:	e7ff      	b.n	f7f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x261c>
    f7f8:	9857      	ldr	r0, [sp, #348]	; 0x15c
    f7fa:	f8cd 0a24 	str.w	r0, [sp, #2596]	; 0xa24
    f7fe:	9956      	ldr	r1, [sp, #344]	; 0x158
    f800:	f8cd 1a28 	str.w	r1, [sp, #2600]	; 0xa28
    f804:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    f808:	f2c0 0201 	movt	r2, #1
    f80c:	6812      	ldr	r2, [r2, #0]
    f80e:	466b      	mov	r3, sp
    f810:	f04f 0c01 	mov.w	ip, #1
    f814:	f8c3 c008 	str.w	ip, [r3, #8]
    f818:	605a      	str	r2, [r3, #4]
    f81a:	f8c3 c000 	str.w	ip, [r3]
    f81e:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    f822:	2202      	movs	r2, #2
    f824:	f60d 2324 	addw	r3, sp, #2596	; 0xa24
    f828:	9958      	ldr	r1, [sp, #352]	; 0x160
    f82a:	f004 fffc 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f82e:	e7ff      	b.n	f830 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2654>
    f830:	f8dd 1a00 	ldr.w	r1, [sp, #2560]	; 0xa00
    f834:	f24d 4020 	movw	r0, #54304	; 0xd420
    f838:	f2c0 0001 	movt	r0, #1
    f83c:	6802      	ldr	r2, [r0, #0]
    f83e:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    f842:	f002 fc75 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f846:	e7ff      	b.n	f848 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x266c>
    f848:	e7ff      	b.n	f84a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x266e>
    f84a:	f241 0048 	movw	r0, #4168	; 0x1048
                if self.hw.key(self.v[x]) {
    f84e:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f852:	4408      	add	r0, r1
    f854:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    f858:	2a0f      	cmp	r2, #15
    f85a:	9055      	str	r0, [sp, #340]	; 0x154
    f85c:	f201 8098 	bhi.w	10990 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x37b4>
    f860:	e7ff      	b.n	f862 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2686>
    f862:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f866:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f86a:	1842      	adds	r2, r0, r1
    f86c:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    f870:	9855      	ldr	r0, [sp, #340]	; 0x154
    f872:	f7fc f88d 	bl	b990 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17he15d36584013bbaeE>
    f876:	9054      	str	r0, [sp, #336]	; 0x150
    f878:	e7ff      	b.n	f87a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x269e>
    f87a:	9854      	ldr	r0, [sp, #336]	; 0x150
    f87c:	07c1      	lsls	r1, r0, #31
    f87e:	2900      	cmp	r1, #0
    f880:	d006      	beq.n	f890 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x26b4>
    f882:	e7ff      	b.n	f884 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x26a8>
                    self.next();
    f884:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f888:	f001 faa7 	bl	10dda <_ZN8libchip814Chip8$LT$T$GT$4next17h079fcfcda82e796aE>
    f88c:	e7ff      	b.n	f88e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x26b2>
                if self.hw.key(self.v[x]) {
    f88e:	e7ff      	b.n	f890 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x26b4>
        match (
    f890:	f000 bf71 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    f894:	2005      	movs	r0, #5
    f896:	f8cd 0a30 	str.w	r0, [sp, #2608]	; 0xa30
    f89a:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    f89e:	f2c0 0001 	movt	r0, #1
    f8a2:	6801      	ldr	r1, [r0, #0]
    f8a4:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    f8a8:	f005 f8f8 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f8ac:	9053      	str	r0, [sp, #332]	; 0x14c
    f8ae:	e01f      	b.n	f8f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2714>
    f8b0:	2001      	movs	r0, #1
    f8b2:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    f8b6:	e015      	b.n	f8e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2708>
    f8b8:	2000      	movs	r0, #0
    f8ba:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    f8be:	e011      	b.n	f8e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2708>
    f8c0:	2000      	movs	r0, #0
    f8c2:	f88d 0e73 	strb.w	r0, [sp, #3699]	; 0xe73
    f8c6:	f89d 1e73 	ldrb.w	r1, [sp, #3699]	; 0xe73
    f8ca:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f8ce:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f8d2:	f001 fd28 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f8d6:	f8cd 0e74 	str.w	r0, [sp, #3700]	; 0xe74
    f8da:	f8dd 0e74 	ldr.w	r0, [sp, #3700]	; 0xe74
    f8de:	f8cd 0a38 	str.w	r0, [sp, #2616]	; 0xa38
    f8e2:	e00a      	b.n	f8fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x271e>
    f8e4:	f89d 0a37 	ldrb.w	r0, [sp, #2615]	; 0xa37
    f8e8:	07c0      	lsls	r0, r0, #31
    f8ea:	2800      	cmp	r0, #0
    f8ec:	d112      	bne.n	f914 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2738>
    f8ee:	e055      	b.n	f99c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x27c0>
    f8f0:	9853      	ldr	r0, [sp, #332]	; 0x14c
    f8f2:	07c1      	lsls	r1, r0, #31
    f8f4:	2900      	cmp	r1, #0
    f8f6:	d1e3      	bne.n	f8c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x26e4>
    f8f8:	e7de      	b.n	f8b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x26dc>
    f8fa:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    f8fe:	f60d 2138 	addw	r1, sp, #2616	; 0xa38
    f902:	f005 f8cb 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f906:	9052      	str	r0, [sp, #328]	; 0x148
    f908:	e7ff      	b.n	f90a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x272e>
    f90a:	9852      	ldr	r0, [sp, #328]	; 0x148
    f90c:	07c1      	lsls	r1, r0, #31
    f90e:	2900      	cmp	r1, #0
    f910:	d1ce      	bne.n	f8b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x26d4>
    f912:	e7d1      	b.n	f8b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x26dc>
                trace!("[{:04x}] SKNP Vx", self.pc);
    f914:	f24d 30bc 	movw	r0, #54204	; 0xd3bc
    f918:	f2c0 0001 	movt	r0, #1
    f91c:	6801      	ldr	r1, [r0, #0]
    f91e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f922:	f100 0212 	add.w	r2, r0, #18
    f926:	f8cd 2a5c 	str.w	r2, [sp, #2652]	; 0xa5c
    f92a:	f8dd 2a5c 	ldr.w	r2, [sp, #2652]	; 0xa5c
    f92e:	f8cd 2cd4 	str.w	r2, [sp, #3284]	; 0xcd4
    f932:	f646 6307 	movw	r3, #28167	; 0x6e07
    f936:	f2c0 0301 	movt	r3, #1
    f93a:	4610      	mov	r0, r2
    f93c:	9151      	str	r1, [sp, #324]	; 0x144
    f93e:	4619      	mov	r1, r3
    f940:	f7fa fda7 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f944:	9050      	str	r0, [sp, #320]	; 0x140
    f946:	914f      	str	r1, [sp, #316]	; 0x13c
    f948:	e7ff      	b.n	f94a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x276e>
    f94a:	9850      	ldr	r0, [sp, #320]	; 0x140
    f94c:	f8cd 0a54 	str.w	r0, [sp, #2644]	; 0xa54
    f950:	994f      	ldr	r1, [sp, #316]	; 0x13c
    f952:	f8cd 1a58 	str.w	r1, [sp, #2648]	; 0xa58
    f956:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    f95a:	f2c0 0201 	movt	r2, #1
    f95e:	6812      	ldr	r2, [r2, #0]
    f960:	466b      	mov	r3, sp
    f962:	f04f 0c01 	mov.w	ip, #1
    f966:	f8c3 c008 	str.w	ip, [r3, #8]
    f96a:	605a      	str	r2, [r3, #4]
    f96c:	f8c3 c000 	str.w	ip, [r3]
    f970:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    f974:	2202      	movs	r2, #2
    f976:	f60d 2354 	addw	r3, sp, #2644	; 0xa54
    f97a:	9951      	ldr	r1, [sp, #324]	; 0x144
    f97c:	f004 ff53 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f980:	e7ff      	b.n	f982 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x27a6>
    f982:	f8dd 1a30 	ldr.w	r1, [sp, #2608]	; 0xa30
    f986:	f24d 30dc 	movw	r0, #54236	; 0xd3dc
    f98a:	f2c0 0001 	movt	r0, #1
    f98e:	6802      	ldr	r2, [r0, #0]
    f990:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    f994:	f002 fbcc 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f998:	e7ff      	b.n	f99a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x27be>
    f99a:	e7ff      	b.n	f99c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x27c0>
    f99c:	f241 0048 	movw	r0, #4168	; 0x1048
                if !self.hw.key(self.v[x]) {
    f9a0:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f9a4:	4408      	add	r0, r1
    f9a6:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    f9aa:	2a0f      	cmp	r2, #15
    f9ac:	904e      	str	r0, [sp, #312]	; 0x138
    f9ae:	f200 87e5 	bhi.w	1097c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x37a0>
    f9b2:	e7ff      	b.n	f9b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x27d8>
    f9b4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f9b8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f9bc:	1842      	adds	r2, r0, r1
    f9be:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    f9c2:	984e      	ldr	r0, [sp, #312]	; 0x138
    f9c4:	f7fb ffe4 	bl	b990 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17he15d36584013bbaeE>
    f9c8:	904d      	str	r0, [sp, #308]	; 0x134
    f9ca:	e7ff      	b.n	f9cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x27f0>
    f9cc:	984d      	ldr	r0, [sp, #308]	; 0x134
    f9ce:	07c1      	lsls	r1, r0, #31
    f9d0:	2900      	cmp	r1, #0
    f9d2:	d106      	bne.n	f9e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2806>
    f9d4:	e7ff      	b.n	f9d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x27fa>
                    self.next();
    f9d6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f9da:	f001 f9fe 	bl	10dda <_ZN8libchip814Chip8$LT$T$GT$4next17h079fcfcda82e796aE>
    f9de:	e7ff      	b.n	f9e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2804>
                if !self.hw.key(self.v[x]) {
    f9e0:	e7ff      	b.n	f9e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2806>
        match (
    f9e2:	f000 bec8 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    f9e6:	2005      	movs	r0, #5
    f9e8:	f8cd 0a60 	str.w	r0, [sp, #2656]	; 0xa60
    f9ec:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    f9f0:	f2c0 0001 	movt	r0, #1
    f9f4:	6801      	ldr	r1, [r0, #0]
    f9f6:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    f9fa:	f005 f84f 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f9fe:	904c      	str	r0, [sp, #304]	; 0x130
    fa00:	e01f      	b.n	fa42 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2866>
    fa02:	2001      	movs	r0, #1
    fa04:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    fa08:	e015      	b.n	fa36 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x285a>
    fa0a:	2000      	movs	r0, #0
    fa0c:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    fa10:	e011      	b.n	fa36 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x285a>
    fa12:	2000      	movs	r0, #0
    fa14:	f88d 0e7b 	strb.w	r0, [sp, #3707]	; 0xe7b
    fa18:	f89d 1e7b 	ldrb.w	r1, [sp, #3707]	; 0xe7b
    fa1c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fa20:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fa24:	f001 fc7f 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fa28:	f8cd 0e7c 	str.w	r0, [sp, #3708]	; 0xe7c
    fa2c:	f8dd 0e7c 	ldr.w	r0, [sp, #3708]	; 0xe7c
    fa30:	f8cd 0a68 	str.w	r0, [sp, #2664]	; 0xa68
    fa34:	e00a      	b.n	fa4c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2870>
    fa36:	f89d 0a67 	ldrb.w	r0, [sp, #2663]	; 0xa67
    fa3a:	07c0      	lsls	r0, r0, #31
    fa3c:	2800      	cmp	r0, #0
    fa3e:	d112      	bne.n	fa66 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x288a>
    fa40:	e055      	b.n	faee <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2912>
    fa42:	984c      	ldr	r0, [sp, #304]	; 0x130
    fa44:	07c1      	lsls	r1, r0, #31
    fa46:	2900      	cmp	r1, #0
    fa48:	d1e3      	bne.n	fa12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2836>
    fa4a:	e7de      	b.n	fa0a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x282e>
    fa4c:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    fa50:	f60d 2168 	addw	r1, sp, #2664	; 0xa68
    fa54:	f005 f822 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fa58:	904b      	str	r0, [sp, #300]	; 0x12c
    fa5a:	e7ff      	b.n	fa5c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2880>
    fa5c:	984b      	ldr	r0, [sp, #300]	; 0x12c
    fa5e:	07c1      	lsls	r1, r0, #31
    fa60:	2900      	cmp	r1, #0
    fa62:	d1ce      	bne.n	fa02 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2826>
    fa64:	e7d1      	b.n	fa0a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x282e>
                trace!("[{:04x}] LD Vx, DT", self.pc);
    fa66:	f24d 306c 	movw	r0, #54124	; 0xd36c
    fa6a:	f2c0 0001 	movt	r0, #1
    fa6e:	6801      	ldr	r1, [r0, #0]
    fa70:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fa74:	f100 0212 	add.w	r2, r0, #18
    fa78:	f8cd 2a8c 	str.w	r2, [sp, #2700]	; 0xa8c
    fa7c:	f8dd 2a8c 	ldr.w	r2, [sp, #2700]	; 0xa8c
    fa80:	f8cd 2cd0 	str.w	r2, [sp, #3280]	; 0xcd0
    fa84:	f646 6307 	movw	r3, #28167	; 0x6e07
    fa88:	f2c0 0301 	movt	r3, #1
    fa8c:	4610      	mov	r0, r2
    fa8e:	914a      	str	r1, [sp, #296]	; 0x128
    fa90:	4619      	mov	r1, r3
    fa92:	f7fa fcfe 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fa96:	9049      	str	r0, [sp, #292]	; 0x124
    fa98:	9148      	str	r1, [sp, #288]	; 0x120
    fa9a:	e7ff      	b.n	fa9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x28c0>
    fa9c:	9849      	ldr	r0, [sp, #292]	; 0x124
    fa9e:	f8cd 0a84 	str.w	r0, [sp, #2692]	; 0xa84
    faa2:	9948      	ldr	r1, [sp, #288]	; 0x120
    faa4:	f8cd 1a88 	str.w	r1, [sp, #2696]	; 0xa88
    faa8:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    faac:	f2c0 0201 	movt	r2, #1
    fab0:	6812      	ldr	r2, [r2, #0]
    fab2:	466b      	mov	r3, sp
    fab4:	f04f 0c01 	mov.w	ip, #1
    fab8:	f8c3 c008 	str.w	ip, [r3, #8]
    fabc:	605a      	str	r2, [r3, #4]
    fabe:	f8c3 c000 	str.w	ip, [r3]
    fac2:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    fac6:	2202      	movs	r2, #2
    fac8:	f60d 2384 	addw	r3, sp, #2692	; 0xa84
    facc:	994a      	ldr	r1, [sp, #296]	; 0x128
    face:	f004 feaa 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fad2:	e7ff      	b.n	fad4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x28f8>
    fad4:	f8dd 1a60 	ldr.w	r1, [sp, #2656]	; 0xa60
    fad8:	f24d 308c 	movw	r0, #54156	; 0xd38c
    fadc:	f2c0 0001 	movt	r0, #1
    fae0:	6802      	ldr	r2, [r0, #0]
    fae2:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    fae6:	f002 fb23 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    faea:	e7ff      	b.n	faec <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2910>
    faec:	e7ff      	b.n	faee <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2912>
                self.v[x] = self.dt;
    faee:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    faf2:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    faf6:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    fafa:	2a0f      	cmp	r2, #15
    fafc:	9147      	str	r1, [sp, #284]	; 0x11c
    fafe:	f200 8733 	bhi.w	10968 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x378c>
    fb02:	e7ff      	b.n	fb04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2928>
    fb04:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fb08:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fb0c:	1842      	adds	r2, r0, r1
    fb0e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    fb10:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    fb14:	f000 be2f 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    fb18:	2005      	movs	r0, #5
    fb1a:	f8cd 0a90 	str.w	r0, [sp, #2704]	; 0xa90
    fb1e:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    fb22:	f2c0 0001 	movt	r0, #1
    fb26:	6801      	ldr	r1, [r0, #0]
    fb28:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    fb2c:	f004 ffb6 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fb30:	9046      	str	r0, [sp, #280]	; 0x118
    fb32:	e01f      	b.n	fb74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2998>
    fb34:	2001      	movs	r0, #1
    fb36:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    fb3a:	e015      	b.n	fb68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x298c>
    fb3c:	2000      	movs	r0, #0
    fb3e:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    fb42:	e011      	b.n	fb68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x298c>
    fb44:	2000      	movs	r0, #0
    fb46:	f88d 0e83 	strb.w	r0, [sp, #3715]	; 0xe83
    fb4a:	f89d 1e83 	ldrb.w	r1, [sp, #3715]	; 0xe83
    fb4e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fb52:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fb56:	f001 fbe6 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fb5a:	f8cd 0e84 	str.w	r0, [sp, #3716]	; 0xe84
    fb5e:	f8dd 0e84 	ldr.w	r0, [sp, #3716]	; 0xe84
    fb62:	f8cd 0a98 	str.w	r0, [sp, #2712]	; 0xa98
    fb66:	e00a      	b.n	fb7e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x29a2>
    fb68:	f89d 0a97 	ldrb.w	r0, [sp, #2711]	; 0xa97
    fb6c:	07c0      	lsls	r0, r0, #31
    fb6e:	2800      	cmp	r0, #0
    fb70:	d112      	bne.n	fb98 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x29bc>
    fb72:	e055      	b.n	fc20 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2a44>
    fb74:	9846      	ldr	r0, [sp, #280]	; 0x118
    fb76:	07c1      	lsls	r1, r0, #31
    fb78:	2900      	cmp	r1, #0
    fb7a:	d1e3      	bne.n	fb44 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2968>
    fb7c:	e7de      	b.n	fb3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2960>
    fb7e:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    fb82:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
    fb86:	f004 ff89 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fb8a:	9045      	str	r0, [sp, #276]	; 0x114
    fb8c:	e7ff      	b.n	fb8e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x29b2>
    fb8e:	9845      	ldr	r0, [sp, #276]	; 0x114
    fb90:	07c1      	lsls	r1, r0, #31
    fb92:	2900      	cmp	r1, #0
    fb94:	d1ce      	bne.n	fb34 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2958>
    fb96:	e7d1      	b.n	fb3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2960>
                trace!("[{:04x}] LD Vx, K", self.pc);
    fb98:	f24d 301c 	movw	r0, #54044	; 0xd31c
    fb9c:	f2c0 0001 	movt	r0, #1
    fba0:	6801      	ldr	r1, [r0, #0]
    fba2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fba6:	f100 0212 	add.w	r2, r0, #18
    fbaa:	f8cd 2abc 	str.w	r2, [sp, #2748]	; 0xabc
    fbae:	f8dd 2abc 	ldr.w	r2, [sp, #2748]	; 0xabc
    fbb2:	f8cd 2ccc 	str.w	r2, [sp, #3276]	; 0xccc
    fbb6:	f646 6307 	movw	r3, #28167	; 0x6e07
    fbba:	f2c0 0301 	movt	r3, #1
    fbbe:	4610      	mov	r0, r2
    fbc0:	9144      	str	r1, [sp, #272]	; 0x110
    fbc2:	4619      	mov	r1, r3
    fbc4:	f7fa fc65 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fbc8:	9043      	str	r0, [sp, #268]	; 0x10c
    fbca:	9142      	str	r1, [sp, #264]	; 0x108
    fbcc:	e7ff      	b.n	fbce <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x29f2>
    fbce:	9843      	ldr	r0, [sp, #268]	; 0x10c
    fbd0:	f8cd 0ab4 	str.w	r0, [sp, #2740]	; 0xab4
    fbd4:	9942      	ldr	r1, [sp, #264]	; 0x108
    fbd6:	f8cd 1ab8 	str.w	r1, [sp, #2744]	; 0xab8
    fbda:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    fbde:	f2c0 0201 	movt	r2, #1
    fbe2:	6812      	ldr	r2, [r2, #0]
    fbe4:	466b      	mov	r3, sp
    fbe6:	f04f 0c01 	mov.w	ip, #1
    fbea:	f8c3 c008 	str.w	ip, [r3, #8]
    fbee:	605a      	str	r2, [r3, #4]
    fbf0:	f8c3 c000 	str.w	ip, [r3]
    fbf4:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    fbf8:	2202      	movs	r2, #2
    fbfa:	f60d 23b4 	addw	r3, sp, #2740	; 0xab4
    fbfe:	9944      	ldr	r1, [sp, #272]	; 0x110
    fc00:	f004 fe11 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fc04:	e7ff      	b.n	fc06 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2a2a>
    fc06:	f8dd 1a90 	ldr.w	r1, [sp, #2704]	; 0xa90
    fc0a:	f24d 303c 	movw	r0, #54076	; 0xd33c
    fc0e:	f2c0 0001 	movt	r0, #1
    fc12:	6802      	ldr	r2, [r0, #0]
    fc14:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    fc18:	f002 fa8a 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fc1c:	e7ff      	b.n	fc1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2a42>
    fc1e:	e7ff      	b.n	fc20 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2a44>
                self.v[x] = self.waitkey();
    fc20:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fc24:	f001 fa2d 	bl	11082 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E>
    fc28:	9041      	str	r0, [sp, #260]	; 0x104
    fc2a:	e7ff      	b.n	fc2c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2a50>
    fc2c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    fc30:	280f      	cmp	r0, #15
    fc32:	f200 868f 	bhi.w	10954 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3778>
    fc36:	e7ff      	b.n	fc38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2a5c>
    fc38:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fc3c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fc40:	1842      	adds	r2, r0, r1
    fc42:	9b41      	ldr	r3, [sp, #260]	; 0x104
    fc44:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    fc48:	f000 bd95 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    fc4c:	2005      	movs	r0, #5
    fc4e:	f8cd 0ac0 	str.w	r0, [sp, #2752]	; 0xac0
    fc52:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    fc56:	f2c0 0001 	movt	r0, #1
    fc5a:	6801      	ldr	r1, [r0, #0]
    fc5c:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    fc60:	f004 ff1c 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fc64:	9040      	str	r0, [sp, #256]	; 0x100
    fc66:	e01f      	b.n	fca8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2acc>
    fc68:	2001      	movs	r0, #1
    fc6a:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    fc6e:	e015      	b.n	fc9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2ac0>
    fc70:	2000      	movs	r0, #0
    fc72:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    fc76:	e011      	b.n	fc9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2ac0>
    fc78:	2000      	movs	r0, #0
    fc7a:	f88d 0e8b 	strb.w	r0, [sp, #3723]	; 0xe8b
    fc7e:	f89d 1e8b 	ldrb.w	r1, [sp, #3723]	; 0xe8b
    fc82:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fc86:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fc8a:	f001 fb4c 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fc8e:	f8cd 0e8c 	str.w	r0, [sp, #3724]	; 0xe8c
    fc92:	f8dd 0e8c 	ldr.w	r0, [sp, #3724]	; 0xe8c
    fc96:	f8cd 0ac8 	str.w	r0, [sp, #2760]	; 0xac8
    fc9a:	e00a      	b.n	fcb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2ad6>
    fc9c:	f89d 0ac7 	ldrb.w	r0, [sp, #2759]	; 0xac7
    fca0:	07c0      	lsls	r0, r0, #31
    fca2:	2800      	cmp	r0, #0
    fca4:	d112      	bne.n	fccc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2af0>
    fca6:	e055      	b.n	fd54 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2b78>
    fca8:	9840      	ldr	r0, [sp, #256]	; 0x100
    fcaa:	07c1      	lsls	r1, r0, #31
    fcac:	2900      	cmp	r1, #0
    fcae:	d1e3      	bne.n	fc78 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2a9c>
    fcb0:	e7de      	b.n	fc70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2a94>
    fcb2:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    fcb6:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
    fcba:	f004 feef 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fcbe:	903f      	str	r0, [sp, #252]	; 0xfc
    fcc0:	e7ff      	b.n	fcc2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2ae6>
    fcc2:	983f      	ldr	r0, [sp, #252]	; 0xfc
    fcc4:	07c1      	lsls	r1, r0, #31
    fcc6:	2900      	cmp	r1, #0
    fcc8:	d1ce      	bne.n	fc68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2a8c>
    fcca:	e7d1      	b.n	fc70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2a94>
                trace!("[{:04x}] LD DT, Vx", self.pc);
    fccc:	f24d 20cc 	movw	r0, #53964	; 0xd2cc
    fcd0:	f2c0 0001 	movt	r0, #1
    fcd4:	6801      	ldr	r1, [r0, #0]
    fcd6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fcda:	f100 0212 	add.w	r2, r0, #18
    fcde:	f8cd 2aec 	str.w	r2, [sp, #2796]	; 0xaec
    fce2:	f8dd 2aec 	ldr.w	r2, [sp, #2796]	; 0xaec
    fce6:	f8cd 2cc8 	str.w	r2, [sp, #3272]	; 0xcc8
    fcea:	f646 6307 	movw	r3, #28167	; 0x6e07
    fcee:	f2c0 0301 	movt	r3, #1
    fcf2:	4610      	mov	r0, r2
    fcf4:	913e      	str	r1, [sp, #248]	; 0xf8
    fcf6:	4619      	mov	r1, r3
    fcf8:	f7fa fbcb 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fcfc:	903d      	str	r0, [sp, #244]	; 0xf4
    fcfe:	913c      	str	r1, [sp, #240]	; 0xf0
    fd00:	e7ff      	b.n	fd02 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2b26>
    fd02:	983d      	ldr	r0, [sp, #244]	; 0xf4
    fd04:	f8cd 0ae4 	str.w	r0, [sp, #2788]	; 0xae4
    fd08:	993c      	ldr	r1, [sp, #240]	; 0xf0
    fd0a:	f8cd 1ae8 	str.w	r1, [sp, #2792]	; 0xae8
    fd0e:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    fd12:	f2c0 0201 	movt	r2, #1
    fd16:	6812      	ldr	r2, [r2, #0]
    fd18:	466b      	mov	r3, sp
    fd1a:	f04f 0c01 	mov.w	ip, #1
    fd1e:	f8c3 c008 	str.w	ip, [r3, #8]
    fd22:	605a      	str	r2, [r3, #4]
    fd24:	f8c3 c000 	str.w	ip, [r3]
    fd28:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    fd2c:	2202      	movs	r2, #2
    fd2e:	f60d 23e4 	addw	r3, sp, #2788	; 0xae4
    fd32:	993e      	ldr	r1, [sp, #248]	; 0xf8
    fd34:	f004 fd77 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fd38:	e7ff      	b.n	fd3a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2b5e>
    fd3a:	f8dd 1ac0 	ldr.w	r1, [sp, #2752]	; 0xac0
    fd3e:	f24d 20ec 	movw	r0, #53996	; 0xd2ec
    fd42:	f2c0 0001 	movt	r0, #1
    fd46:	6802      	ldr	r2, [r0, #0]
    fd48:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    fd4c:	f002 f9f0 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fd50:	e7ff      	b.n	fd52 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2b76>
    fd52:	e7ff      	b.n	fd54 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2b78>
                self.dt = self.v[x];
    fd54:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    fd58:	280f      	cmp	r0, #15
    fd5a:	f200 85f1 	bhi.w	10940 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3764>
    fd5e:	e7ff      	b.n	fd60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2b84>
    fd60:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fd64:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fd68:	1842      	adds	r2, r0, r1
    fd6a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    fd6e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
        match (
    fd72:	f000 bd00 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    fd76:	2005      	movs	r0, #5
    fd78:	f8cd 0af0 	str.w	r0, [sp, #2800]	; 0xaf0
    fd7c:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    fd80:	f2c0 0001 	movt	r0, #1
    fd84:	6801      	ldr	r1, [r0, #0]
    fd86:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    fd8a:	f004 fe87 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fd8e:	903b      	str	r0, [sp, #236]	; 0xec
    fd90:	e01f      	b.n	fdd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2bf6>
    fd92:	2001      	movs	r0, #1
    fd94:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    fd98:	e015      	b.n	fdc6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2bea>
    fd9a:	2000      	movs	r0, #0
    fd9c:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    fda0:	e011      	b.n	fdc6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2bea>
    fda2:	2000      	movs	r0, #0
    fda4:	f88d 0e93 	strb.w	r0, [sp, #3731]	; 0xe93
    fda8:	f89d 1e93 	ldrb.w	r1, [sp, #3731]	; 0xe93
    fdac:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fdb0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fdb4:	f001 fab7 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fdb8:	f8cd 0e94 	str.w	r0, [sp, #3732]	; 0xe94
    fdbc:	f8dd 0e94 	ldr.w	r0, [sp, #3732]	; 0xe94
    fdc0:	f8cd 0af8 	str.w	r0, [sp, #2808]	; 0xaf8
    fdc4:	e00a      	b.n	fddc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2c00>
    fdc6:	f89d 0af7 	ldrb.w	r0, [sp, #2807]	; 0xaf7
    fdca:	07c0      	lsls	r0, r0, #31
    fdcc:	2800      	cmp	r0, #0
    fdce:	d112      	bne.n	fdf6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2c1a>
    fdd0:	e055      	b.n	fe7e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2ca2>
    fdd2:	983b      	ldr	r0, [sp, #236]	; 0xec
    fdd4:	07c1      	lsls	r1, r0, #31
    fdd6:	2900      	cmp	r1, #0
    fdd8:	d1e3      	bne.n	fda2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2bc6>
    fdda:	e7de      	b.n	fd9a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2bbe>
    fddc:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    fde0:	f60d 21f8 	addw	r1, sp, #2808	; 0xaf8
    fde4:	f004 fe5a 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fde8:	903a      	str	r0, [sp, #232]	; 0xe8
    fdea:	e7ff      	b.n	fdec <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2c10>
    fdec:	983a      	ldr	r0, [sp, #232]	; 0xe8
    fdee:	07c1      	lsls	r1, r0, #31
    fdf0:	2900      	cmp	r1, #0
    fdf2:	d1ce      	bne.n	fd92 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2bb6>
    fdf4:	e7d1      	b.n	fd9a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2bbe>
                trace!("[{:04x}] LD ST, Vx", self.pc);
    fdf6:	f24d 207c 	movw	r0, #53884	; 0xd27c
    fdfa:	f2c0 0001 	movt	r0, #1
    fdfe:	6801      	ldr	r1, [r0, #0]
    fe00:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fe04:	f100 0212 	add.w	r2, r0, #18
    fe08:	f8cd 2b1c 	str.w	r2, [sp, #2844]	; 0xb1c
    fe0c:	f8dd 2b1c 	ldr.w	r2, [sp, #2844]	; 0xb1c
    fe10:	f8cd 2cc4 	str.w	r2, [sp, #3268]	; 0xcc4
    fe14:	f646 6307 	movw	r3, #28167	; 0x6e07
    fe18:	f2c0 0301 	movt	r3, #1
    fe1c:	4610      	mov	r0, r2
    fe1e:	9139      	str	r1, [sp, #228]	; 0xe4
    fe20:	4619      	mov	r1, r3
    fe22:	f7fa fb36 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fe26:	9038      	str	r0, [sp, #224]	; 0xe0
    fe28:	9137      	str	r1, [sp, #220]	; 0xdc
    fe2a:	e7ff      	b.n	fe2c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2c50>
    fe2c:	9838      	ldr	r0, [sp, #224]	; 0xe0
    fe2e:	f8cd 0b14 	str.w	r0, [sp, #2836]	; 0xb14
    fe32:	9937      	ldr	r1, [sp, #220]	; 0xdc
    fe34:	f8cd 1b18 	str.w	r1, [sp, #2840]	; 0xb18
    fe38:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    fe3c:	f2c0 0201 	movt	r2, #1
    fe40:	6812      	ldr	r2, [r2, #0]
    fe42:	466b      	mov	r3, sp
    fe44:	f04f 0c01 	mov.w	ip, #1
    fe48:	f8c3 c008 	str.w	ip, [r3, #8]
    fe4c:	605a      	str	r2, [r3, #4]
    fe4e:	f8c3 c000 	str.w	ip, [r3]
    fe52:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    fe56:	2202      	movs	r2, #2
    fe58:	f60d 3314 	addw	r3, sp, #2836	; 0xb14
    fe5c:	9939      	ldr	r1, [sp, #228]	; 0xe4
    fe5e:	f004 fce2 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fe62:	e7ff      	b.n	fe64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2c88>
    fe64:	f8dd 1af0 	ldr.w	r1, [sp, #2800]	; 0xaf0
    fe68:	f24d 209c 	movw	r0, #53916	; 0xd29c
    fe6c:	f2c0 0001 	movt	r0, #1
    fe70:	6802      	ldr	r2, [r0, #0]
    fe72:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    fe76:	f002 f95b 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fe7a:	e7ff      	b.n	fe7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2ca0>
    fe7c:	e7ff      	b.n	fe7e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2ca2>
                self.st = self.v[x];
    fe7e:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    fe82:	280f      	cmp	r0, #15
    fe84:	f200 8552 	bhi.w	1092c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3750>
    fe88:	e7ff      	b.n	fe8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2cae>
    fe8a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fe8e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fe92:	1842      	adds	r2, r0, r1
    fe94:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    fe98:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
        match (
    fe9c:	f000 bc6b 	b.w	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    fea0:	2005      	movs	r0, #5
    fea2:	f8cd 0b20 	str.w	r0, [sp, #2848]	; 0xb20
    fea6:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    feaa:	f2c0 0001 	movt	r0, #1
    feae:	6801      	ldr	r1, [r0, #0]
    feb0:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    feb4:	f004 fdf2 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    feb8:	9036      	str	r0, [sp, #216]	; 0xd8
    feba:	e01f      	b.n	fefc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2d20>
    febc:	2001      	movs	r0, #1
    febe:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    fec2:	e015      	b.n	fef0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2d14>
    fec4:	2000      	movs	r0, #0
    fec6:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    feca:	e011      	b.n	fef0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2d14>
    fecc:	2000      	movs	r0, #0
    fece:	f88d 0e9b 	strb.w	r0, [sp, #3739]	; 0xe9b
    fed2:	f89d 1e9b 	ldrb.w	r1, [sp, #3739]	; 0xe9b
    fed6:	f644 206c 	movw	r0, #19052	; 0x4a6c
    feda:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fede:	f001 fa22 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fee2:	f8cd 0e9c 	str.w	r0, [sp, #3740]	; 0xe9c
    fee6:	f8dd 0e9c 	ldr.w	r0, [sp, #3740]	; 0xe9c
    feea:	f8cd 0b28 	str.w	r0, [sp, #2856]	; 0xb28
    feee:	e00a      	b.n	ff06 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2d2a>
    fef0:	f89d 0b27 	ldrb.w	r0, [sp, #2855]	; 0xb27
    fef4:	07c0      	lsls	r0, r0, #31
    fef6:	2800      	cmp	r0, #0
    fef8:	d112      	bne.n	ff20 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2d44>
    fefa:	e055      	b.n	ffa8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2dcc>
    fefc:	9836      	ldr	r0, [sp, #216]	; 0xd8
    fefe:	07c1      	lsls	r1, r0, #31
    ff00:	2900      	cmp	r1, #0
    ff02:	d1e3      	bne.n	fecc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2cf0>
    ff04:	e7de      	b.n	fec4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2ce8>
    ff06:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    ff0a:	f60d 3128 	addw	r1, sp, #2856	; 0xb28
    ff0e:	f004 fdc5 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ff12:	9035      	str	r0, [sp, #212]	; 0xd4
    ff14:	e7ff      	b.n	ff16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2d3a>
    ff16:	9835      	ldr	r0, [sp, #212]	; 0xd4
    ff18:	07c1      	lsls	r1, r0, #31
    ff1a:	2900      	cmp	r1, #0
    ff1c:	d1ce      	bne.n	febc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2ce0>
    ff1e:	e7d1      	b.n	fec4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2ce8>
                trace!("[{:04x}] ADD I, Vx", self.pc);
    ff20:	f24d 202c 	movw	r0, #53804	; 0xd22c
    ff24:	f2c0 0001 	movt	r0, #1
    ff28:	6801      	ldr	r1, [r0, #0]
    ff2a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ff2e:	f100 0212 	add.w	r2, r0, #18
    ff32:	f8cd 2b4c 	str.w	r2, [sp, #2892]	; 0xb4c
    ff36:	f8dd 2b4c 	ldr.w	r2, [sp, #2892]	; 0xb4c
    ff3a:	f8cd 2cc0 	str.w	r2, [sp, #3264]	; 0xcc0
    ff3e:	f646 6307 	movw	r3, #28167	; 0x6e07
    ff42:	f2c0 0301 	movt	r3, #1
    ff46:	4610      	mov	r0, r2
    ff48:	9134      	str	r1, [sp, #208]	; 0xd0
    ff4a:	4619      	mov	r1, r3
    ff4c:	f7fa faa1 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ff50:	9033      	str	r0, [sp, #204]	; 0xcc
    ff52:	9132      	str	r1, [sp, #200]	; 0xc8
    ff54:	e7ff      	b.n	ff56 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2d7a>
    ff56:	9833      	ldr	r0, [sp, #204]	; 0xcc
    ff58:	f8cd 0b44 	str.w	r0, [sp, #2884]	; 0xb44
    ff5c:	9932      	ldr	r1, [sp, #200]	; 0xc8
    ff5e:	f8cd 1b48 	str.w	r1, [sp, #2888]	; 0xb48
    ff62:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
    ff66:	f2c0 0201 	movt	r2, #1
    ff6a:	6812      	ldr	r2, [r2, #0]
    ff6c:	466b      	mov	r3, sp
    ff6e:	f04f 0c01 	mov.w	ip, #1
    ff72:	f8c3 c008 	str.w	ip, [r3, #8]
    ff76:	605a      	str	r2, [r3, #4]
    ff78:	f8c3 c000 	str.w	ip, [r3]
    ff7c:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    ff80:	2202      	movs	r2, #2
    ff82:	f60d 3344 	addw	r3, sp, #2884	; 0xb44
    ff86:	9934      	ldr	r1, [sp, #208]	; 0xd0
    ff88:	f004 fc4d 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ff8c:	e7ff      	b.n	ff8e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2db2>
    ff8e:	f8dd 1b20 	ldr.w	r1, [sp, #2848]	; 0xb20
    ff92:	f24d 204c 	movw	r0, #53836	; 0xd24c
    ff96:	f2c0 0001 	movt	r0, #1
    ff9a:	6802      	ldr	r2, [r0, #0]
    ff9c:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    ffa0:	f002 f8c6 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ffa4:	e7ff      	b.n	ffa6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2dca>
    ffa6:	e7ff      	b.n	ffa8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2dcc>
                self.i = self.i.wrapping_add(self.v[x].into());
    ffa8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ffac:	8a01      	ldrh	r1, [r0, #16]
    ffae:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    ffb2:	2a0f      	cmp	r2, #15
    ffb4:	9131      	str	r1, [sp, #196]	; 0xc4
    ffb6:	f200 84af 	bhi.w	10918 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x373c>
    ffba:	e7ff      	b.n	ffbc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2de0>
    ffbc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ffc0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ffc4:	1842      	adds	r2, r0, r1
    ffc6:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    ffca:	f001 f99f 	bl	1130c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
    ffce:	9030      	str	r0, [sp, #192]	; 0xc0
    ffd0:	e7ff      	b.n	ffd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2df6>
    ffd2:	9831      	ldr	r0, [sp, #196]	; 0xc4
    ffd4:	9930      	ldr	r1, [sp, #192]	; 0xc0
    ffd6:	f004 fd27 	bl	14a28 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
    ffda:	902f      	str	r0, [sp, #188]	; 0xbc
    ffdc:	e7ff      	b.n	ffde <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2e02>
    ffde:	982f      	ldr	r0, [sp, #188]	; 0xbc
    ffe0:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    ffe4:	8208      	strh	r0, [r1, #16]
        match (
    ffe6:	e3c6      	b.n	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    ffe8:	2005      	movs	r0, #5
    ffea:	f8cd 0b50 	str.w	r0, [sp, #2896]	; 0xb50
    ffee:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
    fff2:	f2c0 0001 	movt	r0, #1
    fff6:	6801      	ldr	r1, [r0, #0]
    fff8:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    fffc:	f004 fd4e 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   10000:	902e      	str	r0, [sp, #184]	; 0xb8
   10002:	e01f      	b.n	10044 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2e68>
   10004:	2001      	movs	r0, #1
   10006:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
   1000a:	e015      	b.n	10038 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2e5c>
   1000c:	2000      	movs	r0, #0
   1000e:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
   10012:	e011      	b.n	10038 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2e5c>
   10014:	2000      	movs	r0, #0
   10016:	f88d 0ea3 	strb.w	r0, [sp, #3747]	; 0xea3
   1001a:	f89d 1ea3 	ldrb.w	r1, [sp, #3747]	; 0xea3
   1001e:	f644 206c 	movw	r0, #19052	; 0x4a6c
   10022:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10026:	f001 f97e 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
   1002a:	f8cd 0ea4 	str.w	r0, [sp, #3748]	; 0xea4
   1002e:	f8dd 0ea4 	ldr.w	r0, [sp, #3748]	; 0xea4
   10032:	f8cd 0b58 	str.w	r0, [sp, #2904]	; 0xb58
   10036:	e00a      	b.n	1004e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2e72>
   10038:	f89d 0b57 	ldrb.w	r0, [sp, #2903]	; 0xb57
   1003c:	07c0      	lsls	r0, r0, #31
   1003e:	2800      	cmp	r0, #0
   10040:	d112      	bne.n	10068 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2e8c>
   10042:	e055      	b.n	100f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2f14>
   10044:	982e      	ldr	r0, [sp, #184]	; 0xb8
   10046:	07c1      	lsls	r1, r0, #31
   10048:	2900      	cmp	r1, #0
   1004a:	d1e3      	bne.n	10014 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2e38>
   1004c:	e7de      	b.n	1000c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2e30>
   1004e:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
   10052:	f60d 3158 	addw	r1, sp, #2904	; 0xb58
   10056:	f004 fd21 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   1005a:	902d      	str	r0, [sp, #180]	; 0xb4
   1005c:	e7ff      	b.n	1005e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2e82>
   1005e:	982d      	ldr	r0, [sp, #180]	; 0xb4
   10060:	07c1      	lsls	r1, r0, #31
   10062:	2900      	cmp	r1, #0
   10064:	d1ce      	bne.n	10004 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2e28>
   10066:	e7d1      	b.n	1000c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2e30>
                trace!("[{:04x}] LD F, Vx", self.pc);
   10068:	f24d 10a8 	movw	r0, #53672	; 0xd1a8
   1006c:	f2c0 0001 	movt	r0, #1
   10070:	6801      	ldr	r1, [r0, #0]
   10072:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10076:	f100 0212 	add.w	r2, r0, #18
   1007a:	f8cd 2b7c 	str.w	r2, [sp, #2940]	; 0xb7c
   1007e:	f8dd 2b7c 	ldr.w	r2, [sp, #2940]	; 0xb7c
   10082:	f8cd 2cbc 	str.w	r2, [sp, #3260]	; 0xcbc
   10086:	f646 6307 	movw	r3, #28167	; 0x6e07
   1008a:	f2c0 0301 	movt	r3, #1
   1008e:	4610      	mov	r0, r2
   10090:	912c      	str	r1, [sp, #176]	; 0xb0
   10092:	4619      	mov	r1, r3
   10094:	f7fa f9fd 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   10098:	902b      	str	r0, [sp, #172]	; 0xac
   1009a:	912a      	str	r1, [sp, #168]	; 0xa8
   1009c:	e7ff      	b.n	1009e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2ec2>
   1009e:	982b      	ldr	r0, [sp, #172]	; 0xac
   100a0:	f8cd 0b74 	str.w	r0, [sp, #2932]	; 0xb74
   100a4:	992a      	ldr	r1, [sp, #168]	; 0xa8
   100a6:	f8cd 1b78 	str.w	r1, [sp, #2936]	; 0xb78
   100aa:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
   100ae:	f2c0 0201 	movt	r2, #1
   100b2:	6812      	ldr	r2, [r2, #0]
   100b4:	466b      	mov	r3, sp
   100b6:	f04f 0c01 	mov.w	ip, #1
   100ba:	f8c3 c008 	str.w	ip, [r3, #8]
   100be:	605a      	str	r2, [r3, #4]
   100c0:	f8c3 c000 	str.w	ip, [r3]
   100c4:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
   100c8:	2202      	movs	r2, #2
   100ca:	f60d 3374 	addw	r3, sp, #2932	; 0xb74
   100ce:	992c      	ldr	r1, [sp, #176]	; 0xb0
   100d0:	f004 fba9 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   100d4:	e7ff      	b.n	100d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2efa>
   100d6:	f8dd 1b50 	ldr.w	r1, [sp, #2896]	; 0xb50
   100da:	f24d 10c8 	movw	r0, #53704	; 0xd1c8
   100de:	f2c0 0001 	movt	r0, #1
   100e2:	6802      	ldr	r2, [r0, #0]
   100e4:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
   100e8:	f002 f822 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   100ec:	e7ff      	b.n	100ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2f12>
   100ee:	e7ff      	b.n	100f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2f14>
                self.i = (self.v[x] * 5).into();
   100f0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
   100f4:	280f      	cmp	r0, #15
   100f6:	f200 83f9 	bhi.w	108ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3710>
   100fa:	e7ff      	b.n	100fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2f20>
   100fc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10100:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10104:	1842      	adds	r2, r0, r1
   10106:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
   1010a:	2305      	movs	r3, #5
   1010c:	fba2 2303 	umull	r2, r3, r2, r3
   10110:	ea4f 2c12 	mov.w	ip, r2, lsr #8
   10114:	f04f 0e00 	mov.w	lr, #0
   10118:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
   1011c:	bf18      	it	ne
   1011e:	f04f 0c01 	movne.w	ip, #1
   10122:	2b00      	cmp	r3, #0
   10124:	bf18      	it	ne
   10126:	2301      	movne	r3, #1
   10128:	ea43 030c 	orr.w	r3, r3, ip
   1012c:	2b00      	cmp	r3, #0
   1012e:	9229      	str	r2, [sp, #164]	; 0xa4
   10130:	f040 83e6 	bne.w	10900 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3724>
   10134:	e7ff      	b.n	10136 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2f5a>
   10136:	9829      	ldr	r0, [sp, #164]	; 0xa4
   10138:	f001 f8e8 	bl	1130c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
   1013c:	9028      	str	r0, [sp, #160]	; 0xa0
   1013e:	e7ff      	b.n	10140 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2f64>
   10140:	9828      	ldr	r0, [sp, #160]	; 0xa0
   10142:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   10146:	8208      	strh	r0, [r1, #16]
        match (
   10148:	e315      	b.n	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
   1014a:	2005      	movs	r0, #5
   1014c:	f8cd 0b80 	str.w	r0, [sp, #2944]	; 0xb80
   10150:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
   10154:	f2c0 0001 	movt	r0, #1
   10158:	6801      	ldr	r1, [r0, #0]
   1015a:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
   1015e:	f004 fc9d 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   10162:	9027      	str	r0, [sp, #156]	; 0x9c
   10164:	e01f      	b.n	101a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2fca>
   10166:	2001      	movs	r0, #1
   10168:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
   1016c:	e015      	b.n	1019a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2fbe>
   1016e:	2000      	movs	r0, #0
   10170:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
   10174:	e011      	b.n	1019a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2fbe>
   10176:	2000      	movs	r0, #0
   10178:	f88d 0eab 	strb.w	r0, [sp, #3755]	; 0xeab
   1017c:	f89d 1eab 	ldrb.w	r1, [sp, #3755]	; 0xeab
   10180:	f644 206c 	movw	r0, #19052	; 0x4a6c
   10184:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10188:	f001 f8cd 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
   1018c:	f8cd 0eac 	str.w	r0, [sp, #3756]	; 0xeac
   10190:	f8dd 0eac 	ldr.w	r0, [sp, #3756]	; 0xeac
   10194:	f8cd 0b88 	str.w	r0, [sp, #2952]	; 0xb88
   10198:	e00a      	b.n	101b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2fd4>
   1019a:	f89d 0b87 	ldrb.w	r0, [sp, #2951]	; 0xb87
   1019e:	07c0      	lsls	r0, r0, #31
   101a0:	2800      	cmp	r0, #0
   101a2:	d112      	bne.n	101ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2fee>
   101a4:	e055      	b.n	10252 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3076>
   101a6:	9827      	ldr	r0, [sp, #156]	; 0x9c
   101a8:	07c1      	lsls	r1, r0, #31
   101aa:	2900      	cmp	r1, #0
   101ac:	d1e3      	bne.n	10176 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2f9a>
   101ae:	e7de      	b.n	1016e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2f92>
   101b0:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
   101b4:	f60d 3188 	addw	r1, sp, #2952	; 0xb88
   101b8:	f004 fc70 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   101bc:	9026      	str	r0, [sp, #152]	; 0x98
   101be:	e7ff      	b.n	101c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2fe4>
   101c0:	9826      	ldr	r0, [sp, #152]	; 0x98
   101c2:	07c1      	lsls	r1, r0, #31
   101c4:	2900      	cmp	r1, #0
   101c6:	d1ce      	bne.n	10166 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2f8a>
   101c8:	e7d1      	b.n	1016e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2f92>
                trace!("[{:04x}] LD B, Vx", self.pc);
   101ca:	f24d 1008 	movw	r0, #53512	; 0xd108
   101ce:	f2c0 0001 	movt	r0, #1
   101d2:	6801      	ldr	r1, [r0, #0]
   101d4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   101d8:	f100 0212 	add.w	r2, r0, #18
   101dc:	f8cd 2bac 	str.w	r2, [sp, #2988]	; 0xbac
   101e0:	f8dd 2bac 	ldr.w	r2, [sp, #2988]	; 0xbac
   101e4:	f8cd 2cb4 	str.w	r2, [sp, #3252]	; 0xcb4
   101e8:	f646 6307 	movw	r3, #28167	; 0x6e07
   101ec:	f2c0 0301 	movt	r3, #1
   101f0:	4610      	mov	r0, r2
   101f2:	9125      	str	r1, [sp, #148]	; 0x94
   101f4:	4619      	mov	r1, r3
   101f6:	f7fa f94c 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   101fa:	9024      	str	r0, [sp, #144]	; 0x90
   101fc:	9123      	str	r1, [sp, #140]	; 0x8c
   101fe:	e7ff      	b.n	10200 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3024>
   10200:	9824      	ldr	r0, [sp, #144]	; 0x90
   10202:	f8cd 0ba4 	str.w	r0, [sp, #2980]	; 0xba4
   10206:	9923      	ldr	r1, [sp, #140]	; 0x8c
   10208:	f8cd 1ba8 	str.w	r1, [sp, #2984]	; 0xba8
   1020c:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
   10210:	f2c0 0201 	movt	r2, #1
   10214:	6812      	ldr	r2, [r2, #0]
   10216:	466b      	mov	r3, sp
   10218:	f04f 0c01 	mov.w	ip, #1
   1021c:	f8c3 c008 	str.w	ip, [r3, #8]
   10220:	605a      	str	r2, [r3, #4]
   10222:	f8c3 c000 	str.w	ip, [r3]
   10226:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
   1022a:	2202      	movs	r2, #2
   1022c:	f60d 33a4 	addw	r3, sp, #2980	; 0xba4
   10230:	9925      	ldr	r1, [sp, #148]	; 0x94
   10232:	f004 faf8 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   10236:	e7ff      	b.n	10238 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x305c>
   10238:	f8dd 1b80 	ldr.w	r1, [sp, #2944]	; 0xb80
   1023c:	f24d 1028 	movw	r0, #53544	; 0xd128
   10240:	f2c0 0001 	movt	r0, #1
   10244:	6802      	ldr	r2, [r0, #0]
   10246:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
   1024a:	f001 ff71 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   1024e:	e7ff      	b.n	10250 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3074>
   10250:	e7ff      	b.n	10252 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3076>
                let bcd = self.v[x];
   10252:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
   10256:	280f      	cmp	r0, #15
   10258:	f200 8308 	bhi.w	1086c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3690>
   1025c:	e7ff      	b.n	1025e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3082>
   1025e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10262:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10266:	1842      	adds	r2, r0, r1
   10268:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
   1026c:	4613      	mov	r3, r2
   1026e:	f88d 2cbb 	strb.w	r2, [sp, #3259]	; 0xcbb
   10272:	f248 5c1f 	movw	ip, #34079	; 0x851f
   10276:	f2c5 1ceb 	movt	ip, #20971	; 0x51eb
                self.mem[self.i as usize] = (bcd / 100) % 10;
   1027a:	fba2 2c0c 	umull	r2, ip, r2, ip
   1027e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
   10282:	f8b0 e010 	ldrh.w	lr, [r0, #16]
   10286:	4674      	mov	r4, lr
   10288:	2500      	movs	r5, #0
   1028a:	ebb5 3f1e 	cmp.w	r5, lr, lsr #12
   1028e:	9322      	str	r3, [sp, #136]	; 0x88
   10290:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
   10294:	9420      	str	r4, [sp, #128]	; 0x80
   10296:	f040 82f3 	bne.w	10880 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x36a4>
   1029a:	e7ff      	b.n	1029c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x30c0>
   1029c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   102a0:	9920      	ldr	r1, [sp, #128]	; 0x80
   102a2:	1842      	adds	r2, r0, r1
   102a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
   102a6:	fa5f fc83 	uxtb.w	ip, r3
   102aa:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
   102ae:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
   102b2:	fbac 450e 	umull	r4, r5, ip, lr
   102b6:	08ed      	lsrs	r5, r5, #3
   102b8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   102bc:	ebac 0c45 	sub.w	ip, ip, r5, lsl #1
   102c0:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
   102c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
   102c6:	fa5f fc82 	uxtb.w	ip, r2
   102ca:	fbac ce0e 	umull	ip, lr, ip, lr
   102ce:	ea4f 0ede 	mov.w	lr, lr, lsr #3
   102d2:	8a05      	ldrh	r5, [r0, #16]
   102d4:	3501      	adds	r5, #1
   102d6:	2600      	movs	r6, #0
   102d8:	2e00      	cmp	r6, #0
   102da:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
   102de:	951e      	str	r5, [sp, #120]	; 0x78
   102e0:	f040 82d8 	bne.w	10894 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x36b8>
   102e4:	e7ff      	b.n	102e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x310a>
   102e6:	2000      	movs	r0, #0
   102e8:	991e      	ldr	r1, [sp, #120]	; 0x78
   102ea:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   102ee:	f040 82dd 	bne.w	108ac <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x36d0>
   102f2:	e7ff      	b.n	102f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3118>
   102f4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   102f8:	991e      	ldr	r1, [sp, #120]	; 0x78
   102fa:	1842      	adds	r2, r0, r1
   102fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   102fe:	fa5f fc83 	uxtb.w	ip, r3
   10302:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
   10306:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
   1030a:	fbac e40e 	umull	lr, r4, ip, lr
   1030e:	08e4      	lsrs	r4, r4, #3
   10310:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   10314:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
   10318:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 2] = bcd % 10;
   1031c:	8a02      	ldrh	r2, [r0, #16]
   1031e:	3202      	adds	r2, #2
   10320:	f04f 0c00 	mov.w	ip, #0
   10324:	f1bc 0f00 	cmp.w	ip, #0
   10328:	921d      	str	r2, [sp, #116]	; 0x74
   1032a:	f040 82c9 	bne.w	108c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x36e4>
   1032e:	e7ff      	b.n	10330 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3154>
   10330:	2000      	movs	r0, #0
   10332:	991d      	ldr	r1, [sp, #116]	; 0x74
   10334:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   10338:	f040 82ce 	bne.w	108d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x36fc>
   1033c:	e7ff      	b.n	1033e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3162>
   1033e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10342:	991d      	ldr	r1, [sp, #116]	; 0x74
   10344:	1842      	adds	r2, r0, r1
   10346:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10348:	fa5f fc83 	uxtb.w	ip, r3
   1034c:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
   10350:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
   10354:	fbac e40e 	umull	lr, r4, ip, lr
   10358:	08e4      	lsrs	r4, r4, #3
   1035a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1035e:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
   10362:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
        match (
   10366:	e206      	b.n	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
   10368:	2005      	movs	r0, #5
   1036a:	f8cd 0bb0 	str.w	r0, [sp, #2992]	; 0xbb0
   1036e:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
   10372:	f2c0 0001 	movt	r0, #1
   10376:	6801      	ldr	r1, [r0, #0]
   10378:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
   1037c:	f004 fb8e 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   10380:	901c      	str	r0, [sp, #112]	; 0x70
   10382:	e01f      	b.n	103c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x31e8>
   10384:	2001      	movs	r0, #1
   10386:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
   1038a:	e015      	b.n	103b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x31dc>
   1038c:	2000      	movs	r0, #0
   1038e:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
   10392:	e011      	b.n	103b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x31dc>
   10394:	2000      	movs	r0, #0
   10396:	f88d 0eb3 	strb.w	r0, [sp, #3763]	; 0xeb3
   1039a:	f89d 1eb3 	ldrb.w	r1, [sp, #3763]	; 0xeb3
   1039e:	f644 206c 	movw	r0, #19052	; 0x4a6c
   103a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
   103a6:	f000 ffbe 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
   103aa:	f8cd 0eb4 	str.w	r0, [sp, #3764]	; 0xeb4
   103ae:	f8dd 0eb4 	ldr.w	r0, [sp, #3764]	; 0xeb4
   103b2:	f8cd 0bb8 	str.w	r0, [sp, #3000]	; 0xbb8
   103b6:	e00a      	b.n	103ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x31f2>
   103b8:	f89d 0bb7 	ldrb.w	r0, [sp, #2999]	; 0xbb7
   103bc:	07c0      	lsls	r0, r0, #31
   103be:	2800      	cmp	r0, #0
   103c0:	d112      	bne.n	103e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x320c>
   103c2:	e055      	b.n	10470 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3294>
   103c4:	981c      	ldr	r0, [sp, #112]	; 0x70
   103c6:	07c1      	lsls	r1, r0, #31
   103c8:	2900      	cmp	r1, #0
   103ca:	d1e3      	bne.n	10394 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x31b8>
   103cc:	e7de      	b.n	1038c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x31b0>
   103ce:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
   103d2:	f60d 31b8 	addw	r1, sp, #3000	; 0xbb8
   103d6:	f004 fb61 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   103da:	901b      	str	r0, [sp, #108]	; 0x6c
   103dc:	e7ff      	b.n	103de <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3202>
   103de:	981b      	ldr	r0, [sp, #108]	; 0x6c
   103e0:	07c1      	lsls	r1, r0, #31
   103e2:	2900      	cmp	r1, #0
   103e4:	d1ce      	bne.n	10384 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x31a8>
   103e6:	e7d1      	b.n	1038c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x31b0>
                trace!("[{:04x}] LD [I], Vx", self.pc);
   103e8:	f24d 0088 	movw	r0, #53384	; 0xd088
   103ec:	f2c0 0001 	movt	r0, #1
   103f0:	6801      	ldr	r1, [r0, #0]
   103f2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   103f6:	f100 0212 	add.w	r2, r0, #18
   103fa:	f8cd 2bdc 	str.w	r2, [sp, #3036]	; 0xbdc
   103fe:	f8dd 2bdc 	ldr.w	r2, [sp, #3036]	; 0xbdc
   10402:	f8cd 2ca0 	str.w	r2, [sp, #3232]	; 0xca0
   10406:	f646 6307 	movw	r3, #28167	; 0x6e07
   1040a:	f2c0 0301 	movt	r3, #1
   1040e:	4610      	mov	r0, r2
   10410:	911a      	str	r1, [sp, #104]	; 0x68
   10412:	4619      	mov	r1, r3
   10414:	f7fa f83d 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   10418:	9019      	str	r0, [sp, #100]	; 0x64
   1041a:	9118      	str	r1, [sp, #96]	; 0x60
   1041c:	e7ff      	b.n	1041e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3242>
   1041e:	9819      	ldr	r0, [sp, #100]	; 0x64
   10420:	f8cd 0bd4 	str.w	r0, [sp, #3028]	; 0xbd4
   10424:	9918      	ldr	r1, [sp, #96]	; 0x60
   10426:	f8cd 1bd8 	str.w	r1, [sp, #3032]	; 0xbd8
   1042a:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
   1042e:	f2c0 0201 	movt	r2, #1
   10432:	6812      	ldr	r2, [r2, #0]
   10434:	466b      	mov	r3, sp
   10436:	f04f 0c01 	mov.w	ip, #1
   1043a:	f8c3 c008 	str.w	ip, [r3, #8]
   1043e:	605a      	str	r2, [r3, #4]
   10440:	f8c3 c000 	str.w	ip, [r3]
   10444:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
   10448:	2202      	movs	r2, #2
   1044a:	f60d 33d4 	addw	r3, sp, #3028	; 0xbd4
   1044e:	991a      	ldr	r1, [sp, #104]	; 0x68
   10450:	f004 f9e9 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   10454:	e7ff      	b.n	10456 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x327a>
   10456:	f8dd 1bb0 	ldr.w	r1, [sp, #2992]	; 0xbb0
   1045a:	f24d 00a8 	movw	r0, #53416	; 0xd0a8
   1045e:	f2c0 0001 	movt	r0, #1
   10462:	6802      	ldr	r2, [r0, #0]
   10464:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
   10468:	f001 fe62 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   1046c:	e7ff      	b.n	1046e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3292>
   1046e:	e7ff      	b.n	10470 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3294>
                let x = x as usize;
   10470:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
   10474:	f8cd 0ca4 	str.w	r0, [sp, #3236]	; 0xca4
                for i in 0..(x + 1) {
   10478:	1c41      	adds	r1, r0, #1
   1047a:	460a      	mov	r2, r1
   1047c:	4281      	cmp	r1, r0
   1047e:	9217      	str	r2, [sp, #92]	; 0x5c
   10480:	f0c0 81c9 	bcc.w	10816 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x363a>
   10484:	e7ff      	b.n	10486 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x32aa>
   10486:	2000      	movs	r0, #0
   10488:	f8cd 0be0 	str.w	r0, [sp, #3040]	; 0xbe0
   1048c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1048e:	f8cd 0be4 	str.w	r0, [sp, #3044]	; 0xbe4
   10492:	f8dd 0be0 	ldr.w	r0, [sp, #3040]	; 0xbe0
   10496:	f8dd 1be4 	ldr.w	r1, [sp, #3044]	; 0xbe4
   1049a:	f001 fbd6 	bl	11c4a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
   1049e:	9016      	str	r0, [sp, #88]	; 0x58
   104a0:	9115      	str	r1, [sp, #84]	; 0x54
   104a2:	e7ff      	b.n	104a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x32c8>
   104a4:	9816      	ldr	r0, [sp, #88]	; 0x58
   104a6:	f8cd 0be8 	str.w	r0, [sp, #3048]	; 0xbe8
   104aa:	9915      	ldr	r1, [sp, #84]	; 0x54
   104ac:	f8cd 1bec 	str.w	r1, [sp, #3052]	; 0xbec
   104b0:	e7ff      	b.n	104b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x32d6>
   104b2:	f60d 30e8 	addw	r0, sp, #3048	; 0xbe8
   104b6:	f001 fb3d 	bl	11b34 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   104ba:	f8cd 1bf4 	str.w	r1, [sp, #3060]	; 0xbf4
   104be:	f8cd 0bf0 	str.w	r0, [sp, #3056]	; 0xbf0
   104c2:	e7ff      	b.n	104c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x32e8>
   104c4:	f8dd 0bf0 	ldr.w	r0, [sp, #3056]	; 0xbf0
   104c8:	2800      	cmp	r0, #0
   104ca:	d001      	beq.n	104d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x32f4>
   104cc:	e7ff      	b.n	104ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x32f2>
   104ce:	e001      	b.n	104d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x32f8>
        match (
   104d0:	e151      	b.n	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
                for i in 0..(x + 1) {
   104d2:	defe      	udf	#254	; 0xfe
   104d4:	f8dd 0bf4 	ldr.w	r0, [sp, #3060]	; 0xbf4
   104d8:	f8cd 0ca8 	str.w	r0, [sp, #3240]	; 0xca8
   104dc:	f8cd 0cac 	str.w	r0, [sp, #3244]	; 0xcac
   104e0:	f8cd 0cb0 	str.w	r0, [sp, #3248]	; 0xcb0
                    self.mem[self.i as usize + i] = self.v[i];
   104e4:	280f      	cmp	r0, #15
   104e6:	9014      	str	r0, [sp, #80]	; 0x50
   104e8:	f200 81a1 	bhi.w	1082e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3652>
   104ec:	e7ff      	b.n	104ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3312>
   104ee:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   104f2:	9914      	ldr	r1, [sp, #80]	; 0x50
   104f4:	1842      	adds	r2, r0, r1
   104f6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
   104fa:	8a03      	ldrh	r3, [r0, #16]
   104fc:	eb03 0c01 	add.w	ip, r3, r1
   10500:	46e6      	mov	lr, ip
   10502:	459c      	cmp	ip, r3
   10504:	9213      	str	r2, [sp, #76]	; 0x4c
   10506:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
   1050a:	f0c0 8199 	bcc.w	10840 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3664>
   1050e:	e7ff      	b.n	10510 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3334>
   10510:	2000      	movs	r0, #0
   10512:	9912      	ldr	r1, [sp, #72]	; 0x48
   10514:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   10518:	f040 819e 	bne.w	10858 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x367c>
   1051c:	e7ff      	b.n	1051e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3342>
   1051e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10522:	9912      	ldr	r1, [sp, #72]	; 0x48
   10524:	1842      	adds	r2, r0, r1
   10526:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10528:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
                for i in 0..(x + 1) {
   1052c:	e7c1      	b.n	104b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x32d6>
   1052e:	2005      	movs	r0, #5
   10530:	f8cd 0bf8 	str.w	r0, [sp, #3064]	; 0xbf8
   10534:	f64c 70a0 	movw	r0, #53152	; 0xcfa0
   10538:	f2c0 0001 	movt	r0, #1
   1053c:	6801      	ldr	r1, [r0, #0]
   1053e:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
   10542:	f004 faab 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   10546:	9011      	str	r0, [sp, #68]	; 0x44
   10548:	e01f      	b.n	1058a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x33ae>
   1054a:	2001      	movs	r0, #1
   1054c:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
   10550:	e015      	b.n	1057e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x33a2>
   10552:	2000      	movs	r0, #0
   10554:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
   10558:	e011      	b.n	1057e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x33a2>
   1055a:	2000      	movs	r0, #0
   1055c:	f88d 0ebb 	strb.w	r0, [sp, #3771]	; 0xebb
   10560:	f89d 1ebb 	ldrb.w	r1, [sp, #3771]	; 0xebb
   10564:	f644 206c 	movw	r0, #19052	; 0x4a6c
   10568:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1056c:	f000 fedb 	bl	11326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
   10570:	f8cd 0ebc 	str.w	r0, [sp, #3772]	; 0xebc
   10574:	f8dd 0ebc 	ldr.w	r0, [sp, #3772]	; 0xebc
   10578:	f8cd 0c00 	str.w	r0, [sp, #3072]	; 0xc00
   1057c:	e00a      	b.n	10594 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x33b8>
   1057e:	f89d 0bff 	ldrb.w	r0, [sp, #3071]	; 0xbff
   10582:	07c0      	lsls	r0, r0, #31
   10584:	2800      	cmp	r0, #0
   10586:	d112      	bne.n	105ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x33d2>
   10588:	e055      	b.n	10636 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x345a>
   1058a:	9811      	ldr	r0, [sp, #68]	; 0x44
   1058c:	07c1      	lsls	r1, r0, #31
   1058e:	2900      	cmp	r1, #0
   10590:	d1e3      	bne.n	1055a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x337e>
   10592:	e7de      	b.n	10552 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3376>
   10594:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
   10598:	f50d 6140 	add.w	r1, sp, #3072	; 0xc00
   1059c:	f004 fa7e 	bl	14a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   105a0:	9010      	str	r0, [sp, #64]	; 0x40
   105a2:	e7ff      	b.n	105a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x33c8>
   105a4:	9810      	ldr	r0, [sp, #64]	; 0x40
   105a6:	07c1      	lsls	r1, r0, #31
   105a8:	2900      	cmp	r1, #0
   105aa:	d1ce      	bne.n	1054a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x336e>
   105ac:	e7d1      	b.n	10552 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3376>
                trace!("[{:04x}] LD Vx, [I]", self.pc);
   105ae:	f64c 70c4 	movw	r0, #53188	; 0xcfc4
   105b2:	f2c0 0001 	movt	r0, #1
   105b6:	6801      	ldr	r1, [r0, #0]
   105b8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   105bc:	f100 0212 	add.w	r2, r0, #18
   105c0:	f8cd 2c24 	str.w	r2, [sp, #3108]	; 0xc24
   105c4:	f8dd 2c24 	ldr.w	r2, [sp, #3108]	; 0xc24
   105c8:	f8cd 2c8c 	str.w	r2, [sp, #3212]	; 0xc8c
   105cc:	f646 6307 	movw	r3, #28167	; 0x6e07
   105d0:	f2c0 0301 	movt	r3, #1
   105d4:	4610      	mov	r0, r2
   105d6:	910f      	str	r1, [sp, #60]	; 0x3c
   105d8:	4619      	mov	r1, r3
   105da:	f7f9 ff5a 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   105de:	900e      	str	r0, [sp, #56]	; 0x38
   105e0:	910d      	str	r1, [sp, #52]	; 0x34
   105e2:	e7ff      	b.n	105e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3408>
   105e4:	980e      	ldr	r0, [sp, #56]	; 0x38
   105e6:	f8cd 0c1c 	str.w	r0, [sp, #3100]	; 0xc1c
   105ea:	990d      	ldr	r1, [sp, #52]	; 0x34
   105ec:	f8cd 1c20 	str.w	r1, [sp, #3104]	; 0xc20
   105f0:	f64c 72e8 	movw	r2, #53224	; 0xcfe8
   105f4:	f2c0 0201 	movt	r2, #1
   105f8:	6812      	ldr	r2, [r2, #0]
   105fa:	466b      	mov	r3, sp
   105fc:	f04f 0c01 	mov.w	ip, #1
   10600:	f8c3 c008 	str.w	ip, [r3, #8]
   10604:	605a      	str	r2, [r3, #4]
   10606:	f8c3 c000 	str.w	ip, [r3]
   1060a:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
   1060e:	2202      	movs	r2, #2
   10610:	f60d 431c 	addw	r3, sp, #3100	; 0xc1c
   10614:	990f      	ldr	r1, [sp, #60]	; 0x3c
   10616:	f004 f906 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   1061a:	e7ff      	b.n	1061c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3440>
   1061c:	f8dd 1bf8 	ldr.w	r1, [sp, #3064]	; 0xbf8
   10620:	f24d 0028 	movw	r0, #53288	; 0xd028
   10624:	f2c0 0001 	movt	r0, #1
   10628:	6802      	ldr	r2, [r0, #0]
   1062a:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
   1062e:	f001 fd7f 	bl	12130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   10632:	e7ff      	b.n	10634 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3458>
   10634:	e7ff      	b.n	10636 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x345a>
                let x = x as usize;
   10636:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
   1063a:	f8cd 0c90 	str.w	r0, [sp, #3216]	; 0xc90
                for i in 0..(x + 1) {
   1063e:	1c41      	adds	r1, r0, #1
   10640:	460a      	mov	r2, r1
   10642:	4281      	cmp	r1, r0
   10644:	920c      	str	r2, [sp, #48]	; 0x30
   10646:	f0c0 80bb 	bcc.w	107c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x35e4>
   1064a:	e7ff      	b.n	1064c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3470>
   1064c:	2000      	movs	r0, #0
   1064e:	f8cd 0c28 	str.w	r0, [sp, #3112]	; 0xc28
   10652:	980c      	ldr	r0, [sp, #48]	; 0x30
   10654:	f8cd 0c2c 	str.w	r0, [sp, #3116]	; 0xc2c
   10658:	f8dd 0c28 	ldr.w	r0, [sp, #3112]	; 0xc28
   1065c:	f8dd 1c2c 	ldr.w	r1, [sp, #3116]	; 0xc2c
   10660:	f001 faf3 	bl	11c4a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
   10664:	900b      	str	r0, [sp, #44]	; 0x2c
   10666:	910a      	str	r1, [sp, #40]	; 0x28
   10668:	e7ff      	b.n	1066a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x348e>
   1066a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1066c:	f8cd 0c30 	str.w	r0, [sp, #3120]	; 0xc30
   10670:	990a      	ldr	r1, [sp, #40]	; 0x28
   10672:	f8cd 1c34 	str.w	r1, [sp, #3124]	; 0xc34
   10676:	e7ff      	b.n	10678 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x349c>
   10678:	f50d 6043 	add.w	r0, sp, #3120	; 0xc30
   1067c:	f001 fa5a 	bl	11b34 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   10680:	f8cd 1c3c 	str.w	r1, [sp, #3132]	; 0xc3c
   10684:	f8cd 0c38 	str.w	r0, [sp, #3128]	; 0xc38
   10688:	e7ff      	b.n	1068a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x34ae>
   1068a:	f8dd 0c38 	ldr.w	r0, [sp, #3128]	; 0xc38
   1068e:	2800      	cmp	r0, #0
   10690:	d001      	beq.n	10696 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x34ba>
   10692:	e7ff      	b.n	10694 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x34b8>
   10694:	e001      	b.n	1069a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x34be>
        match (
   10696:	e06e      	b.n	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
                for i in 0..(x + 1) {
   10698:	defe      	udf	#254	; 0xfe
   1069a:	f8dd 0c3c 	ldr.w	r0, [sp, #3132]	; 0xc3c
   1069e:	f8cd 0c94 	str.w	r0, [sp, #3220]	; 0xc94
   106a2:	f8cd 0c98 	str.w	r0, [sp, #3224]	; 0xc98
   106a6:	f8cd 0c9c 	str.w	r0, [sp, #3228]	; 0xc9c
                    self.v[i] = self.mem[self.i as usize + i];
   106aa:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   106ae:	8a0a      	ldrh	r2, [r1, #16]
   106b0:	1813      	adds	r3, r2, r0
   106b2:	469c      	mov	ip, r3
   106b4:	4293      	cmp	r3, r2
   106b6:	9009      	str	r0, [sp, #36]	; 0x24
   106b8:	f8cd c020 	str.w	ip, [sp, #32]
   106bc:	f0c0 808c 	bcc.w	107d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x35fc>
   106c0:	e7ff      	b.n	106c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x34e6>
   106c2:	2000      	movs	r0, #0
   106c4:	9908      	ldr	r1, [sp, #32]
   106c6:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   106ca:	f040 8091 	bne.w	107f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3614>
   106ce:	e7ff      	b.n	106d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x34f4>
   106d0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   106d4:	9908      	ldr	r1, [sp, #32]
   106d6:	1842      	adds	r2, r0, r1
   106d8:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
   106dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   106de:	2b0f      	cmp	r3, #15
   106e0:	9207      	str	r2, [sp, #28]
   106e2:	f200 808f 	bhi.w	10804 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3628>
   106e6:	e7ff      	b.n	106e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x350c>
   106e8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   106ec:	9909      	ldr	r1, [sp, #36]	; 0x24
   106ee:	1842      	adds	r2, r0, r1
   106f0:	9b07      	ldr	r3, [sp, #28]
   106f2:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                for i in 0..(x + 1) {
   106f6:	e7bf      	b.n	10678 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x349c>
   106f8:	f646 6107 	movw	r1, #28167	; 0x6e07
   106fc:	f2c0 0101 	movt	r1, #1
   10700:	f8dd 0430 	ldr.w	r0, [sp, #1072]	; 0x430
   10704:	f7f9 fec5 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   10708:	9006      	str	r0, [sp, #24]
   1070a:	9105      	str	r1, [sp, #20]
   1070c:	e7ff      	b.n	1070e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3532>
   1070e:	f8dd 042c 	ldr.w	r0, [sp, #1068]	; 0x42c
   10712:	f8cd 0c58 	str.w	r0, [sp, #3160]	; 0xc58
   10716:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   1071a:	f8cd 1c5c 	str.w	r1, [sp, #3164]	; 0xc5c
   1071e:	9a06      	ldr	r2, [sp, #24]
   10720:	f8cd 2c60 	str.w	r2, [sp, #3168]	; 0xc60
   10724:	9b05      	ldr	r3, [sp, #20]
   10726:	f8cd 3c64 	str.w	r3, [sp, #3172]	; 0xc64
   1072a:	f64d 3c8c 	movw	ip, #56204	; 0xdb8c
   1072e:	f2c0 0c01 	movt	ip, #1
   10732:	f8dc c000 	ldr.w	ip, [ip]
   10736:	46ee      	mov	lr, sp
   10738:	2402      	movs	r4, #2
   1073a:	f8ce 4008 	str.w	r4, [lr, #8]
   1073e:	f8ce c004 	str.w	ip, [lr, #4]
   10742:	f8ce 4000 	str.w	r4, [lr]
   10746:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
   1074a:	f60d 4358 	addw	r3, sp, #3160	; 0xc58
   1074e:	f8dd 1434 	ldr.w	r1, [sp, #1076]	; 0x434
   10752:	4622      	mov	r2, r4
   10754:	f004 f867 	bl	14826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   10758:	e7ff      	b.n	1075a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x357e>
   1075a:	f64d 30b0 	movw	r0, #56240	; 0xdbb0
   1075e:	f2c0 0001 	movt	r0, #1
   10762:	f004 ff3c 	bl	155de <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   10766:	9004      	str	r0, [sp, #16]
   10768:	e7ff      	b.n	1076a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x358e>
   1076a:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
   1076e:	9904      	ldr	r1, [sp, #16]
   10770:	f004 ff72 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   10774:	defe      	udf	#254	; 0xfe
        }
    }
   10776:	f50d 6d6c 	add.w	sp, sp, #3776	; 0xec0
   1077a:	bd70      	pop	{r4, r5, r6, pc}
        let h = self.mem[self.pc as usize] as u16;
   1077c:	f64c 7050 	movw	r0, #53072	; 0xcf50
   10780:	f2c0 0001 	movt	r0, #1
   10784:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10788:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
   1078c:	f004 ff44 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10790:	defe      	udf	#254	; 0xfe
        let l = self.mem[(self.pc + 1) as usize] as u16;
   10792:	f64c 7070 	movw	r0, #53104	; 0xcf70
   10796:	f2c0 0001 	movt	r0, #1
   1079a:	f64c 7260 	movw	r2, #53088	; 0xcf60
   1079e:	f2c0 0201 	movt	r2, #1
   107a2:	211c      	movs	r1, #28
   107a4:	f004 ff22 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   107a8:	defe      	udf	#254	; 0xfe
   107aa:	f64c 708c 	movw	r0, #53132	; 0xcf8c
   107ae:	f2c0 0001 	movt	r0, #1
   107b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   107b6:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
   107ba:	f004 ff2d 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   107be:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
   107c0:	f64c 7070 	movw	r0, #53104	; 0xcf70
   107c4:	f2c0 0001 	movt	r0, #1
   107c8:	f24d 022c 	movw	r2, #53292	; 0xd02c
   107cc:	f2c0 0201 	movt	r2, #1
   107d0:	211c      	movs	r1, #28
   107d2:	f004 ff0b 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   107d6:	defe      	udf	#254	; 0xfe
                    self.v[i] = self.mem[self.i as usize + i];
   107d8:	f64c 7070 	movw	r0, #53104	; 0xcf70
   107dc:	f2c0 0001 	movt	r0, #1
   107e0:	f24d 023c 	movw	r2, #53308	; 0xd03c
   107e4:	f2c0 0201 	movt	r2, #1
   107e8:	211c      	movs	r1, #28
   107ea:	f004 feff 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   107ee:	defe      	udf	#254	; 0xfe
   107f0:	f24d 004c 	movw	r0, #53324	; 0xd04c
   107f4:	f2c0 0001 	movt	r0, #1
   107f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   107fc:	9908      	ldr	r1, [sp, #32]
   107fe:	f004 ff0b 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10802:	defe      	udf	#254	; 0xfe
   10804:	f24d 005c 	movw	r0, #53340	; 0xd05c
   10808:	f2c0 0001 	movt	r0, #1
   1080c:	2210      	movs	r2, #16
   1080e:	9909      	ldr	r1, [sp, #36]	; 0x24
   10810:	f004 ff02 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10814:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
   10816:	f64c 7070 	movw	r0, #53104	; 0xcf70
   1081a:	f2c0 0001 	movt	r0, #1
   1081e:	f24d 02ac 	movw	r2, #53420	; 0xd0ac
   10822:	f2c0 0201 	movt	r2, #1
   10826:	211c      	movs	r1, #28
   10828:	f004 fee0 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1082c:	defe      	udf	#254	; 0xfe
                    self.mem[self.i as usize + i] = self.v[i];
   1082e:	f24d 00bc 	movw	r0, #53436	; 0xd0bc
   10832:	f2c0 0001 	movt	r0, #1
   10836:	2210      	movs	r2, #16
   10838:	9914      	ldr	r1, [sp, #80]	; 0x50
   1083a:	f004 feed 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1083e:	defe      	udf	#254	; 0xfe
   10840:	f64c 7070 	movw	r0, #53104	; 0xcf70
   10844:	f2c0 0001 	movt	r0, #1
   10848:	f24d 02cc 	movw	r2, #53452	; 0xd0cc
   1084c:	f2c0 0201 	movt	r2, #1
   10850:	211c      	movs	r1, #28
   10852:	f004 fecb 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10856:	defe      	udf	#254	; 0xfe
   10858:	f24d 00dc 	movw	r0, #53468	; 0xd0dc
   1085c:	f2c0 0001 	movt	r0, #1
   10860:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10864:	9912      	ldr	r1, [sp, #72]	; 0x48
   10866:	f004 fed7 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1086a:	defe      	udf	#254	; 0xfe
                let bcd = self.v[x];
   1086c:	f24d 102c 	movw	r0, #53548	; 0xd12c
   10870:	f2c0 0001 	movt	r0, #1
   10874:	2210      	movs	r2, #16
   10876:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1087a:	f004 fecd 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1087e:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize] = (bcd / 100) % 10;
   10880:	f24d 103c 	movw	r0, #53564	; 0xd13c
   10884:	f2c0 0001 	movt	r0, #1
   10888:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1088c:	9920      	ldr	r1, [sp, #128]	; 0x80
   1088e:	f004 fec3 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10892:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
   10894:	f64c 7070 	movw	r0, #53104	; 0xcf70
   10898:	f2c0 0001 	movt	r0, #1
   1089c:	f24d 124c 	movw	r2, #53580	; 0xd14c
   108a0:	f2c0 0201 	movt	r2, #1
   108a4:	211c      	movs	r1, #28
   108a6:	f004 fea1 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   108aa:	defe      	udf	#254	; 0xfe
   108ac:	f24d 105c 	movw	r0, #53596	; 0xd15c
   108b0:	f2c0 0001 	movt	r0, #1
   108b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   108b8:	991e      	ldr	r1, [sp, #120]	; 0x78
   108ba:	f004 fead 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   108be:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 2] = bcd % 10;
   108c0:	f64c 7070 	movw	r0, #53104	; 0xcf70
   108c4:	f2c0 0001 	movt	r0, #1
   108c8:	f24d 126c 	movw	r2, #53612	; 0xd16c
   108cc:	f2c0 0201 	movt	r2, #1
   108d0:	211c      	movs	r1, #28
   108d2:	f004 fe8b 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   108d6:	defe      	udf	#254	; 0xfe
   108d8:	f24d 107c 	movw	r0, #53628	; 0xd17c
   108dc:	f2c0 0001 	movt	r0, #1
   108e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   108e4:	991d      	ldr	r1, [sp, #116]	; 0x74
   108e6:	f004 fe97 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   108ea:	defe      	udf	#254	; 0xfe
                self.i = (self.v[x] * 5).into();
   108ec:	f24d 10cc 	movw	r0, #53708	; 0xd1cc
   108f0:	f2c0 0001 	movt	r0, #1
   108f4:	2210      	movs	r2, #16
   108f6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   108fa:	f004 fe8d 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   108fe:	defe      	udf	#254	; 0xfe
   10900:	f24d 10f0 	movw	r0, #53744	; 0xd1f0
   10904:	f2c0 0001 	movt	r0, #1
   10908:	f24d 12dc 	movw	r2, #53724	; 0xd1dc
   1090c:	f2c0 0201 	movt	r2, #1
   10910:	2121      	movs	r1, #33	; 0x21
   10912:	f004 fe6b 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10916:	defe      	udf	#254	; 0xfe
                self.i = self.i.wrapping_add(self.v[x].into());
   10918:	f24d 2050 	movw	r0, #53840	; 0xd250
   1091c:	f2c0 0001 	movt	r0, #1
   10920:	2210      	movs	r2, #16
   10922:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10926:	f004 fe77 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1092a:	defe      	udf	#254	; 0xfe
                self.st = self.v[x];
   1092c:	f24d 20a0 	movw	r0, #53920	; 0xd2a0
   10930:	f2c0 0001 	movt	r0, #1
   10934:	2210      	movs	r2, #16
   10936:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1093a:	f004 fe6d 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1093e:	defe      	udf	#254	; 0xfe
                self.dt = self.v[x];
   10940:	f24d 20f0 	movw	r0, #54000	; 0xd2f0
   10944:	f2c0 0001 	movt	r0, #1
   10948:	2210      	movs	r2, #16
   1094a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1094e:	f004 fe63 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10952:	defe      	udf	#254	; 0xfe
                self.v[x] = self.waitkey();
   10954:	f24d 3040 	movw	r0, #54080	; 0xd340
   10958:	f2c0 0001 	movt	r0, #1
   1095c:	2210      	movs	r2, #16
   1095e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10962:	f004 fe59 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10966:	defe      	udf	#254	; 0xfe
                self.v[x] = self.dt;
   10968:	f24d 3090 	movw	r0, #54160	; 0xd390
   1096c:	f2c0 0001 	movt	r0, #1
   10970:	2210      	movs	r2, #16
   10972:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10976:	f004 fe4f 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1097a:	defe      	udf	#254	; 0xfe
                if !self.hw.key(self.v[x]) {
   1097c:	f24d 30e0 	movw	r0, #54240	; 0xd3e0
   10980:	f2c0 0001 	movt	r0, #1
   10984:	2210      	movs	r2, #16
   10986:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1098a:	f004 fe45 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1098e:	defe      	udf	#254	; 0xfe
                if self.hw.key(self.v[x]) {
   10990:	f24d 4024 	movw	r0, #54308	; 0xd424
   10994:	f2c0 0001 	movt	r0, #1
   10998:	2210      	movs	r2, #16
   1099a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1099e:	f004 fe3b 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   109a2:	defe      	udf	#254	; 0xfe
                let basex = self.v[x] as usize;
   109a4:	f24d 4078 	movw	r0, #54392	; 0xd478
   109a8:	f2c0 0001 	movt	r0, #1
   109ac:	2210      	movs	r2, #16
   109ae:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   109b2:	f004 fe31 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   109b6:	defe      	udf	#254	; 0xfe
                let basey = self.v[y] as usize;
   109b8:	f24d 4088 	movw	r0, #54408	; 0xd488
   109bc:	f2c0 0001 	movt	r0, #1
   109c0:	2210      	movs	r2, #16
   109c2:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   109c6:	f004 fe27 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   109ca:	defe      	udf	#254	; 0xfe
                    let b = self.mem[self.i as usize + y];
   109cc:	f64c 7070 	movw	r0, #53104	; 0xcf70
   109d0:	f2c0 0001 	movt	r0, #1
   109d4:	f24d 4298 	movw	r2, #54424	; 0xd498
   109d8:	f2c0 0201 	movt	r2, #1
   109dc:	211c      	movs	r1, #28
   109de:	f004 fe05 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   109e2:	defe      	udf	#254	; 0xfe
   109e4:	f24d 40a8 	movw	r0, #54440	; 0xd4a8
   109e8:	f2c0 0001 	movt	r0, #1
   109ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   109f0:	9967      	ldr	r1, [sp, #412]	; 0x19c
   109f2:	f004 fe11 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   109f6:	defe      	udf	#254	; 0xfe
                    let vramy = (y + basey) % h;
   109f8:	f64c 7070 	movw	r0, #53104	; 0xcf70
   109fc:	f2c0 0001 	movt	r0, #1
   10a00:	f24d 42b8 	movw	r2, #54456	; 0xd4b8
   10a04:	f2c0 0201 	movt	r2, #1
   10a08:	211c      	movs	r1, #28
   10a0a:	f004 fdef 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10a0e:	defe      	udf	#254	; 0xfe
   10a10:	f24d 40d0 	movw	r0, #54480	; 0xd4d0
   10a14:	f2c0 0001 	movt	r0, #1
   10a18:	f24d 42b8 	movw	r2, #54456	; 0xd4b8
   10a1c:	f2c0 0201 	movt	r2, #1
   10a20:	2139      	movs	r1, #57	; 0x39
   10a22:	f004 fde3 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10a26:	defe      	udf	#254	; 0xfe
                        let vramx = (x + basex) % w;
   10a28:	f64c 7070 	movw	r0, #53104	; 0xcf70
   10a2c:	f2c0 0001 	movt	r0, #1
   10a30:	f24d 520c 	movw	r2, #54540	; 0xd50c
   10a34:	f2c0 0201 	movt	r2, #1
   10a38:	211c      	movs	r1, #28
   10a3a:	f004 fdd7 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10a3e:	defe      	udf	#254	; 0xfe
   10a40:	f24d 40d0 	movw	r0, #54480	; 0xd4d0
   10a44:	f2c0 0001 	movt	r0, #1
   10a48:	f24d 520c 	movw	r2, #54540	; 0xd50c
   10a4c:	f2c0 0201 	movt	r2, #1
   10a50:	2139      	movs	r1, #57	; 0x39
   10a52:	f004 fdcb 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10a56:	defe      	udf	#254	; 0xfe
                        let src = (b & 1 << (7 - x)) > 0;
   10a58:	f24d 5030 	movw	r0, #54576	; 0xd530
   10a5c:	f2c0 0001 	movt	r0, #1
   10a60:	f24d 521c 	movw	r2, #54556	; 0xd51c
   10a64:	f2c0 0201 	movt	r2, #1
   10a68:	2121      	movs	r1, #33	; 0x21
   10a6a:	f004 fdbf 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10a6e:	defe      	udf	#254	; 0xfe
   10a70:	f24d 5070 	movw	r0, #54640	; 0xd570
   10a74:	f2c0 0001 	movt	r0, #1
   10a78:	f24d 5254 	movw	r2, #54612	; 0xd554
   10a7c:	f2c0 0201 	movt	r2, #1
   10a80:	2123      	movs	r1, #35	; 0x23
   10a82:	f004 fdb3 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10a86:	defe      	udf	#254	; 0xfe
                self.v[x] = self.hw.rand() & kk;
   10a88:	f24d 50d4 	movw	r0, #54740	; 0xd5d4
   10a8c:	f2c0 0001 	movt	r0, #1
   10a90:	2210      	movs	r2, #16
   10a92:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10a96:	f004 fdbf 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a9a:	defe      	udf	#254	; 0xfe
                if self.v[x] != self.v[y] {
   10a9c:	f24d 60a4 	movw	r0, #54948	; 0xd6a4
   10aa0:	f2c0 0001 	movt	r0, #1
   10aa4:	2210      	movs	r2, #16
   10aa6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10aaa:	f004 fdb5 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10aae:	defe      	udf	#254	; 0xfe
   10ab0:	f24d 60b4 	movw	r0, #54964	; 0xd6b4
   10ab4:	f2c0 0001 	movt	r0, #1
   10ab8:	2210      	movs	r2, #16
   10aba:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10abe:	f004 fdab 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10ac2:	defe      	udf	#254	; 0xfe
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
   10ac4:	f24d 7004 	movw	r0, #55044	; 0xd704
   10ac8:	f2c0 0001 	movt	r0, #1
   10acc:	2210      	movs	r2, #16
   10ace:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10ad2:	f004 fda1 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10ad6:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shl(1);
   10ad8:	f24d 7014 	movw	r0, #55060	; 0xd714
   10adc:	f2c0 0001 	movt	r0, #1
   10ae0:	2210      	movs	r2, #16
   10ae2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10ae6:	f004 fd97 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10aea:	defe      	udf	#254	; 0xfe
   10aec:	f24d 7024 	movw	r0, #55076	; 0xd724
   10af0:	f2c0 0001 	movt	r0, #1
   10af4:	2210      	movs	r2, #16
   10af6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10afa:	f004 fd8d 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10afe:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
   10b00:	f24d 7078 	movw	r0, #55160	; 0xd778
   10b04:	f2c0 0001 	movt	r0, #1
   10b08:	2210      	movs	r2, #16
   10b0a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10b0e:	f004 fd83 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b12:	defe      	udf	#254	; 0xfe
   10b14:	f24d 7088 	movw	r0, #55176	; 0xd788
   10b18:	f2c0 0001 	movt	r0, #1
   10b1c:	2210      	movs	r2, #16
   10b1e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10b22:	f004 fd79 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b26:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   10b28:	f24d 7098 	movw	r0, #55192	; 0xd798
   10b2c:	f2c0 0001 	movt	r0, #1
   10b30:	2210      	movs	r2, #16
   10b32:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10b36:	f004 fd6f 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b3a:	defe      	udf	#254	; 0xfe
                self.v[0xf] = self.v[x] & 1;
   10b3c:	f24d 70e8 	movw	r0, #55272	; 0xd7e8
   10b40:	f2c0 0001 	movt	r0, #1
   10b44:	2210      	movs	r2, #16
   10b46:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10b4a:	f004 fd65 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b4e:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shr(1);
   10b50:	f24d 70f8 	movw	r0, #55288	; 0xd7f8
   10b54:	f2c0 0001 	movt	r0, #1
   10b58:	2210      	movs	r2, #16
   10b5a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10b5e:	f004 fd5b 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b62:	defe      	udf	#254	; 0xfe
   10b64:	f64d 0008 	movw	r0, #55304	; 0xd808
   10b68:	f2c0 0001 	movt	r0, #1
   10b6c:	2210      	movs	r2, #16
   10b6e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10b72:	f004 fd51 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b76:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
   10b78:	f64d 0058 	movw	r0, #55384	; 0xd858
   10b7c:	f2c0 0001 	movt	r0, #1
   10b80:	2210      	movs	r2, #16
   10b82:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10b86:	f004 fd47 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b8a:	defe      	udf	#254	; 0xfe
   10b8c:	f64d 0068 	movw	r0, #55400	; 0xd868
   10b90:	f2c0 0001 	movt	r0, #1
   10b94:	2210      	movs	r2, #16
   10b96:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10b9a:	f004 fd3d 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b9e:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   10ba0:	f64d 0078 	movw	r0, #55416	; 0xd878
   10ba4:	f2c0 0001 	movt	r0, #1
   10ba8:	2210      	movs	r2, #16
   10baa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10bae:	f004 fd33 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10bb2:	defe      	udf	#254	; 0xfe
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
   10bb4:	f64d 00c8 	movw	r0, #55496	; 0xd8c8
   10bb8:	f2c0 0001 	movt	r0, #1
   10bbc:	2210      	movs	r2, #16
   10bbe:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10bc2:	f004 fd29 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10bc6:	defe      	udf	#254	; 0xfe
   10bc8:	f64d 00d8 	movw	r0, #55512	; 0xd8d8
   10bcc:	f2c0 0001 	movt	r0, #1
   10bd0:	2210      	movs	r2, #16
   10bd2:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10bd6:	f004 fd1f 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10bda:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   10bdc:	f64d 00e8 	movw	r0, #55528	; 0xd8e8
   10be0:	f2c0 0001 	movt	r0, #1
   10be4:	2210      	movs	r2, #16
   10be6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10bea:	f004 fd15 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10bee:	defe      	udf	#254	; 0xfe
                self.v[x] ^= self.v[y];
   10bf0:	f64d 1038 	movw	r0, #55608	; 0xd938
   10bf4:	f2c0 0001 	movt	r0, #1
   10bf8:	2210      	movs	r2, #16
   10bfa:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10bfe:	f004 fd0b 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c02:	defe      	udf	#254	; 0xfe
   10c04:	f64d 1048 	movw	r0, #55624	; 0xd948
   10c08:	f2c0 0001 	movt	r0, #1
   10c0c:	2210      	movs	r2, #16
   10c0e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c12:	f004 fd01 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c16:	defe      	udf	#254	; 0xfe
                self.v[x] &= self.v[y];
   10c18:	f64d 1098 	movw	r0, #55704	; 0xd998
   10c1c:	f2c0 0001 	movt	r0, #1
   10c20:	2210      	movs	r2, #16
   10c22:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10c26:	f004 fcf7 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c2a:	defe      	udf	#254	; 0xfe
   10c2c:	f64d 10a8 	movw	r0, #55720	; 0xd9a8
   10c30:	f2c0 0001 	movt	r0, #1
   10c34:	2210      	movs	r2, #16
   10c36:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c3a:	f004 fced 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c3e:	defe      	udf	#254	; 0xfe
                self.v[x] |= self.v[y];
   10c40:	f64d 10f8 	movw	r0, #55800	; 0xd9f8
   10c44:	f2c0 0001 	movt	r0, #1
   10c48:	2210      	movs	r2, #16
   10c4a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10c4e:	f004 fce3 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c52:	defe      	udf	#254	; 0xfe
   10c54:	f64d 2008 	movw	r0, #55816	; 0xda08
   10c58:	f2c0 0001 	movt	r0, #1
   10c5c:	2210      	movs	r2, #16
   10c5e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c62:	f004 fcd9 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c66:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[y];
   10c68:	f64d 2058 	movw	r0, #55896	; 0xda58
   10c6c:	f2c0 0001 	movt	r0, #1
   10c70:	2210      	movs	r2, #16
   10c72:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10c76:	f004 fccf 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c7a:	defe      	udf	#254	; 0xfe
   10c7c:	f64d 2068 	movw	r0, #55912	; 0xda68
   10c80:	f2c0 0001 	movt	r0, #1
   10c84:	2210      	movs	r2, #16
   10c86:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c8a:	f004 fcc5 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c8e:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_add(kk);
   10c90:	f64d 20b8 	movw	r0, #55992	; 0xdab8
   10c94:	f2c0 0001 	movt	r0, #1
   10c98:	2210      	movs	r2, #16
   10c9a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c9e:	f004 fcbb 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10ca2:	defe      	udf	#254	; 0xfe
   10ca4:	f64d 20c8 	movw	r0, #56008	; 0xdac8
   10ca8:	f2c0 0001 	movt	r0, #1
   10cac:	2210      	movs	r2, #16
   10cae:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10cb2:	f004 fcb1 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10cb6:	defe      	udf	#254	; 0xfe
                self.v[x] = kk;
   10cb8:	f64d 3018 	movw	r0, #56088	; 0xdb18
   10cbc:	f2c0 0001 	movt	r0, #1
   10cc0:	2210      	movs	r2, #16
   10cc2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10cc6:	f004 fca7 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10cca:	defe      	udf	#254	; 0xfe
                if self.v[x] == self.v[y] {
   10ccc:	f64d 4000 	movw	r0, #56320	; 0xdc00
   10cd0:	f2c0 0001 	movt	r0, #1
   10cd4:	2210      	movs	r2, #16
   10cd6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10cda:	f004 fc9d 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10cde:	defe      	udf	#254	; 0xfe
   10ce0:	f64d 4010 	movw	r0, #56336	; 0xdc10
   10ce4:	f2c0 0001 	movt	r0, #1
   10ce8:	2210      	movs	r2, #16
   10cea:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10cee:	f004 fc93 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10cf2:	defe      	udf	#254	; 0xfe
                if self.v[x] != kk {
   10cf4:	f64d 4060 	movw	r0, #56416	; 0xdc60
   10cf8:	f2c0 0001 	movt	r0, #1
   10cfc:	2210      	movs	r2, #16
   10cfe:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10d02:	f004 fc89 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d06:	defe      	udf	#254	; 0xfe
                if self.v[x] == kk {
   10d08:	f64d 40b0 	movw	r0, #56496	; 0xdcb0
   10d0c:	f2c0 0001 	movt	r0, #1
   10d10:	2210      	movs	r2, #16
   10d12:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10d16:	f004 fc7f 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d1a:	defe      	udf	#254	; 0xfe

00010d1c <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17ha6efa376ff520dabE>:
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
   10d1c:	b580      	push	{r7, lr}
   10d1e:	b086      	sub	sp, #24
   10d20:	9104      	str	r1, [sp, #16]
   10d22:	9205      	str	r2, [sp, #20]
   10d24:	6809      	ldr	r1, [r1, #0]
   10d26:	6809      	ldr	r1, [r1, #0]
   10d28:	2300      	movs	r3, #0
   10d2a:	9301      	str	r3, [sp, #4]
   10d2c:	9102      	str	r1, [sp, #8]
   10d2e:	9203      	str	r2, [sp, #12]
   10d30:	9901      	ldr	r1, [sp, #4]
   10d32:	9a02      	ldr	r2, [sp, #8]
   10d34:	9b03      	ldr	r3, [sp, #12]
   10d36:	f000 fbc4 	bl	114c2 <_ZN4core4iter6traits8iterator8Iterator3map17hfd3597918d2fce20E>
   10d3a:	e7ff      	b.n	10d3c <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17ha6efa376ff520dabE+0x20>
   10d3c:	b006      	add	sp, #24
   10d3e:	bd80      	pop	{r7, pc}

00010d40 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hb6f25fe722781fd6E>:
   10d40:	b084      	sub	sp, #16
   10d42:	9002      	str	r0, [sp, #8]
   10d44:	9103      	str	r1, [sp, #12]
   10d46:	6800      	ldr	r0, [r0, #0]
   10d48:	9000      	str	r0, [sp, #0]
   10d4a:	9101      	str	r1, [sp, #4]
   10d4c:	9800      	ldr	r0, [sp, #0]
   10d4e:	9901      	ldr	r1, [sp, #4]
   10d50:	b004      	add	sp, #16
   10d52:	4770      	bx	lr

00010d54 <_ZN8libchip814Chip8$LT$T$GT$4jump17h98fcf36ccb52be45E>:
    fn jump(&mut self, pc: u16) {
   10d54:	b082      	sub	sp, #8
   10d56:	460a      	mov	r2, r1
   10d58:	9000      	str	r0, [sp, #0]
   10d5a:	f8ad 1006 	strh.w	r1, [sp, #6]
        self.pc = pc;
   10d5e:	8241      	strh	r1, [r0, #18]
    }
   10d60:	b002      	add	sp, #8
   10d62:	4770      	bx	lr

00010d64 <_ZN8libchip814Chip8$LT$T$GT$4load17h41409d517e122012E>:
    fn load(&mut self, rom: &[u8]) {
   10d64:	b580      	push	{r7, lr}
   10d66:	b08a      	sub	sp, #40	; 0x28
   10d68:	9105      	str	r1, [sp, #20]
   10d6a:	9206      	str	r2, [sp, #24]
   10d6c:	9009      	str	r0, [sp, #36]	; 0x24
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
   10d6e:	3047      	adds	r0, #71	; 0x47
   10d70:	9905      	ldr	r1, [sp, #20]
   10d72:	9a06      	ldr	r2, [sp, #24]
   10d74:	9004      	str	r0, [sp, #16]
   10d76:	4608      	mov	r0, r1
   10d78:	4611      	mov	r1, r2
   10d7a:	f000 ff3f 	bl	11bfc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   10d7e:	9003      	str	r0, [sp, #12]
   10d80:	e7ff      	b.n	10d82 <_ZN8libchip814Chip8$LT$T$GT$4load17h41409d517e122012E+0x1e>
   10d82:	9803      	ldr	r0, [sp, #12]
   10d84:	f500 7100 	add.w	r1, r0, #512	; 0x200
   10d88:	460a      	mov	r2, r1
   10d8a:	4281      	cmp	r1, r0
   10d8c:	9202      	str	r2, [sp, #8]
   10d8e:	d318      	bcc.n	10dc2 <_ZN8libchip814Chip8$LT$T$GT$4load17h41409d517e122012E+0x5e>
   10d90:	e7ff      	b.n	10d92 <_ZN8libchip814Chip8$LT$T$GT$4load17h41409d517e122012E+0x2e>
   10d92:	f44f 7000 	mov.w	r0, #512	; 0x200
   10d96:	9007      	str	r0, [sp, #28]
   10d98:	9802      	ldr	r0, [sp, #8]
   10d9a:	9008      	str	r0, [sp, #32]
   10d9c:	9a07      	ldr	r2, [sp, #28]
   10d9e:	9b08      	ldr	r3, [sp, #32]
   10da0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   10da4:	9804      	ldr	r0, [sp, #16]
   10da6:	f003 fe95 	bl	14ad4 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE>
   10daa:	9001      	str	r0, [sp, #4]
   10dac:	9100      	str	r1, [sp, #0]
   10dae:	e7ff      	b.n	10db0 <_ZN8libchip814Chip8$LT$T$GT$4load17h41409d517e122012E+0x4c>
   10db0:	9a05      	ldr	r2, [sp, #20]
   10db2:	9b06      	ldr	r3, [sp, #24]
   10db4:	9801      	ldr	r0, [sp, #4]
   10db6:	9900      	ldr	r1, [sp, #0]
   10db8:	f7f7 ffd9 	bl	8d6e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
   10dbc:	e7ff      	b.n	10dbe <_ZN8libchip814Chip8$LT$T$GT$4load17h41409d517e122012E+0x5a>
    }
   10dbe:	b00a      	add	sp, #40	; 0x28
   10dc0:	bd80      	pop	{r7, pc}
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
   10dc2:	f64c 7070 	movw	r0, #53104	; 0xcf70
   10dc6:	f2c0 0001 	movt	r0, #1
   10dca:	f64d 620c 	movw	r2, #56844	; 0xde0c
   10dce:	f2c0 0201 	movt	r2, #1
   10dd2:	211c      	movs	r1, #28
   10dd4:	f004 fc0a 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10dd8:	defe      	udf	#254	; 0xfe

00010dda <_ZN8libchip814Chip8$LT$T$GT$4next17h079fcfcda82e796aE>:
    fn next(&mut self) {
   10dda:	b580      	push	{r7, lr}
   10ddc:	b084      	sub	sp, #16
   10dde:	9003      	str	r0, [sp, #12]
        self.jump(self.pc.wrapping_add(2));
   10de0:	8a41      	ldrh	r1, [r0, #18]
   10de2:	2202      	movs	r2, #2
   10de4:	9002      	str	r0, [sp, #8]
   10de6:	4608      	mov	r0, r1
   10de8:	4611      	mov	r1, r2
   10dea:	f003 fe1d 	bl	14a28 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
   10dee:	9001      	str	r0, [sp, #4]
   10df0:	e7ff      	b.n	10df2 <_ZN8libchip814Chip8$LT$T$GT$4next17h079fcfcda82e796aE+0x18>
   10df2:	9802      	ldr	r0, [sp, #8]
   10df4:	9901      	ldr	r1, [sp, #4]
   10df6:	f7ff ffad 	bl	10d54 <_ZN8libchip814Chip8$LT$T$GT$4jump17h98fcf36ccb52be45E>
   10dfa:	e7ff      	b.n	10dfc <_ZN8libchip814Chip8$LT$T$GT$4next17h079fcfcda82e796aE+0x22>
    }
   10dfc:	b004      	add	sp, #16
   10dfe:	bd80      	pop	{r7, pc}

00010e00 <_ZN8libchip814Chip8$LT$T$GT$4push17h2bc728f644865dbfE>:
    fn push(&mut self, item: u16) {
   10e00:	b580      	push	{r7, lr}
   10e02:	b086      	sub	sp, #24
   10e04:	460a      	mov	r2, r1
   10e06:	9004      	str	r0, [sp, #16]
   10e08:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.stack[self.sp as usize] = item;
   10e0c:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
   10e10:	460b      	mov	r3, r1
   10e12:	290f      	cmp	r1, #15
   10e14:	9003      	str	r0, [sp, #12]
   10e16:	9202      	str	r2, [sp, #8]
   10e18:	9301      	str	r3, [sp, #4]
   10e1a:	d813      	bhi.n	10e44 <_ZN8libchip814Chip8$LT$T$GT$4push17h2bc728f644865dbfE+0x44>
   10e1c:	e7ff      	b.n	10e1e <_ZN8libchip814Chip8$LT$T$GT$4push17h2bc728f644865dbfE+0x1e>
   10e1e:	9803      	ldr	r0, [sp, #12]
   10e20:	9901      	ldr	r1, [sp, #4]
   10e22:	eb00 0241 	add.w	r2, r0, r1, lsl #1
   10e26:	9b02      	ldr	r3, [sp, #8]
   10e28:	8293      	strh	r3, [r2, #20]
        self.sp = self.sp.wrapping_add(1);
   10e2a:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
   10e2e:	2101      	movs	r1, #1
   10e30:	f003 fd5d 	bl	148ee <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>
   10e34:	9000      	str	r0, [sp, #0]
   10e36:	e7ff      	b.n	10e38 <_ZN8libchip814Chip8$LT$T$GT$4push17h2bc728f644865dbfE+0x38>
   10e38:	9800      	ldr	r0, [sp, #0]
   10e3a:	9903      	ldr	r1, [sp, #12]
   10e3c:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
    }
   10e40:	b006      	add	sp, #24
   10e42:	bd80      	pop	{r7, pc}
        self.stack[self.sp as usize] = item;
   10e44:	f64d 601c 	movw	r0, #56860	; 0xde1c
   10e48:	f2c0 0001 	movt	r0, #1
   10e4c:	2210      	movs	r2, #16
   10e4e:	9901      	ldr	r1, [sp, #4]
   10e50:	f004 fbe2 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10e54:	defe      	udf	#254	; 0xfe

00010e56 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E>:
    fn tick(&mut self) {
   10e56:	b580      	push	{r7, lr}
   10e58:	b084      	sub	sp, #16
   10e5a:	9003      	str	r0, [sp, #12]
        if self.dt > 0 {
   10e5c:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
   10e60:	2900      	cmp	r1, #0
   10e62:	9002      	str	r0, [sp, #8]
   10e64:	d00f      	beq.n	10e86 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x30>
   10e66:	e7ff      	b.n	10e68 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x12>
            self.dt -= 1;
   10e68:	9802      	ldr	r0, [sp, #8]
   10e6a:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
   10e6e:	3901      	subs	r1, #1
   10e70:	b2ca      	uxtb	r2, r1
   10e72:	460b      	mov	r3, r1
   10e74:	428a      	cmp	r2, r1
   10e76:	9301      	str	r3, [sp, #4]
   10e78:	d129      	bne.n	10ece <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x78>
   10e7a:	e7ff      	b.n	10e7c <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x26>
   10e7c:	9801      	ldr	r0, [sp, #4]
   10e7e:	9902      	ldr	r1, [sp, #8]
   10e80:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
        if self.dt > 0 {
   10e84:	e7ff      	b.n	10e86 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x30>
        if self.st > 0 {
   10e86:	9802      	ldr	r0, [sp, #8]
   10e88:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
   10e8c:	2900      	cmp	r1, #0
   10e8e:	d01c      	beq.n	10eca <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x74>
   10e90:	e7ff      	b.n	10e92 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x3c>
            self.st -= 1;
   10e92:	9802      	ldr	r0, [sp, #8]
   10e94:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
   10e98:	3901      	subs	r1, #1
   10e9a:	b2ca      	uxtb	r2, r1
   10e9c:	460b      	mov	r3, r1
   10e9e:	428a      	cmp	r2, r1
   10ea0:	9300      	str	r3, [sp, #0]
   10ea2:	d120      	bne.n	10ee6 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x90>
   10ea4:	e7ff      	b.n	10ea6 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x50>
   10ea6:	9800      	ldr	r0, [sp, #0]
   10ea8:	9902      	ldr	r1, [sp, #8]
   10eaa:	f881 0045 	strb.w	r0, [r1, #69]	; 0x45
            if self.st == 0 {
   10eae:	f891 2045 	ldrb.w	r2, [r1, #69]	; 0x45
   10eb2:	2a00      	cmp	r2, #0
   10eb4:	d108      	bne.n	10ec8 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x72>
   10eb6:	e7ff      	b.n	10eb8 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x62>
   10eb8:	f241 0048 	movw	r0, #4168	; 0x1048
                self.hw.beep();
   10ebc:	9902      	ldr	r1, [sp, #8]
   10ebe:	4408      	add	r0, r1
   10ec0:	f7fa ffb0 	bl	be24 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha66b0913e7bbcba9E>
   10ec4:	e7ff      	b.n	10ec6 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x70>
            if self.st == 0 {
   10ec6:	e7ff      	b.n	10ec8 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x72>
        if self.st > 0 {
   10ec8:	e7ff      	b.n	10eca <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x74>
    }
   10eca:	b004      	add	sp, #16
   10ecc:	bd80      	pop	{r7, pc}
            self.dt -= 1;
   10ece:	f24d 5030 	movw	r0, #54576	; 0xd530
   10ed2:	f2c0 0001 	movt	r0, #1
   10ed6:	f64d 622c 	movw	r2, #56876	; 0xde2c
   10eda:	f2c0 0201 	movt	r2, #1
   10ede:	2121      	movs	r1, #33	; 0x21
   10ee0:	f004 fb84 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10ee4:	defe      	udf	#254	; 0xfe
            self.st -= 1;
   10ee6:	f24d 5030 	movw	r0, #54576	; 0xd530
   10eea:	f2c0 0001 	movt	r0, #1
   10eee:	f64d 623c 	movw	r2, #56892	; 0xde3c
   10ef2:	f2c0 0201 	movt	r2, #1
   10ef6:	2121      	movs	r1, #33	; 0x21
   10ef8:	f004 fb78 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10efc:	defe      	udf	#254	; 0xfe

00010efe <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E>:
    fn sched(&mut self) {
   10efe:	b510      	push	{r4, lr}
   10f00:	b098      	sub	sp, #96	; 0x60
   10f02:	9015      	str	r0, [sp, #84]	; 0x54
   10f04:	f241 0148 	movw	r1, #4168	; 0x1048
        if self.hw.sched() {
   10f08:	4401      	add	r1, r0
   10f0a:	900b      	str	r0, [sp, #44]	; 0x2c
   10f0c:	4608      	mov	r0, r1
   10f0e:	f7fa ff8d 	bl	be2c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE>
   10f12:	900a      	str	r0, [sp, #40]	; 0x28
   10f14:	e7ff      	b.n	10f16 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x18>
   10f16:	980a      	ldr	r0, [sp, #40]	; 0x28
   10f18:	07c1      	lsls	r1, r0, #31
   10f1a:	2900      	cmp	r1, #0
   10f1c:	d005      	beq.n	10f2a <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x2c>
   10f1e:	e7ff      	b.n	10f20 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x22>
            self.shutdown();
   10f20:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10f22:	f000 f90e 	bl	11142 <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h728c2b30a102c46bE>
   10f26:	e7ff      	b.n	10f28 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x2a>
        if self.hw.sched() {
   10f28:	e7ff      	b.n	10f2a <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x2c>
        if let Some(t) = self.time {
   10f2a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10f2c:	6801      	ldr	r1, [r0, #0]
   10f2e:	2901      	cmp	r1, #1
   10f30:	d009      	beq.n	10f46 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x48>
   10f32:	e7ff      	b.n	10f34 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x36>
   10f34:	f241 0048 	movw	r0, #4168	; 0x1048
            self.time = Some(self.hw.clock());
   10f38:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10f3a:	4408      	add	r0, r1
   10f3c:	f7fa ff10 	bl	bd60 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h3f18189aedbeb9e0E>
   10f40:	9109      	str	r1, [sp, #36]	; 0x24
   10f42:	9008      	str	r0, [sp, #32]
   10f44:	e046      	b.n	10fd4 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0xd6>
        if let Some(t) = self.time {
   10f46:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10f48:	6881      	ldr	r1, [r0, #8]
   10f4a:	68c2      	ldr	r2, [r0, #12]
   10f4c:	9217      	str	r2, [sp, #92]	; 0x5c
   10f4e:	9116      	str	r1, [sp, #88]	; 0x58
   10f50:	f241 0348 	movw	r3, #4168	; 0x1048
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
   10f54:	4418      	add	r0, r3
   10f56:	9107      	str	r1, [sp, #28]
   10f58:	9206      	str	r2, [sp, #24]
   10f5a:	f7fa ff01 	bl	bd60 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h3f18189aedbeb9e0E>
   10f5e:	9105      	str	r1, [sp, #20]
   10f60:	9004      	str	r0, [sp, #16]
   10f62:	e7ff      	b.n	10f64 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x66>
   10f64:	9804      	ldr	r0, [sp, #16]
   10f66:	9905      	ldr	r1, [sp, #20]
   10f68:	9a07      	ldr	r2, [sp, #28]
   10f6a:	9b06      	ldr	r3, [sp, #24]
   10f6c:	f003 fd7e 	bl	14a6c <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE>
   10f70:	9103      	str	r1, [sp, #12]
   10f72:	9002      	str	r0, [sp, #8]
   10f74:	e7ff      	b.n	10f76 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x78>
   10f76:	f245 002b 	movw	r0, #20523	; 0x502b
   10f7a:	f2c0 00fe 	movt	r0, #254	; 0xfe
   10f7e:	9902      	ldr	r1, [sp, #8]
   10f80:	1a08      	subs	r0, r1, r0
   10f82:	9a03      	ldr	r2, [sp, #12]
   10f84:	f172 0300 	sbcs.w	r3, r2, #0
   10f88:	d323      	bcc.n	10fd2 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0xd4>
   10f8a:	e7ff      	b.n	10f8c <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x8e>
                self.tick();
   10f8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10f8e:	f7ff ff62 	bl	10e56 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E>
   10f92:	e7ff      	b.n	10f94 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x96>
   10f94:	f241 0048 	movw	r0, #4168	; 0x1048
                self.time = Some(self.hw.clock());
   10f98:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10f9a:	4408      	add	r0, r1
   10f9c:	f7fa fee0 	bl	bd60 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h3f18189aedbeb9e0E>
   10fa0:	9101      	str	r1, [sp, #4]
   10fa2:	9000      	str	r0, [sp, #0]
   10fa4:	e7ff      	b.n	10fa6 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0xa8>
   10fa6:	9800      	ldr	r0, [sp, #0]
   10fa8:	900e      	str	r0, [sp, #56]	; 0x38
   10faa:	9901      	ldr	r1, [sp, #4]
   10fac:	910f      	str	r1, [sp, #60]	; 0x3c
   10fae:	2200      	movs	r2, #0
   10fb0:	920d      	str	r2, [sp, #52]	; 0x34
   10fb2:	2201      	movs	r2, #1
   10fb4:	920c      	str	r2, [sp, #48]	; 0x30
   10fb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10fb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10fba:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   10fbe:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   10fc2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   10fc4:	6063      	str	r3, [r4, #4]
   10fc6:	6022      	str	r2, [r4, #0]
   10fc8:	f8c4 e00c 	str.w	lr, [r4, #12]
   10fcc:	f8c4 c008 	str.w	ip, [r4, #8]
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
   10fd0:	e7ff      	b.n	10fd2 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0xd4>
        if let Some(t) = self.time {
   10fd2:	e015      	b.n	11000 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x102>
            self.time = Some(self.hw.clock());
   10fd4:	9808      	ldr	r0, [sp, #32]
   10fd6:	9012      	str	r0, [sp, #72]	; 0x48
   10fd8:	9909      	ldr	r1, [sp, #36]	; 0x24
   10fda:	9113      	str	r1, [sp, #76]	; 0x4c
   10fdc:	2200      	movs	r2, #0
   10fde:	9211      	str	r2, [sp, #68]	; 0x44
   10fe0:	2201      	movs	r2, #1
   10fe2:	9210      	str	r2, [sp, #64]	; 0x40
   10fe4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10fe6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10fe8:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   10fec:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
   10ff0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   10ff2:	6063      	str	r3, [r4, #4]
   10ff4:	6022      	str	r2, [r4, #0]
   10ff6:	f8c4 e00c 	str.w	lr, [r4, #12]
   10ffa:	f8c4 c008 	str.w	ip, [r4, #8]
        if let Some(t) = self.time {
   10ffe:	e7ff      	b.n	11000 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x102>
    }
   11000:	b018      	add	sp, #96	; 0x60
   11002:	bd10      	pop	{r4, pc}

00011004 <_ZN8libchip814Chip8$LT$T$GT$5setup17h331c1512aac9f047E>:
    fn setup(&mut self) {
   11004:	b580      	push	{r7, lr}
   11006:	b088      	sub	sp, #32
   11008:	9007      	str	r0, [sp, #28]
   1100a:	f44f 7100 	mov.w	r1, #512	; 0x200
        self.pc = ENTRY;
   1100e:	8241      	strh	r1, [r0, #18]
   11010:	f241 0148 	movw	r1, #4168	; 0x1048
        self.hw.vram_setsize(DISPS);
   11014:	4401      	add	r1, r0
   11016:	f24d 0204 	movw	r2, #53252	; 0xd004
   1101a:	f2c0 0201 	movt	r2, #1
   1101e:	6813      	ldr	r3, [r2, #0]
   11020:	6852      	ldr	r2, [r2, #4]
   11022:	9005      	str	r0, [sp, #20]
   11024:	4608      	mov	r0, r1
   11026:	4619      	mov	r1, r3
   11028:	f7fa fe43 	bl	bcb2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E>
   1102c:	e7ff      	b.n	1102e <_ZN8libchip814Chip8$LT$T$GT$5setup17h331c1512aac9f047E+0x2a>
        self.mem[..CHARBUF.len()].copy_from_slice(&CHARBUF);
   1102e:	9805      	ldr	r0, [sp, #20]
   11030:	f100 0147 	add.w	r1, r0, #71	; 0x47
   11034:	f64d 604c 	movw	r0, #56908	; 0xde4c
   11038:	f2c0 0001 	movt	r0, #1
   1103c:	2250      	movs	r2, #80	; 0x50
   1103e:	9104      	str	r1, [sp, #16]
   11040:	4611      	mov	r1, r2
   11042:	f000 fddb 	bl	11bfc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   11046:	9003      	str	r0, [sp, #12]
   11048:	e7ff      	b.n	1104a <_ZN8libchip814Chip8$LT$T$GT$5setup17h331c1512aac9f047E+0x46>
   1104a:	9803      	ldr	r0, [sp, #12]
   1104c:	9006      	str	r0, [sp, #24]
   1104e:	9a06      	ldr	r2, [sp, #24]
   11050:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   11054:	9804      	ldr	r0, [sp, #16]
   11056:	f7f7 ff87 	bl	8f68 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>
   1105a:	9002      	str	r0, [sp, #8]
   1105c:	9101      	str	r1, [sp, #4]
   1105e:	e7ff      	b.n	11060 <_ZN8libchip814Chip8$LT$T$GT$5setup17h331c1512aac9f047E+0x5c>
   11060:	f64d 624c 	movw	r2, #56908	; 0xde4c
   11064:	f2c0 0201 	movt	r2, #1
   11068:	2350      	movs	r3, #80	; 0x50
   1106a:	9802      	ldr	r0, [sp, #8]
   1106c:	9901      	ldr	r1, [sp, #4]
   1106e:	f7f7 fe7e 	bl	8d6e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
   11072:	e7ff      	b.n	11074 <_ZN8libchip814Chip8$LT$T$GT$5setup17h331c1512aac9f047E+0x70>
   11074:	f241 0047 	movw	r0, #4167	; 0x1047
   11078:	2101      	movs	r1, #1
        self.running = true;
   1107a:	9a05      	ldr	r2, [sp, #20]
   1107c:	5411      	strb	r1, [r2, r0]
    }
   1107e:	b008      	add	sp, #32
   11080:	bd80      	pop	{r7, pc}

00011082 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E>:
    fn waitkey(&mut self) -> u8 {
   11082:	b580      	push	{r7, lr}
   11084:	b08c      	sub	sp, #48	; 0x30
   11086:	900a      	str	r0, [sp, #40]	; 0x28
        while self.running {
   11088:	9005      	str	r0, [sp, #20]
   1108a:	e7ff      	b.n	1108c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0xa>
   1108c:	f241 0047 	movw	r0, #4167	; 0x1047
   11090:	9905      	ldr	r1, [sp, #20]
   11092:	5c08      	ldrb	r0, [r1, r0]
   11094:	07c0      	lsls	r0, r0, #31
   11096:	2800      	cmp	r0, #0
   11098:	d104      	bne.n	110a4 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0x22>
   1109a:	e7ff      	b.n	1109c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0x1a>
   1109c:	2020      	movs	r0, #32
        return b' ';
   1109e:	f88d 001b 	strb.w	r0, [sp, #27]
   110a2:	e04a      	b.n	1113a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0xb8>
            self.sched();
   110a4:	9805      	ldr	r0, [sp, #20]
   110a6:	f7ff ff2a 	bl	10efe <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E>
   110aa:	e7ff      	b.n	110ac <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0x2a>
   110ac:	2000      	movs	r0, #0
            for i in 0..0xf {
   110ae:	f88d 001c 	strb.w	r0, [sp, #28]
   110b2:	200f      	movs	r0, #15
   110b4:	f88d 001d 	strb.w	r0, [sp, #29]
   110b8:	f89d 001c 	ldrb.w	r0, [sp, #28]
   110bc:	f89d 101d 	ldrb.w	r1, [sp, #29]
   110c0:	f000 fa09 	bl	114d6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE>
   110c4:	9004      	str	r0, [sp, #16]
   110c6:	9103      	str	r1, [sp, #12]
   110c8:	e7ff      	b.n	110ca <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0x48>
   110ca:	9804      	ldr	r0, [sp, #16]
   110cc:	f88d 0020 	strb.w	r0, [sp, #32]
   110d0:	9903      	ldr	r1, [sp, #12]
   110d2:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
   110d6:	e7ff      	b.n	110d8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0x56>
   110d8:	a808      	add	r0, sp, #32
   110da:	f000 f98b 	bl	113f4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E>
   110de:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
   110e2:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   110e6:	e7ff      	b.n	110e8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0x66>
   110e8:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   110ec:	07c1      	lsls	r1, r0, #31
   110ee:	2900      	cmp	r1, #0
   110f0:	d001      	beq.n	110f6 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0x74>
   110f2:	e7ff      	b.n	110f4 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0x72>
   110f4:	e001      	b.n	110fa <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0x78>
        while self.running {
   110f6:	e7c9      	b.n	1108c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0xa>
            for i in 0..0xf {
   110f8:	defe      	udf	#254	; 0xfe
   110fa:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
   110fe:	4601      	mov	r1, r0
   11100:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   11104:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
   11108:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   1110c:	f241 0248 	movw	r2, #4168	; 0x1048
                if self.hw.key(i) {
   11110:	9b05      	ldr	r3, [sp, #20]
   11112:	441a      	add	r2, r3
   11114:	9002      	str	r0, [sp, #8]
   11116:	4610      	mov	r0, r2
   11118:	9a02      	ldr	r2, [sp, #8]
   1111a:	9101      	str	r1, [sp, #4]
   1111c:	4611      	mov	r1, r2
   1111e:	f7fa fc37 	bl	b990 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17he15d36584013bbaeE>
   11122:	9000      	str	r0, [sp, #0]
   11124:	e7ff      	b.n	11126 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0xa4>
   11126:	9800      	ldr	r0, [sp, #0]
   11128:	07c1      	lsls	r1, r0, #31
   1112a:	2900      	cmp	r1, #0
   1112c:	d101      	bne.n	11132 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0xb0>
   1112e:	e7ff      	b.n	11130 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0xae>
            for i in 0..0xf {
   11130:	e7d2      	b.n	110d8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0x56>
                    return i;
   11132:	9801      	ldr	r0, [sp, #4]
   11134:	f88d 001b 	strb.w	r0, [sp, #27]
   11138:	e7ff      	b.n	1113a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0xb8>
    }
   1113a:	f89d 001b 	ldrb.w	r0, [sp, #27]
   1113e:	b00c      	add	sp, #48	; 0x30
   11140:	bd80      	pop	{r7, pc}

00011142 <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h728c2b30a102c46bE>:
    fn shutdown(&mut self) {
   11142:	b081      	sub	sp, #4
   11144:	9000      	str	r0, [sp, #0]
   11146:	f241 0147 	movw	r1, #4167	; 0x1047
   1114a:	2200      	movs	r2, #0
        self.running = false;
   1114c:	5442      	strb	r2, [r0, r1]
    }
   1114e:	b001      	add	sp, #4
   11150:	4770      	bx	lr

00011152 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04da96b0e9749c79E>:
   11152:	b580      	push	{r7, lr}
   11154:	b082      	sub	sp, #8
   11156:	9101      	str	r1, [sp, #4]
   11158:	f000 f803 	bl	11162 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E>
   1115c:	e7ff      	b.n	1115e <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04da96b0e9749c79E+0xc>
   1115e:	b002      	add	sp, #8
   11160:	bd80      	pop	{r7, pc}

00011162 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E>:
   11162:	b580      	push	{r7, lr}
   11164:	b0a0      	sub	sp, #128	; 0x80
   11166:	911c      	str	r1, [sp, #112]	; 0x70
   11168:	9103      	str	r1, [sp, #12]
   1116a:	9002      	str	r0, [sp, #8]
   1116c:	e7ff      	b.n	1116e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xc>
   1116e:	9803      	ldr	r0, [sp, #12]
   11170:	68c1      	ldr	r1, [r0, #12]
   11172:	2901      	cmp	r1, #1
   11174:	d11e      	bne.n	111b4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x52>
   11176:	e7ff      	b.n	11178 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x16>
   11178:	9803      	ldr	r0, [sp, #12]
   1117a:	f100 0110 	add.w	r1, r0, #16
   1117e:	911e      	str	r1, [sp, #120]	; 0x78
   11180:	a804      	add	r0, sp, #16
   11182:	f000 f90b 	bl	1139c <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5039ae5c012134d0E>
   11186:	e7ff      	b.n	11188 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x26>
   11188:	9804      	ldr	r0, [sp, #16]
   1118a:	2801      	cmp	r0, #1
   1118c:	d001      	beq.n	11192 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x30>
   1118e:	e7ff      	b.n	11190 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x2e>
   11190:	e00f      	b.n	111b2 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x50>
   11192:	9804      	ldr	r0, [sp, #16]
   11194:	9905      	ldr	r1, [sp, #20]
   11196:	9a06      	ldr	r2, [sp, #24]
   11198:	9209      	str	r2, [sp, #36]	; 0x24
   1119a:	9108      	str	r1, [sp, #32]
   1119c:	9007      	str	r0, [sp, #28]
   1119e:	9807      	ldr	r0, [sp, #28]
   111a0:	9908      	ldr	r1, [sp, #32]
   111a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   111a4:	9b02      	ldr	r3, [sp, #8]
   111a6:	609a      	str	r2, [r3, #8]
   111a8:	6059      	str	r1, [r3, #4]
   111aa:	6018      	str	r0, [r3, #0]
   111ac:	e7ff      	b.n	111ae <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x4c>
   111ae:	b020      	add	sp, #128	; 0x80
   111b0:	bd80      	pop	{r7, pc}
   111b2:	e7ff      	b.n	111b4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x52>
   111b4:	a80a      	add	r0, sp, #40	; 0x28
   111b6:	9903      	ldr	r1, [sp, #12]
   111b8:	f000 f906 	bl	113c8 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h53e4f1f46625fe50E>
   111bc:	e7ff      	b.n	111be <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x5c>
   111be:	980a      	ldr	r0, [sp, #40]	; 0x28
   111c0:	2800      	cmp	r0, #0
   111c2:	d012      	beq.n	111ea <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x88>
   111c4:	e7ff      	b.n	111c6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x64>
   111c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   111c8:	990c      	ldr	r1, [sp, #48]	; 0x30
   111ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   111cc:	9211      	str	r2, [sp, #68]	; 0x44
   111ce:	9110      	str	r1, [sp, #64]	; 0x40
   111d0:	900f      	str	r0, [sp, #60]	; 0x3c
   111d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   111d4:	9910      	ldr	r1, [sp, #64]	; 0x40
   111d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   111d8:	921b      	str	r2, [sp, #108]	; 0x6c
   111da:	911a      	str	r1, [sp, #104]	; 0x68
   111dc:	9019      	str	r0, [sp, #100]	; 0x64
   111de:	a816      	add	r0, sp, #88	; 0x58
   111e0:	a919      	add	r1, sp, #100	; 0x64
   111e2:	f000 f8d4 	bl	1138e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6ed52dfe9f180960E>
   111e6:	e028      	b.n	1123a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xd8>
   111e8:	defe      	udf	#254	; 0xfe
   111ea:	9803      	ldr	r0, [sp, #12]
   111ec:	301c      	adds	r0, #28
   111ee:	f7fb fd5f 	bl	ccb0 <_ZN4core6option15Option$LT$T$GT$6as_mut17h781416273935c5a0E>
   111f2:	9001      	str	r0, [sp, #4]
   111f4:	e7ff      	b.n	111f6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x94>
   111f6:	9801      	ldr	r0, [sp, #4]
   111f8:	f7fb fd94 	bl	cd24 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h01a214062ce56537E>
   111fc:	900e      	str	r0, [sp, #56]	; 0x38
   111fe:	e7ff      	b.n	11200 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x9e>
   11200:	980e      	ldr	r0, [sp, #56]	; 0x38
   11202:	fab0 f180 	clz	r1, r0
   11206:	0949      	lsrs	r1, r1, #5
   11208:	2800      	cmp	r0, #0
   1120a:	d101      	bne.n	11210 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xae>
   1120c:	e7ff      	b.n	1120e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xac>
   1120e:	e009      	b.n	11224 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xc2>
   11210:	980e      	ldr	r0, [sp, #56]	; 0x38
   11212:	901f      	str	r0, [sp, #124]	; 0x7c
   11214:	9902      	ldr	r1, [sp, #8]
   11216:	9000      	str	r0, [sp, #0]
   11218:	4608      	mov	r0, r1
   1121a:	9900      	ldr	r1, [sp, #0]
   1121c:	f000 f8be 	bl	1139c <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5039ae5c012134d0E>
   11220:	e00a      	b.n	11238 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xd6>
   11222:	defe      	udf	#254	; 0xfe
   11224:	f003 f85c 	bl	142e0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>
   11228:	e7ff      	b.n	1122a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xc8>
   1122a:	9802      	ldr	r0, [sp, #8]
   1122c:	f7fb fd75 	bl	cd1a <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E>
   11230:	e7ff      	b.n	11232 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xd0>
   11232:	e7ff      	b.n	11234 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xd2>
   11234:	e7ff      	b.n	11236 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xd4>
   11236:	e7ba      	b.n	111ae <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x4c>
   11238:	e7fc      	b.n	11234 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xd2>
   1123a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1123c:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1123e:	9a18      	ldr	r2, [sp, #96]	; 0x60
   11240:	9215      	str	r2, [sp, #84]	; 0x54
   11242:	9114      	str	r1, [sp, #80]	; 0x50
   11244:	9013      	str	r0, [sp, #76]	; 0x4c
   11246:	2001      	movs	r0, #1
   11248:	9012      	str	r0, [sp, #72]	; 0x48
   1124a:	e7ff      	b.n	1124c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xea>
   1124c:	9812      	ldr	r0, [sp, #72]	; 0x48
   1124e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11250:	9a14      	ldr	r2, [sp, #80]	; 0x50
   11252:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11254:	f8dd c00c 	ldr.w	ip, [sp, #12]
   11258:	f8cc 3018 	str.w	r3, [ip, #24]
   1125c:	f8cc 2014 	str.w	r2, [ip, #20]
   11260:	f8cc 1010 	str.w	r1, [ip, #16]
   11264:	f8cc 000c 	str.w	r0, [ip, #12]
   11268:	980a      	ldr	r0, [sp, #40]	; 0x28
   1126a:	2801      	cmp	r0, #1
   1126c:	d101      	bne.n	11272 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x110>
   1126e:	e7ff      	b.n	11270 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x10e>
   11270:	e77d      	b.n	1116e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xc>
   11272:	e7fd      	b.n	11270 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x10e>

00011274 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h53d3e78f478dc601E>:
   11274:	b5b0      	push	{r4, r5, r7, lr}
   11276:	b090      	sub	sp, #64	; 0x40
   11278:	680a      	ldr	r2, [r1, #0]
   1127a:	684b      	ldr	r3, [r1, #4]
   1127c:	6889      	ldr	r1, [r1, #8]
   1127e:	910f      	str	r1, [sp, #60]	; 0x3c
   11280:	930e      	str	r3, [sp, #56]	; 0x38
   11282:	920d      	str	r2, [sp, #52]	; 0x34
   11284:	a902      	add	r1, sp, #8
   11286:	aa0d      	add	r2, sp, #52	; 0x34
   11288:	9001      	str	r0, [sp, #4]
   1128a:	4608      	mov	r0, r1
   1128c:	4611      	mov	r1, r2
   1128e:	f000 f80d 	bl	112ac <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h3c6fa8392f63d25bE>
   11292:	e7ff      	b.n	11294 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h53d3e78f478dc601E+0x20>
   11294:	a802      	add	r0, sp, #8
   11296:	9901      	ldr	r1, [sp, #4]
   11298:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
   1129c:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
   112a0:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
   112a4:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
   112a8:	b010      	add	sp, #64	; 0x40
   112aa:	bdb0      	pop	{r4, r5, r7, pc}

000112ac <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h3c6fa8392f63d25bE>:
   112ac:	b08b      	sub	sp, #44	; 0x2c
   112ae:	680a      	ldr	r2, [r1, #0]
   112b0:	684b      	ldr	r3, [r1, #4]
   112b2:	6889      	ldr	r1, [r1, #8]
   112b4:	9102      	str	r1, [sp, #8]
   112b6:	9301      	str	r3, [sp, #4]
   112b8:	9200      	str	r2, [sp, #0]
   112ba:	2100      	movs	r1, #0
   112bc:	9103      	str	r1, [sp, #12]
   112be:	9107      	str	r1, [sp, #28]
   112c0:	9900      	ldr	r1, [sp, #0]
   112c2:	9a01      	ldr	r2, [sp, #4]
   112c4:	9b02      	ldr	r3, [sp, #8]
   112c6:	6083      	str	r3, [r0, #8]
   112c8:	6042      	str	r2, [r0, #4]
   112ca:	6001      	str	r1, [r0, #0]
   112cc:	9903      	ldr	r1, [sp, #12]
   112ce:	9a04      	ldr	r2, [sp, #16]
   112d0:	9b05      	ldr	r3, [sp, #20]
   112d2:	f8dd c018 	ldr.w	ip, [sp, #24]
   112d6:	f8c0 c018 	str.w	ip, [r0, #24]
   112da:	6143      	str	r3, [r0, #20]
   112dc:	6102      	str	r2, [r0, #16]
   112de:	60c1      	str	r1, [r0, #12]
   112e0:	9907      	ldr	r1, [sp, #28]
   112e2:	9a08      	ldr	r2, [sp, #32]
   112e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   112e6:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   112ea:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
   112ee:	6243      	str	r3, [r0, #36]	; 0x24
   112f0:	6202      	str	r2, [r0, #32]
   112f2:	61c1      	str	r1, [r0, #28]
   112f4:	b00b      	add	sp, #44	; 0x2c
   112f6:	4770      	bx	lr

000112f8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h81f0567d2baa3411E>:
   112f8:	b5b0      	push	{r4, r5, r7, lr}
   112fa:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
   112fe:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
   11302:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   11306:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   1130a:	bdb0      	pop	{r4, r5, r7, pc}

0001130c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>:
   1130c:	b580      	push	{r7, lr}
   1130e:	b084      	sub	sp, #16
   11310:	4601      	mov	r1, r0
   11312:	f88d 000f 	strb.w	r0, [sp, #15]
   11316:	9102      	str	r1, [sp, #8]
   11318:	f003 fbcc 	bl	14ab4 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E>
   1131c:	9001      	str	r0, [sp, #4]
   1131e:	e7ff      	b.n	11320 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E+0x14>
   11320:	9801      	ldr	r0, [sp, #4]
   11322:	b004      	add	sp, #16
   11324:	bd80      	pop	{r7, pc}

00011326 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>:
   11326:	b580      	push	{r7, lr}
   11328:	b086      	sub	sp, #24
   1132a:	460a      	mov	r2, r1
   1132c:	9004      	str	r0, [sp, #16]
   1132e:	f88d 1017 	strb.w	r1, [sp, #23]
   11332:	9203      	str	r2, [sp, #12]
   11334:	f000 fce6 	bl	11d04 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   11338:	9002      	str	r0, [sp, #8]
   1133a:	e7ff      	b.n	1133c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E+0x16>
   1133c:	9802      	ldr	r0, [sp, #8]
   1133e:	9903      	ldr	r1, [sp, #12]
   11340:	f000 fcf8 	bl	11d34 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   11344:	9001      	str	r0, [sp, #4]
   11346:	e7ff      	b.n	11348 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E+0x22>
   11348:	9801      	ldr	r0, [sp, #4]
   1134a:	b006      	add	sp, #24
   1134c:	bd80      	pop	{r7, pc}

0001134e <_ZN4core4iter6traits8iterator8Iterator7flatten17hce303520e4c400b1E>:
   1134e:	b580      	push	{r7, lr}
   11350:	b084      	sub	sp, #16
   11352:	680a      	ldr	r2, [r1, #0]
   11354:	684b      	ldr	r3, [r1, #4]
   11356:	6889      	ldr	r1, [r1, #8]
   11358:	9103      	str	r1, [sp, #12]
   1135a:	9302      	str	r3, [sp, #8]
   1135c:	9201      	str	r2, [sp, #4]
   1135e:	a901      	add	r1, sp, #4
   11360:	f7ff ff88 	bl	11274 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h53d3e78f478dc601E>
   11364:	e7ff      	b.n	11366 <_ZN4core4iter6traits8iterator8Iterator7flatten17hce303520e4c400b1E+0x18>
   11366:	b004      	add	sp, #16
   11368:	bd80      	pop	{r7, pc}

0001136a <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h6a9fe8e0637c7337E>:
   1136a:	b083      	sub	sp, #12
   1136c:	9100      	str	r1, [sp, #0]
   1136e:	9201      	str	r2, [sp, #4]
   11370:	9302      	str	r3, [sp, #8]
   11372:	6001      	str	r1, [r0, #0]
   11374:	6042      	str	r2, [r0, #4]
   11376:	6083      	str	r3, [r0, #8]
   11378:	b003      	add	sp, #12
   1137a:	4770      	bx	lr

0001137c <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17hb92aaa4dbbca4bccE>:
   1137c:	b083      	sub	sp, #12
   1137e:	9100      	str	r1, [sp, #0]
   11380:	9201      	str	r2, [sp, #4]
   11382:	9302      	str	r3, [sp, #8]
   11384:	6001      	str	r1, [r0, #0]
   11386:	6042      	str	r2, [r0, #4]
   11388:	6083      	str	r3, [r0, #8]
   1138a:	b003      	add	sp, #12
   1138c:	4770      	bx	lr

0001138e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6ed52dfe9f180960E>:
   1138e:	680a      	ldr	r2, [r1, #0]
   11390:	684b      	ldr	r3, [r1, #4]
   11392:	6889      	ldr	r1, [r1, #8]
   11394:	6081      	str	r1, [r0, #8]
   11396:	6043      	str	r3, [r0, #4]
   11398:	6002      	str	r2, [r0, #0]
   1139a:	4770      	bx	lr

0001139c <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5039ae5c012134d0E>:
   1139c:	b580      	push	{r7, lr}
   1139e:	b086      	sub	sp, #24
   113a0:	9105      	str	r1, [sp, #20]
   113a2:	9004      	str	r0, [sp, #16]
   113a4:	4608      	mov	r0, r1
   113a6:	9103      	str	r1, [sp, #12]
   113a8:	f000 fbc4 	bl	11b34 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   113ac:	9002      	str	r0, [sp, #8]
   113ae:	9101      	str	r1, [sp, #4]
   113b0:	e7ff      	b.n	113b2 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5039ae5c012134d0E+0x16>
   113b2:	9803      	ldr	r0, [sp, #12]
   113b4:	f100 0308 	add.w	r3, r0, #8
   113b8:	9804      	ldr	r0, [sp, #16]
   113ba:	9902      	ldr	r1, [sp, #8]
   113bc:	9a01      	ldr	r2, [sp, #4]
   113be:	f7fb fb9e 	bl	cafe <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E>
   113c2:	e7ff      	b.n	113c4 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5039ae5c012134d0E+0x28>
   113c4:	b006      	add	sp, #24
   113c6:	bd80      	pop	{r7, pc}

000113c8 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h53e4f1f46625fe50E>:
   113c8:	b580      	push	{r7, lr}
   113ca:	b086      	sub	sp, #24
   113cc:	9105      	str	r1, [sp, #20]
   113ce:	9004      	str	r0, [sp, #16]
   113d0:	4608      	mov	r0, r1
   113d2:	9103      	str	r1, [sp, #12]
   113d4:	f000 fbae 	bl	11b34 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   113d8:	9002      	str	r0, [sp, #8]
   113da:	9101      	str	r1, [sp, #4]
   113dc:	e7ff      	b.n	113de <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h53e4f1f46625fe50E+0x16>
   113de:	9803      	ldr	r0, [sp, #12]
   113e0:	f100 0308 	add.w	r3, r0, #8
   113e4:	9804      	ldr	r0, [sp, #16]
   113e6:	9902      	ldr	r1, [sp, #8]
   113e8:	9a01      	ldr	r2, [sp, #4]
   113ea:	f7fb fbd5 	bl	cb98 <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E>
   113ee:	e7ff      	b.n	113f0 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h53e4f1f46625fe50E+0x28>
   113f0:	b006      	add	sp, #24
   113f2:	bd80      	pop	{r7, pc}

000113f4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E>:
   113f4:	b580      	push	{r7, lr}
   113f6:	b086      	sub	sp, #24
   113f8:	9005      	str	r0, [sp, #20]
   113fa:	2100      	movs	r1, #0
   113fc:	f88d 1013 	strb.w	r1, [sp, #19]
   11400:	1c41      	adds	r1, r0, #1
   11402:	9002      	str	r0, [sp, #8]
   11404:	f003 fb7b 	bl	14afe <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE>
   11408:	9001      	str	r0, [sp, #4]
   1140a:	e7ff      	b.n	1140c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x18>
   1140c:	9801      	ldr	r0, [sp, #4]
   1140e:	07c1      	lsls	r1, r0, #31
   11410:	2900      	cmp	r1, #0
   11412:	d104      	bne.n	1141e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x2a>
   11414:	e7ff      	b.n	11416 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x22>
   11416:	2000      	movs	r0, #0
   11418:	f88d 000c 	strb.w	r0, [sp, #12]
   1141c:	e02c      	b.n	11478 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x84>
   1141e:	2001      	movs	r0, #1
   11420:	f88d 0013 	strb.w	r0, [sp, #19]
   11424:	9902      	ldr	r1, [sp, #8]
   11426:	9000      	str	r0, [sp, #0]
   11428:	4608      	mov	r0, r1
   1142a:	9900      	ldr	r1, [sp, #0]
   1142c:	f003 fb73 	bl	14b16 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE>
   11430:	f88d 1011 	strb.w	r1, [sp, #17]
   11434:	f88d 0010 	strb.w	r0, [sp, #16]
   11438:	e7ff      	b.n	1143a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x46>
   1143a:	f89d 0010 	ldrb.w	r0, [sp, #16]
   1143e:	07c0      	lsls	r0, r0, #31
   11440:	2800      	cmp	r0, #0
   11442:	d104      	bne.n	1144e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x5a>
   11444:	e7ff      	b.n	11446 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x52>
   11446:	2000      	movs	r0, #0
   11448:	f88d 000c 	strb.w	r0, [sp, #12]
   1144c:	e029      	b.n	114a2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xae>
   1144e:	2000      	movs	r0, #0
   11450:	f88d 0013 	strb.w	r0, [sp, #19]
   11454:	f89d 0011 	ldrb.w	r0, [sp, #17]
   11458:	f88d 0012 	strb.w	r0, [sp, #18]
   1145c:	f10d 0012 	add.w	r0, sp, #18
   11460:	9902      	ldr	r1, [sp, #8]
   11462:	f003 fb2e 	bl	14ac2 <_ZN4core3mem4swap17h206518364108b51fE>
   11466:	e7ff      	b.n	11468 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x74>
   11468:	f89d 0012 	ldrb.w	r0, [sp, #18]
   1146c:	f88d 000d 	strb.w	r0, [sp, #13]
   11470:	2001      	movs	r0, #1
   11472:	f88d 000c 	strb.w	r0, [sp, #12]
   11476:	e014      	b.n	114a2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xae>
   11478:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1147c:	f89d 100d 	ldrb.w	r1, [sp, #13]
   11480:	b006      	add	sp, #24
   11482:	bd80      	pop	{r7, pc}
   11484:	2000      	movs	r0, #0
   11486:	f88d 0013 	strb.w	r0, [sp, #19]
   1148a:	e7f5      	b.n	11478 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x84>
   1148c:	f89d 0013 	ldrb.w	r0, [sp, #19]
   11490:	07c0      	lsls	r0, r0, #31
   11492:	2800      	cmp	r0, #0
   11494:	d0f6      	beq.n	11484 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   11496:	e7ff      	b.n	11498 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xa4>
   11498:	2000      	movs	r0, #0
   1149a:	f88d 0013 	strb.w	r0, [sp, #19]
   1149e:	e7f1      	b.n	11484 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   114a0:	e7f0      	b.n	11484 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   114a2:	f89d 0010 	ldrb.w	r0, [sp, #16]
   114a6:	07c0      	lsls	r0, r0, #31
   114a8:	2800      	cmp	r0, #0
   114aa:	d1ef      	bne.n	1148c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x98>
   114ac:	e7f8      	b.n	114a0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xac>

000114ae <_ZN4core4iter6traits8iterator8Iterator3map17h977bf45075800c77E>:
   114ae:	b580      	push	{r7, lr}
   114b0:	b084      	sub	sp, #16
   114b2:	9101      	str	r1, [sp, #4]
   114b4:	9202      	str	r2, [sp, #8]
   114b6:	9303      	str	r3, [sp, #12]
   114b8:	f7ff ff60 	bl	1137c <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17hb92aaa4dbbca4bccE>
   114bc:	e7ff      	b.n	114be <_ZN4core4iter6traits8iterator8Iterator3map17h977bf45075800c77E+0x10>
   114be:	b004      	add	sp, #16
   114c0:	bd80      	pop	{r7, pc}

000114c2 <_ZN4core4iter6traits8iterator8Iterator3map17hfd3597918d2fce20E>:
   114c2:	b580      	push	{r7, lr}
   114c4:	b084      	sub	sp, #16
   114c6:	9101      	str	r1, [sp, #4]
   114c8:	9202      	str	r2, [sp, #8]
   114ca:	9303      	str	r3, [sp, #12]
   114cc:	f7ff ff4d 	bl	1136a <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h6a9fe8e0637c7337E>
   114d0:	e7ff      	b.n	114d2 <_ZN4core4iter6traits8iterator8Iterator3map17hfd3597918d2fce20E+0x10>
   114d2:	b004      	add	sp, #16
   114d4:	bd80      	pop	{r7, pc}

000114d6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE>:
   114d6:	b081      	sub	sp, #4
   114d8:	460a      	mov	r2, r1
   114da:	4603      	mov	r3, r0
   114dc:	f88d 0000 	strb.w	r0, [sp]
   114e0:	f88d 1001 	strb.w	r1, [sp, #1]
   114e4:	b001      	add	sp, #4
   114e6:	4770      	bx	lr

000114e8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>:
   114e8:	b084      	sub	sp, #16
   114ea:	9001      	str	r0, [sp, #4]
   114ec:	9102      	str	r1, [sp, #8]
   114ee:	4408      	add	r0, r1
   114f0:	9003      	str	r0, [sp, #12]
   114f2:	9803      	ldr	r0, [sp, #12]
   114f4:	9000      	str	r0, [sp, #0]
   114f6:	e7ff      	b.n	114f8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E+0x10>
   114f8:	9800      	ldr	r0, [sp, #0]
   114fa:	b004      	add	sp, #16
   114fc:	4770      	bx	lr

000114fe <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>:
   114fe:	b082      	sub	sp, #8
   11500:	9001      	str	r0, [sp, #4]
   11502:	9000      	str	r0, [sp, #0]
   11504:	e7ff      	b.n	11506 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE+0x8>
   11506:	9800      	ldr	r0, [sp, #0]
   11508:	fab0 f180 	clz	r1, r0
   1150c:	0948      	lsrs	r0, r1, #5
   1150e:	b002      	add	sp, #8
   11510:	4770      	bx	lr

00011512 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>:
   11512:	b082      	sub	sp, #8
   11514:	9001      	str	r0, [sp, #4]
   11516:	9000      	str	r0, [sp, #0]
   11518:	9800      	ldr	r0, [sp, #0]
   1151a:	b002      	add	sp, #8
   1151c:	4770      	bx	lr

0001151e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>:
   1151e:	b081      	sub	sp, #4
   11520:	9000      	str	r0, [sp, #0]
   11522:	b001      	add	sp, #4
   11524:	4770      	bx	lr

00011526 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>:
   11526:	b580      	push	{r7, lr}
   11528:	b084      	sub	sp, #16
   1152a:	9002      	str	r0, [sp, #8]
   1152c:	9103      	str	r1, [sp, #12]
   1152e:	f000 f805 	bl	1153c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   11532:	9001      	str	r0, [sp, #4]
   11534:	e7ff      	b.n	11536 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E+0x10>
   11536:	9801      	ldr	r0, [sp, #4]
   11538:	b004      	add	sp, #16
   1153a:	bd80      	pop	{r7, pc}

0001153c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>:
   1153c:	b084      	sub	sp, #16
   1153e:	9001      	str	r0, [sp, #4]
   11540:	9102      	str	r1, [sp, #8]
   11542:	4408      	add	r0, r1
   11544:	9003      	str	r0, [sp, #12]
   11546:	9803      	ldr	r0, [sp, #12]
   11548:	9000      	str	r0, [sp, #0]
   1154a:	e7ff      	b.n	1154c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E+0x10>
   1154c:	9800      	ldr	r0, [sp, #0]
   1154e:	b004      	add	sp, #16
   11550:	4770      	bx	lr

00011552 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>:
   11552:	b082      	sub	sp, #8
   11554:	9001      	str	r0, [sp, #4]
   11556:	9000      	str	r0, [sp, #0]
   11558:	e7ff      	b.n	1155a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE+0x8>
   1155a:	9800      	ldr	r0, [sp, #0]
   1155c:	fab0 f180 	clz	r1, r0
   11560:	0948      	lsrs	r0, r1, #5
   11562:	b002      	add	sp, #8
   11564:	4770      	bx	lr

00011566 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>:
   11566:	b580      	push	{r7, lr}
   11568:	b090      	sub	sp, #64	; 0x40
   1156a:	900c      	str	r0, [sp, #48]	; 0x30
   1156c:	910d      	str	r1, [sp, #52]	; 0x34
   1156e:	9007      	str	r0, [sp, #28]
   11570:	9106      	str	r1, [sp, #24]
   11572:	f000 ff6b 	bl	1244c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>
   11576:	4601      	mov	r1, r0
   11578:	900e      	str	r0, [sp, #56]	; 0x38
   1157a:	9105      	str	r1, [sp, #20]
   1157c:	e7ff      	b.n	1157e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x18>
   1157e:	9805      	ldr	r0, [sp, #20]
   11580:	f7ff ffe7 	bl	11552 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   11584:	e7ff      	b.n	11586 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x20>
   11586:	e7ff      	b.n	11588 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x22>
   11588:	2001      	movs	r0, #1
   1158a:	900f      	str	r0, [sp, #60]	; 0x3c
   1158c:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1158e:	9004      	str	r0, [sp, #16]
   11590:	e7ff      	b.n	11592 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x2c>
   11592:	9804      	ldr	r0, [sp, #16]
   11594:	2800      	cmp	r0, #0
   11596:	d006      	beq.n	115a6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x40>
   11598:	e7ff      	b.n	1159a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x34>
   1159a:	9807      	ldr	r0, [sp, #28]
   1159c:	9906      	ldr	r1, [sp, #24]
   1159e:	f000 ff4d 	bl	1243c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   115a2:	9003      	str	r0, [sp, #12]
   115a4:	e00e      	b.n	115c4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x5e>
   115a6:	9807      	ldr	r0, [sp, #28]
   115a8:	9906      	ldr	r1, [sp, #24]
   115aa:	f000 ff47 	bl	1243c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   115ae:	9002      	str	r0, [sp, #8]
   115b0:	e7ff      	b.n	115b2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x4c>
   115b2:	9805      	ldr	r0, [sp, #20]
   115b4:	9902      	ldr	r1, [sp, #8]
   115b6:	f7ff ffb6 	bl	11526 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>
   115ba:	9001      	str	r0, [sp, #4]
   115bc:	e7ff      	b.n	115be <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x58>
   115be:	9801      	ldr	r0, [sp, #4]
   115c0:	900a      	str	r0, [sp, #40]	; 0x28
   115c2:	e006      	b.n	115d2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   115c4:	9805      	ldr	r0, [sp, #20]
   115c6:	9903      	ldr	r1, [sp, #12]
   115c8:	f000 ff15 	bl	123f6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>
   115cc:	900a      	str	r0, [sp, #40]	; 0x28
   115ce:	e7ff      	b.n	115d0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6a>
   115d0:	e7ff      	b.n	115d2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   115d2:	9805      	ldr	r0, [sp, #20]
   115d4:	f7ff ff9d 	bl	11512 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   115d8:	9000      	str	r0, [sp, #0]
   115da:	e7ff      	b.n	115dc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x76>
   115dc:	980a      	ldr	r0, [sp, #40]	; 0x28
   115de:	9900      	ldr	r1, [sp, #0]
   115e0:	9108      	str	r1, [sp, #32]
   115e2:	9009      	str	r0, [sp, #36]	; 0x24
   115e4:	9808      	ldr	r0, [sp, #32]
   115e6:	9909      	ldr	r1, [sp, #36]	; 0x24
   115e8:	b010      	add	sp, #64	; 0x40
   115ea:	bd80      	pop	{r7, pc}

000115ec <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>:
   115ec:	b081      	sub	sp, #4
   115ee:	b001      	add	sp, #4
   115f0:	4770      	bx	lr

000115f2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>:
   115f2:	b580      	push	{r7, lr}
   115f4:	b08e      	sub	sp, #56	; 0x38
   115f6:	9007      	str	r0, [sp, #28]
   115f8:	6801      	ldr	r1, [r0, #0]
   115fa:	9005      	str	r0, [sp, #20]
   115fc:	4608      	mov	r0, r1
   115fe:	f7ff ff8e 	bl	1151e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11602:	9004      	str	r0, [sp, #16]
   11604:	e7ff      	b.n	11606 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x14>
   11606:	9804      	ldr	r0, [sp, #16]
   11608:	f7ff ff79 	bl	114fe <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>
   1160c:	e7ff      	b.n	1160e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1c>
   1160e:	e7ff      	b.n	11610 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1e>
   11610:	2001      	movs	r0, #1
   11612:	9008      	str	r0, [sp, #32]
   11614:	9808      	ldr	r0, [sp, #32]
   11616:	9003      	str	r0, [sp, #12]
   11618:	e7ff      	b.n	1161a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x28>
   1161a:	9803      	ldr	r0, [sp, #12]
   1161c:	2800      	cmp	r0, #0
   1161e:	d007      	beq.n	11630 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   11620:	e7ff      	b.n	11622 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x30>
   11622:	9805      	ldr	r0, [sp, #20]
   11624:	6840      	ldr	r0, [r0, #4]
   11626:	f7ff ff94 	bl	11552 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   1162a:	e7ff      	b.n	1162c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3a>
   1162c:	e7ff      	b.n	1162e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3c>
   1162e:	e7ff      	b.n	11630 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   11630:	9805      	ldr	r0, [sp, #20]
   11632:	6800      	ldr	r0, [r0, #0]
   11634:	f7ff ff73 	bl	1151e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11638:	9002      	str	r0, [sp, #8]
   1163a:	e7ff      	b.n	1163c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x4a>
   1163c:	9805      	ldr	r0, [sp, #20]
   1163e:	6841      	ldr	r1, [r0, #4]
   11640:	9a02      	ldr	r2, [sp, #8]
   11642:	428a      	cmp	r2, r1
   11644:	d02e      	beq.n	116a4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb2>
   11646:	e7ff      	b.n	11648 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x56>
   11648:	9805      	ldr	r0, [sp, #20]
   1164a:	900a      	str	r0, [sp, #40]	; 0x28
   1164c:	2101      	movs	r1, #1
   1164e:	910b      	str	r1, [sp, #44]	; 0x2c
   11650:	910d      	str	r1, [sp, #52]	; 0x34
   11652:	990d      	ldr	r1, [sp, #52]	; 0x34
   11654:	2900      	cmp	r1, #0
   11656:	d015      	beq.n	11684 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x92>
   11658:	e7ff      	b.n	1165a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x68>
   1165a:	9805      	ldr	r0, [sp, #20]
   1165c:	6800      	ldr	r0, [r0, #0]
   1165e:	f7ff ff5e 	bl	1151e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11662:	900c      	str	r0, [sp, #48]	; 0x30
   11664:	9905      	ldr	r1, [sp, #20]
   11666:	680a      	ldr	r2, [r1, #0]
   11668:	9001      	str	r0, [sp, #4]
   1166a:	4610      	mov	r0, r2
   1166c:	f7ff ff57 	bl	1151e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11670:	2101      	movs	r1, #1
   11672:	f7ff ff39 	bl	114e8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>
   11676:	f7ff ff4c 	bl	11512 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   1167a:	9905      	ldr	r1, [sp, #20]
   1167c:	6008      	str	r0, [r1, #0]
   1167e:	9801      	ldr	r0, [sp, #4]
   11680:	9009      	str	r0, [sp, #36]	; 0x24
   11682:	e00c      	b.n	1169e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   11684:	9805      	ldr	r0, [sp, #20]
   11686:	6840      	ldr	r0, [r0, #4]
   11688:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1168c:	f7ff ff56 	bl	1153c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   11690:	9905      	ldr	r1, [sp, #20]
   11692:	6048      	str	r0, [r1, #4]
   11694:	6808      	ldr	r0, [r1, #0]
   11696:	f7ff ff42 	bl	1151e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   1169a:	9009      	str	r0, [sp, #36]	; 0x24
   1169c:	e7ff      	b.n	1169e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   1169e:	9809      	ldr	r0, [sp, #36]	; 0x24
   116a0:	9000      	str	r0, [sp, #0]
   116a2:	e002      	b.n	116aa <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb8>
   116a4:	2000      	movs	r0, #0
   116a6:	9006      	str	r0, [sp, #24]
   116a8:	e002      	b.n	116b0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   116aa:	9800      	ldr	r0, [sp, #0]
   116ac:	9006      	str	r0, [sp, #24]
   116ae:	e7ff      	b.n	116b0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   116b0:	9806      	ldr	r0, [sp, #24]
   116b2:	b00e      	add	sp, #56	; 0x38
   116b4:	bd80      	pop	{r7, pc}

000116b6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE>:
   116b6:	b580      	push	{r7, lr}
   116b8:	b084      	sub	sp, #16
   116ba:	9002      	str	r0, [sp, #8]
   116bc:	9103      	str	r1, [sp, #12]
   116be:	6800      	ldr	r0, [r0, #0]
   116c0:	f000 f807 	bl	116d2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>
   116c4:	9001      	str	r0, [sp, #4]
   116c6:	e7ff      	b.n	116c8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE+0x12>
   116c8:	9801      	ldr	r0, [sp, #4]
   116ca:	f000 0001 	and.w	r0, r0, #1
   116ce:	b004      	add	sp, #16
   116d0:	bd80      	pop	{r7, pc}

000116d2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>:
   116d2:	b580      	push	{r7, lr}
   116d4:	b088      	sub	sp, #32
   116d6:	9006      	str	r0, [sp, #24]
   116d8:	9107      	str	r1, [sp, #28]
   116da:	9004      	str	r0, [sp, #16]
   116dc:	4608      	mov	r0, r1
   116de:	9103      	str	r1, [sp, #12]
   116e0:	f004 fe25 	bl	1632e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   116e4:	9002      	str	r0, [sp, #8]
   116e6:	e7ff      	b.n	116e8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x16>
   116e8:	9802      	ldr	r0, [sp, #8]
   116ea:	07c1      	lsls	r1, r0, #31
   116ec:	2900      	cmp	r1, #0
   116ee:	d105      	bne.n	116fc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x2a>
   116f0:	e7ff      	b.n	116f2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x20>
   116f2:	9803      	ldr	r0, [sp, #12]
   116f4:	f004 fe1f 	bl	16336 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   116f8:	9001      	str	r0, [sp, #4]
   116fa:	e007      	b.n	1170c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x3a>
   116fc:	9804      	ldr	r0, [sp, #16]
   116fe:	9903      	ldr	r1, [sp, #12]
   11700:	f005 fbe0 	bl	16ec4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   11704:	f88d 0017 	strb.w	r0, [sp, #23]
   11708:	e7ff      	b.n	1170a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x38>
   1170a:	e015      	b.n	11738 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   1170c:	9801      	ldr	r0, [sp, #4]
   1170e:	07c1      	lsls	r1, r0, #31
   11710:	2900      	cmp	r1, #0
   11712:	d107      	bne.n	11724 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x52>
   11714:	e7ff      	b.n	11716 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x44>
   11716:	9804      	ldr	r0, [sp, #16]
   11718:	9903      	ldr	r1, [sp, #12]
   1171a:	f005 fce6 	bl	170ea <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   1171e:	f88d 0017 	strb.w	r0, [sp, #23]
   11722:	e007      	b.n	11734 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x62>
   11724:	9804      	ldr	r0, [sp, #16]
   11726:	9903      	ldr	r1, [sp, #12]
   11728:	f005 fc37 	bl	16f9a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   1172c:	f88d 0017 	strb.w	r0, [sp, #23]
   11730:	e7ff      	b.n	11732 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x60>
   11732:	e000      	b.n	11736 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   11734:	e7ff      	b.n	11736 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   11736:	e7ff      	b.n	11738 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   11738:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1173c:	b008      	add	sp, #32
   1173e:	bd80      	pop	{r7, pc}

00011740 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct Coord(pub CoordPart, pub CoordPart);

    impl Coord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: CoordPart, y: CoordPart) -> Self {
   11740:	b084      	sub	sp, #16
   11742:	9002      	str	r0, [sp, #8]
   11744:	9103      	str	r1, [sp, #12]
            Coord(x, y)
   11746:	9000      	str	r0, [sp, #0]
   11748:	9101      	str	r1, [sp, #4]
        }
   1174a:	9800      	ldr	r0, [sp, #0]
   1174c:	9901      	ldr	r1, [sp, #4]
   1174e:	b004      	add	sp, #16
   11750:	4770      	bx	lr

00011752 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>:
/// Take a tuple of 8 bit `(red, green, blue)` color values and convert them to a single 16 bit
/// color
///
/// The 2 or 3 (for the green channel) least significant bits are discarded
impl From<(u8, u8, u8)> for Rgb565 {
    fn from((r, g, b): (u8, u8, u8)) -> Self {
   11752:	b08b      	sub	sp, #44	; 0x2c
   11754:	4601      	mov	r1, r0
   11756:	f8ad 0020 	strh.w	r0, [sp, #32]
   1175a:	0c00      	lsrs	r0, r0, #16
   1175c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   11760:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   11764:	f88d 001e 	strb.w	r0, [sp, #30]
   11768:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   1176c:	f8ad 001c 	strh.w	r0, [sp, #28]
   11770:	f89d 001c 	ldrb.w	r0, [sp, #28]
   11774:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   11778:	f89d 201d 	ldrb.w	r2, [sp, #29]
   1177c:	4613      	mov	r3, r2
   1177e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   11782:	f89d 201e 	ldrb.w	r2, [sp, #30]
   11786:	4694      	mov	ip, r2
   11788:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
        let value =
        // Red
        (((r as u16) << 8) & RED_MASK)
   1178c:	0200      	lsls	r0, r0, #8
   1178e:	9306      	str	r3, [sp, #24]
   11790:	f8cd c014 	str.w	ip, [sp, #20]
   11794:	9004      	str	r0, [sp, #16]
   11796:	e7ff      	b.n	11798 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x46>
   11798:	9804      	ldr	r0, [sp, #16]
   1179a:	f400 4178 	and.w	r1, r0, #63488	; 0xf800
        // Green
        | (((g as u16) << 3) & GREEN_MASK)
   1179e:	9a06      	ldr	r2, [sp, #24]
   117a0:	b2d3      	uxtb	r3, r2
   117a2:	00db      	lsls	r3, r3, #3
   117a4:	9103      	str	r1, [sp, #12]
   117a6:	9302      	str	r3, [sp, #8]
   117a8:	e7ff      	b.n	117aa <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x58>
   117aa:	9802      	ldr	r0, [sp, #8]
   117ac:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
        (((r as u16) << 8) & RED_MASK)
   117b0:	9a03      	ldr	r2, [sp, #12]
   117b2:	4311      	orrs	r1, r2
        // Blue
        | ((b as u16) >> 3 & BLUE_MASK);
   117b4:	9b05      	ldr	r3, [sp, #20]
   117b6:	fa5f fc83 	uxtb.w	ip, r3
   117ba:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
   117be:	9101      	str	r1, [sp, #4]
   117c0:	f8cd c000 	str.w	ip, [sp]
   117c4:	e7ff      	b.n	117c6 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x74>
   117c6:	9800      	ldr	r0, [sp, #0]
   117c8:	f000 011f 	and.w	r1, r0, #31
        (((r as u16) << 8) & RED_MASK)
   117cc:	9a01      	ldr	r2, [sp, #4]
   117ce:	4311      	orrs	r1, r2
   117d0:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a

        Self(value)
   117d4:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    }
   117d8:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   117dc:	b00b      	add	sp, #44	; 0x2c
   117de:	4770      	bx	lr

000117e0 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>:
   117e0:	b580      	push	{r7, lr}
   117e2:	b088      	sub	sp, #32
   117e4:	9005      	str	r0, [sp, #20]
   117e6:	9106      	str	r1, [sp, #24]
   117e8:	9003      	str	r0, [sp, #12]
   117ea:	4608      	mov	r0, r1
   117ec:	f000 fa21 	bl	11c32 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>
   117f0:	9004      	str	r0, [sp, #16]
   117f2:	e7ff      	b.n	117f4 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x14>
   117f4:	9804      	ldr	r0, [sp, #16]
   117f6:	9007      	str	r0, [sp, #28]
   117f8:	9903      	ldr	r1, [sp, #12]
   117fa:	680a      	ldr	r2, [r1, #0]
   117fc:	9002      	str	r0, [sp, #8]
   117fe:	4610      	mov	r0, r2
   11800:	9902      	ldr	r1, [sp, #8]
   11802:	f000 f837 	bl	11874 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>
   11806:	9001      	str	r0, [sp, #4]
   11808:	9100      	str	r1, [sp, #0]
   1180a:	e7ff      	b.n	1180c <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x2c>
   1180c:	9801      	ldr	r0, [sp, #4]
   1180e:	9900      	ldr	r1, [sp, #0]
   11810:	b008      	add	sp, #32
   11812:	bd80      	pop	{r7, pc}

00011814 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>:
   11814:	b580      	push	{r7, lr}
   11816:	b084      	sub	sp, #16
   11818:	9001      	str	r0, [sp, #4]
   1181a:	9102      	str	r1, [sp, #8]
   1181c:	9203      	str	r2, [sp, #12]
   1181e:	9000      	str	r0, [sp, #0]
   11820:	4608      	mov	r0, r1
   11822:	9900      	ldr	r1, [sp, #0]
   11824:	f00a f9ee 	bl	1bc04 <__aeabi_memcpy>
   11828:	e7ff      	b.n	1182a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE+0x16>
   1182a:	b004      	add	sp, #16
   1182c:	bd80      	pop	{r7, pc}

0001182e <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>:
   1182e:	b580      	push	{r7, lr}
   11830:	b084      	sub	sp, #16
   11832:	9001      	str	r0, [sp, #4]
   11834:	9102      	str	r1, [sp, #8]
   11836:	9203      	str	r2, [sp, #12]
   11838:	0092      	lsls	r2, r2, #2
   1183a:	9000      	str	r0, [sp, #0]
   1183c:	4608      	mov	r0, r1
   1183e:	9900      	ldr	r1, [sp, #0]
   11840:	f00a f9e0 	bl	1bc04 <__aeabi_memcpy>
   11844:	e7ff      	b.n	11846 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E+0x18>
   11846:	b004      	add	sp, #16
   11848:	bd80      	pop	{r7, pc}

0001184a <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>:
   1184a:	b082      	sub	sp, #8
   1184c:	9000      	str	r0, [sp, #0]
   1184e:	9101      	str	r1, [sp, #4]
   11850:	6800      	ldr	r0, [r0, #0]
   11852:	6809      	ldr	r1, [r1, #0]
   11854:	2200      	movs	r2, #0
   11856:	4288      	cmp	r0, r1
   11858:	bf38      	it	cc
   1185a:	2201      	movcc	r2, #1
   1185c:	4610      	mov	r0, r2
   1185e:	b002      	add	sp, #8
   11860:	4770      	bx	lr

00011862 <_ZN4core3mem4swap17hc4afbec7b5ffb125E>:
   11862:	b580      	push	{r7, lr}
   11864:	b082      	sub	sp, #8
   11866:	9000      	str	r0, [sp, #0]
   11868:	9101      	str	r1, [sp, #4]
   1186a:	f000 f85f 	bl	1192c <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>
   1186e:	e7ff      	b.n	11870 <_ZN4core3mem4swap17hc4afbec7b5ffb125E+0xe>
   11870:	b002      	add	sp, #8
   11872:	bd80      	pop	{r7, pc}

00011874 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>:
   11874:	b580      	push	{r7, lr}
   11876:	b088      	sub	sp, #32
   11878:	9004      	str	r0, [sp, #16]
   1187a:	9105      	str	r1, [sp, #20]
   1187c:	f000 f819 	bl	118b2 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>
   11880:	9001      	str	r0, [sp, #4]
   11882:	9100      	str	r1, [sp, #0]
   11884:	e7ff      	b.n	11886 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x12>
   11886:	9801      	ldr	r0, [sp, #4]
   11888:	9006      	str	r0, [sp, #24]
   1188a:	9900      	ldr	r1, [sp, #0]
   1188c:	f001 0201 	and.w	r2, r1, #1
   11890:	f88d 201f 	strb.w	r2, [sp, #31]
   11894:	2a00      	cmp	r2, #0
   11896:	d105      	bne.n	118a4 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x30>
   11898:	e7ff      	b.n	1189a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x26>
   1189a:	9801      	ldr	r0, [sp, #4]
   1189c:	9003      	str	r0, [sp, #12]
   1189e:	2101      	movs	r1, #1
   118a0:	9102      	str	r1, [sp, #8]
   118a2:	e002      	b.n	118aa <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   118a4:	2000      	movs	r0, #0
   118a6:	9002      	str	r0, [sp, #8]
   118a8:	e7ff      	b.n	118aa <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   118aa:	9802      	ldr	r0, [sp, #8]
   118ac:	9903      	ldr	r1, [sp, #12]
   118ae:	b008      	add	sp, #32
   118b0:	bd80      	pop	{r7, pc}

000118b2 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>:
   118b2:	b08a      	sub	sp, #40	; 0x28
   118b4:	9004      	str	r0, [sp, #16]
   118b6:	9105      	str	r1, [sp, #20]
   118b8:	1840      	adds	r0, r0, r1
   118ba:	f04f 0100 	mov.w	r1, #0
   118be:	f141 0100 	adc.w	r1, r1, #0
   118c2:	9006      	str	r0, [sp, #24]
   118c4:	f88d 101c 	strb.w	r1, [sp, #28]
   118c8:	9806      	ldr	r0, [sp, #24]
   118ca:	f89d 101c 	ldrb.w	r1, [sp, #28]
   118ce:	9001      	str	r0, [sp, #4]
   118d0:	9100      	str	r1, [sp, #0]
   118d2:	e7ff      	b.n	118d4 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE+0x22>
   118d4:	9801      	ldr	r0, [sp, #4]
   118d6:	9008      	str	r0, [sp, #32]
   118d8:	9900      	ldr	r1, [sp, #0]
   118da:	f001 0201 	and.w	r2, r1, #1
   118de:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   118e2:	9002      	str	r0, [sp, #8]
   118e4:	f88d 200c 	strb.w	r2, [sp, #12]
   118e8:	9802      	ldr	r0, [sp, #8]
   118ea:	f89d 100c 	ldrb.w	r1, [sp, #12]
   118ee:	b00a      	add	sp, #40	; 0x28
   118f0:	4770      	bx	lr

000118f2 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>:
   118f2:	b580      	push	{r7, lr}
   118f4:	b08c      	sub	sp, #48	; 0x30
   118f6:	9005      	str	r0, [sp, #20]
   118f8:	9106      	str	r1, [sp, #24]
   118fa:	9207      	str	r2, [sp, #28]
   118fc:	4603      	mov	r3, r0
   118fe:	9008      	str	r0, [sp, #32]
   11900:	4608      	mov	r0, r1
   11902:	9109      	str	r1, [sp, #36]	; 0x24
   11904:	2104      	movs	r1, #4
   11906:	910b      	str	r1, [sp, #44]	; 0x2c
   11908:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1190a:	9204      	str	r2, [sp, #16]
   1190c:	9303      	str	r3, [sp, #12]
   1190e:	9002      	str	r0, [sp, #8]
   11910:	9101      	str	r1, [sp, #4]
   11912:	e7ff      	b.n	11914 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x22>
   11914:	9801      	ldr	r0, [sp, #4]
   11916:	9904      	ldr	r1, [sp, #16]
   11918:	fb00 f201 	mul.w	r2, r0, r1
   1191c:	920a      	str	r2, [sp, #40]	; 0x28
   1191e:	9803      	ldr	r0, [sp, #12]
   11920:	9902      	ldr	r1, [sp, #8]
   11922:	f000 f82e 	bl	11982 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>
   11926:	e7ff      	b.n	11928 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x36>
   11928:	b00c      	add	sp, #48	; 0x30
   1192a:	bd80      	pop	{r7, pc}

0001192c <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>:
   1192c:	b580      	push	{r7, lr}
   1192e:	b088      	sub	sp, #32
   11930:	9004      	str	r0, [sp, #16]
   11932:	9105      	str	r1, [sp, #20]
   11934:	2204      	movs	r2, #4
   11936:	9207      	str	r2, [sp, #28]
   11938:	9a07      	ldr	r2, [sp, #28]
   1193a:	9103      	str	r1, [sp, #12]
   1193c:	9002      	str	r0, [sp, #8]
   1193e:	9201      	str	r2, [sp, #4]
   11940:	e7ff      	b.n	11942 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x16>
   11942:	9801      	ldr	r0, [sp, #4]
   11944:	2820      	cmp	r0, #32
   11946:	d306      	bcc.n	11956 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x2a>
   11948:	e7ff      	b.n	1194a <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x1e>
   1194a:	2201      	movs	r2, #1
   1194c:	9802      	ldr	r0, [sp, #8]
   1194e:	9903      	ldr	r1, [sp, #12]
   11950:	f7ff ffcf 	bl	118f2 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>
   11954:	e012      	b.n	1197c <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x50>
   11956:	9802      	ldr	r0, [sp, #8]
   11958:	f000 f8a1 	bl	11a9e <_ZN4core3ptr4read17h2038b0ecb0975c4fE>
   1195c:	4601      	mov	r1, r0
   1195e:	9006      	str	r0, [sp, #24]
   11960:	9100      	str	r1, [sp, #0]
   11962:	e7ff      	b.n	11964 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x38>
   11964:	2201      	movs	r2, #1
   11966:	9803      	ldr	r0, [sp, #12]
   11968:	9902      	ldr	r1, [sp, #8]
   1196a:	f7ff ff60 	bl	1182e <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   1196e:	e7ff      	b.n	11970 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x44>
   11970:	9803      	ldr	r0, [sp, #12]
   11972:	9900      	ldr	r1, [sp, #0]
   11974:	f000 f8ac 	bl	11ad0 <_ZN4core3ptr5write17h4a80332de2cee3d3E>
   11978:	e7ff      	b.n	1197a <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x4e>
   1197a:	e000      	b.n	1197e <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   1197c:	e7ff      	b.n	1197e <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   1197e:	b008      	add	sp, #32
   11980:	bd80      	pop	{r7, pc}

00011982 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>:
   11982:	b5d0      	push	{r4, r6, r7, lr}
   11984:	af02      	add	r7, sp, #8
   11986:	b0b4      	sub	sp, #208	; 0xd0
   11988:	466c      	mov	r4, sp
   1198a:	f36f 0404 	bfc	r4, #0, #5
   1198e:	46a5      	mov	sp, r4
   11990:	9024      	str	r0, [sp, #144]	; 0x90
   11992:	9125      	str	r1, [sp, #148]	; 0x94
   11994:	9226      	str	r2, [sp, #152]	; 0x98
   11996:	2320      	movs	r3, #32
   11998:	932f      	str	r3, [sp, #188]	; 0xbc
   1199a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   1199c:	9327      	str	r3, [sp, #156]	; 0x9c
   1199e:	920e      	str	r2, [sp, #56]	; 0x38
   119a0:	910d      	str	r1, [sp, #52]	; 0x34
   119a2:	900c      	str	r0, [sp, #48]	; 0x30
   119a4:	930b      	str	r3, [sp, #44]	; 0x2c
   119a6:	e7ff      	b.n	119a8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x26>
   119a8:	2000      	movs	r0, #0
   119aa:	900f      	str	r0, [sp, #60]	; 0x3c
   119ac:	e7ff      	b.n	119ae <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   119ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
   119b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   119b2:	4408      	add	r0, r1
   119b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   119b6:	4290      	cmp	r0, r2
   119b8:	d905      	bls.n	119c6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x44>
   119ba:	e7ff      	b.n	119bc <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x3a>
   119bc:	980f      	ldr	r0, [sp, #60]	; 0x3c
   119be:	990e      	ldr	r1, [sp, #56]	; 0x38
   119c0:	4288      	cmp	r0, r1
   119c2:	d334      	bcc.n	11a2e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xac>
   119c4:	e067      	b.n	11a96 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   119c6:	e7ff      	b.n	119c8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x46>
   119c8:	a810      	add	r0, sp, #64	; 0x40
   119ca:	9030      	str	r0, [sp, #192]	; 0xc0
   119cc:	9031      	str	r0, [sp, #196]	; 0xc4
   119ce:	e7ff      	b.n	119d0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x4e>
   119d0:	a810      	add	r0, sp, #64	; 0x40
   119d2:	4601      	mov	r1, r0
   119d4:	9028      	str	r0, [sp, #160]	; 0xa0
   119d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
   119d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   119da:	900a      	str	r0, [sp, #40]	; 0x28
   119dc:	4610      	mov	r0, r2
   119de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   119e0:	9109      	str	r1, [sp, #36]	; 0x24
   119e2:	4619      	mov	r1, r3
   119e4:	f000 f87a 	bl	11adc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   119e8:	4601      	mov	r1, r0
   119ea:	9029      	str	r0, [sp, #164]	; 0xa4
   119ec:	9108      	str	r1, [sp, #32]
   119ee:	e7ff      	b.n	119f0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x6e>
   119f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   119f2:	980d      	ldr	r0, [sp, #52]	; 0x34
   119f4:	f000 f872 	bl	11adc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   119f8:	4601      	mov	r1, r0
   119fa:	902a      	str	r0, [sp, #168]	; 0xa8
   119fc:	9107      	str	r1, [sp, #28]
   119fe:	e7ff      	b.n	11a00 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x7e>
   11a00:	9808      	ldr	r0, [sp, #32]
   11a02:	9909      	ldr	r1, [sp, #36]	; 0x24
   11a04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11a06:	f7ff ff05 	bl	11814 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11a0a:	e7ff      	b.n	11a0c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x8a>
   11a0c:	9807      	ldr	r0, [sp, #28]
   11a0e:	9908      	ldr	r1, [sp, #32]
   11a10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11a12:	f7ff feff 	bl	11814 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11a16:	e7ff      	b.n	11a18 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x96>
   11a18:	9809      	ldr	r0, [sp, #36]	; 0x24
   11a1a:	9907      	ldr	r1, [sp, #28]
   11a1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11a1e:	f7ff fef9 	bl	11814 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11a22:	e7ff      	b.n	11a24 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xa2>
   11a24:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11a26:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11a28:	4408      	add	r0, r1
   11a2a:	900f      	str	r0, [sp, #60]	; 0x3c
   11a2c:	e7bf      	b.n	119ae <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   11a2e:	e7ff      	b.n	11a30 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xae>
   11a30:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11a32:	990e      	ldr	r1, [sp, #56]	; 0x38
   11a34:	1a08      	subs	r0, r1, r0
   11a36:	4602      	mov	r2, r0
   11a38:	902b      	str	r0, [sp, #172]	; 0xac
   11a3a:	a81c      	add	r0, sp, #112	; 0x70
   11a3c:	9032      	str	r0, [sp, #200]	; 0xc8
   11a3e:	9033      	str	r0, [sp, #204]	; 0xcc
   11a40:	9206      	str	r2, [sp, #24]
   11a42:	9005      	str	r0, [sp, #20]
   11a44:	e7ff      	b.n	11a46 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xc4>
   11a46:	9805      	ldr	r0, [sp, #20]
   11a48:	9905      	ldr	r1, [sp, #20]
   11a4a:	912c      	str	r1, [sp, #176]	; 0xb0
   11a4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11a4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11a50:	9004      	str	r0, [sp, #16]
   11a52:	4610      	mov	r0, r2
   11a54:	f000 f842 	bl	11adc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11a58:	4601      	mov	r1, r0
   11a5a:	902d      	str	r0, [sp, #180]	; 0xb4
   11a5c:	9103      	str	r1, [sp, #12]
   11a5e:	e7ff      	b.n	11a60 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xde>
   11a60:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11a62:	980d      	ldr	r0, [sp, #52]	; 0x34
   11a64:	f000 f83a 	bl	11adc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11a68:	4601      	mov	r1, r0
   11a6a:	902e      	str	r0, [sp, #184]	; 0xb8
   11a6c:	9102      	str	r1, [sp, #8]
   11a6e:	e7ff      	b.n	11a70 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xee>
   11a70:	9803      	ldr	r0, [sp, #12]
   11a72:	9904      	ldr	r1, [sp, #16]
   11a74:	9a06      	ldr	r2, [sp, #24]
   11a76:	f7ff fecd 	bl	11814 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11a7a:	e7ff      	b.n	11a7c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xfa>
   11a7c:	9802      	ldr	r0, [sp, #8]
   11a7e:	9903      	ldr	r1, [sp, #12]
   11a80:	9a06      	ldr	r2, [sp, #24]
   11a82:	f7ff fec7 	bl	11814 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11a86:	e7ff      	b.n	11a88 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x106>
   11a88:	9804      	ldr	r0, [sp, #16]
   11a8a:	9902      	ldr	r1, [sp, #8]
   11a8c:	9a06      	ldr	r2, [sp, #24]
   11a8e:	f7ff fec1 	bl	11814 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11a92:	e7ff      	b.n	11a94 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x112>
   11a94:	e7ff      	b.n	11a96 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   11a96:	f1a7 0408 	sub.w	r4, r7, #8
   11a9a:	46a5      	mov	sp, r4
   11a9c:	bdd0      	pop	{r4, r6, r7, pc}

00011a9e <_ZN4core3ptr4read17h2038b0ecb0975c4fE>:
   11a9e:	b580      	push	{r7, lr}
   11aa0:	b08a      	sub	sp, #40	; 0x28
   11aa2:	9004      	str	r0, [sp, #16]
   11aa4:	9905      	ldr	r1, [sp, #20]
   11aa6:	9103      	str	r1, [sp, #12]
   11aa8:	9002      	str	r0, [sp, #8]
   11aaa:	e7ff      	b.n	11aac <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0xe>
   11aac:	a803      	add	r0, sp, #12
   11aae:	9008      	str	r0, [sp, #32]
   11ab0:	9009      	str	r0, [sp, #36]	; 0x24
   11ab2:	e7ff      	b.n	11ab4 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x16>
   11ab4:	a903      	add	r1, sp, #12
   11ab6:	2201      	movs	r2, #1
   11ab8:	9802      	ldr	r0, [sp, #8]
   11aba:	f7ff feb8 	bl	1182e <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   11abe:	e7ff      	b.n	11ac0 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x22>
   11ac0:	9803      	ldr	r0, [sp, #12]
   11ac2:	9006      	str	r0, [sp, #24]
   11ac4:	9007      	str	r0, [sp, #28]
   11ac6:	9001      	str	r0, [sp, #4]
   11ac8:	e7ff      	b.n	11aca <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x2c>
   11aca:	9801      	ldr	r0, [sp, #4]
   11acc:	b00a      	add	sp, #40	; 0x28
   11ace:	bd80      	pop	{r7, pc}

00011ad0 <_ZN4core3ptr5write17h4a80332de2cee3d3E>:
   11ad0:	b082      	sub	sp, #8
   11ad2:	9000      	str	r0, [sp, #0]
   11ad4:	9101      	str	r1, [sp, #4]
   11ad6:	6001      	str	r1, [r0, #0]
   11ad8:	b002      	add	sp, #8
   11ada:	4770      	bx	lr

00011adc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>:
   11adc:	b580      	push	{r7, lr}
   11ade:	b084      	sub	sp, #16
   11ae0:	9002      	str	r0, [sp, #8]
   11ae2:	9103      	str	r1, [sp, #12]
   11ae4:	f000 f805 	bl	11af2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>
   11ae8:	9001      	str	r0, [sp, #4]
   11aea:	e7ff      	b.n	11aec <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E+0x10>
   11aec:	9801      	ldr	r0, [sp, #4]
   11aee:	b004      	add	sp, #16
   11af0:	bd80      	pop	{r7, pc}

00011af2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>:
   11af2:	b084      	sub	sp, #16
   11af4:	9001      	str	r0, [sp, #4]
   11af6:	9102      	str	r1, [sp, #8]
   11af8:	4408      	add	r0, r1
   11afa:	9003      	str	r0, [sp, #12]
   11afc:	9803      	ldr	r0, [sp, #12]
   11afe:	9000      	str	r0, [sp, #0]
   11b00:	e7ff      	b.n	11b02 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE+0x10>
   11b02:	9800      	ldr	r0, [sp, #0]
   11b04:	b004      	add	sp, #16
   11b06:	4770      	bx	lr

00011b08 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>:
   11b08:	b580      	push	{r7, lr}
   11b0a:	b084      	sub	sp, #16
   11b0c:	9002      	str	r0, [sp, #8]
   11b0e:	9103      	str	r1, [sp, #12]
   11b10:	f000 f805 	bl	11b1e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>
   11b14:	9001      	str	r0, [sp, #4]
   11b16:	e7ff      	b.n	11b18 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE+0x10>
   11b18:	9801      	ldr	r0, [sp, #4]
   11b1a:	b004      	add	sp, #16
   11b1c:	bd80      	pop	{r7, pc}

00011b1e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>:
   11b1e:	b084      	sub	sp, #16
   11b20:	9001      	str	r0, [sp, #4]
   11b22:	9102      	str	r1, [sp, #8]
   11b24:	4408      	add	r0, r1
   11b26:	9003      	str	r0, [sp, #12]
   11b28:	9803      	ldr	r0, [sp, #12]
   11b2a:	9000      	str	r0, [sp, #0]
   11b2c:	e7ff      	b.n	11b2e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE+0x10>
   11b2e:	9800      	ldr	r0, [sp, #0]
   11b30:	b004      	add	sp, #16
   11b32:	4770      	bx	lr

00011b34 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>:
   11b34:	b580      	push	{r7, lr}
   11b36:	b08a      	sub	sp, #40	; 0x28
   11b38:	9009      	str	r0, [sp, #36]	; 0x24
   11b3a:	2100      	movs	r1, #0
   11b3c:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   11b40:	1d01      	adds	r1, r0, #4
   11b42:	9002      	str	r0, [sp, #8]
   11b44:	f7ff fe81 	bl	1184a <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>
   11b48:	9001      	str	r0, [sp, #4]
   11b4a:	e7ff      	b.n	11b4c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x18>
   11b4c:	9801      	ldr	r0, [sp, #4]
   11b4e:	07c1      	lsls	r1, r0, #31
   11b50:	2900      	cmp	r1, #0
   11b52:	d103      	bne.n	11b5c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x28>
   11b54:	e7ff      	b.n	11b56 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x22>
   11b56:	2000      	movs	r0, #0
   11b58:	9003      	str	r0, [sp, #12]
   11b5a:	e021      	b.n	11ba0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   11b5c:	2001      	movs	r0, #1
   11b5e:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11b62:	9902      	ldr	r1, [sp, #8]
   11b64:	9000      	str	r0, [sp, #0]
   11b66:	4608      	mov	r0, r1
   11b68:	9900      	ldr	r1, [sp, #0]
   11b6a:	f7ff fe39 	bl	117e0 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>
   11b6e:	9106      	str	r1, [sp, #24]
   11b70:	9005      	str	r0, [sp, #20]
   11b72:	e7ff      	b.n	11b74 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x40>
   11b74:	9805      	ldr	r0, [sp, #20]
   11b76:	2801      	cmp	r0, #1
   11b78:	d003      	beq.n	11b82 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x4e>
   11b7a:	e7ff      	b.n	11b7c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x48>
   11b7c:	2000      	movs	r0, #0
   11b7e:	9003      	str	r0, [sp, #12]
   11b80:	e021      	b.n	11bc6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   11b82:	2000      	movs	r0, #0
   11b84:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11b88:	9806      	ldr	r0, [sp, #24]
   11b8a:	9007      	str	r0, [sp, #28]
   11b8c:	a807      	add	r0, sp, #28
   11b8e:	9902      	ldr	r1, [sp, #8]
   11b90:	f7ff fe67 	bl	11862 <_ZN4core3mem4swap17hc4afbec7b5ffb125E>
   11b94:	e7ff      	b.n	11b96 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x62>
   11b96:	9807      	ldr	r0, [sp, #28]
   11b98:	9004      	str	r0, [sp, #16]
   11b9a:	2001      	movs	r0, #1
   11b9c:	9003      	str	r0, [sp, #12]
   11b9e:	e012      	b.n	11bc6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   11ba0:	9803      	ldr	r0, [sp, #12]
   11ba2:	9904      	ldr	r1, [sp, #16]
   11ba4:	b00a      	add	sp, #40	; 0x28
   11ba6:	bd80      	pop	{r7, pc}
   11ba8:	2000      	movs	r0, #0
   11baa:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11bae:	e7f7      	b.n	11ba0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   11bb0:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   11bb4:	07c0      	lsls	r0, r0, #31
   11bb6:	2800      	cmp	r0, #0
   11bb8:	d0f6      	beq.n	11ba8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   11bba:	e7ff      	b.n	11bbc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x88>
   11bbc:	2000      	movs	r0, #0
   11bbe:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11bc2:	e7f1      	b.n	11ba8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   11bc4:	e7f0      	b.n	11ba8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   11bc6:	9805      	ldr	r0, [sp, #20]
   11bc8:	2801      	cmp	r0, #1
   11bca:	d0f1      	beq.n	11bb0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x7c>
   11bcc:	e7fa      	b.n	11bc4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x90>

00011bce <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>:
   11bce:	b082      	sub	sp, #8
   11bd0:	9000      	str	r0, [sp, #0]
   11bd2:	9101      	str	r1, [sp, #4]
   11bd4:	b002      	add	sp, #8
   11bd6:	4770      	bx	lr

00011bd8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>:
   11bd8:	b580      	push	{r7, lr}
   11bda:	b086      	sub	sp, #24
   11bdc:	9003      	str	r0, [sp, #12]
   11bde:	9104      	str	r1, [sp, #16]
   11be0:	9205      	str	r2, [sp, #20]
   11be2:	9002      	str	r0, [sp, #8]
   11be4:	4610      	mov	r0, r2
   11be6:	9a02      	ldr	r2, [sp, #8]
   11be8:	9101      	str	r1, [sp, #4]
   11bea:	4611      	mov	r1, r2
   11bec:	9a01      	ldr	r2, [sp, #4]
   11bee:	f000 f846 	bl	11c7e <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>
   11bf2:	9000      	str	r0, [sp, #0]
   11bf4:	e7ff      	b.n	11bf6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E+0x1e>
   11bf6:	9800      	ldr	r0, [sp, #0]
   11bf8:	b006      	add	sp, #24
   11bfa:	bd80      	pop	{r7, pc}

00011bfc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>:
   11bfc:	b084      	sub	sp, #16
   11bfe:	9002      	str	r0, [sp, #8]
   11c00:	9103      	str	r1, [sp, #12]
   11c02:	9000      	str	r0, [sp, #0]
   11c04:	9101      	str	r1, [sp, #4]
   11c06:	9801      	ldr	r0, [sp, #4]
   11c08:	b004      	add	sp, #16
   11c0a:	4770      	bx	lr

00011c0c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>:
   11c0c:	b082      	sub	sp, #8
   11c0e:	9000      	str	r0, [sp, #0]
   11c10:	9101      	str	r1, [sp, #4]
   11c12:	b002      	add	sp, #8
   11c14:	4770      	bx	lr

00011c16 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>:
   11c16:	b081      	sub	sp, #4
   11c18:	9000      	str	r0, [sp, #0]
   11c1a:	b001      	add	sp, #4
   11c1c:	4770      	bx	lr

00011c1e <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>:
   11c1e:	b580      	push	{r7, lr}
   11c20:	b082      	sub	sp, #8
   11c22:	9001      	str	r0, [sp, #4]
   11c24:	f7ff fff7 	bl	11c16 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>
   11c28:	9000      	str	r0, [sp, #0]
   11c2a:	e7ff      	b.n	11c2c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE+0xe>
   11c2c:	9800      	ldr	r0, [sp, #0]
   11c2e:	b002      	add	sp, #8
   11c30:	bd80      	pop	{r7, pc}

00011c32 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>:
   11c32:	b580      	push	{r7, lr}
   11c34:	b084      	sub	sp, #16
   11c36:	9003      	str	r0, [sp, #12]
   11c38:	f7ff fff1 	bl	11c1e <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>
   11c3c:	9001      	str	r0, [sp, #4]
   11c3e:	e7ff      	b.n	11c40 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E+0xe>
   11c40:	9801      	ldr	r0, [sp, #4]
   11c42:	9002      	str	r0, [sp, #8]
   11c44:	9802      	ldr	r0, [sp, #8]
   11c46:	b004      	add	sp, #16
   11c48:	bd80      	pop	{r7, pc}

00011c4a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>:
   11c4a:	b082      	sub	sp, #8
   11c4c:	9000      	str	r0, [sp, #0]
   11c4e:	9101      	str	r1, [sp, #4]
   11c50:	b002      	add	sp, #8
   11c52:	4770      	bx	lr

00011c54 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>:
   11c54:	b580      	push	{r7, lr}
   11c56:	b086      	sub	sp, #24
   11c58:	9003      	str	r0, [sp, #12]
   11c5a:	9104      	str	r1, [sp, #16]
   11c5c:	9205      	str	r2, [sp, #20]
   11c5e:	9002      	str	r0, [sp, #8]
   11c60:	4608      	mov	r0, r1
   11c62:	4611      	mov	r1, r2
   11c64:	f7ff ffd2 	bl	11c0c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   11c68:	9001      	str	r0, [sp, #4]
   11c6a:	e7ff      	b.n	11c6c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x18>
   11c6c:	9801      	ldr	r0, [sp, #4]
   11c6e:	9902      	ldr	r1, [sp, #8]
   11c70:	f7ff ff4a 	bl	11b08 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>
   11c74:	9000      	str	r0, [sp, #0]
   11c76:	e7ff      	b.n	11c78 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x24>
   11c78:	9800      	ldr	r0, [sp, #0]
   11c7a:	b006      	add	sp, #24
   11c7c:	bd80      	pop	{r7, pc}

00011c7e <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>:
   11c7e:	b580      	push	{r7, lr}
   11c80:	b086      	sub	sp, #24
   11c82:	9003      	str	r0, [sp, #12]
   11c84:	9104      	str	r1, [sp, #16]
   11c86:	9205      	str	r2, [sp, #20]
   11c88:	9002      	str	r0, [sp, #8]
   11c8a:	4608      	mov	r0, r1
   11c8c:	4611      	mov	r1, r2
   11c8e:	f7ff ff9e 	bl	11bce <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
   11c92:	9001      	str	r0, [sp, #4]
   11c94:	e7ff      	b.n	11c96 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x18>
   11c96:	9801      	ldr	r0, [sp, #4]
   11c98:	9902      	ldr	r1, [sp, #8]
   11c9a:	f7ff ff1f 	bl	11adc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11c9e:	9000      	str	r0, [sp, #0]
   11ca0:	e7ff      	b.n	11ca2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x24>
   11ca2:	9800      	ldr	r0, [sp, #0]
   11ca4:	b006      	add	sp, #24
   11ca6:	bd80      	pop	{r7, pc}

00011ca8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>:
   11ca8:	b081      	sub	sp, #4
   11caa:	b001      	add	sp, #4
   11cac:	4770      	bx	lr

00011cae <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>:
   11cae:	b580      	push	{r7, lr}
   11cb0:	b086      	sub	sp, #24
   11cb2:	f8dd c020 	ldr.w	ip, [sp, #32]
   11cb6:	9102      	str	r1, [sp, #8]
   11cb8:	9203      	str	r2, [sp, #12]
   11cba:	9304      	str	r3, [sp, #16]
   11cbc:	f8cd c014 	str.w	ip, [sp, #20]
   11cc0:	f04f 0e00 	mov.w	lr, #0
   11cc4:	f8cd e004 	str.w	lr, [sp, #4]
   11cc8:	f8cd e000 	str.w	lr, [sp]
   11ccc:	f8cd e000 	str.w	lr, [sp]
   11cd0:	6001      	str	r1, [r0, #0]
   11cd2:	6042      	str	r2, [r0, #4]
   11cd4:	9900      	ldr	r1, [sp, #0]
   11cd6:	9a01      	ldr	r2, [sp, #4]
   11cd8:	6081      	str	r1, [r0, #8]
   11cda:	60c2      	str	r2, [r0, #12]
   11cdc:	6103      	str	r3, [r0, #16]
   11cde:	f8c0 c014 	str.w	ip, [r0, #20]
   11ce2:	b006      	add	sp, #24
   11ce4:	bd80      	pop	{r7, pc}

00011ce6 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>:
   11ce6:	b580      	push	{r7, lr}
   11ce8:	b084      	sub	sp, #16
   11cea:	9101      	str	r1, [sp, #4]
   11cec:	9202      	str	r2, [sp, #8]
   11cee:	9901      	ldr	r1, [sp, #4]
   11cf0:	9a02      	ldr	r2, [sp, #8]
   11cf2:	f000 fa94 	bl	1221e <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>
   11cf6:	e7ff      	b.n	11cf8 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE+0x12>
   11cf8:	b004      	add	sp, #16
   11cfa:	bd80      	pop	{r7, pc}

00011cfc <_ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE>:
   11cfc:	b081      	sub	sp, #4
   11cfe:	9000      	str	r0, [sp, #0]
   11d00:	b001      	add	sp, #4
   11d02:	4770      	bx	lr

00011d04 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>:
   11d04:	b081      	sub	sp, #4
   11d06:	9000      	str	r0, [sp, #0]
   11d08:	b001      	add	sp, #4
   11d0a:	4770      	bx	lr

00011d0c <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>:
   11d0c:	b580      	push	{r7, lr}
   11d0e:	b086      	sub	sp, #24
   11d10:	460a      	mov	r2, r1
   11d12:	9004      	str	r0, [sp, #16]
   11d14:	f88d 1017 	strb.w	r1, [sp, #23]
   11d18:	9203      	str	r2, [sp, #12]
   11d1a:	f7ff fff3 	bl	11d04 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   11d1e:	9002      	str	r0, [sp, #8]
   11d20:	e7ff      	b.n	11d22 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x16>
   11d22:	9802      	ldr	r0, [sp, #8]
   11d24:	9903      	ldr	r1, [sp, #12]
   11d26:	f000 f805 	bl	11d34 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   11d2a:	9001      	str	r0, [sp, #4]
   11d2c:	e7ff      	b.n	11d2e <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x22>
   11d2e:	9801      	ldr	r0, [sp, #4]
   11d30:	b006      	add	sp, #24
   11d32:	bd80      	pop	{r7, pc}

00011d34 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>:
   11d34:	b086      	sub	sp, #24
   11d36:	460a      	mov	r2, r1
   11d38:	f88d 100f 	strb.w	r1, [sp, #15]
   11d3c:	9005      	str	r0, [sp, #20]
   11d3e:	f89d 100f 	ldrb.w	r1, [sp, #15]
   11d42:	9002      	str	r0, [sp, #8]
   11d44:	9101      	str	r1, [sp, #4]
   11d46:	9901      	ldr	r1, [sp, #4]
   11d48:	e8df f001 	tbb	[pc, r1]
   11d4c:	03102317 	.word	0x03102317
   11d50:	001c      	.short	0x001c
   11d52:	f64d 609c 	movw	r0, #56988	; 0xde9c
   11d56:	f2c0 0001 	movt	r0, #1
   11d5a:	f64d 7218 	movw	r2, #57112	; 0xdf18
   11d5e:	f2c0 0201 	movt	r2, #1
   11d62:	2131      	movs	r1, #49	; 0x31
   11d64:	f003 fc42 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11d68:	defe      	udf	#254	; 0xfe
   11d6a:	defe      	udf	#254	; 0xfe
   11d6c:	9802      	ldr	r0, [sp, #8]
   11d6e:	6801      	ldr	r1, [r0, #0]
   11d70:	f3bf 8f5f 	dmb	sy
   11d74:	9104      	str	r1, [sp, #16]
   11d76:	e7ff      	b.n	11d78 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x44>
   11d78:	e017      	b.n	11daa <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   11d7a:	9802      	ldr	r0, [sp, #8]
   11d7c:	6801      	ldr	r1, [r0, #0]
   11d7e:	9104      	str	r1, [sp, #16]
   11d80:	e7ff      	b.n	11d82 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x4e>
   11d82:	e012      	b.n	11daa <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   11d84:	9802      	ldr	r0, [sp, #8]
   11d86:	6801      	ldr	r1, [r0, #0]
   11d88:	f3bf 8f5f 	dmb	sy
   11d8c:	9104      	str	r1, [sp, #16]
   11d8e:	e7ff      	b.n	11d90 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x5c>
   11d90:	e00b      	b.n	11daa <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   11d92:	f64d 7028 	movw	r0, #57128	; 0xdf28
   11d96:	f2c0 0001 	movt	r0, #1
   11d9a:	f64d 7218 	movw	r2, #57112	; 0xdf18
   11d9e:	f2c0 0201 	movt	r2, #1
   11da2:	2128      	movs	r1, #40	; 0x28
   11da4:	f003 fc22 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11da8:	defe      	udf	#254	; 0xfe
   11daa:	9804      	ldr	r0, [sp, #16]
   11dac:	b006      	add	sp, #24
   11dae:	4770      	bx	lr

00011db0 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>:
   11db0:	b081      	sub	sp, #4
   11db2:	9000      	str	r0, [sp, #0]
   11db4:	6800      	ldr	r0, [r0, #0]
   11db6:	b001      	add	sp, #4
   11db8:	4770      	bx	lr

00011dba <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>:
   11dba:	b082      	sub	sp, #8
   11dbc:	9001      	str	r0, [sp, #4]
   11dbe:	6801      	ldr	r1, [r0, #0]
   11dc0:	6840      	ldr	r0, [r0, #4]
   11dc2:	9000      	str	r0, [sp, #0]
   11dc4:	4608      	mov	r0, r1
   11dc6:	9900      	ldr	r1, [sp, #0]
   11dc8:	b002      	add	sp, #8
   11dca:	4770      	bx	lr

00011dcc <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>:
   11dcc:	b580      	push	{r7, lr}
   11dce:	b08c      	sub	sp, #48	; 0x30
   11dd0:	9101      	str	r1, [sp, #4]
   11dd2:	9202      	str	r2, [sp, #8]
   11dd4:	2100      	movs	r1, #0
   11dd6:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   11dda:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   11dde:	2101      	movs	r1, #1
   11de0:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   11de4:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   11de8:	9901      	ldr	r1, [sp, #4]
   11dea:	2900      	cmp	r1, #0
   11dec:	460a      	mov	r2, r1
   11dee:	bf18      	it	ne
   11df0:	2201      	movne	r2, #1
   11df2:	2900      	cmp	r1, #0
   11df4:	9000      	str	r0, [sp, #0]
   11df6:	d001      	beq.n	11dfc <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x30>
   11df8:	e7ff      	b.n	11dfa <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x2e>
   11dfa:	e008      	b.n	11e0e <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x42>
   11dfc:	2000      	movs	r0, #0
   11dfe:	9900      	ldr	r1, [sp, #0]
   11e00:	6088      	str	r0, [r1, #8]
   11e02:	6048      	str	r0, [r1, #4]
   11e04:	6008      	str	r0, [r1, #0]
   11e06:	2002      	movs	r0, #2
   11e08:	6008      	str	r0, [r1, #0]
   11e0a:	e021      	b.n	11e50 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   11e0c:	defe      	udf	#254	; 0xfe
   11e0e:	2000      	movs	r0, #0
   11e10:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11e14:	9901      	ldr	r1, [sp, #4]
   11e16:	9a02      	ldr	r2, [sp, #8]
   11e18:	910a      	str	r1, [sp, #40]	; 0x28
   11e1a:	920b      	str	r2, [sp, #44]	; 0x2c
   11e1c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   11e20:	9106      	str	r1, [sp, #24]
   11e22:	9207      	str	r2, [sp, #28]
   11e24:	9906      	ldr	r1, [sp, #24]
   11e26:	9a07      	ldr	r2, [sp, #28]
   11e28:	a803      	add	r0, sp, #12
   11e2a:	f7ff ff5c 	bl	11ce6 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>
   11e2e:	e7ff      	b.n	11e30 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x64>
   11e30:	9803      	ldr	r0, [sp, #12]
   11e32:	9904      	ldr	r1, [sp, #16]
   11e34:	9a05      	ldr	r2, [sp, #20]
   11e36:	9b00      	ldr	r3, [sp, #0]
   11e38:	609a      	str	r2, [r3, #8]
   11e3a:	6059      	str	r1, [r3, #4]
   11e3c:	6018      	str	r0, [r3, #0]
   11e3e:	e007      	b.n	11e50 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   11e40:	9801      	ldr	r0, [sp, #4]
   11e42:	2800      	cmp	r0, #0
   11e44:	d10c      	bne.n	11e60 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x94>
   11e46:	e015      	b.n	11e74 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa8>
   11e48:	2000      	movs	r0, #0
   11e4a:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   11e4e:	e7f7      	b.n	11e40 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   11e50:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   11e54:	07c0      	lsls	r0, r0, #31
   11e56:	2800      	cmp	r0, #0
   11e58:	d1f6      	bne.n	11e48 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x7c>
   11e5a:	e7f1      	b.n	11e40 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   11e5c:	b00c      	add	sp, #48	; 0x30
   11e5e:	bd80      	pop	{r7, pc}
   11e60:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   11e64:	07c0      	lsls	r0, r0, #31
   11e66:	2800      	cmp	r0, #0
   11e68:	d0f8      	beq.n	11e5c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   11e6a:	e7ff      	b.n	11e6c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa0>
   11e6c:	2000      	movs	r0, #0
   11e6e:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11e72:	e7f3      	b.n	11e5c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   11e74:	e7f2      	b.n	11e5c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>

00011e76 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>:
   11e76:	b081      	sub	sp, #4
   11e78:	b001      	add	sp, #4
   11e7a:	4770      	bx	lr

00011e7c <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>:
   11e7c:	b5b0      	push	{r4, r5, r7, lr}
   11e7e:	b081      	sub	sp, #4
   11e80:	9100      	str	r1, [sp, #0]
   11e82:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   11e86:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   11e8a:	b001      	add	sp, #4
   11e8c:	bdb0      	pop	{r4, r5, r7, pc}

00011e8e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>:
   11e8e:	b580      	push	{r7, lr}
   11e90:	b088      	sub	sp, #32
   11e92:	9106      	str	r1, [sp, #24]
   11e94:	680a      	ldr	r2, [r1, #0]
   11e96:	1e93      	subs	r3, r2, #2
   11e98:	bf18      	it	ne
   11e9a:	2301      	movne	r3, #1
   11e9c:	2a02      	cmp	r2, #2
   11e9e:	9102      	str	r1, [sp, #8]
   11ea0:	9001      	str	r0, [sp, #4]
   11ea2:	d001      	beq.n	11ea8 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x1a>
   11ea4:	e7ff      	b.n	11ea6 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x18>
   11ea6:	e008      	b.n	11eba <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x2c>
   11ea8:	2000      	movs	r0, #0
   11eaa:	9901      	ldr	r1, [sp, #4]
   11eac:	6088      	str	r0, [r1, #8]
   11eae:	6048      	str	r0, [r1, #4]
   11eb0:	6008      	str	r0, [r1, #0]
   11eb2:	2002      	movs	r0, #2
   11eb4:	6008      	str	r0, [r1, #0]
   11eb6:	e00f      	b.n	11ed8 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   11eb8:	defe      	udf	#254	; 0xfe
   11eba:	9802      	ldr	r0, [sp, #8]
   11ebc:	9007      	str	r0, [sp, #28]
   11ebe:	a803      	add	r0, sp, #12
   11ec0:	9902      	ldr	r1, [sp, #8]
   11ec2:	f000 f9b5 	bl	12230 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>
   11ec6:	e7ff      	b.n	11ec8 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x3a>
   11ec8:	9803      	ldr	r0, [sp, #12]
   11eca:	9904      	ldr	r1, [sp, #16]
   11ecc:	9a05      	ldr	r2, [sp, #20]
   11ece:	9b01      	ldr	r3, [sp, #4]
   11ed0:	609a      	str	r2, [r3, #8]
   11ed2:	6059      	str	r1, [r3, #4]
   11ed4:	6018      	str	r0, [r3, #0]
   11ed6:	e7ff      	b.n	11ed8 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   11ed8:	b008      	add	sp, #32
   11eda:	bd80      	pop	{r7, pc}

00011edc <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>:
   11edc:	b580      	push	{r7, lr}
   11ede:	b086      	sub	sp, #24
   11ee0:	9004      	str	r0, [sp, #16]
   11ee2:	6801      	ldr	r1, [r0, #0]
   11ee4:	2900      	cmp	r1, #0
   11ee6:	9001      	str	r0, [sp, #4]
   11ee8:	d001      	beq.n	11eee <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x12>
   11eea:	e7ff      	b.n	11eec <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x10>
   11eec:	e003      	b.n	11ef6 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x1a>
   11eee:	2000      	movs	r0, #0
   11ef0:	9002      	str	r0, [sp, #8]
   11ef2:	e00d      	b.n	11f10 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   11ef4:	defe      	udf	#254	; 0xfe
   11ef6:	9801      	ldr	r0, [sp, #4]
   11ef8:	1d01      	adds	r1, r0, #4
   11efa:	9105      	str	r1, [sp, #20]
   11efc:	4608      	mov	r0, r1
   11efe:	f7ff ff57 	bl	11db0 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>
   11f02:	9000      	str	r0, [sp, #0]
   11f04:	e7ff      	b.n	11f06 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x2a>
   11f06:	9800      	ldr	r0, [sp, #0]
   11f08:	9003      	str	r0, [sp, #12]
   11f0a:	2101      	movs	r1, #1
   11f0c:	9102      	str	r1, [sp, #8]
   11f0e:	e7ff      	b.n	11f10 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   11f10:	9802      	ldr	r0, [sp, #8]
   11f12:	9903      	ldr	r1, [sp, #12]
   11f14:	b006      	add	sp, #24
   11f16:	bd80      	pop	{r7, pc}

00011f18 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>:
    fn clone(&self) -> Level {
   11f18:	b081      	sub	sp, #4
   11f1a:	9000      	str	r0, [sp, #0]
        *self
   11f1c:	6800      	ldr	r0, [r0, #0]
    }
   11f1e:	b001      	add	sp, #4
   11f20:	4770      	bx	lr

00011f22 <_ZN3log6Record7builder17hde62ab0132265febE>:
    pub fn builder() -> RecordBuilder<'a> {
   11f22:	b580      	push	{r7, lr}
        RecordBuilder::new()
   11f24:	f000 f802 	bl	11f2c <_ZN3log13RecordBuilder3new17haca8312579858419E>
   11f28:	e7ff      	b.n	11f2a <_ZN3log6Record7builder17hde62ab0132265febE+0x8>
    }
   11f2a:	bd80      	pop	{r7, pc}

00011f2c <_ZN3log13RecordBuilder3new17haca8312579858419E>:
    pub fn new() -> RecordBuilder<'a> {
   11f2c:	b570      	push	{r4, r5, r6, lr}
   11f2e:	b0aa      	sub	sp, #168	; 0xa8
                args: format_args!(""),
   11f30:	f64d 7168 	movw	r1, #57192	; 0xdf68
   11f34:	f2c0 0101 	movt	r1, #1
   11f38:	6809      	ldr	r1, [r1, #0]
   11f3a:	466a      	mov	r2, sp
   11f3c:	2300      	movs	r3, #0
   11f3e:	6013      	str	r3, [r2, #0]
   11f40:	aa16      	add	r2, sp, #88	; 0x58
   11f42:	9004      	str	r0, [sp, #16]
   11f44:	4610      	mov	r0, r2
   11f46:	9103      	str	r1, [sp, #12]
   11f48:	461a      	mov	r2, r3
   11f4a:	9b03      	ldr	r3, [sp, #12]
   11f4c:	f7ff feaf 	bl	11cae <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>
   11f50:	e7ff      	b.n	11f52 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x26>
   11f52:	a81f      	add	r0, sp, #124	; 0x7c
                metadata: Metadata::builder().build(),
   11f54:	f000 f891 	bl	1207a <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>
   11f58:	e7ff      	b.n	11f5a <_ZN3log13RecordBuilder3new17haca8312579858419E+0x2e>
   11f5a:	a81c      	add	r0, sp, #112	; 0x70
   11f5c:	a91f      	add	r1, sp, #124	; 0x7c
   11f5e:	f000 f8a5 	bl	120ac <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>
   11f62:	e7ff      	b.n	11f64 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x38>
   11f64:	2000      	movs	r0, #0
                module_path: None,
   11f66:	9024      	str	r0, [sp, #144]	; 0x90
   11f68:	9023      	str	r0, [sp, #140]	; 0x8c
   11f6a:	9022      	str	r0, [sp, #136]	; 0x88
   11f6c:	2102      	movs	r1, #2
   11f6e:	9122      	str	r1, [sp, #136]	; 0x88
                file: None,
   11f70:	9027      	str	r0, [sp, #156]	; 0x9c
   11f72:	9026      	str	r0, [sp, #152]	; 0x98
   11f74:	9025      	str	r0, [sp, #148]	; 0x94
   11f76:	9125      	str	r1, [sp, #148]	; 0x94
                line: None,
   11f78:	9028      	str	r0, [sp, #160]	; 0xa0
            record: Record {
   11f7a:	981c      	ldr	r0, [sp, #112]	; 0x70
   11f7c:	991d      	ldr	r1, [sp, #116]	; 0x74
   11f7e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   11f80:	9207      	str	r2, [sp, #28]
   11f82:	9106      	str	r1, [sp, #24]
   11f84:	9005      	str	r0, [sp, #20]
   11f86:	a805      	add	r0, sp, #20
   11f88:	f100 010c 	add.w	r1, r0, #12
   11f8c:	aa16      	add	r2, sp, #88	; 0x58
   11f8e:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   11f92:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   11f96:	9922      	ldr	r1, [sp, #136]	; 0x88
   11f98:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   11f9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   11f9c:	9310      	str	r3, [sp, #64]	; 0x40
   11f9e:	920f      	str	r2, [sp, #60]	; 0x3c
   11fa0:	910e      	str	r1, [sp, #56]	; 0x38
   11fa2:	9925      	ldr	r1, [sp, #148]	; 0x94
   11fa4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   11fa6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   11fa8:	9313      	str	r3, [sp, #76]	; 0x4c
   11faa:	9212      	str	r2, [sp, #72]	; 0x48
   11fac:	9111      	str	r1, [sp, #68]	; 0x44
   11fae:	9928      	ldr	r1, [sp, #160]	; 0xa0
   11fb0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   11fb2:	9114      	str	r1, [sp, #80]	; 0x50
   11fb4:	9215      	str	r2, [sp, #84]	; 0x54
   11fb6:	2244      	movs	r2, #68	; 0x44
        return RecordBuilder {
   11fb8:	9904      	ldr	r1, [sp, #16]
   11fba:	9002      	str	r0, [sp, #8]
   11fbc:	4608      	mov	r0, r1
   11fbe:	9902      	ldr	r1, [sp, #8]
   11fc0:	f009 fe20 	bl	1bc04 <__aeabi_memcpy>
    }
   11fc4:	b02a      	add	sp, #168	; 0xa8
   11fc6:	bd70      	pop	{r4, r5, r6, pc}

00011fc8 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>:
    pub fn args(&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a> {
   11fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   11fca:	b087      	sub	sp, #28
   11fcc:	9006      	str	r0, [sp, #24]
   11fce:	466a      	mov	r2, sp
        self.record.args = args;
   11fd0:	4613      	mov	r3, r2
   11fd2:	e891 50f0 	ldmia.w	r1, {r4, r5, r6, r7, ip, lr}
   11fd6:	e883 50f0 	stmia.w	r3, {r4, r5, r6, r7, ip, lr}
   11fda:	f100 010c 	add.w	r1, r0, #12
   11fde:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   11fe2:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    }
   11fe6:	b007      	add	sp, #28
   11fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011fea <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>:
    pub fn level(&mut self, level: Level) -> &mut RecordBuilder<'a> {
   11fea:	b082      	sub	sp, #8
   11fec:	9000      	str	r0, [sp, #0]
   11fee:	9101      	str	r1, [sp, #4]
        self.record.metadata.level = level;
   11ff0:	6001      	str	r1, [r0, #0]
    }
   11ff2:	b002      	add	sp, #8
   11ff4:	4770      	bx	lr

00011ff6 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>:
    pub fn target(&mut self, target: &'a str) -> &mut RecordBuilder<'a> {
   11ff6:	b083      	sub	sp, #12
   11ff8:	9000      	str	r0, [sp, #0]
   11ffa:	9101      	str	r1, [sp, #4]
   11ffc:	9202      	str	r2, [sp, #8]
        self.record.metadata.target = target;
   11ffe:	6041      	str	r1, [r0, #4]
   12000:	6082      	str	r2, [r0, #8]
    }
   12002:	b003      	add	sp, #12
   12004:	4770      	bx	lr

00012006 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>:
    pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {
   12006:	b580      	push	{r7, lr}
   12008:	b088      	sub	sp, #32
   1200a:	9005      	str	r0, [sp, #20]
   1200c:	9106      	str	r1, [sp, #24]
   1200e:	9207      	str	r2, [sp, #28]
   12010:	ab02      	add	r3, sp, #8
        self.record.module_path = path.map(MaybeStaticStr::Static);
   12012:	9001      	str	r0, [sp, #4]
   12014:	4618      	mov	r0, r3
   12016:	f7ff fed9 	bl	11dcc <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   1201a:	e7ff      	b.n	1201c <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE+0x16>
   1201c:	9802      	ldr	r0, [sp, #8]
   1201e:	9903      	ldr	r1, [sp, #12]
   12020:	9a04      	ldr	r2, [sp, #16]
   12022:	9b01      	ldr	r3, [sp, #4]
   12024:	62da      	str	r2, [r3, #44]	; 0x2c
   12026:	6299      	str	r1, [r3, #40]	; 0x28
   12028:	6258      	str	r0, [r3, #36]	; 0x24
    }
   1202a:	4618      	mov	r0, r3
   1202c:	b008      	add	sp, #32
   1202e:	bd80      	pop	{r7, pc}

00012030 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>:
    pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {
   12030:	b580      	push	{r7, lr}
   12032:	b088      	sub	sp, #32
   12034:	9005      	str	r0, [sp, #20]
   12036:	9106      	str	r1, [sp, #24]
   12038:	9207      	str	r2, [sp, #28]
   1203a:	ab02      	add	r3, sp, #8
        self.record.file = file.map(MaybeStaticStr::Static);
   1203c:	9001      	str	r0, [sp, #4]
   1203e:	4618      	mov	r0, r3
   12040:	f7ff fec4 	bl	11dcc <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   12044:	e7ff      	b.n	12046 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E+0x16>
   12046:	9802      	ldr	r0, [sp, #8]
   12048:	9903      	ldr	r1, [sp, #12]
   1204a:	9a04      	ldr	r2, [sp, #16]
   1204c:	9b01      	ldr	r3, [sp, #4]
   1204e:	639a      	str	r2, [r3, #56]	; 0x38
   12050:	6359      	str	r1, [r3, #52]	; 0x34
   12052:	6318      	str	r0, [r3, #48]	; 0x30
    }
   12054:	4618      	mov	r0, r3
   12056:	b008      	add	sp, #32
   12058:	bd80      	pop	{r7, pc}

0001205a <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>:
    pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {
   1205a:	b083      	sub	sp, #12
   1205c:	9000      	str	r0, [sp, #0]
   1205e:	9101      	str	r1, [sp, #4]
   12060:	9202      	str	r2, [sp, #8]
        self.record.line = line;
   12062:	63c1      	str	r1, [r0, #60]	; 0x3c
   12064:	6402      	str	r2, [r0, #64]	; 0x40
    }
   12066:	b003      	add	sp, #12
   12068:	4770      	bx	lr

0001206a <_ZN3log13RecordBuilder5build17h83529556a009112eE>:
    pub fn build(&self) -> Record<'a> {
   1206a:	b580      	push	{r7, lr}
   1206c:	b082      	sub	sp, #8
   1206e:	9101      	str	r1, [sp, #4]
        self.record.clone()
   12070:	f000 f8e8 	bl	12244 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>
   12074:	e7ff      	b.n	12076 <_ZN3log13RecordBuilder5build17h83529556a009112eE+0xc>
    }
   12076:	b002      	add	sp, #8
   12078:	bd80      	pop	{r7, pc}

0001207a <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>:
    pub fn builder() -> MetadataBuilder<'a> {
   1207a:	b580      	push	{r7, lr}
        MetadataBuilder::new()
   1207c:	f000 f802 	bl	12084 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>
   12080:	e7ff      	b.n	12082 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE+0x8>
    }
   12082:	bd80      	pop	{r7, pc}

00012084 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>:
    pub fn new() -> MetadataBuilder<'a> {
   12084:	b084      	sub	sp, #16
   12086:	2103      	movs	r1, #3
                level: Level::Info,
   12088:	9103      	str	r1, [sp, #12]
            metadata: Metadata {
   1208a:	9903      	ldr	r1, [sp, #12]
   1208c:	9100      	str	r1, [sp, #0]
   1208e:	f64d 7150 	movw	r1, #57168	; 0xdf50
   12092:	f2c0 0101 	movt	r1, #1
   12096:	9101      	str	r1, [sp, #4]
   12098:	2100      	movs	r1, #0
   1209a:	9102      	str	r1, [sp, #8]
        MetadataBuilder {
   1209c:	9900      	ldr	r1, [sp, #0]
   1209e:	9a01      	ldr	r2, [sp, #4]
   120a0:	9b02      	ldr	r3, [sp, #8]
   120a2:	6083      	str	r3, [r0, #8]
   120a4:	6042      	str	r2, [r0, #4]
   120a6:	6001      	str	r1, [r0, #0]
    }
   120a8:	b004      	add	sp, #16
   120aa:	4770      	bx	lr

000120ac <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>:
    pub fn build(&self) -> Metadata<'a> {
   120ac:	b580      	push	{r7, lr}
   120ae:	b082      	sub	sp, #8
   120b0:	9101      	str	r1, [sp, #4]
        self.metadata.clone()
   120b2:	f000 f91c 	bl	122ee <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   120b6:	e7ff      	b.n	120b8 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E+0xc>
    }
   120b8:	b002      	add	sp, #8
   120ba:	bd80      	pop	{r7, pc}

000120bc <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE>:
    fn enabled(&self, _: &Metadata) -> bool {
   120bc:	b082      	sub	sp, #8
   120be:	9000      	str	r0, [sp, #0]
   120c0:	9101      	str	r1, [sp, #4]
   120c2:	2000      	movs	r0, #0
    }
   120c4:	b002      	add	sp, #8
   120c6:	4770      	bx	lr

000120c8 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE>:
    fn log(&self, _: &Record) {}
   120c8:	b082      	sub	sp, #8
   120ca:	9000      	str	r0, [sp, #0]
   120cc:	9101      	str	r1, [sp, #4]
   120ce:	b002      	add	sp, #8
   120d0:	4770      	bx	lr

000120d2 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE>:
    fn flush(&self) {}
   120d2:	b081      	sub	sp, #4
   120d4:	9000      	str	r0, [sp, #0]
   120d6:	b001      	add	sp, #4
   120d8:	4770      	bx	lr

000120da <_ZN3log6logger17hf609e7cc1c031552E>:
}

/// Returns a reference to the logger.
///
/// If a logger has not been set, a no-op implementation is returned.
pub fn logger() -> &'static Log {
   120da:	b580      	push	{r7, lr}
   120dc:	b084      	sub	sp, #16
   120de:	2004      	movs	r0, #4
    unsafe {
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   120e0:	f88d 000f 	strb.w	r0, [sp, #15]
   120e4:	f89d 100f 	ldrb.w	r1, [sp, #15]
   120e8:	f644 2068 	movw	r0, #19048	; 0x4a68
   120ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
   120f0:	f7ff fe0c 	bl	11d0c <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>
   120f4:	9000      	str	r0, [sp, #0]
   120f6:	e7ff      	b.n	120f8 <_ZN3log6logger17hf609e7cc1c031552E+0x1e>
   120f8:	9800      	ldr	r0, [sp, #0]
   120fa:	2802      	cmp	r0, #2
   120fc:	d109      	bne.n	12112 <_ZN3log6logger17hf609e7cc1c031552E+0x38>
   120fe:	e7ff      	b.n	12100 <_ZN3log6logger17hf609e7cc1c031552E+0x26>
            static NOP: NopLogger = NopLogger;
            &NOP
        } else {
            LOGGER
   12100:	f240 00f0 	movw	r0, #240	; 0xf0
   12104:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12108:	6801      	ldr	r1, [r0, #0]
   1210a:	6840      	ldr	r0, [r0, #4]
   1210c:	9101      	str	r1, [sp, #4]
   1210e:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   12110:	e00a      	b.n	12128 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
            &NOP
   12112:	f64d 7084 	movw	r0, #57220	; 0xdf84
   12116:	f2c0 0001 	movt	r0, #1
   1211a:	9001      	str	r0, [sp, #4]
   1211c:	f64d 706c 	movw	r0, #57196	; 0xdf6c
   12120:	f2c0 0001 	movt	r0, #1
   12124:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   12126:	e7ff      	b.n	12128 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
   12128:	9801      	ldr	r0, [sp, #4]
   1212a:	9902      	ldr	r1, [sp, #8]
        }
    }
}
   1212c:	b004      	add	sp, #16
   1212e:	bd80      	pop	{r7, pc}

00012130 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>:

// WARNING: this is not part of the crate's public API and is subject to change at any time
#[doc(hidden)]
pub fn __private_api_log(
   12130:	b570      	push	{r4, r5, r6, lr}
   12132:	b0ca      	sub	sp, #296	; 0x128
   12134:	9141      	str	r1, [sp, #260]	; 0x104
   12136:	9242      	str	r2, [sp, #264]	; 0x108
    args: fmt::Arguments,
    level: Level,
    &(target, module_path, file, line): &(&str, &'static str, &'static str, u32),
   12138:	6813      	ldr	r3, [r2, #0]
   1213a:	f8d2 c004 	ldr.w	ip, [r2, #4]
   1213e:	9343      	str	r3, [sp, #268]	; 0x10c
   12140:	f8cd c110 	str.w	ip, [sp, #272]	; 0x110
   12144:	f8d2 e008 	ldr.w	lr, [r2, #8]
   12148:	68d4      	ldr	r4, [r2, #12]
   1214a:	f8cd e114 	str.w	lr, [sp, #276]	; 0x114
   1214e:	9446      	str	r4, [sp, #280]	; 0x118
   12150:	6915      	ldr	r5, [r2, #16]
   12152:	6956      	ldr	r6, [r2, #20]
   12154:	9547      	str	r5, [sp, #284]	; 0x11c
   12156:	9648      	str	r6, [sp, #288]	; 0x120
   12158:	6992      	ldr	r2, [r2, #24]
   1215a:	9249      	str	r2, [sp, #292]	; 0x124
) {
    logger().log(
   1215c:	9112      	str	r1, [sp, #72]	; 0x48
   1215e:	9011      	str	r0, [sp, #68]	; 0x44
   12160:	9310      	str	r3, [sp, #64]	; 0x40
   12162:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   12166:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   1216a:	940d      	str	r4, [sp, #52]	; 0x34
   1216c:	950c      	str	r5, [sp, #48]	; 0x30
   1216e:	960b      	str	r6, [sp, #44]	; 0x2c
   12170:	920a      	str	r2, [sp, #40]	; 0x28
   12172:	f7ff ffb2 	bl	120da <_ZN3log6logger17hf609e7cc1c031552E>
   12176:	9009      	str	r0, [sp, #36]	; 0x24
   12178:	9108      	str	r1, [sp, #32]
   1217a:	e7ff      	b.n	1217c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x4c>
   1217c:	a824      	add	r0, sp, #144	; 0x90
        &Record::builder()
   1217e:	f7ff fed0 	bl	11f22 <_ZN3log6Record7builder17hde62ab0132265febE>
   12182:	e7ff      	b.n	12184 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x54>
   12184:	a835      	add	r0, sp, #212	; 0xd4
            .args(args)
   12186:	4601      	mov	r1, r0
   12188:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1218a:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   1218e:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   12192:	a924      	add	r1, sp, #144	; 0x90
        &Record::builder()
   12194:	9007      	str	r0, [sp, #28]
   12196:	4608      	mov	r0, r1
   12198:	9907      	ldr	r1, [sp, #28]
   1219a:	f7ff ff15 	bl	11fc8 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>
   1219e:	9006      	str	r0, [sp, #24]
   121a0:	e7ff      	b.n	121a2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x72>
   121a2:	9806      	ldr	r0, [sp, #24]
   121a4:	9912      	ldr	r1, [sp, #72]	; 0x48
   121a6:	f7ff ff20 	bl	11fea <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>
   121aa:	9005      	str	r0, [sp, #20]
   121ac:	e7ff      	b.n	121ae <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x7e>
   121ae:	9805      	ldr	r0, [sp, #20]
   121b0:	9910      	ldr	r1, [sp, #64]	; 0x40
   121b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   121b4:	f7ff ff1f 	bl	11ff6 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>
   121b8:	9004      	str	r0, [sp, #16]
   121ba:	e7ff      	b.n	121bc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x8c>
            .level(level)
            .target(target)
            .module_path_static(Some(module_path))
   121bc:	980e      	ldr	r0, [sp, #56]	; 0x38
   121be:	903b      	str	r0, [sp, #236]	; 0xec
   121c0:	990d      	ldr	r1, [sp, #52]	; 0x34
   121c2:	913c      	str	r1, [sp, #240]	; 0xf0
        &Record::builder()
   121c4:	993b      	ldr	r1, [sp, #236]	; 0xec
   121c6:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   121c8:	9804      	ldr	r0, [sp, #16]
   121ca:	f7ff ff1c 	bl	12006 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>
   121ce:	9003      	str	r0, [sp, #12]
   121d0:	e7ff      	b.n	121d2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xa2>
            .file_static(Some(file))
   121d2:	980c      	ldr	r0, [sp, #48]	; 0x30
   121d4:	903d      	str	r0, [sp, #244]	; 0xf4
   121d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   121d8:	913e      	str	r1, [sp, #248]	; 0xf8
        &Record::builder()
   121da:	993d      	ldr	r1, [sp, #244]	; 0xf4
   121dc:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
   121de:	9803      	ldr	r0, [sp, #12]
   121e0:	f7ff ff26 	bl	12030 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>
   121e4:	9002      	str	r0, [sp, #8]
   121e6:	e7ff      	b.n	121e8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xb8>
            .line(Some(line))
   121e8:	980a      	ldr	r0, [sp, #40]	; 0x28
   121ea:	9040      	str	r0, [sp, #256]	; 0x100
   121ec:	2101      	movs	r1, #1
   121ee:	913f      	str	r1, [sp, #252]	; 0xfc
        &Record::builder()
   121f0:	993f      	ldr	r1, [sp, #252]	; 0xfc
   121f2:	9a40      	ldr	r2, [sp, #256]	; 0x100
   121f4:	9802      	ldr	r0, [sp, #8]
   121f6:	f7ff ff30 	bl	1205a <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>
   121fa:	9001      	str	r0, [sp, #4]
   121fc:	e7ff      	b.n	121fe <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xce>
   121fe:	a813      	add	r0, sp, #76	; 0x4c
   12200:	9901      	ldr	r1, [sp, #4]
   12202:	f7ff ff32 	bl	1206a <_ZN3log13RecordBuilder5build17h83529556a009112eE>
   12206:	e7ff      	b.n	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xd8>
    logger().log(
   12208:	9808      	ldr	r0, [sp, #32]
   1220a:	6901      	ldr	r1, [r0, #16]
   1220c:	aa13      	add	r2, sp, #76	; 0x4c
   1220e:	9809      	ldr	r0, [sp, #36]	; 0x24
   12210:	9100      	str	r1, [sp, #0]
   12212:	4611      	mov	r1, r2
   12214:	9a00      	ldr	r2, [sp, #0]
   12216:	4790      	blx	r2
   12218:	e7ff      	b.n	1221a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xea>
            .build(),
    );
}
   1221a:	b04a      	add	sp, #296	; 0x128
   1221c:	bd70      	pop	{r4, r5, r6, pc}

0001221e <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>:
    Static(&'static str),
   1221e:	b082      	sub	sp, #8
   12220:	9100      	str	r1, [sp, #0]
   12222:	9201      	str	r2, [sp, #4]
   12224:	6041      	str	r1, [r0, #4]
   12226:	6082      	str	r2, [r0, #8]
   12228:	2100      	movs	r1, #0
   1222a:	6001      	str	r1, [r0, #0]
   1222c:	b002      	add	sp, #8
   1222e:	4770      	bx	lr

00012230 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>:
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   12230:	b081      	sub	sp, #4
   12232:	9100      	str	r1, [sp, #0]
   12234:	680a      	ldr	r2, [r1, #0]
   12236:	684b      	ldr	r3, [r1, #4]
   12238:	6889      	ldr	r1, [r1, #8]
   1223a:	6081      	str	r1, [r0, #8]
   1223c:	6043      	str	r3, [r0, #4]
   1223e:	6002      	str	r2, [r0, #0]
   12240:	b001      	add	sp, #4
   12242:	4770      	bx	lr

00012244 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>:
#[derive(Clone, Debug)]
   12244:	b570      	push	{r4, r5, r6, lr}
   12246:	b09c      	sub	sp, #112	; 0x70
   12248:	9116      	str	r1, [sp, #88]	; 0x58
    metadata: Metadata<'a>,
   1224a:	9117      	str	r1, [sp, #92]	; 0x5c
    args: fmt::Arguments<'a>,
   1224c:	f101 020c 	add.w	r2, r1, #12
   12250:	4613      	mov	r3, r2
   12252:	9218      	str	r2, [sp, #96]	; 0x60
    module_path: Option<MaybeStaticStr<'a>>,
   12254:	f101 0224 	add.w	r2, r1, #36	; 0x24
   12258:	4694      	mov	ip, r2
   1225a:	9219      	str	r2, [sp, #100]	; 0x64
    file: Option<MaybeStaticStr<'a>>,
   1225c:	f101 0230 	add.w	r2, r1, #48	; 0x30
   12260:	4696      	mov	lr, r2
   12262:	921a      	str	r2, [sp, #104]	; 0x68
    line: Option<u32>,
   12264:	f101 023c 	add.w	r2, r1, #60	; 0x3c
   12268:	4614      	mov	r4, r2
   1226a:	921b      	str	r2, [sp, #108]	; 0x6c
   1226c:	aa07      	add	r2, sp, #28
    metadata: Metadata<'a>,
   1226e:	9006      	str	r0, [sp, #24]
   12270:	4610      	mov	r0, r2
   12272:	9305      	str	r3, [sp, #20]
   12274:	f8cd c010 	str.w	ip, [sp, #16]
   12278:	f8cd e00c 	str.w	lr, [sp, #12]
   1227c:	9402      	str	r4, [sp, #8]
   1227e:	f000 f836 	bl	122ee <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   12282:	e7ff      	b.n	12284 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x40>
   12284:	a80a      	add	r0, sp, #40	; 0x28
    args: fmt::Arguments<'a>,
   12286:	9905      	ldr	r1, [sp, #20]
   12288:	f7ff fdf8 	bl	11e7c <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>
   1228c:	e7ff      	b.n	1228e <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x4a>
   1228e:	a810      	add	r0, sp, #64	; 0x40
    module_path: Option<MaybeStaticStr<'a>>,
   12290:	9904      	ldr	r1, [sp, #16]
   12292:	f7ff fdfc 	bl	11e8e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   12296:	e7ff      	b.n	12298 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x54>
   12298:	a813      	add	r0, sp, #76	; 0x4c
    file: Option<MaybeStaticStr<'a>>,
   1229a:	9903      	ldr	r1, [sp, #12]
   1229c:	f7ff fdf7 	bl	11e8e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   122a0:	e7ff      	b.n	122a2 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x5e>
    line: Option<u32>,
   122a2:	9802      	ldr	r0, [sp, #8]
   122a4:	f7ff fe1a 	bl	11edc <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>
   122a8:	9001      	str	r0, [sp, #4]
   122aa:	9100      	str	r1, [sp, #0]
   122ac:	e7ff      	b.n	122ae <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x6a>
#[derive(Clone, Debug)]
   122ae:	9807      	ldr	r0, [sp, #28]
   122b0:	9908      	ldr	r1, [sp, #32]
   122b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   122b4:	9b06      	ldr	r3, [sp, #24]
   122b6:	609a      	str	r2, [r3, #8]
   122b8:	6059      	str	r1, [r3, #4]
   122ba:	6018      	str	r0, [r3, #0]
   122bc:	f103 000c 	add.w	r0, r3, #12
   122c0:	a90a      	add	r1, sp, #40	; 0x28
   122c2:	e891 5074 	ldmia.w	r1, {r2, r4, r5, r6, ip, lr}
   122c6:	e880 5074 	stmia.w	r0, {r2, r4, r5, r6, ip, lr}
   122ca:	9810      	ldr	r0, [sp, #64]	; 0x40
   122cc:	9911      	ldr	r1, [sp, #68]	; 0x44
   122ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
   122d0:	62da      	str	r2, [r3, #44]	; 0x2c
   122d2:	6299      	str	r1, [r3, #40]	; 0x28
   122d4:	6258      	str	r0, [r3, #36]	; 0x24
   122d6:	9813      	ldr	r0, [sp, #76]	; 0x4c
   122d8:	9914      	ldr	r1, [sp, #80]	; 0x50
   122da:	9a15      	ldr	r2, [sp, #84]	; 0x54
   122dc:	639a      	str	r2, [r3, #56]	; 0x38
   122de:	6359      	str	r1, [r3, #52]	; 0x34
   122e0:	6318      	str	r0, [r3, #48]	; 0x30
   122e2:	9801      	ldr	r0, [sp, #4]
   122e4:	63d8      	str	r0, [r3, #60]	; 0x3c
   122e6:	9900      	ldr	r1, [sp, #0]
   122e8:	6419      	str	r1, [r3, #64]	; 0x40
   122ea:	b01c      	add	sp, #112	; 0x70
   122ec:	bd70      	pop	{r4, r5, r6, pc}

000122ee <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>:
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   122ee:	b580      	push	{r7, lr}
   122f0:	b088      	sub	sp, #32
   122f2:	9105      	str	r1, [sp, #20]
    level: Level,
   122f4:	9106      	str	r1, [sp, #24]
    target: &'a str,
   122f6:	1d0a      	adds	r2, r1, #4
   122f8:	4613      	mov	r3, r2
   122fa:	9207      	str	r2, [sp, #28]
    level: Level,
   122fc:	9004      	str	r0, [sp, #16]
   122fe:	4608      	mov	r0, r1
   12300:	9303      	str	r3, [sp, #12]
   12302:	f7ff fe09 	bl	11f18 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>
   12306:	9002      	str	r0, [sp, #8]
   12308:	e7ff      	b.n	1230a <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x1c>
    target: &'a str,
   1230a:	9803      	ldr	r0, [sp, #12]
   1230c:	f7ff fd55 	bl	11dba <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>
   12310:	9001      	str	r0, [sp, #4]
   12312:	9100      	str	r1, [sp, #0]
   12314:	e7ff      	b.n	12316 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x28>
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   12316:	9802      	ldr	r0, [sp, #8]
   12318:	9904      	ldr	r1, [sp, #16]
   1231a:	6008      	str	r0, [r1, #0]
   1231c:	9a01      	ldr	r2, [sp, #4]
   1231e:	604a      	str	r2, [r1, #4]
   12320:	9b00      	ldr	r3, [sp, #0]
   12322:	608b      	str	r3, [r1, #8]
   12324:	b008      	add	sp, #32
   12326:	bd80      	pop	{r7, pc}

00012328 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E>:
   12328:	b580      	push	{r7, lr}
   1232a:	b084      	sub	sp, #16
   1232c:	9002      	str	r0, [sp, #8]
   1232e:	9103      	str	r1, [sp, #12]
   12330:	6800      	ldr	r0, [r0, #0]
   12332:	f000 f81c 	bl	1236e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>
   12336:	9001      	str	r0, [sp, #4]
   12338:	e7ff      	b.n	1233a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E+0x12>
   1233a:	9801      	ldr	r0, [sp, #4]
   1233c:	f000 0001 	and.w	r0, r0, #1
   12340:	b004      	add	sp, #16
   12342:	bd80      	pop	{r7, pc}

00012344 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>:
   12344:	b089      	sub	sp, #36	; 0x24
   12346:	9005      	str	r0, [sp, #20]
   12348:	9106      	str	r1, [sp, #24]
   1234a:	9107      	str	r1, [sp, #28]
   1234c:	9907      	ldr	r1, [sp, #28]
   1234e:	9002      	str	r0, [sp, #8]
   12350:	9101      	str	r1, [sp, #4]
   12352:	e7ff      	b.n	12354 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x10>
   12354:	9802      	ldr	r0, [sp, #8]
   12356:	9008      	str	r0, [sp, #32]
   12358:	9908      	ldr	r1, [sp, #32]
   1235a:	9100      	str	r1, [sp, #0]
   1235c:	e7ff      	b.n	1235e <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x1a>
   1235e:	9800      	ldr	r0, [sp, #0]
   12360:	9003      	str	r0, [sp, #12]
   12362:	9901      	ldr	r1, [sp, #4]
   12364:	9104      	str	r1, [sp, #16]
   12366:	9803      	ldr	r0, [sp, #12]
   12368:	9904      	ldr	r1, [sp, #16]
   1236a:	b009      	add	sp, #36	; 0x24
   1236c:	4770      	bx	lr

0001236e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>:
   1236e:	b580      	push	{r7, lr}
   12370:	b088      	sub	sp, #32
   12372:	9006      	str	r0, [sp, #24]
   12374:	9107      	str	r1, [sp, #28]
   12376:	9004      	str	r0, [sp, #16]
   12378:	4608      	mov	r0, r1
   1237a:	9103      	str	r1, [sp, #12]
   1237c:	f003 ffd7 	bl	1632e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   12380:	9002      	str	r0, [sp, #8]
   12382:	e7ff      	b.n	12384 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x16>
   12384:	9802      	ldr	r0, [sp, #8]
   12386:	07c1      	lsls	r1, r0, #31
   12388:	2900      	cmp	r1, #0
   1238a:	d105      	bne.n	12398 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x2a>
   1238c:	e7ff      	b.n	1238e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x20>
   1238e:	9803      	ldr	r0, [sp, #12]
   12390:	f003 ffd1 	bl	16336 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   12394:	9001      	str	r0, [sp, #4]
   12396:	e007      	b.n	123a8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x3a>
   12398:	9804      	ldr	r0, [sp, #16]
   1239a:	9903      	ldr	r1, [sp, #12]
   1239c:	f004 fd92 	bl	16ec4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   123a0:	f88d 0017 	strb.w	r0, [sp, #23]
   123a4:	e7ff      	b.n	123a6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x38>
   123a6:	e015      	b.n	123d4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   123a8:	9801      	ldr	r0, [sp, #4]
   123aa:	07c1      	lsls	r1, r0, #31
   123ac:	2900      	cmp	r1, #0
   123ae:	d107      	bne.n	123c0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x52>
   123b0:	e7ff      	b.n	123b2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x44>
   123b2:	9804      	ldr	r0, [sp, #16]
   123b4:	9903      	ldr	r1, [sp, #12]
   123b6:	f004 ff12 	bl	171de <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   123ba:	f88d 0017 	strb.w	r0, [sp, #23]
   123be:	e007      	b.n	123d0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x62>
   123c0:	9804      	ldr	r0, [sp, #16]
   123c2:	9903      	ldr	r1, [sp, #12]
   123c4:	f004 fde9 	bl	16f9a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   123c8:	f88d 0017 	strb.w	r0, [sp, #23]
   123cc:	e7ff      	b.n	123ce <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x60>
   123ce:	e000      	b.n	123d2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   123d0:	e7ff      	b.n	123d2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   123d2:	e7ff      	b.n	123d4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   123d4:	f89d 0017 	ldrb.w	r0, [sp, #23]
   123d8:	b008      	add	sp, #32
   123da:	bd80      	pop	{r7, pc}

000123dc <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>:
   123dc:	b086      	sub	sp, #24
   123de:	9004      	str	r0, [sp, #16]
   123e0:	9105      	str	r1, [sp, #20]
   123e2:	9002      	str	r0, [sp, #8]
   123e4:	9103      	str	r1, [sp, #12]
   123e6:	9802      	ldr	r0, [sp, #8]
   123e8:	9903      	ldr	r1, [sp, #12]
   123ea:	9000      	str	r0, [sp, #0]
   123ec:	9101      	str	r1, [sp, #4]
   123ee:	9800      	ldr	r0, [sp, #0]
   123f0:	9901      	ldr	r1, [sp, #4]
   123f2:	b006      	add	sp, #24
   123f4:	4770      	bx	lr

000123f6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>:
   123f6:	b580      	push	{r7, lr}
   123f8:	b084      	sub	sp, #16
   123fa:	9002      	str	r0, [sp, #8]
   123fc:	9103      	str	r1, [sp, #12]
   123fe:	f000 f805 	bl	1240c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>
   12402:	9001      	str	r0, [sp, #4]
   12404:	e7ff      	b.n	12406 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE+0x10>
   12406:	9801      	ldr	r0, [sp, #4]
   12408:	b004      	add	sp, #16
   1240a:	bd80      	pop	{r7, pc}

0001240c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>:
   1240c:	b084      	sub	sp, #16
   1240e:	9001      	str	r0, [sp, #4]
   12410:	9102      	str	r1, [sp, #8]
   12412:	4408      	add	r0, r1
   12414:	9003      	str	r0, [sp, #12]
   12416:	9803      	ldr	r0, [sp, #12]
   12418:	9000      	str	r0, [sp, #0]
   1241a:	e7ff      	b.n	1241c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E+0x10>
   1241c:	9800      	ldr	r0, [sp, #0]
   1241e:	b004      	add	sp, #16
   12420:	4770      	bx	lr

00012422 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>:
   12422:	b580      	push	{r7, lr}
   12424:	b084      	sub	sp, #16
   12426:	9002      	str	r0, [sp, #8]
   12428:	9103      	str	r1, [sp, #12]
   1242a:	f7ff ffd7 	bl	123dc <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>
   1242e:	9001      	str	r0, [sp, #4]
   12430:	9100      	str	r1, [sp, #0]
   12432:	e7ff      	b.n	12434 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E+0x12>
   12434:	9801      	ldr	r0, [sp, #4]
   12436:	9900      	ldr	r1, [sp, #0]
   12438:	b004      	add	sp, #16
   1243a:	bd80      	pop	{r7, pc}

0001243c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>:
   1243c:	b084      	sub	sp, #16
   1243e:	9002      	str	r0, [sp, #8]
   12440:	9103      	str	r1, [sp, #12]
   12442:	9000      	str	r0, [sp, #0]
   12444:	9101      	str	r1, [sp, #4]
   12446:	9801      	ldr	r0, [sp, #4]
   12448:	b004      	add	sp, #16
   1244a:	4770      	bx	lr

0001244c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>:
   1244c:	b082      	sub	sp, #8
   1244e:	9000      	str	r0, [sp, #0]
   12450:	9101      	str	r1, [sp, #4]
   12452:	b002      	add	sp, #8
   12454:	4770      	bx	lr

00012456 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>:
   12456:	b082      	sub	sp, #8
   12458:	9000      	str	r0, [sp, #0]
   1245a:	9101      	str	r1, [sp, #4]
   1245c:	7800      	ldrb	r0, [r0, #0]
   1245e:	7809      	ldrb	r1, [r1, #0]
   12460:	1a40      	subs	r0, r0, r1
   12462:	fab0 f080 	clz	r0, r0
   12466:	0940      	lsrs	r0, r0, #5
   12468:	b002      	add	sp, #8
   1246a:	4770      	bx	lr

0001246c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>:
where
    N: ArrayLength<T>,
{
    type Target = [T];

    fn deref(&self) -> &[T] {
   1246c:	b580      	push	{r7, lr}
   1246e:	b084      	sub	sp, #16
   12470:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   12472:	f002 fcab 	bl	14dcc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E>
   12476:	9002      	str	r0, [sp, #8]
   12478:	9101      	str	r1, [sp, #4]
   1247a:	e7ff      	b.n	1247c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E+0x10>
    }
   1247c:	9802      	ldr	r0, [sp, #8]
   1247e:	9901      	ldr	r1, [sp, #4]
   12480:	b004      	add	sp, #16
   12482:	bd80      	pop	{r7, pc}

00012484 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>:
    fn deref(&self) -> &[T] {
   12484:	b580      	push	{r7, lr}
   12486:	b084      	sub	sp, #16
   12488:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   1248a:	f002 fcb4 	bl	14df6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>
   1248e:	9002      	str	r0, [sp, #8]
   12490:	9101      	str	r1, [sp, #4]
   12492:	e7ff      	b.n	12494 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE+0x10>
    }
   12494:	9802      	ldr	r0, [sp, #8]
   12496:	9901      	ldr	r1, [sp, #4]
   12498:	b004      	add	sp, #16
   1249a:	bd80      	pop	{r7, pc}

0001249c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   1249c:	b580      	push	{r7, lr}
   1249e:	b084      	sub	sp, #16
   124a0:	9001      	str	r0, [sp, #4]
   124a2:	9102      	str	r1, [sp, #8]
   124a4:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   124a6:	f002 fbf3 	bl	14c90 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E>
   124aa:	9000      	str	r0, [sp, #0]
   124ac:	e7ff      	b.n	124ae <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E+0x12>
    }
   124ae:	9800      	ldr	r0, [sp, #0]
   124b0:	f000 0001 	and.w	r0, r0, #1
   124b4:	b004      	add	sp, #16
   124b6:	bd80      	pop	{r7, pc}

000124b8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   124b8:	b580      	push	{r7, lr}
   124ba:	b086      	sub	sp, #24
   124bc:	460a      	mov	r2, r1
   124be:	9004      	str	r0, [sp, #16]
   124c0:	f88d 1017 	strb.w	r1, [sp, #23]
        self.0.push(item)
   124c4:	9203      	str	r2, [sp, #12]
   124c6:	f002 fc46 	bl	14d56 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>
   124ca:	9002      	str	r0, [sp, #8]
   124cc:	9101      	str	r1, [sp, #4]
   124ce:	e7ff      	b.n	124d0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E+0x18>
    }
   124d0:	9802      	ldr	r0, [sp, #8]
   124d2:	f000 0001 	and.w	r0, r0, #1
   124d6:	9901      	ldr	r1, [sp, #4]
   124d8:	b006      	add	sp, #24
   124da:	bd80      	pop	{r7, pc}

000124dc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>:
    pub fn clear(&mut self) {
   124dc:	b580      	push	{r7, lr}
   124de:	b082      	sub	sp, #8
   124e0:	9001      	str	r0, [sp, #4]
        self.0.clear()
   124e2:	f002 fc61 	bl	14da8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>
   124e6:	e7ff      	b.n	124e8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E+0xc>
    }
   124e8:	b002      	add	sp, #8
   124ea:	bd80      	pop	{r7, pc}

000124ec <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>:
    pub fn clear(&mut self) {
   124ec:	b580      	push	{r7, lr}
   124ee:	b082      	sub	sp, #8
   124f0:	9001      	str	r0, [sp, #4]
        self.0.clear()
   124f2:	f002 fc62 	bl	14dba <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E>
   124f6:	e7ff      	b.n	124f8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E+0xc>
    }
   124f8:	b002      	add	sp, #8
   124fa:	bd80      	pop	{r7, pc}

000124fc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E>:
    pub fn capacity(&self) -> usize {
   124fc:	b580      	push	{r7, lr}
   124fe:	b082      	sub	sp, #8
   12500:	9001      	str	r0, [sp, #4]
        self.0.capacity()
   12502:	f002 fc97 	bl	14e34 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>
   12506:	9000      	str	r0, [sp, #0]
   12508:	e7ff      	b.n	1250a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E+0xe>
    }
   1250a:	9800      	ldr	r0, [sp, #0]
   1250c:	b002      	add	sp, #8
   1250e:	bd80      	pop	{r7, pc}

00012510 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>:
   12510:	b081      	sub	sp, #4
   12512:	9000      	str	r0, [sp, #0]
   12514:	b001      	add	sp, #4
   12516:	4770      	bx	lr

00012518 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>:
   12518:	b580      	push	{r7, lr}
   1251a:	b088      	sub	sp, #32
   1251c:	9006      	str	r0, [sp, #24]
   1251e:	9107      	str	r1, [sp, #28]
   12520:	9004      	str	r0, [sp, #16]
   12522:	4608      	mov	r0, r1
   12524:	9103      	str	r1, [sp, #12]
   12526:	f003 ff02 	bl	1632e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   1252a:	9002      	str	r0, [sp, #8]
   1252c:	e7ff      	b.n	1252e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x16>
   1252e:	9802      	ldr	r0, [sp, #8]
   12530:	07c1      	lsls	r1, r0, #31
   12532:	2900      	cmp	r1, #0
   12534:	d105      	bne.n	12542 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x2a>
   12536:	e7ff      	b.n	12538 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x20>
   12538:	9803      	ldr	r0, [sp, #12]
   1253a:	f003 fefc 	bl	16336 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1253e:	9001      	str	r0, [sp, #4]
   12540:	e007      	b.n	12552 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x3a>
   12542:	9804      	ldr	r0, [sp, #16]
   12544:	9903      	ldr	r1, [sp, #12]
   12546:	f004 fc00 	bl	16d4a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>
   1254a:	f88d 0017 	strb.w	r0, [sp, #23]
   1254e:	e7ff      	b.n	12550 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x38>
   12550:	e015      	b.n	1257e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   12552:	9801      	ldr	r0, [sp, #4]
   12554:	07c1      	lsls	r1, r0, #31
   12556:	2900      	cmp	r1, #0
   12558:	d107      	bne.n	1256a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x52>
   1255a:	e7ff      	b.n	1255c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x44>
   1255c:	9804      	ldr	r0, [sp, #16]
   1255e:	9903      	ldr	r1, [sp, #12]
   12560:	f004 fd86 	bl	17070 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>
   12564:	f88d 0017 	strb.w	r0, [sp, #23]
   12568:	e007      	b.n	1257a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x62>
   1256a:	9804      	ldr	r0, [sp, #16]
   1256c:	9903      	ldr	r1, [sp, #12]
   1256e:	f004 fc1b 	bl	16da8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>
   12572:	f88d 0017 	strb.w	r0, [sp, #23]
   12576:	e7ff      	b.n	12578 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x60>
   12578:	e000      	b.n	1257c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   1257a:	e7ff      	b.n	1257c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   1257c:	e7ff      	b.n	1257e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   1257e:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12582:	b008      	add	sp, #32
   12584:	bd80      	pop	{r7, pc}

00012586 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>:
   12586:	b580      	push	{r7, lr}
   12588:	b088      	sub	sp, #32
   1258a:	9006      	str	r0, [sp, #24]
   1258c:	9107      	str	r1, [sp, #28]
   1258e:	9004      	str	r0, [sp, #16]
   12590:	4608      	mov	r0, r1
   12592:	9103      	str	r1, [sp, #12]
   12594:	f003 fecb 	bl	1632e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   12598:	9002      	str	r0, [sp, #8]
   1259a:	e7ff      	b.n	1259c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x16>
   1259c:	9802      	ldr	r0, [sp, #8]
   1259e:	07c1      	lsls	r1, r0, #31
   125a0:	2900      	cmp	r1, #0
   125a2:	d105      	bne.n	125b0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x2a>
   125a4:	e7ff      	b.n	125a6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x20>
   125a6:	9803      	ldr	r0, [sp, #12]
   125a8:	f003 fec5 	bl	16336 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   125ac:	9001      	str	r0, [sp, #4]
   125ae:	e007      	b.n	125c0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x3a>
   125b0:	9804      	ldr	r0, [sp, #16]
   125b2:	9903      	ldr	r1, [sp, #12]
   125b4:	f004 fc86 	bl	16ec4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   125b8:	f88d 0017 	strb.w	r0, [sp, #23]
   125bc:	e7ff      	b.n	125be <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x38>
   125be:	e015      	b.n	125ec <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   125c0:	9801      	ldr	r0, [sp, #4]
   125c2:	07c1      	lsls	r1, r0, #31
   125c4:	2900      	cmp	r1, #0
   125c6:	d107      	bne.n	125d8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x52>
   125c8:	e7ff      	b.n	125ca <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x44>
   125ca:	9804      	ldr	r0, [sp, #16]
   125cc:	9903      	ldr	r1, [sp, #12]
   125ce:	f004 fd8c 	bl	170ea <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   125d2:	f88d 0017 	strb.w	r0, [sp, #23]
   125d6:	e007      	b.n	125e8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x62>
   125d8:	9804      	ldr	r0, [sp, #16]
   125da:	9903      	ldr	r1, [sp, #12]
   125dc:	f004 fcdd 	bl	16f9a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   125e0:	f88d 0017 	strb.w	r0, [sp, #23]
   125e4:	e7ff      	b.n	125e6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x60>
   125e6:	e000      	b.n	125ea <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   125e8:	e7ff      	b.n	125ea <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   125ea:	e7ff      	b.n	125ec <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   125ec:	f89d 0017 	ldrb.w	r0, [sp, #23]
   125f0:	b008      	add	sp, #32
   125f2:	bd80      	pop	{r7, pc}

000125f4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>:
   125f4:	b580      	push	{r7, lr}
   125f6:	b088      	sub	sp, #32
   125f8:	9006      	str	r0, [sp, #24]
   125fa:	9107      	str	r1, [sp, #28]
   125fc:	9004      	str	r0, [sp, #16]
   125fe:	4608      	mov	r0, r1
   12600:	9103      	str	r1, [sp, #12]
   12602:	f003 fe94 	bl	1632e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   12606:	9002      	str	r0, [sp, #8]
   12608:	e7ff      	b.n	1260a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x16>
   1260a:	9802      	ldr	r0, [sp, #8]
   1260c:	07c1      	lsls	r1, r0, #31
   1260e:	2900      	cmp	r1, #0
   12610:	d105      	bne.n	1261e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x2a>
   12612:	e7ff      	b.n	12614 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x20>
   12614:	9803      	ldr	r0, [sp, #12]
   12616:	f003 fe8e 	bl	16336 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1261a:	9001      	str	r0, [sp, #4]
   1261c:	e007      	b.n	1262e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x3a>
   1261e:	9804      	ldr	r0, [sp, #16]
   12620:	9903      	ldr	r1, [sp, #12]
   12622:	f004 fc4f 	bl	16ec4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   12626:	f88d 0017 	strb.w	r0, [sp, #23]
   1262a:	e7ff      	b.n	1262c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x38>
   1262c:	e015      	b.n	1265a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   1262e:	9801      	ldr	r0, [sp, #4]
   12630:	07c1      	lsls	r1, r0, #31
   12632:	2900      	cmp	r1, #0
   12634:	d107      	bne.n	12646 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x52>
   12636:	e7ff      	b.n	12638 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x44>
   12638:	9804      	ldr	r0, [sp, #16]
   1263a:	9903      	ldr	r1, [sp, #12]
   1263c:	f004 fdcf 	bl	171de <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   12640:	f88d 0017 	strb.w	r0, [sp, #23]
   12644:	e007      	b.n	12656 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x62>
   12646:	9804      	ldr	r0, [sp, #16]
   12648:	9903      	ldr	r1, [sp, #12]
   1264a:	f004 fca6 	bl	16f9a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   1264e:	f88d 0017 	strb.w	r0, [sp, #23]
   12652:	e7ff      	b.n	12654 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x60>
   12654:	e000      	b.n	12658 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   12656:	e7ff      	b.n	12658 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   12658:	e7ff      	b.n	1265a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   1265a:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1265e:	b008      	add	sp, #32
   12660:	bd80      	pop	{r7, pc}

00012662 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>:
   12662:	b580      	push	{r7, lr}
   12664:	b084      	sub	sp, #16
   12666:	9002      	str	r0, [sp, #8]
   12668:	9103      	str	r1, [sp, #12]
   1266a:	6800      	ldr	r0, [r0, #0]
   1266c:	6809      	ldr	r1, [r1, #0]
   1266e:	f7ff fef2 	bl	12456 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>
   12672:	9001      	str	r0, [sp, #4]
   12674:	e7ff      	b.n	12676 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E+0x14>
   12676:	9801      	ldr	r0, [sp, #4]
   12678:	f000 0001 	and.w	r0, r0, #1
   1267c:	b004      	add	sp, #16
   1267e:	bd80      	pop	{r7, pc}

00012680 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>:

/// Non-blocking SPI transfer callback values (not used)
static mut SPI_CALLBACK: SpiCallback = SpiCallback {};

/// Init non-blocking SPI transfer
pub fn spi_noblock_init() -> MynewtResult<()> {
   12680:	b5b0      	push	{r4, r5, r7, lr}
   12682:	f5ad 6db5 	sub.w	sp, sp, #1448	; 0x5a8
   12686:	2000      	movs	r0, #0
    //  Disable SPI port
    unsafe { hal::hal_spi_disable(SPI_NUM) };
   12688:	f005 fc8a 	bl	17fa0 <hal_spi_disable>
   1268c:	e7ff      	b.n	1268e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xe>

    //  Configure SPI port for non-blocking SPI
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   1268e:	f240 01f8 	movw	r1, #248	; 0xf8
   12692:	f2c2 0100 	movt	r1, #8192	; 0x2000
   12696:	2000      	movs	r0, #0
   12698:	f005 fc40 	bl	17f1c <hal_spi_config>
   1269c:	906a      	str	r0, [sp, #424]	; 0x1a8
   1269e:	e7ff      	b.n	126a0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x20>
   126a0:	f64d 7088 	movw	r0, #57224	; 0xdf88
   126a4:	f2c0 0001 	movt	r0, #1
   126a8:	6800      	ldr	r0, [r0, #0]
   126aa:	a96a      	add	r1, sp, #424	; 0x1a8
   126ac:	916b      	str	r1, [sp, #428]	; 0x1ac
   126ae:	906c      	str	r0, [sp, #432]	; 0x1b0
   126b0:	986b      	ldr	r0, [sp, #428]	; 0x1ac
   126b2:	f8cd 04fc 	str.w	r0, [sp, #1276]	; 0x4fc
   126b6:	996c      	ldr	r1, [sp, #432]	; 0x1b0
   126b8:	f8cd 1500 	str.w	r1, [sp, #1280]	; 0x500
   126bc:	6802      	ldr	r2, [r0, #0]
   126be:	680b      	ldr	r3, [r1, #0]
   126c0:	429a      	cmp	r2, r3
   126c2:	9068      	str	r0, [sp, #416]	; 0x1a0
   126c4:	9167      	str	r1, [sp, #412]	; 0x19c
   126c6:	d10c      	bne.n	126e2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x62>
   126c8:	e7ff      	b.n	126ca <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4a>
    let arg = unsafe { core::mem::transmute(&mut SPI_CALLBACK) };
   126ca:	f646 7004 	movw	r0, #28420	; 0x6f04
   126ce:	f2c2 0000 	movt	r0, #8192	; 0x2000
   126d2:	f8cd 0510 	str.w	r0, [sp, #1296]	; 0x510
   126d6:	f8dd 0510 	ldr.w	r0, [sp, #1296]	; 0x510
   126da:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
   126de:	9066      	str	r0, [sp, #408]	; 0x198
   126e0:	e075      	b.n	127ce <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x14e>
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   126e2:	f64d 70e0 	movw	r0, #57312	; 0xdfe0
   126e6:	f2c0 0001 	movt	r0, #1
   126ea:	6801      	ldr	r1, [r0, #0]
   126ec:	9868      	ldr	r0, [sp, #416]	; 0x1a0
   126ee:	907c      	str	r0, [sp, #496]	; 0x1f0
   126f0:	9a67      	ldr	r2, [sp, #412]	; 0x19c
   126f2:	927d      	str	r2, [sp, #500]	; 0x1f4
   126f4:	f64d 73fc 	movw	r3, #57340	; 0xdffc
   126f8:	f2c0 0301 	movt	r3, #1
   126fc:	681b      	ldr	r3, [r3, #0]
   126fe:	f24e 0c00 	movw	ip, #57344	; 0xe000
   12702:	f2c0 0c01 	movt	ip, #1
   12706:	f8dc c000 	ldr.w	ip, [ip]
   1270a:	46ee      	mov	lr, sp
   1270c:	2400      	movs	r4, #0
   1270e:	f8ce 4000 	str.w	r4, [lr]
   12712:	a87e      	add	r0, sp, #504	; 0x1f8
   12714:	2201      	movs	r2, #1
   12716:	9165      	str	r1, [sp, #404]	; 0x194
   12718:	4619      	mov	r1, r3
   1271a:	4663      	mov	r3, ip
   1271c:	f7f6 f9be 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12720:	e7ff      	b.n	12722 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2>
   12722:	a87c      	add	r0, sp, #496	; 0x1f0
   12724:	9079      	str	r0, [sp, #484]	; 0x1e4
   12726:	a87d      	add	r0, sp, #500	; 0x1f4
   12728:	907a      	str	r0, [sp, #488]	; 0x1e8
   1272a:	a87e      	add	r0, sp, #504	; 0x1f8
   1272c:	907b      	str	r0, [sp, #492]	; 0x1ec
   1272e:	9879      	ldr	r0, [sp, #484]	; 0x1e4
   12730:	f8cd 0504 	str.w	r0, [sp, #1284]	; 0x504
   12734:	997a      	ldr	r1, [sp, #488]	; 0x1e8
   12736:	f8cd 1508 	str.w	r1, [sp, #1288]	; 0x508
   1273a:	9a7b      	ldr	r2, [sp, #492]	; 0x1ec
   1273c:	f8cd 250c 	str.w	r2, [sp, #1292]	; 0x50c
   12740:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12744:	f2c0 0300 	movt	r3, #0
   12748:	9164      	str	r1, [sp, #400]	; 0x190
   1274a:	4619      	mov	r1, r3
   1274c:	9263      	str	r2, [sp, #396]	; 0x18c
   1274e:	f7f6 fe04 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12752:	9062      	str	r0, [sp, #392]	; 0x188
   12754:	9161      	str	r1, [sp, #388]	; 0x184
   12756:	e7ff      	b.n	12758 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xd8>
   12758:	f249 21eb 	movw	r1, #37611	; 0x92eb
   1275c:	f2c0 0100 	movt	r1, #0
   12760:	9864      	ldr	r0, [sp, #400]	; 0x190
   12762:	f7f6 fdfa 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12766:	9060      	str	r0, [sp, #384]	; 0x180
   12768:	915f      	str	r1, [sp, #380]	; 0x17c
   1276a:	e7ff      	b.n	1276c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xec>
   1276c:	f645 31bb 	movw	r1, #23483	; 0x5bbb
   12770:	f2c0 0101 	movt	r1, #1
   12774:	9863      	ldr	r0, [sp, #396]	; 0x18c
   12776:	f7f6 fe2f 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1277a:	905e      	str	r0, [sp, #376]	; 0x178
   1277c:	915d      	str	r1, [sp, #372]	; 0x174
   1277e:	e7ff      	b.n	12780 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x100>
   12780:	9862      	ldr	r0, [sp, #392]	; 0x188
   12782:	9073      	str	r0, [sp, #460]	; 0x1cc
   12784:	9961      	ldr	r1, [sp, #388]	; 0x184
   12786:	9174      	str	r1, [sp, #464]	; 0x1d0
   12788:	9a60      	ldr	r2, [sp, #384]	; 0x180
   1278a:	9275      	str	r2, [sp, #468]	; 0x1d4
   1278c:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
   1278e:	9376      	str	r3, [sp, #472]	; 0x1d8
   12790:	f8dd c178 	ldr.w	ip, [sp, #376]	; 0x178
   12794:	f8cd c1dc 	str.w	ip, [sp, #476]	; 0x1dc
   12798:	f8dd e174 	ldr.w	lr, [sp, #372]	; 0x174
   1279c:	f8cd e1e0 	str.w	lr, [sp, #480]	; 0x1e0
   127a0:	466c      	mov	r4, sp
   127a2:	2503      	movs	r5, #3
   127a4:	6025      	str	r5, [r4, #0]
   127a6:	a86d      	add	r0, sp, #436	; 0x1b4
   127a8:	ab73      	add	r3, sp, #460	; 0x1cc
   127aa:	9965      	ldr	r1, [sp, #404]	; 0x194
   127ac:	462a      	mov	r2, r5
   127ae:	f7f6 f975 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   127b2:	e7ff      	b.n	127b4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x134>
   127b4:	f24e 001c 	movw	r0, #57372	; 0xe01c
   127b8:	f2c0 0001 	movt	r0, #1
   127bc:	f002 ff0f 	bl	155de <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   127c0:	905c      	str	r0, [sp, #368]	; 0x170
   127c2:	e7ff      	b.n	127c4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x144>
   127c4:	a86d      	add	r0, sp, #436	; 0x1b4
   127c6:	995c      	ldr	r1, [sp, #368]	; 0x170
   127c8:	f002 ff46 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   127cc:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
        SPI_NUM, 
        Some(spi_noblock_handler), 
   127ce:	f643 401b 	movw	r0, #15387	; 0x3c1b
   127d2:	f2c0 0001 	movt	r0, #1
   127d6:	9085      	str	r0, [sp, #532]	; 0x214
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
   127d8:	9985      	ldr	r1, [sp, #532]	; 0x214
   127da:	2000      	movs	r0, #0
   127dc:	9a66      	ldr	r2, [sp, #408]	; 0x198
   127de:	f005 fc43 	bl	18068 <hal_spi_set_txrx_cb>
   127e2:	9084      	str	r0, [sp, #528]	; 0x210
   127e4:	e7ff      	b.n	127e6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x166>
        arg
    ) };
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   127e6:	f64d 7088 	movw	r0, #57224	; 0xdf88
   127ea:	f2c0 0001 	movt	r0, #1
   127ee:	6800      	ldr	r0, [r0, #0]
   127f0:	a984      	add	r1, sp, #528	; 0x210
   127f2:	9186      	str	r1, [sp, #536]	; 0x218
   127f4:	9087      	str	r0, [sp, #540]	; 0x21c
   127f6:	9886      	ldr	r0, [sp, #536]	; 0x218
   127f8:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
   127fc:	9987      	ldr	r1, [sp, #540]	; 0x21c
   127fe:	f8cd 151c 	str.w	r1, [sp, #1308]	; 0x51c
   12802:	6802      	ldr	r2, [r0, #0]
   12804:	680b      	ldr	r3, [r1, #0]
   12806:	429a      	cmp	r2, r3
   12808:	905b      	str	r0, [sp, #364]	; 0x16c
   1280a:	915a      	str	r1, [sp, #360]	; 0x168
   1280c:	d105      	bne.n	1281a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x19a>
   1280e:	e7ff      	b.n	12810 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x190>
   12810:	2000      	movs	r0, #0

    //  Enable SPI port and set SS to high to disable SPI device
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   12812:	f005 fb9f 	bl	17f54 <hal_spi_enable>
   12816:	909f      	str	r0, [sp, #636]	; 0x27c
   12818:	e075      	b.n	12906 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x286>
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   1281a:	f64d 70e0 	movw	r0, #57312	; 0xdfe0
   1281e:	f2c0 0001 	movt	r0, #1
   12822:	6801      	ldr	r1, [r0, #0]
   12824:	985b      	ldr	r0, [sp, #364]	; 0x16c
   12826:	9097      	str	r0, [sp, #604]	; 0x25c
   12828:	9a5a      	ldr	r2, [sp, #360]	; 0x168
   1282a:	9298      	str	r2, [sp, #608]	; 0x260
   1282c:	f24e 0340 	movw	r3, #57408	; 0xe040
   12830:	f2c0 0301 	movt	r3, #1
   12834:	681b      	ldr	r3, [r3, #0]
   12836:	f24e 0c00 	movw	ip, #57344	; 0xe000
   1283a:	f2c0 0c01 	movt	ip, #1
   1283e:	f8dc c000 	ldr.w	ip, [ip]
   12842:	46ee      	mov	lr, sp
   12844:	2400      	movs	r4, #0
   12846:	f8ce 4000 	str.w	r4, [lr]
   1284a:	a899      	add	r0, sp, #612	; 0x264
   1284c:	2201      	movs	r2, #1
   1284e:	9159      	str	r1, [sp, #356]	; 0x164
   12850:	4619      	mov	r1, r3
   12852:	4663      	mov	r3, ip
   12854:	f7f6 f922 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12858:	e7ff      	b.n	1285a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x1da>
   1285a:	a897      	add	r0, sp, #604	; 0x25c
   1285c:	9094      	str	r0, [sp, #592]	; 0x250
   1285e:	a898      	add	r0, sp, #608	; 0x260
   12860:	9095      	str	r0, [sp, #596]	; 0x254
   12862:	a899      	add	r0, sp, #612	; 0x264
   12864:	9096      	str	r0, [sp, #600]	; 0x258
   12866:	9894      	ldr	r0, [sp, #592]	; 0x250
   12868:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
   1286c:	9995      	ldr	r1, [sp, #596]	; 0x254
   1286e:	f8cd 1524 	str.w	r1, [sp, #1316]	; 0x524
   12872:	9a96      	ldr	r2, [sp, #600]	; 0x258
   12874:	f8cd 2528 	str.w	r2, [sp, #1320]	; 0x528
   12878:	f249 23eb 	movw	r3, #37611	; 0x92eb
   1287c:	f2c0 0300 	movt	r3, #0
   12880:	9158      	str	r1, [sp, #352]	; 0x160
   12882:	4619      	mov	r1, r3
   12884:	9257      	str	r2, [sp, #348]	; 0x15c
   12886:	f7f6 fd68 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1288a:	9056      	str	r0, [sp, #344]	; 0x158
   1288c:	9155      	str	r1, [sp, #340]	; 0x154
   1288e:	e7ff      	b.n	12890 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x210>
   12890:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12894:	f2c0 0100 	movt	r1, #0
   12898:	9858      	ldr	r0, [sp, #352]	; 0x160
   1289a:	f7f6 fd5e 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1289e:	9054      	str	r0, [sp, #336]	; 0x150
   128a0:	9153      	str	r1, [sp, #332]	; 0x14c
   128a2:	e7ff      	b.n	128a4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x224>
   128a4:	f645 31bb 	movw	r1, #23483	; 0x5bbb
   128a8:	f2c0 0101 	movt	r1, #1
   128ac:	9857      	ldr	r0, [sp, #348]	; 0x15c
   128ae:	f7f6 fd93 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   128b2:	9052      	str	r0, [sp, #328]	; 0x148
   128b4:	9151      	str	r1, [sp, #324]	; 0x144
   128b6:	e7ff      	b.n	128b8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x238>
   128b8:	9856      	ldr	r0, [sp, #344]	; 0x158
   128ba:	908e      	str	r0, [sp, #568]	; 0x238
   128bc:	9955      	ldr	r1, [sp, #340]	; 0x154
   128be:	918f      	str	r1, [sp, #572]	; 0x23c
   128c0:	9a54      	ldr	r2, [sp, #336]	; 0x150
   128c2:	9290      	str	r2, [sp, #576]	; 0x240
   128c4:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   128c6:	9391      	str	r3, [sp, #580]	; 0x244
   128c8:	f8dd c148 	ldr.w	ip, [sp, #328]	; 0x148
   128cc:	f8cd c248 	str.w	ip, [sp, #584]	; 0x248
   128d0:	f8dd e144 	ldr.w	lr, [sp, #324]	; 0x144
   128d4:	f8cd e24c 	str.w	lr, [sp, #588]	; 0x24c
   128d8:	466c      	mov	r4, sp
   128da:	2503      	movs	r5, #3
   128dc:	6025      	str	r5, [r4, #0]
   128de:	a888      	add	r0, sp, #544	; 0x220
   128e0:	ab8e      	add	r3, sp, #568	; 0x238
   128e2:	9959      	ldr	r1, [sp, #356]	; 0x164
   128e4:	462a      	mov	r2, r5
   128e6:	f7f6 f8d9 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   128ea:	e7ff      	b.n	128ec <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x26c>
   128ec:	f24e 0044 	movw	r0, #57412	; 0xe044
   128f0:	f2c0 0001 	movt	r0, #1
   128f4:	f002 fe73 	bl	155de <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   128f8:	9050      	str	r0, [sp, #320]	; 0x140
   128fa:	e7ff      	b.n	128fc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x27c>
   128fc:	a888      	add	r0, sp, #544	; 0x220
   128fe:	9950      	ldr	r1, [sp, #320]	; 0x140
   12900:	f002 feaa 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12904:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   12906:	f64d 7088 	movw	r0, #57224	; 0xdf88
   1290a:	f2c0 0001 	movt	r0, #1
   1290e:	6800      	ldr	r0, [r0, #0]
   12910:	a99f      	add	r1, sp, #636	; 0x27c
   12912:	91a0      	str	r1, [sp, #640]	; 0x280
   12914:	90a1      	str	r0, [sp, #644]	; 0x284
   12916:	98a0      	ldr	r0, [sp, #640]	; 0x280
   12918:	f8cd 052c 	str.w	r0, [sp, #1324]	; 0x52c
   1291c:	99a1      	ldr	r1, [sp, #644]	; 0x284
   1291e:	f8cd 1530 	str.w	r1, [sp, #1328]	; 0x530
   12922:	6802      	ldr	r2, [r0, #0]
   12924:	680b      	ldr	r3, [r1, #0]
   12926:	429a      	cmp	r2, r3
   12928:	904f      	str	r0, [sp, #316]	; 0x13c
   1292a:	914e      	str	r1, [sp, #312]	; 0x138
   1292c:	d106      	bne.n	1293c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2bc>
   1292e:	e7ff      	b.n	12930 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2b0>
   12930:	2019      	movs	r0, #25
   12932:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12934:	f004 fee4 	bl	17700 <hal_gpio_init_out>
   12938:	90b9      	str	r0, [sp, #740]	; 0x2e4
   1293a:	e075      	b.n	12a28 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3a8>
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   1293c:	f64d 70e0 	movw	r0, #57312	; 0xdfe0
   12940:	f2c0 0001 	movt	r0, #1
   12944:	6801      	ldr	r1, [r0, #0]
   12946:	984f      	ldr	r0, [sp, #316]	; 0x13c
   12948:	90b1      	str	r0, [sp, #708]	; 0x2c4
   1294a:	9a4e      	ldr	r2, [sp, #312]	; 0x138
   1294c:	92b2      	str	r2, [sp, #712]	; 0x2c8
   1294e:	f24e 036c 	movw	r3, #57452	; 0xe06c
   12952:	f2c0 0301 	movt	r3, #1
   12956:	681b      	ldr	r3, [r3, #0]
   12958:	f24e 0c00 	movw	ip, #57344	; 0xe000
   1295c:	f2c0 0c01 	movt	ip, #1
   12960:	f8dc c000 	ldr.w	ip, [ip]
   12964:	46ee      	mov	lr, sp
   12966:	2400      	movs	r4, #0
   12968:	f8ce 4000 	str.w	r4, [lr]
   1296c:	a8b3      	add	r0, sp, #716	; 0x2cc
   1296e:	2201      	movs	r2, #1
   12970:	914d      	str	r1, [sp, #308]	; 0x134
   12972:	4619      	mov	r1, r3
   12974:	4663      	mov	r3, ip
   12976:	f7f6 f891 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1297a:	e7ff      	b.n	1297c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2fc>
   1297c:	a8b1      	add	r0, sp, #708	; 0x2c4
   1297e:	90ae      	str	r0, [sp, #696]	; 0x2b8
   12980:	a8b2      	add	r0, sp, #712	; 0x2c8
   12982:	90af      	str	r0, [sp, #700]	; 0x2bc
   12984:	a8b3      	add	r0, sp, #716	; 0x2cc
   12986:	90b0      	str	r0, [sp, #704]	; 0x2c0
   12988:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
   1298a:	f8cd 0534 	str.w	r0, [sp, #1332]	; 0x534
   1298e:	99af      	ldr	r1, [sp, #700]	; 0x2bc
   12990:	f8cd 1538 	str.w	r1, [sp, #1336]	; 0x538
   12994:	9ab0      	ldr	r2, [sp, #704]	; 0x2c0
   12996:	f8cd 253c 	str.w	r2, [sp, #1340]	; 0x53c
   1299a:	f249 23eb 	movw	r3, #37611	; 0x92eb
   1299e:	f2c0 0300 	movt	r3, #0
   129a2:	914c      	str	r1, [sp, #304]	; 0x130
   129a4:	4619      	mov	r1, r3
   129a6:	924b      	str	r2, [sp, #300]	; 0x12c
   129a8:	f7f6 fcd7 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   129ac:	904a      	str	r0, [sp, #296]	; 0x128
   129ae:	9149      	str	r1, [sp, #292]	; 0x124
   129b0:	e7ff      	b.n	129b2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x332>
   129b2:	f249 21eb 	movw	r1, #37611	; 0x92eb
   129b6:	f2c0 0100 	movt	r1, #0
   129ba:	984c      	ldr	r0, [sp, #304]	; 0x130
   129bc:	f7f6 fccd 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   129c0:	9048      	str	r0, [sp, #288]	; 0x120
   129c2:	9147      	str	r1, [sp, #284]	; 0x11c
   129c4:	e7ff      	b.n	129c6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x346>
   129c6:	f645 31bb 	movw	r1, #23483	; 0x5bbb
   129ca:	f2c0 0101 	movt	r1, #1
   129ce:	984b      	ldr	r0, [sp, #300]	; 0x12c
   129d0:	f7f6 fd02 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   129d4:	9046      	str	r0, [sp, #280]	; 0x118
   129d6:	9145      	str	r1, [sp, #276]	; 0x114
   129d8:	e7ff      	b.n	129da <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x35a>
   129da:	984a      	ldr	r0, [sp, #296]	; 0x128
   129dc:	90a8      	str	r0, [sp, #672]	; 0x2a0
   129de:	9949      	ldr	r1, [sp, #292]	; 0x124
   129e0:	91a9      	str	r1, [sp, #676]	; 0x2a4
   129e2:	9a48      	ldr	r2, [sp, #288]	; 0x120
   129e4:	92aa      	str	r2, [sp, #680]	; 0x2a8
   129e6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   129e8:	93ab      	str	r3, [sp, #684]	; 0x2ac
   129ea:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   129ee:	f8cd c2b0 	str.w	ip, [sp, #688]	; 0x2b0
   129f2:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
   129f6:	f8cd e2b4 	str.w	lr, [sp, #692]	; 0x2b4
   129fa:	466c      	mov	r4, sp
   129fc:	2503      	movs	r5, #3
   129fe:	6025      	str	r5, [r4, #0]
   12a00:	a8a2      	add	r0, sp, #648	; 0x288
   12a02:	aba8      	add	r3, sp, #672	; 0x2a0
   12a04:	994d      	ldr	r1, [sp, #308]	; 0x134
   12a06:	462a      	mov	r2, r5
   12a08:	f7f6 f848 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12a0c:	e7ff      	b.n	12a0e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x38e>
   12a0e:	f24e 0070 	movw	r0, #57456	; 0xe070
   12a12:	f2c0 0001 	movt	r0, #1
   12a16:	f002 fde2 	bl	155de <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12a1a:	9044      	str	r0, [sp, #272]	; 0x110
   12a1c:	e7ff      	b.n	12a1e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x39e>
   12a1e:	a8a2      	add	r0, sp, #648	; 0x288
   12a20:	9944      	ldr	r1, [sp, #272]	; 0x110
   12a22:	f002 fe19 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12a26:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12a28:	f64d 7088 	movw	r0, #57224	; 0xdf88
   12a2c:	f2c0 0001 	movt	r0, #1
   12a30:	6800      	ldr	r0, [r0, #0]
   12a32:	a9b9      	add	r1, sp, #740	; 0x2e4
   12a34:	91ba      	str	r1, [sp, #744]	; 0x2e8
   12a36:	90bb      	str	r0, [sp, #748]	; 0x2ec
   12a38:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
   12a3a:	f8cd 0540 	str.w	r0, [sp, #1344]	; 0x540
   12a3e:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
   12a40:	f8cd 1544 	str.w	r1, [sp, #1348]	; 0x544
   12a44:	6802      	ldr	r2, [r0, #0]
   12a46:	680b      	ldr	r3, [r1, #0]
   12a48:	429a      	cmp	r2, r3
   12a4a:	9043      	str	r0, [sp, #268]	; 0x10c
   12a4c:	9142      	str	r1, [sp, #264]	; 0x108
   12a4e:	d106      	bne.n	12a5e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3de>
   12a50:	e7ff      	b.n	12a52 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3d2>
   12a52:	2012      	movs	r0, #18
   12a54:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12a56:	f004 fe53 	bl	17700 <hal_gpio_init_out>
   12a5a:	90d3      	str	r0, [sp, #844]	; 0x34c
   12a5c:	e075      	b.n	12b4a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4ca>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12a5e:	f64d 70e0 	movw	r0, #57312	; 0xdfe0
   12a62:	f2c0 0001 	movt	r0, #1
   12a66:	6801      	ldr	r1, [r0, #0]
   12a68:	9843      	ldr	r0, [sp, #268]	; 0x10c
   12a6a:	90cb      	str	r0, [sp, #812]	; 0x32c
   12a6c:	9a42      	ldr	r2, [sp, #264]	; 0x108
   12a6e:	92cc      	str	r2, [sp, #816]	; 0x330
   12a70:	f24e 0394 	movw	r3, #57492	; 0xe094
   12a74:	f2c0 0301 	movt	r3, #1
   12a78:	681b      	ldr	r3, [r3, #0]
   12a7a:	f24e 0c00 	movw	ip, #57344	; 0xe000
   12a7e:	f2c0 0c01 	movt	ip, #1
   12a82:	f8dc c000 	ldr.w	ip, [ip]
   12a86:	46ee      	mov	lr, sp
   12a88:	2400      	movs	r4, #0
   12a8a:	f8ce 4000 	str.w	r4, [lr]
   12a8e:	a8cd      	add	r0, sp, #820	; 0x334
   12a90:	2201      	movs	r2, #1
   12a92:	9141      	str	r1, [sp, #260]	; 0x104
   12a94:	4619      	mov	r1, r3
   12a96:	4663      	mov	r3, ip
   12a98:	f7f6 f800 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12a9c:	e7ff      	b.n	12a9e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x41e>
   12a9e:	a8cb      	add	r0, sp, #812	; 0x32c
   12aa0:	90c8      	str	r0, [sp, #800]	; 0x320
   12aa2:	a8cc      	add	r0, sp, #816	; 0x330
   12aa4:	90c9      	str	r0, [sp, #804]	; 0x324
   12aa6:	a8cd      	add	r0, sp, #820	; 0x334
   12aa8:	90ca      	str	r0, [sp, #808]	; 0x328
   12aaa:	98c8      	ldr	r0, [sp, #800]	; 0x320
   12aac:	f8cd 0548 	str.w	r0, [sp, #1352]	; 0x548
   12ab0:	99c9      	ldr	r1, [sp, #804]	; 0x324
   12ab2:	f8cd 154c 	str.w	r1, [sp, #1356]	; 0x54c
   12ab6:	9aca      	ldr	r2, [sp, #808]	; 0x328
   12ab8:	f8cd 2550 	str.w	r2, [sp, #1360]	; 0x550
   12abc:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12ac0:	f2c0 0300 	movt	r3, #0
   12ac4:	9140      	str	r1, [sp, #256]	; 0x100
   12ac6:	4619      	mov	r1, r3
   12ac8:	923f      	str	r2, [sp, #252]	; 0xfc
   12aca:	f7f6 fc46 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12ace:	903e      	str	r0, [sp, #248]	; 0xf8
   12ad0:	913d      	str	r1, [sp, #244]	; 0xf4
   12ad2:	e7ff      	b.n	12ad4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x454>
   12ad4:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12ad8:	f2c0 0100 	movt	r1, #0
   12adc:	9840      	ldr	r0, [sp, #256]	; 0x100
   12ade:	f7f6 fc3c 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12ae2:	903c      	str	r0, [sp, #240]	; 0xf0
   12ae4:	913b      	str	r1, [sp, #236]	; 0xec
   12ae6:	e7ff      	b.n	12ae8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x468>
   12ae8:	f645 31bb 	movw	r1, #23483	; 0x5bbb
   12aec:	f2c0 0101 	movt	r1, #1
   12af0:	983f      	ldr	r0, [sp, #252]	; 0xfc
   12af2:	f7f6 fc71 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12af6:	903a      	str	r0, [sp, #232]	; 0xe8
   12af8:	9139      	str	r1, [sp, #228]	; 0xe4
   12afa:	e7ff      	b.n	12afc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x47c>
   12afc:	983e      	ldr	r0, [sp, #248]	; 0xf8
   12afe:	90c2      	str	r0, [sp, #776]	; 0x308
   12b00:	993d      	ldr	r1, [sp, #244]	; 0xf4
   12b02:	91c3      	str	r1, [sp, #780]	; 0x30c
   12b04:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   12b06:	92c4      	str	r2, [sp, #784]	; 0x310
   12b08:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   12b0a:	93c5      	str	r3, [sp, #788]	; 0x314
   12b0c:	f8dd c0e8 	ldr.w	ip, [sp, #232]	; 0xe8
   12b10:	f8cd c318 	str.w	ip, [sp, #792]	; 0x318
   12b14:	f8dd e0e4 	ldr.w	lr, [sp, #228]	; 0xe4
   12b18:	f8cd e31c 	str.w	lr, [sp, #796]	; 0x31c
   12b1c:	466c      	mov	r4, sp
   12b1e:	2503      	movs	r5, #3
   12b20:	6025      	str	r5, [r4, #0]
   12b22:	a8bc      	add	r0, sp, #752	; 0x2f0
   12b24:	abc2      	add	r3, sp, #776	; 0x308
   12b26:	9941      	ldr	r1, [sp, #260]	; 0x104
   12b28:	462a      	mov	r2, r5
   12b2a:	f7f5 ffb7 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12b2e:	e7ff      	b.n	12b30 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4b0>
   12b30:	f24e 0098 	movw	r0, #57496	; 0xe098
   12b34:	f2c0 0001 	movt	r0, #1
   12b38:	f002 fd51 	bl	155de <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12b3c:	9038      	str	r0, [sp, #224]	; 0xe0
   12b3e:	e7ff      	b.n	12b40 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4c0>
   12b40:	a8bc      	add	r0, sp, #752	; 0x2f0
   12b42:	9938      	ldr	r1, [sp, #224]	; 0xe0
   12b44:	f002 fd88 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12b48:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12b4a:	f64d 7088 	movw	r0, #57224	; 0xdf88
   12b4e:	f2c0 0001 	movt	r0, #1
   12b52:	6800      	ldr	r0, [r0, #0]
   12b54:	a9d3      	add	r1, sp, #844	; 0x34c
   12b56:	91d4      	str	r1, [sp, #848]	; 0x350
   12b58:	90d5      	str	r0, [sp, #852]	; 0x354
   12b5a:	98d4      	ldr	r0, [sp, #848]	; 0x350
   12b5c:	f8cd 0554 	str.w	r0, [sp, #1364]	; 0x554
   12b60:	99d5      	ldr	r1, [sp, #852]	; 0x354
   12b62:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
   12b66:	6802      	ldr	r2, [r0, #0]
   12b68:	680b      	ldr	r3, [r1, #0]
   12b6a:	429a      	cmp	r2, r3
   12b6c:	9037      	str	r0, [sp, #220]	; 0xdc
   12b6e:	9136      	str	r1, [sp, #216]	; 0xd8
   12b70:	d107      	bne.n	12b82 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x502>
   12b72:	e7ff      	b.n	12b74 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4f4>

    //  Create Event Queue and Mbuf (Data) Queue that will store the SPI requests
    unsafe { os::os_eventq_init(&mut SPI_EVENT_QUEUE) };
   12b74:	f646 20a4 	movw	r0, #27300	; 0x6aa4
   12b78:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12b7c:	f005 feca 	bl	18914 <os_eventq_init>
   12b80:	e075      	b.n	12c6e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5ee>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12b82:	f64d 70e0 	movw	r0, #57312	; 0xdfe0
   12b86:	f2c0 0001 	movt	r0, #1
   12b8a:	6801      	ldr	r1, [r0, #0]
   12b8c:	9837      	ldr	r0, [sp, #220]	; 0xdc
   12b8e:	90e5      	str	r0, [sp, #916]	; 0x394
   12b90:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   12b92:	92e6      	str	r2, [sp, #920]	; 0x398
   12b94:	f24e 0394 	movw	r3, #57492	; 0xe094
   12b98:	f2c0 0301 	movt	r3, #1
   12b9c:	681b      	ldr	r3, [r3, #0]
   12b9e:	f24e 0c00 	movw	ip, #57344	; 0xe000
   12ba2:	f2c0 0c01 	movt	ip, #1
   12ba6:	f8dc c000 	ldr.w	ip, [ip]
   12baa:	46ee      	mov	lr, sp
   12bac:	2400      	movs	r4, #0
   12bae:	f8ce 4000 	str.w	r4, [lr]
   12bb2:	a8e7      	add	r0, sp, #924	; 0x39c
   12bb4:	2201      	movs	r2, #1
   12bb6:	9135      	str	r1, [sp, #212]	; 0xd4
   12bb8:	4619      	mov	r1, r3
   12bba:	4663      	mov	r3, ip
   12bbc:	f7f5 ff6e 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12bc0:	e7ff      	b.n	12bc2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x542>
   12bc2:	a8e5      	add	r0, sp, #916	; 0x394
   12bc4:	90e2      	str	r0, [sp, #904]	; 0x388
   12bc6:	a8e6      	add	r0, sp, #920	; 0x398
   12bc8:	90e3      	str	r0, [sp, #908]	; 0x38c
   12bca:	a8e7      	add	r0, sp, #924	; 0x39c
   12bcc:	90e4      	str	r0, [sp, #912]	; 0x390
   12bce:	98e2      	ldr	r0, [sp, #904]	; 0x388
   12bd0:	f8cd 055c 	str.w	r0, [sp, #1372]	; 0x55c
   12bd4:	99e3      	ldr	r1, [sp, #908]	; 0x38c
   12bd6:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560
   12bda:	9ae4      	ldr	r2, [sp, #912]	; 0x390
   12bdc:	f8cd 2564 	str.w	r2, [sp, #1380]	; 0x564
   12be0:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12be4:	f2c0 0300 	movt	r3, #0
   12be8:	9134      	str	r1, [sp, #208]	; 0xd0
   12bea:	4619      	mov	r1, r3
   12bec:	9233      	str	r2, [sp, #204]	; 0xcc
   12bee:	f7f6 fbb4 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12bf2:	9032      	str	r0, [sp, #200]	; 0xc8
   12bf4:	9131      	str	r1, [sp, #196]	; 0xc4
   12bf6:	e7ff      	b.n	12bf8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x578>
   12bf8:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12bfc:	f2c0 0100 	movt	r1, #0
   12c00:	9834      	ldr	r0, [sp, #208]	; 0xd0
   12c02:	f7f6 fbaa 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12c06:	9030      	str	r0, [sp, #192]	; 0xc0
   12c08:	912f      	str	r1, [sp, #188]	; 0xbc
   12c0a:	e7ff      	b.n	12c0c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x58c>
   12c0c:	f645 31bb 	movw	r1, #23483	; 0x5bbb
   12c10:	f2c0 0101 	movt	r1, #1
   12c14:	9833      	ldr	r0, [sp, #204]	; 0xcc
   12c16:	f7f6 fbdf 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12c1a:	902e      	str	r0, [sp, #184]	; 0xb8
   12c1c:	912d      	str	r1, [sp, #180]	; 0xb4
   12c1e:	e7ff      	b.n	12c20 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5a0>
   12c20:	9832      	ldr	r0, [sp, #200]	; 0xc8
   12c22:	90dc      	str	r0, [sp, #880]	; 0x370
   12c24:	9931      	ldr	r1, [sp, #196]	; 0xc4
   12c26:	91dd      	str	r1, [sp, #884]	; 0x374
   12c28:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   12c2a:	92de      	str	r2, [sp, #888]	; 0x378
   12c2c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   12c2e:	93df      	str	r3, [sp, #892]	; 0x37c
   12c30:	f8dd c0b8 	ldr.w	ip, [sp, #184]	; 0xb8
   12c34:	f8cd c380 	str.w	ip, [sp, #896]	; 0x380
   12c38:	f8dd e0b4 	ldr.w	lr, [sp, #180]	; 0xb4
   12c3c:	f8cd e384 	str.w	lr, [sp, #900]	; 0x384
   12c40:	466c      	mov	r4, sp
   12c42:	2503      	movs	r5, #3
   12c44:	6025      	str	r5, [r4, #0]
   12c46:	a8d6      	add	r0, sp, #856	; 0x358
   12c48:	abdc      	add	r3, sp, #880	; 0x370
   12c4a:	9935      	ldr	r1, [sp, #212]	; 0xd4
   12c4c:	462a      	mov	r2, r5
   12c4e:	f7f5 ff25 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12c52:	e7ff      	b.n	12c54 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5d4>
   12c54:	f24e 00a8 	movw	r0, #57512	; 0xe0a8
   12c58:	f2c0 0001 	movt	r0, #1
   12c5c:	f002 fcbf 	bl	155de <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12c60:	902c      	str	r0, [sp, #176]	; 0xb0
   12c62:	e7ff      	b.n	12c64 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5e4>
   12c64:	a8d6      	add	r0, sp, #856	; 0x358
   12c66:	992c      	ldr	r1, [sp, #176]	; 0xb0
   12c68:	f002 fcf6 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12c6c:	defe      	udf	#254	; 0xfe
    let rc = unsafe { os::os_mqueue_init(
        &mut SPI_DATA_QUEUE, 
        Some(spi_event_callback), 
   12c6e:	f243 50fd 	movw	r0, #13821	; 0x35fd
   12c72:	f2c0 0001 	movt	r0, #1
   12c76:	90ee      	str	r0, [sp, #952]	; 0x3b8
    let rc = unsafe { os::os_mqueue_init(
   12c78:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
   12c7a:	f646 208c 	movw	r0, #27276	; 0x6a8c
   12c7e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12c82:	2200      	movs	r2, #0
   12c84:	f005 fef4 	bl	18a70 <os_mqueue_init>
   12c88:	90ed      	str	r0, [sp, #948]	; 0x3b4
   12c8a:	e7ff      	b.n	12c8c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x60c>
        NULL
    ) };
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   12c8c:	f64d 7088 	movw	r0, #57224	; 0xdf88
   12c90:	f2c0 0001 	movt	r0, #1
   12c94:	6800      	ldr	r0, [r0, #0]
   12c96:	a9ed      	add	r1, sp, #948	; 0x3b4
   12c98:	91ef      	str	r1, [sp, #956]	; 0x3bc
   12c9a:	90f0      	str	r0, [sp, #960]	; 0x3c0
   12c9c:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
   12c9e:	f8cd 0568 	str.w	r0, [sp, #1384]	; 0x568
   12ca2:	99f0      	ldr	r1, [sp, #960]	; 0x3c0
   12ca4:	f8cd 156c 	str.w	r1, [sp, #1388]	; 0x56c
   12ca8:	6802      	ldr	r2, [r0, #0]
   12caa:	680b      	ldr	r3, [r1, #0]
   12cac:	429a      	cmp	r2, r3
   12cae:	902b      	str	r0, [sp, #172]	; 0xac
   12cb0:	912a      	str	r1, [sp, #168]	; 0xa8
   12cb2:	d10a      	bne.n	12cca <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x64a>
   12cb4:	e7ff      	b.n	12cb6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x636>

    //  Create the Semaphore that will signal whether the SPI request has completed
    let rc = unsafe { os::os_sem_init(&mut SPI_SEM, 0) };  //  Init to 0 tokens, so caller will block until SPI request is completed.
   12cb6:	f646 207c 	movw	r0, #27260	; 0x6a7c
   12cba:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12cbe:	2100      	movs	r1, #0
   12cc0:	f006 fbd0 	bl	19464 <os_sem_init>
   12cc4:	f8cd 0420 	str.w	r0, [sp, #1056]	; 0x420
   12cc8:	e07b      	b.n	12dc2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x742>
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   12cca:	f64d 70e0 	movw	r0, #57312	; 0xdfe0
   12cce:	f2c0 0001 	movt	r0, #1
   12cd2:	6801      	ldr	r1, [r0, #0]
   12cd4:	982b      	ldr	r0, [sp, #172]	; 0xac
   12cd6:	f8cd 0400 	str.w	r0, [sp, #1024]	; 0x400
   12cda:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   12cdc:	f8cd 2404 	str.w	r2, [sp, #1028]	; 0x404
   12ce0:	f24e 03cc 	movw	r3, #57548	; 0xe0cc
   12ce4:	f2c0 0301 	movt	r3, #1
   12ce8:	681b      	ldr	r3, [r3, #0]
   12cea:	f24e 0c00 	movw	ip, #57344	; 0xe000
   12cee:	f2c0 0c01 	movt	ip, #1
   12cf2:	f8dc c000 	ldr.w	ip, [ip]
   12cf6:	46ee      	mov	lr, sp
   12cf8:	2400      	movs	r4, #0
   12cfa:	f8ce 4000 	str.w	r4, [lr]
   12cfe:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   12d02:	2201      	movs	r2, #1
   12d04:	9129      	str	r1, [sp, #164]	; 0xa4
   12d06:	4619      	mov	r1, r3
   12d08:	4663      	mov	r3, ip
   12d0a:	f7f5 fec7 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12d0e:	e7ff      	b.n	12d10 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x690>
   12d10:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
   12d14:	90fd      	str	r0, [sp, #1012]	; 0x3f4
   12d16:	f20d 4004 	addw	r0, sp, #1028	; 0x404
   12d1a:	90fe      	str	r0, [sp, #1016]	; 0x3f8
   12d1c:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   12d20:	90ff      	str	r0, [sp, #1020]	; 0x3fc
   12d22:	98fd      	ldr	r0, [sp, #1012]	; 0x3f4
   12d24:	f8cd 0570 	str.w	r0, [sp, #1392]	; 0x570
   12d28:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
   12d2a:	f8cd 1574 	str.w	r1, [sp, #1396]	; 0x574
   12d2e:	9aff      	ldr	r2, [sp, #1020]	; 0x3fc
   12d30:	f8cd 2578 	str.w	r2, [sp, #1400]	; 0x578
   12d34:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12d38:	f2c0 0300 	movt	r3, #0
   12d3c:	9128      	str	r1, [sp, #160]	; 0xa0
   12d3e:	4619      	mov	r1, r3
   12d40:	9227      	str	r2, [sp, #156]	; 0x9c
   12d42:	f7f6 fb0a 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12d46:	9026      	str	r0, [sp, #152]	; 0x98
   12d48:	9125      	str	r1, [sp, #148]	; 0x94
   12d4a:	e7ff      	b.n	12d4c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6cc>
   12d4c:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12d50:	f2c0 0100 	movt	r1, #0
   12d54:	9828      	ldr	r0, [sp, #160]	; 0xa0
   12d56:	f7f6 fb00 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12d5a:	9024      	str	r0, [sp, #144]	; 0x90
   12d5c:	9123      	str	r1, [sp, #140]	; 0x8c
   12d5e:	e7ff      	b.n	12d60 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6e0>
   12d60:	f645 31bb 	movw	r1, #23483	; 0x5bbb
   12d64:	f2c0 0101 	movt	r1, #1
   12d68:	9827      	ldr	r0, [sp, #156]	; 0x9c
   12d6a:	f7f6 fb35 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12d6e:	9022      	str	r0, [sp, #136]	; 0x88
   12d70:	9121      	str	r1, [sp, #132]	; 0x84
   12d72:	e7ff      	b.n	12d74 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6f4>
   12d74:	9826      	ldr	r0, [sp, #152]	; 0x98
   12d76:	90f7      	str	r0, [sp, #988]	; 0x3dc
   12d78:	9925      	ldr	r1, [sp, #148]	; 0x94
   12d7a:	91f8      	str	r1, [sp, #992]	; 0x3e0
   12d7c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   12d7e:	92f9      	str	r2, [sp, #996]	; 0x3e4
   12d80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   12d82:	93fa      	str	r3, [sp, #1000]	; 0x3e8
   12d84:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
   12d88:	f8cd c3ec 	str.w	ip, [sp, #1004]	; 0x3ec
   12d8c:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
   12d90:	f8cd e3f0 	str.w	lr, [sp, #1008]	; 0x3f0
   12d94:	466c      	mov	r4, sp
   12d96:	2503      	movs	r5, #3
   12d98:	6025      	str	r5, [r4, #0]
   12d9a:	a8f1      	add	r0, sp, #964	; 0x3c4
   12d9c:	abf7      	add	r3, sp, #988	; 0x3dc
   12d9e:	9929      	ldr	r1, [sp, #164]	; 0xa4
   12da0:	462a      	mov	r2, r5
   12da2:	f7f5 fe7b 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12da6:	e7ff      	b.n	12da8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x728>
   12da8:	f24e 00d0 	movw	r0, #57552	; 0xe0d0
   12dac:	f2c0 0001 	movt	r0, #1
   12db0:	f002 fc15 	bl	155de <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12db4:	9020      	str	r0, [sp, #128]	; 0x80
   12db6:	e7ff      	b.n	12db8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x738>
   12db8:	a8f1      	add	r0, sp, #964	; 0x3c4
   12dba:	9920      	ldr	r1, [sp, #128]	; 0x80
   12dbc:	f002 fc4c 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12dc0:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   12dc2:	f64d 7088 	movw	r0, #57224	; 0xdf88
   12dc6:	f2c0 0001 	movt	r0, #1
   12dca:	6800      	ldr	r0, [r0, #0]
   12dcc:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
   12dd0:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
   12dd4:	f8cd 0428 	str.w	r0, [sp, #1064]	; 0x428
   12dd8:	f8dd 0424 	ldr.w	r0, [sp, #1060]	; 0x424
   12ddc:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
   12de0:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   12de4:	f8cd 1580 	str.w	r1, [sp, #1408]	; 0x580
   12de8:	6802      	ldr	r2, [r0, #0]
   12dea:	680b      	ldr	r3, [r1, #0]
   12dec:	429a      	cmp	r2, r3
   12dee:	901f      	str	r0, [sp, #124]	; 0x7c
   12df0:	911e      	str	r1, [sp, #120]	; 0x78
   12df2:	d10a      	bne.n	12e0a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x78a>
   12df4:	e7ff      	b.n	12df6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x776>

    //  Create the Semaphore that will throttle the number of queued SPI requests
    let rc = unsafe { os::os_sem_init(&mut SPI_THROTTLE_SEM, 2) };  //  Only max 2 requests queued, the next request will block
   12df6:	f646 2084 	movw	r0, #27268	; 0x6a84
   12dfa:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12dfe:	2102      	movs	r1, #2
   12e00:	f006 fb30 	bl	19464 <os_sem_init>
   12e04:	f8cd 0488 	str.w	r0, [sp, #1160]	; 0x488
   12e08:	e088      	b.n	12f1c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x89c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   12e0a:	f64d 70e0 	movw	r0, #57312	; 0xdfe0
   12e0e:	f2c0 0001 	movt	r0, #1
   12e12:	6801      	ldr	r1, [r0, #0]
   12e14:	981f      	ldr	r0, [sp, #124]	; 0x7c
   12e16:	f8cd 0468 	str.w	r0, [sp, #1128]	; 0x468
   12e1a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   12e1c:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
   12e20:	f24e 03f8 	movw	r3, #57592	; 0xe0f8
   12e24:	f2c0 0301 	movt	r3, #1
   12e28:	681b      	ldr	r3, [r3, #0]
   12e2a:	f24e 0c00 	movw	ip, #57344	; 0xe000
   12e2e:	f2c0 0c01 	movt	ip, #1
   12e32:	f8dc c000 	ldr.w	ip, [ip]
   12e36:	46ee      	mov	lr, sp
   12e38:	2400      	movs	r4, #0
   12e3a:	f8ce 4000 	str.w	r4, [lr]
   12e3e:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   12e42:	2201      	movs	r2, #1
   12e44:	911d      	str	r1, [sp, #116]	; 0x74
   12e46:	4619      	mov	r1, r3
   12e48:	4663      	mov	r3, ip
   12e4a:	f7f5 fe27 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12e4e:	e7ff      	b.n	12e50 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x7d0>
   12e50:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
   12e54:	f8cd 045c 	str.w	r0, [sp, #1116]	; 0x45c
   12e58:	f20d 406c 	addw	r0, sp, #1132	; 0x46c
   12e5c:	f8cd 0460 	str.w	r0, [sp, #1120]	; 0x460
   12e60:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   12e64:	f8cd 0464 	str.w	r0, [sp, #1124]	; 0x464
   12e68:	f8dd 045c 	ldr.w	r0, [sp, #1116]	; 0x45c
   12e6c:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
   12e70:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   12e74:	f8cd 1588 	str.w	r1, [sp, #1416]	; 0x588
   12e78:	f8dd 2464 	ldr.w	r2, [sp, #1124]	; 0x464
   12e7c:	f8cd 258c 	str.w	r2, [sp, #1420]	; 0x58c
   12e80:	f249 333f 	movw	r3, #37695	; 0x933f
   12e84:	f2c0 0300 	movt	r3, #0
   12e88:	911c      	str	r1, [sp, #112]	; 0x70
   12e8a:	4619      	mov	r1, r3
   12e8c:	921b      	str	r2, [sp, #108]	; 0x6c
   12e8e:	f7f6 fa8e 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   12e92:	901a      	str	r0, [sp, #104]	; 0x68
   12e94:	9119      	str	r1, [sp, #100]	; 0x64
   12e96:	e7ff      	b.n	12e98 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x818>
   12e98:	f249 313f 	movw	r1, #37695	; 0x933f
   12e9c:	f2c0 0100 	movt	r1, #0
   12ea0:	981c      	ldr	r0, [sp, #112]	; 0x70
   12ea2:	f7f6 fa84 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   12ea6:	9018      	str	r0, [sp, #96]	; 0x60
   12ea8:	9117      	str	r1, [sp, #92]	; 0x5c
   12eaa:	e7ff      	b.n	12eac <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x82c>
   12eac:	f645 31bb 	movw	r1, #23483	; 0x5bbb
   12eb0:	f2c0 0101 	movt	r1, #1
   12eb4:	981b      	ldr	r0, [sp, #108]	; 0x6c
   12eb6:	f7f6 fa8f 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12eba:	9016      	str	r0, [sp, #88]	; 0x58
   12ebc:	9115      	str	r1, [sp, #84]	; 0x54
   12ebe:	e7ff      	b.n	12ec0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x840>
   12ec0:	981a      	ldr	r0, [sp, #104]	; 0x68
   12ec2:	f8cd 0444 	str.w	r0, [sp, #1092]	; 0x444
   12ec6:	9919      	ldr	r1, [sp, #100]	; 0x64
   12ec8:	f8cd 1448 	str.w	r1, [sp, #1096]	; 0x448
   12ecc:	9a18      	ldr	r2, [sp, #96]	; 0x60
   12ece:	f8cd 244c 	str.w	r2, [sp, #1100]	; 0x44c
   12ed2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12ed4:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
   12ed8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
   12edc:	f8cd c454 	str.w	ip, [sp, #1108]	; 0x454
   12ee0:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
   12ee4:	f8cd e458 	str.w	lr, [sp, #1112]	; 0x458
   12ee8:	466c      	mov	r4, sp
   12eea:	2503      	movs	r5, #3
   12eec:	6025      	str	r5, [r4, #0]
   12eee:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   12ef2:	f20d 4344 	addw	r3, sp, #1092	; 0x444
   12ef6:	991d      	ldr	r1, [sp, #116]	; 0x74
   12ef8:	462a      	mov	r2, r5
   12efa:	f7f5 fdcf 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12efe:	e7ff      	b.n	12f00 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x880>
   12f00:	f24e 00fc 	movw	r0, #57596	; 0xe0fc
   12f04:	f2c0 0001 	movt	r0, #1
   12f08:	f002 fb69 	bl	155de <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12f0c:	9014      	str	r0, [sp, #80]	; 0x50
   12f0e:	e7ff      	b.n	12f10 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x890>
   12f10:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   12f14:	9914      	ldr	r1, [sp, #80]	; 0x50
   12f16:	f002 fb9f 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12f1a:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   12f1c:	f64d 7088 	movw	r0, #57224	; 0xdf88
   12f20:	f2c0 0001 	movt	r0, #1
   12f24:	6800      	ldr	r0, [r0, #0]
   12f26:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
   12f2a:	f8cd 148c 	str.w	r1, [sp, #1164]	; 0x48c
   12f2e:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
   12f32:	f8dd 048c 	ldr.w	r0, [sp, #1164]	; 0x48c
   12f36:	f8cd 0590 	str.w	r0, [sp, #1424]	; 0x590
   12f3a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   12f3e:	f8cd 1594 	str.w	r1, [sp, #1428]	; 0x594
   12f42:	6802      	ldr	r2, [r0, #0]
   12f44:	680b      	ldr	r3, [r1, #0]
   12f46:	429a      	cmp	r2, r3
   12f48:	9013      	str	r0, [sp, #76]	; 0x4c
   12f4a:	9112      	str	r1, [sp, #72]	; 0x48
   12f4c:	d125      	bne.n	12f9a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x91a>
   12f4e:	e7ff      	b.n	12f50 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x8d0>
    
    //  Create a task to send SPI requests sequentially from the SPI Event Queue and Mbuf Queue
    os::task_init(                //  Create a new task and start it...
        unsafe { &mut SPI_TASK }, //  Task object will be saved here
        &init_strn!( "spi" ),     //  Name of task
   12f50:	f24e 1028 	movw	r0, #57640	; 0xe128
   12f54:	f2c0 0001 	movt	r0, #1
   12f58:	6801      	ldr	r1, [r0, #0]
        Some( spi_task_func ),    //  Function to execute when task starts
   12f5a:	f243 00fb 	movw	r0, #12539	; 0x30fb
   12f5e:	f2c0 0001 	movt	r0, #1
   12f62:	f8cd 04f4 	str.w	r0, [sp, #1268]	; 0x4f4
    os::task_init(                //  Create a new task and start it...
   12f66:	f8dd 24f4 	ldr.w	r2, [sp, #1268]	; 0x4f4
   12f6a:	4668      	mov	r0, sp
   12f6c:	f44f 7380 	mov.w	r3, #256	; 0x100
   12f70:	6103      	str	r3, [r0, #16]
   12f72:	60c3      	str	r3, [r0, #12]
   12f74:	f646 3304 	movw	r3, #27396	; 0x6b04
   12f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f7c:	6083      	str	r3, [r0, #8]
   12f7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12f82:	6043      	str	r3, [r0, #4]
   12f84:	230a      	movs	r3, #10
   12f86:	6003      	str	r3, [r0, #0]
   12f88:	f646 20b4 	movw	r0, #27316	; 0x6ab4
   12f8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12f90:	2300      	movs	r3, #0
   12f92:	f7f5 fe7d 	bl	8c90 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
   12f96:	9011      	str	r0, [sp, #68]	; 0x44
   12f98:	e088      	b.n	130ac <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   12f9a:	f64d 70e0 	movw	r0, #57312	; 0xdfe0
   12f9e:	f2c0 0001 	movt	r0, #1
   12fa2:	6801      	ldr	r1, [r0, #0]
   12fa4:	9813      	ldr	r0, [sp, #76]	; 0x4c
   12fa6:	f8cd 04d0 	str.w	r0, [sp, #1232]	; 0x4d0
   12faa:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12fac:	f8cd 24d4 	str.w	r2, [sp, #1236]	; 0x4d4
   12fb0:	f24e 03f8 	movw	r3, #57592	; 0xe0f8
   12fb4:	f2c0 0301 	movt	r3, #1
   12fb8:	681b      	ldr	r3, [r3, #0]
   12fba:	f24e 0c00 	movw	ip, #57344	; 0xe000
   12fbe:	f2c0 0c01 	movt	ip, #1
   12fc2:	f8dc c000 	ldr.w	ip, [ip]
   12fc6:	46ee      	mov	lr, sp
   12fc8:	2400      	movs	r4, #0
   12fca:	f8ce 4000 	str.w	r4, [lr]
   12fce:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   12fd2:	2201      	movs	r2, #1
   12fd4:	9110      	str	r1, [sp, #64]	; 0x40
   12fd6:	4619      	mov	r1, r3
   12fd8:	4663      	mov	r3, ip
   12fda:	f7f5 fd5f 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12fde:	e7ff      	b.n	12fe0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x960>
   12fe0:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
   12fe4:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
   12fe8:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
   12fec:	f8cd 04c8 	str.w	r0, [sp, #1224]	; 0x4c8
   12ff0:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   12ff4:	f8cd 04cc 	str.w	r0, [sp, #1228]	; 0x4cc
   12ff8:	f8dd 04c4 	ldr.w	r0, [sp, #1220]	; 0x4c4
   12ffc:	f8cd 0598 	str.w	r0, [sp, #1432]	; 0x598
   13000:	f8dd 14c8 	ldr.w	r1, [sp, #1224]	; 0x4c8
   13004:	f8cd 159c 	str.w	r1, [sp, #1436]	; 0x59c
   13008:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
   1300c:	f8cd 25a0 	str.w	r2, [sp, #1440]	; 0x5a0
   13010:	f249 333f 	movw	r3, #37695	; 0x933f
   13014:	f2c0 0300 	movt	r3, #0
   13018:	910f      	str	r1, [sp, #60]	; 0x3c
   1301a:	4619      	mov	r1, r3
   1301c:	920e      	str	r2, [sp, #56]	; 0x38
   1301e:	f7f6 f9c6 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13022:	900d      	str	r0, [sp, #52]	; 0x34
   13024:	910c      	str	r1, [sp, #48]	; 0x30
   13026:	e7ff      	b.n	13028 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9a8>
   13028:	f249 313f 	movw	r1, #37695	; 0x933f
   1302c:	f2c0 0100 	movt	r1, #0
   13030:	980f      	ldr	r0, [sp, #60]	; 0x3c
   13032:	f7f6 f9bc 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13036:	900b      	str	r0, [sp, #44]	; 0x2c
   13038:	910a      	str	r1, [sp, #40]	; 0x28
   1303a:	e7ff      	b.n	1303c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9bc>
   1303c:	f645 31bb 	movw	r1, #23483	; 0x5bbb
   13040:	f2c0 0101 	movt	r1, #1
   13044:	980e      	ldr	r0, [sp, #56]	; 0x38
   13046:	f7f6 f9c7 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1304a:	9009      	str	r0, [sp, #36]	; 0x24
   1304c:	9108      	str	r1, [sp, #32]
   1304e:	e7ff      	b.n	13050 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9d0>
   13050:	980d      	ldr	r0, [sp, #52]	; 0x34
   13052:	f8cd 04ac 	str.w	r0, [sp, #1196]	; 0x4ac
   13056:	990c      	ldr	r1, [sp, #48]	; 0x30
   13058:	f8cd 14b0 	str.w	r1, [sp, #1200]	; 0x4b0
   1305c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1305e:	f8cd 24b4 	str.w	r2, [sp, #1204]	; 0x4b4
   13062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13064:	f8cd 34b8 	str.w	r3, [sp, #1208]	; 0x4b8
   13068:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   1306c:	f8cd c4bc 	str.w	ip, [sp, #1212]	; 0x4bc
   13070:	f8dd e020 	ldr.w	lr, [sp, #32]
   13074:	f8cd e4c0 	str.w	lr, [sp, #1216]	; 0x4c0
   13078:	466c      	mov	r4, sp
   1307a:	2503      	movs	r5, #3
   1307c:	6025      	str	r5, [r4, #0]
   1307e:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   13082:	f20d 43ac 	addw	r3, sp, #1196	; 0x4ac
   13086:	9910      	ldr	r1, [sp, #64]	; 0x40
   13088:	462a      	mov	r2, r5
   1308a:	f7f5 fd07 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1308e:	e7ff      	b.n	13090 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa10>
   13090:	f24e 100c 	movw	r0, #57612	; 0xe10c
   13094:	f2c0 0001 	movt	r0, #1
   13098:	f002 faa1 	bl	155de <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1309c:	9007      	str	r0, [sp, #28]
   1309e:	e7ff      	b.n	130a0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa20>
   130a0:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   130a4:	9907      	ldr	r1, [sp, #28]
   130a6:	f002 fad7 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   130aa:	defe      	udf	#254	; 0xfe
    os::task_init(                //  Create a new task and start it...
   130ac:	9811      	ldr	r0, [sp, #68]	; 0x44
   130ae:	f7f5 fd63 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   130b2:	f8cd 04f0 	str.w	r0, [sp, #1264]	; 0x4f0
   130b6:	e7ff      	b.n	130b8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa38>
        NULL,  //  Argument to be passed to above function
        10,    //  Task priority: highest is 0, lowest is 255 (main task is 127)
        os::OS_WAIT_FOREVER as u32,     //  Don't do sanity / watchdog checking
        unsafe { &mut SPI_TASK_STACK }, //  Stack space for the task
        SPI_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                               //  `?` means check for error
   130b8:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   130bc:	1e41      	subs	r1, r0, #1
   130be:	bf18      	it	ne
   130c0:	2101      	movne	r1, #1
   130c2:	2801      	cmp	r0, #1
   130c4:	d001      	beq.n	130ca <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa4a>
   130c6:	e7ff      	b.n	130c8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa48>
   130c8:	e005      	b.n	130d6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa56>
   130ca:	2000      	movs	r0, #0
    Ok(())
   130cc:	9069      	str	r0, [sp, #420]	; 0x1a4
   130ce:	2001      	movs	r0, #1
   130d0:	9069      	str	r0, [sp, #420]	; 0x1a4
}
   130d2:	e008      	b.n	130e6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>
    os::task_init(                //  Create a new task and start it...
   130d4:	defe      	udf	#254	; 0xfe
    ) ? ;                               //  `?` means check for error
   130d6:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   130da:	f8cd 05a4 	str.w	r0, [sp, #1444]	; 0x5a4
   130de:	f7ff fa17 	bl	12510 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   130e2:	9006      	str	r0, [sp, #24]
   130e4:	e003      	b.n	130ee <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa6e>
}
   130e6:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   130e8:	f50d 6db5 	add.w	sp, sp, #1448	; 0x5a8
   130ec:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;                               //  `?` means check for error
   130ee:	9806      	ldr	r0, [sp, #24]
   130f0:	f7f5 fd36 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   130f4:	9069      	str	r0, [sp, #420]	; 0x1a4
   130f6:	e7ff      	b.n	130f8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa78>
   130f8:	e7f5      	b.n	130e6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>

000130fa <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E>:

/// SPI Task Function.  Execute sequentially each SPI request posted to our Event Queue.  When there are no requests to process, block until one arrives.
extern "C" fn spi_task_func(_arg: Ptr) {
   130fa:	b580      	push	{r7, lr}
   130fc:	b082      	sub	sp, #8
   130fe:	9001      	str	r0, [sp, #4]
    loop {
   13100:	e7ff      	b.n	13102 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>
        //  Forever read SPI requests and execute them. Will call spi_event_callback().
        os::eventq_run(
   13102:	f646 20a4 	movw	r0, #27300	; 0x6aa4
   13106:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1310a:	f7f5 fda8 	bl	8c5e <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
   1310e:	9000      	str	r0, [sp, #0]
   13110:	e7ff      	b.n	13112 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x18>
   13112:	f24e 112c 	movw	r1, #57644	; 0xe12c
   13116:	f2c0 0101 	movt	r1, #1
   1311a:	f24e 1338 	movw	r3, #57656	; 0xe138
   1311e:	f2c0 0301 	movt	r3, #1
   13122:	220b      	movs	r2, #11
   13124:	9800      	ldr	r0, [sp, #0]
   13126:	f7f5 fce8 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   1312a:	e7ff      	b.n	1312c <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x32>
            unsafe { &mut SPI_EVENT_QUEUE }
        ).expect("eventq fail");

        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
   1312c:	f005 f8d4 	bl	182d8 <hal_watchdog_tickle>
   13130:	e7ff      	b.n	13132 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x38>
    loop {
   13132:	e7e6      	b.n	13102 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>

00013134 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>:
    }
}

/// Set pending request for non-blocking SPI write for Command Byte. Returns without waiting for write to complete.
pub fn spi_noblock_write_command(cmd: u8) -> MynewtResult<()> {
   13134:	b580      	push	{r7, lr}
   13136:	b08c      	sub	sp, #48	; 0x30
   13138:	4601      	mov	r1, r0
   1313a:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    //  If there is a pending Command Byte, enqueue it.
    spi_noblock_write_flush() ? ;
   1313e:	9104      	str	r1, [sp, #16]
   13140:	f000 f8d4 	bl	132ec <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   13144:	9003      	str	r0, [sp, #12]
   13146:	e7ff      	b.n	13148 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x14>
   13148:	9803      	ldr	r0, [sp, #12]
   1314a:	f7f5 fd15 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   1314e:	9006      	str	r0, [sp, #24]
   13150:	e7ff      	b.n	13152 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x1e>
   13152:	9806      	ldr	r0, [sp, #24]
   13154:	1e41      	subs	r1, r0, #1
   13156:	bf18      	it	ne
   13158:	2101      	movne	r1, #1
   1315a:	2801      	cmp	r0, #1
   1315c:	d001      	beq.n	13162 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2e>
   1315e:	e7ff      	b.n	13160 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2c>
   13160:	e00c      	b.n	1317c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x48>
    //  Set the pending Command Byte.
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   13162:	f644 2070 	movw	r0, #19056	; 0x4a70
   13166:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1316a:	9904      	ldr	r1, [sp, #16]
   1316c:	f7ff f9a4 	bl	124b8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>
   13170:	f88d 101d 	strb.w	r1, [sp, #29]
   13174:	f88d 001c 	strb.w	r0, [sp, #28]
   13178:	e00f      	b.n	1319a <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x66>
    spi_noblock_write_flush() ? ;
   1317a:	defe      	udf	#254	; 0xfe
   1317c:	9806      	ldr	r0, [sp, #24]
   1317e:	900b      	str	r0, [sp, #44]	; 0x2c
   13180:	f7ff f9c6 	bl	12510 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   13184:	9002      	str	r0, [sp, #8]
   13186:	e002      	b.n	1318e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x5a>
        return Err(MynewtError::SYS_EINVAL);
    }
    Ok(())
}
   13188:	9805      	ldr	r0, [sp, #20]
   1318a:	b00c      	add	sp, #48	; 0x30
   1318c:	bd80      	pop	{r7, pc}
    spi_noblock_write_flush() ? ;
   1318e:	9802      	ldr	r0, [sp, #8]
   13190:	f7f5 fce6 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   13194:	9005      	str	r0, [sp, #20]
   13196:	e7ff      	b.n	13198 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x64>
   13198:	e7f6      	b.n	13188 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   1319a:	a807      	add	r0, sp, #28
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   1319c:	f7f5 fcd4 	bl	8b48 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>
   131a0:	9001      	str	r0, [sp, #4]
   131a2:	e7ff      	b.n	131a4 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x70>
   131a4:	9801      	ldr	r0, [sp, #4]
   131a6:	07c1      	lsls	r1, r0, #31
   131a8:	2900      	cmp	r1, #0
   131aa:	d105      	bne.n	131b8 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x84>
   131ac:	e7ff      	b.n	131ae <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x7a>
   131ae:	2000      	movs	r0, #0
    Ok(())
   131b0:	9005      	str	r0, [sp, #20]
   131b2:	2001      	movs	r0, #1
   131b4:	9005      	str	r0, [sp, #20]
}
   131b6:	e7e7      	b.n	13188 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   131b8:	f06f 0001 	mvn.w	r0, #1
        return Err(MynewtError::SYS_EINVAL);
   131bc:	9008      	str	r0, [sp, #32]
   131be:	9808      	ldr	r0, [sp, #32]
   131c0:	9005      	str	r0, [sp, #20]
   131c2:	e7e1      	b.n	13188 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>

000131c4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>:

/// Set pending request for non-blocking SPI write for Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_data(data: &[u8]) -> MynewtResult<()> {
   131c4:	b580      	push	{r7, lr}
   131c6:	b094      	sub	sp, #80	; 0x50
   131c8:	9010      	str	r0, [sp, #64]	; 0x40
   131ca:	9111      	str	r1, [sp, #68]	; 0x44
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
   131cc:	f644 2270 	movw	r2, #19056	; 0x4a70
   131d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   131d4:	900d      	str	r0, [sp, #52]	; 0x34
   131d6:	4610      	mov	r0, r2
   131d8:	910c      	str	r1, [sp, #48]	; 0x30
   131da:	f7ff f953 	bl	12484 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   131de:	900b      	str	r0, [sp, #44]	; 0x2c
   131e0:	910a      	str	r1, [sp, #40]	; 0x28
   131e2:	e7ff      	b.n	131e4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x20>
   131e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   131e6:	990a      	ldr	r1, [sp, #40]	; 0x28
   131e8:	f7fe fd08 	bl	11bfc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   131ec:	9009      	str	r0, [sp, #36]	; 0x24
   131ee:	e7ff      	b.n	131f0 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x2c>
   131f0:	9809      	ldr	r0, [sp, #36]	; 0x24
   131f2:	2800      	cmp	r0, #0
   131f4:	d009      	beq.n	1320a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x46>
   131f6:	e7ff      	b.n	131f8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x34>
    //  if unsafe { PENDING_DATA.len() + data.len() > PENDING_DATA.capacity() } { cortex_m::asm::bkpt(); } ////
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   131f8:	f644 2078 	movw	r0, #19064	; 0x4a78
   131fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13200:	f7ff f934 	bl	1246c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   13204:	9008      	str	r0, [sp, #32]
   13206:	9107      	str	r1, [sp, #28]
   13208:	e00b      	b.n	13222 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x5e>
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
   1320a:	f24e 1048 	movw	r0, #57672	; 0xe148
   1320e:	f2c0 0001 	movt	r0, #1
   13212:	f24e 1254 	movw	r2, #57684	; 0xe154
   13216:	f2c0 0201 	movt	r2, #1
   1321a:	210b      	movs	r1, #11
   1321c:	f002 f9e6 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13220:	defe      	udf	#254	; 0xfe
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   13222:	9808      	ldr	r0, [sp, #32]
   13224:	9907      	ldr	r1, [sp, #28]
   13226:	f7fe fce9 	bl	11bfc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1322a:	9006      	str	r0, [sp, #24]
   1322c:	e7ff      	b.n	1322e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x6a>
   1322e:	980d      	ldr	r0, [sp, #52]	; 0x34
   13230:	990c      	ldr	r1, [sp, #48]	; 0x30
   13232:	f7fe fce3 	bl	11bfc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13236:	9005      	str	r0, [sp, #20]
   13238:	e7ff      	b.n	1323a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x76>
   1323a:	9806      	ldr	r0, [sp, #24]
   1323c:	9905      	ldr	r1, [sp, #20]
   1323e:	1842      	adds	r2, r0, r1
   13240:	4613      	mov	r3, r2
   13242:	4282      	cmp	r2, r0
   13244:	9304      	str	r3, [sp, #16]
   13246:	d345      	bcc.n	132d4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x110>
   13248:	e7ff      	b.n	1324a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x86>
   1324a:	f644 2078 	movw	r0, #19064	; 0x4a78
   1324e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13252:	f7ff f953 	bl	124fc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E>
   13256:	9003      	str	r0, [sp, #12]
   13258:	e7ff      	b.n	1325a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x96>
   1325a:	9804      	ldr	r0, [sp, #16]
   1325c:	9903      	ldr	r1, [sp, #12]
   1325e:	4288      	cmp	r0, r1
   13260:	d80a      	bhi.n	13278 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xb4>
   13262:	e7ff      	b.n	13264 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xa0>
    //  Append Data Bytes to Pending Data Bytes.
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13264:	f644 2078 	movw	r0, #19064	; 0x4a78
   13268:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1326c:	990d      	ldr	r1, [sp, #52]	; 0x34
   1326e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13270:	f7ff f914 	bl	1249c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E>
   13274:	9002      	str	r0, [sp, #8]
   13276:	e00b      	b.n	13290 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xcc>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   13278:	f24e 109c 	movw	r0, #57756	; 0xe19c
   1327c:	f2c0 0001 	movt	r0, #1
   13280:	f24e 12a8 	movw	r2, #57768	; 0xe1a8
   13284:	f2c0 0201 	movt	r2, #1
   13288:	210c      	movs	r1, #12
   1328a:	f002 f9af 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1328e:	defe      	udf	#254	; 0xfe
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13290:	9802      	ldr	r0, [sp, #8]
   13292:	f000 0001 	and.w	r0, r0, #1
   13296:	f7f5 fc69 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1329a:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   1329e:	e7ff      	b.n	132a0 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xdc>
   132a0:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
   132a4:	07c1      	lsls	r1, r0, #31
   132a6:	2900      	cmp	r1, #0
   132a8:	d001      	beq.n	132ae <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xea>
   132aa:	e7ff      	b.n	132ac <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xe8>
   132ac:	e005      	b.n	132ba <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xf6>
   132ae:	2000      	movs	r0, #0
    Ok(())
   132b0:	900e      	str	r0, [sp, #56]	; 0x38
   132b2:	2001      	movs	r0, #1
   132b4:	900e      	str	r0, [sp, #56]	; 0x38
}
   132b6:	e004      	b.n	132c2 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xfe>
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   132b8:	defe      	udf	#254	; 0xfe
   132ba:	f7f5 fbe4 	bl	8a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   132be:	9001      	str	r0, [sp, #4]
   132c0:	e002      	b.n	132c8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x104>
}
   132c2:	980e      	ldr	r0, [sp, #56]	; 0x38
   132c4:	b014      	add	sp, #80	; 0x50
   132c6:	bd80      	pop	{r7, pc}
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   132c8:	9801      	ldr	r0, [sp, #4]
   132ca:	f7f5 fc49 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   132ce:	900e      	str	r0, [sp, #56]	; 0x38
   132d0:	e7ff      	b.n	132d2 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x10e>
   132d2:	e7f6      	b.n	132c2 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xfe>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   132d4:	f24e 1080 	movw	r0, #57728	; 0xe180
   132d8:	f2c0 0001 	movt	r0, #1
   132dc:	f24e 1264 	movw	r2, #57700	; 0xe164
   132e0:	f2c0 0201 	movt	r2, #1
   132e4:	211c      	movs	r1, #28
   132e6:	f002 f981 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   132ea:	defe      	udf	#254	; 0xfe

000132ec <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>:

/// Enqueue any pending request for non-blocking SPI write for Command Byte and Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_flush() -> MynewtResult<()> {
   132ec:	b580      	push	{r7, lr}
   132ee:	b090      	sub	sp, #64	; 0x40
    //  If no pending request, quit.
    if unsafe { PENDING_CMD.len() } == 0 &&
   132f0:	f644 2070 	movw	r0, #19056	; 0x4a70
   132f4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   132f8:	f7ff f8c4 	bl	12484 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   132fc:	900b      	str	r0, [sp, #44]	; 0x2c
   132fe:	910a      	str	r1, [sp, #40]	; 0x28
   13300:	e016      	b.n	13330 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x44>
   13302:	2001      	movs	r0, #1
   13304:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   13308:	e00c      	b.n	13324 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
   1330a:	2000      	movs	r0, #0
   1330c:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   13310:	e008      	b.n	13324 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
        unsafe { PENDING_DATA.len() } == 0 {
   13312:	f644 2078 	movw	r0, #19064	; 0x4a78
   13316:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1331a:	f7ff f8a7 	bl	1246c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   1331e:	9009      	str	r0, [sp, #36]	; 0x24
   13320:	9108      	str	r1, [sp, #32]
   13322:	e00f      	b.n	13344 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x58>
    if unsafe { PENDING_CMD.len() } == 0 &&
   13324:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   13328:	07c0      	lsls	r0, r0, #31
   1332a:	2800      	cmp	r0, #0
   1332c:	d11d      	bne.n	1336a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x7e>
   1332e:	e013      	b.n	13358 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x6c>
   13330:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13332:	990a      	ldr	r1, [sp, #40]	; 0x28
   13334:	f7fe fc62 	bl	11bfc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13338:	9007      	str	r0, [sp, #28]
   1333a:	e7ff      	b.n	1333c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x50>
   1333c:	9807      	ldr	r0, [sp, #28]
   1333e:	2800      	cmp	r0, #0
   13340:	d0e7      	beq.n	13312 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x26>
   13342:	e7e2      	b.n	1330a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        unsafe { PENDING_DATA.len() } == 0 {
   13344:	9809      	ldr	r0, [sp, #36]	; 0x24
   13346:	9908      	ldr	r1, [sp, #32]
   13348:	f7fe fc58 	bl	11bfc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1334c:	9006      	str	r0, [sp, #24]
   1334e:	e7ff      	b.n	13350 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x64>
    if unsafe { PENDING_CMD.len() } == 0 &&
   13350:	9806      	ldr	r0, [sp, #24]
   13352:	2800      	cmp	r0, #0
   13354:	d0d5      	beq.n	13302 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x16>
   13356:	e7d8      	b.n	1330a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        return Ok(());
    }
    //  Enqueue the pending SPI request into the Mbuf Queue
    if let Err(e) = spi_noblock_write(
        unsafe { PENDING_CMD[0] },  //  Command Byte
   13358:	f644 2070 	movw	r0, #19056	; 0x4a70
   1335c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13360:	f7ff f890 	bl	12484 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   13364:	9005      	str	r0, [sp, #20]
   13366:	9104      	str	r1, [sp, #16]
   13368:	e007      	b.n	1337a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x8e>
   1336a:	2000      	movs	r0, #0
        return Ok(());
   1336c:	900c      	str	r0, [sp, #48]	; 0x30
   1336e:	2001      	movs	r0, #1
   13370:	900c      	str	r0, [sp, #48]	; 0x30
   13372:	e7ff      	b.n	13374 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    }
    //  Else clear the pending request and return Ok.
    unsafe { PENDING_CMD.clear() };
    unsafe { PENDING_DATA.clear() };
    Ok(())
}
   13374:	980c      	ldr	r0, [sp, #48]	; 0x30
   13376:	b010      	add	sp, #64	; 0x40
   13378:	bd80      	pop	{r7, pc}
        unsafe { PENDING_CMD[0] },  //  Command Byte
   1337a:	9804      	ldr	r0, [sp, #16]
   1337c:	2800      	cmp	r0, #0
   1337e:	d03f      	beq.n	13400 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x114>
   13380:	e7ff      	b.n	13382 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x96>
   13382:	9805      	ldr	r0, [sp, #20]
   13384:	7801      	ldrb	r1, [r0, #0]
        unsafe { &PENDING_DATA }    //  Data Bytes
   13386:	f644 2078 	movw	r0, #19064	; 0x4a78
   1338a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1338e:	9103      	str	r1, [sp, #12]
   13390:	f7ff f86c 	bl	1246c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   13394:	9002      	str	r0, [sp, #8]
   13396:	9101      	str	r1, [sp, #4]
   13398:	e7ff      	b.n	1339a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xae>
    if let Err(e) = spi_noblock_write(
   1339a:	9803      	ldr	r0, [sp, #12]
   1339c:	9902      	ldr	r1, [sp, #8]
   1339e:	9a01      	ldr	r2, [sp, #4]
   133a0:	f000 f837 	bl	13412 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>
   133a4:	900e      	str	r0, [sp, #56]	; 0x38
   133a6:	e7ff      	b.n	133a8 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xbc>
   133a8:	980e      	ldr	r0, [sp, #56]	; 0x38
   133aa:	2801      	cmp	r0, #1
   133ac:	d107      	bne.n	133be <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xd2>
   133ae:	e7ff      	b.n	133b0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xc4>
    unsafe { PENDING_CMD.clear() };
   133b0:	f644 2070 	movw	r0, #19056	; 0x4a70
   133b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   133b8:	f7ff f890 	bl	124dc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   133bc:	e014      	b.n	133e8 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xfc>
    if let Err(e) = spi_noblock_write(
   133be:	980e      	ldr	r0, [sp, #56]	; 0x38
   133c0:	900f      	str	r0, [sp, #60]	; 0x3c
        unsafe { PENDING_CMD.clear() };
   133c2:	f644 2170 	movw	r1, #19056	; 0x4a70
   133c6:	f2c2 0100 	movt	r1, #8192	; 0x2000
   133ca:	9000      	str	r0, [sp, #0]
   133cc:	4608      	mov	r0, r1
   133ce:	f7ff f885 	bl	124dc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   133d2:	e7ff      	b.n	133d4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xe8>
        unsafe { PENDING_DATA.clear() };    
   133d4:	f644 2078 	movw	r0, #19064	; 0x4a78
   133d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   133dc:	f7ff f886 	bl	124ec <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>
   133e0:	e7ff      	b.n	133e2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xf6>
        return Err(e);
   133e2:	9800      	ldr	r0, [sp, #0]
   133e4:	900c      	str	r0, [sp, #48]	; 0x30
   133e6:	e7c5      	b.n	13374 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    unsafe { PENDING_DATA.clear() };
   133e8:	f644 2078 	movw	r0, #19064	; 0x4a78
   133ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
   133f0:	f7ff f87c 	bl	124ec <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>
   133f4:	e7ff      	b.n	133f6 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x10a>
   133f6:	2000      	movs	r0, #0
    Ok(())
   133f8:	900c      	str	r0, [sp, #48]	; 0x30
   133fa:	2001      	movs	r0, #1
   133fc:	900c      	str	r0, [sp, #48]	; 0x30
}
   133fe:	e7b9      	b.n	13374 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
        unsafe { PENDING_CMD[0] },  //  Command Byte
   13400:	f24e 10b8 	movw	r0, #57784	; 0xe1b8
   13404:	f2c0 0001 	movt	r0, #1
   13408:	2100      	movs	r1, #0
   1340a:	9a04      	ldr	r2, [sp, #16]
   1340c:	f002 f904 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   13410:	defe      	udf	#254	; 0xfe

00013412 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>:

/// Enqueue request for non-blocking SPI write. Returns without waiting for write to complete.
/// Request must have a Command Byte, followed by optional Data Bytes.
fn spi_noblock_write(cmd: u8, data: &[u8]) -> MynewtResult<()> {
   13412:	b580      	push	{r7, lr}
   13414:	b0a0      	sub	sp, #128	; 0x80
   13416:	4603      	mov	r3, r0
   13418:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   1341c:	9116      	str	r1, [sp, #88]	; 0x58
   1341e:	9217      	str	r2, [sp, #92]	; 0x5c
   13420:	f247 5030 	movw	r0, #30000	; 0x7530
    console::print("spi data "); ////
    console::dump(data.as_ptr(), data.len() as u32); console::print("\n"); ////
    console::flush(); */

    //  Throttle the number of queued SPI requests.
    let timeout = 30_000;
   13424:	9018      	str	r0, [sp, #96]	; 0x60
   13426:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   1342a:	fba0 0c0c 	umull	r0, ip, r0, ip
   1342e:	f1bc 0f00 	cmp.w	ip, #0
   13432:	920f      	str	r2, [sp, #60]	; 0x3c
   13434:	910e      	str	r1, [sp, #56]	; 0x38
   13436:	900d      	str	r0, [sp, #52]	; 0x34
   13438:	f040 80c8 	bne.w	135cc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ba>
   1343c:	e7ff      	b.n	1343e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x2c>
   1343e:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   13442:	f2c1 0062 	movt	r0, #4194	; 0x1062
   13446:	990d      	ldr	r1, [sp, #52]	; 0x34
   13448:	fba1 0200 	umull	r0, r2, r1, r0
   1344c:	0991      	lsrs	r1, r2, #6
   1344e:	f646 2284 	movw	r2, #27268	; 0x6a84
   13452:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13456:	900c      	str	r0, [sp, #48]	; 0x30
   13458:	4610      	mov	r0, r2
   1345a:	f006 f83d 	bl	194d8 <os_sem_pend>
   1345e:	e7ff      	b.n	13460 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x4e>

    //  Allocate a new mbuf chain to copy the data to be sent.
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   13460:	980e      	ldr	r0, [sp, #56]	; 0x38
   13462:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13464:	f7fe fbca 	bl	11bfc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13468:	900b      	str	r0, [sp, #44]	; 0x2c
   1346a:	e7ff      	b.n	1346c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x5a>
   1346c:	2001      	movs	r0, #1
   1346e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13470:	fa10 f081 	uxtah	r0, r0, r1
   13474:	b282      	uxth	r2, r0
   13476:	4603      	mov	r3, r0
   13478:	4282      	cmp	r2, r0
   1347a:	930a      	str	r3, [sp, #40]	; 0x28
   1347c:	f040 80b2 	bne.w	135e4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1d2>
   13480:	e7ff      	b.n	13482 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x70>
   13482:	980a      	ldr	r0, [sp, #40]	; 0x28
   13484:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
    let mbuf = unsafe { os::os_msys_get_pkthdr(len, 0) };
   13488:	b280      	uxth	r0, r0
   1348a:	2100      	movs	r1, #0
   1348c:	f005 fd32 	bl	18ef4 <os_msys_get_pkthdr>
   13490:	4601      	mov	r1, r0
   13492:	901a      	str	r0, [sp, #104]	; 0x68
   13494:	9109      	str	r1, [sp, #36]	; 0x24
   13496:	e7ff      	b.n	13498 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x86>
    if mbuf.is_null() {  //  If out of memory, quit.
   13498:	9809      	ldr	r0, [sp, #36]	; 0x24
   1349a:	f000 ff17 	bl	142cc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   1349e:	9008      	str	r0, [sp, #32]
   134a0:	e7ff      	b.n	134a2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x90>
   134a2:	9808      	ldr	r0, [sp, #32]
   134a4:	07c1      	lsls	r1, r0, #31
   134a6:	2900      	cmp	r1, #0
   134a8:	d106      	bne.n	134b8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xa6>
   134aa:	e7ff      	b.n	134ac <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x9a>
   134ac:	f10d 0043 	add.w	r0, sp, #67	; 0x43
    }

    //  Append the Command Byte to the mbuf chain.
    let rc = unsafe { os::os_mbuf_append(
        mbuf, 
        core::mem::transmute(&cmd), 
   134b0:	901b      	str	r0, [sp, #108]	; 0x6c
   134b2:	991b      	ldr	r1, [sp, #108]	; 0x6c
   134b4:	9107      	str	r1, [sp, #28]
   134b6:	e010      	b.n	134da <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc8>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   134b8:	f646 2084 	movw	r0, #27268	; 0x6a84
   134bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   134c0:	f005 ffd8 	bl	19474 <os_sem_release>
   134c4:	e7ff      	b.n	134c6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xb4>
   134c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   134ca:	9012      	str	r0, [sp, #72]	; 0x48
   134cc:	9812      	ldr	r0, [sp, #72]	; 0x48
   134ce:	9011      	str	r0, [sp, #68]	; 0x44
   134d0:	e002      	b.n	134d8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
        return Err(MynewtError::SYS_EUNKNOWN); 
    }
    Ok(())
}
   134d2:	9811      	ldr	r0, [sp, #68]	; 0x44
   134d4:	b020      	add	sp, #128	; 0x80
   134d6:	bd80      	pop	{r7, pc}
        return Err(MynewtError::SYS_ENOMEM); 
   134d8:	e7fb      	b.n	134d2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
   134da:	2201      	movs	r2, #1
    let rc = unsafe { os::os_mbuf_append(
   134dc:	9809      	ldr	r0, [sp, #36]	; 0x24
   134de:	9907      	ldr	r1, [sp, #28]
   134e0:	f005 fb60 	bl	18ba4 <os_mbuf_append>
   134e4:	4601      	mov	r1, r0
   134e6:	901c      	str	r0, [sp, #112]	; 0x70
   134e8:	9106      	str	r1, [sp, #24]
   134ea:	e7ff      	b.n	134ec <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xda>
    if rc != 0 {  //  If out of memory, quit.
   134ec:	9806      	ldr	r0, [sp, #24]
   134ee:	2800      	cmp	r0, #0
   134f0:	d106      	bne.n	13500 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xee>
   134f2:	e7ff      	b.n	134f4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xe2>
        core::mem::transmute(data.as_ptr()), 
   134f4:	980e      	ldr	r0, [sp, #56]	; 0x38
   134f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   134f8:	f7fe fb88 	bl	11c0c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   134fc:	9005      	str	r0, [sp, #20]
   134fe:	e011      	b.n	13524 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x112>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   13500:	9809      	ldr	r0, [sp, #36]	; 0x24
   13502:	f005 fb33 	bl	18b6c <os_mbuf_free_chain>
   13506:	e7ff      	b.n	13508 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xf6>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   13508:	f646 2084 	movw	r0, #27268	; 0x6a84
   1350c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13510:	f005 ffb0 	bl	19474 <os_sem_release>
   13514:	e7ff      	b.n	13516 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x104>
   13516:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   1351a:	9013      	str	r0, [sp, #76]	; 0x4c
   1351c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1351e:	9011      	str	r0, [sp, #68]	; 0x44
   13520:	e7ff      	b.n	13522 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
   13522:	e7d9      	b.n	134d8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        core::mem::transmute(data.as_ptr()), 
   13524:	9805      	ldr	r0, [sp, #20]
   13526:	901d      	str	r0, [sp, #116]	; 0x74
   13528:	991d      	ldr	r1, [sp, #116]	; 0x74
   1352a:	9104      	str	r1, [sp, #16]
   1352c:	e7ff      	b.n	1352e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x11c>
        data.len() as u16
   1352e:	980e      	ldr	r0, [sp, #56]	; 0x38
   13530:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13532:	f7fe fb63 	bl	11bfc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13536:	9003      	str	r0, [sp, #12]
   13538:	e7ff      	b.n	1353a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x128>
    let rc = unsafe { os::os_mbuf_append(
   1353a:	9803      	ldr	r0, [sp, #12]
   1353c:	b282      	uxth	r2, r0
   1353e:	9809      	ldr	r0, [sp, #36]	; 0x24
   13540:	9904      	ldr	r1, [sp, #16]
   13542:	f005 fb2f 	bl	18ba4 <os_mbuf_append>
   13546:	4601      	mov	r1, r0
   13548:	901e      	str	r0, [sp, #120]	; 0x78
   1354a:	9102      	str	r1, [sp, #8]
   1354c:	e7ff      	b.n	1354e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x13c>
    if rc != 0 {  //  If out of memory, quit.
   1354e:	9802      	ldr	r0, [sp, #8]
   13550:	2800      	cmp	r0, #0
   13552:	d10f      	bne.n	13574 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x162>
   13554:	e7ff      	b.n	13556 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x144>
    let rc = unsafe { os::os_mqueue_put(
   13556:	f646 208c 	movw	r0, #27276	; 0x6a8c
   1355a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1355e:	f646 21a4 	movw	r1, #27300	; 0x6aa4
   13562:	f2c2 0100 	movt	r1, #8192	; 0x2000
   13566:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13568:	f005 fa9e 	bl	18aa8 <os_mqueue_put>
   1356c:	4601      	mov	r1, r0
   1356e:	901f      	str	r0, [sp, #124]	; 0x7c
   13570:	9101      	str	r1, [sp, #4]
   13572:	e011      	b.n	13598 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x186>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   13574:	9809      	ldr	r0, [sp, #36]	; 0x24
   13576:	f005 faf9 	bl	18b6c <os_mbuf_free_chain>
   1357a:	e7ff      	b.n	1357c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x16a>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   1357c:	f646 2084 	movw	r0, #27268	; 0x6a84
   13580:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13584:	f005 ff76 	bl	19474 <os_sem_release>
   13588:	e7ff      	b.n	1358a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x178>
   1358a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   1358e:	9014      	str	r0, [sp, #80]	; 0x50
   13590:	9814      	ldr	r0, [sp, #80]	; 0x50
   13592:	9011      	str	r0, [sp, #68]	; 0x44
   13594:	e7ff      	b.n	13596 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
   13596:	e7c4      	b.n	13522 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
    if rc != 0 {  //  If out of memory, quit.
   13598:	9801      	ldr	r0, [sp, #4]
   1359a:	2800      	cmp	r0, #0
   1359c:	d105      	bne.n	135aa <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x198>
   1359e:	e7ff      	b.n	135a0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x18e>
   135a0:	2000      	movs	r0, #0
    Ok(())
   135a2:	9011      	str	r0, [sp, #68]	; 0x44
   135a4:	2001      	movs	r0, #1
   135a6:	9011      	str	r0, [sp, #68]	; 0x44
}
   135a8:	e793      	b.n	134d2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   135aa:	9809      	ldr	r0, [sp, #36]	; 0x24
   135ac:	f005 fade 	bl	18b6c <os_mbuf_free_chain>
   135b0:	e7ff      	b.n	135b2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1a0>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   135b2:	f646 2084 	movw	r0, #27268	; 0x6a84
   135b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   135ba:	f005 ff5b 	bl	19474 <os_sem_release>
   135be:	e7ff      	b.n	135c0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ae>
   135c0:	f06f 000c 	mvn.w	r0, #12
        return Err(MynewtError::SYS_EUNKNOWN); 
   135c4:	9015      	str	r0, [sp, #84]	; 0x54
   135c6:	9815      	ldr	r0, [sp, #84]	; 0x54
   135c8:	9011      	str	r0, [sp, #68]	; 0x44
   135ca:	e7e4      	b.n	13596 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   135cc:	f24e 10e0 	movw	r0, #57824	; 0xe1e0
   135d0:	f2c0 0001 	movt	r0, #1
   135d4:	f24e 12c8 	movw	r2, #57800	; 0xe1c8
   135d8:	f2c0 0201 	movt	r2, #1
   135dc:	2121      	movs	r1, #33	; 0x21
   135de:	f002 f805 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   135e2:	defe      	udf	#254	; 0xfe
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   135e4:	f24e 1080 	movw	r0, #57728	; 0xe180
   135e8:	f2c0 0001 	movt	r0, #1
   135ec:	f24e 2204 	movw	r2, #57860	; 0xe204
   135f0:	f2c0 0201 	movt	r2, #1
   135f4:	211c      	movs	r1, #28
   135f6:	f001 fff9 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   135fa:	defe      	udf	#254	; 0xfe

000135fc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E>:

/// Callback for the event that is triggered when an SPI request is added to the queue.
extern "C" fn spi_event_callback(_event: *mut os::os_event) {    
   135fc:	b5b0      	push	{r4, r5, r7, lr}
   135fe:	b0c4      	sub	sp, #272	; 0x110
   13600:	9038      	str	r0, [sp, #224]	; 0xe0
   13602:	e7ff      	b.n	13604 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
    loop {  //  For each mbuf chain found...
        //  Get the next SPI request, stored as an mbuf chain.
        let om = unsafe { os::os_mqueue_get(&mut SPI_DATA_QUEUE) };
   13604:	f646 208c 	movw	r0, #27276	; 0x6a8c
   13608:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1360c:	f005 fa39 	bl	18a82 <os_mqueue_get>
   13610:	4601      	mov	r1, r0
   13612:	9039      	str	r0, [sp, #228]	; 0xe4
   13614:	911b      	str	r1, [sp, #108]	; 0x6c
   13616:	e7ff      	b.n	13618 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c>
        if om.is_null() { break; }
   13618:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1361a:	f000 fe57 	bl	142cc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   1361e:	901a      	str	r0, [sp, #104]	; 0x68
   13620:	e7ff      	b.n	13622 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26>
   13622:	981a      	ldr	r0, [sp, #104]	; 0x68
   13624:	07c1      	lsls	r1, r0, #31
   13626:	2900      	cmp	r1, #0
   13628:	d106      	bne.n	13638 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x3c>
   1362a:	e7ff      	b.n	1362c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x30>

        //  Send the mbuf chain.
        let mut m = om;
   1362c:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1362e:	901c      	str	r0, [sp, #112]	; 0x70
   13630:	2101      	movs	r1, #1
        let mut first_byte = true;
   13632:	f88d 1075 	strb.w	r1, [sp, #117]	; 0x75
        while !m.is_null() {  //  For each mbuf in the chain...
   13636:	e001      	b.n	1363c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>

        //  Release the throttle semaphore to allow next request to be queued.
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
        assert_eq!(rc, 0, "sem fail");    
    }
}
   13638:	b044      	add	sp, #272	; 0x110
   1363a:	bdb0      	pop	{r4, r5, r7, pc}
        while !m.is_null() {  //  For each mbuf in the chain...
   1363c:	981c      	ldr	r0, [sp, #112]	; 0x70
   1363e:	f000 fe45 	bl	142cc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   13642:	9019      	str	r0, [sp, #100]	; 0x64
   13644:	e7ff      	b.n	13646 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x4a>
   13646:	9819      	ldr	r0, [sp, #100]	; 0x64
   13648:	07c1      	lsls	r1, r0, #31
   1364a:	2900      	cmp	r1, #0
   1364c:	d004      	beq.n	13658 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x5c>
   1364e:	e7ff      	b.n	13650 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x54>
        unsafe { os::os_mbuf_free_chain(om) };
   13650:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13652:	f005 fa8b 	bl	18b6c <os_mbuf_free_chain>
   13656:	e0aa      	b.n	137ae <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1b2>
            let data = unsafe { (*m).om_data };  //  Fetch the data
   13658:	981c      	ldr	r0, [sp, #112]	; 0x70
   1365a:	6800      	ldr	r0, [r0, #0]
   1365c:	903a      	str	r0, [sp, #232]	; 0xe8
            let len = unsafe { (*m).om_len };    //  Fetch the length
   1365e:	991c      	ldr	r1, [sp, #112]	; 0x70
   13660:	88c9      	ldrh	r1, [r1, #6]
   13662:	460a      	mov	r2, r1
   13664:	f8ad 10ee 	strh.w	r1, [sp, #238]	; 0xee
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   13668:	f89d 1075 	ldrb.w	r1, [sp, #117]	; 0x75
   1366c:	07c9      	lsls	r1, r1, #31
   1366e:	2900      	cmp	r1, #0
   13670:	9018      	str	r0, [sp, #96]	; 0x60
   13672:	9217      	str	r2, [sp, #92]	; 0x5c
   13674:	d105      	bne.n	13682 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x86>
   13676:	e7ff      	b.n	13678 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x7c>
                    unsafe { core::mem::transmute(data) }, 
   13678:	9818      	ldr	r0, [sp, #96]	; 0x60
   1367a:	903e      	str	r0, [sp, #248]	; 0xf8
   1367c:	983e      	ldr	r0, [sp, #248]	; 0xf8
   1367e:	9016      	str	r0, [sp, #88]	; 0x58
   13680:	e07b      	b.n	1377a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17e>
   13682:	2000      	movs	r0, #0
                first_byte = false;
   13684:	f88d 0075 	strb.w	r0, [sp, #117]	; 0x75
                    unsafe { core::mem::transmute(data) }, 
   13688:	9818      	ldr	r0, [sp, #96]	; 0x60
   1368a:	903c      	str	r0, [sp, #240]	; 0xf0
   1368c:	983c      	ldr	r0, [sp, #240]	; 0xf0
   1368e:	9015      	str	r0, [sp, #84]	; 0x54
   13690:	e7ff      	b.n	13692 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x96>
   13692:	2001      	movs	r0, #1
                internal_spi_noblock_write(
   13694:	9915      	ldr	r1, [sp, #84]	; 0x54
   13696:	9014      	str	r0, [sp, #80]	; 0x50
   13698:	4608      	mov	r0, r1
   1369a:	9914      	ldr	r1, [sp, #80]	; 0x50
   1369c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1369e:	f000 f921 	bl	138e4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   136a2:	9013      	str	r0, [sp, #76]	; 0x4c
   136a4:	e7ff      	b.n	136a6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xaa>
   136a6:	f24e 2114 	movw	r1, #57876	; 0xe214
   136aa:	f2c0 0101 	movt	r1, #1
   136ae:	f24e 2320 	movw	r3, #57888	; 0xe220
   136b2:	f2c0 0301 	movt	r3, #1
   136b6:	220c      	movs	r2, #12
   136b8:	9813      	ldr	r0, [sp, #76]	; 0x4c
   136ba:	f7f5 fa1e 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   136be:	e7ff      	b.n	136c0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xc4>
                if  unsafe { *data } == 0x01 || //  SWRESET
   136c0:	9818      	ldr	r0, [sp, #96]	; 0x60
   136c2:	7801      	ldrb	r1, [r0, #0]
   136c4:	2901      	cmp	r1, #1
   136c6:	d013      	beq.n	136f0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   136c8:	e01a      	b.n	13700 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x104>
   136ca:	2001      	movs	r0, #1
   136cc:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   136d0:	e008      	b.n	136e4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
   136d2:	2000      	movs	r0, #0
   136d4:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   136d8:	e004      	b.n	136e4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
                    unsafe { *data } == 0x29 {  //  DISPON
   136da:	9818      	ldr	r0, [sp, #96]	; 0x60
   136dc:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   136de:	2929      	cmp	r1, #41	; 0x29
   136e0:	d0f3      	beq.n	136ca <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   136e2:	e7f6      	b.n	136d2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xd6>
   136e4:	f89d 0076 	ldrb.w	r0, [sp, #118]	; 0x76
   136e8:	07c0      	lsls	r0, r0, #31
   136ea:	2800      	cmp	r0, #0
   136ec:	d113      	bne.n	13716 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x11a>
   136ee:	e017      	b.n	13720 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   136f0:	2001      	movs	r0, #1
   136f2:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   136f6:	e008      	b.n	1370a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
   136f8:	2000      	movs	r0, #0
   136fa:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   136fe:	e004      	b.n	1370a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
                    unsafe { *data } == 0x11 || //  SLPOUT
   13700:	9818      	ldr	r0, [sp, #96]	; 0x60
   13702:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   13704:	2911      	cmp	r1, #17
   13706:	d0f3      	beq.n	136f0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   13708:	e7f6      	b.n	136f8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xfc>
   1370a:	f89d 0077 	ldrb.w	r0, [sp, #119]	; 0x77
   1370e:	07c0      	lsls	r0, r0, #31
   13710:	2800      	cmp	r0, #0
   13712:	d1da      	bne.n	136ca <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   13714:	e7e1      	b.n	136da <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xde>
   13716:	20c8      	movs	r0, #200	; 0xc8
                    delay_ms(200);
   13718:	f000 fb13 	bl	13d42 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>
   1371c:	e7ff      	b.n	1371e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x122>
                if  unsafe { *data } == 0x01 || //  SWRESET
   1371e:	e7ff      	b.n	13720 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   13720:	2101      	movs	r1, #1
                    unsafe { core::mem::transmute(data.add(1)) }, 
   13722:	9818      	ldr	r0, [sp, #96]	; 0x60
   13724:	f7fe f9da 	bl	11adc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   13728:	9012      	str	r0, [sp, #72]	; 0x48
   1372a:	e7ff      	b.n	1372c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x130>
   1372c:	9812      	ldr	r0, [sp, #72]	; 0x48
   1372e:	903d      	str	r0, [sp, #244]	; 0xf4
   13730:	983d      	ldr	r0, [sp, #244]	; 0xf4
   13732:	9011      	str	r0, [sp, #68]	; 0x44
   13734:	e7ff      	b.n	13736 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x13a>
   13736:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   1373a:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1373c:	fa10 f081 	uxtah	r0, r0, r1
   13740:	b282      	uxth	r2, r0
   13742:	4603      	mov	r3, r0
   13744:	4282      	cmp	r2, r0
   13746:	9310      	str	r3, [sp, #64]	; 0x40
   13748:	f040 80c0 	bne.w	138cc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2d0>
   1374c:	e7ff      	b.n	1374e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x152>
   1374e:	9810      	ldr	r0, [sp, #64]	; 0x40
   13750:	b281      	uxth	r1, r0
   13752:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   13754:	9811      	ldr	r0, [sp, #68]	; 0x44
   13756:	f000 f8c5 	bl	138e4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   1375a:	900f      	str	r0, [sp, #60]	; 0x3c
   1375c:	e7ff      	b.n	1375e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x162>
   1375e:	f24e 2114 	movw	r1, #57876	; 0xe214
   13762:	f2c0 0101 	movt	r1, #1
   13766:	f24e 2364 	movw	r3, #57956	; 0xe264
   1376a:	f2c0 0301 	movt	r3, #1
   1376e:	220c      	movs	r2, #12
   13770:	980f      	ldr	r0, [sp, #60]	; 0x3c
   13772:	f7f5 f9c2 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   13776:	e7ff      	b.n	13778 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17c>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   13778:	e015      	b.n	137a6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
                    len as i32,  //  Write all Data Bytes
   1377a:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1377c:	b281      	uxth	r1, r0
   1377e:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   13780:	9816      	ldr	r0, [sp, #88]	; 0x58
   13782:	f000 f8af 	bl	138e4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   13786:	900e      	str	r0, [sp, #56]	; 0x38
   13788:	e7ff      	b.n	1378a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x18e>
   1378a:	f24e 2114 	movw	r1, #57876	; 0xe214
   1378e:	f2c0 0101 	movt	r1, #1
   13792:	f24e 2374 	movw	r3, #57972	; 0xe274
   13796:	f2c0 0301 	movt	r3, #1
   1379a:	220c      	movs	r2, #12
   1379c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1379e:	f7f5 f9ac 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   137a2:	e7ff      	b.n	137a4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1a8>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   137a4:	e7ff      	b.n	137a6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
            m = unsafe { (*m).om_next.sle_next };  //  Fetch next mbuf in the chain.
   137a6:	981c      	ldr	r0, [sp, #112]	; 0x70
   137a8:	68c0      	ldr	r0, [r0, #12]
   137aa:	901c      	str	r0, [sp, #112]	; 0x70
        while !m.is_null() {  //  For each mbuf in the chain...
   137ac:	e746      	b.n	1363c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
   137ae:	f646 2084 	movw	r0, #27268	; 0x6a84
   137b2:	f2c2 0000 	movt	r0, #8192	; 0x2000
   137b6:	f005 fe5d 	bl	19474 <os_sem_release>
   137ba:	901e      	str	r0, [sp, #120]	; 0x78
   137bc:	e7ff      	b.n	137be <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c2>
        assert_eq!(rc, 0, "sem fail");    
   137be:	f64d 7088 	movw	r0, #57224	; 0xdf88
   137c2:	f2c0 0001 	movt	r0, #1
   137c6:	6800      	ldr	r0, [r0, #0]
   137c8:	a91e      	add	r1, sp, #120	; 0x78
   137ca:	911f      	str	r1, [sp, #124]	; 0x7c
   137cc:	9020      	str	r0, [sp, #128]	; 0x80
   137ce:	981f      	ldr	r0, [sp, #124]	; 0x7c
   137d0:	903f      	str	r0, [sp, #252]	; 0xfc
   137d2:	9920      	ldr	r1, [sp, #128]	; 0x80
   137d4:	9140      	str	r1, [sp, #256]	; 0x100
   137d6:	6802      	ldr	r2, [r0, #0]
   137d8:	680b      	ldr	r3, [r1, #0]
   137da:	429a      	cmp	r2, r3
   137dc:	900d      	str	r0, [sp, #52]	; 0x34
   137de:	910c      	str	r1, [sp, #48]	; 0x30
   137e0:	d101      	bne.n	137e6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1ea>
   137e2:	e7ff      	b.n	137e4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1e8>
    loop {  //  For each mbuf chain found...
   137e4:	e70e      	b.n	13604 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
        assert_eq!(rc, 0, "sem fail");    
   137e6:	f64d 70e0 	movw	r0, #57312	; 0xdfe0
   137ea:	f2c0 0001 	movt	r0, #1
   137ee:	6801      	ldr	r1, [r0, #0]
   137f0:	980d      	ldr	r0, [sp, #52]	; 0x34
   137f2:	9030      	str	r0, [sp, #192]	; 0xc0
   137f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   137f6:	9231      	str	r2, [sp, #196]	; 0xc4
   137f8:	f24e 03f8 	movw	r3, #57592	; 0xe0f8
   137fc:	f2c0 0301 	movt	r3, #1
   13800:	681b      	ldr	r3, [r3, #0]
   13802:	f24e 0c00 	movw	ip, #57344	; 0xe000
   13806:	f2c0 0c01 	movt	ip, #1
   1380a:	f8dc c000 	ldr.w	ip, [ip]
   1380e:	46ee      	mov	lr, sp
   13810:	2400      	movs	r4, #0
   13812:	f8ce 4000 	str.w	r4, [lr]
   13816:	a832      	add	r0, sp, #200	; 0xc8
   13818:	2201      	movs	r2, #1
   1381a:	910b      	str	r1, [sp, #44]	; 0x2c
   1381c:	4619      	mov	r1, r3
   1381e:	4663      	mov	r3, ip
   13820:	f7f5 f93c 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13824:	e7ff      	b.n	13826 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x22a>
   13826:	a830      	add	r0, sp, #192	; 0xc0
   13828:	902d      	str	r0, [sp, #180]	; 0xb4
   1382a:	a831      	add	r0, sp, #196	; 0xc4
   1382c:	902e      	str	r0, [sp, #184]	; 0xb8
   1382e:	a832      	add	r0, sp, #200	; 0xc8
   13830:	902f      	str	r0, [sp, #188]	; 0xbc
   13832:	982d      	ldr	r0, [sp, #180]	; 0xb4
   13834:	9041      	str	r0, [sp, #260]	; 0x104
   13836:	992e      	ldr	r1, [sp, #184]	; 0xb8
   13838:	9142      	str	r1, [sp, #264]	; 0x108
   1383a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   1383c:	9243      	str	r2, [sp, #268]	; 0x10c
   1383e:	f249 333f 	movw	r3, #37695	; 0x933f
   13842:	f2c0 0300 	movt	r3, #0
   13846:	910a      	str	r1, [sp, #40]	; 0x28
   13848:	4619      	mov	r1, r3
   1384a:	9209      	str	r2, [sp, #36]	; 0x24
   1384c:	f7f5 fdaf 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13850:	9008      	str	r0, [sp, #32]
   13852:	9107      	str	r1, [sp, #28]
   13854:	e7ff      	b.n	13856 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x25a>
   13856:	f249 313f 	movw	r1, #37695	; 0x933f
   1385a:	f2c0 0100 	movt	r1, #0
   1385e:	980a      	ldr	r0, [sp, #40]	; 0x28
   13860:	f7f5 fda5 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13864:	9006      	str	r0, [sp, #24]
   13866:	9105      	str	r1, [sp, #20]
   13868:	e7ff      	b.n	1386a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26e>
   1386a:	f645 31bb 	movw	r1, #23483	; 0x5bbb
   1386e:	f2c0 0101 	movt	r1, #1
   13872:	9809      	ldr	r0, [sp, #36]	; 0x24
   13874:	f7f5 fdb0 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13878:	9004      	str	r0, [sp, #16]
   1387a:	9103      	str	r1, [sp, #12]
   1387c:	e7ff      	b.n	1387e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x282>
   1387e:	9808      	ldr	r0, [sp, #32]
   13880:	9027      	str	r0, [sp, #156]	; 0x9c
   13882:	9907      	ldr	r1, [sp, #28]
   13884:	9128      	str	r1, [sp, #160]	; 0xa0
   13886:	9a06      	ldr	r2, [sp, #24]
   13888:	9229      	str	r2, [sp, #164]	; 0xa4
   1388a:	9b05      	ldr	r3, [sp, #20]
   1388c:	932a      	str	r3, [sp, #168]	; 0xa8
   1388e:	f8dd c010 	ldr.w	ip, [sp, #16]
   13892:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
   13896:	f8dd e00c 	ldr.w	lr, [sp, #12]
   1389a:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
   1389e:	466c      	mov	r4, sp
   138a0:	2503      	movs	r5, #3
   138a2:	6025      	str	r5, [r4, #0]
   138a4:	a821      	add	r0, sp, #132	; 0x84
   138a6:	ab27      	add	r3, sp, #156	; 0x9c
   138a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   138aa:	462a      	mov	r2, r5
   138ac:	f7f5 f8f6 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   138b0:	e7ff      	b.n	138b2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2b6>
   138b2:	f24e 2084 	movw	r0, #57988	; 0xe284
   138b6:	f2c0 0001 	movt	r0, #1
   138ba:	f001 fe90 	bl	155de <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   138be:	9002      	str	r0, [sp, #8]
   138c0:	e7ff      	b.n	138c2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2c6>
   138c2:	a821      	add	r0, sp, #132	; 0x84
   138c4:	9902      	ldr	r1, [sp, #8]
   138c6:	f001 fec7 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   138ca:	defe      	udf	#254	; 0xfe
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   138cc:	f24e 2040 	movw	r0, #57920	; 0xe240
   138d0:	f2c0 0001 	movt	r0, #1
   138d4:	f24e 2230 	movw	r2, #57904	; 0xe230
   138d8:	f2c0 0201 	movt	r2, #1
   138dc:	2121      	movs	r1, #33	; 0x21
   138de:	f001 fe85 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   138e2:	defe      	udf	#254	; 0xfe

000138e4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>:

/// Perform non-blocking SPI write in Mynewt OS.  Blocks until SPI write completes.
fn internal_spi_noblock_write(buf: &'static u8, len: i32, is_command: bool) -> MynewtResult<()> {
   138e4:	b5b0      	push	{r4, r5, r7, lr}
   138e6:	b0e8      	sub	sp, #416	; 0x1a0
   138e8:	4613      	mov	r3, r2
   138ea:	9058      	str	r0, [sp, #352]	; 0x160
   138ec:	9159      	str	r1, [sp, #356]	; 0x164
   138ee:	f88d 216b 	strb.w	r2, [sp, #363]	; 0x16b
    if len == 0 { return Ok(()); }
   138f2:	2900      	cmp	r1, #0
   138f4:	9121      	str	r1, [sp, #132]	; 0x84
   138f6:	9020      	str	r0, [sp, #128]	; 0x80
   138f8:	931f      	str	r3, [sp, #124]	; 0x7c
   138fa:	d004      	beq.n	13906 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x22>
   138fc:	e7ff      	b.n	138fe <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a>
    assert!(len > 0, "bad spi len");
   138fe:	9821      	ldr	r0, [sp, #132]	; 0x84
   13900:	2801      	cmp	r0, #1
   13902:	db0d      	blt.n	13920 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x3c>
   13904:	e007      	b.n	13916 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x32>
   13906:	2000      	movs	r0, #0
    if len == 0 { return Ok(()); }
   13908:	9022      	str	r0, [sp, #136]	; 0x88
   1390a:	2001      	movs	r0, #1
   1390c:	9022      	str	r0, [sp, #136]	; 0x88
   1390e:	e7ff      	b.n	13910 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
    }

    //  Set SS Pin to high to stop the transfer.
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
    Ok(())
}
   13910:	9822      	ldr	r0, [sp, #136]	; 0x88
   13912:	b068      	add	sp, #416	; 0x1a0
   13914:	bdb0      	pop	{r4, r5, r7, pc}
        if is_command { 0 }
   13916:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13918:	07c1      	lsls	r1, r0, #31
   1391a:	2900      	cmp	r1, #0
   1391c:	d10f      	bne.n	1393e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x5a>
   1391e:	e00b      	b.n	13938 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x54>
    assert!(len > 0, "bad spi len");
   13920:	f24e 2094 	movw	r0, #58004	; 0xe294
   13924:	f2c0 0001 	movt	r0, #1
   13928:	f24e 22a0 	movw	r2, #58016	; 0xe2a0
   1392c:	f2c0 0201 	movt	r2, #1
   13930:	210b      	movs	r1, #11
   13932:	f001 fe5b 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13936:	defe      	udf	#254	; 0xfe
   13938:	2001      	movs	r0, #1
        else { 1 }
   1393a:	9023      	str	r0, [sp, #140]	; 0x8c
        if is_command { 0 }
   1393c:	e002      	b.n	13944 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
   1393e:	2000      	movs	r0, #0
   13940:	9023      	str	r0, [sp, #140]	; 0x8c
   13942:	e7ff      	b.n	13944 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
    unsafe { hal::hal_gpio_write(
   13944:	9923      	ldr	r1, [sp, #140]	; 0x8c
   13946:	2012      	movs	r0, #18
   13948:	f003 fef6 	bl	17738 <hal_gpio_write>
   1394c:	e7ff      	b.n	1394e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x6a>
   1394e:	2019      	movs	r0, #25
   13950:	2100      	movs	r1, #0
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 0) };
   13952:	f003 fef1 	bl	17738 <hal_gpio_write>
   13956:	e7ff      	b.n	13958 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x74>
    if len == 1 {  //  If writing only 1 byte...
   13958:	9821      	ldr	r0, [sp, #132]	; 0x84
   1395a:	2801      	cmp	r0, #1
   1395c:	d005      	beq.n	1396a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x86>
   1395e:	e7ff      	b.n	13960 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x7c>
            core::mem::transmute(buf), //  TX Buffer
   13960:	9820      	ldr	r0, [sp, #128]	; 0x80
   13962:	9061      	str	r0, [sp, #388]	; 0x184
   13964:	9961      	ldr	r1, [sp, #388]	; 0x184
   13966:	911e      	str	r1, [sp, #120]	; 0x78
   13968:	e094      	b.n	13a94 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1b0>
            core::mem::transmute(buf), //  TX Buffer
   1396a:	9820      	ldr	r0, [sp, #128]	; 0x80
   1396c:	905b      	str	r0, [sp, #364]	; 0x16c
   1396e:	995b      	ldr	r1, [sp, #364]	; 0x16c
   13970:	911d      	str	r1, [sp, #116]	; 0x74
   13972:	e7ff      	b.n	13974 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x90>
   13974:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx(
   13976:	901c      	str	r0, [sp, #112]	; 0x70
   13978:	991d      	ldr	r1, [sp, #116]	; 0x74
   1397a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1397c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1397e:	f004 fb89 	bl	18094 <hal_spi_txrx>
   13982:	9024      	str	r0, [sp, #144]	; 0x90
   13984:	e7ff      	b.n	13986 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xa2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13986:	f64d 7088 	movw	r0, #57224	; 0xdf88
   1398a:	f2c0 0001 	movt	r0, #1
   1398e:	6800      	ldr	r0, [r0, #0]
   13990:	a924      	add	r1, sp, #144	; 0x90
   13992:	9125      	str	r1, [sp, #148]	; 0x94
   13994:	9026      	str	r0, [sp, #152]	; 0x98
   13996:	9825      	ldr	r0, [sp, #148]	; 0x94
   13998:	905c      	str	r0, [sp, #368]	; 0x170
   1399a:	9926      	ldr	r1, [sp, #152]	; 0x98
   1399c:	915d      	str	r1, [sp, #372]	; 0x174
   1399e:	6802      	ldr	r2, [r0, #0]
   139a0:	680b      	ldr	r3, [r1, #0]
   139a2:	429a      	cmp	r2, r3
   139a4:	901b      	str	r0, [sp, #108]	; 0x6c
   139a6:	911a      	str	r1, [sp, #104]	; 0x68
   139a8:	d101      	bne.n	139ae <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xca>
   139aa:	e7ff      	b.n	139ac <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xc8>
    if len == 1 {  //  If writing only 1 byte...
   139ac:	e11f      	b.n	13bee <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   139ae:	f64d 70e0 	movw	r0, #57312	; 0xdfe0
   139b2:	f2c0 0001 	movt	r0, #1
   139b6:	6801      	ldr	r1, [r0, #0]
   139b8:	981b      	ldr	r0, [sp, #108]	; 0x6c
   139ba:	9036      	str	r0, [sp, #216]	; 0xd8
   139bc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   139be:	9237      	str	r2, [sp, #220]	; 0xdc
   139c0:	f24e 23b8 	movw	r3, #58040	; 0xe2b8
   139c4:	f2c0 0301 	movt	r3, #1
   139c8:	681b      	ldr	r3, [r3, #0]
   139ca:	f24e 0c00 	movw	ip, #57344	; 0xe000
   139ce:	f2c0 0c01 	movt	ip, #1
   139d2:	f8dc c000 	ldr.w	ip, [ip]
   139d6:	46ee      	mov	lr, sp
   139d8:	2400      	movs	r4, #0
   139da:	f8ce 4000 	str.w	r4, [lr]
   139de:	a838      	add	r0, sp, #224	; 0xe0
   139e0:	2201      	movs	r2, #1
   139e2:	9119      	str	r1, [sp, #100]	; 0x64
   139e4:	4619      	mov	r1, r3
   139e6:	4663      	mov	r3, ip
   139e8:	f7f5 f858 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   139ec:	e7ff      	b.n	139ee <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x10a>
   139ee:	a836      	add	r0, sp, #216	; 0xd8
   139f0:	9033      	str	r0, [sp, #204]	; 0xcc
   139f2:	a837      	add	r0, sp, #220	; 0xdc
   139f4:	9034      	str	r0, [sp, #208]	; 0xd0
   139f6:	a838      	add	r0, sp, #224	; 0xe0
   139f8:	9035      	str	r0, [sp, #212]	; 0xd4
   139fa:	9833      	ldr	r0, [sp, #204]	; 0xcc
   139fc:	905e      	str	r0, [sp, #376]	; 0x178
   139fe:	9934      	ldr	r1, [sp, #208]	; 0xd0
   13a00:	915f      	str	r1, [sp, #380]	; 0x17c
   13a02:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   13a04:	9260      	str	r2, [sp, #384]	; 0x180
   13a06:	f249 23eb 	movw	r3, #37611	; 0x92eb
   13a0a:	f2c0 0300 	movt	r3, #0
   13a0e:	9118      	str	r1, [sp, #96]	; 0x60
   13a10:	4619      	mov	r1, r3
   13a12:	9217      	str	r2, [sp, #92]	; 0x5c
   13a14:	f7f5 fca1 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13a18:	9016      	str	r0, [sp, #88]	; 0x58
   13a1a:	9115      	str	r1, [sp, #84]	; 0x54
   13a1c:	e7ff      	b.n	13a1e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x13a>
   13a1e:	f249 21eb 	movw	r1, #37611	; 0x92eb
   13a22:	f2c0 0100 	movt	r1, #0
   13a26:	9818      	ldr	r0, [sp, #96]	; 0x60
   13a28:	f7f5 fc97 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13a2c:	9014      	str	r0, [sp, #80]	; 0x50
   13a2e:	9113      	str	r1, [sp, #76]	; 0x4c
   13a30:	e7ff      	b.n	13a32 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x14e>
   13a32:	f645 31bb 	movw	r1, #23483	; 0x5bbb
   13a36:	f2c0 0101 	movt	r1, #1
   13a3a:	9817      	ldr	r0, [sp, #92]	; 0x5c
   13a3c:	f7f5 fccc 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13a40:	9012      	str	r0, [sp, #72]	; 0x48
   13a42:	9111      	str	r1, [sp, #68]	; 0x44
   13a44:	e7ff      	b.n	13a46 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x162>
   13a46:	9816      	ldr	r0, [sp, #88]	; 0x58
   13a48:	902d      	str	r0, [sp, #180]	; 0xb4
   13a4a:	9915      	ldr	r1, [sp, #84]	; 0x54
   13a4c:	912e      	str	r1, [sp, #184]	; 0xb8
   13a4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13a50:	922f      	str	r2, [sp, #188]	; 0xbc
   13a52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13a54:	9330      	str	r3, [sp, #192]	; 0xc0
   13a56:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   13a5a:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
   13a5e:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
   13a62:	f8cd e0c8 	str.w	lr, [sp, #200]	; 0xc8
   13a66:	466c      	mov	r4, sp
   13a68:	2503      	movs	r5, #3
   13a6a:	6025      	str	r5, [r4, #0]
   13a6c:	a827      	add	r0, sp, #156	; 0x9c
   13a6e:	ab2d      	add	r3, sp, #180	; 0xb4
   13a70:	9919      	ldr	r1, [sp, #100]	; 0x64
   13a72:	462a      	mov	r2, r5
   13a74:	f7f5 f812 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13a78:	e7ff      	b.n	13a7a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x196>
   13a7a:	f24e 20bc 	movw	r0, #58044	; 0xe2bc
   13a7e:	f2c0 0001 	movt	r0, #1
   13a82:	f001 fdac 	bl	155de <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13a86:	9010      	str	r0, [sp, #64]	; 0x40
   13a88:	e7ff      	b.n	13a8a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a6>
   13a8a:	a827      	add	r0, sp, #156	; 0x9c
   13a8c:	9910      	ldr	r1, [sp, #64]	; 0x40
   13a8e:	f001 fde3 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13a92:	defe      	udf	#254	; 0xfe
   13a94:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx_noblock(
   13a96:	900f      	str	r0, [sp, #60]	; 0x3c
   13a98:	991e      	ldr	r1, [sp, #120]	; 0x78
   13a9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   13a9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   13a9e:	f004 fb4f 	bl	18140 <hal_spi_txrx_noblock>
   13aa2:	903e      	str	r0, [sp, #248]	; 0xf8
   13aa4:	e7ff      	b.n	13aa6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1c2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13aa6:	f64d 7088 	movw	r0, #57224	; 0xdf88
   13aaa:	f2c0 0001 	movt	r0, #1
   13aae:	6800      	ldr	r0, [r0, #0]
   13ab0:	a93e      	add	r1, sp, #248	; 0xf8
   13ab2:	913f      	str	r1, [sp, #252]	; 0xfc
   13ab4:	9040      	str	r0, [sp, #256]	; 0x100
   13ab6:	983f      	ldr	r0, [sp, #252]	; 0xfc
   13ab8:	9062      	str	r0, [sp, #392]	; 0x188
   13aba:	9940      	ldr	r1, [sp, #256]	; 0x100
   13abc:	9163      	str	r1, [sp, #396]	; 0x18c
   13abe:	6802      	ldr	r2, [r0, #0]
   13ac0:	680b      	ldr	r3, [r1, #0]
   13ac2:	429a      	cmp	r2, r3
   13ac4:	900e      	str	r0, [sp, #56]	; 0x38
   13ac6:	910d      	str	r1, [sp, #52]	; 0x34
   13ac8:	d10c      	bne.n	13ae4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x200>
   13aca:	e7ff      	b.n	13acc <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1e8>
   13acc:	f247 5030 	movw	r0, #30000	; 0x7530
        let timeout = 30_000;
   13ad0:	9067      	str	r0, [sp, #412]	; 0x19c
   13ad2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13ad6:	fba0 0101 	umull	r0, r1, r0, r1
   13ada:	2900      	cmp	r1, #0
   13adc:	900c      	str	r0, [sp, #48]	; 0x30
   13ade:	f040 8090 	bne.w	13c02 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x31e>
   13ae2:	e072      	b.n	13bca <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2e6>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13ae4:	f64d 70e0 	movw	r0, #57312	; 0xdfe0
   13ae8:	f2c0 0001 	movt	r0, #1
   13aec:	6801      	ldr	r1, [r0, #0]
   13aee:	980e      	ldr	r0, [sp, #56]	; 0x38
   13af0:	9050      	str	r0, [sp, #320]	; 0x140
   13af2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13af4:	9251      	str	r2, [sp, #324]	; 0x144
   13af6:	f24e 23b8 	movw	r3, #58040	; 0xe2b8
   13afa:	f2c0 0301 	movt	r3, #1
   13afe:	681b      	ldr	r3, [r3, #0]
   13b00:	f24e 0c00 	movw	ip, #57344	; 0xe000
   13b04:	f2c0 0c01 	movt	ip, #1
   13b08:	f8dc c000 	ldr.w	ip, [ip]
   13b0c:	46ee      	mov	lr, sp
   13b0e:	2400      	movs	r4, #0
   13b10:	f8ce 4000 	str.w	r4, [lr]
   13b14:	a852      	add	r0, sp, #328	; 0x148
   13b16:	2201      	movs	r2, #1
   13b18:	910b      	str	r1, [sp, #44]	; 0x2c
   13b1a:	4619      	mov	r1, r3
   13b1c:	4663      	mov	r3, ip
   13b1e:	f7f4 ffbd 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13b22:	e7ff      	b.n	13b24 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x240>
   13b24:	a850      	add	r0, sp, #320	; 0x140
   13b26:	904d      	str	r0, [sp, #308]	; 0x134
   13b28:	a851      	add	r0, sp, #324	; 0x144
   13b2a:	904e      	str	r0, [sp, #312]	; 0x138
   13b2c:	a852      	add	r0, sp, #328	; 0x148
   13b2e:	904f      	str	r0, [sp, #316]	; 0x13c
   13b30:	984d      	ldr	r0, [sp, #308]	; 0x134
   13b32:	9064      	str	r0, [sp, #400]	; 0x190
   13b34:	994e      	ldr	r1, [sp, #312]	; 0x138
   13b36:	9165      	str	r1, [sp, #404]	; 0x194
   13b38:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
   13b3a:	9266      	str	r2, [sp, #408]	; 0x198
   13b3c:	f249 23eb 	movw	r3, #37611	; 0x92eb
   13b40:	f2c0 0300 	movt	r3, #0
   13b44:	910a      	str	r1, [sp, #40]	; 0x28
   13b46:	4619      	mov	r1, r3
   13b48:	9209      	str	r2, [sp, #36]	; 0x24
   13b4a:	f7f5 fc06 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13b4e:	9008      	str	r0, [sp, #32]
   13b50:	9107      	str	r1, [sp, #28]
   13b52:	e7ff      	b.n	13b54 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x270>
   13b54:	f249 21eb 	movw	r1, #37611	; 0x92eb
   13b58:	f2c0 0100 	movt	r1, #0
   13b5c:	980a      	ldr	r0, [sp, #40]	; 0x28
   13b5e:	f7f5 fbfc 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13b62:	9006      	str	r0, [sp, #24]
   13b64:	9105      	str	r1, [sp, #20]
   13b66:	e7ff      	b.n	13b68 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x284>
   13b68:	f645 31bb 	movw	r1, #23483	; 0x5bbb
   13b6c:	f2c0 0101 	movt	r1, #1
   13b70:	9809      	ldr	r0, [sp, #36]	; 0x24
   13b72:	f7f5 fc31 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13b76:	9004      	str	r0, [sp, #16]
   13b78:	9103      	str	r1, [sp, #12]
   13b7a:	e7ff      	b.n	13b7c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x298>
   13b7c:	9808      	ldr	r0, [sp, #32]
   13b7e:	9047      	str	r0, [sp, #284]	; 0x11c
   13b80:	9907      	ldr	r1, [sp, #28]
   13b82:	9148      	str	r1, [sp, #288]	; 0x120
   13b84:	9a06      	ldr	r2, [sp, #24]
   13b86:	9249      	str	r2, [sp, #292]	; 0x124
   13b88:	9b05      	ldr	r3, [sp, #20]
   13b8a:	934a      	str	r3, [sp, #296]	; 0x128
   13b8c:	f8dd c010 	ldr.w	ip, [sp, #16]
   13b90:	f8cd c12c 	str.w	ip, [sp, #300]	; 0x12c
   13b94:	f8dd e00c 	ldr.w	lr, [sp, #12]
   13b98:	f8cd e130 	str.w	lr, [sp, #304]	; 0x130
   13b9c:	466c      	mov	r4, sp
   13b9e:	2503      	movs	r5, #3
   13ba0:	6025      	str	r5, [r4, #0]
   13ba2:	a841      	add	r0, sp, #260	; 0x104
   13ba4:	ab47      	add	r3, sp, #284	; 0x11c
   13ba6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13ba8:	462a      	mov	r2, r5
   13baa:	f7f4 ff77 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13bae:	e7ff      	b.n	13bb0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2cc>
   13bb0:	f24e 20cc 	movw	r0, #58060	; 0xe2cc
   13bb4:	f2c0 0001 	movt	r0, #1
   13bb8:	f001 fd11 	bl	155de <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13bbc:	9002      	str	r0, [sp, #8]
   13bbe:	e7ff      	b.n	13bc0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2dc>
   13bc0:	a841      	add	r0, sp, #260	; 0x104
   13bc2:	9902      	ldr	r1, [sp, #8]
   13bc4:	f001 fd48 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13bc8:	defe      	udf	#254	; 0xfe
   13bca:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   13bce:	f2c1 0062 	movt	r0, #4194	; 0x1062
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13bd2:	990c      	ldr	r1, [sp, #48]	; 0x30
   13bd4:	fba1 0200 	umull	r0, r2, r1, r0
   13bd8:	0991      	lsrs	r1, r2, #6
   13bda:	f646 227c 	movw	r2, #27260	; 0x6a7c
   13bde:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13be2:	9001      	str	r0, [sp, #4]
   13be4:	4610      	mov	r0, r2
   13be6:	f005 fc77 	bl	194d8 <os_sem_pend>
   13bea:	e7ff      	b.n	13bec <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x308>
    if len == 1 {  //  If writing only 1 byte...
   13bec:	e7ff      	b.n	13bee <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
   13bee:	2019      	movs	r0, #25
   13bf0:	2101      	movs	r1, #1
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
   13bf2:	f003 fda1 	bl	17738 <hal_gpio_write>
   13bf6:	e7ff      	b.n	13bf8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x314>
   13bf8:	2000      	movs	r0, #0
    Ok(())
   13bfa:	9022      	str	r0, [sp, #136]	; 0x88
   13bfc:	2001      	movs	r0, #1
   13bfe:	9022      	str	r0, [sp, #136]	; 0x88
}
   13c00:	e686      	b.n	13910 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13c02:	f24e 10e0 	movw	r0, #57824	; 0xe1e0
   13c06:	f2c0 0001 	movt	r0, #1
   13c0a:	f24e 22dc 	movw	r2, #58076	; 0xe2dc
   13c0e:	f2c0 0201 	movt	r2, #1
   13c12:	2121      	movs	r1, #33	; 0x21
   13c14:	f001 fcea 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13c18:	defe      	udf	#254	; 0xfe

00013c1a <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E>:

/// Called by interrupt handler after Non-blocking SPI transfer has completed
extern "C" fn spi_noblock_handler(_arg: Ptr, _len: i32) {
   13c1a:	b5b0      	push	{r4, r5, r7, lr}
   13c1c:	b0ae      	sub	sp, #184	; 0xb8
   13c1e:	9027      	str	r0, [sp, #156]	; 0x9c
   13c20:	9128      	str	r1, [sp, #160]	; 0xa0
    //  Signal to internal_spi_noblock_write() that SPI request has been completed.
    let rc = unsafe { os::os_sem_release(&mut SPI_SEM) };
   13c22:	f646 207c 	movw	r0, #27260	; 0x6a7c
   13c26:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13c2a:	f005 fc23 	bl	19474 <os_sem_release>
   13c2e:	900d      	str	r0, [sp, #52]	; 0x34
   13c30:	e7ff      	b.n	13c32 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x18>
    assert_eq!(rc, 0, "sem fail");
   13c32:	f64d 7088 	movw	r0, #57224	; 0xdf88
   13c36:	f2c0 0001 	movt	r0, #1
   13c3a:	6800      	ldr	r0, [r0, #0]
   13c3c:	a90d      	add	r1, sp, #52	; 0x34
   13c3e:	910e      	str	r1, [sp, #56]	; 0x38
   13c40:	900f      	str	r0, [sp, #60]	; 0x3c
   13c42:	980e      	ldr	r0, [sp, #56]	; 0x38
   13c44:	9029      	str	r0, [sp, #164]	; 0xa4
   13c46:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13c48:	912a      	str	r1, [sp, #168]	; 0xa8
   13c4a:	6802      	ldr	r2, [r0, #0]
   13c4c:	680b      	ldr	r3, [r1, #0]
   13c4e:	429a      	cmp	r2, r3
   13c50:	900c      	str	r0, [sp, #48]	; 0x30
   13c52:	910b      	str	r1, [sp, #44]	; 0x2c
   13c54:	d102      	bne.n	13c5c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x42>
   13c56:	e7ff      	b.n	13c58 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x3e>
}
   13c58:	b02e      	add	sp, #184	; 0xb8
   13c5a:	bdb0      	pop	{r4, r5, r7, pc}
    assert_eq!(rc, 0, "sem fail");
   13c5c:	f64d 70e0 	movw	r0, #57312	; 0xdfe0
   13c60:	f2c0 0001 	movt	r0, #1
   13c64:	6801      	ldr	r1, [r0, #0]
   13c66:	980c      	ldr	r0, [sp, #48]	; 0x30
   13c68:	901f      	str	r0, [sp, #124]	; 0x7c
   13c6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13c6c:	9220      	str	r2, [sp, #128]	; 0x80
   13c6e:	f24e 03f8 	movw	r3, #57592	; 0xe0f8
   13c72:	f2c0 0301 	movt	r3, #1
   13c76:	681b      	ldr	r3, [r3, #0]
   13c78:	f24e 0c00 	movw	ip, #57344	; 0xe000
   13c7c:	f2c0 0c01 	movt	ip, #1
   13c80:	f8dc c000 	ldr.w	ip, [ip]
   13c84:	46ee      	mov	lr, sp
   13c86:	2400      	movs	r4, #0
   13c88:	f8ce 4000 	str.w	r4, [lr]
   13c8c:	a821      	add	r0, sp, #132	; 0x84
   13c8e:	2201      	movs	r2, #1
   13c90:	910a      	str	r1, [sp, #40]	; 0x28
   13c92:	4619      	mov	r1, r3
   13c94:	4663      	mov	r3, ip
   13c96:	f7f4 ff01 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13c9a:	e7ff      	b.n	13c9c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x82>
   13c9c:	a81f      	add	r0, sp, #124	; 0x7c
   13c9e:	901c      	str	r0, [sp, #112]	; 0x70
   13ca0:	a820      	add	r0, sp, #128	; 0x80
   13ca2:	901d      	str	r0, [sp, #116]	; 0x74
   13ca4:	a821      	add	r0, sp, #132	; 0x84
   13ca6:	901e      	str	r0, [sp, #120]	; 0x78
   13ca8:	981c      	ldr	r0, [sp, #112]	; 0x70
   13caa:	902b      	str	r0, [sp, #172]	; 0xac
   13cac:	991d      	ldr	r1, [sp, #116]	; 0x74
   13cae:	912c      	str	r1, [sp, #176]	; 0xb0
   13cb0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13cb2:	922d      	str	r2, [sp, #180]	; 0xb4
   13cb4:	f249 333f 	movw	r3, #37695	; 0x933f
   13cb8:	f2c0 0300 	movt	r3, #0
   13cbc:	9109      	str	r1, [sp, #36]	; 0x24
   13cbe:	4619      	mov	r1, r3
   13cc0:	9208      	str	r2, [sp, #32]
   13cc2:	f7f5 fb74 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13cc6:	9007      	str	r0, [sp, #28]
   13cc8:	9106      	str	r1, [sp, #24]
   13cca:	e7ff      	b.n	13ccc <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xb2>
   13ccc:	f249 313f 	movw	r1, #37695	; 0x933f
   13cd0:	f2c0 0100 	movt	r1, #0
   13cd4:	9809      	ldr	r0, [sp, #36]	; 0x24
   13cd6:	f7f5 fb6a 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13cda:	9005      	str	r0, [sp, #20]
   13cdc:	9104      	str	r1, [sp, #16]
   13cde:	e7ff      	b.n	13ce0 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xc6>
   13ce0:	f645 31bb 	movw	r1, #23483	; 0x5bbb
   13ce4:	f2c0 0101 	movt	r1, #1
   13ce8:	9808      	ldr	r0, [sp, #32]
   13cea:	f7f5 fb75 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13cee:	9003      	str	r0, [sp, #12]
   13cf0:	9102      	str	r1, [sp, #8]
   13cf2:	e7ff      	b.n	13cf4 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xda>
   13cf4:	9807      	ldr	r0, [sp, #28]
   13cf6:	9016      	str	r0, [sp, #88]	; 0x58
   13cf8:	9906      	ldr	r1, [sp, #24]
   13cfa:	9117      	str	r1, [sp, #92]	; 0x5c
   13cfc:	9a05      	ldr	r2, [sp, #20]
   13cfe:	9218      	str	r2, [sp, #96]	; 0x60
   13d00:	9b04      	ldr	r3, [sp, #16]
   13d02:	9319      	str	r3, [sp, #100]	; 0x64
   13d04:	f8dd c00c 	ldr.w	ip, [sp, #12]
   13d08:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
   13d0c:	f8dd e008 	ldr.w	lr, [sp, #8]
   13d10:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
   13d14:	466c      	mov	r4, sp
   13d16:	2503      	movs	r5, #3
   13d18:	6025      	str	r5, [r4, #0]
   13d1a:	a810      	add	r0, sp, #64	; 0x40
   13d1c:	ab16      	add	r3, sp, #88	; 0x58
   13d1e:	990a      	ldr	r1, [sp, #40]	; 0x28
   13d20:	462a      	mov	r2, r5
   13d22:	f7f4 febb 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13d26:	e7ff      	b.n	13d28 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x10e>
   13d28:	f24e 20ec 	movw	r0, #58092	; 0xe2ec
   13d2c:	f2c0 0001 	movt	r0, #1
   13d30:	f001 fc55 	bl	155de <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13d34:	9001      	str	r0, [sp, #4]
   13d36:	e7ff      	b.n	13d38 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x11e>
   13d38:	a810      	add	r0, sp, #64	; 0x40
   13d3a:	9901      	ldr	r1, [sp, #4]
   13d3c:	f001 fc8c 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13d40:	defe      	udf	#254	; 0xfe

00013d42 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>:

/// Sleep for the specified number of milliseconds
fn delay_ms(ms: u8) {
   13d42:	b580      	push	{r7, lr}
   13d44:	b084      	sub	sp, #16
   13d46:	4601      	mov	r1, r0
   13d48:	f88d 000b 	strb.w	r0, [sp, #11]
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   13d4c:	b2c0      	uxtb	r0, r0
   13d4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13d52:	fba0 0202 	umull	r0, r2, r0, r2
   13d56:	2a00      	cmp	r2, #0
   13d58:	9001      	str	r0, [sp, #4]
   13d5a:	d110      	bne.n	13d7e <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x3c>
   13d5c:	e7ff      	b.n	13d5e <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x1c>
   13d5e:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   13d62:	f2c1 0062 	movt	r0, #4194	; 0x1062
   13d66:	9901      	ldr	r1, [sp, #4]
   13d68:	fba1 0200 	umull	r0, r2, r1, r0
   13d6c:	0992      	lsrs	r2, r2, #6
   13d6e:	9203      	str	r2, [sp, #12]
    unsafe { os::os_time_delay(delay_ticks) };
   13d70:	9000      	str	r0, [sp, #0]
   13d72:	4610      	mov	r0, r2
   13d74:	f005 fcfe 	bl	19774 <os_time_delay>
   13d78:	e7ff      	b.n	13d7a <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x38>
}
   13d7a:	b004      	add	sp, #16
   13d7c:	bd80      	pop	{r7, pc}
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   13d7e:	f24e 10e0 	movw	r0, #57824	; 0xe1e0
   13d82:	f2c0 0001 	movt	r0, #1
   13d86:	f24e 22fc 	movw	r2, #58108	; 0xe2fc
   13d8a:	f2c0 0201 	movt	r2, #1
   13d8e:	2121      	movs	r1, #33	; 0x21
   13d90:	f001 fc2c 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13d94:	defe      	udf	#254	; 0xfe

00013d96 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>:
};

/// Rust Embedded HAL interface for Mynewt SPI
impl SPI {
    /// Create a new SPI port
    pub fn new() -> Self {
   13d96:	b082      	sub	sp, #8
   13d98:	2000      	movs	r0, #0
        SPI {
   13d9a:	9000      	str	r0, [sp, #0]
   13d9c:	9001      	str	r0, [sp, #4]
            spi_num: 0,
            cs_pin:  0,
        }
    }
   13d9e:	9800      	ldr	r0, [sp, #0]
   13da0:	9901      	ldr	r1, [sp, #4]
   13da2:	b002      	add	sp, #8
   13da4:	4770      	bx	lr

00013da6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>:

    /// Initiaise the SPI port
    pub fn init(&mut self, spi_num: i32, cs_pin: i32, spi_settings: *mut hal::hal_spi_settings) 
   13da6:	b5b0      	push	{r4, r5, r7, lr}
   13da8:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
   13dac:	9077      	str	r0, [sp, #476]	; 0x1dc
   13dae:	9178      	str	r1, [sp, #480]	; 0x1e0
   13db0:	9279      	str	r2, [sp, #484]	; 0x1e4
   13db2:	937a      	str	r3, [sp, #488]	; 0x1e8
        -> MynewtResult<()> {
        let rc = unsafe { hal::hal_spi_config(spi_num, spi_settings) };
   13db4:	9028      	str	r0, [sp, #160]	; 0xa0
   13db6:	4608      	mov	r0, r1
   13db8:	9127      	str	r1, [sp, #156]	; 0x9c
   13dba:	4619      	mov	r1, r3
   13dbc:	9226      	str	r2, [sp, #152]	; 0x98
   13dbe:	f004 f8ad 	bl	17f1c <hal_spi_config>
   13dc2:	9029      	str	r0, [sp, #164]	; 0xa4
   13dc4:	e7ff      	b.n	13dc6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x20>
        assert_eq!(rc, 0, "spi config fail");
   13dc6:	f24e 300c 	movw	r0, #58124	; 0xe30c
   13dca:	f2c0 0001 	movt	r0, #1
   13dce:	6800      	ldr	r0, [r0, #0]
   13dd0:	a929      	add	r1, sp, #164	; 0xa4
   13dd2:	912a      	str	r1, [sp, #168]	; 0xa8
   13dd4:	902b      	str	r0, [sp, #172]	; 0xac
   13dd6:	982a      	ldr	r0, [sp, #168]	; 0xa8
   13dd8:	907b      	str	r0, [sp, #492]	; 0x1ec
   13dda:	992b      	ldr	r1, [sp, #172]	; 0xac
   13ddc:	917c      	str	r1, [sp, #496]	; 0x1f0
   13dde:	6802      	ldr	r2, [r0, #0]
   13de0:	680b      	ldr	r3, [r1, #0]
   13de2:	429a      	cmp	r2, r3
   13de4:	9025      	str	r0, [sp, #148]	; 0x94
   13de6:	9124      	str	r1, [sp, #144]	; 0x90
   13de8:	d105      	bne.n	13df6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x50>
   13dea:	e7ff      	b.n	13dec <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x46>

        let rc = unsafe { hal::hal_spi_enable(spi_num) };
   13dec:	9827      	ldr	r0, [sp, #156]	; 0x9c
   13dee:	f004 f8b1 	bl	17f54 <hal_spi_enable>
   13df2:	9043      	str	r0, [sp, #268]	; 0x10c
   13df4:	e072      	b.n	13edc <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x136>
        assert_eq!(rc, 0, "spi config fail");
   13df6:	f24e 3064 	movw	r0, #58212	; 0xe364
   13dfa:	f2c0 0001 	movt	r0, #1
   13dfe:	6801      	ldr	r1, [r0, #0]
   13e00:	9825      	ldr	r0, [sp, #148]	; 0x94
   13e02:	903b      	str	r0, [sp, #236]	; 0xec
   13e04:	9a24      	ldr	r2, [sp, #144]	; 0x90
   13e06:	923c      	str	r2, [sp, #240]	; 0xf0
   13e08:	f24e 3380 	movw	r3, #58240	; 0xe380
   13e0c:	f2c0 0301 	movt	r3, #1
   13e10:	681b      	ldr	r3, [r3, #0]
   13e12:	f24e 3c84 	movw	ip, #58244	; 0xe384
   13e16:	f2c0 0c01 	movt	ip, #1
   13e1a:	f8dc c000 	ldr.w	ip, [ip]
   13e1e:	46ee      	mov	lr, sp
   13e20:	2400      	movs	r4, #0
   13e22:	f8ce 4000 	str.w	r4, [lr]
   13e26:	a83d      	add	r0, sp, #244	; 0xf4
   13e28:	2201      	movs	r2, #1
   13e2a:	9123      	str	r1, [sp, #140]	; 0x8c
   13e2c:	4619      	mov	r1, r3
   13e2e:	4663      	mov	r3, ip
   13e30:	f7f4 fe34 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13e34:	e7ff      	b.n	13e36 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x90>
   13e36:	a83b      	add	r0, sp, #236	; 0xec
   13e38:	9038      	str	r0, [sp, #224]	; 0xe0
   13e3a:	a83c      	add	r0, sp, #240	; 0xf0
   13e3c:	9039      	str	r0, [sp, #228]	; 0xe4
   13e3e:	a83d      	add	r0, sp, #244	; 0xf4
   13e40:	903a      	str	r0, [sp, #232]	; 0xe8
   13e42:	9838      	ldr	r0, [sp, #224]	; 0xe0
   13e44:	907d      	str	r0, [sp, #500]	; 0x1f4
   13e46:	9939      	ldr	r1, [sp, #228]	; 0xe4
   13e48:	917e      	str	r1, [sp, #504]	; 0x1f8
   13e4a:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
   13e4c:	927f      	str	r2, [sp, #508]	; 0x1fc
   13e4e:	f249 23eb 	movw	r3, #37611	; 0x92eb
   13e52:	f2c0 0300 	movt	r3, #0
   13e56:	9122      	str	r1, [sp, #136]	; 0x88
   13e58:	4619      	mov	r1, r3
   13e5a:	9221      	str	r2, [sp, #132]	; 0x84
   13e5c:	f7f5 fa7d 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13e60:	9020      	str	r0, [sp, #128]	; 0x80
   13e62:	911f      	str	r1, [sp, #124]	; 0x7c
   13e64:	e7ff      	b.n	13e66 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xc0>
   13e66:	f249 21eb 	movw	r1, #37611	; 0x92eb
   13e6a:	f2c0 0100 	movt	r1, #0
   13e6e:	9822      	ldr	r0, [sp, #136]	; 0x88
   13e70:	f7f5 fa73 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13e74:	901e      	str	r0, [sp, #120]	; 0x78
   13e76:	911d      	str	r1, [sp, #116]	; 0x74
   13e78:	e7ff      	b.n	13e7a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xd4>
   13e7a:	f645 31bb 	movw	r1, #23483	; 0x5bbb
   13e7e:	f2c0 0101 	movt	r1, #1
   13e82:	9821      	ldr	r0, [sp, #132]	; 0x84
   13e84:	f7f5 faa8 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13e88:	901c      	str	r0, [sp, #112]	; 0x70
   13e8a:	911b      	str	r1, [sp, #108]	; 0x6c
   13e8c:	e7ff      	b.n	13e8e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xe8>
   13e8e:	9820      	ldr	r0, [sp, #128]	; 0x80
   13e90:	9032      	str	r0, [sp, #200]	; 0xc8
   13e92:	991f      	ldr	r1, [sp, #124]	; 0x7c
   13e94:	9133      	str	r1, [sp, #204]	; 0xcc
   13e96:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13e98:	9234      	str	r2, [sp, #208]	; 0xd0
   13e9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   13e9c:	9335      	str	r3, [sp, #212]	; 0xd4
   13e9e:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
   13ea2:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
   13ea6:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
   13eaa:	f8cd e0dc 	str.w	lr, [sp, #220]	; 0xdc
   13eae:	466c      	mov	r4, sp
   13eb0:	2503      	movs	r5, #3
   13eb2:	6025      	str	r5, [r4, #0]
   13eb4:	a82c      	add	r0, sp, #176	; 0xb0
   13eb6:	ab32      	add	r3, sp, #200	; 0xc8
   13eb8:	9923      	ldr	r1, [sp, #140]	; 0x8c
   13eba:	462a      	mov	r2, r5
   13ebc:	f7f4 fdee 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13ec0:	e7ff      	b.n	13ec2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x11c>
   13ec2:	f24e 30a0 	movw	r0, #58272	; 0xe3a0
   13ec6:	f2c0 0001 	movt	r0, #1
   13eca:	f001 fb88 	bl	155de <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13ece:	901a      	str	r0, [sp, #104]	; 0x68
   13ed0:	e7ff      	b.n	13ed2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x12c>
   13ed2:	a82c      	add	r0, sp, #176	; 0xb0
   13ed4:	991a      	ldr	r1, [sp, #104]	; 0x68
   13ed6:	f001 fbbf 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13eda:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi enable fail");
   13edc:	f24e 300c 	movw	r0, #58124	; 0xe30c
   13ee0:	f2c0 0001 	movt	r0, #1
   13ee4:	6800      	ldr	r0, [r0, #0]
   13ee6:	a943      	add	r1, sp, #268	; 0x10c
   13ee8:	9144      	str	r1, [sp, #272]	; 0x110
   13eea:	9045      	str	r0, [sp, #276]	; 0x114
   13eec:	9844      	ldr	r0, [sp, #272]	; 0x110
   13eee:	9080      	str	r0, [sp, #512]	; 0x200
   13ef0:	9945      	ldr	r1, [sp, #276]	; 0x114
   13ef2:	9181      	str	r1, [sp, #516]	; 0x204
   13ef4:	6802      	ldr	r2, [r0, #0]
   13ef6:	680b      	ldr	r3, [r1, #0]
   13ef8:	429a      	cmp	r2, r3
   13efa:	9019      	str	r0, [sp, #100]	; 0x64
   13efc:	9118      	str	r1, [sp, #96]	; 0x60
   13efe:	d106      	bne.n	13f0e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x168>
   13f00:	e7ff      	b.n	13f02 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x15c>
   13f02:	2101      	movs	r1, #1

        let rc = unsafe { hal::hal_gpio_init_out(cs_pin, 1) };
   13f04:	9826      	ldr	r0, [sp, #152]	; 0x98
   13f06:	f003 fbfb 	bl	17700 <hal_gpio_init_out>
   13f0a:	905d      	str	r0, [sp, #372]	; 0x174
   13f0c:	e072      	b.n	13ff4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x24e>
        assert_eq!(rc, 0, "spi enable fail");
   13f0e:	f24e 3064 	movw	r0, #58212	; 0xe364
   13f12:	f2c0 0001 	movt	r0, #1
   13f16:	6801      	ldr	r1, [r0, #0]
   13f18:	9819      	ldr	r0, [sp, #100]	; 0x64
   13f1a:	9055      	str	r0, [sp, #340]	; 0x154
   13f1c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13f1e:	9256      	str	r2, [sp, #344]	; 0x158
   13f20:	f24e 33c8 	movw	r3, #58312	; 0xe3c8
   13f24:	f2c0 0301 	movt	r3, #1
   13f28:	681b      	ldr	r3, [r3, #0]
   13f2a:	f24e 3c84 	movw	ip, #58244	; 0xe384
   13f2e:	f2c0 0c01 	movt	ip, #1
   13f32:	f8dc c000 	ldr.w	ip, [ip]
   13f36:	46ee      	mov	lr, sp
   13f38:	2400      	movs	r4, #0
   13f3a:	f8ce 4000 	str.w	r4, [lr]
   13f3e:	a857      	add	r0, sp, #348	; 0x15c
   13f40:	2201      	movs	r2, #1
   13f42:	9117      	str	r1, [sp, #92]	; 0x5c
   13f44:	4619      	mov	r1, r3
   13f46:	4663      	mov	r3, ip
   13f48:	f7f4 fda8 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13f4c:	e7ff      	b.n	13f4e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1a8>
   13f4e:	a855      	add	r0, sp, #340	; 0x154
   13f50:	9052      	str	r0, [sp, #328]	; 0x148
   13f52:	a856      	add	r0, sp, #344	; 0x158
   13f54:	9053      	str	r0, [sp, #332]	; 0x14c
   13f56:	a857      	add	r0, sp, #348	; 0x15c
   13f58:	9054      	str	r0, [sp, #336]	; 0x150
   13f5a:	9852      	ldr	r0, [sp, #328]	; 0x148
   13f5c:	9082      	str	r0, [sp, #520]	; 0x208
   13f5e:	9953      	ldr	r1, [sp, #332]	; 0x14c
   13f60:	9183      	str	r1, [sp, #524]	; 0x20c
   13f62:	9a54      	ldr	r2, [sp, #336]	; 0x150
   13f64:	9284      	str	r2, [sp, #528]	; 0x210
   13f66:	f249 23eb 	movw	r3, #37611	; 0x92eb
   13f6a:	f2c0 0300 	movt	r3, #0
   13f6e:	9116      	str	r1, [sp, #88]	; 0x58
   13f70:	4619      	mov	r1, r3
   13f72:	9215      	str	r2, [sp, #84]	; 0x54
   13f74:	f7f5 f9f1 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13f78:	9014      	str	r0, [sp, #80]	; 0x50
   13f7a:	9113      	str	r1, [sp, #76]	; 0x4c
   13f7c:	e7ff      	b.n	13f7e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1d8>
   13f7e:	f249 21eb 	movw	r1, #37611	; 0x92eb
   13f82:	f2c0 0100 	movt	r1, #0
   13f86:	9816      	ldr	r0, [sp, #88]	; 0x58
   13f88:	f7f5 f9e7 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13f8c:	9012      	str	r0, [sp, #72]	; 0x48
   13f8e:	9111      	str	r1, [sp, #68]	; 0x44
   13f90:	e7ff      	b.n	13f92 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1ec>
   13f92:	f645 31bb 	movw	r1, #23483	; 0x5bbb
   13f96:	f2c0 0101 	movt	r1, #1
   13f9a:	9815      	ldr	r0, [sp, #84]	; 0x54
   13f9c:	f7f5 fa1c 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13fa0:	9010      	str	r0, [sp, #64]	; 0x40
   13fa2:	910f      	str	r1, [sp, #60]	; 0x3c
   13fa4:	e7ff      	b.n	13fa6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x200>
   13fa6:	9814      	ldr	r0, [sp, #80]	; 0x50
   13fa8:	904c      	str	r0, [sp, #304]	; 0x130
   13faa:	9913      	ldr	r1, [sp, #76]	; 0x4c
   13fac:	914d      	str	r1, [sp, #308]	; 0x134
   13fae:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13fb0:	924e      	str	r2, [sp, #312]	; 0x138
   13fb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13fb4:	934f      	str	r3, [sp, #316]	; 0x13c
   13fb6:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   13fba:	f8cd c140 	str.w	ip, [sp, #320]	; 0x140
   13fbe:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   13fc2:	f8cd e144 	str.w	lr, [sp, #324]	; 0x144
   13fc6:	466c      	mov	r4, sp
   13fc8:	2503      	movs	r5, #3
   13fca:	6025      	str	r5, [r4, #0]
   13fcc:	a846      	add	r0, sp, #280	; 0x118
   13fce:	ab4c      	add	r3, sp, #304	; 0x130
   13fd0:	9917      	ldr	r1, [sp, #92]	; 0x5c
   13fd2:	462a      	mov	r2, r5
   13fd4:	f7f4 fd62 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13fd8:	e7ff      	b.n	13fda <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x234>
   13fda:	f24e 30cc 	movw	r0, #58316	; 0xe3cc
   13fde:	f2c0 0001 	movt	r0, #1
   13fe2:	f001 fafc 	bl	155de <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13fe6:	900e      	str	r0, [sp, #56]	; 0x38
   13fe8:	e7ff      	b.n	13fea <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x244>
   13fea:	a846      	add	r0, sp, #280	; 0x118
   13fec:	990e      	ldr	r1, [sp, #56]	; 0x38
   13fee:	f001 fb33 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13ff2:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi init fail");
   13ff4:	f24e 300c 	movw	r0, #58124	; 0xe30c
   13ff8:	f2c0 0001 	movt	r0, #1
   13ffc:	6800      	ldr	r0, [r0, #0]
   13ffe:	a95d      	add	r1, sp, #372	; 0x174
   14000:	915e      	str	r1, [sp, #376]	; 0x178
   14002:	905f      	str	r0, [sp, #380]	; 0x17c
   14004:	985e      	ldr	r0, [sp, #376]	; 0x178
   14006:	9085      	str	r0, [sp, #532]	; 0x214
   14008:	995f      	ldr	r1, [sp, #380]	; 0x17c
   1400a:	9186      	str	r1, [sp, #536]	; 0x218
   1400c:	6802      	ldr	r2, [r0, #0]
   1400e:	680b      	ldr	r3, [r1, #0]
   14010:	429a      	cmp	r2, r3
   14012:	900d      	str	r0, [sp, #52]	; 0x34
   14014:	910c      	str	r1, [sp, #48]	; 0x30
   14016:	d109      	bne.n	1402c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x286>
   14018:	e7ff      	b.n	1401a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x274>
        self.spi_num = spi_num;
   1401a:	9827      	ldr	r0, [sp, #156]	; 0x9c
   1401c:	9928      	ldr	r1, [sp, #160]	; 0xa0
   1401e:	6008      	str	r0, [r1, #0]
        self.cs_pin  = cs_pin;
   14020:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14022:	604a      	str	r2, [r1, #4]
   14024:	2001      	movs	r0, #1
        Ok(())
    }
   14026:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
   1402a:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "spi init fail");
   1402c:	f24e 3064 	movw	r0, #58212	; 0xe364
   14030:	f2c0 0001 	movt	r0, #1
   14034:	6801      	ldr	r1, [r0, #0]
   14036:	980d      	ldr	r0, [sp, #52]	; 0x34
   14038:	906f      	str	r0, [sp, #444]	; 0x1bc
   1403a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1403c:	9270      	str	r2, [sp, #448]	; 0x1c0
   1403e:	f24e 33f4 	movw	r3, #58356	; 0xe3f4
   14042:	f2c0 0301 	movt	r3, #1
   14046:	681b      	ldr	r3, [r3, #0]
   14048:	f24e 3c84 	movw	ip, #58244	; 0xe384
   1404c:	f2c0 0c01 	movt	ip, #1
   14050:	f8dc c000 	ldr.w	ip, [ip]
   14054:	46ee      	mov	lr, sp
   14056:	2400      	movs	r4, #0
   14058:	f8ce 4000 	str.w	r4, [lr]
   1405c:	a871      	add	r0, sp, #452	; 0x1c4
   1405e:	2201      	movs	r2, #1
   14060:	910b      	str	r1, [sp, #44]	; 0x2c
   14062:	4619      	mov	r1, r3
   14064:	4663      	mov	r3, ip
   14066:	f7f4 fd19 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1406a:	e7ff      	b.n	1406c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2c6>
   1406c:	a86f      	add	r0, sp, #444	; 0x1bc
   1406e:	906c      	str	r0, [sp, #432]	; 0x1b0
   14070:	a870      	add	r0, sp, #448	; 0x1c0
   14072:	906d      	str	r0, [sp, #436]	; 0x1b4
   14074:	a871      	add	r0, sp, #452	; 0x1c4
   14076:	906e      	str	r0, [sp, #440]	; 0x1b8
   14078:	986c      	ldr	r0, [sp, #432]	; 0x1b0
   1407a:	9087      	str	r0, [sp, #540]	; 0x21c
   1407c:	996d      	ldr	r1, [sp, #436]	; 0x1b4
   1407e:	9188      	str	r1, [sp, #544]	; 0x220
   14080:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
   14082:	9289      	str	r2, [sp, #548]	; 0x224
   14084:	f249 23eb 	movw	r3, #37611	; 0x92eb
   14088:	f2c0 0300 	movt	r3, #0
   1408c:	910a      	str	r1, [sp, #40]	; 0x28
   1408e:	4619      	mov	r1, r3
   14090:	9209      	str	r2, [sp, #36]	; 0x24
   14092:	f7f5 f962 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14096:	9008      	str	r0, [sp, #32]
   14098:	9107      	str	r1, [sp, #28]
   1409a:	e7ff      	b.n	1409c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2f6>
   1409c:	f249 21eb 	movw	r1, #37611	; 0x92eb
   140a0:	f2c0 0100 	movt	r1, #0
   140a4:	980a      	ldr	r0, [sp, #40]	; 0x28
   140a6:	f7f5 f958 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   140aa:	9006      	str	r0, [sp, #24]
   140ac:	9105      	str	r1, [sp, #20]
   140ae:	e7ff      	b.n	140b0 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x30a>
   140b0:	f645 31bb 	movw	r1, #23483	; 0x5bbb
   140b4:	f2c0 0101 	movt	r1, #1
   140b8:	9809      	ldr	r0, [sp, #36]	; 0x24
   140ba:	f7f5 f98d 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   140be:	9004      	str	r0, [sp, #16]
   140c0:	9103      	str	r1, [sp, #12]
   140c2:	e7ff      	b.n	140c4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x31e>
   140c4:	9808      	ldr	r0, [sp, #32]
   140c6:	9066      	str	r0, [sp, #408]	; 0x198
   140c8:	9907      	ldr	r1, [sp, #28]
   140ca:	9167      	str	r1, [sp, #412]	; 0x19c
   140cc:	9a06      	ldr	r2, [sp, #24]
   140ce:	9268      	str	r2, [sp, #416]	; 0x1a0
   140d0:	9b05      	ldr	r3, [sp, #20]
   140d2:	9369      	str	r3, [sp, #420]	; 0x1a4
   140d4:	f8dd c010 	ldr.w	ip, [sp, #16]
   140d8:	f8cd c1a8 	str.w	ip, [sp, #424]	; 0x1a8
   140dc:	f8dd e00c 	ldr.w	lr, [sp, #12]
   140e0:	f8cd e1ac 	str.w	lr, [sp, #428]	; 0x1ac
   140e4:	466c      	mov	r4, sp
   140e6:	2503      	movs	r5, #3
   140e8:	6025      	str	r5, [r4, #0]
   140ea:	a860      	add	r0, sp, #384	; 0x180
   140ec:	ab66      	add	r3, sp, #408	; 0x198
   140ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
   140f0:	462a      	mov	r2, r5
   140f2:	f7f4 fcd3 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   140f6:	e7ff      	b.n	140f8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x352>
   140f8:	f24e 30f8 	movw	r0, #58360	; 0xe3f8
   140fc:	f2c0 0001 	movt	r0, #1
   14100:	f001 fa6d 	bl	155de <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14104:	9002      	str	r0, [sp, #8]
   14106:	e7ff      	b.n	14108 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x362>
   14108:	a860      	add	r0, sp, #384	; 0x180
   1410a:	9902      	ldr	r1, [sp, #8]
   1410c:	f001 faa4 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14110:	defe      	udf	#254	; 0xfe

00014112 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl GPIO {
    /// Create a new output GPIO pin
    pub fn new() -> Self {
   14112:	2000      	movs	r0, #0
        GPIO {
            pin: 0,
        }
    }
   14114:	4770      	bx	lr

00014116 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>:

    /// Initialise the output GPIO pin
    pub fn init(&mut self, pin: i32) -> MynewtResult<()> {
   14116:	b5b0      	push	{r4, r5, r7, lr}
   14118:	b0b0      	sub	sp, #192	; 0xc0
   1411a:	9029      	str	r0, [sp, #164]	; 0xa4
   1411c:	912a      	str	r1, [sp, #168]	; 0xa8
   1411e:	2200      	movs	r2, #0
        //  TODO: let dc = pins.d0.into_push_pull_output(&mut pins.port);
        //  TODO: let rst = pins.d1.into_push_pull_output(&mut pins.port);
        let rc = unsafe { hal::hal_gpio_init_out(pin, 0) };
   14120:	900e      	str	r0, [sp, #56]	; 0x38
   14122:	4608      	mov	r0, r1
   14124:	910d      	str	r1, [sp, #52]	; 0x34
   14126:	4611      	mov	r1, r2
   14128:	f003 faea 	bl	17700 <hal_gpio_init_out>
   1412c:	900f      	str	r0, [sp, #60]	; 0x3c
   1412e:	e7ff      	b.n	14130 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x1a>
        assert_eq!(rc, 0, "gpio fail");
   14130:	f24e 300c 	movw	r0, #58124	; 0xe30c
   14134:	f2c0 0001 	movt	r0, #1
   14138:	6800      	ldr	r0, [r0, #0]
   1413a:	a90f      	add	r1, sp, #60	; 0x3c
   1413c:	9110      	str	r1, [sp, #64]	; 0x40
   1413e:	9011      	str	r0, [sp, #68]	; 0x44
   14140:	9810      	ldr	r0, [sp, #64]	; 0x40
   14142:	902b      	str	r0, [sp, #172]	; 0xac
   14144:	9911      	ldr	r1, [sp, #68]	; 0x44
   14146:	912c      	str	r1, [sp, #176]	; 0xb0
   14148:	6802      	ldr	r2, [r0, #0]
   1414a:	680b      	ldr	r3, [r1, #0]
   1414c:	429a      	cmp	r2, r3
   1414e:	900c      	str	r0, [sp, #48]	; 0x30
   14150:	910b      	str	r1, [sp, #44]	; 0x2c
   14152:	d106      	bne.n	14162 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x4c>
   14154:	e7ff      	b.n	14156 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x40>
        self.pin = pin;
   14156:	980d      	ldr	r0, [sp, #52]	; 0x34
   14158:	990e      	ldr	r1, [sp, #56]	; 0x38
   1415a:	6008      	str	r0, [r1, #0]
   1415c:	2001      	movs	r0, #1
        Ok(())
    }
   1415e:	b030      	add	sp, #192	; 0xc0
   14160:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "gpio fail");
   14162:	f24e 3064 	movw	r0, #58212	; 0xe364
   14166:	f2c0 0001 	movt	r0, #1
   1416a:	6801      	ldr	r1, [r0, #0]
   1416c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1416e:	9021      	str	r0, [sp, #132]	; 0x84
   14170:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14172:	9222      	str	r2, [sp, #136]	; 0x88
   14174:	f24e 431c 	movw	r3, #58396	; 0xe41c
   14178:	f2c0 0301 	movt	r3, #1
   1417c:	681b      	ldr	r3, [r3, #0]
   1417e:	f24e 3c84 	movw	ip, #58244	; 0xe384
   14182:	f2c0 0c01 	movt	ip, #1
   14186:	f8dc c000 	ldr.w	ip, [ip]
   1418a:	46ee      	mov	lr, sp
   1418c:	2400      	movs	r4, #0
   1418e:	f8ce 4000 	str.w	r4, [lr]
   14192:	a823      	add	r0, sp, #140	; 0x8c
   14194:	2201      	movs	r2, #1
   14196:	910a      	str	r1, [sp, #40]	; 0x28
   14198:	4619      	mov	r1, r3
   1419a:	4663      	mov	r3, ip
   1419c:	f7f4 fc7e 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   141a0:	e7ff      	b.n	141a2 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x8c>
   141a2:	a821      	add	r0, sp, #132	; 0x84
   141a4:	901e      	str	r0, [sp, #120]	; 0x78
   141a6:	a822      	add	r0, sp, #136	; 0x88
   141a8:	901f      	str	r0, [sp, #124]	; 0x7c
   141aa:	a823      	add	r0, sp, #140	; 0x8c
   141ac:	9020      	str	r0, [sp, #128]	; 0x80
   141ae:	981e      	ldr	r0, [sp, #120]	; 0x78
   141b0:	902d      	str	r0, [sp, #180]	; 0xb4
   141b2:	991f      	ldr	r1, [sp, #124]	; 0x7c
   141b4:	912e      	str	r1, [sp, #184]	; 0xb8
   141b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
   141b8:	922f      	str	r2, [sp, #188]	; 0xbc
   141ba:	f249 23eb 	movw	r3, #37611	; 0x92eb
   141be:	f2c0 0300 	movt	r3, #0
   141c2:	9109      	str	r1, [sp, #36]	; 0x24
   141c4:	4619      	mov	r1, r3
   141c6:	9208      	str	r2, [sp, #32]
   141c8:	f7f5 f8c7 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   141cc:	9007      	str	r0, [sp, #28]
   141ce:	9106      	str	r1, [sp, #24]
   141d0:	e7ff      	b.n	141d2 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xbc>
   141d2:	f249 21eb 	movw	r1, #37611	; 0x92eb
   141d6:	f2c0 0100 	movt	r1, #0
   141da:	9809      	ldr	r0, [sp, #36]	; 0x24
   141dc:	f7f5 f8bd 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   141e0:	9005      	str	r0, [sp, #20]
   141e2:	9104      	str	r1, [sp, #16]
   141e4:	e7ff      	b.n	141e6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xd0>
   141e6:	f645 31bb 	movw	r1, #23483	; 0x5bbb
   141ea:	f2c0 0101 	movt	r1, #1
   141ee:	9808      	ldr	r0, [sp, #32]
   141f0:	f7f5 f8f2 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   141f4:	9003      	str	r0, [sp, #12]
   141f6:	9102      	str	r1, [sp, #8]
   141f8:	e7ff      	b.n	141fa <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xe4>
   141fa:	9807      	ldr	r0, [sp, #28]
   141fc:	9018      	str	r0, [sp, #96]	; 0x60
   141fe:	9906      	ldr	r1, [sp, #24]
   14200:	9119      	str	r1, [sp, #100]	; 0x64
   14202:	9a05      	ldr	r2, [sp, #20]
   14204:	921a      	str	r2, [sp, #104]	; 0x68
   14206:	9b04      	ldr	r3, [sp, #16]
   14208:	931b      	str	r3, [sp, #108]	; 0x6c
   1420a:	f8dd c00c 	ldr.w	ip, [sp, #12]
   1420e:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
   14212:	f8dd e008 	ldr.w	lr, [sp, #8]
   14216:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
   1421a:	466c      	mov	r4, sp
   1421c:	2503      	movs	r5, #3
   1421e:	6025      	str	r5, [r4, #0]
   14220:	a812      	add	r0, sp, #72	; 0x48
   14222:	ab18      	add	r3, sp, #96	; 0x60
   14224:	990a      	ldr	r1, [sp, #40]	; 0x28
   14226:	462a      	mov	r2, r5
   14228:	f7f4 fc38 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1422c:	e7ff      	b.n	1422e <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x118>
   1422e:	f24e 4020 	movw	r0, #58400	; 0xe420
   14232:	f2c0 0001 	movt	r0, #1
   14236:	f001 f9d2 	bl	155de <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1423a:	9001      	str	r0, [sp, #4]
   1423c:	e7ff      	b.n	1423e <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x128>
   1423e:	a812      	add	r0, sp, #72	; 0x48
   14240:	9901      	ldr	r1, [sp, #4]
   14242:	f001 fa09 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14246:	defe      	udf	#254	; 0xfe

00014248 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl embedded_hal::digital::v2::OutputPin for GPIO {
    /// Set the GPIO pin to low
    fn set_low(&mut self) -> Result<(), Self::Error> {
   14248:	b580      	push	{r7, lr}
   1424a:	b082      	sub	sp, #8
   1424c:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 0) };
   1424e:	6800      	ldr	r0, [r0, #0]
   14250:	2100      	movs	r1, #0
   14252:	f003 fa71 	bl	17738 <hal_gpio_write>
   14256:	e7ff      	b.n	14258 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E+0x10>
   14258:	2001      	movs	r0, #1
        Ok(())
    }
   1425a:	b002      	add	sp, #8
   1425c:	bd80      	pop	{r7, pc}

0001425e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>:

    /// Set the GPIO pin to high
    fn set_high(&mut self) -> Result<(), Self::Error> {
   1425e:	b580      	push	{r7, lr}
   14260:	b082      	sub	sp, #8
   14262:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 1) };
   14264:	6800      	ldr	r0, [r0, #0]
   14266:	2101      	movs	r1, #1
   14268:	f003 fa66 	bl	17738 <hal_gpio_write>
   1426c:	e7ff      	b.n	1426e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE+0x10>
   1426e:	2001      	movs	r0, #1
        Ok(())
    }
   14270:	b002      	add	sp, #8
   14272:	bd80      	pop	{r7, pc}

00014274 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>:
impl Delay {
    /// Create a new delay
    pub fn new() -> Self {
        Delay {
        }
    }
   14274:	4770      	bx	lr

00014276 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>:
}

/// Rust Embedded HAL interface for Mynewt Delay
impl embedded_hal::blocking::delay::DelayMs<u8> for Delay {
    /// Sleep for the specified number of milliseconds
    fn delay_ms(&mut self, ms: u8) {
   14276:	b580      	push	{r7, lr}
   14278:	b086      	sub	sp, #24
   1427a:	460a      	mov	r2, r1
   1427c:	9003      	str	r0, [sp, #12]
   1427e:	f88d 1013 	strb.w	r1, [sp, #19]
        //  TODO: Get this constant from Mynewt
        const OS_TICKS_PER_SEC: u32 = 1000;
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   14282:	b2c8      	uxtb	r0, r1
   14284:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   14288:	fba0 0101 	umull	r0, r1, r0, r1
   1428c:	2900      	cmp	r1, #0
   1428e:	9002      	str	r0, [sp, #8]
   14290:	d110      	bne.n	142b4 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3e>
   14292:	e7ff      	b.n	14294 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x1e>
   14294:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   14298:	f2c1 0062 	movt	r0, #4194	; 0x1062
   1429c:	9902      	ldr	r1, [sp, #8]
   1429e:	fba1 0200 	umull	r0, r2, r1, r0
   142a2:	0992      	lsrs	r2, r2, #6
   142a4:	9205      	str	r2, [sp, #20]
        unsafe { os::os_time_delay(delay_ticks) };
   142a6:	9001      	str	r0, [sp, #4]
   142a8:	4610      	mov	r0, r2
   142aa:	f005 fa63 	bl	19774 <os_time_delay>
   142ae:	e7ff      	b.n	142b0 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3a>
    }
   142b0:	b006      	add	sp, #24
   142b2:	bd80      	pop	{r7, pc}
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   142b4:	f24e 4040 	movw	r0, #58432	; 0xe440
   142b8:	f2c0 0001 	movt	r0, #1
   142bc:	f24e 4230 	movw	r2, #58416	; 0xe430
   142c0:	f2c0 0201 	movt	r2, #1
   142c4:	2121      	movs	r1, #33	; 0x21
   142c6:	f001 f991 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   142ca:	defe      	udf	#254	; 0xfe

000142cc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>:
   142cc:	b082      	sub	sp, #8
   142ce:	9001      	str	r0, [sp, #4]
   142d0:	9000      	str	r0, [sp, #0]
   142d2:	e7ff      	b.n	142d4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E+0x8>
   142d4:	9800      	ldr	r0, [sp, #0]
   142d6:	fab0 f180 	clz	r1, r0
   142da:	0948      	lsrs	r0, r1, #5
   142dc:	b002      	add	sp, #8
   142de:	4770      	bx	lr

000142e0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>:
   142e0:	b081      	sub	sp, #4
   142e2:	b001      	add	sp, #4
   142e4:	4770      	bx	lr

000142e6 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>:

macro_rules! impl_to_primitive_uint_to_uint {
    ($SrcT:ident : $( $(#[$cfg:meta])* fn $method:ident -> $DstT:ident ; )*) => {$(
        #[inline]
        $(#[$cfg])*
        fn $method(&self) -> Option<$DstT> {
   142e6:	b08a      	sub	sp, #40	; 0x28
   142e8:	9005      	str	r0, [sp, #20]
   142ea:	2100      	movs	r1, #0
            let max = $DstT::MAX as $SrcT;
   142ec:	9107      	str	r1, [sp, #28]
   142ee:	21ff      	movs	r1, #255	; 0xff
   142f0:	9106      	str	r1, [sp, #24]
   142f2:	2108      	movs	r1, #8
   142f4:	9108      	str	r1, [sp, #32]
   142f6:	9908      	ldr	r1, [sp, #32]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   142f8:	9003      	str	r0, [sp, #12]
   142fa:	9102      	str	r1, [sp, #8]
   142fc:	e016      	b.n	1432c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x46>
   142fe:	2001      	movs	r0, #1
   14300:	f88d 0013 	strb.w	r0, [sp, #19]
   14304:	e00c      	b.n	14320 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   14306:	2000      	movs	r0, #0
   14308:	f88d 0013 	strb.w	r0, [sp, #19]
   1430c:	e008      	b.n	14320 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   1430e:	9803      	ldr	r0, [sp, #12]
   14310:	6801      	ldr	r1, [r0, #0]
   14312:	6842      	ldr	r2, [r0, #4]
   14314:	f5b1 7180 	subs.w	r1, r1, #256	; 0x100
   14318:	f172 0200 	sbcs.w	r2, r2, #0
   1431c:	d3ef      	bcc.n	142fe <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   1431e:	e7f2      	b.n	14306 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x20>
   14320:	f89d 0013 	ldrb.w	r0, [sp, #19]
   14324:	07c0      	lsls	r0, r0, #31
   14326:	2800      	cmp	r0, #0
   14328:	d10e      	bne.n	14348 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x62>
   1432a:	e009      	b.n	14340 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x5a>
   1432c:	2001      	movs	r0, #1
   1432e:	9009      	str	r0, [sp, #36]	; 0x24
   14330:	9809      	ldr	r0, [sp, #36]	; 0x24
   14332:	9001      	str	r0, [sp, #4]
   14334:	e7ff      	b.n	14336 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x50>
   14336:	9802      	ldr	r0, [sp, #8]
   14338:	9901      	ldr	r1, [sp, #4]
   1433a:	4288      	cmp	r0, r1
   1433c:	d9df      	bls.n	142fe <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   1433e:	e7e6      	b.n	1430e <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x28>
   14340:	2000      	movs	r0, #0
                Some(*self as $DstT)
            } else {
                None
   14342:	f88d 0010 	strb.w	r0, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14346:	e007      	b.n	14358 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
                Some(*self as $DstT)
   14348:	9803      	ldr	r0, [sp, #12]
   1434a:	7801      	ldrb	r1, [r0, #0]
   1434c:	f88d 1011 	strb.w	r1, [sp, #17]
   14350:	2101      	movs	r1, #1
   14352:	f88d 1010 	strb.w	r1, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14356:	e7ff      	b.n	14358 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
            }
        }
   14358:	f89d 0010 	ldrb.w	r0, [sp, #16]
   1435c:	f89d 1011 	ldrb.w	r1, [sp, #17]
   14360:	b00a      	add	sp, #40	; 0x28
   14362:	4770      	bx	lr

00014364 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>:
   14364:	b084      	sub	sp, #16
   14366:	9002      	str	r0, [sp, #8]
   14368:	6801      	ldr	r1, [r0, #0]
   1436a:	2900      	cmp	r1, #0
   1436c:	9000      	str	r0, [sp, #0]
   1436e:	d001      	beq.n	14374 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x10>
   14370:	e7ff      	b.n	14372 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0xe>
   14372:	e003      	b.n	1437c <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x18>
   14374:	2000      	movs	r0, #0
   14376:	9001      	str	r0, [sp, #4]
   14378:	e006      	b.n	14388 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   1437a:	defe      	udf	#254	; 0xfe
   1437c:	9800      	ldr	r0, [sp, #0]
   1437e:	f100 0108 	add.w	r1, r0, #8
   14382:	9103      	str	r1, [sp, #12]
   14384:	9101      	str	r1, [sp, #4]
   14386:	e7ff      	b.n	14388 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   14388:	9801      	ldr	r0, [sp, #4]
   1438a:	b004      	add	sp, #16
   1438c:	4770      	bx	lr

0001438e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>:
   1438e:	b084      	sub	sp, #16
   14390:	460b      	mov	r3, r1
   14392:	4684      	mov	ip, r0
   14394:	f88d 000c 	strb.w	r0, [sp, #12]
   14398:	f88d 100d 	strb.w	r1, [sp, #13]
   1439c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   143a0:	07c1      	lsls	r1, r0, #31
   143a2:	2900      	cmp	r1, #0
   143a4:	9202      	str	r2, [sp, #8]
   143a6:	d001      	beq.n	143ac <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1e>
   143a8:	e7ff      	b.n	143aa <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1c>
   143aa:	e009      	b.n	143c0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x32>
   143ac:	f24e 4061 	movw	r0, #58465	; 0xe461
   143b0:	f2c0 0001 	movt	r0, #1
   143b4:	212b      	movs	r1, #43	; 0x2b
   143b6:	9a02      	ldr	r2, [sp, #8]
   143b8:	f001 f918 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   143bc:	defe      	udf	#254	; 0xfe
   143be:	defe      	udf	#254	; 0xfe
   143c0:	f89d 000d 	ldrb.w	r0, [sp, #13]
   143c4:	4601      	mov	r1, r0
   143c6:	f88d 000f 	strb.w	r0, [sp, #15]
   143ca:	f89d 000c 	ldrb.w	r0, [sp, #12]
   143ce:	07c0      	lsls	r0, r0, #31
   143d0:	2800      	cmp	r0, #0
   143d2:	9101      	str	r1, [sp, #4]
   143d4:	d003      	beq.n	143de <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x50>
   143d6:	e7ff      	b.n	143d8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>
   143d8:	9801      	ldr	r0, [sp, #4]
   143da:	b004      	add	sp, #16
   143dc:	4770      	bx	lr
   143de:	e7fb      	b.n	143d8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>

000143e0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>:
   143e0:	b088      	sub	sp, #32
   143e2:	9004      	str	r0, [sp, #16]
   143e4:	9105      	str	r1, [sp, #20]
   143e6:	9804      	ldr	r0, [sp, #16]
   143e8:	2800      	cmp	r0, #0
   143ea:	4601      	mov	r1, r0
   143ec:	bf18      	it	ne
   143ee:	2101      	movne	r1, #1
   143f0:	2800      	cmp	r0, #0
   143f2:	9203      	str	r2, [sp, #12]
   143f4:	d001      	beq.n	143fa <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x1a>
   143f6:	e7ff      	b.n	143f8 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x18>
   143f8:	e009      	b.n	1440e <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x2e>
   143fa:	f24e 4061 	movw	r0, #58465	; 0xe461
   143fe:	f2c0 0001 	movt	r0, #1
   14402:	212b      	movs	r1, #43	; 0x2b
   14404:	9a03      	ldr	r2, [sp, #12]
   14406:	f001 f8f1 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1440a:	defe      	udf	#254	; 0xfe
   1440c:	defe      	udf	#254	; 0xfe
   1440e:	9804      	ldr	r0, [sp, #16]
   14410:	9905      	ldr	r1, [sp, #20]
   14412:	9006      	str	r0, [sp, #24]
   14414:	9107      	str	r1, [sp, #28]
   14416:	9a04      	ldr	r2, [sp, #16]
   14418:	2a00      	cmp	r2, #0
   1441a:	9002      	str	r0, [sp, #8]
   1441c:	9101      	str	r1, [sp, #4]
   1441e:	d004      	beq.n	1442a <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x4a>
   14420:	e7ff      	b.n	14422 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>
   14422:	9802      	ldr	r0, [sp, #8]
   14424:	9901      	ldr	r1, [sp, #4]
   14426:	b008      	add	sp, #32
   14428:	4770      	bx	lr
   1442a:	e7fa      	b.n	14422 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>

0001442c <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>:
   1442c:	b082      	sub	sp, #8
   1442e:	9001      	str	r0, [sp, #4]
   14430:	6800      	ldr	r0, [r0, #0]
   14432:	2800      	cmp	r0, #0
   14434:	d104      	bne.n	14440 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x14>
   14436:	e7ff      	b.n	14438 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0xc>
   14438:	2000      	movs	r0, #0
   1443a:	f88d 0003 	strb.w	r0, [sp, #3]
   1443e:	e003      	b.n	14448 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   14440:	2001      	movs	r0, #1
   14442:	f88d 0003 	strb.w	r0, [sp, #3]
   14446:	e7ff      	b.n	14448 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   14448:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1444c:	b002      	add	sp, #8
   1444e:	4770      	bx	lr

00014450 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>:
   14450:	b580      	push	{r7, lr}
   14452:	b086      	sub	sp, #24
   14454:	9000      	str	r0, [sp, #0]
   14456:	2000      	movs	r0, #0
   14458:	f88d 000f 	strb.w	r0, [sp, #15]
   1445c:	f88d 000e 	strb.w	r0, [sp, #14]
   14460:	2001      	movs	r0, #1
   14462:	f88d 000f 	strb.w	r0, [sp, #15]
   14466:	f88d 000e 	strb.w	r0, [sp, #14]
   1446a:	9800      	ldr	r0, [sp, #0]
   1446c:	2800      	cmp	r0, #0
   1446e:	4601      	mov	r1, r0
   14470:	bf18      	it	ne
   14472:	2101      	movne	r1, #1
   14474:	2800      	cmp	r0, #0
   14476:	d001      	beq.n	1447c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2c>
   14478:	e7ff      	b.n	1447a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2a>
   1447a:	e004      	b.n	14486 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x36>
   1447c:	2000      	movs	r0, #0
   1447e:	f88d 0004 	strb.w	r0, [sp, #4]
   14482:	e019      	b.n	144b8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   14484:	defe      	udf	#254	; 0xfe
   14486:	2000      	movs	r0, #0
   14488:	f88d 000f 	strb.w	r0, [sp, #15]
   1448c:	9900      	ldr	r1, [sp, #0]
   1448e:	9105      	str	r1, [sp, #20]
   14490:	f88d 000e 	strb.w	r0, [sp, #14]
   14494:	9102      	str	r1, [sp, #8]
   14496:	9802      	ldr	r0, [sp, #8]
   14498:	f7f5 ffe8 	bl	a46c <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>
   1449c:	f88d 1005 	strb.w	r1, [sp, #5]
   144a0:	f88d 0004 	strb.w	r0, [sp, #4]
   144a4:	e7ff      	b.n	144a6 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x56>
   144a6:	e007      	b.n	144b8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   144a8:	9800      	ldr	r0, [sp, #0]
   144aa:	2800      	cmp	r0, #0
   144ac:	d110      	bne.n	144d0 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x80>
   144ae:	e019      	b.n	144e4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x94>
   144b0:	2000      	movs	r0, #0
   144b2:	f88d 000e 	strb.w	r0, [sp, #14]
   144b6:	e7f7      	b.n	144a8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   144b8:	f89d 000e 	ldrb.w	r0, [sp, #14]
   144bc:	07c0      	lsls	r0, r0, #31
   144be:	2800      	cmp	r0, #0
   144c0:	d1f6      	bne.n	144b0 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x60>
   144c2:	e7f1      	b.n	144a8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   144c4:	f89d 0004 	ldrb.w	r0, [sp, #4]
   144c8:	f89d 1005 	ldrb.w	r1, [sp, #5]
   144cc:	b006      	add	sp, #24
   144ce:	bd80      	pop	{r7, pc}
   144d0:	f89d 000f 	ldrb.w	r0, [sp, #15]
   144d4:	07c0      	lsls	r0, r0, #31
   144d6:	2800      	cmp	r0, #0
   144d8:	d0f4      	beq.n	144c4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   144da:	e7ff      	b.n	144dc <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x8c>
   144dc:	2000      	movs	r0, #0
   144de:	f88d 000f 	strb.w	r0, [sp, #15]
   144e2:	e7ef      	b.n	144c4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   144e4:	e7ee      	b.n	144c4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>

000144e6 <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE>:
   144e6:	b580      	push	{r7, lr}
   144e8:	b084      	sub	sp, #16
   144ea:	9002      	str	r0, [sp, #8]
   144ec:	9103      	str	r1, [sp, #12]
   144ee:	f24e 408c 	movw	r0, #58508	; 0xe48c
   144f2:	f2c0 0001 	movt	r0, #1
   144f6:	2202      	movs	r2, #2
   144f8:	9001      	str	r0, [sp, #4]
   144fa:	4608      	mov	r0, r1
   144fc:	9901      	ldr	r1, [sp, #4]
   144fe:	f001 fd95 	bl	1602c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
   14502:	9000      	str	r0, [sp, #0]
   14504:	e7ff      	b.n	14506 <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE+0x20>
   14506:	9800      	ldr	r0, [sp, #0]
   14508:	f000 0001 	and.w	r0, r0, #1
   1450c:	b004      	add	sp, #16
   1450e:	bd80      	pop	{r7, pc}

00014510 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>:
   14510:	b580      	push	{r7, lr}
   14512:	b08a      	sub	sp, #40	; 0x28
   14514:	4684      	mov	ip, r0
   14516:	f88d 0017 	strb.w	r0, [sp, #23]
   1451a:	9107      	str	r1, [sp, #28]
   1451c:	9208      	str	r2, [sp, #32]
   1451e:	f89d 0017 	ldrb.w	r0, [sp, #23]
   14522:	ea4f 7ec0 	mov.w	lr, r0, lsl #31
   14526:	f1be 0f00 	cmp.w	lr, #0
   1452a:	9304      	str	r3, [sp, #16]
   1452c:	9203      	str	r2, [sp, #12]
   1452e:	9102      	str	r1, [sp, #8]
   14530:	d00e      	beq.n	14550 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x40>
   14532:	e7ff      	b.n	14534 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x24>
   14534:	4668      	mov	r0, sp
   14536:	9904      	ldr	r1, [sp, #16]
   14538:	6001      	str	r1, [r0, #0]
   1453a:	f24e 4390 	movw	r3, #58512	; 0xe490
   1453e:	f2c0 0301 	movt	r3, #1
   14542:	aa06      	add	r2, sp, #24
   14544:	9802      	ldr	r0, [sp, #8]
   14546:	9903      	ldr	r1, [sp, #12]
   14548:	f001 f822 	bl	15590 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   1454c:	defe      	udf	#254	; 0xfe
   1454e:	defe      	udf	#254	; 0xfe
   14550:	f89d 0017 	ldrb.w	r0, [sp, #23]
   14554:	07c0      	lsls	r0, r0, #31
   14556:	2800      	cmp	r0, #0
   14558:	d102      	bne.n	14560 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x50>
   1455a:	e7ff      	b.n	1455c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>
   1455c:	b00a      	add	sp, #40	; 0x28
   1455e:	bd80      	pop	{r7, pc}
   14560:	e7fc      	b.n	1455c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>

00014562 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>:
   14562:	b580      	push	{r7, lr}
   14564:	b088      	sub	sp, #32
   14566:	9001      	str	r0, [sp, #4]
   14568:	2000      	movs	r0, #0
   1456a:	f88d 0013 	strb.w	r0, [sp, #19]
   1456e:	f88d 0011 	strb.w	r0, [sp, #17]
   14572:	f88d 0012 	strb.w	r0, [sp, #18]
   14576:	2001      	movs	r0, #1
   14578:	f88d 0012 	strb.w	r0, [sp, #18]
   1457c:	f88d 0013 	strb.w	r0, [sp, #19]
   14580:	f88d 0011 	strb.w	r0, [sp, #17]
   14584:	9801      	ldr	r0, [sp, #4]
   14586:	1e41      	subs	r1, r0, #1
   14588:	bf18      	it	ne
   1458a:	2101      	movne	r1, #1
   1458c:	2801      	cmp	r0, #1
   1458e:	d00d      	beq.n	145ac <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x4a>
   14590:	e7ff      	b.n	14592 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x30>
   14592:	2000      	movs	r0, #0
   14594:	f88d 0013 	strb.w	r0, [sp, #19]
   14598:	9901      	ldr	r1, [sp, #4]
   1459a:	9107      	str	r1, [sp, #28]
   1459c:	f88d 0011 	strb.w	r0, [sp, #17]
   145a0:	9103      	str	r1, [sp, #12]
   145a2:	9803      	ldr	r0, [sp, #12]
   145a4:	f7f5 f922 	bl	97ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>
   145a8:	e006      	b.n	145b8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x56>
   145aa:	defe      	udf	#254	; 0xfe
   145ac:	2000      	movs	r0, #0
   145ae:	f88d 0012 	strb.w	r0, [sp, #18]
   145b2:	f88d 000b 	strb.w	r0, [sp, #11]
   145b6:	e003      	b.n	145c0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   145b8:	2001      	movs	r0, #1
   145ba:	f88d 000b 	strb.w	r0, [sp, #11]
   145be:	e7ff      	b.n	145c0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   145c0:	f89d 0011 	ldrb.w	r0, [sp, #17]
   145c4:	07c0      	lsls	r0, r0, #31
   145c6:	2800      	cmp	r0, #0
   145c8:	d104      	bne.n	145d4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x72>
   145ca:	e7ff      	b.n	145cc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   145cc:	9801      	ldr	r0, [sp, #4]
   145ce:	2801      	cmp	r0, #1
   145d0:	d008      	beq.n	145e4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x82>
   145d2:	e011      	b.n	145f8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x96>
   145d4:	2000      	movs	r0, #0
   145d6:	f88d 0011 	strb.w	r0, [sp, #17]
   145da:	e7f7      	b.n	145cc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   145dc:	f89d 000b 	ldrb.w	r0, [sp, #11]
   145e0:	b008      	add	sp, #32
   145e2:	bd80      	pop	{r7, pc}
   145e4:	f89d 0012 	ldrb.w	r0, [sp, #18]
   145e8:	07c0      	lsls	r0, r0, #31
   145ea:	2800      	cmp	r0, #0
   145ec:	d0f6      	beq.n	145dc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   145ee:	e7ff      	b.n	145f0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x8e>
   145f0:	2000      	movs	r0, #0
   145f2:	f88d 0012 	strb.w	r0, [sp, #18]
   145f6:	e7f1      	b.n	145dc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   145f8:	f89d 0013 	ldrb.w	r0, [sp, #19]
   145fc:	07c0      	lsls	r0, r0, #31
   145fe:	2800      	cmp	r0, #0
   14600:	d0ec      	beq.n	145dc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   14602:	e7ff      	b.n	14604 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0xa2>
   14604:	2000      	movs	r0, #0
   14606:	f88d 0013 	strb.w	r0, [sp, #19]
   1460a:	e7e7      	b.n	145dc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>

0001460c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>:
   1460c:	b580      	push	{r7, lr}
   1460e:	b088      	sub	sp, #32
   14610:	9001      	str	r0, [sp, #4]
   14612:	2000      	movs	r0, #0
   14614:	f88d 0013 	strb.w	r0, [sp, #19]
   14618:	f88d 0011 	strb.w	r0, [sp, #17]
   1461c:	f88d 0012 	strb.w	r0, [sp, #18]
   14620:	2001      	movs	r0, #1
   14622:	f88d 0012 	strb.w	r0, [sp, #18]
   14626:	f88d 0013 	strb.w	r0, [sp, #19]
   1462a:	f88d 0011 	strb.w	r0, [sp, #17]
   1462e:	9801      	ldr	r0, [sp, #4]
   14630:	1e41      	subs	r1, r0, #1
   14632:	bf18      	it	ne
   14634:	2101      	movne	r1, #1
   14636:	2801      	cmp	r0, #1
   14638:	d00d      	beq.n	14656 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x4a>
   1463a:	e7ff      	b.n	1463c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x30>
   1463c:	2000      	movs	r0, #0
   1463e:	f88d 0013 	strb.w	r0, [sp, #19]
   14642:	9901      	ldr	r1, [sp, #4]
   14644:	9107      	str	r1, [sp, #28]
   14646:	f88d 0011 	strb.w	r0, [sp, #17]
   1464a:	9103      	str	r1, [sp, #12]
   1464c:	9803      	ldr	r0, [sp, #12]
   1464e:	f7f5 f8c3 	bl	97d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>
   14652:	e006      	b.n	14662 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x56>
   14654:	defe      	udf	#254	; 0xfe
   14656:	2000      	movs	r0, #0
   14658:	f88d 0012 	strb.w	r0, [sp, #18]
   1465c:	f88d 000b 	strb.w	r0, [sp, #11]
   14660:	e003      	b.n	1466a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   14662:	2001      	movs	r0, #1
   14664:	f88d 000b 	strb.w	r0, [sp, #11]
   14668:	e7ff      	b.n	1466a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   1466a:	f89d 0011 	ldrb.w	r0, [sp, #17]
   1466e:	07c0      	lsls	r0, r0, #31
   14670:	2800      	cmp	r0, #0
   14672:	d104      	bne.n	1467e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x72>
   14674:	e7ff      	b.n	14676 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   14676:	9801      	ldr	r0, [sp, #4]
   14678:	2801      	cmp	r0, #1
   1467a:	d008      	beq.n	1468e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x82>
   1467c:	e011      	b.n	146a2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x96>
   1467e:	2000      	movs	r0, #0
   14680:	f88d 0011 	strb.w	r0, [sp, #17]
   14684:	e7f7      	b.n	14676 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   14686:	f89d 000b 	ldrb.w	r0, [sp, #11]
   1468a:	b008      	add	sp, #32
   1468c:	bd80      	pop	{r7, pc}
   1468e:	f89d 0012 	ldrb.w	r0, [sp, #18]
   14692:	07c0      	lsls	r0, r0, #31
   14694:	2800      	cmp	r0, #0
   14696:	d0f6      	beq.n	14686 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   14698:	e7ff      	b.n	1469a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x8e>
   1469a:	2000      	movs	r0, #0
   1469c:	f88d 0012 	strb.w	r0, [sp, #18]
   146a0:	e7f1      	b.n	14686 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   146a2:	f89d 0013 	ldrb.w	r0, [sp, #19]
   146a6:	07c0      	lsls	r0, r0, #31
   146a8:	2800      	cmp	r0, #0
   146aa:	d0ec      	beq.n	14686 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   146ac:	e7ff      	b.n	146ae <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0xa2>
   146ae:	2000      	movs	r0, #0
   146b0:	f88d 0013 	strb.w	r0, [sp, #19]
   146b4:	e7e7      	b.n	14686 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>

000146b6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>:
   146b6:	b580      	push	{r7, lr}
   146b8:	b088      	sub	sp, #32
   146ba:	9001      	str	r0, [sp, #4]
   146bc:	2000      	movs	r0, #0
   146be:	f88d 0013 	strb.w	r0, [sp, #19]
   146c2:	f88d 0011 	strb.w	r0, [sp, #17]
   146c6:	f88d 0012 	strb.w	r0, [sp, #18]
   146ca:	2001      	movs	r0, #1
   146cc:	f88d 0012 	strb.w	r0, [sp, #18]
   146d0:	f88d 0013 	strb.w	r0, [sp, #19]
   146d4:	f88d 0011 	strb.w	r0, [sp, #17]
   146d8:	9801      	ldr	r0, [sp, #4]
   146da:	1e41      	subs	r1, r0, #1
   146dc:	bf18      	it	ne
   146de:	2101      	movne	r1, #1
   146e0:	2801      	cmp	r0, #1
   146e2:	d00d      	beq.n	14700 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x4a>
   146e4:	e7ff      	b.n	146e6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x30>
   146e6:	2000      	movs	r0, #0
   146e8:	f88d 0013 	strb.w	r0, [sp, #19]
   146ec:	9901      	ldr	r1, [sp, #4]
   146ee:	9107      	str	r1, [sp, #28]
   146f0:	f88d 0011 	strb.w	r0, [sp, #17]
   146f4:	9103      	str	r1, [sp, #12]
   146f6:	9803      	ldr	r0, [sp, #12]
   146f8:	f7f5 f873 	bl	97e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>
   146fc:	e006      	b.n	1470c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x56>
   146fe:	defe      	udf	#254	; 0xfe
   14700:	2000      	movs	r0, #0
   14702:	f88d 0012 	strb.w	r0, [sp, #18]
   14706:	f88d 000b 	strb.w	r0, [sp, #11]
   1470a:	e003      	b.n	14714 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   1470c:	2001      	movs	r0, #1
   1470e:	f88d 000b 	strb.w	r0, [sp, #11]
   14712:	e7ff      	b.n	14714 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   14714:	f89d 0011 	ldrb.w	r0, [sp, #17]
   14718:	07c0      	lsls	r0, r0, #31
   1471a:	2800      	cmp	r0, #0
   1471c:	d104      	bne.n	14728 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x72>
   1471e:	e7ff      	b.n	14720 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   14720:	9801      	ldr	r0, [sp, #4]
   14722:	2801      	cmp	r0, #1
   14724:	d008      	beq.n	14738 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x82>
   14726:	e011      	b.n	1474c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x96>
   14728:	2000      	movs	r0, #0
   1472a:	f88d 0011 	strb.w	r0, [sp, #17]
   1472e:	e7f7      	b.n	14720 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   14730:	f89d 000b 	ldrb.w	r0, [sp, #11]
   14734:	b008      	add	sp, #32
   14736:	bd80      	pop	{r7, pc}
   14738:	f89d 0012 	ldrb.w	r0, [sp, #18]
   1473c:	07c0      	lsls	r0, r0, #31
   1473e:	2800      	cmp	r0, #0
   14740:	d0f6      	beq.n	14730 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   14742:	e7ff      	b.n	14744 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x8e>
   14744:	2000      	movs	r0, #0
   14746:	f88d 0012 	strb.w	r0, [sp, #18]
   1474a:	e7f1      	b.n	14730 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   1474c:	f89d 0013 	ldrb.w	r0, [sp, #19]
   14750:	07c0      	lsls	r0, r0, #31
   14752:	2800      	cmp	r0, #0
   14754:	d0ec      	beq.n	14730 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   14756:	e7ff      	b.n	14758 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0xa2>
   14758:	2000      	movs	r0, #0
   1475a:	f88d 0013 	strb.w	r0, [sp, #19]
   1475e:	e7e7      	b.n	14730 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>

00014760 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>:
   14760:	b082      	sub	sp, #8
   14762:	2001      	movs	r0, #1
   14764:	f88d 0003 	strb.w	r0, [sp, #3]
   14768:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1476c:	b002      	add	sp, #8
   1476e:	4770      	bx	lr

00014770 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>:
        self.style.stroke_width = width;

        self
    }

    fn fill(mut self, color: Option<C>) -> Self {
   14770:	b5b0      	push	{r4, r5, r7, lr}
   14772:	b081      	sub	sp, #4
   14774:	469c      	mov	ip, r3
   14776:	4696      	mov	lr, r2
   14778:	f8ad 2000 	strh.w	r2, [sp]
   1477c:	f8ad 3002 	strh.w	r3, [sp, #2]
        self.style.fill_color = color;
   14780:	820a      	strh	r2, [r1, #16]
   14782:	824b      	strh	r3, [r1, #18]

        self
   14784:	c91c      	ldmia	r1!, {r2, r3, r4}
   14786:	c01c      	stmia	r0!, {r2, r3, r4}
   14788:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
   1478c:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
    }
   14790:	b001      	add	sp, #4
   14792:	bdb0      	pop	{r4, r5, r7, pc}

00014794 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>:
    pub fn new(top_left: Coord, bottom_right: Coord) -> Self {
   14794:	b510      	push	{r4, lr}
   14796:	b08c      	sub	sp, #48	; 0x30
   14798:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   1479c:	9108      	str	r1, [sp, #32]
   1479e:	9209      	str	r2, [sp, #36]	; 0x24
   147a0:	930a      	str	r3, [sp, #40]	; 0x28
   147a2:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   147a6:	f10d 0e14 	add.w	lr, sp, #20
            style: Style::default(),
   147aa:	9004      	str	r0, [sp, #16]
   147ac:	4670      	mov	r0, lr
   147ae:	9303      	str	r3, [sp, #12]
   147b0:	9202      	str	r2, [sp, #8]
   147b2:	9101      	str	r1, [sp, #4]
   147b4:	f8cd c000 	str.w	ip, [sp]
   147b8:	f000 f818 	bl	147ec <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>
   147bc:	e7ff      	b.n	147be <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E+0x2a>
        Rectangle {
   147be:	9801      	ldr	r0, [sp, #4]
   147c0:	9904      	ldr	r1, [sp, #16]
   147c2:	6008      	str	r0, [r1, #0]
   147c4:	9a02      	ldr	r2, [sp, #8]
   147c6:	604a      	str	r2, [r1, #4]
   147c8:	9b03      	ldr	r3, [sp, #12]
   147ca:	608b      	str	r3, [r1, #8]
   147cc:	f8dd c000 	ldr.w	ip, [sp]
   147d0:	f8c1 c00c 	str.w	ip, [r1, #12]
   147d4:	f8bd e01c 	ldrh.w	lr, [sp, #28]
   147d8:	f8a1 e018 	strh.w	lr, [r1, #24]
   147dc:	f8dd e014 	ldr.w	lr, [sp, #20]
   147e0:	9c06      	ldr	r4, [sp, #24]
   147e2:	614c      	str	r4, [r1, #20]
   147e4:	f8c1 e010 	str.w	lr, [r1, #16]
    }
   147e8:	b00c      	add	sp, #48	; 0x30
   147ea:	bd10      	pop	{r4, pc}

000147ec <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>:

impl<P> Default for Style<P>
where
    P: PixelColor,
{
    fn default() -> Self {
   147ec:	b082      	sub	sp, #8
   147ee:	2100      	movs	r1, #0
        Self {
            fill_color: None,
   147f0:	f8ad 1000 	strh.w	r1, [sp]
            stroke_color: None,
   147f4:	f8ad 1004 	strh.w	r1, [sp, #4]
        Self {
   147f8:	f8bd 1000 	ldrh.w	r1, [sp]
   147fc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14800:	8001      	strh	r1, [r0, #0]
   14802:	8042      	strh	r2, [r0, #2]
   14804:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   14808:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1480c:	8081      	strh	r1, [r0, #4]
   1480e:	80c2      	strh	r2, [r0, #6]
   14810:	2101      	movs	r1, #1
   14812:	7201      	strb	r1, [r0, #8]
            stroke_width: 1,
        }
    }
   14814:	b002      	add	sp, #8
   14816:	4770      	bx	lr

00014818 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>:
#[derive(ToPrimitive)]
   14818:	b084      	sub	sp, #16
   1481a:	460a      	mov	r2, r1
   1481c:	4603      	mov	r3, r0
   1481e:	9103      	str	r1, [sp, #12]
   14820:	9002      	str	r0, [sp, #8]
   14822:	b004      	add	sp, #16
   14824:	4770      	bx	lr

00014826 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>:
   14826:	b510      	push	{r4, lr}
   14828:	b088      	sub	sp, #32
   1482a:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   1482e:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
   14832:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   14834:	9102      	str	r1, [sp, #8]
   14836:	9203      	str	r2, [sp, #12]
   14838:	9304      	str	r3, [sp, #16]
   1483a:	9405      	str	r4, [sp, #20]
   1483c:	f8cd e018 	str.w	lr, [sp, #24]
   14840:	f8cd c01c 	str.w	ip, [sp, #28]
   14844:	f8cd e000 	str.w	lr, [sp]
   14848:	f8cd c004 	str.w	ip, [sp, #4]
   1484c:	6001      	str	r1, [r0, #0]
   1484e:	6042      	str	r2, [r0, #4]
   14850:	9900      	ldr	r1, [sp, #0]
   14852:	9a01      	ldr	r2, [sp, #4]
   14854:	6081      	str	r1, [r0, #8]
   14856:	60c2      	str	r2, [r0, #12]
   14858:	6103      	str	r3, [r0, #16]
   1485a:	6144      	str	r4, [r0, #20]
   1485c:	b008      	add	sp, #32
   1485e:	bd10      	pop	{r4, pc}

00014860 <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>:
   14860:	b580      	push	{r7, lr}
   14862:	b086      	sub	sp, #24
   14864:	f8dd c020 	ldr.w	ip, [sp, #32]
   14868:	9102      	str	r1, [sp, #8]
   1486a:	9203      	str	r2, [sp, #12]
   1486c:	9304      	str	r3, [sp, #16]
   1486e:	f8cd c014 	str.w	ip, [sp, #20]
   14872:	f04f 0e00 	mov.w	lr, #0
   14876:	f8cd e004 	str.w	lr, [sp, #4]
   1487a:	f8cd e000 	str.w	lr, [sp]
   1487e:	f8cd e000 	str.w	lr, [sp]
   14882:	6001      	str	r1, [r0, #0]
   14884:	6042      	str	r2, [r0, #4]
   14886:	9900      	ldr	r1, [sp, #0]
   14888:	9a01      	ldr	r2, [sp, #4]
   1488a:	6081      	str	r1, [r0, #8]
   1488c:	60c2      	str	r2, [r0, #12]
   1488e:	6103      	str	r3, [r0, #16]
   14890:	f8c0 c014 	str.w	ip, [r0, #20]
   14894:	b006      	add	sp, #24
   14896:	bd80      	pop	{r7, pc}

00014898 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E>:
   14898:	b580      	push	{r7, lr}
   1489a:	b086      	sub	sp, #24
   1489c:	460a      	mov	r2, r1
   1489e:	4603      	mov	r3, r0
   148a0:	f88d 0014 	strb.w	r0, [sp, #20]
   148a4:	f88d 1015 	strb.w	r1, [sp, #21]
   148a8:	9203      	str	r2, [sp, #12]
   148aa:	9302      	str	r3, [sp, #8]
   148ac:	f000 f865 	bl	1497a <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>
   148b0:	9001      	str	r0, [sp, #4]
   148b2:	9100      	str	r1, [sp, #0]
   148b4:	e7ff      	b.n	148b6 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x1e>
   148b6:	9801      	ldr	r0, [sp, #4]
   148b8:	f88d 0016 	strb.w	r0, [sp, #22]
   148bc:	9900      	ldr	r1, [sp, #0]
   148be:	f001 0201 	and.w	r2, r1, #1
   148c2:	f88d 2017 	strb.w	r2, [sp, #23]
   148c6:	2a00      	cmp	r2, #0
   148c8:	d107      	bne.n	148da <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x42>
   148ca:	e7ff      	b.n	148cc <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x34>
   148cc:	9801      	ldr	r0, [sp, #4]
   148ce:	f88d 0011 	strb.w	r0, [sp, #17]
   148d2:	2101      	movs	r1, #1
   148d4:	f88d 1010 	strb.w	r1, [sp, #16]
   148d8:	e003      	b.n	148e2 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x4a>
   148da:	2000      	movs	r0, #0
   148dc:	f88d 0010 	strb.w	r0, [sp, #16]
   148e0:	e7ff      	b.n	148e2 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x4a>
   148e2:	f89d 0010 	ldrb.w	r0, [sp, #16]
   148e6:	f89d 1011 	ldrb.w	r1, [sp, #17]
   148ea:	b006      	add	sp, #24
   148ec:	bd80      	pop	{r7, pc}

000148ee <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>:
   148ee:	b082      	sub	sp, #8
   148f0:	460a      	mov	r2, r1
   148f2:	4603      	mov	r3, r0
   148f4:	f88d 0005 	strb.w	r0, [sp, #5]
   148f8:	f88d 1006 	strb.w	r1, [sp, #6]
   148fc:	4408      	add	r0, r1
   148fe:	f88d 0007 	strb.w	r0, [sp, #7]
   14902:	f89d 0007 	ldrb.w	r0, [sp, #7]
   14906:	9000      	str	r0, [sp, #0]
   14908:	e7ff      	b.n	1490a <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE+0x1c>
   1490a:	9800      	ldr	r0, [sp, #0]
   1490c:	b002      	add	sp, #8
   1490e:	4770      	bx	lr

00014910 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E>:
   14910:	b084      	sub	sp, #16
   14912:	4602      	mov	r2, r0
   14914:	f88d 0007 	strb.w	r0, [sp, #7]
   14918:	9102      	str	r1, [sp, #8]
   1491a:	f001 0107 	and.w	r1, r1, #7
   1491e:	4088      	lsls	r0, r1
   14920:	f88d 000f 	strb.w	r0, [sp, #15]
   14924:	f89d 000f 	ldrb.w	r0, [sp, #15]
   14928:	9000      	str	r0, [sp, #0]
   1492a:	e7ff      	b.n	1492c <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E+0x1c>
   1492c:	9800      	ldr	r0, [sp, #0]
   1492e:	b004      	add	sp, #16
   14930:	4770      	bx	lr

00014932 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E>:
   14932:	b084      	sub	sp, #16
   14934:	b2c2      	uxtb	r2, r0
   14936:	4603      	mov	r3, r0
   14938:	f88d 0007 	strb.w	r0, [sp, #7]
   1493c:	9102      	str	r1, [sp, #8]
   1493e:	f001 0007 	and.w	r0, r1, #7
   14942:	fa22 f000 	lsr.w	r0, r2, r0
   14946:	f88d 000f 	strb.w	r0, [sp, #15]
   1494a:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1494e:	9000      	str	r0, [sp, #0]
   14950:	e7ff      	b.n	14952 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E+0x20>
   14952:	9800      	ldr	r0, [sp, #0]
   14954:	b004      	add	sp, #16
   14956:	4770      	bx	lr

00014958 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E>:
   14958:	b082      	sub	sp, #8
   1495a:	460a      	mov	r2, r1
   1495c:	4603      	mov	r3, r0
   1495e:	f88d 0005 	strb.w	r0, [sp, #5]
   14962:	f88d 1006 	strb.w	r1, [sp, #6]
   14966:	1a40      	subs	r0, r0, r1
   14968:	f88d 0007 	strb.w	r0, [sp, #7]
   1496c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   14970:	9000      	str	r0, [sp, #0]
   14972:	e7ff      	b.n	14974 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E+0x1c>
   14974:	9800      	ldr	r0, [sp, #0]
   14976:	b002      	add	sp, #8
   14978:	4770      	bx	lr

0001497a <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>:
   1497a:	b084      	sub	sp, #16
   1497c:	b2c2      	uxtb	r2, r0
   1497e:	460b      	mov	r3, r1
   14980:	4684      	mov	ip, r0
   14982:	f88d 000a 	strb.w	r0, [sp, #10]
   14986:	f88d 100b 	strb.w	r1, [sp, #11]
   1498a:	fa52 f081 	uxtab	r0, r2, r1
   1498e:	b2c1      	uxtb	r1, r0
   14990:	1a09      	subs	r1, r1, r0
   14992:	bf18      	it	ne
   14994:	2101      	movne	r1, #1
   14996:	f88d 000c 	strb.w	r0, [sp, #12]
   1499a:	f88d 100d 	strb.w	r1, [sp, #13]
   1499e:	f89d 000c 	ldrb.w	r0, [sp, #12]
   149a2:	f89d 100d 	ldrb.w	r1, [sp, #13]
   149a6:	9001      	str	r0, [sp, #4]
   149a8:	9100      	str	r1, [sp, #0]
   149aa:	e7ff      	b.n	149ac <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E+0x32>
   149ac:	9801      	ldr	r0, [sp, #4]
   149ae:	f88d 000e 	strb.w	r0, [sp, #14]
   149b2:	9900      	ldr	r1, [sp, #0]
   149b4:	f001 0201 	and.w	r2, r1, #1
   149b8:	f88d 200f 	strb.w	r2, [sp, #15]
   149bc:	f88d 0008 	strb.w	r0, [sp, #8]
   149c0:	f88d 2009 	strb.w	r2, [sp, #9]
   149c4:	f89d 0008 	ldrb.w	r0, [sp, #8]
   149c8:	f89d 1009 	ldrb.w	r1, [sp, #9]
   149cc:	b004      	add	sp, #16
   149ce:	4770      	bx	lr

000149d0 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>:
   149d0:	b580      	push	{r7, lr}
   149d2:	b084      	sub	sp, #16
   149d4:	b2ca      	uxtb	r2, r1
   149d6:	b2c3      	uxtb	r3, r0
   149d8:	468c      	mov	ip, r1
   149da:	4686      	mov	lr, r0
   149dc:	f88d 000a 	strb.w	r0, [sp, #10]
   149e0:	f88d 100b 	strb.w	r1, [sp, #11]
   149e4:	1a98      	subs	r0, r3, r2
   149e6:	b2c1      	uxtb	r1, r0
   149e8:	1a09      	subs	r1, r1, r0
   149ea:	bf18      	it	ne
   149ec:	2101      	movne	r1, #1
   149ee:	f88d 000c 	strb.w	r0, [sp, #12]
   149f2:	f88d 100d 	strb.w	r1, [sp, #13]
   149f6:	f89d 000c 	ldrb.w	r0, [sp, #12]
   149fa:	f89d 100d 	ldrb.w	r1, [sp, #13]
   149fe:	9001      	str	r0, [sp, #4]
   14a00:	9100      	str	r1, [sp, #0]
   14a02:	e7ff      	b.n	14a04 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E+0x34>
   14a04:	9801      	ldr	r0, [sp, #4]
   14a06:	f88d 000e 	strb.w	r0, [sp, #14]
   14a0a:	9900      	ldr	r1, [sp, #0]
   14a0c:	f001 0201 	and.w	r2, r1, #1
   14a10:	f88d 200f 	strb.w	r2, [sp, #15]
   14a14:	f88d 0008 	strb.w	r0, [sp, #8]
   14a18:	f88d 2009 	strb.w	r2, [sp, #9]
   14a1c:	f89d 0008 	ldrb.w	r0, [sp, #8]
   14a20:	f89d 1009 	ldrb.w	r1, [sp, #9]
   14a24:	b004      	add	sp, #16
   14a26:	bd80      	pop	{r7, pc}

00014a28 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>:
   14a28:	b083      	sub	sp, #12
   14a2a:	460a      	mov	r2, r1
   14a2c:	4603      	mov	r3, r0
   14a2e:	f8ad 0006 	strh.w	r0, [sp, #6]
   14a32:	f8ad 1008 	strh.w	r1, [sp, #8]
   14a36:	4408      	add	r0, r1
   14a38:	f8ad 000a 	strh.w	r0, [sp, #10]
   14a3c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   14a40:	9000      	str	r0, [sp, #0]
   14a42:	e7ff      	b.n	14a44 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E+0x1c>
   14a44:	9800      	ldr	r0, [sp, #0]
   14a46:	b003      	add	sp, #12
   14a48:	4770      	bx	lr

00014a4a <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>:
   14a4a:	b083      	sub	sp, #12
   14a4c:	460a      	mov	r2, r1
   14a4e:	4603      	mov	r3, r0
   14a50:	f8ad 0006 	strh.w	r0, [sp, #6]
   14a54:	f8ad 1008 	strh.w	r1, [sp, #8]
   14a58:	1a40      	subs	r0, r0, r1
   14a5a:	f8ad 000a 	strh.w	r0, [sp, #10]
   14a5e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   14a62:	9000      	str	r0, [sp, #0]
   14a64:	e7ff      	b.n	14a66 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E+0x1c>
   14a66:	9800      	ldr	r0, [sp, #0]
   14a68:	b003      	add	sp, #12
   14a6a:	4770      	bx	lr

00014a6c <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE>:
   14a6c:	b5b0      	push	{r4, r5, r7, lr}
   14a6e:	b088      	sub	sp, #32
   14a70:	469c      	mov	ip, r3
   14a72:	4696      	mov	lr, r2
   14a74:	460c      	mov	r4, r1
   14a76:	4605      	mov	r5, r0
   14a78:	9103      	str	r1, [sp, #12]
   14a7a:	9002      	str	r0, [sp, #8]
   14a7c:	9305      	str	r3, [sp, #20]
   14a7e:	9204      	str	r2, [sp, #16]
   14a80:	1a80      	subs	r0, r0, r2
   14a82:	eb61 0103 	sbc.w	r1, r1, r3
   14a86:	9107      	str	r1, [sp, #28]
   14a88:	9006      	str	r0, [sp, #24]
   14a8a:	9806      	ldr	r0, [sp, #24]
   14a8c:	9907      	ldr	r1, [sp, #28]
   14a8e:	9001      	str	r0, [sp, #4]
   14a90:	9100      	str	r1, [sp, #0]
   14a92:	e7ff      	b.n	14a94 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE+0x28>
   14a94:	9801      	ldr	r0, [sp, #4]
   14a96:	9900      	ldr	r1, [sp, #0]
   14a98:	b008      	add	sp, #32
   14a9a:	bdb0      	pop	{r4, r5, r7, pc}

00014a9c <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>:
    fn le(&self, other: &LevelFilter) -> bool {
   14a9c:	b082      	sub	sp, #8
   14a9e:	9000      	str	r0, [sp, #0]
   14aa0:	9101      	str	r1, [sp, #4]
        *self as usize <= *other as usize
   14aa2:	6800      	ldr	r0, [r0, #0]
   14aa4:	6809      	ldr	r1, [r1, #0]
   14aa6:	2200      	movs	r2, #0
   14aa8:	4288      	cmp	r0, r1
   14aaa:	bf98      	it	ls
   14aac:	2201      	movls	r2, #1
    }
   14aae:	4610      	mov	r0, r2
   14ab0:	b002      	add	sp, #8
   14ab2:	4770      	bx	lr

00014ab4 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E>:
   14ab4:	b081      	sub	sp, #4
   14ab6:	4601      	mov	r1, r0
   14ab8:	f88d 0003 	strb.w	r0, [sp, #3]
   14abc:	b2c0      	uxtb	r0, r0
   14abe:	b001      	add	sp, #4
   14ac0:	4770      	bx	lr

00014ac2 <_ZN4core3mem4swap17h206518364108b51fE>:
   14ac2:	b580      	push	{r7, lr}
   14ac4:	b082      	sub	sp, #8
   14ac6:	9000      	str	r0, [sp, #0]
   14ac8:	9101      	str	r1, [sp, #4]
   14aca:	f000 fba5 	bl	15218 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE>
   14ace:	e7ff      	b.n	14ad0 <_ZN4core3mem4swap17h206518364108b51fE+0xe>
   14ad0:	b002      	add	sp, #8
   14ad2:	bd80      	pop	{r7, pc}

00014ad4 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE>:
   14ad4:	b580      	push	{r7, lr}
   14ad6:	b088      	sub	sp, #32
   14ad8:	9004      	str	r0, [sp, #16]
   14ada:	9105      	str	r1, [sp, #20]
   14adc:	9206      	str	r2, [sp, #24]
   14ade:	9307      	str	r3, [sp, #28]
   14ae0:	9003      	str	r0, [sp, #12]
   14ae2:	4610      	mov	r0, r2
   14ae4:	9102      	str	r1, [sp, #8]
   14ae6:	4619      	mov	r1, r3
   14ae8:	9a03      	ldr	r2, [sp, #12]
   14aea:	9b02      	ldr	r3, [sp, #8]
   14aec:	f7f4 f882 	bl	8bf4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
   14af0:	9001      	str	r0, [sp, #4]
   14af2:	9100      	str	r1, [sp, #0]
   14af4:	e7ff      	b.n	14af6 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE+0x22>
   14af6:	9801      	ldr	r0, [sp, #4]
   14af8:	9900      	ldr	r1, [sp, #0]
   14afa:	b008      	add	sp, #32
   14afc:	bd80      	pop	{r7, pc}

00014afe <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE>:
   14afe:	b082      	sub	sp, #8
   14b00:	9000      	str	r0, [sp, #0]
   14b02:	9101      	str	r1, [sp, #4]
   14b04:	7800      	ldrb	r0, [r0, #0]
   14b06:	7809      	ldrb	r1, [r1, #0]
   14b08:	2200      	movs	r2, #0
   14b0a:	4288      	cmp	r0, r1
   14b0c:	bf38      	it	cc
   14b0e:	2201      	movcc	r2, #1
   14b10:	4610      	mov	r0, r2
   14b12:	b002      	add	sp, #8
   14b14:	4770      	bx	lr

00014b16 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE>:
   14b16:	b580      	push	{r7, lr}
   14b18:	b088      	sub	sp, #32
   14b1a:	9005      	str	r0, [sp, #20]
   14b1c:	9106      	str	r1, [sp, #24]
   14b1e:	9002      	str	r0, [sp, #8]
   14b20:	4608      	mov	r0, r1
   14b22:	f000 fc54 	bl	153ce <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE>
   14b26:	f88d 1011 	strb.w	r1, [sp, #17]
   14b2a:	f88d 0010 	strb.w	r0, [sp, #16]
   14b2e:	e7ff      	b.n	14b30 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x1a>
   14b30:	f89d 0010 	ldrb.w	r0, [sp, #16]
   14b34:	07c1      	lsls	r1, r0, #31
   14b36:	2900      	cmp	r1, #0
   14b38:	d005      	beq.n	14b46 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x30>
   14b3a:	e7ff      	b.n	14b3c <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x26>
   14b3c:	2000      	movs	r0, #0
   14b3e:	f88d 000c 	strb.w	r0, [sp, #12]
   14b42:	e011      	b.n	14b68 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x52>
   14b44:	defe      	udf	#254	; 0xfe
   14b46:	f89d 0011 	ldrb.w	r0, [sp, #17]
   14b4a:	f88d 001f 	strb.w	r0, [sp, #31]
   14b4e:	9902      	ldr	r1, [sp, #8]
   14b50:	780a      	ldrb	r2, [r1, #0]
   14b52:	9001      	str	r0, [sp, #4]
   14b54:	4610      	mov	r0, r2
   14b56:	9901      	ldr	r1, [sp, #4]
   14b58:	f7ff fe9e 	bl	14898 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E>
   14b5c:	f88d 100d 	strb.w	r1, [sp, #13]
   14b60:	f88d 000c 	strb.w	r0, [sp, #12]
   14b64:	e7ff      	b.n	14b66 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x50>
   14b66:	e7ff      	b.n	14b68 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x52>
   14b68:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14b6c:	f89d 100d 	ldrb.w	r1, [sp, #13]
   14b70:	b008      	add	sp, #32
   14b72:	bd80      	pop	{r7, pc}

00014b74 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   14b74:	b580      	push	{r7, lr}
   14b76:	b088      	sub	sp, #32
   14b78:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   14b7a:	1d01      	adds	r1, r0, #4
   14b7c:	9106      	str	r1, [sp, #24]
   14b7e:	9107      	str	r1, [sp, #28]
   14b80:	9004      	str	r0, [sp, #16]
   14b82:	9103      	str	r1, [sp, #12]
   14b84:	e7ff      	b.n	14b86 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x12>
   14b86:	9804      	ldr	r0, [sp, #16]
   14b88:	6801      	ldr	r1, [r0, #0]
   14b8a:	9803      	ldr	r0, [sp, #12]
   14b8c:	f7f4 f8e2 	bl	8d54 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   14b90:	9002      	str	r0, [sp, #8]
   14b92:	9101      	str	r1, [sp, #4]
   14b94:	e7ff      	b.n	14b96 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x22>
    }
   14b96:	9802      	ldr	r0, [sp, #8]
   14b98:	9901      	ldr	r1, [sp, #4]
   14b9a:	b008      	add	sp, #32
   14b9c:	bd80      	pop	{r7, pc}

00014b9e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   14b9e:	b580      	push	{r7, lr}
   14ba0:	b088      	sub	sp, #32
   14ba2:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   14ba4:	1d01      	adds	r1, r0, #4
   14ba6:	9106      	str	r1, [sp, #24]
   14ba8:	9107      	str	r1, [sp, #28]
   14baa:	9004      	str	r0, [sp, #16]
   14bac:	9103      	str	r1, [sp, #12]
   14bae:	e7ff      	b.n	14bb0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE+0x12>
   14bb0:	9804      	ldr	r0, [sp, #16]
   14bb2:	6801      	ldr	r1, [r0, #0]
   14bb4:	9803      	ldr	r0, [sp, #12]
   14bb6:	f7f4 f8cd 	bl	8d54 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   14bba:	9002      	str	r0, [sp, #8]
   14bbc:	9101      	str	r1, [sp, #4]
   14bbe:	e7ff      	b.n	14bc0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE+0x22>
    }
   14bc0:	9802      	ldr	r0, [sp, #8]
   14bc2:	9901      	ldr	r1, [sp, #4]
   14bc4:	b008      	add	sp, #32
   14bc6:	bd80      	pop	{r7, pc}

00014bc8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   14bc8:	b580      	push	{r7, lr}
   14bca:	b08a      	sub	sp, #40	; 0x28
   14bcc:	460a      	mov	r2, r1
   14bce:	9006      	str	r0, [sp, #24]
   14bd0:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   14bd4:	1d01      	adds	r1, r0, #4
   14bd6:	9108      	str	r1, [sp, #32]
   14bd8:	9109      	str	r1, [sp, #36]	; 0x24
   14bda:	9005      	str	r0, [sp, #20]
   14bdc:	9204      	str	r2, [sp, #16]
   14bde:	9103      	str	r1, [sp, #12]
   14be0:	e7ff      	b.n	14be2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x1a>
            .add(self.len)
   14be2:	9805      	ldr	r0, [sp, #20]
   14be4:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   14be6:	9803      	ldr	r0, [sp, #12]
   14be8:	f7fc ff78 	bl	11adc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   14bec:	9002      	str	r0, [sp, #8]
   14bee:	e7ff      	b.n	14bf0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x28>
   14bf0:	9802      	ldr	r0, [sp, #8]
   14bf2:	9904      	ldr	r1, [sp, #16]
   14bf4:	f000 f994 	bl	14f20 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   14bf8:	e7ff      	b.n	14bfa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x32>
        self.len += 1;
   14bfa:	9805      	ldr	r0, [sp, #20]
   14bfc:	6801      	ldr	r1, [r0, #0]
   14bfe:	1c4a      	adds	r2, r1, #1
   14c00:	4613      	mov	r3, r2
   14c02:	428a      	cmp	r2, r1
   14c04:	9301      	str	r3, [sp, #4]
   14c06:	d305      	bcc.n	14c14 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x4c>
   14c08:	e7ff      	b.n	14c0a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x42>
   14c0a:	9801      	ldr	r0, [sp, #4]
   14c0c:	9905      	ldr	r1, [sp, #20]
   14c0e:	6008      	str	r0, [r1, #0]
    }
   14c10:	b00a      	add	sp, #40	; 0x28
   14c12:	bd80      	pop	{r7, pc}
        self.len += 1;
   14c14:	f24e 5010 	movw	r0, #58640	; 0xe510
   14c18:	f2c0 0001 	movt	r0, #1
   14c1c:	f24e 42f8 	movw	r2, #58616	; 0xe4f8
   14c20:	f2c0 0201 	movt	r2, #1
   14c24:	211c      	movs	r1, #28
   14c26:	f000 fce1 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14c2a:	defe      	udf	#254	; 0xfe

00014c2c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   14c2c:	b580      	push	{r7, lr}
   14c2e:	b08a      	sub	sp, #40	; 0x28
   14c30:	460a      	mov	r2, r1
   14c32:	9006      	str	r0, [sp, #24]
   14c34:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   14c38:	1d01      	adds	r1, r0, #4
   14c3a:	9108      	str	r1, [sp, #32]
   14c3c:	9109      	str	r1, [sp, #36]	; 0x24
   14c3e:	9005      	str	r0, [sp, #20]
   14c40:	9204      	str	r2, [sp, #16]
   14c42:	9103      	str	r1, [sp, #12]
   14c44:	e7ff      	b.n	14c46 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x1a>
            .add(self.len)
   14c46:	9805      	ldr	r0, [sp, #20]
   14c48:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   14c4a:	9803      	ldr	r0, [sp, #12]
   14c4c:	f7fc ff46 	bl	11adc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   14c50:	9002      	str	r0, [sp, #8]
   14c52:	e7ff      	b.n	14c54 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x28>
   14c54:	9802      	ldr	r0, [sp, #8]
   14c56:	9904      	ldr	r1, [sp, #16]
   14c58:	f000 f962 	bl	14f20 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   14c5c:	e7ff      	b.n	14c5e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x32>
        self.len += 1;
   14c5e:	9805      	ldr	r0, [sp, #20]
   14c60:	6801      	ldr	r1, [r0, #0]
   14c62:	1c4a      	adds	r2, r1, #1
   14c64:	4613      	mov	r3, r2
   14c66:	428a      	cmp	r2, r1
   14c68:	9301      	str	r3, [sp, #4]
   14c6a:	d305      	bcc.n	14c78 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x4c>
   14c6c:	e7ff      	b.n	14c6e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x42>
   14c6e:	9801      	ldr	r0, [sp, #4]
   14c70:	9905      	ldr	r1, [sp, #20]
   14c72:	6008      	str	r0, [r1, #0]
    }
   14c74:	b00a      	add	sp, #40	; 0x28
   14c76:	bd80      	pop	{r7, pc}
        self.len += 1;
   14c78:	f24e 5010 	movw	r0, #58640	; 0xe510
   14c7c:	f2c0 0001 	movt	r0, #1
   14c80:	f24e 42f8 	movw	r2, #58616	; 0xe4f8
   14c84:	f2c0 0201 	movt	r2, #1
   14c88:	211c      	movs	r1, #28
   14c8a:	f000 fcaf 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14c8e:	defe      	udf	#254	; 0xfe

00014c90 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   14c90:	b580      	push	{r7, lr}
   14c92:	b094      	sub	sp, #80	; 0x50
   14c94:	900e      	str	r0, [sp, #56]	; 0x38
   14c96:	910f      	str	r1, [sp, #60]	; 0x3c
   14c98:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   14c9a:	6803      	ldr	r3, [r0, #0]
   14c9c:	9009      	str	r0, [sp, #36]	; 0x24
   14c9e:	4608      	mov	r0, r1
   14ca0:	9108      	str	r1, [sp, #32]
   14ca2:	4611      	mov	r1, r2
   14ca4:	9207      	str	r2, [sp, #28]
   14ca6:	9306      	str	r3, [sp, #24]
   14ca8:	f7fc ffa8 	bl	11bfc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   14cac:	9005      	str	r0, [sp, #20]
   14cae:	e7ff      	b.n	14cb0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x20>
   14cb0:	9806      	ldr	r0, [sp, #24]
   14cb2:	9905      	ldr	r1, [sp, #20]
   14cb4:	1842      	adds	r2, r0, r1
   14cb6:	4613      	mov	r3, r2
   14cb8:	4282      	cmp	r2, r0
   14cba:	9304      	str	r3, [sp, #16]
   14cbc:	d33f      	bcc.n	14d3e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xae>
   14cbe:	e7ff      	b.n	14cc0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x30>
   14cc0:	9809      	ldr	r0, [sp, #36]	; 0x24
   14cc2:	f000 f8b7 	bl	14e34 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>
   14cc6:	9003      	str	r0, [sp, #12]
   14cc8:	e7ff      	b.n	14cca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x3a>
   14cca:	9804      	ldr	r0, [sp, #16]
   14ccc:	9903      	ldr	r1, [sp, #12]
   14cce:	4288      	cmp	r0, r1
   14cd0:	d807      	bhi.n	14ce2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x52>
   14cd2:	e7ff      	b.n	14cd4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x44>
            for elem in other {
   14cd4:	9808      	ldr	r0, [sp, #32]
   14cd6:	9907      	ldr	r1, [sp, #28]
   14cd8:	f7f4 f95a 	bl	8f90 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>
   14cdc:	9002      	str	r0, [sp, #8]
   14cde:	9101      	str	r1, [sp, #4]
   14ce0:	e003      	b.n	14cea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x5a>
   14ce2:	2001      	movs	r0, #1
            Err(())
   14ce4:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14ce8:	e025      	b.n	14d36 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa6>
            for elem in other {
   14cea:	9802      	ldr	r0, [sp, #8]
   14cec:	900b      	str	r0, [sp, #44]	; 0x2c
   14cee:	9901      	ldr	r1, [sp, #4]
   14cf0:	910c      	str	r1, [sp, #48]	; 0x30
   14cf2:	e7ff      	b.n	14cf4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x64>
   14cf4:	a80b      	add	r0, sp, #44	; 0x2c
   14cf6:	f7fc fc7c 	bl	115f2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>
   14cfa:	900d      	str	r0, [sp, #52]	; 0x34
   14cfc:	e7ff      	b.n	14cfe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x6e>
   14cfe:	980d      	ldr	r0, [sp, #52]	; 0x34
   14d00:	2800      	cmp	r0, #0
   14d02:	4601      	mov	r1, r0
   14d04:	bf18      	it	ne
   14d06:	2101      	movne	r1, #1
   14d08:	2800      	cmp	r0, #0
   14d0a:	d001      	beq.n	14d10 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x80>
   14d0c:	e7ff      	b.n	14d0e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x7e>
   14d0e:	e004      	b.n	14d1a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x8a>
   14d10:	2000      	movs	r0, #0
            Ok(())
   14d12:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14d16:	e00e      	b.n	14d36 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa6>
            for elem in other {
   14d18:	defe      	udf	#254	; 0xfe
   14d1a:	980d      	ldr	r0, [sp, #52]	; 0x34
   14d1c:	9011      	str	r0, [sp, #68]	; 0x44
   14d1e:	9012      	str	r0, [sp, #72]	; 0x48
   14d20:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   14d22:	f000 f909 	bl	14f38 <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>
   14d26:	9000      	str	r0, [sp, #0]
   14d28:	e7ff      	b.n	14d2a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x9a>
   14d2a:	9809      	ldr	r0, [sp, #36]	; 0x24
   14d2c:	9900      	ldr	r1, [sp, #0]
   14d2e:	f7ff ff7d 	bl	14c2c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE>
   14d32:	e7ff      	b.n	14d34 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa4>
            for elem in other {
   14d34:	e7de      	b.n	14cf4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x64>
    }
   14d36:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   14d3a:	b014      	add	sp, #80	; 0x50
   14d3c:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   14d3e:	f24e 5010 	movw	r0, #58640	; 0xe510
   14d42:	f2c0 0001 	movt	r0, #1
   14d46:	f24e 522c 	movw	r2, #58668	; 0xe52c
   14d4a:	f2c0 0201 	movt	r2, #1
   14d4e:	211c      	movs	r1, #28
   14d50:	f000 fc4c 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14d54:	defe      	udf	#254	; 0xfe

00014d56 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   14d56:	b580      	push	{r7, lr}
   14d58:	b088      	sub	sp, #32
   14d5a:	460a      	mov	r2, r1
   14d5c:	9006      	str	r0, [sp, #24]
   14d5e:	f88d 101f 	strb.w	r1, [sp, #31]
        if self.len < self.capacity() {
   14d62:	6801      	ldr	r1, [r0, #0]
   14d64:	9004      	str	r0, [sp, #16]
   14d66:	9203      	str	r2, [sp, #12]
   14d68:	9102      	str	r1, [sp, #8]
   14d6a:	f000 f859 	bl	14e20 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>
   14d6e:	9001      	str	r0, [sp, #4]
   14d70:	e7ff      	b.n	14d72 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x1c>
   14d72:	9802      	ldr	r0, [sp, #8]
   14d74:	9901      	ldr	r1, [sp, #4]
   14d76:	4288      	cmp	r0, r1
   14d78:	d307      	bcc.n	14d8a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x34>
   14d7a:	e7ff      	b.n	14d7c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x26>
            Err(item)
   14d7c:	9803      	ldr	r0, [sp, #12]
   14d7e:	f88d 0015 	strb.w	r0, [sp, #21]
   14d82:	2101      	movs	r1, #1
   14d84:	f88d 1014 	strb.w	r1, [sp, #20]
        if self.len < self.capacity() {
   14d88:	e008      	b.n	14d9c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
            unsafe { self.push_unchecked(item) }
   14d8a:	9804      	ldr	r0, [sp, #16]
   14d8c:	9903      	ldr	r1, [sp, #12]
   14d8e:	f7ff ff1b 	bl	14bc8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>
   14d92:	e7ff      	b.n	14d94 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x3e>
   14d94:	2000      	movs	r0, #0
            Ok(())
   14d96:	f88d 0014 	strb.w	r0, [sp, #20]
        if self.len < self.capacity() {
   14d9a:	e7ff      	b.n	14d9c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
    }
   14d9c:	f89d 0014 	ldrb.w	r0, [sp, #20]
   14da0:	f89d 1015 	ldrb.w	r1, [sp, #21]
   14da4:	b008      	add	sp, #32
   14da6:	bd80      	pop	{r7, pc}

00014da8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>:
    pub(crate) fn clear(&mut self) {
   14da8:	b580      	push	{r7, lr}
   14daa:	b082      	sub	sp, #8
   14dac:	9001      	str	r0, [sp, #4]
   14dae:	2100      	movs	r1, #0
        self.truncate(0);
   14db0:	f000 f880 	bl	14eb4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>
   14db4:	e7ff      	b.n	14db6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E+0xe>
    }
   14db6:	b002      	add	sp, #8
   14db8:	bd80      	pop	{r7, pc}

00014dba <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E>:
    pub(crate) fn clear(&mut self) {
   14dba:	b580      	push	{r7, lr}
   14dbc:	b082      	sub	sp, #8
   14dbe:	9001      	str	r0, [sp, #4]
   14dc0:	2100      	movs	r1, #0
        self.truncate(0);
   14dc2:	f000 f841 	bl	14e48 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E>
   14dc6:	e7ff      	b.n	14dc8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E+0xe>
    }
   14dc8:	b002      	add	sp, #8
   14dca:	bd80      	pop	{r7, pc}

00014dcc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E>:
    pub(crate) fn as_slice(&self) -> &[T] {
   14dcc:	b580      	push	{r7, lr}
   14dce:	b088      	sub	sp, #32
   14dd0:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   14dd2:	1d01      	adds	r1, r0, #4
   14dd4:	9106      	str	r1, [sp, #24]
   14dd6:	9107      	str	r1, [sp, #28]
   14dd8:	9004      	str	r0, [sp, #16]
   14dda:	9103      	str	r1, [sp, #12]
   14ddc:	e7ff      	b.n	14dde <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E+0x12>
   14dde:	9804      	ldr	r0, [sp, #16]
   14de0:	6801      	ldr	r1, [r0, #0]
   14de2:	9803      	ldr	r0, [sp, #12]
   14de4:	f7fd fb1d 	bl	12422 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   14de8:	9002      	str	r0, [sp, #8]
   14dea:	9101      	str	r1, [sp, #4]
   14dec:	e7ff      	b.n	14dee <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E+0x22>
    }
   14dee:	9802      	ldr	r0, [sp, #8]
   14df0:	9901      	ldr	r1, [sp, #4]
   14df2:	b008      	add	sp, #32
   14df4:	bd80      	pop	{r7, pc}

00014df6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   14df6:	b580      	push	{r7, lr}
   14df8:	b088      	sub	sp, #32
   14dfa:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   14dfc:	1d01      	adds	r1, r0, #4
   14dfe:	9106      	str	r1, [sp, #24]
   14e00:	9107      	str	r1, [sp, #28]
   14e02:	9004      	str	r0, [sp, #16]
   14e04:	9103      	str	r1, [sp, #12]
   14e06:	e7ff      	b.n	14e08 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x12>
   14e08:	9804      	ldr	r0, [sp, #16]
   14e0a:	6801      	ldr	r1, [r0, #0]
   14e0c:	9803      	ldr	r0, [sp, #12]
   14e0e:	f7fd fb08 	bl	12422 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   14e12:	9002      	str	r0, [sp, #8]
   14e14:	9101      	str	r1, [sp, #4]
   14e16:	e7ff      	b.n	14e18 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x22>
    }
   14e18:	9802      	ldr	r0, [sp, #8]
   14e1a:	9901      	ldr	r1, [sp, #4]
   14e1c:	b008      	add	sp, #32
   14e1e:	bd80      	pop	{r7, pc}

00014e20 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>:
    pub(crate) fn capacity(&self) -> usize {
   14e20:	b580      	push	{r7, lr}
   14e22:	b082      	sub	sp, #8
   14e24:	9001      	str	r0, [sp, #4]
        N::to_usize()
   14e26:	f000 f964 	bl	150f2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   14e2a:	9000      	str	r0, [sp, #0]
   14e2c:	e7ff      	b.n	14e2e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E+0xe>
    }
   14e2e:	9800      	ldr	r0, [sp, #0]
   14e30:	b002      	add	sp, #8
   14e32:	bd80      	pop	{r7, pc}

00014e34 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>:
    pub(crate) fn capacity(&self) -> usize {
   14e34:	b580      	push	{r7, lr}
   14e36:	b082      	sub	sp, #8
   14e38:	9001      	str	r0, [sp, #4]
        N::to_usize()
   14e3a:	f000 f8b2 	bl	14fa2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E>
   14e3e:	9000      	str	r0, [sp, #0]
   14e40:	e7ff      	b.n	14e42 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE+0xe>
    }
   14e42:	9800      	ldr	r0, [sp, #0]
   14e44:	b002      	add	sp, #8
   14e46:	bd80      	pop	{r7, pc}

00014e48 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   14e48:	b580      	push	{r7, lr}
   14e4a:	b08a      	sub	sp, #40	; 0x28
   14e4c:	9007      	str	r0, [sp, #28]
   14e4e:	9108      	str	r1, [sp, #32]
   14e50:	9106      	str	r1, [sp, #24]
   14e52:	9005      	str	r0, [sp, #20]
   14e54:	e7ff      	b.n	14e56 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0xe>
            while len < self.len {
   14e56:	9805      	ldr	r0, [sp, #20]
   14e58:	6801      	ldr	r1, [r0, #0]
   14e5a:	9a06      	ldr	r2, [sp, #24]
   14e5c:	428a      	cmp	r2, r1
   14e5e:	d302      	bcc.n	14e66 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x1e>
   14e60:	e7ff      	b.n	14e62 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x1a>
    }
   14e62:	b00a      	add	sp, #40	; 0x28
   14e64:	bd80      	pop	{r7, pc}
                self.len -= 1;
   14e66:	9805      	ldr	r0, [sp, #20]
   14e68:	6801      	ldr	r1, [r0, #0]
   14e6a:	1e4a      	subs	r2, r1, #1
   14e6c:	2901      	cmp	r1, #1
   14e6e:	9204      	str	r2, [sp, #16]
   14e70:	d314      	bcc.n	14e9c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x54>
   14e72:	e7ff      	b.n	14e74 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x2c>
   14e74:	9804      	ldr	r0, [sp, #16]
   14e76:	9905      	ldr	r1, [sp, #20]
   14e78:	6008      	str	r0, [r1, #0]
                let len = self.len;
   14e7a:	680a      	ldr	r2, [r1, #0]
   14e7c:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   14e7e:	4608      	mov	r0, r1
   14e80:	9203      	str	r2, [sp, #12]
   14e82:	f7ff fe8c 	bl	14b9e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE>
   14e86:	9002      	str	r0, [sp, #8]
   14e88:	9101      	str	r1, [sp, #4]
   14e8a:	e7ff      	b.n	14e8c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x44>
   14e8c:	9802      	ldr	r0, [sp, #8]
   14e8e:	9901      	ldr	r1, [sp, #4]
   14e90:	9a03      	ldr	r2, [sp, #12]
   14e92:	f7fc fea1 	bl	11bd8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   14e96:	e7ff      	b.n	14e98 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x50>
   14e98:	e7ff      	b.n	14e9a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x52>
            while len < self.len {
   14e9a:	e7dc      	b.n	14e56 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0xe>
                self.len -= 1;
   14e9c:	f24e 5050 	movw	r0, #58704	; 0xe550
   14ea0:	f2c0 0001 	movt	r0, #1
   14ea4:	f24e 523c 	movw	r2, #58684	; 0xe53c
   14ea8:	f2c0 0201 	movt	r2, #1
   14eac:	2121      	movs	r1, #33	; 0x21
   14eae:	f000 fb9d 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14eb2:	defe      	udf	#254	; 0xfe

00014eb4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   14eb4:	b580      	push	{r7, lr}
   14eb6:	b08a      	sub	sp, #40	; 0x28
   14eb8:	9007      	str	r0, [sp, #28]
   14eba:	9108      	str	r1, [sp, #32]
   14ebc:	9106      	str	r1, [sp, #24]
   14ebe:	9005      	str	r0, [sp, #20]
   14ec0:	e7ff      	b.n	14ec2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
            while len < self.len {
   14ec2:	9805      	ldr	r0, [sp, #20]
   14ec4:	6801      	ldr	r1, [r0, #0]
   14ec6:	9a06      	ldr	r2, [sp, #24]
   14ec8:	428a      	cmp	r2, r1
   14eca:	d302      	bcc.n	14ed2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1e>
   14ecc:	e7ff      	b.n	14ece <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1a>
    }
   14ece:	b00a      	add	sp, #40	; 0x28
   14ed0:	bd80      	pop	{r7, pc}
                self.len -= 1;
   14ed2:	9805      	ldr	r0, [sp, #20]
   14ed4:	6801      	ldr	r1, [r0, #0]
   14ed6:	1e4a      	subs	r2, r1, #1
   14ed8:	2901      	cmp	r1, #1
   14eda:	9204      	str	r2, [sp, #16]
   14edc:	d314      	bcc.n	14f08 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x54>
   14ede:	e7ff      	b.n	14ee0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x2c>
   14ee0:	9804      	ldr	r0, [sp, #16]
   14ee2:	9905      	ldr	r1, [sp, #20]
   14ee4:	6008      	str	r0, [r1, #0]
                let len = self.len;
   14ee6:	680a      	ldr	r2, [r1, #0]
   14ee8:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   14eea:	4608      	mov	r0, r1
   14eec:	9203      	str	r2, [sp, #12]
   14eee:	f7ff fe41 	bl	14b74 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>
   14ef2:	9002      	str	r0, [sp, #8]
   14ef4:	9101      	str	r1, [sp, #4]
   14ef6:	e7ff      	b.n	14ef8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x44>
   14ef8:	9802      	ldr	r0, [sp, #8]
   14efa:	9901      	ldr	r1, [sp, #4]
   14efc:	9a03      	ldr	r2, [sp, #12]
   14efe:	f7fc fe6b 	bl	11bd8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   14f02:	e7ff      	b.n	14f04 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x50>
   14f04:	e7ff      	b.n	14f06 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x52>
            while len < self.len {
   14f06:	e7dc      	b.n	14ec2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
                self.len -= 1;
   14f08:	f24e 5050 	movw	r0, #58704	; 0xe550
   14f0c:	f2c0 0001 	movt	r0, #1
   14f10:	f24e 523c 	movw	r2, #58684	; 0xe53c
   14f14:	f2c0 0201 	movt	r2, #1
   14f18:	2121      	movs	r1, #33	; 0x21
   14f1a:	f000 fb67 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14f1e:	defe      	udf	#254	; 0xfe

00014f20 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>:
   14f20:	b580      	push	{r7, lr}
   14f22:	b084      	sub	sp, #16
   14f24:	460a      	mov	r2, r1
   14f26:	9002      	str	r0, [sp, #8]
   14f28:	f88d 100f 	strb.w	r1, [sp, #15]
   14f2c:	9201      	str	r2, [sp, #4]
   14f2e:	f7f4 f8b7 	bl	90a0 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   14f32:	e7ff      	b.n	14f34 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE+0x14>
   14f34:	b004      	add	sp, #16
   14f36:	bd80      	pop	{r7, pc}

00014f38 <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>:
   14f38:	b081      	sub	sp, #4
   14f3a:	9000      	str	r0, [sp, #0]
   14f3c:	7800      	ldrb	r0, [r0, #0]
   14f3e:	b001      	add	sp, #4
   14f40:	4770      	bx	lr

00014f42 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>:
    #[inline]
    fn to_u128() -> u128 {
        u128::from(B::to_u8()) | U::to_u128() << 1
    }
    #[inline]
    fn to_usize() -> usize {
   14f42:	b580      	push	{r7, lr}
   14f44:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14f46:	f000 fa5b 	bl	15400 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14f4a:	9003      	str	r0, [sp, #12]
   14f4c:	e7ff      	b.n	14f4e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0xc>
   14f4e:	9803      	ldr	r0, [sp, #12]
   14f50:	f000 fa5c 	bl	1540c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14f54:	9002      	str	r0, [sp, #8]
   14f56:	e7ff      	b.n	14f58 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x16>
   14f58:	f000 f8cb 	bl	150f2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   14f5c:	9001      	str	r0, [sp, #4]
   14f5e:	e7ff      	b.n	14f60 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x1e>
   14f60:	9801      	ldr	r0, [sp, #4]
   14f62:	0041      	lsls	r1, r0, #1
   14f64:	9100      	str	r1, [sp, #0]
   14f66:	e7ff      	b.n	14f68 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x26>
   14f68:	9802      	ldr	r0, [sp, #8]
   14f6a:	9900      	ldr	r1, [sp, #0]
   14f6c:	4308      	orrs	r0, r1
    }
   14f6e:	b004      	add	sp, #16
   14f70:	bd80      	pop	{r7, pc}

00014f72 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>:
    fn to_usize() -> usize {
   14f72:	b580      	push	{r7, lr}
   14f74:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14f76:	f000 fa43 	bl	15400 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14f7a:	9003      	str	r0, [sp, #12]
   14f7c:	e7ff      	b.n	14f7e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0xc>
   14f7e:	9803      	ldr	r0, [sp, #12]
   14f80:	f000 fa44 	bl	1540c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14f84:	9002      	str	r0, [sp, #8]
   14f86:	e7ff      	b.n	14f88 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x16>
   14f88:	f000 f86b 	bl	15062 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>
   14f8c:	9001      	str	r0, [sp, #4]
   14f8e:	e7ff      	b.n	14f90 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x1e>
   14f90:	9801      	ldr	r0, [sp, #4]
   14f92:	0041      	lsls	r1, r0, #1
   14f94:	9100      	str	r1, [sp, #0]
   14f96:	e7ff      	b.n	14f98 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x26>
   14f98:	9802      	ldr	r0, [sp, #8]
   14f9a:	9900      	ldr	r1, [sp, #0]
   14f9c:	4308      	orrs	r0, r1
    }
   14f9e:	b004      	add	sp, #16
   14fa0:	bd80      	pop	{r7, pc}

00014fa2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E>:
    fn to_usize() -> usize {
   14fa2:	b580      	push	{r7, lr}
   14fa4:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14fa6:	f000 fa2b 	bl	15400 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14faa:	9003      	str	r0, [sp, #12]
   14fac:	e7ff      	b.n	14fae <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0xc>
   14fae:	9803      	ldr	r0, [sp, #12]
   14fb0:	f000 fa2c 	bl	1540c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14fb4:	9002      	str	r0, [sp, #8]
   14fb6:	e7ff      	b.n	14fb8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x16>
   14fb8:	f000 f8fb 	bl	151b2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>
   14fbc:	9001      	str	r0, [sp, #4]
   14fbe:	e7ff      	b.n	14fc0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x1e>
   14fc0:	9801      	ldr	r0, [sp, #4]
   14fc2:	0041      	lsls	r1, r0, #1
   14fc4:	9100      	str	r1, [sp, #0]
   14fc6:	e7ff      	b.n	14fc8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x26>
   14fc8:	9802      	ldr	r0, [sp, #8]
   14fca:	9900      	ldr	r1, [sp, #0]
   14fcc:	4308      	orrs	r0, r1
    }
   14fce:	b004      	add	sp, #16
   14fd0:	bd80      	pop	{r7, pc}

00014fd2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>:
    fn to_usize() -> usize {
   14fd2:	b580      	push	{r7, lr}
   14fd4:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14fd6:	f000 fa13 	bl	15400 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14fda:	9003      	str	r0, [sp, #12]
   14fdc:	e7ff      	b.n	14fde <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0xc>
   14fde:	9803      	ldr	r0, [sp, #12]
   14fe0:	f000 fa14 	bl	1540c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14fe4:	9002      	str	r0, [sp, #8]
   14fe6:	e7ff      	b.n	14fe8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x16>
   14fe8:	f000 f80b 	bl	15002 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>
   14fec:	9001      	str	r0, [sp, #4]
   14fee:	e7ff      	b.n	14ff0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x1e>
   14ff0:	9801      	ldr	r0, [sp, #4]
   14ff2:	0041      	lsls	r1, r0, #1
   14ff4:	9100      	str	r1, [sp, #0]
   14ff6:	e7ff      	b.n	14ff8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x26>
   14ff8:	9802      	ldr	r0, [sp, #8]
   14ffa:	9900      	ldr	r1, [sp, #0]
   14ffc:	4308      	orrs	r0, r1
    }
   14ffe:	b004      	add	sp, #16
   15000:	bd80      	pop	{r7, pc}

00015002 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>:
    fn to_usize() -> usize {
   15002:	b580      	push	{r7, lr}
   15004:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15006:	f000 f9fb 	bl	15400 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1500a:	9003      	str	r0, [sp, #12]
   1500c:	e7ff      	b.n	1500e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0xc>
   1500e:	9803      	ldr	r0, [sp, #12]
   15010:	f000 f9fc 	bl	1540c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   15014:	9002      	str	r0, [sp, #8]
   15016:	e7ff      	b.n	15018 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x16>
   15018:	f000 f89b 	bl	15152 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>
   1501c:	9001      	str	r0, [sp, #4]
   1501e:	e7ff      	b.n	15020 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x1e>
   15020:	9801      	ldr	r0, [sp, #4]
   15022:	0041      	lsls	r1, r0, #1
   15024:	9100      	str	r1, [sp, #0]
   15026:	e7ff      	b.n	15028 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x26>
   15028:	9802      	ldr	r0, [sp, #8]
   1502a:	9900      	ldr	r1, [sp, #0]
   1502c:	4308      	orrs	r0, r1
    }
   1502e:	b004      	add	sp, #16
   15030:	bd80      	pop	{r7, pc}

00015032 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>:
    fn to_usize() -> usize {
   15032:	b580      	push	{r7, lr}
   15034:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15036:	f000 f9e3 	bl	15400 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1503a:	9003      	str	r0, [sp, #12]
   1503c:	e7ff      	b.n	1503e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0xc>
   1503e:	9803      	ldr	r0, [sp, #12]
   15040:	f000 f9e4 	bl	1540c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   15044:	9002      	str	r0, [sp, #8]
   15046:	e7ff      	b.n	15048 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x16>
   15048:	f7ff ff7b 	bl	14f42 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>
   1504c:	9001      	str	r0, [sp, #4]
   1504e:	e7ff      	b.n	15050 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x1e>
   15050:	9801      	ldr	r0, [sp, #4]
   15052:	0041      	lsls	r1, r0, #1
   15054:	9100      	str	r1, [sp, #0]
   15056:	e7ff      	b.n	15058 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x26>
   15058:	9802      	ldr	r0, [sp, #8]
   1505a:	9900      	ldr	r1, [sp, #0]
   1505c:	4308      	orrs	r0, r1
    }
   1505e:	b004      	add	sp, #16
   15060:	bd80      	pop	{r7, pc}

00015062 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>:
    fn to_usize() -> usize {
   15062:	b580      	push	{r7, lr}
   15064:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15066:	f000 f9cb 	bl	15400 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1506a:	9003      	str	r0, [sp, #12]
   1506c:	e7ff      	b.n	1506e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0xc>
   1506e:	9803      	ldr	r0, [sp, #12]
   15070:	f000 f9cc 	bl	1540c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   15074:	9002      	str	r0, [sp, #8]
   15076:	e7ff      	b.n	15078 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x16>
   15078:	f000 f823 	bl	150c2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>
   1507c:	9001      	str	r0, [sp, #4]
   1507e:	e7ff      	b.n	15080 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x1e>
   15080:	9801      	ldr	r0, [sp, #4]
   15082:	0041      	lsls	r1, r0, #1
   15084:	9100      	str	r1, [sp, #0]
   15086:	e7ff      	b.n	15088 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x26>
   15088:	9802      	ldr	r0, [sp, #8]
   1508a:	9900      	ldr	r1, [sp, #0]
   1508c:	4308      	orrs	r0, r1
    }
   1508e:	b004      	add	sp, #16
   15090:	bd80      	pop	{r7, pc}

00015092 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>:
    fn to_usize() -> usize {
   15092:	b580      	push	{r7, lr}
   15094:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15096:	f000 f9b3 	bl	15400 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1509a:	9003      	str	r0, [sp, #12]
   1509c:	e7ff      	b.n	1509e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0xc>
   1509e:	9803      	ldr	r0, [sp, #12]
   150a0:	f000 f9b4 	bl	1540c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   150a4:	9002      	str	r0, [sp, #8]
   150a6:	e7ff      	b.n	150a8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x16>
   150a8:	f000 f86b 	bl	15182 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>
   150ac:	9001      	str	r0, [sp, #4]
   150ae:	e7ff      	b.n	150b0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x1e>
   150b0:	9801      	ldr	r0, [sp, #4]
   150b2:	0041      	lsls	r1, r0, #1
   150b4:	9100      	str	r1, [sp, #0]
   150b6:	e7ff      	b.n	150b8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x26>
   150b8:	9802      	ldr	r0, [sp, #8]
   150ba:	9900      	ldr	r1, [sp, #0]
   150bc:	4308      	orrs	r0, r1
    }
   150be:	b004      	add	sp, #16
   150c0:	bd80      	pop	{r7, pc}

000150c2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>:
    fn to_usize() -> usize {
   150c2:	b580      	push	{r7, lr}
   150c4:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   150c6:	f000 f99b 	bl	15400 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   150ca:	9003      	str	r0, [sp, #12]
   150cc:	e7ff      	b.n	150ce <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0xc>
   150ce:	9803      	ldr	r0, [sp, #12]
   150d0:	f000 f99c 	bl	1540c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   150d4:	9002      	str	r0, [sp, #8]
   150d6:	e7ff      	b.n	150d8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x16>
   150d8:	f000 f823 	bl	15122 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>
   150dc:	9001      	str	r0, [sp, #4]
   150de:	e7ff      	b.n	150e0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x1e>
   150e0:	9801      	ldr	r0, [sp, #4]
   150e2:	0041      	lsls	r1, r0, #1
   150e4:	9100      	str	r1, [sp, #0]
   150e6:	e7ff      	b.n	150e8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x26>
   150e8:	9802      	ldr	r0, [sp, #8]
   150ea:	9900      	ldr	r1, [sp, #0]
   150ec:	4308      	orrs	r0, r1
    }
   150ee:	b004      	add	sp, #16
   150f0:	bd80      	pop	{r7, pc}

000150f2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>:
    fn to_usize() -> usize {
   150f2:	b580      	push	{r7, lr}
   150f4:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   150f6:	f000 f985 	bl	15404 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>
   150fa:	9003      	str	r0, [sp, #12]
   150fc:	e7ff      	b.n	150fe <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0xc>
   150fe:	9803      	ldr	r0, [sp, #12]
   15100:	f000 f984 	bl	1540c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   15104:	9002      	str	r0, [sp, #8]
   15106:	e7ff      	b.n	15108 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x16>
   15108:	f000 f97e 	bl	15408 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>
   1510c:	9001      	str	r0, [sp, #4]
   1510e:	e7ff      	b.n	15110 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x1e>
   15110:	9801      	ldr	r0, [sp, #4]
   15112:	0041      	lsls	r1, r0, #1
   15114:	9100      	str	r1, [sp, #0]
   15116:	e7ff      	b.n	15118 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x26>
   15118:	9802      	ldr	r0, [sp, #8]
   1511a:	9900      	ldr	r1, [sp, #0]
   1511c:	4308      	orrs	r0, r1
    }
   1511e:	b004      	add	sp, #16
   15120:	bd80      	pop	{r7, pc}

00015122 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>:
    fn to_usize() -> usize {
   15122:	b580      	push	{r7, lr}
   15124:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15126:	f000 f96b 	bl	15400 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1512a:	9003      	str	r0, [sp, #12]
   1512c:	e7ff      	b.n	1512e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0xc>
   1512e:	9803      	ldr	r0, [sp, #12]
   15130:	f000 f96c 	bl	1540c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   15134:	9002      	str	r0, [sp, #8]
   15136:	e7ff      	b.n	15138 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x16>
   15138:	f7ff ff7b 	bl	15032 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>
   1513c:	9001      	str	r0, [sp, #4]
   1513e:	e7ff      	b.n	15140 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x1e>
   15140:	9801      	ldr	r0, [sp, #4]
   15142:	0041      	lsls	r1, r0, #1
   15144:	9100      	str	r1, [sp, #0]
   15146:	e7ff      	b.n	15148 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x26>
   15148:	9802      	ldr	r0, [sp, #8]
   1514a:	9900      	ldr	r1, [sp, #0]
   1514c:	4308      	orrs	r0, r1
    }
   1514e:	b004      	add	sp, #16
   15150:	bd80      	pop	{r7, pc}

00015152 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>:
    fn to_usize() -> usize {
   15152:	b580      	push	{r7, lr}
   15154:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15156:	f000 f953 	bl	15400 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1515a:	9003      	str	r0, [sp, #12]
   1515c:	e7ff      	b.n	1515e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0xc>
   1515e:	9803      	ldr	r0, [sp, #12]
   15160:	f000 f954 	bl	1540c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   15164:	9002      	str	r0, [sp, #8]
   15166:	e7ff      	b.n	15168 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x16>
   15168:	f7ff ff03 	bl	14f72 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>
   1516c:	9001      	str	r0, [sp, #4]
   1516e:	e7ff      	b.n	15170 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x1e>
   15170:	9801      	ldr	r0, [sp, #4]
   15172:	0041      	lsls	r1, r0, #1
   15174:	9100      	str	r1, [sp, #0]
   15176:	e7ff      	b.n	15178 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x26>
   15178:	9802      	ldr	r0, [sp, #8]
   1517a:	9900      	ldr	r1, [sp, #0]
   1517c:	4308      	orrs	r0, r1
    }
   1517e:	b004      	add	sp, #16
   15180:	bd80      	pop	{r7, pc}

00015182 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>:
    fn to_usize() -> usize {
   15182:	b580      	push	{r7, lr}
   15184:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15186:	f000 f93b 	bl	15400 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1518a:	9003      	str	r0, [sp, #12]
   1518c:	e7ff      	b.n	1518e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0xc>
   1518e:	9803      	ldr	r0, [sp, #12]
   15190:	f000 f93c 	bl	1540c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   15194:	9002      	str	r0, [sp, #8]
   15196:	e7ff      	b.n	15198 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x16>
   15198:	f7ff ff1b 	bl	14fd2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>
   1519c:	9001      	str	r0, [sp, #4]
   1519e:	e7ff      	b.n	151a0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x1e>
   151a0:	9801      	ldr	r0, [sp, #4]
   151a2:	0041      	lsls	r1, r0, #1
   151a4:	9100      	str	r1, [sp, #0]
   151a6:	e7ff      	b.n	151a8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x26>
   151a8:	9802      	ldr	r0, [sp, #8]
   151aa:	9900      	ldr	r1, [sp, #0]
   151ac:	4308      	orrs	r0, r1
    }
   151ae:	b004      	add	sp, #16
   151b0:	bd80      	pop	{r7, pc}

000151b2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>:
    fn to_usize() -> usize {
   151b2:	b580      	push	{r7, lr}
   151b4:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   151b6:	f000 f923 	bl	15400 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   151ba:	9003      	str	r0, [sp, #12]
   151bc:	e7ff      	b.n	151be <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0xc>
   151be:	9803      	ldr	r0, [sp, #12]
   151c0:	f000 f924 	bl	1540c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   151c4:	9002      	str	r0, [sp, #8]
   151c6:	e7ff      	b.n	151c8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x16>
   151c8:	f7ff ff63 	bl	15092 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>
   151cc:	9001      	str	r0, [sp, #4]
   151ce:	e7ff      	b.n	151d0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x1e>
   151d0:	9801      	ldr	r0, [sp, #4]
   151d2:	0041      	lsls	r1, r0, #1
   151d4:	9100      	str	r1, [sp, #0]
   151d6:	e7ff      	b.n	151d8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x26>
   151d8:	9802      	ldr	r0, [sp, #8]
   151da:	9900      	ldr	r1, [sp, #0]
   151dc:	4308      	orrs	r0, r1
    }
   151de:	b004      	add	sp, #16
   151e0:	bd80      	pop	{r7, pc}

000151e2 <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE>:
   151e2:	b580      	push	{r7, lr}
   151e4:	b08c      	sub	sp, #48	; 0x30
   151e6:	9005      	str	r0, [sp, #20]
   151e8:	9106      	str	r1, [sp, #24]
   151ea:	9207      	str	r2, [sp, #28]
   151ec:	9008      	str	r0, [sp, #32]
   151ee:	9109      	str	r1, [sp, #36]	; 0x24
   151f0:	2301      	movs	r3, #1
   151f2:	930b      	str	r3, [sp, #44]	; 0x2c
   151f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   151f6:	9204      	str	r2, [sp, #16]
   151f8:	9103      	str	r1, [sp, #12]
   151fa:	9002      	str	r0, [sp, #8]
   151fc:	9301      	str	r3, [sp, #4]
   151fe:	e7ff      	b.n	15200 <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE+0x1e>
   15200:	9801      	ldr	r0, [sp, #4]
   15202:	9904      	ldr	r1, [sp, #16]
   15204:	fb00 f201 	mul.w	r2, r0, r1
   15208:	920a      	str	r2, [sp, #40]	; 0x28
   1520a:	9802      	ldr	r0, [sp, #8]
   1520c:	9903      	ldr	r1, [sp, #12]
   1520e:	f000 f850 	bl	152b2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE>
   15212:	e7ff      	b.n	15214 <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE+0x32>
   15214:	b00c      	add	sp, #48	; 0x30
   15216:	bd80      	pop	{r7, pc}

00015218 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE>:
   15218:	b580      	push	{r7, lr}
   1521a:	b088      	sub	sp, #32
   1521c:	9004      	str	r0, [sp, #16]
   1521e:	9105      	str	r1, [sp, #20]
   15220:	2201      	movs	r2, #1
   15222:	9207      	str	r2, [sp, #28]
   15224:	9a07      	ldr	r2, [sp, #28]
   15226:	9103      	str	r1, [sp, #12]
   15228:	9002      	str	r0, [sp, #8]
   1522a:	9201      	str	r2, [sp, #4]
   1522c:	e7ff      	b.n	1522e <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x16>
   1522e:	9801      	ldr	r0, [sp, #4]
   15230:	2820      	cmp	r0, #32
   15232:	d306      	bcc.n	15242 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x2a>
   15234:	e7ff      	b.n	15236 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x1e>
   15236:	2201      	movs	r2, #1
   15238:	9802      	ldr	r0, [sp, #8]
   1523a:	9903      	ldr	r1, [sp, #12]
   1523c:	f7ff ffd1 	bl	151e2 <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE>
   15240:	e013      	b.n	1526a <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x52>
   15242:	9802      	ldr	r0, [sp, #8]
   15244:	f000 f814 	bl	15270 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE>
   15248:	4601      	mov	r1, r0
   1524a:	f88d 001b 	strb.w	r0, [sp, #27]
   1524e:	9100      	str	r1, [sp, #0]
   15250:	e7ff      	b.n	15252 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x3a>
   15252:	2201      	movs	r2, #1
   15254:	9803      	ldr	r0, [sp, #12]
   15256:	9902      	ldr	r1, [sp, #8]
   15258:	f7fc fadc 	bl	11814 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1525c:	e7ff      	b.n	1525e <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x46>
   1525e:	9803      	ldr	r0, [sp, #12]
   15260:	9900      	ldr	r1, [sp, #0]
   15262:	f7f3 ff1d 	bl	90a0 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   15266:	e7ff      	b.n	15268 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x50>
   15268:	e000      	b.n	1526c <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x54>
   1526a:	e7ff      	b.n	1526c <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x54>
   1526c:	b008      	add	sp, #32
   1526e:	bd80      	pop	{r7, pc}

00015270 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE>:
   15270:	b580      	push	{r7, lr}
   15272:	b088      	sub	sp, #32
   15274:	9004      	str	r0, [sp, #16]
   15276:	f89d 1015 	ldrb.w	r1, [sp, #21]
   1527a:	f88d 100f 	strb.w	r1, [sp, #15]
   1527e:	9002      	str	r0, [sp, #8]
   15280:	e7ff      	b.n	15282 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x12>
   15282:	f10d 000f 	add.w	r0, sp, #15
   15286:	9006      	str	r0, [sp, #24]
   15288:	9007      	str	r0, [sp, #28]
   1528a:	e7ff      	b.n	1528c <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x1c>
   1528c:	f10d 010f 	add.w	r1, sp, #15
   15290:	2201      	movs	r2, #1
   15292:	9802      	ldr	r0, [sp, #8]
   15294:	f7fc fabe 	bl	11814 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   15298:	e7ff      	b.n	1529a <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x2a>
   1529a:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1529e:	4601      	mov	r1, r0
   152a0:	f88d 0016 	strb.w	r0, [sp, #22]
   152a4:	f88d 0017 	strb.w	r0, [sp, #23]
   152a8:	9101      	str	r1, [sp, #4]
   152aa:	e7ff      	b.n	152ac <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x3c>
   152ac:	9801      	ldr	r0, [sp, #4]
   152ae:	b008      	add	sp, #32
   152b0:	bd80      	pop	{r7, pc}

000152b2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE>:
   152b2:	b5d0      	push	{r4, r6, r7, lr}
   152b4:	af02      	add	r7, sp, #8
   152b6:	b0b4      	sub	sp, #208	; 0xd0
   152b8:	466c      	mov	r4, sp
   152ba:	f36f 0404 	bfc	r4, #0, #5
   152be:	46a5      	mov	sp, r4
   152c0:	9024      	str	r0, [sp, #144]	; 0x90
   152c2:	9125      	str	r1, [sp, #148]	; 0x94
   152c4:	9226      	str	r2, [sp, #152]	; 0x98
   152c6:	2320      	movs	r3, #32
   152c8:	932f      	str	r3, [sp, #188]	; 0xbc
   152ca:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   152cc:	9327      	str	r3, [sp, #156]	; 0x9c
   152ce:	920e      	str	r2, [sp, #56]	; 0x38
   152d0:	910d      	str	r1, [sp, #52]	; 0x34
   152d2:	900c      	str	r0, [sp, #48]	; 0x30
   152d4:	930b      	str	r3, [sp, #44]	; 0x2c
   152d6:	e7ff      	b.n	152d8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x26>
   152d8:	2000      	movs	r0, #0
   152da:	900f      	str	r0, [sp, #60]	; 0x3c
   152dc:	e7ff      	b.n	152de <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x2c>
   152de:	980f      	ldr	r0, [sp, #60]	; 0x3c
   152e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   152e2:	4408      	add	r0, r1
   152e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   152e6:	4290      	cmp	r0, r2
   152e8:	d905      	bls.n	152f6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x44>
   152ea:	e7ff      	b.n	152ec <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x3a>
   152ec:	980f      	ldr	r0, [sp, #60]	; 0x3c
   152ee:	990e      	ldr	r1, [sp, #56]	; 0x38
   152f0:	4288      	cmp	r0, r1
   152f2:	d334      	bcc.n	1535e <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xac>
   152f4:	e067      	b.n	153c6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x114>
   152f6:	e7ff      	b.n	152f8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x46>
   152f8:	a810      	add	r0, sp, #64	; 0x40
   152fa:	9032      	str	r0, [sp, #200]	; 0xc8
   152fc:	9033      	str	r0, [sp, #204]	; 0xcc
   152fe:	e7ff      	b.n	15300 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x4e>
   15300:	a810      	add	r0, sp, #64	; 0x40
   15302:	4601      	mov	r1, r0
   15304:	9028      	str	r0, [sp, #160]	; 0xa0
   15306:	980f      	ldr	r0, [sp, #60]	; 0x3c
   15308:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1530a:	900a      	str	r0, [sp, #40]	; 0x28
   1530c:	4610      	mov	r0, r2
   1530e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15310:	9109      	str	r1, [sp, #36]	; 0x24
   15312:	4619      	mov	r1, r3
   15314:	f7fc fbe2 	bl	11adc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   15318:	4601      	mov	r1, r0
   1531a:	9029      	str	r0, [sp, #164]	; 0xa4
   1531c:	9108      	str	r1, [sp, #32]
   1531e:	e7ff      	b.n	15320 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x6e>
   15320:	990f      	ldr	r1, [sp, #60]	; 0x3c
   15322:	980d      	ldr	r0, [sp, #52]	; 0x34
   15324:	f7fc fbda 	bl	11adc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   15328:	4601      	mov	r1, r0
   1532a:	902a      	str	r0, [sp, #168]	; 0xa8
   1532c:	9107      	str	r1, [sp, #28]
   1532e:	e7ff      	b.n	15330 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x7e>
   15330:	9808      	ldr	r0, [sp, #32]
   15332:	9909      	ldr	r1, [sp, #36]	; 0x24
   15334:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15336:	f7fc fa6d 	bl	11814 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1533a:	e7ff      	b.n	1533c <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x8a>
   1533c:	9807      	ldr	r0, [sp, #28]
   1533e:	9908      	ldr	r1, [sp, #32]
   15340:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15342:	f7fc fa67 	bl	11814 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   15346:	e7ff      	b.n	15348 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x96>
   15348:	9809      	ldr	r0, [sp, #36]	; 0x24
   1534a:	9907      	ldr	r1, [sp, #28]
   1534c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1534e:	f7fc fa61 	bl	11814 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   15352:	e7ff      	b.n	15354 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xa2>
   15354:	980f      	ldr	r0, [sp, #60]	; 0x3c
   15356:	990b      	ldr	r1, [sp, #44]	; 0x2c
   15358:	4408      	add	r0, r1
   1535a:	900f      	str	r0, [sp, #60]	; 0x3c
   1535c:	e7bf      	b.n	152de <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x2c>
   1535e:	e7ff      	b.n	15360 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xae>
   15360:	980f      	ldr	r0, [sp, #60]	; 0x3c
   15362:	990e      	ldr	r1, [sp, #56]	; 0x38
   15364:	1a08      	subs	r0, r1, r0
   15366:	4602      	mov	r2, r0
   15368:	902b      	str	r0, [sp, #172]	; 0xac
   1536a:	a81c      	add	r0, sp, #112	; 0x70
   1536c:	9030      	str	r0, [sp, #192]	; 0xc0
   1536e:	9031      	str	r0, [sp, #196]	; 0xc4
   15370:	9206      	str	r2, [sp, #24]
   15372:	9005      	str	r0, [sp, #20]
   15374:	e7ff      	b.n	15376 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xc4>
   15376:	9805      	ldr	r0, [sp, #20]
   15378:	9905      	ldr	r1, [sp, #20]
   1537a:	912c      	str	r1, [sp, #176]	; 0xb0
   1537c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1537e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15380:	9004      	str	r0, [sp, #16]
   15382:	4610      	mov	r0, r2
   15384:	f7fc fbaa 	bl	11adc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   15388:	4601      	mov	r1, r0
   1538a:	902d      	str	r0, [sp, #180]	; 0xb4
   1538c:	9103      	str	r1, [sp, #12]
   1538e:	e7ff      	b.n	15390 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xde>
   15390:	990f      	ldr	r1, [sp, #60]	; 0x3c
   15392:	980d      	ldr	r0, [sp, #52]	; 0x34
   15394:	f7fc fba2 	bl	11adc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   15398:	4601      	mov	r1, r0
   1539a:	902e      	str	r0, [sp, #184]	; 0xb8
   1539c:	9102      	str	r1, [sp, #8]
   1539e:	e7ff      	b.n	153a0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xee>
   153a0:	9803      	ldr	r0, [sp, #12]
   153a2:	9904      	ldr	r1, [sp, #16]
   153a4:	9a06      	ldr	r2, [sp, #24]
   153a6:	f7fc fa35 	bl	11814 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   153aa:	e7ff      	b.n	153ac <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xfa>
   153ac:	9802      	ldr	r0, [sp, #8]
   153ae:	9903      	ldr	r1, [sp, #12]
   153b0:	9a06      	ldr	r2, [sp, #24]
   153b2:	f7fc fa2f 	bl	11814 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   153b6:	e7ff      	b.n	153b8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x106>
   153b8:	9804      	ldr	r0, [sp, #16]
   153ba:	9902      	ldr	r1, [sp, #8]
   153bc:	9a06      	ldr	r2, [sp, #24]
   153be:	f7fc fa29 	bl	11814 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   153c2:	e7ff      	b.n	153c4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x112>
   153c4:	e7ff      	b.n	153c6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x114>
   153c6:	f1a7 0408 	sub.w	r4, r7, #8
   153ca:	46a5      	mov	sp, r4
   153cc:	bdd0      	pop	{r4, r6, r7, pc}

000153ce <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE>:
   153ce:	b083      	sub	sp, #12
   153d0:	9002      	str	r0, [sp, #8]
   153d2:	9000      	str	r0, [sp, #0]
   153d4:	e7ff      	b.n	153d6 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x8>
   153d6:	9800      	ldr	r0, [sp, #0]
   153d8:	28ff      	cmp	r0, #255	; 0xff
   153da:	d807      	bhi.n	153ec <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x1e>
   153dc:	e7ff      	b.n	153de <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x10>
   153de:	9800      	ldr	r0, [sp, #0]
   153e0:	f88d 0005 	strb.w	r0, [sp, #5]
   153e4:	2100      	movs	r1, #0
   153e6:	f88d 1004 	strb.w	r1, [sp, #4]
   153ea:	e003      	b.n	153f4 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x26>
   153ec:	2001      	movs	r0, #1
   153ee:	f88d 0004 	strb.w	r0, [sp, #4]
   153f2:	e7ff      	b.n	153f4 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x26>
   153f4:	f89d 0004 	ldrb.w	r0, [sp, #4]
   153f8:	f89d 1005 	ldrb.w	r1, [sp, #5]
   153fc:	b003      	add	sp, #12
   153fe:	4770      	bx	lr

00015400 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>:
impl Bit for B0 {
    const U8: u8 = 0;
    const BOOL: bool = false;

    #[inline]
    fn to_u8() -> u8 {
   15400:	2000      	movs	r0, #0
        0
    }
   15402:	4770      	bx	lr

00015404 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>:
impl Bit for B1 {
    const U8: u8 = 1;
    const BOOL: bool = true;

    #[inline]
    fn to_u8() -> u8 {
   15404:	2001      	movs	r0, #1
        1
    }
   15406:	4770      	bx	lr

00015408 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>:
    fn to_usize() -> usize {
   15408:	2000      	movs	r0, #0
    }
   1540a:	4770      	bx	lr

0001540c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>:
   1540c:	b081      	sub	sp, #4
   1540e:	4601      	mov	r1, r0
   15410:	f88d 0003 	strb.w	r0, [sp, #3]
   15414:	b2c0      	uxtb	r0, r0
   15416:	b001      	add	sp, #4
   15418:	4770      	bx	lr

0001541a <_ZN4core3ptr13drop_in_place17h000c7c147ade2111E>:
   1541a:	4770      	bx	lr

0001541c <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE>:
   1541c:	b5b0      	push	{r4, r5, r7, lr}
   1541e:	b086      	sub	sp, #24
   15420:	460c      	mov	r4, r1
   15422:	4605      	mov	r5, r0
   15424:	f001 fb6b 	bl	16afe <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>
   15428:	b9a8      	cbnz	r0, 15456 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x3a>
   1542a:	f24e 5374 	movw	r3, #58740	; 0xe574
   1542e:	2200      	movs	r2, #0
   15430:	f2c0 0301 	movt	r3, #1
   15434:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   15438:	9205      	str	r2, [sp, #20]
   1543a:	9304      	str	r3, [sp, #16]
   1543c:	e9cd 2202 	strd	r2, r2, [sp, #8]
   15440:	2201      	movs	r2, #1
   15442:	9201      	str	r2, [sp, #4]
   15444:	f24e 6238 	movw	r2, #58936	; 0xe638
   15448:	f2c0 0201 	movt	r2, #1
   1544c:	9200      	str	r2, [sp, #0]
   1544e:	466a      	mov	r2, sp
   15450:	f000 fbc4 	bl	15bdc <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   15454:	b110      	cbz	r0, 1545c <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x40>
   15456:	2001      	movs	r0, #1
   15458:	b006      	add	sp, #24
   1545a:	bdb0      	pop	{r4, r5, r7, pc}
   1545c:	1d28      	adds	r0, r5, #4
   1545e:	4621      	mov	r1, r4
   15460:	b006      	add	sp, #24
   15462:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
   15466:	f001 bb4a 	b.w	16afe <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>

0001546a <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE>:
   1546a:	f642 20e1 	movw	r0, #10977	; 0x2ae1
   1546e:	f243 6134 	movw	r1, #13876	; 0x3634
   15472:	f6c9 405d 	movt	r0, #40029	; 0x9c5d
   15476:	f6cd 0131 	movt	r1, #55345	; 0xd831
   1547a:	4770      	bx	lr

0001547c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>:
   1547c:	b570      	push	{r4, r5, r6, lr}
   1547e:	460e      	mov	r6, r1
   15480:	3909      	subs	r1, #9
   15482:	4604      	mov	r4, r0
   15484:	291e      	cmp	r1, #30
   15486:	d818      	bhi.n	154ba <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x3e>
   15488:	2002      	movs	r0, #2
   1548a:	2574      	movs	r5, #116	; 0x74
   1548c:	e8df f001 	tbb	[pc, r1]
   15490:	1c1c1019 	.word	0x1c1c1019
   15494:	1c1c1c29 	.word	0x1c1c1c29
   15498:	1c1c1c1c 	.word	0x1c1c1c1c
   1549c:	1c1c1c1c 	.word	0x1c1c1c1c
   154a0:	1c1c1c1c 	.word	0x1c1c1c1c
   154a4:	1c1c1c1c 	.word	0x1c1c1c1c
   154a8:	1c1c171c 	.word	0x1c1c171c
   154ac:	00171c1c 	.word	0x00171c1c
   154b0:	2002      	movs	r0, #2
   154b2:	256e      	movs	r5, #110	; 0x6e
   154b4:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   154b8:	bd70      	pop	{r4, r5, r6, pc}
   154ba:	2e5c      	cmp	r6, #92	; 0x5c
   154bc:	d104      	bne.n	154c8 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x4c>
   154be:	2002      	movs	r0, #2
   154c0:	4635      	mov	r5, r6
   154c2:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   154c6:	bd70      	pop	{r4, r5, r6, pc}
   154c8:	2a00      	cmp	r2, #0
   154ca:	d040      	beq.n	1554e <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   154cc:	f3c6 1083 	ubfx	r0, r6, #6, #4
   154d0:	0ab1      	lsrs	r1, r6, #10
   154d2:	f5b6 3ff6 	cmp.w	r6, #125952	; 0x1ec00
   154d6:	d309      	bcc.n	154ec <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x70>
   154d8:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
   154dc:	d137      	bne.n	1554e <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   154de:	211e      	movs	r1, #30
   154e0:	e00b      	b.n	154fa <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x7e>
   154e2:	2002      	movs	r0, #2
   154e4:	2572      	movs	r5, #114	; 0x72
   154e6:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   154ea:	bd70      	pop	{r4, r5, r6, pc}
   154ec:	f24f 02a4 	movw	r2, #61604	; 0xf0a4
   154f0:	f2c0 0201 	movt	r2, #1
   154f4:	5c51      	ldrb	r1, [r2, r1]
   154f6:	291e      	cmp	r1, #30
   154f8:	d842      	bhi.n	15580 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x104>
   154fa:	f24f 121f 	movw	r2, #61727	; 0xf11f
   154fe:	f2c0 0201 	movt	r2, #1
   15502:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   15506:	5c09      	ldrb	r1, [r1, r0]
   15508:	298b      	cmp	r1, #139	; 0x8b
   1550a:	d231      	bcs.n	15570 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xf4>
   1550c:	f24f 3010 	movw	r0, #62224	; 0xf310
   15510:	2301      	movs	r3, #1
   15512:	f2c0 0001 	movt	r0, #1
   15516:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   1551a:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
   1551e:	f006 013f 	and.w	r1, r6, #63	; 0x3f
   15522:	f8d2 c004 	ldr.w	ip, [r2, #4]
   15526:	fa03 f501 	lsl.w	r5, r3, r1
   1552a:	f1b1 0220 	subs.w	r2, r1, #32
   1552e:	f1c1 0120 	rsb	r1, r1, #32
   15532:	bf58      	it	pl
   15534:	2500      	movpl	r5, #0
   15536:	2a00      	cmp	r2, #0
   15538:	ea00 0005 	and.w	r0, r0, r5
   1553c:	fa23 f101 	lsr.w	r1, r3, r1
   15540:	bf58      	it	pl
   15542:	fa03 f102 	lslpl.w	r1, r3, r2
   15546:	ea01 010c 	and.w	r1, r1, ip
   1554a:	4308      	orrs	r0, r1
   1554c:	d105      	bne.n	1555a <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   1554e:	4630      	mov	r0, r6
   15550:	f001 f989 	bl	16866 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>
   15554:	b108      	cbz	r0, 1555a <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   15556:	2001      	movs	r0, #1
   15558:	e7b2      	b.n	154c0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   1555a:	f046 0001 	orr.w	r0, r6, #1
   1555e:	2107      	movs	r1, #7
   15560:	fab0 f080 	clz	r0, r0
   15564:	f04f 0e05 	mov.w	lr, #5
   15568:	ea81 0c90 	eor.w	ip, r1, r0, lsr #2
   1556c:	2003      	movs	r0, #3
   1556e:	e7a7      	b.n	154c0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   15570:	f24f 0094 	movw	r0, #61588	; 0xf094
   15574:	228b      	movs	r2, #139	; 0x8b
   15576:	f2c0 0001 	movt	r0, #1
   1557a:	f000 f84d 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1557e:	defe      	udf	#254	; 0xfe
   15580:	f24f 0084 	movw	r0, #61572	; 0xf084
   15584:	221f      	movs	r2, #31
   15586:	f2c0 0001 	movt	r0, #1
   1558a:	f000 f845 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1558e:	defe      	udf	#254	; 0xfe

00015590 <_ZN4core6option18expect_none_failed17h54d938081af97677E>:
   15590:	b08e      	sub	sp, #56	; 0x38
   15592:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   15596:	2002      	movs	r0, #2
   15598:	a90a      	add	r1, sp, #40	; 0x28
   1559a:	9009      	str	r0, [sp, #36]	; 0x24
   1559c:	9108      	str	r1, [sp, #32]
   1559e:	2100      	movs	r1, #0
   155a0:	9107      	str	r1, [sp, #28]
   155a2:	e9cd 0105 	strd	r0, r1, [sp, #20]
   155a6:	f24e 7040 	movw	r0, #59200	; 0xe740
   155aa:	f2c0 0001 	movt	r0, #1
   155ae:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   155b2:	9004      	str	r0, [sp, #16]
   155b4:	f247 20c3 	movw	r0, #29379	; 0x72c3
   155b8:	f2c0 0001 	movt	r0, #1
   155bc:	900d      	str	r0, [sp, #52]	; 0x34
   155be:	a802      	add	r0, sp, #8
   155c0:	900c      	str	r0, [sp, #48]	; 0x30
   155c2:	f247 20cd 	movw	r0, #29389	; 0x72cd
   155c6:	f2c0 0001 	movt	r0, #1
   155ca:	4661      	mov	r1, ip
   155cc:	900b      	str	r0, [sp, #44]	; 0x2c
   155ce:	4668      	mov	r0, sp
   155d0:	900a      	str	r0, [sp, #40]	; 0x28
   155d2:	a804      	add	r0, sp, #16
   155d4:	f000 f840 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   155d8:	defe      	udf	#254	; 0xfe

000155da <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>:
   155da:	68c0      	ldr	r0, [r0, #12]
   155dc:	4770      	bx	lr

000155de <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>:
   155de:	4770      	bx	lr

000155e0 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>:
   155e0:	e9d0 2100 	ldrd	r2, r1, [r0]
   155e4:	4610      	mov	r0, r2
   155e6:	4770      	bx	lr

000155e8 <_ZN4core5panic8Location4line17h650a566d9637c91dE>:
   155e8:	6880      	ldr	r0, [r0, #8]
   155ea:	4770      	bx	lr

000155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>:
   155ec:	b088      	sub	sp, #32
   155ee:	4694      	mov	ip, r2
   155f0:	f24e 5274 	movw	r2, #58740	; 0xe574
   155f4:	2300      	movs	r3, #0
   155f6:	f2c0 0201 	movt	r2, #1
   155fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
   155fe:	4668      	mov	r0, sp
   15600:	9305      	str	r3, [sp, #20]
   15602:	4661      	mov	r1, ip
   15604:	9204      	str	r2, [sp, #16]
   15606:	2201      	movs	r2, #1
   15608:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1560c:	9201      	str	r2, [sp, #4]
   1560e:	aa06      	add	r2, sp, #24
   15610:	9200      	str	r2, [sp, #0]
   15612:	f000 f821 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   15616:	defe      	udf	#254	; 0xfe

00015618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>:
   15618:	b08c      	sub	sp, #48	; 0x30
   1561a:	4603      	mov	r3, r0
   1561c:	e9cd 1200 	strd	r1, r2, [sp]
   15620:	2002      	movs	r0, #2
   15622:	a908      	add	r1, sp, #32
   15624:	9007      	str	r0, [sp, #28]
   15626:	9106      	str	r1, [sp, #24]
   15628:	2100      	movs	r1, #0
   1562a:	9105      	str	r1, [sp, #20]
   1562c:	e9cd 0103 	strd	r0, r1, [sp, #12]
   15630:	f24e 7074 	movw	r0, #59252	; 0xe774
   15634:	f2c0 0001 	movt	r0, #1
   15638:	4669      	mov	r1, sp
   1563a:	9002      	str	r0, [sp, #8]
   1563c:	f247 10df 	movw	r0, #29151	; 0x71df
   15640:	f2c0 0001 	movt	r0, #1
   15644:	900b      	str	r0, [sp, #44]	; 0x2c
   15646:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   1564a:	a801      	add	r0, sp, #4
   1564c:	9008      	str	r0, [sp, #32]
   1564e:	a802      	add	r0, sp, #8
   15650:	4619      	mov	r1, r3
   15652:	f000 f801 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   15656:	defe      	udf	#254	; 0xfe

00015658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>:
   15658:	b084      	sub	sp, #16
   1565a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1565e:	f24e 7050 	movw	r0, #59216	; 0xe750
   15662:	f2c0 0001 	movt	r0, #1
   15666:	9001      	str	r0, [sp, #4]
   15668:	f24e 5074 	movw	r0, #58740	; 0xe574
   1566c:	f2c0 0001 	movt	r0, #1
   15670:	9000      	str	r0, [sp, #0]
   15672:	4668      	mov	r0, sp
   15674:	f7f3 f82c 	bl	86d0 <rust_begin_unwind>
   15678:	defe      	udf	#254	; 0xfe

0001567a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>:
   1567a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1567e:	b081      	sub	sp, #4
   15680:	2a00      	cmp	r2, #0
   15682:	f000 80fe 	beq.w	15882 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   15686:	4690      	mov	r8, r2
   15688:	468a      	mov	sl, r1
   1568a:	4681      	mov	r9, r0
   1568c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   15690:	7800      	ldrb	r0, [r0, #0]
   15692:	b948      	cbnz	r0, 156a8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x2e>
   15694:	e014      	b.n	156c0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   15696:	44da      	add	sl, fp
   15698:	2c00      	cmp	r4, #0
   1569a:	46a0      	mov	r8, r4
   1569c:	f000 80f1 	beq.w	15882 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   156a0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   156a4:	7800      	ldrb	r0, [r0, #0]
   156a6:	b158      	cbz	r0, 156c0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   156a8:	e9d9 0100 	ldrd	r0, r1, [r9]
   156ac:	2204      	movs	r2, #4
   156ae:	68cb      	ldr	r3, [r1, #12]
   156b0:	f24e 6194 	movw	r1, #59028	; 0xe694
   156b4:	f2c0 0101 	movt	r1, #1
   156b8:	4798      	blx	r3
   156ba:	2800      	cmp	r0, #0
   156bc:	f040 80e5 	bne.w	1588a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   156c0:	f04f 0b00 	mov.w	fp, #0
   156c4:	4641      	mov	r1, r8
   156c6:	e008      	b.n	156da <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x60>
   156c8:	ebb8 010b 	subs.w	r1, r8, fp
   156cc:	f04f 0000 	mov.w	r0, #0
   156d0:	bf38      	it	cc
   156d2:	4601      	movcc	r1, r0
   156d4:	45c3      	cmp	fp, r8
   156d6:	f200 80a5 	bhi.w	15824 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1aa>
   156da:	eb0a 0e0b 	add.w	lr, sl, fp
   156de:	2000      	movs	r0, #0
   156e0:	f01e 0203 	ands.w	r2, lr, #3
   156e4:	bf18      	it	ne
   156e6:	f1d2 0c04 	rsbsne	ip, r2, #4
   156ea:	d120      	bne.n	1572e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xb4>
   156ec:	2908      	cmp	r1, #8
   156ee:	d357      	bcc.n	157a0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   156f0:	f1a1 0208 	sub.w	r2, r1, #8
   156f4:	4290      	cmp	r0, r2
   156f6:	d853      	bhi.n	157a0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   156f8:	f85e 3000 	ldr.w	r3, [lr, r0]
   156fc:	eb0e 0700 	add.w	r7, lr, r0
   15700:	687f      	ldr	r7, [r7, #4]
   15702:	f083 360a 	eor.w	r6, r3, #168430090	; 0xa0a0a0a
   15706:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   1570a:	ea26 0303 	bic.w	r3, r6, r3
   1570e:	f087 360a 	eor.w	r6, r7, #168430090	; 0xa0a0a0a
   15712:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   15716:	ea26 0707 	bic.w	r7, r6, r7
   1571a:	433b      	orrs	r3, r7
   1571c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   15720:	d102      	bne.n	15728 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xae>
   15722:	3008      	adds	r0, #8
   15724:	4290      	cmp	r0, r2
   15726:	d9e7      	bls.n	156f8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x7e>
   15728:	4288      	cmp	r0, r1
   1572a:	d939      	bls.n	157a0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   1572c:	e0b1      	b.n	15892 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x218>
   1572e:	458c      	cmp	ip, r1
   15730:	bf88      	it	hi
   15732:	468c      	movhi	ip, r1
   15734:	eb0e 060c 	add.w	r6, lr, ip
   15738:	2000      	movs	r0, #0
   1573a:	4663      	mov	r3, ip
   1573c:	4677      	mov	r7, lr
   1573e:	b363      	cbz	r3, 1579a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   15740:	463a      	mov	r2, r7
   15742:	f812 4b01 	ldrb.w	r4, [r2], #1
   15746:	f1b4 050a 	subs.w	r5, r4, #10
   1574a:	bf18      	it	ne
   1574c:	2501      	movne	r5, #1
   1574e:	4428      	add	r0, r5
   15750:	2c0a      	cmp	r4, #10
   15752:	d059      	beq.n	15808 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   15754:	42b2      	cmp	r2, r6
   15756:	d020      	beq.n	1579a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   15758:	787a      	ldrb	r2, [r7, #1]
   1575a:	f1b2 040a 	subs.w	r4, r2, #10
   1575e:	bf18      	it	ne
   15760:	2401      	movne	r4, #1
   15762:	4420      	add	r0, r4
   15764:	2a0a      	cmp	r2, #10
   15766:	d04f      	beq.n	15808 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   15768:	1cba      	adds	r2, r7, #2
   1576a:	42b2      	cmp	r2, r6
   1576c:	d015      	beq.n	1579a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   1576e:	78ba      	ldrb	r2, [r7, #2]
   15770:	f1b2 040a 	subs.w	r4, r2, #10
   15774:	bf18      	it	ne
   15776:	2401      	movne	r4, #1
   15778:	4420      	add	r0, r4
   1577a:	2a0a      	cmp	r2, #10
   1577c:	d044      	beq.n	15808 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   1577e:	1cfa      	adds	r2, r7, #3
   15780:	42b2      	cmp	r2, r6
   15782:	d00a      	beq.n	1579a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   15784:	78fa      	ldrb	r2, [r7, #3]
   15786:	3b04      	subs	r3, #4
   15788:	3704      	adds	r7, #4
   1578a:	f1b2 040a 	subs.w	r4, r2, #10
   1578e:	bf18      	it	ne
   15790:	2401      	movne	r4, #1
   15792:	4420      	add	r0, r4
   15794:	2a0a      	cmp	r2, #10
   15796:	d1d2      	bne.n	1573e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xc4>
   15798:	e036      	b.n	15808 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   1579a:	4660      	mov	r0, ip
   1579c:	2908      	cmp	r1, #8
   1579e:	d2a7      	bcs.n	156f0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x76>
   157a0:	eb0e 0700 	add.w	r7, lr, r0
   157a4:	eb0e 0201 	add.w	r2, lr, r1
   157a8:	1a0e      	subs	r6, r1, r0
   157aa:	2100      	movs	r1, #0
   157ac:	b3ce      	cbz	r6, 15822 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   157ae:	463b      	mov	r3, r7
   157b0:	f813 5b01 	ldrb.w	r5, [r3], #1
   157b4:	f1b5 040a 	subs.w	r4, r5, #10
   157b8:	bf18      	it	ne
   157ba:	2401      	movne	r4, #1
   157bc:	4421      	add	r1, r4
   157be:	2d0a      	cmp	r5, #10
   157c0:	d021      	beq.n	15806 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   157c2:	4293      	cmp	r3, r2
   157c4:	d02d      	beq.n	15822 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   157c6:	787b      	ldrb	r3, [r7, #1]
   157c8:	f1b3 050a 	subs.w	r5, r3, #10
   157cc:	bf18      	it	ne
   157ce:	2501      	movne	r5, #1
   157d0:	4429      	add	r1, r5
   157d2:	2b0a      	cmp	r3, #10
   157d4:	d017      	beq.n	15806 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   157d6:	1cbb      	adds	r3, r7, #2
   157d8:	4293      	cmp	r3, r2
   157da:	d022      	beq.n	15822 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   157dc:	78bb      	ldrb	r3, [r7, #2]
   157de:	f1b3 050a 	subs.w	r5, r3, #10
   157e2:	bf18      	it	ne
   157e4:	2501      	movne	r5, #1
   157e6:	4429      	add	r1, r5
   157e8:	2b0a      	cmp	r3, #10
   157ea:	d00c      	beq.n	15806 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   157ec:	1cfb      	adds	r3, r7, #3
   157ee:	4293      	cmp	r3, r2
   157f0:	d017      	beq.n	15822 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   157f2:	78fb      	ldrb	r3, [r7, #3]
   157f4:	3e04      	subs	r6, #4
   157f6:	3704      	adds	r7, #4
   157f8:	f1b3 050a 	subs.w	r5, r3, #10
   157fc:	bf18      	it	ne
   157fe:	2501      	movne	r5, #1
   15800:	4429      	add	r1, r5
   15802:	2b0a      	cmp	r3, #10
   15804:	d1d2      	bne.n	157ac <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x132>
   15806:	4408      	add	r0, r1
   15808:	4458      	add	r0, fp
   1580a:	f100 0b01 	add.w	fp, r0, #1
   1580e:	4540      	cmp	r0, r8
   15810:	f4bf af5a 	bcs.w	156c8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   15814:	f81a 0000 	ldrb.w	r0, [sl, r0]
   15818:	280a      	cmp	r0, #10
   1581a:	f47f af55 	bne.w	156c8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   1581e:	2001      	movs	r0, #1
   15820:	e001      	b.n	15826 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1ac>
   15822:	2000      	movs	r0, #0
   15824:	46c3      	mov	fp, r8
   15826:	f8d9 1008 	ldr.w	r1, [r9, #8]
   1582a:	eba8 040b 	sub.w	r4, r8, fp
   1582e:	7008      	strb	r0, [r1, #0]
   15830:	fab4 f084 	clz	r0, r4
   15834:	0942      	lsrs	r2, r0, #5
   15836:	fabb f08b 	clz	r0, fp
   1583a:	0943      	lsrs	r3, r0, #5
   1583c:	e9d9 0100 	ldrd	r0, r1, [r9]
   15840:	ea53 0602 	orrs.w	r6, r3, r2
   15844:	d106      	bne.n	15854 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1da>
   15846:	45d8      	cmp	r8, fp
   15848:	d926      	bls.n	15898 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   1584a:	f91a 200b 	ldrsb.w	r2, [sl, fp]
   1584e:	f112 0f41 	cmn.w	r2, #65	; 0x41
   15852:	dd21      	ble.n	15898 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   15854:	68cb      	ldr	r3, [r1, #12]
   15856:	4651      	mov	r1, sl
   15858:	465a      	mov	r2, fp
   1585a:	4798      	blx	r3
   1585c:	b9a8      	cbnz	r0, 1588a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   1585e:	2e00      	cmp	r6, #0
   15860:	f47f af19 	bne.w	15696 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   15864:	45d8      	cmp	r8, fp
   15866:	d905      	bls.n	15874 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1fa>
   15868:	f91a 000b 	ldrsb.w	r0, [sl, fp]
   1586c:	f110 0f41 	cmn.w	r0, #65	; 0x41
   15870:	f73f af11 	bgt.w	15696 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   15874:	4650      	mov	r0, sl
   15876:	4641      	mov	r1, r8
   15878:	465a      	mov	r2, fp
   1587a:	4643      	mov	r3, r8
   1587c:	f000 fe4d 	bl	1651a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   15880:	defe      	udf	#254	; 0xfe
   15882:	2000      	movs	r0, #0
   15884:	b001      	add	sp, #4
   15886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1588a:	2001      	movs	r0, #1
   1588c:	b001      	add	sp, #4
   1588e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15892:	f000 fe20 	bl	164d6 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   15896:	defe      	udf	#254	; 0xfe
   15898:	4650      	mov	r0, sl
   1589a:	4641      	mov	r1, r8
   1589c:	2200      	movs	r2, #0
   1589e:	465b      	mov	r3, fp
   158a0:	f000 fe3b 	bl	1651a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   158a4:	defe      	udf	#254	; 0xfe

000158a6 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>:
   158a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   158a8:	b08d      	sub	sp, #52	; 0x34
   158aa:	4604      	mov	r4, r0
   158ac:	7a00      	ldrb	r0, [r0, #8]
   158ae:	b138      	cbz	r0, 158c0 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x1a>
   158b0:	2001      	movs	r0, #1
   158b2:	6861      	ldr	r1, [r4, #4]
   158b4:	7220      	strb	r0, [r4, #8]
   158b6:	1c48      	adds	r0, r1, #1
   158b8:	6060      	str	r0, [r4, #4]
   158ba:	4620      	mov	r0, r4
   158bc:	b00d      	add	sp, #52	; 0x34
   158be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   158c0:	4616      	mov	r6, r2
   158c2:	460d      	mov	r5, r1
   158c4:	e9d4 1200 	ldrd	r1, r2, [r4]
   158c8:	7808      	ldrb	r0, [r1, #0]
   158ca:	0740      	lsls	r0, r0, #29
   158cc:	d419      	bmi.n	15902 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x5c>
   158ce:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
   158d2:	f24e 719e 	movw	r1, #59294	; 0xe79e
   158d6:	f24e 7ca2 	movw	ip, #59298	; 0xe7a2
   158da:	f2c0 0101 	movt	r1, #1
   158de:	2a00      	cmp	r2, #0
   158e0:	f2c0 0c01 	movt	ip, #1
   158e4:	bf08      	it	eq
   158e6:	4661      	moveq	r1, ip
   158e8:	68db      	ldr	r3, [r3, #12]
   158ea:	f04f 0202 	mov.w	r2, #2
   158ee:	bf08      	it	eq
   158f0:	2201      	moveq	r2, #1
   158f2:	4798      	blx	r3
   158f4:	2800      	cmp	r0, #0
   158f6:	d1db      	bne.n	158b0 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   158f8:	68f2      	ldr	r2, [r6, #12]
   158fa:	4628      	mov	r0, r5
   158fc:	6821      	ldr	r1, [r4, #0]
   158fe:	4790      	blx	r2
   15900:	e7d7      	b.n	158b2 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>
   15902:	b95a      	cbnz	r2, 1591c <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x76>
   15904:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   15908:	2202      	movs	r2, #2
   1590a:	68cb      	ldr	r3, [r1, #12]
   1590c:	f24e 71a0 	movw	r1, #59296	; 0xe7a0
   15910:	f2c0 0101 	movt	r1, #1
   15914:	4798      	blx	r3
   15916:	2800      	cmp	r0, #0
   15918:	d1ca      	bne.n	158b0 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   1591a:	6821      	ldr	r1, [r4, #0]
   1591c:	2001      	movs	r0, #1
   1591e:	f10d 030f 	add.w	r3, sp, #15
   15922:	f88d 000f 	strb.w	r0, [sp, #15]
   15926:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
   1592a:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
   1592e:	e891 5005 	ldmia.w	r1, {r0, r2, ip, lr}
   15932:	e9d1 3704 	ldrd	r3, r7, [r1, #16]
   15936:	f891 1020 	ldrb.w	r1, [r1, #32]
   1593a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   1593e:	a904      	add	r1, sp, #16
   15940:	e9cd 0204 	strd	r0, r2, [sp, #16]
   15944:	f24e 7084 	movw	r0, #59268	; 0xe784
   15948:	f2c0 0001 	movt	r0, #1
   1594c:	68f2      	ldr	r2, [r6, #12]
   1594e:	900b      	str	r0, [sp, #44]	; 0x2c
   15950:	4668      	mov	r0, sp
   15952:	900a      	str	r0, [sp, #40]	; 0x28
   15954:	4628      	mov	r0, r5
   15956:	e9cd 3708 	strd	r3, r7, [sp, #32]
   1595a:	e9cd ce06 	strd	ip, lr, [sp, #24]
   1595e:	4790      	blx	r2
   15960:	2800      	cmp	r0, #0
   15962:	d1a5      	bne.n	158b0 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   15964:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   15968:	2202      	movs	r2, #2
   1596a:	68cb      	ldr	r3, [r1, #12]
   1596c:	f24e 719c 	movw	r1, #59292	; 0xe79c
   15970:	f2c0 0101 	movt	r1, #1
   15974:	4798      	blx	r3
   15976:	e79c      	b.n	158b2 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>

00015978 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>:
   15978:	b5b0      	push	{r4, r5, r7, lr}
   1597a:	4604      	mov	r4, r0
   1597c:	7a05      	ldrb	r5, [r0, #8]
   1597e:	6840      	ldr	r0, [r0, #4]
   15980:	b308      	cbz	r0, 159c6 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4e>
   15982:	b10d      	cbz	r5, 15988 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x10>
   15984:	2501      	movs	r5, #1
   15986:	e01d      	b.n	159c4 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   15988:	2801      	cmp	r0, #1
   1598a:	d110      	bne.n	159ae <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   1598c:	7a60      	ldrb	r0, [r4, #9]
   1598e:	b170      	cbz	r0, 159ae <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   15990:	6821      	ldr	r1, [r4, #0]
   15992:	7808      	ldrb	r0, [r1, #0]
   15994:	0740      	lsls	r0, r0, #29
   15996:	d40a      	bmi.n	159ae <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   15998:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   1599c:	2201      	movs	r2, #1
   1599e:	68cb      	ldr	r3, [r1, #12]
   159a0:	f24e 71a3 	movw	r1, #59299	; 0xe7a3
   159a4:	f2c0 0101 	movt	r1, #1
   159a8:	2501      	movs	r5, #1
   159aa:	4798      	blx	r3
   159ac:	b950      	cbnz	r0, 159c4 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   159ae:	6821      	ldr	r1, [r4, #0]
   159b0:	2201      	movs	r2, #1
   159b2:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   159b6:	68cb      	ldr	r3, [r1, #12]
   159b8:	f24e 71a4 	movw	r1, #59300	; 0xe7a4
   159bc:	f2c0 0101 	movt	r1, #1
   159c0:	4798      	blx	r3
   159c2:	4605      	mov	r5, r0
   159c4:	7225      	strb	r5, [r4, #8]
   159c6:	2d00      	cmp	r5, #0
   159c8:	bf18      	it	ne
   159ca:	2501      	movne	r5, #1
   159cc:	4628      	mov	r0, r5
   159ce:	bdb0      	pop	{r4, r5, r7, pc}

000159d0 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>:
   159d0:	b580      	push	{r7, lr}
   159d2:	b082      	sub	sp, #8
   159d4:	468c      	mov	ip, r1
   159d6:	2100      	movs	r1, #0
   159d8:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   159dc:	9101      	str	r1, [sp, #4]
   159de:	d207      	bcs.n	159f0 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x20>
   159e0:	f88d c004 	strb.w	ip, [sp, #4]
   159e4:	a901      	add	r1, sp, #4
   159e6:	2201      	movs	r2, #1
   159e8:	f7ff fe47 	bl	1567a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   159ec:	b002      	add	sp, #8
   159ee:	bd80      	pop	{r7, pc}
   159f0:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
   159f4:	d210      	bcs.n	15a18 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x48>
   159f6:	ea4f 119c 	mov.w	r1, ip, lsr #6
   159fa:	2306      	movs	r3, #6
   159fc:	2202      	movs	r2, #2
   159fe:	f363 115f 	bfi	r1, r3, #5, #27
   15a02:	f362 1c9f 	bfi	ip, r2, #6, #26
   15a06:	f88d c005 	strb.w	ip, [sp, #5]
   15a0a:	f88d 1004 	strb.w	r1, [sp, #4]
   15a0e:	a901      	add	r1, sp, #4
   15a10:	f7ff fe33 	bl	1567a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   15a14:	b002      	add	sp, #8
   15a16:	bd80      	pop	{r7, pc}
   15a18:	2202      	movs	r2, #2
   15a1a:	4663      	mov	r3, ip
   15a1c:	a901      	add	r1, sp, #4
   15a1e:	f362 139f 	bfi	r3, r2, #6, #26
   15a22:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   15a26:	d213      	bcs.n	15a50 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x80>
   15a28:	f88d 3006 	strb.w	r3, [sp, #6]
   15a2c:	ea4f 139c 	mov.w	r3, ip, lsr #6
   15a30:	f362 139f 	bfi	r3, r2, #6, #26
   15a34:	f88d 3005 	strb.w	r3, [sp, #5]
   15a38:	ea4f 321c 	mov.w	r2, ip, lsr #12
   15a3c:	230e      	movs	r3, #14
   15a3e:	f363 121f 	bfi	r2, r3, #4, #28
   15a42:	f88d 2004 	strb.w	r2, [sp, #4]
   15a46:	2203      	movs	r2, #3
   15a48:	f7ff fe17 	bl	1567a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   15a4c:	b002      	add	sp, #8
   15a4e:	bd80      	pop	{r7, pc}
   15a50:	f88d 3007 	strb.w	r3, [sp, #7]
   15a54:	ea4f 139c 	mov.w	r3, ip, lsr #6
   15a58:	f362 139f 	bfi	r3, r2, #6, #26
   15a5c:	f88d 3006 	strb.w	r3, [sp, #6]
   15a60:	ea4f 331c 	mov.w	r3, ip, lsr #12
   15a64:	f362 139f 	bfi	r3, r2, #6, #26
   15a68:	22f0      	movs	r2, #240	; 0xf0
   15a6a:	ea42 429c 	orr.w	r2, r2, ip, lsr #18
   15a6e:	f88d 3005 	strb.w	r3, [sp, #5]
   15a72:	f88d 2004 	strb.w	r2, [sp, #4]
   15a76:	2204      	movs	r2, #4
   15a78:	f7ff fdff 	bl	1567a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   15a7c:	b002      	add	sp, #8
   15a7e:	bd80      	pop	{r7, pc}

00015a80 <_ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE>:
   15a80:	b570      	push	{r4, r5, r6, lr}
   15a82:	b088      	sub	sp, #32
   15a84:	9001      	str	r0, [sp, #4]
   15a86:	aa02      	add	r2, sp, #8
   15a88:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   15a8c:	f64e 0170 	movw	r1, #59504	; 0xe870
   15a90:	4610      	mov	r0, r2
   15a92:	f2c0 0101 	movt	r1, #1
   15a96:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   15a9a:	a801      	add	r0, sp, #4
   15a9c:	f000 f89e 	bl	15bdc <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   15aa0:	b008      	add	sp, #32
   15aa2:	bd70      	pop	{r4, r5, r6, pc}

00015aa4 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E>:
   15aa4:	6800      	ldr	r0, [r0, #0]
   15aa6:	f7ff bde8 	b.w	1567a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>

00015aaa <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE>:
   15aaa:	6800      	ldr	r0, [r0, #0]
   15aac:	f7ff bf90 	b.w	159d0 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>

00015ab0 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE>:
   15ab0:	b570      	push	{r4, r5, r6, lr}
   15ab2:	b088      	sub	sp, #32
   15ab4:	6800      	ldr	r0, [r0, #0]
   15ab6:	aa02      	add	r2, sp, #8
   15ab8:	9001      	str	r0, [sp, #4]
   15aba:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   15abe:	4610      	mov	r0, r2
   15ac0:	f64e 0170 	movw	r1, #59504	; 0xe870
   15ac4:	f2c0 0101 	movt	r1, #1
   15ac8:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   15acc:	a801      	add	r0, sp, #4
   15ace:	f000 f885 	bl	15bdc <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   15ad2:	b008      	add	sp, #32
   15ad4:	bd70      	pop	{r4, r5, r6, pc}

00015ad6 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE>:
   15ad6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ada:	b08d      	sub	sp, #52	; 0x34
   15adc:	468c      	mov	ip, r1
   15ade:	6801      	ldr	r1, [r0, #0]
   15ae0:	f248 5e1f 	movw	lr, #34079	; 0x851f
   15ae4:	f24e 70a7 	movw	r0, #59303	; 0xe7a7
   15ae8:	f242 7810 	movw	r8, #10000	; 0x2710
   15aec:	4541      	cmp	r1, r8
   15aee:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   15af2:	f2c0 0001 	movt	r0, #1
   15af6:	d337      	bcc.n	15b68 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x92>
   15af8:	f241 7959 	movw	r9, #5977	; 0x1759
   15afc:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   15b00:	f10d 0b0c 	add.w	fp, sp, #12
   15b04:	2300      	movs	r3, #0
   15b06:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   15b0a:	f04f 0a64 	mov.w	sl, #100	; 0x64
   15b0e:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   15b12:	fba1 2409 	umull	r2, r4, r1, r9
   15b16:	42b9      	cmp	r1, r7
   15b18:	ea4f 3254 	mov.w	r2, r4, lsr #13
   15b1c:	fb02 1418 	mls	r4, r2, r8, r1
   15b20:	4611      	mov	r1, r2
   15b22:	b2a5      	uxth	r5, r4
   15b24:	fba5 560e 	umull	r5, r6, r5, lr
   15b28:	ea4f 1556 	mov.w	r5, r6, lsr #5
   15b2c:	eb0b 0603 	add.w	r6, fp, r3
   15b30:	fb05 441a 	mls	r4, r5, sl, r4
   15b34:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   15b38:	f1a3 0304 	sub.w	r3, r3, #4
   15b3c:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   15b40:	b2a4      	uxth	r4, r4
   15b42:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   15b46:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   15b4a:	d8e2      	bhi.n	15b12 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x3c>
   15b4c:	f103 0427 	add.w	r4, r3, #39	; 0x27
   15b50:	4611      	mov	r1, r2
   15b52:	2963      	cmp	r1, #99	; 0x63
   15b54:	dc0b      	bgt.n	15b6e <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x98>
   15b56:	460b      	mov	r3, r1
   15b58:	2b0a      	cmp	r3, #10
   15b5a:	db17      	blt.n	15b8c <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xb6>
   15b5c:	1ea1      	subs	r1, r4, #2
   15b5e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   15b62:	aa03      	add	r2, sp, #12
   15b64:	5250      	strh	r0, [r2, r1]
   15b66:	e016      	b.n	15b96 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xc0>
   15b68:	2427      	movs	r4, #39	; 0x27
   15b6a:	2963      	cmp	r1, #99	; 0x63
   15b6c:	ddf3      	ble.n	15b56 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x80>
   15b6e:	b28a      	uxth	r2, r1
   15b70:	3c02      	subs	r4, #2
   15b72:	fba2 230e 	umull	r2, r3, r2, lr
   15b76:	2264      	movs	r2, #100	; 0x64
   15b78:	095b      	lsrs	r3, r3, #5
   15b7a:	fb03 1112 	mls	r1, r3, r2, r1
   15b7e:	aa03      	add	r2, sp, #12
   15b80:	b289      	uxth	r1, r1
   15b82:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   15b86:	5311      	strh	r1, [r2, r4]
   15b88:	2b0a      	cmp	r3, #10
   15b8a:	dae7      	bge.n	15b5c <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x86>
   15b8c:	1e61      	subs	r1, r4, #1
   15b8e:	aa03      	add	r2, sp, #12
   15b90:	f103 0030 	add.w	r0, r3, #48	; 0x30
   15b94:	5450      	strb	r0, [r2, r1]
   15b96:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   15b9a:	aa03      	add	r2, sp, #12
   15b9c:	4411      	add	r1, r2
   15b9e:	f24e 5274 	movw	r2, #58740	; 0xe574
   15ba2:	e9cd 1000 	strd	r1, r0, [sp]
   15ba6:	f2c0 0201 	movt	r2, #1
   15baa:	4660      	mov	r0, ip
   15bac:	2101      	movs	r1, #1
   15bae:	2300      	movs	r3, #0
   15bb0:	f000 f8f4 	bl	15d9c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   15bb4:	b00d      	add	sp, #52	; 0x34
   15bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015bba <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E>:
   15bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15bbe:	b086      	sub	sp, #24
   15bc0:	e9d1 c106 	ldrd	ip, r1, [r1, #24]
   15bc4:	466a      	mov	r2, sp
   15bc6:	e890 41f0 	ldmia.w	r0, {r4, r5, r6, r7, r8, lr}
   15bca:	4613      	mov	r3, r2
   15bcc:	4660      	mov	r0, ip
   15bce:	e883 41f0 	stmia.w	r3, {r4, r5, r6, r7, r8, lr}
   15bd2:	f000 f803 	bl	15bdc <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   15bd6:	b006      	add	sp, #24
   15bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015bdc <_ZN4core3fmt5write17hd95ac78ed22a2252E>:
   15bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15be0:	b08b      	sub	sp, #44	; 0x2c
   15be2:	2303      	movs	r3, #3
   15be4:	6897      	ldr	r7, [r2, #8]
   15be6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   15bea:	2320      	movs	r3, #32
   15bec:	9303      	str	r3, [sp, #12]
   15bee:	2300      	movs	r3, #0
   15bf0:	2f00      	cmp	r7, #0
   15bf2:	9302      	str	r3, [sp, #8]
   15bf4:	e9cd 0108 	strd	r0, r1, [sp, #32]
   15bf8:	9306      	str	r3, [sp, #24]
   15bfa:	9304      	str	r3, [sp, #16]
   15bfc:	d07c      	beq.n	15cf8 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x11c>
   15bfe:	f8d2 b00c 	ldr.w	fp, [r2, #12]
   15c02:	e9d2 9400 	ldrd	r9, r4, [r2]
   15c06:	45a3      	cmp	fp, r4
   15c08:	bf88      	it	hi
   15c0a:	46a3      	movhi	fp, r4
   15c0c:	f1bb 0f00 	cmp.w	fp, #0
   15c10:	f000 809b 	beq.w	15d4a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   15c14:	e9d2 6204 	ldrd	r6, r2, [r2, #16]
   15c18:	68cd      	ldr	r5, [r1, #12]
   15c1a:	9201      	str	r2, [sp, #4]
   15c1c:	e9d9 3200 	ldrd	r3, r2, [r9]
   15c20:	4619      	mov	r1, r3
   15c22:	47a8      	blx	r5
   15c24:	2800      	cmp	r0, #0
   15c26:	f040 809e 	bne.w	15d66 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   15c2a:	464d      	mov	r5, r9
   15c2c:	f04f 0a01 	mov.w	sl, #1
   15c30:	f04f 0800 	mov.w	r8, #0
   15c34:	f04f 0910 	mov.w	r9, #16
   15c38:	eb07 0088 	add.w	r0, r7, r8, lsl #2
   15c3c:	6841      	ldr	r1, [r0, #4]
   15c3e:	9103      	str	r1, [sp, #12]
   15c40:	7f01      	ldrb	r1, [r0, #28]
   15c42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   15c46:	6881      	ldr	r1, [r0, #8]
   15c48:	9102      	str	r1, [sp, #8]
   15c4a:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   15c4e:	b18a      	cbz	r2, 15c74 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x98>
   15c50:	2a02      	cmp	r2, #2
   15c52:	d011      	beq.n	15c78 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   15c54:	9a01      	ldr	r2, [sp, #4]
   15c56:	4291      	cmp	r1, r2
   15c58:	f080 8098 	bcs.w	15d8c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   15c5c:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
   15c60:	f645 23d7 	movw	r3, #23255	; 0x5ad7
   15c64:	f2c0 0301 	movt	r3, #1
   15c68:	6852      	ldr	r2, [r2, #4]
   15c6a:	429a      	cmp	r2, r3
   15c6c:	d104      	bne.n	15c78 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   15c6e:	f856 1031 	ldr.w	r1, [r6, r1, lsl #3]
   15c72:	6809      	ldr	r1, [r1, #0]
   15c74:	2201      	movs	r2, #1
   15c76:	e000      	b.n	15c7a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9e>
   15c78:	2200      	movs	r2, #0
   15c7a:	e9cd 2104 	strd	r2, r1, [sp, #16]
   15c7e:	f857 1009 	ldr.w	r1, [r7, r9]
   15c82:	68c0      	ldr	r0, [r0, #12]
   15c84:	b180      	cbz	r0, 15ca8 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xcc>
   15c86:	2802      	cmp	r0, #2
   15c88:	d010      	beq.n	15cac <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   15c8a:	9801      	ldr	r0, [sp, #4]
   15c8c:	4281      	cmp	r1, r0
   15c8e:	d27d      	bcs.n	15d8c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   15c90:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   15c94:	f645 22d7 	movw	r2, #23255	; 0x5ad7
   15c98:	f2c0 0201 	movt	r2, #1
   15c9c:	6840      	ldr	r0, [r0, #4]
   15c9e:	4290      	cmp	r0, r2
   15ca0:	d104      	bne.n	15cac <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   15ca2:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   15ca6:	6801      	ldr	r1, [r0, #0]
   15ca8:	2001      	movs	r0, #1
   15caa:	e000      	b.n	15cae <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd2>
   15cac:	2000      	movs	r0, #0
   15cae:	eb07 0209 	add.w	r2, r7, r9
   15cb2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   15cb6:	9801      	ldr	r0, [sp, #4]
   15cb8:	f852 1c10 	ldr.w	r1, [r2, #-16]
   15cbc:	4281      	cmp	r1, r0
   15cbe:	d25d      	bcs.n	15d7c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1a0>
   15cc0:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   15cc4:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   15cc8:	684a      	ldr	r2, [r1, #4]
   15cca:	a902      	add	r1, sp, #8
   15ccc:	4790      	blx	r2
   15cce:	2800      	cmp	r0, #0
   15cd0:	d149      	bne.n	15d66 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   15cd2:	45da      	cmp	sl, fp
   15cd4:	d24b      	bcs.n	15d6e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x192>
   15cd6:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   15cda:	eb05 0208 	add.w	r2, r5, r8
   15cde:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   15ce2:	68db      	ldr	r3, [r3, #12]
   15ce4:	4798      	blx	r3
   15ce6:	f109 0920 	add.w	r9, r9, #32
   15cea:	f108 0808 	add.w	r8, r8, #8
   15cee:	f10a 0a01 	add.w	sl, sl, #1
   15cf2:	2800      	cmp	r0, #0
   15cf4:	d0a0      	beq.n	15c38 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x5c>
   15cf6:	e036      	b.n	15d66 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   15cf8:	6956      	ldr	r6, [r2, #20]
   15cfa:	e9d2 9400 	ldrd	r9, r4, [r2]
   15cfe:	42a6      	cmp	r6, r4
   15d00:	bf88      	it	hi
   15d02:	4626      	movhi	r6, r4
   15d04:	b30e      	cbz	r6, 15d4a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   15d06:	6917      	ldr	r7, [r2, #16]
   15d08:	e9d9 3200 	ldrd	r3, r2, [r9]
   15d0c:	68cd      	ldr	r5, [r1, #12]
   15d0e:	4619      	mov	r1, r3
   15d10:	47a8      	blx	r5
   15d12:	bb40      	cbnz	r0, 15d66 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   15d14:	f10d 0808 	add.w	r8, sp, #8
   15d18:	2500      	movs	r5, #0
   15d1a:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
   15d1e:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   15d22:	684a      	ldr	r2, [r1, #4]
   15d24:	4641      	mov	r1, r8
   15d26:	4790      	blx	r2
   15d28:	b9e8      	cbnz	r0, 15d66 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   15d2a:	f105 0a01 	add.w	sl, r5, #1
   15d2e:	45b2      	cmp	sl, r6
   15d30:	d20d      	bcs.n	15d4e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x172>
   15d32:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   15d36:	eb09 02c5 	add.w	r2, r9, r5, lsl #3
   15d3a:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   15d3e:	68db      	ldr	r3, [r3, #12]
   15d40:	4798      	blx	r3
   15d42:	2800      	cmp	r0, #0
   15d44:	4655      	mov	r5, sl
   15d46:	d0e8      	beq.n	15d1a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x13e>
   15d48:	e00d      	b.n	15d66 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   15d4a:	f04f 0a00 	mov.w	sl, #0
   15d4e:	4554      	cmp	r4, sl
   15d50:	d910      	bls.n	15d74 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   15d52:	eb09 02ca 	add.w	r2, r9, sl, lsl #3
   15d56:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   15d5a:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
   15d5e:	6852      	ldr	r2, [r2, #4]
   15d60:	68db      	ldr	r3, [r3, #12]
   15d62:	4798      	blx	r3
   15d64:	b130      	cbz	r0, 15d74 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   15d66:	2001      	movs	r0, #1
   15d68:	b00b      	add	sp, #44	; 0x2c
   15d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d6e:	46a9      	mov	r9, r5
   15d70:	4554      	cmp	r4, sl
   15d72:	d8ee      	bhi.n	15d52 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x176>
   15d74:	2000      	movs	r0, #0
   15d76:	b00b      	add	sp, #44	; 0x2c
   15d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d7c:	f64e 00a0 	movw	r0, #59552	; 0xe8a0
   15d80:	f2c0 0001 	movt	r0, #1
   15d84:	9a01      	ldr	r2, [sp, #4]
   15d86:	f7ff fc47 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   15d8a:	defe      	udf	#254	; 0xfe
   15d8c:	f64e 00b0 	movw	r0, #59568	; 0xe8b0
   15d90:	f2c0 0001 	movt	r0, #1
   15d94:	9a01      	ldr	r2, [sp, #4]
   15d96:	f7ff fc3f 	bl	15618 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   15d9a:	defe      	udf	#254	; 0xfe

00015d9c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>:
   15d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15da0:	b083      	sub	sp, #12
   15da2:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
   15da6:	469a      	mov	sl, r3
   15da8:	4604      	mov	r4, r0
   15daa:	b1e1      	cbz	r1, 15de6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x4a>
   15dac:	f8d4 e000 	ldr.w	lr, [r4]
   15db0:	f04f 082b 	mov.w	r8, #43	; 0x2b
   15db4:	f01e 0101 	ands.w	r1, lr, #1
   15db8:	bf08      	it	eq
   15dba:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
   15dbe:	eb01 0907 	add.w	r9, r1, r7
   15dc2:	ea5f 714e 	movs.w	r1, lr, lsl #29
   15dc6:	d517      	bpl.n	15df8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x5c>
   15dc8:	f1ba 0f00 	cmp.w	sl, #0
   15dcc:	d033      	beq.n	15e36 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9a>
   15dce:	f1aa 0101 	sub.w	r1, sl, #1
   15dd2:	f00a 0c03 	and.w	ip, sl, #3
   15dd6:	2903      	cmp	r1, #3
   15dd8:	d22f      	bcs.n	15e3a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9e>
   15dda:	2100      	movs	r1, #0
   15ddc:	4613      	mov	r3, r2
   15dde:	f1bc 0f00 	cmp.w	ip, #0
   15de2:	d152      	bne.n	15e8a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xee>
   15de4:	e069      	b.n	15eba <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   15de6:	f8d4 e000 	ldr.w	lr, [r4]
   15dea:	f107 0901 	add.w	r9, r7, #1
   15dee:	f04f 082d 	mov.w	r8, #45	; 0x2d
   15df2:	ea5f 714e 	movs.w	r1, lr, lsl #29
   15df6:	d4e7      	bmi.n	15dc8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x2c>
   15df8:	f04f 0a00 	mov.w	sl, #0
   15dfc:	2200      	movs	r2, #0
   15dfe:	68a0      	ldr	r0, [r4, #8]
   15e00:	2801      	cmp	r0, #1
   15e02:	d161      	bne.n	15ec8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   15e04:	f8d4 b00c 	ldr.w	fp, [r4, #12]
   15e08:	45cb      	cmp	fp, r9
   15e0a:	d95d      	bls.n	15ec8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   15e0c:	ea5f 700e 	movs.w	r0, lr, lsl #28
   15e10:	d46e      	bmi.n	15ef0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x154>
   15e12:	9202      	str	r2, [sp, #8]
   15e14:	ebab 0109 	sub.w	r1, fp, r9
   15e18:	f894 2020 	ldrb.w	r2, [r4, #32]
   15e1c:	2000      	movs	r0, #0
   15e1e:	46a9      	mov	r9, r5
   15e20:	460e      	mov	r6, r1
   15e22:	2a03      	cmp	r2, #3
   15e24:	bf08      	it	eq
   15e26:	2201      	moveq	r2, #1
   15e28:	e8df f002 	tbb	[pc, r2]
   15e2c:	02840287 	.word	0x02840287
   15e30:	2600      	movs	r6, #0
   15e32:	4608      	mov	r0, r1
   15e34:	e081      	b.n	15f3a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x19e>
   15e36:	2100      	movs	r1, #0
   15e38:	e03f      	b.n	15eba <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   15e3a:	ebac 060a 	sub.w	r6, ip, sl
   15e3e:	2100      	movs	r1, #0
   15e40:	4693      	mov	fp, r2
   15e42:	4613      	mov	r3, r2
   15e44:	e9cd 7501 	strd	r7, r5, [sp, #4]
   15e48:	781a      	ldrb	r2, [r3, #0]
   15e4a:	785d      	ldrb	r5, [r3, #1]
   15e4c:	7898      	ldrb	r0, [r3, #2]
   15e4e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   15e52:	78df      	ldrb	r7, [r3, #3]
   15e54:	2a80      	cmp	r2, #128	; 0x80
   15e56:	f005 02c0 	and.w	r2, r5, #192	; 0xc0
   15e5a:	bf08      	it	eq
   15e5c:	3101      	addeq	r1, #1
   15e5e:	2a80      	cmp	r2, #128	; 0x80
   15e60:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   15e64:	bf08      	it	eq
   15e66:	3101      	addeq	r1, #1
   15e68:	2880      	cmp	r0, #128	; 0x80
   15e6a:	f007 00c0 	and.w	r0, r7, #192	; 0xc0
   15e6e:	bf08      	it	eq
   15e70:	3101      	addeq	r1, #1
   15e72:	2880      	cmp	r0, #128	; 0x80
   15e74:	bf08      	it	eq
   15e76:	3101      	addeq	r1, #1
   15e78:	3304      	adds	r3, #4
   15e7a:	3604      	adds	r6, #4
   15e7c:	d1e4      	bne.n	15e48 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xac>
   15e7e:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   15e82:	465a      	mov	r2, fp
   15e84:	f1bc 0f00 	cmp.w	ip, #0
   15e88:	d017      	beq.n	15eba <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   15e8a:	7818      	ldrb	r0, [r3, #0]
   15e8c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   15e90:	2880      	cmp	r0, #128	; 0x80
   15e92:	bf08      	it	eq
   15e94:	3101      	addeq	r1, #1
   15e96:	f1bc 0f01 	cmp.w	ip, #1
   15e9a:	d00e      	beq.n	15eba <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   15e9c:	7858      	ldrb	r0, [r3, #1]
   15e9e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   15ea2:	2880      	cmp	r0, #128	; 0x80
   15ea4:	bf08      	it	eq
   15ea6:	3101      	addeq	r1, #1
   15ea8:	f1bc 0f02 	cmp.w	ip, #2
   15eac:	d005      	beq.n	15eba <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   15eae:	7898      	ldrb	r0, [r3, #2]
   15eb0:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   15eb4:	2880      	cmp	r0, #128	; 0x80
   15eb6:	bf08      	it	eq
   15eb8:	3101      	addeq	r1, #1
   15eba:	eb09 000a 	add.w	r0, r9, sl
   15ebe:	eba0 0901 	sub.w	r9, r0, r1
   15ec2:	68a0      	ldr	r0, [r4, #8]
   15ec4:	2801      	cmp	r0, #1
   15ec6:	d09d      	beq.n	15e04 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x68>
   15ec8:	4620      	mov	r0, r4
   15eca:	4641      	mov	r1, r8
   15ecc:	4653      	mov	r3, sl
   15ece:	f000 f893 	bl	15ff8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   15ed2:	b120      	cbz	r0, 15ede <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x142>
   15ed4:	2601      	movs	r6, #1
   15ed6:	4630      	mov	r0, r6
   15ed8:	b003      	add	sp, #12
   15eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ede:	69e1      	ldr	r1, [r4, #28]
   15ee0:	463a      	mov	r2, r7
   15ee2:	69a0      	ldr	r0, [r4, #24]
   15ee4:	68cb      	ldr	r3, [r1, #12]
   15ee6:	4629      	mov	r1, r5
   15ee8:	b003      	add	sp, #12
   15eea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15eee:	4718      	bx	r3
   15ef0:	6860      	ldr	r0, [r4, #4]
   15ef2:	2601      	movs	r6, #1
   15ef4:	9002      	str	r0, [sp, #8]
   15ef6:	2030      	movs	r0, #48	; 0x30
   15ef8:	f894 1020 	ldrb.w	r1, [r4, #32]
   15efc:	4653      	mov	r3, sl
   15efe:	6060      	str	r0, [r4, #4]
   15f00:	4620      	mov	r0, r4
   15f02:	9101      	str	r1, [sp, #4]
   15f04:	4641      	mov	r1, r8
   15f06:	f884 6020 	strb.w	r6, [r4, #32]
   15f0a:	f000 f875 	bl	15ff8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   15f0e:	2800      	cmp	r0, #0
   15f10:	d1e1      	bne.n	15ed6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   15f12:	f894 2020 	ldrb.w	r2, [r4, #32]
   15f16:	ebab 0109 	sub.w	r1, fp, r9
   15f1a:	2000      	movs	r0, #0
   15f1c:	46a9      	mov	r9, r5
   15f1e:	2a03      	cmp	r2, #3
   15f20:	bf08      	it	eq
   15f22:	2201      	moveq	r2, #1
   15f24:	460e      	mov	r6, r1
   15f26:	e8df f002 	tbb	[pc, r2]
   15f2a:	0235      	.short	0x0235
   15f2c:	0232      	.short	0x0232
   15f2e:	2600      	movs	r6, #0
   15f30:	4608      	mov	r0, r1
   15f32:	e02f      	b.n	15f94 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1f8>
   15f34:	0848      	lsrs	r0, r1, #1
   15f36:	3101      	adds	r1, #1
   15f38:	084e      	lsrs	r6, r1, #1
   15f3a:	1c45      	adds	r5, r0, #1
   15f3c:	3d01      	subs	r5, #1
   15f3e:	d007      	beq.n	15f50 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1b4>
   15f40:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   15f44:	6861      	ldr	r1, [r4, #4]
   15f46:	6912      	ldr	r2, [r2, #16]
   15f48:	4790      	blx	r2
   15f4a:	2800      	cmp	r0, #0
   15f4c:	d0f6      	beq.n	15f3c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1a0>
   15f4e:	e7c1      	b.n	15ed4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   15f50:	9a02      	ldr	r2, [sp, #8]
   15f52:	4620      	mov	r0, r4
   15f54:	4641      	mov	r1, r8
   15f56:	4653      	mov	r3, sl
   15f58:	f8d4 b004 	ldr.w	fp, [r4, #4]
   15f5c:	f000 f84c 	bl	15ff8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   15f60:	2800      	cmp	r0, #0
   15f62:	d1b7      	bne.n	15ed4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   15f64:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   15f68:	463a      	mov	r2, r7
   15f6a:	68cb      	ldr	r3, [r1, #12]
   15f6c:	4649      	mov	r1, r9
   15f6e:	4798      	blx	r3
   15f70:	2800      	cmp	r0, #0
   15f72:	d1af      	bne.n	15ed4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   15f74:	e9d4 5406 	ldrd	r5, r4, [r4, #24]
   15f78:	1c77      	adds	r7, r6, #1
   15f7a:	2601      	movs	r6, #1
   15f7c:	3f01      	subs	r7, #1
   15f7e:	d02c      	beq.n	15fda <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x23e>
   15f80:	6922      	ldr	r2, [r4, #16]
   15f82:	4628      	mov	r0, r5
   15f84:	4659      	mov	r1, fp
   15f86:	4790      	blx	r2
   15f88:	2800      	cmp	r0, #0
   15f8a:	d0f7      	beq.n	15f7c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1e0>
   15f8c:	e7a3      	b.n	15ed6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   15f8e:	0848      	lsrs	r0, r1, #1
   15f90:	3101      	adds	r1, #1
   15f92:	084e      	lsrs	r6, r1, #1
   15f94:	1c45      	adds	r5, r0, #1
   15f96:	3d01      	subs	r5, #1
   15f98:	d007      	beq.n	15faa <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x20e>
   15f9a:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   15f9e:	6861      	ldr	r1, [r4, #4]
   15fa0:	6912      	ldr	r2, [r2, #16]
   15fa2:	4790      	blx	r2
   15fa4:	2800      	cmp	r0, #0
   15fa6:	d0f6      	beq.n	15f96 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1fa>
   15fa8:	e794      	b.n	15ed4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   15faa:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   15fae:	463a      	mov	r2, r7
   15fb0:	68cb      	ldr	r3, [r1, #12]
   15fb2:	4649      	mov	r1, r9
   15fb4:	f8d4 8004 	ldr.w	r8, [r4, #4]
   15fb8:	4798      	blx	r3
   15fba:	2800      	cmp	r0, #0
   15fbc:	f47f af8a 	bne.w	15ed4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   15fc0:	e9d4 9506 	ldrd	r9, r5, [r4, #24]
   15fc4:	1c77      	adds	r7, r6, #1
   15fc6:	2601      	movs	r6, #1
   15fc8:	3f01      	subs	r7, #1
   15fca:	d00b      	beq.n	15fe4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x248>
   15fcc:	692a      	ldr	r2, [r5, #16]
   15fce:	4648      	mov	r0, r9
   15fd0:	4641      	mov	r1, r8
   15fd2:	4790      	blx	r2
   15fd4:	2800      	cmp	r0, #0
   15fd6:	d0f7      	beq.n	15fc8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x22c>
   15fd8:	e77d      	b.n	15ed6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   15fda:	2600      	movs	r6, #0
   15fdc:	4630      	mov	r0, r6
   15fde:	b003      	add	sp, #12
   15fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fe4:	9801      	ldr	r0, [sp, #4]
   15fe6:	2600      	movs	r6, #0
   15fe8:	f884 0020 	strb.w	r0, [r4, #32]
   15fec:	9802      	ldr	r0, [sp, #8]
   15fee:	6060      	str	r0, [r4, #4]
   15ff0:	4630      	mov	r0, r6
   15ff2:	b003      	add	sp, #12
   15ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015ff8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>:
   15ff8:	b570      	push	{r4, r5, r6, lr}
   15ffa:	461c      	mov	r4, r3
   15ffc:	4615      	mov	r5, r2
   15ffe:	4606      	mov	r6, r0
   16000:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
   16004:	d006      	beq.n	16014 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   16006:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
   1600a:	6912      	ldr	r2, [r2, #16]
   1600c:	4790      	blx	r2
   1600e:	b108      	cbz	r0, 16014 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   16010:	2001      	movs	r0, #1
   16012:	bd70      	pop	{r4, r5, r6, pc}
   16014:	b13d      	cbz	r5, 16026 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x2e>
   16016:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
   1601a:	4622      	mov	r2, r4
   1601c:	68cb      	ldr	r3, [r1, #12]
   1601e:	4629      	mov	r1, r5
   16020:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16024:	4718      	bx	r3
   16026:	2000      	movs	r0, #0
   16028:	bd70      	pop	{r4, r5, r6, pc}
	...

0001602c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>:
   1602c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16030:	b081      	sub	sp, #4
   16032:	f8d0 e008 	ldr.w	lr, [r0, #8]
   16036:	4682      	mov	sl, r0
   16038:	6900      	ldr	r0, [r0, #16]
   1603a:	4691      	mov	r9, r2
   1603c:	4688      	mov	r8, r1
   1603e:	f1be 0f01 	cmp.w	lr, #1
   16042:	d111      	bne.n	16068 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x3c>
   16044:	2801      	cmp	r0, #1
   16046:	d012      	beq.n	1606e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x42>
   16048:	f1b9 0f00 	cmp.w	r9, #0
   1604c:	f000 80c5 	beq.w	161da <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1ae>
   16050:	f1a9 0101 	sub.w	r1, r9, #1
   16054:	f009 0003 	and.w	r0, r9, #3
   16058:	2903      	cmp	r1, #3
   1605a:	d267      	bcs.n	1612c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x100>
   1605c:	2100      	movs	r1, #0
   1605e:	4642      	mov	r2, r8
   16060:	2800      	cmp	r0, #0
   16062:	f040 8083 	bne.w	1616c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x140>
   16066:	e097      	b.n	16198 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   16068:	2801      	cmp	r0, #1
   1606a:	f040 80bd 	bne.w	161e8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   1606e:	f1b9 0f00 	cmp.w	r9, #0
   16072:	d054      	beq.n	1611e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xf2>
   16074:	f8da 0014 	ldr.w	r0, [sl, #20]
   16078:	eb08 0109 	add.w	r1, r8, r9
   1607c:	2200      	movs	r2, #0
   1607e:	4647      	mov	r7, r8
   16080:	1c43      	adds	r3, r0, #1
   16082:	4646      	mov	r6, r8
   16084:	463c      	mov	r4, r7
   16086:	f914 5b01 	ldrsb.w	r5, [r4], #1
   1608a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1608e:	b2e8      	uxtb	r0, r5
   16090:	dc2e      	bgt.n	160f0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   16092:	428c      	cmp	r4, r1
   16094:	d01a      	beq.n	160cc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xa0>
   16096:	787d      	ldrb	r5, [r7, #1]
   16098:	1cbc      	adds	r4, r7, #2
   1609a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   1609e:	4627      	mov	r7, r4
   160a0:	f000 0b1f 	and.w	fp, r0, #31
   160a4:	28df      	cmp	r0, #223	; 0xdf
   160a6:	d917      	bls.n	160d8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xac>
   160a8:	428f      	cmp	r7, r1
   160aa:	d018      	beq.n	160de <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xb2>
   160ac:	f817 4b01 	ldrb.w	r4, [r7], #1
   160b0:	f004 0c3f 	and.w	ip, r4, #63	; 0x3f
   160b4:	463c      	mov	r4, r7
   160b6:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   160ba:	28f0      	cmp	r0, #240	; 0xf0
   160bc:	d316      	bcc.n	160ec <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc0>
   160be:	428f      	cmp	r7, r1
   160c0:	d020      	beq.n	16104 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xd8>
   160c2:	f817 0b01 	ldrb.w	r0, [r7], #1
   160c6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   160ca:	e01d      	b.n	16108 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xdc>
   160cc:	2500      	movs	r5, #0
   160ce:	460f      	mov	r7, r1
   160d0:	f000 0b1f 	and.w	fp, r0, #31
   160d4:	28df      	cmp	r0, #223	; 0xdf
   160d6:	d8e7      	bhi.n	160a8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x7c>
   160d8:	ea45 108b 	orr.w	r0, r5, fp, lsl #6
   160dc:	e008      	b.n	160f0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   160de:	f04f 0c00 	mov.w	ip, #0
   160e2:	460f      	mov	r7, r1
   160e4:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   160e8:	28f0      	cmp	r0, #240	; 0xf0
   160ea:	d2e8      	bcs.n	160be <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x92>
   160ec:	ea45 300b 	orr.w	r0, r5, fp, lsl #12
   160f0:	4627      	mov	r7, r4
   160f2:	3b01      	subs	r3, #1
   160f4:	d065      	beq.n	161c2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x196>
   160f6:	1b90      	subs	r0, r2, r6
   160f8:	42b9      	cmp	r1, r7
   160fa:	eb00 0207 	add.w	r2, r0, r7
   160fe:	463e      	mov	r6, r7
   16100:	d1c0      	bne.n	16084 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x58>
   16102:	e061      	b.n	161c8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   16104:	2000      	movs	r0, #0
   16106:	4627      	mov	r7, r4
   16108:	f44f 14e0 	mov.w	r4, #1835008	; 0x1c0000
   1610c:	ea04 448b 	and.w	r4, r4, fp, lsl #18
   16110:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   16114:	4428      	add	r0, r5
   16116:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   1611a:	d1ea      	bne.n	160f2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc6>
   1611c:	e054      	b.n	161c8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   1611e:	2200      	movs	r2, #0
   16120:	f1be 0f01 	cmp.w	lr, #1
   16124:	d054      	beq.n	161d0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   16126:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   1612a:	e062      	b.n	161f2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1c6>
   1612c:	eba0 0309 	sub.w	r3, r0, r9
   16130:	2100      	movs	r1, #0
   16132:	4642      	mov	r2, r8
   16134:	7817      	ldrb	r7, [r2, #0]
   16136:	7856      	ldrb	r6, [r2, #1]
   16138:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
   1613c:	7895      	ldrb	r5, [r2, #2]
   1613e:	78d4      	ldrb	r4, [r2, #3]
   16140:	2f80      	cmp	r7, #128	; 0x80
   16142:	f006 07c0 	and.w	r7, r6, #192	; 0xc0
   16146:	bf08      	it	eq
   16148:	3101      	addeq	r1, #1
   1614a:	2f80      	cmp	r7, #128	; 0x80
   1614c:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
   16150:	bf08      	it	eq
   16152:	3101      	addeq	r1, #1
   16154:	2f80      	cmp	r7, #128	; 0x80
   16156:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   1615a:	bf08      	it	eq
   1615c:	3101      	addeq	r1, #1
   1615e:	2f80      	cmp	r7, #128	; 0x80
   16160:	bf08      	it	eq
   16162:	3101      	addeq	r1, #1
   16164:	3204      	adds	r2, #4
   16166:	3304      	adds	r3, #4
   16168:	d1e4      	bne.n	16134 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x108>
   1616a:	b1a8      	cbz	r0, 16198 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   1616c:	7813      	ldrb	r3, [r2, #0]
   1616e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16172:	2b80      	cmp	r3, #128	; 0x80
   16174:	bf08      	it	eq
   16176:	3101      	addeq	r1, #1
   16178:	2801      	cmp	r0, #1
   1617a:	d00d      	beq.n	16198 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   1617c:	7853      	ldrb	r3, [r2, #1]
   1617e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16182:	2b80      	cmp	r3, #128	; 0x80
   16184:	bf08      	it	eq
   16186:	3101      	addeq	r1, #1
   16188:	2802      	cmp	r0, #2
   1618a:	d005      	beq.n	16198 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   1618c:	7890      	ldrb	r0, [r2, #2]
   1618e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   16192:	2880      	cmp	r0, #128	; 0x80
   16194:	bf08      	it	eq
   16196:	3101      	addeq	r1, #1
   16198:	f8da 000c 	ldr.w	r0, [sl, #12]
   1619c:	eba9 0101 	sub.w	r1, r9, r1
   161a0:	4281      	cmp	r1, r0
   161a2:	d221      	bcs.n	161e8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   161a4:	f1b9 0f00 	cmp.w	r9, #0
   161a8:	d029      	beq.n	161fe <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d2>
   161aa:	f1a9 0101 	sub.w	r1, r9, #1
   161ae:	f009 0c03 	and.w	ip, r9, #3
   161b2:	2903      	cmp	r1, #3
   161b4:	d225      	bcs.n	16202 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d6>
   161b6:	2100      	movs	r1, #0
   161b8:	4643      	mov	r3, r8
   161ba:	f1bc 0f00 	cmp.w	ip, #0
   161be:	d142      	bne.n	16246 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x21a>
   161c0:	e059      	b.n	16276 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   161c2:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   161c6:	d167      	bne.n	16298 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x26c>
   161c8:	464a      	mov	r2, r9
   161ca:	f1be 0f01 	cmp.w	lr, #1
   161ce:	d1aa      	bne.n	16126 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   161d0:	4691      	mov	r9, r2
   161d2:	f1b9 0f00 	cmp.w	r9, #0
   161d6:	f47f af3b 	bne.w	16050 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24>
   161da:	2100      	movs	r1, #0
   161dc:	f8da 000c 	ldr.w	r0, [sl, #12]
   161e0:	eba9 0101 	sub.w	r1, r9, r1
   161e4:	4281      	cmp	r1, r0
   161e6:	d3dd      	bcc.n	161a4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x178>
   161e8:	f8da 101c 	ldr.w	r1, [sl, #28]
   161ec:	464a      	mov	r2, r9
   161ee:	f8da 0018 	ldr.w	r0, [sl, #24]
   161f2:	68cb      	ldr	r3, [r1, #12]
   161f4:	4641      	mov	r1, r8
   161f6:	b001      	add	sp, #4
   161f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161fc:	4718      	bx	r3
   161fe:	2100      	movs	r1, #0
   16200:	e039      	b.n	16276 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   16202:	ebac 0709 	sub.w	r7, ip, r9
   16206:	2100      	movs	r1, #0
   16208:	4643      	mov	r3, r8
   1620a:	781e      	ldrb	r6, [r3, #0]
   1620c:	785d      	ldrb	r5, [r3, #1]
   1620e:	f006 06c0 	and.w	r6, r6, #192	; 0xc0
   16212:	789c      	ldrb	r4, [r3, #2]
   16214:	78da      	ldrb	r2, [r3, #3]
   16216:	2e80      	cmp	r6, #128	; 0x80
   16218:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   1621c:	bf08      	it	eq
   1621e:	3101      	addeq	r1, #1
   16220:	2e80      	cmp	r6, #128	; 0x80
   16222:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
   16226:	bf08      	it	eq
   16228:	3101      	addeq	r1, #1
   1622a:	2e80      	cmp	r6, #128	; 0x80
   1622c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   16230:	bf08      	it	eq
   16232:	3101      	addeq	r1, #1
   16234:	2a80      	cmp	r2, #128	; 0x80
   16236:	bf08      	it	eq
   16238:	3101      	addeq	r1, #1
   1623a:	3304      	adds	r3, #4
   1623c:	3704      	adds	r7, #4
   1623e:	d1e4      	bne.n	1620a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1de>
   16240:	f1bc 0f00 	cmp.w	ip, #0
   16244:	d017      	beq.n	16276 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   16246:	781a      	ldrb	r2, [r3, #0]
   16248:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1624c:	2a80      	cmp	r2, #128	; 0x80
   1624e:	bf08      	it	eq
   16250:	3101      	addeq	r1, #1
   16252:	f1bc 0f01 	cmp.w	ip, #1
   16256:	d00e      	beq.n	16276 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   16258:	785a      	ldrb	r2, [r3, #1]
   1625a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1625e:	2a80      	cmp	r2, #128	; 0x80
   16260:	bf08      	it	eq
   16262:	3101      	addeq	r1, #1
   16264:	f1bc 0f02 	cmp.w	ip, #2
   16268:	d005      	beq.n	16276 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   1626a:	789a      	ldrb	r2, [r3, #2]
   1626c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   16270:	2a80      	cmp	r2, #128	; 0x80
   16272:	bf08      	it	eq
   16274:	3101      	addeq	r1, #1
   16276:	f89a 3020 	ldrb.w	r3, [sl, #32]
   1627a:	eba1 0109 	sub.w	r1, r1, r9
   1627e:	4401      	add	r1, r0
   16280:	2000      	movs	r0, #0
   16282:	1eda      	subs	r2, r3, #3
   16284:	bf18      	it	ne
   16286:	461a      	movne	r2, r3
   16288:	460e      	mov	r6, r1
   1628a:	e8df f002 	tbb	[pc, r2]
   1628e:	0216      	.short	0x0216
   16290:	0213      	.short	0x0213
   16292:	2600      	movs	r6, #0
   16294:	4608      	mov	r0, r1
   16296:	e010      	b.n	162ba <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x28e>
   16298:	2a00      	cmp	r2, #0
   1629a:	bf18      	it	ne
   1629c:	454a      	cmpne	r2, r9
   1629e:	d134      	bne.n	1630a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2de>
   162a0:	4640      	mov	r0, r8
   162a2:	2800      	cmp	r0, #0
   162a4:	bf0c      	ite	eq
   162a6:	464a      	moveq	r2, r9
   162a8:	4680      	movne	r8, r0
   162aa:	f1be 0f01 	cmp.w	lr, #1
   162ae:	f43f af8f 	beq.w	161d0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   162b2:	e738      	b.n	16126 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   162b4:	0848      	lsrs	r0, r1, #1
   162b6:	3101      	adds	r1, #1
   162b8:	084e      	lsrs	r6, r1, #1
   162ba:	1c44      	adds	r4, r0, #1
   162bc:	3c01      	subs	r4, #1
   162be:	d008      	beq.n	162d2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2a6>
   162c0:	e9da 0206 	ldrd	r0, r2, [sl, #24]
   162c4:	f8da 1004 	ldr.w	r1, [sl, #4]
   162c8:	6912      	ldr	r2, [r2, #16]
   162ca:	4790      	blx	r2
   162cc:	2800      	cmp	r0, #0
   162ce:	d0f5      	beq.n	162bc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x290>
   162d0:	e013      	b.n	162fa <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   162d2:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   162d6:	464a      	mov	r2, r9
   162d8:	68cb      	ldr	r3, [r1, #12]
   162da:	4641      	mov	r1, r8
   162dc:	f8da 7004 	ldr.w	r7, [sl, #4]
   162e0:	4798      	blx	r3
   162e2:	b950      	cbnz	r0, 162fa <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   162e4:	e9da 4506 	ldrd	r4, r5, [sl, #24]
   162e8:	3601      	adds	r6, #1
   162ea:	3e01      	subs	r6, #1
   162ec:	d009      	beq.n	16302 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2d6>
   162ee:	692a      	ldr	r2, [r5, #16]
   162f0:	4620      	mov	r0, r4
   162f2:	4639      	mov	r1, r7
   162f4:	4790      	blx	r2
   162f6:	2800      	cmp	r0, #0
   162f8:	d0f7      	beq.n	162ea <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2be>
   162fa:	2001      	movs	r0, #1
   162fc:	b001      	add	sp, #4
   162fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16302:	2000      	movs	r0, #0
   16304:	b001      	add	sp, #4
   16306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1630a:	454a      	cmp	r2, r9
   1630c:	d204      	bcs.n	16318 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ec>
   1630e:	f918 0002 	ldrsb.w	r0, [r8, r2]
   16312:	f110 0f40 	cmn.w	r0, #64	; 0x40
   16316:	dac3      	bge.n	162a0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x274>
   16318:	2000      	movs	r0, #0
   1631a:	2200      	movs	r2, #0
   1631c:	2800      	cmp	r0, #0
   1631e:	bf0c      	ite	eq
   16320:	464a      	moveq	r2, r9
   16322:	4680      	movne	r8, r0
   16324:	f1be 0f01 	cmp.w	lr, #1
   16328:	f43f af52 	beq.w	161d0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   1632c:	e6fb      	b.n	16126 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>

0001632e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>:
   1632e:	7800      	ldrb	r0, [r0, #0]
   16330:	f3c0 1000 	ubfx	r0, r0, #4, #1
   16334:	4770      	bx	lr

00016336 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>:
   16336:	7800      	ldrb	r0, [r0, #0]
   16338:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1633c:	4770      	bx	lr

0001633e <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>:
   1633e:	b570      	push	{r4, r5, r6, lr}
   16340:	460d      	mov	r5, r1
   16342:	4606      	mov	r6, r0
   16344:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   16348:	461c      	mov	r4, r3
   1634a:	68cb      	ldr	r3, [r1, #12]
   1634c:	4611      	mov	r1, r2
   1634e:	4622      	mov	r2, r4
   16350:	4798      	blx	r3
   16352:	7230      	strb	r0, [r6, #8]
   16354:	fab4 f084 	clz	r0, r4
   16358:	0940      	lsrs	r0, r0, #5
   1635a:	7270      	strb	r0, [r6, #9]
   1635c:	2000      	movs	r0, #0
   1635e:	e9c6 5000 	strd	r5, r0, [r6]
   16362:	bd70      	pop	{r4, r5, r6, pc}

00016364 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E>:
   16364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16368:	b085      	sub	sp, #20
   1636a:	460c      	mov	r4, r1
   1636c:	4605      	mov	r5, r0
   1636e:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   16372:	690a      	ldr	r2, [r1, #16]
   16374:	2127      	movs	r1, #39	; 0x27
   16376:	4790      	blx	r2
   16378:	b118      	cbz	r0, 16382 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x1e>
   1637a:	2001      	movs	r0, #1
   1637c:	b005      	add	sp, #20
   1637e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16382:	6829      	ldr	r1, [r5, #0]
   16384:	a801      	add	r0, sp, #4
   16386:	2201      	movs	r2, #1
   16388:	f7ff f878 	bl	1547c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>
   1638c:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   16390:	f04f 091c 	mov.w	r9, #28
   16394:	f8dd 800c 	ldr.w	r8, [sp, #12]
   16398:	f5b5 1f88 	cmp.w	r5, #1114112	; 0x110000
   1639c:	f89d 6010 	ldrb.w	r6, [sp, #16]
   163a0:	d139      	bne.n	16416 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xb2>
   163a2:	f44f 1588 	mov.w	r5, #1114112	; 0x110000
   163a6:	2f02      	cmp	r7, #2
   163a8:	f0c0 806b 	bcc.w	16482 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x11e>
   163ac:	d00c      	beq.n	163c8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x64>
   163ae:	b2f0      	uxtb	r0, r6
   163b0:	2604      	movs	r6, #4
   163b2:	2703      	movs	r7, #3
   163b4:	215c      	movs	r1, #92	; 0x5c
   163b6:	e8df f000 	tbb	[pc, r0]
   163ba:	0364      	.short	0x0364
   163bc:	09242010 	.word	0x09242010
   163c0:	2600      	movs	r6, #0
   163c2:	2703      	movs	r7, #3
   163c4:	217d      	movs	r1, #125	; 0x7d
   163c6:	e001      	b.n	163cc <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   163c8:	2701      	movs	r7, #1
   163ca:	215c      	movs	r1, #92	; 0x5c
   163cc:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   163d0:	6912      	ldr	r2, [r2, #16]
   163d2:	4790      	blx	r2
   163d4:	2800      	cmp	r0, #0
   163d6:	d0e6      	beq.n	163a6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x42>
   163d8:	e7cf      	b.n	1637a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   163da:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   163de:	2602      	movs	r6, #2
   163e0:	2703      	movs	r7, #3
   163e2:	f1b8 0f00 	cmp.w	r8, #0
   163e6:	fa25 f100 	lsr.w	r1, r5, r0
   163ea:	bf08      	it	eq
   163ec:	2601      	moveq	r6, #1
   163ee:	bf18      	it	ne
   163f0:	f1a8 0801 	subne.w	r8, r8, #1
   163f4:	f367 111f 	bfi	r1, r7, #4, #28
   163f8:	e7e8      	b.n	163cc <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   163fa:	2602      	movs	r6, #2
   163fc:	2703      	movs	r7, #3
   163fe:	217b      	movs	r1, #123	; 0x7b
   16400:	e7e4      	b.n	163cc <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   16402:	2703      	movs	r7, #3
   16404:	2175      	movs	r1, #117	; 0x75
   16406:	2603      	movs	r6, #3
   16408:	e7e0      	b.n	163cc <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   1640a:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   1640e:	6912      	ldr	r2, [r2, #16]
   16410:	4790      	blx	r2
   16412:	2800      	cmp	r0, #0
   16414:	d1b1      	bne.n	1637a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   16416:	4638      	mov	r0, r7
   16418:	2701      	movs	r7, #1
   1641a:	215c      	movs	r1, #92	; 0x5c
   1641c:	e8df f000 	tbb	[pc, r0]
   16420:	06020331 	.word	0x06020331
   16424:	e7f1      	b.n	1640a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   16426:	2700      	movs	r7, #0
   16428:	4629      	mov	r1, r5
   1642a:	e7ee      	b.n	1640a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1642c:	b2f0      	uxtb	r0, r6
   1642e:	2604      	movs	r6, #4
   16430:	2703      	movs	r7, #3
   16432:	215c      	movs	r1, #92	; 0x5c
   16434:	e8df f000 	tbb	[pc, r0]
   16438:	1d080425 	.word	0x1d080425
   1643c:	0321      	.short	0x0321
   1643e:	e7e4      	b.n	1640a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   16440:	2600      	movs	r6, #0
   16442:	2703      	movs	r7, #3
   16444:	217d      	movs	r1, #125	; 0x7d
   16446:	e7e0      	b.n	1640a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   16448:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   1644c:	2602      	movs	r6, #2
   1644e:	2703      	movs	r7, #3
   16450:	fa25 f000 	lsr.w	r0, r5, r0
   16454:	f000 000f 	and.w	r0, r0, #15
   16458:	f100 0157 	add.w	r1, r0, #87	; 0x57
   1645c:	280a      	cmp	r0, #10
   1645e:	bf38      	it	cc
   16460:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   16464:	f1b8 0f00 	cmp.w	r8, #0
   16468:	bf0c      	ite	eq
   1646a:	2601      	moveq	r6, #1
   1646c:	f1a8 0801 	subne.w	r8, r8, #1
   16470:	e7cb      	b.n	1640a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   16472:	2602      	movs	r6, #2
   16474:	2703      	movs	r7, #3
   16476:	217b      	movs	r1, #123	; 0x7b
   16478:	e7c7      	b.n	1640a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1647a:	2703      	movs	r7, #3
   1647c:	2175      	movs	r1, #117	; 0x75
   1647e:	2603      	movs	r6, #3
   16480:	e7c3      	b.n	1640a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   16482:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   16486:	690a      	ldr	r2, [r1, #16]
   16488:	2127      	movs	r1, #39	; 0x27
   1648a:	b005      	add	sp, #20
   1648c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16490:	4710      	bx	r2

00016492 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>:
   16492:	b08c      	sub	sp, #48	; 0x30
   16494:	e9cd 0100 	strd	r0, r1, [sp]
   16498:	2002      	movs	r0, #2
   1649a:	a908      	add	r1, sp, #32
   1649c:	9007      	str	r0, [sp, #28]
   1649e:	9106      	str	r1, [sp, #24]
   164a0:	2100      	movs	r1, #0
   164a2:	9105      	str	r1, [sp, #20]
   164a4:	e9cd 0103 	strd	r0, r1, [sp, #12]
   164a8:	f64e 1000 	movw	r0, #59648	; 0xe900
   164ac:	f2c0 0001 	movt	r0, #1
   164b0:	a901      	add	r1, sp, #4
   164b2:	9002      	str	r0, [sp, #8]
   164b4:	f247 10df 	movw	r0, #29151	; 0x71df
   164b8:	f2c0 0001 	movt	r0, #1
   164bc:	900b      	str	r0, [sp, #44]	; 0x2c
   164be:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   164c2:	4668      	mov	r0, sp
   164c4:	f64e 1110 	movw	r1, #59664	; 0xe910
   164c8:	9008      	str	r0, [sp, #32]
   164ca:	a802      	add	r0, sp, #8
   164cc:	f2c0 0101 	movt	r1, #1
   164d0:	f7ff f8c2 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   164d4:	defe      	udf	#254	; 0xfe

000164d6 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>:
   164d6:	b08c      	sub	sp, #48	; 0x30
   164d8:	e9cd 0100 	strd	r0, r1, [sp]
   164dc:	2002      	movs	r0, #2
   164de:	a908      	add	r1, sp, #32
   164e0:	9007      	str	r0, [sp, #28]
   164e2:	9106      	str	r1, [sp, #24]
   164e4:	2100      	movs	r1, #0
   164e6:	9105      	str	r1, [sp, #20]
   164e8:	e9cd 0103 	strd	r0, r1, [sp, #12]
   164ec:	f64e 1044 	movw	r0, #59716	; 0xe944
   164f0:	f2c0 0001 	movt	r0, #1
   164f4:	a901      	add	r1, sp, #4
   164f6:	9002      	str	r0, [sp, #8]
   164f8:	f247 10df 	movw	r0, #29151	; 0x71df
   164fc:	f2c0 0001 	movt	r0, #1
   16500:	900b      	str	r0, [sp, #44]	; 0x2c
   16502:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   16506:	4668      	mov	r0, sp
   16508:	f64e 1154 	movw	r1, #59732	; 0xe954
   1650c:	9008      	str	r0, [sp, #32]
   1650e:	a802      	add	r0, sp, #8
   16510:	f2c0 0101 	movt	r1, #1
   16514:	f7ff f8a0 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16518:	defe      	udf	#254	; 0xfe

0001651a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>:
   1651a:	b09a      	sub	sp, #104	; 0x68
   1651c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   16520:	e9cd 2300 	strd	r2, r3, [sp]
   16524:	d802      	bhi.n	1652c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12>
   16526:	2501      	movs	r5, #1
   16528:	468c      	mov	ip, r1
   1652a:	e03e      	b.n	165aa <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   1652c:	f1c1 0e00 	rsb	lr, r1, #0
   16530:	f44f 7c80 	mov.w	ip, #256	; 0x100
   16534:	458c      	cmp	ip, r1
   16536:	d205      	bcs.n	16544 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2a>
   16538:	f910 400c 	ldrsb.w	r4, [r0, ip]
   1653c:	f114 0f41 	cmn.w	r4, #65	; 0x41
   16540:	f300 8108 	bgt.w	16754 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23a>
   16544:	eb0e 040c 	add.w	r4, lr, ip
   16548:	f1ac 0601 	sub.w	r6, ip, #1
   1654c:	2c01      	cmp	r4, #1
   1654e:	d02a      	beq.n	165a6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   16550:	428e      	cmp	r6, r1
   16552:	d206      	bcs.n	16562 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x48>
   16554:	eb00 050c 	add.w	r5, r0, ip
   16558:	f915 5c01 	ldrsb.w	r5, [r5, #-1]
   1655c:	f115 0f41 	cmn.w	r5, #65	; 0x41
   16560:	dc21      	bgt.n	165a6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   16562:	f1ac 0602 	sub.w	r6, ip, #2
   16566:	2c02      	cmp	r4, #2
   16568:	d01d      	beq.n	165a6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   1656a:	428e      	cmp	r6, r1
   1656c:	d206      	bcs.n	1657c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x62>
   1656e:	eb00 050c 	add.w	r5, r0, ip
   16572:	f915 5c02 	ldrsb.w	r5, [r5, #-2]
   16576:	f115 0f41 	cmn.w	r5, #65	; 0x41
   1657a:	dc14      	bgt.n	165a6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   1657c:	f1ac 0603 	sub.w	r6, ip, #3
   16580:	2c03      	cmp	r4, #3
   16582:	d010      	beq.n	165a6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   16584:	428e      	cmp	r6, r1
   16586:	d206      	bcs.n	16596 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x7c>
   16588:	eb00 050c 	add.w	r5, r0, ip
   1658c:	f915 5c03 	ldrsb.w	r5, [r5, #-3]
   16590:	f115 0f41 	cmn.w	r5, #65	; 0x41
   16594:	dc07      	bgt.n	165a6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   16596:	f1bc 0c04 	subs.w	ip, ip, #4
   1659a:	f04f 0500 	mov.w	r5, #0
   1659e:	d004      	beq.n	165aa <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   165a0:	2c04      	cmp	r4, #4
   165a2:	d1c7      	bne.n	16534 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1a>
   165a4:	e001      	b.n	165aa <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   165a6:	2500      	movs	r5, #0
   165a8:	46b4      	mov	ip, r6
   165aa:	2605      	movs	r6, #5
   165ac:	2d00      	cmp	r5, #0
   165ae:	f64e 2522 	movw	r5, #59938	; 0xea22
   165b2:	e9cd 0c02 	strd	r0, ip, [sp, #8]
   165b6:	bf18      	it	ne
   165b8:	2600      	movne	r6, #0
   165ba:	9605      	str	r6, [sp, #20]
   165bc:	f24e 5674 	movw	r6, #58740	; 0xe574
   165c0:	f2c0 0501 	movt	r5, #1
   165c4:	f2c0 0601 	movt	r6, #1
   165c8:	bf18      	it	ne
   165ca:	4635      	movne	r5, r6
   165cc:	428a      	cmp	r2, r1
   165ce:	9504      	str	r5, [sp, #16]
   165d0:	bf98      	it	ls
   165d2:	428b      	cmpls	r3, r1
   165d4:	d92a      	bls.n	1662c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x112>
   165d6:	428a      	cmp	r2, r1
   165d8:	f04f 0003 	mov.w	r0, #3
   165dc:	a910      	add	r1, sp, #64	; 0x40
   165de:	bf88      	it	hi
   165e0:	4613      	movhi	r3, r2
   165e2:	900f      	str	r0, [sp, #60]	; 0x3c
   165e4:	910e      	str	r1, [sp, #56]	; 0x38
   165e6:	2100      	movs	r1, #0
   165e8:	910d      	str	r1, [sp, #52]	; 0x34
   165ea:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   165ee:	f64e 2048 	movw	r0, #59976	; 0xea48
   165f2:	f2c0 0001 	movt	r0, #1
   165f6:	a904      	add	r1, sp, #16
   165f8:	900a      	str	r0, [sp, #40]	; 0x28
   165fa:	f247 20cd 	movw	r0, #29389	; 0x72cd
   165fe:	f2c0 0001 	movt	r0, #1
   16602:	9308      	str	r3, [sp, #32]
   16604:	9015      	str	r0, [sp, #84]	; 0x54
   16606:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
   1660a:	a802      	add	r0, sp, #8
   1660c:	f64e 2160 	movw	r1, #60000	; 0xea60
   16610:	9012      	str	r0, [sp, #72]	; 0x48
   16612:	f247 10df 	movw	r0, #29151	; 0x71df
   16616:	f2c0 0101 	movt	r1, #1
   1661a:	f2c0 0001 	movt	r0, #1
   1661e:	9011      	str	r0, [sp, #68]	; 0x44
   16620:	a808      	add	r0, sp, #32
   16622:	9010      	str	r0, [sp, #64]	; 0x40
   16624:	a80a      	add	r0, sp, #40	; 0x28
   16626:	f7ff f817 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1662a:	defe      	udf	#254	; 0xfe
   1662c:	429a      	cmp	r2, r3
   1662e:	f200 80f1 	bhi.w	16814 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2fa>
   16632:	2a00      	cmp	r2, #0
   16634:	bf18      	it	ne
   16636:	4291      	cmpne	r1, r2
   16638:	d109      	bne.n	1664e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x134>
   1663a:	461a      	mov	r2, r3
   1663c:	2a00      	cmp	r2, #0
   1663e:	9206      	str	r2, [sp, #24]
   16640:	bf18      	it	ne
   16642:	428a      	cmpne	r2, r1
   16644:	d10e      	bne.n	16664 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x14a>
   16646:	4613      	mov	r3, r2
   16648:	428b      	cmp	r3, r1
   1664a:	d047      	beq.n	166dc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   1664c:	e052      	b.n	166f4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   1664e:	d9f5      	bls.n	1663c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x122>
   16650:	5686      	ldrsb	r6, [r0, r2]
   16652:	f116 0f40 	cmn.w	r6, #64	; 0x40
   16656:	bfa8      	it	ge
   16658:	461a      	movge	r2, r3
   1665a:	2a00      	cmp	r2, #0
   1665c:	9206      	str	r2, [sp, #24]
   1665e:	bf18      	it	ne
   16660:	428a      	cmpne	r2, r1
   16662:	d0f0      	beq.n	16646 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   16664:	f1a0 0c01 	sub.w	ip, r0, #1
   16668:	f101 0e02 	add.w	lr, r1, #2
   1666c:	1ccc      	adds	r4, r1, #3
   1666e:	1c4d      	adds	r5, r1, #1
   16670:	1d0e      	adds	r6, r1, #4
   16672:	428a      	cmp	r2, r1
   16674:	d206      	bcs.n	16684 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x16a>
   16676:	eb0c 0302 	add.w	r3, ip, r2
   1667a:	f993 3001 	ldrsb.w	r3, [r3, #1]
   1667e:	f113 0f41 	cmn.w	r3, #65	; 0x41
   16682:	dce0      	bgt.n	16646 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   16684:	1e53      	subs	r3, r2, #1
   16686:	bf18      	it	ne
   16688:	4295      	cmpne	r5, r2
   1668a:	d025      	beq.n	166d8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   1668c:	428b      	cmp	r3, r1
   1668e:	d204      	bcs.n	1669a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x180>
   16690:	f91c 7002 	ldrsb.w	r7, [ip, r2]
   16694:	f117 0f41 	cmn.w	r7, #65	; 0x41
   16698:	dc1e      	bgt.n	166d8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   1669a:	1e93      	subs	r3, r2, #2
   1669c:	bf18      	it	ne
   1669e:	4596      	cmpne	lr, r2
   166a0:	d01a      	beq.n	166d8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   166a2:	428b      	cmp	r3, r1
   166a4:	d206      	bcs.n	166b4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x19a>
   166a6:	eb0c 0702 	add.w	r7, ip, r2
   166aa:	f917 7c01 	ldrsb.w	r7, [r7, #-1]
   166ae:	f117 0f41 	cmn.w	r7, #65	; 0x41
   166b2:	dc11      	bgt.n	166d8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   166b4:	1ed3      	subs	r3, r2, #3
   166b6:	bf18      	it	ne
   166b8:	4294      	cmpne	r4, r2
   166ba:	d00d      	beq.n	166d8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   166bc:	428b      	cmp	r3, r1
   166be:	d206      	bcs.n	166ce <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1b4>
   166c0:	eb0c 0702 	add.w	r7, ip, r2
   166c4:	f917 7c02 	ldrsb.w	r7, [r7, #-2]
   166c8:	f117 0f41 	cmn.w	r7, #65	; 0x41
   166cc:	dc04      	bgt.n	166d8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   166ce:	1f13      	subs	r3, r2, #4
   166d0:	d002      	beq.n	166d8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   166d2:	4296      	cmp	r6, r2
   166d4:	461a      	mov	r2, r3
   166d6:	d1cc      	bne.n	16672 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x158>
   166d8:	428b      	cmp	r3, r1
   166da:	d10b      	bne.n	166f4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   166dc:	f24e 7010 	movw	r0, #59152	; 0xe710
   166e0:	f64e 22b0 	movw	r2, #60080	; 0xeab0
   166e4:	f2c0 0001 	movt	r0, #1
   166e8:	f2c0 0201 	movt	r2, #1
   166ec:	212b      	movs	r1, #43	; 0x2b
   166ee:	f7fe ff7d 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   166f2:	defe      	udf	#254	; 0xfe
   166f4:	18c5      	adds	r5, r0, r3
   166f6:	462e      	mov	r6, r5
   166f8:	f916 4b01 	ldrsb.w	r4, [r6], #1
   166fc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   16700:	b2e2      	uxtb	r2, r4
   16702:	dd02      	ble.n	1670a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1f0>
   16704:	9207      	str	r2, [sp, #28]
   16706:	2101      	movs	r1, #1
   16708:	e04d      	b.n	167a6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   1670a:	4408      	add	r0, r1
   1670c:	4286      	cmp	r6, r0
   1670e:	d10b      	bne.n	16728 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x20e>
   16710:	2500      	movs	r5, #0
   16712:	4606      	mov	r6, r0
   16714:	f002 011f 	and.w	r1, r2, #31
   16718:	2adf      	cmp	r2, #223	; 0xdf
   1671a:	d80d      	bhi.n	16738 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x21e>
   1671c:	ea45 1081 	orr.w	r0, r5, r1, lsl #6
   16720:	2880      	cmp	r0, #128	; 0x80
   16722:	9007      	str	r0, [sp, #28]
   16724:	d333      	bcc.n	1678e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   16726:	e034      	b.n	16792 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   16728:	7869      	ldrb	r1, [r5, #1]
   1672a:	1cae      	adds	r6, r5, #2
   1672c:	f001 053f 	and.w	r5, r1, #63	; 0x3f
   16730:	f002 011f 	and.w	r1, r2, #31
   16734:	2adf      	cmp	r2, #223	; 0xdf
   16736:	d9f1      	bls.n	1671c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x202>
   16738:	4286      	cmp	r6, r0
   1673a:	d10d      	bne.n	16758 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23e>
   1673c:	2400      	movs	r4, #0
   1673e:	4606      	mov	r6, r0
   16740:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   16744:	2af0      	cmp	r2, #240	; 0xf0
   16746:	d20f      	bcs.n	16768 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x24e>
   16748:	ea45 3001 	orr.w	r0, r5, r1, lsl #12
   1674c:	2880      	cmp	r0, #128	; 0x80
   1674e:	9007      	str	r0, [sp, #28]
   16750:	d31d      	bcc.n	1678e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   16752:	e01e      	b.n	16792 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   16754:	2500      	movs	r5, #0
   16756:	e728      	b.n	165aa <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   16758:	f816 4b01 	ldrb.w	r4, [r6], #1
   1675c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   16760:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   16764:	2af0      	cmp	r2, #240	; 0xf0
   16766:	d3ef      	bcc.n	16748 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x22e>
   16768:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   1676c:	ea02 4181 	and.w	r1, r2, r1, lsl #18
   16770:	4286      	cmp	r6, r0
   16772:	bf1a      	itte	ne
   16774:	7830      	ldrbne	r0, [r6, #0]
   16776:	f000 003f 	andne.w	r0, r0, #63	; 0x3f
   1677a:	2000      	moveq	r0, #0
   1677c:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
   16780:	4408      	add	r0, r1
   16782:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   16786:	d0a9      	beq.n	166dc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   16788:	2880      	cmp	r0, #128	; 0x80
   1678a:	9007      	str	r0, [sp, #28]
   1678c:	d201      	bcs.n	16792 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   1678e:	2101      	movs	r1, #1
   16790:	e009      	b.n	167a6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   16792:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   16796:	d201      	bcs.n	1679c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x282>
   16798:	2102      	movs	r1, #2
   1679a:	e004      	b.n	167a6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   1679c:	2104      	movs	r1, #4
   1679e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   167a2:	bf38      	it	cc
   167a4:	2103      	movcc	r1, #3
   167a6:	4419      	add	r1, r3
   167a8:	aa10      	add	r2, sp, #64	; 0x40
   167aa:	a808      	add	r0, sp, #32
   167ac:	e9cd 3108 	strd	r3, r1, [sp, #32]
   167b0:	2105      	movs	r1, #5
   167b2:	910f      	str	r1, [sp, #60]	; 0x3c
   167b4:	920e      	str	r2, [sp, #56]	; 0x38
   167b6:	2200      	movs	r2, #0
   167b8:	920d      	str	r2, [sp, #52]	; 0x34
   167ba:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
   167be:	f64e 21ec 	movw	r1, #60140	; 0xeaec
   167c2:	f2c0 0101 	movt	r1, #1
   167c6:	aa04      	add	r2, sp, #16
   167c8:	910a      	str	r1, [sp, #40]	; 0x28
   167ca:	f247 21cd 	movw	r1, #29389	; 0x72cd
   167ce:	f2c0 0101 	movt	r1, #1
   167d2:	9119      	str	r1, [sp, #100]	; 0x64
   167d4:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
   167d8:	a902      	add	r1, sp, #8
   167da:	9116      	str	r1, [sp, #88]	; 0x58
   167dc:	f245 411d 	movw	r1, #21533	; 0x541d
   167e0:	f2c0 0101 	movt	r1, #1
   167e4:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   167e8:	f246 3065 	movw	r0, #25445	; 0x6365
   167ec:	f2c0 0001 	movt	r0, #1
   167f0:	f64e 3114 	movw	r1, #60180	; 0xeb14
   167f4:	9013      	str	r0, [sp, #76]	; 0x4c
   167f6:	a807      	add	r0, sp, #28
   167f8:	9012      	str	r0, [sp, #72]	; 0x48
   167fa:	f247 10df 	movw	r0, #29151	; 0x71df
   167fe:	f2c0 0001 	movt	r0, #1
   16802:	f2c0 0101 	movt	r1, #1
   16806:	9011      	str	r0, [sp, #68]	; 0x44
   16808:	a806      	add	r0, sp, #24
   1680a:	9010      	str	r0, [sp, #64]	; 0x40
   1680c:	a80a      	add	r0, sp, #40	; 0x28
   1680e:	f7fe ff23 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16812:	defe      	udf	#254	; 0xfe
   16814:	2004      	movs	r0, #4
   16816:	a910      	add	r1, sp, #64	; 0x40
   16818:	900f      	str	r0, [sp, #60]	; 0x3c
   1681a:	910e      	str	r1, [sp, #56]	; 0x38
   1681c:	2100      	movs	r1, #0
   1681e:	910d      	str	r1, [sp, #52]	; 0x34
   16820:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   16824:	f64e 2080 	movw	r0, #60032	; 0xea80
   16828:	f2c0 0001 	movt	r0, #1
   1682c:	a904      	add	r1, sp, #16
   1682e:	900a      	str	r0, [sp, #40]	; 0x28
   16830:	f247 20cd 	movw	r0, #29389	; 0x72cd
   16834:	f2c0 0001 	movt	r0, #1
   16838:	9017      	str	r0, [sp, #92]	; 0x5c
   1683a:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
   1683e:	a802      	add	r0, sp, #8
   16840:	9014      	str	r0, [sp, #80]	; 0x50
   16842:	f247 10df 	movw	r0, #29151	; 0x71df
   16846:	a901      	add	r1, sp, #4
   16848:	f2c0 0001 	movt	r0, #1
   1684c:	9013      	str	r0, [sp, #76]	; 0x4c
   1684e:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
   16852:	f64e 21a0 	movw	r1, #60064	; 0xeaa0
   16856:	4668      	mov	r0, sp
   16858:	f2c0 0101 	movt	r1, #1
   1685c:	9010      	str	r0, [sp, #64]	; 0x40
   1685e:	a80a      	add	r0, sp, #40	; 0x28
   16860:	f7fe fefa 	bl	15658 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16864:	defe      	udf	#254	; 0xfe

00016866 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>:
   16866:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1686a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   1686e:	d270      	bcs.n	16952 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xec>
   16870:	f64e 3e34 	movw	lr, #60212	; 0xeb34
   16874:	f64e 3886 	movw	r8, #60294	; 0xeb86
   16878:	fa1f f980 	uxth.w	r9, r0
   1687c:	f2c0 0e01 	movt	lr, #1
   16880:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   16884:	f04f 0a00 	mov.w	sl, #0
   16888:	f2c0 0801 	movt	r8, #1
   1688c:	4675      	mov	r5, lr
   1688e:	786e      	ldrb	r6, [r5, #1]
   16890:	4652      	mov	r2, sl
   16892:	782b      	ldrb	r3, [r5, #0]
   16894:	3502      	adds	r5, #2
   16896:	44b2      	add	sl, r6
   16898:	4563      	cmp	r3, ip
   1689a:	d129      	bne.n	168f0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x8a>
   1689c:	4592      	cmp	sl, r2
   1689e:	f0c0 8112 	bcc.w	16ac6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   168a2:	ea4f 035a 	mov.w	r3, sl, lsr #1
   168a6:	2b92      	cmp	r3, #146	; 0x92
   168a8:	f200 8112 	bhi.w	16ad0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x26a>
   168ac:	eb08 0302 	add.w	r3, r8, r2
   168b0:	199a      	adds	r2, r3, r6
   168b2:	b31e      	cbz	r6, 168fc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   168b4:	461f      	mov	r7, r3
   168b6:	b2c4      	uxtb	r4, r0
   168b8:	f817 1b01 	ldrb.w	r1, [r7], #1
   168bc:	42a1      	cmp	r1, r4
   168be:	f000 80b6 	beq.w	16a2e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   168c2:	4297      	cmp	r7, r2
   168c4:	d01a      	beq.n	168fc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   168c6:	7859      	ldrb	r1, [r3, #1]
   168c8:	42a1      	cmp	r1, r4
   168ca:	f000 80b0 	beq.w	16a2e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   168ce:	1c99      	adds	r1, r3, #2
   168d0:	4291      	cmp	r1, r2
   168d2:	d013      	beq.n	168fc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   168d4:	7899      	ldrb	r1, [r3, #2]
   168d6:	42a1      	cmp	r1, r4
   168d8:	f000 80a9 	beq.w	16a2e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   168dc:	1cd9      	adds	r1, r3, #3
   168de:	4291      	cmp	r1, r2
   168e0:	d00c      	beq.n	168fc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   168e2:	1d19      	adds	r1, r3, #4
   168e4:	78db      	ldrb	r3, [r3, #3]
   168e6:	3e04      	subs	r6, #4
   168e8:	42a3      	cmp	r3, r4
   168ea:	460b      	mov	r3, r1
   168ec:	d1e1      	bne.n	168b2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x4c>
   168ee:	e09e      	b.n	16a2e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   168f0:	d808      	bhi.n	16904 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   168f2:	f10e 0252 	add.w	r2, lr, #82	; 0x52
   168f6:	4295      	cmp	r5, r2
   168f8:	d1c9      	bne.n	1688e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   168fa:	e003      	b.n	16904 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   168fc:	f10e 0152 	add.w	r1, lr, #82	; 0x52
   16900:	428d      	cmp	r5, r1
   16902:	d1c4      	bne.n	1688e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   16904:	f64e 45ab 	movw	r5, #60587	; 0xecab
   16908:	2101      	movs	r1, #1
   1690a:	f2c0 0501 	movt	r5, #1
   1690e:	4628      	mov	r0, r5
   16910:	4602      	mov	r2, r0
   16912:	f812 7b01 	ldrb.w	r7, [r2], #1
   16916:	b27e      	sxtb	r6, r7
   16918:	2e00      	cmp	r6, #0
   1691a:	d404      	bmi.n	16926 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xc0>
   1691c:	4610      	mov	r0, r2
   1691e:	ebb9 0907 	subs.w	r9, r9, r7
   16922:	d50f      	bpl.n	16944 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xde>
   16924:	e0bd      	b.n	16aa2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16926:	f505 739d 	add.w	r3, r5, #314	; 0x13a
   1692a:	429a      	cmp	r2, r3
   1692c:	f000 80db 	beq.w	16ae6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   16930:	7842      	ldrb	r2, [r0, #1]
   16932:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   16936:	3002      	adds	r0, #2
   16938:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   1693c:	ebb9 0907 	subs.w	r9, r9, r7
   16940:	f100 80af 	bmi.w	16aa2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16944:	f505 729d 	add.w	r2, r5, #314	; 0x13a
   16948:	f081 0101 	eor.w	r1, r1, #1
   1694c:	4290      	cmp	r0, r2
   1694e:	d1df      	bne.n	16910 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xaa>
   16950:	e0a7      	b.n	16aa2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16952:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
   16956:	d26f      	bcs.n	16a38 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1d2>
   16958:	f64e 5ee5 	movw	lr, #60901	; 0xede5
   1695c:	f64e 682b 	movw	r8, #60971	; 0xee2b
   16960:	fa1f f980 	uxth.w	r9, r0
   16964:	f2c0 0e01 	movt	lr, #1
   16968:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   1696c:	f04f 0a00 	mov.w	sl, #0
   16970:	f2c0 0801 	movt	r8, #1
   16974:	4675      	mov	r5, lr
   16976:	786e      	ldrb	r6, [r5, #1]
   16978:	4652      	mov	r2, sl
   1697a:	782b      	ldrb	r3, [r5, #0]
   1697c:	3502      	adds	r5, #2
   1697e:	44b2      	add	sl, r6
   16980:	4563      	cmp	r3, ip
   16982:	d125      	bne.n	169d0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x16a>
   16984:	4592      	cmp	sl, r2
   16986:	f0c0 809e 	bcc.w	16ac6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   1698a:	f1ba 0fa6 	cmp.w	sl, #166	; 0xa6
   1698e:	f200 80a5 	bhi.w	16adc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x276>
   16992:	eb08 0302 	add.w	r3, r8, r2
   16996:	199a      	adds	r2, r3, r6
   16998:	b306      	cbz	r6, 169dc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   1699a:	461f      	mov	r7, r3
   1699c:	b2c4      	uxtb	r4, r0
   1699e:	f817 1b01 	ldrb.w	r1, [r7], #1
   169a2:	42a1      	cmp	r1, r4
   169a4:	d043      	beq.n	16a2e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   169a6:	4297      	cmp	r7, r2
   169a8:	d018      	beq.n	169dc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   169aa:	7859      	ldrb	r1, [r3, #1]
   169ac:	42a1      	cmp	r1, r4
   169ae:	d03e      	beq.n	16a2e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   169b0:	1c99      	adds	r1, r3, #2
   169b2:	4291      	cmp	r1, r2
   169b4:	d012      	beq.n	169dc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   169b6:	7899      	ldrb	r1, [r3, #2]
   169b8:	42a1      	cmp	r1, r4
   169ba:	d038      	beq.n	16a2e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   169bc:	1cd9      	adds	r1, r3, #3
   169be:	4291      	cmp	r1, r2
   169c0:	d00c      	beq.n	169dc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   169c2:	1d19      	adds	r1, r3, #4
   169c4:	78db      	ldrb	r3, [r3, #3]
   169c6:	3e04      	subs	r6, #4
   169c8:	42a3      	cmp	r3, r4
   169ca:	460b      	mov	r3, r1
   169cc:	d1e4      	bne.n	16998 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x132>
   169ce:	e02e      	b.n	16a2e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   169d0:	d808      	bhi.n	169e4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   169d2:	f10e 0246 	add.w	r2, lr, #70	; 0x46
   169d6:	4295      	cmp	r5, r2
   169d8:	d1cd      	bne.n	16976 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   169da:	e003      	b.n	169e4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   169dc:	f10e 0146 	add.w	r1, lr, #70	; 0x46
   169e0:	428d      	cmp	r5, r1
   169e2:	d1c8      	bne.n	16976 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   169e4:	f64e 65d1 	movw	r5, #61137	; 0xeed1
   169e8:	2101      	movs	r1, #1
   169ea:	f2c0 0501 	movt	r5, #1
   169ee:	4628      	mov	r0, r5
   169f0:	4602      	mov	r2, r0
   169f2:	f812 7b01 	ldrb.w	r7, [r2], #1
   169f6:	b27e      	sxtb	r6, r7
   169f8:	2e00      	cmp	r6, #0
   169fa:	d40a      	bmi.n	16a12 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1ac>
   169fc:	4610      	mov	r0, r2
   169fe:	ebb9 0907 	subs.w	r9, r9, r7
   16a02:	d44e      	bmi.n	16aa2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16a04:	f505 72cc 	add.w	r2, r5, #408	; 0x198
   16a08:	f081 0101 	eor.w	r1, r1, #1
   16a0c:	4290      	cmp	r0, r2
   16a0e:	d1ef      	bne.n	169f0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x18a>
   16a10:	e047      	b.n	16aa2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16a12:	f505 73cc 	add.w	r3, r5, #408	; 0x198
   16a16:	429a      	cmp	r2, r3
   16a18:	d065      	beq.n	16ae6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   16a1a:	7842      	ldrb	r2, [r0, #1]
   16a1c:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   16a20:	3002      	adds	r0, #2
   16a22:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   16a26:	ebb9 0907 	subs.w	r9, r9, r7
   16a2a:	d5eb      	bpl.n	16a04 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x19e>
   16a2c:	e039      	b.n	16aa2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16a2e:	2100      	movs	r1, #0
   16a30:	f001 0001 	and.w	r0, r1, #1
   16a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16a38:	f240 51e2 	movw	r1, #1506	; 0x5e2
   16a3c:	f240 63e2 	movw	r3, #1762	; 0x6e2
   16a40:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
   16a44:	1842      	adds	r2, r0, r1
   16a46:	f2c0 030b 	movt	r3, #11
   16a4a:	2100      	movs	r1, #0
   16a4c:	429a      	cmp	r2, r3
   16a4e:	d328      	bcc.n	16aa2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16a50:	f241 421f 	movw	r2, #5151	; 0x141f
   16a54:	f640 431f 	movw	r3, #3103	; 0xc1f
   16a58:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   16a5c:	4402      	add	r2, r0
   16a5e:	429a      	cmp	r2, r3
   16a60:	bf21      	itttt	cs
   16a62:	f243 125e 	movwcs	r2, #12638	; 0x315e
   16a66:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   16a6a:	4402      	addcs	r2, r0
   16a6c:	2a0e      	cmpcs	r2, #14
   16a6e:	d318      	bcc.n	16aa2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16a70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   16a74:	f64b 031e 	movw	r3, #47134	; 0xb81e
   16a78:	f2c0 021f 	movt	r2, #31
   16a7c:	f2c0 0302 	movt	r3, #2
   16a80:	4002      	ands	r2, r0
   16a82:	429a      	cmp	r2, r3
   16a84:	d00d      	beq.n	16aa2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16a86:	f645 1229 	movw	r2, #22825	; 0x5929
   16a8a:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   16a8e:	4402      	add	r2, r0
   16a90:	2a29      	cmp	r2, #41	; 0x29
   16a92:	bf21      	itttt	cs
   16a94:	f644 02cb 	movwcs	r2, #18635	; 0x48cb
   16a98:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   16a9c:	4402      	addcs	r2, r0
   16a9e:	2a0b      	cmpcs	r2, #11
   16aa0:	d203      	bcs.n	16aaa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x244>
   16aa2:	f001 0001 	and.w	r0, r1, #1
   16aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16aaa:	f5a0 2060 	sub.w	r0, r0, #917504	; 0xe0000
   16aae:	f64f 620f 	movw	r2, #65039	; 0xfe0f
   16ab2:	f5a0 71f8 	sub.w	r1, r0, #496	; 0x1f0
   16ab6:	2000      	movs	r0, #0
   16ab8:	f2c0 0202 	movt	r2, #2
   16abc:	4291      	cmp	r1, r2
   16abe:	bf88      	it	hi
   16ac0:	2001      	movhi	r0, #1
   16ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16ac6:	4610      	mov	r0, r2
   16ac8:	4651      	mov	r1, sl
   16aca:	f7ff fd04 	bl	164d6 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16ace:	defe      	udf	#254	; 0xfe
   16ad0:	4650      	mov	r0, sl
   16ad2:	f240 1125 	movw	r1, #293	; 0x125
   16ad6:	f7ff fcdc 	bl	16492 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   16ada:	defe      	udf	#254	; 0xfe
   16adc:	4650      	mov	r0, sl
   16ade:	21a6      	movs	r1, #166	; 0xa6
   16ae0:	f7ff fcd7 	bl	16492 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   16ae4:	defe      	udf	#254	; 0xfe
   16ae6:	f24e 7010 	movw	r0, #59152	; 0xe710
   16aea:	f64e 3224 	movw	r2, #60196	; 0xeb24
   16aee:	f2c0 0001 	movt	r0, #1
   16af2:	f2c0 0201 	movt	r2, #1
   16af6:	212b      	movs	r1, #43	; 0x2b
   16af8:	f7fe fd78 	bl	155ec <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16afc:	defe      	udf	#254	; 0xfe

00016afe <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>:
   16afe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b02:	b0a3      	sub	sp, #140	; 0x8c
   16b04:	468c      	mov	ip, r1
   16b06:	6809      	ldr	r1, [r1, #0]
   16b08:	06ca      	lsls	r2, r1, #27
   16b0a:	d44a      	bmi.n	16ba2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xa4>
   16b0c:	6804      	ldr	r4, [r0, #0]
   16b0e:	0688      	lsls	r0, r1, #26
   16b10:	f100 8089 	bmi.w	16c26 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x128>
   16b14:	f248 5e1f 	movw	lr, #34079	; 0x851f
   16b18:	f24e 72a7 	movw	r2, #59303	; 0xe7a7
   16b1c:	f242 7810 	movw	r8, #10000	; 0x2710
   16b20:	4544      	cmp	r4, r8
   16b22:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   16b26:	f2c0 0201 	movt	r2, #1
   16b2a:	f0c0 80e3 	bcc.w	16cf4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1f6>
   16b2e:	f241 7959 	movw	r9, #5977	; 0x1759
   16b32:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   16b36:	f10d 0b0c 	add.w	fp, sp, #12
   16b3a:	2300      	movs	r3, #0
   16b3c:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   16b40:	f04f 0a64 	mov.w	sl, #100	; 0x64
   16b44:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   16b48:	fba4 0109 	umull	r0, r1, r4, r9
   16b4c:	42bc      	cmp	r4, r7
   16b4e:	ea4f 3051 	mov.w	r0, r1, lsr #13
   16b52:	fb00 4118 	mls	r1, r0, r8, r4
   16b56:	4604      	mov	r4, r0
   16b58:	b28d      	uxth	r5, r1
   16b5a:	fba5 560e 	umull	r5, r6, r5, lr
   16b5e:	ea4f 1556 	mov.w	r5, r6, lsr #5
   16b62:	eb0b 0603 	add.w	r6, fp, r3
   16b66:	fb05 111a 	mls	r1, r5, sl, r1
   16b6a:	f832 5015 	ldrh.w	r5, [r2, r5, lsl #1]
   16b6e:	f1a3 0304 	sub.w	r3, r3, #4
   16b72:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   16b76:	b289      	uxth	r1, r1
   16b78:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   16b7c:	f8a6 1025 	strh.w	r1, [r6, #37]	; 0x25
   16b80:	d8e2      	bhi.n	16b48 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x4a>
   16b82:	f103 0127 	add.w	r1, r3, #39	; 0x27
   16b86:	4604      	mov	r4, r0
   16b88:	2c63      	cmp	r4, #99	; 0x63
   16b8a:	f300 80b7 	bgt.w	16cfc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1fe>
   16b8e:	4623      	mov	r3, r4
   16b90:	2b0a      	cmp	r3, #10
   16b92:	f2c0 80c3 	blt.w	16d1c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x21e>
   16b96:	1e88      	subs	r0, r1, #2
   16b98:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   16b9c:	aa03      	add	r2, sp, #12
   16b9e:	5211      	strh	r1, [r2, r0]
   16ba0:	e0c1      	b.n	16d26 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x228>
   16ba2:	6800      	ldr	r0, [r0, #0]
   16ba4:	f10d 0e0c 	add.w	lr, sp, #12
   16ba8:	2381      	movs	r3, #129	; 0x81
   16baa:	2100      	movs	r1, #0
   16bac:	f000 020f 	and.w	r2, r0, #15
   16bb0:	f102 0457 	add.w	r4, r2, #87	; 0x57
   16bb4:	2a0a      	cmp	r2, #10
   16bb6:	bf38      	it	cc
   16bb8:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   16bbc:	eb0e 0203 	add.w	r2, lr, r3
   16bc0:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   16bc4:	f802 4c02 	strb.w	r4, [r2, #-2]
   16bc8:	d071      	beq.n	16cae <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   16bca:	0904      	lsrs	r4, r0, #4
   16bcc:	f004 040f 	and.w	r4, r4, #15
   16bd0:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16bd4:	2c0a      	cmp	r4, #10
   16bd6:	bf38      	it	cc
   16bd8:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16bdc:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   16be0:	f802 5c03 	strb.w	r5, [r2, #-3]
   16be4:	d079      	beq.n	16cda <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   16be6:	0a04      	lsrs	r4, r0, #8
   16be8:	f004 040f 	and.w	r4, r4, #15
   16bec:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16bf0:	2c0a      	cmp	r4, #10
   16bf2:	bf38      	it	cc
   16bf4:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16bf8:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   16bfc:	f802 5c04 	strb.w	r5, [r2, #-4]
   16c00:	d073      	beq.n	16cea <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   16c02:	0b04      	lsrs	r4, r0, #12
   16c04:	3b04      	subs	r3, #4
   16c06:	f004 040f 	and.w	r4, r4, #15
   16c0a:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16c0e:	2c0a      	cmp	r4, #10
   16c10:	bf38      	it	cc
   16c12:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16c16:	f802 5c05 	strb.w	r5, [r2, #-5]
   16c1a:	0c02      	lsrs	r2, r0, #16
   16c1c:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   16c20:	4610      	mov	r0, r2
   16c22:	d1c3      	bne.n	16bac <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xae>
   16c24:	e03f      	b.n	16ca6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1a8>
   16c26:	f10d 0e0c 	add.w	lr, sp, #12
   16c2a:	2381      	movs	r3, #129	; 0x81
   16c2c:	2100      	movs	r1, #0
   16c2e:	f004 000f 	and.w	r0, r4, #15
   16c32:	eb0e 0203 	add.w	r2, lr, r3
   16c36:	f100 0537 	add.w	r5, r0, #55	; 0x37
   16c3a:	280a      	cmp	r0, #10
   16c3c:	bf38      	it	cc
   16c3e:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   16c42:	ebb1 1f14 	cmp.w	r1, r4, lsr #4
   16c46:	f802 5c02 	strb.w	r5, [r2, #-2]
   16c4a:	d030      	beq.n	16cae <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   16c4c:	0920      	lsrs	r0, r4, #4
   16c4e:	f000 000f 	and.w	r0, r0, #15
   16c52:	f100 0537 	add.w	r5, r0, #55	; 0x37
   16c56:	280a      	cmp	r0, #10
   16c58:	bf38      	it	cc
   16c5a:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   16c5e:	ebb1 2f14 	cmp.w	r1, r4, lsr #8
   16c62:	f802 5c03 	strb.w	r5, [r2, #-3]
   16c66:	d038      	beq.n	16cda <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   16c68:	0a20      	lsrs	r0, r4, #8
   16c6a:	f000 000f 	and.w	r0, r0, #15
   16c6e:	f100 0537 	add.w	r5, r0, #55	; 0x37
   16c72:	280a      	cmp	r0, #10
   16c74:	bf38      	it	cc
   16c76:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   16c7a:	ebb1 3f14 	cmp.w	r1, r4, lsr #12
   16c7e:	f802 5c04 	strb.w	r5, [r2, #-4]
   16c82:	d032      	beq.n	16cea <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   16c84:	0b20      	lsrs	r0, r4, #12
   16c86:	3b04      	subs	r3, #4
   16c88:	f000 000f 	and.w	r0, r0, #15
   16c8c:	f100 0537 	add.w	r5, r0, #55	; 0x37
   16c90:	280a      	cmp	r0, #10
   16c92:	bf38      	it	cc
   16c94:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   16c98:	0c20      	lsrs	r0, r4, #16
   16c9a:	ebb1 4f14 	cmp.w	r1, r4, lsr #16
   16c9e:	4604      	mov	r4, r0
   16ca0:	f802 5c05 	strb.w	r5, [r2, #-5]
   16ca4:	d1c3      	bne.n	16c2e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x130>
   16ca6:	1e58      	subs	r0, r3, #1
   16ca8:	2881      	cmp	r0, #129	; 0x81
   16caa:	d305      	bcc.n	16cb8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   16cac:	e019      	b.n	16ce2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   16cae:	1e59      	subs	r1, r3, #1
   16cb0:	1e98      	subs	r0, r3, #2
   16cb2:	460b      	mov	r3, r1
   16cb4:	2881      	cmp	r0, #129	; 0x81
   16cb6:	d214      	bcs.n	16ce2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   16cb8:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   16cbc:	f24e 72a5 	movw	r2, #59301	; 0xe7a5
   16cc0:	4470      	add	r0, lr
   16cc2:	f2c0 0201 	movt	r2, #1
   16cc6:	e9cd 0100 	strd	r0, r1, [sp]
   16cca:	4660      	mov	r0, ip
   16ccc:	2101      	movs	r1, #1
   16cce:	2302      	movs	r3, #2
   16cd0:	f7ff f864 	bl	15d9c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16cd4:	b023      	add	sp, #140	; 0x8c
   16cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cda:	1ed8      	subs	r0, r3, #3
   16cdc:	3b02      	subs	r3, #2
   16cde:	2881      	cmp	r0, #129	; 0x81
   16ce0:	d3ea      	bcc.n	16cb8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   16ce2:	2180      	movs	r1, #128	; 0x80
   16ce4:	f7ff fbf7 	bl	164d6 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16ce8:	defe      	udf	#254	; 0xfe
   16cea:	1f18      	subs	r0, r3, #4
   16cec:	3b03      	subs	r3, #3
   16cee:	2881      	cmp	r0, #129	; 0x81
   16cf0:	d3e2      	bcc.n	16cb8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   16cf2:	e7f6      	b.n	16ce2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   16cf4:	2127      	movs	r1, #39	; 0x27
   16cf6:	2c63      	cmp	r4, #99	; 0x63
   16cf8:	f77f af49 	ble.w	16b8e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x90>
   16cfc:	b2a0      	uxth	r0, r4
   16cfe:	3902      	subs	r1, #2
   16d00:	fba0 030e 	umull	r0, r3, r0, lr
   16d04:	af03      	add	r7, sp, #12
   16d06:	2064      	movs	r0, #100	; 0x64
   16d08:	095b      	lsrs	r3, r3, #5
   16d0a:	fb03 4010 	mls	r0, r3, r0, r4
   16d0e:	b280      	uxth	r0, r0
   16d10:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   16d14:	5278      	strh	r0, [r7, r1]
   16d16:	2b0a      	cmp	r3, #10
   16d18:	f6bf af3d 	bge.w	16b96 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x98>
   16d1c:	1e48      	subs	r0, r1, #1
   16d1e:	aa03      	add	r2, sp, #12
   16d20:	f103 0130 	add.w	r1, r3, #48	; 0x30
   16d24:	5411      	strb	r1, [r2, r0]
   16d26:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   16d2a:	aa03      	add	r2, sp, #12
   16d2c:	4410      	add	r0, r2
   16d2e:	f24e 5274 	movw	r2, #58740	; 0xe574
   16d32:	e9cd 0100 	strd	r0, r1, [sp]
   16d36:	f2c0 0201 	movt	r2, #1
   16d3a:	4660      	mov	r0, ip
   16d3c:	2101      	movs	r1, #1
   16d3e:	2300      	movs	r3, #0
   16d40:	f7ff f82c 	bl	15d9c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16d44:	b023      	add	sp, #140	; 0x8c
   16d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016d4a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>:
   16d4a:	b580      	push	{r7, lr}
   16d4c:	b0a2      	sub	sp, #136	; 0x88
   16d4e:	7802      	ldrb	r2, [r0, #0]
   16d50:	468c      	mov	ip, r1
   16d52:	f002 030f 	and.w	r3, r2, #15
   16d56:	f103 0057 	add.w	r0, r3, #87	; 0x57
   16d5a:	2b0a      	cmp	r3, #10
   16d5c:	bf38      	it	cc
   16d5e:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   16d62:	2300      	movs	r3, #0
   16d64:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   16d68:	d00b      	beq.n	16d82 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x38>
   16d6a:	0913      	lsrs	r3, r2, #4
   16d6c:	f103 0157 	add.w	r1, r3, #87	; 0x57
   16d70:	2aa0      	cmp	r2, #160	; 0xa0
   16d72:	bf38      	it	cc
   16d74:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   16d78:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   16d7c:	227e      	movs	r2, #126	; 0x7e
   16d7e:	2302      	movs	r3, #2
   16d80:	e001      	b.n	16d86 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x3c>
   16d82:	227f      	movs	r2, #127	; 0x7f
   16d84:	2301      	movs	r3, #1
   16d86:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   16d8a:	a802      	add	r0, sp, #8
   16d8c:	4410      	add	r0, r2
   16d8e:	f24e 72a5 	movw	r2, #59301	; 0xe7a5
   16d92:	e9cd 0300 	strd	r0, r3, [sp]
   16d96:	f2c0 0201 	movt	r2, #1
   16d9a:	4660      	mov	r0, ip
   16d9c:	2101      	movs	r1, #1
   16d9e:	2302      	movs	r3, #2
   16da0:	f7fe fffc 	bl	15d9c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16da4:	b022      	add	sp, #136	; 0x88
   16da6:	bd80      	pop	{r7, pc}

00016da8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>:
   16da8:	b580      	push	{r7, lr}
   16daa:	b0a2      	sub	sp, #136	; 0x88
   16dac:	7802      	ldrb	r2, [r0, #0]
   16dae:	468c      	mov	ip, r1
   16db0:	f002 030f 	and.w	r3, r2, #15
   16db4:	f103 0037 	add.w	r0, r3, #55	; 0x37
   16db8:	2b0a      	cmp	r3, #10
   16dba:	bf38      	it	cc
   16dbc:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   16dc0:	2300      	movs	r3, #0
   16dc2:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   16dc6:	d00b      	beq.n	16de0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x38>
   16dc8:	0913      	lsrs	r3, r2, #4
   16dca:	f103 0137 	add.w	r1, r3, #55	; 0x37
   16dce:	2aa0      	cmp	r2, #160	; 0xa0
   16dd0:	bf38      	it	cc
   16dd2:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   16dd6:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   16dda:	227e      	movs	r2, #126	; 0x7e
   16ddc:	2302      	movs	r3, #2
   16dde:	e001      	b.n	16de4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x3c>
   16de0:	227f      	movs	r2, #127	; 0x7f
   16de2:	2301      	movs	r3, #1
   16de4:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   16de8:	a802      	add	r0, sp, #8
   16dea:	4410      	add	r0, r2
   16dec:	f24e 72a5 	movw	r2, #59301	; 0xe7a5
   16df0:	e9cd 0300 	strd	r0, r3, [sp]
   16df4:	f2c0 0201 	movt	r2, #1
   16df8:	4660      	mov	r0, ip
   16dfa:	2101      	movs	r1, #1
   16dfc:	2302      	movs	r3, #2
   16dfe:	f7fe ffcd 	bl	15d9c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16e02:	b022      	add	sp, #136	; 0x88
   16e04:	bd80      	pop	{r7, pc}

00016e06 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>:
   16e06:	b580      	push	{r7, lr}
   16e08:	b0a2      	sub	sp, #136	; 0x88
   16e0a:	8800      	ldrh	r0, [r0, #0]
   16e0c:	468c      	mov	ip, r1
   16e0e:	f000 020f 	and.w	r2, r0, #15
   16e12:	f102 0357 	add.w	r3, r2, #87	; 0x57
   16e16:	2a0a      	cmp	r2, #10
   16e18:	bf38      	it	cc
   16e1a:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   16e1e:	2200      	movs	r2, #0
   16e20:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   16e24:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   16e28:	d02a      	beq.n	16e80 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x7a>
   16e2a:	0903      	lsrs	r3, r0, #4
   16e2c:	f003 030f 	and.w	r3, r3, #15
   16e30:	f103 0157 	add.w	r1, r3, #87	; 0x57
   16e34:	2b0a      	cmp	r3, #10
   16e36:	bf38      	it	cc
   16e38:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   16e3c:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   16e40:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   16e44:	d031      	beq.n	16eaa <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xa4>
   16e46:	0a01      	lsrs	r1, r0, #8
   16e48:	f001 010f 	and.w	r1, r1, #15
   16e4c:	f101 0257 	add.w	r2, r1, #87	; 0x57
   16e50:	290a      	cmp	r1, #10
   16e52:	bf38      	it	cc
   16e54:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   16e58:	2100      	movs	r1, #0
   16e5a:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   16e5e:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   16e62:	d027      	beq.n	16eb4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xae>
   16e64:	0b00      	lsrs	r0, r0, #12
   16e66:	f100 0157 	add.w	r1, r0, #87	; 0x57
   16e6a:	280a      	cmp	r0, #10
   16e6c:	bf38      	it	cc
   16e6e:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   16e72:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   16e76:	227d      	movs	r2, #125	; 0x7d
   16e78:	207c      	movs	r0, #124	; 0x7c
   16e7a:	2881      	cmp	r0, #129	; 0x81
   16e7c:	d304      	bcc.n	16e88 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   16e7e:	e01d      	b.n	16ebc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   16e80:	2280      	movs	r2, #128	; 0x80
   16e82:	207f      	movs	r0, #127	; 0x7f
   16e84:	2881      	cmp	r0, #129	; 0x81
   16e86:	d219      	bcs.n	16ebc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   16e88:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   16e8c:	ab02      	add	r3, sp, #8
   16e8e:	4418      	add	r0, r3
   16e90:	2101      	movs	r1, #1
   16e92:	e9cd 0200 	strd	r0, r2, [sp]
   16e96:	f24e 72a5 	movw	r2, #59301	; 0xe7a5
   16e9a:	f2c0 0201 	movt	r2, #1
   16e9e:	4660      	mov	r0, ip
   16ea0:	2302      	movs	r3, #2
   16ea2:	f7fe ff7b 	bl	15d9c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16ea6:	b022      	add	sp, #136	; 0x88
   16ea8:	bd80      	pop	{r7, pc}
   16eaa:	207e      	movs	r0, #126	; 0x7e
   16eac:	227f      	movs	r2, #127	; 0x7f
   16eae:	2881      	cmp	r0, #129	; 0x81
   16eb0:	d3ea      	bcc.n	16e88 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   16eb2:	e003      	b.n	16ebc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   16eb4:	207d      	movs	r0, #125	; 0x7d
   16eb6:	227e      	movs	r2, #126	; 0x7e
   16eb8:	2881      	cmp	r0, #129	; 0x81
   16eba:	d3e5      	bcc.n	16e88 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   16ebc:	2180      	movs	r1, #128	; 0x80
   16ebe:	f7ff fb0a 	bl	164d6 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16ec2:	defe      	udf	#254	; 0xfe

00016ec4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>:
   16ec4:	b5b0      	push	{r4, r5, r7, lr}
   16ec6:	b0a2      	sub	sp, #136	; 0x88
   16ec8:	6800      	ldr	r0, [r0, #0]
   16eca:	f10d 0e08 	add.w	lr, sp, #8
   16ece:	468c      	mov	ip, r1
   16ed0:	2381      	movs	r3, #129	; 0x81
   16ed2:	2100      	movs	r1, #0
   16ed4:	f000 020f 	and.w	r2, r0, #15
   16ed8:	f102 0457 	add.w	r4, r2, #87	; 0x57
   16edc:	2a0a      	cmp	r2, #10
   16ede:	bf38      	it	cc
   16ee0:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   16ee4:	eb0e 0203 	add.w	r2, lr, r3
   16ee8:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   16eec:	f802 4c02 	strb.w	r4, [r2, #-2]
   16ef0:	d030      	beq.n	16f54 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x90>
   16ef2:	0904      	lsrs	r4, r0, #4
   16ef4:	f004 040f 	and.w	r4, r4, #15
   16ef8:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16efc:	2c0a      	cmp	r4, #10
   16efe:	bf38      	it	cc
   16f00:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16f04:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   16f08:	f802 5c03 	strb.w	r5, [r2, #-3]
   16f0c:	d028      	beq.n	16f60 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x9c>
   16f0e:	0a04      	lsrs	r4, r0, #8
   16f10:	f004 040f 	and.w	r4, r4, #15
   16f14:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16f18:	2c0a      	cmp	r4, #10
   16f1a:	bf38      	it	cc
   16f1c:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16f20:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   16f24:	f802 5c04 	strb.w	r5, [r2, #-4]
   16f28:	d01f      	beq.n	16f6a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xa6>
   16f2a:	0b04      	lsrs	r4, r0, #12
   16f2c:	3b04      	subs	r3, #4
   16f2e:	f004 040f 	and.w	r4, r4, #15
   16f32:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16f36:	2c0a      	cmp	r4, #10
   16f38:	bf38      	it	cc
   16f3a:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16f3e:	f802 5c05 	strb.w	r5, [r2, #-5]
   16f42:	0c02      	lsrs	r2, r0, #16
   16f44:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   16f48:	4610      	mov	r0, r2
   16f4a:	d1c3      	bne.n	16ed4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x10>
   16f4c:	1e58      	subs	r0, r3, #1
   16f4e:	2881      	cmp	r0, #129	; 0x81
   16f50:	d30f      	bcc.n	16f72 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   16f52:	e01e      	b.n	16f92 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   16f54:	1e59      	subs	r1, r3, #1
   16f56:	1e98      	subs	r0, r3, #2
   16f58:	460b      	mov	r3, r1
   16f5a:	2881      	cmp	r0, #129	; 0x81
   16f5c:	d309      	bcc.n	16f72 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   16f5e:	e018      	b.n	16f92 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   16f60:	1ed8      	subs	r0, r3, #3
   16f62:	3b02      	subs	r3, #2
   16f64:	2881      	cmp	r0, #129	; 0x81
   16f66:	d304      	bcc.n	16f72 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   16f68:	e013      	b.n	16f92 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   16f6a:	1f18      	subs	r0, r3, #4
   16f6c:	3b03      	subs	r3, #3
   16f6e:	2881      	cmp	r0, #129	; 0x81
   16f70:	d20f      	bcs.n	16f92 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   16f72:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   16f76:	f24e 72a5 	movw	r2, #59301	; 0xe7a5
   16f7a:	4470      	add	r0, lr
   16f7c:	f2c0 0201 	movt	r2, #1
   16f80:	e9cd 0100 	strd	r0, r1, [sp]
   16f84:	4660      	mov	r0, ip
   16f86:	2101      	movs	r1, #1
   16f88:	2302      	movs	r3, #2
   16f8a:	f7fe ff07 	bl	15d9c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16f8e:	b022      	add	sp, #136	; 0x88
   16f90:	bdb0      	pop	{r4, r5, r7, pc}
   16f92:	2180      	movs	r1, #128	; 0x80
   16f94:	f7ff fa9f 	bl	164d6 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16f98:	defe      	udf	#254	; 0xfe

00016f9a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>:
   16f9a:	b5b0      	push	{r4, r5, r7, lr}
   16f9c:	b0a2      	sub	sp, #136	; 0x88
   16f9e:	6800      	ldr	r0, [r0, #0]
   16fa0:	f10d 0e08 	add.w	lr, sp, #8
   16fa4:	468c      	mov	ip, r1
   16fa6:	2381      	movs	r3, #129	; 0x81
   16fa8:	2100      	movs	r1, #0
   16faa:	f000 020f 	and.w	r2, r0, #15
   16fae:	f102 0437 	add.w	r4, r2, #55	; 0x37
   16fb2:	2a0a      	cmp	r2, #10
   16fb4:	bf38      	it	cc
   16fb6:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   16fba:	eb0e 0203 	add.w	r2, lr, r3
   16fbe:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   16fc2:	f802 4c02 	strb.w	r4, [r2, #-2]
   16fc6:	d030      	beq.n	1702a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x90>
   16fc8:	0904      	lsrs	r4, r0, #4
   16fca:	f004 040f 	and.w	r4, r4, #15
   16fce:	f104 0537 	add.w	r5, r4, #55	; 0x37
   16fd2:	2c0a      	cmp	r4, #10
   16fd4:	bf38      	it	cc
   16fd6:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16fda:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   16fde:	f802 5c03 	strb.w	r5, [r2, #-3]
   16fe2:	d028      	beq.n	17036 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x9c>
   16fe4:	0a04      	lsrs	r4, r0, #8
   16fe6:	f004 040f 	and.w	r4, r4, #15
   16fea:	f104 0537 	add.w	r5, r4, #55	; 0x37
   16fee:	2c0a      	cmp	r4, #10
   16ff0:	bf38      	it	cc
   16ff2:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16ff6:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   16ffa:	f802 5c04 	strb.w	r5, [r2, #-4]
   16ffe:	d01f      	beq.n	17040 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xa6>
   17000:	0b04      	lsrs	r4, r0, #12
   17002:	3b04      	subs	r3, #4
   17004:	f004 040f 	and.w	r4, r4, #15
   17008:	f104 0537 	add.w	r5, r4, #55	; 0x37
   1700c:	2c0a      	cmp	r4, #10
   1700e:	bf38      	it	cc
   17010:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   17014:	f802 5c05 	strb.w	r5, [r2, #-5]
   17018:	0c02      	lsrs	r2, r0, #16
   1701a:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   1701e:	4610      	mov	r0, r2
   17020:	d1c3      	bne.n	16faa <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x10>
   17022:	1e58      	subs	r0, r3, #1
   17024:	2881      	cmp	r0, #129	; 0x81
   17026:	d30f      	bcc.n	17048 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   17028:	e01e      	b.n	17068 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   1702a:	1e59      	subs	r1, r3, #1
   1702c:	1e98      	subs	r0, r3, #2
   1702e:	460b      	mov	r3, r1
   17030:	2881      	cmp	r0, #129	; 0x81
   17032:	d309      	bcc.n	17048 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   17034:	e018      	b.n	17068 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   17036:	1ed8      	subs	r0, r3, #3
   17038:	3b02      	subs	r3, #2
   1703a:	2881      	cmp	r0, #129	; 0x81
   1703c:	d304      	bcc.n	17048 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   1703e:	e013      	b.n	17068 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   17040:	1f18      	subs	r0, r3, #4
   17042:	3b03      	subs	r3, #3
   17044:	2881      	cmp	r0, #129	; 0x81
   17046:	d20f      	bcs.n	17068 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   17048:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   1704c:	f24e 72a5 	movw	r2, #59301	; 0xe7a5
   17050:	4470      	add	r0, lr
   17052:	f2c0 0201 	movt	r2, #1
   17056:	e9cd 0100 	strd	r0, r1, [sp]
   1705a:	4660      	mov	r0, ip
   1705c:	2101      	movs	r1, #1
   1705e:	2302      	movs	r3, #2
   17060:	f7fe fe9c 	bl	15d9c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   17064:	b022      	add	sp, #136	; 0x88
   17066:	bdb0      	pop	{r4, r5, r7, pc}
   17068:	2180      	movs	r1, #128	; 0x80
   1706a:	f7ff fa34 	bl	164d6 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1706e:	defe      	udf	#254	; 0xfe

00017070 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>:
   17070:	b580      	push	{r7, lr}
   17072:	b08c      	sub	sp, #48	; 0x30
   17074:	7802      	ldrb	r2, [r0, #0]
   17076:	2a64      	cmp	r2, #100	; 0x64
   17078:	d314      	bcc.n	170a4 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x34>
   1707a:	f248 501f 	movw	r0, #34079	; 0x851f
   1707e:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
   17082:	fba2 0300 	umull	r0, r3, r2, r0
   17086:	2064      	movs	r0, #100	; 0x64
   17088:	095b      	lsrs	r3, r3, #5
   1708a:	fb03 2010 	mls	r0, r3, r0, r2
   1708e:	f24e 72a7 	movw	r2, #59303	; 0xe7a7
   17092:	f2c0 0201 	movt	r2, #1
   17096:	b2c0      	uxtb	r0, r0
   17098:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   1709c:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   170a0:	2024      	movs	r0, #36	; 0x24
   170a2:	e003      	b.n	170ac <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x3c>
   170a4:	2a0a      	cmp	r2, #10
   170a6:	d206      	bcs.n	170b6 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x46>
   170a8:	2026      	movs	r0, #38	; 0x26
   170aa:	4613      	mov	r3, r2
   170ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
   170b0:	ab02      	add	r3, sp, #8
   170b2:	541a      	strb	r2, [r3, r0]
   170b4:	e008      	b.n	170c8 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x58>
   170b6:	f24e 70a7 	movw	r0, #59303	; 0xe7a7
   170ba:	f2c0 0001 	movt	r0, #1
   170be:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   170c2:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   170c6:	2025      	movs	r0, #37	; 0x25
   170c8:	f1c0 0227 	rsb	r2, r0, #39	; 0x27
   170cc:	ab02      	add	r3, sp, #8
   170ce:	4418      	add	r0, r3
   170d0:	2300      	movs	r3, #0
   170d2:	e9cd 0200 	strd	r0, r2, [sp]
   170d6:	f24e 5274 	movw	r2, #58740	; 0xe574
   170da:	4608      	mov	r0, r1
   170dc:	f2c0 0201 	movt	r2, #1
   170e0:	2101      	movs	r1, #1
   170e2:	f7fe fe5b 	bl	15d9c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   170e6:	b00c      	add	sp, #48	; 0x30
   170e8:	bd80      	pop	{r7, pc}

000170ea <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>:
   170ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170ee:	b08f      	sub	sp, #60	; 0x3c
   170f0:	6805      	ldr	r5, [r0, #0]
   170f2:	f248 581f 	movw	r8, #34079	; 0x851f
   170f6:	460e      	mov	r6, r1
   170f8:	f24e 71a7 	movw	r1, #59303	; 0xe7a7
   170fc:	2d00      	cmp	r5, #0
   170fe:	f242 7910 	movw	r9, #10000	; 0x2710
   17102:	462b      	mov	r3, r5
   17104:	f2c5 18eb 	movt	r8, #20971	; 0x51eb
   17108:	bf48      	it	mi
   1710a:	426b      	negmi	r3, r5
   1710c:	454b      	cmp	r3, r9
   1710e:	f2c0 0101 	movt	r1, #1
   17112:	d33a      	bcc.n	1718a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa0>
   17114:	f241 7a59 	movw	sl, #5977	; 0x1759
   17118:	f24e 00ff 	movw	r0, #57599	; 0xe0ff
   1711c:	f10d 0e14 	add.w	lr, sp, #20
   17120:	2400      	movs	r4, #0
   17122:	f2cd 1ab7 	movt	sl, #53687	; 0xd1b7
   17126:	f04f 0b64 	mov.w	fp, #100	; 0x64
   1712a:	f2c0 50f5 	movt	r0, #1525	; 0x5f5
   1712e:	e9cd 5603 	strd	r5, r6, [sp, #12]
   17132:	fba3 250a 	umull	r2, r5, r3, sl
   17136:	eb0e 0704 	add.w	r7, lr, r4
   1713a:	3c04      	subs	r4, #4
   1713c:	4283      	cmp	r3, r0
   1713e:	ea4f 3255 	mov.w	r2, r5, lsr #13
   17142:	fb02 3519 	mls	r5, r2, r9, r3
   17146:	4613      	mov	r3, r2
   17148:	b2ae      	uxth	r6, r5
   1714a:	fba6 6c08 	umull	r6, ip, r6, r8
   1714e:	ea4f 165c 	mov.w	r6, ip, lsr #5
   17152:	fb06 551b 	mls	r5, r6, fp, r5
   17156:	f831 6016 	ldrh.w	r6, [r1, r6, lsl #1]
   1715a:	f8a7 6023 	strh.w	r6, [r7, #35]	; 0x23
   1715e:	b2ad      	uxth	r5, r5
   17160:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
   17164:	f8a7 5025 	strh.w	r5, [r7, #37]	; 0x25
   17168:	d8e3      	bhi.n	17132 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x48>
   1716a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
   1716e:	f104 0027 	add.w	r0, r4, #39	; 0x27
   17172:	4613      	mov	r3, r2
   17174:	2b63      	cmp	r3, #99	; 0x63
   17176:	dc0b      	bgt.n	17190 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa6>
   17178:	461a      	mov	r2, r3
   1717a:	2a0a      	cmp	r2, #10
   1717c:	db17      	blt.n	171ae <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xc4>
   1717e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
   17182:	3802      	subs	r0, #2
   17184:	aa05      	add	r2, sp, #20
   17186:	5211      	strh	r1, [r2, r0]
   17188:	e016      	b.n	171b8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xce>
   1718a:	2027      	movs	r0, #39	; 0x27
   1718c:	2b63      	cmp	r3, #99	; 0x63
   1718e:	ddf3      	ble.n	17178 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x8e>
   17190:	b29a      	uxth	r2, r3
   17192:	3802      	subs	r0, #2
   17194:	fba2 2708 	umull	r2, r7, r2, r8
   17198:	097a      	lsrs	r2, r7, #5
   1719a:	2764      	movs	r7, #100	; 0x64
   1719c:	fb02 3317 	mls	r3, r2, r7, r3
   171a0:	af05      	add	r7, sp, #20
   171a2:	b29b      	uxth	r3, r3
   171a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   171a8:	523b      	strh	r3, [r7, r0]
   171aa:	2a0a      	cmp	r2, #10
   171ac:	dae7      	bge.n	1717e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x94>
   171ae:	3801      	subs	r0, #1
   171b0:	f102 0130 	add.w	r1, r2, #48	; 0x30
   171b4:	aa05      	add	r2, sp, #20
   171b6:	5411      	strb	r1, [r2, r0]
   171b8:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   171bc:	aa05      	add	r2, sp, #20
   171be:	4410      	add	r0, r2
   171c0:	f24e 5274 	movw	r2, #58740	; 0xe574
   171c4:	e9cd 0100 	strd	r0, r1, [sp]
   171c8:	43e8      	mvns	r0, r5
   171ca:	0fc1      	lsrs	r1, r0, #31
   171cc:	f2c0 0201 	movt	r2, #1
   171d0:	4630      	mov	r0, r6
   171d2:	2300      	movs	r3, #0
   171d4:	f7fe fde2 	bl	15d9c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   171d8:	b00f      	add	sp, #60	; 0x3c
   171da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000171de <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>:
   171de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171e2:	b08d      	sub	sp, #52	; 0x34
   171e4:	468c      	mov	ip, r1
   171e6:	6801      	ldr	r1, [r0, #0]
   171e8:	f248 5e1f 	movw	lr, #34079	; 0x851f
   171ec:	f24e 70a7 	movw	r0, #59303	; 0xe7a7
   171f0:	f242 7810 	movw	r8, #10000	; 0x2710
   171f4:	4541      	cmp	r1, r8
   171f6:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   171fa:	f2c0 0001 	movt	r0, #1
   171fe:	d337      	bcc.n	17270 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x92>
   17200:	f241 7959 	movw	r9, #5977	; 0x1759
   17204:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   17208:	f10d 0b0c 	add.w	fp, sp, #12
   1720c:	2300      	movs	r3, #0
   1720e:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   17212:	f04f 0a64 	mov.w	sl, #100	; 0x64
   17216:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   1721a:	fba1 2409 	umull	r2, r4, r1, r9
   1721e:	42b9      	cmp	r1, r7
   17220:	ea4f 3254 	mov.w	r2, r4, lsr #13
   17224:	fb02 1418 	mls	r4, r2, r8, r1
   17228:	4611      	mov	r1, r2
   1722a:	b2a5      	uxth	r5, r4
   1722c:	fba5 560e 	umull	r5, r6, r5, lr
   17230:	ea4f 1556 	mov.w	r5, r6, lsr #5
   17234:	eb0b 0603 	add.w	r6, fp, r3
   17238:	fb05 441a 	mls	r4, r5, sl, r4
   1723c:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   17240:	f1a3 0304 	sub.w	r3, r3, #4
   17244:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   17248:	b2a4      	uxth	r4, r4
   1724a:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   1724e:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   17252:	d8e2      	bhi.n	1721a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x3c>
   17254:	f103 0427 	add.w	r4, r3, #39	; 0x27
   17258:	4611      	mov	r1, r2
   1725a:	2963      	cmp	r1, #99	; 0x63
   1725c:	dc0b      	bgt.n	17276 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x98>
   1725e:	460b      	mov	r3, r1
   17260:	2b0a      	cmp	r3, #10
   17262:	db17      	blt.n	17294 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xb6>
   17264:	1ea1      	subs	r1, r4, #2
   17266:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   1726a:	aa03      	add	r2, sp, #12
   1726c:	5250      	strh	r0, [r2, r1]
   1726e:	e016      	b.n	1729e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xc0>
   17270:	2427      	movs	r4, #39	; 0x27
   17272:	2963      	cmp	r1, #99	; 0x63
   17274:	ddf3      	ble.n	1725e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x80>
   17276:	b28a      	uxth	r2, r1
   17278:	3c02      	subs	r4, #2
   1727a:	fba2 230e 	umull	r2, r3, r2, lr
   1727e:	2264      	movs	r2, #100	; 0x64
   17280:	095b      	lsrs	r3, r3, #5
   17282:	fb03 1112 	mls	r1, r3, r2, r1
   17286:	aa03      	add	r2, sp, #12
   17288:	b289      	uxth	r1, r1
   1728a:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   1728e:	5311      	strh	r1, [r2, r4]
   17290:	2b0a      	cmp	r3, #10
   17292:	dae7      	bge.n	17264 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x86>
   17294:	1e61      	subs	r1, r4, #1
   17296:	aa03      	add	r2, sp, #12
   17298:	f103 0030 	add.w	r0, r3, #48	; 0x30
   1729c:	5450      	strb	r0, [r2, r1]
   1729e:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   172a2:	aa03      	add	r2, sp, #12
   172a4:	4411      	add	r1, r2
   172a6:	f24e 5274 	movw	r2, #58740	; 0xe574
   172aa:	e9cd 1000 	strd	r1, r0, [sp]
   172ae:	f2c0 0201 	movt	r2, #1
   172b2:	4660      	mov	r0, ip
   172b4:	2101      	movs	r1, #1
   172b6:	2300      	movs	r3, #0
   172b8:	f7fe fd70 	bl	15d9c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   172bc:	b00d      	add	sp, #52	; 0x34
   172be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000172c2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E>:
   172c2:	e9d0 2000 	ldrd	r2, r0, [r0]
   172c6:	68c3      	ldr	r3, [r0, #12]
   172c8:	4610      	mov	r0, r2
   172ca:	4718      	bx	r3

000172cc <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E>:
   172cc:	460b      	mov	r3, r1
   172ce:	e9d0 1200 	ldrd	r1, r2, [r0]
   172d2:	4618      	mov	r0, r3
   172d4:	f7fe beaa 	b.w	1602c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>

000172d8 <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
   172d8:	4b07      	ldr	r3, [pc, #28]	; (172f8 <__semihost+0x20>)
   172da:	781b      	ldrb	r3, [r3, #0]
   172dc:	b14b      	cbz	r3, 172f2 <__semihost+0x1a>
static int __semihost(int command, void* message) {
   172de:	b410      	push	{r4}
   172e0:	4602      	mov	r2, r0
   172e2:	460c      	mov	r4, r1
    __asm( 
   172e4:	4610      	mov	r0, r2
   172e6:	4621      	mov	r1, r4
   172e8:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
   172ea:	2000      	movs	r0, #0
}
   172ec:	f85d 4b04 	ldr.w	r4, [sp], #4
   172f0:	4770      	bx	lr
    if (!log_enabled) return -1;
   172f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   172f6:	4770      	bx	lr
   172f8:	20000100 	.word	0x20000100

000172fc <debugger_connected>:
// #define SYS_RENAME (0xf)
// #define SYS_EXIT   (0x18)

static int debugger_connected(void) {
    //  Return non-zero if debugger is connected. From repos/apache-mynewt-core/hw/mcu/ambiq/apollo2/src/hal_system.c
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   172fc:	4b02      	ldr	r3, [pc, #8]	; (17308 <debugger_connected+0xc>)
   172fe:	6818      	ldr	r0, [r3, #0]
}
   17300:	f000 0001 	and.w	r0, r0, #1
   17304:	4770      	bx	lr
   17306:	bf00      	nop
   17308:	e000edf0 	.word	0xe000edf0

0001730c <semihost_write>:
#endif  //  !DISABLE_SEMIHOSTING

// We normally set the file handle to 2 to write to the debugger's stderr output.
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
   1730c:	b570      	push	{r4, r5, r6, lr}
   1730e:	b084      	sub	sp, #16
   17310:	4606      	mov	r6, r0
   17312:	460d      	mov	r5, r1
   17314:	4614      	mov	r4, r2
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return 0;               //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
   17316:	f7ff fff1 	bl	172fc <debugger_connected>
   1731a:	4603      	mov	r3, r0
   1731c:	b108      	cbz	r0, 17322 <semihost_write+0x16>
    if (length == 0) { return 0; }
   1731e:	b91c      	cbnz	r4, 17328 <semihost_write+0x1c>
   17320:	2300      	movs	r3, #0
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
#endif  //  DISABLE_SEMIHOSTING
}
   17322:	4618      	mov	r0, r3
   17324:	b004      	add	sp, #16
   17326:	bd70      	pop	{r4, r5, r6, pc}
    args[0] = (uint32_t)fh;
   17328:	9601      	str	r6, [sp, #4]
    args[1] = (uint32_t)buffer;
   1732a:	9502      	str	r5, [sp, #8]
    args[2] = (uint32_t)length;
   1732c:	9403      	str	r4, [sp, #12]
    return __semihost(SYS_WRITE, args);
   1732e:	a901      	add	r1, sp, #4
   17330:	2005      	movs	r0, #5
   17332:	f7ff ffd1 	bl	172d8 <__semihost>
   17336:	4603      	mov	r3, r0
   17338:	e7f3      	b.n	17322 <semihost_write+0x16>
	...

0001733c <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
   1733c:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
   1733e:	4b0e      	ldr	r3, [pc, #56]	; (17378 <console_flush+0x3c>)
   17340:	781b      	ldrb	r3, [r3, #0]
   17342:	b1bb      	cbz	r3, 17374 <console_flush+0x38>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
   17344:	4b0d      	ldr	r3, [pc, #52]	; (1737c <console_flush+0x40>)
   17346:	681d      	ldr	r5, [r3, #0]
   17348:	b1a5      	cbz	r5, 17374 <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   1734a:	4b0d      	ldr	r3, [pc, #52]	; (17380 <console_flush+0x44>)
   1734c:	685b      	ldr	r3, [r3, #4]
   1734e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
   17352:	b97b      	cbnz	r3, 17374 <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
   17354:	4b09      	ldr	r3, [pc, #36]	; (1737c <console_flush+0x40>)
   17356:	2200      	movs	r2, #0
   17358:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
   1735a:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
   1735c:	e005      	b.n	1736a <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
   1735e:	88e2      	ldrh	r2, [r4, #6]
   17360:	6821      	ldr	r1, [r4, #0]
   17362:	2002      	movs	r0, #2
   17364:	f7ff ffd2 	bl	1730c <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
   17368:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
   1736a:	2c00      	cmp	r4, #0
   1736c:	d1f7      	bne.n	1735e <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
   1736e:	4628      	mov	r0, r5
   17370:	f001 fbfc 	bl	18b6c <os_mbuf_free_chain>
}
   17374:	bd38      	pop	{r3, r4, r5, pc}
   17376:	bf00      	nop
   17378:	20000100 	.word	0x20000100
   1737c:	20006f04 	.word	0x20006f04
   17380:	e000ed00 	.word	0xe000ed00

00017384 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
   17384:	b508      	push	{r3, lr}
   17386:	f7ff ffd9 	bl	1733c <console_flush>
   1738a:	bd08      	pop	{r3, pc}

0001738c <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
   1738c:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return;                 //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
   1738e:	4b12      	ldr	r3, [pc, #72]	; (173d8 <console_buffer+0x4c>)
   17390:	781b      	ldrb	r3, [r3, #0]
   17392:	b903      	cbnz	r3, 17396 <console_buffer+0xa>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
   17394:	bd38      	pop	{r3, r4, r5, pc}
   17396:	460d      	mov	r5, r1
   17398:	4604      	mov	r4, r0
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
   1739a:	f7ff ffaf 	bl	172fc <debugger_connected>
   1739e:	2800      	cmp	r0, #0
   173a0:	d0f8      	beq.n	17394 <console_buffer+0x8>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
   173a2:	4b0e      	ldr	r3, [pc, #56]	; (173dc <console_buffer+0x50>)
   173a4:	681b      	ldr	r3, [r3, #0]
   173a6:	b173      	cbz	r3, 173c6 <console_buffer+0x3a>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
   173a8:	4b0c      	ldr	r3, [pc, #48]	; (173dc <console_buffer+0x50>)
   173aa:	6818      	ldr	r0, [r3, #0]
   173ac:	f001 fbf0 	bl	18b90 <os_mbuf_len>
   173b0:	4428      	add	r0, r5
   173b2:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   173b6:	d2ed      	bcs.n	17394 <console_buffer+0x8>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
   173b8:	b2aa      	uxth	r2, r5
   173ba:	4621      	mov	r1, r4
   173bc:	4b07      	ldr	r3, [pc, #28]	; (173dc <console_buffer+0x50>)
   173be:	6818      	ldr	r0, [r3, #0]
   173c0:	f001 fbf0 	bl	18ba4 <os_mbuf_append>
   173c4:	e7e6      	b.n	17394 <console_buffer+0x8>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
   173c6:	2100      	movs	r1, #0
   173c8:	b2a8      	uxth	r0, r5
   173ca:	f001 fd93 	bl	18ef4 <os_msys_get_pkthdr>
   173ce:	4b03      	ldr	r3, [pc, #12]	; (173dc <console_buffer+0x50>)
   173d0:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
   173d2:	2800      	cmp	r0, #0
   173d4:	d1e8      	bne.n	173a8 <console_buffer+0x1c>
   173d6:	e7dd      	b.n	17394 <console_buffer+0x8>
   173d8:	20000100 	.word	0x20000100
   173dc:	20006f04 	.word	0x20006f04

000173e0 <semihosting_console_write_ch>:
    float f_abs = *neg ? -f : f;          //  Absolute value of f
    *i = (int) f_abs;                     //  Integer part
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  6 decimal places
}

static void semihosting_console_write_ch(char c) {
   173e0:	b500      	push	{lr}
   173e2:	b083      	sub	sp, #12
   173e4:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
   173e8:	280d      	cmp	r0, #13
   173ea:	d004      	beq.n	173f6 <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
   173ec:	2101      	movs	r1, #1
   173ee:	f10d 0007 	add.w	r0, sp, #7
   173f2:	f7ff ffcb 	bl	1738c <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
   173f6:	b003      	add	sp, #12
   173f8:	f85d fb04 	ldr.w	pc, [sp], #4

000173fc <console_printhex>:
void console_printhex(uint8_t v) {
   173fc:	b510      	push	{r4, lr}
   173fe:	b082      	sub	sp, #8
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   17400:	2310      	movs	r3, #16
    int length = 0;
   17402:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   17404:	e005      	b.n	17412 <console_printhex+0x16>
        v = v % divisor;
   17406:	fbb0 f1f3 	udiv	r1, r0, r3
   1740a:	fb03 0011 	mls	r0, r3, r1, r0
   1740e:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   17410:	091b      	lsrs	r3, r3, #4
   17412:	b18b      	cbz	r3, 17438 <console_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
   17414:	fbb0 f4f3 	udiv	r4, r0, r3
   17418:	f104 0130 	add.w	r1, r4, #48	; 0x30
   1741c:	b2c9      	uxtb	r1, r1
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
   1741e:	2939      	cmp	r1, #57	; 0x39
   17420:	d902      	bls.n	17428 <console_printhex+0x2c>
   17422:	f104 0157 	add.w	r1, r4, #87	; 0x57
   17426:	b2c9      	uxtb	r1, r1
            if (length < size) {
   17428:	2a02      	cmp	r2, #2
   1742a:	dcec      	bgt.n	17406 <console_printhex+0xa>
                buffer[length++] = digit;
   1742c:	ac02      	add	r4, sp, #8
   1742e:	4414      	add	r4, r2
   17430:	f804 1c04 	strb.w	r1, [r4, #-4]
   17434:	3201      	adds	r2, #1
   17436:	e7e6      	b.n	17406 <console_printhex+0xa>
    if (length == 0) { buffer[length++] = '0'; };
   17438:	b92a      	cbnz	r2, 17446 <console_printhex+0x4a>
   1743a:	ab02      	add	r3, sp, #8
   1743c:	4413      	add	r3, r2
   1743e:	2130      	movs	r1, #48	; 0x30
   17440:	f803 1c04 	strb.w	r1, [r3, #-4]
   17444:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
   17446:	2a02      	cmp	r2, #2
   17448:	dc04      	bgt.n	17454 <console_printhex+0x58>
   1744a:	ab02      	add	r3, sp, #8
   1744c:	441a      	add	r2, r3
   1744e:	2300      	movs	r3, #0
   17450:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
   17454:	2300      	movs	r3, #0
   17456:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
   1745a:	a801      	add	r0, sp, #4
   1745c:	f002 fb73 	bl	19b46 <strlen>
   17460:	4601      	mov	r1, r0
   17462:	a801      	add	r0, sp, #4
   17464:	f7ff ff92 	bl	1738c <console_buffer>
}
   17468:	b002      	add	sp, #8
   1746a:	bd10      	pop	{r4, pc}

0001746c <console_printint>:
void console_printint(int i) {
   1746c:	b508      	push	{r3, lr}
    console_printf("%d", i);
   1746e:	4601      	mov	r1, r0
   17470:	4801      	ldr	r0, [pc, #4]	; (17478 <console_printint+0xc>)
   17472:	f000 f873 	bl	1755c <console_printf>
}
   17476:	bd08      	pop	{r3, pc}
   17478:	0001f76c 	.word	0x0001f76c

0001747c <console_dump>:
    if (buffer == NULL || len == 0) { return; }
   1747c:	b180      	cbz	r0, 174a0 <console_dump+0x24>
void console_dump(const uint8_t *buffer, unsigned int len) {
   1747e:	b570      	push	{r4, r5, r6, lr}
   17480:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
   17482:	b161      	cbz	r1, 1749e <console_dump+0x22>
   17484:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
   17486:	2400      	movs	r4, #0
   17488:	e007      	b.n	1749a <console_dump+0x1e>
   1748a:	5d30      	ldrb	r0, [r6, r4]
   1748c:	f7ff ffb6 	bl	173fc <console_printhex>
   17490:	2101      	movs	r1, #1
   17492:	4804      	ldr	r0, [pc, #16]	; (174a4 <console_dump+0x28>)
   17494:	f7ff ff7a 	bl	1738c <console_buffer>
   17498:	3401      	adds	r4, #1
   1749a:	42ac      	cmp	r4, r5
   1749c:	d3f5      	bcc.n	1748a <console_dump+0xe>
}
   1749e:	bd70      	pop	{r4, r5, r6, pc}
   174a0:	4770      	bx	lr
   174a2:	bf00      	nop
   174a4:	0001f768 	.word	0x0001f768

000174a8 <console_out_nolock>:

int console_out_nolock(int character) {
   174a8:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
   174aa:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
   174ac:	4b0b      	ldr	r3, [pc, #44]	; (174dc <console_out_nolock+0x34>)
   174ae:	781b      	ldrb	r3, [r3, #0]
   174b0:	b953      	cbnz	r3, 174c8 <console_out_nolock+0x20>
   174b2:	4604      	mov	r4, r0
    if ('\n' == c) {
   174b4:	2d0a      	cmp	r5, #10
   174b6:	d009      	beq.n	174cc <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
   174b8:	4b09      	ldr	r3, [pc, #36]	; (174e0 <console_out_nolock+0x38>)
   174ba:	2201      	movs	r2, #1
   174bc:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
   174be:	4628      	mov	r0, r5
   174c0:	f7ff ff8e 	bl	173e0 <semihosting_console_write_ch>
    return character;
   174c4:	4620      	mov	r0, r4
}
   174c6:	bd38      	pop	{r3, r4, r5, pc}
   174c8:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
   174ca:	e7fc      	b.n	174c6 <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
   174cc:	200d      	movs	r0, #13
   174ce:	f7ff ff87 	bl	173e0 <semihosting_console_write_ch>
        console_is_midline = 0;
   174d2:	4b03      	ldr	r3, [pc, #12]	; (174e0 <console_out_nolock+0x38>)
   174d4:	2200      	movs	r2, #0
   174d6:	601a      	str	r2, [r3, #0]
   174d8:	e7f1      	b.n	174be <console_out_nolock+0x16>
   174da:	bf00      	nop
   174dc:	2000ddb4 	.word	0x2000ddb4
   174e0:	2000ddb8 	.word	0x2000ddb8

000174e4 <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
   174e4:	2000      	movs	r0, #0
   174e6:	4770      	bx	lr

000174e8 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
   174e8:	b570      	push	{r4, r5, r6, lr}
   174ea:	4606      	mov	r6, r0
   174ec:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
   174ee:	2400      	movs	r4, #0
   174f0:	42ac      	cmp	r4, r5
   174f2:	da07      	bge.n	17504 <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
   174f4:	5d30      	ldrb	r0, [r6, r4]
   174f6:	f7ff ffd7 	bl	174a8 <console_out_nolock>
   174fa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   174fe:	d001      	beq.n	17504 <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
   17500:	3401      	adds	r4, #1
   17502:	e7f5      	b.n	174f0 <console_write+0x8>
    }
}
   17504:	bd70      	pop	{r4, r5, r6, pc}

00017506 <console_blocking_mode>:

void console_blocking_mode(void) {
   17506:	b508      	push	{r3, lr}
    disable_buffer();
   17508:	f7ff ff3c 	bl	17384 <disable_buffer>
}
   1750c:	bd08      	pop	{r3, pc}
	...

00017510 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
   17510:	b510      	push	{r4, lr}
   17512:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   17514:	4b0d      	ldr	r3, [pc, #52]	; (1754c <console_pkg_init+0x3c>)
   17516:	781b      	ldrb	r3, [r3, #0]
   17518:	b193      	cbz	r3, 17540 <console_pkg_init+0x30>

    os_eventq_init(&avail_queue);
   1751a:	480d      	ldr	r0, [pc, #52]	; (17550 <console_pkg_init+0x40>)
   1751c:	f001 f9fa 	bl	18914 <os_eventq_init>
    os_mutex_init(&console_write_lock);
   17520:	480c      	ldr	r0, [pc, #48]	; (17554 <console_pkg_init+0x44>)
   17522:	f001 fd15 	bl	18f50 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
   17526:	f7ff ffdd 	bl	174e4 <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   1752a:	b138      	cbz	r0, 1753c <console_pkg_init+0x2c>
   1752c:	2000      	movs	r0, #0
   1752e:	9000      	str	r0, [sp, #0]
   17530:	4b09      	ldr	r3, [pc, #36]	; (17558 <console_pkg_init+0x48>)
   17532:	681c      	ldr	r4, [r3, #0]
   17534:	4603      	mov	r3, r0
   17536:	4602      	mov	r2, r0
   17538:	4601      	mov	r1, r0
   1753a:	47a0      	blx	r4
}
   1753c:	b002      	add	sp, #8
   1753e:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   17540:	461a      	mov	r2, r3
   17542:	4619      	mov	r1, r3
   17544:	4618      	mov	r0, r3
   17546:	f000 fed1 	bl	182ec <__assert_func>
   1754a:	bf00      	nop
   1754c:	2000ddbc 	.word	0x2000ddbc
   17550:	20006f08 	.word	0x20006f08
   17554:	20006f18 	.word	0x20006f18
   17558:	20000104 	.word	0x20000104

0001755c <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   1755c:	b40f      	push	{r0, r1, r2, r3}
   1755e:	b510      	push	{r4, lr}
   17560:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   17562:	f000 f81f 	bl	175a4 <console_get_ticks>
   17566:	b160      	cbz	r0, 17582 <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   17568:	4b0c      	ldr	r3, [pc, #48]	; (1759c <console_printf+0x40>)
   1756a:	681b      	ldr	r3, [r3, #0]
   1756c:	b10b      	cbz	r3, 17572 <console_printf+0x16>
    num_chars = 0;
   1756e:	2400      	movs	r4, #0
   17570:	e008      	b.n	17584 <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   17572:	f002 f8d9 	bl	19728 <os_time_get>
   17576:	4601      	mov	r1, r0
   17578:	4809      	ldr	r0, [pc, #36]	; (175a0 <console_printf+0x44>)
   1757a:	f002 fd97 	bl	1a0ac <printf>
   1757e:	4604      	mov	r4, r0
   17580:	e000      	b.n	17584 <console_printf+0x28>
    num_chars = 0;
   17582:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
   17584:	a905      	add	r1, sp, #20
   17586:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
   17588:	9804      	ldr	r0, [sp, #16]
   1758a:	f002 fdbf 	bl	1a10c <vprintf>
    va_end(args);

    return num_chars;
}
   1758e:	4420      	add	r0, r4
   17590:	b002      	add	sp, #8
   17592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17596:	b004      	add	sp, #16
   17598:	4770      	bx	lr
   1759a:	bf00      	nop
   1759c:	2000ddb8 	.word	0x2000ddb8
   175a0:	0001f770 	.word	0x0001f770

000175a4 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   175a4:	4b01      	ldr	r3, [pc, #4]	; (175ac <console_get_ticks+0x8>)
   175a6:	7818      	ldrb	r0, [r3, #0]
   175a8:	4770      	bx	lr
   175aa:	bf00      	nop
   175ac:	20006f24 	.word	0x20006f24

000175b0 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   175b0:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   175b2:	f000 fe9b 	bl	182ec <__assert_func>
	...

000175b8 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   175b8:	4b01      	ldr	r3, [pc, #4]	; (175c0 <sysinit_start+0x8>)
   175ba:	2201      	movs	r2, #1
   175bc:	701a      	strb	r2, [r3, #0]
}
   175be:	4770      	bx	lr
   175c0:	2000ddbc 	.word	0x2000ddbc

000175c4 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   175c4:	4b01      	ldr	r3, [pc, #4]	; (175cc <sysinit_end+0x8>)
   175c6:	2200      	movs	r2, #0
   175c8:	701a      	strb	r2, [r3, #0]
}
   175ca:	4770      	bx	lr
   175cc:	2000ddbc 	.word	0x2000ddbc

000175d0 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   175d0:	4a09      	ldr	r2, [pc, #36]	; (175f8 <NVIC_Relocate+0x28>)
   175d2:	4b0a      	ldr	r3, [pc, #40]	; (175fc <NVIC_Relocate+0x2c>)
   175d4:	429a      	cmp	r2, r3
   175d6:	d00a      	beq.n	175ee <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   175d8:	2300      	movs	r3, #0
   175da:	e006      	b.n	175ea <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
   175dc:	4a07      	ldr	r2, [pc, #28]	; (175fc <NVIC_Relocate+0x2c>)
   175de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   175e2:	4a05      	ldr	r2, [pc, #20]	; (175f8 <NVIC_Relocate+0x28>)
   175e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   175e8:	3301      	adds	r3, #1
   175ea:	2b35      	cmp	r3, #53	; 0x35
   175ec:	ddf6      	ble.n	175dc <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   175ee:	4a02      	ldr	r2, [pc, #8]	; (175f8 <NVIC_Relocate+0x28>)
   175f0:	4b03      	ldr	r3, [pc, #12]	; (17600 <NVIC_Relocate+0x30>)
   175f2:	609a      	str	r2, [r3, #8]
#endif
}
   175f4:	4770      	bx	lr
   175f6:	bf00      	nop
   175f8:	20000000 	.word	0x20000000
   175fc:	00008020 	.word	0x00008020
   17600:	e000ed00 	.word	0xe000ed00

00017604 <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
   17604:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   17606:	2400      	movs	r4, #0
   17608:	e000      	b.n	1760c <hal_gpio_irq_handler+0x8>
   1760a:	3401      	adds	r4, #1
   1760c:	2c07      	cmp	r4, #7
   1760e:	dc1c      	bgt.n	1764a <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
   17610:	f104 0340 	add.w	r3, r4, #64	; 0x40
   17614:	4a0d      	ldr	r2, [pc, #52]	; (1764c <hal_gpio_irq_handler+0x48>)
   17616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1761a:	2b00      	cmp	r3, #0
   1761c:	d0f5      	beq.n	1760a <hal_gpio_irq_handler+0x6>
   1761e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   17622:	2301      	movs	r3, #1
   17624:	40a3      	lsls	r3, r4
   17626:	421a      	tst	r2, r3
   17628:	d0ef      	beq.n	1760a <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
   1762a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1762e:	4a07      	ldr	r2, [pc, #28]	; (1764c <hal_gpio_irq_handler+0x48>)
   17630:	2100      	movs	r1, #0
   17632:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
   17636:	4b06      	ldr	r3, [pc, #24]	; (17650 <hal_gpio_irq_handler+0x4c>)
   17638:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   1763c:	2a00      	cmp	r2, #0
   1763e:	d0e4      	beq.n	1760a <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
   17640:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   17644:	6858      	ldr	r0, [r3, #4]
   17646:	4790      	blx	r2
   17648:	e7df      	b.n	1760a <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
   1764a:	bd10      	pop	{r4, pc}
   1764c:	40006000 	.word	0x40006000
   17650:	20006f28 	.word	0x20006f28

00017654 <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
   17654:	4b06      	ldr	r3, [pc, #24]	; (17670 <hal_gpio_irq_setup+0x1c>)
   17656:	781b      	ldrb	r3, [r3, #0]
   17658:	b94b      	cbnz	r3, 1766e <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1765a:	4b06      	ldr	r3, [pc, #24]	; (17674 <hal_gpio_irq_setup+0x20>)
   1765c:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1765e:	4a06      	ldr	r2, [pc, #24]	; (17678 <hal_gpio_irq_setup+0x24>)
   17660:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17662:	4b06      	ldr	r3, [pc, #24]	; (1767c <hal_gpio_irq_setup+0x28>)
   17664:	2240      	movs	r2, #64	; 0x40
   17666:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
   17668:	4b01      	ldr	r3, [pc, #4]	; (17670 <hal_gpio_irq_setup+0x1c>)
   1766a:	2201      	movs	r2, #1
   1766c:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
   1766e:	4770      	bx	lr
   17670:	20006f68 	.word	0x20006f68
   17674:	e000ed00 	.word	0xe000ed00
   17678:	00017605 	.word	0x00017605
   1767c:	e000e100 	.word	0xe000e100

00017680 <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   17680:	2000      	movs	r0, #0
   17682:	2807      	cmp	r0, #7
   17684:	dc05      	bgt.n	17692 <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
   17686:	4b04      	ldr	r3, [pc, #16]	; (17698 <hal_gpio_find_empty_slot+0x18>)
   17688:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   1768c:	b11b      	cbz	r3, 17696 <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   1768e:	3001      	adds	r0, #1
   17690:	e7f7      	b.n	17682 <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
   17692:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   17696:	4770      	bx	lr
   17698:	20006f28 	.word	0x20006f28

0001769c <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
   1769c:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   1769e:	2000      	movs	r0, #0
   176a0:	e000      	b.n	176a4 <hal_gpio_find_pin+0x8>
   176a2:	3001      	adds	r0, #1
   176a4:	2807      	cmp	r0, #7
   176a6:	dc0e      	bgt.n	176c6 <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
   176a8:	4b08      	ldr	r3, [pc, #32]	; (176cc <hal_gpio_find_pin+0x30>)
   176aa:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   176ae:	2b00      	cmp	r3, #0
   176b0:	d0f7      	beq.n	176a2 <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
   176b2:	f500 73a2 	add.w	r3, r0, #324	; 0x144
   176b6:	4a06      	ldr	r2, [pc, #24]	; (176d0 <hal_gpio_find_pin+0x34>)
   176b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   176bc:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
   176c0:	428b      	cmp	r3, r1
   176c2:	d1ee      	bne.n	176a2 <hal_gpio_find_pin+0x6>
   176c4:	e001      	b.n	176ca <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
   176c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   176ca:	4770      	bx	lr
   176cc:	20006f28 	.word	0x20006f28
   176d0:	40006000 	.word	0x40006000

000176d4 <hal_gpio_init_in>:
    switch (pull) {
   176d4:	2901      	cmp	r1, #1
   176d6:	d003      	beq.n	176e0 <hal_gpio_init_in+0xc>
   176d8:	2902      	cmp	r1, #2
   176da:	d00f      	beq.n	176fc <hal_gpio_init_in+0x28>
        conf = 0;
   176dc:	2100      	movs	r1, #0
        break;
   176de:	e000      	b.n	176e2 <hal_gpio_init_in+0xe>
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
   176e0:	210c      	movs	r1, #12
    port->PIN_CNF[pin_index] = conf;
   176e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   176e6:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   176ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
   176ee:	2301      	movs	r3, #1
   176f0:	fa03 f000 	lsl.w	r0, r3, r0
   176f4:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
   176f8:	2000      	movs	r0, #0
   176fa:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
   176fc:	2104      	movs	r1, #4
   176fe:	e7f0      	b.n	176e2 <hal_gpio_init_in+0xe>

00017700 <hal_gpio_init_out>:
    if (val) {
   17700:	b999      	cbnz	r1, 1772a <hal_gpio_init_out+0x2a>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   17702:	2301      	movs	r3, #1
   17704:	4083      	lsls	r3, r0
   17706:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1770a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
   1770e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   17712:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   17716:	2103      	movs	r1, #3
   17718:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
   1771c:	2301      	movs	r3, #1
   1771e:	fa03 f000 	lsl.w	r0, r3, r0
   17722:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
   17726:	2000      	movs	r0, #0
   17728:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   1772a:	2301      	movs	r3, #1
   1772c:	4083      	lsls	r3, r0
   1772e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   17732:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   17736:	e7ea      	b.n	1770e <hal_gpio_init_out+0xe>

00017738 <hal_gpio_write>:
    if (val) {
   17738:	b939      	cbnz	r1, 1774a <hal_gpio_write+0x12>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   1773a:	2301      	movs	r3, #1
   1773c:	fa03 f000 	lsl.w	r0, r3, r0
   17740:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17744:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   17748:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   1774a:	2301      	movs	r3, #1
   1774c:	fa03 f000 	lsl.w	r0, r3, r0
   17750:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17754:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   17758:	4770      	bx	lr

0001775a <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
   1775a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1775e:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
   17762:	2301      	movs	r3, #1
   17764:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   17766:	421a      	tst	r2, r3
   17768:	d108      	bne.n	1777c <hal_gpio_read+0x22>
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   1776a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1776e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   17772:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   17776:	f000 0001 	and.w	r0, r0, #1
}
   1777a:	4770      	bx	lr
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   1777c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17780:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   17784:	fa23 f000 	lsr.w	r0, r3, r0
   17788:	f000 0001 	and.w	r0, r0, #1
   1778c:	4770      	bx	lr
	...

00017790 <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
   17790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17794:	4680      	mov	r8, r0
   17796:	460f      	mov	r7, r1
   17798:	4616      	mov	r6, r2
   1779a:	461c      	mov	r4, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
   1779c:	f7ff ff5a 	bl	17654 <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
   177a0:	f7ff ff6e 	bl	17680 <hal_gpio_find_empty_slot>
    if (i < 0) {
   177a4:	1e05      	subs	r5, r0, #0
   177a6:	db27      	blt.n	177f8 <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
   177a8:	f89d 1018 	ldrb.w	r1, [sp, #24]
   177ac:	4640      	mov	r0, r8
   177ae:	f7ff ff91 	bl	176d4 <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
   177b2:	2c02      	cmp	r4, #2
   177b4:	d01d      	beq.n	177f2 <hal_gpio_irq_init+0x62>
   177b6:	2c03      	cmp	r4, #3
   177b8:	d018      	beq.n	177ec <hal_gpio_irq_init+0x5c>
   177ba:	2c01      	cmp	r4, #1
   177bc:	d002      	beq.n	177c4 <hal_gpio_irq_init+0x34>
        break;
    case HAL_GPIO_TRIG_BOTH:
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
        break;
    default:
        return -1;
   177be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   177c2:	e011      	b.n	177e8 <hal_gpio_irq_init+0x58>
        conf = GPIOTE_CONFIG_POLARITY_LoToHi << GPIOTE_CONFIG_POLARITY_Pos;
   177c4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
   177c8:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
   177cc:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
   177d0:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   177d4:	4b0a      	ldr	r3, [pc, #40]	; (17800 <hal_gpio_irq_init+0x70>)
   177d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
   177da:	4b0a      	ldr	r3, [pc, #40]	; (17804 <hal_gpio_irq_init+0x74>)
   177dc:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
    hal_gpio_irqs[i].arg = arg;
   177e0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   177e4:	605e      	str	r6, [r3, #4]

    return 0;
   177e6:	2000      	movs	r0, #0
}
   177e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
   177ec:	f44f 3040 	mov.w	r0, #196608	; 0x30000
        break;
   177f0:	e7ea      	b.n	177c8 <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
   177f2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   177f6:	e7e7      	b.n	177c8 <hal_gpio_irq_init+0x38>
        return -1;
   177f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   177fc:	e7f4      	b.n	177e8 <hal_gpio_irq_init+0x58>
   177fe:	bf00      	nop
   17800:	40006000 	.word	0x40006000
   17804:	20006f28 	.word	0x20006f28

00017808 <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
   17808:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
   1780a:	f7ff ff47 	bl	1769c <hal_gpio_find_pin>
    if (i < 0) {
   1780e:	2800      	cmp	r0, #0
   17810:	db0a      	blt.n	17828 <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
   17812:	4a06      	ldr	r2, [pc, #24]	; (1782c <hal_gpio_irq_enable+0x24>)
   17814:	f100 0340 	add.w	r3, r0, #64	; 0x40
   17818:	2100      	movs	r1, #0
   1781a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
   1781e:	2301      	movs	r3, #1
   17820:	fa03 f000 	lsl.w	r0, r3, r0
   17824:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
   17828:	bd08      	pop	{r3, pc}
   1782a:	bf00      	nop
   1782c:	40006000 	.word	0x40006000

00017830 <hal_i2c_delay_us>:

static void
hal_i2c_delay_us(uint32_t number_of_us)
{
register uint32_t delay __ASM ("r0") = number_of_us;
__ASM volatile (
   17830:	3801      	subs	r0, #1
   17832:	bf00      	nop
   17834:	bf00      	nop
   17836:	bf00      	nop
   17838:	bf00      	nop
   1783a:	bf00      	nop
   1783c:	bf00      	nop
   1783e:	bf00      	nop
   17840:	bf00      	nop
   17842:	bf00      	nop
   17844:	bf00      	nop
   17846:	bf00      	nop
   17848:	bf00      	nop
   1784a:	bf00      	nop
   1784c:	bf00      	nop
   1784e:	bf00      	nop
   17850:	bf00      	nop
   17852:	bf00      	nop
   17854:	bf00      	nop
   17856:	bf00      	nop
   17858:	bf00      	nop
   1785a:	bf00      	nop
   1785c:	bf00      	nop
   1785e:	bf00      	nop
   17860:	bf00      	nop
   17862:	bf00      	nop
   17864:	bf00      	nop
   17866:	bf00      	nop
   17868:	bf00      	nop
   1786a:	bf00      	nop
   1786c:	bf00      	nop
   1786e:	bf00      	nop
   17870:	bf00      	nop
   17872:	bf00      	nop
   17874:	bf00      	nop
   17876:	bf00      	nop
   17878:	bf00      	nop
   1787a:	bf00      	nop
   1787c:	bf00      	nop
   1787e:	bf00      	nop
   17880:	bf00      	nop
   17882:	bf00      	nop
   17884:	bf00      	nop
   17886:	bf00      	nop
   17888:	bf00      	nop
   1788a:	bf00      	nop
   1788c:	bf00      	nop
   1788e:	bf00      	nop
   17890:	bf00      	nop
   17892:	bf00      	nop
   17894:	bf00      	nop
   17896:	bf00      	nop
   17898:	bf00      	nop
   1789a:	bf00      	nop
   1789c:	bf00      	nop
   1789e:	bf00      	nop
   178a0:	bf00      	nop
   178a2:	bf00      	nop
   178a4:	bf00      	nop
   178a6:	d1c3      	bne.n	17830 <hal_i2c_delay_us>
    " BNE 1b\n"
#ifdef NRF51
    ".syntax divided\n"
#endif
    : "+r" (delay));
}
   178a8:	4770      	bx	lr
	...

000178ac <hal_i2c_resolve>:

static int
hal_i2c_resolve(uint8_t i2c_num, struct nrf52_hal_i2c **out_i2c)
{
    if (i2c_num >= NRF52_HAL_I2C_MAX) {
   178ac:	2801      	cmp	r0, #1
   178ae:	d806      	bhi.n	178be <hal_i2c_resolve+0x12>
        *out_i2c = NULL;
        return HAL_I2C_ERR_INVAL;
    }

    *out_i2c = nrf52_hal_i2cs[i2c_num];
   178b0:	4b06      	ldr	r3, [pc, #24]	; (178cc <hal_i2c_resolve+0x20>)
   178b2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   178b6:	600b      	str	r3, [r1, #0]
    if (*out_i2c == NULL) {
   178b8:	b12b      	cbz	r3, 178c6 <hal_i2c_resolve+0x1a>
        return HAL_I2C_ERR_INVAL;
    }

    return 0;
   178ba:	2000      	movs	r0, #0
}
   178bc:	4770      	bx	lr
        *out_i2c = NULL;
   178be:	2300      	movs	r3, #0
   178c0:	600b      	str	r3, [r1, #0]
        return HAL_I2C_ERR_INVAL;
   178c2:	2002      	movs	r0, #2
   178c4:	4770      	bx	lr
        return HAL_I2C_ERR_INVAL;
   178c6:	2002      	movs	r0, #2
   178c8:	4770      	bx	lr
   178ca:	bf00      	nop
   178cc:	0001f778 	.word	0x0001f778

000178d0 <hal_i2c_convert_status>:
 * Converts an nRF SDK I2C status to a HAL I2C error code.
 */
static int
hal_i2c_convert_status(int nrf_status)
{
    if (nrf_status == 0) {
   178d0:	b148      	cbz	r0, 178e6 <hal_i2c_convert_status+0x16>
        return 0;
    } else if (nrf_status & NRF_TWIM_ERROR_DATA_NACK) {
   178d2:	f010 0f04 	tst.w	r0, #4
   178d6:	d107      	bne.n	178e8 <hal_i2c_convert_status+0x18>
        return HAL_I2C_ERR_DATA_NACK;
    } else if (nrf_status & NRF_TWIM_ERROR_ADDRESS_NACK) {
   178d8:	f010 0f02 	tst.w	r0, #2
   178dc:	d101      	bne.n	178e2 <hal_i2c_convert_status+0x12>
        return HAL_I2C_ERR_ADDR_NACK;
    } else {
        return HAL_I2C_ERR_UNKNOWN;
   178de:	2001      	movs	r0, #1
    }
}
   178e0:	4770      	bx	lr
        return HAL_I2C_ERR_ADDR_NACK;
   178e2:	2004      	movs	r0, #4
   178e4:	4770      	bx	lr
   178e6:	4770      	bx	lr
        return HAL_I2C_ERR_DATA_NACK;
   178e8:	2005      	movs	r0, #5
   178ea:	4770      	bx	lr

000178ec <read_gpio_inbuffer>:
read_gpio_inbuffer(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   178ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   178f0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   178f4:	fa23 f000 	lsr.w	r0, r3, r0
}
   178f8:	f000 0001 	and.w	r0, r0, #1
   178fc:	4770      	bx	lr

000178fe <hal_i2c_clear_bus>:
 * Clear the bus after reset by clocking 9 bits manually.
 * This should reset state from (most of) the devices on the other end.
 */
static void
hal_i2c_clear_bus(int scl_pin, int sda_pin)
{
   178fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17902:	4605      	mov	r5, r0
   17904:	460e      	mov	r6, r1
    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(scl_pin);
    sda_port = HAL_GPIO_PORT(sda_pin);

    /* Input connected, standard-low disconnected-high, pull-ups */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   17906:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1790a:	f500 78e0 	add.w	r8, r0, #448	; 0x1c0
   1790e:	f240 630c 	movw	r3, #1548	; 0x60c
   17912:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   17916:	f501 77e0 	add.w	r7, r1, #448	; 0x1c0
   1791a:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_gpio_write(scl_pin, 1);
   1791e:	2101      	movs	r1, #1
   17920:	f7ff ff0a 	bl	17738 <hal_gpio_write>
    hal_gpio_write(sda_pin, 1);
   17924:	2101      	movs	r1, #1
   17926:	4630      	mov	r0, r6
   17928:	f7ff ff06 	bl	17738 <hal_gpio_write>

    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF_CLR;
   1792c:	f240 630d 	movw	r3, #1549	; 0x60d
   17930:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF_CLR;
   17934:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_i2c_delay_us(4);
   17938:	2004      	movs	r0, #4
   1793a:	f7ff ff79 	bl	17830 <hal_i2c_delay_us>

    for (i = 0; i < 9; i++) {
   1793e:	2400      	movs	r4, #0
   17940:	2c08      	cmp	r4, #8
   17942:	dc14      	bgt.n	1796e <hal_i2c_clear_bus+0x70>
        if (read_gpio_inbuffer(sda_pin)) {
   17944:	4630      	mov	r0, r6
   17946:	f7ff ffd1 	bl	178ec <read_gpio_inbuffer>
   1794a:	b978      	cbnz	r0, 1796c <hal_i2c_clear_bus+0x6e>
                goto ret;
            } else {
                break;
            }
        }
        hal_gpio_write(scl_pin, 0);
   1794c:	2100      	movs	r1, #0
   1794e:	4628      	mov	r0, r5
   17950:	f7ff fef2 	bl	17738 <hal_gpio_write>
        hal_i2c_delay_us(4);
   17954:	2004      	movs	r0, #4
   17956:	f7ff ff6b 	bl	17830 <hal_i2c_delay_us>
        hal_gpio_write(scl_pin, 1);
   1795a:	2101      	movs	r1, #1
   1795c:	4628      	mov	r0, r5
   1795e:	f7ff feeb 	bl	17738 <hal_gpio_write>
        hal_i2c_delay_us(4);
   17962:	2004      	movs	r0, #4
   17964:	f7ff ff64 	bl	17830 <hal_i2c_delay_us>
    for (i = 0; i < 9; i++) {
   17968:	3401      	adds	r4, #1
   1796a:	e7e9      	b.n	17940 <hal_i2c_clear_bus+0x42>
            if (i == 0) {
   1796c:	b154      	cbz	r4, 17984 <hal_i2c_clear_bus+0x86>
    }

    /*
     * Send STOP.
     */
    hal_gpio_write(sda_pin, 0);
   1796e:	2100      	movs	r1, #0
   17970:	4630      	mov	r0, r6
   17972:	f7ff fee1 	bl	17738 <hal_gpio_write>
    hal_i2c_delay_us(4);
   17976:	2004      	movs	r0, #4
   17978:	f7ff ff5a 	bl	17830 <hal_i2c_delay_us>
    hal_gpio_write(sda_pin, 1);
   1797c:	2101      	movs	r1, #1
   1797e:	4630      	mov	r0, r6
   17980:	f7ff feda 	bl	17738 <hal_gpio_write>

ret:
    /* Restore GPIO config */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   17984:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17988:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   1798c:	f240 620c 	movw	r2, #1548	; 0x60c
   17990:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   17994:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   17998:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   1799c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000179a0 <hal_i2c_init>:

int
hal_i2c_init(uint8_t i2c_num, void *usercfg)
{
   179a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   179a2:	b083      	sub	sp, #12
    struct nrf52_hal_i2c_cfg *cfg;
    uint32_t freq;
    int rc;
    NRF_GPIO_Type *scl_port, *sda_port;

    assert(usercfg != NULL);
   179a4:	b1a1      	cbz	r1, 179d0 <hal_i2c_init+0x30>
   179a6:	460c      	mov	r4, r1

    rc = hal_i2c_resolve(i2c_num, &i2c);
   179a8:	a901      	add	r1, sp, #4
   179aa:	f7ff ff7f 	bl	178ac <hal_i2c_resolve>
    if (rc != 0) {
   179ae:	4606      	mov	r6, r0
   179b0:	bba8      	cbnz	r0, 17a1e <hal_i2c_init+0x7e>
        goto err;
    }

    cfg = (struct nrf52_hal_i2c_cfg *) usercfg;
    regs = i2c->nhi_regs;
   179b2:	9b01      	ldr	r3, [sp, #4]
   179b4:	681d      	ldr	r5, [r3, #0]

    switch (cfg->i2c_frequency) {
   179b6:	68a3      	ldr	r3, [r4, #8]
   179b8:	2bfa      	cmp	r3, #250	; 0xfa
   179ba:	d035      	beq.n	17a28 <hal_i2c_init+0x88>
   179bc:	d90e      	bls.n	179dc <hal_i2c_init+0x3c>
   179be:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
   179c2:	d02f      	beq.n	17a24 <hal_i2c_init+0x84>
   179c4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   179c8:	d131      	bne.n	17a2e <hal_i2c_init+0x8e>
        break;
    case 380:
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
        break;
    case 400:
        freq = TWI_FREQUENCY_FREQUENCY_K400;
   179ca:	f04f 67cd 	mov.w	r7, #107479040	; 0x6680000
        break;
   179ce:	e009      	b.n	179e4 <hal_i2c_init+0x44>
    assert(usercfg != NULL);
   179d0:	2300      	movs	r3, #0
   179d2:	461a      	mov	r2, r3
   179d4:	4619      	mov	r1, r3
   179d6:	4618      	mov	r0, r3
   179d8:	f000 fc88 	bl	182ec <__assert_func>
    switch (cfg->i2c_frequency) {
   179dc:	2b64      	cmp	r3, #100	; 0x64
   179de:	d126      	bne.n	17a2e <hal_i2c_init+0x8e>
        freq = TWI_FREQUENCY_FREQUENCY_K100;
   179e0:	f04f 77cc 	mov.w	r7, #26738688	; 0x1980000
    default:
        rc = HAL_I2C_ERR_INVAL;
        goto err;
    }

    hal_i2c_clear_bus(cfg->scl_pin, cfg->sda_pin);
   179e4:	6861      	ldr	r1, [r4, #4]
   179e6:	6820      	ldr	r0, [r4, #0]
   179e8:	f7ff ff89 	bl	178fe <hal_i2c_clear_bus>

    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(cfg->scl_pin);
    sda_port = HAL_GPIO_PORT(cfg->sda_pin);

    scl_port->PIN_CNF[HAL_GPIO_INDEX(cfg->scl_pin)] = NRF52_SCL_PIN_CONF;
   179ec:	6823      	ldr	r3, [r4, #0]
   179ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   179f2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   179f6:	f240 610c 	movw	r1, #1548	; 0x60c
   179fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    sda_port->PIN_CNF[HAL_GPIO_INDEX(cfg->sda_pin)] = NRF52_SDA_PIN_CONF;
   179fe:	6863      	ldr	r3, [r4, #4]
   17a00:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17a04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    regs->PSELSCL = cfg->scl_pin;
   17a08:	6823      	ldr	r3, [r4, #0]
   17a0a:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    regs->PSELSDA = cfg->sda_pin;
   17a0e:	6863      	ldr	r3, [r4, #4]
   17a10:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    regs->FREQUENCY = freq;
   17a14:	f8c5 7524 	str.w	r7, [r5, #1316]	; 0x524
    regs->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   17a18:	2305      	movs	r3, #5
   17a1a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    return (0);
err:
    return (rc);
}
   17a1e:	4630      	mov	r0, r6
   17a20:	b003      	add	sp, #12
   17a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
   17a24:	4f03      	ldr	r7, [pc, #12]	; (17a34 <hal_i2c_init+0x94>)
        break;
   17a26:	e7dd      	b.n	179e4 <hal_i2c_init+0x44>
        freq = TWI_FREQUENCY_FREQUENCY_K250;
   17a28:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
   17a2c:	e7da      	b.n	179e4 <hal_i2c_init+0x44>
        rc = HAL_I2C_ERR_INVAL;
   17a2e:	2602      	movs	r6, #2
   17a30:	e7f5      	b.n	17a1e <hal_i2c_init+0x7e>
   17a32:	bf00      	nop
   17a34:	06147ae9 	.word	0x06147ae9

00017a38 <hal_i2c_master_write>:
}

int
hal_i2c_master_write(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                     uint32_t timo, uint8_t last_op)
{
   17a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a3c:	b083      	sub	sp, #12
   17a3e:	4688      	mov	r8, r1
   17a40:	4615      	mov	r5, r2
   17a42:	469a      	mov	sl, r3
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   17a44:	a901      	add	r1, sp, #4
   17a46:	f7ff ff31 	bl	178ac <hal_i2c_resolve>
    if (rc != 0) {
   17a4a:	4681      	mov	r9, r0
   17a4c:	b118      	cbz	r0, 17a56 <hal_i2c_master_write+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   17a4e:	4648      	mov	r0, r9
   17a50:	b003      	add	sp, #12
   17a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   17a56:	9b01      	ldr	r3, [sp, #4]
   17a58:	681c      	ldr	r4, [r3, #0]
    regs->ADDRESS = pdata->address;
   17a5a:	f898 3000 	ldrb.w	r3, [r8]
   17a5e:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    regs->EVENTS_ERROR = 0;
   17a62:	2300      	movs	r3, #0
   17a64:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   17a68:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   17a6c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->SHORTS = 0;
   17a70:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTTX);
   17a74:	f104 0708 	add.w	r7, r4, #8
    int retry = 2;
   17a78:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   17a7c:	2300      	movs	r3, #0
   17a7e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   17a82:	2301      	movs	r3, #1
   17a84:	603b      	str	r3, [r7, #0]
        end_ticks = os_cputime_get32() +
   17a86:	f000 fe61 	bl	1874c <os_cputime_get32>
   17a8a:	f100 0664 	add.w	r6, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   17a8e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   17a92:	f7ff fe62 	bl	1775a <hal_gpio_read>
   17a96:	b1b0      	cbz	r0, 17ac6 <hal_i2c_master_write+0x8e>
   17a98:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   17a9c:	b99b      	cbnz	r3, 17ac6 <hal_i2c_master_write+0x8e>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   17a9e:	f000 fe55 	bl	1874c <os_cputime_get32>
   17aa2:	1b80      	subs	r0, r0, r6
   17aa4:	2800      	cmp	r0, #0
   17aa6:	dbf2      	blt.n	17a8e <hal_i2c_master_write+0x56>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   17aa8:	2300      	movs	r3, #0
   17aaa:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   17aae:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   17ab2:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   17ab6:	f7ff ff22 	bl	178fe <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   17aba:	2305      	movs	r3, #5
   17abc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   17ac0:	f1bb 0b01 	subs.w	fp, fp, #1
   17ac4:	d1da      	bne.n	17a7c <hal_i2c_master_write+0x44>
    start = os_time_get();
   17ac6:	f001 fe2f 	bl	19728 <os_time_get>
   17aca:	4606      	mov	r6, r0
    for (i = 0; i < pdata->len; i++) {
   17acc:	464f      	mov	r7, r9
   17ace:	e003      	b.n	17ad8 <hal_i2c_master_write+0xa0>
        if (regs->EVENTS_ERROR) {
   17ad0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17ad4:	b9db      	cbnz	r3, 17b0e <hal_i2c_master_write+0xd6>
    for (i = 0; i < pdata->len; i++) {
   17ad6:	3701      	adds	r7, #1
   17ad8:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   17adc:	42bb      	cmp	r3, r7
   17ade:	dd24      	ble.n	17b2a <hal_i2c_master_write+0xf2>
        regs->EVENTS_TXDSENT = 0;
   17ae0:	2300      	movs	r3, #0
   17ae2:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        regs->TXD = pdata->buffer[i];
   17ae6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   17aea:	5ddb      	ldrb	r3, [r3, r7]
   17aec:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
        while (!regs->EVENTS_TXDSENT && !regs->EVENTS_ERROR) {
   17af0:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   17af4:	2b00      	cmp	r3, #0
   17af6:	d1eb      	bne.n	17ad0 <hal_i2c_master_write+0x98>
   17af8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17afc:	2b00      	cmp	r3, #0
   17afe:	d1e7      	bne.n	17ad0 <hal_i2c_master_write+0x98>
            if (os_time_get() - start > timo) {
   17b00:	f001 fe12 	bl	19728 <os_time_get>
   17b04:	1b80      	subs	r0, r0, r6
   17b06:	42a8      	cmp	r0, r5
   17b08:	d9f2      	bls.n	17af0 <hal_i2c_master_write+0xb8>
                rc = HAL_I2C_ERR_TIMEOUT;
   17b0a:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   17b0e:	2301      	movs	r3, #1
   17b10:	6163      	str	r3, [r4, #20]
    if (regs->EVENTS_ERROR) {
   17b12:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17b16:	2b00      	cmp	r3, #0
   17b18:	d099      	beq.n	17a4e <hal_i2c_master_write+0x16>
        nrf_status = regs->ERRORSRC;
   17b1a:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   17b1e:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   17b22:	f7ff fed5 	bl	178d0 <hal_i2c_convert_status>
   17b26:	4681      	mov	r9, r0
   17b28:	e791      	b.n	17a4e <hal_i2c_master_write+0x16>
    if (last_op) {
   17b2a:	f1ba 0f00 	cmp.w	sl, #0
   17b2e:	d08e      	beq.n	17a4e <hal_i2c_master_write+0x16>
        regs->EVENTS_STOPPED = 0;
   17b30:	2300      	movs	r3, #0
   17b32:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        regs->TASKS_STOP = 1;
   17b36:	2301      	movs	r3, #1
   17b38:	6163      	str	r3, [r4, #20]
        while (!regs->EVENTS_STOPPED && !regs->EVENTS_ERROR) {
   17b3a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   17b3e:	b953      	cbnz	r3, 17b56 <hal_i2c_master_write+0x11e>
   17b40:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17b44:	b93b      	cbnz	r3, 17b56 <hal_i2c_master_write+0x11e>
            if (os_time_get() - start > timo) {
   17b46:	f001 fdef 	bl	19728 <os_time_get>
   17b4a:	1b80      	subs	r0, r0, r6
   17b4c:	42a8      	cmp	r0, r5
   17b4e:	d9f4      	bls.n	17b3a <hal_i2c_master_write+0x102>
                rc = HAL_I2C_ERR_TIMEOUT;
   17b50:	f04f 0903 	mov.w	r9, #3
   17b54:	e7db      	b.n	17b0e <hal_i2c_master_write+0xd6>
        if (regs->EVENTS_ERROR) {
   17b56:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17b5a:	2b00      	cmp	r3, #0
   17b5c:	d1d7      	bne.n	17b0e <hal_i2c_master_write+0xd6>
   17b5e:	e776      	b.n	17a4e <hal_i2c_master_write+0x16>

00017b60 <hal_i2c_master_read>:

int
hal_i2c_master_read(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                    uint32_t timo, uint8_t last_op)
{
   17b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b64:	b085      	sub	sp, #20
   17b66:	460f      	mov	r7, r1
   17b68:	4615      	mov	r5, r2
   17b6a:	9301      	str	r3, [sp, #4]
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   17b6c:	a903      	add	r1, sp, #12
   17b6e:	f7ff fe9d 	bl	178ac <hal_i2c_resolve>
    if (rc != 0) {
   17b72:	4681      	mov	r9, r0
   17b74:	b118      	cbz	r0, 17b7e <hal_i2c_master_read+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   17b76:	4648      	mov	r0, r9
   17b78:	b005      	add	sp, #20
   17b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   17b7e:	9b03      	ldr	r3, [sp, #12]
   17b80:	681c      	ldr	r4, [r3, #0]
    start = os_time_get();
   17b82:	f001 fdd1 	bl	19728 <os_time_get>
   17b86:	4606      	mov	r6, r0
    if (regs->EVENTS_RXDREADY) {
   17b88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17b8c:	b11b      	cbz	r3, 17b96 <hal_i2c_master_read+0x36>
        (void)regs->RXD;
   17b8e:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
        (void)regs->RXD;
   17b92:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    regs->EVENTS_ERROR = 0;
   17b96:	2300      	movs	r3, #0
   17b98:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   17b9c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   17ba0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->EVENTS_RXDREADY = 0;
   17ba4:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    regs->ADDRESS = pdata->address;
   17ba8:	783b      	ldrb	r3, [r7, #0]
   17baa:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (pdata->len == 1 && last_op) {
   17bae:	887b      	ldrh	r3, [r7, #2]
   17bb0:	2b01      	cmp	r3, #1
   17bb2:	d02e      	beq.n	17c12 <hal_i2c_master_read+0xb2>
        regs->SHORTS = TWI_SHORTS_BB_SUSPEND_Msk;
   17bb4:	2301      	movs	r3, #1
   17bb6:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTRX);
   17bba:	46a2      	mov	sl, r4
    int retry = 2;
   17bbc:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   17bc0:	2300      	movs	r3, #0
   17bc2:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   17bc6:	2301      	movs	r3, #1
   17bc8:	f8ca 3000 	str.w	r3, [sl]
        end_ticks = os_cputime_get32() +
   17bcc:	f000 fdbe 	bl	1874c <os_cputime_get32>
   17bd0:	f100 0864 	add.w	r8, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   17bd4:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   17bd8:	f7ff fdbf 	bl	1775a <hal_gpio_read>
   17bdc:	b1b8      	cbz	r0, 17c0e <hal_i2c_master_read+0xae>
   17bde:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   17be2:	b9a3      	cbnz	r3, 17c0e <hal_i2c_master_read+0xae>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   17be4:	f000 fdb2 	bl	1874c <os_cputime_get32>
   17be8:	eba0 0008 	sub.w	r0, r0, r8
   17bec:	2800      	cmp	r0, #0
   17bee:	dbf1      	blt.n	17bd4 <hal_i2c_master_read+0x74>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   17bf0:	2300      	movs	r3, #0
   17bf2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   17bf6:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   17bfa:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   17bfe:	f7ff fe7e 	bl	178fe <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   17c02:	2305      	movs	r3, #5
   17c04:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   17c08:	f1bb 0b01 	subs.w	fp, fp, #1
   17c0c:	d1d8      	bne.n	17bc0 <hal_i2c_master_read+0x60>
    int retry = 2;
   17c0e:	46c8      	mov	r8, r9
   17c10:	e017      	b.n	17c42 <hal_i2c_master_read+0xe2>
    if (pdata->len == 1 && last_op) {
   17c12:	9b01      	ldr	r3, [sp, #4]
   17c14:	2b00      	cmp	r3, #0
   17c16:	d0cd      	beq.n	17bb4 <hal_i2c_master_read+0x54>
        regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   17c18:	2302      	movs	r3, #2
   17c1a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   17c1e:	e7cc      	b.n	17bba <hal_i2c_master_read+0x5a>
        if (regs->EVENTS_ERROR) {
   17c20:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17c24:	bb0b      	cbnz	r3, 17c6a <hal_i2c_master_read+0x10a>
        pdata->buffer[i] = regs->RXD;
   17c26:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
   17c2a:	687b      	ldr	r3, [r7, #4]
   17c2c:	f803 2008 	strb.w	r2, [r3, r8]
        if (i == pdata->len - 2) {
   17c30:	887b      	ldrh	r3, [r7, #2]
   17c32:	3b02      	subs	r3, #2
   17c34:	4543      	cmp	r3, r8
   17c36:	d02a      	beq.n	17c8e <hal_i2c_master_read+0x12e>
        regs->EVENTS_RXDREADY = 0;
   17c38:	2300      	movs	r3, #0
   17c3a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    for (i = 0; i < pdata->len; i++) {
   17c3e:	f108 0801 	add.w	r8, r8, #1
   17c42:	887b      	ldrh	r3, [r7, #2]
   17c44:	4543      	cmp	r3, r8
   17c46:	dd96      	ble.n	17b76 <hal_i2c_master_read+0x16>
        regs->TASKS_RESUME = 1;
   17c48:	2301      	movs	r3, #1
   17c4a:	6223      	str	r3, [r4, #32]
        while (!regs->EVENTS_RXDREADY && !regs->EVENTS_ERROR) {
   17c4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17c50:	2b00      	cmp	r3, #0
   17c52:	d1e5      	bne.n	17c20 <hal_i2c_master_read+0xc0>
   17c54:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17c58:	2b00      	cmp	r3, #0
   17c5a:	d1e1      	bne.n	17c20 <hal_i2c_master_read+0xc0>
            if (os_time_get() - start > timo) {
   17c5c:	f001 fd64 	bl	19728 <os_time_get>
   17c60:	1b80      	subs	r0, r0, r6
   17c62:	42a8      	cmp	r0, r5
   17c64:	d9f2      	bls.n	17c4c <hal_i2c_master_read+0xec>
                rc = HAL_I2C_ERR_TIMEOUT;
   17c66:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   17c6a:	2301      	movs	r3, #1
   17c6c:	6163      	str	r3, [r4, #20]
    regs->SHORTS = 0;
   17c6e:	2300      	movs	r3, #0
   17c70:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (regs->EVENTS_ERROR) {
   17c74:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17c78:	2b00      	cmp	r3, #0
   17c7a:	f43f af7c 	beq.w	17b76 <hal_i2c_master_read+0x16>
        nrf_status = regs->ERRORSRC;
   17c7e:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   17c82:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   17c86:	f7ff fe23 	bl	178d0 <hal_i2c_convert_status>
   17c8a:	4681      	mov	r9, r0
   17c8c:	e773      	b.n	17b76 <hal_i2c_master_read+0x16>
            if (last_op) {
   17c8e:	9b01      	ldr	r3, [sp, #4]
   17c90:	2b00      	cmp	r3, #0
   17c92:	d0d1      	beq.n	17c38 <hal_i2c_master_read+0xd8>
                regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   17c94:	2302      	movs	r3, #2
   17c96:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   17c9a:	e7cd      	b.n	17c38 <hal_i2c_master_read+0xd8>

00017c9c <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   17c9c:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   17c9e:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   17ca0:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   17ca4:	b32b      	cbz	r3, 17cf2 <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
   17ca6:	2300      	movs	r3, #0
   17ca8:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   17cac:	7843      	ldrb	r3, [r0, #1]
   17cae:	b303      	cbz	r3, 17cf2 <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   17cb0:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   17cb4:	88c3      	ldrh	r3, [r0, #6]
   17cb6:	fa13 f382 	uxtah	r3, r3, r2
   17cba:	b29b      	uxth	r3, r3
   17cbc:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   17cbe:	8881      	ldrh	r1, [r0, #4]
   17cc0:	428b      	cmp	r3, r1
   17cc2:	d217      	bcs.n	17cf4 <nrf52_irqm_handler+0x58>
   17cc4:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
   17cc6:	6984      	ldr	r4, [r0, #24]
   17cc8:	4414      	add	r4, r2
   17cca:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   17ccc:	1acb      	subs	r3, r1, r3
   17cce:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   17cd0:	2bff      	cmp	r3, #255	; 0xff
   17cd2:	bf28      	it	cs
   17cd4:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   17cd6:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   17cda:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   17cde:	69c1      	ldr	r1, [r0, #28]
   17ce0:	b129      	cbz	r1, 17cee <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
   17ce2:	440a      	add	r2, r1
   17ce4:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   17ce6:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   17cea:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   17cee:	2301      	movs	r3, #1
   17cf0:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   17cf2:	bd38      	pop	{r3, r4, r5, pc}
   17cf4:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
   17cf6:	6a03      	ldr	r3, [r0, #32]
   17cf8:	b10b      	cbz	r3, 17cfe <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   17cfa:	6a40      	ldr	r0, [r0, #36]	; 0x24
   17cfc:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   17cfe:	2300      	movs	r3, #0
   17d00:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   17d02:	2340      	movs	r3, #64	; 0x40
   17d04:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   17d08:	e7f3      	b.n	17cf2 <nrf52_irqm_handler+0x56>
	...

00017d0c <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   17d0c:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   17d0e:	4b04      	ldr	r3, [pc, #16]	; (17d20 <nrf52_spi0_irq_handler+0x14>)
   17d10:	781b      	ldrb	r3, [r3, #0]
   17d12:	b103      	cbz	r3, 17d16 <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   17d14:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   17d16:	4802      	ldr	r0, [pc, #8]	; (17d20 <nrf52_spi0_irq_handler+0x14>)
   17d18:	f7ff ffc0 	bl	17c9c <nrf52_irqm_handler>
}
   17d1c:	e7fa      	b.n	17d14 <nrf52_spi0_irq_handler+0x8>
   17d1e:	bf00      	nop
   17d20:	2000ddc0 	.word	0x2000ddc0

00017d24 <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   17d24:	2301      	movs	r3, #1
   17d26:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   17d28:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   17d2c:	2b00      	cmp	r3, #0
   17d2e:	d0fb      	beq.n	17d28 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   17d30:	2300      	movs	r3, #0
   17d32:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   17d36:	4770      	bx	lr

00017d38 <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
   17d38:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   17d3a:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   17d3c:	780b      	ldrb	r3, [r1, #0]
   17d3e:	2b03      	cmp	r3, #3
   17d40:	d80c      	bhi.n	17d5c <hal_spi_config_slave+0x24>
   17d42:	e8df f003 	tbb	[pc, r3]
   17d46:	0e02      	.short	0x0e02
   17d48:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   17d4a:	2300      	movs	r3, #0
    rc = 0;
   17d4c:	4618      	mov	r0, r3
   17d4e:	e00a      	b.n	17d66 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   17d50:	2304      	movs	r3, #4
    rc = 0;
   17d52:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
   17d54:	e007      	b.n	17d66 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   17d56:	2306      	movs	r3, #6
    rc = 0;
   17d58:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
   17d5a:	e004      	b.n	17d66 <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
   17d5c:	2300      	movs	r3, #0
            rc = EINVAL;
   17d5e:	2016      	movs	r0, #22
            break;
   17d60:	e001      	b.n	17d66 <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   17d62:	2302      	movs	r3, #2
    rc = 0;
   17d64:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   17d66:	784c      	ldrb	r4, [r1, #1]
   17d68:	2c01      	cmp	r4, #1
   17d6a:	d006      	beq.n	17d7a <hal_spi_config_slave+0x42>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   17d6c:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   17d70:	788b      	ldrb	r3, [r1, #2]
   17d72:	b92b      	cbnz	r3, 17d80 <hal_spi_config_slave+0x48>
            rc = EINVAL;
            break;
    }

    return rc;
}
   17d74:	f85d 4b04 	ldr.w	r4, [sp], #4
   17d78:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   17d7a:	f043 0301 	orr.w	r3, r3, #1
   17d7e:	e7f5      	b.n	17d6c <hal_spi_config_slave+0x34>
            rc = EINVAL;
   17d80:	2016      	movs	r0, #22
    return rc;
   17d82:	e7f7      	b.n	17d74 <hal_spi_config_slave+0x3c>

00017d84 <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   17d84:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   17d86:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   17d88:	2501      	movs	r5, #1
   17d8a:	409d      	lsls	r5, r3
   17d8c:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   17d90:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   17d94:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17d98:	2503      	movs	r5, #3
   17d9a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   17d9e:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   17da0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17da4:	2500      	movs	r5, #0
   17da6:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   17daa:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   17dac:	780c      	ldrb	r4, [r1, #0]
   17dae:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   17db2:	784c      	ldrb	r4, [r1, #1]
   17db4:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   17db8:	7889      	ldrb	r1, [r1, #2]
   17dba:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   17dbe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17dc2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   17dc6:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   17dca:	4919      	ldr	r1, [pc, #100]	; (17e30 <hal_spi_init_master+0xac>)
   17dcc:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   17dce:	3310      	adds	r3, #16
   17dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   17dd4:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   17dd8:	42ab      	cmp	r3, r5
   17dda:	db22      	blt.n	17e22 <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17ddc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   17de0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   17de4:	22e0      	movs	r2, #224	; 0xe0
   17de6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   17dea:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   17dee:	2b00      	cmp	r3, #0
   17df0:	db08      	blt.n	17e04 <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17df2:	f003 011f 	and.w	r1, r3, #31
   17df6:	095b      	lsrs	r3, r3, #5
   17df8:	2201      	movs	r2, #1
   17dfa:	408a      	lsls	r2, r1
   17dfc:	3360      	adds	r3, #96	; 0x60
   17dfe:	490d      	ldr	r1, [pc, #52]	; (17e34 <hal_spi_init_master+0xb0>)
   17e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   17e04:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   17e08:	2b00      	cmp	r3, #0
   17e0a:	db07      	blt.n	17e1c <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17e0c:	f003 011f 	and.w	r1, r3, #31
   17e10:	095b      	lsrs	r3, r3, #5
   17e12:	2201      	movs	r2, #1
   17e14:	408a      	lsls	r2, r1
   17e16:	4907      	ldr	r1, [pc, #28]	; (17e34 <hal_spi_init_master+0xb0>)
   17e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   17e1c:	2000      	movs	r0, #0
   17e1e:	bc30      	pop	{r4, r5}
   17e20:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17e22:	f003 030f 	and.w	r3, r3, #15
   17e26:	4a04      	ldr	r2, [pc, #16]	; (17e38 <hal_spi_init_master+0xb4>)
   17e28:	441a      	add	r2, r3
   17e2a:	23e0      	movs	r3, #224	; 0xe0
   17e2c:	7613      	strb	r3, [r2, #24]
   17e2e:	e7dc      	b.n	17dea <hal_spi_init_master+0x66>
   17e30:	e000ed00 	.word	0xe000ed00
   17e34:	e000e100 	.word	0xe000e100
   17e38:	e000ecfc 	.word	0xe000ecfc

00017e3c <hal_spi_config_master>:
{
   17e3c:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   17e3e:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   17e40:	680c      	ldr	r4, [r1, #0]
   17e42:	684b      	ldr	r3, [r1, #4]
   17e44:	6084      	str	r4, [r0, #8]
   17e46:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   17e48:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   17e4c:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   17e50:	7808      	ldrb	r0, [r1, #0]
   17e52:	2801      	cmp	r0, #1
   17e54:	d916      	bls.n	17e84 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   17e56:	2001      	movs	r0, #1
   17e58:	4098      	lsls	r0, r3
   17e5a:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   17e5e:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   17e62:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17e66:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   17e6a:	2403      	movs	r4, #3
   17e6c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   17e70:	788b      	ldrb	r3, [r1, #2]
   17e72:	b973      	cbnz	r3, 17e92 <hal_spi_config_master+0x56>
    rc = 0;
   17e74:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   17e76:	780b      	ldrb	r3, [r1, #0]
   17e78:	2b03      	cmp	r3, #3
   17e7a:	d812      	bhi.n	17ea2 <hal_spi_config_master+0x66>
   17e7c:	e8df f003 	tbb	[pc, r3]
   17e80:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
   17e84:	2001      	movs	r0, #1
   17e86:	4098      	lsls	r0, r3
   17e88:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   17e8c:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   17e90:	e7e7      	b.n	17e62 <hal_spi_config_master+0x26>
            rc = EINVAL;
   17e92:	2016      	movs	r0, #22
   17e94:	e7ef      	b.n	17e76 <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   17e96:	2300      	movs	r3, #0
   17e98:	e007      	b.n	17eaa <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   17e9a:	2304      	movs	r3, #4
            break;
   17e9c:	e005      	b.n	17eaa <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   17e9e:	2306      	movs	r3, #6
            break;
   17ea0:	e003      	b.n	17eaa <hal_spi_config_master+0x6e>
            nrf_config = 0;
   17ea2:	2300      	movs	r3, #0
            rc = EINVAL;
   17ea4:	2016      	movs	r0, #22
            break;
   17ea6:	e000      	b.n	17eaa <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   17ea8:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   17eaa:	784c      	ldrb	r4, [r1, #1]
   17eac:	2c01      	cmp	r4, #1
   17eae:	d010      	beq.n	17ed2 <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   17eb0:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   17eb4:	684b      	ldr	r3, [r1, #4]
   17eb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   17eba:	d023      	beq.n	17f04 <hal_spi_config_master+0xc8>
   17ebc:	d80c      	bhi.n	17ed8 <hal_spi_config_master+0x9c>
   17ebe:	2bfa      	cmp	r3, #250	; 0xfa
   17ec0:	d029      	beq.n	17f16 <hal_spi_config_master+0xda>
   17ec2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   17ec6:	d01a      	beq.n	17efe <hal_spi_config_master+0xc2>
   17ec8:	2b7d      	cmp	r3, #125	; 0x7d
   17eca:	d011      	beq.n	17ef0 <hal_spi_config_master+0xb4>
            frequency = 0;
   17ecc:	2300      	movs	r3, #0
            rc = EINVAL;
   17ece:	2016      	movs	r0, #22
            break;
   17ed0:	e010      	b.n	17ef4 <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   17ed2:	f043 0301 	orr.w	r3, r3, #1
   17ed6:	e7eb      	b.n	17eb0 <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
   17ed8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   17edc:	d015      	beq.n	17f0a <hal_spi_config_master+0xce>
   17ede:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   17ee2:	d015      	beq.n	17f10 <hal_spi_config_master+0xd4>
   17ee4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   17ee8:	d1f0      	bne.n	17ecc <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   17eea:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
   17eee:	e001      	b.n	17ef4 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
   17ef0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   17ef4:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   17ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
   17efc:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   17efe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
   17f02:	e7f7      	b.n	17ef4 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   17f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
   17f08:	e7f4      	b.n	17ef4 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   17f0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
   17f0e:	e7f1      	b.n	17ef4 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   17f10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
   17f14:	e7ee      	b.n	17ef4 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   17f16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   17f1a:	e7eb      	b.n	17ef4 <hal_spi_config_master+0xb8>

00017f1c <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17f1c:	2802      	cmp	r0, #2
   17f1e:	dc10      	bgt.n	17f42 <hal_spi_config+0x26>
{
   17f20:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17f22:	4b0b      	ldr	r3, [pc, #44]	; (17f50 <hal_spi_config+0x34>)
   17f24:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   17f28:	b168      	cbz	r0, 17f46 <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   17f2a:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   17f2c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   17f30:	b95b      	cbnz	r3, 17f4a <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17f32:	7803      	ldrb	r3, [r0, #0]
   17f34:	b113      	cbz	r3, 17f3c <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
   17f36:	f7ff feff 	bl	17d38 <hal_spi_config_slave>
    }

err:
    return (rc);
}
   17f3a:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
   17f3c:	f7ff ff7e 	bl	17e3c <hal_spi_config_master>
   17f40:	e7fb      	b.n	17f3a <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17f42:	2016      	movs	r0, #22
}
   17f44:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17f46:	2016      	movs	r0, #22
   17f48:	e7f7      	b.n	17f3a <hal_spi_config+0x1e>
        return -1;
   17f4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17f4e:	e7f4      	b.n	17f3a <hal_spi_config+0x1e>
   17f50:	0001f780 	.word	0x0001f780

00017f54 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17f54:	2802      	cmp	r0, #2
   17f56:	dc1b      	bgt.n	17f90 <hal_spi_enable+0x3c>
   17f58:	4b10      	ldr	r3, [pc, #64]	; (17f9c <hal_spi_enable+0x48>)
   17f5a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   17f5e:	b1cb      	cbz	r3, 17f94 <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17f60:	781a      	ldrb	r2, [r3, #0]
   17f62:	b17a      	cbz	r2, 17f84 <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
   17f64:	6a1a      	ldr	r2, [r3, #32]
   17f66:	b1ba      	cbz	r2, 17f98 <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
   17f68:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   17f6a:	2000      	movs	r0, #0
   17f6c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   17f70:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   17f74:	f240 4202 	movw	r2, #1026	; 0x402
   17f78:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   17f7c:	2202      	movs	r2, #2
   17f7e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   17f82:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   17f84:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   17f86:	2201      	movs	r2, #1
   17f88:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
   17f8c:	2000      	movs	r0, #0
   17f8e:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17f90:	2016      	movs	r0, #22
   17f92:	4770      	bx	lr
   17f94:	2016      	movs	r0, #22
   17f96:	4770      	bx	lr
            rc = EINVAL;
   17f98:	2016      	movs	r0, #22

err:
    return rc;
}
   17f9a:	4770      	bx	lr
   17f9c:	0001f780 	.word	0x0001f780

00017fa0 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17fa0:	2802      	cmp	r0, #2
   17fa2:	dc2a      	bgt.n	17ffa <hal_spi_disable+0x5a>
{
   17fa4:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17fa6:	4b17      	ldr	r3, [pc, #92]	; (18004 <hal_spi_disable+0x64>)
   17fa8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   17fac:	b33c      	cbz	r4, 17ffe <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17fae:	7823      	ldrb	r3, [r4, #0]
   17fb0:	b9ab      	cbnz	r3, 17fde <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   17fb2:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   17fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17fb8:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   17fbc:	7863      	ldrb	r3, [r4, #1]
   17fbe:	b943      	cbnz	r3, 17fd2 <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   17fc0:	2300      	movs	r3, #0
   17fc2:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   17fc6:	2000      	movs	r0, #0
   17fc8:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   17fca:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   17fcc:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   17fce:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   17fd0:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   17fd2:	4628      	mov	r0, r5
   17fd4:	f7ff fea6 	bl	17d24 <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   17fd8:	2300      	movs	r3, #0
   17fda:	7063      	strb	r3, [r4, #1]
   17fdc:	e7f0      	b.n	17fc0 <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   17fde:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   17fe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17fe4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   17fe8:	2300      	movs	r3, #0
   17fea:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   17fee:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   17ff2:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   17ff6:	70e3      	strb	r3, [r4, #3]
   17ff8:	e7e5      	b.n	17fc6 <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17ffa:	2016      	movs	r0, #22
}
   17ffc:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17ffe:	2016      	movs	r0, #22
    return rc;
   18000:	e7e6      	b.n	17fd0 <hal_spi_disable+0x30>
   18002:	bf00      	nop
   18004:	0001f780 	.word	0x0001f780

00018008 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18008:	2802      	cmp	r0, #2
   1800a:	dc1d      	bgt.n	18048 <hal_spi_init+0x40>
{
   1800c:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1800e:	4b13      	ldr	r3, [pc, #76]	; (1805c <hal_spi_init+0x54>)
   18010:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   18014:	b1d4      	cbz	r4, 1804c <hal_spi_init+0x44>
    if (cfg == NULL) {
   18016:	b1d9      	cbz	r1, 18050 <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   18018:	2a01      	cmp	r2, #1
   1801a:	d81b      	bhi.n	18054 <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
   1801c:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
   1801e:	b9d8      	cbnz	r0, 18058 <hal_spi_init+0x50>
   18020:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   18022:	2303      	movs	r3, #3
   18024:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   18026:	b94a      	cbnz	r2, 1803c <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   18028:	4b0d      	ldr	r3, [pc, #52]	; (18060 <hal_spi_init+0x58>)
   1802a:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
   1802c:	f7ff ffb8 	bl	17fa0 <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   18030:	4a0c      	ldr	r2, [pc, #48]	; (18064 <hal_spi_init+0x5c>)
   18032:	4629      	mov	r1, r5
   18034:	4620      	mov	r0, r4
   18036:	f7ff fea5 	bl	17d84 <hal_spi_init_master>
   1803a:	e00c      	b.n	18056 <hal_spi_init+0x4e>
            assert(0);
   1803c:	2300      	movs	r3, #0
   1803e:	461a      	mov	r2, r3
   18040:	4619      	mov	r1, r3
   18042:	4618      	mov	r0, r3
   18044:	f000 f952 	bl	182ec <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18048:	2016      	movs	r0, #22
}
   1804a:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1804c:	2016      	movs	r0, #22
   1804e:	e002      	b.n	18056 <hal_spi_init+0x4e>
    rc = EINVAL;
   18050:	2016      	movs	r0, #22
   18052:	e000      	b.n	18056 <hal_spi_init+0x4e>
   18054:	2016      	movs	r0, #22
}
   18056:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
   18058:	2016      	movs	r0, #22
    return (rc);
   1805a:	e7fc      	b.n	18056 <hal_spi_init+0x4e>
   1805c:	0001f780 	.word	0x0001f780
   18060:	40003000 	.word	0x40003000
   18064:	00017d0d 	.word	0x00017d0d

00018068 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18068:	2802      	cmp	r0, #2
   1806a:	dc0a      	bgt.n	18082 <hal_spi_set_txrx_cb+0x1a>
   1806c:	4b08      	ldr	r3, [pc, #32]	; (18090 <hal_spi_set_txrx_cb+0x28>)
   1806e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   18072:	b143      	cbz	r3, 18086 <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   18074:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   18076:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   1807a:	b930      	cbnz	r0, 1808a <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   1807c:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   1807e:	625a      	str	r2, [r3, #36]	; 0x24
   18080:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18082:	2016      	movs	r0, #22
   18084:	4770      	bx	lr
   18086:	2016      	movs	r0, #22
   18088:	4770      	bx	lr
        rc = -1;
   1808a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
   1808e:	4770      	bx	lr
   18090:	0001f780 	.word	0x0001f780

00018094 <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   18094:	2b00      	cmp	r3, #0
   18096:	d046      	beq.n	18126 <hal_spi_txrx+0x92>
{
   18098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1809a:	460d      	mov	r5, r1
   1809c:	4617      	mov	r7, r2
   1809e:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   180a0:	2802      	cmp	r0, #2
   180a2:	dc42      	bgt.n	1812a <hal_spi_txrx+0x96>
   180a4:	4b25      	ldr	r3, [pc, #148]	; (1813c <hal_spi_txrx+0xa8>)
   180a6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   180aa:	2b00      	cmp	r3, #0
   180ac:	d03f      	beq.n	1812e <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   180ae:	781a      	ldrb	r2, [r3, #0]
   180b0:	2a00      	cmp	r2, #0
   180b2:	d13e      	bne.n	18132 <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   180b4:	2900      	cmp	r1, #0
   180b6:	d03e      	beq.n	18136 <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   180b8:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   180ba:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   180be:	2b07      	cmp	r3, #7
   180c0:	d004      	beq.n	180cc <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   180c2:	b95b      	cbnz	r3, 180dc <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   180c4:	2301      	movs	r3, #1
   180c6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   180ca:	e007      	b.n	180dc <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   180cc:	f7ff ff68 	bl	17fa0 <hal_spi_disable>
   180d0:	e7f8      	b.n	180c4 <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   180d2:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   180d6:	2300      	movs	r3, #0
   180d8:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   180dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   180e0:	2b00      	cmp	r3, #0
   180e2:	d1f6      	bne.n	180d2 <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   180e4:	782b      	ldrb	r3, [r5, #0]
   180e6:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   180ea:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
   180ec:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
   180ee:	2200      	movs	r2, #0
   180f0:	e00d      	b.n	1810e <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   180f2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   180f6:	2b00      	cmp	r3, #0
   180f8:	d0fb      	beq.n	180f2 <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   180fa:	2300      	movs	r3, #0
   180fc:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   18100:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   18104:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   18106:	b10f      	cbz	r7, 1810c <hal_spi_txrx+0x78>
                *rxd = rxval;
   18108:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
   1810c:	3201      	adds	r2, #1
   1810e:	42b2      	cmp	r2, r6
   18110:	da07      	bge.n	18122 <hal_spi_txrx+0x8e>
            if (txcnt) {
   18112:	2900      	cmp	r1, #0
   18114:	d0ed      	beq.n	180f2 <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   18116:	786b      	ldrb	r3, [r5, #1]
   18118:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   1811c:	3901      	subs	r1, #1
                ++txd;
   1811e:	3501      	adds	r5, #1
   18120:	e7e7      	b.n	180f2 <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   18122:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   18124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   18126:	2016      	movs	r0, #22
}
   18128:	4770      	bx	lr
    return rc;
   1812a:	2016      	movs	r0, #22
   1812c:	e7fa      	b.n	18124 <hal_spi_txrx+0x90>
   1812e:	2016      	movs	r0, #22
   18130:	e7f8      	b.n	18124 <hal_spi_txrx+0x90>
   18132:	2016      	movs	r0, #22
   18134:	e7f6      	b.n	18124 <hal_spi_txrx+0x90>
   18136:	2016      	movs	r0, #22
   18138:	e7f4      	b.n	18124 <hal_spi_txrx+0x90>
   1813a:	bf00      	nop
   1813c:	0001f780 	.word	0x0001f780

00018140 <hal_spi_txrx_noblock>:
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18140:	2802      	cmp	r0, #2
   18142:	dc57      	bgt.n	181f4 <hal_spi_txrx_noblock+0xb4>
{
   18144:	b430      	push	{r4, r5}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18146:	4c35      	ldr	r4, [pc, #212]	; (1821c <hal_spi_txrx_noblock+0xdc>)
   18148:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   1814c:	2800      	cmp	r0, #0
   1814e:	d053      	beq.n	181f8 <hal_spi_txrx_noblock+0xb8>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   18150:	6a04      	ldr	r4, [r0, #32]
   18152:	2c00      	cmp	r4, #0
   18154:	d052      	beq.n	181fc <hal_spi_txrx_noblock+0xbc>
   18156:	2b00      	cmp	r3, #0
   18158:	d052      	beq.n	18200 <hal_spi_txrx_noblock+0xc0>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1815a:	7804      	ldrb	r4, [r0, #0]
   1815c:	2c00      	cmp	r4, #0
   1815e:	d137      	bne.n	181d0 <hal_spi_txrx_noblock+0x90>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   18160:	2900      	cmp	r1, #0
   18162:	d050      	beq.n	18206 <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
   18164:	7844      	ldrb	r4, [r0, #1]
   18166:	2c00      	cmp	r4, #0
   18168:	d14f      	bne.n	1820a <hal_spi_txrx_noblock+0xca>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
   1816a:	6904      	ldr	r4, [r0, #16]
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   1816c:	2540      	movs	r5, #64	; 0x40
   1816e:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   18172:	2501      	movs	r5, #1
   18174:	7045      	strb	r5, [r0, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   18176:	f8d4 5500 	ldr.w	r5, [r4, #1280]	; 0x500
   1817a:	2d07      	cmp	r5, #7
   1817c:	d005      	beq.n	1818a <hal_spi_txrx_noblock+0x4a>
            spim->ENABLE = 0;
   1817e:	2500      	movs	r5, #0
   18180:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   18184:	2507      	movs	r5, #7
   18186:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
   1818a:	2500      	movs	r5, #0
   1818c:	80c5      	strh	r5, [r0, #6]
        spi->nhs_buflen = len;
   1818e:	8083      	strh	r3, [r0, #4]
        spi->nhs_txbuf = txbuf;
   18190:	6181      	str	r1, [r0, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
   18192:	2bff      	cmp	r3, #255	; 0xff
   18194:	bfa8      	it	ge
   18196:	23ff      	movge	r3, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
   18198:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   1819c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
   181a0:	61c2      	str	r2, [r0, #28]
        if (rxbuf == NULL) {
   181a2:	b172      	cbz	r2, 181c2 <hal_spi_txrx_noblock+0x82>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
   181a4:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   181a8:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
   181ac:	2000      	movs	r0, #0
   181ae:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   181b2:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        spim->TASKS_START = 1;
   181b6:	2301      	movs	r3, #1
   181b8:	6123      	str	r3, [r4, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   181ba:	2340      	movs	r3, #64	; 0x40
   181bc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   181c0:	e01f      	b.n	18202 <hal_spi_txrx_noblock+0xc2>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   181c2:	3002      	adds	r0, #2
   181c4:	f8c4 0534 	str.w	r0, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   181c8:	2301      	movs	r3, #1
   181ca:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
   181ce:	e7ed      	b.n	181ac <hal_spi_txrx_noblock+0x6c>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   181d0:	b161      	cbz	r1, 181ec <hal_spi_txrx_noblock+0xac>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
   181d2:	2bff      	cmp	r3, #255	; 0xff
   181d4:	dc1c      	bgt.n	18210 <hal_spi_txrx_noblock+0xd0>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   181d6:	78c4      	ldrb	r4, [r0, #3]
   181d8:	b9e4      	cbnz	r4, 18214 <hal_spi_txrx_noblock+0xd4>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
   181da:	61c2      	str	r2, [r0, #28]
        spi->nhs_txbuf = txbuf;
   181dc:	6181      	str	r1, [r0, #24]
        spi->nhs_buflen = len;
   181de:	8083      	strh	r3, [r0, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   181e0:	2301      	movs	r3, #1
   181e2:	70c3      	strb	r3, [r0, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   181e4:	6902      	ldr	r2, [r0, #16]
   181e6:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
   181e8:	2000      	movs	r0, #0
   181ea:	e00a      	b.n	18202 <hal_spi_txrx_noblock+0xc2>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   181ec:	2a00      	cmp	r2, #0
   181ee:	d1f0      	bne.n	181d2 <hal_spi_txrx_noblock+0x92>
    rc = EINVAL;
   181f0:	2016      	movs	r0, #22
   181f2:	e006      	b.n	18202 <hal_spi_txrx_noblock+0xc2>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   181f4:	2016      	movs	r0, #22

err:
    return rc;
}
   181f6:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   181f8:	2016      	movs	r0, #22
   181fa:	e002      	b.n	18202 <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   181fc:	2016      	movs	r0, #22
   181fe:	e000      	b.n	18202 <hal_spi_txrx_noblock+0xc2>
   18200:	2016      	movs	r0, #22
}
   18202:	bc30      	pop	{r4, r5}
   18204:	4770      	bx	lr
    rc = EINVAL;
   18206:	2016      	movs	r0, #22
   18208:	e7fb      	b.n	18202 <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   1820a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1820e:	e7f8      	b.n	18202 <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   18210:	2016      	movs	r0, #22
   18212:	e7f6      	b.n	18202 <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   18214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18218:	e7f3      	b.n	18202 <hal_spi_txrx_noblock+0xc2>
   1821a:	bf00      	nop
   1821c:	0001f780 	.word	0x0001f780

00018220 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   18220:	b508      	push	{r3, lr}
    assert(0);
   18222:	2300      	movs	r3, #0
   18224:	461a      	mov	r2, r3
   18226:	4619      	mov	r1, r3
   18228:	4618      	mov	r0, r3
   1822a:	f000 f85f 	bl	182ec <__assert_func>
	...

00018230 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   18230:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   18232:	4b06      	ldr	r3, [pc, #24]	; (1824c <nrf52_wdt_irq_handler+0x1c>)
   18234:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   18238:	f013 0f01 	tst.w	r3, #1
   1823c:	d100      	bne.n	18240 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   1823e:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   18240:	4b02      	ldr	r3, [pc, #8]	; (1824c <nrf52_wdt_irq_handler+0x1c>)
   18242:	2200      	movs	r2, #0
   18244:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   18248:	f7ff ffea 	bl	18220 <nrf52_hal_wdt_default_handler>
   1824c:	40010000 	.word	0x40010000

00018250 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   18250:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   18252:	4b17      	ldr	r3, [pc, #92]	; (182b0 <hal_watchdog_init+0x60>)
   18254:	2201      	movs	r2, #1
   18256:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   1825a:	4b16      	ldr	r3, [pc, #88]	; (182b4 <hal_watchdog_init+0x64>)
   1825c:	4298      	cmp	r0, r3
   1825e:	d821      	bhi.n	182a4 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   18260:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   18264:	0153      	lsls	r3, r2, #5
   18266:	4a14      	ldr	r2, [pc, #80]	; (182b8 <hal_watchdog_init+0x68>)
   18268:	fba2 2303 	umull	r2, r3, r2, r3
   1826c:	08db      	lsrs	r3, r3, #3
   1826e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   18272:	4b0f      	ldr	r3, [pc, #60]	; (182b0 <hal_watchdog_init+0x60>)
   18274:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   18278:	4a10      	ldr	r2, [pc, #64]	; (182bc <hal_watchdog_init+0x6c>)
   1827a:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1827c:	4910      	ldr	r1, [pc, #64]	; (182c0 <hal_watchdog_init+0x70>)
   1827e:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18282:	4a10      	ldr	r2, [pc, #64]	; (182c4 <hal_watchdog_init+0x74>)
   18284:	21e0      	movs	r1, #224	; 0xe0
   18286:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1828a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1828e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18292:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   18294:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   18298:	f042 0201 	orr.w	r2, r2, #1
   1829c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   182a0:	2000      	movs	r0, #0
   182a2:	bd08      	pop	{r3, pc}
        assert(0);
   182a4:	2300      	movs	r3, #0
   182a6:	461a      	mov	r2, r3
   182a8:	4619      	mov	r1, r3
   182aa:	4618      	mov	r0, r3
   182ac:	f000 f81e 	bl	182ec <__assert_func>
   182b0:	40010000 	.word	0x40010000
   182b4:	02aaaaaa 	.word	0x02aaaaaa
   182b8:	10624dd3 	.word	0x10624dd3
   182bc:	e000ed00 	.word	0xe000ed00
   182c0:	00018231 	.word	0x00018231
   182c4:	e000e100 	.word	0xe000e100

000182c8 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   182c8:	4b02      	ldr	r3, [pc, #8]	; (182d4 <hal_watchdog_enable+0xc>)
   182ca:	2201      	movs	r2, #1
   182cc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   182d0:	601a      	str	r2, [r3, #0]
}
   182d2:	4770      	bx	lr
   182d4:	40010000 	.word	0x40010000

000182d8 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   182d8:	4b02      	ldr	r3, [pc, #8]	; (182e4 <hal_watchdog_tickle+0xc>)
   182da:	4a03      	ldr	r2, [pc, #12]	; (182e8 <hal_watchdog_tickle+0x10>)
   182dc:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   182e0:	4770      	bx	lr
   182e2:	bf00      	nop
   182e4:	40010000 	.word	0x40010000
   182e8:	6e524635 	.word	0x6e524635

000182ec <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   182ec:	b508      	push	{r3, lr}
   182ee:	4675      	mov	r5, lr
   182f0:	4604      	mov	r4, r0
   182f2:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   182f4:	f001 fa90 	bl	19818 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   182f8:	f7ff f905 	bl	17506 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   182fc:	b18c      	cbz	r4, 18322 <__assert_func+0x36>
   182fe:	4633      	mov	r3, r6
   18300:	4622      	mov	r2, r4
   18302:	4629      	mov	r1, r5
   18304:	4809      	ldr	r0, [pc, #36]	; (1832c <__assert_func+0x40>)
   18306:	f7ff f929 	bl	1755c <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
   1830a:	f7ef ff3b 	bl	8184 <hal_debugger_connected>
   1830e:	b100      	cbz	r0, 18312 <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
   18310:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   18312:	4b07      	ldr	r3, [pc, #28]	; (18330 <__assert_func+0x44>)
   18314:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   18318:	605a      	str	r2, [r3, #4]
    asm("isb");
   1831a:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   1831e:	f7ef ff39 	bl	8194 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   18322:	4629      	mov	r1, r5
   18324:	4803      	ldr	r0, [pc, #12]	; (18334 <__assert_func+0x48>)
   18326:	f7ff f919 	bl	1755c <console_printf>
   1832a:	e7ee      	b.n	1830a <__assert_func+0x1e>
   1832c:	0001f79c 	.word	0x0001f79c
   18330:	e000ed00 	.word	0xe000ed00
   18334:	0001f78c 	.word	0x0001f78c

00018338 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   18338:	b500      	push	{lr}
   1833a:	b083      	sub	sp, #12
   1833c:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   1833e:	f7ff f8e2 	bl	17506 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   18342:	4d1b      	ldr	r5, [pc, #108]	; (183b0 <os_default_irq+0x78>)
   18344:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   18346:	6822      	ldr	r2, [r4, #0]
   18348:	f3c1 0108 	ubfx	r1, r1, #0, #9
   1834c:	4819      	ldr	r0, [pc, #100]	; (183b4 <os_default_irq+0x7c>)
   1834e:	f7ff f905 	bl	1755c <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   18352:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   18354:	6883      	ldr	r3, [r0, #8]
   18356:	6842      	ldr	r2, [r0, #4]
   18358:	6801      	ldr	r1, [r0, #0]
   1835a:	68c0      	ldr	r0, [r0, #12]
   1835c:	9000      	str	r0, [sp, #0]
   1835e:	4816      	ldr	r0, [pc, #88]	; (183b8 <os_default_irq+0x80>)
   18360:	f7ff f8fc 	bl	1755c <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   18364:	6923      	ldr	r3, [r4, #16]
   18366:	9300      	str	r3, [sp, #0]
   18368:	68e3      	ldr	r3, [r4, #12]
   1836a:	68a2      	ldr	r2, [r4, #8]
   1836c:	6861      	ldr	r1, [r4, #4]
   1836e:	4813      	ldr	r0, [pc, #76]	; (183bc <os_default_irq+0x84>)
   18370:	f7ff f8f4 	bl	1755c <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   18374:	6a23      	ldr	r3, [r4, #32]
   18376:	9300      	str	r3, [sp, #0]
   18378:	69e3      	ldr	r3, [r4, #28]
   1837a:	69a2      	ldr	r2, [r4, #24]
   1837c:	6961      	ldr	r1, [r4, #20]
   1837e:	4810      	ldr	r0, [pc, #64]	; (183c0 <os_default_irq+0x88>)
   18380:	f7ff f8ec 	bl	1755c <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   18384:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   18386:	6983      	ldr	r3, [r0, #24]
   18388:	6942      	ldr	r2, [r0, #20]
   1838a:	6901      	ldr	r1, [r0, #16]
   1838c:	69c0      	ldr	r0, [r0, #28]
   1838e:	9000      	str	r0, [sp, #0]
   18390:	480c      	ldr	r0, [pc, #48]	; (183c4 <os_default_irq+0x8c>)
   18392:	f7ff f8e3 	bl	1755c <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   18396:	6869      	ldr	r1, [r5, #4]
   18398:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   1839a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1839c:	480a      	ldr	r0, [pc, #40]	; (183c8 <os_default_irq+0x90>)
   1839e:	f7ff f8dd 	bl	1755c <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   183a2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   183a4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   183a6:	4809      	ldr	r0, [pc, #36]	; (183cc <os_default_irq+0x94>)
   183a8:	f7ff f8d8 	bl	1755c <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   183ac:	f7ef fef2 	bl	8194 <hal_system_reset>
   183b0:	e000ed00 	.word	0xe000ed00
   183b4:	0001f7b4 	.word	0x0001f7b4
   183b8:	0001f7e8 	.word	0x0001f7e8
   183bc:	0001f81c 	.word	0x0001f81c
   183c0:	0001f850 	.word	0x0001f850
   183c4:	0001f884 	.word	0x0001f884
   183c8:	0001f8b8 	.word	0x0001f8b8
   183cc:	0001f8e0 	.word	0x0001f8e0

000183d0 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   183d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
   183d2:	f7ff ff81 	bl	182d8 <hal_watchdog_tickle>
    sanity_last = 0;
   183d6:	2500      	movs	r5, #0
   183d8:	e00b      	b.n	183f2 <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   183da:	f000 fec7 	bl	1916c <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   183de:	f7ff ff7b 	bl	182d8 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
   183e2:	4625      	mov	r5, r4
   183e4:	e011      	b.n	1840a <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   183e6:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   183e8:	f002 f842 	bl	1a470 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   183ec:	4638      	mov	r0, r7
   183ee:	f001 fa19 	bl	19824 <os_arch_restore_sr>
        ++g_os_idle_ctr;
   183f2:	4a14      	ldr	r2, [pc, #80]	; (18444 <os_idle_task+0x74>)
   183f4:	6813      	ldr	r3, [r2, #0]
   183f6:	3301      	adds	r3, #1
   183f8:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   183fa:	f001 f995 	bl	19728 <os_time_get>
   183fe:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
   18400:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   18404:	1ac3      	subs	r3, r0, r3
   18406:	2b00      	cmp	r3, #0
   18408:	dce7      	bgt.n	183da <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   1840a:	f001 fa05 	bl	19818 <os_arch_save_sr>
   1840e:	4607      	mov	r7, r0
        now = os_time_get();
   18410:	f001 f98a 	bl	19728 <os_time_get>
   18414:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
   18416:	f000 ffd7 	bl	193c8 <os_sched_wakeup_ticks>
   1841a:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   1841c:	4630      	mov	r0, r6
   1841e:	f000 f975 	bl	1870c <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   18422:	42a0      	cmp	r0, r4
   18424:	bf28      	it	cs
   18426:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
   18428:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   1842c:	1b9b      	subs	r3, r3, r6
   1842e:	4298      	cmp	r0, r3
   18430:	bf28      	it	cs
   18432:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
   18434:	280b      	cmp	r0, #11
   18436:	d9d6      	bls.n	183e6 <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
   18438:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   1843c:	d9d4      	bls.n	183e8 <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
   1843e:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   18442:	e7d1      	b.n	183e8 <os_idle_task+0x18>
   18444:	2000de8c 	.word	0x2000de8c

00018448 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   18448:	b508      	push	{r3, lr}
   1844a:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   1844c:	2100      	movs	r1, #0
   1844e:	4608      	mov	r0, r1
   18450:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   18452:	2300      	movs	r3, #0
   18454:	461a      	mov	r2, r3
   18456:	4619      	mov	r1, r3
   18458:	4618      	mov	r0, r3
   1845a:	f7ff ff47 	bl	182ec <__assert_func>
	...

00018460 <os_started>:
}
   18460:	4b01      	ldr	r3, [pc, #4]	; (18468 <os_started+0x8>)
   18462:	6818      	ldr	r0, [r3, #0]
   18464:	4770      	bx	lr
   18466:	bf00      	nop
   18468:	2000de88 	.word	0x2000de88

0001846c <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   1846c:	b500      	push	{lr}
   1846e:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   18470:	2340      	movs	r3, #64	; 0x40
   18472:	9303      	str	r3, [sp, #12]
   18474:	4b15      	ldr	r3, [pc, #84]	; (184cc <os_init_idle_task+0x60>)
   18476:	9302      	str	r3, [sp, #8]
   18478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1847c:	9301      	str	r3, [sp, #4]
   1847e:	23ff      	movs	r3, #255	; 0xff
   18480:	9300      	str	r3, [sp, #0]
   18482:	2300      	movs	r3, #0
   18484:	4a12      	ldr	r2, [pc, #72]	; (184d0 <os_init_idle_task+0x64>)
   18486:	4913      	ldr	r1, [pc, #76]	; (184d4 <os_init_idle_task+0x68>)
   18488:	4813      	ldr	r0, [pc, #76]	; (184d8 <os_init_idle_task+0x6c>)
   1848a:	f001 f88d 	bl	195a8 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   1848e:	b950      	cbnz	r0, 184a6 <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   18490:	f000 fea2 	bl	191d8 <os_sanity_init>
    assert(rc == 0);
   18494:	b968      	cbnz	r0, 184b2 <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   18496:	f247 5030 	movw	r0, #30000	; 0x7530
   1849a:	f7ff fed9 	bl	18250 <hal_watchdog_init>
    assert(rc == 0);
   1849e:	b970      	cbnz	r0, 184be <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
   184a0:	b005      	add	sp, #20
   184a2:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   184a6:	2300      	movs	r3, #0
   184a8:	461a      	mov	r2, r3
   184aa:	4619      	mov	r1, r3
   184ac:	4618      	mov	r0, r3
   184ae:	f7ff ff1d 	bl	182ec <__assert_func>
    assert(rc == 0);
   184b2:	2300      	movs	r3, #0
   184b4:	461a      	mov	r2, r3
   184b6:	4619      	mov	r1, r3
   184b8:	4618      	mov	r0, r3
   184ba:	f7ff ff17 	bl	182ec <__assert_func>
    assert(rc == 0);
   184be:	2300      	movs	r3, #0
   184c0:	461a      	mov	r2, r3
   184c2:	4619      	mov	r1, r3
   184c4:	4618      	mov	r0, r3
   184c6:	f7ff ff11 	bl	182ec <__assert_func>
   184ca:	bf00      	nop
   184cc:	20006f70 	.word	0x20006f70
   184d0:	000183d1 	.word	0x000183d1
   184d4:	0001f904 	.word	0x0001f904
   184d8:	2000dde8 	.word	0x2000dde8

000184dc <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   184dc:	b510      	push	{r4, lr}
   184de:	b084      	sub	sp, #16
   184e0:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   184e2:	4b24      	ldr	r3, [pc, #144]	; (18574 <os_init+0x98>)
   184e4:	2200      	movs	r2, #0
   184e6:	601a      	str	r2, [r3, #0]
   184e8:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   184ea:	4b23      	ldr	r3, [pc, #140]	; (18578 <os_init+0x9c>)
   184ec:	601a      	str	r2, [r3, #0]
   184ee:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   184f0:	f000 faba 	bl	18a68 <os_eventq_dflt_get>
   184f4:	f000 fa0e 	bl	18914 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   184f8:	f000 fa04 	bl	18904 <os_dev_reset>

    err = os_arch_os_init();
   184fc:	f001 f9c6 	bl	1988c <os_arch_os_init>
    assert(err == OS_OK);
   18500:	bb00      	cbnz	r0, 18544 <os_init+0x68>

    if (main_fn) {
   18502:	b18c      	cbz	r4, 18528 <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   18504:	f44f 6300 	mov.w	r3, #2048	; 0x800
   18508:	9303      	str	r3, [sp, #12]
   1850a:	4b1c      	ldr	r3, [pc, #112]	; (1857c <os_init+0xa0>)
   1850c:	9302      	str	r3, [sp, #8]
   1850e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18512:	9301      	str	r3, [sp, #4]
   18514:	237f      	movs	r3, #127	; 0x7f
   18516:	9300      	str	r3, [sp, #0]
   18518:	4623      	mov	r3, r4
   1851a:	4a19      	ldr	r2, [pc, #100]	; (18580 <os_init+0xa4>)
   1851c:	4919      	ldr	r1, [pc, #100]	; (18584 <os_init+0xa8>)
   1851e:	481a      	ldr	r0, [pc, #104]	; (18588 <os_init+0xac>)
   18520:	f001 f842 	bl	195a8 <os_task_init>
   18524:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   18526:	b998      	cbnz	r0, 18550 <os_init+0x74>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   18528:	f001 fe72 	bl	1a210 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   1852c:	2001      	movs	r0, #1
   1852e:	f000 f985 	bl	1883c <os_dev_initialize_all>
   18532:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   18534:	b990      	cbnz	r0, 1855c <os_init+0x80>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   18536:	2002      	movs	r0, #2
   18538:	f000 f980 	bl	1883c <os_dev_initialize_all>
   1853c:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1853e:	b998      	cbnz	r0, 18568 <os_init+0x8c>
}
   18540:	b004      	add	sp, #16
   18542:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   18544:	2300      	movs	r3, #0
   18546:	461a      	mov	r2, r3
   18548:	4619      	mov	r1, r3
   1854a:	4618      	mov	r0, r3
   1854c:	f7ff fece 	bl	182ec <__assert_func>
        assert(err == 0);
   18550:	2300      	movs	r3, #0
   18552:	461a      	mov	r2, r3
   18554:	4619      	mov	r1, r3
   18556:	4618      	mov	r0, r3
   18558:	f7ff fec8 	bl	182ec <__assert_func>
    assert(err == OS_OK);
   1855c:	2300      	movs	r3, #0
   1855e:	461a      	mov	r2, r3
   18560:	4619      	mov	r1, r3
   18562:	4618      	mov	r0, r3
   18564:	f7ff fec2 	bl	182ec <__assert_func>
    assert(err == OS_OK);
   18568:	2300      	movs	r3, #0
   1856a:	461a      	mov	r2, r3
   1856c:	4619      	mov	r1, r3
   1856e:	4618      	mov	r0, r3
   18570:	f7ff febc 	bl	182ec <__assert_func>
   18574:	2000de90 	.word	0x2000de90
   18578:	2000deb8 	.word	0x2000deb8
   1857c:	20007070 	.word	0x20007070
   18580:	00018449 	.word	0x00018449
   18584:	0001f8fc 	.word	0x0001f8fc
   18588:	2000de38 	.word	0x2000de38

0001858c <os_start>:

void
os_start(void)
{
   1858c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   1858e:	f7ff fe9b 	bl	182c8 <hal_watchdog_enable>

    err = os_arch_os_start();
   18592:	f001 f9db 	bl	1994c <os_arch_os_start>
    assert(err == OS_OK);
   18596:	b900      	cbnz	r0, 1859a <os_start+0xe>
#else
    assert(0);
#endif
}
   18598:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   1859a:	2300      	movs	r3, #0
   1859c:	461a      	mov	r2, r3
   1859e:	4619      	mov	r1, r3
   185a0:	4618      	mov	r0, r3
   185a2:	f7ff fea3 	bl	182ec <__assert_func>
	...

000185a8 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   185a8:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   185aa:	4b0c      	ldr	r3, [pc, #48]	; (185dc <os_pkg_init+0x34>)
   185ac:	781b      	ldrb	r3, [r3, #0]
   185ae:	b14b      	cbz	r3, 185c4 <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   185b0:	2003      	movs	r0, #3
   185b2:	f000 f943 	bl	1883c <os_dev_initialize_all>
   185b6:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   185b8:	b948      	cbnz	r0, 185ce <os_pkg_init+0x26>

    os_mempool_module_init();
   185ba:	f000 fc25 	bl	18e08 <os_mempool_module_init>
    os_msys_init();
   185be:	f000 fcad 	bl	18f1c <os_msys_init>
}
   185c2:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   185c4:	461a      	mov	r2, r3
   185c6:	4619      	mov	r1, r3
   185c8:	4618      	mov	r0, r3
   185ca:	f7ff fe8f 	bl	182ec <__assert_func>
    assert(err == OS_OK);
   185ce:	2300      	movs	r3, #0
   185d0:	461a      	mov	r2, r3
   185d2:	4619      	mov	r1, r3
   185d4:	4618      	mov	r0, r3
   185d6:	f7ff fe89 	bl	182ec <__assert_func>
   185da:	bf00      	nop
   185dc:	2000ddbc 	.word	0x2000ddbc

000185e0 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   185e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   185e2:	4604      	mov	r4, r0
   185e4:	460d      	mov	r5, r1
   185e6:	4617      	mov	r7, r2
   185e8:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   185ea:	2220      	movs	r2, #32
   185ec:	2100      	movs	r1, #0
   185ee:	f001 fa80 	bl	19af2 <memset>
    c->c_ev.ev_cb = ev_cb;
   185f2:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   185f4:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   185f6:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   185f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000185fc <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   185fc:	b538      	push	{r3, r4, r5, lr}
   185fe:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   18600:	f001 f90a 	bl	19818 <os_arch_save_sr>
   18604:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   18606:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   18608:	b13b      	cbz	r3, 1861a <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   1860a:	69a2      	ldr	r2, [r4, #24]
   1860c:	b172      	cbz	r2, 1862c <os_callout_stop+0x30>
   1860e:	61d3      	str	r3, [r2, #28]
   18610:	69e3      	ldr	r3, [r4, #28]
   18612:	69a2      	ldr	r2, [r4, #24]
   18614:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   18616:	2300      	movs	r3, #0
   18618:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   1861a:	6920      	ldr	r0, [r4, #16]
   1861c:	b110      	cbz	r0, 18624 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   1861e:	4621      	mov	r1, r4
   18620:	f000 fa02 	bl	18a28 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   18624:	4628      	mov	r0, r5
   18626:	f001 f8fd 	bl	19824 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   1862a:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   1862c:	4a01      	ldr	r2, [pc, #4]	; (18634 <os_callout_stop+0x38>)
   1862e:	6053      	str	r3, [r2, #4]
   18630:	e7ee      	b.n	18610 <os_callout_stop+0x14>
   18632:	bf00      	nop
   18634:	2000de90 	.word	0x2000de90

00018638 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   18638:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   1863a:	6903      	ldr	r3, [r0, #16]
   1863c:	b1c3      	cbz	r3, 18670 <os_callout_reset+0x38>
   1863e:	4605      	mov	r5, r0
   18640:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   18642:	2900      	cmp	r1, #0
   18644:	db2f      	blt.n	186a6 <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   18646:	f001 f8e7 	bl	19818 <os_arch_save_sr>
   1864a:	4606      	mov	r6, r0

    os_callout_stop(c);
   1864c:	4628      	mov	r0, r5
   1864e:	f7ff ffd5 	bl	185fc <os_callout_stop>

    if (ticks == 0) {
   18652:	b904      	cbnz	r4, 18656 <os_callout_reset+0x1e>
        ticks = 1;
   18654:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
   18656:	f001 f867 	bl	19728 <os_time_get>
   1865a:	4420      	add	r0, r4
   1865c:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   1865e:	4b13      	ldr	r3, [pc, #76]	; (186ac <os_callout_reset+0x74>)
   18660:	681b      	ldr	r3, [r3, #0]
   18662:	b153      	cbz	r3, 1867a <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   18664:	695a      	ldr	r2, [r3, #20]
   18666:	1a82      	subs	r2, r0, r2
   18668:	2a00      	cmp	r2, #0
   1866a:	db06      	blt.n	1867a <os_callout_reset+0x42>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   1866c:	699b      	ldr	r3, [r3, #24]
   1866e:	e7f8      	b.n	18662 <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   18670:	461a      	mov	r2, r3
   18672:	4619      	mov	r1, r3
   18674:	4618      	mov	r0, r3
   18676:	f7ff fe39 	bl	182ec <__assert_func>
            break;
        }
    }

    if (entry) {
   1867a:	b15b      	cbz	r3, 18694 <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   1867c:	69da      	ldr	r2, [r3, #28]
   1867e:	61ea      	str	r2, [r5, #28]
   18680:	61ab      	str	r3, [r5, #24]
   18682:	69da      	ldr	r2, [r3, #28]
   18684:	6015      	str	r5, [r2, #0]
   18686:	3518      	adds	r5, #24
   18688:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   1868a:	4630      	mov	r0, r6
   1868c:	f001 f8ca 	bl	19824 <os_arch_restore_sr>

    ret = OS_OK;
   18690:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   18692:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   18694:	2300      	movs	r3, #0
   18696:	61ab      	str	r3, [r5, #24]
   18698:	4b04      	ldr	r3, [pc, #16]	; (186ac <os_callout_reset+0x74>)
   1869a:	685a      	ldr	r2, [r3, #4]
   1869c:	61ea      	str	r2, [r5, #28]
   1869e:	6015      	str	r5, [r2, #0]
   186a0:	3518      	adds	r5, #24
   186a2:	605d      	str	r5, [r3, #4]
   186a4:	e7f1      	b.n	1868a <os_callout_reset+0x52>
        ret = OS_EINVAL;
   186a6:	2002      	movs	r0, #2
    return ret;
   186a8:	e7f3      	b.n	18692 <os_callout_reset+0x5a>
   186aa:	bf00      	nop
   186ac:	2000de90 	.word	0x2000de90

000186b0 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   186b0:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   186b2:	f001 f839 	bl	19728 <os_time_get>
   186b6:	4605      	mov	r5, r0
   186b8:	e00f      	b.n	186da <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   186ba:	69e2      	ldr	r2, [r4, #28]
   186bc:	4b12      	ldr	r3, [pc, #72]	; (18708 <os_callout_tick+0x58>)
   186be:	605a      	str	r2, [r3, #4]
   186c0:	69e3      	ldr	r3, [r4, #28]
   186c2:	69a2      	ldr	r2, [r4, #24]
   186c4:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   186c6:	2300      	movs	r3, #0
   186c8:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   186ca:	f001 f8ab 	bl	19824 <os_arch_restore_sr>

        if (c) {
   186ce:	b1d4      	cbz	r4, 18706 <os_callout_tick+0x56>
            if (c->c_evq) {
   186d0:	6920      	ldr	r0, [r4, #16]
   186d2:	b9a0      	cbnz	r0, 186fe <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   186d4:	6863      	ldr	r3, [r4, #4]
   186d6:	4620      	mov	r0, r4
   186d8:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
   186da:	f001 f89d 	bl	19818 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   186de:	4b0a      	ldr	r3, [pc, #40]	; (18708 <os_callout_tick+0x58>)
   186e0:	681c      	ldr	r4, [r3, #0]
        if (c) {
   186e2:	2c00      	cmp	r4, #0
   186e4:	d0f1      	beq.n	186ca <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   186e6:	6963      	ldr	r3, [r4, #20]
   186e8:	1aeb      	subs	r3, r5, r3
   186ea:	2b00      	cmp	r3, #0
   186ec:	db05      	blt.n	186fa <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   186ee:	69a3      	ldr	r3, [r4, #24]
   186f0:	2b00      	cmp	r3, #0
   186f2:	d0e2      	beq.n	186ba <os_callout_tick+0xa>
   186f4:	69e2      	ldr	r2, [r4, #28]
   186f6:	61da      	str	r2, [r3, #28]
   186f8:	e7e2      	b.n	186c0 <os_callout_tick+0x10>
                c = NULL;
   186fa:	2400      	movs	r4, #0
   186fc:	e7e5      	b.n	186ca <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
   186fe:	4621      	mov	r1, r4
   18700:	f000 f915 	bl	1892e <os_eventq_put>
   18704:	e7e9      	b.n	186da <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   18706:	bd38      	pop	{r3, r4, r5, pc}
   18708:	2000de90 	.word	0x2000de90

0001870c <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   1870c:	b510      	push	{r4, lr}
   1870e:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   18710:	f001 f88b 	bl	1982a <os_arch_in_critical>
   18714:	b130      	cbz	r0, 18724 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   18716:	4b09      	ldr	r3, [pc, #36]	; (1873c <os_callout_wakeup_ticks+0x30>)
   18718:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   1871a:	b15b      	cbz	r3, 18734 <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   1871c:	6958      	ldr	r0, [r3, #20]
   1871e:	1b00      	subs	r0, r0, r4
   18720:	d406      	bmi.n	18730 <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   18722:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   18724:	2300      	movs	r3, #0
   18726:	461a      	mov	r2, r3
   18728:	4619      	mov	r1, r3
   1872a:	4618      	mov	r0, r3
   1872c:	f7ff fdde 	bl	182ec <__assert_func>
            rt = 0;     /* callout time is in the past */
   18730:	2000      	movs	r0, #0
   18732:	e7f6      	b.n	18722 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   18734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   18738:	e7f3      	b.n	18722 <os_callout_wakeup_ticks+0x16>
   1873a:	bf00      	nop
   1873c:	2000de90 	.word	0x2000de90

00018740 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   18740:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   18742:	4601      	mov	r1, r0
   18744:	2000      	movs	r0, #0
   18746:	f002 f84d 	bl	1a7e4 <hal_timer_config>
    return rc;
}
   1874a:	bd08      	pop	{r3, pc}

0001874c <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
   1874c:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   1874e:	2000      	movs	r0, #0
   18750:	f002 f8c4 	bl	1a8dc <hal_timer_read>
    return cpu_time;
}
   18754:	bd08      	pop	{r3, pc}
	...

00018758 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   18758:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   1875a:	4b15      	ldr	r3, [pc, #84]	; (187b0 <os_dev_add+0x58>)
   1875c:	681d      	ldr	r5, [r3, #0]
   1875e:	b115      	cbz	r5, 18766 <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   18760:	462b      	mov	r3, r5
    prev_dev = NULL;
   18762:	2400      	movs	r4, #0
   18764:	e008      	b.n	18778 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   18766:	4603      	mov	r3, r0
   18768:	f843 5f20 	str.w	r5, [r3, #32]!
   1876c:	4a10      	ldr	r2, [pc, #64]	; (187b0 <os_dev_add+0x58>)
   1876e:	6053      	str	r3, [r2, #4]
   18770:	6010      	str	r0, [r2, #0]
        return (0);
   18772:	e010      	b.n	18796 <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   18774:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   18776:	6a1b      	ldr	r3, [r3, #32]
   18778:	b143      	cbz	r3, 1878c <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
   1877a:	7e01      	ldrb	r1, [r0, #24]
   1877c:	7e1a      	ldrb	r2, [r3, #24]
   1877e:	4291      	cmp	r1, r2
   18780:	d304      	bcc.n	1878c <os_dev_add+0x34>
   18782:	d1f7      	bne.n	18774 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
   18784:	7e41      	ldrb	r1, [r0, #25]
   18786:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
   18788:	4291      	cmp	r1, r2
   1878a:	d2f3      	bcs.n	18774 <os_dev_add+0x1c>
    }

    if (prev_dev) {
   1878c:	b15c      	cbz	r4, 187a6 <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   1878e:	6a23      	ldr	r3, [r4, #32]
   18790:	6203      	str	r3, [r0, #32]
   18792:	b11b      	cbz	r3, 1879c <os_dev_add+0x44>
   18794:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   18796:	2000      	movs	r0, #0
   18798:	bc30      	pop	{r4, r5}
   1879a:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   1879c:	f100 0320 	add.w	r3, r0, #32
   187a0:	4a03      	ldr	r2, [pc, #12]	; (187b0 <os_dev_add+0x58>)
   187a2:	6053      	str	r3, [r2, #4]
   187a4:	e7f6      	b.n	18794 <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   187a6:	6205      	str	r5, [r0, #32]
   187a8:	4b01      	ldr	r3, [pc, #4]	; (187b0 <os_dev_add+0x58>)
   187aa:	6018      	str	r0, [r3, #0]
   187ac:	e7f3      	b.n	18796 <os_dev_add+0x3e>
   187ae:	bf00      	nop
   187b0:	20009070 	.word	0x20009070

000187b4 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   187b4:	b510      	push	{r4, lr}
   187b6:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   187b8:	6903      	ldr	r3, [r0, #16]
   187ba:	6941      	ldr	r1, [r0, #20]
   187bc:	4798      	blx	r3
    if (rc != 0) {
   187be:	4603      	mov	r3, r0
   187c0:	b128      	cbz	r0, 187ce <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   187c2:	7ee2      	ldrb	r2, [r4, #27]
   187c4:	f012 0f08 	tst.w	r2, #8
   187c8:	d105      	bne.n	187d6 <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   187ca:	2300      	movs	r3, #0
   187cc:	e003      	b.n	187d6 <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   187ce:	7ee2      	ldrb	r2, [r4, #27]
   187d0:	f042 0201 	orr.w	r2, r2, #1
   187d4:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
   187d6:	4618      	mov	r0, r3
   187d8:	bd10      	pop	{r4, pc}

000187da <os_dev_init>:
    dev->od_name = name;
   187da:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   187dc:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   187de:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   187e0:	2300      	movs	r3, #0
   187e2:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
   187e4:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
   187e6:	9a00      	ldr	r2, [sp, #0]
   187e8:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
   187ea:	9a01      	ldr	r2, [sp, #4]
   187ec:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   187ee:	6003      	str	r3, [r0, #0]
   187f0:	6043      	str	r3, [r0, #4]
   187f2:	6083      	str	r3, [r0, #8]
   187f4:	60c3      	str	r3, [r0, #12]
}
   187f6:	4618      	mov	r0, r3
   187f8:	4770      	bx	lr
	...

000187fc <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   187fc:	b530      	push	{r4, r5, lr}
   187fe:	b083      	sub	sp, #12
   18800:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   18802:	9c07      	ldr	r4, [sp, #28]
   18804:	9401      	str	r4, [sp, #4]
   18806:	9c06      	ldr	r4, [sp, #24]
   18808:	9400      	str	r4, [sp, #0]
   1880a:	f7ff ffe6 	bl	187da <os_dev_init>
    if (rc != 0) {
   1880e:	4603      	mov	r3, r0
   18810:	b110      	cbz	r0, 18818 <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   18812:	4618      	mov	r0, r3
   18814:	b003      	add	sp, #12
   18816:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   18818:	4628      	mov	r0, r5
   1881a:	f7ff ff9d 	bl	18758 <os_dev_add>
    if (rc != 0) {
   1881e:	4603      	mov	r3, r0
   18820:	2800      	cmp	r0, #0
   18822:	d1f6      	bne.n	18812 <os_dev_create+0x16>
    if (g_os_started) {
   18824:	4a04      	ldr	r2, [pc, #16]	; (18838 <os_dev_create+0x3c>)
   18826:	6812      	ldr	r2, [r2, #0]
   18828:	2a00      	cmp	r2, #0
   1882a:	d0f2      	beq.n	18812 <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
   1882c:	4628      	mov	r0, r5
   1882e:	f7ff ffc1 	bl	187b4 <os_dev_initialize>
   18832:	4603      	mov	r3, r0
    return (rc);
   18834:	e7ed      	b.n	18812 <os_dev_create+0x16>
   18836:	bf00      	nop
   18838:	2000de88 	.word	0x2000de88

0001883c <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   1883c:	b538      	push	{r3, r4, r5, lr}
   1883e:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   18840:	4b08      	ldr	r3, [pc, #32]	; (18864 <os_dev_initialize_all+0x28>)
   18842:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   18844:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   18846:	e000      	b.n	1884a <os_dev_initialize_all+0xe>
   18848:	6a24      	ldr	r4, [r4, #32]
   1884a:	b144      	cbz	r4, 1885e <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   1884c:	7e23      	ldrb	r3, [r4, #24]
   1884e:	42ab      	cmp	r3, r5
   18850:	d1fa      	bne.n	18848 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   18852:	4620      	mov	r0, r4
   18854:	f7ff ffae 	bl	187b4 <os_dev_initialize>
            if (rc) {
   18858:	4602      	mov	r2, r0
   1885a:	2800      	cmp	r0, #0
   1885c:	d0f4      	beq.n	18848 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   1885e:	4610      	mov	r0, r2
   18860:	bd38      	pop	{r3, r4, r5, pc}
   18862:	bf00      	nop
   18864:	20009070 	.word	0x20009070

00018868 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   18868:	b538      	push	{r3, r4, r5, lr}
   1886a:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1886c:	4b05      	ldr	r3, [pc, #20]	; (18884 <os_dev_lookup+0x1c>)
   1886e:	681c      	ldr	r4, [r3, #0]
   18870:	b134      	cbz	r4, 18880 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   18872:	4629      	mov	r1, r5
   18874:	69e0      	ldr	r0, [r4, #28]
   18876:	f001 f958 	bl	19b2a <strcmp>
   1887a:	b108      	cbz	r0, 18880 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1887c:	6a24      	ldr	r4, [r4, #32]
   1887e:	e7f7      	b.n	18870 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   18880:	4620      	mov	r0, r4
   18882:	bd38      	pop	{r3, r4, r5, pc}
   18884:	20009070 	.word	0x20009070

00018888 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   18888:	b570      	push	{r4, r5, r6, lr}
   1888a:	460d      	mov	r5, r1
   1888c:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   1888e:	f7ff ffeb 	bl	18868 <os_dev_lookup>
    if (dev == NULL) {
   18892:	4604      	mov	r4, r0
   18894:	b1a0      	cbz	r0, 188c0 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   18896:	7ec3      	ldrb	r3, [r0, #27]
   18898:	f013 0f01 	tst.w	r3, #1
   1889c:	d012      	beq.n	188c4 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   1889e:	6803      	ldr	r3, [r0, #0]
   188a0:	b11b      	cbz	r3, 188aa <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   188a2:	4632      	mov	r2, r6
   188a4:	4629      	mov	r1, r5
   188a6:	4798      	blx	r3
        if (rc != 0) {
   188a8:	b970      	cbnz	r0, 188c8 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   188aa:	f000 ffb5 	bl	19818 <os_arch_save_sr>
    ++dev->od_open_ref;
   188ae:	7ea3      	ldrb	r3, [r4, #26]
   188b0:	3301      	adds	r3, #1
   188b2:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   188b4:	7ee3      	ldrb	r3, [r4, #27]
   188b6:	f043 0302 	orr.w	r3, r3, #2
   188ba:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   188bc:	f000 ffb2 	bl	19824 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   188c0:	4620      	mov	r0, r4
   188c2:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   188c4:	2400      	movs	r4, #0
   188c6:	e7fb      	b.n	188c0 <os_dev_open+0x38>
    return (NULL);
   188c8:	2400      	movs	r4, #0
   188ca:	e7f9      	b.n	188c0 <os_dev_open+0x38>

000188cc <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev == NULL) {
   188cc:	b1b0      	cbz	r0, 188fc <os_dev_close+0x30>
{
   188ce:	b510      	push	{r4, lr}
   188d0:	4604      	mov	r4, r0
        rc = OS_EINVAL;
        goto err;
    }

    if (dev->od_handlers.od_close) {
   188d2:	68c3      	ldr	r3, [r0, #12]
   188d4:	b113      	cbz	r3, 188dc <os_dev_close+0x10>
        rc = dev->od_handlers.od_close(dev);
   188d6:	4798      	blx	r3
        if (rc != 0) {
   188d8:	4603      	mov	r3, r0
   188da:	b968      	cbnz	r0, 188f8 <os_dev_close+0x2c>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   188dc:	f000 ff9c 	bl	19818 <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
   188e0:	7ea3      	ldrb	r3, [r4, #26]
   188e2:	3b01      	subs	r3, #1
   188e4:	b2db      	uxtb	r3, r3
   188e6:	76a3      	strb	r3, [r4, #26]
   188e8:	b91b      	cbnz	r3, 188f2 <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
   188ea:	7ee3      	ldrb	r3, [r4, #27]
   188ec:	f023 0306 	bic.w	r3, r3, #6
   188f0:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
   188f2:	f000 ff97 	bl	19824 <os_arch_restore_sr>

    return (0);
   188f6:	2300      	movs	r3, #0
err:
    return (rc);
}
   188f8:	4618      	mov	r0, r3
   188fa:	bd10      	pop	{r4, pc}
        rc = OS_EINVAL;
   188fc:	2302      	movs	r3, #2
}
   188fe:	4618      	mov	r0, r3
   18900:	4770      	bx	lr
	...

00018904 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   18904:	4b02      	ldr	r3, [pc, #8]	; (18910 <os_dev_reset+0xc>)
   18906:	2200      	movs	r2, #0
   18908:	601a      	str	r2, [r3, #0]
   1890a:	605b      	str	r3, [r3, #4]
}
   1890c:	4770      	bx	lr
   1890e:	bf00      	nop
   18910:	20009070 	.word	0x20009070

00018914 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   18914:	2200      	movs	r2, #0
   18916:	6002      	str	r2, [r0, #0]
   18918:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   1891a:	4603      	mov	r3, r0
   1891c:	f843 2f08 	str.w	r2, [r3, #8]!
   18920:	60c3      	str	r3, [r0, #12]
}
   18922:	4770      	bx	lr

00018924 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   18924:	68c0      	ldr	r0, [r0, #12]
}
   18926:	3000      	adds	r0, #0
   18928:	bf18      	it	ne
   1892a:	2001      	movne	r0, #1
   1892c:	4770      	bx	lr

0001892e <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   1892e:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   18930:	b1f0      	cbz	r0, 18970 <os_eventq_put+0x42>
   18932:	460c      	mov	r4, r1
   18934:	4605      	mov	r5, r0
   18936:	f7ff fff5 	bl	18924 <os_eventq_inited>
   1893a:	b1c8      	cbz	r0, 18970 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   1893c:	f000 ff6c 	bl	19818 <os_arch_save_sr>
   18940:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   18942:	7823      	ldrb	r3, [r4, #0]
   18944:	b9d3      	cbnz	r3, 1897c <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   18946:	2301      	movs	r3, #1
   18948:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   1894a:	2300      	movs	r3, #0
   1894c:	60e3      	str	r3, [r4, #12]
   1894e:	68eb      	ldr	r3, [r5, #12]
   18950:	601c      	str	r4, [r3, #0]
   18952:	340c      	adds	r4, #12
   18954:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
   18956:	6868      	ldr	r0, [r5, #4]
   18958:	b1b8      	cbz	r0, 1898a <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   1895a:	7b03      	ldrb	r3, [r0, #12]
   1895c:	2b02      	cmp	r3, #2
   1895e:	d010      	beq.n	18982 <os_eventq_put+0x54>
    resched = 0;
   18960:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   18962:	2300      	movs	r3, #0
   18964:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
   18966:	4630      	mov	r0, r6
   18968:	f000 ff5c 	bl	19824 <os_arch_restore_sr>

    if (resched) {
   1896c:	b97c      	cbnz	r4, 1898e <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   1896e:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   18970:	2300      	movs	r3, #0
   18972:	461a      	mov	r2, r3
   18974:	4619      	mov	r1, r3
   18976:	4618      	mov	r0, r3
   18978:	f7ff fcb8 	bl	182ec <__assert_func>
        OS_EXIT_CRITICAL(sr);
   1897c:	f000 ff52 	bl	19824 <os_arch_restore_sr>
   18980:	e7f5      	b.n	1896e <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   18982:	f000 fcc7 	bl	19314 <os_sched_wakeup>
            resched = 1;
   18986:	2401      	movs	r4, #1
   18988:	e7eb      	b.n	18962 <os_eventq_put+0x34>
    resched = 0;
   1898a:	2400      	movs	r4, #0
   1898c:	e7eb      	b.n	18966 <os_eventq_put+0x38>
        os_sched(NULL);
   1898e:	2000      	movs	r0, #0
   18990:	f000 fd40 	bl	19414 <os_sched>
   18994:	e7eb      	b.n	1896e <os_eventq_put+0x40>

00018996 <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   18996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18998:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   1899a:	f000 fc67 	bl	1926c <os_sched_get_current_task>
   1899e:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   189a0:	682b      	ldr	r3, [r5, #0]
   189a2:	4283      	cmp	r3, r0
   189a4:	d001      	beq.n	189aa <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   189a6:	b9db      	cbnz	r3, 189e0 <os_eventq_get+0x4a>
            evq->evq_owner = t;
   189a8:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   189aa:	f000 ff35 	bl	19818 <os_arch_save_sr>
   189ae:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   189b0:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
   189b2:	b9de      	cbnz	r6, 189ec <os_eventq_get+0x56>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   189b4:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   189b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   189ba:	4620      	mov	r0, r4
   189bc:	f000 fc62 	bl	19284 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   189c0:	7b63      	ldrb	r3, [r4, #13]
   189c2:	f043 0308 	orr.w	r3, r3, #8
   189c6:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   189c8:	4638      	mov	r0, r7
   189ca:	f000 ff2b 	bl	19824 <os_arch_restore_sr>

        os_sched(NULL);
   189ce:	2000      	movs	r0, #0
   189d0:	f000 fd20 	bl	19414 <os_sched>

        OS_ENTER_CRITICAL(sr);
   189d4:	f000 ff20 	bl	19818 <os_arch_save_sr>
   189d8:	4607      	mov	r7, r0
        evq->evq_task = NULL;
   189da:	2300      	movs	r3, #0
   189dc:	606b      	str	r3, [r5, #4]
        goto pull_one;
   189de:	e7e7      	b.n	189b0 <os_eventq_get+0x1a>
            assert(0);
   189e0:	2300      	movs	r3, #0
   189e2:	461a      	mov	r2, r3
   189e4:	4619      	mov	r1, r3
   189e6:	4618      	mov	r0, r3
   189e8:	f7ff fc80 	bl	182ec <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   189ec:	68f3      	ldr	r3, [r6, #12]
   189ee:	60ab      	str	r3, [r5, #8]
   189f0:	b153      	cbz	r3, 18a08 <os_eventq_get+0x72>
        ev->ev_queued = 0;
   189f2:	2300      	movs	r3, #0
   189f4:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   189f6:	7b63      	ldrb	r3, [r4, #13]
   189f8:	f023 0308 	bic.w	r3, r3, #8
   189fc:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   189fe:	4638      	mov	r0, r7
   18a00:	f000 ff10 	bl	19824 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   18a04:	4630      	mov	r0, r6
   18a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   18a08:	f105 0308 	add.w	r3, r5, #8
   18a0c:	60eb      	str	r3, [r5, #12]
   18a0e:	e7f0      	b.n	189f2 <os_eventq_get+0x5c>

00018a10 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   18a10:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   18a12:	f7ff ffc0 	bl	18996 <os_eventq_get>
    assert(ev->ev_cb != NULL);
   18a16:	6843      	ldr	r3, [r0, #4]
   18a18:	b10b      	cbz	r3, 18a1e <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   18a1a:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   18a1c:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   18a1e:	461a      	mov	r2, r3
   18a20:	4619      	mov	r1, r3
   18a22:	4618      	mov	r0, r3
   18a24:	f7ff fc62 	bl	182ec <__assert_func>

00018a28 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   18a28:	b538      	push	{r3, r4, r5, lr}
   18a2a:	4605      	mov	r5, r0
   18a2c:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   18a2e:	f000 fef3 	bl	19818 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   18a32:	7823      	ldrb	r3, [r4, #0]
   18a34:	b183      	cbz	r3, 18a58 <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   18a36:	68aa      	ldr	r2, [r5, #8]
   18a38:	42a2      	cmp	r2, r4
   18a3a:	d107      	bne.n	18a4c <os_eventq_remove+0x24>
   18a3c:	68d3      	ldr	r3, [r2, #12]
   18a3e:	60ab      	str	r3, [r5, #8]
   18a40:	b953      	cbnz	r3, 18a58 <os_eventq_remove+0x30>
   18a42:	f105 0308 	add.w	r3, r5, #8
   18a46:	60eb      	str	r3, [r5, #12]
   18a48:	e006      	b.n	18a58 <os_eventq_remove+0x30>
   18a4a:	461a      	mov	r2, r3
   18a4c:	68d3      	ldr	r3, [r2, #12]
   18a4e:	42a3      	cmp	r3, r4
   18a50:	d1fb      	bne.n	18a4a <os_eventq_remove+0x22>
   18a52:	68db      	ldr	r3, [r3, #12]
   18a54:	60d3      	str	r3, [r2, #12]
   18a56:	b123      	cbz	r3, 18a62 <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
   18a58:	2300      	movs	r3, #0
   18a5a:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   18a5c:	f000 fee2 	bl	19824 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   18a60:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   18a62:	320c      	adds	r2, #12
   18a64:	60ea      	str	r2, [r5, #12]
   18a66:	e7f7      	b.n	18a58 <os_eventq_remove+0x30>

00018a68 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   18a68:	4800      	ldr	r0, [pc, #0]	; (18a6c <os_eventq_dflt_get+0x4>)
   18a6a:	4770      	bx	lr
   18a6c:	20009078 	.word	0x20009078

00018a70 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
   18a70:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
   18a72:	2000      	movs	r0, #0
   18a74:	6018      	str	r0, [r3, #0]
   18a76:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
   18a78:	6098      	str	r0, [r3, #8]
   18a7a:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
   18a7c:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
   18a7e:	611a      	str	r2, [r3, #16]

    return (0);
}
   18a80:	4770      	bx	lr

00018a82 <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
   18a82:	b538      	push	{r3, r4, r5, lr}
   18a84:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   18a86:	f000 fec7 	bl	19818 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
   18a8a:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   18a8c:	b114      	cbz	r4, 18a94 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   18a8e:	6863      	ldr	r3, [r4, #4]
   18a90:	602b      	str	r3, [r5, #0]
   18a92:	b12b      	cbz	r3, 18aa0 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   18a94:	f000 fec6 	bl	19824 <os_arch_restore_sr>

    if (mp) {
   18a98:	b124      	cbz	r4, 18aa4 <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
   18a9a:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
   18a9e:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   18aa0:	606d      	str	r5, [r5, #4]
   18aa2:	e7f7      	b.n	18a94 <os_mqueue_get+0x12>
        m = NULL;
   18aa4:	2000      	movs	r0, #0
    return (m);
   18aa6:	e7fa      	b.n	18a9e <os_mqueue_get+0x1c>

00018aa8 <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
   18aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
   18aaa:	7953      	ldrb	r3, [r2, #5]
   18aac:	2b07      	cmp	r3, #7
   18aae:	d916      	bls.n	18ade <os_mqueue_put+0x36>
   18ab0:	4614      	mov	r4, r2
   18ab2:	460e      	mov	r6, r1
   18ab4:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
   18ab6:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   18aba:	f000 fead 	bl	19818 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   18abe:	2300      	movs	r3, #0
   18ac0:	f844 3f14 	str.w	r3, [r4, #20]!
   18ac4:	686b      	ldr	r3, [r5, #4]
   18ac6:	601f      	str	r7, [r3, #0]
   18ac8:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   18aca:	f000 feab 	bl	19824 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   18ace:	b146      	cbz	r6, 18ae2 <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
   18ad0:	f105 0108 	add.w	r1, r5, #8
   18ad4:	4630      	mov	r0, r6
   18ad6:	f7ff ff2a 	bl	1892e <os_eventq_put>
    }

    return (0);
   18ada:	2000      	movs	r0, #0
   18adc:	e000      	b.n	18ae0 <os_mqueue_put+0x38>
err:
    return (rc);
   18ade:	2002      	movs	r0, #2
}
   18ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   18ae2:	2000      	movs	r0, #0
   18ae4:	e7fc      	b.n	18ae0 <os_mqueue_put+0x38>

00018ae6 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   18ae6:	3a10      	subs	r2, #16
   18ae8:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   18aea:	6041      	str	r1, [r0, #4]

    return (0);
}
   18aec:	2000      	movs	r0, #0
   18aee:	4770      	bx	lr

00018af0 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   18af0:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   18af2:	8803      	ldrh	r3, [r0, #0]
   18af4:	428b      	cmp	r3, r1
   18af6:	d312      	bcc.n	18b1e <os_mbuf_get+0x2e>
   18af8:	460d      	mov	r5, r1
   18afa:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   18afc:	6840      	ldr	r0, [r0, #4]
   18afe:	f000 f947 	bl	18d90 <os_memblock_get>
    if (!om) {
   18b02:	4603      	mov	r3, r0
   18b04:	b148      	cbz	r0, 18b1a <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   18b06:	2200      	movs	r2, #0
   18b08:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
   18b0a:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
   18b0c:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
   18b0e:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   18b10:	f100 0110 	add.w	r1, r0, #16
   18b14:	4429      	add	r1, r5
   18b16:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
   18b18:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   18b1a:	4618      	mov	r0, r3
   18b1c:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   18b1e:	2300      	movs	r3, #0
    return om;
   18b20:	e7fb      	b.n	18b1a <os_mbuf_get+0x2a>

00018b22 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   18b22:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   18b24:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   18b28:	8803      	ldrh	r3, [r0, #0]
   18b2a:	42ab      	cmp	r3, r5
   18b2c:	d310      	bcc.n	18b50 <os_mbuf_get_pkthdr+0x2e>
   18b2e:	2dff      	cmp	r5, #255	; 0xff
   18b30:	d810      	bhi.n	18b54 <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   18b32:	2100      	movs	r1, #0
   18b34:	f7ff ffdc 	bl	18af0 <os_mbuf_get>
    if (om) {
   18b38:	4603      	mov	r3, r0
   18b3a:	b138      	cbz	r0, 18b4c <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
   18b3c:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
   18b3e:	6802      	ldr	r2, [r0, #0]
   18b40:	4415      	add	r5, r2
   18b42:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   18b44:	2200      	movs	r2, #0
   18b46:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
   18b48:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   18b4a:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   18b4c:	4618      	mov	r0, r3
   18b4e:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   18b50:	2300      	movs	r3, #0
   18b52:	e7fb      	b.n	18b4c <os_mbuf_get_pkthdr+0x2a>
   18b54:	2300      	movs	r3, #0
    return om;
   18b56:	e7f9      	b.n	18b4c <os_mbuf_get_pkthdr+0x2a>

00018b58 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   18b58:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   18b5a:	6883      	ldr	r3, [r0, #8]
   18b5c:	b123      	cbz	r3, 18b68 <os_mbuf_free+0x10>
   18b5e:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   18b60:	6858      	ldr	r0, [r3, #4]
   18b62:	f000 f93d 	bl	18de0 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   18b66:	bd08      	pop	{r3, pc}
    rc = 0;
   18b68:	2000      	movs	r0, #0
    return (rc);
   18b6a:	e7fc      	b.n	18b66 <os_mbuf_free+0xe>

00018b6c <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
   18b6c:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   18b6e:	b160      	cbz	r0, 18b8a <os_mbuf_free_chain+0x1e>
{
   18b70:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   18b72:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
   18b74:	4618      	mov	r0, r3
   18b76:	f7ff ffef 	bl	18b58 <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
   18b7a:	4623      	mov	r3, r4
        if (rc != 0) {
   18b7c:	4602      	mov	r2, r0
   18b7e:	b910      	cbnz	r0, 18b86 <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
   18b80:	2c00      	cmp	r4, #0
   18b82:	d1f6      	bne.n	18b72 <os_mbuf_free_chain+0x6>
    }

    rc = 0;
   18b84:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   18b86:	4610      	mov	r0, r2
   18b88:	bd10      	pop	{r4, pc}
    rc = 0;
   18b8a:	2200      	movs	r2, #0
}
   18b8c:	4610      	mov	r0, r2
   18b8e:	4770      	bx	lr

00018b90 <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
   18b90:	2300      	movs	r3, #0
    while (om != NULL) {
   18b92:	e003      	b.n	18b9c <os_mbuf_len+0xc>
        len += om->om_len;
   18b94:	88c2      	ldrh	r2, [r0, #6]
   18b96:	4413      	add	r3, r2
   18b98:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
   18b9a:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
   18b9c:	2800      	cmp	r0, #0
   18b9e:	d1f9      	bne.n	18b94 <os_mbuf_len+0x4>
    }

    return len;
}
   18ba0:	4618      	mov	r0, r3
   18ba2:	4770      	bx	lr

00018ba4 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   18ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   18ba8:	2800      	cmp	r0, #0
   18baa:	d04d      	beq.n	18c48 <os_mbuf_append+0xa4>
   18bac:	460f      	mov	r7, r1
   18bae:	4691      	mov	r9, r2
   18bb0:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   18bb2:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   18bb6:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   18bb8:	e000      	b.n	18bbc <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
   18bba:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
   18bbc:	68eb      	ldr	r3, [r5, #12]
   18bbe:	2b00      	cmp	r3, #0
   18bc0:	d1fb      	bne.n	18bba <os_mbuf_append+0x16>
    }

    remainder = len;
   18bc2:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   18bc4:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   18bc6:	f105 0410 	add.w	r4, r5, #16
   18bca:	881b      	ldrh	r3, [r3, #0]
   18bcc:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   18bce:	6828      	ldr	r0, [r5, #0]
   18bd0:	88eb      	ldrh	r3, [r5, #6]
   18bd2:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   18bd4:	1a24      	subs	r4, r4, r0
   18bd6:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   18bd8:	b164      	cbz	r4, 18bf4 <os_mbuf_append+0x50>
        if (space > remainder) {
   18bda:	454c      	cmp	r4, r9
   18bdc:	dd00      	ble.n	18be0 <os_mbuf_append+0x3c>
            space = remainder;
   18bde:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   18be0:	4622      	mov	r2, r4
   18be2:	4639      	mov	r1, r7
   18be4:	f000 ff78 	bl	19ad8 <memcpy>

        last->om_len += space;
   18be8:	88eb      	ldrh	r3, [r5, #6]
   18bea:	4423      	add	r3, r4
   18bec:	80eb      	strh	r3, [r5, #6]
        data += space;
   18bee:	4427      	add	r7, r4
        remainder -= space;
   18bf0:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   18bf4:	2e00      	cmp	r6, #0
   18bf6:	dd16      	ble.n	18c26 <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
   18bf8:	2100      	movs	r1, #0
   18bfa:	4640      	mov	r0, r8
   18bfc:	f7ff ff78 	bl	18af0 <os_mbuf_get>
        if (!new) {
   18c00:	4604      	mov	r4, r0
   18c02:	b180      	cbz	r0, 18c26 <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   18c04:	f8b8 2000 	ldrh.w	r2, [r8]
   18c08:	42b2      	cmp	r2, r6
   18c0a:	bfa8      	it	ge
   18c0c:	4632      	movge	r2, r6
   18c0e:	b292      	uxth	r2, r2
   18c10:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   18c12:	4639      	mov	r1, r7
   18c14:	6800      	ldr	r0, [r0, #0]
   18c16:	f000 ff5f 	bl	19ad8 <memcpy>
        data += new->om_len;
   18c1a:	88e3      	ldrh	r3, [r4, #6]
   18c1c:	441f      	add	r7, r3
        remainder -= new->om_len;
   18c1e:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
   18c20:	60ec      	str	r4, [r5, #12]
        last = new;
   18c22:	4625      	mov	r5, r4
   18c24:	e7e6      	b.n	18bf4 <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   18c26:	f89a 3005 	ldrb.w	r3, [sl, #5]
   18c2a:	2b07      	cmp	r3, #7
   18c2c:	d907      	bls.n	18c3e <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   18c2e:	eba9 0906 	sub.w	r9, r9, r6
   18c32:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   18c36:	fa13 f989 	uxtah	r9, r3, r9
   18c3a:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   18c3e:	b106      	cbz	r6, 18c42 <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
   18c40:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
   18c42:	4630      	mov	r0, r6
   18c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   18c48:	2602      	movs	r6, #2
   18c4a:	e7fa      	b.n	18c42 <os_mbuf_append+0x9e>

00018c4c <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
   18c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18c50:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
   18c52:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
   18c56:	2700      	movs	r7, #0
    head = NULL;
   18c58:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   18c5a:	e017      	b.n	18c8c <os_mbuf_dup+0x40>
    startoff = 0;
   18c5c:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   18c5e:	4623      	mov	r3, r4
   18c60:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   18c64:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   18c66:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
   18c68:	b299      	uxth	r1, r3
   18c6a:	4640      	mov	r0, r8
   18c6c:	f7ff ff40 	bl	18af0 <os_mbuf_get>
   18c70:	4605      	mov	r5, r0
   18c72:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
   18c74:	b188      	cbz	r0, 18c9a <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
   18c76:	7923      	ldrb	r3, [r4, #4]
   18c78:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
   18c7a:	88e3      	ldrh	r3, [r4, #6]
   18c7c:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
   18c7e:	88e2      	ldrh	r2, [r4, #6]
   18c80:	6821      	ldr	r1, [r4, #0]
   18c82:	6828      	ldr	r0, [r5, #0]
   18c84:	f000 ff28 	bl	19ad8 <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   18c88:	68e4      	ldr	r4, [r4, #12]
   18c8a:	462f      	mov	r7, r5
   18c8c:	b14c      	cbz	r4, 18ca2 <os_mbuf_dup+0x56>
        if (head) {
   18c8e:	b15e      	cbz	r6, 18ca8 <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   18c90:	7963      	ldrb	r3, [r4, #5]
   18c92:	2b07      	cmp	r3, #7
   18c94:	d9e2      	bls.n	18c5c <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
   18c96:	b299      	uxth	r1, r3
   18c98:	e7e1      	b.n	18c5e <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
   18c9a:	4630      	mov	r0, r6
   18c9c:	f7ff ff66 	bl	18b6c <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
   18ca0:	462e      	mov	r6, r5
}
   18ca2:	4630      	mov	r0, r6
   18ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
   18ca8:	7963      	ldrb	r3, [r4, #5]
   18caa:	2b07      	cmp	r3, #7
   18cac:	d911      	bls.n	18cd2 <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
   18cae:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   18cb0:	4623      	mov	r3, r4
   18cb2:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   18cb6:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   18cb8:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
   18cba:	b299      	uxth	r1, r3
   18cbc:	4640      	mov	r0, r8
   18cbe:	f7ff ff17 	bl	18af0 <os_mbuf_get>
            if (!head) {
   18cc2:	4606      	mov	r6, r0
   18cc4:	2800      	cmp	r0, #0
   18cc6:	d0ec      	beq.n	18ca2 <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
   18cc8:	7963      	ldrb	r3, [r4, #5]
   18cca:	2b07      	cmp	r3, #7
   18ccc:	d803      	bhi.n	18cd6 <os_mbuf_dup+0x8a>
            copy = head;
   18cce:	4605      	mov	r5, r0
   18cd0:	e7d1      	b.n	18c76 <os_mbuf_dup+0x2a>
    startoff = 0;
   18cd2:	2100      	movs	r1, #0
   18cd4:	e7ec      	b.n	18cb0 <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
   18cd6:	88c3      	ldrh	r3, [r0, #6]
   18cd8:	b973      	cbnz	r3, 18cf8 <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   18cda:	f100 0510 	add.w	r5, r0, #16
   18cde:	7962      	ldrb	r2, [r4, #5]
   18ce0:	f104 0110 	add.w	r1, r4, #16
   18ce4:	4628      	mov	r0, r5
   18ce6:	f000 fef7 	bl	19ad8 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   18cea:	7963      	ldrb	r3, [r4, #5]
   18cec:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   18cee:	7963      	ldrb	r3, [r4, #5]
   18cf0:	441d      	add	r5, r3
   18cf2:	6035      	str	r5, [r6, #0]
            copy = head;
   18cf4:	4635      	mov	r5, r6
   18cf6:	e7be      	b.n	18c76 <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
   18cf8:	2300      	movs	r3, #0
   18cfa:	461a      	mov	r2, r3
   18cfc:	4619      	mov	r1, r3
   18cfe:	4618      	mov	r0, r3
   18d00:	f7ff faf4 	bl	182ec <__assert_func>

00018d04 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   18d04:	2800      	cmp	r0, #0
   18d06:	d031      	beq.n	18d6c <os_mempool_init_internal+0x68>
{
   18d08:	b430      	push	{r4, r5}
   18d0a:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   18d0c:	2a00      	cmp	r2, #0
   18d0e:	d02f      	beq.n	18d70 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   18d10:	b1bb      	cbz	r3, 18d42 <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   18d12:	b113      	cbz	r3, 18d1a <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   18d14:	f013 0f03 	tst.w	r3, #3
   18d18:	d12c      	bne.n	18d74 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   18d1a:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   18d1c:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   18d1e:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   18d20:	f89d 000c 	ldrb.w	r0, [sp, #12]
   18d24:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   18d26:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   18d28:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   18d2a:	9802      	ldr	r0, [sp, #8]
   18d2c:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   18d2e:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   18d30:	b199      	cbz	r1, 18d5a <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   18d32:	f012 0f03 	tst.w	r2, #3
   18d36:	d002      	beq.n	18d3e <os_mempool_init_internal+0x3a>
   18d38:	f022 0203 	bic.w	r2, r2, #3
   18d3c:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   18d3e:	2001      	movs	r0, #1
   18d40:	e007      	b.n	18d52 <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   18d42:	2900      	cmp	r1, #0
   18d44:	d0e5      	beq.n	18d12 <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   18d46:	2003      	movs	r0, #3
   18d48:	e00e      	b.n	18d68 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   18d4a:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   18d4c:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   18d4e:	3001      	adds	r0, #1
            block_addr += true_block_size;
   18d50:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   18d52:	4281      	cmp	r1, r0
   18d54:	dcf9      	bgt.n	18d4a <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   18d56:	2200      	movs	r2, #0
   18d58:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   18d5a:	2000      	movs	r0, #0
   18d5c:	6120      	str	r0, [r4, #16]
   18d5e:	4b06      	ldr	r3, [pc, #24]	; (18d78 <os_mempool_init_internal+0x74>)
   18d60:	685a      	ldr	r2, [r3, #4]
   18d62:	6014      	str	r4, [r2, #0]
   18d64:	3410      	adds	r4, #16
   18d66:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   18d68:	bc30      	pop	{r4, r5}
   18d6a:	4770      	bx	lr
        return OS_INVALID_PARM;
   18d6c:	2003      	movs	r0, #3
}
   18d6e:	4770      	bx	lr
        return OS_INVALID_PARM;
   18d70:	2003      	movs	r0, #3
   18d72:	e7f9      	b.n	18d68 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   18d74:	2004      	movs	r0, #4
   18d76:	e7f7      	b.n	18d68 <os_mempool_init_internal+0x64>
   18d78:	2000de98 	.word	0x2000de98

00018d7c <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   18d7c:	b510      	push	{r4, lr}
   18d7e:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   18d80:	2400      	movs	r4, #0
   18d82:	9401      	str	r4, [sp, #4]
   18d84:	9c04      	ldr	r4, [sp, #16]
   18d86:	9400      	str	r4, [sp, #0]
   18d88:	f7ff ffbc 	bl	18d04 <os_mempool_init_internal>
}
   18d8c:	b002      	add	sp, #8
   18d8e:	bd10      	pop	{r4, pc}

00018d90 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
   18d90:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   18d92:	b1a0      	cbz	r0, 18dbe <os_memblock_get+0x2e>
   18d94:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   18d96:	f000 fd3f 	bl	19818 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   18d9a:	88e3      	ldrh	r3, [r4, #6]
   18d9c:	b153      	cbz	r3, 18db4 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   18d9e:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   18da0:	682a      	ldr	r2, [r5, #0]
   18da2:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   18da4:	3b01      	subs	r3, #1
   18da6:	b29b      	uxth	r3, r3
   18da8:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   18daa:	8922      	ldrh	r2, [r4, #8]
   18dac:	4293      	cmp	r3, r2
   18dae:	d202      	bcs.n	18db6 <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   18db0:	8123      	strh	r3, [r4, #8]
   18db2:	e000      	b.n	18db6 <os_memblock_get+0x26>
    block = NULL;
   18db4:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   18db6:	f000 fd35 	bl	19824 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   18dba:	4628      	mov	r0, r5
   18dbc:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   18dbe:	2500      	movs	r5, #0
    return (void *)block;
   18dc0:	e7fb      	b.n	18dba <os_memblock_get+0x2a>

00018dc2 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   18dc2:	b538      	push	{r3, r4, r5, lr}
   18dc4:	4604      	mov	r4, r0
   18dc6:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   18dc8:	f000 fd26 	bl	19818 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   18dcc:	6963      	ldr	r3, [r4, #20]
   18dce:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   18dd0:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   18dd2:	88e3      	ldrh	r3, [r4, #6]
   18dd4:	3301      	adds	r3, #1
   18dd6:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   18dd8:	f000 fd24 	bl	19824 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   18ddc:	2000      	movs	r0, #0
   18dde:	bd38      	pop	{r3, r4, r5, pc}

00018de0 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   18de0:	b168      	cbz	r0, 18dfe <os_memblock_put+0x1e>
{
   18de2:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
   18de4:	b169      	cbz	r1, 18e02 <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   18de6:	7a83      	ldrb	r3, [r0, #10]
   18de8:	f013 0f01 	tst.w	r3, #1
   18dec:	d004      	beq.n	18df8 <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   18dee:	69c3      	ldr	r3, [r0, #28]
   18df0:	b113      	cbz	r3, 18df8 <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   18df2:	6a02      	ldr	r2, [r0, #32]
   18df4:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   18df6:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
   18df8:	f7ff ffe3 	bl	18dc2 <os_memblock_put_from_cb>
   18dfc:	e7fb      	b.n	18df6 <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
   18dfe:	2003      	movs	r0, #3
}
   18e00:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   18e02:	2003      	movs	r0, #3
   18e04:	e7f7      	b.n	18df6 <os_memblock_put+0x16>
	...

00018e08 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   18e08:	4b02      	ldr	r3, [pc, #8]	; (18e14 <os_mempool_module_init+0xc>)
   18e0a:	2200      	movs	r2, #0
   18e0c:	601a      	str	r2, [r3, #0]
   18e0e:	605b      	str	r3, [r3, #4]
}
   18e10:	4770      	bx	lr
   18e12:	bf00      	nop
   18e14:	2000de98 	.word	0x2000de98

00018e18 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   18e18:	4b02      	ldr	r3, [pc, #8]	; (18e24 <os_msys_find_biggest_pool+0xc>)
   18e1a:	6818      	ldr	r0, [r3, #0]
   18e1c:	b108      	cbz	r0, 18e22 <os_msys_find_biggest_pool+0xa>
   18e1e:	6858      	ldr	r0, [r3, #4]
   18e20:	3808      	subs	r0, #8
}
   18e22:	4770      	bx	lr
   18e24:	2000010c 	.word	0x2000010c

00018e28 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   18e28:	4b09      	ldr	r3, [pc, #36]	; (18e50 <os_msys_find_pool+0x28>)
   18e2a:	6819      	ldr	r1, [r3, #0]
   18e2c:	460b      	mov	r3, r1
   18e2e:	b123      	cbz	r3, 18e3a <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
   18e30:	881a      	ldrh	r2, [r3, #0]
   18e32:	4282      	cmp	r2, r0
   18e34:	d201      	bcs.n	18e3a <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   18e36:	689b      	ldr	r3, [r3, #8]
   18e38:	e7f9      	b.n	18e2e <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
   18e3a:	b10b      	cbz	r3, 18e40 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   18e3c:	4618      	mov	r0, r3
   18e3e:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   18e40:	b119      	cbz	r1, 18e4a <os_msys_find_pool+0x22>
   18e42:	4b03      	ldr	r3, [pc, #12]	; (18e50 <os_msys_find_pool+0x28>)
   18e44:	685b      	ldr	r3, [r3, #4]
   18e46:	3b08      	subs	r3, #8
   18e48:	e7f8      	b.n	18e3c <os_msys_find_pool+0x14>
   18e4a:	460b      	mov	r3, r1
    return (pool);
   18e4c:	e7f6      	b.n	18e3c <os_msys_find_pool+0x14>
   18e4e:	bf00      	nop
   18e50:	2000010c 	.word	0x2000010c

00018e54 <os_msys_register>:
{
   18e54:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   18e56:	4b11      	ldr	r3, [pc, #68]	; (18e9c <os_msys_register+0x48>)
   18e58:	681d      	ldr	r5, [r3, #0]
   18e5a:	462b      	mov	r3, r5
    prev = NULL;
   18e5c:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   18e5e:	b133      	cbz	r3, 18e6e <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   18e60:	8801      	ldrh	r1, [r0, #0]
   18e62:	881a      	ldrh	r2, [r3, #0]
   18e64:	4291      	cmp	r1, r2
   18e66:	d302      	bcc.n	18e6e <os_msys_register+0x1a>
        prev = pool;
   18e68:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   18e6a:	689b      	ldr	r3, [r3, #8]
   18e6c:	e7f7      	b.n	18e5e <os_msys_register+0xa>
    if (prev) {
   18e6e:	b15c      	cbz	r4, 18e88 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   18e70:	68a3      	ldr	r3, [r4, #8]
   18e72:	6083      	str	r3, [r0, #8]
   18e74:	b11b      	cbz	r3, 18e7e <os_msys_register+0x2a>
   18e76:	60a0      	str	r0, [r4, #8]
}
   18e78:	2000      	movs	r0, #0
   18e7a:	bc30      	pop	{r4, r5}
   18e7c:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   18e7e:	f100 0308 	add.w	r3, r0, #8
   18e82:	4a06      	ldr	r2, [pc, #24]	; (18e9c <os_msys_register+0x48>)
   18e84:	6053      	str	r3, [r2, #4]
   18e86:	e7f6      	b.n	18e76 <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   18e88:	6085      	str	r5, [r0, #8]
   18e8a:	b115      	cbz	r5, 18e92 <os_msys_register+0x3e>
   18e8c:	4b03      	ldr	r3, [pc, #12]	; (18e9c <os_msys_register+0x48>)
   18e8e:	6018      	str	r0, [r3, #0]
   18e90:	e7f2      	b.n	18e78 <os_msys_register+0x24>
   18e92:	f100 0308 	add.w	r3, r0, #8
   18e96:	4a01      	ldr	r2, [pc, #4]	; (18e9c <os_msys_register+0x48>)
   18e98:	6053      	str	r3, [r2, #4]
   18e9a:	e7f7      	b.n	18e8c <os_msys_register+0x38>
   18e9c:	2000010c 	.word	0x2000010c

00018ea0 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   18ea0:	b530      	push	{r4, r5, lr}
   18ea2:	b083      	sub	sp, #12
   18ea4:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   18ea6:	9d07      	ldr	r5, [sp, #28]
   18ea8:	9501      	str	r5, [sp, #4]
   18eaa:	9d06      	ldr	r5, [sp, #24]
   18eac:	9500      	str	r5, [sp, #0]
   18eae:	f001 f96d 	bl	1a18c <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   18eb2:	b138      	cbz	r0, 18ec4 <os_msys_init_once+0x24>
   18eb4:	2000      	movs	r0, #0
   18eb6:	9000      	str	r0, [sp, #0]
   18eb8:	4b09      	ldr	r3, [pc, #36]	; (18ee0 <os_msys_init_once+0x40>)
   18eba:	681d      	ldr	r5, [r3, #0]
   18ebc:	4603      	mov	r3, r0
   18ebe:	4602      	mov	r2, r0
   18ec0:	4601      	mov	r1, r0
   18ec2:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
   18ec4:	4620      	mov	r0, r4
   18ec6:	f7ff ffc5 	bl	18e54 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   18eca:	b138      	cbz	r0, 18edc <os_msys_init_once+0x3c>
   18ecc:	2000      	movs	r0, #0
   18ece:	9000      	str	r0, [sp, #0]
   18ed0:	4b03      	ldr	r3, [pc, #12]	; (18ee0 <os_msys_init_once+0x40>)
   18ed2:	681c      	ldr	r4, [r3, #0]
   18ed4:	4603      	mov	r3, r0
   18ed6:	4602      	mov	r2, r0
   18ed8:	4601      	mov	r1, r0
   18eda:	47a0      	blx	r4
}
   18edc:	b003      	add	sp, #12
   18ede:	bd30      	pop	{r4, r5, pc}
   18ee0:	20000104 	.word	0x20000104

00018ee4 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   18ee4:	4b02      	ldr	r3, [pc, #8]	; (18ef0 <os_msys_reset+0xc>)
   18ee6:	2200      	movs	r2, #0
   18ee8:	601a      	str	r2, [r3, #0]
   18eea:	605b      	str	r3, [r3, #4]
}
   18eec:	4770      	bx	lr
   18eee:	bf00      	nop
   18ef0:	2000010c 	.word	0x2000010c

00018ef4 <os_msys_get_pkthdr>:
{
   18ef4:	b510      	push	{r4, lr}
   18ef6:	460c      	mov	r4, r1
    if (dsize == 0) {
   18ef8:	b930      	cbnz	r0, 18f08 <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   18efa:	f7ff ff8d 	bl	18e18 <os_msys_find_biggest_pool>
    if (!pool) {
   18efe:	b158      	cbz	r0, 18f18 <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   18f00:	b2e1      	uxtb	r1, r4
   18f02:	f7ff fe0e 	bl	18b22 <os_mbuf_get_pkthdr>
}
   18f06:	bd10      	pop	{r4, pc}
   18f08:	f101 0308 	add.w	r3, r1, #8
   18f0c:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   18f0e:	4403      	add	r3, r0
   18f10:	b298      	uxth	r0, r3
   18f12:	f7ff ff89 	bl	18e28 <os_msys_find_pool>
   18f16:	e7f2      	b.n	18efe <os_msys_get_pkthdr+0xa>
    return (NULL);
   18f18:	2000      	movs	r0, #0
   18f1a:	e7f4      	b.n	18f06 <os_msys_get_pkthdr+0x12>

00018f1c <os_msys_init>:

void
os_msys_init(void)
{
   18f1c:	b500      	push	{lr}
   18f1e:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   18f20:	f7ff ffe0 	bl	18ee4 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   18f24:	4b06      	ldr	r3, [pc, #24]	; (18f40 <os_msys_init+0x24>)
   18f26:	9301      	str	r3, [sp, #4]
   18f28:	f44f 7392 	mov.w	r3, #292	; 0x124
   18f2c:	9300      	str	r3, [sp, #0]
   18f2e:	2340      	movs	r3, #64	; 0x40
   18f30:	4a04      	ldr	r2, [pc, #16]	; (18f44 <os_msys_init+0x28>)
   18f32:	4905      	ldr	r1, [pc, #20]	; (18f48 <os_msys_init+0x2c>)
   18f34:	4805      	ldr	r0, [pc, #20]	; (18f4c <os_msys_init+0x30>)
   18f36:	f7ff ffb3 	bl	18ea0 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   18f3a:	b003      	add	sp, #12
   18f3c:	f85d fb04 	ldr.w	pc, [sp], #4
   18f40:	0001f90c 	.word	0x0001f90c
   18f44:	2000d988 	.word	0x2000d988
   18f48:	2000d994 	.word	0x2000d994
   18f4c:	20009088 	.word	0x20009088

00018f50 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   18f50:	4603      	mov	r3, r0
   18f52:	b128      	cbz	r0, 18f60 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   18f54:	2000      	movs	r0, #0
   18f56:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   18f58:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   18f5a:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   18f5c:	6018      	str	r0, [r3, #0]
   18f5e:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   18f60:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   18f62:	4770      	bx	lr

00018f64 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   18f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   18f66:	4b2c      	ldr	r3, [pc, #176]	; (19018 <os_mutex_release+0xb4>)
   18f68:	681b      	ldr	r3, [r3, #0]
   18f6a:	2b00      	cmp	r3, #0
   18f6c:	d04d      	beq.n	1900a <os_mutex_release+0xa6>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   18f6e:	2800      	cmp	r0, #0
   18f70:	d04d      	beq.n	1900e <os_mutex_release+0xaa>
   18f72:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   18f74:	f000 f97a 	bl	1926c <os_sched_get_current_task>
   18f78:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   18f7a:	88e3      	ldrh	r3, [r4, #6]
   18f7c:	2b00      	cmp	r3, #0
   18f7e:	d048      	beq.n	19012 <os_mutex_release+0xae>
   18f80:	68a2      	ldr	r2, [r4, #8]
   18f82:	4282      	cmp	r2, r0
   18f84:	d001      	beq.n	18f8a <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
   18f86:	2005      	movs	r0, #5
   18f88:	e040      	b.n	1900c <os_mutex_release+0xa8>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   18f8a:	2b01      	cmp	r3, #1
   18f8c:	d003      	beq.n	18f96 <os_mutex_release+0x32>
        --mu->mu_level;
   18f8e:	3b01      	subs	r3, #1
   18f90:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   18f92:	2000      	movs	r0, #0
        goto done;
   18f94:	e03a      	b.n	1900c <os_mutex_release+0xa8>
    }

    OS_ENTER_CRITICAL(sr);
   18f96:	f000 fc3f 	bl	19818 <os_arch_save_sr>
   18f9a:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   18f9c:	88e3      	ldrh	r3, [r4, #6]
   18f9e:	3b01      	subs	r3, #1
   18fa0:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   18fa2:	7aea      	ldrb	r2, [r5, #11]
   18fa4:	7963      	ldrb	r3, [r4, #5]
   18fa6:	429a      	cmp	r2, r3
   18fa8:	d11e      	bne.n	18fe8 <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   18faa:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   18fac:	b146      	cbz	r6, 18fc0 <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   18fae:	69f3      	ldr	r3, [r6, #28]
   18fb0:	b1fb      	cbz	r3, 18ff2 <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
   18fb2:	4630      	mov	r0, r6
   18fb4:	f000 f9ae 	bl	19314 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   18fb8:	2301      	movs	r3, #1
   18fba:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   18fbc:	7af3      	ldrb	r3, [r6, #11]
   18fbe:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   18fc0:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   18fc2:	b116      	cbz	r6, 18fca <os_mutex_release+0x66>
        rdy->t_lockcnt++;
   18fc4:	7bb3      	ldrb	r3, [r6, #14]
   18fc6:	3301      	adds	r3, #1
   18fc8:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   18fca:	7bab      	ldrb	r3, [r5, #14]
   18fcc:	3b01      	subs	r3, #1
   18fce:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   18fd0:	f000 fa1a 	bl	19408 <os_sched_next_task>
   18fd4:	4604      	mov	r4, r0
    if (rdy != current) {
   18fd6:	4285      	cmp	r5, r0
   18fd8:	d010      	beq.n	18ffc <os_mutex_release+0x98>
        resched = 1;
   18fda:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   18fdc:	4638      	mov	r0, r7
   18fde:	f000 fc21 	bl	19824 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   18fe2:	b96d      	cbnz	r5, 19000 <os_mutex_release+0x9c>
        os_sched(rdy);
    }

    ret = OS_OK;
   18fe4:	2000      	movs	r0, #0
   18fe6:	e011      	b.n	1900c <os_mutex_release+0xa8>
        current->t_prio = mu->mu_prio;
   18fe8:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   18fea:	4628      	mov	r0, r5
   18fec:	f000 fa24 	bl	19438 <os_sched_resort>
   18ff0:	e7db      	b.n	18faa <os_mutex_release+0x46>
        assert(rdy->t_obj);
   18ff2:	461a      	mov	r2, r3
   18ff4:	4619      	mov	r1, r3
   18ff6:	4618      	mov	r0, r3
   18ff8:	f7ff f978 	bl	182ec <__assert_func>
    resched = 0;
   18ffc:	2500      	movs	r5, #0
   18ffe:	e7ed      	b.n	18fdc <os_mutex_release+0x78>
        os_sched(rdy);
   19000:	4620      	mov	r0, r4
   19002:	f000 fa07 	bl	19414 <os_sched>
    ret = OS_OK;
   19006:	2000      	movs	r0, #0
   19008:	e000      	b.n	1900c <os_mutex_release+0xa8>
        ret = OS_NOT_STARTED;
   1900a:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   1900c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   1900e:	2003      	movs	r0, #3
   19010:	e7fc      	b.n	1900c <os_mutex_release+0xa8>
        ret = OS_BAD_MUTEX;
   19012:	2005      	movs	r0, #5
   19014:	e7fa      	b.n	1900c <os_mutex_release+0xa8>
   19016:	bf00      	nop
   19018:	2000de88 	.word	0x2000de88

0001901c <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   1901c:	4b36      	ldr	r3, [pc, #216]	; (190f8 <os_mutex_pend+0xdc>)
   1901e:	681b      	ldr	r3, [r3, #0]
   19020:	2b00      	cmp	r3, #0
   19022:	d065      	beq.n	190f0 <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   19024:	2800      	cmp	r0, #0
   19026:	d065      	beq.n	190f4 <os_mutex_pend+0xd8>
{
   19028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1902c:	460f      	mov	r7, r1
   1902e:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   19030:	f000 fbf2 	bl	19818 <os_arch_save_sr>
   19034:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   19036:	f000 f919 	bl	1926c <os_sched_get_current_task>
   1903a:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
   1903c:	88e3      	ldrh	r3, [r4, #6]
   1903e:	b19b      	cbz	r3, 19068 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   19040:	68a2      	ldr	r2, [r4, #8]
   19042:	4282      	cmp	r2, r0
   19044:	d01e      	beq.n	19084 <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   19046:	b327      	cbz	r7, 19092 <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   19048:	7ad1      	ldrb	r1, [r2, #11]
   1904a:	7ac3      	ldrb	r3, [r0, #11]
   1904c:	4299      	cmp	r1, r3
   1904e:	d825      	bhi.n	1909c <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   19050:	6821      	ldr	r1, [r4, #0]
   19052:	b369      	cbz	r1, 190b0 <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   19054:	460b      	mov	r3, r1
    last = NULL;
   19056:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   19058:	b32b      	cbz	r3, 190a6 <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
   1905a:	7ae8      	ldrb	r0, [r5, #11]
   1905c:	7ada      	ldrb	r2, [r3, #11]
   1905e:	4290      	cmp	r0, r2
   19060:	d321      	bcc.n	190a6 <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
   19062:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   19064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   19066:	e7f7      	b.n	19058 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   19068:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
   1906a:	7ac3      	ldrb	r3, [r0, #11]
   1906c:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
   1906e:	7b83      	ldrb	r3, [r0, #14]
   19070:	3301      	adds	r3, #1
   19072:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   19074:	2301      	movs	r3, #1
   19076:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   19078:	4640      	mov	r0, r8
   1907a:	f000 fbd3 	bl	19824 <os_arch_restore_sr>
        ret = OS_OK;
   1907e:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   19080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
   19084:	3301      	adds	r3, #1
   19086:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   19088:	4640      	mov	r0, r8
   1908a:	f000 fbcb 	bl	19824 <os_arch_restore_sr>
        ret = OS_OK;
   1908e:	2000      	movs	r0, #0
        goto done;
   19090:	e7f6      	b.n	19080 <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
   19092:	4640      	mov	r0, r8
   19094:	f000 fbc6 	bl	19824 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   19098:	2006      	movs	r0, #6
        goto done;
   1909a:	e7f1      	b.n	19080 <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
   1909c:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
   1909e:	68a0      	ldr	r0, [r4, #8]
   190a0:	f000 f9ca 	bl	19438 <os_sched_resort>
   190a4:	e7d4      	b.n	19050 <os_mutex_pend+0x34>
    if (last) {
   190a6:	b11e      	cbz	r6, 190b0 <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   190a8:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   190aa:	64eb      	str	r3, [r5, #76]	; 0x4c
   190ac:	64f5      	str	r5, [r6, #76]	; 0x4c
   190ae:	e001      	b.n	190b4 <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   190b0:	64e9      	str	r1, [r5, #76]	; 0x4c
   190b2:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
   190b4:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   190b6:	7b6b      	ldrb	r3, [r5, #13]
   190b8:	f043 0304 	orr.w	r3, r3, #4
   190bc:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
   190be:	4639      	mov	r1, r7
   190c0:	4628      	mov	r0, r5
   190c2:	f000 f8df 	bl	19284 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   190c6:	4640      	mov	r0, r8
   190c8:	f000 fbac 	bl	19824 <os_arch_restore_sr>
    os_sched(NULL);
   190cc:	2000      	movs	r0, #0
   190ce:	f000 f9a1 	bl	19414 <os_sched>
    OS_ENTER_CRITICAL(sr);
   190d2:	f000 fba1 	bl	19818 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   190d6:	7b6b      	ldrb	r3, [r5, #13]
   190d8:	f023 0304 	bic.w	r3, r3, #4
   190dc:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
   190de:	f000 fba1 	bl	19824 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
   190e2:	68a3      	ldr	r3, [r4, #8]
   190e4:	42ab      	cmp	r3, r5
   190e6:	d001      	beq.n	190ec <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
   190e8:	2006      	movs	r0, #6
   190ea:	e7c9      	b.n	19080 <os_mutex_pend+0x64>
        ret = OS_OK;
   190ec:	2000      	movs	r0, #0
   190ee:	e7c7      	b.n	19080 <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
   190f0:	2009      	movs	r0, #9
   190f2:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   190f4:	2003      	movs	r0, #3
}
   190f6:	4770      	bx	lr
   190f8:	2000de88 	.word	0x2000de88

000190fc <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   190fc:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   190fe:	4b05      	ldr	r3, [pc, #20]	; (19114 <os_sanity_check_list_lock+0x18>)
   19100:	6818      	ldr	r0, [r3, #0]
   19102:	b900      	cbnz	r0, 19106 <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   19104:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   19106:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1910a:	4803      	ldr	r0, [pc, #12]	; (19118 <os_sanity_check_list_lock+0x1c>)
   1910c:	f7ff ff86 	bl	1901c <os_mutex_pend>
err:
   19110:	e7f8      	b.n	19104 <os_sanity_check_list_lock+0x8>
   19112:	bf00      	nop
   19114:	2000de88 	.word	0x2000de88
   19118:	2000dea0 	.word	0x2000dea0

0001911c <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   1911c:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1911e:	4b04      	ldr	r3, [pc, #16]	; (19130 <os_sanity_check_list_unlock+0x14>)
   19120:	6818      	ldr	r0, [r3, #0]
   19122:	b900      	cbnz	r0, 19126 <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   19124:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   19126:	4803      	ldr	r0, [pc, #12]	; (19134 <os_sanity_check_list_unlock+0x18>)
   19128:	f7ff ff1c 	bl	18f64 <os_mutex_release>
err:
   1912c:	e7fa      	b.n	19124 <os_sanity_check_list_unlock+0x8>
   1912e:	bf00      	nop
   19130:	2000de88 	.word	0x2000de88
   19134:	2000dea0 	.word	0x2000dea0

00019138 <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
   19138:	2300      	movs	r3, #0
   1913a:	6003      	str	r3, [r0, #0]
   1913c:	6043      	str	r3, [r0, #4]
   1913e:	6083      	str	r3, [r0, #8]
   19140:	60c3      	str	r3, [r0, #12]
   19142:	6103      	str	r3, [r0, #16]
}
   19144:	4618      	mov	r0, r3
   19146:	4770      	bx	lr

00019148 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   19148:	b510      	push	{r4, lr}
   1914a:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   1914c:	f7ff ffd6 	bl	190fc <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   19150:	4603      	mov	r3, r0
   19152:	b108      	cbz	r0, 19158 <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
   19154:	4618      	mov	r0, r3
   19156:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   19158:	4b03      	ldr	r3, [pc, #12]	; (19168 <os_sanity_check_register+0x20>)
   1915a:	681a      	ldr	r2, [r3, #0]
   1915c:	6122      	str	r2, [r4, #16]
   1915e:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   19160:	f7ff ffdc 	bl	1911c <os_sanity_check_list_unlock>
   19164:	4603      	mov	r3, r0
err:
   19166:	e7f5      	b.n	19154 <os_sanity_check_register+0xc>
   19168:	2000d9b0 	.word	0x2000d9b0

0001916c <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   1916c:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   1916e:	f7ff ffc5 	bl	190fc <os_sanity_check_list_lock>
    if (rc != 0) {
   19172:	b910      	cbnz	r0, 1917a <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   19174:	4b17      	ldr	r3, [pc, #92]	; (191d4 <os_sanity_run+0x68>)
   19176:	681c      	ldr	r4, [r3, #0]
   19178:	e00e      	b.n	19198 <os_sanity_run+0x2c>
        assert(0);
   1917a:	2300      	movs	r3, #0
   1917c:	461a      	mov	r2, r3
   1917e:	4619      	mov	r1, r3
   19180:	4618      	mov	r0, r3
   19182:	f7ff f8b3 	bl	182ec <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   19186:	f000 facf 	bl	19728 <os_time_get>
   1918a:	6823      	ldr	r3, [r4, #0]
   1918c:	6862      	ldr	r2, [r4, #4]
   1918e:	4413      	add	r3, r2
   19190:	1ac3      	subs	r3, r0, r3
   19192:	2b00      	cmp	r3, #0
   19194:	dc0d      	bgt.n	191b2 <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   19196:	6924      	ldr	r4, [r4, #16]
   19198:	b18c      	cbz	r4, 191be <os_sanity_run+0x52>
        if (sc->sc_func) {
   1919a:	68a3      	ldr	r3, [r4, #8]
   1919c:	2b00      	cmp	r3, #0
   1919e:	d0f2      	beq.n	19186 <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
   191a0:	68e1      	ldr	r1, [r4, #12]
   191a2:	4620      	mov	r0, r4
   191a4:	4798      	blx	r3
            if (rc == OS_OK) {
   191a6:	2800      	cmp	r0, #0
   191a8:	d1ed      	bne.n	19186 <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
   191aa:	f000 fabd 	bl	19728 <os_time_get>
   191ae:	6020      	str	r0, [r4, #0]
                continue;
   191b0:	e7f1      	b.n	19196 <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   191b2:	2300      	movs	r3, #0
   191b4:	461a      	mov	r2, r3
   191b6:	4619      	mov	r1, r3
   191b8:	4618      	mov	r0, r3
   191ba:	f7ff f897 	bl	182ec <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   191be:	f7ff ffad 	bl	1911c <os_sanity_check_list_unlock>
    if (rc != 0) {
   191c2:	b900      	cbnz	r0, 191c6 <os_sanity_run+0x5a>
        assert(0);
    }
}
   191c4:	bd10      	pop	{r4, pc}
        assert(0);
   191c6:	2300      	movs	r3, #0
   191c8:	461a      	mov	r2, r3
   191ca:	4619      	mov	r1, r3
   191cc:	4618      	mov	r0, r3
   191ce:	f7ff f88d 	bl	182ec <__assert_func>
   191d2:	bf00      	nop
   191d4:	2000d9b0 	.word	0x2000d9b0

000191d8 <os_sanity_init>:

int
os_sanity_init(void)
{
   191d8:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   191da:	4802      	ldr	r0, [pc, #8]	; (191e4 <os_sanity_init+0xc>)
   191dc:	f7ff feb8 	bl	18f50 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   191e0:	bd08      	pop	{r3, pc}
   191e2:	bf00      	nop
   191e4:	2000dea0 	.word	0x2000dea0

000191e8 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   191e8:	7b03      	ldrb	r3, [r0, #12]
   191ea:	2b01      	cmp	r3, #1
   191ec:	d001      	beq.n	191f2 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   191ee:	2002      	movs	r0, #2
}
   191f0:	4770      	bx	lr
{
   191f2:	b510      	push	{r4, lr}
   191f4:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   191f6:	f000 fb0f 	bl	19818 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   191fa:	4b0f      	ldr	r3, [pc, #60]	; (19238 <os_sched_insert+0x50>)
   191fc:	681b      	ldr	r3, [r3, #0]
   191fe:	b12b      	cbz	r3, 1920c <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   19200:	7ae1      	ldrb	r1, [r4, #11]
   19202:	7ada      	ldrb	r2, [r3, #11]
   19204:	4291      	cmp	r1, r2
   19206:	d301      	bcc.n	1920c <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   19208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1920a:	e7f8      	b.n	191fe <os_sched_insert+0x16>
    if (entry) {
   1920c:	b153      	cbz	r3, 19224 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   1920e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   19210:	64a2      	str	r2, [r4, #72]	; 0x48
   19212:	6463      	str	r3, [r4, #68]	; 0x44
   19214:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   19216:	6014      	str	r4, [r2, #0]
   19218:	3444      	adds	r4, #68	; 0x44
   1921a:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   1921c:	f000 fb02 	bl	19824 <os_arch_restore_sr>
    return (0);
   19220:	2000      	movs	r0, #0
}
   19222:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   19224:	2300      	movs	r3, #0
   19226:	6463      	str	r3, [r4, #68]	; 0x44
   19228:	4b03      	ldr	r3, [pc, #12]	; (19238 <os_sched_insert+0x50>)
   1922a:	685a      	ldr	r2, [r3, #4]
   1922c:	64a2      	str	r2, [r4, #72]	; 0x48
   1922e:	6014      	str	r4, [r2, #0]
   19230:	3444      	adds	r4, #68	; 0x44
   19232:	605c      	str	r4, [r3, #4]
   19234:	e7f2      	b.n	1921c <os_sched_insert+0x34>
   19236:	bf00      	nop
   19238:	20000114 	.word	0x20000114

0001923c <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   1923c:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   1923e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   19240:	3301      	adds	r3, #1
   19242:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
   19244:	4b06      	ldr	r3, [pc, #24]	; (19260 <os_sched_ctx_sw_hook+0x24>)
   19246:	681c      	ldr	r4, [r3, #0]
   19248:	4b06      	ldr	r3, [pc, #24]	; (19264 <os_sched_ctx_sw_hook+0x28>)
   1924a:	6818      	ldr	r0, [r3, #0]
   1924c:	4906      	ldr	r1, [pc, #24]	; (19268 <os_sched_ctx_sw_hook+0x2c>)
   1924e:	680b      	ldr	r3, [r1, #0]
   19250:	1ac2      	subs	r2, r0, r3
   19252:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   19254:	4413      	add	r3, r2
   19256:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
   19258:	6008      	str	r0, [r1, #0]
}
   1925a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1925e:	4770      	bx	lr
   19260:	2000deb0 	.word	0x2000deb0
   19264:	2000dec0 	.word	0x2000dec0
   19268:	2000deac 	.word	0x2000deac

0001926c <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   1926c:	4b01      	ldr	r3, [pc, #4]	; (19274 <os_sched_get_current_task+0x8>)
   1926e:	6818      	ldr	r0, [r3, #0]
   19270:	4770      	bx	lr
   19272:	bf00      	nop
   19274:	2000deb0 	.word	0x2000deb0

00019278 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   19278:	4b01      	ldr	r3, [pc, #4]	; (19280 <os_sched_set_current_task+0x8>)
   1927a:	6018      	str	r0, [r3, #0]
}
   1927c:	4770      	bx	lr
   1927e:	bf00      	nop
   19280:	2000deb0 	.word	0x2000deb0

00019284 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   19284:	b538      	push	{r3, r4, r5, lr}
   19286:	4604      	mov	r4, r0
   19288:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1928a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1928c:	b1d3      	cbz	r3, 192c4 <os_sched_sleep+0x40>
   1928e:	6c82      	ldr	r2, [r0, #72]	; 0x48
   19290:	649a      	str	r2, [r3, #72]	; 0x48
   19292:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   19294:	6c62      	ldr	r2, [r4, #68]	; 0x44
   19296:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   19298:	2302      	movs	r3, #2
   1929a:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   1929c:	f000 fa44 	bl	19728 <os_time_get>
   192a0:	4428      	add	r0, r5
   192a2:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   192a4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   192a8:	d010      	beq.n	192cc <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   192aa:	4b18      	ldr	r3, [pc, #96]	; (1930c <os_sched_sleep+0x88>)
   192ac:	681b      	ldr	r3, [r3, #0]
   192ae:	b1d3      	cbz	r3, 192e6 <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   192b0:	7b5a      	ldrb	r2, [r3, #13]
   192b2:	f012 0f01 	tst.w	r2, #1
   192b6:	d116      	bne.n	192e6 <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   192b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   192ba:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   192bc:	2a00      	cmp	r2, #0
   192be:	dc12      	bgt.n	192e6 <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   192c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   192c2:	e7f4      	b.n	192ae <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   192c4:	6c82      	ldr	r2, [r0, #72]	; 0x48
   192c6:	4b12      	ldr	r3, [pc, #72]	; (19310 <os_sched_sleep+0x8c>)
   192c8:	605a      	str	r2, [r3, #4]
   192ca:	e7e2      	b.n	19292 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   192cc:	7b63      	ldrb	r3, [r4, #13]
   192ce:	f043 0301 	orr.w	r3, r3, #1
   192d2:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   192d4:	2300      	movs	r3, #0
   192d6:	6463      	str	r3, [r4, #68]	; 0x44
   192d8:	4b0c      	ldr	r3, [pc, #48]	; (1930c <os_sched_sleep+0x88>)
   192da:	685a      	ldr	r2, [r3, #4]
   192dc:	64a2      	str	r2, [r4, #72]	; 0x48
   192de:	6014      	str	r4, [r2, #0]
   192e0:	3444      	adds	r4, #68	; 0x44
   192e2:	605c      	str	r4, [r3, #4]
   192e4:	e007      	b.n	192f6 <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
   192e6:	b143      	cbz	r3, 192fa <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   192e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   192ea:	64a2      	str	r2, [r4, #72]	; 0x48
   192ec:	6463      	str	r3, [r4, #68]	; 0x44
   192ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   192f0:	6014      	str	r4, [r2, #0]
   192f2:	3444      	adds	r4, #68	; 0x44
   192f4:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   192f6:	2000      	movs	r0, #0
   192f8:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   192fa:	2300      	movs	r3, #0
   192fc:	6463      	str	r3, [r4, #68]	; 0x44
   192fe:	4b03      	ldr	r3, [pc, #12]	; (1930c <os_sched_sleep+0x88>)
   19300:	685a      	ldr	r2, [r3, #4]
   19302:	64a2      	str	r2, [r4, #72]	; 0x48
   19304:	6014      	str	r4, [r2, #0]
   19306:	3444      	adds	r4, #68	; 0x44
   19308:	605c      	str	r4, [r3, #4]
   1930a:	e7f4      	b.n	192f6 <os_sched_sleep+0x72>
   1930c:	2000011c 	.word	0x2000011c
   19310:	20000114 	.word	0x20000114

00019314 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   19314:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   19316:	7b03      	ldrb	r3, [r0, #12]
   19318:	2b02      	cmp	r3, #2
   1931a:	d108      	bne.n	1932e <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   1931c:	69c3      	ldr	r3, [r0, #28]
   1931e:	b1db      	cbz	r3, 19358 <os_sched_wakeup+0x44>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   19320:	681a      	ldr	r2, [r3, #0]
   19322:	b152      	cbz	r2, 1933a <os_sched_wakeup+0x26>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   19324:	4282      	cmp	r2, r0
   19326:	d10f      	bne.n	19348 <os_sched_wakeup+0x34>
   19328:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1932a:	601a      	str	r2, [r3, #0]
   1932c:	e011      	b.n	19352 <os_sched_wakeup+0x3e>
    assert(t->t_state == OS_TASK_SLEEP);
   1932e:	2300      	movs	r3, #0
   19330:	461a      	mov	r2, r3
   19332:	4619      	mov	r1, r3
   19334:	4618      	mov	r0, r3
   19336:	f7fe ffd9 	bl	182ec <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1933a:	2300      	movs	r3, #0
   1933c:	461a      	mov	r2, r3
   1933e:	4619      	mov	r1, r3
   19340:	4618      	mov	r0, r3
   19342:	f7fe ffd3 	bl	182ec <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   19346:	461a      	mov	r2, r3
   19348:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1934a:	4283      	cmp	r3, r0
   1934c:	d1fb      	bne.n	19346 <os_sched_wakeup+0x32>
   1934e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   19350:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   19352:	2300      	movs	r3, #0
   19354:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   19356:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   19358:	2301      	movs	r3, #1
   1935a:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   1935c:	2300      	movs	r3, #0
   1935e:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   19360:	7b43      	ldrb	r3, [r0, #13]
   19362:	f023 0301 	bic.w	r3, r3, #1
   19366:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   19368:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1936a:	b143      	cbz	r3, 1937e <os_sched_wakeup+0x6a>
   1936c:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1936e:	649a      	str	r2, [r3, #72]	; 0x48
   19370:	6c83      	ldr	r3, [r0, #72]	; 0x48
   19372:	6c42      	ldr	r2, [r0, #68]	; 0x44
   19374:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   19376:	f7ff ff37 	bl	191e8 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   1937a:	2000      	movs	r0, #0
   1937c:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1937e:	6c82      	ldr	r2, [r0, #72]	; 0x48
   19380:	4b01      	ldr	r3, [pc, #4]	; (19388 <os_sched_wakeup+0x74>)
   19382:	605a      	str	r2, [r3, #4]
   19384:	e7f4      	b.n	19370 <os_sched_wakeup+0x5c>
   19386:	bf00      	nop
   19388:	2000011c 	.word	0x2000011c

0001938c <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   1938c:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   1938e:	f000 f9cb 	bl	19728 <os_time_get>
   19392:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   19394:	f000 fa40 	bl	19818 <os_arch_save_sr>
   19398:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   1939a:	4b0a      	ldr	r3, [pc, #40]	; (193c4 <os_sched_os_timer_exp+0x38>)
   1939c:	6818      	ldr	r0, [r3, #0]
    while (t) {
   1939e:	b160      	cbz	r0, 193ba <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   193a0:	7b43      	ldrb	r3, [r0, #13]
   193a2:	f013 0f01 	tst.w	r3, #1
   193a6:	d108      	bne.n	193ba <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
   193a8:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   193aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
   193ac:	1aeb      	subs	r3, r5, r3
   193ae:	2b00      	cmp	r3, #0
   193b0:	db03      	blt.n	193ba <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
   193b2:	f7ff ffaf 	bl	19314 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   193b6:	4620      	mov	r0, r4
   193b8:	e7f1      	b.n	1939e <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
   193ba:	4630      	mov	r0, r6
   193bc:	f000 fa32 	bl	19824 <os_arch_restore_sr>
}
   193c0:	bd70      	pop	{r4, r5, r6, pc}
   193c2:	bf00      	nop
   193c4:	2000011c 	.word	0x2000011c

000193c8 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   193c8:	b510      	push	{r4, lr}
   193ca:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   193cc:	f000 fa2d 	bl	1982a <os_arch_in_critical>
   193d0:	b150      	cbz	r0, 193e8 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   193d2:	4b0c      	ldr	r3, [pc, #48]	; (19404 <os_sched_wakeup_ticks+0x3c>)
   193d4:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   193d6:	b17b      	cbz	r3, 193f8 <os_sched_wakeup_ticks+0x30>
   193d8:	7b5a      	ldrb	r2, [r3, #13]
   193da:	f012 0f01 	tst.w	r2, #1
   193de:	d10e      	bne.n	193fe <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   193e0:	6b58      	ldr	r0, [r3, #52]	; 0x34
   193e2:	1b00      	subs	r0, r0, r4
   193e4:	d406      	bmi.n	193f4 <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   193e6:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   193e8:	2300      	movs	r3, #0
   193ea:	461a      	mov	r2, r3
   193ec:	4619      	mov	r1, r3
   193ee:	4618      	mov	r0, r3
   193f0:	f7fe ff7c 	bl	182ec <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   193f4:	2000      	movs	r0, #0
   193f6:	e7f6      	b.n	193e6 <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   193f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   193fc:	e7f3      	b.n	193e6 <os_sched_wakeup_ticks+0x1e>
   193fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   19402:	e7f0      	b.n	193e6 <os_sched_wakeup_ticks+0x1e>
   19404:	2000011c 	.word	0x2000011c

00019408 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   19408:	4b01      	ldr	r3, [pc, #4]	; (19410 <os_sched_next_task+0x8>)
   1940a:	6818      	ldr	r0, [r3, #0]
   1940c:	4770      	bx	lr
   1940e:	bf00      	nop
   19410:	20000114 	.word	0x20000114

00019414 <os_sched>:
{
   19414:	b538      	push	{r3, r4, r5, lr}
   19416:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   19418:	f000 f9fe 	bl	19818 <os_arch_save_sr>
   1941c:	4605      	mov	r5, r0
    if (!next_t) {
   1941e:	b134      	cbz	r4, 1942e <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   19420:	4620      	mov	r0, r4
   19422:	f000 f9ef 	bl	19804 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   19426:	4628      	mov	r0, r5
   19428:	f000 f9fc 	bl	19824 <os_arch_restore_sr>
}
   1942c:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   1942e:	f7ff ffeb 	bl	19408 <os_sched_next_task>
   19432:	4604      	mov	r4, r0
   19434:	e7f4      	b.n	19420 <os_sched+0xc>
	...

00019438 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   19438:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   1943a:	7b03      	ldrb	r3, [r0, #12]
   1943c:	2b01      	cmp	r3, #1
   1943e:	d000      	beq.n	19442 <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   19440:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   19442:	6c43      	ldr	r3, [r0, #68]	; 0x44
   19444:	b13b      	cbz	r3, 19456 <os_sched_resort+0x1e>
   19446:	6c82      	ldr	r2, [r0, #72]	; 0x48
   19448:	649a      	str	r2, [r3, #72]	; 0x48
   1944a:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1944c:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1944e:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   19450:	f7ff feca 	bl	191e8 <os_sched_insert>
}
   19454:	e7f4      	b.n	19440 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   19456:	6c82      	ldr	r2, [r0, #72]	; 0x48
   19458:	4b01      	ldr	r3, [pc, #4]	; (19460 <os_sched_resort+0x28>)
   1945a:	605a      	str	r2, [r3, #4]
   1945c:	e7f5      	b.n	1944a <os_sched_resort+0x12>
   1945e:	bf00      	nop
   19460:	20000114 	.word	0x20000114

00019464 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   19464:	4603      	mov	r3, r0
   19466:	b118      	cbz	r0, 19470 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   19468:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   1946a:	2000      	movs	r0, #0
   1946c:	6018      	str	r0, [r3, #0]
   1946e:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   19470:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   19472:	4770      	bx	lr

00019474 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   19474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   19476:	4b17      	ldr	r3, [pc, #92]	; (194d4 <os_sem_release+0x60>)
   19478:	681b      	ldr	r3, [r3, #0]
   1947a:	b33b      	cbz	r3, 194cc <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1947c:	b340      	cbz	r0, 194d0 <os_sem_release+0x5c>
   1947e:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   19480:	f7ff fef4 	bl	1926c <os_sched_get_current_task>
   19484:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   19486:	f000 f9c7 	bl	19818 <os_arch_save_sr>
   1948a:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   1948c:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   1948e:	b165      	cbz	r5, 194aa <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   19490:	7b6b      	ldrb	r3, [r5, #13]
   19492:	f023 0302 	bic.w	r3, r3, #2
   19496:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   19498:	4628      	mov	r0, r5
   1949a:	f7ff ff3b 	bl	19314 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
   1949e:	7afa      	ldrb	r2, [r7, #11]
   194a0:	7aeb      	ldrb	r3, [r5, #11]
   194a2:	429a      	cmp	r2, r3
   194a4:	d80b      	bhi.n	194be <os_sem_release+0x4a>
    resched = 0;
   194a6:	2400      	movs	r4, #0
   194a8:	e003      	b.n	194b2 <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   194aa:	88e3      	ldrh	r3, [r4, #6]
   194ac:	3301      	adds	r3, #1
   194ae:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   194b0:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   194b2:	4630      	mov	r0, r6
   194b4:	f000 f9b6 	bl	19824 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   194b8:	b91c      	cbnz	r4, 194c2 <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   194ba:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   194bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   194be:	2401      	movs	r4, #1
   194c0:	e7f7      	b.n	194b2 <os_sem_release+0x3e>
        os_sched(rdy);
   194c2:	4628      	mov	r0, r5
   194c4:	f7ff ffa6 	bl	19414 <os_sched>
    ret = OS_OK;
   194c8:	2000      	movs	r0, #0
   194ca:	e7f7      	b.n	194bc <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   194cc:	2009      	movs	r0, #9
   194ce:	e7f5      	b.n	194bc <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   194d0:	2003      	movs	r0, #3
   194d2:	e7f3      	b.n	194bc <os_sem_release+0x48>
   194d4:	2000de88 	.word	0x2000de88

000194d8 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   194d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   194da:	4b2c      	ldr	r3, [pc, #176]	; (1958c <os_sem_pend+0xb4>)
   194dc:	681b      	ldr	r3, [r3, #0]
   194de:	2b00      	cmp	r3, #0
   194e0:	d04f      	beq.n	19582 <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   194e2:	2800      	cmp	r0, #0
   194e4:	d04f      	beq.n	19586 <os_sem_pend+0xae>
   194e6:	460d      	mov	r5, r1
   194e8:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   194ea:	f7ff febf 	bl	1926c <os_sched_get_current_task>
   194ee:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
   194f0:	f000 f992 	bl	19818 <os_arch_save_sr>
   194f4:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   194f6:	88e3      	ldrh	r3, [r4, #6]
   194f8:	b14b      	cbz	r3, 1950e <os_sem_pend+0x36>
        sem->sem_tokens--;
   194fa:	3b01      	subs	r3, #1
   194fc:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   194fe:	2400      	movs	r4, #0
    sched = 0;
   19500:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   19502:	4638      	mov	r0, r7
   19504:	f000 f98e 	bl	19824 <os_arch_restore_sr>

    if (sched) {
   19508:	bb45      	cbnz	r5, 1955c <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   1950a:	4620      	mov	r0, r4
   1950c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   1950e:	b315      	cbz	r5, 19556 <os_sem_pend+0x7e>
        current->t_obj = sem;
   19510:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   19512:	7b73      	ldrb	r3, [r6, #13]
   19514:	f043 0302 	orr.w	r3, r3, #2
   19518:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   1951a:	f8d4 c000 	ldr.w	ip, [r4]
   1951e:	f1bc 0f00 	cmp.w	ip, #0
   19522:	d00e      	beq.n	19542 <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   19524:	4663      	mov	r3, ip
        last = NULL;
   19526:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   19528:	b133      	cbz	r3, 19538 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   1952a:	7af1      	ldrb	r1, [r6, #11]
   1952c:	7ada      	ldrb	r2, [r3, #11]
   1952e:	4291      	cmp	r1, r2
   19530:	d302      	bcc.n	19538 <os_sem_pend+0x60>
                last = entry;
   19532:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   19534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   19536:	e7f7      	b.n	19528 <os_sem_pend+0x50>
        if (last) {
   19538:	b118      	cbz	r0, 19542 <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   1953a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1953c:	64f3      	str	r3, [r6, #76]	; 0x4c
   1953e:	64c6      	str	r6, [r0, #76]	; 0x4c
   19540:	e002      	b.n	19548 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   19542:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
   19546:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
   19548:	4629      	mov	r1, r5
   1954a:	4630      	mov	r0, r6
   1954c:	f7ff fe9a 	bl	19284 <os_sched_sleep>
        ret = OS_OK;
   19550:	2400      	movs	r4, #0
        sched = 1;
   19552:	2501      	movs	r5, #1
   19554:	e7d5      	b.n	19502 <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   19556:	2406      	movs	r4, #6
    sched = 0;
   19558:	2500      	movs	r5, #0
   1955a:	e7d2      	b.n	19502 <os_sem_pend+0x2a>
        os_sched(NULL);
   1955c:	2000      	movs	r0, #0
   1955e:	f7ff ff59 	bl	19414 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   19562:	7b73      	ldrb	r3, [r6, #13]
   19564:	f013 0f02 	tst.w	r3, #2
   19568:	d101      	bne.n	1956e <os_sem_pend+0x96>
            ret = OS_OK;
   1956a:	2400      	movs	r4, #0
   1956c:	e7cd      	b.n	1950a <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   1956e:	f000 f953 	bl	19818 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   19572:	7b73      	ldrb	r3, [r6, #13]
   19574:	f023 0302 	bic.w	r3, r3, #2
   19578:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
   1957a:	f000 f953 	bl	19824 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   1957e:	2406      	movs	r4, #6
   19580:	e7c3      	b.n	1950a <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   19582:	2409      	movs	r4, #9
   19584:	e7c1      	b.n	1950a <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   19586:	2403      	movs	r4, #3
   19588:	e7bf      	b.n	1950a <os_sem_pend+0x32>
   1958a:	bf00      	nop
   1958c:	2000de88 	.word	0x2000de88

00019590 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   19590:	2300      	movs	r3, #0
   19592:	e003      	b.n	1959c <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
   19594:	4a03      	ldr	r2, [pc, #12]	; (195a4 <_clear_stack+0x14>)
   19596:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   1959a:	3301      	adds	r3, #1
   1959c:	428b      	cmp	r3, r1
   1959e:	dbf9      	blt.n	19594 <_clear_stack+0x4>
    }
}
   195a0:	4770      	bx	lr
   195a2:	bf00      	nop
   195a4:	deadbeef 	.word	0xdeadbeef

000195a8 <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
   195a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   195ac:	4604      	mov	r4, r0
   195ae:	460f      	mov	r7, r1
   195b0:	4690      	mov	r8, r2
   195b2:	461d      	mov	r5, r3
   195b4:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
   195b8:	2250      	movs	r2, #80	; 0x50
   195ba:	2100      	movs	r1, #0
   195bc:	f000 fa99 	bl	19af2 <memset>

    t->t_func = func;
   195c0:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
   195c4:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   195c6:	f000 f927 	bl	19818 <os_arch_save_sr>
    rc = g_task_id;
   195ca:	4b2b      	ldr	r3, [pc, #172]	; (19678 <os_task_init+0xd0>)
   195cc:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
   195ce:	1c6a      	adds	r2, r5, #1
   195d0:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   195d2:	f000 f927 	bl	19824 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
   195d6:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
   195d8:	f89d 3018 	ldrb.w	r3, [sp, #24]
   195dc:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
   195de:	2301      	movs	r3, #1
   195e0:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   195e2:	6127      	str	r7, [r4, #16]
    t->t_next_wakeup = 0;
   195e4:	2300      	movs	r3, #0
   195e6:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
   195e8:	f104 0720 	add.w	r7, r4, #32
   195ec:	4638      	mov	r0, r7
   195ee:	f7ff fda3 	bl	19138 <os_sanity_check_init>
    if (rc != OS_OK) {
   195f2:	4605      	mov	r5, r0
   195f4:	2800      	cmp	r0, #0
   195f6:	d132      	bne.n	1965e <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
   195f8:	9b07      	ldr	r3, [sp, #28]
   195fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   195fe:	d005      	beq.n	1960c <os_task_init+0x64>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
   19600:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
   19602:	4638      	mov	r0, r7
   19604:	f7ff fda0 	bl	19148 <os_sanity_check_register>
        if (rc != OS_OK) {
   19608:	4605      	mov	r5, r0
   1960a:	bb40      	cbnz	r0, 1965e <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
   1960c:	4631      	mov	r1, r6
   1960e:	9808      	ldr	r0, [sp, #32]
   19610:	f7ff ffbe 	bl	19590 <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
   19614:	9b08      	ldr	r3, [sp, #32]
   19616:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   1961a:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
   1961c:	8126      	strh	r6, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
   1961e:	4632      	mov	r2, r6
   19620:	4620      	mov	r0, r4
   19622:	f000 f907 	bl	19834 <os_arch_task_stack_init>
   19626:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   19628:	4b14      	ldr	r3, [pc, #80]	; (1967c <os_task_init+0xd4>)
   1962a:	681b      	ldr	r3, [r3, #0]
   1962c:	b15b      	cbz	r3, 19646 <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
   1962e:	7ae1      	ldrb	r1, [r4, #11]
   19630:	7ada      	ldrb	r2, [r3, #11]
   19632:	4291      	cmp	r1, r2
   19634:	d001      	beq.n	1963a <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   19636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19638:	e7f8      	b.n	1962c <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
   1963a:	2300      	movs	r3, #0
   1963c:	461a      	mov	r2, r3
   1963e:	4619      	mov	r1, r3
   19640:	4618      	mov	r0, r3
   19642:	f7fe fe53 	bl	182ec <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   19646:	6423      	str	r3, [r4, #64]	; 0x40
   19648:	4b0c      	ldr	r3, [pc, #48]	; (1967c <os_task_init+0xd4>)
   1964a:	685a      	ldr	r2, [r3, #4]
   1964c:	6014      	str	r4, [r2, #0]
   1964e:	f104 0240 	add.w	r2, r4, #64	; 0x40
   19652:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
   19654:	4620      	mov	r0, r4
   19656:	f7ff fdc7 	bl	191e8 <os_sched_insert>
   1965a:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   1965c:	b110      	cbz	r0, 19664 <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
   1965e:	4628      	mov	r0, r5
   19660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
   19664:	f7fe fefc 	bl	18460 <os_started>
   19668:	b908      	cbnz	r0, 1966e <os_task_init+0xc6>
    return (0);
   1966a:	4605      	mov	r5, r0
   1966c:	e7f7      	b.n	1965e <os_task_init+0xb6>
        os_sched(NULL);
   1966e:	2000      	movs	r0, #0
   19670:	f7ff fed0 	bl	19414 <os_sched>
   19674:	e7f3      	b.n	1965e <os_task_init+0xb6>
   19676:	bf00      	nop
   19678:	2000deb4 	.word	0x2000deb4
   1967c:	2000deb8 	.word	0x2000deb8

00019680 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   19680:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   19684:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   19686:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   1968a:	e9d1 4500 	ldrd	r4, r5, [r1]
   1968e:	eb14 0b03 	adds.w	fp, r4, r3
   19692:	f145 0c00 	adc.w	ip, r5, #0
   19696:	e9c2 bc00 	strd	fp, ip, [r2]
   1969a:	688b      	ldr	r3, [r1, #8]
   1969c:	f641 6184 	movw	r1, #7812	; 0x1e84
   196a0:	fb01 3000 	mla	r0, r1, r0, r3
   196a4:	6090      	str	r0, [r2, #8]
   196a6:	4b08      	ldr	r3, [pc, #32]	; (196c8 <os_deltatime+0x48>)
   196a8:	4298      	cmp	r0, r3
   196aa:	dd0a      	ble.n	196c2 <os_deltatime+0x42>
   196ac:	f11b 0401 	adds.w	r4, fp, #1
   196b0:	f14c 0500 	adc.w	r5, ip, #0
   196b4:	e9c2 4500 	strd	r4, r5, [r2]
   196b8:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   196bc:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   196c0:	6090      	str	r0, [r2, #8]
}
   196c2:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   196c6:	4770      	bx	lr
   196c8:	000f423f 	.word	0x000f423f

000196cc <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   196cc:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   196ce:	1e04      	subs	r4, r0, #0
   196d0:	db0d      	blt.n	196ee <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   196d2:	f000 f8a1 	bl	19818 <os_arch_save_sr>
   196d6:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   196d8:	4a11      	ldr	r2, [pc, #68]	; (19720 <os_time_tick+0x54>)
   196da:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
   196dc:	18e0      	adds	r0, r4, r3
   196de:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   196e0:	ea90 0f03 	teq	r0, r3
   196e4:	d409      	bmi.n	196fa <os_time_tick+0x2e>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   196e6:	4628      	mov	r0, r5
   196e8:	f000 f89c 	bl	19824 <os_arch_restore_sr>
}
   196ec:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   196ee:	2300      	movs	r3, #0
   196f0:	461a      	mov	r2, r3
   196f2:	4619      	mov	r1, r3
   196f4:	4618      	mov	r0, r3
   196f6:	f7fe fdf9 	bl	182ec <__assert_func>
        delta = g_os_time - basetod.ostime;
   196fa:	4e0a      	ldr	r6, [pc, #40]	; (19724 <os_time_tick+0x58>)
   196fc:	4631      	mov	r1, r6
   196fe:	f851 4b08 	ldr.w	r4, [r1], #8
   19702:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   19704:	460a      	mov	r2, r1
   19706:	4620      	mov	r0, r4
   19708:	f7ff ffba 	bl	19680 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   1970c:	f106 0118 	add.w	r1, r6, #24
   19710:	460a      	mov	r2, r1
   19712:	4620      	mov	r0, r4
   19714:	f7ff ffb4 	bl	19680 <os_deltatime>
        basetod.ostime = g_os_time;
   19718:	4b01      	ldr	r3, [pc, #4]	; (19720 <os_time_tick+0x54>)
   1971a:	681b      	ldr	r3, [r3, #0]
   1971c:	6033      	str	r3, [r6, #0]
   1971e:	e7e2      	b.n	196e6 <os_time_tick+0x1a>
   19720:	2000dec0 	.word	0x2000dec0
   19724:	2000d9b8 	.word	0x2000d9b8

00019728 <os_time_get>:
}
   19728:	4b01      	ldr	r3, [pc, #4]	; (19730 <os_time_get+0x8>)
   1972a:	6818      	ldr	r0, [r3, #0]
   1972c:	4770      	bx	lr
   1972e:	bf00      	nop
   19730:	2000dec0 	.word	0x2000dec0

00019734 <os_time_advance>:

void
os_time_advance(int ticks)
{
   19734:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   19736:	1e04      	subs	r4, r0, #0
   19738:	db09      	blt.n	1974e <os_time_advance+0x1a>

    if (ticks > 0) {
   1973a:	2c00      	cmp	r4, #0
   1973c:	dd06      	ble.n	1974c <os_time_advance+0x18>
        if (!os_started()) {
   1973e:	f7fe fe8f 	bl	18460 <os_started>
   19742:	b950      	cbnz	r0, 1975a <os_time_advance+0x26>
            g_os_time += ticks;
   19744:	4a0a      	ldr	r2, [pc, #40]	; (19770 <os_time_advance+0x3c>)
   19746:	6813      	ldr	r3, [r2, #0]
   19748:	441c      	add	r4, r3
   1974a:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   1974c:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   1974e:	2300      	movs	r3, #0
   19750:	461a      	mov	r2, r3
   19752:	4619      	mov	r1, r3
   19754:	4618      	mov	r0, r3
   19756:	f7fe fdc9 	bl	182ec <__assert_func>
            os_time_tick(ticks);
   1975a:	4620      	mov	r0, r4
   1975c:	f7ff ffb6 	bl	196cc <os_time_tick>
            os_callout_tick();
   19760:	f7fe ffa6 	bl	186b0 <os_callout_tick>
            os_sched_os_timer_exp();
   19764:	f7ff fe12 	bl	1938c <os_sched_os_timer_exp>
            os_sched(NULL);
   19768:	2000      	movs	r0, #0
   1976a:	f7ff fe53 	bl	19414 <os_sched>
}
   1976e:	e7ed      	b.n	1974c <os_time_advance+0x18>
   19770:	2000dec0 	.word	0x2000dec0

00019774 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   19774:	b900      	cbnz	r0, 19778 <os_time_delay+0x4>
   19776:	4770      	bx	lr
{
   19778:	b538      	push	{r3, r4, r5, lr}
   1977a:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1977c:	f000 f84c 	bl	19818 <os_arch_save_sr>
   19780:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   19782:	f7ff fd73 	bl	1926c <os_sched_get_current_task>
   19786:	4621      	mov	r1, r4
   19788:	f7ff fd7c 	bl	19284 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   1978c:	4628      	mov	r0, r5
   1978e:	f000 f849 	bl	19824 <os_arch_restore_sr>
        os_sched(NULL);
   19792:	2000      	movs	r0, #0
   19794:	f7ff fe3e 	bl	19414 <os_sched>
    }
}
   19798:	bd38      	pop	{r3, r4, r5, pc}
	...

0001979c <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   1979c:	b570      	push	{r4, r5, r6, lr}
   1979e:	4605      	mov	r5, r0
   197a0:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   197a2:	f000 f839 	bl	19818 <os_arch_save_sr>
   197a6:	4606      	mov	r6, r0
    if (tv != NULL) {
   197a8:	b145      	cbz	r5, 197bc <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   197aa:	f7ff ffbd 	bl	19728 <os_time_get>
   197ae:	4908      	ldr	r1, [pc, #32]	; (197d0 <os_gettimeofday+0x34>)
   197b0:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   197b4:	462a      	mov	r2, r5
   197b6:	1ac0      	subs	r0, r0, r3
   197b8:	f7ff ff62 	bl	19680 <os_deltatime>
    }

    if (tz != NULL) {
   197bc:	b114      	cbz	r4, 197c4 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   197be:	4b04      	ldr	r3, [pc, #16]	; (197d0 <os_gettimeofday+0x34>)
   197c0:	6a98      	ldr	r0, [r3, #40]	; 0x28
   197c2:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   197c4:	4630      	mov	r0, r6
   197c6:	f000 f82d 	bl	19824 <os_arch_restore_sr>

    return (0);
}
   197ca:	2000      	movs	r0, #0
   197cc:	bd70      	pop	{r4, r5, r6, pc}
   197ce:	bf00      	nop
   197d0:	2000d9b8 	.word	0x2000d9b8

000197d4 <os_time_ms_to_ticks>:
  return (tv.tv_sec * 1000000 + tv.tv_usec);
}

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   197d4:	b538      	push	{r3, r4, r5, lr}
   197d6:	4604      	mov	r4, r0
   197d8:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   197da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   197de:	2300      	movs	r3, #0
   197e0:	01c0      	lsls	r0, r0, #7
   197e2:	0e61      	lsrs	r1, r4, #25
   197e4:	f002 f88a 	bl	1b8fc <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   197e8:	2901      	cmp	r1, #1
   197ea:	bf08      	it	eq
   197ec:	2800      	cmpeq	r0, #0
   197ee:	d202      	bcs.n	197f6 <os_time_ms_to_ticks+0x22>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   197f0:	6028      	str	r0, [r5, #0]
    return 0;
   197f2:	2000      	movs	r0, #0
}
   197f4:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
   197f6:	2002      	movs	r0, #2
   197f8:	e7fc      	b.n	197f4 <os_time_ms_to_ticks+0x20>

000197fa <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
   197fa:	b508      	push	{r3, lr}
    os_time_advance(1);
   197fc:	2001      	movs	r0, #1
   197fe:	f7ff ff99 	bl	19734 <os_time_advance>
}
   19802:	bd08      	pop	{r3, pc}

00019804 <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
   19804:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   19806:	f7ff fd19 	bl	1923c <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   1980a:	4b02      	ldr	r3, [pc, #8]	; (19814 <os_arch_ctx_sw+0x10>)
   1980c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19810:	605a      	str	r2, [r3, #4]
}
   19812:	bd08      	pop	{r3, pc}
   19814:	e000ed00 	.word	0xe000ed00

00019818 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   19818:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1981c:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
   1981e:	f000 0001 	and.w	r0, r0, #1
   19822:	4770      	bx	lr

00019824 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
   19824:	b900      	cbnz	r0, 19828 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   19826:	b662      	cpsie	i
        __enable_irq();
    }
}
   19828:	4770      	bx	lr

0001982a <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1982a:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
   1982e:	f000 0001 	and.w	r0, r0, #1
   19832:	4770      	bx	lr

00019834 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   19834:	b570      	push	{r4, r5, r6, lr}
   19836:	4606      	mov	r6, r0
   19838:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   1983a:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
   1983e:	2309      	movs	r3, #9
   19840:	e003      	b.n	1984a <os_arch_task_stack_init+0x16>
        s[i] = 0;
   19842:	2200      	movs	r2, #0
   19844:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
   19848:	3301      	adds	r3, #1
   1984a:	2b0d      	cmp	r3, #13
   1984c:	ddf9      	ble.n	19842 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   1984e:	4620      	mov	r0, r4
   19850:	f000 f8b6 	bl	199c0 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   19854:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   19858:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
   1985c:	6973      	ldr	r3, [r6, #20]
   1985e:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   19862:	69b3      	ldr	r3, [r6, #24]
   19864:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
   19868:	f06f 0302 	mvn.w	r3, #2
   1986c:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
   19870:	4620      	mov	r0, r4
   19872:	bd70      	pop	{r4, r5, r6, pc}

00019874 <os_arch_init>:

void
os_arch_init(void)
{
   19874:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   19876:	4a04      	ldr	r2, [pc, #16]	; (19888 <os_arch_init+0x14>)
   19878:	6953      	ldr	r3, [r2, #20]
   1987a:	f043 0310 	orr.w	r3, r3, #16
   1987e:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   19880:	f7fe fdf4 	bl	1846c <os_init_idle_task>
}
   19884:	bd08      	pop	{r3, pc}
   19886:	bf00      	nop
   19888:	e000ed00 	.word	0xe000ed00

0001988c <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   1988c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1988e:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   19892:	b90c      	cbnz	r4, 19898 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   19894:	2400      	movs	r4, #0
   19896:	e009      	b.n	198ac <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   19898:	2007      	movs	r0, #7
   1989a:	e02e      	b.n	198fa <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   1989c:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   198a0:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   198a4:	26ff      	movs	r6, #255	; 0xff
   198a6:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   198aa:	3401      	adds	r4, #1
   198ac:	2cef      	cmp	r4, #239	; 0xef
   198ae:	d9f5      	bls.n	1989c <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   198b0:	f06f 040d 	mvn.w	r4, #13
   198b4:	e007      	b.n	198c6 <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   198b6:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   198b8:	4e12      	ldr	r6, [pc, #72]	; (19904 <os_arch_os_init+0x78>)
   198ba:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   198bc:	3510      	adds	r5, #16
   198be:	4f12      	ldr	r7, [pc, #72]	; (19908 <os_arch_os_init+0x7c>)
   198c0:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   198c4:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   198c6:	2c25      	cmp	r4, #37	; 0x25
   198c8:	ddf5      	ble.n	198b6 <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   198ca:	4c0e      	ldr	r4, [pc, #56]	; (19904 <os_arch_os_init+0x78>)
   198cc:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   198ce:	4e0f      	ldr	r6, [pc, #60]	; (1990c <os_arch_os_init+0x80>)
   198d0:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   198d2:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   198d4:	4e0e      	ldr	r6, [pc, #56]	; (19910 <os_arch_os_init+0x84>)
   198d6:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   198d8:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   198da:	4e0e      	ldr	r6, [pc, #56]	; (19914 <os_arch_os_init+0x88>)
   198dc:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   198de:	25e0      	movs	r5, #224	; 0xe0
   198e0:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   198e4:	2520      	movs	r5, #32
   198e6:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   198e8:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   198ec:	f014 0f01 	tst.w	r4, #1
   198f0:	d004      	beq.n	198fc <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   198f2:	f8df c024 	ldr.w	ip, [pc, #36]	; 19918 <os_arch_os_init+0x8c>
   198f6:	df00      	svc	0
        err = OS_OK;
   198f8:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   198fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   198fc:	f7ff ffba 	bl	19874 <os_arch_init>
        err = OS_OK;
   19900:	2000      	movs	r0, #0
   19902:	e7fa      	b.n	198fa <os_arch_os_init+0x6e>
   19904:	e000ed00 	.word	0xe000ed00
   19908:	00019a5f 	.word	0x00019a5f
   1990c:	000199c7 	.word	0x000199c7
   19910:	00019a0d 	.word	0x00019a0d
   19914:	00019a53 	.word	0x00019a53
   19918:	00019875 	.word	0x00019875

0001991c <os_arch_start>:

uint32_t
os_arch_start(void)
{
   1991c:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   1991e:	f7ff fd73 	bl	19408 <os_sched_next_task>
   19922:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   19924:	f7ff fca8 	bl	19278 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   19928:	6823      	ldr	r3, [r4, #0]
   1992a:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1992c:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   19930:	2106      	movs	r1, #6
   19932:	2080      	movs	r0, #128	; 0x80
   19934:	f000 fde8 	bl	1a508 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   19938:	4b03      	ldr	r3, [pc, #12]	; (19948 <os_arch_start+0x2c>)
   1993a:	2201      	movs	r2, #1
   1993c:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   1993e:	4620      	mov	r0, r4
   19940:	f7ff ff60 	bl	19804 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   19944:	69a0      	ldr	r0, [r4, #24]
   19946:	bd10      	pop	{r4, pc}
   19948:	2000de88 	.word	0x2000de88

0001994c <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   1994c:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   1994e:	4814      	ldr	r0, [pc, #80]	; (199a0 <os_arch_os_start+0x54>)
   19950:	6800      	ldr	r0, [r0, #0]
   19952:	3804      	subs	r0, #4
   19954:	f000 f82a 	bl	199ac <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   19958:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1995c:	b9d4      	cbnz	r4, 19994 <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1995e:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   19962:	f004 0403 	and.w	r4, r4, #3
   19966:	2c03      	cmp	r4, #3
   19968:	d808      	bhi.n	1997c <os_arch_os_start+0x30>
   1996a:	e8df f004 	tbb	[pc, r4]
   1996e:	1515      	.short	0x1515
   19970:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   19972:	4c0c      	ldr	r4, [pc, #48]	; (199a4 <os_arch_os_start+0x58>)
   19974:	6824      	ldr	r4, [r4, #0]
   19976:	f014 0f01 	tst.w	r4, #1
   1997a:	d10f      	bne.n	1999c <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
   1997c:	f8df c028 	ldr.w	ip, [pc, #40]	; 199a8 <os_arch_os_start+0x5c>
   19980:	df00      	svc	0
   19982:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
   19984:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   19986:	4c07      	ldr	r4, [pc, #28]	; (199a4 <os_arch_os_start+0x58>)
   19988:	6824      	ldr	r4, [r4, #0]
   1998a:	f014 0f01 	tst.w	r4, #1
   1998e:	d1f5      	bne.n	1997c <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
   19990:	2008      	movs	r0, #8
   19992:	e7f7      	b.n	19984 <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
   19994:	2007      	movs	r0, #7
   19996:	e7f5      	b.n	19984 <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
   19998:	2008      	movs	r0, #8
   1999a:	e7f3      	b.n	19984 <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
   1999c:	2008      	movs	r0, #8
   1999e:	e7f1      	b.n	19984 <os_arch_os_start+0x38>
   199a0:	2000dde8 	.word	0x2000dde8
   199a4:	2000d9e8 	.word	0x2000d9e8
   199a8:	0001991d 	.word	0x0001991d

000199ac <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   199ac:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   199b0:	4832      	ldr	r0, [pc, #200]	; (19a7c <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   199b2:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   199b4:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   199b6:	f380 8814 	msr	CONTROL, r0
        ISB
   199ba:	f3bf 8f6f 	isb	sy
        BX      LR
   199be:	4770      	bx	lr

000199c0 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   199c0:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   199c4:	4770      	bx	lr

000199c6 <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   199c6:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   199ca:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   199cc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   199d0:	b951      	cbnz	r1, 199e8 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   199d2:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   199d6:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   199d8:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   199da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   199de:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   199e2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   199e6:	4770      	bx	lr

000199e8 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   199e8:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   199ea:	4a25      	ldr	r2, [pc, #148]	; (19a80 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   199ec:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   199ee:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   199f0:	d809      	bhi.n	19a06 <SVC_Done>

        LDR     R4,=SVC_Table-4
   199f2:	4c24      	ldr	r4, [pc, #144]	; (19a84 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   199f4:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   199f8:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   199fc:	47a0      	blx	r4

        MRS     R12,PSP
   199fe:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   19a02:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

00019a06 <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   19a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   19a0a:	4770      	bx	lr

00019a0c <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   19a0c:	4b1e      	ldr	r3, [pc, #120]	; (19a88 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   19a0e:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   19a10:	4b1e      	ldr	r3, [pc, #120]	; (19a8c <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   19a12:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   19a14:	4291      	cmp	r1, r2
        IT      EQ
   19a16:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   19a18:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   19a1a:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
   19a1e:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
   19a22:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
   19a24:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
   19a28:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   19a2c:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   19a30:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   19a32:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
   19a36:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
   19a3a:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
   19a3e:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
   19a40:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
   19a44:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
   19a48:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
   19a4c:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   19a50:	4770      	bx	lr

00019a52 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   19a52:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   19a54:	f7ff fed1 	bl	197fa <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   19a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   19a5c:	4770      	bx	lr

00019a5e <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   19a5e:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   19a62:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   19a64:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   19a68:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   19a6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   19a70:	4668      	mov	r0, sp
        BL      os_default_irq
   19a72:	f7fe fc61 	bl	18338 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   19a76:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   19a7a:	4770      	bx	lr
        LDR     R0,=os_flags
   19a7c:	2000d9e8 	.word	0x2000d9e8
        LDR     R2,=SVC_Count
   19a80:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   19a84:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   19a88:	20000114 	.word	0x20000114
        LDR     R3,=g_current_task      /* Get current task */
   19a8c:	2000deb0 	.word	0x2000deb0

00019a90 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
   19a90:	b470      	push	{r4, r5, r6}
   19a92:	f04f 0500 	mov.w	r5, #0
   19a96:	f022 0603 	bic.w	r6, r2, #3
   19a9a:	e005      	b.n	19aa8 <test1>

00019a9c <loop1>:
   19a9c:	5943      	ldr	r3, [r0, r5]
   19a9e:	594c      	ldr	r4, [r1, r5]
   19aa0:	42a3      	cmp	r3, r4
   19aa2:	d104      	bne.n	19aae <res1>
   19aa4:	f105 0504 	add.w	r5, r5, #4

00019aa8 <test1>:
   19aa8:	42b5      	cmp	r5, r6
   19aaa:	d1f7      	bne.n	19a9c <loop1>
   19aac:	e00d      	b.n	19aca <test2>

00019aae <res1>:
   19aae:	ba1b      	rev	r3, r3
   19ab0:	ba24      	rev	r4, r4
   19ab2:	1b1b      	subs	r3, r3, r4
   19ab4:	bf8c      	ite	hi
   19ab6:	2301      	movhi	r3, #1
   19ab8:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   19abc:	e009      	b.n	19ad2 <done>

00019abe <loop2>:
   19abe:	5d43      	ldrb	r3, [r0, r5]
   19ac0:	5d4c      	ldrb	r4, [r1, r5]
   19ac2:	1b1b      	subs	r3, r3, r4
   19ac4:	d105      	bne.n	19ad2 <done>
   19ac6:	f105 0501 	add.w	r5, r5, #1

00019aca <test2>:
   19aca:	4295      	cmp	r5, r2
   19acc:	d1f7      	bne.n	19abe <loop2>
   19ace:	f04f 0300 	mov.w	r3, #0

00019ad2 <done>:
   19ad2:	4618      	mov	r0, r3
   19ad4:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   19ad6:	4770      	bx	lr

00019ad8 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   19ad8:	e001      	b.n	19ade <test1>

00019ada <loop1>:
   19ada:	588b      	ldr	r3, [r1, r2]
   19adc:	5083      	str	r3, [r0, r2]

00019ade <test1>:
   19ade:	3a04      	subs	r2, #4
   19ae0:	d5fb      	bpl.n	19ada <loop1>
   19ae2:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   19ae6:	e001      	b.n	19aec <test2>

00019ae8 <loop2>:
   19ae8:	5c8b      	ldrb	r3, [r1, r2]
   19aea:	5483      	strb	r3, [r0, r2]

00019aec <test2>:
   19aec:	3a01      	subs	r2, #1
   19aee:	d5fb      	bpl.n	19ae8 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   19af0:	4770      	bx	lr

00019af2 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   19af2:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   19af4:	4605      	mov	r5, r0
   19af6:	b2c9      	uxtb	r1, r1
   19af8:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   19afc:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   19b00:	18ab      	adds	r3, r5, r2
   19b02:	2403      	movs	r4, #3
   19b04:	4023      	ands	r3, r4
   19b06:	1ad3      	subs	r3, r2, r3
   19b08:	d40b      	bmi.n	19b22 <memset+0x30>
   19b0a:	e001      	b.n	19b10 <memset+0x1e>
   19b0c:	3a01      	subs	r2, #1
   19b0e:	54a9      	strb	r1, [r5, r2]
   19b10:	429a      	cmp	r2, r3
   19b12:	d1fb      	bne.n	19b0c <memset+0x1a>
   19b14:	e000      	b.n	19b18 <memset+0x26>
   19b16:	50a9      	str	r1, [r5, r2]
   19b18:	3a04      	subs	r2, #4
   19b1a:	d5fc      	bpl.n	19b16 <memset+0x24>
   19b1c:	3204      	adds	r2, #4
   19b1e:	e000      	b.n	19b22 <memset+0x30>
   19b20:	54a9      	strb	r1, [r5, r2]
   19b22:	3a01      	subs	r2, #1
   19b24:	d5fc      	bpl.n	19b20 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   19b26:	bc30      	pop	{r4, r5}
   19b28:	4770      	bx	lr

00019b2a <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   19b2a:	b430      	push	{r4, r5}
   19b2c:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   19b2e:	1c55      	adds	r5, r2, #1
   19b30:	7813      	ldrb	r3, [r2, #0]
   19b32:	1c4c      	adds	r4, r1, #1
   19b34:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
   19b36:	1a18      	subs	r0, r3, r0
   19b38:	d103      	bne.n	19b42 <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
   19b3a:	462a      	mov	r2, r5
   19b3c:	4621      	mov	r1, r4
		if (d || !ch)
   19b3e:	2b00      	cmp	r3, #0
   19b40:	d1f5      	bne.n	19b2e <strcmp+0x4>
			break;
	}

	return d;
}
   19b42:	bc30      	pop	{r4, r5}
   19b44:	4770      	bx	lr

00019b46 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   19b46:	4603      	mov	r3, r0
	while (*ss)
   19b48:	e000      	b.n	19b4c <strlen+0x6>
		ss++;
   19b4a:	3301      	adds	r3, #1
	while (*ss)
   19b4c:	781a      	ldrb	r2, [r3, #0]
   19b4e:	2a00      	cmp	r2, #0
   19b50:	d1fb      	bne.n	19b4a <strlen+0x4>
	return ss - s;
}
   19b52:	1a18      	subs	r0, r3, r0
   19b54:	4770      	bx	lr

00019b56 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   19b56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19b5a:	b082      	sub	sp, #8
   19b5c:	e9cd 0100 	strd	r0, r1, [sp]
   19b60:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   19b62:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
   19b66:	2401      	movs	r4, #1
   19b68:	2500      	movs	r5, #0
    while (num / d >= p->base)
   19b6a:	e004      	b.n	19b76 <ui2a+0x20>
        d *= p->base;
   19b6c:	fb06 f305 	mul.w	r3, r6, r5
   19b70:	fba4 4506 	umull	r4, r5, r4, r6
   19b74:	441d      	add	r5, r3
    while (num / d >= p->base)
   19b76:	4622      	mov	r2, r4
   19b78:	462b      	mov	r3, r5
   19b7a:	e9dd 0100 	ldrd	r0, r1, [sp]
   19b7e:	f001 febd 	bl	1b8fc <__aeabi_uldivmod>
   19b82:	f899 6003 	ldrb.w	r6, [r9, #3]
   19b86:	2700      	movs	r7, #0
   19b88:	42b9      	cmp	r1, r7
   19b8a:	bf08      	it	eq
   19b8c:	42b0      	cmpeq	r0, r6
   19b8e:	d2ed      	bcs.n	19b6c <ui2a+0x16>
    int n = 0;
   19b90:	f04f 0a00 	mov.w	sl, #0
   19b94:	e007      	b.n	19ba6 <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   19b96:	2330      	movs	r3, #48	; 0x30
   19b98:	441e      	add	r6, r3
   19b9a:	f888 6000 	strb.w	r6, [r8]
            ++n;
   19b9e:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   19ba2:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
   19ba6:	ea54 0305 	orrs.w	r3, r4, r5
   19baa:	d02e      	beq.n	19c0a <ui2a+0xb4>
        unsigned long long  dgt = num / d;
   19bac:	4622      	mov	r2, r4
   19bae:	462b      	mov	r3, r5
   19bb0:	e9dd 0100 	ldrd	r0, r1, [sp]
   19bb4:	f001 fea2 	bl	1b8fc <__aeabi_uldivmod>
   19bb8:	4606      	mov	r6, r0
   19bba:	460f      	mov	r7, r1
        num %= d;
   19bbc:	4622      	mov	r2, r4
   19bbe:	462b      	mov	r3, r5
   19bc0:	e9dd 0100 	ldrd	r0, r1, [sp]
   19bc4:	f001 fe9a 	bl	1b8fc <__aeabi_uldivmod>
   19bc8:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
   19bcc:	f899 2003 	ldrb.w	r2, [r9, #3]
   19bd0:	2300      	movs	r3, #0
   19bd2:	4620      	mov	r0, r4
   19bd4:	4629      	mov	r1, r5
   19bd6:	f001 fe91 	bl	1b8fc <__aeabi_uldivmod>
   19bda:	4604      	mov	r4, r0
   19bdc:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
   19bde:	f1ba 0f00 	cmp.w	sl, #0
   19be2:	d105      	bne.n	19bf0 <ui2a+0x9a>
   19be4:	ea56 0307 	orrs.w	r3, r6, r7
   19be8:	d102      	bne.n	19bf0 <ui2a+0x9a>
   19bea:	ea54 0305 	orrs.w	r3, r4, r5
   19bee:	d1da      	bne.n	19ba6 <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   19bf0:	2f00      	cmp	r7, #0
   19bf2:	bf08      	it	eq
   19bf4:	2e0a      	cmpeq	r6, #10
   19bf6:	d3ce      	bcc.n	19b96 <ui2a+0x40>
   19bf8:	f899 3002 	ldrb.w	r3, [r9, #2]
   19bfc:	f013 0f04 	tst.w	r3, #4
   19c00:	d001      	beq.n	19c06 <ui2a+0xb0>
   19c02:	2337      	movs	r3, #55	; 0x37
   19c04:	e7c8      	b.n	19b98 <ui2a+0x42>
   19c06:	2357      	movs	r3, #87	; 0x57
   19c08:	e7c6      	b.n	19b98 <ui2a+0x42>
        }
    }
    *bf = 0;
   19c0a:	2300      	movs	r3, #0
   19c0c:	f888 3000 	strb.w	r3, [r8]
}
   19c10:	b002      	add	sp, #8
   19c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00019c16 <i2a>:

static void i2a(long long int num, struct param *p)
{
   19c16:	b508      	push	{r3, lr}
    if (num < 0) {
   19c18:	2800      	cmp	r0, #0
   19c1a:	f171 0300 	sbcs.w	r3, r1, #0
   19c1e:	db02      	blt.n	19c26 <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   19c20:	f7ff ff99 	bl	19b56 <ui2a>
}
   19c24:	bd08      	pop	{r3, pc}
        num = -num;
   19c26:	4240      	negs	r0, r0
   19c28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   19c2c:	7893      	ldrb	r3, [r2, #2]
   19c2e:	f043 0301 	orr.w	r3, r3, #1
   19c32:	7093      	strb	r3, [r2, #2]
   19c34:	e7f4      	b.n	19c20 <i2a+0xa>

00019c36 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   19c36:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   19c3a:	b2db      	uxtb	r3, r3
   19c3c:	2b09      	cmp	r3, #9
   19c3e:	d90b      	bls.n	19c58 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   19c40:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   19c44:	b2db      	uxtb	r3, r3
   19c46:	2b05      	cmp	r3, #5
   19c48:	d908      	bls.n	19c5c <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   19c4a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   19c4e:	b2db      	uxtb	r3, r3
   19c50:	2b05      	cmp	r3, #5
   19c52:	d805      	bhi.n	19c60 <a2d+0x2a>
        return ch - 'A' + 10;
   19c54:	3837      	subs	r0, #55	; 0x37
   19c56:	4770      	bx	lr
        return ch - '0';
   19c58:	3830      	subs	r0, #48	; 0x30
   19c5a:	4770      	bx	lr
        return ch - 'a' + 10;
   19c5c:	3857      	subs	r0, #87	; 0x57
   19c5e:	4770      	bx	lr
    else
        return -1;
   19c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19c64:	4770      	bx	lr

00019c66 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   19c66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19c6a:	4605      	mov	r5, r0
   19c6c:	4688      	mov	r8, r1
   19c6e:	4617      	mov	r7, r2
   19c70:	4699      	mov	r9, r3
    const char *p = *src;
   19c72:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   19c74:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   19c76:	4628      	mov	r0, r5
   19c78:	f7ff ffdd 	bl	19c36 <a2d>
   19c7c:	2800      	cmp	r0, #0
   19c7e:	db06      	blt.n	19c8e <a2i+0x28>
        if (digit > base)
   19c80:	42b8      	cmp	r0, r7
   19c82:	dc04      	bgt.n	19c8e <a2i+0x28>
            break;
        num = num * base + digit;
   19c84:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
   19c88:	7825      	ldrb	r5, [r4, #0]
   19c8a:	3401      	adds	r4, #1
   19c8c:	e7f3      	b.n	19c76 <a2i+0x10>
    }
    *src = p;
   19c8e:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   19c92:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
   19c96:	4628      	mov	r0, r5
   19c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00019c9c <putf>:

static int putf(FILE *putp, char c)
{
   19c9c:	b500      	push	{lr}
   19c9e:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   19ca0:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   19ca4:	6803      	ldr	r3, [r0, #0]
   19ca6:	681b      	ldr	r3, [r3, #0]
   19ca8:	b14b      	cbz	r3, 19cbe <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   19caa:	2201      	movs	r2, #1
   19cac:	f10d 0107 	add.w	r1, sp, #7
   19cb0:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   19cb2:	2801      	cmp	r0, #1
   19cb4:	d005      	beq.n	19cc2 <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
   19cb6:	2000      	movs	r0, #0
    else
        return 1;
}
   19cb8:	b003      	add	sp, #12
   19cba:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   19cbe:	2000      	movs	r0, #0
   19cc0:	e7fa      	b.n	19cb8 <putf+0x1c>
        return 1;
   19cc2:	2001      	movs	r0, #1
   19cc4:	e7f8      	b.n	19cb8 <putf+0x1c>
	...

00019cc8 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   19cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19ccc:	4606      	mov	r6, r0
   19cce:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   19cd0:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   19cd2:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   19cd4:	e001      	b.n	19cda <putchw+0x12>
        n--;
   19cd6:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   19cd8:	4613      	mov	r3, r2
   19cda:	1c5a      	adds	r2, r3, #1
   19cdc:	781b      	ldrb	r3, [r3, #0]
   19cde:	b10b      	cbz	r3, 19ce4 <putchw+0x1c>
   19ce0:	2c00      	cmp	r4, #0
   19ce2:	dcf8      	bgt.n	19cd6 <putchw+0xe>
    if (p->sign)
   19ce4:	78bb      	ldrb	r3, [r7, #2]
   19ce6:	f013 0f01 	tst.w	r3, #1
   19cea:	d000      	beq.n	19cee <putchw+0x26>
        n--;
   19cec:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   19cee:	887b      	ldrh	r3, [r7, #2]
   19cf0:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   19cf4:	b29b      	uxth	r3, r3
   19cf6:	f241 0202 	movw	r2, #4098	; 0x1002
   19cfa:	4293      	cmp	r3, r2
   19cfc:	d01c      	beq.n	19d38 <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
   19cfe:	f640 0202 	movw	r2, #2050	; 0x802
   19d02:	4293      	cmp	r3, r2
   19d04:	d01a      	beq.n	19d3c <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   19d06:	683b      	ldr	r3, [r7, #0]
   19d08:	4d35      	ldr	r5, [pc, #212]	; (19de0 <putchw+0x118>)
   19d0a:	401d      	ands	r5, r3
   19d0c:	b1f5      	cbz	r5, 19d4c <putchw+0x84>
    unsigned written = 0;
   19d0e:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   19d10:	78bb      	ldrb	r3, [r7, #2]
   19d12:	f013 0f01 	tst.w	r3, #1
   19d16:	d11f      	bne.n	19d58 <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   19d18:	887b      	ldrh	r3, [r7, #2]
   19d1a:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   19d1e:	b29b      	uxth	r3, r3
   19d20:	f241 0202 	movw	r2, #4098	; 0x1002
   19d24:	4293      	cmp	r3, r2
   19d26:	d01d      	beq.n	19d64 <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   19d28:	f640 0202 	movw	r2, #2050	; 0x802
   19d2c:	4293      	cmp	r3, r2
   19d2e:	d02a      	beq.n	19d86 <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   19d30:	787b      	ldrb	r3, [r7, #1]
   19d32:	bba3      	cbnz	r3, 19d9e <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   19d34:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
   19d36:	e03d      	b.n	19db4 <putchw+0xec>
        n -= 2;
   19d38:	3c02      	subs	r4, #2
   19d3a:	e7e4      	b.n	19d06 <putchw+0x3e>
        n--;
   19d3c:	3c01      	subs	r4, #1
   19d3e:	e7e2      	b.n	19d06 <putchw+0x3e>
            written += putf(putp, ' ');
   19d40:	2120      	movs	r1, #32
   19d42:	4630      	mov	r0, r6
   19d44:	f7ff ffaa 	bl	19c9c <putf>
   19d48:	4405      	add	r5, r0
        while (n-- > 0)
   19d4a:	4644      	mov	r4, r8
   19d4c:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   19d50:	2c00      	cmp	r4, #0
   19d52:	dcf5      	bgt.n	19d40 <putchw+0x78>
   19d54:	4644      	mov	r4, r8
   19d56:	e7db      	b.n	19d10 <putchw+0x48>
        written += putf(putp, '-');
   19d58:	212d      	movs	r1, #45	; 0x2d
   19d5a:	4630      	mov	r0, r6
   19d5c:	f7ff ff9e 	bl	19c9c <putf>
   19d60:	4405      	add	r5, r0
   19d62:	e7d9      	b.n	19d18 <putchw+0x50>
        written += putf(putp, '0');
   19d64:	2130      	movs	r1, #48	; 0x30
   19d66:	4630      	mov	r0, r6
   19d68:	f7ff ff98 	bl	19c9c <putf>
   19d6c:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   19d6e:	78bb      	ldrb	r3, [r7, #2]
   19d70:	f013 0f04 	tst.w	r3, #4
   19d74:	d005      	beq.n	19d82 <putchw+0xba>
   19d76:	2158      	movs	r1, #88	; 0x58
   19d78:	4630      	mov	r0, r6
   19d7a:	f7ff ff8f 	bl	19c9c <putf>
   19d7e:	4405      	add	r5, r0
   19d80:	e7d6      	b.n	19d30 <putchw+0x68>
   19d82:	2178      	movs	r1, #120	; 0x78
   19d84:	e7f8      	b.n	19d78 <putchw+0xb0>
        written += putf(putp, '0');
   19d86:	2130      	movs	r1, #48	; 0x30
   19d88:	4630      	mov	r0, r6
   19d8a:	f7ff ff87 	bl	19c9c <putf>
   19d8e:	4405      	add	r5, r0
   19d90:	e7ce      	b.n	19d30 <putchw+0x68>
            written += putf(putp, '0');
   19d92:	2130      	movs	r1, #48	; 0x30
   19d94:	4630      	mov	r0, r6
   19d96:	f7ff ff81 	bl	19c9c <putf>
   19d9a:	4405      	add	r5, r0
        while (n-- > 0)
   19d9c:	4644      	mov	r4, r8
   19d9e:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   19da2:	2c00      	cmp	r4, #0
   19da4:	dcf5      	bgt.n	19d92 <putchw+0xca>
   19da6:	4644      	mov	r4, r8
   19da8:	e7c4      	b.n	19d34 <putchw+0x6c>
        written += putf(putp, ch);
   19daa:	4630      	mov	r0, r6
   19dac:	f7ff ff76 	bl	19c9c <putf>
   19db0:	4405      	add	r5, r0
    while ((ch = *bf++))
   19db2:	4643      	mov	r3, r8
   19db4:	f103 0801 	add.w	r8, r3, #1
   19db8:	7819      	ldrb	r1, [r3, #0]
   19dba:	2900      	cmp	r1, #0
   19dbc:	d1f5      	bne.n	19daa <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   19dbe:	78bb      	ldrb	r3, [r7, #2]
   19dc0:	f013 0f08 	tst.w	r3, #8
   19dc4:	d106      	bne.n	19dd4 <putchw+0x10c>
   19dc6:	e008      	b.n	19dda <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
   19dc8:	2120      	movs	r1, #32
   19dca:	4630      	mov	r0, r6
   19dcc:	f7ff ff66 	bl	19c9c <putf>
   19dd0:	4405      	add	r5, r0
        while (n-- > 0)
   19dd2:	463c      	mov	r4, r7
   19dd4:	1e67      	subs	r7, r4, #1
   19dd6:	2c00      	cmp	r4, #0
   19dd8:	dcf6      	bgt.n	19dc8 <putchw+0x100>
    }
    
    return written;
}
   19dda:	4628      	mov	r0, r5
   19ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19de0:	0008ff00 	.word	0x0008ff00

00019de4 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   19de4:	b160      	cbz	r0, 19e00 <intarg+0x1c>
   19de6:	2801      	cmp	r0, #1
   19de8:	d017      	beq.n	19e1a <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   19dea:	bb19      	cbnz	r1, 19e34 <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
   19dec:	6813      	ldr	r3, [r2, #0]
   19dee:	3307      	adds	r3, #7
   19df0:	f023 0307 	bic.w	r3, r3, #7
   19df4:	f103 0108 	add.w	r1, r3, #8
   19df8:	6011      	str	r1, [r2, #0]
   19dfa:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   19dfe:	4770      	bx	lr
        if (sign) {
   19e00:	b129      	cbz	r1, 19e0e <intarg+0x2a>
            val = va_arg(*va, int);
   19e02:	6813      	ldr	r3, [r2, #0]
   19e04:	1d19      	adds	r1, r3, #4
   19e06:	6011      	str	r1, [r2, #0]
   19e08:	6818      	ldr	r0, [r3, #0]
   19e0a:	17c1      	asrs	r1, r0, #31
   19e0c:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   19e0e:	6813      	ldr	r3, [r2, #0]
   19e10:	1d19      	adds	r1, r3, #4
   19e12:	6011      	str	r1, [r2, #0]
   19e14:	6818      	ldr	r0, [r3, #0]
   19e16:	2100      	movs	r1, #0
   19e18:	4770      	bx	lr
        if (sign) {
   19e1a:	b129      	cbz	r1, 19e28 <intarg+0x44>
            val = va_arg(*va, long);
   19e1c:	6813      	ldr	r3, [r2, #0]
   19e1e:	1d19      	adds	r1, r3, #4
   19e20:	6011      	str	r1, [r2, #0]
   19e22:	6818      	ldr	r0, [r3, #0]
   19e24:	17c1      	asrs	r1, r0, #31
   19e26:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   19e28:	6813      	ldr	r3, [r2, #0]
   19e2a:	1d19      	adds	r1, r3, #4
   19e2c:	6011      	str	r1, [r2, #0]
   19e2e:	6818      	ldr	r0, [r3, #0]
   19e30:	2100      	movs	r1, #0
   19e32:	4770      	bx	lr
            val = va_arg(*va, long long);
   19e34:	6813      	ldr	r3, [r2, #0]
   19e36:	3307      	adds	r3, #7
   19e38:	f023 0307 	bic.w	r3, r3, #7
   19e3c:	f103 0108 	add.w	r1, r3, #8
   19e40:	6011      	str	r1, [r2, #0]
   19e42:	e9d3 0100 	ldrd	r0, r1, [r3]
   19e46:	4770      	bx	lr

00019e48 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   19e48:	b570      	push	{r4, r5, r6, lr}
   19e4a:	b08a      	sub	sp, #40	; 0x28
   19e4c:	4605      	mov	r5, r0
   19e4e:	9101      	str	r1, [sp, #4]
   19e50:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   19e52:	ab02      	add	r3, sp, #8
   19e54:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   19e56:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
   19e58:	9b01      	ldr	r3, [sp, #4]
   19e5a:	1c5a      	adds	r2, r3, #1
   19e5c:	9201      	str	r2, [sp, #4]
   19e5e:	7819      	ldrb	r1, [r3, #0]
   19e60:	2900      	cmp	r1, #0
   19e62:	f000 811c 	beq.w	1a09e <tfp_format+0x256>
        if (ch != '%') {
   19e66:	2925      	cmp	r1, #37	; 0x25
   19e68:	d004      	beq.n	19e74 <tfp_format+0x2c>
            written += putf(putp, ch);
   19e6a:	4628      	mov	r0, r5
   19e6c:	f7ff ff16 	bl	19c9c <putf>
   19e70:	4404      	add	r4, r0
   19e72:	e7f1      	b.n	19e58 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   19e74:	2200      	movs	r2, #0
   19e76:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   19e7a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   19e7e:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
   19e82:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
   19e86:	f362 0382 	bfi	r3, r2, #2, #1
   19e8a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   19e8e:	9b01      	ldr	r3, [sp, #4]
   19e90:	1c5a      	adds	r2, r3, #1
   19e92:	9201      	str	r2, [sp, #4]
   19e94:	7818      	ldrb	r0, [r3, #0]
   19e96:	b128      	cbz	r0, 19ea4 <tfp_format+0x5c>
                switch (ch) {
   19e98:	282d      	cmp	r0, #45	; 0x2d
   19e9a:	d04e      	beq.n	19f3a <tfp_format+0xf2>
   19e9c:	2830      	cmp	r0, #48	; 0x30
   19e9e:	d03c      	beq.n	19f1a <tfp_format+0xd2>
   19ea0:	2823      	cmp	r0, #35	; 0x23
   19ea2:	d043      	beq.n	19f2c <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   19ea4:	282a      	cmp	r0, #42	; 0x2a
   19ea6:	d052      	beq.n	19f4e <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   19ea8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   19eac:	b2db      	uxtb	r3, r3
   19eae:	2b09      	cmp	r3, #9
   19eb0:	d961      	bls.n	19f76 <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   19eb2:	286c      	cmp	r0, #108	; 0x6c
   19eb4:	d065      	beq.n	19f82 <tfp_format+0x13a>
            lng = 0;
   19eb6:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   19eb8:	287a      	cmp	r0, #122	; 0x7a
   19eba:	d06f      	beq.n	19f9c <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
   19ebc:	2869      	cmp	r0, #105	; 0x69
   19ebe:	f000 808e 	beq.w	19fde <tfp_format+0x196>
   19ec2:	d970      	bls.n	19fa6 <tfp_format+0x15e>
   19ec4:	2873      	cmp	r0, #115	; 0x73
   19ec6:	f000 80dd 	beq.w	1a084 <tfp_format+0x23c>
   19eca:	f200 8099 	bhi.w	1a000 <tfp_format+0x1b8>
   19ece:	286f      	cmp	r0, #111	; 0x6f
   19ed0:	f000 80c7 	beq.w	1a062 <tfp_format+0x21a>
   19ed4:	2870      	cmp	r0, #112	; 0x70
   19ed6:	d1bf      	bne.n	19e58 <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
   19ed8:	9b00      	ldr	r3, [sp, #0]
   19eda:	1d1a      	adds	r2, r3, #4
   19edc:	9200      	str	r2, [sp, #0]
   19ede:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   19ee0:	2310      	movs	r3, #16
   19ee2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   19ee6:	aa08      	add	r2, sp, #32
   19ee8:	2100      	movs	r1, #0
   19eea:	f7ff fe34 	bl	19b56 <ui2a>
                p.width = 2 * sizeof(void*);
   19eee:	2308      	movs	r3, #8
   19ef0:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   19ef4:	2301      	movs	r3, #1
   19ef6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   19efa:	2130      	movs	r1, #48	; 0x30
   19efc:	4628      	mov	r0, r5
   19efe:	f7ff fecd 	bl	19c9c <putf>
   19f02:	4404      	add	r4, r0
                written += putf(putp, 'x');
   19f04:	2178      	movs	r1, #120	; 0x78
   19f06:	4628      	mov	r0, r5
   19f08:	f7ff fec8 	bl	19c9c <putf>
   19f0c:	4404      	add	r4, r0
                written += putchw(putp, &p);
   19f0e:	a908      	add	r1, sp, #32
   19f10:	4628      	mov	r0, r5
   19f12:	f7ff fed9 	bl	19cc8 <putchw>
   19f16:	4404      	add	r4, r0
                break;
   19f18:	e79e      	b.n	19e58 <tfp_format+0x10>
                    if (!p.left) {
   19f1a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   19f1e:	f013 0f08 	tst.w	r3, #8
   19f22:	d1b4      	bne.n	19e8e <tfp_format+0x46>
                        p.lz = 1;
   19f24:	2301      	movs	r3, #1
   19f26:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   19f2a:	e7b0      	b.n	19e8e <tfp_format+0x46>
                    p.alt = 1;
   19f2c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   19f30:	f043 0302 	orr.w	r3, r3, #2
   19f34:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   19f38:	e7a9      	b.n	19e8e <tfp_format+0x46>
                    p.left = 1;
   19f3a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   19f3e:	f043 0308 	orr.w	r3, r3, #8
   19f42:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   19f46:	2300      	movs	r3, #0
   19f48:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   19f4c:	e79f      	b.n	19e8e <tfp_format+0x46>
                i = intarg(0, 1, &va);
   19f4e:	466a      	mov	r2, sp
   19f50:	2101      	movs	r1, #1
   19f52:	2000      	movs	r0, #0
   19f54:	f7ff ff46 	bl	19de4 <intarg>
                if (i > UCHAR_MAX) {
   19f58:	28ff      	cmp	r0, #255	; 0xff
   19f5a:	dd07      	ble.n	19f6c <tfp_format+0x124>
                    p.width = UCHAR_MAX;
   19f5c:	23ff      	movs	r3, #255	; 0xff
   19f5e:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   19f62:	9b01      	ldr	r3, [sp, #4]
   19f64:	1c5a      	adds	r2, r3, #1
   19f66:	9201      	str	r2, [sp, #4]
   19f68:	7818      	ldrb	r0, [r3, #0]
   19f6a:	e7a2      	b.n	19eb2 <tfp_format+0x6a>
                } else if (i > 0) {
   19f6c:	2800      	cmp	r0, #0
   19f6e:	ddf8      	ble.n	19f62 <tfp_format+0x11a>
                    p.width = i;
   19f70:	f88d 0020 	strb.w	r0, [sp, #32]
   19f74:	e7f5      	b.n	19f62 <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
   19f76:	ab08      	add	r3, sp, #32
   19f78:	220a      	movs	r2, #10
   19f7a:	a901      	add	r1, sp, #4
   19f7c:	f7ff fe73 	bl	19c66 <a2i>
   19f80:	e797      	b.n	19eb2 <tfp_format+0x6a>
                ch = *(fmt++);
   19f82:	9b01      	ldr	r3, [sp, #4]
   19f84:	1c5a      	adds	r2, r3, #1
   19f86:	9201      	str	r2, [sp, #4]
   19f88:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
   19f8a:	286c      	cmp	r0, #108	; 0x6c
   19f8c:	d001      	beq.n	19f92 <tfp_format+0x14a>
                lng = 1;
   19f8e:	2601      	movs	r6, #1
   19f90:	e792      	b.n	19eb8 <tfp_format+0x70>
                    ch = *(fmt++);
   19f92:	1c9a      	adds	r2, r3, #2
   19f94:	9201      	str	r2, [sp, #4]
   19f96:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
   19f98:	2602      	movs	r6, #2
   19f9a:	e78d      	b.n	19eb8 <tfp_format+0x70>
                ch = *(fmt++);
   19f9c:	9b01      	ldr	r3, [sp, #4]
   19f9e:	1c5a      	adds	r2, r3, #1
   19fa0:	9201      	str	r2, [sp, #4]
   19fa2:	7818      	ldrb	r0, [r3, #0]
   19fa4:	e78a      	b.n	19ebc <tfp_format+0x74>
            switch (ch) {
   19fa6:	2858      	cmp	r0, #88	; 0x58
   19fa8:	d040      	beq.n	1a02c <tfp_format+0x1e4>
   19faa:	d80a      	bhi.n	19fc2 <tfp_format+0x17a>
   19fac:	2800      	cmp	r0, #0
   19fae:	d076      	beq.n	1a09e <tfp_format+0x256>
   19fb0:	2825      	cmp	r0, #37	; 0x25
   19fb2:	f47f af51 	bne.w	19e58 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   19fb6:	4601      	mov	r1, r0
   19fb8:	4628      	mov	r0, r5
   19fba:	f7ff fe6f 	bl	19c9c <putf>
   19fbe:	4404      	add	r4, r0
                break;
   19fc0:	e74a      	b.n	19e58 <tfp_format+0x10>
            switch (ch) {
   19fc2:	2863      	cmp	r0, #99	; 0x63
   19fc4:	d108      	bne.n	19fd8 <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
   19fc6:	9b00      	ldr	r3, [sp, #0]
   19fc8:	1d1a      	adds	r2, r3, #4
   19fca:	9200      	str	r2, [sp, #0]
   19fcc:	7819      	ldrb	r1, [r3, #0]
   19fce:	4628      	mov	r0, r5
   19fd0:	f7ff fe64 	bl	19c9c <putf>
   19fd4:	4404      	add	r4, r0
                break;
   19fd6:	e73f      	b.n	19e58 <tfp_format+0x10>
            switch (ch) {
   19fd8:	2864      	cmp	r0, #100	; 0x64
   19fda:	f47f af3d 	bne.w	19e58 <tfp_format+0x10>
                p.base = 10;
   19fde:	230a      	movs	r3, #10
   19fe0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   19fe4:	466a      	mov	r2, sp
   19fe6:	2101      	movs	r1, #1
   19fe8:	4630      	mov	r0, r6
   19fea:	f7ff fefb 	bl	19de4 <intarg>
   19fee:	aa08      	add	r2, sp, #32
   19ff0:	f7ff fe11 	bl	19c16 <i2a>
                written += putchw(putp, &p);
   19ff4:	a908      	add	r1, sp, #32
   19ff6:	4628      	mov	r0, r5
   19ff8:	f7ff fe66 	bl	19cc8 <putchw>
   19ffc:	4404      	add	r4, r0
                break;
   19ffe:	e72b      	b.n	19e58 <tfp_format+0x10>
            switch (ch) {
   1a000:	2875      	cmp	r0, #117	; 0x75
   1a002:	d110      	bne.n	1a026 <tfp_format+0x1de>
                p.base = 10;
   1a004:	230a      	movs	r3, #10
   1a006:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1a00a:	466a      	mov	r2, sp
   1a00c:	2100      	movs	r1, #0
   1a00e:	4630      	mov	r0, r6
   1a010:	f7ff fee8 	bl	19de4 <intarg>
   1a014:	aa08      	add	r2, sp, #32
   1a016:	f7ff fd9e 	bl	19b56 <ui2a>
                written += putchw(putp, &p);
   1a01a:	a908      	add	r1, sp, #32
   1a01c:	4628      	mov	r0, r5
   1a01e:	f7ff fe53 	bl	19cc8 <putchw>
   1a022:	4404      	add	r4, r0
                break;
   1a024:	e718      	b.n	19e58 <tfp_format+0x10>
            switch (ch) {
   1a026:	2878      	cmp	r0, #120	; 0x78
   1a028:	f47f af16 	bne.w	19e58 <tfp_format+0x10>
                p.base = 16;
   1a02c:	2310      	movs	r3, #16
   1a02e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   1a032:	2858      	cmp	r0, #88	; 0x58
   1a034:	bf14      	ite	ne
   1a036:	2300      	movne	r3, #0
   1a038:	2301      	moveq	r3, #1
   1a03a:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1a03e:	f363 0282 	bfi	r2, r3, #2, #1
   1a042:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   1a046:	466a      	mov	r2, sp
   1a048:	2100      	movs	r1, #0
   1a04a:	4630      	mov	r0, r6
   1a04c:	f7ff feca 	bl	19de4 <intarg>
   1a050:	aa08      	add	r2, sp, #32
   1a052:	f7ff fd80 	bl	19b56 <ui2a>
                written += putchw(putp, &p);
   1a056:	a908      	add	r1, sp, #32
   1a058:	4628      	mov	r0, r5
   1a05a:	f7ff fe35 	bl	19cc8 <putchw>
   1a05e:	4404      	add	r4, r0
                break;
   1a060:	e6fa      	b.n	19e58 <tfp_format+0x10>
                p.base = 8;
   1a062:	2308      	movs	r3, #8
   1a064:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1a068:	466a      	mov	r2, sp
   1a06a:	2100      	movs	r1, #0
   1a06c:	4630      	mov	r0, r6
   1a06e:	f7ff feb9 	bl	19de4 <intarg>
   1a072:	aa08      	add	r2, sp, #32
   1a074:	f7ff fd6f 	bl	19b56 <ui2a>
                written += putchw(putp, &p);
   1a078:	a908      	add	r1, sp, #32
   1a07a:	4628      	mov	r0, r5
   1a07c:	f7ff fe24 	bl	19cc8 <putchw>
   1a080:	4404      	add	r4, r0
                break;
   1a082:	e6e9      	b.n	19e58 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   1a084:	9b00      	ldr	r3, [sp, #0]
   1a086:	1d1a      	adds	r2, r3, #4
   1a088:	9200      	str	r2, [sp, #0]
   1a08a:	681b      	ldr	r3, [r3, #0]
   1a08c:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   1a08e:	a908      	add	r1, sp, #32
   1a090:	4628      	mov	r0, r5
   1a092:	f7ff fe19 	bl	19cc8 <putchw>
   1a096:	4404      	add	r4, r0
                p.bf = bf;
   1a098:	ab02      	add	r3, sp, #8
   1a09a:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   1a09c:	e6dc      	b.n	19e58 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   1a09e:	4620      	mov	r0, r4
   1a0a0:	b00a      	add	sp, #40	; 0x28
   1a0a2:	bd70      	pop	{r4, r5, r6, pc}

0001a0a4 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   1a0a4:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   1a0a6:	f7ff fecf 	bl	19e48 <tfp_format>
}
   1a0aa:	bd08      	pop	{r3, pc}

0001a0ac <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
   1a0ac:	b40f      	push	{r0, r1, r2, r3}
   1a0ae:	b500      	push	{lr}
   1a0b0:	b083      	sub	sp, #12
   1a0b2:	aa04      	add	r2, sp, #16
   1a0b4:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   1a0b8:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   1a0ba:	4b04      	ldr	r3, [pc, #16]	; (1a0cc <printf+0x20>)
   1a0bc:	6818      	ldr	r0, [r3, #0]
   1a0be:	f7ff fff1 	bl	1a0a4 <vfprintf>
    va_end(va);
    return rv;
}
   1a0c2:	b003      	add	sp, #12
   1a0c4:	f85d eb04 	ldr.w	lr, [sp], #4
   1a0c8:	b004      	add	sp, #16
   1a0ca:	4770      	bx	lr
   1a0cc:	0001f91c 	.word	0x0001f91c

0001a0d0 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   1a0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a0d2:	b085      	sub	sp, #20
   1a0d4:	4605      	mov	r5, r0
   1a0d6:	460c      	mov	r4, r1
   1a0d8:	4616      	mov	r6, r2
   1a0da:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   1a0dc:	460a      	mov	r2, r1
   1a0de:	4601      	mov	r1, r0
   1a0e0:	4668      	mov	r0, sp
   1a0e2:	f000 f835 	bl	1a150 <fmemopen_w>
    tfp_format(f, fmt, va);
   1a0e6:	463a      	mov	r2, r7
   1a0e8:	4631      	mov	r1, r6
   1a0ea:	f7ff fead 	bl	19e48 <tfp_format>
    if (size > 0) {
   1a0ee:	b12c      	cbz	r4, 1a0fc <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   1a0f0:	9b02      	ldr	r3, [sp, #8]
   1a0f2:	42a3      	cmp	r3, r4
   1a0f4:	d305      	bcc.n	1a102 <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
   1a0f6:	3c01      	subs	r4, #1
   1a0f8:	2300      	movs	r3, #0
   1a0fa:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
   1a0fc:	9802      	ldr	r0, [sp, #8]
   1a0fe:	b005      	add	sp, #20
   1a100:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
   1a102:	9b01      	ldr	r3, [sp, #4]
   1a104:	2200      	movs	r2, #0
   1a106:	701a      	strb	r2, [r3, #0]
   1a108:	e7f8      	b.n	1a0fc <vsnprintf+0x2c>
	...

0001a10c <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   1a10c:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
   1a10e:	460a      	mov	r2, r1
   1a110:	4601      	mov	r1, r0
   1a112:	4b02      	ldr	r3, [pc, #8]	; (1a11c <vprintf+0x10>)
   1a114:	6818      	ldr	r0, [r3, #0]
   1a116:	f7ff ffc5 	bl	1a0a4 <vfprintf>
}
   1a11a:	bd08      	pop	{r3, pc}
   1a11c:	0001f91c 	.word	0x0001f91c

0001a120 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   1a120:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   1a122:	2500      	movs	r5, #0
    
    while (n--)
   1a124:	e000      	b.n	1a128 <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   1a126:	4622      	mov	r2, r4
    while (n--)
   1a128:	1e54      	subs	r4, r2, #1
   1a12a:	b16a      	cbz	r2, 1a148 <memfile_write+0x28>
        f->bytes_written++;
   1a12c:	6883      	ldr	r3, [r0, #8]
   1a12e:	3301      	adds	r3, #1
   1a130:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
   1a132:	68c2      	ldr	r2, [r0, #12]
   1a134:	4293      	cmp	r3, r2
   1a136:	d8f6      	bhi.n	1a126 <memfile_write+0x6>
            *f->buffer++ = *bp++;
   1a138:	6843      	ldr	r3, [r0, #4]
   1a13a:	1c5a      	adds	r2, r3, #1
   1a13c:	6042      	str	r2, [r0, #4]
   1a13e:	780a      	ldrb	r2, [r1, #0]
   1a140:	701a      	strb	r2, [r3, #0]
            i++;
   1a142:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
   1a144:	3101      	adds	r1, #1
   1a146:	e7ee      	b.n	1a126 <memfile_write+0x6>
        }
    }
    
    return i;
}
   1a148:	4628      	mov	r0, r5
   1a14a:	bc30      	pop	{r4, r5}
   1a14c:	4770      	bx	lr
	...

0001a150 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   1a150:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   1a152:	4c04      	ldr	r4, [pc, #16]	; (1a164 <fmemopen_w+0x14>)
   1a154:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   1a156:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   1a158:	2100      	movs	r1, #0
   1a15a:	6081      	str	r1, [r0, #8]
    storage->size = size;
   1a15c:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   1a15e:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a162:	4770      	bx	lr
   1a164:	0001f914 	.word	0x0001f914

0001a168 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   1a168:	2000      	movs	r0, #0
   1a16a:	4770      	bx	lr

0001a16c <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   1a16c:	b510      	push	{r4, lr}
   1a16e:	4608      	mov	r0, r1
   1a170:	4614      	mov	r4, r2
    console_write(bp, n);
   1a172:	4611      	mov	r1, r2
   1a174:	f7fd f9b8 	bl	174e8 <console_write>
    return n;
}
   1a178:	4620      	mov	r0, r4
   1a17a:	bd10      	pop	{r4, pc}

0001a17c <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
   1a17c:	b508      	push	{r3, lr}
    sysinit();
   1a17e:	f7fd fa1b 	bl	175b8 <sysinit_start>
   1a182:	f000 f81b 	bl	1a1bc <sysinit_app>
   1a186:	f7fd fa1d 	bl	175c4 <sysinit_end>
}
   1a18a:	bd08      	pop	{r3, pc}

0001a18c <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   1a18c:	b570      	push	{r4, r5, r6, lr}
   1a18e:	b082      	sub	sp, #8
   1a190:	460c      	mov	r4, r1
   1a192:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   1a194:	b29d      	uxth	r5, r3
   1a196:	9b07      	ldr	r3, [sp, #28]
   1a198:	9300      	str	r3, [sp, #0]
   1a19a:	4603      	mov	r3, r0
   1a19c:	9a06      	ldr	r2, [sp, #24]
   1a19e:	4629      	mov	r1, r5
   1a1a0:	4620      	mov	r0, r4
   1a1a2:	f7fe fdeb 	bl	18d7c <os_mempool_init>
    if (rc != 0) {
   1a1a6:	b108      	cbz	r0, 1a1ac <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1a1a8:	b002      	add	sp, #8
   1a1aa:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   1a1ac:	462b      	mov	r3, r5
   1a1ae:	9a06      	ldr	r2, [sp, #24]
   1a1b0:	b292      	uxth	r2, r2
   1a1b2:	4621      	mov	r1, r4
   1a1b4:	4630      	mov	r0, r6
   1a1b6:	f7fe fc96 	bl	18ae6 <os_mbuf_pool_init>
   1a1ba:	e7f5      	b.n	1a1a8 <mem_init_mbuf_pool+0x1c>

0001a1bc <sysinit_app>:
void sensor_network_init(void);
void init_sensor_coap(void);

void
sysinit_app(void)
{
   1a1bc:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   1a1be:	f7fe f9f3 	bl	185a8 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   1a1c2:	f001 f985 	bl	1b4d0 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
   1a1c6:	f7fd f9a3 	bl	17510 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
   1a1ca:	f001 fac7 	bl	1b75c <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
   1a1ce:	f001 f9b7 	bl	1b540 <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
   1a1d2:	f001 f8e1 	bl	1b398 <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
   1a1d6:	f001 f8f1 	bl	1b3bc <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
   1a1da:	f001 f8f0 	bl	1b3be <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
   1a1de:	f001 f8ef 	bl	1b3c0 <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
   1a1e2:	f001 f8ee 	bl	1b3c2 <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
   1a1e6:	f001 f8ed 	bl	1b3c4 <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
   1a1ea:	f000 fbd1 	bl	1a990 <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
   1a1ee:	f000 fd1f 	bl	1ac30 <sensor_pkg_init>

    /*** Stage 620 */
    /* 620.0: temp_stub_create (libs/temp_stub) */
    temp_stub_create();
   1a1f2:	f000 ff3d 	bl	1b070 <temp_stub_create>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
   1a1f6:	f000 feb3 	bl	1af60 <sensor_network_init>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
   1a1fa:	f000 fe3d 	bl	1ae78 <init_sensor_coap>
}
   1a1fe:	bd08      	pop	{r3, pc}

0001a200 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
   1a200:	b908      	cbnz	r0, 1a206 <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
   1a202:	4802      	ldr	r0, [pc, #8]	; (1a20c <hal_bsp_flash_dev+0xc>)
   1a204:	4770      	bx	lr
    }

    return NULL;
   1a206:	2000      	movs	r0, #0
}
   1a208:	4770      	bx	lr
   1a20a:	bf00      	nop
   1a20c:	0001f920 	.word	0x0001f920

0001a210 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   1a210:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   1a212:	f7ed ffd5 	bl	81c0 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   1a216:	f000 fbb3 	bl	1a980 <nrf52_periph_create>
}
   1a21a:	bd08      	pop	{r3, pc}

0001a21c <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   1a21c:	2300      	movs	r3, #0
   1a21e:	4a07      	ldr	r2, [pc, #28]	; (1a23c <nrf52k_flash_wait_ready+0x20>)
   1a220:	4293      	cmp	r3, r2
   1a222:	dc06      	bgt.n	1a232 <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   1a224:	4a06      	ldr	r2, [pc, #24]	; (1a240 <nrf52k_flash_wait_ready+0x24>)
   1a226:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   1a22a:	2a01      	cmp	r2, #1
   1a22c:	d004      	beq.n	1a238 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   1a22e:	3301      	adds	r3, #1
   1a230:	e7f5      	b.n	1a21e <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   1a232:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a236:	4770      	bx	lr
            return 0;
   1a238:	2000      	movs	r0, #0
}
   1a23a:	4770      	bx	lr
   1a23c:	0001869f 	.word	0x0001869f
   1a240:	4001e000 	.word	0x4001e000

0001a244 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   1a244:	b538      	push	{r3, r4, r5, lr}
   1a246:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   1a248:	f7ff ffe8 	bl	1a21c <nrf52k_flash_wait_ready>
   1a24c:	b9f0      	cbnz	r0, 1a28c <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a24e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a252:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   1a254:	4b0f      	ldr	r3, [pc, #60]	; (1a294 <nrf52k_flash_erase_sector+0x50>)
   1a256:	2202      	movs	r2, #2
   1a258:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   1a25c:	f7ff ffde 	bl	1a21c <nrf52k_flash_wait_ready>
   1a260:	b148      	cbz	r0, 1a276 <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
   1a262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   1a266:	4a0b      	ldr	r2, [pc, #44]	; (1a294 <nrf52k_flash_erase_sector+0x50>)
   1a268:	2100      	movs	r1, #0
   1a26a:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1a26e:	b904      	cbnz	r4, 1a272 <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   1a270:	b662      	cpsie	i
    return rc;
}
   1a272:	4618      	mov	r0, r3
   1a274:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   1a276:	4b07      	ldr	r3, [pc, #28]	; (1a294 <nrf52k_flash_erase_sector+0x50>)
   1a278:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   1a27c:	f7ff ffce 	bl	1a21c <nrf52k_flash_wait_ready>
   1a280:	4603      	mov	r3, r0
   1a282:	2800      	cmp	r0, #0
   1a284:	d0ef      	beq.n	1a266 <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   1a286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a28a:	e7ec      	b.n	1a266 <nrf52k_flash_erase_sector+0x22>
        return -1;
   1a28c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a290:	e7ef      	b.n	1a272 <nrf52k_flash_erase_sector+0x2e>
   1a292:	bf00      	nop
   1a294:	4001e000 	.word	0x4001e000

0001a298 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   1a298:	2000      	movs	r0, #0
   1a29a:	4770      	bx	lr

0001a29c <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1a29c:	297f      	cmp	r1, #127	; 0x7f
   1a29e:	dc06      	bgt.n	1a2ae <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   1a2a0:	0309      	lsls	r1, r1, #12
   1a2a2:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   1a2a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1a2a8:	601a      	str	r2, [r3, #0]
}
   1a2aa:	2000      	movs	r0, #0
   1a2ac:	4770      	bx	lr
{
   1a2ae:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1a2b0:	2300      	movs	r3, #0
   1a2b2:	461a      	mov	r2, r3
   1a2b4:	4619      	mov	r1, r3
   1a2b6:	4618      	mov	r0, r3
   1a2b8:	f7fe f818 	bl	182ec <__assert_func>

0001a2bc <nrf52k_flash_write>:
{
   1a2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a2c0:	b082      	sub	sp, #8
   1a2c2:	460d      	mov	r5, r1
   1a2c4:	4616      	mov	r6, r2
   1a2c6:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   1a2c8:	f7ff ffa8 	bl	1a21c <nrf52k_flash_wait_ready>
   1a2cc:	2800      	cmp	r0, #0
   1a2ce:	d158      	bne.n	1a382 <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a2d0:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a2d4:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   1a2d6:	4b2c      	ldr	r3, [pc, #176]	; (1a388 <nrf52k_flash_write+0xcc>)
   1a2d8:	2201      	movs	r2, #1
   1a2da:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   1a2de:	f015 0803 	ands.w	r8, r5, #3
   1a2e2:	d10b      	bne.n	1a2fc <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
   1a2e4:	2c03      	cmp	r4, #3
   1a2e6:	d925      	bls.n	1a334 <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
   1a2e8:	f7ff ff98 	bl	1a21c <nrf52k_flash_wait_ready>
   1a2ec:	2800      	cmp	r0, #0
   1a2ee:	d139      	bne.n	1a364 <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
   1a2f0:	f856 3b04 	ldr.w	r3, [r6], #4
   1a2f4:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   1a2f8:	3c04      	subs	r4, #4
   1a2fa:	e7f3      	b.n	1a2e4 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   1a2fc:	f7ff ff8e 	bl	1a21c <nrf52k_flash_wait_ready>
   1a300:	bb68      	cbnz	r0, 1a35e <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
   1a302:	f025 0a03 	bic.w	sl, r5, #3
   1a306:	f8da 3000 	ldr.w	r3, [sl]
   1a30a:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   1a30c:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   1a310:	45a1      	cmp	r9, r4
   1a312:	d900      	bls.n	1a316 <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
   1a314:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   1a316:	464a      	mov	r2, r9
   1a318:	4631      	mov	r1, r6
   1a31a:	ab01      	add	r3, sp, #4
   1a31c:	eb03 0008 	add.w	r0, r3, r8
   1a320:	f7ff fbda 	bl	19ad8 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   1a324:	9b01      	ldr	r3, [sp, #4]
   1a326:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   1a32a:	444d      	add	r5, r9
        num_bytes -= cnt;
   1a32c:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   1a330:	444e      	add	r6, r9
   1a332:	e7d7      	b.n	1a2e4 <nrf52k_flash_write+0x28>
    if (num_bytes) {
   1a334:	b164      	cbz	r4, 1a350 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   1a336:	682b      	ldr	r3, [r5, #0]
   1a338:	a802      	add	r0, sp, #8
   1a33a:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
   1a33e:	4622      	mov	r2, r4
   1a340:	4631      	mov	r1, r6
   1a342:	f7ff fbc9 	bl	19ad8 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   1a346:	f7ff ff69 	bl	1a21c <nrf52k_flash_wait_ready>
   1a34a:	b9b8      	cbnz	r0, 1a37c <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
   1a34c:	9b01      	ldr	r3, [sp, #4]
   1a34e:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   1a350:	f7ff ff64 	bl	1a21c <nrf52k_flash_wait_ready>
   1a354:	4603      	mov	r3, r0
   1a356:	b138      	cbz	r0, 1a368 <nrf52k_flash_write+0xac>
        rc = -1;
   1a358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a35c:	e004      	b.n	1a368 <nrf52k_flash_write+0xac>
    int rc = -1;
   1a35e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a362:	e001      	b.n	1a368 <nrf52k_flash_write+0xac>
   1a364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   1a368:	4a07      	ldr	r2, [pc, #28]	; (1a388 <nrf52k_flash_write+0xcc>)
   1a36a:	2100      	movs	r1, #0
   1a36c:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1a370:	b907      	cbnz	r7, 1a374 <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
   1a372:	b662      	cpsie	i
}
   1a374:	4618      	mov	r0, r3
   1a376:	b002      	add	sp, #8
   1a378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   1a37c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a380:	e7f2      	b.n	1a368 <nrf52k_flash_write+0xac>
        return -1;
   1a382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a386:	e7f5      	b.n	1a374 <nrf52k_flash_write+0xb8>
   1a388:	4001e000 	.word	0x4001e000

0001a38c <nrf52k_flash_read>:
{
   1a38c:	b508      	push	{r3, lr}
   1a38e:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   1a390:	461a      	mov	r2, r3
   1a392:	f7ff fba1 	bl	19ad8 <memcpy>
}
   1a396:	2000      	movs	r0, #0
   1a398:	bd08      	pop	{r3, pc}
	...

0001a39c <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   1a39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   1a39e:	f7ff fa3b 	bl	19818 <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   1a3a2:	4b31      	ldr	r3, [pc, #196]	; (1a468 <nrf52_timer_handler+0xcc>)
   1a3a4:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   1a3a8:	4b30      	ldr	r3, [pc, #192]	; (1a46c <nrf52_timer_handler+0xd0>)
   1a3aa:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
   1a3ac:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   1a3b0:	d225      	bcs.n	1a3fe <nrf52_timer_handler+0x62>
   1a3b2:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   1a3b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1a3b8:	d227      	bcs.n	1a40a <nrf52_timer_handler+0x6e>
    result = x - y;
   1a3ba:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
   1a3bc:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   1a3c0:	d129      	bne.n	1a416 <nrf52_timer_handler+0x7a>
        return (result & 0x007fffff);
   1a3c2:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   1a3c6:	4f29      	ldr	r7, [pc, #164]	; (1a46c <nrf52_timer_handler+0xd0>)
   1a3c8:	683c      	ldr	r4, [r7, #0]
   1a3ca:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
   1a3ce:	4628      	mov	r0, r5
   1a3d0:	f7ff f9b0 	bl	19734 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1a3d4:	4b24      	ldr	r3, [pc, #144]	; (1a468 <nrf52_timer_handler+0xcc>)
   1a3d6:	2200      	movs	r2, #0
   1a3d8:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1a3dc:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1a3de:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1a3e0:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1a3e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1a3e8:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   1a3ea:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   1a3ec:	f7ff fa1d 	bl	1982a <os_arch_in_critical>
   1a3f0:	bb28      	cbnz	r0, 1a43e <nrf52_timer_handler+0xa2>
   1a3f2:	2300      	movs	r3, #0
   1a3f4:	461a      	mov	r2, r3
   1a3f6:	4619      	mov	r1, r3
   1a3f8:	4618      	mov	r0, r3
   1a3fa:	f7fd ff77 	bl	182ec <__assert_func>
    assert(x <= 0xffffff);
   1a3fe:	2300      	movs	r3, #0
   1a400:	461a      	mov	r2, r3
   1a402:	4619      	mov	r1, r3
   1a404:	4618      	mov	r0, r3
   1a406:	f7fd ff71 	bl	182ec <__assert_func>
    assert(y <= 0xffffff);
   1a40a:	2300      	movs	r3, #0
   1a40c:	461a      	mov	r2, r3
   1a40e:	4619      	mov	r1, r3
   1a410:	4618      	mov	r0, r3
   1a412:	f7fd ff6b 	bl	182ec <__assert_func>
        return (result | 0xff800000);
   1a416:	ea6f 2545 	mvn.w	r5, r5, lsl #9
   1a41a:	ea6f 2555 	mvn.w	r5, r5, lsr #9
   1a41e:	e7d2      	b.n	1a3c6 <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
   1a420:	2300      	movs	r3, #0
   1a422:	461a      	mov	r2, r3
   1a424:	4619      	mov	r1, r3
   1a426:	4618      	mov	r0, r3
   1a428:	f7fd ff60 	bl	182ec <__assert_func>
        return (result | 0xff800000);
   1a42c:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   1a430:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
   1a434:	2a02      	cmp	r2, #2
   1a436:	dc13      	bgt.n	1a460 <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1a438:	4a0c      	ldr	r2, [pc, #48]	; (1a46c <nrf52_timer_handler+0xd0>)
   1a43a:	6814      	ldr	r4, [r2, #0]
   1a43c:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   1a43e:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1a442:	4a09      	ldr	r2, [pc, #36]	; (1a468 <nrf52_timer_handler+0xcc>)
   1a444:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1a448:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   1a44c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1a450:	d2e6      	bcs.n	1a420 <nrf52_timer_handler+0x84>
    result = x - y;
   1a452:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   1a454:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1a458:	d1e8      	bne.n	1a42c <nrf52_timer_handler+0x90>
        return (result & 0x007fffff);
   1a45a:	f3c2 0216 	ubfx	r2, r2, #0, #23
   1a45e:	e7e9      	b.n	1a434 <nrf52_timer_handler+0x98>

    OS_EXIT_CRITICAL(sr);
   1a460:	4630      	mov	r0, r6
   1a462:	f7ff f9df 	bl	19824 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   1a466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a468:	40011000 	.word	0x40011000
   1a46c:	2000dec4 	.word	0x2000dec4

0001a470 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   1a470:	b538      	push	{r3, r4, r5, lr}
   1a472:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   1a474:	f7ff f9d9 	bl	1982a <os_arch_in_critical>
   1a478:	b1a0      	cbz	r0, 1a4a4 <os_tick_idle+0x34>

    if (ticks > 0) {
   1a47a:	2d00      	cmp	r5, #0
   1a47c:	d038      	beq.n	1a4f0 <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   1a47e:	4b20      	ldr	r3, [pc, #128]	; (1a500 <os_tick_idle+0x90>)
   1a480:	685b      	ldr	r3, [r3, #4]
   1a482:	42ab      	cmp	r3, r5
   1a484:	d200      	bcs.n	1a488 <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   1a486:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   1a488:	4b1d      	ldr	r3, [pc, #116]	; (1a500 <os_tick_idle+0x90>)
   1a48a:	689c      	ldr	r4, [r3, #8]
   1a48c:	681a      	ldr	r2, [r3, #0]
   1a48e:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   1a492:	f7ff f9ca 	bl	1982a <os_arch_in_critical>
   1a496:	b9d0      	cbnz	r0, 1a4ce <os_tick_idle+0x5e>
   1a498:	2300      	movs	r3, #0
   1a49a:	461a      	mov	r2, r3
   1a49c:	4619      	mov	r1, r3
   1a49e:	4618      	mov	r0, r3
   1a4a0:	f7fd ff24 	bl	182ec <__assert_func>
    OS_ASSERT_CRITICAL();
   1a4a4:	2300      	movs	r3, #0
   1a4a6:	461a      	mov	r2, r3
   1a4a8:	4619      	mov	r1, r3
   1a4aa:	4618      	mov	r0, r3
   1a4ac:	f7fd ff1e 	bl	182ec <__assert_func>
    assert(y <= 0xffffff);
   1a4b0:	2300      	movs	r3, #0
   1a4b2:	461a      	mov	r2, r3
   1a4b4:	4619      	mov	r1, r3
   1a4b6:	4618      	mov	r0, r3
   1a4b8:	f7fd ff18 	bl	182ec <__assert_func>
        return (result | 0xff800000);
   1a4bc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1a4c0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
   1a4c4:	2b02      	cmp	r3, #2
   1a4c6:	dc13      	bgt.n	1a4f0 <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1a4c8:	4b0d      	ldr	r3, [pc, #52]	; (1a500 <os_tick_idle+0x90>)
   1a4ca:	681c      	ldr	r4, [r3, #0]
   1a4cc:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1a4ce:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1a4d2:	4b0c      	ldr	r3, [pc, #48]	; (1a504 <os_tick_idle+0x94>)
   1a4d4:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1a4d8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   1a4dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1a4e0:	d2e6      	bcs.n	1a4b0 <os_tick_idle+0x40>
    result = x - y;
   1a4e2:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   1a4e4:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1a4e8:	d1e8      	bne.n	1a4bc <os_tick_idle+0x4c>
        return (result & 0x007fffff);
   1a4ea:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1a4ee:	e7e9      	b.n	1a4c4 <os_tick_idle+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
   1a4f0:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   1a4f4:	bf30      	wfi

    if (ticks > 0) {
   1a4f6:	b905      	cbnz	r5, 1a4fa <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   1a4f8:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   1a4fa:	f7ff ff4f 	bl	1a39c <nrf52_timer_handler>
}
   1a4fe:	e7fb      	b.n	1a4f8 <os_tick_idle+0x88>
   1a500:	2000dec4 	.word	0x2000dec4
   1a504:	40011000 	.word	0x40011000

0001a508 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   1a508:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1a50a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1a50e:	fbb3 f3f0 	udiv	r3, r3, r0
   1a512:	fb00 f303 	mul.w	r3, r0, r3
   1a516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1a51a:	d136      	bne.n	1a58a <os_tick_init+0x82>
   1a51c:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   1a51e:	4d1e      	ldr	r5, [pc, #120]	; (1a598 <os_tick_init+0x90>)
   1a520:	2600      	movs	r6, #0
   1a522:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   1a524:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1a528:	fbb3 f0f0 	udiv	r0, r3, r0
   1a52c:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1a52e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1a532:	fbb3 f0f0 	udiv	r0, r3, r0
   1a536:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1a538:	f7ff f96e 	bl	19818 <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a53c:	0164      	lsls	r4, r4, #5
   1a53e:	b2e4      	uxtb	r4, r4
   1a540:	4b16      	ldr	r3, [pc, #88]	; (1a59c <os_tick_init+0x94>)
   1a542:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a546:	4a16      	ldr	r2, [pc, #88]	; (1a5a0 <os_tick_init+0x98>)
   1a548:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a54a:	4916      	ldr	r1, [pc, #88]	; (1a5a4 <os_tick_init+0x9c>)
   1a54c:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a550:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1a554:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1a556:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1a55a:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1a55e:	2201      	movs	r2, #1
   1a560:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   1a562:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1a564:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a568:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   1a56c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1a570:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1a574:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1a578:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1a57c:	6829      	ldr	r1, [r5, #0]
   1a57e:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   1a582:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   1a584:	f7ff f94e 	bl	19824 <os_arch_restore_sr>
}
   1a588:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1a58a:	2300      	movs	r3, #0
   1a58c:	461a      	mov	r2, r3
   1a58e:	4619      	mov	r1, r3
   1a590:	4618      	mov	r0, r3
   1a592:	f7fd feab 	bl	182ec <__assert_func>
   1a596:	bf00      	nop
   1a598:	2000dec4 	.word	0x2000dec4
   1a59c:	e000e100 	.word	0xe000e100
   1a5a0:	e000ed00 	.word	0xe000ed00
   1a5a4:	0001a39d 	.word	0x0001a39d

0001a5a8 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1a5a8:	2301      	movs	r3, #1
   1a5aa:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1a5ac:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   1a5b0:	4770      	bx	lr
	...

0001a5b4 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   1a5b4:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   1a5b6:	7883      	ldrb	r3, [r0, #2]
   1a5b8:	b393      	cbz	r3, 1a620 <nrf_timer_set_ocmp+0x6c>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1a5ba:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1a5bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1a5c0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   1a5c4:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   1a5c6:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1a5ca:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1a5ce:	b11d      	cbz	r5, 1a5d8 <nrf_timer_set_ocmp+0x24>
            temp += (1UL << 24);
   1a5d0:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   1a5d4:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   1a5d8:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
   1a5da:	1acb      	subs	r3, r1, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   1a5dc:	2b02      	cmp	r3, #2
   1a5de:	dc0e      	bgt.n	1a5fe <nrf_timer_set_ocmp+0x4a>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1a5e0:	7842      	ldrb	r2, [r0, #1]
   1a5e2:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1a5e4:	2b00      	cmp	r3, #0
   1a5e6:	db15      	blt.n	1a614 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a5e8:	f002 021f 	and.w	r2, r2, #31
   1a5ec:	095b      	lsrs	r3, r3, #5
   1a5ee:	2101      	movs	r1, #1
   1a5f0:	fa01 f202 	lsl.w	r2, r1, r2
   1a5f4:	3340      	adds	r3, #64	; 0x40
   1a5f6:	491b      	ldr	r1, [pc, #108]	; (1a664 <nrf_timer_set_ocmp+0xb0>)
   1a5f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1a5fc:	e00a      	b.n	1a614 <nrf_timer_set_ocmp+0x60>
        } else  {
            if (delta_t < (1UL << 24)) {
   1a5fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1a602:	d208      	bcs.n	1a616 <nrf_timer_set_ocmp+0x62>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1a604:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1a608:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1a60c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1a610:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   1a614:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1a616:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
   1a61a:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
   1a61e:	e7f5      	b.n	1a60c <nrf_timer_set_ocmp+0x58>
   1a620:	460d      	mov	r5, r1
   1a622:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
   1a624:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1a626:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1a62a:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   1a62e:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1a632:	2200      	movs	r2, #0
   1a634:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1a638:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1a63c:	f7ff ffb4 	bl	1a5a8 <nrf_read_timer_cntr>
   1a640:	1b40      	subs	r0, r0, r5
   1a642:	2800      	cmp	r0, #0
   1a644:	dbe6      	blt.n	1a614 <nrf_timer_set_ocmp+0x60>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1a646:	7862      	ldrb	r2, [r4, #1]
   1a648:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1a64a:	2b00      	cmp	r3, #0
   1a64c:	dbe2      	blt.n	1a614 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a64e:	f002 021f 	and.w	r2, r2, #31
   1a652:	095b      	lsrs	r3, r3, #5
   1a654:	2101      	movs	r1, #1
   1a656:	fa01 f202 	lsl.w	r2, r1, r2
   1a65a:	3340      	adds	r3, #64	; 0x40
   1a65c:	4901      	ldr	r1, [pc, #4]	; (1a664 <nrf_timer_set_ocmp+0xb0>)
   1a65e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1a662:	e7d7      	b.n	1a614 <nrf_timer_set_ocmp+0x60>
   1a664:	e000e100 	.word	0xe000e100

0001a668 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1a668:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1a66c:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1a670:	4770      	bx	lr

0001a672 <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1a672:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1a676:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1a67a:	4770      	bx	lr

0001a67c <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1a67c:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1a67e:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a680:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a684:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   1a686:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   1a688:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1a68c:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1a690:	b1ad      	cbz	r5, 1a6be <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
   1a692:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   1a696:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   1a698:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1a69c:	2500      	movs	r5, #0
   1a69e:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1a6a2:	7840      	ldrb	r0, [r0, #1]
   1a6a4:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
   1a6a6:	42aa      	cmp	r2, r5
   1a6a8:	db09      	blt.n	1a6be <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a6aa:	f000 001f 	and.w	r0, r0, #31
   1a6ae:	0952      	lsrs	r2, r2, #5
   1a6b0:	2501      	movs	r5, #1
   1a6b2:	fa05 f000 	lsl.w	r0, r5, r0
   1a6b6:	3240      	adds	r2, #64	; 0x40
   1a6b8:	4d04      	ldr	r5, [pc, #16]	; (1a6cc <hal_timer_read_bsptimer+0x50>)
   1a6ba:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
   1a6be:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   1a6c2:	b904      	cbnz	r4, 1a6c6 <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
   1a6c4:	b662      	cpsie	i

    return tcntr;
}
   1a6c6:	bc30      	pop	{r4, r5}
   1a6c8:	4770      	bx	lr
   1a6ca:	bf00      	nop
   1a6cc:	e000e100 	.word	0xe000e100

0001a6d0 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   1a6d0:	b570      	push	{r4, r5, r6, lr}
   1a6d2:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a6d4:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a6d8:	b672      	cpsid	i
   1a6da:	e013      	b.n	1a704 <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1a6dc:	6928      	ldr	r0, [r5, #16]
   1a6de:	f7ff ff63 	bl	1a5a8 <nrf_read_timer_cntr>
            delta = 0;
   1a6e2:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   1a6e4:	68e3      	ldr	r3, [r4, #12]
   1a6e6:	1ac0      	subs	r0, r0, r3
   1a6e8:	4290      	cmp	r0, r2
   1a6ea:	db19      	blt.n	1a720 <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1a6ec:	6923      	ldr	r3, [r4, #16]
   1a6ee:	b1a3      	cbz	r3, 1a71a <hal_timer_chk_queue+0x4a>
   1a6f0:	6962      	ldr	r2, [r4, #20]
   1a6f2:	615a      	str	r2, [r3, #20]
   1a6f4:	6963      	ldr	r3, [r4, #20]
   1a6f6:	6922      	ldr	r2, [r4, #16]
   1a6f8:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1a6fa:	2300      	movs	r3, #0
   1a6fc:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1a6fe:	6863      	ldr	r3, [r4, #4]
   1a700:	68a0      	ldr	r0, [r4, #8]
   1a702:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   1a704:	696c      	ldr	r4, [r5, #20]
   1a706:	b15c      	cbz	r4, 1a720 <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   1a708:	78ab      	ldrb	r3, [r5, #2]
   1a70a:	2b00      	cmp	r3, #0
   1a70c:	d0e6      	beq.n	1a6dc <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1a70e:	4628      	mov	r0, r5
   1a710:	f7ff ffb4 	bl	1a67c <hal_timer_read_bsptimer>
            delta = -3;
   1a714:	f06f 0202 	mvn.w	r2, #2
   1a718:	e7e4      	b.n	1a6e4 <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1a71a:	6963      	ldr	r3, [r4, #20]
   1a71c:	61ab      	str	r3, [r5, #24]
   1a71e:	e7e9      	b.n	1a6f4 <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1a720:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   1a722:	b133      	cbz	r3, 1a732 <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1a724:	68d9      	ldr	r1, [r3, #12]
   1a726:	4628      	mov	r0, r5
   1a728:	f7ff ff44 	bl	1a5b4 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   1a72c:	b906      	cbnz	r6, 1a730 <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1a72e:	b662      	cpsie	i
}
   1a730:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   1a732:	78ab      	ldrb	r3, [r5, #2]
   1a734:	b11b      	cbz	r3, 1a73e <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1a736:	6928      	ldr	r0, [r5, #16]
   1a738:	f7ff ff9b 	bl	1a672 <nrf_rtc_disable_ocmp>
   1a73c:	e7f6      	b.n	1a72c <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1a73e:	6928      	ldr	r0, [r5, #16]
   1a740:	f7ff ff92 	bl	1a668 <nrf_timer_disable_ocmp>
   1a744:	e7f2      	b.n	1a72c <hal_timer_chk_queue+0x5c>

0001a746 <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1a746:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   1a748:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1a74a:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   1a74e:	b113      	cbz	r3, 1a756 <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1a750:	2300      	movs	r3, #0
   1a752:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1a756:	6883      	ldr	r3, [r0, #8]
   1a758:	3301      	adds	r3, #1
   1a75a:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   1a75c:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   1a760:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   1a764:	d100      	bne.n	1a768 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   1a766:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   1a768:	f7ff ffb2 	bl	1a6d0 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1a76c:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   1a770:	e7f9      	b.n	1a766 <hal_timer_irq_handler+0x20>
	...

0001a774 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   1a774:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   1a776:	4802      	ldr	r0, [pc, #8]	; (1a780 <nrf52_timer0_irq_handler+0xc>)
   1a778:	f7ff ffe5 	bl	1a746 <hal_timer_irq_handler>
}
   1a77c:	bd08      	pop	{r3, pc}
   1a77e:	bf00      	nop
   1a780:	2000ded0 	.word	0x2000ded0

0001a784 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1a784:	2805      	cmp	r0, #5
   1a786:	dc1c      	bgt.n	1a7c2 <hal_timer_init+0x3e>
   1a788:	4b12      	ldr	r3, [pc, #72]	; (1a7d4 <hal_timer_init+0x50>)
   1a78a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1a78e:	b1d3      	cbz	r3, 1a7c6 <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1a790:	781a      	ldrb	r2, [r3, #0]
   1a792:	b9d2      	cbnz	r2, 1a7ca <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   1a794:	b9d8      	cbnz	r0, 1a7ce <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1a796:	4a10      	ldr	r2, [pc, #64]	; (1a7d8 <hal_timer_init+0x54>)
   1a798:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1a79a:	2208      	movs	r2, #8
   1a79c:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a79e:	4b0f      	ldr	r3, [pc, #60]	; (1a7dc <hal_timer_init+0x58>)
   1a7a0:	f44f 7280 	mov.w	r2, #256	; 0x100
   1a7a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1a7a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1a7ac:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a7b0:	22e0      	movs	r2, #224	; 0xe0
   1a7b2:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a7b6:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1a7ba:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a7bc:	4a08      	ldr	r2, [pc, #32]	; (1a7e0 <hal_timer_init+0x5c>)
   1a7be:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   1a7c0:	4770      	bx	lr

err:
    return rc;
   1a7c2:	2016      	movs	r0, #22
   1a7c4:	4770      	bx	lr
   1a7c6:	2016      	movs	r0, #22
   1a7c8:	4770      	bx	lr
   1a7ca:	2016      	movs	r0, #22
   1a7cc:	4770      	bx	lr
   1a7ce:	2016      	movs	r0, #22
}
   1a7d0:	4770      	bx	lr
   1a7d2:	bf00      	nop
   1a7d4:	0001f954 	.word	0x0001f954
   1a7d8:	40008000 	.word	0x40008000
   1a7dc:	e000e100 	.word	0xe000e100
   1a7e0:	0001a775 	.word	0x0001a775

0001a7e4 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1a7e4:	2805      	cmp	r0, #5
   1a7e6:	dc65      	bgt.n	1a8b4 <hal_timer_config+0xd0>
   1a7e8:	4b39      	ldr	r3, [pc, #228]	; (1a8d0 <hal_timer_config+0xec>)
   1a7ea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a7ee:	2800      	cmp	r0, #0
   1a7f0:	d062      	beq.n	1a8b8 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   1a7f2:	4b38      	ldr	r3, [pc, #224]	; (1a8d4 <hal_timer_config+0xf0>)
   1a7f4:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1a7f8:	7803      	ldrb	r3, [r0, #0]
   1a7fa:	2b00      	cmp	r3, #0
   1a7fc:	d15e      	bne.n	1a8bc <hal_timer_config+0xd8>
   1a7fe:	2900      	cmp	r1, #0
   1a800:	d05e      	beq.n	1a8c0 <hal_timer_config+0xdc>
   1a802:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1a806:	d85d      	bhi.n	1a8c4 <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
   1a808:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1a80a:	2a00      	cmp	r2, #0
   1a80c:	d05c      	beq.n	1a8c8 <hal_timer_config+0xe4>
{
   1a80e:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1a810:	2901      	cmp	r1, #1
   1a812:	d013      	beq.n	1a83c <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1a814:	2301      	movs	r3, #1
   1a816:	2b09      	cmp	r3, #9
   1a818:	d810      	bhi.n	1a83c <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
   1a81a:	2201      	movs	r2, #1
   1a81c:	409a      	lsls	r2, r3
   1a81e:	428a      	cmp	r2, r1
   1a820:	d202      	bcs.n	1a828 <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1a822:	3301      	adds	r3, #1
   1a824:	b2db      	uxtb	r3, r3
   1a826:	e7f6      	b.n	1a816 <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
   1a828:	1e5c      	subs	r4, r3, #1
   1a82a:	2501      	movs	r5, #1
   1a82c:	fa05 f404 	lsl.w	r4, r5, r4
   1a830:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
   1a832:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
   1a834:	428c      	cmp	r4, r1
   1a836:	d201      	bcs.n	1a83c <hal_timer_config+0x58>
                    prescaler -= 1;
   1a838:	3b01      	subs	r3, #1
   1a83a:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1a83c:	4a25      	ldr	r2, [pc, #148]	; (1a8d4 <hal_timer_config+0xf0>)
   1a83e:	411a      	asrs	r2, r3
   1a840:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
   1a842:	2201      	movs	r2, #1
   1a844:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a846:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a84a:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1a84c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a850:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   1a854:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1a858:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1a85c:	d00c      	beq.n	1a878 <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1a85e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a862:	2100      	movs	r1, #0
   1a864:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1a868:	2101      	movs	r1, #1
   1a86a:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1a86c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a870:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1a874:	2a00      	cmp	r2, #0
   1a876:	d0f9      	beq.n	1a86c <hal_timer_config+0x88>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1a878:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1a87a:	2101      	movs	r1, #1
   1a87c:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   1a87e:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1a880:	2500      	movs	r5, #0
   1a882:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1a886:	2503      	movs	r5, #3
   1a888:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1a88c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1a890:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1a892:	7842      	ldrb	r2, [r0, #1]
   1a894:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1a896:	2b00      	cmp	r3, #0
   1a898:	db07      	blt.n	1a8aa <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a89a:	f002 021f 	and.w	r2, r2, #31
   1a89e:	095b      	lsrs	r3, r3, #5
   1a8a0:	fa01 f202 	lsl.w	r2, r1, r2
   1a8a4:	490c      	ldr	r1, [pc, #48]	; (1a8d8 <hal_timer_config+0xf4>)
   1a8a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1a8aa:	b97c      	cbnz	r4, 1a8cc <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
   1a8ac:	b662      	cpsie	i

    return 0;
   1a8ae:	2000      	movs	r0, #0

err:
    return rc;
}
   1a8b0:	bc30      	pop	{r4, r5}
   1a8b2:	4770      	bx	lr
    return rc;
   1a8b4:	2016      	movs	r0, #22
   1a8b6:	4770      	bx	lr
   1a8b8:	2016      	movs	r0, #22
   1a8ba:	4770      	bx	lr
   1a8bc:	2016      	movs	r0, #22
   1a8be:	4770      	bx	lr
   1a8c0:	2016      	movs	r0, #22
   1a8c2:	4770      	bx	lr
   1a8c4:	2016      	movs	r0, #22
   1a8c6:	4770      	bx	lr
   1a8c8:	2016      	movs	r0, #22
}
   1a8ca:	4770      	bx	lr
    return 0;
   1a8cc:	2000      	movs	r0, #0
   1a8ce:	e7ef      	b.n	1a8b0 <hal_timer_config+0xcc>
   1a8d0:	0001f954 	.word	0x0001f954
   1a8d4:	00f42400 	.word	0x00f42400
   1a8d8:	e000e100 	.word	0xe000e100

0001a8dc <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   1a8dc:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1a8de:	2805      	cmp	r0, #5
   1a8e0:	dc0c      	bgt.n	1a8fc <hal_timer_read+0x20>
   1a8e2:	4b09      	ldr	r3, [pc, #36]	; (1a908 <hal_timer_read+0x2c>)
   1a8e4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a8e8:	b140      	cbz	r0, 1a8fc <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   1a8ea:	7883      	ldrb	r3, [r0, #2]
   1a8ec:	b91b      	cbnz	r3, 1a8f6 <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1a8ee:	6900      	ldr	r0, [r0, #16]
   1a8f0:	f7ff fe5a 	bl	1a5a8 <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   1a8f4:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   1a8f6:	f7ff fec1 	bl	1a67c <hal_timer_read_bsptimer>
   1a8fa:	e7fb      	b.n	1a8f4 <hal_timer_read+0x18>
    assert(0);
   1a8fc:	2300      	movs	r3, #0
   1a8fe:	461a      	mov	r2, r3
   1a900:	4619      	mov	r1, r3
   1a902:	4618      	mov	r0, r3
   1a904:	f7fd fcf2 	bl	182ec <__assert_func>
   1a908:	0001f954 	.word	0x0001f954

0001a90c <nrf52_periph_create_timers>:
};
#endif

static void
nrf52_periph_create_timers(void)
{
   1a90c:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   1a90e:	2100      	movs	r1, #0
   1a910:	4608      	mov	r0, r1
   1a912:	f7ff ff37 	bl	1a784 <hal_timer_init>
    assert(rc == 0);
   1a916:	b920      	cbnz	r0, 1a922 <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1a918:	4808      	ldr	r0, [pc, #32]	; (1a93c <nrf52_periph_create_timers+0x30>)
   1a91a:	f7fd ff11 	bl	18740 <os_cputime_init>
    assert(rc == 0);
   1a91e:	b930      	cbnz	r0, 1a92e <nrf52_periph_create_timers+0x22>
#endif
}
   1a920:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1a922:	2300      	movs	r3, #0
   1a924:	461a      	mov	r2, r3
   1a926:	4619      	mov	r1, r3
   1a928:	4618      	mov	r0, r3
   1a92a:	f7fd fcdf 	bl	182ec <__assert_func>
    assert(rc == 0);
   1a92e:	2300      	movs	r3, #0
   1a930:	461a      	mov	r2, r3
   1a932:	4619      	mov	r1, r3
   1a934:	4618      	mov	r0, r3
   1a936:	f7fd fcd9 	bl	182ec <__assert_func>
   1a93a:	bf00      	nop
   1a93c:	000f4240 	.word	0x000f4240

0001a940 <nrf52_periph_create_i2c>:
#endif
}

static void
nrf52_periph_create_i2c(void)
{
   1a940:	b508      	push	{r3, lr}
    rc = bus_i2c_hal_dev_create("i2c1", &i2c1_bus,
                                (struct bus_i2c_dev_cfg *)&i2c1_cfg);
    assert(rc == 0);
#endif
#else
    rc = hal_i2c_init(1, (void *)&hal_i2c1_cfg);
   1a942:	4906      	ldr	r1, [pc, #24]	; (1a95c <nrf52_periph_create_i2c+0x1c>)
   1a944:	2001      	movs	r0, #1
   1a946:	f7fd f82b 	bl	179a0 <hal_i2c_init>
    assert(rc == 0);
   1a94a:	b900      	cbnz	r0, 1a94e <nrf52_periph_create_i2c+0xe>
#endif
#endif
}
   1a94c:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1a94e:	2300      	movs	r3, #0
   1a950:	461a      	mov	r2, r3
   1a952:	4619      	mov	r1, r3
   1a954:	4618      	mov	r0, r3
   1a956:	f7fd fcc9 	bl	182ec <__assert_func>
   1a95a:	bf00      	nop
   1a95c:	0001f96c 	.word	0x0001f96c

0001a960 <nrf52_periph_create_spi>:

static void
nrf52_periph_create_spi(void)
{
   1a960:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   1a962:	2200      	movs	r2, #0
   1a964:	4905      	ldr	r1, [pc, #20]	; (1a97c <nrf52_periph_create_spi+0x1c>)
   1a966:	4610      	mov	r0, r2
   1a968:	f7fd fb4e 	bl	18008 <hal_spi_init>
    assert(rc == 0);
   1a96c:	b900      	cbnz	r0, 1a970 <nrf52_periph_create_spi+0x10>
#endif
#if MYNEWT_VAL(SPI_2_SLAVE)
    rc = hal_spi_init(2, (void *)&os_bsp_spi2s_cfg, HAL_SPI_TYPE_SLAVE);
    assert(rc == 0);
#endif
}
   1a96e:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1a970:	2300      	movs	r3, #0
   1a972:	461a      	mov	r2, r3
   1a974:	4619      	mov	r1, r3
   1a976:	4618      	mov	r0, r3
   1a978:	f7fd fcb8 	bl	182ec <__assert_func>
   1a97c:	0001f978 	.word	0x0001f978

0001a980 <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   1a980:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   1a982:	f7ff ffc3 	bl	1a90c <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
   1a986:	f7ff ffdb 	bl	1a940 <nrf52_periph_create_i2c>
    nrf52_periph_create_spi();
   1a98a:	f7ff ffe9 	bl	1a960 <nrf52_periph_create_spi>
}
   1a98e:	bd08      	pop	{r3, pc}

0001a990 <sensor_dev_create>:
    assert(rc == 0);

    rc = config_icp10114_sensor();
    assert(rc == 0);
#endif
}
   1a990:	4770      	bx	lr
	...

0001a994 <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
   1a994:	4b08      	ldr	r3, [pc, #32]	; (1a9b8 <sensor_mgr_remove+0x24>)
   1a996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1a998:	4282      	cmp	r2, r0
   1a99a:	d104      	bne.n	1a9a6 <sensor_mgr_remove+0x12>
   1a99c:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
   1a9a0:	631a      	str	r2, [r3, #48]	; 0x30
   1a9a2:	4770      	bx	lr
   1a9a4:	461a      	mov	r2, r3
   1a9a6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1a9aa:	4283      	cmp	r3, r0
   1a9ac:	d1fa      	bne.n	1a9a4 <sensor_mgr_remove+0x10>
   1a9ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1a9b2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
   1a9b6:	4770      	bx	lr
   1a9b8:	2000def0 	.word	0x2000def0

0001a9bc <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
   1a9bc:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
   1a9be:	6a03      	ldr	r3, [r0, #32]
   1a9c0:	b993      	cbnz	r3, 1a9e8 <sensor_mgr_insert+0x2c>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a9c2:	4b15      	ldr	r3, [pc, #84]	; (1aa18 <sensor_mgr_insert+0x5c>)
   1a9c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1a9c6:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a9c8:	e002      	b.n	1a9d0 <sensor_mgr_insert+0x14>
            prev = cursor;
   1a9ca:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a9cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1a9d0:	2b00      	cmp	r3, #0
   1a9d2:	d1fa      	bne.n	1a9ca <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
   1a9d4:	b1c9      	cbz	r1, 1aa0a <sensor_mgr_insert+0x4e>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
   1a9d6:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   1a9da:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
   1a9de:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
   1a9e2:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a9e6:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a9e8:	4b0b      	ldr	r3, [pc, #44]	; (1aa18 <sensor_mgr_insert+0x5c>)
   1a9ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1a9ec:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a9ee:	2b00      	cmp	r3, #0
   1a9f0:	d0f0      	beq.n	1a9d4 <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
   1a9f2:	6a1a      	ldr	r2, [r3, #32]
   1a9f4:	2a00      	cmp	r2, #0
   1a9f6:	d0ed      	beq.n	1a9d4 <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
   1a9f8:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1a9fa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1a9fc:	1b12      	subs	r2, r2, r4
   1a9fe:	2a00      	cmp	r2, #0
   1aa00:	dbe8      	blt.n	1a9d4 <sensor_mgr_insert+0x18>
        prev = cursor;
   1aa02:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1aa04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1aa08:	e7f1      	b.n	1a9ee <sensor_mgr_insert+0x32>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
   1aa0a:	4b03      	ldr	r3, [pc, #12]	; (1aa18 <sensor_mgr_insert+0x5c>)
   1aa0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1aa0e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   1aa12:	6318      	str	r0, [r3, #48]	; 0x30
   1aa14:	e7e5      	b.n	1a9e2 <sensor_mgr_insert+0x26>
   1aa16:	bf00      	nop
   1aa18:	2000def0 	.word	0x2000def0

0001aa1c <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
   1aa1c:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
   1aa1e:	fab0 f080 	clz	r0, r0
   1aa22:	0940      	lsrs	r0, r0, #5
   1aa24:	4770      	bx	lr
	...

0001aa28 <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
   1aa28:	4b01      	ldr	r3, [pc, #4]	; (1aa30 <sensor_mgr_evq_set+0x8>)
   1aa2a:	62d8      	str	r0, [r3, #44]	; 0x2c
}
   1aa2c:	4770      	bx	lr
   1aa2e:	bf00      	nop
   1aa30:	2000def0 	.word	0x2000def0

0001aa34 <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
   1aa34:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
   1aa38:	e9d1 2300 	ldrd	r2, r3, [r1]
   1aa3c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1aa40:	ea02 0b04 	and.w	fp, r2, r4
   1aa44:	ea03 0c05 	and.w	ip, r3, r5
   1aa48:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
   1aa4c:	ea0b 0200 	and.w	r2, fp, r0
   1aa50:	ea0c 0301 	and.w	r3, ip, r1
   1aa54:	4313      	orrs	r3, r2
}
   1aa56:	bf14      	ite	ne
   1aa58:	2001      	movne	r0, #1
   1aa5a:	2000      	moveq	r0, #0
   1aa5c:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1aa60:	4770      	bx	lr

0001aa62 <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
   1aa62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1aa66:	b083      	sub	sp, #12
   1aa68:	4605      	mov	r5, r0
   1aa6a:	4689      	mov	r9, r1
   1aa6c:	4690      	mov	r8, r2
   1aa6e:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
   1aa72:	790b      	ldrb	r3, [r1, #4]
   1aa74:	2b01      	cmp	r3, #1
   1aa76:	d013      	beq.n	1aaa0 <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
   1aa78:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   1aa7a:	e000      	b.n	1aa7e <sensor_read_data_func+0x1c>
   1aa7c:	6924      	ldr	r4, [r4, #16]
   1aa7e:	b17c      	cbz	r4, 1aaa0 <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
   1aa80:	e9d4 0100 	ldrd	r0, r1, [r4]
   1aa84:	ea00 0206 	and.w	r2, r0, r6
   1aa88:	ea01 0307 	and.w	r3, r1, r7
   1aa8c:	4313      	orrs	r3, r2
   1aa8e:	d0f5      	beq.n	1aa7c <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
   1aa90:	68a3      	ldr	r3, [r4, #8]
   1aa92:	68e1      	ldr	r1, [r4, #12]
   1aa94:	e9cd 6700 	strd	r6, r7, [sp]
   1aa98:	4642      	mov	r2, r8
   1aa9a:	4628      	mov	r0, r5
   1aa9c:	4798      	blx	r3
   1aa9e:	e7ed      	b.n	1aa7c <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
   1aaa0:	f8d9 3000 	ldr.w	r3, [r9]
   1aaa4:	b14b      	cbz	r3, 1aaba <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
   1aaa6:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1aaaa:	e9cd 6700 	strd	r6, r7, [sp]
   1aaae:	4642      	mov	r2, r8
   1aab0:	4628      	mov	r0, r5
   1aab2:	4798      	blx	r3
    }

    return (0);
}
   1aab4:	b003      	add	sp, #12
   1aab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
   1aaba:	2000      	movs	r0, #0
   1aabc:	e7fa      	b.n	1aab4 <sensor_read_data_func+0x52>
	...

0001aac0 <sensor_base_ts_update_event>:
{
   1aac0:	b530      	push	{r4, r5, lr}
   1aac2:	b087      	sub	sp, #28
    ticks = os_time_get();
   1aac4:	f7fe fe30 	bl	19728 <os_time_get>
   1aac8:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
   1aaca:	a901      	add	r1, sp, #4
   1aacc:	a802      	add	r0, sp, #8
   1aace:	f7fe fe65 	bl	1979c <os_gettimeofday>
    if (rc) {
   1aad2:	b138      	cbz	r0, 1aae4 <sensor_base_ts_update_event+0x24>
        ticks += OS_TICKS_PER_SEC * 600;
   1aad4:	f504 3496 	add.w	r4, r4, #76800	; 0x12c00
    os_callout_reset(&st_up_osco, ticks);
   1aad8:	4621      	mov	r1, r4
   1aada:	4809      	ldr	r0, [pc, #36]	; (1ab00 <sensor_base_ts_update_event+0x40>)
   1aadc:	f7fd fdac 	bl	18638 <os_callout_reset>
}
   1aae0:	b007      	add	sp, #28
   1aae2:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
   1aae4:	f504 347a 	add.w	r4, r4, #256000	; 0x3e800
    sensor_base_ts.st_ostv = ostv;
   1aae8:	4d06      	ldr	r5, [pc, #24]	; (1ab04 <sensor_base_ts_update_event+0x44>)
   1aaea:	ab06      	add	r3, sp, #24
   1aaec:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1aaf0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1aaf4:	9b01      	ldr	r3, [sp, #4]
   1aaf6:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1aaf8:	f7fd fe28 	bl	1874c <os_cputime_get32>
   1aafc:	6168      	str	r0, [r5, #20]
   1aafe:	e7eb      	b.n	1aad8 <sensor_base_ts_update_event+0x18>
   1ab00:	2000df24 	.word	0x2000df24
   1ab04:	2000df48 	.word	0x2000df48

0001ab08 <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
   1ab08:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1ab0c:	4604      	mov	r4, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
   1ab0e:	f7fd fe1d 	bl	1874c <os_cputime_get32>

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
   1ab12:	4a0e      	ldr	r2, [pc, #56]	; (1ab4c <sensor_up_timestamp+0x44>)
   1ab14:	6955      	ldr	r5, [r2, #20]
   1ab16:	1b43      	subs	r3, r0, r5
             sensor_base_ts.st_cputime);

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
   1ab18:	6460      	str	r0, [r4, #68]	; 0x44
   1ab1a:	6150      	str	r0, [r2, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1ab1c:	e9d2 0100 	ldrd	r0, r1, [r2]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1ab20:	6895      	ldr	r5, [r2, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1ab22:	441d      	add	r5, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1ab24:	4b0a      	ldr	r3, [pc, #40]	; (1ab50 <sensor_up_timestamp+0x48>)
   1ab26:	fba3 c305 	umull	ip, r3, r3, r5
   1ab2a:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1ab2c:	eb10 0b03 	adds.w	fp, r0, r3
   1ab30:	f141 0c00 	adc.w	ip, r1, #0
   1ab34:	e9c2 bc00 	strd	fp, ip, [r2]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
   1ab38:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
   1ab3c:	4905      	ldr	r1, [pc, #20]	; (1ab54 <sensor_up_timestamp+0x4c>)
   1ab3e:	fb01 5113 	mls	r1, r1, r3, r5
    sensor_base_ts.st_ostv.tv_usec  =
   1ab42:	6091      	str	r1, [r2, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
   1ab44:	63a1      	str	r1, [r4, #56]	; 0x38

}
   1ab46:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   1ab4a:	bf00      	nop
   1ab4c:	2000df48 	.word	0x2000df48
   1ab50:	431bde83 	.word	0x431bde83
   1ab54:	000f4240 	.word	0x000f4240

0001ab58 <sensor_mgr_lock>:
{
   1ab58:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
   1ab5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ab5e:	4804      	ldr	r0, [pc, #16]	; (1ab70 <sensor_mgr_lock+0x18>)
   1ab60:	f7fe fa5c 	bl	1901c <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1ab64:	b108      	cbz	r0, 1ab6a <sensor_mgr_lock+0x12>
   1ab66:	2809      	cmp	r0, #9
   1ab68:	d000      	beq.n	1ab6c <sensor_mgr_lock+0x14>
}
   1ab6a:	bd08      	pop	{r3, pc}
        return (0);
   1ab6c:	2000      	movs	r0, #0
   1ab6e:	e7fc      	b.n	1ab6a <sensor_mgr_lock+0x12>
   1ab70:	2000def0 	.word	0x2000def0

0001ab74 <sensor_mgr_unlock>:
{
   1ab74:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
   1ab76:	4802      	ldr	r0, [pc, #8]	; (1ab80 <sensor_mgr_unlock+0xc>)
   1ab78:	f7fe f9f4 	bl	18f64 <os_mutex_release>
}
   1ab7c:	bd08      	pop	{r3, pc}
   1ab7e:	bf00      	nop
   1ab80:	2000def0 	.word	0x2000def0

0001ab84 <sensor_mgr_evq_get>:
}
   1ab84:	4b01      	ldr	r3, [pc, #4]	; (1ab8c <sensor_mgr_evq_get+0x8>)
   1ab86:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1ab88:	4770      	bx	lr
   1ab8a:	bf00      	nop
   1ab8c:	2000def0 	.word	0x2000def0

0001ab90 <sensor_mgr_init>:
{
   1ab90:	b570      	push	{r4, r5, r6, lr}
   1ab92:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
   1ab94:	f7fd ff68 	bl	18a68 <os_eventq_dflt_get>
   1ab98:	f7ff ff46 	bl	1aa28 <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
   1ab9c:	4b1c      	ldr	r3, [pc, #112]	; (1ac10 <sensor_mgr_init+0x80>)
   1ab9e:	9300      	str	r3, [sp, #0]
   1aba0:	4b1c      	ldr	r3, [pc, #112]	; (1ac14 <sensor_mgr_init+0x84>)
   1aba2:	2218      	movs	r2, #24
   1aba4:	2105      	movs	r1, #5
   1aba6:	481c      	ldr	r0, [pc, #112]	; (1ac18 <sensor_mgr_init+0x88>)
   1aba8:	f7fe f8e8 	bl	18d7c <os_mempool_init>
    assert(rc == OS_OK);
   1abac:	bb50      	cbnz	r0, 1ac04 <sensor_mgr_init+0x74>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
   1abae:	f7ff ffe9 	bl	1ab84 <sensor_mgr_evq_get>
   1abb2:	4e1a      	ldr	r6, [pc, #104]	; (1ac1c <sensor_mgr_init+0x8c>)
   1abb4:	2300      	movs	r3, #0
   1abb6:	4a1a      	ldr	r2, [pc, #104]	; (1ac20 <sensor_mgr_init+0x90>)
   1abb8:	4601      	mov	r1, r0
   1abba:	4630      	mov	r0, r6
   1abbc:	f7fd fd10 	bl	185e0 <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
   1abc0:	ad04      	add	r5, sp, #16
   1abc2:	a903      	add	r1, sp, #12
   1abc4:	4628      	mov	r0, r5
   1abc6:	f7fe fde9 	bl	1979c <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
   1abca:	4c16      	ldr	r4, [pc, #88]	; (1ac24 <sensor_mgr_init+0x94>)
   1abcc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1abd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1abd4:	9b03      	ldr	r3, [sp, #12]
   1abd6:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1abd8:	f7fd fdb8 	bl	1874c <os_cputime_get32>
   1abdc:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
   1abde:	f7ff ffd1 	bl	1ab84 <sensor_mgr_evq_get>
   1abe2:	4c11      	ldr	r4, [pc, #68]	; (1ac28 <sensor_mgr_init+0x98>)
   1abe4:	2300      	movs	r3, #0
   1abe6:	4a11      	ldr	r2, [pc, #68]	; (1ac2c <sensor_mgr_init+0x9c>)
   1abe8:	4601      	mov	r1, r0
   1abea:	4620      	mov	r0, r4
   1abec:	f7fd fcf8 	bl	185e0 <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
   1abf0:	2180      	movs	r1, #128	; 0x80
   1abf2:	4620      	mov	r0, r4
   1abf4:	f7fd fd20 	bl	18638 <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
   1abf8:	f1a6 000c 	sub.w	r0, r6, #12
   1abfc:	f7fe f9a8 	bl	18f50 <os_mutex_init>
}
   1ac00:	b008      	add	sp, #32
   1ac02:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
   1ac04:	2300      	movs	r3, #0
   1ac06:	461a      	mov	r2, r3
   1ac08:	4619      	mov	r1, r3
   1ac0a:	4618      	mov	r0, r3
   1ac0c:	f7fd fb6e 	bl	182ec <__assert_func>
   1ac10:	0001f97c 	.word	0x0001f97c
   1ac14:	2000d9ec 	.word	0x2000d9ec
   1ac18:	2000da64 	.word	0x2000da64
   1ac1c:	2000defc 	.word	0x2000defc
   1ac20:	0001adfd 	.word	0x0001adfd
   1ac24:	2000df48 	.word	0x2000df48
   1ac28:	2000df24 	.word	0x2000df24
   1ac2c:	0001aac1 	.word	0x0001aac1

0001ac30 <sensor_pkg_init>:
{
   1ac30:	b508      	push	{r3, lr}
    sensor_mgr_init();
   1ac32:	f7ff ffad 	bl	1ab90 <sensor_mgr_init>
}
   1ac36:	bd08      	pop	{r3, pc}

0001ac38 <sensor_lock>:
{
   1ac38:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
   1ac3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ac3e:	3004      	adds	r0, #4
   1ac40:	f7fe f9ec 	bl	1901c <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1ac44:	b108      	cbz	r0, 1ac4a <sensor_lock+0x12>
   1ac46:	2809      	cmp	r0, #9
   1ac48:	d000      	beq.n	1ac4c <sensor_lock+0x14>
}
   1ac4a:	bd08      	pop	{r3, pc}
        return (0);
   1ac4c:	2000      	movs	r0, #0
   1ac4e:	e7fc      	b.n	1ac4a <sensor_lock+0x12>

0001ac50 <sensor_unlock>:
{
   1ac50:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
   1ac52:	3004      	adds	r0, #4
   1ac54:	f7fe f986 	bl	18f64 <os_mutex_release>
}
   1ac58:	bd08      	pop	{r3, pc}

0001ac5a <sensor_update_nextrun>:
{
   1ac5a:	b530      	push	{r4, r5, lr}
   1ac5c:	b083      	sub	sp, #12
   1ac5e:	4604      	mov	r4, r0
   1ac60:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
   1ac62:	a901      	add	r1, sp, #4
   1ac64:	6a00      	ldr	r0, [r0, #32]
   1ac66:	f7fe fdb5 	bl	197d4 <os_time_ms_to_ticks>
    sensor_lock(sensor);
   1ac6a:	4620      	mov	r0, r4
   1ac6c:	f7ff ffe4 	bl	1ac38 <sensor_lock>
    sensor_mgr_remove(sensor);
   1ac70:	4620      	mov	r0, r4
   1ac72:	f7ff fe8f 	bl	1a994 <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
   1ac76:	9b01      	ldr	r3, [sp, #4]
   1ac78:	441d      	add	r5, r3
   1ac7a:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
   1ac7c:	4620      	mov	r0, r4
   1ac7e:	f7ff fe9d 	bl	1a9bc <sensor_mgr_insert>
    sensor_unlock(sensor);
   1ac82:	4620      	mov	r0, r4
   1ac84:	f7ff ffe4 	bl	1ac50 <sensor_unlock>
}
   1ac88:	b003      	add	sp, #12
   1ac8a:	bd30      	pop	{r4, r5, pc}

0001ac8c <sensor_calc_nextrun_delta>:
{
   1ac8c:	b538      	push	{r3, r4, r5, lr}
   1ac8e:	4605      	mov	r5, r0
   1ac90:	460c      	mov	r4, r1
    sensor_lock(sensor);
   1ac92:	f7ff ffd1 	bl	1ac38 <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
   1ac96:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
   1ac98:	1b0c      	subs	r4, r1, r4
   1ac9a:	d404      	bmi.n	1aca6 <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
   1ac9c:	4628      	mov	r0, r5
   1ac9e:	f7ff ffd7 	bl	1ac50 <sensor_unlock>
}
   1aca2:	4620      	mov	r0, r4
   1aca4:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
   1aca6:	2400      	movs	r4, #0
   1aca8:	e7f8      	b.n	1ac9c <sensor_calc_nextrun_delta+0x10>
	...

0001acac <sensor_find_min_nextrun_sensor>:
{
   1acac:	b570      	push	{r4, r5, r6, lr}
   1acae:	4606      	mov	r6, r0
   1acb0:	460d      	mov	r5, r1
    sensor_mgr_lock();
   1acb2:	f7ff ff51 	bl	1ab58 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
   1acb6:	4b05      	ldr	r3, [pc, #20]	; (1accc <sensor_find_min_nextrun_sensor+0x20>)
   1acb8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
   1acba:	4631      	mov	r1, r6
   1acbc:	4620      	mov	r0, r4
   1acbe:	f7ff ffe5 	bl	1ac8c <sensor_calc_nextrun_delta>
   1acc2:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
   1acc4:	f7ff ff56 	bl	1ab74 <sensor_mgr_unlock>
}
   1acc8:	4620      	mov	r0, r4
   1acca:	bd70      	pop	{r4, r5, r6, pc}
   1accc:	2000def0 	.word	0x2000def0

0001acd0 <sensor_mgr_register>:
{
   1acd0:	b538      	push	{r3, r4, r5, lr}
   1acd2:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
   1acd4:	f7ff ff40 	bl	1ab58 <sensor_mgr_lock>
    if (rc != 0) {
   1acd8:	4604      	mov	r4, r0
   1acda:	b108      	cbz	r0, 1ace0 <sensor_mgr_register+0x10>
}
   1acdc:	4620      	mov	r0, r4
   1acde:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
   1ace0:	4628      	mov	r0, r5
   1ace2:	f7ff ffa9 	bl	1ac38 <sensor_lock>
    if (rc != 0) {
   1ace6:	4604      	mov	r4, r0
   1ace8:	2800      	cmp	r0, #0
   1acea:	d1f7      	bne.n	1acdc <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
   1acec:	4628      	mov	r0, r5
   1acee:	f7ff fe65 	bl	1a9bc <sensor_mgr_insert>
    sensor_unlock(sensor);
   1acf2:	4628      	mov	r0, r5
   1acf4:	f7ff ffac 	bl	1ac50 <sensor_unlock>
    sensor_mgr_unlock();
   1acf8:	f7ff ff3c 	bl	1ab74 <sensor_mgr_unlock>
    return (0);
   1acfc:	e7ee      	b.n	1acdc <sensor_mgr_register+0xc>

0001acfe <sensor_init>:
{
   1acfe:	b538      	push	{r3, r4, r5, lr}
   1ad00:	4604      	mov	r4, r0
   1ad02:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
   1ad04:	2288      	movs	r2, #136	; 0x88
   1ad06:	2100      	movs	r1, #0
   1ad08:	f7fe fef3 	bl	19af2 <memset>
    rc = os_mutex_init(&sensor->s_lock);
   1ad0c:	1d20      	adds	r0, r4, #4
   1ad0e:	f7fe f91f 	bl	18f50 <os_mutex_init>
    if (rc != 0) {
   1ad12:	4603      	mov	r3, r0
   1ad14:	b900      	cbnz	r0, 1ad18 <sensor_init+0x1a>
    sensor->s_dev = dev;
   1ad16:	6025      	str	r5, [r4, #0]
}
   1ad18:	4618      	mov	r0, r3
   1ad1a:	bd38      	pop	{r3, r4, r5, pc}

0001ad1c <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
   1ad1c:	b530      	push	{r4, r5, lr}
   1ad1e:	b089      	sub	sp, #36	; 0x24
   1ad20:	4604      	mov	r4, r0
   1ad22:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
   1ad26:	f7ff ff87 	bl	1ac38 <sensor_lock>
    if (rc) {
   1ad2a:	4605      	mov	r5, r0
   1ad2c:	b9f8      	cbnz	r0, 1ad6e <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
   1ad2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ad30:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
   1ad32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ad34:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
   1ad36:	a904      	add	r1, sp, #16
   1ad38:	4620      	mov	r0, r4
   1ad3a:	f7ff fe7b 	bl	1aa34 <sensor_mgr_match_bytype>
   1ad3e:	b1e0      	cbz	r0, 1ad7a <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
   1ad40:	4620      	mov	r0, r4
   1ad42:	f7ff fee1 	bl	1ab08 <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
   1ad46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1ad48:	6819      	ldr	r1, [r3, #0]
   1ad4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ad4c:	9302      	str	r3, [sp, #8]
   1ad4e:	ab06      	add	r3, sp, #24
   1ad50:	9301      	str	r3, [sp, #4]
   1ad52:	4b0b      	ldr	r3, [pc, #44]	; (1ad80 <sensor_read+0x64>)
   1ad54:	9300      	str	r3, [sp, #0]
   1ad56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ad5a:	4620      	mov	r0, r4
   1ad5c:	4788      	blx	r1
                                  timeout);
    if (rc) {
   1ad5e:	4605      	mov	r5, r0
   1ad60:	b128      	cbz	r0, 1ad6e <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
   1ad62:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1ad64:	b11b      	cbz	r3, 1ad6e <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
   1ad66:	4602      	mov	r2, r0
   1ad68:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1ad6a:	4620      	mov	r0, r4
   1ad6c:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
   1ad6e:	4620      	mov	r0, r4
   1ad70:	f7ff ff6e 	bl	1ac50 <sensor_unlock>
    return (rc);
}
   1ad74:	4628      	mov	r0, r5
   1ad76:	b009      	add	sp, #36	; 0x24
   1ad78:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
   1ad7a:	f06f 0503 	mvn.w	r5, #3
   1ad7e:	e7f6      	b.n	1ad6e <sensor_read+0x52>
   1ad80:	0001aa63 	.word	0x0001aa63

0001ad84 <sensor_mgr_poll_bytype>:
{
   1ad84:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ad86:	b085      	sub	sp, #20
   1ad88:	4616      	mov	r6, r2
   1ad8a:	461f      	mov	r7, r3
   1ad8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
   1ad8e:	b10c      	cbz	r4, 1ad94 <sensor_mgr_poll_bytype+0x10>
   1ad90:	8aa3      	ldrh	r3, [r4, #20]
   1ad92:	b9cb      	cbnz	r3, 1adc8 <sensor_mgr_poll_bytype+0x44>
   1ad94:	4632      	mov	r2, r6
   1ad96:	463b      	mov	r3, r7
   1ad98:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
   1ad9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ad9e:	9102      	str	r1, [sp, #8]
   1ada0:	2100      	movs	r1, #0
   1ada2:	9101      	str	r1, [sp, #4]
   1ada4:	9100      	str	r1, [sp, #0]
   1ada6:	f7ff ffb9 	bl	1ad1c <sensor_read>
        sensor_lock(sensor);
   1adaa:	4628      	mov	r0, r5
   1adac:	f7ff ff44 	bl	1ac38 <sensor_lock>
        if (stt) {
   1adb0:	b12c      	cbz	r4, 1adbe <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
   1adb2:	8aa3      	ldrh	r3, [r4, #20]
   1adb4:	b91b      	cbnz	r3, 1adbe <sensor_mgr_poll_bytype+0x3a>
   1adb6:	8a63      	ldrh	r3, [r4, #18]
   1adb8:	b10b      	cbz	r3, 1adbe <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
   1adba:	3b01      	subs	r3, #1
   1adbc:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
   1adbe:	4628      	mov	r0, r5
   1adc0:	f7ff ff46 	bl	1ac50 <sensor_unlock>
}
   1adc4:	b005      	add	sp, #20
   1adc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
   1adc8:	3b01      	subs	r3, #1
   1adca:	82a3      	strh	r3, [r4, #20]
}
   1adcc:	e7fa      	b.n	1adc4 <sensor_mgr_poll_bytype+0x40>

0001adce <sensor_poll_per_type_trait>:
{
   1adce:	b570      	push	{r4, r5, r6, lr}
   1add0:	b082      	sub	sp, #8
   1add2:	4605      	mov	r5, r0
   1add4:	460e      	mov	r6, r1
    sensor_lock(sensor);
   1add6:	f7ff ff2f 	bl	1ac38 <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1adda:	6fec      	ldr	r4, [r5, #124]	; 0x7c
   1addc:	e007      	b.n	1adee <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
   1adde:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ade2:	9601      	str	r6, [sp, #4]
   1ade4:	9400      	str	r4, [sp, #0]
   1ade6:	4628      	mov	r0, r5
   1ade8:	f7ff ffcc 	bl	1ad84 <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1adec:	6a24      	ldr	r4, [r4, #32]
   1adee:	2c00      	cmp	r4, #0
   1adf0:	d1f5      	bne.n	1adde <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
   1adf2:	4628      	mov	r0, r5
   1adf4:	f7ff ff2c 	bl	1ac50 <sensor_unlock>
}
   1adf8:	b002      	add	sp, #8
   1adfa:	bd70      	pop	{r4, r5, r6, pc}

0001adfc <sensor_mgr_wakeup_event>:
{
   1adfc:	b570      	push	{r4, r5, r6, lr}
   1adfe:	b084      	sub	sp, #16
    now = os_time_get();
   1ae00:	f7fe fc92 	bl	19728 <os_time_get>
   1ae04:	4605      	mov	r5, r0
    sensor_mgr_lock();
   1ae06:	f7ff fea7 	bl	1ab58 <sensor_mgr_lock>
   1ae0a:	e012      	b.n	1ae32 <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
   1ae0c:	4620      	mov	r0, r4
   1ae0e:	f7ff ff1f 	bl	1ac50 <sensor_unlock>
            sensor_mgr_unlock();
   1ae12:	f7ff feaf 	bl	1ab74 <sensor_mgr_unlock>
}
   1ae16:	b004      	add	sp, #16
   1ae18:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
   1ae1a:	4632      	mov	r2, r6
   1ae1c:	4629      	mov	r1, r5
   1ae1e:	4620      	mov	r0, r4
   1ae20:	f7ff ffd5 	bl	1adce <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
   1ae24:	4629      	mov	r1, r5
   1ae26:	4620      	mov	r0, r4
   1ae28:	f7ff ff17 	bl	1ac5a <sensor_update_nextrun>
        sensor_unlock(cursor);
   1ae2c:	4620      	mov	r0, r4
   1ae2e:	f7ff ff0f 	bl	1ac50 <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
   1ae32:	a903      	add	r1, sp, #12
   1ae34:	4628      	mov	r0, r5
   1ae36:	f7ff ff39 	bl	1acac <sensor_find_min_nextrun_sensor>
   1ae3a:	4604      	mov	r4, r0
        sensor_lock(cursor);
   1ae3c:	f7ff fefc 	bl	1ac38 <sensor_lock>
        if (!cursor->s_poll_rate) {
   1ae40:	6a23      	ldr	r3, [r4, #32]
   1ae42:	2b00      	cmp	r3, #0
   1ae44:	d0e2      	beq.n	1ae0c <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
   1ae46:	9e03      	ldr	r6, [sp, #12]
   1ae48:	b96e      	cbnz	r6, 1ae66 <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
   1ae4a:	4620      	mov	r0, r4
   1ae4c:	f7ff fde6 	bl	1aa1c <sensor_type_traits_empty>
   1ae50:	2800      	cmp	r0, #0
   1ae52:	d0e2      	beq.n	1ae1a <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
   1ae54:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1ae58:	9501      	str	r5, [sp, #4]
   1ae5a:	2100      	movs	r1, #0
   1ae5c:	9100      	str	r1, [sp, #0]
   1ae5e:	4620      	mov	r0, r4
   1ae60:	f7ff ff90 	bl	1ad84 <sensor_mgr_poll_bytype>
   1ae64:	e7de      	b.n	1ae24 <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
   1ae66:	f7ff fe85 	bl	1ab74 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
   1ae6a:	9903      	ldr	r1, [sp, #12]
   1ae6c:	4801      	ldr	r0, [pc, #4]	; (1ae74 <sensor_mgr_wakeup_event+0x78>)
   1ae6e:	f7fd fbe3 	bl	18638 <os_callout_reset>
   1ae72:	e7d0      	b.n	1ae16 <sensor_mgr_wakeup_event+0x1a>
   1ae74:	2000defc 	.word	0x2000defc

0001ae78 <init_sensor_coap>:

///////////////////////////////////////////////////////////////////////////////
//  CoAP Functions

///  Init the Sensor CoAP module. Called by sysinit() during startup, defined in pkg.yml.
void init_sensor_coap(void) {
   1ae78:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
   1ae7a:	2101      	movs	r1, #1
   1ae7c:	4806      	ldr	r0, [pc, #24]	; (1ae98 <init_sensor_coap+0x20>)
   1ae7e:	f7fe faf1 	bl	19464 <os_sem_init>
    assert(rc == OS_OK);
   1ae82:	b918      	cbnz	r0, 1ae8c <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
   1ae84:	4b05      	ldr	r3, [pc, #20]	; (1ae9c <init_sensor_coap+0x24>)
   1ae86:	2201      	movs	r2, #1
   1ae88:	701a      	strb	r2, [r3, #0]
}
   1ae8a:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
   1ae8c:	2300      	movs	r3, #0
   1ae8e:	461a      	mov	r2, r3
   1ae90:	4619      	mov	r1, r3
   1ae92:	4618      	mov	r0, r3
   1ae94:	f7fd fa2a 	bl	182ec <__assert_func>
   1ae98:	2000da80 	.word	0x2000da80
   1ae9c:	2000da88 	.word	0x2000da88

0001aea0 <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1aea0:	4b04      	ldr	r3, [pc, #16]	; (1aeb4 <is_sensor_node+0x14>)
   1aea2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aea6:	4313      	orrs	r3, r2
   1aea8:	d101      	bne.n	1aeae <is_sensor_node+0xe>
    return false;
   1aeaa:	2000      	movs	r0, #0
}
   1aeac:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1aeae:	2001      	movs	r0, #1
   1aeb0:	4770      	bx	lr
   1aeb2:	bf00      	nop
   1aeb4:	2000daa0 	.word	0x2000daa0

0001aeb8 <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
   1aeb8:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
   1aeba:	4b16      	ldr	r3, [pc, #88]	; (1af14 <get_hardware_id+0x5c>)
   1aebc:	681b      	ldr	r3, [r3, #0]
   1aebe:	b10b      	cbz	r3, 1aec4 <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
   1aec0:	4815      	ldr	r0, [pc, #84]	; (1af18 <get_hardware_id+0x60>)
   1aec2:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
   1aec4:	f000 fcee 	bl	1b8a4 <hal_bsp_hw_id_len>
   1aec8:	4b12      	ldr	r3, [pc, #72]	; (1af14 <get_hardware_id+0x5c>)
   1aeca:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1aecc:	280b      	cmp	r0, #11
   1aece:	d914      	bls.n	1aefa <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1aed0:	210c      	movs	r1, #12
   1aed2:	4811      	ldr	r0, [pc, #68]	; (1af18 <get_hardware_id+0x60>)
   1aed4:	f000 fce8 	bl	1b8a8 <hal_bsp_hw_id>
   1aed8:	4b0e      	ldr	r3, [pc, #56]	; (1af14 <get_hardware_id+0x5c>)
   1aeda:	6018      	str	r0, [r3, #0]
   1aedc:	2800      	cmp	r0, #0
   1aede:	dd12      	ble.n	1af06 <get_hardware_id+0x4e>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
   1aee0:	490e      	ldr	r1, [pc, #56]	; (1af1c <get_hardware_id+0x64>)
   1aee2:	480f      	ldr	r0, [pc, #60]	; (1af20 <get_hardware_id+0x68>)
   1aee4:	f7fc fb3a 	bl	1755c <console_printf>
   1aee8:	4b0a      	ldr	r3, [pc, #40]	; (1af14 <get_hardware_id+0x5c>)
   1aeea:	6819      	ldr	r1, [r3, #0]
   1aeec:	480a      	ldr	r0, [pc, #40]	; (1af18 <get_hardware_id+0x60>)
   1aeee:	f7fc fac5 	bl	1747c <console_dump>
   1aef2:	480c      	ldr	r0, [pc, #48]	; (1af24 <get_hardware_id+0x6c>)
   1aef4:	f7fc fb32 	bl	1755c <console_printf>
   1aef8:	e7e2      	b.n	1aec0 <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1aefa:	2300      	movs	r3, #0
   1aefc:	461a      	mov	r2, r3
   1aefe:	4619      	mov	r1, r3
   1af00:	4618      	mov	r0, r3
   1af02:	f7fd f9f3 	bl	182ec <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1af06:	2300      	movs	r3, #0
   1af08:	461a      	mov	r2, r3
   1af0a:	4619      	mov	r1, r3
   1af0c:	4618      	mov	r0, r3
   1af0e:	f7fd f9ed 	bl	182ec <__assert_func>
   1af12:	bf00      	nop
   1af14:	2000da98 	.word	0x2000da98
   1af18:	2000da8c 	.word	0x2000da8c
   1af1c:	0001fa20 	.word	0x0001fa20
   1af20:	0001f9d8 	.word	0x0001f9d8
   1af24:	0001fb38 	.word	0x0001fb38

0001af28 <is_collector_node>:
bool is_collector_node(void) {
   1af28:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
   1af2a:	f7ff ffc5 	bl	1aeb8 <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1af2e:	220c      	movs	r2, #12
   1af30:	4903      	ldr	r1, [pc, #12]	; (1af40 <is_collector_node+0x18>)
   1af32:	f7fe fdad 	bl	19a90 <memcmp>
   1af36:	b108      	cbz	r0, 1af3c <is_collector_node+0x14>
    return false; 
   1af38:	2000      	movs	r0, #0
}
   1af3a:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1af3c:	2001      	movs	r0, #1
   1af3e:	e7fc      	b.n	1af3a <is_collector_node+0x12>
   1af40:	0001f990 	.word	0x0001f990

0001af44 <is_standalone_node>:
bool is_standalone_node(void) {
   1af44:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
   1af46:	f7ff ffef 	bl	1af28 <is_collector_node>
   1af4a:	b928      	cbnz	r0, 1af58 <is_standalone_node+0x14>
   1af4c:	4604      	mov	r4, r0
   1af4e:	f7ff ffa7 	bl	1aea0 <is_sensor_node>
   1af52:	b910      	cbnz	r0, 1af5a <is_standalone_node+0x16>
   1af54:	2401      	movs	r4, #1
   1af56:	e000      	b.n	1af5a <is_standalone_node+0x16>
    return false;
   1af58:	2400      	movs	r4, #0
}
   1af5a:	4620      	mov	r0, r4
   1af5c:	bd10      	pop	{r4, pc}
	...

0001af60 <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
   1af60:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1af62:	2400      	movs	r4, #0
   1af64:	2c04      	cmp	r4, #4
   1af66:	dc15      	bgt.n	1af94 <sensor_network_init+0x34>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
   1af68:	4b23      	ldr	r3, [pc, #140]	; (1aff8 <sensor_network_init+0x98>)
   1af6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1af6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1af72:	4922      	ldr	r1, [pc, #136]	; (1affc <sensor_network_init+0x9c>)
   1af74:	4822      	ldr	r0, [pc, #136]	; (1b000 <sensor_network_init+0xa0>)
   1af76:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1af7a:	f000 fcaf 	bl	1b8dc <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1af7e:	3001      	adds	r0, #1
   1af80:	280b      	cmp	r0, #11
   1af82:	dc01      	bgt.n	1af88 <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1af84:	3401      	adds	r4, #1
   1af86:	e7ed      	b.n	1af64 <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1af88:	2300      	movs	r3, #0
   1af8a:	461a      	mov	r2, r3
   1af8c:	4619      	mov	r1, r3
   1af8e:	4618      	mov	r0, r3
   1af90:	f7fd f9ac 	bl	182ec <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
   1af94:	f7ff ff90 	bl	1aeb8 <get_hardware_id>
   1af98:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1af9a:	2400      	movs	r4, #0
   1af9c:	2c04      	cmp	r4, #4
   1af9e:	dc19      	bgt.n	1afd4 <sensor_network_init+0x74>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
   1afa0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1afa4:	0093      	lsls	r3, r2, #2
   1afa6:	220c      	movs	r2, #12
   1afa8:	4916      	ldr	r1, [pc, #88]	; (1b004 <sensor_network_init+0xa4>)
   1afaa:	4419      	add	r1, r3
   1afac:	4628      	mov	r0, r5
   1afae:	f7fe fd6f 	bl	19a90 <memcmp>
   1afb2:	b108      	cbz	r0, 1afb8 <sensor_network_init+0x58>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1afb4:	3401      	adds	r4, #1
   1afb6:	e7f1      	b.n	1af9c <sensor_network_init+0x3c>
            sensor_node_address = sensor_node_addresses[i];
   1afb8:	4b0f      	ldr	r3, [pc, #60]	; (1aff8 <sensor_network_init+0x98>)
   1afba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1afbe:	e9d3 0100 	ldrd	r0, r1, [r3]
   1afc2:	4b11      	ldr	r3, [pc, #68]	; (1b008 <sensor_network_init+0xa8>)
   1afc4:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
   1afc8:	1c63      	adds	r3, r4, #1
   1afca:	4a10      	ldr	r2, [pc, #64]	; (1b00c <sensor_network_init+0xac>)
   1afcc:	4910      	ldr	r1, [pc, #64]	; (1b010 <sensor_network_init+0xb0>)
   1afce:	4811      	ldr	r0, [pc, #68]	; (1b014 <sensor_network_init+0xb4>)
   1afd0:	f7fc fac4 	bl	1755c <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1afd4:	f7ff ffa8 	bl	1af28 <is_collector_node>
   1afd8:	b940      	cbnz	r0, 1afec <sensor_network_init+0x8c>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
   1afda:	f7ff ffb3 	bl	1af44 <is_standalone_node>
   1afde:	b150      	cbz	r0, 1aff6 <sensor_network_init+0x96>
   1afe0:	4a0a      	ldr	r2, [pc, #40]	; (1b00c <sensor_network_init+0xac>)
   1afe2:	490b      	ldr	r1, [pc, #44]	; (1b010 <sensor_network_init+0xb0>)
   1afe4:	480c      	ldr	r0, [pc, #48]	; (1b018 <sensor_network_init+0xb8>)
   1afe6:	f7fc fab9 	bl	1755c <console_printf>
}
   1afea:	e004      	b.n	1aff6 <sensor_network_init+0x96>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1afec:	4a07      	ldr	r2, [pc, #28]	; (1b00c <sensor_network_init+0xac>)
   1afee:	4908      	ldr	r1, [pc, #32]	; (1b010 <sensor_network_init+0xb0>)
   1aff0:	480a      	ldr	r0, [pc, #40]	; (1b01c <sensor_network_init+0xbc>)
   1aff2:	f7fc fab3 	bl	1755c <console_printf>
}
   1aff6:	bd38      	pop	{r3, r4, r5, pc}
   1aff8:	0001fa38 	.word	0x0001fa38
   1affc:	0001f9e0 	.word	0x0001f9e0
   1b000:	20000130 	.word	0x20000130
   1b004:	0001f99c 	.word	0x0001f99c
   1b008:	2000daa0 	.word	0x2000daa0
   1b00c:	0001f9e8 	.word	0x0001f9e8
   1b010:	0001fa20 	.word	0x0001fa20
   1b014:	0001f9f0 	.word	0x0001f9f0
   1b018:	0001fa10 	.word	0x0001fa10
   1b01c:	0001fa00 	.word	0x0001fa00

0001b020 <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
   1b020:	b530      	push	{r4, r5, lr}
   1b022:	b083      	sub	sp, #12
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
   1b024:	2200      	movs	r2, #0
   1b026:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b02a:	4810      	ldr	r0, [pc, #64]	; (1b06c <config_device+0x4c>)
   1b02c:	f7fd fc2c 	bl	18888 <os_dev_open>
    assert(dev != NULL);
   1b030:	b178      	cbz	r0, 1b052 <config_device+0x32>
   1b032:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
   1b034:	4668      	mov	r0, sp
   1b036:	f000 f86c 	bl	1b112 <temp_stub_default_cfg>
    assert(rc == 0);
   1b03a:	b980      	cbnz	r0, 1b05e <config_device+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
   1b03c:	4669      	mov	r1, sp
   1b03e:	4620      	mov	r0, r4
   1b040:	f000 f900 	bl	1b244 <temp_stub_config>
   1b044:	4605      	mov	r5, r0
    os_dev_close(dev);
   1b046:	4620      	mov	r0, r4
   1b048:	f7fd fc40 	bl	188cc <os_dev_close>
    return rc;
}
   1b04c:	4628      	mov	r0, r5
   1b04e:	b003      	add	sp, #12
   1b050:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
   1b052:	2300      	movs	r3, #0
   1b054:	461a      	mov	r2, r3
   1b056:	4619      	mov	r1, r3
   1b058:	4618      	mov	r0, r3
   1b05a:	f7fd f947 	bl	182ec <__assert_func>
    assert(rc == 0);
   1b05e:	2300      	movs	r3, #0
   1b060:	461a      	mov	r2, r3
   1b062:	4619      	mov	r1, r3
   1b064:	4618      	mov	r0, r3
   1b066:	f7fd f941 	bl	182ec <__assert_func>
   1b06a:	bf00      	nop
   1b06c:	0001fa60 	.word	0x0001fa60

0001b070 <temp_stub_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
   1b070:	b510      	push	{r4, lr}
   1b072:	b082      	sub	sp, #8
    console_printf("TMP create %s\n", DEVICE_NAME);
   1b074:	4c10      	ldr	r4, [pc, #64]	; (1b0b8 <temp_stub_create+0x48>)
   1b076:	4621      	mov	r1, r4
   1b078:	4810      	ldr	r0, [pc, #64]	; (1b0bc <temp_stub_create+0x4c>)
   1b07a:	f7fc fa6f 	bl	1755c <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
   1b07e:	4b10      	ldr	r3, [pc, #64]	; (1b0c0 <temp_stub_create+0x50>)
   1b080:	9301      	str	r3, [sp, #4]
   1b082:	4b10      	ldr	r3, [pc, #64]	; (1b0c4 <temp_stub_create+0x54>)
   1b084:	9300      	str	r3, [sp, #0]
   1b086:	2300      	movs	r3, #0
   1b088:	2201      	movs	r2, #1
   1b08a:	4621      	mov	r1, r4
   1b08c:	480e      	ldr	r0, [pc, #56]	; (1b0c8 <temp_stub_create+0x58>)
   1b08e:	f7fd fbb5 	bl	187fc <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
   1b092:	b920      	cbnz	r0, 1b09e <temp_stub_create+0x2e>

    //  Configure the device.
    rc = config_device();
   1b094:	f7ff ffc4 	bl	1b020 <config_device>
    assert(rc == 0);
   1b098:	b938      	cbnz	r0, 1b0aa <temp_stub_create+0x3a>
}
   1b09a:	b002      	add	sp, #8
   1b09c:	bd10      	pop	{r4, pc}
    assert(rc == 0);
   1b09e:	2300      	movs	r3, #0
   1b0a0:	461a      	mov	r2, r3
   1b0a2:	4619      	mov	r1, r3
   1b0a4:	4618      	mov	r0, r3
   1b0a6:	f7fd f921 	bl	182ec <__assert_func>
    assert(rc == 0);
   1b0aa:	2300      	movs	r3, #0
   1b0ac:	461a      	mov	r2, r3
   1b0ae:	4619      	mov	r1, r3
   1b0b0:	4618      	mov	r0, r3
   1b0b2:	f7fd f91b 	bl	182ec <__assert_func>
   1b0b6:	bf00      	nop
   1b0b8:	0001fa60 	.word	0x0001fa60
   1b0bc:	0001fa6c 	.word	0x0001fa6c
   1b0c0:	2000dae0 	.word	0x2000dae0
   1b0c4:	0001b121 	.word	0x0001b121
   1b0c8:	2000daf8 	.word	0x2000daf8

0001b0cc <temp_stub_close>:
}

static int temp_stub_close(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
   1b0cc:	2000      	movs	r0, #0
   1b0ce:	4770      	bx	lr

0001b0d0 <temp_stub_sensor_get_config>:

static int temp_stub_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
   1b0d0:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
   1b0d4:	2100      	movs	r1, #0
   1b0d6:	ea50 0301 	orrs.w	r3, r0, r1
   1b0da:	d004      	beq.n	1b0e6 <temp_stub_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
   1b0dc:	9b00      	ldr	r3, [sp, #0]
   1b0de:	2201      	movs	r2, #1
   1b0e0:	701a      	strb	r2, [r3, #0]
    return (0);
   1b0e2:	2000      	movs	r0, #0
   1b0e4:	4770      	bx	lr
err:
    return (rc);
   1b0e6:	f06f 0001 	mvn.w	r0, #1
}
   1b0ea:	4770      	bx	lr

0001b0ec <temp_stub_open>:
static int temp_stub_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
   1b0ec:	b508      	push	{r3, lr}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1b0ee:	b120      	cbz	r0, 1b0fa <temp_stub_open+0xe>
    cfg = &dev->cfg; assert(cfg);
   1b0f0:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
   1b0f4:	d007      	beq.n	1b106 <temp_stub_open+0x1a>
}
   1b0f6:	2000      	movs	r0, #0
   1b0f8:	bd08      	pop	{r3, pc}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1b0fa:	2300      	movs	r3, #0
   1b0fc:	461a      	mov	r2, r3
   1b0fe:	4619      	mov	r1, r3
   1b100:	4618      	mov	r0, r3
   1b102:	f7fd f8f3 	bl	182ec <__assert_func>
    cfg = &dev->cfg; assert(cfg);
   1b106:	2300      	movs	r3, #0
   1b108:	461a      	mov	r2, r3
   1b10a:	4619      	mov	r1, r3
   1b10c:	4618      	mov	r0, r3
   1b10e:	f7fd f8ed 	bl	182ec <__assert_func>

0001b112 <temp_stub_default_cfg>:
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
   1b112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b116:	2300      	movs	r3, #0
   1b118:	e9c0 2300 	strd	r2, r3, [r0]
}
   1b11c:	2000      	movs	r0, #0
   1b11e:	4770      	bx	lr

0001b120 <temp_stub_init>:
int temp_stub_init(struct os_dev *dev0, void *arg) {
   1b120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1b122:	b379      	cbz	r1, 1b184 <temp_stub_init+0x64>
   1b124:	460d      	mov	r5, r1
   1b126:	b380      	cbz	r0, 1b18a <temp_stub_init+0x6a>
   1b128:	4604      	mov	r4, r0
    rc = temp_stub_default_cfg(&dev->cfg);
   1b12a:	30b0      	adds	r0, #176	; 0xb0
   1b12c:	f7ff fff1 	bl	1b112 <temp_stub_default_cfg>
    if (rc) { goto err; }
   1b130:	4603      	mov	r3, r0
   1b132:	b108      	cbz	r0, 1b138 <temp_stub_init+0x18>
}
   1b134:	4618      	mov	r0, r3
   1b136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
   1b138:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
   1b13c:	4621      	mov	r1, r4
   1b13e:	4630      	mov	r0, r6
   1b140:	f7ff fddd 	bl	1acfe <sensor_init>
    if (rc != 0) { goto err; }
   1b144:	4603      	mov	r3, r0
   1b146:	2800      	cmp	r0, #0
   1b148:	d1f4      	bne.n	1b134 <temp_stub_init+0x14>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
   1b14a:	4b11      	ldr	r3, [pc, #68]	; (1b190 <temp_stub_init+0x70>)
   1b14c:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
   1b14e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1b152:	2300      	movs	r3, #0
   1b154:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
   1b158:	682a      	ldr	r2, [r5, #0]
   1b15a:	686f      	ldr	r7, [r5, #4]
   1b15c:	68a8      	ldr	r0, [r5, #8]
   1b15e:	68e9      	ldr	r1, [r5, #12]
   1b160:	6722      	str	r2, [r4, #112]	; 0x70
   1b162:	6767      	str	r7, [r4, #116]	; 0x74
   1b164:	67a0      	str	r0, [r4, #120]	; 0x78
   1b166:	67e1      	str	r1, [r4, #124]	; 0x7c
   1b168:	692a      	ldr	r2, [r5, #16]
   1b16a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
   1b16e:	4630      	mov	r0, r6
   1b170:	f7ff fdae 	bl	1acd0 <sensor_mgr_register>
    if (rc != 0) { goto err; }
   1b174:	4603      	mov	r3, r0
   1b176:	2800      	cmp	r0, #0
   1b178:	d1dc      	bne.n	1b134 <temp_stub_init+0x14>
    OS_DEV_SETHANDLERS(dev0, temp_stub_open, temp_stub_close);
   1b17a:	4a06      	ldr	r2, [pc, #24]	; (1b194 <temp_stub_init+0x74>)
   1b17c:	6022      	str	r2, [r4, #0]
   1b17e:	4a06      	ldr	r2, [pc, #24]	; (1b198 <temp_stub_init+0x78>)
   1b180:	60e2      	str	r2, [r4, #12]
    return (0);
   1b182:	e7d7      	b.n	1b134 <temp_stub_init+0x14>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1b184:	f06f 0308 	mvn.w	r3, #8
   1b188:	e7d4      	b.n	1b134 <temp_stub_init+0x14>
   1b18a:	f06f 0308 	mvn.w	r3, #8
   1b18e:	e7d1      	b.n	1b134 <temp_stub_init+0x14>
   1b190:	0001fa7c 	.word	0x0001fa7c
   1b194:	0001b0ed 	.word	0x0001b0ed
   1b198:	0001b0cd 	.word	0x0001b0cd

0001b19c <temp_stub_get_raw_temperature>:
int temp_stub_get_raw_temperature(struct temp_stub *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
   1b19c:	b538      	push	{r3, r4, r5, lr}
   1b19e:	460d      	mov	r5, r1
   1b1a0:	4614      	mov	r4, r2
    console_printf("STB read temp sensor\n");  ////
   1b1a2:	4808      	ldr	r0, [pc, #32]	; (1b1c4 <temp_stub_get_raw_temperature+0x28>)
   1b1a4:	f7fc f9da 	bl	1755c <console_printf>
    assert(temp_sum);
   1b1a8:	b134      	cbz	r4, 1b1b8 <temp_stub_get_raw_temperature+0x1c>
    *temp_sum = 1757 * num_readings;
   1b1aa:	f240 61dd 	movw	r1, #1757	; 0x6dd
   1b1ae:	fb01 f105 	mul.w	r1, r1, r5
   1b1b2:	6021      	str	r1, [r4, #0]
}
   1b1b4:	2000      	movs	r0, #0
   1b1b6:	bd38      	pop	{r3, r4, r5, pc}
    assert(temp_sum);
   1b1b8:	2300      	movs	r3, #0
   1b1ba:	461a      	mov	r2, r3
   1b1bc:	4619      	mov	r1, r3
   1b1be:	4618      	mov	r0, r3
   1b1c0:	f7fd f894 	bl	182ec <__assert_func>
   1b1c4:	0001faa4 	.word	0x0001faa4

0001b1c8 <temp_stub_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
   1b1c8:	b530      	push	{r4, r5, lr}
   1b1ca:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1b1cc:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
   1b1d0:	2500      	movs	r5, #0
   1b1d2:	ea54 0305 	orrs.w	r3, r4, r5
   1b1d6:	d032      	beq.n	1b23e <temp_stub_sensor_read+0x76>
   1b1d8:	4604      	mov	r4, r0
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1b1da:	6805      	ldr	r5, [r0, #0]
   1b1dc:	b165      	cbz	r5, 1b1f8 <temp_stub_sensor_read+0x30>
    rawtemp = -1;
   1b1de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b1e2:	9303      	str	r3, [sp, #12]
        rc = temp_stub_open((struct os_dev *) dev, 0, NULL);
   1b1e4:	2200      	movs	r2, #0
   1b1e6:	4611      	mov	r1, r2
   1b1e8:	4628      	mov	r0, r5
   1b1ea:	f7ff ff7f 	bl	1b0ec <temp_stub_open>
        if (rc) { goto err; }
   1b1ee:	4603      	mov	r3, r0
   1b1f0:	b140      	cbz	r0, 1b204 <temp_stub_sensor_read+0x3c>
}
   1b1f2:	4618      	mov	r0, r3
   1b1f4:	b007      	add	sp, #28
   1b1f6:	bd30      	pop	{r4, r5, pc}
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1b1f8:	2300      	movs	r3, #0
   1b1fa:	461a      	mov	r2, r3
   1b1fc:	4619      	mov	r1, r3
   1b1fe:	4618      	mov	r0, r3
   1b200:	f7fd f874 	bl	182ec <__assert_func>
        rc = temp_stub_get_raw_temperature(dev, 1, &rawtemp, NULL);
   1b204:	2300      	movs	r3, #0
   1b206:	aa03      	add	r2, sp, #12
   1b208:	2101      	movs	r1, #1
   1b20a:	4628      	mov	r0, r5
   1b20c:	f7ff ffc6 	bl	1b19c <temp_stub_get_raw_temperature>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
   1b210:	4603      	mov	r3, r0
   1b212:	2800      	cmp	r0, #0
   1b214:	d1ed      	bne.n	1b1f2 <temp_stub_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
   1b216:	9a03      	ldr	r2, [sp, #12]
   1b218:	9204      	str	r2, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
   1b21a:	2201      	movs	r2, #1
   1b21c:	f88d 2014 	strb.w	r2, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
   1b220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b222:	2a00      	cmp	r2, #0
   1b224:	d0e5      	beq.n	1b1f2 <temp_stub_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
   1b226:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1b22a:	2300      	movs	r3, #0
   1b22c:	e9cd 2300 	strd	r2, r3, [sp]
   1b230:	aa04      	add	r2, sp, #16
   1b232:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1b234:	4620      	mov	r0, r4
   1b236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b238:	4798      	blx	r3
   1b23a:	4603      	mov	r3, r0
   1b23c:	e7d9      	b.n	1b1f2 <temp_stub_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1b23e:	f06f 0301 	mvn.w	r3, #1
   1b242:	e7d6      	b.n	1b1f2 <temp_stub_sensor_read+0x2a>

0001b244 <temp_stub_config>:
 * @param Sensor device temp_stub structure
 * @param Sensor device temp_stub_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stub_config(struct temp_stub *dev, struct temp_stub_cfg *cfg) {
   1b244:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1b246:	f110 0f70 	cmn.w	r0, #112	; 0x70
   1b24a:	d009      	beq.n	1b260 <temp_stub_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
   1b24c:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
   1b250:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
   1b254:	e9d1 2300 	ldrd	r2, r3, [r1]
   1b258:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
   1b25c:	2000      	movs	r0, #0
   1b25e:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1b260:	2300      	movs	r3, #0
   1b262:	461a      	mov	r2, r3
   1b264:	4619      	mov	r1, r3
   1b266:	4618      	mov	r0, r3
   1b268:	f7fd f840 	bl	182ec <__assert_func>

0001b26c <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
   1b26c:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1b26e:	e002      	b.n	1b276 <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
   1b270:	4618      	mov	r0, r3
   1b272:	f000 f85b 	bl	1b32c <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1b276:	4808      	ldr	r0, [pc, #32]	; (1b298 <oc_buffer_tx+0x2c>)
   1b278:	f7fd fc03 	bl	18a82 <os_mqueue_get>
   1b27c:	4603      	mov	r3, r0
   1b27e:	b148      	cbz	r0, 1b294 <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
   1b280:	2200      	movs	r2, #0
   1b282:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
   1b284:	7e1a      	ldrb	r2, [r3, #24]
   1b286:	f012 0f08 	tst.w	r2, #8
   1b28a:	d0f1      	beq.n	1b270 <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
   1b28c:	4618      	mov	r0, r3
   1b28e:	f000 f85d 	bl	1b34c <oc_send_multicast_message>
   1b292:	e7f0      	b.n	1b276 <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
   1b294:	bd08      	pop	{r3, pc}
   1b296:	bf00      	nop
   1b298:	2000dbd0 	.word	0x2000dbd0

0001b29c <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
   1b29c:	b500      	push	{lr}
   1b29e:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
   1b2a0:	4808      	ldr	r0, [pc, #32]	; (1b2c4 <oc_buffer_rx+0x28>)
   1b2a2:	f7fd fbee 	bl	18a82 <os_mqueue_get>
   1b2a6:	9001      	str	r0, [sp, #4]
   1b2a8:	b140      	cbz	r0, 1b2bc <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
   1b2aa:	a801      	add	r0, sp, #4
   1b2ac:	f000 faa2 	bl	1b7f4 <__wrap_coap_receive>
#endif
        if (m) {
   1b2b0:	9801      	ldr	r0, [sp, #4]
   1b2b2:	2800      	cmp	r0, #0
   1b2b4:	d0f4      	beq.n	1b2a0 <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
   1b2b6:	f7fd fc59 	bl	18b6c <os_mbuf_free_chain>
   1b2ba:	e7f1      	b.n	1b2a0 <oc_buffer_rx+0x4>
        }
    }
}
   1b2bc:	b003      	add	sp, #12
   1b2be:	f85d fb04 	ldr.w	pc, [sp], #4
   1b2c2:	bf00      	nop
   1b2c4:	2000dbb8 	.word	0x2000dbb8

0001b2c8 <oc_buffer_init>:

void
oc_buffer_init(void)
{
   1b2c8:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
   1b2ca:	2200      	movs	r2, #0
   1b2cc:	4904      	ldr	r1, [pc, #16]	; (1b2e0 <oc_buffer_init+0x18>)
   1b2ce:	4805      	ldr	r0, [pc, #20]	; (1b2e4 <oc_buffer_init+0x1c>)
   1b2d0:	f7fd fbce 	bl	18a70 <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
   1b2d4:	2200      	movs	r2, #0
   1b2d6:	4904      	ldr	r1, [pc, #16]	; (1b2e8 <oc_buffer_init+0x20>)
   1b2d8:	4804      	ldr	r0, [pc, #16]	; (1b2ec <oc_buffer_init+0x24>)
   1b2da:	f7fd fbc9 	bl	18a70 <os_mqueue_init>
}
   1b2de:	bd08      	pop	{r3, pc}
   1b2e0:	0001b29d 	.word	0x0001b29d
   1b2e4:	2000dbb8 	.word	0x2000dbb8
   1b2e8:	0001b26d 	.word	0x0001b26d
   1b2ec:	2000dbd0 	.word	0x2000dbd0

0001b2f0 <oc_ri_mem_init>:
}
#endif

void
oc_ri_mem_init(void)
{
   1b2f0:	b500      	push	{lr}
   1b2f2:	b083      	sub	sp, #12
#ifdef OC_SERVER
  os_mempool_init(&oc_resource_pool, MAX_APP_RESOURCES, sizeof(oc_resource_t),
                  oc_resource_area, "oc_res");
#endif
#ifdef OC_CLIENT
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
   1b2f4:	4b07      	ldr	r3, [pc, #28]	; (1b314 <oc_ri_mem_init+0x24>)
   1b2f6:	9300      	str	r3, [sp, #0]
   1b2f8:	4b07      	ldr	r3, [pc, #28]	; (1b318 <oc_ri_mem_init+0x28>)
   1b2fa:	2264      	movs	r2, #100	; 0x64
   1b2fc:	2102      	movs	r1, #2
   1b2fe:	4807      	ldr	r0, [pc, #28]	; (1b31c <oc_ri_mem_init+0x2c>)
   1b300:	f7fd fd3c 	bl	18d7c <os_mempool_init>
      sizeof(oc_client_cb_t), oc_client_cb_area, "oc_cl_cbs");
    oc_rep_init();
   1b304:	f000 f860 	bl	1b3c8 <oc_rep_init>
#endif
    oc_buffer_init();
   1b308:	f7ff ffde 	bl	1b2c8 <oc_buffer_init>
}
   1b30c:	b003      	add	sp, #12
   1b30e:	f85d fb04 	ldr.w	pc, [sp], #4
   1b312:	bf00      	nop
   1b314:	0001fabc 	.word	0x0001fabc
   1b318:	2000dbe8 	.word	0x2000dbe8
   1b31c:	2000dcb0 	.word	0x2000dcb0

0001b320 <oc_evq_set>:
}

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
   1b320:	4b01      	ldr	r3, [pc, #4]	; (1b328 <oc_evq_set+0x8>)
   1b322:	6018      	str	r0, [r3, #0]
}
   1b324:	4770      	bx	lr
   1b326:	bf00      	nop
   1b328:	2000dccc 	.word	0x2000dccc

0001b32c <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
   1b32c:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
   1b32e:	7e03      	ldrb	r3, [r0, #24]
   1b330:	f003 0307 	and.w	r3, r3, #7
   1b334:	4a04      	ldr	r2, [pc, #16]	; (1b348 <oc_send_buffer+0x1c>)
   1b336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
   1b33a:	b113      	cbz	r3, 1b342 <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
   1b33c:	68db      	ldr	r3, [r3, #12]
   1b33e:	4798      	blx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
   1b340:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
   1b342:	f7fd fc13 	bl	18b6c <os_mbuf_free_chain>
}
   1b346:	e7fb      	b.n	1b340 <oc_send_buffer+0x14>
   1b348:	2000df60 	.word	0x2000df60

0001b34c <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
   1b34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b350:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1b352:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
   1b354:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1b356:	e002      	b.n	1b35e <oc_send_multicast_message+0x12>
   1b358:	4635      	mov	r5, r6
   1b35a:	3401      	adds	r4, #1
   1b35c:	462e      	mov	r6, r5
   1b35e:	2c07      	cmp	r4, #7
   1b360:	dc12      	bgt.n	1b388 <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
   1b362:	4b0c      	ldr	r3, [pc, #48]	; (1b394 <oc_send_multicast_message+0x48>)
   1b364:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   1b368:	2d00      	cmp	r5, #0
   1b36a:	d0f5      	beq.n	1b358 <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
   1b36c:	2e00      	cmp	r6, #0
   1b36e:	d0f4      	beq.n	1b35a <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
   1b370:	4638      	mov	r0, r7
   1b372:	f7fd fc6b 	bl	18c4c <os_mbuf_dup>
   1b376:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
   1b378:	6933      	ldr	r3, [r6, #16]
   1b37a:	4638      	mov	r0, r7
   1b37c:	4798      	blx	r3
            if (!n) {
   1b37e:	f1b8 0f00 	cmp.w	r8, #0
   1b382:	d005      	beq.n	1b390 <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
   1b384:	4647      	mov	r7, r8
   1b386:	e7e8      	b.n	1b35a <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
   1b388:	b116      	cbz	r6, 1b390 <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
   1b38a:	6933      	ldr	r3, [r6, #16]
   1b38c:	4638      	mov	r0, r7
   1b38e:	4798      	blx	r3
    }
}
   1b390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b394:	2000df60 	.word	0x2000df60

0001b398 <oc_init>:
    return rc;
}

void
oc_init(void)
{
   1b398:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1b39a:	4b07      	ldr	r3, [pc, #28]	; (1b3b8 <oc_init+0x20>)
   1b39c:	781b      	ldrb	r3, [r3, #0]
   1b39e:	b133      	cbz	r3, 1b3ae <oc_init+0x16>
    oc_ri_mem_init();
   1b3a0:	f7ff ffa6 	bl	1b2f0 <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
   1b3a4:	f7fd fb60 	bl	18a68 <os_eventq_dflt_get>
   1b3a8:	f7ff ffba 	bl	1b320 <oc_evq_set>
}
   1b3ac:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1b3ae:	461a      	mov	r2, r3
   1b3b0:	4619      	mov	r1, r3
   1b3b2:	4618      	mov	r0, r3
   1b3b4:	f7fc ff9a 	bl	182ec <__assert_func>
   1b3b8:	2000ddbc 	.word	0x2000ddbc

0001b3bc <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
   1b3bc:	4770      	bx	lr

0001b3be <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
   1b3be:	4770      	bx	lr

0001b3c0 <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
   1b3c0:	4770      	bx	lr

0001b3c2 <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
   1b3c2:	4770      	bx	lr

0001b3c4 <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
   1b3c4:	4770      	bx	lr
	...

0001b3c8 <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
   1b3c8:	b500      	push	{lr}
   1b3ca:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
   1b3cc:	4b05      	ldr	r3, [pc, #20]	; (1b3e4 <oc_rep_init+0x1c>)
   1b3ce:	9300      	str	r3, [sp, #0]
   1b3d0:	4b05      	ldr	r3, [pc, #20]	; (1b3e8 <oc_rep_init+0x20>)
   1b3d2:	2218      	movs	r2, #24
   1b3d4:	2102      	movs	r1, #2
   1b3d6:	4805      	ldr	r0, [pc, #20]	; (1b3ec <oc_rep_init+0x24>)
   1b3d8:	f7fd fcd0 	bl	18d7c <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
   1b3dc:	b003      	add	sp, #12
   1b3de:	f85d fb04 	ldr.w	pc, [sp], #4
   1b3e2:	bf00      	nop
   1b3e4:	0001fac8 	.word	0x0001fac8
   1b3e8:	2000dcec 	.word	0x2000dcec
   1b3ec:	2000dcd0 	.word	0x2000dcd0

0001b3f0 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   1b3f0:	b570      	push	{r4, r5, r6, lr}
   1b3f2:	b086      	sub	sp, #24
   1b3f4:	4605      	mov	r5, r0
   1b3f6:	460e      	mov	r6, r1
   1b3f8:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   1b3fa:	2300      	movs	r3, #0
   1b3fc:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   1b3fe:	f000 f9ad 	bl	1b75c <mfg_init>

    mfg_open(&reader);
   1b402:	a801      	add	r0, sp, #4
   1b404:	f000 f9c6 	bl	1b794 <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   1b408:	6823      	ldr	r3, [r4, #0]
   1b40a:	42ab      	cmp	r3, r5
   1b40c:	da29      	bge.n	1b462 <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   1b40e:	2102      	movs	r1, #2
   1b410:	a801      	add	r0, sp, #4
   1b412:	f000 f98c 	bl	1b72e <mfg_seek_next_with_type>
   1b416:	4603      	mov	r3, r0
        switch (rc) {
   1b418:	f110 0f0f 	cmn.w	r0, #15
   1b41c:	d003      	beq.n	1b426 <flash_map_read_mfg+0x36>
   1b41e:	b120      	cbz	r0, 1b42a <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
   1b420:	4618      	mov	r0, r3
   1b422:	b006      	add	sp, #24
   1b424:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
   1b426:	2300      	movs	r3, #0
   1b428:	e7fa      	b.n	1b420 <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   1b42a:	a903      	add	r1, sp, #12
   1b42c:	a801      	add	r0, sp, #4
   1b42e:	f000 f98b 	bl	1b748 <mfg_read_tlv_flash_area>
        if (rc != 0) {
   1b432:	4603      	mov	r3, r0
   1b434:	2800      	cmp	r0, #0
   1b436:	d1f3      	bne.n	1b420 <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
   1b438:	6823      	ldr	r3, [r4, #0]
   1b43a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b43e:	009a      	lsls	r2, r3, #2
   1b440:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
   1b442:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1b446:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
   1b448:	f89d 200d 	ldrb.w	r2, [sp, #13]
   1b44c:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
   1b44e:	f8dd 200e 	ldr.w	r2, [sp, #14]
   1b452:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
   1b454:	f8dd 2012 	ldr.w	r2, [sp, #18]
   1b458:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
   1b45a:	6823      	ldr	r3, [r4, #0]
   1b45c:	3301      	adds	r3, #1
   1b45e:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   1b460:	e7d2      	b.n	1b408 <flash_map_read_mfg+0x18>
            return -1;
   1b462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b466:	e7db      	b.n	1b420 <flash_map_read_mfg+0x30>

0001b468 <flash_area_open>:
{
   1b468:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   1b46a:	4b0d      	ldr	r3, [pc, #52]	; (1b4a0 <flash_area_open+0x38>)
   1b46c:	681d      	ldr	r5, [r3, #0]
   1b46e:	b1a5      	cbz	r5, 1b49a <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
   1b470:	2300      	movs	r3, #0
   1b472:	4a0c      	ldr	r2, [pc, #48]	; (1b4a4 <flash_area_open+0x3c>)
   1b474:	6812      	ldr	r2, [r2, #0]
   1b476:	429a      	cmp	r2, r3
   1b478:	dd0b      	ble.n	1b492 <flash_area_open+0x2a>
        area = flash_map + i;
   1b47a:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1b47e:	00a2      	lsls	r2, r4, #2
   1b480:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
   1b482:	5caa      	ldrb	r2, [r5, r2]
   1b484:	4282      	cmp	r2, r0
   1b486:	d001      	beq.n	1b48c <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
   1b488:	3301      	adds	r3, #1
   1b48a:	e7f2      	b.n	1b472 <flash_area_open+0xa>
            *fap = area;
   1b48c:	600c      	str	r4, [r1, #0]
            return 0;
   1b48e:	2000      	movs	r0, #0
   1b490:	e001      	b.n	1b496 <flash_area_open+0x2e>
    return SYS_ENOENT;
   1b492:	f06f 0003 	mvn.w	r0, #3
}
   1b496:	bc30      	pop	{r4, r5}
   1b498:	4770      	bx	lr
        return SYS_EACCES;
   1b49a:	f06f 0006 	mvn.w	r0, #6
   1b49e:	e7fa      	b.n	1b496 <flash_area_open+0x2e>
   1b4a0:	2000df84 	.word	0x2000df84
   1b4a4:	2000df80 	.word	0x2000df80

0001b4a8 <flash_area_read>:
{
   1b4a8:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1b4aa:	6884      	ldr	r4, [r0, #8]
   1b4ac:	428c      	cmp	r4, r1
   1b4ae:	d308      	bcc.n	1b4c2 <flash_area_read+0x1a>
   1b4b0:	18cd      	adds	r5, r1, r3
   1b4b2:	42ac      	cmp	r4, r5
   1b4b4:	d308      	bcc.n	1b4c8 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   1b4b6:	6844      	ldr	r4, [r0, #4]
   1b4b8:	4421      	add	r1, r4
   1b4ba:	7840      	ldrb	r0, [r0, #1]
   1b4bc:	f000 f9c8 	bl	1b850 <hal_flash_read>
}
   1b4c0:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   1b4c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b4c6:	e7fb      	b.n	1b4c0 <flash_area_read+0x18>
   1b4c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b4cc:	e7f8      	b.n	1b4c0 <flash_area_read+0x18>
	...

0001b4d0 <flash_map_init>:

void
flash_map_init(void)
{
   1b4d0:	b510      	push	{r4, lr}
   1b4d2:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1b4d4:	4b14      	ldr	r3, [pc, #80]	; (1b528 <flash_map_init+0x58>)
   1b4d6:	781b      	ldrb	r3, [r3, #0]
   1b4d8:	b303      	cbz	r3, 1b51c <flash_map_init+0x4c>

    rc = hal_flash_init();
   1b4da:	f000 f9a5 	bl	1b828 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1b4de:	b138      	cbz	r0, 1b4f0 <flash_map_init+0x20>
   1b4e0:	2000      	movs	r0, #0
   1b4e2:	9000      	str	r0, [sp, #0]
   1b4e4:	4b11      	ldr	r3, [pc, #68]	; (1b52c <flash_map_init+0x5c>)
   1b4e6:	681c      	ldr	r4, [r3, #0]
   1b4e8:	4603      	mov	r3, r0
   1b4ea:	4602      	mov	r2, r0
   1b4ec:	4601      	mov	r1, r0
   1b4ee:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1b4f0:	4b0f      	ldr	r3, [pc, #60]	; (1b530 <flash_map_init+0x60>)
   1b4f2:	4a10      	ldr	r2, [pc, #64]	; (1b534 <flash_map_init+0x64>)
   1b4f4:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1b4f6:	4b10      	ldr	r3, [pc, #64]	; (1b538 <flash_map_init+0x68>)
   1b4f8:	2206      	movs	r2, #6
   1b4fa:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   1b4fc:	aa03      	add	r2, sp, #12
   1b4fe:	490f      	ldr	r1, [pc, #60]	; (1b53c <flash_map_init+0x6c>)
   1b500:	200a      	movs	r0, #10
   1b502:	f7ff ff75 	bl	1b3f0 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   1b506:	b938      	cbnz	r0, 1b518 <flash_map_init+0x48>
   1b508:	9b03      	ldr	r3, [sp, #12]
   1b50a:	2b00      	cmp	r3, #0
   1b50c:	dd04      	ble.n	1b518 <flash_map_init+0x48>
        flash_map = mfg_areas;
   1b50e:	4a08      	ldr	r2, [pc, #32]	; (1b530 <flash_map_init+0x60>)
   1b510:	490a      	ldr	r1, [pc, #40]	; (1b53c <flash_map_init+0x6c>)
   1b512:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   1b514:	4a08      	ldr	r2, [pc, #32]	; (1b538 <flash_map_init+0x68>)
   1b516:	6013      	str	r3, [r2, #0]
    }
}
   1b518:	b004      	add	sp, #16
   1b51a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1b51c:	461a      	mov	r2, r3
   1b51e:	4619      	mov	r1, r3
   1b520:	4618      	mov	r0, r3
   1b522:	f7fc fee3 	bl	182ec <__assert_func>
   1b526:	bf00      	nop
   1b528:	2000ddbc 	.word	0x2000ddbc
   1b52c:	20000104 	.word	0x20000104
   1b530:	2000df84 	.word	0x2000df84
   1b534:	0001fad4 	.word	0x0001fad4
   1b538:	2000df80 	.word	0x2000df80
   1b53c:	2000dd1c 	.word	0x2000dd1c

0001b540 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   1b540:	4770      	bx	lr
	...

0001b544 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   1b544:	b530      	push	{r4, r5, lr}
   1b546:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   1b548:	7885      	ldrb	r5, [r0, #2]
   1b54a:	4b21      	ldr	r3, [pc, #132]	; (1b5d0 <mfg_seek_next_aux+0x8c>)
   1b54c:	681b      	ldr	r3, [r3, #0]
   1b54e:	429d      	cmp	r5, r3
   1b550:	da32      	bge.n	1b5b8 <mfg_seek_next_aux+0x74>
   1b552:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   1b554:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   1b558:	0093      	lsls	r3, r2, #2
   1b55a:	a901      	add	r1, sp, #4
   1b55c:	4a1d      	ldr	r2, [pc, #116]	; (1b5d4 <mfg_seek_next_aux+0x90>)
   1b55e:	5cd0      	ldrb	r0, [r2, r3]
   1b560:	f7ff ff82 	bl	1b468 <flash_area_open>
    if (rc != 0) {
   1b564:	bb58      	cbnz	r0, 1b5be <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1b566:	6862      	ldr	r2, [r4, #4]
   1b568:	b9c2      	cbnz	r2, 1b59c <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1b56a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1b56e:	00aa      	lsls	r2, r5, #2
   1b570:	4b18      	ldr	r3, [pc, #96]	; (1b5d4 <mfg_seek_next_aux+0x90>)
   1b572:	4413      	add	r3, r2
   1b574:	685b      	ldr	r3, [r3, #4]
   1b576:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   1b578:	6861      	ldr	r1, [r4, #4]
   1b57a:	9801      	ldr	r0, [sp, #4]
   1b57c:	6883      	ldr	r3, [r0, #8]
   1b57e:	3b08      	subs	r3, #8
   1b580:	4299      	cmp	r1, r3
   1b582:	d310      	bcc.n	1b5a6 <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1b584:	78a3      	ldrb	r3, [r4, #2]
   1b586:	1c59      	adds	r1, r3, #1
   1b588:	4a11      	ldr	r2, [pc, #68]	; (1b5d0 <mfg_seek_next_aux+0x8c>)
   1b58a:	6812      	ldr	r2, [r2, #0]
   1b58c:	4291      	cmp	r1, r2
   1b58e:	da19      	bge.n	1b5c4 <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   1b590:	2200      	movs	r2, #0
   1b592:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1b594:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   1b596:	f06f 0305 	mvn.w	r3, #5
   1b59a:	e015      	b.n	1b5c8 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1b59c:	7863      	ldrb	r3, [r4, #1]
   1b59e:	4413      	add	r3, r2
   1b5a0:	3302      	adds	r3, #2
   1b5a2:	6063      	str	r3, [r4, #4]
   1b5a4:	e7e8      	b.n	1b578 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1b5a6:	2302      	movs	r3, #2
   1b5a8:	4622      	mov	r2, r4
   1b5aa:	f7ff ff7d 	bl	1b4a8 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   1b5ae:	4603      	mov	r3, r0
   1b5b0:	b150      	cbz	r0, 1b5c8 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
   1b5b2:	f06f 0304 	mvn.w	r3, #4
   1b5b6:	e007      	b.n	1b5c8 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
   1b5b8:	f06f 0301 	mvn.w	r3, #1
   1b5bc:	e004      	b.n	1b5c8 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
   1b5be:	f06f 0304 	mvn.w	r3, #4
   1b5c2:	e001      	b.n	1b5c8 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
   1b5c4:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
   1b5c8:	4618      	mov	r0, r3
   1b5ca:	b003      	add	sp, #12
   1b5cc:	bd30      	pop	{r4, r5, pc}
   1b5ce:	bf00      	nop
   1b5d0:	2000ddb0 	.word	0x2000ddb0
   1b5d4:	2000dd98 	.word	0x2000dd98

0001b5d8 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   1b5d8:	b530      	push	{r4, r5, lr}
   1b5da:	b085      	sub	sp, #20
   1b5dc:	4605      	mov	r5, r0
   1b5de:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   1b5e0:	a903      	add	r1, sp, #12
   1b5e2:	f7ff ff41 	bl	1b468 <flash_area_open>
    if (rc != 0) {
   1b5e6:	b9e8      	cbnz	r0, 1b624 <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   1b5e8:	9803      	ldr	r0, [sp, #12]
   1b5ea:	6881      	ldr	r1, [r0, #8]
   1b5ec:	2308      	movs	r3, #8
   1b5ee:	aa01      	add	r2, sp, #4
   1b5f0:	3908      	subs	r1, #8
   1b5f2:	f7ff ff59 	bl	1b4a8 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   1b5f6:	4601      	mov	r1, r0
   1b5f8:	b9b8      	cbnz	r0, 1b62a <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   1b5fa:	9a02      	ldr	r2, [sp, #8]
   1b5fc:	4b11      	ldr	r3, [pc, #68]	; (1b644 <mfg_read_mmr+0x6c>)
   1b5fe:	429a      	cmp	r2, r3
   1b600:	d116      	bne.n	1b630 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   1b602:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1b606:	2b02      	cmp	r3, #2
   1b608:	d115      	bne.n	1b636 <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   1b60a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1b60e:	9b03      	ldr	r3, [sp, #12]
   1b610:	689b      	ldr	r3, [r3, #8]
   1b612:	429a      	cmp	r2, r3
   1b614:	d812      	bhi.n	1b63c <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   1b616:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1b618:	7025      	strb	r5, [r4, #0]
   1b61a:	6063      	str	r3, [r4, #4]
   1b61c:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   1b61e:	4608      	mov	r0, r1
   1b620:	b005      	add	sp, #20
   1b622:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   1b624:	f06f 0104 	mvn.w	r1, #4
   1b628:	e7f9      	b.n	1b61e <mfg_read_mmr+0x46>
        return SYS_EIO;
   1b62a:	f06f 0104 	mvn.w	r1, #4
   1b62e:	e7f6      	b.n	1b61e <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1b630:	f06f 0108 	mvn.w	r1, #8
   1b634:	e7f3      	b.n	1b61e <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
   1b636:	f06f 010b 	mvn.w	r1, #11
   1b63a:	e7f0      	b.n	1b61e <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1b63c:	f06f 0108 	mvn.w	r1, #8
   1b640:	e7ed      	b.n	1b61e <mfg_read_mmr+0x46>
   1b642:	bf00      	nop
   1b644:	3bb2a269 	.word	0x3bb2a269

0001b648 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   1b648:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1b64a:	2300      	movs	r3, #0
   1b64c:	4a11      	ldr	r2, [pc, #68]	; (1b694 <mfg_read_next_mmr+0x4c>)
   1b64e:	6812      	ldr	r2, [r2, #0]
   1b650:	429a      	cmp	r2, r3
   1b652:	dd08      	ble.n	1b666 <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   1b654:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1b658:	008a      	lsls	r2, r1, #2
   1b65a:	490f      	ldr	r1, [pc, #60]	; (1b698 <mfg_read_next_mmr+0x50>)
   1b65c:	5c8a      	ldrb	r2, [r1, r2]
   1b65e:	4282      	cmp	r2, r0
   1b660:	d011      	beq.n	1b686 <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
   1b662:	3301      	adds	r3, #1
   1b664:	e7f2      	b.n	1b64c <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1b666:	2a01      	cmp	r2, #1
   1b668:	dc11      	bgt.n	1b68e <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1b66a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1b66e:	0093      	lsls	r3, r2, #2
   1b670:	4909      	ldr	r1, [pc, #36]	; (1b698 <mfg_read_next_mmr+0x50>)
   1b672:	4419      	add	r1, r3
   1b674:	f7ff ffb0 	bl	1b5d8 <mfg_read_mmr>
    if (rc != 0) {
   1b678:	4603      	mov	r3, r0
   1b67a:	b930      	cbnz	r0, 1b68a <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
   1b67c:	4905      	ldr	r1, [pc, #20]	; (1b694 <mfg_read_next_mmr+0x4c>)
   1b67e:	680a      	ldr	r2, [r1, #0]
   1b680:	3201      	adds	r2, #1
   1b682:	600a      	str	r2, [r1, #0]
    return 0;
   1b684:	e001      	b.n	1b68a <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
   1b686:	f06f 030a 	mvn.w	r3, #10
}
   1b68a:	4618      	mov	r0, r3
   1b68c:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   1b68e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b692:	e7fa      	b.n	1b68a <mfg_read_next_mmr+0x42>
   1b694:	2000ddb0 	.word	0x2000ddb0
   1b698:	2000dd98 	.word	0x2000dd98

0001b69c <mfg_open_flash_area>:
{
   1b69c:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1b69e:	7883      	ldrb	r3, [r0, #2]
   1b6a0:	4a0b      	ldr	r2, [pc, #44]	; (1b6d0 <mfg_open_flash_area+0x34>)
   1b6a2:	6812      	ldr	r2, [r2, #0]
   1b6a4:	4293      	cmp	r3, r2
   1b6a6:	da0a      	bge.n	1b6be <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
   1b6a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b6ac:	009a      	lsls	r2, r3, #2
   1b6ae:	4b09      	ldr	r3, [pc, #36]	; (1b6d4 <mfg_open_flash_area+0x38>)
   1b6b0:	5c98      	ldrb	r0, [r3, r2]
   1b6b2:	f7ff fed9 	bl	1b468 <flash_area_open>
    if (rc != 0) {
   1b6b6:	4603      	mov	r3, r0
   1b6b8:	b938      	cbnz	r0, 1b6ca <mfg_open_flash_area+0x2e>
}
   1b6ba:	4618      	mov	r0, r3
   1b6bc:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1b6be:	2300      	movs	r3, #0
   1b6c0:	461a      	mov	r2, r3
   1b6c2:	4619      	mov	r1, r3
   1b6c4:	4618      	mov	r0, r3
   1b6c6:	f7fc fe11 	bl	182ec <__assert_func>
        return SYS_EIO;
   1b6ca:	f06f 0304 	mvn.w	r3, #4
   1b6ce:	e7f4      	b.n	1b6ba <mfg_open_flash_area+0x1e>
   1b6d0:	2000ddb0 	.word	0x2000ddb0
   1b6d4:	2000dd98 	.word	0x2000dd98

0001b6d8 <mfg_read_tlv_body>:
{
   1b6d8:	b570      	push	{r4, r5, r6, lr}
   1b6da:	b082      	sub	sp, #8
   1b6dc:	4606      	mov	r6, r0
   1b6de:	460c      	mov	r4, r1
   1b6e0:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   1b6e2:	a901      	add	r1, sp, #4
   1b6e4:	f7ff ffda 	bl	1b69c <mfg_open_flash_area>
    if (rc != 0) {
   1b6e8:	4603      	mov	r3, r0
   1b6ea:	b110      	cbz	r0, 1b6f2 <mfg_read_tlv_body+0x1a>
}
   1b6ec:	4618      	mov	r0, r3
   1b6ee:	b002      	add	sp, #8
   1b6f0:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   1b6f2:	462a      	mov	r2, r5
   1b6f4:	2100      	movs	r1, #0
   1b6f6:	4620      	mov	r0, r4
   1b6f8:	f7fe f9fb 	bl	19af2 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   1b6fc:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   1b6fe:	6871      	ldr	r1, [r6, #4]
   1b700:	42ab      	cmp	r3, r5
   1b702:	bfa8      	it	ge
   1b704:	462b      	movge	r3, r5
   1b706:	4622      	mov	r2, r4
   1b708:	3102      	adds	r1, #2
   1b70a:	9801      	ldr	r0, [sp, #4]
   1b70c:	f7ff fecc 	bl	1b4a8 <flash_area_read>
    if (rc != 0) {
   1b710:	4603      	mov	r3, r0
   1b712:	2800      	cmp	r0, #0
   1b714:	d0ea      	beq.n	1b6ec <mfg_read_tlv_body+0x14>
        return SYS_EIO;
   1b716:	f06f 0304 	mvn.w	r3, #4
   1b71a:	e7e7      	b.n	1b6ec <mfg_read_tlv_body+0x14>

0001b71c <mfg_seek_next>:
{
   1b71c:	b510      	push	{r4, lr}
   1b71e:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   1b720:	4620      	mov	r0, r4
   1b722:	f7ff ff0f 	bl	1b544 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   1b726:	f110 0f06 	cmn.w	r0, #6
   1b72a:	d0f9      	beq.n	1b720 <mfg_seek_next+0x4>
}
   1b72c:	bd10      	pop	{r4, pc}

0001b72e <mfg_seek_next_with_type>:
{
   1b72e:	b538      	push	{r3, r4, r5, lr}
   1b730:	4604      	mov	r4, r0
   1b732:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   1b734:	4620      	mov	r0, r4
   1b736:	f7ff fff1 	bl	1b71c <mfg_seek_next>
        if (rc != 0) {
   1b73a:	4602      	mov	r2, r0
   1b73c:	b910      	cbnz	r0, 1b744 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   1b73e:	7823      	ldrb	r3, [r4, #0]
   1b740:	42ab      	cmp	r3, r5
   1b742:	d1f7      	bne.n	1b734 <mfg_seek_next_with_type+0x6>
}
   1b744:	4610      	mov	r0, r2
   1b746:	bd38      	pop	{r3, r4, r5, pc}

0001b748 <mfg_read_tlv_flash_area>:
{
   1b748:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1b74a:	220a      	movs	r2, #10
   1b74c:	f7ff ffc4 	bl	1b6d8 <mfg_read_tlv_body>
}
   1b750:	bd08      	pop	{r3, pc}

0001b752 <mfg_read_tlv_mmr_ref>:
{
   1b752:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1b754:	2201      	movs	r2, #1
   1b756:	f7ff ffbf 	bl	1b6d8 <mfg_read_tlv_body>
}
   1b75a:	bd08      	pop	{r3, pc}

0001b75c <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1b75c:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1b75e:	4b0b      	ldr	r3, [pc, #44]	; (1b78c <mfg_init+0x30>)
   1b760:	781b      	ldrb	r3, [r3, #0]
   1b762:	b94b      	cbnz	r3, 1b778 <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   1b764:	4b09      	ldr	r3, [pc, #36]	; (1b78c <mfg_init+0x30>)
   1b766:	2201      	movs	r2, #1
   1b768:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1b76a:	4b09      	ldr	r3, [pc, #36]	; (1b790 <mfg_init+0x34>)
   1b76c:	781b      	ldrb	r3, [r3, #0]
   1b76e:	b123      	cbz	r3, 1b77a <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1b770:	2000      	movs	r0, #0
   1b772:	f7ff ff69 	bl	1b648 <mfg_read_next_mmr>
    if (rc != 0) {
   1b776:	b128      	cbz	r0, 1b784 <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
   1b778:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1b77a:	461a      	mov	r2, r3
   1b77c:	4619      	mov	r1, r3
   1b77e:	4618      	mov	r0, r3
   1b780:	f7fc fdb4 	bl	182ec <__assert_func>
    rc = mfg_read_mmr_refs();
   1b784:	f000 f80e 	bl	1b7a4 <mfg_read_mmr_refs>
err:
   1b788:	e7f6      	b.n	1b778 <mfg_init+0x1c>
   1b78a:	bf00      	nop
   1b78c:	2000dd94 	.word	0x2000dd94
   1b790:	2000ddbc 	.word	0x2000ddbc

0001b794 <mfg_open>:
{
   1b794:	b510      	push	{r4, lr}
   1b796:	4604      	mov	r4, r0
    mfg_init();
   1b798:	f7ff ffe0 	bl	1b75c <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1b79c:	2300      	movs	r3, #0
   1b79e:	6023      	str	r3, [r4, #0]
   1b7a0:	6063      	str	r3, [r4, #4]
}
   1b7a2:	bd10      	pop	{r4, pc}

0001b7a4 <mfg_read_mmr_refs>:
{
   1b7a4:	b500      	push	{lr}
   1b7a6:	b085      	sub	sp, #20
    mfg_open(&reader);
   1b7a8:	a801      	add	r0, sp, #4
   1b7aa:	f7ff fff3 	bl	1b794 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1b7ae:	2104      	movs	r1, #4
   1b7b0:	eb0d 0001 	add.w	r0, sp, r1
   1b7b4:	f7ff ffbb 	bl	1b72e <mfg_seek_next_with_type>
   1b7b8:	4603      	mov	r3, r0
        switch (rc) {
   1b7ba:	f110 0f0f 	cmn.w	r0, #15
   1b7be:	d004      	beq.n	1b7ca <mfg_read_mmr_refs+0x26>
   1b7c0:	b128      	cbz	r0, 1b7ce <mfg_read_mmr_refs+0x2a>
}
   1b7c2:	4618      	mov	r0, r3
   1b7c4:	b005      	add	sp, #20
   1b7c6:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
   1b7ca:	2300      	movs	r3, #0
   1b7cc:	e7f9      	b.n	1b7c2 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1b7ce:	a903      	add	r1, sp, #12
   1b7d0:	a801      	add	r0, sp, #4
   1b7d2:	f7ff ffbe 	bl	1b752 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1b7d6:	4603      	mov	r3, r0
   1b7d8:	2800      	cmp	r0, #0
   1b7da:	d1f2      	bne.n	1b7c2 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   1b7dc:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1b7e0:	f7ff ff32 	bl	1b648 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1b7e4:	4603      	mov	r3, r0
   1b7e6:	2800      	cmp	r0, #0
   1b7e8:	d0e1      	beq.n	1b7ae <mfg_read_mmr_refs+0xa>
   1b7ea:	f110 0f0b 	cmn.w	r0, #11
   1b7ee:	d0de      	beq.n	1b7ae <mfg_read_mmr_refs+0xa>
   1b7f0:	e7e7      	b.n	1b7c2 <mfg_read_mmr_refs+0x1e>
	...

0001b7f4 <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
   1b7f4:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
   1b7f6:	4803      	ldr	r0, [pc, #12]	; (1b804 <__wrap_coap_receive+0x10>)
   1b7f8:	f7fb feb0 	bl	1755c <console_printf>
    return -1;
}
   1b7fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b800:	bd08      	pop	{r3, pc}
   1b802:	bf00      	nop
   1b804:	0001fb1c 	.word	0x0001fb1c

0001b808 <_fini>:
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
int __aeabi_atexit(void *object, void (*destructor)(void *), void *dso_handle) { return 0; }

#ifndef ARCH_rv32imac  //  If not RISC-V...
void _fini(void) { }   //  Define the function to be called when main() exits
   1b808:	4770      	bx	lr

0001b80a <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1b80a:	6843      	ldr	r3, [r0, #4]
   1b80c:	428b      	cmp	r3, r1
   1b80e:	d808      	bhi.n	1b822 <hal_flash_check_addr+0x18>
   1b810:	6882      	ldr	r2, [r0, #8]
   1b812:	4413      	add	r3, r2
   1b814:	428b      	cmp	r3, r1
   1b816:	d301      	bcc.n	1b81c <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
   1b818:	2000      	movs	r0, #0
}
   1b81a:	4770      	bx	lr
        return SYS_EINVAL;
   1b81c:	f06f 0001 	mvn.w	r0, #1
   1b820:	4770      	bx	lr
   1b822:	f06f 0001 	mvn.w	r0, #1
   1b826:	4770      	bx	lr

0001b828 <hal_flash_init>:
{
   1b828:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   1b82a:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   1b82c:	462c      	mov	r4, r5
   1b82e:	e001      	b.n	1b834 <hal_flash_init+0xc>
   1b830:	3401      	adds	r4, #1
   1b832:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   1b834:	4620      	mov	r0, r4
   1b836:	f7fe fce3 	bl	1a200 <hal_bsp_flash_dev>
        if (!hf) {
   1b83a:	b138      	cbz	r0, 1b84c <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   1b83c:	6802      	ldr	r2, [r0, #0]
   1b83e:	6952      	ldr	r2, [r2, #20]
   1b840:	4790      	blx	r2
   1b842:	2800      	cmp	r0, #0
   1b844:	d0f4      	beq.n	1b830 <hal_flash_init+0x8>
            rc = SYS_EIO;
   1b846:	f06f 0504 	mvn.w	r5, #4
   1b84a:	e7f1      	b.n	1b830 <hal_flash_init+0x8>
}
   1b84c:	4628      	mov	r0, r5
   1b84e:	bd38      	pop	{r3, r4, r5, pc}

0001b850 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1b850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b854:	460d      	mov	r5, r1
   1b856:	4690      	mov	r8, r2
   1b858:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1b85a:	f7fe fcd1 	bl	1a200 <hal_bsp_flash_dev>
    if (!hf) {
   1b85e:	b1c0      	cbz	r0, 1b892 <hal_flash_read+0x42>
   1b860:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1b862:	4629      	mov	r1, r5
   1b864:	f7ff ffd1 	bl	1b80a <hal_flash_check_addr>
   1b868:	b9b0      	cbnz	r0, 1b898 <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1b86a:	19a9      	adds	r1, r5, r6
   1b86c:	4620      	mov	r0, r4
   1b86e:	f7ff ffcc 	bl	1b80a <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1b872:	b9a0      	cbnz	r0, 1b89e <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1b874:	6823      	ldr	r3, [r4, #0]
   1b876:	681f      	ldr	r7, [r3, #0]
   1b878:	4633      	mov	r3, r6
   1b87a:	4642      	mov	r2, r8
   1b87c:	4629      	mov	r1, r5
   1b87e:	4620      	mov	r0, r4
   1b880:	47b8      	blx	r7
    if (rc != 0) {
   1b882:	4603      	mov	r3, r0
   1b884:	b910      	cbnz	r0, 1b88c <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
   1b886:	4618      	mov	r0, r3
   1b888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   1b88c:	f06f 0304 	mvn.w	r3, #4
   1b890:	e7f9      	b.n	1b886 <hal_flash_read+0x36>
        return SYS_EINVAL;
   1b892:	f06f 0301 	mvn.w	r3, #1
   1b896:	e7f6      	b.n	1b886 <hal_flash_read+0x36>
        return SYS_EINVAL;
   1b898:	f06f 0301 	mvn.w	r3, #1
   1b89c:	e7f3      	b.n	1b886 <hal_flash_read+0x36>
   1b89e:	f06f 0301 	mvn.w	r3, #1
   1b8a2:	e7f0      	b.n	1b886 <hal_flash_read+0x36>

0001b8a4 <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return sizeof(NRF_FICR->DEVICEID) + sizeof(NRF_FICR->DEVICEADDR);
}
   1b8a4:	2010      	movs	r0, #16
   1b8a6:	4770      	bx	lr

0001b8a8 <hal_bsp_hw_id>:
 * These values are generated at random.
 * DEVICEID[0-1] and DEVICEADDR[0-1].
 */
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
   1b8a8:	b570      	push	{r4, r5, r6, lr}
   1b8aa:	4606      	mov	r6, r0
   1b8ac:	460c      	mov	r4, r1
    int len, cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEID), max_len);
   1b8ae:	460d      	mov	r5, r1
   1b8b0:	2908      	cmp	r1, #8
   1b8b2:	bf28      	it	cs
   1b8b4:	2508      	movcs	r5, #8
    memcpy(id, (void *)NRF_FICR->DEVICEID, cnt);
   1b8b6:	462a      	mov	r2, r5
   1b8b8:	4906      	ldr	r1, [pc, #24]	; (1b8d4 <hal_bsp_hw_id+0x2c>)
   1b8ba:	f7fe f90d 	bl	19ad8 <memcpy>
    len = cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEADDR), max_len - len);
   1b8be:	1b64      	subs	r4, r4, r5
   1b8c0:	2c08      	cmp	r4, #8
   1b8c2:	bf28      	it	cs
   1b8c4:	2408      	movcs	r4, #8
    memcpy(id + len, (void *)NRF_FICR->DEVICEADDR, cnt);
   1b8c6:	4622      	mov	r2, r4
   1b8c8:	4903      	ldr	r1, [pc, #12]	; (1b8d8 <hal_bsp_hw_id+0x30>)
   1b8ca:	1970      	adds	r0, r6, r5
   1b8cc:	f7fe f904 	bl	19ad8 <memcpy>

    return len + cnt;
}
   1b8d0:	1928      	adds	r0, r5, r4
   1b8d2:	bd70      	pop	{r4, r5, r6, pc}
   1b8d4:	10000060 	.word	0x10000060
   1b8d8:	100000a4 	.word	0x100000a4

0001b8dc <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1b8dc:	b40e      	push	{r1, r2, r3}
   1b8de:	b500      	push	{lr}
   1b8e0:	b082      	sub	sp, #8
   1b8e2:	ab03      	add	r3, sp, #12
   1b8e4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1b8e8:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1b8ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b8ee:	f7fe fbef 	bl	1a0d0 <vsnprintf>
	va_end(ap);

	return rv;
}
   1b8f2:	b002      	add	sp, #8
   1b8f4:	f85d eb04 	ldr.w	lr, [sp], #4
   1b8f8:	b003      	add	sp, #12
   1b8fa:	4770      	bx	lr

0001b8fc <__aeabi_uldivmod>:
   1b8fc:	b953      	cbnz	r3, 1b914 <__aeabi_uldivmod+0x18>
   1b8fe:	b94a      	cbnz	r2, 1b914 <__aeabi_uldivmod+0x18>
   1b900:	2900      	cmp	r1, #0
   1b902:	bf08      	it	eq
   1b904:	2800      	cmpeq	r0, #0
   1b906:	bf1c      	itt	ne
   1b908:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1b90c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1b910:	f000 b972 	b.w	1bbf8 <__aeabi_idiv0>
   1b914:	f1ad 0c08 	sub.w	ip, sp, #8
   1b918:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1b91c:	f000 f806 	bl	1b92c <__udivmoddi4>
   1b920:	f8dd e004 	ldr.w	lr, [sp, #4]
   1b924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1b928:	b004      	add	sp, #16
   1b92a:	4770      	bx	lr

0001b92c <__udivmoddi4>:
   1b92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b930:	9e08      	ldr	r6, [sp, #32]
   1b932:	4604      	mov	r4, r0
   1b934:	4688      	mov	r8, r1
   1b936:	2b00      	cmp	r3, #0
   1b938:	d14b      	bne.n	1b9d2 <__udivmoddi4+0xa6>
   1b93a:	428a      	cmp	r2, r1
   1b93c:	4615      	mov	r5, r2
   1b93e:	d967      	bls.n	1ba10 <__udivmoddi4+0xe4>
   1b940:	fab2 f282 	clz	r2, r2
   1b944:	b14a      	cbz	r2, 1b95a <__udivmoddi4+0x2e>
   1b946:	f1c2 0720 	rsb	r7, r2, #32
   1b94a:	fa01 f302 	lsl.w	r3, r1, r2
   1b94e:	fa20 f707 	lsr.w	r7, r0, r7
   1b952:	4095      	lsls	r5, r2
   1b954:	ea47 0803 	orr.w	r8, r7, r3
   1b958:	4094      	lsls	r4, r2
   1b95a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1b95e:	0c23      	lsrs	r3, r4, #16
   1b960:	fbb8 f7fe 	udiv	r7, r8, lr
   1b964:	fa1f fc85 	uxth.w	ip, r5
   1b968:	fb0e 8817 	mls	r8, lr, r7, r8
   1b96c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   1b970:	fb07 f10c 	mul.w	r1, r7, ip
   1b974:	4299      	cmp	r1, r3
   1b976:	d909      	bls.n	1b98c <__udivmoddi4+0x60>
   1b978:	18eb      	adds	r3, r5, r3
   1b97a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   1b97e:	f080 811b 	bcs.w	1bbb8 <__udivmoddi4+0x28c>
   1b982:	4299      	cmp	r1, r3
   1b984:	f240 8118 	bls.w	1bbb8 <__udivmoddi4+0x28c>
   1b988:	3f02      	subs	r7, #2
   1b98a:	442b      	add	r3, r5
   1b98c:	1a5b      	subs	r3, r3, r1
   1b98e:	b2a4      	uxth	r4, r4
   1b990:	fbb3 f0fe 	udiv	r0, r3, lr
   1b994:	fb0e 3310 	mls	r3, lr, r0, r3
   1b998:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1b99c:	fb00 fc0c 	mul.w	ip, r0, ip
   1b9a0:	45a4      	cmp	ip, r4
   1b9a2:	d909      	bls.n	1b9b8 <__udivmoddi4+0x8c>
   1b9a4:	192c      	adds	r4, r5, r4
   1b9a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1b9aa:	f080 8107 	bcs.w	1bbbc <__udivmoddi4+0x290>
   1b9ae:	45a4      	cmp	ip, r4
   1b9b0:	f240 8104 	bls.w	1bbbc <__udivmoddi4+0x290>
   1b9b4:	3802      	subs	r0, #2
   1b9b6:	442c      	add	r4, r5
   1b9b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   1b9bc:	eba4 040c 	sub.w	r4, r4, ip
   1b9c0:	2700      	movs	r7, #0
   1b9c2:	b11e      	cbz	r6, 1b9cc <__udivmoddi4+0xa0>
   1b9c4:	40d4      	lsrs	r4, r2
   1b9c6:	2300      	movs	r3, #0
   1b9c8:	e9c6 4300 	strd	r4, r3, [r6]
   1b9cc:	4639      	mov	r1, r7
   1b9ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b9d2:	428b      	cmp	r3, r1
   1b9d4:	d909      	bls.n	1b9ea <__udivmoddi4+0xbe>
   1b9d6:	2e00      	cmp	r6, #0
   1b9d8:	f000 80eb 	beq.w	1bbb2 <__udivmoddi4+0x286>
   1b9dc:	2700      	movs	r7, #0
   1b9de:	e9c6 0100 	strd	r0, r1, [r6]
   1b9e2:	4638      	mov	r0, r7
   1b9e4:	4639      	mov	r1, r7
   1b9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b9ea:	fab3 f783 	clz	r7, r3
   1b9ee:	2f00      	cmp	r7, #0
   1b9f0:	d147      	bne.n	1ba82 <__udivmoddi4+0x156>
   1b9f2:	428b      	cmp	r3, r1
   1b9f4:	d302      	bcc.n	1b9fc <__udivmoddi4+0xd0>
   1b9f6:	4282      	cmp	r2, r0
   1b9f8:	f200 80fa 	bhi.w	1bbf0 <__udivmoddi4+0x2c4>
   1b9fc:	1a84      	subs	r4, r0, r2
   1b9fe:	eb61 0303 	sbc.w	r3, r1, r3
   1ba02:	2001      	movs	r0, #1
   1ba04:	4698      	mov	r8, r3
   1ba06:	2e00      	cmp	r6, #0
   1ba08:	d0e0      	beq.n	1b9cc <__udivmoddi4+0xa0>
   1ba0a:	e9c6 4800 	strd	r4, r8, [r6]
   1ba0e:	e7dd      	b.n	1b9cc <__udivmoddi4+0xa0>
   1ba10:	b902      	cbnz	r2, 1ba14 <__udivmoddi4+0xe8>
   1ba12:	deff      	udf	#255	; 0xff
   1ba14:	fab2 f282 	clz	r2, r2
   1ba18:	2a00      	cmp	r2, #0
   1ba1a:	f040 808f 	bne.w	1bb3c <__udivmoddi4+0x210>
   1ba1e:	1b49      	subs	r1, r1, r5
   1ba20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1ba24:	fa1f f885 	uxth.w	r8, r5
   1ba28:	2701      	movs	r7, #1
   1ba2a:	fbb1 fcfe 	udiv	ip, r1, lr
   1ba2e:	0c23      	lsrs	r3, r4, #16
   1ba30:	fb0e 111c 	mls	r1, lr, ip, r1
   1ba34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1ba38:	fb08 f10c 	mul.w	r1, r8, ip
   1ba3c:	4299      	cmp	r1, r3
   1ba3e:	d907      	bls.n	1ba50 <__udivmoddi4+0x124>
   1ba40:	18eb      	adds	r3, r5, r3
   1ba42:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1ba46:	d202      	bcs.n	1ba4e <__udivmoddi4+0x122>
   1ba48:	4299      	cmp	r1, r3
   1ba4a:	f200 80cd 	bhi.w	1bbe8 <__udivmoddi4+0x2bc>
   1ba4e:	4684      	mov	ip, r0
   1ba50:	1a59      	subs	r1, r3, r1
   1ba52:	b2a3      	uxth	r3, r4
   1ba54:	fbb1 f0fe 	udiv	r0, r1, lr
   1ba58:	fb0e 1410 	mls	r4, lr, r0, r1
   1ba5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   1ba60:	fb08 f800 	mul.w	r8, r8, r0
   1ba64:	45a0      	cmp	r8, r4
   1ba66:	d907      	bls.n	1ba78 <__udivmoddi4+0x14c>
   1ba68:	192c      	adds	r4, r5, r4
   1ba6a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1ba6e:	d202      	bcs.n	1ba76 <__udivmoddi4+0x14a>
   1ba70:	45a0      	cmp	r8, r4
   1ba72:	f200 80b6 	bhi.w	1bbe2 <__udivmoddi4+0x2b6>
   1ba76:	4618      	mov	r0, r3
   1ba78:	eba4 0408 	sub.w	r4, r4, r8
   1ba7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1ba80:	e79f      	b.n	1b9c2 <__udivmoddi4+0x96>
   1ba82:	f1c7 0c20 	rsb	ip, r7, #32
   1ba86:	40bb      	lsls	r3, r7
   1ba88:	fa22 fe0c 	lsr.w	lr, r2, ip
   1ba8c:	ea4e 0e03 	orr.w	lr, lr, r3
   1ba90:	fa01 f407 	lsl.w	r4, r1, r7
   1ba94:	fa20 f50c 	lsr.w	r5, r0, ip
   1ba98:	fa21 f30c 	lsr.w	r3, r1, ip
   1ba9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
   1baa0:	4325      	orrs	r5, r4
   1baa2:	fbb3 f9f8 	udiv	r9, r3, r8
   1baa6:	0c2c      	lsrs	r4, r5, #16
   1baa8:	fb08 3319 	mls	r3, r8, r9, r3
   1baac:	fa1f fa8e 	uxth.w	sl, lr
   1bab0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   1bab4:	fb09 f40a 	mul.w	r4, r9, sl
   1bab8:	429c      	cmp	r4, r3
   1baba:	fa02 f207 	lsl.w	r2, r2, r7
   1babe:	fa00 f107 	lsl.w	r1, r0, r7
   1bac2:	d90b      	bls.n	1badc <__udivmoddi4+0x1b0>
   1bac4:	eb1e 0303 	adds.w	r3, lr, r3
   1bac8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1bacc:	f080 8087 	bcs.w	1bbde <__udivmoddi4+0x2b2>
   1bad0:	429c      	cmp	r4, r3
   1bad2:	f240 8084 	bls.w	1bbde <__udivmoddi4+0x2b2>
   1bad6:	f1a9 0902 	sub.w	r9, r9, #2
   1bada:	4473      	add	r3, lr
   1badc:	1b1b      	subs	r3, r3, r4
   1bade:	b2ad      	uxth	r5, r5
   1bae0:	fbb3 f0f8 	udiv	r0, r3, r8
   1bae4:	fb08 3310 	mls	r3, r8, r0, r3
   1bae8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   1baec:	fb00 fa0a 	mul.w	sl, r0, sl
   1baf0:	45a2      	cmp	sl, r4
   1baf2:	d908      	bls.n	1bb06 <__udivmoddi4+0x1da>
   1baf4:	eb1e 0404 	adds.w	r4, lr, r4
   1baf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1bafc:	d26b      	bcs.n	1bbd6 <__udivmoddi4+0x2aa>
   1bafe:	45a2      	cmp	sl, r4
   1bb00:	d969      	bls.n	1bbd6 <__udivmoddi4+0x2aa>
   1bb02:	3802      	subs	r0, #2
   1bb04:	4474      	add	r4, lr
   1bb06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1bb0a:	fba0 8902 	umull	r8, r9, r0, r2
   1bb0e:	eba4 040a 	sub.w	r4, r4, sl
   1bb12:	454c      	cmp	r4, r9
   1bb14:	46c2      	mov	sl, r8
   1bb16:	464b      	mov	r3, r9
   1bb18:	d354      	bcc.n	1bbc4 <__udivmoddi4+0x298>
   1bb1a:	d051      	beq.n	1bbc0 <__udivmoddi4+0x294>
   1bb1c:	2e00      	cmp	r6, #0
   1bb1e:	d069      	beq.n	1bbf4 <__udivmoddi4+0x2c8>
   1bb20:	ebb1 050a 	subs.w	r5, r1, sl
   1bb24:	eb64 0403 	sbc.w	r4, r4, r3
   1bb28:	fa04 fc0c 	lsl.w	ip, r4, ip
   1bb2c:	40fd      	lsrs	r5, r7
   1bb2e:	40fc      	lsrs	r4, r7
   1bb30:	ea4c 0505 	orr.w	r5, ip, r5
   1bb34:	e9c6 5400 	strd	r5, r4, [r6]
   1bb38:	2700      	movs	r7, #0
   1bb3a:	e747      	b.n	1b9cc <__udivmoddi4+0xa0>
   1bb3c:	f1c2 0320 	rsb	r3, r2, #32
   1bb40:	fa20 f703 	lsr.w	r7, r0, r3
   1bb44:	4095      	lsls	r5, r2
   1bb46:	fa01 f002 	lsl.w	r0, r1, r2
   1bb4a:	fa21 f303 	lsr.w	r3, r1, r3
   1bb4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1bb52:	4338      	orrs	r0, r7
   1bb54:	0c01      	lsrs	r1, r0, #16
   1bb56:	fbb3 f7fe 	udiv	r7, r3, lr
   1bb5a:	fa1f f885 	uxth.w	r8, r5
   1bb5e:	fb0e 3317 	mls	r3, lr, r7, r3
   1bb62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1bb66:	fb07 f308 	mul.w	r3, r7, r8
   1bb6a:	428b      	cmp	r3, r1
   1bb6c:	fa04 f402 	lsl.w	r4, r4, r2
   1bb70:	d907      	bls.n	1bb82 <__udivmoddi4+0x256>
   1bb72:	1869      	adds	r1, r5, r1
   1bb74:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   1bb78:	d22f      	bcs.n	1bbda <__udivmoddi4+0x2ae>
   1bb7a:	428b      	cmp	r3, r1
   1bb7c:	d92d      	bls.n	1bbda <__udivmoddi4+0x2ae>
   1bb7e:	3f02      	subs	r7, #2
   1bb80:	4429      	add	r1, r5
   1bb82:	1acb      	subs	r3, r1, r3
   1bb84:	b281      	uxth	r1, r0
   1bb86:	fbb3 f0fe 	udiv	r0, r3, lr
   1bb8a:	fb0e 3310 	mls	r3, lr, r0, r3
   1bb8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1bb92:	fb00 f308 	mul.w	r3, r0, r8
   1bb96:	428b      	cmp	r3, r1
   1bb98:	d907      	bls.n	1bbaa <__udivmoddi4+0x27e>
   1bb9a:	1869      	adds	r1, r5, r1
   1bb9c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1bba0:	d217      	bcs.n	1bbd2 <__udivmoddi4+0x2a6>
   1bba2:	428b      	cmp	r3, r1
   1bba4:	d915      	bls.n	1bbd2 <__udivmoddi4+0x2a6>
   1bba6:	3802      	subs	r0, #2
   1bba8:	4429      	add	r1, r5
   1bbaa:	1ac9      	subs	r1, r1, r3
   1bbac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   1bbb0:	e73b      	b.n	1ba2a <__udivmoddi4+0xfe>
   1bbb2:	4637      	mov	r7, r6
   1bbb4:	4630      	mov	r0, r6
   1bbb6:	e709      	b.n	1b9cc <__udivmoddi4+0xa0>
   1bbb8:	4607      	mov	r7, r0
   1bbba:	e6e7      	b.n	1b98c <__udivmoddi4+0x60>
   1bbbc:	4618      	mov	r0, r3
   1bbbe:	e6fb      	b.n	1b9b8 <__udivmoddi4+0x8c>
   1bbc0:	4541      	cmp	r1, r8
   1bbc2:	d2ab      	bcs.n	1bb1c <__udivmoddi4+0x1f0>
   1bbc4:	ebb8 0a02 	subs.w	sl, r8, r2
   1bbc8:	eb69 020e 	sbc.w	r2, r9, lr
   1bbcc:	3801      	subs	r0, #1
   1bbce:	4613      	mov	r3, r2
   1bbd0:	e7a4      	b.n	1bb1c <__udivmoddi4+0x1f0>
   1bbd2:	4660      	mov	r0, ip
   1bbd4:	e7e9      	b.n	1bbaa <__udivmoddi4+0x27e>
   1bbd6:	4618      	mov	r0, r3
   1bbd8:	e795      	b.n	1bb06 <__udivmoddi4+0x1da>
   1bbda:	4667      	mov	r7, ip
   1bbdc:	e7d1      	b.n	1bb82 <__udivmoddi4+0x256>
   1bbde:	4681      	mov	r9, r0
   1bbe0:	e77c      	b.n	1badc <__udivmoddi4+0x1b0>
   1bbe2:	3802      	subs	r0, #2
   1bbe4:	442c      	add	r4, r5
   1bbe6:	e747      	b.n	1ba78 <__udivmoddi4+0x14c>
   1bbe8:	f1ac 0c02 	sub.w	ip, ip, #2
   1bbec:	442b      	add	r3, r5
   1bbee:	e72f      	b.n	1ba50 <__udivmoddi4+0x124>
   1bbf0:	4638      	mov	r0, r7
   1bbf2:	e708      	b.n	1ba06 <__udivmoddi4+0xda>
   1bbf4:	4637      	mov	r7, r6
   1bbf6:	e6e9      	b.n	1b9cc <__udivmoddi4+0xa0>

0001bbf8 <__aeabi_idiv0>:
   1bbf8:	4770      	bx	lr
   1bbfa:	bf00      	nop

0001bbfc <__aeabi_memclr>:
   1bbfc:	2200      	movs	r2, #0
   1bbfe:	f000 b803 	b.w	1bc08 <__aeabi_memset>
   1bc02:	bf00      	nop

0001bc04 <__aeabi_memcpy>:
   1bc04:	f7fd bf68 	b.w	19ad8 <memcpy>

0001bc08 <__aeabi_memset>:
   1bc08:	b470      	push	{r4, r5, r6}
   1bc0a:	0784      	lsls	r4, r0, #30
   1bc0c:	d046      	beq.n	1bc9c <__aeabi_memset+0x94>
   1bc0e:	1e4c      	subs	r4, r1, #1
   1bc10:	2900      	cmp	r1, #0
   1bc12:	d041      	beq.n	1bc98 <__aeabi_memset+0x90>
   1bc14:	b2d5      	uxtb	r5, r2
   1bc16:	4603      	mov	r3, r0
   1bc18:	e002      	b.n	1bc20 <__aeabi_memset+0x18>
   1bc1a:	1e61      	subs	r1, r4, #1
   1bc1c:	b3e4      	cbz	r4, 1bc98 <__aeabi_memset+0x90>
   1bc1e:	460c      	mov	r4, r1
   1bc20:	f803 5b01 	strb.w	r5, [r3], #1
   1bc24:	0799      	lsls	r1, r3, #30
   1bc26:	d1f8      	bne.n	1bc1a <__aeabi_memset+0x12>
   1bc28:	2c03      	cmp	r4, #3
   1bc2a:	d92e      	bls.n	1bc8a <__aeabi_memset+0x82>
   1bc2c:	b2d5      	uxtb	r5, r2
   1bc2e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1bc32:	2c0f      	cmp	r4, #15
   1bc34:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1bc38:	d919      	bls.n	1bc6e <__aeabi_memset+0x66>
   1bc3a:	4626      	mov	r6, r4
   1bc3c:	f103 0110 	add.w	r1, r3, #16
   1bc40:	3e10      	subs	r6, #16
   1bc42:	2e0f      	cmp	r6, #15
   1bc44:	f841 5c10 	str.w	r5, [r1, #-16]
   1bc48:	f841 5c0c 	str.w	r5, [r1, #-12]
   1bc4c:	f841 5c08 	str.w	r5, [r1, #-8]
   1bc50:	f841 5c04 	str.w	r5, [r1, #-4]
   1bc54:	f101 0110 	add.w	r1, r1, #16
   1bc58:	d8f2      	bhi.n	1bc40 <__aeabi_memset+0x38>
   1bc5a:	f1a4 0110 	sub.w	r1, r4, #16
   1bc5e:	f021 010f 	bic.w	r1, r1, #15
   1bc62:	f004 040f 	and.w	r4, r4, #15
   1bc66:	3110      	adds	r1, #16
   1bc68:	2c03      	cmp	r4, #3
   1bc6a:	440b      	add	r3, r1
   1bc6c:	d90d      	bls.n	1bc8a <__aeabi_memset+0x82>
   1bc6e:	461e      	mov	r6, r3
   1bc70:	4621      	mov	r1, r4
   1bc72:	3904      	subs	r1, #4
   1bc74:	2903      	cmp	r1, #3
   1bc76:	f846 5b04 	str.w	r5, [r6], #4
   1bc7a:	d8fa      	bhi.n	1bc72 <__aeabi_memset+0x6a>
   1bc7c:	1f21      	subs	r1, r4, #4
   1bc7e:	f021 0103 	bic.w	r1, r1, #3
   1bc82:	3104      	adds	r1, #4
   1bc84:	440b      	add	r3, r1
   1bc86:	f004 0403 	and.w	r4, r4, #3
   1bc8a:	b12c      	cbz	r4, 1bc98 <__aeabi_memset+0x90>
   1bc8c:	b2d2      	uxtb	r2, r2
   1bc8e:	441c      	add	r4, r3
   1bc90:	f803 2b01 	strb.w	r2, [r3], #1
   1bc94:	42a3      	cmp	r3, r4
   1bc96:	d1fb      	bne.n	1bc90 <__aeabi_memset+0x88>
   1bc98:	bc70      	pop	{r4, r5, r6}
   1bc9a:	4770      	bx	lr
   1bc9c:	460c      	mov	r4, r1
   1bc9e:	4603      	mov	r3, r0
   1bca0:	e7c2      	b.n	1bc28 <__aeabi_memset+0x20>
   1bca2:	5344      	.short	0x5344
   1bca4:	61662050 	.word	0x61662050
   1bca8:	43546c69 	.word	0x43546c69
   1bcac:	61662048 	.word	0x61662048
   1bcb0:	45476c69 	.word	0x45476c69
   1bcb4:	61662054 	.word	0x61662054
   1bcb8:	55526c69 	.word	0x55526c69
   1bcbc:	6166204e 	.word	0x6166204e
   1bcc0:	6c69      	.short	0x6c69
   1bcc2:	7572      	.short	0x7572
   1bcc4:	612f7473 	.word	0x612f7473
   1bcc8:	732f7070 	.word	0x732f7070
   1bccc:	6c2f6372 	.word	0x6c2f6372
   1bcd0:	722e6269 	.word	0x722e6269
   1bcd4:	00000073 	.word	0x00000073
   1bcd8:	0001bcc2 	.word	0x0001bcc2
   1bcdc:	00000013 	.word	0x00000013
   1bce0:	0000005c 	.word	0x0000005c
   1bce4:	00000005 	.word	0x00000005
   1bce8:	0001bcc2 	.word	0x0001bcc2
   1bcec:	00000013 	.word	0x00000013
   1bcf0:	00000065 	.word	0x00000065
   1bcf4:	00000005 	.word	0x00000005
   1bcf8:	50494843 	.word	0x50494843
   1bcfc:	61662038 	.word	0x61662038
   1bd00:	00006c69 	.word	0x00006c69
   1bd04:	0001bcc2 	.word	0x0001bcc2
   1bd08:	00000013 	.word	0x00000013
   1bd0c:	00000077 	.word	0x00000077
   1bd10:	00000005 	.word	0x00000005
   1bd14:	0001bcc2 	.word	0x0001bcc2
   1bd18:	00000013 	.word	0x00000013
   1bd1c:	0000007d 	.word	0x0000007d
   1bd20:	0000000d 	.word	0x0000000d
   1bd24:	0001bcc2 	.word	0x0001bcc2
   1bd28:	00000013 	.word	0x00000013
   1bd2c:	0000007c 	.word	0x0000007c
   1bd30:	00000009 	.word	0x00000009
   1bd34:	696e6170 	.word	0x696e6170
   1bd38:	2063      	.short	0x2063
   1bd3a:	6f6e      	.short	0x6f6e
   1bd3c:	636f6c20 	.word	0x636f6c20
   1bd40:	0a          	.byte	0x0a
   1bd41:	61          	.byte	0x61
   1bd42:	2074      	.short	0x2074
   1bd44:	6e696c20 	.word	0x6e696c20
   1bd48:	2065      	.short	0x2065
   1bd4a:	000a      	.short	0x000a
   1bd4c:	0001bcc2 	.word	0x0001bcc2
   1bd50:	00000013 	.word	0x00000013
   1bd54:	00000095 	.word	0x00000095
   1bd58:	00000014 	.word	0x00000014
   1bd5c:	00008827 	.word	0x00008827
   1bd60:	00000004 	.word	0x00000004
   1bd64:	00000004 	.word	0x00000004
   1bd68:	00008a91 	.word	0x00008a91
   1bd6c:	00000000 	.word	0x00000000
   1bd70:	0001bd6c 	.word	0x0001bd6c
   1bd74:	0001bd70 	.word	0x0001bd70
   1bd78:	65737361 	.word	0x65737361
   1bd7c:	6f697472 	.word	0x6f697472
   1bd80:	6166206e 	.word	0x6166206e
   1bd84:	64656c69 	.word	0x64656c69
   1bd88:	2860203a 	.word	0x2860203a
   1bd8c:	7466656c 	.word	0x7466656c
   1bd90:	203d3d20 	.word	0x203d3d20
   1bd94:	68676972 	.word	0x68676972
   1bd98:	0a602974 	.word	0x0a602974
   1bd9c:	656c2020 	.word	0x656c2020
   1bda0:	203a7466 	.word	0x203a7466
   1bda4:	60          	.byte	0x60
   1bda5:	60          	.byte	0x60
   1bda6:	0a2c      	.short	0x0a2c
   1bda8:	67697220 	.word	0x67697220
   1bdac:	203a7468 	.word	0x203a7468
   1bdb0:	60          	.byte	0x60
   1bdb1:	60          	.byte	0x60
   1bdb2:	203a      	.short	0x203a
   1bdb4:	0001bd78 	.word	0x0001bd78
   1bdb8:	0000002d 	.word	0x0000002d
   1bdbc:	0001bda5 	.word	0x0001bda5
   1bdc0:	0000000c 	.word	0x0000000c
   1bdc4:	0001bdb1 	.word	0x0001bdb1
   1bdc8:	00000003 	.word	0x00000003
   1bdcc:	0001bdb4 	.word	0x0001bdb4
   1bdd0:	6e206f6e 	.word	0x6e206f6e
   1bdd4:	006c6c75 	.word	0x006c6c75
   1bdd8:	0001bdd0 	.word	0x0001bdd0
   1bddc:	00000007 	.word	0x00000007
   1bde0:	0001bdd8 	.word	0x0001bdd8
   1bde4:	0001bde4 	.word	0x0001bde4
   1bde8:	74737572 	.word	0x74737572
   1bdec:	6e796d2f 	.word	0x6e796d2f
   1bdf0:	2f747765 	.word	0x2f747765
   1bdf4:	2f637273 	.word	0x2f637273
   1bdf8:	2e62696c 	.word	0x2e62696c
   1bdfc:	00007372 	.word	0x00007372
   1be00:	0001bde8 	.word	0x0001bde8
   1be04:	00000016 	.word	0x00000016
   1be08:	000000db 	.word	0x000000db
   1be0c:	00000011 	.word	0x00000011
   1be10:	00008d4d 	.word	0x00008d4d
   1be14:	00000004 	.word	0x00000004
   1be18:	00000004 	.word	0x00000004
   1be1c:	00008a91 	.word	0x00008a91
   1be20:	65737361 	.word	0x65737361
   1be24:	6f697472 	.word	0x6f697472
   1be28:	6166206e 	.word	0x6166206e
   1be2c:	64656c69 	.word	0x64656c69
   1be30:	2860203a 	.word	0x2860203a
   1be34:	7466656c 	.word	0x7466656c
   1be38:	203d3d20 	.word	0x203d3d20
   1be3c:	68676972 	.word	0x68676972
   1be40:	0a602974 	.word	0x0a602974
   1be44:	656c2020 	.word	0x656c2020
   1be48:	203a7466 	.word	0x203a7466
   1be4c:	60          	.byte	0x60
   1be4d:	60          	.byte	0x60
   1be4e:	0a2c      	.short	0x0a2c
   1be50:	67697220 	.word	0x67697220
   1be54:	203a7468 	.word	0x203a7468
   1be58:	60          	.byte	0x60
   1be59:	60          	.byte	0x60
   1be5a:	203a      	.short	0x203a
   1be5c:	0001be20 	.word	0x0001be20
   1be60:	0000002d 	.word	0x0000002d
   1be64:	0001be4d 	.word	0x0001be4d
   1be68:	0000000c 	.word	0x0000000c
   1be6c:	0001be59 	.word	0x0001be59
   1be70:	00000003 	.word	0x00000003
   1be74:	0001be5c 	.word	0x0001be5c
   1be78:	74736564 	.word	0x74736564
   1be7c:	74616e69 	.word	0x74616e69
   1be80:	206e6f69 	.word	0x206e6f69
   1be84:	20646e61 	.word	0x20646e61
   1be88:	72756f73 	.word	0x72756f73
   1be8c:	73206563 	.word	0x73206563
   1be90:	6563696c 	.word	0x6563696c
   1be94:	61682073 	.word	0x61682073
   1be98:	64206576 	.word	0x64206576
   1be9c:	65666669 	.word	0x65666669
   1bea0:	746e6572 	.word	0x746e6572
   1bea4:	6e656c20 	.word	0x6e656c20
   1bea8:	73687467 	.word	0x73687467
   1beac:	0001be78 	.word	0x0001be78
   1beb0:	00000034 	.word	0x00000034
   1beb4:	0001beac 	.word	0x0001beac
   1beb8:	0001beb8 	.word	0x0001beb8
   1bebc:	7375722f 	.word	0x7375722f
   1bec0:	352f6374 	.word	0x352f6374
   1bec4:	66613765 	.word	0x66613765
   1bec8:	39363634 	.word	0x39363634
   1becc:	65303866 	.word	0x65303866
   1bed0:	38366635 	.word	0x38366635
   1bed4:	31343132 	.word	0x31343132
   1bed8:	30353066 	.word	0x30353066
   1bedc:	61333931 	.word	0x61333931
   1bee0:	39373662 	.word	0x39373662
   1bee4:	62646661 	.word	0x62646661
   1bee8:	2f316234 	.word	0x2f316234
   1beec:	2f637273 	.word	0x2f637273
   1bef0:	6362696c 	.word	0x6362696c
   1bef4:	2f65726f 	.word	0x2f65726f
   1bef8:	7263616d 	.word	0x7263616d
   1befc:	6d2f736f 	.word	0x6d2f736f
   1bf00:	722e646f 	.word	0x722e646f
   1bf04:	00000073 	.word	0x00000073
   1bf08:	0001bebc 	.word	0x0001bebc
   1bf0c:	00000049 	.word	0x00000049
   1bf10:	00000012 	.word	0x00000012
   1bf14:	0000000d 	.word	0x0000000d
   1bf18:	656d6f53 	.word	0x656d6f53
   1bf1c:	656e6f4e 	.word	0x656e6f4e
   1bf20:	00008d45 	.word	0x00008d45
   1bf24:	00000004 	.word	0x00000004
   1bf28:	00000004 	.word	0x00000004
   1bf2c:	00009323 	.word	0x00009323
   1bf30:	00000060 	.word	0x00000060
   1bf34:	0001bf30 	.word	0x0001bf30
   1bf38:	20697073 	.word	0x20697073
   1bf3c:	73756c66 	.word	0x73756c66
   1bf40:	61662068 	.word	0x61662068
   1bf44:	6c69      	.short	0x6c69
   1bf46:	552f      	.short	0x552f
   1bf48:	73726573 	.word	0x73726573
   1bf4c:	70754c2f 	.word	0x70754c2f
   1bf50:	502f7970 	.word	0x502f7970
   1bf54:	54656e69 	.word	0x54656e69
   1bf58:	2f656d69 	.word	0x2f656d69
   1bf5c:	656e6970 	.word	0x656e6970
   1bf60:	656d6974 	.word	0x656d6974
   1bf64:	7375722d 	.word	0x7375722d
   1bf68:	796d2d74 	.word	0x796d2d74
   1bf6c:	7477656e 	.word	0x7477656e
   1bf70:	7375722f 	.word	0x7375722f
   1bf74:	74732f74 	.word	0x74732f74
   1bf78:	35333737 	.word	0x35333737
   1bf7c:	64636c2d 	.word	0x64636c2d
   1bf80:	7461622d 	.word	0x7461622d
   1bf84:	722d6863 	.word	0x722d6863
   1bf88:	72732f73 	.word	0x72732f73
   1bf8c:	696c2f63 	.word	0x696c2f63
   1bf90:	73722e62 	.word	0x73722e62
   1bf94:	20697073 	.word	0x20697073
   1bf98:	61746164 	.word	0x61746164
   1bf9c:	69616620 	.word	0x69616620
   1bfa0:	0000006c 	.word	0x0000006c
   1bfa4:	0001bf46 	.word	0x0001bf46
   1bfa8:	0000004e 	.word	0x0000004e
   1bfac:	000000b0 	.word	0x000000b0
   1bfb0:	00000009 	.word	0x00000009
   1bfb4:	0001bf46 	.word	0x0001bf46
   1bfb8:	0000004e 	.word	0x0000004e
   1bfbc:	00000098 	.word	0x00000098
   1bfc0:	0000000d 	.word	0x0000000d
   1bfc4:	20697073 	.word	0x20697073
   1bfc8:	20646d63 	.word	0x20646d63
   1bfcc:	6c696166 	.word	0x6c696166
   1bfd0:	0001bf46 	.word	0x0001bf46
   1bfd4:	0000004e 	.word	0x0000004e
   1bfd8:	00000097 	.word	0x00000097
   1bfdc:	00000009 	.word	0x00000009
   1bfe0:	0001bf46 	.word	0x0001bf46
   1bfe4:	0000004e 	.word	0x0000004e
   1bfe8:	0000009d 	.word	0x0000009d
   1bfec:	00000011 	.word	0x00000011
   1bff0:	0001bf46 	.word	0x0001bf46
   1bff4:	0000004e 	.word	0x0000004e
   1bff8:	0000009c 	.word	0x0000009c
   1bffc:	0000000d 	.word	0x0000000d
   1c000:	0001bf46 	.word	0x0001bf46
   1c004:	0000004e 	.word	0x0000004e
   1c008:	000000c5 	.word	0x000000c5
   1c00c:	0000002d 	.word	0x0000002d
   1c010:	0001bf46 	.word	0x0001bf46
   1c014:	0000004e 	.word	0x0000004e
   1c018:	000000c9 	.word	0x000000c9
   1c01c:	0000002d 	.word	0x0000002d
   1c020:	0001bf46 	.word	0x0001bf46
   1c024:	0000004e 	.word	0x0000004e
   1c028:	000000d8 	.word	0x000000d8
   1c02c:	00000019 	.word	0x00000019

0001c030 <str.0>:
   1c030:	65747461 2074706d 61206f74 77206464     attempt to add w
   1c040:	20687469 7265766f 776f6c66 0001bf46     ith overflowF...
   1c050:	0000004e 000000d9 00000019 0001bf46     N...........F...
   1c060:	0000004e 000000db 00000019 0001bf46     N...........F...
   1c070:	0000004e 000000dc 00000019 20697073     N...........spi 
   1c080:	74696e69 69616620 0000006c 0001bf46     init fail...F...
   1c090:	0000004e 00000066 00000009 002d2c01     N...f........,-.
   1c0a0:	0001c09c 012d2c01 00002d2c 0001c0a4     .....,-.,-......
   1c0b0:	00000007 0001c0b0 008402a2 0001c0b8     ................
   1c0c0:	000000c5 0001c0c0 0000000a 0001c0c8     ................
   1c0d0:	00002a8a 0001c0d0 0000ee8a 0001c0d8     .*..............
   1c0e0:	0000000e 0001c0e0 00000000 0001c0e8     ................
   1c0f0:	00000008 0001c0f0 00000005 0001c0f8     ................
   1c100:	0001bf46 0000004e 00000088 00000009     F...N...........
   1c110:	74737552 756f7420 73206863 6f736e65     Rust touch senso
   1c120:	00000a72 00000000 0001c124 65737361     r.......$...asse
   1c130:	6f697472 6166206e 64656c69 2860203a     rtion failed: `(
   1c140:	7466656c 203d3d20 68676972 0a602974     left == right)`.
   1c150:	656c2020 203a7466 0a2c6060 67697220       left: ``,. rig
   1c160:	203a7468 203a6060 0001c12c 0000002d     ht: ``: ,...-...
   1c170:	0001c159 0000000c 0001c165 00000003     Y.......e.......
   1c180:	0001c168 20515249 74696e69 69616620     h...IRQ init fai
   1c190:	0000006c 0001c184 0000000d 0001c194     l...............
   1c1a0:	0001c1a0 74737572 7070612f 6372732f     ....rust/app/src
   1c1b0:	756f742f 735f6863 6f736e65 73722e72     /touch_sensor.rs
   1c1c0:	0001c1a4 0000001c 0000003f 00000005     ........?.......
   1c1d0:	20633269 72646461 0001c1a4 0000001c     i2c addr........
   1c1e0:	0000004b 00000011 63756f74 74616468     K.......touchdat
   1c1f0:	61662061 00006c69 0001c1a4 0000001c     a fail..........
   1c200:	00000056 00000009 0001c1a4 0000001c     V...............
   1c210:	0000005a 00000031 64616572 756f7420     Z...1...read tou
   1c220:	61646863 66206174 006c6961 0001c1a4     chdata fail.....
   1c230:	0000001c 00000089 00000005 0001c1a4     ................
   1c240:	0000001c 00000095 00000037 00000000     ........7.......

0001c250 <str.0>:
   1c250:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1c260:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1c270:	00000077 0001c1a4 0000001c 00000095     w...............
   1c280:	00000024 00000000 00000000 00000000     $...............

0001c290 <str.1>:
   1c290:	65747461 2074706d 61206f74 77206464     attempt to add w
   1c2a0:	20687469 7265766f 776f6c66 0001c1a4     ith overflow....
   1c2b0:	0000001c 00000095 00000020 0001c1a4     ........ .......
   1c2c0:	0000001c 00000099 00000009 0001c1a4     ................
   1c2d0:	0000001c 0000009a 00000037 0001c1a4     ........7.......
   1c2e0:	0000001c 0000009a 00000023 0001c1a4     ........#.......
   1c2f0:	0000001c 0000009a 0000001f 0001c1a4     ................
   1c300:	0000001c 0000009b 00000037 0001c1a4     ........7.......
   1c310:	0000001c 0000009b 00000023 0001c1a4     ........#.......
   1c320:	0000001c 0000009b 0000001f 0001c1a4     ................
   1c330:	0000001c 0000009c 00000009 0001c1a4     ................
   1c340:	0000001c 0000009e 00000037 0001c1a4     ........7.......
   1c350:	0000001c 0000009e 00000023 0001c1a4     ........#.......
   1c360:	0000001c 0000009e 0000001f 0001c1a4     ................
   1c370:	0000001c 0000009f 00000037 0001c1a4     ........7.......
   1c380:	0000001c 0000009f 00000023 0001c1a4     ........#.......
   1c390:	0000001c 0000009f 0000001f 0001c1a4     ................
   1c3a0:	0000001c 000000a0 00000009 0001c1a4     ................
   1c3b0:	0000001c 000000a4 00000030 0001c1a4     ........0.......
   1c3c0:	0000001c 000000a4 0000001a 0001c1a4     ................
   1c3d0:	0000001c 000000a4 00000016 0001c1a4     ................
   1c3e0:	0000001c 000000a3 00000009 0001c1a4     ................
   1c3f0:	0000001c 000000a6 00000030 0001c1a4     ........0.......
   1c400:	0000001c 000000a6 0000001a 0001c1a4     ................
   1c410:	0000001c 000000a6 00000016 0001c1a4     ................
   1c420:	0000001c 000000a5 00000009 0001c1a4     ................
   1c430:	0000001c 000000aa 0000002d 0001c1a4     ........-.......
   1c440:	0000001c 000000aa 0000001a 0001c1a4     ................
   1c450:	0000001c 000000aa 00000016 0001c1a4     ................
   1c460:	0000001c 000000a9 00000009 0001c1a4     ................
   1c470:	0000001c 000000ac 0000002d 0001c1a4     ........-.......
   1c480:	0000001c 000000ac 0000001a 0001c1a4     ................
   1c490:	0000001c 000000ac 00000016 0001c1a4     ................
   1c4a0:	0000001c 000000ab 00000009 0001c1a4     ................
   1c4b0:	0000001c 000000af 0000000d 0001c1a4     ................
   1c4c0:	0000001c 000000af 0000002c 20633269     ........,...i2c 
   1c4d0:	00667562 0001c1a4 0000001c 000000f1     buf.............
   1c4e0:	00000005 0001c1a4 0000001c 000000f2     ................
   1c4f0:	0000000d 0001c1a4 0000001c 000000f2     ................
   1c500:	00000005 20633269 6c696166 7375520a     ....i2c fail.Rus
   1c510:	48432074 0a385049 70696863 00000038     t CHIP8.chip8...
   1c520:	00000000 0001c518 00000006 0001c520     ............ ...
   1c530:	50494843 74732038 65747261 25120a64     CHIP8 started..%
   1c540:	43415053 4e492045 45444156 30205352     SPACE INVADERS 0
   1c550:	2031392e 44207942 64697661 4e495720     .91 By David WIN
   1c560:	60524554 62006100 d0dda308 f2087118     TER`.a.b.....q..
   1c570:	1220311e 6108702d 12403000 6c05692d     .1 .-p.a.0@.-i.l
   1c580:	23006e15 f00a6091 3007f015 234b1200     .n.#.`.....0..K#
   1c590:	12017e91 68006645 6a00691c 6c0a6b04     .~..Ef.h.i.j.k.l
   1c5a0:	6e3c6d04 23e0000f fd512375 e0046015     .m<n...#u#Q..`..
   1c5b0:	237d129e 78003875 607523ff 129ee006     ..}#u8.x.#u`....
   1c5c0:	3875238b 23017839 12003675 e005609f     .#u89x.#u6...`..
   1c5d0:	66e9129e 841b6501 d4d9a380 d4d9a351     ...f.e......Q...
   1c5e0:	35ff7551 66ad12ff d4e91200 12013f51     Qu.5...f....Q?..
   1c5f0:	6651d4e9 73408300 62b58303 622283f8     ..Qf..@s...b.."b
   1c600:	12003308 827d23c9 12084306 121033d3     .3...#}..C...3..
   1c610:	827d23d5 12183306 827d23dd 12204306     .#}..3...#}..C .
   1c620:	122833e7 3e7d23e9 79071300 69184906     .3(..#}>...y.I.i
   1c630:	6b046a00 7d046c0a 000f6ef4 235123e0     .j.k.l.}.n...#Q#
   1c640:	1215fd75 3707f76f fd6f1200 8b512315     u...o..7..o..#Q.
   1c650:	13123ba4 6a027c1b 13023bfc 6a027c23     .;...|.j.;..#|.j
   1c660:	3c512304 006f1218 60dda4e0 62086114     .#Q<..o....`.a.b
   1c670:	701fd00f 301ef208 6033132c f015f0ff     ...p...0,.3`....
   1c680:	13003007 000af041 fe06a7e0 a3251265     .0..A.......e.%.
   1c690:	611ef9c1 81692308 81692306 81692306     ...a.#i..#i..#i.
   1c6a0:	7b692306 80ee00d0 301280e0 7bc6db00     .#i{.......0...{
   1c6b0:	a3ee000c d81c60d9 23ee0004 23238e51     .....`.....#Q.##
   1c6c0:	f0056051 f015f018 13003007 6aee0089     Q`.......0.....j
   1c6d0:	6be08d00 12a1e904 fd0ca657 3065f01e     ...k....W.....e0
   1c6e0:	6aaf13ff 6d046b00 13016e01 f00aa597     ...j.k.m.n......
   1c6f0:	7bc6db1e 7a017d08 13073a01 3cee0097     ...{.}.z.:.....<
   1c700:	99ffff7e ffff7e99 7ee72424 7e3c3cff     ~....~..$$.~.<<~
   1c710:	3c4281db 10dbff7e 00fe7c38 3f007f00     ..B<~...8|.....?
   1c720:	00007f00 01010100 03030303 203f0000     ..............? 
   1c730:	20202020 3f202020 00ff0808 fc00fe00            ?........
   1c740:	0000fe00 42427e00 62626262 00ff0000     .....~BBbbbb....
   1c750:	00000000 ff000000 00ff0000 7d41007d     ............}.A}
   1c760:	007d7d05 c6c2c200 38286c44 00ff0000     .}}.....Dl(8....
   1c770:	00000000 ff000000 00ff0000 f71410f7     ................
   1c780:	000404f7 fe447c00 c2c2c2c2 00ff0000     .....|D.........
   1c790:	00000000 ff000000 00ff0000 e82820ef     ............. (.
   1c7a0:	002f2fe8 c585f900 f9c5c5c5 00ff0000     .//.............
   1c7b0:	00000000 ff000000 00ff0000 302000be     .............. 0
   1c7c0:	00bebe20 e704f700 f4848585 00ff0000      ...............
   1c7d0:	00000000 ff000000 00ff0000 3f007f00     ...............?
   1c7e0:	00007f00 ef28ef00 6f60e000 00ff0000     ......(...`o....
   1c7f0:	00000000 ff000000 00ff0000 fc00fe00     ................
   1c800:	0000fe00 c000c000 c0c0c0c0 04fc0000     ................
   1c810:	04040404 fc040404 f9ff1010 9a8bb981     ................
   1c820:	fa00fa9a 9b9a9a8a 25e6f899 3434f425     ...........%%.44
   1c830:	14170034 26363734 5050dfc7 dfd8d85c     4...476&..PP\...
   1c840:	1f11df00 d9191b12 86fe447c 84fc8686     ........|D......
   1c850:	fe8282fe c0c080fe 82fcfec0 fcc2c2c2     ................
   1c860:	c0f880fe 80fefec0 c0c0c0f0 86be80fe     ................
   1c870:	8686fe86 868686fe 10101010 18181010     ................
   1c880:	78484818 c0b0909c 80809cb0 fec0c0c0     .HHx............
   1c890:	869292ee 82fe8686 86868686 8686827c     ............|...
   1c8a0:	82fe7c86 c0c0c0fe cac2827c 86fe7ac4     .|......|....z..
   1c8b0:	849c90fe 02fec0fe 10fefe02 30303030     ............0000
   1c8c0:	c2c28282 8282fec2 1038ee82 92968686     ..........8.....
   1c8d0:	4482ee92 82443838 30fe8282 02fe3030     ...D88D....000..
   1c8e0:	fe80f01e 00000000 00000606 c0606000     .............``.
   1c8f0:	00000000 18180000 18001818 180cc67c     ............|...
   1c900:	00001800 0000fefe 868682fe 0808fe86     ................
   1c910:	18181808 c0fe02fe 02fefec0 fe06061e     ................
   1c920:	fec4c484 80fe0404 fe0606fe fec0c0c0     ................
   1c930:	02fefe82 06060602 86fe447c 82fefe86     ........|D......
   1c940:	060606fe 4444fe44 a8a844fe a8a8a8a8     ....D.DD.D......
   1c950:	005a6ca8 30a8180c 12007e4e a86c6618     .lZ....0N~...fl.
   1c960:	2454665a 48480066 06a81218 0012a890     ZfT$f.HH........
   1c970:	a812307e 724e3084 a8a86618 a8a8a8a8     ~0...0Nr.f......
   1c980:	a8785490 726c7848 6c1812a8 90546672     .Tx.Hxlr...lrfT.
   1c990:	182a72a8 7e4e30a8 66181200 5472a86c     .r*..0N~...fl.rT
   1c9a0:	18665aa8 724e187e 182a72a8 30a86630     .Zf.~.Nr.r*.0f.0
   1c9b0:	6c007e4e 9c4e5430 a8a8a8a8 48a8a8a8     N~.l0TN........H
   1c9c0:	a8187e54 66785490 302a6ca8 3084a85a     T~...Txf.l*0Z..0
   1c9d0:	d8a82a72 124e00a8 a8a2e4a8 a8124e00     r*....N......N..
   1c9e0:	54542a6c 3084a872 dea82a72 2a72a89c     l*TTr..0r*....r*
   1c9f0:	540ca818 72785a48 66a86618 66545a18     ...THZxr.f.f.ZTf
   1ca00:	72a86c72 a872002a a8182a72 007e4e30     rl.r*.r.r*..0N~.
   1ca10:	6c661812 186600a8 0c4e30a8 6c001866     ..fl..f..0N.f..l
   1ca20:	a8244e30 30182a72 541ea866 9c180c66     0N$.r*.0f..Tf...
   1ca30:	545424a8 7842a812 aea83c0c a8a8a8a8     .$TT..Bx.<......
   1ca40:	ffa8a8a8 00000000 00000000 00000000     ................
   1ca50:	43000000 38504948 6e6f6420 48430a65     ...CHIP8 done.CH
   1ca60:	20385049 756f6873 6e20646c 6520746f     IP8 should not e
   1ca70:	7572646e 612f7473 732f7070 632f6372     ndrust/app/src/c
   1ca80:	38706968 0073722e 0001ca72 00000015     hip8.rs.r.......
   1ca90:	00000059 00000005 0a79656b 766f2078     Y.......key.x ov
   1caa0:	6c667265 0000776f 0001ca72 00000015     erflow..r.......
   1cab0:	000000a4 00000009 766f2079 6c667265     ........y overfl
   1cac0:	0000776f 0001ca72 00000015 000000a5     ow..r...........
   1cad0:	00000009 0001ca72 00000015 000000a6     ....r...........
   1cae0:	00000015 00000000 00000000 00000000     ................

0001caf0 <str.0>:
   1caf0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1cb00:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1cb10:	00000077 0001ca72 00000015 000000a6     w...r...........
   1cb20:	00000011 00000000 00000000 00000000     ................

0001cb30 <str.1>:
   1cb30:	65747461 2074706d 61206f74 77206464     attempt to add w
   1cb40:	20687469 7265766f 776f6c66 0001ca72     ith overflowr...
   1cb50:	00000015 000000a7 00000012 0001ca72     ............r...
   1cb60:	00000015 000000c3 00000009 0001ca72     ............r...
   1cb70:	00000015 000000c4 00000009 0001ca72     ............r...
   1cb80:	00000015 000000c5 00000015 0001ca72     ............r...
   1cb90:	00000015 000000c5 00000011 0001ca72     ............r...
   1cba0:	00000015 000000c6 00000012 20646162     ............bad 
   1cbb0:	657a6973 73746573 20657a69 7265766f     sizesetsize over
   1cbc0:	776f6c66 666f5f78 74657366 666f5f79     flowx_offsety_of
   1cbd0:	74657366 0001ca72 00000015 000000cc     fsetr...........
   1cbe0:	00000009 000a202c 0001ca72 00000015     ...., ..r.......
   1cbf0:	000000d7 00000012 0001ca72 00000015     ........r.......
   1cc00:	00000109 00000011 00000000 00000000     ................

0001cc10 <str.2>:
   1cc10:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1cc20:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1cc30:	00000077 0001ca72 00000015 0000010a     w...r...........
   1cc40:	00000012 0001ca72 00000015 0000010c     ....r...........
   1cc50:	00000008 0001ca72 00000015 00000113     ....r...........
   1cc60:	0000001f 0001ca72 00000015 00000114     ....r...........
   1cc70:	00000020 0001ca72 00000015 00000119      ...r...........
   1cc80:	0000000d 0001ca72 00000015 0000011c     ....r...........
   1cc90:	00000011 20746573 65786970 6620736c     ....set pixels f
   1cca0:	656c6961 00000064 0001ca72 00000015     ailed...r.......
   1ccb0:	0000012d 00000005 0001ca72 00000015     -.......r.......
   1ccc0:	00000167 00000018 0001ca72 00000015     g.......r.......
   1ccd0:	00000168 00000017 0001ca72 00000015     h.......r.......
   1cce0:	00000169 00000021 0001ca72 00000015     i...!...r.......
   1ccf0:	00000169 00000020 0001ca72 00000015     i... ...r.......
   1cd00:	00000169 00000019 0001ca72 00000015     i.......r.......
   1cd10:	0000016a 00000021 0001ca72 00000015     j...!...r.......
   1cd20:	0000016a 00000020 0001ca72 00000015     j... ...r.......
   1cd30:	0000016a 0000001a 0001ca72 00000015     j.......r.......
   1cd40:	0000016b 00000009 0001ca72 00000015     k.......r.......
   1cd50:	0000017b 00000009 0001ca72 00000015     {.......r.......
   1cd60:	0000017c 00000009 0001ca72 00000015     |.......r.......
   1cd70:	0000017d 00000023 0001ca72 00000015     }...#...r.......
   1cd80:	0000017d 00000011 0001ca72 00000015     }.......r.......
   1cd90:	0000017e 0000002c 0001ca72 00000015     ~...,...r.......
   1cda0:	00000180 00000036 0001ca72 00000015     ....6...r.......
   1cdb0:	00000180 00000016 0001ca72 00000015     ........r.......
   1cdc0:	00000183 00000009 0001ca72 00000015     ........r.......
   1cdd0:	00000188 0000000d 0001ca72 00000015     ........r.......
   1cde0:	0000018d 00000011 0001ca72 00000015     ........r.......
   1cdf0:	00000192 00000015 0001ca72 00000015     ........r.......
   1ce00:	0000019f 00000024 0001ca72 00000015     ....$...r.......
   1ce10:	0000019f 00000036 0001ca72 00000015     ....6...r.......
   1ce20:	000001a7 00000016 50494843 6f742038     ........CHIP8 to
   1ce30:	20686375 20746f6e 646e6168 0a64656c     uch not handled.
   1ce40:	6c6c6163 60206465 6974704f 3a3a6e6f     called `Option::
   1ce50:	72776e75 29287061 6e6f2060 60206120     unwrap()` on a `
   1ce60:	656e6f4e 61762060 7365756c 66206970     None` valuespi f
   1ce70:	6873756c 69616620 73552f6c 2f737265     lush fail/Users/
   1ce80:	7070754c 69502f79 6954656e 702f656d     Luppy/PineTime/p
   1ce90:	74656e69 2d656d69 74737572 6e796d2d     inetime-rust-myn
   1cea0:	2f747765 74737572 3774732f 2d353337     ewt/rust/st7735-
   1ceb0:	2d64636c 63746162 73722d68 6372732f     lcd-batch-rs/src
   1cec0:	62696c2f 0073722e 0001ce79 0000004e     /lib.rs.y...N...
   1ced0:	000000fe 00000009 0001ce79 0000004e     ........y...N...
   1cee0:	000000f3 00000009 6573552f 4c2f7372     ......../Users/L
   1cef0:	79707075 61632e2f 2f6f6772 69676572     uppy/.cargo/regi
   1cf00:	79727473 6372732f 7469672f 2e627568     stry/src/github.
   1cf10:	2d6d6f63 63636531 39393236 65396264     com-1ecc6299db9e
   1cf20:	33323863 62696c2f 70696863 2e302d38     c823/libchip8-0.
   1cf30:	2f322e31 2f637273 2e62696c 00007372     1.2/src/lib.rs..
   1cf40:	0001cee8 00000056 0000009d 00000014     ....V...........
   1cf50:	0001cee8 00000056 000000d4 00000011     ....V...........
   1cf60:	0001cee8 00000056 000000d5 0000001a     ....V...........

0001cf70 <str.0>:
   1cf70:	65747461 2074706d 61206f74 77206464     attempt to add w
   1cf80:	20687469 7265766f 776f6c66 0001cee8     ith overflow....
   1cf90:	00000056 000000d5 00000011 00000005     V...............
   1cfa0:	0001cf9c 4c205d5b 78562044 495b202c     ....[] LD Vx, [I
   1cfb0:	0000005d 0001cfa4 00000001 0001cfa5     ]...............
   1cfc0:	0000000c 0001cfb4 00000000 00000020     ............ ...
   1cfd0:	00000008 00000002 00000000 00000000     ................
   1cfe0:	00000004 00000003 0001cfc8 6362696c     ............libc
   1cff0:	38706968 4b53205d 78562050 504a205d     hip8] SKP Vx] JP
   1d000:	6e6e6e20 00000040 00000020 0001cfec      nnn@... .......
   1d010:	00000008 0001cfec 00000008 0001cee8     ................
   1d020:	00000056 000001a1 0001d00c 0001cee8     V...............
   1d030:	00000056 000001a3 0000001d 0001cee8     V...............
   1d040:	00000056 000001a4 0000002a 0001cee8     V.......*.......
   1d050:	00000056 000001a4 00000021 0001cee8     V.......!.......
   1d060:	00000056 000001a4 00000015 444c205d     V...........] LD
   1d070:	5d495b20 7856202c 0001cfa4 00000001      [I], Vx........
   1d080:	0001d06c 0000000c 0001d078 0001cfec     l.......x.......
   1d090:	00000008 0001cfec 00000008 0001cee8     ................
   1d0a0:	00000056 0000019a 0001d08c 0001cee8     V...............
   1d0b0:	00000056 0000019c 0000001d 0001cee8     V...............
   1d0c0:	00000056 0000019d 00000035 0001cee8     V.......5.......
   1d0d0:	00000056 0000019d 0000001e 0001cee8     V...............
   1d0e0:	00000056 0000019d 00000015 444c205d     V...........] LD
   1d0f0:	202c4220 00007856 0001cfa4 00000001      B, Vx..........
   1d100:	0001d0ec 0000000a 0001d0f8 0001cfec     ................
   1d110:	00000008 0001cfec 00000008 0001cee8     ................
   1d120:	00000056 00000193 0001d10c 0001cee8     V...............
   1d130:	00000056 00000194 0000001b 0001cee8     V...............
   1d140:	00000056 00000195 00000011 0001cee8     V...............
   1d150:	00000056 00000196 0000001a 0001cee8     V...............
   1d160:	00000056 00000196 00000011 0001cee8     V...............
   1d170:	00000056 00000197 0000001a 0001cee8     V...............
   1d180:	00000056 00000197 00000011 444c205d     V...........] LD
   1d190:	202c4620 00007856 0001cfa4 00000001      F, Vx..........
   1d1a0:	0001d18c 0000000a 0001d198 0001cfec     ................
   1d1b0:	00000008 0001cfec 00000008 0001cee8     ................
   1d1c0:	00000056 0000018f 0001d1ac 0001cee8     V...............
   1d1d0:	00000056 00000190 0000001b 0001cee8     V...............
   1d1e0:	00000056 00000190 0000001a 00000000     V...............

0001d1f0 <str.1>:
   1d1f0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1d200:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1d210:	41205d77 49204444 7856202c 0001cfa4     w] ADD I, Vx....
   1d220:	00000001 0001d211 0000000b 0001d21c     ................
   1d230:	0001cfec 00000008 0001cfec 00000008     ................
   1d240:	0001cee8 00000056 0000018b 0001d230     ....V.......0...
   1d250:	0001cee8 00000056 0000018c 0000002e     ....V...........
   1d260:	444c205d 2c545320 00785620 0001cfa4     ] LD ST, Vx.....
   1d270:	00000001 0001d260 0000000b 0001d26c     ....`.......l...
   1d280:	0001cfec 00000008 0001cfec 00000008     ................
   1d290:	0001cee8 00000056 00000187 0001d280     ....V...........
   1d2a0:	0001cee8 00000056 00000188 0000001b     ....V...........
   1d2b0:	444c205d 2c544420 00785620 0001cfa4     ] LD DT, Vx.....
   1d2c0:	00000001 0001d2b0 0000000b 0001d2bc     ................
   1d2d0:	0001cfec 00000008 0001cfec 00000008     ................
   1d2e0:	0001cee8 00000056 00000183 0001d2d0     ....V...........
   1d2f0:	0001cee8 00000056 00000184 0000001b     ....V...........
   1d300:	444c205d 2c785620 00004b20 0001cfa4     ] LD Vx, K......
   1d310:	00000001 0001d300 0000000a 0001d30c     ................
   1d320:	0001cfec 00000008 0001cfec 00000008     ................
   1d330:	0001cee8 00000056 0000017f 0001d320     ....V....... ...
   1d340:	0001cee8 00000056 00000180 00000011     ....V...........
   1d350:	444c205d 2c785620 00544420 0001cfa4     ] LD Vx, DT.....
   1d360:	00000001 0001d350 0000000b 0001d35c     ....P.......\...
   1d370:	0001cfec 00000008 0001cfec 00000008     ................
   1d380:	0001cee8 00000056 0000017b 0001d370     ....V...{...p...
   1d390:	0001cee8 00000056 0000017c 00000011     ....V...|.......
   1d3a0:	4b53205d 5620504e 00000078 0001cfa4     ] SKNP Vx.......
   1d3b0:	00000001 0001d3a0 00000009 0001d3ac     ................
   1d3c0:	0001cfec 00000008 0001cfec 00000008     ................
   1d3d0:	0001cee8 00000056 00000175 0001d3c0     ....V...u.......
   1d3e0:	0001cee8 00000056 00000176 00000021     ....V...v...!...
   1d3f0:	0001cfa4 00000001 0001cff4 00000008     ................
   1d400:	0001d3f0 0001cfec 00000008 0001cfec     ................
   1d410:	00000008 0001cee8 00000056 0000016f     ........V...o...
   1d420:	0001d404 0001cee8 00000056 00000170     ........V...p...
   1d430:	00000020 5244205d 78562057 7956202c      ...] DRW Vx, Vy
   1d440:	006e202c 0001cfa4 00000001 0001d434     , n.........4...
   1d450:	0000000f 0001d444 0001cfec 00000008     ....D...........
   1d460:	0001cfec 00000008 0001cee8 00000056     ............V...
   1d470:	00000156 0001d458 0001cee8 00000056     V...X.......V...
   1d480:	00000157 0000001d 0001cee8 00000056     W...........V...
   1d490:	00000158 0000001d 0001cee8 00000056     X...........V...
   1d4a0:	0000015e 00000026 0001cee8 00000056     ^...&.......V...
   1d4b0:	0000015e 0000001d 0001cee8 00000056     ^...........V...
   1d4c0:	00000160 00000021 00000000 00000000     `...!...........

0001d4d0 <str.2>:
   1d4d0:	65747461 2074706d 63206f74 75636c61     attempt to calcu
   1d4e0:	6574616c 65687420 6d657220 646e6961     late the remaind
   1d4f0:	77207265 20687469 69642061 6f736976     er with a diviso
   1d500:	666f2072 72657a20 0000006f 0001cee8     r of zero.......
   1d510:	00000056 00000163 00000025 0001cee8     V...c...%.......
   1d520:	00000056 00000165 0000002d 00000000     V...e...-.......

0001d530 <str.3>:
   1d530:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1d540:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1d550:	00000077 0001cee8 00000056 00000165     w.......V...e...
   1d560:	00000028 00000000 00000000 00000000     (...............

0001d570 <str.4>:
   1d570:	65747461 2074706d 73206f74 74666968     attempt to shift
   1d580:	66656c20 69772074 6f206874 66726576      left with overf
   1d590:	5d776f6c 444e5220 2c785620 006b6b20     low] RND Vx, kk.
   1d5a0:	0001cfa4 00000001 0001d593 0000000c     ................
   1d5b0:	0001d5a0 0001cfec 00000008 0001cfec     ................
   1d5c0:	00000008 0001cee8 00000056 00000152     ........V...R...
   1d5d0:	0001d5b4 0001cee8 00000056 00000153     ........V...S...
   1d5e0:	00000011 504a205d 2c305620 6e6e6e20     ....] JP V0, nnn
   1d5f0:	0001cfa4 00000001 0001d5e4 0000000c     ................
   1d600:	0001d5f0 0001cfec 00000008 0001cfec     ................
   1d610:	00000008 0001cee8 00000056 0000014e     ........V...N...
   1d620:	0001d604 444c205d 202c4920 006e6e6e     ....] LD I, nnn.
   1d630:	0001cfa4 00000001 0001d624 0000000b     ........$.......
   1d640:	0001d630 0001cfec 00000008 0001cfec     0...............
   1d650:	00000008 0001cee8 00000056 0000014a     ........V...J...
   1d660:	0001d644 4e53205d 78562045 7956202c     D...] SNE Vx, Vy
   1d670:	0001cfa4 00000001 0001d664 0000000c     ........d.......
   1d680:	0001d670 0001cfec 00000008 0001cfec     p...............
   1d690:	00000008 0001cee8 00000056 00000144     ........V...D...
   1d6a0:	0001d684 0001cee8 00000056 00000145     ........V...E...
   1d6b0:	00000014 0001cee8 00000056 00000145     ........V...E...
   1d6c0:	00000021 4853205d 7856204c 7956202c     !...] SHL Vx, Vy
   1d6d0:	0001cfa4 00000001 0001d6c4 0000000c     ................
   1d6e0:	0001d6d0 0001cfec 00000008 0001cfec     ................
   1d6f0:	00000008 0001cee8 00000056 0000013f     ........V...?...
   1d700:	0001d6e4 0001cee8 00000056 00000140     ........V...@...
   1d710:	00000020 0001cee8 00000056 00000141      .......V...A...
   1d720:	0000001d 0001cee8 00000056 00000141     ........V...A...
   1d730:	00000011 5553205d 56204e42 56202c78     ....] SUBN Vx, V
   1d740:	00000079 0001cfa4 00000001 0001d734     y...........4...
   1d750:	0000000d 0001d744 0001cfec 00000008     ....D...........
   1d760:	0001cfec 00000008 0001cee8 00000056     ............V...
   1d770:	00000139 0001d758 0001cee8 00000056     9...X.......V...
   1d780:	0000013a 0000001e 0001cee8 00000056     :...........V...
   1d790:	0000013a 00000038 0001cee8 00000056     :...8.......V...
   1d7a0:	0000013b 00000011 4853205d 78562052     ;.......] SHR Vx
   1d7b0:	7956202c 0001cfa4 00000001 0001d7a8     , Vy............
   1d7c0:	0000000c 0001d7b4 0001cfec 00000008     ................
   1d7d0:	0001cfec 00000008 0001cee8 00000056     ............V...
   1d7e0:	00000134 0001d7c8 0001cee8 00000056     4...........V...
   1d7f0:	00000135 0000001f 0001cee8 00000056     5...........V...
   1d800:	00000136 0000001d 0001cee8 00000056     6...........V...
   1d810:	00000136 00000011 5553205d 78562042     6.......] SUB Vx
   1d820:	7956202c 0001cfa4 00000001 0001d818     , Vy............
   1d830:	0000000c 0001d824 0001cfec 00000008     ....$...........
   1d840:	0001cfec 00000008 0001cee8 00000056     ............V...
   1d850:	0000012e 0001d838 0001cee8 00000056     ....8.......V...
   1d860:	0000012f 0000001e 0001cee8 00000056     /...........V...
   1d870:	0000012f 00000038 0001cee8 00000056     /...8.......V...
   1d880:	00000130 00000011 4441205d 78562044     0.......] ADD Vx
   1d890:	7956202c 0001cfa4 00000001 0001d888     , Vy............
   1d8a0:	0000000c 0001d894 0001cfec 00000008     ................
   1d8b0:	0001cfec 00000008 0001cee8 00000056     ............V...
   1d8c0:	00000128 0001d8a8 0001cee8 00000056     (...........V...
   1d8d0:	00000129 0000001e 0001cee8 00000056     )...........V...
   1d8e0:	00000129 00000038 0001cee8 00000056     )...8.......V...
   1d8f0:	0000012a 00000011 4f58205d 78562052     *.......] XOR Vx
   1d900:	7956202c 0001cfa4 00000001 0001d8f8     , Vy............
   1d910:	0000000c 0001d904 0001cfec 00000008     ................
   1d920:	0001cfec 00000008 0001cee8 00000056     ............V...
   1d930:	00000124 0001d918 0001cee8 00000056     $...........V...
   1d940:	00000125 0000001e 0001cee8 00000056     %...........V...
   1d950:	00000125 00000011 4e41205d 78562044     %.......] AND Vx
   1d960:	7956202c 0001cfa4 00000001 0001d958     , Vy........X...
   1d970:	0000000c 0001d964 0001cfec 00000008     ....d...........
   1d980:	0001cfec 00000008 0001cee8 00000056     ............V...
   1d990:	00000120 0001d978 0001cee8 00000056      ...x.......V...
   1d9a0:	00000121 0000001e 0001cee8 00000056     !...........V...
   1d9b0:	00000121 00000011 524f205d 2c785620     !.......] OR Vx,
   1d9c0:	00795620 0001cfa4 00000001 0001d9b8      Vy.............
   1d9d0:	0000000b 0001d9c4 0001cfec 00000008     ................
   1d9e0:	0001cfec 00000008 0001cee8 00000056     ............V...
   1d9f0:	0000011c 0001d9d8 0001cee8 00000056     ............V...
   1da00:	0000011d 0000001e 0001cee8 00000056     ............V...
   1da10:	0000011d 00000011 444c205d 2c785620     ........] LD Vx,
   1da20:	00795620 0001cfa4 00000001 0001da18      Vy.............
   1da30:	0000000b 0001da24 0001cfec 00000008     ....$...........
   1da40:	0001cfec 00000008 0001cee8 00000056     ............V...
   1da50:	00000118 0001da38 0001cee8 00000056     ....8.......V...
   1da60:	00000119 0000001d 0001cee8 00000056     ............V...
   1da70:	00000119 00000011 4441205d 78562044     ........] ADD Vx
   1da80:	6b6b202c 0001cfa4 00000001 0001da78     , kk........x...
   1da90:	0000000c 0001da84 0001cfec 00000008     ................
   1daa0:	0001cfec 00000008 0001cee8 00000056     ............V...
   1dab0:	00000114 0001da98 0001cee8 00000056     ............V...
   1dac0:	00000115 0000001d 0001cee8 00000056     ............V...
   1dad0:	00000115 00000011 444c205d 2c785620     ........] LD Vx,
   1dae0:	006b6b20 0001cfa4 00000001 0001dad8      kk.............
   1daf0:	0000000b 0001dae4 0001cfec 00000008     ................
   1db00:	0001cfec 00000008 0001cee8 00000056     ............V...
   1db10:	00000110 0001daf8 0001cee8 00000056     ............V...
   1db20:	00000111 00000011 6e49205d 696c6176     ........] Invali
   1db30:	706f2064 0000203a 0001cfa4 00000001     d op: ..........
   1db40:	0001db28 0000000e 0001db38 00000000     (.......8.......
   1db50:	00000020 00000008 00000002 00000000      ...............
   1db60:	00000000 00000004 00000003 00000001     ................
   1db70:	00000020 00000008 00000002 00000000      ...............
   1db80:	00000000 00000004 00000003 0001db4c     ............L...
   1db90:	633a3a3c 3a65726f 63616d3a 3a736f72     <::core::macros:
   1dba0:	6e61703a 6d206369 6f726361 00003e73     :panic macros>..
   1dbb0:	0001db90 0000001e 00000005 00000032     ............2...
   1dbc0:	4553205d 2c785620 00795620 0001cfa4     ] SE Vx, Vy.....
   1dbd0:	00000001 0001dbc0 0000000b 0001dbcc     ................
   1dbe0:	0001cfec 00000008 0001cfec 00000008     ................
   1dbf0:	0001cee8 00000056 0000010a 0001dbe0     ....V...........
   1dc00:	0001cee8 00000056 0000010b 00000014     ....V...........
   1dc10:	0001cee8 00000056 0000010b 00000021     ....V.......!...
   1dc20:	4e53205d 78562045 6b6b202c 0001cfa4     ] SNE Vx, kk....
   1dc30:	00000001 0001dc20 0000000c 0001dc2c     .... .......,...
   1dc40:	0001cfec 00000008 0001cfec 00000008     ................
   1dc50:	0001cee8 00000056 00000104 0001dc40     ....V.......@...
   1dc60:	0001cee8 00000056 00000105 00000014     ....V...........
   1dc70:	4553205d 20785620 00006b6b 0001cfa4     ] SE Vx kk......
   1dc80:	00000001 0001dc70 0000000a 0001dc7c     ....p.......|...
   1dc90:	0001cfec 00000008 0001cfec 00000008     ................
   1dca0:	0001cee8 00000056 000000fe 0001dc90     ....V...........
   1dcb0:	0001cee8 00000056 000000ff 00000014     ....V...........
   1dcc0:	4143205d 6e204c4c 00006e6e 0001cfa4     ] CALL nnn......
   1dcd0:	00000001 0001dcc0 0000000a 0001dccc     ................
   1dce0:	0001cfec 00000008 0001cfec 00000008     ................
   1dcf0:	0001cee8 00000056 000000f9 0001dce0     ....V...........
   1dd00:	0001cfa4 00000001 0001cffc 00000008     ................
   1dd10:	0001dd00 0001cfec 00000008 0001cfec     ................
   1dd20:	00000008 0001cee8 00000056 000000f5     ........V.......
   1dd30:	0001dd14 5953205d 6e6e2053 0000006e     ....] SYS nnn...
   1dd40:	0001cfa4 00000001 0001dd34 00000009     ........4.......
   1dd50:	0001dd40 0001cfec 00000008 0001cfec     @...............
   1dd60:	00000008 0001cee8 00000056 000000f1     ........V.......
   1dd70:	0001dd54 20746f6e 6c706d69 6e656d65     T...not implemen
   1dd80:	00646574 0001db90 0000001e 00000002     ted.............
   1dd90:	00000002 4552205d 00000054 0001cfa4     ....] RET.......
   1dda0:	00000001 0001dd94 00000005 0001dd9c     ................
   1ddb0:	0001cfec 00000008 0001cfec 00000008     ................
   1ddc0:	0001cee8 00000056 000000ec 0001ddb0     ....V...........
   1ddd0:	4c43205d 00000053 0001cfa4 00000001     ] CLS...........
   1dde0:	0001ddd0 00000005 0001ddd8 0001cfec     ................
   1ddf0:	00000008 0001cfec 00000008 0001cee8     ................
   1de00:	00000056 000000e5 0001ddec 0001cee8     V...............
   1de10:	00000056 00000093 0000001b 0001cee8     V...............
   1de20:	00000056 00000097 00000009 0001cee8     V...............
   1de30:	00000056 000000bb 0000000d 0001cee8     V...............
   1de40:	00000056 000000be 0000000d              V...........

0001de4c <_ZN8libchip87CHARBUF17h227c6d0d7e24574cE>:
   1de4c:	909090f0 206020f0 10f07020 f0f080f0     ..... `  p......
   1de5c:	f010f010 10f09090 f080f010 80f0f010     ................
   1de6c:	f0f090f0 40402010 90f090f0 f090f0f0     ..... @@........
   1de7c:	90f0f010 e09090f0 e090e090 808080f0     ................
   1de8c:	9090e0f0 80f0e090 f0f080f0 8080f080     ................
   1de9c:	72656874 73692065 206f6e20 68637573     there is no such
   1deac:	69687420 6120676e 6e612073 71636120      thing as an acq
   1debc:	65726975 6c65722f 65736165 616f6c20     uire/release loa
   1decc:	75722f64 2f637473 61376535 36363466     d/rustc/5e7af466
   1dedc:	30386639 36663565 34313238 35306631     9f80e5f682141f05
   1deec:	33393130 37366261 64666139 31623462     0193ab679afdb4b1
   1defc:	6372732f 62696c2f 65726f63 63616d2f     /src/libcore/mac
   1df0c:	2f736f72 2e646f6d 00007372 0001decd     ros/mod.rs......
   1df1c:	00000049 0000000a 00000009 72656874     I...........ther
   1df2c:	73692065 206f6e20 68637573 69687420     e is no such thi
   1df3c:	6120676e 20612073 656c6572 20657361     ng as a release 
   1df4c:	64616f6c 00011cfd 00000000 00000001     load............
   1df5c:	000120bd 000120c9 000120d3 0001df50     . ... ... ..P...
   1df6c:	00011cfd 00000000 00000001 000120bd     ............. ..
   1df7c:	000120c9 000120d3                       . ... ..

0001df84 <_ZN3log6logger3NOP17h5a3de47970f20990E>:
   1df84:	00697073 0001c124 65737361 6f697472     spi.$...assertio
   1df94:	6166206e 64656c69 2860203a 7466656c     n failed: `(left
   1dfa4:	203d3d20 68676972 0a602974 656c2020      == right)`.  le
   1dfb4:	203a7466 0a2c6060 67697220 203a7468     ft: ``,. right: 
   1dfc4:	203a6060 0001df8c 0000002d 0001dfb9     ``: ....-.......
   1dfd4:	0000000c 0001dfc5 00000003 0001dfc8     ................
   1dfe4:	20697073 666e6f63 66206769 006c6961     spi config fail.
   1dff4:	0001dfe4 0000000f 0001dff4 0001e000     ................
   1e004:	74737572 6e796d2f 2f747765 2f637273     rust/mynewt/src/
   1e014:	2e697073 00007372 0001e004 00000016     spi.rs..........
   1e024:	00000050 0000004a 20697073 66206263     P...J...spi cb f
   1e034:	006c6961 0001e02c 0000000b 0001e038     ail.,.......8...
   1e044:	0001e004 00000016 00000057 00000005     ........W.......
   1e054:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   1e064:	0001e054 0000000f 0001e064 0001e004     T.......d.......
   1e074:	00000016 0000005a 00000037 6f697067     ....Z...7...gpio
   1e084:	69616620 0000006c 0001e080 00000009      fail...........
   1e094:	0001e08c 0001e004 00000016 0000005b     ............[...
   1e0a4:	00000040 0001e004 00000016 0000005c     @...........\...
   1e0b4:	00000040 6575716d 66206575 006c6961     @...mqueue fail.
   1e0c4:	0001e0b8 0000000b 0001e0c4 0001e004     ................
   1e0d4:	00000016 00000065 00000005 206d6573     ....e.......sem 
   1e0e4:	6c696166 20697073 6c696166 0001e0e0     failspi fail....
   1e0f4:	00000008 0001e0f0 0001e004 00000016     ................
   1e104:	00000069 00000005 0001e004 00000016     i...............
   1e114:	0000006d 00000005 00000000 0001df84     m...............
   1e124:	00000004 0001e11c 6e657665 66207174     ........eventq f
   1e134:	006c6961 0001e004 00000016 00000081     ail.............
   1e144:	00000009 63206f6e 6220646d 00657479     ....no cmd byte.
   1e154:	0001e004 00000016 00000097 00000005     ................
   1e164:	0001e004 00000016 00000099 00000016     ................
	...

0001e180 <str.0>:
   1e180:	65747461 2074706d 61206f74 77206464     attempt to add w
   1e190:	20687469 7265766f 776f6c66 20697073     ith overflowspi 
   1e1a0:	7265766f 776f6c66 0001e004 00000016     overflow........
   1e1b0:	00000099 00000005 0001e004 00000016     ................
   1e1c0:	000000a8 00000012 0001e004 00000016     ................
   1e1d0:	000000c1 00000035 00000000 00000000     ....5...........

0001e1e0 <str.1>:
   1e1e0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1e1f0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1e200:	00000077 0001e004 00000016 000000c4     w...............
   1e210:	0000000f 20746e69 20697073 6c696166     ....int spi fail
   1e220:	0001e004 00000016 00000101 00000011     ................
   1e230:	0001e004 00000016 00000111 00000015     ................

0001e240 <str.2>:
   1e240:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1e250:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1e260:	00000077 0001e004 00000016 0000010f     w...............
   1e270:	00000011 0001e004 00000016 00000117     ................
   1e280:	00000011 0001e004 00000016 00000124     ............$...
   1e290:	00000009 20646162 20697073 006e656c     ....bad spi len.
   1e2a0:	0001e004 00000016 0000012b 00000005     ........+.......
   1e2b0:	0001e0e8 00000008 0001e2b0 0001e004     ................
   1e2c0:	00000016 00000141 00000009 0001e004     ....A...........
   1e2d0:	00000016 0000014a 00000009 0001e004     ....J...........
   1e2e0:	00000016 0000014e 00000030 0001e004     ....N...0.......
   1e2f0:	00000016 0000015a 00000005 0001e004     ....Z...........
   1e300:	00000016 0000015f 00000017 0001c124     ...._.......$...
   1e310:	65737361 6f697472 6166206e 64656c69     assertion failed
   1e320:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   1e330:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   1e340:	67697220 203a7468 203a6060 0001e310      right: ``: ....
   1e350:	0000002d 0001e33d 0000000c 0001e349     -...=.......I...
   1e360:	00000003 0001e34c 20697073 666e6f63     ....L...spi conf
   1e370:	66206769 006c6961 0001e368 0000000f     ig fail.h.......
   1e380:	0001e378 0001e384 74737572 6e796d2f     x.......rust/myn
   1e390:	2f747765 2f637273 2e6c6168 00007372     ewt/src/hal.rs..
   1e3a0:	0001e388 00000016 00000016 00000009     ................
   1e3b0:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   1e3c0:	0001e3b0 0000000f 0001e3c0 0001e388     ................
   1e3d0:	00000016 00000019 00000009 20697073     ............spi 
   1e3e0:	74696e69 69616620 0000006c 0001e3dc     init fail.......
   1e3f0:	0000000d 0001e3ec 0001e388 00000016     ................
   1e400:	0000001c 00000009 6f697067 69616620     ........gpio fai
   1e410:	0000006c 0001e408 00000009 0001e414     l...............
   1e420:	0001e388 00000016 00000045 00000009     ........E.......
   1e430:	0001e388 00000016 0000006c 0000001b     ........l.......

0001e440 <str.0>:
   1e440:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1e450:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1e460:	6c616377 2064656c 74704f60 3a6e6f69     wcalled `Option:
   1e470:	776e753a 28706172 6f206029 2061206e     :unwrap()` on a 
   1e480:	6e6f4e60 76206065 65756c61 00002928     `None` value()..
   1e490:	0000a48b 00000000 00000001 000144e7     .............D..
   1e4a0:	6573552f 4c2f7372 79707075 61632e2f     /Users/Luppy/.ca
   1e4b0:	2f6f6772 69676572 79727473 6372732f     rgo/registry/src
   1e4c0:	7469672f 2e627568 2d6d6f63 63636531     /github.com-1ecc
   1e4d0:	39393236 65396264 33323863 6165682f     6299db9ec823/hea
   1e4e0:	73656c70 2e302d73 2f312e35 2f637273     pless-0.5.1/src/
   1e4f0:	2e636576 00007372 0001e4a0 00000056     vec.rs......V...
   1e500:	00000066 00000009 00000000 00000000     f...............

0001e510 <str.0>:
   1e510:	65747461 2074706d 61206f74 77206464     attempt to add w
   1e520:	20687469 7265766f 776f6c66 0001e4a0     ith overflow....
   1e530:	00000056 0000003e 0000000c 0001e4a0     V...>...........
   1e540:	00000056 0000007e 00000011 00000000     V...~...........

0001e550 <str.1>:
   1e550:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1e560:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1e570:	00000077 2f637273 6362696c 2f65726f     w...src/libcore/
   1e580:	2f6d756e 32636564 2f746c66 66776172     num/dec2flt/rawf
   1e590:	73722e70 65646e69 756f2078 666f2074     p.rsindex out of
   1e5a0:	756f6220 3a73646e 65687420 6e656c20      bounds: the len
   1e5b0:	20736920 00000000 00000020 00000008      is .... .......
   1e5c0:	00000002 00000000 00000000 00000002     ................
   1e5d0:	00000003 2f637273 6362696c 2f65726f     ....src/libcore/
   1e5e0:	63696e75 2f65646f 6e697270 6c626174     unicode/printabl
   1e5f0:	73722e65 00000000 00000020 00000004     e.rs.... .......
   1e600:	00000002 00000000 00000002 00000000     ................
   1e610:	00000003 00000000 00000020 00000008     ........ .......
   1e620:	00000002 00000000 00000001 00000001     ................
   1e630:	00000003 002e2e60 0001e635 00000002     ....`...5.......
   1e640:	65726c61 20796461 72726f62 6465776f     already borrowed
   1e650:	68772029 73206e65 6963696c 6020676e     ) when slicing `
   1e660:	72616843 46797254 456d6f72 726f7272     CharTryFromError
   1e670:	6f636544 74556564 45363166 726f7272     DecodeUtf16Error

0001e680 <_ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE>:
   1e680:	00010201 00000000 00000000 00000000     ................
   1e690:	72657469 20202020 2e2e202c 65757274     iter    , ..true
   1e6a0:	72657449 203d3c20 61746164 646e696b     Iter <= datakind
   1e6b0:	746e616d 73756c70 6f72655a 79706f43     mantplusZeroCopy
   1e6c0:	7373654c 65646f63 65707954 656e6f44     LesscodeTypeDone
   1e6d0:	72616843 6b636142 68746f42 6d657449     CharBackBothItem
   1e6e0:	656c6966 656e696c 7466654c 6c696174     filelineLefttail
   1e6f0:	656b6177 706f7264 32783875 32783869     wakedropu8x2i8x2
   1e700:	34783875 34783869 38783875 38783869     u8x4i8x4u8x8i8x8
   1e710:	6c6c6163 60206465 6974704f 3a3a6e6f     called `Option::
   1e720:	72776e75 29287061 6e6f2060 60206120     unwrap()` on a `
   1e730:	656e6f4e 61762060 3a65756c 00000020     None` value: ...
   1e740:	0001e574 00000000 0001e73b 00000002     t.......;.......
   1e750:	0001541b 00000000 00000001 0001546b     .T..........kT..
   1e760:	74756220 65687420 646e6920 69207865      but the index i
   1e770:	00002073 0001e594 00000020 0001e760     s ...... ...`...
   1e780:	00000012 0001541b 0000000c 00000004     .....T..........
   1e790:	0001567b 000159d1 00015a81 202c0a2c     {V...Y...Z..,., 
   1e7a0:	2c280a28 30783029 30313030 30333032     (.(,)0x000102030
   1e7b0:	30353034 30373036 31393038 31313130     4050607080910111
   1e7c0:	31333132 31353134 31373136 32393138     2131415161718192
   1e7d0:	32313230 32333232 32353234 32373236     0212223242526272
   1e7e0:	33393238 33313330 33333332 33353334     8293031323334353
   1e7f0:	33373336 34393338 34313430 34333432     6373839404142434
   1e800:	34353434 34373436 35393438 35313530     4454647484950515
   1e810:	35333532 35353534 35373536 36393538     2535455565758596
   1e820:	36313630 36333632 36353634 36373636     0616263646566676
   1e830:	37393638 37313730 37333732 37353734     8697071727374757
   1e840:	37373736 38393738 38313830 38333832     6777879808182838
   1e850:	38353834 38373836 39393838 39313930     4858687888990919
   1e860:	39333932 39353934 39373936 00393938     293949596979899.
   1e870:	0001541b 00000004 00000004 00015aa5     .T...........Z..
   1e880:	00015aab 00015ab1 2f637273 6362696c     .Z...Z..src/libc
   1e890:	2f65726f 2f746d66 2e646f6d 00007372     ore/fmt/mod.rs..
   1e8a0:	0001e888 00000016 0000043b 00000011     ........;.......
   1e8b0:	0001e888 00000016 00000445 00000024     ........E...$...
   1e8c0:	2f637273 6362696c 2f65726f 63696c73     src/libcore/slic
   1e8d0:	6f6d2f65 73722e64 65646e69 6f202078     e/mod.rsindex  o
   1e8e0:	6f207475 61722066 2065676e 20726f66     ut of range for 
   1e8f0:	63696c73 666f2065 6e656c20 20687467     slice of length 
   1e900:	0001e8d8 00000006 0001e8de 00000022     ............"...
   1e910:	0001e8c0 00000018 00000a72 00000005     ........r.......
   1e920:	63696c73 6e692065 20786564 72617473     slice index star
   1e930:	61207374 62202074 65207475 2073646e     ts at  but ends 
   1e940:	00207461 0001e920 00000016 0001e936     at . .......6...
   1e950:	0000000d 0001e8c0 00000018 00000a78     ............x...
   1e960:	00000005 696e6966 64656873 73796168     ....finishedhays
   1e970:	6b636174 79622820 20736574 6167654e     tack (bytes Nega
   1e980:	65766974 69736f50 65766974 65746e69     tivePositiveinte
   1e990:	6c617267 61706e55 64656b63 69666e49     gralUnpackedInfi
   1e9a0:	6574696e 756e694d 77615273 7265764f     niteMinusRawOver
   1e9b0:	776f6c66 6b636162 72657469 6f746e49     flowbackiterInto
   1e9c0:	72657449 61636f6c 6e6f6974 61636f4c     IterlocationLoca
   1e9d0:	6e6f6974 72616573 72656863 69736f70     tionsearcherposi
   1e9e0:	6e6f6974 74697263 736f705f 656e694c     tioncrit_posLine
   1e9f0:	796e4173 57776152 72656b61 6f6c6c41     sAnyRawWakerAllo
   1ea00:	72724563 38746e69 745f3478 2f637273     cErrint8x4_tsrc/
   1ea10:	6362696c 2f65726f 2f727473 2e646f6d     libcore/str/mod.
   1ea20:	2e5b7372 625d2e2e 20657479 65646e69     rs[...]byte inde
   1ea30:	69202078 756f2073 666f2074 756f6220     x  is out of bou
   1ea40:	2073646e 6020666f 0001ea27 0000000b     nds of `'.......
   1ea50:	0001ea32 00000016 0001e634 00000001     2.......4.......
   1ea60:	0001ea0c 00000016 00000853 00000009     ........S.......
   1ea70:	69676562 3d3c206e 646e6520 00002820     begin <= end (..
   1ea80:	0001ea70 0000000e 0001e6a4 00000004     p...............
   1ea90:	0001e650 00000010 0001e634 00000001     P.......4.......
   1eaa0:	0001ea0c 00000016 00000857 00000005     ........W.......
   1eab0:	0001ea0c 00000016 00000868 0000000e     ........h.......
   1eac0:	20736920 20746f6e 68632061 62207261      is not a char b
   1ead0:	646e756f 3b797261 20746920 69207369     oundary; it is i
   1eae0:	6469736e 20292065 6020666f 0001ea27     nside ) of `'...
   1eaf0:	0000000b 0001eac0 00000026 0001e974     ........&...t...
   1eb00:	00000008 0001eae6 00000006 0001e634     ............4...
   1eb10:	00000001 0001ea0c 00000016 0000086a     ............j...
   1eb20:	00000005 0001e5d4 00000020 0000001a     ........ .......
   1eb30:	00000028 05030100 03060605 08080607     (...............
   1eb40:	1c0a1109 140c190b 0d0e120d 0310040f     ................
   1eb50:	09131212 05170116 03190218 021c071a     ................
   1eb60:	161f011d 042b0320 0b2d022c 0330012e     .... .+.,.-...0.
   1eb70:	01320231 02a902a7 08ab04aa 05fb02fa     1.2.............
   1eb80:	03fe04fd 78ad09ff a28d8b79 8b585730     .......xy...0WX.
   1eb90:	1d1c908c 4b0f0edd 2efcfb4c 5d5c3f2f     .......KL.../?\]
   1eba0:	84e2b55f 92918e8d bbbab1a9 cac9c6c5     _...............
   1ebb0:	ffe5e4de 12110400 37343129 493d3b3a     ........)147:;=I
   1ebc0:	8e845d4a b4b1a992 cac6bbba e5e4cfce     J]..............
   1ebd0:	0e0d0400 31291211 453b3a34 5e4a4946     ......)14:;EFIJ^
   1ebe0:	91846564 cec99d9b 29110dcf 64574945     de.........)EIWd
   1ebf0:	a9918d65 c5bbbab4 e5e4dfc9 110d04f0     e...............
   1ec00:	65644945 b2848180 d5bfbebc 83f1f0d7     EIde............
   1ec10:	a6a48b85 c7c5bfbe dbdacfce cdbd9848     ............H...
   1ec20:	49cfcec6 59574f4e 8e895f5e b7b6b18f     ...INOWY^_......
   1ec30:	c7c6c1bf 171611d7 f7f65c5b 0d80fffe     ........[\......
   1ec40:	dfde716d 6e1f0f0e 5f1d1c6f afae7e7d     mq.....no.._}~..
   1ec50:	16fabcbb 461f1e17 584f4e47 7e5e5c5a     .......FGNOXZ\^~
   1ec60:	d4c5b57f f1f0dcd5 8f7372f5 97967574     .........rs.tu..
   1ec70:	2e265f2f b7afa72f d7cfc7bf 97409adf     /_&./.........@.
   1ec80:	1f8f3098 ffcec1c0 5b5a4f4e 100f0807     .0......NOZ[....
   1ec90:	efee2f27 3d376f6e 9045423f 53fffe91     '/..no7=?BE....S
   1eca0:	c9c87567 d9d8d1d0 00fffee7 82225f20     gu.......... _".
   1ecb0:	448204df 06041b08 0eac8111 1e35ab80     ...D..........5.
   1ecc0:	03e08015 04010819 0434042f 07010307     ......../.4.....
   1ecd0:	0a110706 07120f50 04020855 03090a1c     ....P...U.......
   1ece0:	03070308 03030302 0305040c 0e01060b     ................
   1ecf0:	033a0515 05060711 07570710 0d150702     ..:.......W.....
   1ed00:	03430450 0401032d 0c0f0611 251d043a     P.C.-.......:..%
   1ed10:	046d205f c880256a 03b08205 fd82061a     _ m.j%..........
   1ed20:	15075903 1409170b 6a0c140c 1a060a06     .Y.........j....
   1ed30:	2b075906 2c0a4605 01040c04 2c0b3103     .Y.+.F.,.....1.,
   1ed40:	0b061a04 06ac8003 411f060a 032d044c     ...........AL.-.
   1ed50:	033c0874 073c030f 052b0838 1811ff82     t.<...<.8.+.....
   1ed60:	2d112f08 21102003 048c800f 0b199782     ./.-. .!........
   1ed70:	05948815 073b052f 09180e02 7430b080     ..../.;.......0t
   1ed80:	1ad6800c ff80050c 05b68005 c69b0c24     ............$...
   1ed90:	1030d20a 37038d84 145c8109 8008b880     ..0....7..\.....
   1eda0:	043530c7 0838060a 060c0846 031e0b74     .05...8.F...t...
   1edb0:	0959045a 1c188380 4809160a 068a8008     Z.Y........H....
   1edc0:	170ca4ab 04a13104 0726da81 8005050c     .....1....&.....
   1edd0:	6d8111a5 2a287810 80044c06 be80048d     ...m.x(*.L......
   1ede0:	0f031b03 0106000d 04010301 09080802     ................
   1edf0:	0b050a02 11011002 13051204 15021411     ................
   1ee00:	19021702 1d051c04 6a012408 bc026b03     .........$.j.k..
   1ee10:	d402d102 d609d50c da02d702 e105e001     ................
   1ee20:	ee02e802 f904f020 0c02fa06 4e3e3b27     .... .......';>N
   1ee30:	9e9e8f4f 0907069f 563e3d36 04d1d0f3     O.......6=>V....
   1ee40:	37361814 35bd5756 12e0cfce 9e8e8987     ..67VW.5........
   1ee50:	110e0d04 34312912 4946453a 644f4e4a     .....)14:EFIJNOd
   1ee60:	b65c5a65 a81c1bb7 09d9d8a9 a8919037     eZ\.........7...
   1ee70:	3e3b0a07 928f6966 efee5f6f 9b9a625a     ..;>fi..o_..Zb..
   1ee80:	9d552827 a4a3a1a0 baada8a7 0b06c4bc     '(U.............
   1ee90:	3a1d150c a651453f a0cdcca7 221a1907     ...:?EQ........"
   1eea0:	c53f3e25 232004c6 33282625 4a483a38     %>?... #%&(38:HJ
   1eeb0:	5553504c 5c5a5856 6563605e 78736b66     LPSUVXZ\^`cefksx
   1eec0:	a48a7f7d c0b0afaa a3720cd0 6ecccba4     }.........r....n
   1eed0:	7b225e6f 2d040305 01046503 82802e2f     o^"{...-.e../...
   1eee0:	0f31031d 0924041c 052b051e 2a0e0444     ..1...$...+.D..*
   1eef0:	2406aa80 28042404 010b3408 37819080     ...$.$.(.4.....7
   1ef00:	080a1609 03399880 30090863 03210516     ......9.c..0..!.
   1ef10:	4001051b 054b0438 070a042f 20400709     ...@8.K./.....@ 
   1ef20:	090c0427 053a0336 0c04071a 37495007     '...6.:......PI7
   1ef30:	07330d33 810a082e 81801f26 802a0828     3.3.....&...(.*.
   1ef40:	4e091786 430f1e04 0a07190e 27094706     ...N...C.....G.'
   1ef50:	3f0b7509 3b062a41 51060a05 10050106     .u.?A*.;...Q....
   1ef60:	8b800503 08482060 5ea6800a 0a0b4522     ....` H....^"E..
   1ef70:	39130d06 2c360a07 c0801004 0c53643c     ...9..6,....<dS.
   1ef80:	45a08001 5308481b 0781391d 031d0a46     ...E.H.S.9..F...
   1ef90:	03374947 060a080e 810a0739 c7801936     GI7.....9...6...
   1efa0:	9b830d32 800b7566 84bc8ac4 82d18f2f     2...fu....../...
   1efb0:	82b9a147 042a0739 0a266002 05280a46     G...9.*..`&.F.(.
   1efc0:	5bb08213 39044b65 04401107 08f8971c     ...[eK.9..@.....
   1efd0:	0da5f382 03311f81 81080411 6b04898c     ......1........k
   1efe0:	09030d05 60931007 730af680 46176e08     .......`...s.n.F
   1eff0:	0c149a80 80190957 03478187 150f4285     ....W.....G..B..
   1f000:	802b5085 1a032dd5 70810204 8501053a     .P+..-.....p:...
   1f010:	29d78000 040a044c 44118302 c2803d4c     ...)L......DL=..
   1f020:	0401063c 341b0555 2c0e8102 560c6404     <...U..4...,.d.V
   1f030:	5d030d0a 1d393d03 09042c0d 060e0207     ...].=9..,......
   1f040:	d6839a80 0b030d0a 590c7405 0c140c07     .........t.Y....
   1f050:	0a083804 1e082806 31037752 0ca68003     .8...(..Rw.1....
   1f060:	05030414 85060d03 6372736a 62696c2f     ........jsrc/lib
   1f070:	65726f63 696e752f 65646f63 646f6d2f     core/unicode/mod
   1f080:	0073722e 0001f069 0000001a 00000038     .rs.i.......8...
   1f090:	0000000f 0001f069 0000001a 00000039     ....i.......9...
   1f0a0:	00000010                                ....

0001f0a4 <_ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E>:
   1f0a4:	1b150f04 17120319 0e000011 00000016     ................
	...
   1f0cc:	00130600 00000000 00000000 00000000     ................
   1f0dc:	00000000 07020000 0c08000a 1a181c1d     ................
	...
   1f0fc:	01050000 00000000 00000000 00000000     ................
   1f10c:	00000000 10000000 00000000 0009000b     ................
   1f11c:	                                         ...

0001f11f <_ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E>:
	...
   1f13b:	00120f00 00000000 00000000 00000000     ................
   1f14b:	0000001f 00000000 00000000 00000000     ................
   1f15b:	1d664649 00000000 00000000 00000000     IFf.............
   1f16b:	00003e8a 00000000 00000000 4b000000     .>.............K
   1f17b:	00000053 00000000 00000000 42236700     S............g#B
	...
   1f197:	0000003d 00230000 00000000 00000000     =.....#.........
   1f1a7:	2d000075 00000000 00000000 00000000     u..-............
   1f1b7:	003c4e82 00000000 00000000 63000000     .N<............c
   1f1c7:	25000000 00005a00 00000000 00368100     ...%.Z........6.
   1f1d7:	00000300 00000000 00000000 0000002f     ............/...
   1f1e7:	00000000 00001000 13000000 00000800     ................
	...
   1f1ff:	43000000 89007200 00000000 00000000     ...C.r..........
   1f20f:	00070000 057d0000 37003f18 64400987     ......}..?.7..@d
   1f21f:	00210000 00000000 00000000 00000000     ..!.............
   1f22f:	4100000a 00000000 00000000 00000000     ...A............
   1f23f:	0030000c 0000005c 00717719 44354760     ..0.\....wq.`G5D
   1f24f:	7400002e 2c651139 507f5e51 34000000     ...t9.e,Q^.P...4
   1f25f:	00000031 00000053 3a000000 00000000     1...S......:....
   1f26f:	88001a38 696b2b5f 845d4f5d 14682a80     8..._+ki]O]..*h.
   1f27f:	0017003b 00000000 00000000 00000000     ;...............
   1f28f:	57000055 83000000 00000000 00000000     U..W............
   1f29f:	00000059 26000000 00161b6e 00000000     Y......&n.......
   1f2af:	001c4a6d 00000000 00000000 00002400     mJ...........$..
   1f2bf:	0052007c 0015067b 48000000 00000000     |.R.{......H....
   1f2cf:	2776287e 2200296c 0d610e5b 04627056     ~(v'l)."[.a.Vpb.
   1f2df:	02782085 1e7a0000 00540179 00000033     . x...z.y.T.3...
   1f2ef:	00587386 0b6f454d 3200006a 00004c6c     .sX.MEo.j..2lL..
   1f2ff:	00008a89 3e8a8a8a 00000000 00000000     .......>........
	...

0001f310 <_ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E>:
	...
   1f318:	00000001 00000000 0000000d 00000000     ................
   1f328:	0000001c 00000000 00000040 00000000     ........@.......
   1f338:	000000b6 00000000 000000bf 00000000     ................
   1f348:	000003f8 00000000 000007f0 00000000     ................
   1f358:	000007ff 00000000 00001000 00000000     ................
   1f368:	00001e00 00000000 00003800 00000000     .........8......
   1f378:	00003f00 00000000 00007f80 00000000     .?..............
   1f388:	00008000 00000000 0001ffc0 00000000     ................
   1f398:	0003ff80 00000000 00078000 00000000     ................
   1f3a8:	007f0000 00000000 00802001 00000000     ......... ......
   1f3b8:	00a30000 00000000 037ffc00 00000000     ................
   1f3c8:	06000000 00000000 07ff0000 00000000     ................
   1f3d8:	09800000 00000000 0e000000 00000000     ................
   1f3e8:	0e7e0080 00000000 20002064 00000000     ..~.....d . ....
   1f3f8:	200ffe40 00000000 30000001 00000000     @.. .......0....
   1f408:	40000000 00000000 4000005c 00000000     ...@....\..@....
   1f418:	60000000 00000000 805c8400 00000000     ...`......\.....
   1f428:	c0000000 00000000 e0000000 00000000     ................
   1f438:	00000000 00000001 0cf00000 00000001     ................
   1f448:	00603044 0000000c 00603dc1 0000000c     D0`......=`.....
   1f458:	0080201e 0000000c 00c0201e 0000000c     . ....... ......
   1f468:	00fe21fe 0000000c 00000000 00000020     .!.......... ...
   1f478:	00000000 00000060 00000844 00000060     ....`...D...`...
   1f488:	00000000 000000f0 00000060 00000200     ........`.......
   1f498:	f9ffff7f 000007db 80000000 000007f8     ................
   1f4a8:	e0000000 00000fbc 00000000 00002120     ............ !..
   1f4b8:	00000003 00003b3c 00000fe7 00003c00     ....<;.......<..
   1f4c8:	9fc00000 00003d9f fbc00000 00003eef     .....=.......>..
   1f4d8:	00000000 00003fc0 00000000 0000f000     .....?..........
   1f4e8:	00000000 0000fc00 f8000010 0000fffe     ................
   1f4f8:	0000ffff 0000ffff ffffffff 0000ffff     ................
   1f508:	fffff800 00010000 00000000 0001ffc0     ................
   1f518:	ffff0000 0001ffff 00000000 00030000     ................
   1f528:	00000000 00038000 00000000 0003a340     ............@...
   1f538:	00000000 00080000 000c0000 000c0000     ................
   1f548:	00000004 000ff800 00000000 00180000     ................
   1f558:	001c0000 001c0000 c3000000 001e0001     ................
   1f568:	00000000 001f0000 00800001 001f1fc0     ................
   1f578:	00000007 001fef80 ffffffff 00201fff     .............. .
   1f588:	00023986 00230000 00000002 00403000     .9....#......0@.
   1f598:	00000000 00667e00 fffc0000 006dfcff     .....~f.......m.
   1f5a8:	00000000 007f0000 00000000 00bf2800     .............(..
   1f5b8:	00000000 00cff000 03000000 02a00000     ................
   1f5c8:	fff70000 031021fd 00000003 06780000     .....!........x.
   1f5d8:	00000000 06ff8000 00000000 07c00000     ................
   1f5e8:	00000000 07f20000 00000000 0e040187     ................
   1f5f8:	00000006 10000000 00001008 10000000     ................
   1f608:	00000007 14000000 0000000f 17f00000     ................
   1f618:	00000000 1ff20000 feffe0df 1fffffff     ................
   1f628:	00000000 20000000 00000000 200ff800     ....... ....... 
   1f638:	00000007 33c80000 00000000 3fb00000     .......3.......?
   1f648:	00000000 3ff78000 00000004 40000000     .......?.......@
   1f658:	0080201e 4000000c 00000000 40d38000     . .....@.......@
   1f668:	00000002 50000000 00000003 58000000     .......P.......X
   1f678:	00000000 66fde000 000007fe 79f80000     .......f.......y
   1f688:	00000003 7fc00000 00000000 7ffe0000     ................
   1f698:	00000000 7fff0000 00000000 80000000     ................
   1f6a8:	0000007f 80000000 00000030 8003ffff     ........0.......
   1f6b8:	0000f06e 87000000 00000002 90000000     n...............
   1f6c8:	7f400000 9ff81fe5 00000000 a5f90000     ..@.............
   1f6d8:	00000000 a7f80000 00000000 b03c8000     ..............<.
   1f6e8:	00000000 b47e0000 00000000 bf7f0000     ......~.........
   1f6f8:	fffe0000 bfffffff 00000011 c0000000     ................
   1f708:	00000000 c19d0000 00000002 d0000000     ................
   1f718:	00000000 f807c3a0 ffffffff f87fffff     ................
   1f728:	ffffffff fbffffff 000021be fc00000c     .........!......
   1f738:	00000000 ff000000 00000002 ff000000     ................
   1f748:	00020000 ffff0000 fff80000 fffffffb     ................
   1f758:	00000000 ffffffff ffffffff ffffffff     ................
   1f768:	00000020 00006425 6c363025 00002075      ...%d..%06lu ..

0001f778 <nrf52_hal_i2cs>:
   1f778:	00000000 20000108                       ....... 

0001f780 <nrf52_hal_spis>:
   1f780:	2000ddc0 00000000 00000000 65737341     ... ........Asse
   1f790:	40207472 25783020 00000a78 65737341     rt @ 0x%x...Asse
   1f7a0:	40207472 25783020 202d2078 253a7325     rt @ 0x%x - %s:%
   1f7b0:	00000a64 61686e55 656c646e 6e692064     d...Unhandled in
   1f7c0:	72726574 20747075 646c2528 65202c29     terrupt (%ld), e
   1f7d0:	70656378 6e6f6974 20707320 30257830     xception sp 0x%0
   1f7e0:	0a786c38 00000000 3a307220 30257830     8lx..... r0:0x%0
   1f7f0:	20786c38 3a317220 30257830 20786c38     8lx  r1:0x%08lx 
   1f800:	3a327220 30257830 20786c38 3a337220      r2:0x%08lx  r3:
   1f810:	30257830 0a786c38 00000000 3a347220     0x%08lx..... r4:
   1f820:	30257830 20786c38 3a357220 30257830     0x%08lx  r5:0x%0
   1f830:	20786c38 3a367220 30257830 20786c38     8lx  r6:0x%08lx 
   1f840:	3a377220 30257830 0a786c38 00000000      r7:0x%08lx.....
   1f850:	3a387220 30257830 20786c38 3a397220      r8:0x%08lx  r9:
   1f860:	30257830 20786c38 3a303172 30257830     0x%08lx r10:0x%0
   1f870:	20786c38 3a313172 30257830 0a786c38     8lx r11:0x%08lx.
   1f880:	00000000 3a323172 30257830 20786c38     ....r12:0x%08lx 
   1f890:	3a726c20 30257830 20786c38 3a637020      lr:0x%08lx  pc:
   1f8a0:	30257830 20786c38 3a727370 30257830     0x%08lx psr:0x%0
   1f8b0:	0a786c38 00000000 52534349 2578303a     8lx.....ICSR:0x%
   1f8c0:	786c3830 53464820 78303a52 6c383025     08lx HFSR:0x%08l
   1f8d0:	46432078 303a5253 38302578 000a786c     x CFSR:0x%08lx..
   1f8e0:	52414642 2578303a 786c3830 464d4d20     BFAR:0x%08lx MMF
   1f8f0:	303a5241 38302578 000a786c 6e69616d     AR:0x%08lx..main
   1f900:	00000000 656c6469 00000000 7379736d     ....idle....msys
   1f910:	0000315f                                _1..

0001f914 <MemFile_methods>:
   1f914:	0001a121 00000000                       !.......

0001f91c <stdout>:
   1f91c:	20000124                                $.. 

0001f920 <nrf52k_flash_dev>:
   1f920:	0001f938 00000000 00080000 00000080     8...............
   1f930:	00000001 000000ff                       ........

0001f938 <nrf52k_flash_funcs>:
   1f938:	0001a38d 0001a2bd 0001a245 0001a29d     ........E.......
   1f948:	00000000 0001a299 00000000              ............

0001f954 <nrf52_hal_timers>:
   1f954:	2000ded0 00000000 00000000 00000000     ... ............
	...

0001f96c <hal_i2c1_cfg>:
   1f96c:	00000007 00000006 00000064              ........d...

0001f978 <os_bsp_spi0m_cfg>:
   1f978:	001d0302 736e6573 6e5f726f 6669746f     ....sensor_notif
   1f988:	7476655f 00000073                       _evts...

0001f990 <COLLECTOR_NODE_HW_ID>:
   1f990:	066aff57 50547878 67242949              W.j.xxTPI)$g

0001f99c <SENSOR_NODE_HW_IDS>:
   1f99c:	066dff38 3634574e 43085825 04030201     8.m.NW46%X.C....
   1f9ac:	08070605 020b0a09 04030201 08070605     ................
   1f9bc:	030b0a09 04030201 08070605 040b0a09     ................
   1f9cc:	04030201 08070605 050b0a09 77687325     ............%shw
   1f9dc:	00206469 30313025 00786c6c 646f6e20     id .%010llx. nod
   1f9ec:	00002065 65737325 726f736e 25237325     e ..%ssensor%s#%
   1f9fc:	00000a64 6f637325 63656c6c 25726f74     d...%scollector%
   1fa0c:	00000a73 74737325 61646e61 656e6f6c     s...%sstandalone
   1fa1c:	000a7325 2054454e 00000000 73257325     %s..NET ....%s%s
   1fa2c:	0a732520 00000000 00000000               %s.........

0001fa38 <sensor_node_addresses>:
   1fa38:	b4b5b6f1 000000b3 b4b5b6cd 000000b3     ................
   1fa48:	b4b5b6a3 000000b3 b4b5b60f 000000b3     ................
   1fa58:	b4b5b605 000000b3 706d6574 7574735f     ........temp_stu
   1fa68:	00305f62 20504d54 61657263 25206574     b_0.TMP create %
   1fa78:	00000a73                                s...

0001fa7c <g_temp_stub_sensor_driver>:
   1fa7c:	0001b1c9 0001b0d1 00000000 00000000     ................
	...
   1faa4:	20425453 64616572 6d657420 65732070     STB read temp se
   1fab4:	726f736e 0000000a 635f636f 62635f6c     nsor....oc_cl_cb
   1fac4:	00000073 725f636f 6f5f7065 00000000     s...oc_rep_o....

0001fad4 <sysflash_map_dflt>:
	...
   1fadc:	00004000 00000001 00008000 00073c00     .@...........<..
   1faec:	00000002 0007bc00 00000400 00000003     ................
   1fafc:	0007c000 00001000 00000010 00004000     .............@..
   1fb0c:	00004000 00000011 0007d000 00003000     .@...........0..
   1fb1c:	70616f63 6365725f 65766965 544f4e20     coap_receive NOT
   1fb2c:	504d4920 454d454c 4445544e 0000000a      IMPLEMENTED....

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  97076	    108	  57144	 154328	  25ad8	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
